type Integer = int;
type Boolean = bool;
type HeapType = <beta>[ref,Field (beta)]beta;
type TName;
type Elements m0;
type struct;
type ref;
type Field m0;
type ActivityType;
type exposeVersionType;
type ArrayCategory;
type NondetType;
const $ZeroStruct : struct;
const null : ref;
const unique $allocated : Field (bool);
const unique $elementsBool : Field (Elements (bool));
const unique $elementsInt : Field (Elements (int));
const unique $elementsRef : Field (Elements (ref));
const unique $elementsStruct : Field (Elements (struct));
const unique $inv : Field (TName);
const unique $localinv : Field (TName);
const unique $exposeVersion : Field (exposeVersionType);
const unique $ownerRef : Field (ref);
const unique $ownerFrame : Field (TName);
const unique $PeerGroupPlaceholder : TName;
const unique $ArrayCategoryValue : ArrayCategory;
const unique $ArrayCategoryInt : ArrayCategory;
const unique $ArrayCategoryRef : ArrayCategory;
const unique $ArrayCategoryNonNullRef : ArrayCategory;
const unique System.Array : TName;
const unique System.Boolean : TName;
const unique System.Object : TName;
const unique System.Type : TName;
const $BeingConstructed : ref;
const unique $NonNullFieldsAreInitialized : Field (bool);
const $PurityAxiomsCanBeAssumed : bool;
const unique $Freezer : TName;
const unique $freezerRef : ref;
const unique $frozen : Field (bool);
const unique System.String : TName;
const unique $FirstConsistentOwner : Field (ref);
const unique System.SByte : TName;
const unique System.Byte : TName;
const unique System.Int16 : TName;
const unique System.UInt16 : TName;
const unique System.Int32 : TName;
const unique System.UInt32 : TName;
const unique System.Int64 : TName;
const unique System.UInt64 : TName;
const unique System.Char : TName;
const unique System.UIntPtr : TName;
const unique System.IntPtr : TName;
const unique SExpressionSimplifier.Nary.F : Field (ref);
const unique SExpressionSimplifier.Nary.Args : Field (ref);
const unique System.IComparable`1...System.String : TName;
const unique System.Collections.IList : TName;
const unique SExpressionSimplifier.PrettySx.Token : TName;
const unique System.ICloneable : TName;
const unique SExpressionSimplifier.Nary : TName;
const unique System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator : TName;
const unique System.IO.TextWriter : TName;
const unique System.MarshalByRefObject : TName;
const unique System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx : TName;
const unique System.Collections.ICollection : TName;
const unique System.Collections.Generic.IEnumerable`1...System.Char : TName;
const unique System.IConvertible : TName;
const unique System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx : TName;
const unique System.Collections.IEnumerable : TName;
const unique System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx : TName;
const unique SExpressionSimplifier.PrettySx : TName;
const unique System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx : TName;
const unique System.Collections.IEnumerator : TName;
const unique System.IEquatable`1...System.String : TName;
const unique System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx : TName;
const unique SExpressionSimplifier.Sx : TName;
const unique System.IDisposable : TName;
const unique SExpressionSimplifier.Atom : TName;
const unique System.IComparable : TName;
const unique $stringLiteral0 : ref;
const unique $stringLiteral1 : ref;
const unique $stringLiteral2 : ref;
const unique $stringLiteral3 : ref;
const unique $stringLiteral5 : ref;
const unique $stringLiteral7 : ref;
const unique $stringLiteral9 : ref;
const unique $stringLiteral10 : ref;
const unique $stringLiteral12 : ref;
const unique $stringLiteral13 : ref;
const unique $stringLiteral14 : ref;
const unique $stringLiteral15 : ref;
const $old_$Heap : HeapType;
const $old_$ActivityIndicator : ActivityType;
function IsHeap(HeapType) : bool;
function IsPreHeap(HeapType) : bool;
function ClassRepr(TName) : ref;
function ClassReprInv(ref) : TName;
function $Utter(ref) : bool;
function IncludeInMainFrameCondition <alpha> (Field (alpha)) : bool;
function IsStaticField <alpha> (Field (alpha)) : bool;
function $IncludedInModifiesStar <alpha> (Field (alpha)) : bool;
function ArrayGet <alpha> (Elements (alpha),int) : alpha;
function ArraySet <alpha> (Elements (alpha),int,alpha) : Elements (alpha);
function ArrayIndex(ref,int,int,int) : int;
function ArrayIndexInvX(int) : int;
function ArrayIndexInvY(int) : int;
function $Rank(ref) : int;
function $Length(ref) : int;
function $DimLength(ref,int) : int;
function $LBound(ref,int) : int;
function $UBound(ref,int) : int;
function $ArrayCategory(TName) : ArrayCategory;
function $ElementType(TName) : TName;
function ValueArray(TName,int) : TName;
function IntArray(TName,int) : TName;
function RefArray(TName,int) : TName;
function NonNullRefArray(TName,int) : TName;
function NonNullRefArrayRaw(ref,TName,int) : bool;
function $ArrayPtr(TName) : TName;
function $ElementProxy(ref,int) : ref;
function $ElementProxyStruct(struct,int) : ref;
function $StructGet <alpha> (struct,Field (alpha)) : alpha;
function $StructSet <alpha> (struct,Field (alpha),alpha) : struct;
function ZeroInit(struct,TName) : bool;
function ZeroInitStruct(TName) : struct;
function $typeof(ref) : TName;
function $BaseClass(TName) : TName;
function AsDirectSubClass(TName,TName) : TName;
function OneClassDown(TName,TName) : TName;
function $IsValueType(TName) : bool;
function $IsTokenForType(struct,TName) : bool;
function TypeObject(TName) : ref;
function TypeName(ref) : TName;
function $Is(ref,TName) : bool;
function $IsNotNull(ref,TName) : bool;
function $As(ref,TName) : ref;
function IsAllocated <alpha> (HeapType,alpha) : bool;
function DeclType <alpha> (Field (alpha)) : TName;
function AsNonNullRefField(Field (ref),TName) : Field (ref);
function AsRefField(Field (ref),TName) : Field (ref);
function AsRangeField(Field (int),TName) : Field (int);
function $IsMemberlessType(TName) : bool;
function $AsInterface(TName) : TName;
function $HeapSucc(HeapType,HeapType) : bool;
function IsFrozen(ref,HeapType) : bool;
function AsFrozenField(Field (ref)) : Field (ref);
function AsElementsFrozenField(Field (ref),int) : Field (ref);
function UltimateValue <alpha> (ref,Field (alpha)) : alpha;
function $StringLength(ref) : int;
function AsRepField(Field (ref),TName) : Field (ref);
function AsPeerField(Field (ref)) : Field (ref);
function AsElementsRepField(Field (ref),TName,int) : Field (ref);
function AsElementsPeerField(Field (ref),int) : Field (ref);
function $AsPureObject(ref) : ref;
function ##FieldDependsOnFCO <alpha> (ref,Field (alpha),exposeVersionType) : alpha;
function Box <T> (T,ref) : ref;
function Unbox <T> (ref) : T;
function MeldNondets <a> (NondetType,a) : NondetType;
function BoxFunc <T> (T,TName) : ref;
function AllocFunc(TName) : ref;
function NewInstance(ref,NondetType,ActivityType) : ref;
function UnboxedType(ref) : TName;
function BoxTester(ref,TName) : ref;
function BoxDisguise <U> (U) : ref;
function UnBoxDisguise <U> (ref) : U;
function InRange(int,TName) : bool;
function $IntToInt(int,TName,TName) : int;
function $SizeIs(TName,int) : bool;
function $IfThenElse <a> (bool,a,a) : a;
function #neg(int) : int;
function #and(int,int) : int;
function #or(int,int) : int;
function #xor(int,int) : int;
function #shl(int,int) : int;
function #shr(int,int) : int;
function #min(int,int) : int;
function #max(int,int) : int;
function #System.String.IsInterned$System.String$notnull(HeapType,ref) : ref;
function #System.String.Equals$System.String(HeapType,ref,ref) : bool;
function #System.String.Equals$System.String$System.String(HeapType,ref,ref) : bool;
function ##StringEquals(ref,ref) : bool;
function #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count(HeapType,ref) : int;
function ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count(exposeVersionType) : int;
function #SExpressionSimplifier.Sx.get_IsTrue(HeapType,ref) : bool;
function ##SExpressionSimplifier.Sx.get_IsTrue(exposeVersionType) : bool;
function #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32(HeapType,ref,int) : ref;
function ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32(exposeVersionType,int) : ref;
function #System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32(HeapType,ref,int) : ref;
function ##System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32(exposeVersionType,int) : ref;
function #System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count(HeapType,ref) : int;
function ##System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count(exposeVersionType) : int;
function #System.Collections.ICollection.get_Count(HeapType,ref) : int;
function ##System.Collections.ICollection.get_Count(exposeVersionType) : int;
function #SExpressionSimplifier.Sx.get_IsFalse(HeapType,ref) : bool;
function ##SExpressionSimplifier.Sx.get_IsFalse(exposeVersionType) : bool;
function #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.GetEnumerator(HeapType,ref) : struct;
function ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.GetEnumerator(exposeVersionType) : struct;
function #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current(HeapType,struct) : ref;
function ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current(struct) : ref;
function #System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current(HeapType,ref) : ref;
function ##System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current(exposeVersionType) : ref;
var $Heap : HeapType;
var $ActivityIndicator : ActivityType;
var local4 : ref;
var local5 : ref;
var return.value : ref;
var SS$Display.Return.Local : ref;
var aa : ref;
var a1 : ref;
var a0 : ref;
var argList : ref;
var i : int;
var n : ref;
var local17 : int;
var cmp : ref;
var local18 : ref;
var foreachEnumerator^.33574638 : struct;
var local20 : ref;
var arg : ref;
var local4_$_0 : ref;
var call3formal_$_$result : ref;
var $Heap_$_0 : HeapType;
var call3formal_$_$result_$_0 : ref;
var $Heap_$_28 : HeapType;
var $Heap_$_79 : HeapType;
var return.value_$_0 : ref;
var $result_$_0 : ref;
var $Heap_$_80 : HeapType;
var stack0o_$_4 : ref;
var call4formal_$_$result : int;
var $Heap_$_23 : HeapType;
var call4formal_$_$result_$_0 : int;
var stack50000o_$_3 : ref;
var call0formal_$_this_$_0 : ref;
var $Heap_$_24 : HeapType;
var $Heap_$_25 : HeapType;
var call0formal_$_x_$_0 : ref;
var $Heap_$_26 : HeapType;
var local18_$_0 : ref;
var call3formal_$_$result_$1 : struct;
var $Heap_$_27 : HeapType;
var call3formal_$_$result_$_0_$1 : struct;
var $Heap_$_29 : HeapType;
var foreachEnumerator^.33574638_$_0 : struct;
var local20_$_0 : ref;
var arg_$_0 : ref;
var $Heap_$_30 : HeapType;
var call4formal_$_$result_$_0_$1 : bool;
var call4formal_$_$result_$1 : ref;
var $Heap_$_32 : HeapType;
var call4formal_$_$result_$_0_$2 : ref;
var call3formal_$_this$out_$_0 : struct;
var call3formal_$_$result_$2 : ref;
var $Heap_$_33 : HeapType;
var call3formal_$_$result_$_0_$2 : ref;
var $Heap_$_34 : HeapType;
var call4formal_$_$result_$2 : ref;
var $Heap_$_31 : HeapType;
var call4formal_$_$result_$_0_$3 : ref;
var stack0o_$_8 : ref;
var call4formal_$_$result_$3 : int;
var $Heap_$_35 : HeapType;
var call4formal_$_$result_$_0_$4 : int;
var stack50000o_$_4 : ref;
var call0formal_$_this_$_0_$1 : ref;
var $Heap_$_36 : HeapType;
var $Heap_$_37 : HeapType;
var call0formal_$_x_$_0_$1 : ref;
var $Heap_$_38 : HeapType;
var stack0o_$_9 : ref;
var call5formal_$_$result : ref;
var $Heap_$_39 : HeapType;
var call5formal_$_$result_$_0 : ref;
var $Heap_$_40 : HeapType;
var $Heap_$_41 : HeapType;
var local17_$_0 : int;
var i_$_0 : int;
var stack1i_$_0 : int;
var stack0i_$_0 : int;
var stack0o_$_11 : ref;
var call4formal_$_$result_$4 : int;
var $Heap_$_42 : HeapType;
var call4formal_$_$result_$_0_$5 : int;
var stack0o_$_12 : ref;
var call5formal_$_$result_$1 : ref;
var $Heap_$_44 : HeapType;
var call5formal_$_$result_$_0_$1 : ref;
var call3formal_$_$result_$3 : ref;
var $Heap_$_45 : HeapType;
var call3formal_$_$result_$_0_$3 : ref;
var $Heap_$_46 : HeapType;
var stack0i_$_1 : int;
var call4formal_$_$result_$5 : ref;
var $Heap_$_43 : HeapType;
var call4formal_$_$result_$_0_$6 : ref;
var stack0o_$_2 : ref;
var call5formal_$_$result_$2 : ref;
var $Heap_$_22 : HeapType;
var call5formal_$_$result_$_0_$2 : ref;
var stack0o_$_3 : ref;
var stack0o_$_13 : ref;
var stack1o_$_1 : ref;
var $Heap_$_47 : HeapType;
var call4formal_$_$result_$_0_$7 : bool;
var stack0o_$_14 : ref;
var call5formal_$_$result_$3 : ref;
var $Heap_$_48 : HeapType;
var call5formal_$_$result_$_0_$3 : ref;
var call3formal_$_$result_$4 : ref;
var $Heap_$_49 : HeapType;
var call3formal_$_$result_$_0_$4 : ref;
var $Heap_$_50 : HeapType;
var call3formal_$_$result_$5 : ref;
var $Heap_$_51 : HeapType;
var call3formal_$_$result_$_0_$5 : ref;
var $Heap_$_52 : HeapType;
var call3formal_$_$result_$_0_$6 : bool;
var call2formal_$_$result : ref;
var $Heap_$_54 : HeapType;
var call2formal_$_$result_$_0 : ref;
var $Heap_$_53 : HeapType;
var call3formal_$_$result_$_0_$7 : bool;
var call2formal_$_$result_$1 : ref;
var $Heap_$_55 : HeapType;
var call2formal_$_$result_$_0_$1 : ref;
var stack0o_$_15 : ref;
var stack0o_$_16 : ref;
var $Heap_$_56 : HeapType;
var call4formal_$_$result_$_0_$8 : bool;
var stack1o_$_2 : ref;
var call5formal_$_$result_$4 : ref;
var $Heap_$_58 : HeapType;
var call5formal_$_$result_$_0_$4 : ref;
var stack2o_$_0 : ref;
var call5formal_$_$result_$5 : ref;
var $Heap_$_59 : HeapType;
var call5formal_$_$result_$_0_$5 : ref;
var stack50000o_$_5 : ref;
var $Heap_$_60 : HeapType;
var $Heap_$_61 : HeapType;
var stack0o_$_17 : ref;
var $Heap_$_57 : HeapType;
var call4formal_$_$result_$_0_$9 : bool;
var stack1o_$_3 : ref;
var call5formal_$_$result_$6 : ref;
var $Heap_$_62 : HeapType;
var call5formal_$_$result_$_0_$6 : ref;
var stack2o_$_1 : ref;
var call5formal_$_$result_$7 : ref;
var $Heap_$_63 : HeapType;
var call5formal_$_$result_$_0_$7 : ref;
var stack50000o_$_6 : ref;
var $Heap_$_64 : HeapType;
var $Heap_$_65 : HeapType;
var $Heap_$_66 : HeapType;
var call4formal_$_$result_$6 : ref;
var $Heap_$_67 : HeapType;
var call4formal_$_$result_$_0_$10 : ref;
var stack0o_$_0 : ref;
var call5formal_$_$result_$8 : ref;
var $Heap_$_17 : HeapType;
var call5formal_$_$result_$_0_$8 : ref;
var call3formal_$_$result_$6 : ref;
var $Heap_$_18 : HeapType;
var call3formal_$_$result_$_0_$8 : ref;
var stack0o_$_1 : ref;
var call5formal_$_$result_$9 : ref;
var $Heap_$_19 : HeapType;
var call5formal_$_$result_$_0_$9 : ref;
var call3formal_$_$result_$7 : ref;
var $Heap_$_20 : HeapType;
var call3formal_$_$result_$_0_$9 : ref;
var $Heap_$_21 : HeapType;
var call3formal_$_$result_$_0_$10 : bool;
var $Heap_$_68 : HeapType;
var call3formal_$_$result_$_0_$11 : bool;
var $Heap_$_69 : HeapType;
var call3formal_$_$result_$_0_$12 : bool;
var $Heap_$_70 : HeapType;
var call3formal_$_$result_$_0_$13 : bool;
var call2formal_$_$result_$2 : ref;
var $Heap_$_71 : HeapType;
var call2formal_$_$result_$_0_$2 : ref;
var $Heap_$_72 : HeapType;
var call5formal_$_$result_$10 : ref;
var $Heap_$_73 : HeapType;
var call5formal_$_$result_$_0_$10 : ref;
var stack50000o_$_2 : ref;
var call0formal_$_this_$_0_$2 : ref;
var $Heap_$_11 : HeapType;
var $Heap_$_12 : HeapType;
var call0formal_$_x_$_0_$2 : ref;
var $Heap_$_13 : HeapType;
var call4formal_$_consequent$out : ref;
var $Heap_$_14 : HeapType;
var call4formal_$_consequent$out_$_0 : ref;
var call4formal_$_$result_$7 : ref;
var $Heap_$_15 : HeapType;
var call4formal_$_$result_$_0_$11 : ref;
var $Heap_$_16 : HeapType;
var call3formal_$_$result_$_0_$14 : bool;
var $Heap_$_74 : HeapType;
var call3formal_$_$result_$_0_$15 : bool;
var $Heap_$_75 : HeapType;
var call3formal_$_$result_$_0_$16 : bool;
var call2formal_$_$result_$3 : ref;
var $Heap_$_77 : HeapType;
var call2formal_$_$result_$_0_$3 : ref;
var call5formal_$_$result_$11 : ref;
var $Heap_$_76 : HeapType;
var call5formal_$_$result_$_0_$11 : ref;
var $Heap_$_78 : HeapType;
var stack50000o_$_1 : ref;
var call0formal_$_this_$_0_$3 : ref;
var $Heap_$_6 : HeapType;
var $Heap_$_7 : HeapType;
var call0formal_$_x_$_0_$3 : ref;
var $Heap_$_8 : HeapType;
var $Heap_$_9 : HeapType;
var call4formal_$_$result_$8 : ref;
var $Heap_$_10 : HeapType;
var call4formal_$_$result_$_0_$12 : ref;
var stack50000o_$_0 : ref;
var call0formal_$_this_$_0_$4 : ref;
var $Heap_$_1 : HeapType;
var $Heap_$_2 : HeapType;
var call0formal_$_x_$_0_$4 : ref;
var $Heap_$_3 : HeapType;
var $Heap_$_4 : HeapType;
var call4formal_$_$result_$9 : ref;
var $Heap_$_5 : HeapType;
var call4formal_$_$result_$_0_$13 : ref;
var stack0o : ref;
var stack0b : bool;
var stack50000o : ref;
var stack1b : bool;
var stack1o : ref;
var stack1i : int;
var stack0i : int;
var stack2i : int;
var stack2o : ref;
var stack3i : int;
var $Heap$block13957$LoopPreheader : HeapType;
var $Heap$block13685$LoopPreheader : HeapType;
var $ActivityIndicator_$_0 : ActivityType;
var $ActivityIndicator_$_1 : ActivityType;
var $ActivityIndicator_$_2 : ActivityType;
var $ActivityIndicator_$_3 : ActivityType;
var $ActivityIndicator_$_4 : ActivityType;
var $ActivityIndicator_$_5 : ActivityType;
var $ActivityIndicator_$_6 : ActivityType;
var $ActivityIndicator_$_7 : ActivityType;
var $ActivityIndicator_$_8 : ActivityType;
var $ActivityIndicator_$_9 : ActivityType;
var $ActivityIndicator_$_10 : ActivityType;
var stack1o_$_0 : ref;
var $ActivityIndicator_$_11 : ActivityType;
var $ActivityIndicator_$_12 : ActivityType;
var $ActivityIndicator_$_13 : ActivityType;
var $ActivityIndicator_$_14 : ActivityType;
var $ActivityIndicator_$_15 : ActivityType;
var $ActivityIndicator_$_16 : ActivityType;
var $ActivityIndicator_$_17 : ActivityType;
var $ActivityIndicator_$_18 : ActivityType;
var $ActivityIndicator_$_19 : ActivityType;
var $ActivityIndicator_$_20 : ActivityType;
var $ActivityIndicator_$_21 : ActivityType;
var $ActivityIndicator_$_22 : ActivityType;
var $ActivityIndicator_$_23 : ActivityType;
var $ActivityIndicator_$_24 : ActivityType;
var stack0o_$_5 : ref;
var stack0b_$_0 : bool;
var $ActivityIndicator_$_25 : ActivityType;
var stack0o_$_6 : ref;
var $ActivityIndicator_$_26 : ActivityType;
var $ActivityIndicator_$_27 : ActivityType;
var stack0o_$_7 : ref;
var $ActivityIndicator_$_28 : ActivityType;
var $ActivityIndicator_$_29 : ActivityType;
var $ActivityIndicator_$_30 : ActivityType;
var $ActivityIndicator_$_31 : ActivityType;
var $ActivityIndicator_$_32 : ActivityType;
var $ActivityIndicator_$_33 : ActivityType;
var $ActivityIndicator_$_34 : ActivityType;
var $ActivityIndicator_$_35 : ActivityType;
var $ActivityIndicator_$_36 : ActivityType;
var stack0o_$_10 : ref;
var $ActivityIndicator_$_37 : ActivityType;
var $ActivityIndicator_$_38 : ActivityType;
var $ActivityIndicator_$_39 : ActivityType;
var $ActivityIndicator_$_40 : ActivityType;
var $ActivityIndicator_$_41 : ActivityType;
var $ActivityIndicator_$_42 : ActivityType;
var $ActivityIndicator_$_43 : ActivityType;
var $ActivityIndicator_$_44 : ActivityType;
var $ActivityIndicator_$_45 : ActivityType;
var $ActivityIndicator_$_46 : ActivityType;
var $ActivityIndicator_$_47 : ActivityType;
var $ActivityIndicator_$_48 : ActivityType;
var $ActivityIndicator_$_49 : ActivityType;
var $ActivityIndicator_$_50 : ActivityType;
var $ActivityIndicator_$_51 : ActivityType;
var $ActivityIndicator_$_52 : ActivityType;
var $ActivityIndicator_$_53 : ActivityType;
var $ActivityIndicator_$_54 : ActivityType;
var $ActivityIndicator_$_55 : ActivityType;
var $ActivityIndicator_$_56 : ActivityType;
var $ActivityIndicator_$_57 : ActivityType;
var $ActivityIndicator_$_58 : ActivityType;
var $ActivityIndicator_$_59 : ActivityType;
var $ActivityIndicator_$_60 : ActivityType;
var $ActivityIndicator_$_61 : ActivityType;
var $ActivityIndicator_$_62 : ActivityType;
var $ActivityIndicator_$_63 : ActivityType;
var $ActivityIndicator_$_64 : ActivityType;
var $ActivityIndicator_$_65 : ActivityType;
var $ActivityIndicator_$_66 : ActivityType;
var $ActivityIndicator_$_67 : ActivityType;
var $ActivityIndicator_$_68 : ActivityType;
procedure SExpressionSimplifier.Nary.Simplify (this : ref) returns ($result : ref)
{
	var local4 : ref;
	var stack0o : ref;
	var stack0b : bool;
	var local5 : ref;
	var return.value : ref;
	var SS$Display.Return.Local : ref;
	var stack50000o : ref;
	var aa : ref;
	var stack1b : bool;
	var stack1o : ref;
	var a1 : ref;
	var a0 : ref;
	var stack1i : int;
	var stack0i : int;
	var argList : ref;
	var i : int;
	var n : ref;
	var local17 : int;
	var cmp : ref;
	var local18 : ref;
	var foreachEnumerator^.33574638 : struct;
	var stack2i : int;
	var stack2o : ref;
	var stack3i : int;
	var local20 : ref;
	var arg : ref;
	var $Heap$block13957$LoopPreheader : HeapType;
	var $Heap$block13685$LoopPreheader : HeapType;
	var local4_$_0 : ref;
	var $Heap_$_0 : HeapType;
	var $ActivityIndicator_$_0 : ActivityType;
	var call3formal_$_$result_$_0 : ref;
	var stack50000o_$_0 : ref;
	var call0formal_$_this_$_0_$4 : ref;
	var $Heap_$_1 : HeapType;
	var $ActivityIndicator_$_1 : ActivityType;
	var $Heap_$_2 : HeapType;
	var $ActivityIndicator_$_2 : ActivityType;
	var call0formal_$_x_$_0_$4 : ref;
	var $Heap_$_3 : HeapType;
	var $Heap_$_4 : HeapType;
	var $ActivityIndicator_$_3 : ActivityType;
	var $Heap_$_5 : HeapType;
	var $ActivityIndicator_$_4 : ActivityType;
	var call4formal_$_$result_$_0_$13 : ref;
	var stack50000o_$_1 : ref;
	var call0formal_$_this_$_0_$3 : ref;
	var $Heap_$_6 : HeapType;
	var $ActivityIndicator_$_5 : ActivityType;
	var $Heap_$_7 : HeapType;
	var $ActivityIndicator_$_6 : ActivityType;
	var call0formal_$_x_$_0_$3 : ref;
	var $Heap_$_8 : HeapType;
	var $Heap_$_9 : HeapType;
	var $ActivityIndicator_$_7 : ActivityType;
	var $Heap_$_10 : HeapType;
	var $ActivityIndicator_$_8 : ActivityType;
	var call4formal_$_$result_$_0_$12 : ref;
	var stack50000o_$_2 : ref;
	var call0formal_$_this_$_0_$2 : ref;
	var $Heap_$_11 : HeapType;
	var $ActivityIndicator_$_9 : ActivityType;
	var $Heap_$_12 : HeapType;
	var $ActivityIndicator_$_10 : ActivityType;
	var call0formal_$_x_$_0_$2 : ref;
	var $Heap_$_13 : HeapType;
	var stack1o_$_0 : ref;
	var $Heap_$_14 : HeapType;
	var $ActivityIndicator_$_11 : ActivityType;
	var call4formal_$_consequent$out_$_0 : ref;
	var $Heap_$_15 : HeapType;
	var $ActivityIndicator_$_12 : ActivityType;
	var call4formal_$_$result_$_0_$11 : ref;
	var $Heap_$_16 : HeapType;
	var $ActivityIndicator_$_13 : ActivityType;
	var call3formal_$_$result_$_0_$14 : bool;
	var stack0o_$_0 : ref;
	var $Heap_$_17 : HeapType;
	var $ActivityIndicator_$_14 : ActivityType;
	var call5formal_$_$result_$_0_$8 : ref;
	var $Heap_$_18 : HeapType;
	var $ActivityIndicator_$_15 : ActivityType;
	var call3formal_$_$result_$_0_$8 : ref;
	var stack0o_$_1 : ref;
	var $Heap_$_19 : HeapType;
	var $ActivityIndicator_$_16 : ActivityType;
	var call5formal_$_$result_$_0_$9 : ref;
	var $Heap_$_20 : HeapType;
	var $ActivityIndicator_$_17 : ActivityType;
	var call3formal_$_$result_$_0_$9 : ref;
	var $Heap_$_21 : HeapType;
	var $ActivityIndicator_$_18 : ActivityType;
	var call3formal_$_$result_$_0_$10 : bool;
	var stack0o_$_2 : ref;
	var $Heap_$_22 : HeapType;
	var $ActivityIndicator_$_19 : ActivityType;
	var call5formal_$_$result_$_0_$2 : ref;
	var stack0o_$_3 : ref;
	var stack0o_$_4 : ref;
	var $Heap_$_23 : HeapType;
	var $ActivityIndicator_$_20 : ActivityType;
	var call4formal_$_$result_$_0 : int;
	var stack50000o_$_3 : ref;
	var call0formal_$_this_$_0 : ref;
	var $Heap_$_24 : HeapType;
	var $ActivityIndicator_$_21 : ActivityType;
	var $Heap_$_25 : HeapType;
	var $ActivityIndicator_$_22 : ActivityType;
	var call0formal_$_x_$_0 : ref;
	var $Heap_$_26 : HeapType;
	var local18_$_0 : ref;
	var $Heap_$_27 : HeapType;
	var $ActivityIndicator_$_23 : ActivityType;
	var call3formal_$_$result_$_0_$1 : struct;
	var $Heap_$_28 : HeapType;
	var $ActivityIndicator_$_24 : ActivityType;
	var stack0o_$_5 : ref;
	var foreachEnumerator^.33574638_$_0 : struct;
	var stack0b_$_0 : bool;
	var $Heap_$_29 : HeapType;
	var local20_$_0 : ref;
	var arg_$_0 : ref;
	var $ActivityIndicator_$_25 : ActivityType;
	var stack0o_$_6 : ref;
	var $Heap_$_30 : HeapType;
	var $ActivityIndicator_$_26 : ActivityType;
	var call3formal_$_this$out_$_0 : struct;
	var call4formal_$_$result_$_0_$1 : bool;
	var $Heap_$_31 : HeapType;
	var $ActivityIndicator_$_27 : ActivityType;
	var call4formal_$_$result_$_0_$3 : ref;
	var stack0o_$_7 : ref;
	var $Heap_$_32 : HeapType;
	var $ActivityIndicator_$_28 : ActivityType;
	var call4formal_$_$result_$_0_$2 : ref;
	var $Heap_$_33 : HeapType;
	var $ActivityIndicator_$_29 : ActivityType;
	var call3formal_$_$result_$_0_$2 : ref;
	var $Heap_$_34 : HeapType;
	var $ActivityIndicator_$_30 : ActivityType;
	var stack0o_$_8 : ref;
	var $Heap_$_35 : HeapType;
	var $ActivityIndicator_$_31 : ActivityType;
	var call4formal_$_$result_$_0_$4 : int;
	var stack50000o_$_4 : ref;
	var call0formal_$_this_$_0_$1 : ref;
	var $Heap_$_36 : HeapType;
	var $ActivityIndicator_$_32 : ActivityType;
	var $Heap_$_37 : HeapType;
	var $ActivityIndicator_$_33 : ActivityType;
	var call0formal_$_x_$_0_$1 : ref;
	var $Heap_$_38 : HeapType;
	var stack0o_$_9 : ref;
	var $Heap_$_39 : HeapType;
	var $ActivityIndicator_$_34 : ActivityType;
	var call5formal_$_$result_$_0 : ref;
	var $Heap_$_40 : HeapType;
	var $ActivityIndicator_$_35 : ActivityType;
	var $ActivityIndicator_$_36 : ActivityType;
	var stack0o_$_10 : ref;
	var stack0i_$_0 : int;
	var $Heap_$_41 : HeapType;
	var stack1i_$_0 : int;
	var local17_$_0 : int;
	var i_$_0 : int;
	var $ActivityIndicator_$_37 : ActivityType;
	var stack0o_$_11 : ref;
	var $Heap_$_42 : HeapType;
	var $ActivityIndicator_$_38 : ActivityType;
	var call4formal_$_$result_$_0_$5 : int;
	var $Heap_$_43 : HeapType;
	var $ActivityIndicator_$_39 : ActivityType;
	var call4formal_$_$result_$_0_$6 : ref;
	var stack0o_$_12 : ref;
	var $Heap_$_44 : HeapType;
	var $ActivityIndicator_$_40 : ActivityType;
	var call5formal_$_$result_$_0_$1 : ref;
	var $Heap_$_45 : HeapType;
	var $ActivityIndicator_$_41 : ActivityType;
	var call3formal_$_$result_$_0_$3 : ref;
	var $Heap_$_46 : HeapType;
	var $ActivityIndicator_$_42 : ActivityType;
	var stack0i_$_1 : int;
	var stack0o_$_13 : ref;
	var stack1o_$_1 : ref;
	var $Heap_$_47 : HeapType;
	var $ActivityIndicator_$_43 : ActivityType;
	var call4formal_$_$result_$_0_$7 : bool;
	var stack0o_$_14 : ref;
	var $Heap_$_48 : HeapType;
	var $ActivityIndicator_$_44 : ActivityType;
	var call5formal_$_$result_$_0_$3 : ref;
	var $Heap_$_49 : HeapType;
	var $ActivityIndicator_$_45 : ActivityType;
	var call3formal_$_$result_$_0_$4 : ref;
	var $Heap_$_50 : HeapType;
	var $Heap_$_51 : HeapType;
	var $ActivityIndicator_$_46 : ActivityType;
	var call3formal_$_$result_$_0_$5 : ref;
	var $Heap_$_52 : HeapType;
	var $ActivityIndicator_$_47 : ActivityType;
	var call3formal_$_$result_$_0_$6 : bool;
	var $Heap_$_53 : HeapType;
	var $ActivityIndicator_$_48 : ActivityType;
	var call3formal_$_$result_$_0_$7 : bool;
	var $Heap_$_54 : HeapType;
	var $ActivityIndicator_$_49 : ActivityType;
	var call2formal_$_$result_$_0 : ref;
	var stack0o_$_15 : ref;
	var $Heap_$_55 : HeapType;
	var $ActivityIndicator_$_50 : ActivityType;
	var call2formal_$_$result_$_0_$1 : ref;
	var stack0o_$_16 : ref;
	var $Heap_$_56 : HeapType;
	var $ActivityIndicator_$_51 : ActivityType;
	var call4formal_$_$result_$_0_$8 : bool;
	var stack0o_$_17 : ref;
	var $Heap_$_57 : HeapType;
	var $ActivityIndicator_$_52 : ActivityType;
	var call4formal_$_$result_$_0_$9 : bool;
	var stack1o_$_2 : ref;
	var $Heap_$_58 : HeapType;
	var $ActivityIndicator_$_53 : ActivityType;
	var call5formal_$_$result_$_0_$4 : ref;
	var stack2o_$_0 : ref;
	var $Heap_$_59 : HeapType;
	var $ActivityIndicator_$_54 : ActivityType;
	var call5formal_$_$result_$_0_$5 : ref;
	var stack50000o_$_5 : ref;
	var $Heap_$_60 : HeapType;
	var $ActivityIndicator_$_55 : ActivityType;
	var $Heap_$_61 : HeapType;
	var stack1o_$_3 : ref;
	var $Heap_$_62 : HeapType;
	var $ActivityIndicator_$_56 : ActivityType;
	var call5formal_$_$result_$_0_$6 : ref;
	var stack2o_$_1 : ref;
	var $Heap_$_63 : HeapType;
	var $ActivityIndicator_$_57 : ActivityType;
	var call5formal_$_$result_$_0_$7 : ref;
	var stack50000o_$_6 : ref;
	var $Heap_$_64 : HeapType;
	var $ActivityIndicator_$_58 : ActivityType;
	var $Heap_$_65 : HeapType;
	var $Heap_$_66 : HeapType;
	var $Heap_$_67 : HeapType;
	var $ActivityIndicator_$_59 : ActivityType;
	var call4formal_$_$result_$_0_$10 : ref;
	var $Heap_$_68 : HeapType;
	var $ActivityIndicator_$_60 : ActivityType;
	var call3formal_$_$result_$_0_$11 : bool;
	var $Heap_$_69 : HeapType;
	var $ActivityIndicator_$_61 : ActivityType;
	var call3formal_$_$result_$_0_$12 : bool;
	var $Heap_$_70 : HeapType;
	var $ActivityIndicator_$_62 : ActivityType;
	var call3formal_$_$result_$_0_$13 : bool;
	var $Heap_$_71 : HeapType;
	var $ActivityIndicator_$_63 : ActivityType;
	var call2formal_$_$result_$_0_$2 : ref;
	var $Heap_$_72 : HeapType;
	var $Heap_$_73 : HeapType;
	var $ActivityIndicator_$_64 : ActivityType;
	var call5formal_$_$result_$_0_$10 : ref;
	var $Heap_$_74 : HeapType;
	var $ActivityIndicator_$_65 : ActivityType;
	var call3formal_$_$result_$_0_$15 : bool;
	var $Heap_$_75 : HeapType;
	var $ActivityIndicator_$_66 : ActivityType;
	var call3formal_$_$result_$_0_$16 : bool;
	var $Heap_$_76 : HeapType;
	var $ActivityIndicator_$_67 : ActivityType;
	var call5formal_$_$result_$_0_$11 : ref;
	var $Heap_$_77 : HeapType;
	var $ActivityIndicator_$_68 : ActivityType;
	var call2formal_$_$result_$_0_$3 : ref;
	var $Heap_$_78 : HeapType;
	var $Heap_$_79 : HeapType;
	var return.value_$_0 : ref;
	var $result_$_0 : ref;
	var $Heap_$_80 : HeapType;
	var $_$_condition : bool;
	var $_$_condition_$0 : bool;
	var $_$_condition_$1 : bool;
	var $_$_condition_$2 : bool;
	var $_$_condition_$3 : bool;
	var $_$_condition_$4 : bool;
	var $_$_condition_$5 : bool;
	var $_$_condition_$6 : bool;
	var $_$_condition_$7 : bool;
	var $_$_condition_$8 : bool;
	var $_$_condition_$9 : bool;
	var $_$_condition_$10 : bool;
	var $_$_condition_$11 : bool;
	var $_$_condition_$12 : bool;
	var $_$_condition_$13 : bool;
	var $_$_condition_$14 : bool;
	var $_$_condition_$15 : bool;
	var $_$_condition_$16 : bool;
	var $_$_condition_$17 : bool;
	var $_$_condition_$18 : bool;
	var $_$_condition_$19 : bool;
	var $_$_condition_$20 : bool;
	var $_$_condition_$21 : bool;
	var $_$_condition_$22 : bool;
	var $_$_condition_$23 : bool;
	var $_$_condition_$24 : bool;
	var $_$_condition_$25 : bool;
	var $_$_condition_$26 : bool;
$start:
	assume (forall  h : HeapType :: {IsPreHeap(h)} ( IsHeap(h) ==> IsPreHeap(h) ));
	assume DeclType($elementsBool) == System.Array;
	assume DeclType($elementsInt) == System.Array;
	assume DeclType($elementsRef) == System.Array;
	assume DeclType($elementsStruct) == System.Array;
	assume DeclType($exposeVersion) == System.Object;
	assume (forall  c : TName :: {ClassRepr(c)} ( ClassReprInv(ClassRepr(c)) == c ));
	assume (forall  T : TName :: ( !($typeof(ClassRepr(T)) <: System.Object) ));
	assume (forall  T_$0 : TName :: ( !(ClassRepr(T_$0) == null) ));
	assume (forall  T_$1 : TName, h_$0 : HeapType :: {h_$0[ClassRepr(T_$1),$ownerFrame]} ( IsHeap(h_$0) ==> (h_$0[ClassRepr(T_$1),$ownerFrame] == $PeerGroupPlaceholder) ));
	assume IncludeInMainFrameCondition($allocated);
	assume IncludeInMainFrameCondition($frozen);
	assume ((IncludeInMainFrameCondition($elementsBool) && IncludeInMainFrameCondition($elementsInt)) && IncludeInMainFrameCondition($elementsRef)) && IncludeInMainFrameCondition($elementsStruct);
	assume !IncludeInMainFrameCondition($inv);
	assume !IncludeInMainFrameCondition($localinv);
	assume IncludeInMainFrameCondition($ownerRef);
	assume IncludeInMainFrameCondition($ownerFrame);
	assume IncludeInMainFrameCondition($exposeVersion);
	assume !IncludeInMainFrameCondition($FirstConsistentOwner);
	assume !IsStaticField($allocated);
	assume !IsStaticField($frozen);
	assume (((!IsStaticField($elementsBool)) && (!IsStaticField($elementsInt))) && (!IsStaticField($elementsRef))) && (!IsStaticField($elementsStruct));
	assume !IsStaticField($inv);
	assume !IsStaticField($localinv);
	assume !IsStaticField($exposeVersion);
	assume !$IncludedInModifiesStar($ownerRef);
	assume !$IncludedInModifiesStar($ownerFrame);
	assume $IncludedInModifiesStar($exposeVersion);
	assume (($IncludedInModifiesStar($elementsBool) && $IncludedInModifiesStar($elementsInt)) && $IncludedInModifiesStar($elementsRef)) && $IncludedInModifiesStar($elementsStruct);
	assume (forall<alpha> A : Elements (alpha) , i_$0 : Integer, x : alpha :: ( ArrayGet(ArraySet(A,i_$0,x),i_$0) == x ));
	assume (forall<alpha> A_$0 : Elements (alpha) , i_$1 : Integer, j : Integer, x_$0 : alpha :: ( (!(i_$1 == j)) ==> (ArrayGet(ArraySet(A_$0,i_$1,x_$0),j) == ArrayGet(A_$0,j)) ));
	assume (forall  a : ref, d : Integer, x_$1 : Integer, y : Integer :: {ArrayIndex(a,d,x_$1,y)} ( ArrayIndexInvX(ArrayIndex(a,d,x_$1,y)) == x_$1 ));
	assume (forall  a_$0 : ref, d_$0 : Integer, x_$2 : Integer, y_$0 : Integer :: {ArrayIndex(a_$0,d_$0,x_$2,y_$0)} ( ArrayIndexInvY(ArrayIndex(a_$0,d_$0,x_$2,y_$0)) == y_$0 ));
	assume (forall  a_$1 : ref, i_$2 : Integer, heap : HeapType :: {ArrayGet(heap[a_$1,$elementsInt],i_$2)} ( IsHeap(heap) ==> InRange(ArrayGet(heap[a_$1,$elementsInt],i_$2),$ElementType($typeof(a_$1))) ));
	assume (forall  a_$2 : ref, i_$3 : Integer, heap_$0 : HeapType :: {$typeof(ArrayGet(heap_$0[a_$2,$elementsRef],i_$3))} ( (IsHeap(heap_$0) && (!(ArrayGet(heap_$0[a_$2,$elementsRef],i_$3) == null))) ==> ($typeof(ArrayGet(heap_$0[a_$2,$elementsRef],i_$3)) <: $ElementType($typeof(a_$2))) ));
	assume (forall  a_$3 : ref, T_$2 : TName, i_$4 : Integer, r : Integer, heap_$1 : HeapType :: {$typeof(a_$3) <: NonNullRefArray(T_$2,r),ArrayGet(heap_$1[a_$3,$elementsRef],i_$4)} ( (IsHeap(heap_$1) && ($typeof(a_$3) <: NonNullRefArray(T_$2,r))) ==> (!(ArrayGet(heap_$1[a_$3,$elementsRef],i_$4) == null)) ));
	assume (forall  a_$4 : ref :: ( 1 <= $Rank(a_$4) ));
	assume (forall  a_$5 : ref, T_$3 : TName, r_$0 : Integer :: {$typeof(a_$5) <: RefArray(T_$3,r_$0)} ( ((!(a_$5 == null)) && ($typeof(a_$5) <: RefArray(T_$3,r_$0))) ==> ($Rank(a_$5) == r_$0) ));
	assume (forall  a_$6 : ref, T_$4 : TName, r_$1 : Integer :: {$typeof(a_$6) <: NonNullRefArray(T_$4,r_$1)} ( ((!(a_$6 == null)) && ($typeof(a_$6) <: NonNullRefArray(T_$4,r_$1))) ==> ($Rank(a_$6) == r_$1) ));
	assume (forall  a_$7 : ref, T_$5 : TName, r_$2 : Integer :: {$typeof(a_$7) <: ValueArray(T_$5,r_$2)} ( ((!(a_$7 == null)) && ($typeof(a_$7) <: ValueArray(T_$5,r_$2))) ==> ($Rank(a_$7) == r_$2) ));
	assume (forall  a_$8 : ref, T_$6 : TName, r_$3 : Integer :: {$typeof(a_$8) <: IntArray(T_$6,r_$3)} ( ((!(a_$8 == null)) && ($typeof(a_$8) <: IntArray(T_$6,r_$3))) ==> ($Rank(a_$8) == r_$3) ));
	assume (forall  a_$9 : ref :: {$Length(a_$9)} ( (0 <= $Length(a_$9)) && ($Length(a_$9) <= 2147483647) ));
	assume (forall  a_$10 : ref, i_$5 : Integer :: ( 0 <= $DimLength(a_$10,i_$5) ));
	assume (forall  a_$11 : ref :: {$DimLength(a_$11,0)} ( ($Rank(a_$11) == 1) ==> ($DimLength(a_$11,0) == $Length(a_$11)) ));
	assume (forall  a_$12 : ref, i_$6 : Integer :: {$LBound(a_$12,i_$6)} ( $LBound(a_$12,i_$6) == 0 ));
	assume (forall  a_$13 : ref, i_$7 : Integer :: {$UBound(a_$13,i_$7)} ( $UBound(a_$13,i_$7) == ($DimLength(a_$13,i_$7) - 1) ));
	assume (forall  T_$7 : TName, ET : TName, r_$4 : Integer :: {T_$7 <: ValueArray(ET,r_$4)} ( (T_$7 <: ValueArray(ET,r_$4)) ==> ($ArrayCategory(T_$7) == $ArrayCategoryValue) ));
	assume (forall  T_$8 : TName, ET_$0 : TName, r_$5 : Integer :: {T_$8 <: IntArray(ET_$0,r_$5)} ( (T_$8 <: IntArray(ET_$0,r_$5)) ==> ($ArrayCategory(T_$8) == $ArrayCategoryInt) ));
	assume (forall  T_$9 : TName, ET_$1 : TName, r_$6 : Integer :: {T_$9 <: RefArray(ET_$1,r_$6)} ( (T_$9 <: RefArray(ET_$1,r_$6)) ==> ($ArrayCategory(T_$9) == $ArrayCategoryRef) ));
	assume (forall  T_$10 : TName, ET_$2 : TName, r_$7 : Integer :: {T_$10 <: NonNullRefArray(ET_$2,r_$7)} ( (T_$10 <: NonNullRefArray(ET_$2,r_$7)) ==> ($ArrayCategory(T_$10) == $ArrayCategoryNonNullRef) ));
	assume System.Array <: System.Object;
	assume (forall  T_$11 : TName, r_$8 : Integer :: {ValueArray(T_$11,r_$8)} ( (ValueArray(T_$11,r_$8) <: ValueArray(T_$11,r_$8)) && (ValueArray(T_$11,r_$8) <: System.Array) ));
	assume (forall  T_$12 : TName, r_$9 : Integer :: {IntArray(T_$12,r_$9)} ( (IntArray(T_$12,r_$9) <: IntArray(T_$12,r_$9)) && (IntArray(T_$12,r_$9) <: System.Array) ));
	assume (forall  T_$13 : TName, r_$10 : Integer :: {RefArray(T_$13,r_$10)} ( (RefArray(T_$13,r_$10) <: RefArray(T_$13,r_$10)) && (RefArray(T_$13,r_$10) <: System.Array) ));
	assume (forall  T_$14 : TName, r_$11 : Integer :: {NonNullRefArray(T_$14,r_$11)} ( (NonNullRefArray(T_$14,r_$11) <: NonNullRefArray(T_$14,r_$11)) && (NonNullRefArray(T_$14,r_$11) <: System.Array) ));
	assume (forall  array : ref, elementType : TName, rank : Integer :: {NonNullRefArrayRaw(array,elementType,rank)} ( NonNullRefArrayRaw(array,elementType,rank) ==> ((($typeof(array) <: System.Array) && ($Rank(array) == rank)) && (elementType <: $ElementType($typeof(array)))) ));
	assume (forall  T_$15 : TName, U : TName, r_$12 : Integer :: ( (U <: T_$15) ==> (RefArray(U,r_$12) <: RefArray(T_$15,r_$12)) ));
	assume (forall  T_$16 : TName, U_$0 : TName, r_$13 : Integer :: ( (U_$0 <: T_$16) ==> (NonNullRefArray(U_$0,r_$13) <: NonNullRefArray(T_$16,r_$13)) ));
	assume (forall  A_$1 : TName, r_$14 : Integer :: ( $ElementType(ValueArray(A_$1,r_$14)) == A_$1 ));
	assume (forall  A_$2 : TName, r_$15 : Integer :: ( $ElementType(IntArray(A_$2,r_$15)) == A_$2 ));
	assume (forall  A_$3 : TName, r_$16 : Integer :: ( $ElementType(RefArray(A_$3,r_$16)) == A_$3 ));
	assume (forall  A_$4 : TName, r_$17 : Integer :: ( $ElementType(NonNullRefArray(A_$4,r_$17)) == A_$4 ));
	assume (forall  A_$5 : TName, r_$18 : Integer, T_$17 : TName :: {T_$17 <: RefArray(A_$5,r_$18)} ( (T_$17 <: RefArray(A_$5,r_$18)) ==> (((!(T_$17 == A_$5)) && (T_$17 == RefArray($ElementType(T_$17),r_$18))) && ($ElementType(T_$17) <: A_$5)) ));
	assume (forall  A_$6 : TName, r_$19 : Integer, T_$18 : TName :: {T_$18 <: NonNullRefArray(A_$6,r_$19)} ( (T_$18 <: NonNullRefArray(A_$6,r_$19)) ==> (((!(T_$18 == A_$6)) && (T_$18 == NonNullRefArray($ElementType(T_$18),r_$19))) && ($ElementType(T_$18) <: A_$6)) ));
	assume (forall  A_$7 : TName, r_$20 : Integer, T_$19 : TName :: {T_$19 <: ValueArray(A_$7,r_$20)} ( (T_$19 <: ValueArray(A_$7,r_$20)) ==> (T_$19 == ValueArray(A_$7,r_$20)) ));
	assume (forall  A_$8 : TName, r_$21 : Integer, T_$20 : TName :: {T_$20 <: IntArray(A_$8,r_$21)} ( (T_$20 <: IntArray(A_$8,r_$21)) ==> (T_$20 == IntArray(A_$8,r_$21)) ));
	assume (forall  A_$9 : TName, r_$22 : Integer, T_$21 : TName :: {RefArray(A_$9,r_$22) <: T_$21} ( (RefArray(A_$9,r_$22) <: T_$21) ==> ((System.Array <: T_$21) || ((T_$21 == RefArray($ElementType(T_$21),r_$22)) && (A_$9 <: $ElementType(T_$21)))) ));
	assume (forall  A_$10 : TName, r_$23 : Integer, T_$22 : TName :: {NonNullRefArray(A_$10,r_$23) <: T_$22} ( (NonNullRefArray(A_$10,r_$23) <: T_$22) ==> ((System.Array <: T_$22) || ((T_$22 == NonNullRefArray($ElementType(T_$22),r_$23)) && (A_$10 <: $ElementType(T_$22)))) ));
	assume (forall  A_$11 : TName, r_$24 : Integer, T_$23 : TName :: {ValueArray(A_$11,r_$24) <: T_$23} ( (ValueArray(A_$11,r_$24) <: T_$23) ==> ((System.Array <: T_$23) || (T_$23 == ValueArray(A_$11,r_$24))) ));
	assume (forall  A_$12 : TName, r_$25 : Integer, T_$24 : TName :: {IntArray(A_$12,r_$25) <: T_$24} ( (IntArray(A_$12,r_$25) <: T_$24) ==> ((System.Array <: T_$24) || (T_$24 == IntArray(A_$12,r_$25))) ));
	assume (forall  a_$14 : ref, i_$8 : Integer, heap_$2 : HeapType :: {heap_$2[ArrayGet(heap_$2[a_$14,$elementsRef],i_$8),$ownerRef]} {heap_$2[ArrayGet(heap_$2[a_$14,$elementsRef],i_$8),$ownerFrame]} ( (IsHeap(heap_$2) && ($typeof(a_$14) <: System.Array)) ==> ((ArrayGet(heap_$2[a_$14,$elementsRef],i_$8) == null) || ((heap_$2[ArrayGet(heap_$2[a_$14,$elementsRef],i_$8),$ownerRef] == heap_$2[$ElementProxy(a_$14,0 - 1),$ownerRef]) && (heap_$2[ArrayGet(heap_$2[a_$14,$elementsRef],i_$8),$ownerFrame] == heap_$2[$ElementProxy(a_$14,0 - 1),$ownerFrame]))) ));
	assume (forall  a_$15 : ref, heap_$3 : HeapType :: {IsAllocated(heap_$3,a_$15)} ( ((IsHeap(heap_$3) && IsAllocated(heap_$3,a_$15)) && ($typeof(a_$15) <: System.Array)) ==> IsAllocated(heap_$3,$ElementProxy(a_$15,0 - 1)) ));
	assume (forall  o : ref, pos : Integer :: {$typeof($ElementProxy(o,pos))} ( $typeof($ElementProxy(o,pos)) == System.Object ));
	assume (forall  o_$0 : struct, pos_$0 : Integer :: {$typeof($ElementProxyStruct(o_$0,pos_$0))} ( $typeof($ElementProxyStruct(o_$0,pos_$0)) == System.Object ));
	assume (forall<alpha> s : struct, f : Field (alpha) , x_$3 : alpha :: ( $StructGet($StructSet(s,f,x_$3),f) == x_$3 ));
	assume (forall<alpha,beta> s_$0 : struct, f_$0 : Field (alpha) , f' : Field (beta) , x_$4 : alpha :: ( (!(f_$0 == f')) ==> ($StructGet($StructSet(s_$0,f_$0,x_$4),f') == $StructGet(s_$0,f')) ));
	assume (forall  t : TName :: {ZeroInitStruct(t)} ( ZeroInit(ZeroInitStruct(t),t) ));
	assume (forall  T_$25 : TName :: {$BaseClass(T_$25)} ( (T_$25 <: $BaseClass(T_$25)) && (((!$IsValueType(T_$25)) && (!(T_$25 == System.Object))) ==> (!(T_$25 == $BaseClass(T_$25)))) ));
	assume (forall  A_$13 : TName, B : TName, C : TName :: {C <: AsDirectSubClass(B,A_$13)} ( (C <: AsDirectSubClass(B,A_$13)) ==> (OneClassDown(C,A_$13) == B) ));
	assume (forall  T_$26 : TName :: ( $IsValueType(T_$26) ==> (((forall  U_$1 : TName :: ( (T_$26 <: U_$1) ==> (T_$26 == U_$1) ))) && ((forall  U_$2 : TName :: ( (U_$2 <: T_$26) ==> (T_$26 == U_$2) )))) ));
	assume $IsValueType(System.Boolean);
	assume (forall  T_$27 : TName :: ( (T_$27 <: System.Object) ==> (!$IsValueType(T_$27)) ));
	assume System.Type <: System.Object;
	assume (forall  T_$28 : TName :: {TypeObject(T_$28)} ( $IsNotNull(TypeObject(T_$28),System.Type) ));
	assume (forall  T_$29 : TName :: {TypeObject(T_$29)} ( TypeName(TypeObject(T_$29)) == T_$29 ));
	assume (forall  o_$1 : ref, T_$30 : TName :: {$Is(o_$1,T_$30)} ( $Is(o_$1,T_$30) <==> ((o_$1 == null) || ($typeof(o_$1) <: T_$30)) ));
	assume (forall  o_$2 : ref, T_$31 : TName :: {$IsNotNull(o_$2,T_$31)} ( $IsNotNull(o_$2,T_$31) <==> ((!(o_$2 == null)) && $Is(o_$2,T_$31)) ));
	assume (forall  o_$3 : ref, T_$32 : TName :: ( $Is(o_$3,T_$32) ==> ($As(o_$3,T_$32) == o_$3) ));
	assume (forall  o_$4 : ref, T_$33 : TName :: ( (!$Is(o_$4,T_$33)) ==> ($As(o_$4,T_$33) == null) ));
	assume (forall  h_$1 : HeapType, o_$5 : ref :: {$typeof(o_$5) <: System.Array,h_$1[o_$5,$inv]} ( ((IsHeap(h_$1) && (!(o_$5 == null))) && ($typeof(o_$5) <: System.Array)) ==> ((h_$1[o_$5,$inv] == $typeof(o_$5)) && (h_$1[o_$5,$localinv] == $typeof(o_$5))) ));
	assume (forall<alpha> h_$2 : HeapType, o_$6 : ref, f_$1 : Field (alpha)  :: {IsAllocated(h_$2,h_$2[o_$6,f_$1])} ( (IsHeap(h_$2) && h_$2[o_$6,$allocated]) ==> IsAllocated(h_$2,h_$2[o_$6,f_$1]) ));
	assume (forall  h_$3 : HeapType, o_$7 : ref, f_$2 : Field (ref)  :: {h_$3[h_$3[o_$7,f_$2],$allocated]} ( (IsHeap(h_$3) && h_$3[o_$7,$allocated]) ==> h_$3[h_$3[o_$7,f_$2],$allocated] ));
	assume (forall<alpha> h_$4 : HeapType, s_$1 : struct, f_$3 : Field (alpha)  :: {IsAllocated(h_$4,$StructGet(s_$1,f_$3))} ( IsAllocated(h_$4,s_$1) ==> IsAllocated(h_$4,$StructGet(s_$1,f_$3)) ));
	assume (forall<alpha> h_$5 : HeapType, e : Elements (alpha) , i_$9 : Integer :: {IsAllocated(h_$5,ArrayGet(e,i_$9))} ( IsAllocated(h_$5,e) ==> IsAllocated(h_$5,ArrayGet(e,i_$9)) ));
	assume (forall  h_$6 : HeapType, o_$8 : ref :: {h_$6[o_$8,$allocated]} ( IsAllocated(h_$6,o_$8) ==> h_$6[o_$8,$allocated] ));
	assume (forall  h_$7 : HeapType, c_$0 : TName :: {h_$7[ClassRepr(c_$0),$allocated]} ( IsHeap(h_$7) ==> h_$7[ClassRepr(c_$0),$allocated] ));
	assume DeclType($NonNullFieldsAreInitialized) == System.Object;
	assume (forall  f_$4 : Field (ref) , T_$34 : TName :: {AsNonNullRefField(f_$4,T_$34)} ( (AsNonNullRefField(f_$4,T_$34) == f_$4) ==> (AsRefField(f_$4,T_$34) == f_$4) ));
	assume (forall  h_$8 : HeapType, o_$9 : ref, f_$5 : Field (ref) , T_$35 : TName :: {h_$8[o_$9,AsRefField(f_$5,T_$35)]} ( IsHeap(h_$8) ==> $Is(h_$8[o_$9,AsRefField(f_$5,T_$35)],T_$35) ));
	assume (forall  h_$9 : HeapType, o_$10 : ref, f_$6 : Field (ref) , T_$36 : TName :: {h_$9[o_$10,AsNonNullRefField(f_$6,T_$36)]} ( ((IsHeap(h_$9) && (!(o_$10 == null))) && ((!(o_$10 == $BeingConstructed)) || (h_$9[$BeingConstructed,$NonNullFieldsAreInitialized] <==> true))) ==> (!(h_$9[o_$10,AsNonNullRefField(f_$6,T_$36)] == null)) ));
	assume (forall  h_$10 : HeapType, o_$11 : ref, f_$7 : Field (Integer) , T_$37 : TName :: {h_$10[o_$11,AsRangeField(f_$7,T_$37)]} ( IsHeap(h_$10) ==> InRange(h_$10[o_$11,AsRangeField(f_$7,T_$37)],T_$37) ));
	assume (forall  o_$12 : ref :: {$IsMemberlessType($typeof(o_$12))} ( !$IsMemberlessType($typeof(o_$12)) ));
	assume (forall  J : TName :: {System.Object <: $AsInterface(J)} ( ($AsInterface(J) == J) ==> (!(System.Object <: J)) ));
	assume (forall<T> $J : TName, s_$2 : T, b : ref :: {UnboxedType(Box(s_$2,b)) <: $AsInterface($J)} ( ((($AsInterface($J) == $J) && (Box(s_$2,b) == b)) && (UnboxedType(Box(s_$2,b)) <: $AsInterface($J))) ==> ($typeof(b) <: $J) ));
	assume (forall  h_$11 : HeapType, o_$13 : ref :: ( (IsHeap(h_$11) && IsFrozen(o_$13,h_$11)) <==> h_$11[o_$13,$frozen] ));
	assume (forall  h_$12 : HeapType :: {IsFrozen($freezerRef,h_$12)} ( IsHeap(h_$12) ==> IsFrozen($freezerRef,h_$12) ));
	assume (forall  h_$13 : HeapType, o_$14 : ref :: {IsFrozen(o_$14,h_$13)} ( ((IsHeap(h_$13) && (!(o_$14 == null))) && h_$13[h_$13[o_$14,$ownerRef],$frozen]) ==> IsFrozen(o_$14,h_$13) ));
	assume (forall  h_$14 : HeapType, o_$15 : ref, f_$8 : Field (ref)  :: {h_$14[o_$15,AsFrozenField(f_$8)]} ( (IsHeap(h_$14) && (!(h_$14[o_$15,AsFrozenField(f_$8)] == null))) ==> IsFrozen(h_$14[o_$15,AsFrozenField(f_$8)],h_$14) ));
	assume (forall  h_$15 : HeapType, o_$16 : ref, f_$9 : Field (ref) , i_$10 : Integer :: {h_$15[o_$16,AsElementsFrozenField(f_$9,i_$10)]} ( (IsHeap(h_$15) && (!(h_$15[o_$16,AsElementsFrozenField(f_$9,i_$10)] == null))) ==> IsFrozen($ElementProxy(h_$15[o_$16,AsElementsFrozenField(f_$9,i_$10)],i_$10),h_$15) ));
	assume (forall  h_$16 : HeapType, o_$17 : ref, i_$11 : Integer :: {IsFrozen($ElementProxy(o_$17,i_$11),h_$16)} ( h_$16[$ElementProxy(o_$17,0 - 1),$frozen] ==> IsFrozen($ElementProxy(o_$17,i_$11),h_$16) ));
	assume (forall  h_$17 : HeapType, o_$18 : ref :: ( (IsHeap(h_$17) && h_$17[o_$18,$frozen]) ==> ((forall  p : ref :: {$typeof(p)} {h_$17[p,$localinv]} {h_$17[p,$inv]} {h_$17[p,$ownerRef]} {h_$17[p,$ownerFrame]} ( ((((!(p == null)) && h_$17[p,$allocated]) && (h_$17[p,$ownerRef] == h_$17[o_$18,$ownerRef])) && (h_$17[p,$ownerFrame] == h_$17[o_$18,$ownerFrame])) ==> ((h_$17[p,$inv] == $typeof(p)) && (h_$17[p,$localinv] == $typeof(p))) ))) ));
	assume (forall  h_$18 : HeapType, o_$19 : ref :: {h_$18[o_$19,$ownerRef]} {h_$18[o_$19,$ownerFrame]} {h_$18[o_$19,$inv]} {h_$18[o_$19,$localinv]} ( (((IsHeap(h_$18) && h_$18[o_$19,$allocated]) && (h_$18[o_$19,$ownerRef] == $freezerRef)) && (h_$18[o_$19,$ownerFrame] == $Freezer)) ==> ((h_$18[o_$19,$inv] == $typeof(o_$19)) && (h_$18[o_$19,$localinv] == $typeof(o_$19))) ));
	assume (forall  h_$19 : HeapType, o_$20 : ref, p_$0 : ref :: {h_$19[o_$20,$frozen],h_$19[p_$0,$allocated]} ( ((((IsHeap(h_$19) && h_$19[o_$20,$frozen]) && (!(p_$0 == null))) && (h_$19[p_$0,$ownerRef] == h_$19[o_$20,$ownerRef])) && (h_$19[p_$0,$ownerFrame] == h_$19[o_$20,$ownerFrame])) ==> IsFrozen(p_$0,h_$19) ));
	assume (forall<alpha> h_$20 : HeapType, o_$21 : ref, f_$10 : Field (alpha)  :: {IsHeap(h_$20),UltimateValue(o_$21,f_$10)} ( (((((((((IsHeap(h_$20) && (!(f_$10 == $frozen))) && (!(f_$10 == $allocated))) && (!(f_$10 == $ownerRef))) && (!(f_$10 == $ownerFrame))) && (!(f_$10 == $elementsRef))) && (!(f_$10 == $elementsInt))) && (!(f_$10 == $elementsBool))) && (!(f_$10 == $elementsStruct))) && h_$20[o_$21,$frozen]) ==> (h_$20[o_$21,f_$10] == UltimateValue(o_$21,f_$10)) ));
	assume (forall  oldHeap : HeapType, newHeap : HeapType, o_$22 : ref :: {$HeapSucc(oldHeap,newHeap),IsFrozen(o_$22,newHeap)} ( ($HeapSucc(oldHeap,newHeap) && oldHeap[o_$22,$frozen]) ==> IsFrozen(o_$22,newHeap) ));
	assume (forall  s_$3 : ref :: {$StringLength(s_$3)} ( 0 <= $StringLength(s_$3) ));
	assume (forall  h_$21 : HeapType, o_$23 : ref, f_$11 : Field (ref) , T_$38 : TName :: {h_$21[o_$23,AsRepField(f_$11,T_$38)]} ( (IsHeap(h_$21) && (!(h_$21[o_$23,AsRepField(f_$11,T_$38)] == null))) ==> ((h_$21[h_$21[o_$23,AsRepField(f_$11,T_$38)],$ownerRef] == o_$23) && (h_$21[h_$21[o_$23,AsRepField(f_$11,T_$38)],$ownerFrame] == T_$38)) ));
	assume (forall  h_$22 : HeapType, o_$24 : ref, f_$12 : Field (ref)  :: {h_$22[o_$24,AsPeerField(f_$12)]} ( (IsHeap(h_$22) && (!(h_$22[o_$24,AsPeerField(f_$12)] == null))) ==> ((h_$22[h_$22[o_$24,AsPeerField(f_$12)],$ownerRef] == h_$22[o_$24,$ownerRef]) && (h_$22[h_$22[o_$24,AsPeerField(f_$12)],$ownerFrame] == h_$22[o_$24,$ownerFrame])) ));
	assume (forall  h_$23 : HeapType, o_$25 : ref, f_$13 : Field (ref) , T_$39 : TName, i_$12 : Integer :: {h_$23[o_$25,AsElementsRepField(f_$13,T_$39,i_$12)]} ( (IsHeap(h_$23) && (!(h_$23[o_$25,AsElementsRepField(f_$13,T_$39,i_$12)] == null))) ==> ((h_$23[$ElementProxy(h_$23[o_$25,AsElementsRepField(f_$13,T_$39,i_$12)],i_$12),$ownerRef] == o_$25) && (h_$23[$ElementProxy(h_$23[o_$25,AsElementsRepField(f_$13,T_$39,i_$12)],i_$12),$ownerFrame] == T_$39)) ));
	assume (forall  h_$24 : HeapType, o_$26 : ref, f_$14 : Field (ref) , i_$13 : Integer :: {h_$24[o_$26,AsElementsPeerField(f_$14,i_$13)]} ( (IsHeap(h_$24) && (!(h_$24[o_$26,AsElementsPeerField(f_$14,i_$13)] == null))) ==> ((h_$24[$ElementProxy(h_$24[o_$26,AsElementsPeerField(f_$14,i_$13)],i_$13),$ownerRef] == h_$24[o_$26,$ownerRef]) && (h_$24[$ElementProxy(h_$24[o_$26,AsElementsPeerField(f_$14,i_$13)],i_$13),$ownerFrame] == h_$24[o_$26,$ownerFrame])) ));
	assume (forall  h_$25 : HeapType, o_$27 : ref :: {h_$25[h_$25[o_$27,$ownerRef],$inv] <: h_$25[o_$27,$ownerFrame]} ( (((IsHeap(h_$25) && (!(h_$25[o_$27,$ownerFrame] == $PeerGroupPlaceholder))) && (h_$25[h_$25[o_$27,$ownerRef],$inv] <: h_$25[o_$27,$ownerFrame])) && (!(h_$25[h_$25[o_$27,$ownerRef],$localinv] == $BaseClass(h_$25[o_$27,$ownerFrame])))) ==> ((h_$25[o_$27,$inv] == $typeof(o_$27)) && (h_$25[o_$27,$localinv] == $typeof(o_$27))) ));
	assume (forall<alpha> o_$28 : ref, f_$15 : Field (alpha) , h_$26 : HeapType :: {h_$26[$AsPureObject(o_$28),f_$15]} ( ((((((IsHeap(h_$26) && (!(o_$28 == null))) && (h_$26[o_$28,$allocated] <==> true)) && ($AsPureObject(o_$28) == o_$28)) && (!(h_$26[o_$28,$ownerFrame] == $PeerGroupPlaceholder))) && (h_$26[h_$26[o_$28,$ownerRef],$inv] <: h_$26[o_$28,$ownerFrame])) && (!(h_$26[h_$26[o_$28,$ownerRef],$localinv] == $BaseClass(h_$26[o_$28,$ownerFrame])))) ==> (h_$26[o_$28,f_$15] == ##FieldDependsOnFCO(o_$28,f_$15,h_$26[h_$26[o_$28,$FirstConsistentOwner],$exposeVersion])) ));
	assume (forall  o_$29 : ref, h_$27 : HeapType :: {h_$27[o_$29,$FirstConsistentOwner]} ( (((((IsHeap(h_$27) && (!(o_$29 == null))) && (h_$27[o_$29,$allocated] <==> true)) && (!(h_$27[o_$29,$ownerFrame] == $PeerGroupPlaceholder))) && (h_$27[h_$27[o_$29,$ownerRef],$inv] <: h_$27[o_$29,$ownerFrame])) && (!(h_$27[h_$27[o_$29,$ownerRef],$localinv] == $BaseClass(h_$27[o_$29,$ownerFrame])))) ==> (((!(h_$27[o_$29,$FirstConsistentOwner] == null)) && (h_$27[h_$27[o_$29,$FirstConsistentOwner],$allocated] <==> true)) && (((h_$27[h_$27[o_$29,$FirstConsistentOwner],$ownerFrame] == $PeerGroupPlaceholder) || (!(h_$27[h_$27[h_$27[o_$29,$FirstConsistentOwner],$ownerRef],$inv] <: h_$27[h_$27[o_$29,$FirstConsistentOwner],$ownerFrame]))) || (h_$27[h_$27[h_$27[o_$29,$FirstConsistentOwner],$ownerRef],$localinv] == $BaseClass(h_$27[h_$27[o_$29,$FirstConsistentOwner],$ownerFrame])))) ));
	assume (forall<T> value : T, typ : TName, occurrence : NondetType, activity : ActivityType :: {NewInstance(BoxFunc(value,typ),occurrence,activity)} ( (Box(value,NewInstance(BoxFunc(value,typ),occurrence,activity)) == NewInstance(BoxFunc(value,typ),occurrence,activity)) && (UnboxedType(NewInstance(BoxFunc(value,typ),occurrence,activity)) == typ) ));
	assume (forall  x_$5 : ref, typ_$0 : TName, occurrence_$0 : NondetType, activity_$0 : ActivityType :: ( (!$IsValueType(UnboxedType(x_$5))) ==> (NewInstance(BoxFunc(x_$5,typ_$0),occurrence_$0,activity_$0) == x_$5) ));
	assume (forall<T> x_$6 : T, p_$1 : ref :: {(Unbox(Box(x_$6,p_$1)) : T)} ( (Unbox(Box(x_$6,p_$1)) : T) == x_$6 ));
	assume (forall  p_$2 : ref :: {$IsValueType(UnboxedType(p_$2))} ( $IsValueType(UnboxedType(p_$2)) ==> ((forall<T> heap_$4 : HeapType, x_$7 : T :: {heap_$4[Box(x_$7,p_$2),$inv]} ( IsHeap(heap_$4) ==> ((heap_$4[Box(x_$7,p_$2),$inv] == $typeof(Box(x_$7,p_$2))) && (heap_$4[Box(x_$7,p_$2),$localinv] == $typeof(Box(x_$7,p_$2)))) ))) ));
	assume (forall<T> x_$8 : T, p_$3 : ref :: {UnboxedType(Box(x_$8,p_$3)) <: System.Object} ( ((UnboxedType(Box(x_$8,p_$3)) <: System.Object) && (Box(x_$8,p_$3) == p_$3)) ==> (x_$8 == p_$3) ));
	assume (forall  p_$4 : ref, typ_$1 : TName :: {BoxTester(p_$4,typ_$1)} ( (UnboxedType(p_$4) == typ_$1) <==> (!(BoxTester(p_$4,typ_$1) == null)) ));
	assume (forall  p_$5 : ref, typ_$2 : TName :: {BoxTester(p_$5,typ_$2)} ( (!(BoxTester(p_$5,typ_$2) == null)) ==> ((forall<T> :: Box((Unbox(p_$5) : T),p_$5) == p_$5)) ));
	assume (forall<U> x_$9 : ref, p_$6 : ref :: {(Unbox(Box(x_$9,p_$6)) : U)} ( (Box(x_$9,p_$6) == p_$6) ==> (((Unbox(Box(x_$9,p_$6)) : U) == (UnBoxDisguise(x_$9) : U)) && (BoxDisguise((Unbox(Box(x_$9,p_$6)) : U)) == x_$9)) ));
	assume (forall  typ_$3 : TName, occurrence_$1 : NondetType, activity_$1 : ActivityType :: {NewInstance(AllocFunc(typ_$3),occurrence_$1,activity_$1)} ( ($typeof(NewInstance(AllocFunc(typ_$3),occurrence_$1,activity_$1)) == typ_$3) && (!(NewInstance(AllocFunc(typ_$3),occurrence_$1,activity_$1) == null)) ));
	assume (forall  typ_$4 : TName, occurrence_$2 : NondetType, activity_$2 : ActivityType, heap_$5 : HeapType :: {heap_$5[NewInstance(AllocFunc(typ_$4),occurrence_$2,activity_$2),$allocated]} ( IsHeap(heap_$5) ==> heap_$5[NewInstance(AllocFunc(typ_$4),occurrence_$2,activity_$2),$allocated] ));
	assume $IsValueType(System.SByte);
	assume $IsValueType(System.Byte);
	assume $IsValueType(System.Int16);
	assume $IsValueType(System.UInt16);
	assume $IsValueType(System.Int32);
	assume $IsValueType(System.UInt32);
	assume $IsValueType(System.Int64);
	assume $IsValueType(System.UInt64);
	assume $IsValueType(System.Char);
	assume $IsValueType(System.UIntPtr);
	assume $IsValueType(System.IntPtr);
	assume (forall  i_$14 : Integer :: ( InRange(i_$14,System.SByte) <==> (((0 - 128) <= i_$14) && (i_$14 < 128)) ));
	assume (forall  i_$15 : Integer :: ( InRange(i_$15,System.Byte) <==> ((0 <= i_$15) && (i_$15 < 256)) ));
	assume (forall  i_$16 : Integer :: ( InRange(i_$16,System.Int16) <==> (((0 - 32768) <= i_$16) && (i_$16 < 32768)) ));
	assume (forall  i_$17 : Integer :: ( InRange(i_$17,System.UInt16) <==> ((0 <= i_$17) && (i_$17 < 65536)) ));
	assume (forall  i_$18 : Integer :: ( InRange(i_$18,System.Int32) <==> (((0 - 2147483648) <= i_$18) && (i_$18 <= 2147483647)) ));
	assume (forall  i_$19 : Integer :: ( InRange(i_$19,System.UInt32) <==> ((0 <= i_$19) && (i_$19 <= 4294967295)) ));
	assume (forall  i_$20 : Integer :: ( InRange(i_$20,System.Int64) <==> (((0 - 9223372036854775808) <= i_$20) && (i_$20 <= 9223372036854775807)) ));
	assume (forall  i_$21 : Integer :: ( InRange(i_$21,System.UInt64) <==> ((0 <= i_$21) && (i_$21 <= 18446744073709551615)) ));
	assume (forall  i_$22 : Integer :: ( InRange(i_$22,System.Char) <==> ((0 <= i_$22) && (i_$22 < 65536)) ));
	assume (forall  z : Integer, B_$0 : TName, C_$0 : TName :: ( InRange(z,C_$0) ==> ($IntToInt(z,B_$0,C_$0) == z) ));
	assume (forall<a> b_$0 : Boolean, x_$10 : a, y_$1 : a :: {$IfThenElse(b_$0,x_$10,y_$1)} ( b_$0 ==> ($IfThenElse(b_$0,x_$10,y_$1) == x_$10) ));
	assume (forall<a> b_$1 : Boolean, x_$11 : a, y_$2 : a :: {$IfThenElse(b_$1,x_$11,y_$2)} ( (!b_$1) ==> ($IfThenElse(b_$1,x_$11,y_$2) == y_$2) ));
	assume (forall  x_$12 : Integer, y_$3 : Integer :: {x_$12 mod y_$3} {x_$12 div y_$3} ( (x_$12 mod y_$3) == (x_$12 - ((x_$12 div y_$3) * y_$3)) ));
	assume (forall  x_$13 : Integer, y_$4 : Integer :: {x_$13 mod y_$4} ( ((0 <= x_$13) && (0 < y_$4)) ==> ((0 <= (x_$13 mod y_$4)) && ((x_$13 mod y_$4) < y_$4)) ));
	assume (forall  x_$14 : Integer, y_$5 : Integer :: {x_$14 mod y_$5} ( ((0 <= x_$14) && (y_$5 < 0)) ==> ((0 <= (x_$14 mod y_$5)) && ((x_$14 mod y_$5) < (0 - y_$5))) ));
	assume (forall  x_$15 : Integer, y_$6 : Integer :: {x_$15 mod y_$6} ( ((x_$15 <= 0) && (0 < y_$6)) ==> (((0 - y_$6) < (x_$15 mod y_$6)) && ((x_$15 mod y_$6) <= 0)) ));
	assume (forall  x_$16 : Integer, y_$7 : Integer :: {x_$16 mod y_$7} ( ((x_$16 <= 0) && (y_$7 < 0)) ==> ((y_$7 < (x_$16 mod y_$7)) && ((x_$16 mod y_$7) <= 0)) ));
	assume (forall  x_$17 : Integer, y_$8 : Integer :: {(x_$17 + y_$8) mod y_$8} ( ((0 <= x_$17) && (0 <= y_$8)) ==> (((x_$17 + y_$8) mod y_$8) == (x_$17 mod y_$8)) ));
	assume (forall  x_$18 : Integer, y_$9 : Integer :: {(y_$9 + x_$18) mod y_$9} ( ((0 <= x_$18) && (0 <= y_$9)) ==> (((y_$9 + x_$18) mod y_$9) == (x_$18 mod y_$9)) ));
	assume (forall  x_$19 : Integer, y_$10 : Integer :: {(x_$19 - y_$10) mod y_$10} ( ((0 <= (x_$19 - y_$10)) && (0 <= y_$10)) ==> (((x_$19 - y_$10) mod y_$10) == (x_$19 mod y_$10)) ));
	assume (forall  a_$16 : Integer, b_$2 : Integer, d_$1 : Integer :: {a_$16 mod d_$1,b_$2 mod d_$1} ( (((2 <= d_$1) && ((a_$16 mod d_$1) == (b_$2 mod d_$1))) && (a_$16 < b_$2)) ==> ((a_$16 + d_$1) <= b_$2) ));
	assume (forall  x_$20 : Integer, y_$11 : Integer :: {#and(x_$20,y_$11)} ( #and(x_$20,y_$11) == #and(y_$11,x_$20) ));
	assume (forall  x_$21 : Integer, y_$12 : Integer :: {#or(x_$21,y_$12)} ( #or(x_$21,y_$12) == #or(y_$12,x_$21) ));
	assume (forall  x_$22 : Integer, y_$13 : Integer :: {#and(x_$22,y_$13)} ( ((0 <= x_$22) || (0 <= y_$13)) ==> (0 <= #and(x_$22,y_$13)) ));
	assume (forall  x_$23 : Integer, y_$14 : Integer :: {#or(x_$23,y_$14)} ( ((0 <= x_$23) && (0 <= y_$14)) ==> ((0 <= #or(x_$23,y_$14)) && (#or(x_$23,y_$14) <= (x_$23 + y_$14))) ));
	assume (forall  x_$24 : Integer :: {#and(x_$24,0 - 1)} ( #and(x_$24,0 - 1) == x_$24 ));
	assume (forall  x_$25 : Integer :: {#and(x_$25,0)} ( #and(x_$25,0) == 0 ));
	assume (forall  x_$26 : Integer :: {#or(x_$26,0 - 1)} ( #or(x_$26,0 - 1) == (0 - 1) ));
	assume (forall  x_$27 : Integer :: {#or(x_$27,0)} ( #or(x_$27,0) == x_$27 ));
	assume (forall  i_$23 : Integer :: {#shl(i_$23,0)} ( #shl(i_$23,0) == i_$23 ));
	assume (forall  i_$24 : Integer, j_$0 : Integer :: {#shl(i_$24,j_$0)} ( (1 <= j_$0) ==> (#shl(i_$24,j_$0) == (#shl(i_$24,j_$0 - 1) * 2)) ));
	assume (forall  i_$25 : Integer, j_$1 : Integer :: {#shl(i_$25,j_$1)} ( ((((0 <= i_$25) && (i_$25 < 32768)) && (0 <= j_$1)) && (j_$1 <= 16)) ==> ((0 <= #shl(i_$25,j_$1)) && (#shl(i_$25,j_$1) <= 2147483647)) ));
	assume (forall  i_$26 : Integer :: {#shr(i_$26,0)} ( #shr(i_$26,0) == i_$26 ));
	assume (forall  i_$27 : Integer, j_$2 : Integer :: {#shr(i_$27,j_$2)} ( (1 <= j_$2) ==> (#shr(i_$27,j_$2) == (#shr(i_$27,j_$2 - 1) div 2)) ));
	assume (forall  x_$28 : Integer, y_$15 : Integer :: {#min(x_$28,y_$15)} ( (((#min(x_$28,y_$15) == x_$28) || (#min(x_$28,y_$15) == y_$15)) && (#min(x_$28,y_$15) <= x_$28)) && (#min(x_$28,y_$15) <= y_$15) ));
	assume (forall  x_$29 : Integer, y_$16 : Integer :: {#max(x_$29,y_$16)} ( (((#max(x_$29,y_$16) == x_$29) || (#max(x_$29,y_$16) == y_$16)) && (x_$29 <= #max(x_$29,y_$16))) && (y_$16 <= #max(x_$29,y_$16)) ));
	assume (forall  h_$28 : HeapType, a_$17 : ref, b_$3 : ref :: {#System.String.Equals$System.String(h_$28,a_$17,b_$3)} ( #System.String.Equals$System.String(h_$28,a_$17,b_$3) <==> #System.String.Equals$System.String$System.String(h_$28,a_$17,b_$3) ));
	assume (forall  h_$29 : HeapType, a_$18 : ref, b_$4 : ref :: {#System.String.Equals$System.String$System.String(h_$29,a_$18,b_$4)} ( ((#System.String.Equals$System.String$System.String(h_$29,a_$18,b_$4) <==> ##StringEquals(a_$18,b_$4)) && (#System.String.Equals$System.String$System.String(h_$29,a_$18,b_$4) <==> ##StringEquals(b_$4,a_$18))) && ((a_$18 == b_$4) ==> ##StringEquals(a_$18,b_$4)) ));
	assume (forall  a_$19 : ref, b_$5 : ref, c_$1 : ref :: ( (##StringEquals(a_$19,b_$5) && ##StringEquals(b_$5,c_$1)) ==> ##StringEquals(a_$19,c_$1) ));
	assume (forall  h_$30 : HeapType, a_$20 : ref, b_$6 : ref :: {#System.String.Equals$System.String$System.String(h_$30,a_$20,b_$6)} ( (((!(a_$20 == null)) && (!(b_$6 == null))) && #System.String.Equals$System.String$System.String(h_$30,a_$20,b_$6)) ==> (#System.String.IsInterned$System.String$notnull(h_$30,a_$20) == #System.String.IsInterned$System.String$notnull(h_$30,b_$6)) ));
	assume !IsStaticField(SExpressionSimplifier.Nary.F);
	assume IncludeInMainFrameCondition(SExpressionSimplifier.Nary.F);
	assume $IncludedInModifiesStar(SExpressionSimplifier.Nary.F);
	assume AsFrozenField(SExpressionSimplifier.Nary.F) == SExpressionSimplifier.Nary.F;
	assume DeclType(SExpressionSimplifier.Nary.F) == SExpressionSimplifier.Nary;
	assume AsNonNullRefField(SExpressionSimplifier.Nary.F,System.String) == SExpressionSimplifier.Nary.F;
	assume !IsStaticField(SExpressionSimplifier.Nary.Args);
	assume IncludeInMainFrameCondition(SExpressionSimplifier.Nary.Args);
	assume $IncludedInModifiesStar(SExpressionSimplifier.Nary.Args);
	assume AsRepField(SExpressionSimplifier.Nary.Args,SExpressionSimplifier.Nary) == SExpressionSimplifier.Nary.Args;
	assume AsElementsFrozenField(SExpressionSimplifier.Nary.Args,0) == SExpressionSimplifier.Nary.Args;
	assume DeclType(SExpressionSimplifier.Nary.Args) == SExpressionSimplifier.Nary;
	assume AsNonNullRefField(SExpressionSimplifier.Nary.Args,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) == SExpressionSimplifier.Nary.Args;
	assume SExpressionSimplifier.PrettySx <: SExpressionSimplifier.PrettySx;
	assume ($BaseClass(SExpressionSimplifier.PrettySx) == System.Object) && (AsDirectSubClass(SExpressionSimplifier.PrettySx,$BaseClass(SExpressionSimplifier.PrettySx)) == SExpressionSimplifier.PrettySx);
	assume (forall  $oi : ref, $h : HeapType :: {$h[$oi,$inv] <: SExpressionSimplifier.PrettySx} ( ((IsHeap($h) && ($h[$oi,$inv] <: SExpressionSimplifier.PrettySx)) && (!($h[$oi,$localinv] == $BaseClass(SExpressionSimplifier.PrettySx)))) ==> true ));
	assume (forall  $ev : Integer :: {InRange($ev,SExpressionSimplifier.PrettySx.Token)} ( InRange($ev,SExpressionSimplifier.PrettySx.Token) <==> ((0 <= $ev) && ($ev <= 2)) ));
	assume SExpressionSimplifier.Sx <: SExpressionSimplifier.Sx;
	assume ($BaseClass(SExpressionSimplifier.Sx) == System.Object) && (AsDirectSubClass(SExpressionSimplifier.Sx,$BaseClass(SExpressionSimplifier.Sx)) == SExpressionSimplifier.Sx);
	assume $IsMemberlessType(SExpressionSimplifier.Sx);
	assume SExpressionSimplifier.Atom <: SExpressionSimplifier.Atom;
	assume ($BaseClass(SExpressionSimplifier.Atom) == SExpressionSimplifier.Sx) && (AsDirectSubClass(SExpressionSimplifier.Atom,$BaseClass(SExpressionSimplifier.Atom)) == SExpressionSimplifier.Atom);
	assume (forall  $U : TName :: {$U <: SExpressionSimplifier.Atom} ( ($U <: SExpressionSimplifier.Atom) ==> ($U == SExpressionSimplifier.Atom) ));
	assume (forall  $oi_$0 : ref, $h_$0 : HeapType :: {$h_$0[$oi_$0,$inv] <: SExpressionSimplifier.Atom} ( ((IsHeap($h_$0) && ($h_$0[$oi_$0,$inv] <: SExpressionSimplifier.Atom)) && (!($h_$0[$oi_$0,$localinv] == $BaseClass(SExpressionSimplifier.Atom)))) ==> true ));
	assume SExpressionSimplifier.Nary <: SExpressionSimplifier.Nary;
	assume ($BaseClass(SExpressionSimplifier.Nary) == SExpressionSimplifier.Sx) && (AsDirectSubClass(SExpressionSimplifier.Nary,$BaseClass(SExpressionSimplifier.Nary)) == SExpressionSimplifier.Nary);
	assume (forall  $U_$0 : TName :: {$U_$0 <: SExpressionSimplifier.Nary} ( ($U_$0 <: SExpressionSimplifier.Nary) ==> ($U_$0 == SExpressionSimplifier.Nary) ));
	assume (forall  $oi_$1 : ref, $h_$1 : HeapType :: {$h_$1[$oi_$1,$inv] <: SExpressionSimplifier.Nary} ( ((IsHeap($h_$1) && ($h_$1[$oi_$1,$inv] <: SExpressionSimplifier.Nary)) && (!($h_$1[$oi_$1,$localinv] == $BaseClass(SExpressionSimplifier.Nary)))) ==> true ));
	assume (forall  $U_$1 : TName :: {$U_$1 <: SExpressionSimplifier.Sx} ( ($U_$1 <: SExpressionSimplifier.Sx) ==> ((($U_$1 == SExpressionSimplifier.Sx) || ($U_$1 <: SExpressionSimplifier.Atom)) || ($U_$1 <: SExpressionSimplifier.Nary)) ));
	assume (forall  $oi_$2 : ref, $h_$2 : HeapType :: {$h_$2[$oi_$2,$inv] <: SExpressionSimplifier.Sx} ( ((IsHeap($h_$2) && ($h_$2[$oi_$2,$inv] <: SExpressionSimplifier.Sx)) && (!($h_$2[$oi_$2,$localinv] == $BaseClass(SExpressionSimplifier.Sx)))) ==> true ));
	assume System.IO.TextWriter <: System.IO.TextWriter;
	assume System.MarshalByRefObject <: System.MarshalByRefObject;
	assume ($BaseClass(System.MarshalByRefObject) == System.Object) && (AsDirectSubClass(System.MarshalByRefObject,$BaseClass(System.MarshalByRefObject)) == System.MarshalByRefObject);
	assume $IsMemberlessType(System.MarshalByRefObject);
	assume (forall  $oi_$3 : ref, $h_$3 : HeapType :: {$h_$3[$oi_$3,$inv] <: System.MarshalByRefObject} ( ((IsHeap($h_$3) && ($h_$3[$oi_$3,$inv] <: System.MarshalByRefObject)) && (!($h_$3[$oi_$3,$localinv] == $BaseClass(System.MarshalByRefObject)))) ==> true ));
	assume ($BaseClass(System.IO.TextWriter) == System.MarshalByRefObject) && (AsDirectSubClass(System.IO.TextWriter,$BaseClass(System.IO.TextWriter)) == System.IO.TextWriter);
	assume System.IDisposable <: System.IDisposable;
	assume $IsMemberlessType(System.IDisposable);
	assume $AsInterface(System.IDisposable) == System.IDisposable;
	assume System.IO.TextWriter <: System.IDisposable;
	assume $IsMemberlessType(System.IO.TextWriter);
	assume (forall  $oi_$4 : ref, $h_$4 : HeapType :: {$h_$4[$oi_$4,$inv] <: System.IO.TextWriter} ( ((IsHeap($h_$4) && ($h_$4[$oi_$4,$inv] <: System.IO.TextWriter)) && (!($h_$4[$oi_$4,$localinv] == $BaseClass(System.IO.TextWriter)))) ==> true ));
	assume System.String <: System.String;
	assume ($BaseClass(System.String) == System.Object) && (AsDirectSubClass(System.String,$BaseClass(System.String)) == System.String);
	assume System.IComparable <: System.IComparable;
	assume $IsMemberlessType(System.IComparable);
	assume $AsInterface(System.IComparable) == System.IComparable;
	assume System.String <: System.IComparable;
	assume System.ICloneable <: System.ICloneable;
	assume $IsMemberlessType(System.ICloneable);
	assume $AsInterface(System.ICloneable) == System.ICloneable;
	assume System.String <: System.ICloneable;
	assume System.IConvertible <: System.IConvertible;
	assume $IsMemberlessType(System.IConvertible);
	assume $AsInterface(System.IConvertible) == System.IConvertible;
	assume System.String <: System.IConvertible;
	assume System.IComparable`1...System.String <: System.IComparable`1...System.String;
	assume $IsMemberlessType(System.IComparable`1...System.String);
	assume $AsInterface(System.IComparable`1...System.String) == System.IComparable`1...System.String;
	assume System.String <: System.IComparable`1...System.String;
	assume System.Collections.Generic.IEnumerable`1...System.Char <: System.Collections.Generic.IEnumerable`1...System.Char;
	assume System.Collections.IEnumerable <: System.Collections.IEnumerable;
	assume $IsMemberlessType(System.Collections.IEnumerable);
	assume $AsInterface(System.Collections.IEnumerable) == System.Collections.IEnumerable;
	assume System.Collections.Generic.IEnumerable`1...System.Char <: System.Collections.IEnumerable;
	assume $IsMemberlessType(System.Collections.Generic.IEnumerable`1...System.Char);
	assume $AsInterface(System.Collections.Generic.IEnumerable`1...System.Char) == System.Collections.Generic.IEnumerable`1...System.Char;
	assume System.String <: System.Collections.Generic.IEnumerable`1...System.Char;
	assume System.String <: System.Collections.IEnumerable;
	assume System.IEquatable`1...System.String <: System.IEquatable`1...System.String;
	assume $IsMemberlessType(System.IEquatable`1...System.String);
	assume $AsInterface(System.IEquatable`1...System.String) == System.IEquatable`1...System.String;
	assume System.String <: System.IEquatable`1...System.String;
	assume (forall  $U_$2 : TName :: {$U_$2 <: System.String} ( ($U_$2 <: System.String) ==> ($U_$2 == System.String) ));
	assume (forall  $oi_$5 : ref, $h_$5 : HeapType :: {$h_$5[$oi_$5,$inv] <: System.String} ( ((IsHeap($h_$5) && ($h_$5[$oi_$5,$inv] <: System.String)) && (!($h_$5[$oi_$5,$localinv] == $BaseClass(System.String)))) ==> true ));
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume ($BaseClass(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) == System.Object) && (AsDirectSubClass(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx,$BaseClass(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.IEnumerable;
	assume $IsMemberlessType(System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume $AsInterface(System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) == System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.IEnumerable;
	assume $IsMemberlessType(System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume $AsInterface(System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) == System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.IEnumerable;
	assume $IsMemberlessType(System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume $AsInterface(System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) == System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.IEnumerable`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.IList <: System.Collections.IList;
	assume System.Collections.ICollection <: System.Collections.ICollection;
	assume System.Collections.ICollection <: System.Collections.IEnumerable;
	assume $IsMemberlessType(System.Collections.ICollection);
	assume $AsInterface(System.Collections.ICollection) == System.Collections.ICollection;
	assume System.Collections.IList <: System.Collections.ICollection;
	assume System.Collections.IList <: System.Collections.IEnumerable;
	assume $IsMemberlessType(System.Collections.IList);
	assume $AsInterface(System.Collections.IList) == System.Collections.IList;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.IList;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.ICollection;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.IEnumerable;
	assume (forall  $oi_$6 : ref, $h_$6 : HeapType :: {$h_$6[$oi_$6,$inv] <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx} ( ((IsHeap($h_$6) && ($h_$6[$oi_$6,$inv] <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && (!($h_$6[$oi_$6,$localinv] == $BaseClass(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)))) ==> true ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$0 : HeapType, this_$0 : ref :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$0,this_$0)} ( (((IsPreHeap($Heap_$0) && $IsNotNull(this_$0,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && $Heap_$0[this_$0,$allocated]) && ((forall  $pc : ref :: {$typeof($pc)} {$Heap_$0[$pc,$localinv]} {$Heap_$0[$pc,$inv]} {$Heap_$0[$pc,$ownerFrame]} {$Heap_$0[$pc,$ownerRef]} ( ((((!($pc == null)) && $Heap_$0[$pc,$allocated]) && ($Heap_$0[$pc,$ownerRef] == $Heap_$0[this_$0,$ownerRef])) && ($Heap_$0[$pc,$ownerFrame] == $Heap_$0[this_$0,$ownerFrame])) ==> (($Heap_$0[$pc,$inv] == $typeof($pc)) && ($Heap_$0[$pc,$localinv] == $typeof($pc))) )))) ==> (((#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$0,this_$0) >= 0) && ((((!($Heap_$0[this_$0,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$0[$Heap_$0[this_$0,$ownerRef],$inv] <: $Heap_$0[this_$0,$ownerFrame])) && (!($Heap_$0[$Heap_$0[this_$0,$ownerRef],$localinv] == $BaseClass($Heap_$0[this_$0,$ownerFrame])))) ==> (((!(((!($Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$0[$Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerRef],$inv] <: $Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerFrame])) && (!($Heap_$0[$Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerFrame]))))) ==> ($Heap_$0[this_$0,$FirstConsistentOwner] == $Heap_$0[this_$0,$ownerRef])) && ((((!($Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$0[$Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerRef],$inv] <: $Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerFrame])) && (!($Heap_$0[$Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$0[$Heap_$0[this_$0,$ownerRef],$ownerFrame])))) ==> ($Heap_$0[this_$0,$FirstConsistentOwner] == $Heap_$0[$Heap_$0[this_$0,$ownerRef],$FirstConsistentOwner]))))) && ($AsPureObject(this_$0) == this_$0)) )));
	assume (forall  $Heap_$1 : HeapType, this_$1 : ref :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$1,this_$1)} ( ((((((!(this_$1 == null)) && ($typeof(this_$1) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$1[this_$1,$inv] == $typeof(this_$1))) && ($Heap_$1[this_$1,$localinv] == $typeof(this_$1))) && IsHeap($Heap_$1)) && $Heap_$1[this_$1,$allocated]) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$1,this_$1) == ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$1[this_$1,$exposeVersion])) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$2 : HeapType, this_$2 : ref :: {#SExpressionSimplifier.Sx.get_IsTrue($Heap_$2,this_$2)} ( (((IsPreHeap($Heap_$2) && $IsNotNull(this_$2,SExpressionSimplifier.Sx)) && $Heap_$2[this_$2,$allocated]) && IsFrozen(this_$2,$Heap_$2)) ==> ($AsPureObject(this_$2) == this_$2) )));
	assume (forall  $Heap_$3 : HeapType, this_$3 : ref :: {#SExpressionSimplifier.Sx.get_IsTrue($Heap_$3,this_$3)} ( ((((((!(this_$3 == null)) && ($typeof(this_$3) <: SExpressionSimplifier.Sx)) && ($Heap_$3[this_$3,$inv] == $typeof(this_$3))) && ($Heap_$3[this_$3,$localinv] == $typeof(this_$3))) && IsHeap($Heap_$3)) && $Heap_$3[this_$3,$allocated]) ==> (#SExpressionSimplifier.Sx.get_IsTrue($Heap_$3,this_$3) <==> ##SExpressionSimplifier.Sx.get_IsTrue($Heap_$3[this_$3,$exposeVersion])) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$4 : HeapType, this_$4 : ref, index$in : Integer :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$4,this_$4,index$in)} ( (((((IsPreHeap($Heap_$4) && $IsNotNull(this_$4,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && $Heap_$4[this_$4,$allocated]) && (0 <= index$in)) && (index$in < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$4,this_$4))) && ((forall  $pc_$0 : ref :: {$typeof($pc_$0)} {$Heap_$4[$pc_$0,$localinv]} {$Heap_$4[$pc_$0,$inv]} {$Heap_$4[$pc_$0,$ownerFrame]} {$Heap_$4[$pc_$0,$ownerRef]} ( ((((!($pc_$0 == null)) && $Heap_$4[$pc_$0,$allocated]) && ($Heap_$4[$pc_$0,$ownerRef] == $Heap_$4[this_$4,$ownerRef])) && ($Heap_$4[$pc_$0,$ownerFrame] == $Heap_$4[this_$4,$ownerFrame])) ==> (($Heap_$4[$pc_$0,$inv] == $typeof($pc_$0)) && ($Heap_$4[$pc_$0,$localinv] == $typeof($pc_$0))) )))) ==> (((($IsNotNull(#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$4,this_$4,index$in),SExpressionSimplifier.Sx) && $Heap_$4[#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$4,this_$4,index$in),$allocated]) && ((((!($Heap_$4[this_$4,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$4[$Heap_$4[this_$4,$ownerRef],$inv] <: $Heap_$4[this_$4,$ownerFrame])) && (!($Heap_$4[$Heap_$4[this_$4,$ownerRef],$localinv] == $BaseClass($Heap_$4[this_$4,$ownerFrame])))) ==> (((!(((!($Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$4[$Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerRef],$inv] <: $Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerFrame])) && (!($Heap_$4[$Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerFrame]))))) ==> ($Heap_$4[this_$4,$FirstConsistentOwner] == $Heap_$4[this_$4,$ownerRef])) && ((((!($Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$4[$Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerRef],$inv] <: $Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerFrame])) && (!($Heap_$4[$Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$4[$Heap_$4[this_$4,$ownerRef],$ownerFrame])))) ==> ($Heap_$4[this_$4,$FirstConsistentOwner] == $Heap_$4[$Heap_$4[this_$4,$ownerRef],$FirstConsistentOwner]))))) && ($AsPureObject(this_$4) == this_$4)) && IsFrozen(#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$4,this_$4,index$in),$Heap_$4)) )));
	assume (forall  $Heap_$5 : HeapType, this_$5 : ref, index$in_$0 : Integer :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$5,this_$5,index$in_$0)} ( ((((((!(this_$5 == null)) && ($typeof(this_$5) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$5[this_$5,$inv] == $typeof(this_$5))) && ($Heap_$5[this_$5,$localinv] == $typeof(this_$5))) && IsHeap($Heap_$5)) && $Heap_$5[this_$5,$allocated]) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$5,this_$5,index$in_$0) == ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$5[this_$5,$exposeVersion],index$in_$0)) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$6 : HeapType, this_$6 : ref, index$in_$1 : Integer :: {#System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$6,this_$6,index$in_$1)} ( (((IsPreHeap($Heap_$6) && $IsNotNull(this_$6,System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && $Heap_$6[this_$6,$allocated]) && ((forall  $pc_$1 : ref :: {$typeof($pc_$1)} {$Heap_$6[$pc_$1,$localinv]} {$Heap_$6[$pc_$1,$inv]} {$Heap_$6[$pc_$1,$ownerFrame]} {$Heap_$6[$pc_$1,$ownerRef]} ( ((((!($pc_$1 == null)) && $Heap_$6[$pc_$1,$allocated]) && ($Heap_$6[$pc_$1,$ownerRef] == $Heap_$6[this_$6,$ownerRef])) && ($Heap_$6[$pc_$1,$ownerFrame] == $Heap_$6[this_$6,$ownerFrame])) ==> (($Heap_$6[$pc_$1,$inv] == $typeof($pc_$1)) && ($Heap_$6[$pc_$1,$localinv] == $typeof($pc_$1))) )))) ==> (((($IsNotNull(#System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$6,this_$6,index$in_$1),SExpressionSimplifier.Sx) && $Heap_$6[#System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$6,this_$6,index$in_$1),$allocated]) && ((((!($Heap_$6[this_$6,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$6[$Heap_$6[this_$6,$ownerRef],$inv] <: $Heap_$6[this_$6,$ownerFrame])) && (!($Heap_$6[$Heap_$6[this_$6,$ownerRef],$localinv] == $BaseClass($Heap_$6[this_$6,$ownerFrame])))) ==> (((!(((!($Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$6[$Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerRef],$inv] <: $Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerFrame])) && (!($Heap_$6[$Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerFrame]))))) ==> ($Heap_$6[this_$6,$FirstConsistentOwner] == $Heap_$6[this_$6,$ownerRef])) && ((((!($Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$6[$Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerRef],$inv] <: $Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerFrame])) && (!($Heap_$6[$Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$6[$Heap_$6[this_$6,$ownerRef],$ownerFrame])))) ==> ($Heap_$6[this_$6,$FirstConsistentOwner] == $Heap_$6[$Heap_$6[this_$6,$ownerRef],$FirstConsistentOwner]))))) && ($AsPureObject(this_$6) == this_$6)) && IsFrozen(#System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$6,this_$6,index$in_$1),$Heap_$6)) )));
	assume (forall  $Heap_$7 : HeapType, this_$7 : ref, index$in_$2 : Integer :: {#System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$7,this_$7,index$in_$2)} ( ((((((!(this_$7 == null)) && ($typeof(this_$7) <: System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$7[this_$7,$inv] == $typeof(this_$7))) && ($Heap_$7[this_$7,$localinv] == $typeof(this_$7))) && IsHeap($Heap_$7)) && $Heap_$7[this_$7,$allocated]) ==> (#System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$7,this_$7,index$in_$2) == ##System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$7[this_$7,$exposeVersion],index$in_$2)) ));
	assume (forall  $Heap_$8 : HeapType, this_$8 : ref, index$in_$3 : Integer :: ( ((!(this_$8 == null)) && ($typeof(this_$8) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$8,this_$8,index$in_$3) == #System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$8,this_$8,index$in_$3)) ));
	assume (forall  $Heap_$9 : HeapType, this_$9 : ref, index$in_$4 : Integer :: ( ((!(this_$9 == null)) && ($typeof(this_$9) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$9,this_$9,index$in_$4) == #System.Collections.Generic.IList`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$9,this_$9,index$in_$4)) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$10 : HeapType, this_$10 : ref :: {#System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$10,this_$10)} ( (((IsPreHeap($Heap_$10) && $IsNotNull(this_$10,System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && $Heap_$10[this_$10,$allocated]) && ((forall  $pc_$2 : ref :: {$typeof($pc_$2)} {$Heap_$10[$pc_$2,$localinv]} {$Heap_$10[$pc_$2,$inv]} {$Heap_$10[$pc_$2,$ownerFrame]} {$Heap_$10[$pc_$2,$ownerRef]} ( ((((!($pc_$2 == null)) && $Heap_$10[$pc_$2,$allocated]) && ($Heap_$10[$pc_$2,$ownerRef] == $Heap_$10[this_$10,$ownerRef])) && ($Heap_$10[$pc_$2,$ownerFrame] == $Heap_$10[this_$10,$ownerFrame])) ==> (($Heap_$10[$pc_$2,$inv] == $typeof($pc_$2)) && ($Heap_$10[$pc_$2,$localinv] == $typeof($pc_$2))) )))) ==> (((((!($Heap_$10[this_$10,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$10[$Heap_$10[this_$10,$ownerRef],$inv] <: $Heap_$10[this_$10,$ownerFrame])) && (!($Heap_$10[$Heap_$10[this_$10,$ownerRef],$localinv] == $BaseClass($Heap_$10[this_$10,$ownerFrame])))) ==> (((!(((!($Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$10[$Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerRef],$inv] <: $Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerFrame])) && (!($Heap_$10[$Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerFrame]))))) ==> ($Heap_$10[this_$10,$FirstConsistentOwner] == $Heap_$10[this_$10,$ownerRef])) && ((((!($Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$10[$Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerRef],$inv] <: $Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerFrame])) && (!($Heap_$10[$Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$10[$Heap_$10[this_$10,$ownerRef],$ownerFrame])))) ==> ($Heap_$10[this_$10,$FirstConsistentOwner] == $Heap_$10[$Heap_$10[this_$10,$ownerRef],$FirstConsistentOwner])))) && ($AsPureObject(this_$10) == this_$10)) )));
	assume (forall  $Heap_$11 : HeapType, this_$11 : ref :: {#System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$11,this_$11)} ( ((((((!(this_$11 == null)) && ($typeof(this_$11) <: System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$11[this_$11,$inv] == $typeof(this_$11))) && ($Heap_$11[this_$11,$localinv] == $typeof(this_$11))) && IsHeap($Heap_$11)) && $Heap_$11[this_$11,$allocated]) ==> (#System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$11,this_$11) == ##System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$11[this_$11,$exposeVersion])) ));
	assume (forall  $Heap_$12 : HeapType, this_$12 : ref :: ( ((!(this_$12 == null)) && ($typeof(this_$12) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$12,this_$12) == #System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$12,this_$12)) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$13 : HeapType, this_$13 : ref :: {#System.Collections.ICollection.get_Count($Heap_$13,this_$13)} ( (((IsPreHeap($Heap_$13) && $IsNotNull(this_$13,System.Collections.ICollection)) && $Heap_$13[this_$13,$allocated]) && ((forall  $pc_$3 : ref :: {$typeof($pc_$3)} {$Heap_$13[$pc_$3,$localinv]} {$Heap_$13[$pc_$3,$inv]} {$Heap_$13[$pc_$3,$ownerFrame]} {$Heap_$13[$pc_$3,$ownerRef]} ( ((((!($pc_$3 == null)) && $Heap_$13[$pc_$3,$allocated]) && ($Heap_$13[$pc_$3,$ownerRef] == $Heap_$13[this_$13,$ownerRef])) && ($Heap_$13[$pc_$3,$ownerFrame] == $Heap_$13[this_$13,$ownerFrame])) ==> (($Heap_$13[$pc_$3,$inv] == $typeof($pc_$3)) && ($Heap_$13[$pc_$3,$localinv] == $typeof($pc_$3))) )))) ==> (((#System.Collections.ICollection.get_Count($Heap_$13,this_$13) >= 0) && ((((!($Heap_$13[this_$13,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$13[$Heap_$13[this_$13,$ownerRef],$inv] <: $Heap_$13[this_$13,$ownerFrame])) && (!($Heap_$13[$Heap_$13[this_$13,$ownerRef],$localinv] == $BaseClass($Heap_$13[this_$13,$ownerFrame])))) ==> (((!(((!($Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$13[$Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerRef],$inv] <: $Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerFrame])) && (!($Heap_$13[$Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerFrame]))))) ==> ($Heap_$13[this_$13,$FirstConsistentOwner] == $Heap_$13[this_$13,$ownerRef])) && ((((!($Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$13[$Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerRef],$inv] <: $Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerFrame])) && (!($Heap_$13[$Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$13[$Heap_$13[this_$13,$ownerRef],$ownerFrame])))) ==> ($Heap_$13[this_$13,$FirstConsistentOwner] == $Heap_$13[$Heap_$13[this_$13,$ownerRef],$FirstConsistentOwner]))))) && ($AsPureObject(this_$13) == this_$13)) )));
	assume (forall  $Heap_$14 : HeapType, this_$14 : ref :: {#System.Collections.ICollection.get_Count($Heap_$14,this_$14)} ( ((((((!(this_$14 == null)) && ($typeof(this_$14) <: System.Collections.ICollection)) && ($Heap_$14[this_$14,$inv] == $typeof(this_$14))) && ($Heap_$14[this_$14,$localinv] == $typeof(this_$14))) && IsHeap($Heap_$14)) && $Heap_$14[this_$14,$allocated]) ==> (#System.Collections.ICollection.get_Count($Heap_$14,this_$14) == ##System.Collections.ICollection.get_Count($Heap_$14[this_$14,$exposeVersion])) ));
	assume (forall  $Heap_$15 : HeapType, this_$15 : ref :: ( ((!(this_$15 == null)) && ($typeof(this_$15) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$15,this_$15) == #System.Collections.ICollection.get_Count($Heap_$15,this_$15)) ));
	assume (forall  $Heap_$16 : HeapType, this_$16 : ref :: ( ((!(this_$16 == null)) && ($typeof(this_$16) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$16,this_$16) == #System.Collections.Generic.ICollection`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$16,this_$16)) ));
	assume (forall  $Heap_$17 : HeapType, this_$17 : ref :: ( ((!(this_$17 == null)) && ($typeof(this_$17) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$17,this_$17) == #System.Collections.ICollection.get_Count($Heap_$17,this_$17)) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$18 : HeapType, this_$18 : ref :: {#SExpressionSimplifier.Sx.get_IsFalse($Heap_$18,this_$18)} ( (((IsPreHeap($Heap_$18) && $IsNotNull(this_$18,SExpressionSimplifier.Sx)) && $Heap_$18[this_$18,$allocated]) && IsFrozen(this_$18,$Heap_$18)) ==> ($AsPureObject(this_$18) == this_$18) )));
	assume (forall  $Heap_$19 : HeapType, this_$19 : ref :: {#SExpressionSimplifier.Sx.get_IsFalse($Heap_$19,this_$19)} ( ((((((!(this_$19 == null)) && ($typeof(this_$19) <: SExpressionSimplifier.Sx)) && ($Heap_$19[this_$19,$inv] == $typeof(this_$19))) && ($Heap_$19[this_$19,$localinv] == $typeof(this_$19))) && IsHeap($Heap_$19)) && $Heap_$19[this_$19,$allocated]) ==> (#SExpressionSimplifier.Sx.get_IsFalse($Heap_$19,this_$19) <==> ##SExpressionSimplifier.Sx.get_IsFalse($Heap_$19[this_$19,$exposeVersion])) ));
	assume System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.IDisposable;
	assume System.Collections.IEnumerator <: System.Collections.IEnumerator;
	assume $IsMemberlessType(System.Collections.IEnumerator);
	assume $AsInterface(System.Collections.IEnumerator) == System.Collections.IEnumerator;
	assume System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: System.Collections.IEnumerator;
	assume $IsMemberlessType(System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume $AsInterface(System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) == System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator <: System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator <: System.IDisposable;
	assume System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator <: System.Collections.IEnumerator;
	assume (forall  $bx : ref :: {BoxTester($bx,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator)} ( (!(BoxTester($bx,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator) == null)) ==> ((exists  $s : struct :: ( Box($s,$bx) == $bx ))) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$20 : HeapType, this_$20 : ref :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.GetEnumerator($Heap_$20,this_$20)} ( (((IsPreHeap($Heap_$20) && $IsNotNull(this_$20,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && $Heap_$20[this_$20,$allocated]) && ((forall  $pc_$4 : ref :: {$typeof($pc_$4)} {$Heap_$20[$pc_$4,$localinv]} {$Heap_$20[$pc_$4,$inv]} {$Heap_$20[$pc_$4,$ownerFrame]} {$Heap_$20[$pc_$4,$ownerRef]} ( ((((!($pc_$4 == null)) && $Heap_$20[$pc_$4,$allocated]) && ($Heap_$20[$pc_$4,$ownerRef] == $Heap_$20[this_$20,$ownerRef])) && ($Heap_$20[$pc_$4,$ownerFrame] == $Heap_$20[this_$20,$ownerFrame])) ==> (($Heap_$20[$pc_$4,$inv] == $typeof($pc_$4)) && ($Heap_$20[$pc_$4,$localinv] == $typeof($pc_$4))) )))) ==> (((((!($Heap_$20[this_$20,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$20[$Heap_$20[this_$20,$ownerRef],$inv] <: $Heap_$20[this_$20,$ownerFrame])) && (!($Heap_$20[$Heap_$20[this_$20,$ownerRef],$localinv] == $BaseClass($Heap_$20[this_$20,$ownerFrame])))) ==> (((!(((!($Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$20[$Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerRef],$inv] <: $Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerFrame])) && (!($Heap_$20[$Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerFrame]))))) ==> ($Heap_$20[this_$20,$FirstConsistentOwner] == $Heap_$20[this_$20,$ownerRef])) && ((((!($Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$20[$Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerRef],$inv] <: $Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerFrame])) && (!($Heap_$20[$Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$20[$Heap_$20[this_$20,$ownerRef],$ownerFrame])))) ==> ($Heap_$20[this_$20,$FirstConsistentOwner] == $Heap_$20[$Heap_$20[this_$20,$ownerRef],$FirstConsistentOwner])))) && ($AsPureObject(this_$20) == this_$20)) )));
	assume (forall  $Heap_$21 : HeapType, this_$21 : ref :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.GetEnumerator($Heap_$21,this_$21)} ( ((((((!(this_$21 == null)) && ($typeof(this_$21) <: System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$21[this_$21,$inv] == $typeof(this_$21))) && ($Heap_$21[this_$21,$localinv] == $typeof(this_$21))) && IsHeap($Heap_$21)) && $Heap_$21[this_$21,$allocated]) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.GetEnumerator($Heap_$21,this_$21) == ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.GetEnumerator($Heap_$21[this_$21,$exposeVersion])) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$22 : HeapType, this$in : struct :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$22,this$in)} ( IsPreHeap($Heap_$22) ==> (($IsNotNull(#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$22,this$in),SExpressionSimplifier.Sx) && $Heap_$22[#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$22,this$in),$allocated]) && IsFrozen(#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$22,this$in),$Heap_$22)) )));
	assume (forall  $Heap_$23 : HeapType, this$in_$0 : struct :: {#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$23,this$in_$0)} ( #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$23,this$in_$0) == ##System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current(this$in_$0) ));
	assume $PurityAxiomsCanBeAssumed ==> ((forall  $Heap_$24 : HeapType, this_$22 : ref :: {#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$24,this_$22)} ( (((IsPreHeap($Heap_$24) && $IsNotNull(this_$22,System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && $Heap_$24[this_$22,$allocated]) && ((forall  $pc_$5 : ref :: {$typeof($pc_$5)} {$Heap_$24[$pc_$5,$localinv]} {$Heap_$24[$pc_$5,$inv]} {$Heap_$24[$pc_$5,$ownerFrame]} {$Heap_$24[$pc_$5,$ownerRef]} ( ((((!($pc_$5 == null)) && $Heap_$24[$pc_$5,$allocated]) && ($Heap_$24[$pc_$5,$ownerRef] == $Heap_$24[this_$22,$ownerRef])) && ($Heap_$24[$pc_$5,$ownerFrame] == $Heap_$24[this_$22,$ownerFrame])) ==> (($Heap_$24[$pc_$5,$inv] == $typeof($pc_$5)) && ($Heap_$24[$pc_$5,$localinv] == $typeof($pc_$5))) )))) ==> (((($IsNotNull(#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$24,this_$22),SExpressionSimplifier.Sx) && $Heap_$24[#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$24,this_$22),$allocated]) && ((((!($Heap_$24[this_$22,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$24[$Heap_$24[this_$22,$ownerRef],$inv] <: $Heap_$24[this_$22,$ownerFrame])) && (!($Heap_$24[$Heap_$24[this_$22,$ownerRef],$localinv] == $BaseClass($Heap_$24[this_$22,$ownerFrame])))) ==> (((!(((!($Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$24[$Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerRef],$inv] <: $Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerFrame])) && (!($Heap_$24[$Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerFrame]))))) ==> ($Heap_$24[this_$22,$FirstConsistentOwner] == $Heap_$24[this_$22,$ownerRef])) && ((((!($Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$24[$Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerRef],$inv] <: $Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerFrame])) && (!($Heap_$24[$Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$24[$Heap_$24[this_$22,$ownerRef],$ownerFrame])))) ==> ($Heap_$24[this_$22,$FirstConsistentOwner] == $Heap_$24[$Heap_$24[this_$22,$ownerRef],$FirstConsistentOwner]))))) && ($AsPureObject(this_$22) == this_$22)) && IsFrozen(#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$24,this_$22),$Heap_$24)) )));
	assume (forall  $Heap_$25 : HeapType, this_$23 : ref :: {#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$25,this_$23)} ( ((((((!(this_$23 == null)) && ($typeof(this_$23) <: System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$25[this_$23,$inv] == $typeof(this_$23))) && ($Heap_$25[this_$23,$localinv] == $typeof(this_$23))) && IsHeap($Heap_$25)) && $Heap_$25[this_$23,$allocated]) ==> (#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$25,this_$23) == ##System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$25[this_$23,$exposeVersion])) ));
	assume (forall  $Heap_$26 : HeapType, this$in_$1 : struct, $bx_$0 : ref :: {#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$26,Box(this$in_$1,$bx_$0))} ( ((IsHeap($Heap_$26) && (Box(this$in_$1,$bx_$0) == $bx_$0)) && ($typeof($bx_$0) <: System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$26,this$in_$1) == #System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$26,Box(this$in_$1,$bx_$0))) ));
	assume (forall  $Heap_$27 : HeapType, this$in_$2 : struct, $bx_$1 : ref :: {#System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$27,Box(this$in_$2,$bx_$1))} ( ((IsHeap($Heap_$27) && (Box(this$in_$2,$bx_$1) == $bx_$1)) && ($typeof($bx_$1) <: System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) ==> (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$27,this$in_$2) == #System.Collections.Generic.IEnumerator`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Current($Heap_$27,Box(this$in_$2,$bx_$1))) ));
	assume ((($IsNotNull($stringLiteral0,System.String) && ($StringLength($stringLiteral0) == 3)) && ((forall  heap_$6 : HeapType :: {heap_$6[$stringLiteral0,$allocated]} ( IsHeap(heap_$6) ==> heap_$6[$stringLiteral0,$allocated] )))) && ((forall  heap_$7 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$7,$stringLiteral0)} ( IsHeap(heap_$7) ==> (#System.String.IsInterned$System.String$notnull(heap_$7,$stringLiteral0) == $stringLiteral0) )))) && ((forall  heap_$8 : HeapType :: {IsFrozen($stringLiteral0,heap_$8)} ( IsHeap(heap_$8) ==> IsFrozen($stringLiteral0,heap_$8) )));
	assume ((($IsNotNull($stringLiteral1,System.String) && ($StringLength($stringLiteral1) == 2)) && ((forall  heap_$9 : HeapType :: {heap_$9[$stringLiteral1,$allocated]} ( IsHeap(heap_$9) ==> heap_$9[$stringLiteral1,$allocated] )))) && ((forall  heap_$10 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$10,$stringLiteral1)} ( IsHeap(heap_$10) ==> (#System.String.IsInterned$System.String$notnull(heap_$10,$stringLiteral1) == $stringLiteral1) )))) && ((forall  heap_$11 : HeapType :: {IsFrozen($stringLiteral1,heap_$11)} ( IsHeap(heap_$11) ==> IsFrozen($stringLiteral1,heap_$11) )));
	assume ((($IsNotNull($stringLiteral2,System.String) && ($StringLength($stringLiteral2) == 7)) && ((forall  heap_$12 : HeapType :: {heap_$12[$stringLiteral2,$allocated]} ( IsHeap(heap_$12) ==> heap_$12[$stringLiteral2,$allocated] )))) && ((forall  heap_$13 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$13,$stringLiteral2)} ( IsHeap(heap_$13) ==> (#System.String.IsInterned$System.String$notnull(heap_$13,$stringLiteral2) == $stringLiteral2) )))) && ((forall  heap_$14 : HeapType :: {IsFrozen($stringLiteral2,heap_$14)} ( IsHeap(heap_$14) ==> IsFrozen($stringLiteral2,heap_$14) )));
	assume ((($IsNotNull($stringLiteral3,System.String) && ($StringLength($stringLiteral3) == 3)) && ((forall  heap_$15 : HeapType :: {heap_$15[$stringLiteral3,$allocated]} ( IsHeap(heap_$15) ==> heap_$15[$stringLiteral3,$allocated] )))) && ((forall  heap_$16 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$16,$stringLiteral3)} ( IsHeap(heap_$16) ==> (#System.String.IsInterned$System.String$notnull(heap_$16,$stringLiteral3) == $stringLiteral3) )))) && ((forall  heap_$17 : HeapType :: {IsFrozen($stringLiteral3,heap_$17)} ( IsHeap(heap_$17) ==> IsFrozen($stringLiteral3,heap_$17) )));
	assume ((($IsNotNull($stringLiteral5,System.String) && ($StringLength($stringLiteral5) == 3)) && ((forall  heap_$18 : HeapType :: {heap_$18[$stringLiteral5,$allocated]} ( IsHeap(heap_$18) ==> heap_$18[$stringLiteral5,$allocated] )))) && ((forall  heap_$19 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$19,$stringLiteral5)} ( IsHeap(heap_$19) ==> (#System.String.IsInterned$System.String$notnull(heap_$19,$stringLiteral5) == $stringLiteral5) )))) && ((forall  heap_$20 : HeapType :: {IsFrozen($stringLiteral5,heap_$20)} ( IsHeap(heap_$20) ==> IsFrozen($stringLiteral5,heap_$20) )));
	assume ((($IsNotNull($stringLiteral7,System.String) && ($StringLength($stringLiteral7) == 6)) && ((forall  heap_$21 : HeapType :: {heap_$21[$stringLiteral7,$allocated]} ( IsHeap(heap_$21) ==> heap_$21[$stringLiteral7,$allocated] )))) && ((forall  heap_$22 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$22,$stringLiteral7)} ( IsHeap(heap_$22) ==> (#System.String.IsInterned$System.String$notnull(heap_$22,$stringLiteral7) == $stringLiteral7) )))) && ((forall  heap_$23 : HeapType :: {IsFrozen($stringLiteral7,heap_$23)} ( IsHeap(heap_$23) ==> IsFrozen($stringLiteral7,heap_$23) )));
	assume ((($IsNotNull($stringLiteral9,System.String) && ($StringLength($stringLiteral9) == 6)) && ((forall  heap_$24 : HeapType :: {heap_$24[$stringLiteral9,$allocated]} ( IsHeap(heap_$24) ==> heap_$24[$stringLiteral9,$allocated] )))) && ((forall  heap_$25 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$25,$stringLiteral9)} ( IsHeap(heap_$25) ==> (#System.String.IsInterned$System.String$notnull(heap_$25,$stringLiteral9) == $stringLiteral9) )))) && ((forall  heap_$26 : HeapType :: {IsFrozen($stringLiteral9,heap_$26)} ( IsHeap(heap_$26) ==> IsFrozen($stringLiteral9,heap_$26) )));
	assume ((($IsNotNull($stringLiteral10,System.String) && ($StringLength($stringLiteral10) == 6)) && ((forall  heap_$27 : HeapType :: {heap_$27[$stringLiteral10,$allocated]} ( IsHeap(heap_$27) ==> heap_$27[$stringLiteral10,$allocated] )))) && ((forall  heap_$28 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$28,$stringLiteral10)} ( IsHeap(heap_$28) ==> (#System.String.IsInterned$System.String$notnull(heap_$28,$stringLiteral10) == $stringLiteral10) )))) && ((forall  heap_$29 : HeapType :: {IsFrozen($stringLiteral10,heap_$29)} ( IsHeap(heap_$29) ==> IsFrozen($stringLiteral10,heap_$29) )));
	assume ((($IsNotNull($stringLiteral12,System.String) && ($StringLength($stringLiteral12) == 6)) && ((forall  heap_$30 : HeapType :: {heap_$30[$stringLiteral12,$allocated]} ( IsHeap(heap_$30) ==> heap_$30[$stringLiteral12,$allocated] )))) && ((forall  heap_$31 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$31,$stringLiteral12)} ( IsHeap(heap_$31) ==> (#System.String.IsInterned$System.String$notnull(heap_$31,$stringLiteral12) == $stringLiteral12) )))) && ((forall  heap_$32 : HeapType :: {IsFrozen($stringLiteral12,heap_$32)} ( IsHeap(heap_$32) ==> IsFrozen($stringLiteral12,heap_$32) )));
	assume ((($IsNotNull($stringLiteral13,System.String) && ($StringLength($stringLiteral13) == 7)) && ((forall  heap_$33 : HeapType :: {heap_$33[$stringLiteral13,$allocated]} ( IsHeap(heap_$33) ==> heap_$33[$stringLiteral13,$allocated] )))) && ((forall  heap_$34 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$34,$stringLiteral13)} ( IsHeap(heap_$34) ==> (#System.String.IsInterned$System.String$notnull(heap_$34,$stringLiteral13) == $stringLiteral13) )))) && ((forall  heap_$35 : HeapType :: {IsFrozen($stringLiteral13,heap_$35)} ( IsHeap(heap_$35) ==> IsFrozen($stringLiteral13,heap_$35) )));
	assume ((($IsNotNull($stringLiteral14,System.String) && ($StringLength($stringLiteral14) == 2)) && ((forall  heap_$36 : HeapType :: {heap_$36[$stringLiteral14,$allocated]} ( IsHeap(heap_$36) ==> heap_$36[$stringLiteral14,$allocated] )))) && ((forall  heap_$37 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$37,$stringLiteral14)} ( IsHeap(heap_$37) ==> (#System.String.IsInterned$System.String$notnull(heap_$37,$stringLiteral14) == $stringLiteral14) )))) && ((forall  heap_$38 : HeapType :: {IsFrozen($stringLiteral14,heap_$38)} ( IsHeap(heap_$38) ==> IsFrozen($stringLiteral14,heap_$38) )));
	assume ((($IsNotNull($stringLiteral15,System.String) && ($StringLength($stringLiteral15) == 3)) && ((forall  heap_$39 : HeapType :: {heap_$39[$stringLiteral15,$allocated]} ( IsHeap(heap_$39) ==> heap_$39[$stringLiteral15,$allocated] )))) && ((forall  heap_$40 : HeapType :: {#System.String.IsInterned$System.String$notnull(heap_$40,$stringLiteral15)} ( IsHeap(heap_$40) ==> (#System.String.IsInterned$System.String$notnull(heap_$40,$stringLiteral15) == $stringLiteral15) )))) && ((forall  heap_$41 : HeapType :: {IsFrozen($stringLiteral15,heap_$41)} ( IsHeap(heap_$41) ==> IsFrozen($stringLiteral15,heap_$41) )));
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume IsHeap($Heap);
	assume $IsNotNull(this,SExpressionSimplifier.Nary) && $Heap[this,$allocated];
	assume $IsNotNull($result,SExpressionSimplifier.Sx) && $Heap[$result,$allocated];
	assume ($Is(local4,System.String) && $Heap[local4,$allocated]) && ((!(local4 == null)) ==> IsFrozen(local4,$Heap));
	assume ($Is(local5,System.String) && $Heap[local5,$allocated]) && ((!(local5 == null)) ==> IsFrozen(local5,$Heap));
	assume ($Is(return.value,SExpressionSimplifier.Sx) && $Heap[return.value,$allocated]) && ((!(return.value == null)) ==> IsFrozen(return.value,$Heap));
	assume ($Is(SS$Display.Return.Local,SExpressionSimplifier.Sx) && $Heap[SS$Display.Return.Local,$allocated]) && ((!(SS$Display.Return.Local == null)) ==> IsFrozen(SS$Display.Return.Local,$Heap));
	assume $Is(aa,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) && $Heap[aa,$allocated];
	assume ($Is(a1,SExpressionSimplifier.Sx) && $Heap[a1,$allocated]) && ((!(a1 == null)) ==> IsFrozen(a1,$Heap));
	assume ($Is(a0,SExpressionSimplifier.Sx) && $Heap[a0,$allocated]) && ((!(a0 == null)) ==> IsFrozen(a0,$Heap));
	assume $Is(argList,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) && $Heap[argList,$allocated];
	assume InRange(i,System.Int32);
	assume ($Is(n,SExpressionSimplifier.Nary) && $Heap[n,$allocated]) && ((!(n == null)) ==> IsFrozen(n,$Heap));
	assume InRange(local17,System.Int32);
	assume ($Is(cmp,SExpressionSimplifier.Nary) && $Heap[cmp,$allocated]) && ((!(cmp == null)) ==> IsFrozen(cmp,$Heap));
	assume $Is(local18,System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx) && $Heap[local18,$allocated];
	assume IsAllocated($Heap,foreachEnumerator^.33574638);
	assume ($Is(local20,SExpressionSimplifier.Sx) && $Heap[local20,$allocated]) && ((!(local20 == null)) ==> IsFrozen(local20,$Heap));
	assume ($Is(arg,SExpressionSimplifier.Sx) && $Heap[arg,$allocated]) && ((!(arg == null)) ==> IsFrozen(arg,$Heap));
	assume IsFrozen(this,$Heap);
	assume $BeingConstructed == null;
	assume $PurityAxiomsCanBeAssumed;
	goto entry;
entry:
	assert  !(this == null);
	assume local4_$_0 == $Heap[this,SExpressionSimplifier.Nary.F];
	if ($_$_condition) { goto true13736to13073; } else { goto false13736to12648; }
true13736to13073:
	assume local4_$_0 == null;
	assume $Heap_$_28 == $Heap;
	goto block13073;
false13736to12648:
	assume !(local4_$_0 == null);
	assume $Utter($Heap[local4_$_0,$ownerRef]);
	assert  (forall<alpha> $o : ref, $f : Field (alpha)  :: {$Heap[$o,$f]} ( ((((((!($o == null)) && IncludeInMainFrameCondition($f)) && $Heap[$o,$allocated]) && ((($Heap[$o,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o,$ownerRef],$inv] <: $Heap[$o,$ownerFrame]))) || ($Heap[$Heap[$o,$ownerRef],$localinv] == $BaseClass($Heap[$o,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f) && $Heap[$o,$allocated]) && ((($Heap[$o,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o,$ownerRef],$inv] <: $Heap[$o,$ownerFrame]))) || ($Heap[$Heap[$o,$ownerRef],$localinv] == $BaseClass($Heap[$o,$ownerFrame])))) && true) && true) ));
	assume $Is(call3formal_$_$result,System.String) && $Heap[call3formal_$_$result,$allocated];
	assert  !(local4_$_0 == null);
	assert  IsFrozen(local4_$_0,$Heap);
	assume IsHeap($Heap_$_0);
	assume $Is(call3formal_$_$result_$_0,System.String) && $Heap_$_0[call3formal_$_$result_$_0,$allocated];
	assume (!(call3formal_$_$result_$_0 == null)) ==> ($StringLength(call3formal_$_$result_$_0) == $StringLength(local4_$_0));
	assume (!(call3formal_$_$result_$_0 == null)) ==> #System.String.Equals$System.String($Heap_$_0,local4_$_0,call3formal_$_$result_$_0);
	assume $AsPureObject(local4_$_0) == local4_$_0;
	assume (call3formal_$_$result_$_0 == null) || IsFrozen(call3formal_$_$result_$_0,$Heap_$_0);
	assume (forall  $o_$0 : ref :: {$Heap_$_0[$o_$0,$localinv]} {$Heap_$_0[$o_$0,$inv]} ( (((!($o_$0 == null)) && (!$Heap[$o_$0,$allocated])) && $Heap_$_0[$o_$0,$allocated]) ==> (($Heap_$_0[$o_$0,$inv] == $typeof($o_$0)) && ($Heap_$_0[$o_$0,$localinv] == $typeof($o_$0))) ));
	assume (forall  $o_$1 : ref :: {$Heap_$_0[$o_$1,$FirstConsistentOwner]} ( ($Heap[$Heap[$o_$1,$FirstConsistentOwner],$exposeVersion] == $Heap_$_0[$Heap[$o_$1,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap[$o_$1,$FirstConsistentOwner] == $Heap_$_0[$o_$1,$FirstConsistentOwner]) ));
	assume call3formal_$_$result_$_0 == #System.String.IsInterned$System.String$notnull($Heap_$_0,local4_$_0);
	assume (forall<alpha> $o_$2 : ref, $f_$0 : Field (alpha)  :: {$Heap_$_0[$o_$2,$f_$0]} ( ((((((!($o_$2 == null)) && IncludeInMainFrameCondition($f_$0)) && $Heap[$o_$2,$allocated]) && ((($Heap[$o_$2,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$2,$ownerRef],$inv] <: $Heap[$o_$2,$ownerFrame]))) || ($Heap[$Heap[$o_$2,$ownerRef],$localinv] == $BaseClass($Heap[$o_$2,$ownerFrame])))) && true) && true) ==> ($Heap[$o_$2,$f_$0] == $Heap_$_0[$o_$2,$f_$0]) ));
	assume $HeapSucc($Heap,$Heap_$_0);
	assume (forall  $o_$3 : ref :: {$Heap_$_0[$o_$3,$localinv]} {$Heap_$_0[$o_$3,$inv]} ( $Heap[$o_$3,$allocated] ==> (($Heap[$o_$3,$inv] == $Heap_$_0[$o_$3,$inv]) && ($Heap[$o_$3,$localinv] == $Heap_$_0[$o_$3,$localinv])) ));
	assume (((forall  $o_$4 : ref :: {$Heap_$_0[$o_$4,$allocated]} ( $Heap[$o_$4,$allocated] ==> $Heap_$_0[$o_$4,$allocated] ))) && ((forall  $ot : ref :: {$Heap_$_0[$ot,$ownerFrame]} {$Heap_$_0[$ot,$ownerRef]} ( ($Heap[$ot,$allocated] && (!($Heap[$ot,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_0[$ot,$ownerRef] == $Heap[$ot,$ownerRef]) && ($Heap_$_0[$ot,$ownerFrame] == $Heap[$ot,$ownerFrame])) )))) && ($Heap[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$0) { goto true12648to13073; } else { goto false12648to13243; }
block13073:
	assume $Heap_$_79 == $Heap_$_28;
	assume return.value_$_0 == this;
	goto block12750;
true12648to13073:
	assume call3formal_$_$result_$_0 == null;
	assume $Heap_$_28 == $Heap_$_0;
	goto block13073;
false12648to13243:
	assume !(call3formal_$_$result_$_0 == null);
	if ($_$_condition_$1) { goto true13243to13090; } else { goto false13243to13022; }
true13243to13090:
	assume call3formal_$_$result_$_0 == $stringLiteral0;
	assume (($Heap_$_0[$ElementProxy(stack50000o_$_0,0),$allocated] <==> false) && (!($ElementProxy(stack50000o_$_0,0) == null))) && (!($ElementProxy(stack50000o_$_0,0) == stack50000o_$_0));
	assume ($Heap_$_0[$ElementProxy(stack50000o_$_0,0),$ownerRef] == $ElementProxy(stack50000o_$_0,0)) && ($Heap_$_0[$ElementProxy(stack50000o_$_0,0),$ownerFrame] == $PeerGroupPlaceholder);
	assume call0formal_$_this_$_0_$4 == $ElementProxy(stack50000o_$_0,0);
	assume IsHeap($Heap_$_1);
	assume $Heap_$_1[call0formal_$_this_$_0_$4,$allocated];
	assume (((($Heap_$_1[call0formal_$_this_$_0_$4,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_1[$Heap_$_1[call0formal_$_this_$_0_$4,$ownerRef],$inv] <: $Heap_$_1[call0formal_$_this_$_0_$4,$ownerFrame]))) || ($Heap_$_1[$Heap_$_1[call0formal_$_this_$_0_$4,$ownerRef],$localinv] == $BaseClass($Heap_$_1[call0formal_$_this_$_0_$4,$ownerFrame]))) && ($Heap_$_1[call0formal_$_this_$_0_$4,$inv] == System.Object)) && ($Heap_$_1[call0formal_$_this_$_0_$4,$localinv] == $typeof(call0formal_$_this_$_0_$4));
	assume ($Heap_$_1[call0formal_$_this_$_0_$4,$ownerRef] == $Heap_$_0[call0formal_$_this_$_0_$4,$ownerRef]) && ($Heap_$_1[call0formal_$_this_$_0_$4,$ownerFrame] == $Heap_$_0[call0formal_$_this_$_0_$4,$ownerFrame]);
	assume (forall  $o_$5 : ref :: {$Heap_$_1[$o_$5,$localinv]} {$Heap_$_1[$o_$5,$inv]} ( (((!($o_$5 == null)) && (!$Heap_$_0[$o_$5,$allocated])) && $Heap_$_1[$o_$5,$allocated]) ==> (($Heap_$_1[$o_$5,$inv] == $typeof($o_$5)) && ($Heap_$_1[$o_$5,$localinv] == $typeof($o_$5))) ));
	assume (forall  $o_$6 : ref :: {$Heap_$_1[$o_$6,$FirstConsistentOwner]} ( ($Heap_$_0[$Heap_$_0[$o_$6,$FirstConsistentOwner],$exposeVersion] == $Heap_$_1[$Heap_$_0[$o_$6,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_0[$o_$6,$FirstConsistentOwner] == $Heap_$_1[$o_$6,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$7 : ref, $f_$1 : Field (alpha)  :: {$Heap_$_1[$o_$7,$f_$1]} ( (((((((!($o_$7 == null)) && IncludeInMainFrameCondition($f_$1)) && $Heap_$_0[$o_$7,$allocated]) && ((($Heap_$_0[$o_$7,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$7,$ownerRef],$inv] <: $Heap_$_0[$o_$7,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$7,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$7,$ownerFrame])))) && ((!($o_$7 == call0formal_$_this_$_0_$4)) || (!(System.Object <: DeclType($f_$1))))) && true) && true) ==> ($Heap_$_0[$o_$7,$f_$1] == $Heap_$_1[$o_$7,$f_$1]) ));
	assume $HeapSucc($Heap_$_0,$Heap_$_1);
	assume (forall  $o_$8 : ref :: {$Heap_$_1[$o_$8,$localinv]} {$Heap_$_1[$o_$8,$inv]} ( ($Heap_$_0[$o_$8,$allocated] && (!($o_$8 == call0formal_$_this_$_0_$4))) ==> (($Heap_$_0[$o_$8,$inv] == $Heap_$_1[$o_$8,$inv]) && ($Heap_$_0[$o_$8,$localinv] == $Heap_$_1[$o_$8,$localinv])) ));
	assume (((forall  $o_$9 : ref :: {$Heap_$_1[$o_$9,$allocated]} ( $Heap_$_0[$o_$9,$allocated] ==> $Heap_$_1[$o_$9,$allocated] ))) && ((forall  $ot_$0 : ref :: {$Heap_$_1[$ot_$0,$ownerFrame]} {$Heap_$_1[$ot_$0,$ownerRef]} ( ($Heap_$_0[$ot_$0,$allocated] && (!($Heap_$_0[$ot_$0,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_1[$ot_$0,$ownerRef] == $Heap_$_0[$ot_$0,$ownerRef]) && ($Heap_$_1[$ot_$0,$ownerFrame] == $Heap_$_0[$ot_$0,$ownerFrame])) )))) && ($Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_1[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_1[stack50000o_$_0,$allocated] <==> false) && (!(stack50000o_$_0 == null))) && ($typeof(stack50000o_$_0) == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume ($Heap_$_1[stack50000o_$_0,$ownerRef] == stack50000o_$_0) && ($Heap_$_1[stack50000o_$_0,$ownerFrame] == $PeerGroupPlaceholder);
	assert  !(stack50000o_$_0 == null);
	assume $Utter($Heap_$_1[stack50000o_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$10 : ref, $f_$2 : Field (alpha)  :: {$Heap_$_1[$o_$10,$f_$2]} ( ((((((!($o_$10 == null)) && IncludeInMainFrameCondition($f_$2)) && $Heap[$o_$10,$allocated]) && ((($Heap[$o_$10,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$10,$ownerRef],$inv] <: $Heap[$o_$10,$ownerFrame]))) || ($Heap[$Heap[$o_$10,$ownerRef],$localinv] == $BaseClass($Heap[$o_$10,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$2) && $Heap_$_1[$o_$10,$allocated]) && ((($Heap_$_1[$o_$10,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_1[$Heap_$_1[$o_$10,$ownerRef],$inv] <: $Heap_$_1[$o_$10,$ownerFrame]))) || ($Heap_$_1[$Heap_$_1[$o_$10,$ownerRef],$localinv] == $BaseClass($Heap_$_1[$o_$10,$ownerFrame])))) && ((!($o_$10 == stack50000o_$_0)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$2))))) && true) && true) ));
	assume IsHeap($Heap_$_2);
	assume $Heap_$_2[stack50000o_$_0,$allocated];
	assume (((($Heap_$_2[stack50000o_$_0,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_2[$Heap_$_2[stack50000o_$_0,$ownerRef],$inv] <: $Heap_$_2[stack50000o_$_0,$ownerFrame]))) || ($Heap_$_2[$Heap_$_2[stack50000o_$_0,$ownerRef],$localinv] == $BaseClass($Heap_$_2[stack50000o_$_0,$ownerFrame]))) && ($Heap_$_2[stack50000o_$_0,$inv] == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$_2[stack50000o_$_0,$localinv] == $typeof(stack50000o_$_0));
	assume ($Heap_$_2[stack50000o_$_0,$ownerRef] == $Heap_$_1[stack50000o_$_0,$ownerRef]) && ($Heap_$_2[stack50000o_$_0,$ownerFrame] == $Heap_$_1[stack50000o_$_0,$ownerFrame]);
	assume (forall  $o_$11 : ref :: {$Heap_$_2[$o_$11,$localinv]} {$Heap_$_2[$o_$11,$inv]} ( (((!($o_$11 == null)) && (!$Heap_$_1[$o_$11,$allocated])) && $Heap_$_2[$o_$11,$allocated]) ==> (($Heap_$_2[$o_$11,$inv] == $typeof($o_$11)) && ($Heap_$_2[$o_$11,$localinv] == $typeof($o_$11))) ));
	assume (forall  $o_$12 : ref :: {$Heap_$_2[$o_$12,$FirstConsistentOwner]} ( ($Heap_$_1[$Heap_$_1[$o_$12,$FirstConsistentOwner],$exposeVersion] == $Heap_$_2[$Heap_$_1[$o_$12,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_1[$o_$12,$FirstConsistentOwner] == $Heap_$_2[$o_$12,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$13 : ref, $f_$3 : Field (alpha)  :: {$Heap_$_2[$o_$13,$f_$3]} ( (((((((!($o_$13 == null)) && IncludeInMainFrameCondition($f_$3)) && $Heap_$_1[$o_$13,$allocated]) && ((($Heap_$_1[$o_$13,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_1[$Heap_$_1[$o_$13,$ownerRef],$inv] <: $Heap_$_1[$o_$13,$ownerFrame]))) || ($Heap_$_1[$Heap_$_1[$o_$13,$ownerRef],$localinv] == $BaseClass($Heap_$_1[$o_$13,$ownerFrame])))) && ((!($o_$13 == stack50000o_$_0)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$3))))) && true) && true) ==> ($Heap_$_1[$o_$13,$f_$3] == $Heap_$_2[$o_$13,$f_$3]) ));
	assume $HeapSucc($Heap_$_1,$Heap_$_2);
	assume (forall  $o_$14 : ref :: {$Heap_$_2[$o_$14,$localinv]} {$Heap_$_2[$o_$14,$inv]} ( ($Heap_$_1[$o_$14,$allocated] && (!($o_$14 == stack50000o_$_0))) ==> (($Heap_$_1[$o_$14,$inv] == $Heap_$_2[$o_$14,$inv]) && ($Heap_$_1[$o_$14,$localinv] == $Heap_$_2[$o_$14,$localinv])) ));
	assume (((forall  $o_$15 : ref :: {$Heap_$_2[$o_$15,$allocated]} ( $Heap_$_1[$o_$15,$allocated] ==> $Heap_$_2[$o_$15,$allocated] ))) && ((forall  $ot_$1 : ref :: {$Heap_$_2[$ot_$1,$ownerFrame]} {$Heap_$_2[$ot_$1,$ownerRef]} ( ($Heap_$_1[$ot_$1,$allocated] && (!($Heap_$_1[$ot_$1,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_2[$ot_$1,$ownerRef] == $Heap_$_1[$ot_$1,$ownerRef]) && ($Heap_$_2[$ot_$1,$ownerFrame] == $Heap_$_1[$ot_$1,$ownerFrame])) )))) && ($Heap_$_1[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_2[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  $Heap_$_2[$ElementProxy(stack50000o_$_0,0),$ownerFrame] == $PeerGroupPlaceholder;
	assert  (forall  $pc_$6 : ref :: {$typeof($pc_$6)} {$Heap_$_2[$pc_$6,$localinv]} {$Heap_$_2[$pc_$6,$inv]} {$Heap_$_2[$pc_$6,$ownerFrame]} {$Heap_$_2[$pc_$6,$ownerRef]} ( ((((!($pc_$6 == null)) && $Heap_$_2[$pc_$6,$allocated]) && ($Heap_$_2[$pc_$6,$ownerRef] == $Heap_$_2[$ElementProxy(stack50000o_$_0,0),$ownerRef])) && ($Heap_$_2[$pc_$6,$ownerFrame] == $Heap_$_2[$ElementProxy(stack50000o_$_0,0),$ownerFrame])) ==> (($Heap_$_2[$pc_$6,$inv] == $typeof($pc_$6)) && ($Heap_$_2[$pc_$6,$localinv] == $typeof($pc_$6))) ));
	assume call0formal_$_x_$_0_$4 == $ElementProxy(stack50000o_$_0,0);
	assume IsHeap($Heap_$_3);
	assume (forall<alpha> p_$7 : ref, F : Field (alpha)  :: {$Heap_$_3[p_$7,F]} ( ((((!(F == $ownerRef)) && (!(F == $ownerFrame))) && (!(F == $FirstConsistentOwner))) || ((!($Heap_$_2[p_$7,$ownerRef] == $Heap_$_2[call0formal_$_x_$_0_$4,$ownerRef])) || (!($Heap_$_2[p_$7,$ownerFrame] == $Heap_$_2[call0formal_$_x_$_0_$4,$ownerFrame])))) ==> ($Heap_$_2[p_$7,F] == $Heap_$_3[p_$7,F]) ));
	assume (call0formal_$_x_$_0_$4 == null) ==> ($Heap_$_3 == $Heap_$_2);
	assume (!(call0formal_$_x_$_0_$4 == null)) ==> ((forall  p_$8 : ref :: {$Heap_$_3[p_$8,$ownerRef]} {$Heap_$_3[p_$8,$ownerFrame]} ( (($Heap_$_2[p_$8,$ownerRef] == $Heap_$_2[call0formal_$_x_$_0_$4,$ownerRef]) && ($Heap_$_2[p_$8,$ownerFrame] == $Heap_$_2[call0formal_$_x_$_0_$4,$ownerFrame])) ==> (($Heap_$_3[p_$8,$ownerRef] == $freezerRef) && ($Heap_$_3[p_$8,$ownerFrame] == $Freezer)) )));
	assume $HeapSucc($Heap_$_2,$Heap_$_3);
	assert  !(this == null);
	assume $Utter($Heap_$_3[this,$ownerRef]);
	assume $Utter($Heap_$_3[stack50000o_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$16 : ref, $f_$4 : Field (alpha)  :: {$Heap_$_3[$o_$16,$f_$4]} ( ((((((!($o_$16 == null)) && IncludeInMainFrameCondition($f_$4)) && $Heap[$o_$16,$allocated]) && ((($Heap[$o_$16,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$16,$ownerRef],$inv] <: $Heap[$o_$16,$ownerFrame]))) || ($Heap[$Heap[$o_$16,$ownerRef],$localinv] == $BaseClass($Heap[$o_$16,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$4) && $Heap_$_3[$o_$16,$allocated]) && ((($Heap_$_3[$o_$16,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_3[$Heap_$_3[$o_$16,$ownerRef],$inv] <: $Heap_$_3[$o_$16,$ownerFrame]))) || ($Heap_$_3[$Heap_$_3[$o_$16,$ownerRef],$localinv] == $BaseClass($Heap_$_3[$o_$16,$ownerFrame])))) && (((!($o_$16 == stack50000o_$_0)) || (!($typeof(stack50000o_$_0) <: DeclType($f_$4)))) || (!$IncludedInModifiesStar($f_$4)))) && ((!($o_$16 == stack50000o_$_0)) || (!($f_$4 == $exposeVersion)))) ));
	assert  (true && #System.String.Equals$System.String($Heap_$_3,$Heap_$_3[this,SExpressionSimplifier.Nary.F],$stringLiteral0)) || ((!true) && #System.String.Equals$System.String($Heap_$_3,$Heap_$_3[this,SExpressionSimplifier.Nary.F],$stringLiteral1));
	assert  IsFrozen(this,$Heap_$_3);
	assert  IsFrozen($ElementProxy(stack50000o_$_0,0),$Heap_$_3);
	assert  (forall  $pc_$7 : ref :: {$typeof($pc_$7)} {$Heap_$_3[$pc_$7,$localinv]} {$Heap_$_3[$pc_$7,$inv]} {$Heap_$_3[$pc_$7,$ownerFrame]} {$Heap_$_3[$pc_$7,$ownerRef]} ( ((((!($pc_$7 == null)) && $Heap_$_3[$pc_$7,$allocated]) && ($Heap_$_3[$pc_$7,$ownerRef] == $Heap_$_3[stack50000o_$_0,$ownerRef])) && ($Heap_$_3[$pc_$7,$ownerFrame] == $Heap_$_3[stack50000o_$_0,$ownerFrame])) ==> (($Heap_$_3[$pc_$7,$inv] == $typeof($pc_$7)) && ($Heap_$_3[$pc_$7,$localinv] == $typeof($pc_$7))) ));
	assert  (($Heap_$_3[stack50000o_$_0,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_3[$Heap_$_3[stack50000o_$_0,$ownerRef],$inv] <: $Heap_$_3[stack50000o_$_0,$ownerFrame]))) || ($Heap_$_3[$Heap_$_3[stack50000o_$_0,$ownerRef],$localinv] == $BaseClass($Heap_$_3[stack50000o_$_0,$ownerFrame]));
	assume IsHeap($Heap_$_4);
	assume (forall  $o_$17 : ref :: {$Heap_$_4[$o_$17,$localinv]} {$Heap_$_4[$o_$17,$inv]} ( (((!($o_$17 == null)) && (!$Heap_$_3[$o_$17,$allocated])) && $Heap_$_4[$o_$17,$allocated]) ==> (($Heap_$_4[$o_$17,$inv] == $typeof($o_$17)) && ($Heap_$_4[$o_$17,$localinv] == $typeof($o_$17))) ));
	assume (forall  $o_$18 : ref :: {$Heap_$_4[$o_$18,$FirstConsistentOwner]} ( ($Heap_$_3[$Heap_$_3[$o_$18,$FirstConsistentOwner],$exposeVersion] == $Heap_$_4[$Heap_$_3[$o_$18,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_3[$o_$18,$FirstConsistentOwner] == $Heap_$_4[$o_$18,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$19 : ref, $f_$5 : Field (alpha)  :: {$Heap_$_4[$o_$19,$f_$5]} ( ((((((!($o_$19 == null)) && IncludeInMainFrameCondition($f_$5)) && $Heap_$_3[$o_$19,$allocated]) && ((($Heap_$_3[$o_$19,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_3[$Heap_$_3[$o_$19,$ownerRef],$inv] <: $Heap_$_3[$o_$19,$ownerFrame]))) || ($Heap_$_3[$Heap_$_3[$o_$19,$ownerRef],$localinv] == $BaseClass($Heap_$_3[$o_$19,$ownerFrame])))) && (((!($o_$19 == stack50000o_$_0)) || (!($typeof(stack50000o_$_0) <: DeclType($f_$5)))) || (!$IncludedInModifiesStar($f_$5)))) && ((!($o_$19 == stack50000o_$_0)) || (!($f_$5 == $exposeVersion)))) ==> ($Heap_$_3[$o_$19,$f_$5] == $Heap_$_4[$o_$19,$f_$5]) ));
	assume $HeapSucc($Heap_$_3,$Heap_$_4);
	assume (forall  $o_$20 : ref :: {$Heap_$_4[$o_$20,$localinv]} {$Heap_$_4[$o_$20,$inv]} ( $Heap_$_3[$o_$20,$allocated] ==> (($Heap_$_3[$o_$20,$inv] == $Heap_$_4[$o_$20,$inv]) && ($Heap_$_3[$o_$20,$localinv] == $Heap_$_4[$o_$20,$localinv])) ));
	assume (((forall  $o_$21 : ref :: {$Heap_$_4[$o_$21,$allocated]} ( $Heap_$_3[$o_$21,$allocated] ==> $Heap_$_4[$o_$21,$allocated] ))) && ((forall  $ot_$2 : ref :: {$Heap_$_4[$ot_$2,$ownerFrame]} {$Heap_$_4[$ot_$2,$ownerRef]} ( ($Heap_$_3[$ot_$2,$allocated] && (!($Heap_$_3[$ot_$2,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_4[$ot_$2,$ownerRef] == $Heap_$_3[$ot_$2,$ownerRef]) && ($Heap_$_4[$ot_$2,$ownerFrame] == $Heap_$_3[$ot_$2,$ownerFrame])) )))) && ($Heap_$_3[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_4[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Utter($Heap_$_4[stack50000o_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$22 : ref, $f_$6 : Field (alpha)  :: {$Heap_$_4[$o_$22,$f_$6]} ( ((((((!($o_$22 == null)) && IncludeInMainFrameCondition($f_$6)) && $Heap[$o_$22,$allocated]) && ((($Heap[$o_$22,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$22,$ownerRef],$inv] <: $Heap[$o_$22,$ownerFrame]))) || ($Heap[$Heap[$o_$22,$ownerRef],$localinv] == $BaseClass($Heap[$o_$22,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$6) && $Heap_$_4[$o_$22,$allocated]) && ((($Heap_$_4[$o_$22,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_4[$Heap_$_4[$o_$22,$ownerRef],$inv] <: $Heap_$_4[$o_$22,$ownerFrame]))) || ($Heap_$_4[$Heap_$_4[$o_$22,$ownerRef],$localinv] == $BaseClass($Heap_$_4[$o_$22,$ownerFrame])))) && (!(((($f_$6 == $ownerRef) || ($f_$6 == $ownerFrame)) && ($Heap_$_4[$o_$22,$ownerRef] == $Heap_$_4[stack50000o_$_0,$ownerRef])) && ($Heap_$_4[$o_$22,$ownerFrame] == $Heap_$_4[stack50000o_$_0,$ownerFrame])))) && (((!($o_$22 == stack50000o_$_0)) || (!($typeof(stack50000o_$_0) <: DeclType($f_$6)))) || (!$IncludedInModifiesStar($f_$6)))) && ((!($o_$22 == stack50000o_$_0)) || (!($f_$6 == $exposeVersion)))) ));
	assume $IsNotNull(call4formal_$_$result_$9,SExpressionSimplifier.Sx) && $Heap[call4formal_$_$result_$9,$allocated];
	assert  $Heap_$_4[stack50000o_$_0,$ownerFrame] == $PeerGroupPlaceholder;
	assert  IsFrozen($ElementProxy(stack50000o_$_0,0),$Heap_$_4);
	assert  (forall  $pc_$8 : ref :: {$typeof($pc_$8)} {$Heap_$_4[$pc_$8,$localinv]} {$Heap_$_4[$pc_$8,$inv]} {$Heap_$_4[$pc_$8,$ownerFrame]} {$Heap_$_4[$pc_$8,$ownerRef]} ( ((((!($pc_$8 == null)) && $Heap_$_4[$pc_$8,$allocated]) && ($Heap_$_4[$pc_$8,$ownerRef] == $Heap_$_4[stack50000o_$_0,$ownerRef])) && ($Heap_$_4[$pc_$8,$ownerFrame] == $Heap_$_4[stack50000o_$_0,$ownerFrame])) ==> (($Heap_$_4[$pc_$8,$inv] == $typeof($pc_$8)) && ($Heap_$_4[$pc_$8,$localinv] == $typeof($pc_$8))) ));
	assert  (($Heap_$_4[stack50000o_$_0,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_4[$Heap_$_4[stack50000o_$_0,$ownerRef],$inv] <: $Heap_$_4[stack50000o_$_0,$ownerFrame]))) || ($Heap_$_4[$Heap_$_4[stack50000o_$_0,$ownerRef],$localinv] == $BaseClass($Heap_$_4[stack50000o_$_0,$ownerFrame]));
	assume IsHeap($Heap_$_5);
	assume $IsNotNull(call4formal_$_$result_$_0_$13,SExpressionSimplifier.Sx) && $Heap_$_5[call4formal_$_$result_$_0_$13,$allocated];
	assume IsFrozen(call4formal_$_$result_$_0_$13,$Heap_$_5);
	assume (forall  $o_$23 : ref :: {$Heap_$_5[$o_$23,$localinv]} {$Heap_$_5[$o_$23,$inv]} ( (((!($o_$23 == null)) && (!$Heap_$_4[$o_$23,$allocated])) && $Heap_$_5[$o_$23,$allocated]) ==> (($Heap_$_5[$o_$23,$inv] == $typeof($o_$23)) && ($Heap_$_5[$o_$23,$localinv] == $typeof($o_$23))) ));
	assume (forall  $o_$24 : ref :: {$Heap_$_5[$o_$24,$FirstConsistentOwner]} ( ($Heap_$_4[$Heap_$_4[$o_$24,$FirstConsistentOwner],$exposeVersion] == $Heap_$_5[$Heap_$_4[$o_$24,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_4[$o_$24,$FirstConsistentOwner] == $Heap_$_5[$o_$24,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$25 : ref, $f_$7 : Field (alpha)  :: {$Heap_$_5[$o_$25,$f_$7]} ( (((((((!($o_$25 == null)) && IncludeInMainFrameCondition($f_$7)) && $Heap_$_4[$o_$25,$allocated]) && ((($Heap_$_4[$o_$25,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_4[$Heap_$_4[$o_$25,$ownerRef],$inv] <: $Heap_$_4[$o_$25,$ownerFrame]))) || ($Heap_$_4[$Heap_$_4[$o_$25,$ownerRef],$localinv] == $BaseClass($Heap_$_4[$o_$25,$ownerFrame])))) && (!((($f_$7 == $ownerRef) || ($f_$7 == $ownerFrame)) && (($Heap_$_4[$o_$25,$ownerRef] == $Heap_$_4[stack50000o_$_0,$ownerRef]) && ($Heap_$_4[$o_$25,$ownerFrame] == $Heap_$_4[stack50000o_$_0,$ownerFrame]))))) && (((!($o_$25 == stack50000o_$_0)) || (!($typeof(stack50000o_$_0) <: DeclType($f_$7)))) || (!$IncludedInModifiesStar($f_$7)))) && ((!($o_$25 == stack50000o_$_0)) || (!($f_$7 == $exposeVersion)))) ==> ($Heap_$_4[$o_$25,$f_$7] == $Heap_$_5[$o_$25,$f_$7]) ));
	assume $HeapSucc($Heap_$_4,$Heap_$_5);
	assume (forall  $o_$26 : ref :: {$Heap_$_5[$o_$26,$localinv]} {$Heap_$_5[$o_$26,$inv]} ( $Heap_$_4[$o_$26,$allocated] ==> (($Heap_$_4[$o_$26,$inv] == $Heap_$_5[$o_$26,$inv]) && ($Heap_$_4[$o_$26,$localinv] == $Heap_$_5[$o_$26,$localinv])) ));
	assume (((forall  $o_$27 : ref :: {$Heap_$_5[$o_$27,$allocated]} ( $Heap_$_4[$o_$27,$allocated] ==> $Heap_$_5[$o_$27,$allocated] ))) && ((forall  $ot_$3 : ref :: {$Heap_$_5[$ot_$3,$ownerFrame]} {$Heap_$_5[$ot_$3,$ownerRef]} ( ($Heap_$_4[$ot_$3,$allocated] && (!($Heap_$_4[$ot_$3,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_5[$ot_$3,$ownerRef] == $Heap_$_4[$ot_$3,$ownerRef]) && ($Heap_$_5[$ot_$3,$ownerFrame] == $Heap_$_4[$ot_$3,$ownerFrame])) )))) && ($Heap_$_4[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_5[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_5;
	assume return.value_$_0 == call4formal_$_$result_$_0_$13;
	goto block12750;
false13243to13022:
	assume !(call3formal_$_$result_$_0 == $stringLiteral0);
	if ($_$_condition_$2) { goto true13022to14042; } else { goto false13022to12852; }
block12750:
	assume $result_$_0 == return.value_$_0;
	assume $Heap_$_80 == $Heap_$_79;
	goto GeneratedUnifiedExit;
true13022to14042:
	assume call3formal_$_$result_$_0 == $stringLiteral1;
	assume (($Heap_$_0[$ElementProxy(stack50000o_$_1,0),$allocated] <==> false) && (!($ElementProxy(stack50000o_$_1,0) == null))) && (!($ElementProxy(stack50000o_$_1,0) == stack50000o_$_1));
	assume ($Heap_$_0[$ElementProxy(stack50000o_$_1,0),$ownerRef] == $ElementProxy(stack50000o_$_1,0)) && ($Heap_$_0[$ElementProxy(stack50000o_$_1,0),$ownerFrame] == $PeerGroupPlaceholder);
	assume call0formal_$_this_$_0_$3 == $ElementProxy(stack50000o_$_1,0);
	assume IsHeap($Heap_$_6);
	assume $Heap_$_6[call0formal_$_this_$_0_$3,$allocated];
	assume (((($Heap_$_6[call0formal_$_this_$_0_$3,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_6[$Heap_$_6[call0formal_$_this_$_0_$3,$ownerRef],$inv] <: $Heap_$_6[call0formal_$_this_$_0_$3,$ownerFrame]))) || ($Heap_$_6[$Heap_$_6[call0formal_$_this_$_0_$3,$ownerRef],$localinv] == $BaseClass($Heap_$_6[call0formal_$_this_$_0_$3,$ownerFrame]))) && ($Heap_$_6[call0formal_$_this_$_0_$3,$inv] == System.Object)) && ($Heap_$_6[call0formal_$_this_$_0_$3,$localinv] == $typeof(call0formal_$_this_$_0_$3));
	assume ($Heap_$_6[call0formal_$_this_$_0_$3,$ownerRef] == $Heap_$_0[call0formal_$_this_$_0_$3,$ownerRef]) && ($Heap_$_6[call0formal_$_this_$_0_$3,$ownerFrame] == $Heap_$_0[call0formal_$_this_$_0_$3,$ownerFrame]);
	assume (forall  $o_$28 : ref :: {$Heap_$_6[$o_$28,$localinv]} {$Heap_$_6[$o_$28,$inv]} ( (((!($o_$28 == null)) && (!$Heap_$_0[$o_$28,$allocated])) && $Heap_$_6[$o_$28,$allocated]) ==> (($Heap_$_6[$o_$28,$inv] == $typeof($o_$28)) && ($Heap_$_6[$o_$28,$localinv] == $typeof($o_$28))) ));
	assume (forall  $o_$29 : ref :: {$Heap_$_6[$o_$29,$FirstConsistentOwner]} ( ($Heap_$_0[$Heap_$_0[$o_$29,$FirstConsistentOwner],$exposeVersion] == $Heap_$_6[$Heap_$_0[$o_$29,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_0[$o_$29,$FirstConsistentOwner] == $Heap_$_6[$o_$29,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$30 : ref, $f_$8 : Field (alpha)  :: {$Heap_$_6[$o_$30,$f_$8]} ( (((((((!($o_$30 == null)) && IncludeInMainFrameCondition($f_$8)) && $Heap_$_0[$o_$30,$allocated]) && ((($Heap_$_0[$o_$30,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$30,$ownerRef],$inv] <: $Heap_$_0[$o_$30,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$30,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$30,$ownerFrame])))) && ((!($o_$30 == call0formal_$_this_$_0_$3)) || (!(System.Object <: DeclType($f_$8))))) && true) && true) ==> ($Heap_$_0[$o_$30,$f_$8] == $Heap_$_6[$o_$30,$f_$8]) ));
	assume $HeapSucc($Heap_$_0,$Heap_$_6);
	assume (forall  $o_$31 : ref :: {$Heap_$_6[$o_$31,$localinv]} {$Heap_$_6[$o_$31,$inv]} ( ($Heap_$_0[$o_$31,$allocated] && (!($o_$31 == call0formal_$_this_$_0_$3))) ==> (($Heap_$_0[$o_$31,$inv] == $Heap_$_6[$o_$31,$inv]) && ($Heap_$_0[$o_$31,$localinv] == $Heap_$_6[$o_$31,$localinv])) ));
	assume (((forall  $o_$32 : ref :: {$Heap_$_6[$o_$32,$allocated]} ( $Heap_$_0[$o_$32,$allocated] ==> $Heap_$_6[$o_$32,$allocated] ))) && ((forall  $ot_$4 : ref :: {$Heap_$_6[$ot_$4,$ownerFrame]} {$Heap_$_6[$ot_$4,$ownerRef]} ( ($Heap_$_0[$ot_$4,$allocated] && (!($Heap_$_0[$ot_$4,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_6[$ot_$4,$ownerRef] == $Heap_$_0[$ot_$4,$ownerRef]) && ($Heap_$_6[$ot_$4,$ownerFrame] == $Heap_$_0[$ot_$4,$ownerFrame])) )))) && ($Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_6[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_6[stack50000o_$_1,$allocated] <==> false) && (!(stack50000o_$_1 == null))) && ($typeof(stack50000o_$_1) == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume ($Heap_$_6[stack50000o_$_1,$ownerRef] == stack50000o_$_1) && ($Heap_$_6[stack50000o_$_1,$ownerFrame] == $PeerGroupPlaceholder);
	assert  !(stack50000o_$_1 == null);
	assume $Utter($Heap_$_6[stack50000o_$_1,$ownerRef]);
	assert  (forall<alpha> $o_$33 : ref, $f_$9 : Field (alpha)  :: {$Heap_$_6[$o_$33,$f_$9]} ( ((((((!($o_$33 == null)) && IncludeInMainFrameCondition($f_$9)) && $Heap[$o_$33,$allocated]) && ((($Heap[$o_$33,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$33,$ownerRef],$inv] <: $Heap[$o_$33,$ownerFrame]))) || ($Heap[$Heap[$o_$33,$ownerRef],$localinv] == $BaseClass($Heap[$o_$33,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$9) && $Heap_$_6[$o_$33,$allocated]) && ((($Heap_$_6[$o_$33,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_6[$Heap_$_6[$o_$33,$ownerRef],$inv] <: $Heap_$_6[$o_$33,$ownerFrame]))) || ($Heap_$_6[$Heap_$_6[$o_$33,$ownerRef],$localinv] == $BaseClass($Heap_$_6[$o_$33,$ownerFrame])))) && ((!($o_$33 == stack50000o_$_1)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$9))))) && true) && true) ));
	assume IsHeap($Heap_$_7);
	assume $Heap_$_7[stack50000o_$_1,$allocated];
	assume (((($Heap_$_7[stack50000o_$_1,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_7[$Heap_$_7[stack50000o_$_1,$ownerRef],$inv] <: $Heap_$_7[stack50000o_$_1,$ownerFrame]))) || ($Heap_$_7[$Heap_$_7[stack50000o_$_1,$ownerRef],$localinv] == $BaseClass($Heap_$_7[stack50000o_$_1,$ownerFrame]))) && ($Heap_$_7[stack50000o_$_1,$inv] == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$_7[stack50000o_$_1,$localinv] == $typeof(stack50000o_$_1));
	assume ($Heap_$_7[stack50000o_$_1,$ownerRef] == $Heap_$_6[stack50000o_$_1,$ownerRef]) && ($Heap_$_7[stack50000o_$_1,$ownerFrame] == $Heap_$_6[stack50000o_$_1,$ownerFrame]);
	assume (forall  $o_$34 : ref :: {$Heap_$_7[$o_$34,$localinv]} {$Heap_$_7[$o_$34,$inv]} ( (((!($o_$34 == null)) && (!$Heap_$_6[$o_$34,$allocated])) && $Heap_$_7[$o_$34,$allocated]) ==> (($Heap_$_7[$o_$34,$inv] == $typeof($o_$34)) && ($Heap_$_7[$o_$34,$localinv] == $typeof($o_$34))) ));
	assume (forall  $o_$35 : ref :: {$Heap_$_7[$o_$35,$FirstConsistentOwner]} ( ($Heap_$_6[$Heap_$_6[$o_$35,$FirstConsistentOwner],$exposeVersion] == $Heap_$_7[$Heap_$_6[$o_$35,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_6[$o_$35,$FirstConsistentOwner] == $Heap_$_7[$o_$35,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$36 : ref, $f_$10 : Field (alpha)  :: {$Heap_$_7[$o_$36,$f_$10]} ( (((((((!($o_$36 == null)) && IncludeInMainFrameCondition($f_$10)) && $Heap_$_6[$o_$36,$allocated]) && ((($Heap_$_6[$o_$36,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_6[$Heap_$_6[$o_$36,$ownerRef],$inv] <: $Heap_$_6[$o_$36,$ownerFrame]))) || ($Heap_$_6[$Heap_$_6[$o_$36,$ownerRef],$localinv] == $BaseClass($Heap_$_6[$o_$36,$ownerFrame])))) && ((!($o_$36 == stack50000o_$_1)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$10))))) && true) && true) ==> ($Heap_$_6[$o_$36,$f_$10] == $Heap_$_7[$o_$36,$f_$10]) ));
	assume $HeapSucc($Heap_$_6,$Heap_$_7);
	assume (forall  $o_$37 : ref :: {$Heap_$_7[$o_$37,$localinv]} {$Heap_$_7[$o_$37,$inv]} ( ($Heap_$_6[$o_$37,$allocated] && (!($o_$37 == stack50000o_$_1))) ==> (($Heap_$_6[$o_$37,$inv] == $Heap_$_7[$o_$37,$inv]) && ($Heap_$_6[$o_$37,$localinv] == $Heap_$_7[$o_$37,$localinv])) ));
	assume (((forall  $o_$38 : ref :: {$Heap_$_7[$o_$38,$allocated]} ( $Heap_$_6[$o_$38,$allocated] ==> $Heap_$_7[$o_$38,$allocated] ))) && ((forall  $ot_$5 : ref :: {$Heap_$_7[$ot_$5,$ownerFrame]} {$Heap_$_7[$ot_$5,$ownerRef]} ( ($Heap_$_6[$ot_$5,$allocated] && (!($Heap_$_6[$ot_$5,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_7[$ot_$5,$ownerRef] == $Heap_$_6[$ot_$5,$ownerRef]) && ($Heap_$_7[$ot_$5,$ownerFrame] == $Heap_$_6[$ot_$5,$ownerFrame])) )))) && ($Heap_$_6[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_7[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  $Heap_$_7[$ElementProxy(stack50000o_$_1,0),$ownerFrame] == $PeerGroupPlaceholder;
	assert  (forall  $pc_$9 : ref :: {$typeof($pc_$9)} {$Heap_$_7[$pc_$9,$localinv]} {$Heap_$_7[$pc_$9,$inv]} {$Heap_$_7[$pc_$9,$ownerFrame]} {$Heap_$_7[$pc_$9,$ownerRef]} ( ((((!($pc_$9 == null)) && $Heap_$_7[$pc_$9,$allocated]) && ($Heap_$_7[$pc_$9,$ownerRef] == $Heap_$_7[$ElementProxy(stack50000o_$_1,0),$ownerRef])) && ($Heap_$_7[$pc_$9,$ownerFrame] == $Heap_$_7[$ElementProxy(stack50000o_$_1,0),$ownerFrame])) ==> (($Heap_$_7[$pc_$9,$inv] == $typeof($pc_$9)) && ($Heap_$_7[$pc_$9,$localinv] == $typeof($pc_$9))) ));
	assume call0formal_$_x_$_0_$3 == $ElementProxy(stack50000o_$_1,0);
	assume IsHeap($Heap_$_8);
	assume (forall<alpha> p_$9 : ref, F_$0 : Field (alpha)  :: {$Heap_$_8[p_$9,F_$0]} ( ((((!(F_$0 == $ownerRef)) && (!(F_$0 == $ownerFrame))) && (!(F_$0 == $FirstConsistentOwner))) || ((!($Heap_$_7[p_$9,$ownerRef] == $Heap_$_7[call0formal_$_x_$_0_$3,$ownerRef])) || (!($Heap_$_7[p_$9,$ownerFrame] == $Heap_$_7[call0formal_$_x_$_0_$3,$ownerFrame])))) ==> ($Heap_$_7[p_$9,F_$0] == $Heap_$_8[p_$9,F_$0]) ));
	assume (call0formal_$_x_$_0_$3 == null) ==> ($Heap_$_8 == $Heap_$_7);
	assume (!(call0formal_$_x_$_0_$3 == null)) ==> ((forall  p_$10 : ref :: {$Heap_$_8[p_$10,$ownerRef]} {$Heap_$_8[p_$10,$ownerFrame]} ( (($Heap_$_7[p_$10,$ownerRef] == $Heap_$_7[call0formal_$_x_$_0_$3,$ownerRef]) && ($Heap_$_7[p_$10,$ownerFrame] == $Heap_$_7[call0formal_$_x_$_0_$3,$ownerFrame])) ==> (($Heap_$_8[p_$10,$ownerRef] == $freezerRef) && ($Heap_$_8[p_$10,$ownerFrame] == $Freezer)) )));
	assume $HeapSucc($Heap_$_7,$Heap_$_8);
	assert  !(this == null);
	assume $Utter($Heap_$_8[this,$ownerRef]);
	assume $Utter($Heap_$_8[stack50000o_$_1,$ownerRef]);
	assert  (forall<alpha> $o_$39 : ref, $f_$11 : Field (alpha)  :: {$Heap_$_8[$o_$39,$f_$11]} ( ((((((!($o_$39 == null)) && IncludeInMainFrameCondition($f_$11)) && $Heap[$o_$39,$allocated]) && ((($Heap[$o_$39,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$39,$ownerRef],$inv] <: $Heap[$o_$39,$ownerFrame]))) || ($Heap[$Heap[$o_$39,$ownerRef],$localinv] == $BaseClass($Heap[$o_$39,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$11) && $Heap_$_8[$o_$39,$allocated]) && ((($Heap_$_8[$o_$39,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_8[$Heap_$_8[$o_$39,$ownerRef],$inv] <: $Heap_$_8[$o_$39,$ownerFrame]))) || ($Heap_$_8[$Heap_$_8[$o_$39,$ownerRef],$localinv] == $BaseClass($Heap_$_8[$o_$39,$ownerFrame])))) && (((!($o_$39 == stack50000o_$_1)) || (!($typeof(stack50000o_$_1) <: DeclType($f_$11)))) || (!$IncludedInModifiesStar($f_$11)))) && ((!($o_$39 == stack50000o_$_1)) || (!($f_$11 == $exposeVersion)))) ));
	assert  (false && #System.String.Equals$System.String($Heap_$_8,$Heap_$_8[this,SExpressionSimplifier.Nary.F],$stringLiteral0)) || ((!false) && #System.String.Equals$System.String($Heap_$_8,$Heap_$_8[this,SExpressionSimplifier.Nary.F],$stringLiteral1));
	assert  IsFrozen(this,$Heap_$_8);
	assert  IsFrozen($ElementProxy(stack50000o_$_1,0),$Heap_$_8);
	assert  (forall  $pc_$10 : ref :: {$typeof($pc_$10)} {$Heap_$_8[$pc_$10,$localinv]} {$Heap_$_8[$pc_$10,$inv]} {$Heap_$_8[$pc_$10,$ownerFrame]} {$Heap_$_8[$pc_$10,$ownerRef]} ( ((((!($pc_$10 == null)) && $Heap_$_8[$pc_$10,$allocated]) && ($Heap_$_8[$pc_$10,$ownerRef] == $Heap_$_8[stack50000o_$_1,$ownerRef])) && ($Heap_$_8[$pc_$10,$ownerFrame] == $Heap_$_8[stack50000o_$_1,$ownerFrame])) ==> (($Heap_$_8[$pc_$10,$inv] == $typeof($pc_$10)) && ($Heap_$_8[$pc_$10,$localinv] == $typeof($pc_$10))) ));
	assert  (($Heap_$_8[stack50000o_$_1,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_8[$Heap_$_8[stack50000o_$_1,$ownerRef],$inv] <: $Heap_$_8[stack50000o_$_1,$ownerFrame]))) || ($Heap_$_8[$Heap_$_8[stack50000o_$_1,$ownerRef],$localinv] == $BaseClass($Heap_$_8[stack50000o_$_1,$ownerFrame]));
	assume IsHeap($Heap_$_9);
	assume (forall  $o_$40 : ref :: {$Heap_$_9[$o_$40,$localinv]} {$Heap_$_9[$o_$40,$inv]} ( (((!($o_$40 == null)) && (!$Heap_$_8[$o_$40,$allocated])) && $Heap_$_9[$o_$40,$allocated]) ==> (($Heap_$_9[$o_$40,$inv] == $typeof($o_$40)) && ($Heap_$_9[$o_$40,$localinv] == $typeof($o_$40))) ));
	assume (forall  $o_$41 : ref :: {$Heap_$_9[$o_$41,$FirstConsistentOwner]} ( ($Heap_$_8[$Heap_$_8[$o_$41,$FirstConsistentOwner],$exposeVersion] == $Heap_$_9[$Heap_$_8[$o_$41,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_8[$o_$41,$FirstConsistentOwner] == $Heap_$_9[$o_$41,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$42 : ref, $f_$12 : Field (alpha)  :: {$Heap_$_9[$o_$42,$f_$12]} ( ((((((!($o_$42 == null)) && IncludeInMainFrameCondition($f_$12)) && $Heap_$_8[$o_$42,$allocated]) && ((($Heap_$_8[$o_$42,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_8[$Heap_$_8[$o_$42,$ownerRef],$inv] <: $Heap_$_8[$o_$42,$ownerFrame]))) || ($Heap_$_8[$Heap_$_8[$o_$42,$ownerRef],$localinv] == $BaseClass($Heap_$_8[$o_$42,$ownerFrame])))) && (((!($o_$42 == stack50000o_$_1)) || (!($typeof(stack50000o_$_1) <: DeclType($f_$12)))) || (!$IncludedInModifiesStar($f_$12)))) && ((!($o_$42 == stack50000o_$_1)) || (!($f_$12 == $exposeVersion)))) ==> ($Heap_$_8[$o_$42,$f_$12] == $Heap_$_9[$o_$42,$f_$12]) ));
	assume $HeapSucc($Heap_$_8,$Heap_$_9);
	assume (forall  $o_$43 : ref :: {$Heap_$_9[$o_$43,$localinv]} {$Heap_$_9[$o_$43,$inv]} ( $Heap_$_8[$o_$43,$allocated] ==> (($Heap_$_8[$o_$43,$inv] == $Heap_$_9[$o_$43,$inv]) && ($Heap_$_8[$o_$43,$localinv] == $Heap_$_9[$o_$43,$localinv])) ));
	assume (((forall  $o_$44 : ref :: {$Heap_$_9[$o_$44,$allocated]} ( $Heap_$_8[$o_$44,$allocated] ==> $Heap_$_9[$o_$44,$allocated] ))) && ((forall  $ot_$6 : ref :: {$Heap_$_9[$ot_$6,$ownerFrame]} {$Heap_$_9[$ot_$6,$ownerRef]} ( ($Heap_$_8[$ot_$6,$allocated] && (!($Heap_$_8[$ot_$6,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_9[$ot_$6,$ownerRef] == $Heap_$_8[$ot_$6,$ownerRef]) && ($Heap_$_9[$ot_$6,$ownerFrame] == $Heap_$_8[$ot_$6,$ownerFrame])) )))) && ($Heap_$_8[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_9[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Utter($Heap_$_9[stack50000o_$_1,$ownerRef]);
	assert  (forall<alpha> $o_$45 : ref, $f_$13 : Field (alpha)  :: {$Heap_$_9[$o_$45,$f_$13]} ( ((((((!($o_$45 == null)) && IncludeInMainFrameCondition($f_$13)) && $Heap[$o_$45,$allocated]) && ((($Heap[$o_$45,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$45,$ownerRef],$inv] <: $Heap[$o_$45,$ownerFrame]))) || ($Heap[$Heap[$o_$45,$ownerRef],$localinv] == $BaseClass($Heap[$o_$45,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$13) && $Heap_$_9[$o_$45,$allocated]) && ((($Heap_$_9[$o_$45,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_9[$Heap_$_9[$o_$45,$ownerRef],$inv] <: $Heap_$_9[$o_$45,$ownerFrame]))) || ($Heap_$_9[$Heap_$_9[$o_$45,$ownerRef],$localinv] == $BaseClass($Heap_$_9[$o_$45,$ownerFrame])))) && (!(((($f_$13 == $ownerRef) || ($f_$13 == $ownerFrame)) && ($Heap_$_9[$o_$45,$ownerRef] == $Heap_$_9[stack50000o_$_1,$ownerRef])) && ($Heap_$_9[$o_$45,$ownerFrame] == $Heap_$_9[stack50000o_$_1,$ownerFrame])))) && (((!($o_$45 == stack50000o_$_1)) || (!($typeof(stack50000o_$_1) <: DeclType($f_$13)))) || (!$IncludedInModifiesStar($f_$13)))) && ((!($o_$45 == stack50000o_$_1)) || (!($f_$13 == $exposeVersion)))) ));
	assume $IsNotNull(call4formal_$_$result_$8,SExpressionSimplifier.Sx) && $Heap[call4formal_$_$result_$8,$allocated];
	assert  $Heap_$_9[stack50000o_$_1,$ownerFrame] == $PeerGroupPlaceholder;
	assert  IsFrozen($ElementProxy(stack50000o_$_1,0),$Heap_$_9);
	assert  (forall  $pc_$11 : ref :: {$typeof($pc_$11)} {$Heap_$_9[$pc_$11,$localinv]} {$Heap_$_9[$pc_$11,$inv]} {$Heap_$_9[$pc_$11,$ownerFrame]} {$Heap_$_9[$pc_$11,$ownerRef]} ( ((((!($pc_$11 == null)) && $Heap_$_9[$pc_$11,$allocated]) && ($Heap_$_9[$pc_$11,$ownerRef] == $Heap_$_9[stack50000o_$_1,$ownerRef])) && ($Heap_$_9[$pc_$11,$ownerFrame] == $Heap_$_9[stack50000o_$_1,$ownerFrame])) ==> (($Heap_$_9[$pc_$11,$inv] == $typeof($pc_$11)) && ($Heap_$_9[$pc_$11,$localinv] == $typeof($pc_$11))) ));
	assert  (($Heap_$_9[stack50000o_$_1,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_9[$Heap_$_9[stack50000o_$_1,$ownerRef],$inv] <: $Heap_$_9[stack50000o_$_1,$ownerFrame]))) || ($Heap_$_9[$Heap_$_9[stack50000o_$_1,$ownerRef],$localinv] == $BaseClass($Heap_$_9[stack50000o_$_1,$ownerFrame]));
	assume IsHeap($Heap_$_10);
	assume $IsNotNull(call4formal_$_$result_$_0_$12,SExpressionSimplifier.Sx) && $Heap_$_10[call4formal_$_$result_$_0_$12,$allocated];
	assume IsFrozen(call4formal_$_$result_$_0_$12,$Heap_$_10);
	assume (forall  $o_$46 : ref :: {$Heap_$_10[$o_$46,$localinv]} {$Heap_$_10[$o_$46,$inv]} ( (((!($o_$46 == null)) && (!$Heap_$_9[$o_$46,$allocated])) && $Heap_$_10[$o_$46,$allocated]) ==> (($Heap_$_10[$o_$46,$inv] == $typeof($o_$46)) && ($Heap_$_10[$o_$46,$localinv] == $typeof($o_$46))) ));
	assume (forall  $o_$47 : ref :: {$Heap_$_10[$o_$47,$FirstConsistentOwner]} ( ($Heap_$_9[$Heap_$_9[$o_$47,$FirstConsistentOwner],$exposeVersion] == $Heap_$_10[$Heap_$_9[$o_$47,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_9[$o_$47,$FirstConsistentOwner] == $Heap_$_10[$o_$47,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$48 : ref, $f_$14 : Field (alpha)  :: {$Heap_$_10[$o_$48,$f_$14]} ( (((((((!($o_$48 == null)) && IncludeInMainFrameCondition($f_$14)) && $Heap_$_9[$o_$48,$allocated]) && ((($Heap_$_9[$o_$48,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_9[$Heap_$_9[$o_$48,$ownerRef],$inv] <: $Heap_$_9[$o_$48,$ownerFrame]))) || ($Heap_$_9[$Heap_$_9[$o_$48,$ownerRef],$localinv] == $BaseClass($Heap_$_9[$o_$48,$ownerFrame])))) && (!((($f_$14 == $ownerRef) || ($f_$14 == $ownerFrame)) && (($Heap_$_9[$o_$48,$ownerRef] == $Heap_$_9[stack50000o_$_1,$ownerRef]) && ($Heap_$_9[$o_$48,$ownerFrame] == $Heap_$_9[stack50000o_$_1,$ownerFrame]))))) && (((!($o_$48 == stack50000o_$_1)) || (!($typeof(stack50000o_$_1) <: DeclType($f_$14)))) || (!$IncludedInModifiesStar($f_$14)))) && ((!($o_$48 == stack50000o_$_1)) || (!($f_$14 == $exposeVersion)))) ==> ($Heap_$_9[$o_$48,$f_$14] == $Heap_$_10[$o_$48,$f_$14]) ));
	assume $HeapSucc($Heap_$_9,$Heap_$_10);
	assume (forall  $o_$49 : ref :: {$Heap_$_10[$o_$49,$localinv]} {$Heap_$_10[$o_$49,$inv]} ( $Heap_$_9[$o_$49,$allocated] ==> (($Heap_$_9[$o_$49,$inv] == $Heap_$_10[$o_$49,$inv]) && ($Heap_$_9[$o_$49,$localinv] == $Heap_$_10[$o_$49,$localinv])) ));
	assume (((forall  $o_$50 : ref :: {$Heap_$_10[$o_$50,$allocated]} ( $Heap_$_9[$o_$50,$allocated] ==> $Heap_$_10[$o_$50,$allocated] ))) && ((forall  $ot_$7 : ref :: {$Heap_$_10[$ot_$7,$ownerFrame]} {$Heap_$_10[$ot_$7,$ownerRef]} ( ($Heap_$_9[$ot_$7,$allocated] && (!($Heap_$_9[$ot_$7,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_10[$ot_$7,$ownerRef] == $Heap_$_9[$ot_$7,$ownerRef]) && ($Heap_$_10[$ot_$7,$ownerFrame] == $Heap_$_9[$ot_$7,$ownerFrame])) )))) && ($Heap_$_9[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_10[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_10;
	assume return.value_$_0 == call4formal_$_$result_$_0_$12;
	goto block12750;
false13022to12852:
	assume !(call3formal_$_$result_$_0 == $stringLiteral1);
	if ($_$_condition_$3) { goto true12852to14059; } else { goto false12852to13702; }
true12852to14059:
	assume call3formal_$_$result_$_0 == $stringLiteral2;
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_0,$Heap_$_0[this,SExpressionSimplifier.Nary.Args]) == 2;
	assume (($Heap_$_0[$ElementProxy(stack50000o_$_2,0),$allocated] <==> false) && (!($ElementProxy(stack50000o_$_2,0) == null))) && (!($ElementProxy(stack50000o_$_2,0) == stack50000o_$_2));
	assume ($Heap_$_0[$ElementProxy(stack50000o_$_2,0),$ownerRef] == $ElementProxy(stack50000o_$_2,0)) && ($Heap_$_0[$ElementProxy(stack50000o_$_2,0),$ownerFrame] == $PeerGroupPlaceholder);
	assume call0formal_$_this_$_0_$2 == $ElementProxy(stack50000o_$_2,0);
	assume IsHeap($Heap_$_11);
	assume $Heap_$_11[call0formal_$_this_$_0_$2,$allocated];
	assume (((($Heap_$_11[call0formal_$_this_$_0_$2,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_11[$Heap_$_11[call0formal_$_this_$_0_$2,$ownerRef],$inv] <: $Heap_$_11[call0formal_$_this_$_0_$2,$ownerFrame]))) || ($Heap_$_11[$Heap_$_11[call0formal_$_this_$_0_$2,$ownerRef],$localinv] == $BaseClass($Heap_$_11[call0formal_$_this_$_0_$2,$ownerFrame]))) && ($Heap_$_11[call0formal_$_this_$_0_$2,$inv] == System.Object)) && ($Heap_$_11[call0formal_$_this_$_0_$2,$localinv] == $typeof(call0formal_$_this_$_0_$2));
	assume ($Heap_$_11[call0formal_$_this_$_0_$2,$ownerRef] == $Heap_$_0[call0formal_$_this_$_0_$2,$ownerRef]) && ($Heap_$_11[call0formal_$_this_$_0_$2,$ownerFrame] == $Heap_$_0[call0formal_$_this_$_0_$2,$ownerFrame]);
	assume (forall  $o_$51 : ref :: {$Heap_$_11[$o_$51,$localinv]} {$Heap_$_11[$o_$51,$inv]} ( (((!($o_$51 == null)) && (!$Heap_$_0[$o_$51,$allocated])) && $Heap_$_11[$o_$51,$allocated]) ==> (($Heap_$_11[$o_$51,$inv] == $typeof($o_$51)) && ($Heap_$_11[$o_$51,$localinv] == $typeof($o_$51))) ));
	assume (forall  $o_$52 : ref :: {$Heap_$_11[$o_$52,$FirstConsistentOwner]} ( ($Heap_$_0[$Heap_$_0[$o_$52,$FirstConsistentOwner],$exposeVersion] == $Heap_$_11[$Heap_$_0[$o_$52,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_0[$o_$52,$FirstConsistentOwner] == $Heap_$_11[$o_$52,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$53 : ref, $f_$15 : Field (alpha)  :: {$Heap_$_11[$o_$53,$f_$15]} ( (((((((!($o_$53 == null)) && IncludeInMainFrameCondition($f_$15)) && $Heap_$_0[$o_$53,$allocated]) && ((($Heap_$_0[$o_$53,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$53,$ownerRef],$inv] <: $Heap_$_0[$o_$53,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$53,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$53,$ownerFrame])))) && ((!($o_$53 == call0formal_$_this_$_0_$2)) || (!(System.Object <: DeclType($f_$15))))) && true) && true) ==> ($Heap_$_0[$o_$53,$f_$15] == $Heap_$_11[$o_$53,$f_$15]) ));
	assume $HeapSucc($Heap_$_0,$Heap_$_11);
	assume (forall  $o_$54 : ref :: {$Heap_$_11[$o_$54,$localinv]} {$Heap_$_11[$o_$54,$inv]} ( ($Heap_$_0[$o_$54,$allocated] && (!($o_$54 == call0formal_$_this_$_0_$2))) ==> (($Heap_$_0[$o_$54,$inv] == $Heap_$_11[$o_$54,$inv]) && ($Heap_$_0[$o_$54,$localinv] == $Heap_$_11[$o_$54,$localinv])) ));
	assume (((forall  $o_$55 : ref :: {$Heap_$_11[$o_$55,$allocated]} ( $Heap_$_0[$o_$55,$allocated] ==> $Heap_$_11[$o_$55,$allocated] ))) && ((forall  $ot_$8 : ref :: {$Heap_$_11[$ot_$8,$ownerFrame]} {$Heap_$_11[$ot_$8,$ownerRef]} ( ($Heap_$_0[$ot_$8,$allocated] && (!($Heap_$_0[$ot_$8,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_11[$ot_$8,$ownerRef] == $Heap_$_0[$ot_$8,$ownerRef]) && ($Heap_$_11[$ot_$8,$ownerFrame] == $Heap_$_0[$ot_$8,$ownerFrame])) )))) && ($Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_11[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_11[stack50000o_$_2,$allocated] <==> false) && (!(stack50000o_$_2 == null))) && ($typeof(stack50000o_$_2) == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume ($Heap_$_11[stack50000o_$_2,$ownerRef] == stack50000o_$_2) && ($Heap_$_11[stack50000o_$_2,$ownerFrame] == $PeerGroupPlaceholder);
	assert  !(stack50000o_$_2 == null);
	assume $Utter($Heap_$_11[stack50000o_$_2,$ownerRef]);
	assert  (forall<alpha> $o_$56 : ref, $f_$16 : Field (alpha)  :: {$Heap_$_11[$o_$56,$f_$16]} ( ((((((!($o_$56 == null)) && IncludeInMainFrameCondition($f_$16)) && $Heap[$o_$56,$allocated]) && ((($Heap[$o_$56,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$56,$ownerRef],$inv] <: $Heap[$o_$56,$ownerFrame]))) || ($Heap[$Heap[$o_$56,$ownerRef],$localinv] == $BaseClass($Heap[$o_$56,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$16) && $Heap_$_11[$o_$56,$allocated]) && ((($Heap_$_11[$o_$56,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_11[$Heap_$_11[$o_$56,$ownerRef],$inv] <: $Heap_$_11[$o_$56,$ownerFrame]))) || ($Heap_$_11[$Heap_$_11[$o_$56,$ownerRef],$localinv] == $BaseClass($Heap_$_11[$o_$56,$ownerFrame])))) && ((!($o_$56 == stack50000o_$_2)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$16))))) && true) && true) ));
	assume IsHeap($Heap_$_12);
	assume $Heap_$_12[stack50000o_$_2,$allocated];
	assume (((($Heap_$_12[stack50000o_$_2,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_12[$Heap_$_12[stack50000o_$_2,$ownerRef],$inv] <: $Heap_$_12[stack50000o_$_2,$ownerFrame]))) || ($Heap_$_12[$Heap_$_12[stack50000o_$_2,$ownerRef],$localinv] == $BaseClass($Heap_$_12[stack50000o_$_2,$ownerFrame]))) && ($Heap_$_12[stack50000o_$_2,$inv] == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$_12[stack50000o_$_2,$localinv] == $typeof(stack50000o_$_2));
	assume ($Heap_$_12[stack50000o_$_2,$ownerRef] == $Heap_$_11[stack50000o_$_2,$ownerRef]) && ($Heap_$_12[stack50000o_$_2,$ownerFrame] == $Heap_$_11[stack50000o_$_2,$ownerFrame]);
	assume (forall  $o_$57 : ref :: {$Heap_$_12[$o_$57,$localinv]} {$Heap_$_12[$o_$57,$inv]} ( (((!($o_$57 == null)) && (!$Heap_$_11[$o_$57,$allocated])) && $Heap_$_12[$o_$57,$allocated]) ==> (($Heap_$_12[$o_$57,$inv] == $typeof($o_$57)) && ($Heap_$_12[$o_$57,$localinv] == $typeof($o_$57))) ));
	assume (forall  $o_$58 : ref :: {$Heap_$_12[$o_$58,$FirstConsistentOwner]} ( ($Heap_$_11[$Heap_$_11[$o_$58,$FirstConsistentOwner],$exposeVersion] == $Heap_$_12[$Heap_$_11[$o_$58,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_11[$o_$58,$FirstConsistentOwner] == $Heap_$_12[$o_$58,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$59 : ref, $f_$17 : Field (alpha)  :: {$Heap_$_12[$o_$59,$f_$17]} ( (((((((!($o_$59 == null)) && IncludeInMainFrameCondition($f_$17)) && $Heap_$_11[$o_$59,$allocated]) && ((($Heap_$_11[$o_$59,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_11[$Heap_$_11[$o_$59,$ownerRef],$inv] <: $Heap_$_11[$o_$59,$ownerFrame]))) || ($Heap_$_11[$Heap_$_11[$o_$59,$ownerRef],$localinv] == $BaseClass($Heap_$_11[$o_$59,$ownerFrame])))) && ((!($o_$59 == stack50000o_$_2)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$17))))) && true) && true) ==> ($Heap_$_11[$o_$59,$f_$17] == $Heap_$_12[$o_$59,$f_$17]) ));
	assume $HeapSucc($Heap_$_11,$Heap_$_12);
	assume (forall  $o_$60 : ref :: {$Heap_$_12[$o_$60,$localinv]} {$Heap_$_12[$o_$60,$inv]} ( ($Heap_$_11[$o_$60,$allocated] && (!($o_$60 == stack50000o_$_2))) ==> (($Heap_$_11[$o_$60,$inv] == $Heap_$_12[$o_$60,$inv]) && ($Heap_$_11[$o_$60,$localinv] == $Heap_$_12[$o_$60,$localinv])) ));
	assume (((forall  $o_$61 : ref :: {$Heap_$_12[$o_$61,$allocated]} ( $Heap_$_11[$o_$61,$allocated] ==> $Heap_$_12[$o_$61,$allocated] ))) && ((forall  $ot_$9 : ref :: {$Heap_$_12[$ot_$9,$ownerFrame]} {$Heap_$_12[$ot_$9,$ownerRef]} ( ($Heap_$_11[$ot_$9,$allocated] && (!($Heap_$_11[$ot_$9,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_12[$ot_$9,$ownerRef] == $Heap_$_11[$ot_$9,$ownerRef]) && ($Heap_$_12[$ot_$9,$ownerFrame] == $Heap_$_11[$ot_$9,$ownerFrame])) )))) && ($Heap_$_11[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_12[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  $Heap_$_12[$ElementProxy(stack50000o_$_2,0),$ownerFrame] == $PeerGroupPlaceholder;
	assert  (forall  $pc_$12 : ref :: {$typeof($pc_$12)} {$Heap_$_12[$pc_$12,$localinv]} {$Heap_$_12[$pc_$12,$inv]} {$Heap_$_12[$pc_$12,$ownerFrame]} {$Heap_$_12[$pc_$12,$ownerRef]} ( ((((!($pc_$12 == null)) && $Heap_$_12[$pc_$12,$allocated]) && ($Heap_$_12[$pc_$12,$ownerRef] == $Heap_$_12[$ElementProxy(stack50000o_$_2,0),$ownerRef])) && ($Heap_$_12[$pc_$12,$ownerFrame] == $Heap_$_12[$ElementProxy(stack50000o_$_2,0),$ownerFrame])) ==> (($Heap_$_12[$pc_$12,$inv] == $typeof($pc_$12)) && ($Heap_$_12[$pc_$12,$localinv] == $typeof($pc_$12))) ));
	assume call0formal_$_x_$_0_$2 == $ElementProxy(stack50000o_$_2,0);
	assume IsHeap($Heap_$_13);
	assume (forall<alpha> p_$11 : ref, F_$1 : Field (alpha)  :: {$Heap_$_13[p_$11,F_$1]} ( ((((!(F_$1 == $ownerRef)) && (!(F_$1 == $ownerFrame))) && (!(F_$1 == $FirstConsistentOwner))) || ((!($Heap_$_12[p_$11,$ownerRef] == $Heap_$_12[call0formal_$_x_$_0_$2,$ownerRef])) || (!($Heap_$_12[p_$11,$ownerFrame] == $Heap_$_12[call0formal_$_x_$_0_$2,$ownerFrame])))) ==> ($Heap_$_12[p_$11,F_$1] == $Heap_$_13[p_$11,F_$1]) ));
	assume (call0formal_$_x_$_0_$2 == null) ==> ($Heap_$_13 == $Heap_$_12);
	assume (!(call0formal_$_x_$_0_$2 == null)) ==> ((forall  p_$12 : ref :: {$Heap_$_13[p_$12,$ownerRef]} {$Heap_$_13[p_$12,$ownerFrame]} ( (($Heap_$_12[p_$12,$ownerRef] == $Heap_$_12[call0formal_$_x_$_0_$2,$ownerRef]) && ($Heap_$_12[p_$12,$ownerFrame] == $Heap_$_12[call0formal_$_x_$_0_$2,$ownerFrame])) ==> (($Heap_$_13[p_$12,$ownerRef] == $freezerRef) && ($Heap_$_13[p_$12,$ownerFrame] == $Freezer)) )));
	assume $HeapSucc($Heap_$_12,$Heap_$_13);
	assert  !(this == null);
	assume $Utter($Heap_$_13[this,$ownerRef]);
	assume $Utter($Heap_$_13[stack50000o_$_2,$ownerRef]);
	assert  (forall<alpha> $o_$62 : ref, $f_$18 : Field (alpha)  :: {$Heap_$_13[$o_$62,$f_$18]} ( ((((((!($o_$62 == null)) && IncludeInMainFrameCondition($f_$18)) && $Heap[$o_$62,$allocated]) && ((($Heap[$o_$62,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$62,$ownerRef],$inv] <: $Heap[$o_$62,$ownerFrame]))) || ($Heap[$Heap[$o_$62,$ownerRef],$localinv] == $BaseClass($Heap[$o_$62,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$18) && $Heap_$_13[$o_$62,$allocated]) && ((($Heap_$_13[$o_$62,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_13[$Heap_$_13[$o_$62,$ownerRef],$inv] <: $Heap_$_13[$o_$62,$ownerFrame]))) || ($Heap_$_13[$Heap_$_13[$o_$62,$ownerRef],$localinv] == $BaseClass($Heap_$_13[$o_$62,$ownerFrame])))) && (((!($o_$62 == stack50000o_$_2)) || (!($typeof(stack50000o_$_2) <: DeclType($f_$18)))) || (!$IncludedInModifiesStar($f_$18)))) && ((!($o_$62 == stack50000o_$_2)) || (!($f_$18 == $exposeVersion)))) ));
	assume $IsNotNull(call4formal_$_consequent$out,SExpressionSimplifier.Sx) && $Heap[call4formal_$_consequent$out,$allocated];
	assert  #System.String.Equals$System.String$System.String($Heap_$_13,$Heap_$_13[this,SExpressionSimplifier.Nary.F],$stringLiteral2);
	assert  IsFrozen(this,$Heap_$_13);
	assert  IsFrozen($ElementProxy(stack50000o_$_2,0),$Heap_$_13);
	assert  (forall  $pc_$13 : ref :: {$typeof($pc_$13)} {$Heap_$_13[$pc_$13,$localinv]} {$Heap_$_13[$pc_$13,$inv]} {$Heap_$_13[$pc_$13,$ownerFrame]} {$Heap_$_13[$pc_$13,$ownerRef]} ( ((((!($pc_$13 == null)) && $Heap_$_13[$pc_$13,$allocated]) && ($Heap_$_13[$pc_$13,$ownerRef] == $Heap_$_13[stack50000o_$_2,$ownerRef])) && ($Heap_$_13[$pc_$13,$ownerFrame] == $Heap_$_13[stack50000o_$_2,$ownerFrame])) ==> (($Heap_$_13[$pc_$13,$inv] == $typeof($pc_$13)) && ($Heap_$_13[$pc_$13,$localinv] == $typeof($pc_$13))) ));
	assert  (($Heap_$_13[stack50000o_$_2,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_13[$Heap_$_13[stack50000o_$_2,$ownerRef],$inv] <: $Heap_$_13[stack50000o_$_2,$ownerFrame]))) || ($Heap_$_13[$Heap_$_13[stack50000o_$_2,$ownerRef],$localinv] == $BaseClass($Heap_$_13[stack50000o_$_2,$ownerFrame]));
	assume IsHeap($Heap_$_14);
	assume $IsNotNull(call4formal_$_consequent$out_$_0,SExpressionSimplifier.Sx) && $Heap_$_14[call4formal_$_consequent$out_$_0,$allocated];
	assume IsFrozen(call4formal_$_consequent$out_$_0,$Heap_$_14);
	assume (forall  $o_$63 : ref :: {$Heap_$_14[$o_$63,$localinv]} {$Heap_$_14[$o_$63,$inv]} ( (((!($o_$63 == null)) && (!$Heap_$_13[$o_$63,$allocated])) && $Heap_$_14[$o_$63,$allocated]) ==> (($Heap_$_14[$o_$63,$inv] == $typeof($o_$63)) && ($Heap_$_14[$o_$63,$localinv] == $typeof($o_$63))) ));
	assume (forall  $o_$64 : ref :: {$Heap_$_14[$o_$64,$FirstConsistentOwner]} ( ($Heap_$_13[$Heap_$_13[$o_$64,$FirstConsistentOwner],$exposeVersion] == $Heap_$_14[$Heap_$_13[$o_$64,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_13[$o_$64,$FirstConsistentOwner] == $Heap_$_14[$o_$64,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$65 : ref, $f_$19 : Field (alpha)  :: {$Heap_$_14[$o_$65,$f_$19]} ( ((((((!($o_$65 == null)) && IncludeInMainFrameCondition($f_$19)) && $Heap_$_13[$o_$65,$allocated]) && ((($Heap_$_13[$o_$65,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_13[$Heap_$_13[$o_$65,$ownerRef],$inv] <: $Heap_$_13[$o_$65,$ownerFrame]))) || ($Heap_$_13[$Heap_$_13[$o_$65,$ownerRef],$localinv] == $BaseClass($Heap_$_13[$o_$65,$ownerFrame])))) && (((!($o_$65 == stack50000o_$_2)) || (!($typeof(stack50000o_$_2) <: DeclType($f_$19)))) || (!$IncludedInModifiesStar($f_$19)))) && ((!($o_$65 == stack50000o_$_2)) || (!($f_$19 == $exposeVersion)))) ==> ($Heap_$_13[$o_$65,$f_$19] == $Heap_$_14[$o_$65,$f_$19]) ));
	assume $HeapSucc($Heap_$_13,$Heap_$_14);
	assume (forall  $o_$66 : ref :: {$Heap_$_14[$o_$66,$localinv]} {$Heap_$_14[$o_$66,$inv]} ( $Heap_$_13[$o_$66,$allocated] ==> (($Heap_$_13[$o_$66,$inv] == $Heap_$_14[$o_$66,$inv]) && ($Heap_$_13[$o_$66,$localinv] == $Heap_$_14[$o_$66,$localinv])) ));
	assume (((forall  $o_$67 : ref :: {$Heap_$_14[$o_$67,$allocated]} ( $Heap_$_13[$o_$67,$allocated] ==> $Heap_$_14[$o_$67,$allocated] ))) && ((forall  $ot_$10 : ref :: {$Heap_$_14[$ot_$10,$ownerFrame]} {$Heap_$_14[$ot_$10,$ownerRef]} ( ($Heap_$_13[$ot_$10,$allocated] && (!($Heap_$_13[$ot_$10,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_14[$ot_$10,$ownerRef] == $Heap_$_13[$ot_$10,$ownerRef]) && ($Heap_$_14[$ot_$10,$ownerFrame] == $Heap_$_13[$ot_$10,$ownerFrame])) )))) && ($Heap_$_13[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_14[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Utter($Heap_$_14[stack50000o_$_2,$ownerRef]);
	assert  (forall<alpha> $o_$68 : ref, $f_$20 : Field (alpha)  :: {$Heap_$_14[$o_$68,$f_$20]} ( ((((((!($o_$68 == null)) && IncludeInMainFrameCondition($f_$20)) && $Heap[$o_$68,$allocated]) && ((($Heap[$o_$68,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$68,$ownerRef],$inv] <: $Heap[$o_$68,$ownerFrame]))) || ($Heap[$Heap[$o_$68,$ownerRef],$localinv] == $BaseClass($Heap[$o_$68,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$20) && $Heap_$_14[$o_$68,$allocated]) && ((($Heap_$_14[$o_$68,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_14[$Heap_$_14[$o_$68,$ownerRef],$inv] <: $Heap_$_14[$o_$68,$ownerFrame]))) || ($Heap_$_14[$Heap_$_14[$o_$68,$ownerRef],$localinv] == $BaseClass($Heap_$_14[$o_$68,$ownerFrame])))) && (!(((($f_$20 == $ownerRef) || ($f_$20 == $ownerFrame)) && ($Heap_$_14[$o_$68,$ownerRef] == $Heap_$_14[stack50000o_$_2,$ownerRef])) && ($Heap_$_14[$o_$68,$ownerFrame] == $Heap_$_14[stack50000o_$_2,$ownerFrame])))) && (((!($o_$68 == stack50000o_$_2)) || (!($typeof(stack50000o_$_2) <: DeclType($f_$20)))) || (!$IncludedInModifiesStar($f_$20)))) && ((!($o_$68 == stack50000o_$_2)) || (!($f_$20 == $exposeVersion)))) ));
	assume $IsNotNull(call4formal_$_$result_$7,SExpressionSimplifier.Sx) && $Heap[call4formal_$_$result_$7,$allocated];
	assert  $Heap_$_14[stack50000o_$_2,$ownerFrame] == $PeerGroupPlaceholder;
	assert  IsFrozen($ElementProxy(stack50000o_$_2,0),$Heap_$_14);
	assert  (forall  $pc_$14 : ref :: {$typeof($pc_$14)} {$Heap_$_14[$pc_$14,$localinv]} {$Heap_$_14[$pc_$14,$inv]} {$Heap_$_14[$pc_$14,$ownerFrame]} {$Heap_$_14[$pc_$14,$ownerRef]} ( ((((!($pc_$14 == null)) && $Heap_$_14[$pc_$14,$allocated]) && ($Heap_$_14[$pc_$14,$ownerRef] == $Heap_$_14[stack50000o_$_2,$ownerRef])) && ($Heap_$_14[$pc_$14,$ownerFrame] == $Heap_$_14[stack50000o_$_2,$ownerFrame])) ==> (($Heap_$_14[$pc_$14,$inv] == $typeof($pc_$14)) && ($Heap_$_14[$pc_$14,$localinv] == $typeof($pc_$14))) ));
	assert  (($Heap_$_14[stack50000o_$_2,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_14[$Heap_$_14[stack50000o_$_2,$ownerRef],$inv] <: $Heap_$_14[stack50000o_$_2,$ownerFrame]))) || ($Heap_$_14[$Heap_$_14[stack50000o_$_2,$ownerRef],$localinv] == $BaseClass($Heap_$_14[stack50000o_$_2,$ownerFrame]));
	assume IsHeap($Heap_$_15);
	assume $IsNotNull(call4formal_$_$result_$_0_$11,SExpressionSimplifier.Sx) && $Heap_$_15[call4formal_$_$result_$_0_$11,$allocated];
	assume IsFrozen(call4formal_$_$result_$_0_$11,$Heap_$_15);
	assume (forall  $o_$69 : ref :: {$Heap_$_15[$o_$69,$localinv]} {$Heap_$_15[$o_$69,$inv]} ( (((!($o_$69 == null)) && (!$Heap_$_14[$o_$69,$allocated])) && $Heap_$_15[$o_$69,$allocated]) ==> (($Heap_$_15[$o_$69,$inv] == $typeof($o_$69)) && ($Heap_$_15[$o_$69,$localinv] == $typeof($o_$69))) ));
	assume (forall  $o_$70 : ref :: {$Heap_$_15[$o_$70,$FirstConsistentOwner]} ( ($Heap_$_14[$Heap_$_14[$o_$70,$FirstConsistentOwner],$exposeVersion] == $Heap_$_15[$Heap_$_14[$o_$70,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_14[$o_$70,$FirstConsistentOwner] == $Heap_$_15[$o_$70,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$71 : ref, $f_$21 : Field (alpha)  :: {$Heap_$_15[$o_$71,$f_$21]} ( (((((((!($o_$71 == null)) && IncludeInMainFrameCondition($f_$21)) && $Heap_$_14[$o_$71,$allocated]) && ((($Heap_$_14[$o_$71,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_14[$Heap_$_14[$o_$71,$ownerRef],$inv] <: $Heap_$_14[$o_$71,$ownerFrame]))) || ($Heap_$_14[$Heap_$_14[$o_$71,$ownerRef],$localinv] == $BaseClass($Heap_$_14[$o_$71,$ownerFrame])))) && (!((($f_$21 == $ownerRef) || ($f_$21 == $ownerFrame)) && (($Heap_$_14[$o_$71,$ownerRef] == $Heap_$_14[stack50000o_$_2,$ownerRef]) && ($Heap_$_14[$o_$71,$ownerFrame] == $Heap_$_14[stack50000o_$_2,$ownerFrame]))))) && (((!($o_$71 == stack50000o_$_2)) || (!($typeof(stack50000o_$_2) <: DeclType($f_$21)))) || (!$IncludedInModifiesStar($f_$21)))) && ((!($o_$71 == stack50000o_$_2)) || (!($f_$21 == $exposeVersion)))) ==> ($Heap_$_14[$o_$71,$f_$21] == $Heap_$_15[$o_$71,$f_$21]) ));
	assume $HeapSucc($Heap_$_14,$Heap_$_15);
	assume (forall  $o_$72 : ref :: {$Heap_$_15[$o_$72,$localinv]} {$Heap_$_15[$o_$72,$inv]} ( $Heap_$_14[$o_$72,$allocated] ==> (($Heap_$_14[$o_$72,$inv] == $Heap_$_15[$o_$72,$inv]) && ($Heap_$_14[$o_$72,$localinv] == $Heap_$_15[$o_$72,$localinv])) ));
	assume (((forall  $o_$73 : ref :: {$Heap_$_15[$o_$73,$allocated]} ( $Heap_$_14[$o_$73,$allocated] ==> $Heap_$_15[$o_$73,$allocated] ))) && ((forall  $ot_$11 : ref :: {$Heap_$_15[$ot_$11,$ownerFrame]} {$Heap_$_15[$ot_$11,$ownerRef]} ( ($Heap_$_14[$ot_$11,$allocated] && (!($Heap_$_14[$ot_$11,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_15[$ot_$11,$ownerRef] == $Heap_$_14[$ot_$11,$ownerRef]) && ($Heap_$_15[$ot_$11,$ownerFrame] == $Heap_$_14[$ot_$11,$ownerFrame])) )))) && ($Heap_$_14[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_15[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call4formal_$_$result_$_0_$11 == null);
	assume $Utter($Heap_$_15[call4formal_$_$result_$_0_$11,$ownerRef]);
	assert  (forall<alpha> $o_$74 : ref, $f_$22 : Field (alpha)  :: {$Heap_$_15[$o_$74,$f_$22]} ( ((((((!($o_$74 == null)) && IncludeInMainFrameCondition($f_$22)) && $Heap[$o_$74,$allocated]) && ((($Heap[$o_$74,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$74,$ownerRef],$inv] <: $Heap[$o_$74,$ownerFrame]))) || ($Heap[$Heap[$o_$74,$ownerRef],$localinv] == $BaseClass($Heap[$o_$74,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$22) && $Heap_$_15[$o_$74,$allocated]) && ((($Heap_$_15[$o_$74,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_15[$Heap_$_15[$o_$74,$ownerRef],$inv] <: $Heap_$_15[$o_$74,$ownerFrame]))) || ($Heap_$_15[$Heap_$_15[$o_$74,$ownerRef],$localinv] == $BaseClass($Heap_$_15[$o_$74,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call4formal_$_$result_$_0_$11,$Heap_$_15);
	assume IsHeap($Heap_$_16);
	assume true;
	assume $AsPureObject(call4formal_$_$result_$_0_$11) == call4formal_$_$result_$_0_$11;
	assume (forall  $o_$75 : ref :: {$Heap_$_16[$o_$75,$localinv]} {$Heap_$_16[$o_$75,$inv]} ( (((!($o_$75 == null)) && (!$Heap_$_15[$o_$75,$allocated])) && $Heap_$_16[$o_$75,$allocated]) ==> (($Heap_$_16[$o_$75,$inv] == $typeof($o_$75)) && ($Heap_$_16[$o_$75,$localinv] == $typeof($o_$75))) ));
	assume (forall  $o_$76 : ref :: {$Heap_$_16[$o_$76,$FirstConsistentOwner]} ( ($Heap_$_15[$Heap_$_15[$o_$76,$FirstConsistentOwner],$exposeVersion] == $Heap_$_16[$Heap_$_15[$o_$76,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_15[$o_$76,$FirstConsistentOwner] == $Heap_$_16[$o_$76,$FirstConsistentOwner]) ));
	assume $Heap_$_16 == $Heap_$_15;
	assume call3formal_$_$result_$_0_$14 <==> #SExpressionSimplifier.Sx.get_IsTrue($Heap_$_16,call4formal_$_$result_$_0_$11);
	assume (forall<alpha> $o_$77 : ref, $f_$23 : Field (alpha)  :: {$Heap_$_16[$o_$77,$f_$23]} ( ((((((!($o_$77 == null)) && IncludeInMainFrameCondition($f_$23)) && $Heap_$_15[$o_$77,$allocated]) && ((($Heap_$_15[$o_$77,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_15[$Heap_$_15[$o_$77,$ownerRef],$inv] <: $Heap_$_15[$o_$77,$ownerFrame]))) || ($Heap_$_15[$Heap_$_15[$o_$77,$ownerRef],$localinv] == $BaseClass($Heap_$_15[$o_$77,$ownerFrame])))) && true) && true) ==> ($Heap_$_15[$o_$77,$f_$23] == $Heap_$_16[$o_$77,$f_$23]) ));
	assume $HeapSucc($Heap_$_15,$Heap_$_16);
	assume (forall  $o_$78 : ref :: {$Heap_$_16[$o_$78,$localinv]} {$Heap_$_16[$o_$78,$inv]} ( $Heap_$_15[$o_$78,$allocated] ==> (($Heap_$_15[$o_$78,$inv] == $Heap_$_16[$o_$78,$inv]) && ($Heap_$_15[$o_$78,$localinv] == $Heap_$_16[$o_$78,$localinv])) ));
	assume (((forall  $o_$79 : ref :: {$Heap_$_16[$o_$79,$allocated]} ( $Heap_$_15[$o_$79,$allocated] ==> $Heap_$_16[$o_$79,$allocated] ))) && ((forall  $ot_$12 : ref :: {$Heap_$_16[$ot_$12,$ownerFrame]} {$Heap_$_16[$ot_$12,$ownerRef]} ( ($Heap_$_15[$ot_$12,$allocated] && (!($Heap_$_15[$ot_$12,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_16[$ot_$12,$ownerRef] == $Heap_$_15[$ot_$12,$ownerRef]) && ($Heap_$_16[$ot_$12,$ownerFrame] == $Heap_$_15[$ot_$12,$ownerFrame])) )))) && ($Heap_$_15[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_16[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$4) { goto true13838to13124; } else { goto false13838to12954; }
false12852to13702:
	assume !(call3formal_$_$result_$_0 == $stringLiteral2);
	if ($_$_condition_$5) { goto true13702to13175; } else { goto false13702to13158; }
true13838to13124:
	assume call3formal_$_$result_$_0_$14;
	assume $Heap_$_78 == $Heap_$_16;
	goto block13124;
false13838to12954:
	assume !call3formal_$_$result_$_0_$14;
	assert  !(call4formal_$_consequent$out_$_0 == null);
	assume $Utter($Heap_$_16[call4formal_$_consequent$out_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$80 : ref, $f_$24 : Field (alpha)  :: {$Heap_$_16[$o_$80,$f_$24]} ( ((((((!($o_$80 == null)) && IncludeInMainFrameCondition($f_$24)) && $Heap[$o_$80,$allocated]) && ((($Heap[$o_$80,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$80,$ownerRef],$inv] <: $Heap[$o_$80,$ownerFrame]))) || ($Heap[$Heap[$o_$80,$ownerRef],$localinv] == $BaseClass($Heap[$o_$80,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$24) && $Heap_$_16[$o_$80,$allocated]) && ((($Heap_$_16[$o_$80,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_16[$Heap_$_16[$o_$80,$ownerRef],$inv] <: $Heap_$_16[$o_$80,$ownerFrame]))) || ($Heap_$_16[$Heap_$_16[$o_$80,$ownerRef],$localinv] == $BaseClass($Heap_$_16[$o_$80,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call4formal_$_consequent$out_$_0,$Heap_$_16);
	assume IsHeap($Heap_$_74);
	assume true;
	assume $AsPureObject(call4formal_$_consequent$out_$_0) == call4formal_$_consequent$out_$_0;
	assume (forall  $o_$81 : ref :: {$Heap_$_74[$o_$81,$localinv]} {$Heap_$_74[$o_$81,$inv]} ( (((!($o_$81 == null)) && (!$Heap_$_16[$o_$81,$allocated])) && $Heap_$_74[$o_$81,$allocated]) ==> (($Heap_$_74[$o_$81,$inv] == $typeof($o_$81)) && ($Heap_$_74[$o_$81,$localinv] == $typeof($o_$81))) ));
	assume (forall  $o_$82 : ref :: {$Heap_$_74[$o_$82,$FirstConsistentOwner]} ( ($Heap_$_16[$Heap_$_16[$o_$82,$FirstConsistentOwner],$exposeVersion] == $Heap_$_74[$Heap_$_16[$o_$82,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_16[$o_$82,$FirstConsistentOwner] == $Heap_$_74[$o_$82,$FirstConsistentOwner]) ));
	assume $Heap_$_74 == $Heap_$_16;
	assume call3formal_$_$result_$_0_$15 <==> #SExpressionSimplifier.Sx.get_IsTrue($Heap_$_74,call4formal_$_consequent$out_$_0);
	assume (forall<alpha> $o_$83 : ref, $f_$25 : Field (alpha)  :: {$Heap_$_74[$o_$83,$f_$25]} ( ((((((!($o_$83 == null)) && IncludeInMainFrameCondition($f_$25)) && $Heap_$_16[$o_$83,$allocated]) && ((($Heap_$_16[$o_$83,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_16[$Heap_$_16[$o_$83,$ownerRef],$inv] <: $Heap_$_16[$o_$83,$ownerFrame]))) || ($Heap_$_16[$Heap_$_16[$o_$83,$ownerRef],$localinv] == $BaseClass($Heap_$_16[$o_$83,$ownerFrame])))) && true) && true) ==> ($Heap_$_16[$o_$83,$f_$25] == $Heap_$_74[$o_$83,$f_$25]) ));
	assume $HeapSucc($Heap_$_16,$Heap_$_74);
	assume (forall  $o_$84 : ref :: {$Heap_$_74[$o_$84,$localinv]} {$Heap_$_74[$o_$84,$inv]} ( $Heap_$_16[$o_$84,$allocated] ==> (($Heap_$_16[$o_$84,$inv] == $Heap_$_74[$o_$84,$inv]) && ($Heap_$_16[$o_$84,$localinv] == $Heap_$_74[$o_$84,$localinv])) ));
	assume (((forall  $o_$85 : ref :: {$Heap_$_74[$o_$85,$allocated]} ( $Heap_$_16[$o_$85,$allocated] ==> $Heap_$_74[$o_$85,$allocated] ))) && ((forall  $ot_$13 : ref :: {$Heap_$_74[$ot_$13,$ownerFrame]} {$Heap_$_74[$ot_$13,$ownerRef]} ( ($Heap_$_16[$ot_$13,$allocated] && (!($Heap_$_16[$ot_$13,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_74[$ot_$13,$ownerRef] == $Heap_$_16[$ot_$13,$ownerRef]) && ($Heap_$_74[$ot_$13,$ownerFrame] == $Heap_$_16[$ot_$13,$ownerFrame])) )))) && ($Heap_$_16[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_74[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$6) { goto true12954to13124; } else { goto false12954to13464; }
true13702to13175:
	assume call3formal_$_$result_$_0 == $stringLiteral3;
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_0,$Heap_$_0[this,SExpressionSimplifier.Nary.Args]) == 2;
	assert  !(this == null);
	assume stack0o_$_0 == $Heap_$_0[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_0 == null);
	assume $Utter($Heap_$_0[stack0o_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$86 : ref, $f_$26 : Field (alpha)  :: {$Heap_$_0[$o_$86,$f_$26]} ( ((((((!($o_$86 == null)) && IncludeInMainFrameCondition($f_$26)) && $Heap[$o_$86,$allocated]) && ((($Heap[$o_$86,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$86,$ownerRef],$inv] <: $Heap[$o_$86,$ownerFrame]))) || ($Heap[$Heap[$o_$86,$ownerRef],$localinv] == $BaseClass($Heap[$o_$86,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$26) && $Heap_$_0[$o_$86,$allocated]) && ((($Heap_$_0[$o_$86,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$86,$ownerRef],$inv] <: $Heap_$_0[$o_$86,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$86,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$86,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$8,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$8,$allocated];
	assert  0 <= 0;
	assert  0 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_0,stack0o_$_0);
	assert  (forall  $pc_$15 : ref :: {$typeof($pc_$15)} {$Heap_$_0[$pc_$15,$localinv]} {$Heap_$_0[$pc_$15,$inv]} {$Heap_$_0[$pc_$15,$ownerFrame]} {$Heap_$_0[$pc_$15,$ownerRef]} ( ((((!($pc_$15 == null)) && $Heap_$_0[$pc_$15,$allocated]) && ($Heap_$_0[$pc_$15,$ownerRef] == $Heap_$_0[stack0o_$_0,$ownerRef])) && ($Heap_$_0[$pc_$15,$ownerFrame] == $Heap_$_0[stack0o_$_0,$ownerFrame])) ==> (($Heap_$_0[$pc_$15,$inv] == $typeof($pc_$15)) && ($Heap_$_0[$pc_$15,$localinv] == $typeof($pc_$15))) ));
	assume IsHeap($Heap_$_17);
	assume $IsNotNull(call5formal_$_$result_$_0_$8,SExpressionSimplifier.Sx) && $Heap_$_17[call5formal_$_$result_$_0_$8,$allocated];
	assume $Heap_$_0[call5formal_$_$result_$_0_$8,$allocated];
	assume (((!($Heap_$_17[stack0o_$_0,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$inv] <: $Heap_$_17[stack0o_$_0,$ownerFrame])) && (!($Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$localinv] == $BaseClass($Heap_$_17[stack0o_$_0,$ownerFrame])))) ==> (((!(((!($Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_17[$Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerRef],$inv] <: $Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerFrame])) && (!($Heap_$_17[$Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_17[stack0o_$_0,$FirstConsistentOwner] == $Heap_$_17[stack0o_$_0,$ownerRef])) && ((((!($Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_17[$Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerRef],$inv] <: $Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerFrame])) && (!($Heap_$_17[$Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$ownerFrame])))) ==> ($Heap_$_17[stack0o_$_0,$FirstConsistentOwner] == $Heap_$_17[$Heap_$_17[stack0o_$_0,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_0) == stack0o_$_0;
	assume IsFrozen(call5formal_$_$result_$_0_$8,$Heap_$_17);
	assume (forall  $o_$87 : ref :: {$Heap_$_17[$o_$87,$localinv]} {$Heap_$_17[$o_$87,$inv]} ( (((!($o_$87 == null)) && (!$Heap_$_0[$o_$87,$allocated])) && $Heap_$_17[$o_$87,$allocated]) ==> (($Heap_$_17[$o_$87,$inv] == $typeof($o_$87)) && ($Heap_$_17[$o_$87,$localinv] == $typeof($o_$87))) ));
	assume (forall  $o_$88 : ref :: {$Heap_$_17[$o_$88,$FirstConsistentOwner]} ( ($Heap_$_0[$Heap_$_0[$o_$88,$FirstConsistentOwner],$exposeVersion] == $Heap_$_17[$Heap_$_0[$o_$88,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_0[$o_$88,$FirstConsistentOwner] == $Heap_$_17[$o_$88,$FirstConsistentOwner]) ));
	assume $Heap_$_17 == $Heap_$_0;
	assume false || (call5formal_$_$result_$_0_$8 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_17,stack0o_$_0,0));
	assume (forall<alpha> $o_$89 : ref, $f_$27 : Field (alpha)  :: {$Heap_$_17[$o_$89,$f_$27]} ( ((((((!($o_$89 == null)) && IncludeInMainFrameCondition($f_$27)) && $Heap_$_0[$o_$89,$allocated]) && ((($Heap_$_0[$o_$89,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$89,$ownerRef],$inv] <: $Heap_$_0[$o_$89,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$89,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$89,$ownerFrame])))) && true) && true) ==> ($Heap_$_0[$o_$89,$f_$27] == $Heap_$_17[$o_$89,$f_$27]) ));
	assume $HeapSucc($Heap_$_0,$Heap_$_17);
	assume (forall  $o_$90 : ref :: {$Heap_$_17[$o_$90,$localinv]} {$Heap_$_17[$o_$90,$inv]} ( $Heap_$_0[$o_$90,$allocated] ==> (($Heap_$_0[$o_$90,$inv] == $Heap_$_17[$o_$90,$inv]) && ($Heap_$_0[$o_$90,$localinv] == $Heap_$_17[$o_$90,$localinv])) ));
	assume (((forall  $o_$91 : ref :: {$Heap_$_17[$o_$91,$allocated]} ( $Heap_$_0[$o_$91,$allocated] ==> $Heap_$_17[$o_$91,$allocated] ))) && ((forall  $ot_$14 : ref :: {$Heap_$_17[$ot_$14,$ownerFrame]} {$Heap_$_17[$ot_$14,$ownerRef]} ( ($Heap_$_0[$ot_$14,$allocated] && (!($Heap_$_0[$ot_$14,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_17[$ot_$14,$ownerRef] == $Heap_$_0[$ot_$14,$ownerRef]) && ($Heap_$_17[$ot_$14,$ownerFrame] == $Heap_$_0[$ot_$14,$ownerFrame])) )))) && ($Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_17[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call5formal_$_$result_$_0_$8 == null);
	assume $Utter($Heap_$_17[call5formal_$_$result_$_0_$8,$ownerRef]);
	assert  (forall<alpha> $o_$92 : ref, $f_$28 : Field (alpha)  :: {$Heap_$_17[$o_$92,$f_$28]} ( ((((((!($o_$92 == null)) && IncludeInMainFrameCondition($f_$28)) && $Heap[$o_$92,$allocated]) && ((($Heap[$o_$92,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$92,$ownerRef],$inv] <: $Heap[$o_$92,$ownerFrame]))) || ($Heap[$Heap[$o_$92,$ownerRef],$localinv] == $BaseClass($Heap[$o_$92,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$28) && $Heap_$_17[$o_$92,$allocated]) && ((($Heap_$_17[$o_$92,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_17[$Heap_$_17[$o_$92,$ownerRef],$inv] <: $Heap_$_17[$o_$92,$ownerFrame]))) || ($Heap_$_17[$Heap_$_17[$o_$92,$ownerRef],$localinv] == $BaseClass($Heap_$_17[$o_$92,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call3formal_$_$result_$6,SExpressionSimplifier.Sx) && $Heap[call3formal_$_$result_$6,$allocated];
	assert  IsFrozen(call5formal_$_$result_$_0_$8,$Heap_$_17);
	assume IsHeap($Heap_$_18);
	assume $IsNotNull(call3formal_$_$result_$_0_$8,SExpressionSimplifier.Sx) && $Heap_$_18[call3formal_$_$result_$_0_$8,$allocated];
	assume IsFrozen(call3formal_$_$result_$_0_$8,$Heap_$_18);
	assume (forall  $o_$93 : ref :: {$Heap_$_18[$o_$93,$localinv]} {$Heap_$_18[$o_$93,$inv]} ( (((!($o_$93 == null)) && (!$Heap_$_17[$o_$93,$allocated])) && $Heap_$_18[$o_$93,$allocated]) ==> (($Heap_$_18[$o_$93,$inv] == $typeof($o_$93)) && ($Heap_$_18[$o_$93,$localinv] == $typeof($o_$93))) ));
	assume (forall  $o_$94 : ref :: {$Heap_$_18[$o_$94,$FirstConsistentOwner]} ( ($Heap_$_17[$Heap_$_17[$o_$94,$FirstConsistentOwner],$exposeVersion] == $Heap_$_18[$Heap_$_17[$o_$94,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_17[$o_$94,$FirstConsistentOwner] == $Heap_$_18[$o_$94,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$95 : ref, $f_$29 : Field (alpha)  :: {$Heap_$_18[$o_$95,$f_$29]} ( ((((((!($o_$95 == null)) && IncludeInMainFrameCondition($f_$29)) && $Heap_$_17[$o_$95,$allocated]) && ((($Heap_$_17[$o_$95,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_17[$Heap_$_17[$o_$95,$ownerRef],$inv] <: $Heap_$_17[$o_$95,$ownerFrame]))) || ($Heap_$_17[$Heap_$_17[$o_$95,$ownerRef],$localinv] == $BaseClass($Heap_$_17[$o_$95,$ownerFrame])))) && true) && true) ==> ($Heap_$_17[$o_$95,$f_$29] == $Heap_$_18[$o_$95,$f_$29]) ));
	assume $HeapSucc($Heap_$_17,$Heap_$_18);
	assume (forall  $o_$96 : ref :: {$Heap_$_18[$o_$96,$localinv]} {$Heap_$_18[$o_$96,$inv]} ( $Heap_$_17[$o_$96,$allocated] ==> (($Heap_$_17[$o_$96,$inv] == $Heap_$_18[$o_$96,$inv]) && ($Heap_$_17[$o_$96,$localinv] == $Heap_$_18[$o_$96,$localinv])) ));
	assume (((forall  $o_$97 : ref :: {$Heap_$_18[$o_$97,$allocated]} ( $Heap_$_17[$o_$97,$allocated] ==> $Heap_$_18[$o_$97,$allocated] ))) && ((forall  $ot_$15 : ref :: {$Heap_$_18[$ot_$15,$ownerFrame]} {$Heap_$_18[$ot_$15,$ownerRef]} ( ($Heap_$_17[$ot_$15,$allocated] && (!($Heap_$_17[$ot_$15,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_18[$ot_$15,$ownerRef] == $Heap_$_17[$ot_$15,$ownerRef]) && ($Heap_$_18[$ot_$15,$ownerFrame] == $Heap_$_17[$ot_$15,$ownerFrame])) )))) && ($Heap_$_17[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_18[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(this == null);
	assume stack0o_$_1 == $Heap_$_18[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_1 == null);
	assume $Utter($Heap_$_18[stack0o_$_1,$ownerRef]);
	assert  (forall<alpha> $o_$98 : ref, $f_$30 : Field (alpha)  :: {$Heap_$_18[$o_$98,$f_$30]} ( ((((((!($o_$98 == null)) && IncludeInMainFrameCondition($f_$30)) && $Heap[$o_$98,$allocated]) && ((($Heap[$o_$98,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$98,$ownerRef],$inv] <: $Heap[$o_$98,$ownerFrame]))) || ($Heap[$Heap[$o_$98,$ownerRef],$localinv] == $BaseClass($Heap[$o_$98,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$30) && $Heap_$_18[$o_$98,$allocated]) && ((($Heap_$_18[$o_$98,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_18[$Heap_$_18[$o_$98,$ownerRef],$inv] <: $Heap_$_18[$o_$98,$ownerFrame]))) || ($Heap_$_18[$Heap_$_18[$o_$98,$ownerRef],$localinv] == $BaseClass($Heap_$_18[$o_$98,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$9,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$9,$allocated];
	assert  0 <= 1;
	assert  1 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_18,stack0o_$_1);
	assert  (forall  $pc_$16 : ref :: {$typeof($pc_$16)} {$Heap_$_18[$pc_$16,$localinv]} {$Heap_$_18[$pc_$16,$inv]} {$Heap_$_18[$pc_$16,$ownerFrame]} {$Heap_$_18[$pc_$16,$ownerRef]} ( ((((!($pc_$16 == null)) && $Heap_$_18[$pc_$16,$allocated]) && ($Heap_$_18[$pc_$16,$ownerRef] == $Heap_$_18[stack0o_$_1,$ownerRef])) && ($Heap_$_18[$pc_$16,$ownerFrame] == $Heap_$_18[stack0o_$_1,$ownerFrame])) ==> (($Heap_$_18[$pc_$16,$inv] == $typeof($pc_$16)) && ($Heap_$_18[$pc_$16,$localinv] == $typeof($pc_$16))) ));
	assume IsHeap($Heap_$_19);
	assume $IsNotNull(call5formal_$_$result_$_0_$9,SExpressionSimplifier.Sx) && $Heap_$_19[call5formal_$_$result_$_0_$9,$allocated];
	assume $Heap_$_18[call5formal_$_$result_$_0_$9,$allocated];
	assume (((!($Heap_$_19[stack0o_$_1,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$inv] <: $Heap_$_19[stack0o_$_1,$ownerFrame])) && (!($Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$localinv] == $BaseClass($Heap_$_19[stack0o_$_1,$ownerFrame])))) ==> (((!(((!($Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_19[$Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerRef],$inv] <: $Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerFrame])) && (!($Heap_$_19[$Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_19[stack0o_$_1,$FirstConsistentOwner] == $Heap_$_19[stack0o_$_1,$ownerRef])) && ((((!($Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_19[$Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerRef],$inv] <: $Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerFrame])) && (!($Heap_$_19[$Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$ownerFrame])))) ==> ($Heap_$_19[stack0o_$_1,$FirstConsistentOwner] == $Heap_$_19[$Heap_$_19[stack0o_$_1,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_1) == stack0o_$_1;
	assume IsFrozen(call5formal_$_$result_$_0_$9,$Heap_$_19);
	assume (forall  $o_$99 : ref :: {$Heap_$_19[$o_$99,$localinv]} {$Heap_$_19[$o_$99,$inv]} ( (((!($o_$99 == null)) && (!$Heap_$_18[$o_$99,$allocated])) && $Heap_$_19[$o_$99,$allocated]) ==> (($Heap_$_19[$o_$99,$inv] == $typeof($o_$99)) && ($Heap_$_19[$o_$99,$localinv] == $typeof($o_$99))) ));
	assume (forall  $o_$100 : ref :: {$Heap_$_19[$o_$100,$FirstConsistentOwner]} ( ($Heap_$_18[$Heap_$_18[$o_$100,$FirstConsistentOwner],$exposeVersion] == $Heap_$_19[$Heap_$_18[$o_$100,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_18[$o_$100,$FirstConsistentOwner] == $Heap_$_19[$o_$100,$FirstConsistentOwner]) ));
	assume $Heap_$_19 == $Heap_$_18;
	assume false || (call5formal_$_$result_$_0_$9 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_19,stack0o_$_1,1));
	assume (forall<alpha> $o_$101 : ref, $f_$31 : Field (alpha)  :: {$Heap_$_19[$o_$101,$f_$31]} ( ((((((!($o_$101 == null)) && IncludeInMainFrameCondition($f_$31)) && $Heap_$_18[$o_$101,$allocated]) && ((($Heap_$_18[$o_$101,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_18[$Heap_$_18[$o_$101,$ownerRef],$inv] <: $Heap_$_18[$o_$101,$ownerFrame]))) || ($Heap_$_18[$Heap_$_18[$o_$101,$ownerRef],$localinv] == $BaseClass($Heap_$_18[$o_$101,$ownerFrame])))) && true) && true) ==> ($Heap_$_18[$o_$101,$f_$31] == $Heap_$_19[$o_$101,$f_$31]) ));
	assume $HeapSucc($Heap_$_18,$Heap_$_19);
	assume (forall  $o_$102 : ref :: {$Heap_$_19[$o_$102,$localinv]} {$Heap_$_19[$o_$102,$inv]} ( $Heap_$_18[$o_$102,$allocated] ==> (($Heap_$_18[$o_$102,$inv] == $Heap_$_19[$o_$102,$inv]) && ($Heap_$_18[$o_$102,$localinv] == $Heap_$_19[$o_$102,$localinv])) ));
	assume (((forall  $o_$103 : ref :: {$Heap_$_19[$o_$103,$allocated]} ( $Heap_$_18[$o_$103,$allocated] ==> $Heap_$_19[$o_$103,$allocated] ))) && ((forall  $ot_$16 : ref :: {$Heap_$_19[$ot_$16,$ownerFrame]} {$Heap_$_19[$ot_$16,$ownerRef]} ( ($Heap_$_18[$ot_$16,$allocated] && (!($Heap_$_18[$ot_$16,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_19[$ot_$16,$ownerRef] == $Heap_$_18[$ot_$16,$ownerRef]) && ($Heap_$_19[$ot_$16,$ownerFrame] == $Heap_$_18[$ot_$16,$ownerFrame])) )))) && ($Heap_$_18[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_19[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call5formal_$_$result_$_0_$9 == null);
	assume $Utter($Heap_$_19[call5formal_$_$result_$_0_$9,$ownerRef]);
	assert  (forall<alpha> $o_$104 : ref, $f_$32 : Field (alpha)  :: {$Heap_$_19[$o_$104,$f_$32]} ( ((((((!($o_$104 == null)) && IncludeInMainFrameCondition($f_$32)) && $Heap[$o_$104,$allocated]) && ((($Heap[$o_$104,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$104,$ownerRef],$inv] <: $Heap[$o_$104,$ownerFrame]))) || ($Heap[$Heap[$o_$104,$ownerRef],$localinv] == $BaseClass($Heap[$o_$104,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$32) && $Heap_$_19[$o_$104,$allocated]) && ((($Heap_$_19[$o_$104,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_19[$Heap_$_19[$o_$104,$ownerRef],$inv] <: $Heap_$_19[$o_$104,$ownerFrame]))) || ($Heap_$_19[$Heap_$_19[$o_$104,$ownerRef],$localinv] == $BaseClass($Heap_$_19[$o_$104,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call3formal_$_$result_$7,SExpressionSimplifier.Sx) && $Heap[call3formal_$_$result_$7,$allocated];
	assert  IsFrozen(call5formal_$_$result_$_0_$9,$Heap_$_19);
	assume IsHeap($Heap_$_20);
	assume $IsNotNull(call3formal_$_$result_$_0_$9,SExpressionSimplifier.Sx) && $Heap_$_20[call3formal_$_$result_$_0_$9,$allocated];
	assume IsFrozen(call3formal_$_$result_$_0_$9,$Heap_$_20);
	assume (forall  $o_$105 : ref :: {$Heap_$_20[$o_$105,$localinv]} {$Heap_$_20[$o_$105,$inv]} ( (((!($o_$105 == null)) && (!$Heap_$_19[$o_$105,$allocated])) && $Heap_$_20[$o_$105,$allocated]) ==> (($Heap_$_20[$o_$105,$inv] == $typeof($o_$105)) && ($Heap_$_20[$o_$105,$localinv] == $typeof($o_$105))) ));
	assume (forall  $o_$106 : ref :: {$Heap_$_20[$o_$106,$FirstConsistentOwner]} ( ($Heap_$_19[$Heap_$_19[$o_$106,$FirstConsistentOwner],$exposeVersion] == $Heap_$_20[$Heap_$_19[$o_$106,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_19[$o_$106,$FirstConsistentOwner] == $Heap_$_20[$o_$106,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$107 : ref, $f_$33 : Field (alpha)  :: {$Heap_$_20[$o_$107,$f_$33]} ( ((((((!($o_$107 == null)) && IncludeInMainFrameCondition($f_$33)) && $Heap_$_19[$o_$107,$allocated]) && ((($Heap_$_19[$o_$107,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_19[$Heap_$_19[$o_$107,$ownerRef],$inv] <: $Heap_$_19[$o_$107,$ownerFrame]))) || ($Heap_$_19[$Heap_$_19[$o_$107,$ownerRef],$localinv] == $BaseClass($Heap_$_19[$o_$107,$ownerFrame])))) && true) && true) ==> ($Heap_$_19[$o_$107,$f_$33] == $Heap_$_20[$o_$107,$f_$33]) ));
	assume $HeapSucc($Heap_$_19,$Heap_$_20);
	assume (forall  $o_$108 : ref :: {$Heap_$_20[$o_$108,$localinv]} {$Heap_$_20[$o_$108,$inv]} ( $Heap_$_19[$o_$108,$allocated] ==> (($Heap_$_19[$o_$108,$inv] == $Heap_$_20[$o_$108,$inv]) && ($Heap_$_19[$o_$108,$localinv] == $Heap_$_20[$o_$108,$localinv])) ));
	assume (((forall  $o_$109 : ref :: {$Heap_$_20[$o_$109,$allocated]} ( $Heap_$_19[$o_$109,$allocated] ==> $Heap_$_20[$o_$109,$allocated] ))) && ((forall  $ot_$17 : ref :: {$Heap_$_20[$ot_$17,$ownerFrame]} {$Heap_$_20[$ot_$17,$ownerRef]} ( ($Heap_$_19[$ot_$17,$allocated] && (!($Heap_$_19[$ot_$17,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_20[$ot_$17,$ownerRef] == $Heap_$_19[$ot_$17,$ownerRef]) && ($Heap_$_20[$ot_$17,$ownerFrame] == $Heap_$_19[$ot_$17,$ownerFrame])) )))) && ($Heap_$_19[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_20[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call3formal_$_$result_$_0_$8 == null);
	assume $Utter($Heap_$_20[call3formal_$_$result_$_0_$8,$ownerRef]);
	assert  (forall<alpha> $o_$110 : ref, $f_$34 : Field (alpha)  :: {$Heap_$_20[$o_$110,$f_$34]} ( ((((((!($o_$110 == null)) && IncludeInMainFrameCondition($f_$34)) && $Heap[$o_$110,$allocated]) && ((($Heap[$o_$110,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$110,$ownerRef],$inv] <: $Heap[$o_$110,$ownerFrame]))) || ($Heap[$Heap[$o_$110,$ownerRef],$localinv] == $BaseClass($Heap[$o_$110,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$34) && $Heap_$_20[$o_$110,$allocated]) && ((($Heap_$_20[$o_$110,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_20[$Heap_$_20[$o_$110,$ownerRef],$inv] <: $Heap_$_20[$o_$110,$ownerFrame]))) || ($Heap_$_20[$Heap_$_20[$o_$110,$ownerRef],$localinv] == $BaseClass($Heap_$_20[$o_$110,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call3formal_$_$result_$_0_$8,$Heap_$_20);
	assume IsHeap($Heap_$_21);
	assume true;
	assume $AsPureObject(call3formal_$_$result_$_0_$8) == call3formal_$_$result_$_0_$8;
	assume (forall  $o_$111 : ref :: {$Heap_$_21[$o_$111,$localinv]} {$Heap_$_21[$o_$111,$inv]} ( (((!($o_$111 == null)) && (!$Heap_$_20[$o_$111,$allocated])) && $Heap_$_21[$o_$111,$allocated]) ==> (($Heap_$_21[$o_$111,$inv] == $typeof($o_$111)) && ($Heap_$_21[$o_$111,$localinv] == $typeof($o_$111))) ));
	assume (forall  $o_$112 : ref :: {$Heap_$_21[$o_$112,$FirstConsistentOwner]} ( ($Heap_$_20[$Heap_$_20[$o_$112,$FirstConsistentOwner],$exposeVersion] == $Heap_$_21[$Heap_$_20[$o_$112,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_20[$o_$112,$FirstConsistentOwner] == $Heap_$_21[$o_$112,$FirstConsistentOwner]) ));
	assume $Heap_$_21 == $Heap_$_20;
	assume call3formal_$_$result_$_0_$10 <==> #SExpressionSimplifier.Sx.get_IsTrue($Heap_$_21,call3formal_$_$result_$_0_$8);
	assume (forall<alpha> $o_$113 : ref, $f_$35 : Field (alpha)  :: {$Heap_$_21[$o_$113,$f_$35]} ( ((((((!($o_$113 == null)) && IncludeInMainFrameCondition($f_$35)) && $Heap_$_20[$o_$113,$allocated]) && ((($Heap_$_20[$o_$113,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_20[$Heap_$_20[$o_$113,$ownerRef],$inv] <: $Heap_$_20[$o_$113,$ownerFrame]))) || ($Heap_$_20[$Heap_$_20[$o_$113,$ownerRef],$localinv] == $BaseClass($Heap_$_20[$o_$113,$ownerFrame])))) && true) && true) ==> ($Heap_$_20[$o_$113,$f_$35] == $Heap_$_21[$o_$113,$f_$35]) ));
	assume $HeapSucc($Heap_$_20,$Heap_$_21);
	assume (forall  $o_$114 : ref :: {$Heap_$_21[$o_$114,$localinv]} {$Heap_$_21[$o_$114,$inv]} ( $Heap_$_20[$o_$114,$allocated] ==> (($Heap_$_20[$o_$114,$inv] == $Heap_$_21[$o_$114,$inv]) && ($Heap_$_20[$o_$114,$localinv] == $Heap_$_21[$o_$114,$localinv])) ));
	assume (((forall  $o_$115 : ref :: {$Heap_$_21[$o_$115,$allocated]} ( $Heap_$_20[$o_$115,$allocated] ==> $Heap_$_21[$o_$115,$allocated] ))) && ((forall  $ot_$18 : ref :: {$Heap_$_21[$ot_$18,$ownerFrame]} {$Heap_$_21[$ot_$18,$ownerRef]} ( ($Heap_$_20[$ot_$18,$allocated] && (!($Heap_$_20[$ot_$18,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_21[$ot_$18,$ownerRef] == $Heap_$_20[$ot_$18,$ownerRef]) && ($Heap_$_21[$ot_$18,$ownerFrame] == $Heap_$_20[$ot_$18,$ownerFrame])) )))) && ($Heap_$_20[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_21[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$7) { goto true13634to12801; } else { goto false13634to12886; }
false13702to13158:
	assume !(call3formal_$_$result_$_0 == $stringLiteral3);
	if ($_$_condition_$8) { goto true13158to13362; } else { goto false13158to14025; }
block13124:
	assume $Heap_$_79 == $Heap_$_78;
	assume return.value_$_0 == call4formal_$_consequent$out_$_0;
	goto block12750;
true12954to13124:
	assume call3formal_$_$result_$_0_$15;
	assume $Heap_$_78 == $Heap_$_74;
	goto block13124;
false12954to13464:
	assume !call3formal_$_$result_$_0_$15;
	assert  !(call4formal_$_$result_$_0_$11 == null);
	assume $Utter($Heap_$_74[call4formal_$_$result_$_0_$11,$ownerRef]);
	assert  (forall<alpha> $o_$116 : ref, $f_$36 : Field (alpha)  :: {$Heap_$_74[$o_$116,$f_$36]} ( ((((((!($o_$116 == null)) && IncludeInMainFrameCondition($f_$36)) && $Heap[$o_$116,$allocated]) && ((($Heap[$o_$116,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$116,$ownerRef],$inv] <: $Heap[$o_$116,$ownerFrame]))) || ($Heap[$Heap[$o_$116,$ownerRef],$localinv] == $BaseClass($Heap[$o_$116,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$36) && $Heap_$_74[$o_$116,$allocated]) && ((($Heap_$_74[$o_$116,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_74[$Heap_$_74[$o_$116,$ownerRef],$inv] <: $Heap_$_74[$o_$116,$ownerFrame]))) || ($Heap_$_74[$Heap_$_74[$o_$116,$ownerRef],$localinv] == $BaseClass($Heap_$_74[$o_$116,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call4formal_$_$result_$_0_$11,$Heap_$_74);
	assume IsHeap($Heap_$_75);
	assume true;
	assume $AsPureObject(call4formal_$_$result_$_0_$11) == call4formal_$_$result_$_0_$11;
	assume (forall  $o_$117 : ref :: {$Heap_$_75[$o_$117,$localinv]} {$Heap_$_75[$o_$117,$inv]} ( (((!($o_$117 == null)) && (!$Heap_$_74[$o_$117,$allocated])) && $Heap_$_75[$o_$117,$allocated]) ==> (($Heap_$_75[$o_$117,$inv] == $typeof($o_$117)) && ($Heap_$_75[$o_$117,$localinv] == $typeof($o_$117))) ));
	assume (forall  $o_$118 : ref :: {$Heap_$_75[$o_$118,$FirstConsistentOwner]} ( ($Heap_$_74[$Heap_$_74[$o_$118,$FirstConsistentOwner],$exposeVersion] == $Heap_$_75[$Heap_$_74[$o_$118,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_74[$o_$118,$FirstConsistentOwner] == $Heap_$_75[$o_$118,$FirstConsistentOwner]) ));
	assume $Heap_$_75 == $Heap_$_74;
	assume call3formal_$_$result_$_0_$16 <==> #SExpressionSimplifier.Sx.get_IsFalse($Heap_$_75,call4formal_$_$result_$_0_$11);
	assume (forall<alpha> $o_$119 : ref, $f_$37 : Field (alpha)  :: {$Heap_$_75[$o_$119,$f_$37]} ( ((((((!($o_$119 == null)) && IncludeInMainFrameCondition($f_$37)) && $Heap_$_74[$o_$119,$allocated]) && ((($Heap_$_74[$o_$119,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_74[$Heap_$_74[$o_$119,$ownerRef],$inv] <: $Heap_$_74[$o_$119,$ownerFrame]))) || ($Heap_$_74[$Heap_$_74[$o_$119,$ownerRef],$localinv] == $BaseClass($Heap_$_74[$o_$119,$ownerFrame])))) && true) && true) ==> ($Heap_$_74[$o_$119,$f_$37] == $Heap_$_75[$o_$119,$f_$37]) ));
	assume $HeapSucc($Heap_$_74,$Heap_$_75);
	assume (forall  $o_$120 : ref :: {$Heap_$_75[$o_$120,$localinv]} {$Heap_$_75[$o_$120,$inv]} ( $Heap_$_74[$o_$120,$allocated] ==> (($Heap_$_74[$o_$120,$inv] == $Heap_$_75[$o_$120,$inv]) && ($Heap_$_74[$o_$120,$localinv] == $Heap_$_75[$o_$120,$localinv])) ));
	assume (((forall  $o_$121 : ref :: {$Heap_$_75[$o_$121,$allocated]} ( $Heap_$_74[$o_$121,$allocated] ==> $Heap_$_75[$o_$121,$allocated] ))) && ((forall  $ot_$19 : ref :: {$Heap_$_75[$ot_$19,$ownerFrame]} {$Heap_$_75[$ot_$19,$ownerRef]} ( ($Heap_$_74[$ot_$19,$allocated] && (!($Heap_$_74[$ot_$19,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_75[$ot_$19,$ownerRef] == $Heap_$_74[$ot_$19,$ownerRef]) && ($Heap_$_75[$ot_$19,$ownerFrame] == $Heap_$_74[$ot_$19,$ownerFrame])) )))) && ($Heap_$_74[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_75[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$9) { goto true12512to13804; } else { goto false12512to13821; }
true13634to12801:
	assume !call3formal_$_$result_$_0_$10;
	assert  !(call3formal_$_$result_$_0_$9 == null);
	assume $Utter($Heap_$_21[call3formal_$_$result_$_0_$9,$ownerRef]);
	assert  (forall<alpha> $o_$122 : ref, $f_$38 : Field (alpha)  :: {$Heap_$_21[$o_$122,$f_$38]} ( ((((((!($o_$122 == null)) && IncludeInMainFrameCondition($f_$38)) && $Heap[$o_$122,$allocated]) && ((($Heap[$o_$122,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$122,$ownerRef],$inv] <: $Heap[$o_$122,$ownerFrame]))) || ($Heap[$Heap[$o_$122,$ownerRef],$localinv] == $BaseClass($Heap[$o_$122,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$38) && $Heap_$_21[$o_$122,$allocated]) && ((($Heap_$_21[$o_$122,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_21[$Heap_$_21[$o_$122,$ownerRef],$inv] <: $Heap_$_21[$o_$122,$ownerFrame]))) || ($Heap_$_21[$Heap_$_21[$o_$122,$ownerRef],$localinv] == $BaseClass($Heap_$_21[$o_$122,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call3formal_$_$result_$_0_$9,$Heap_$_21);
	assume IsHeap($Heap_$_68);
	assume true;
	assume $AsPureObject(call3formal_$_$result_$_0_$9) == call3formal_$_$result_$_0_$9;
	assume (forall  $o_$123 : ref :: {$Heap_$_68[$o_$123,$localinv]} {$Heap_$_68[$o_$123,$inv]} ( (((!($o_$123 == null)) && (!$Heap_$_21[$o_$123,$allocated])) && $Heap_$_68[$o_$123,$allocated]) ==> (($Heap_$_68[$o_$123,$inv] == $typeof($o_$123)) && ($Heap_$_68[$o_$123,$localinv] == $typeof($o_$123))) ));
	assume (forall  $o_$124 : ref :: {$Heap_$_68[$o_$124,$FirstConsistentOwner]} ( ($Heap_$_21[$Heap_$_21[$o_$124,$FirstConsistentOwner],$exposeVersion] == $Heap_$_68[$Heap_$_21[$o_$124,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_21[$o_$124,$FirstConsistentOwner] == $Heap_$_68[$o_$124,$FirstConsistentOwner]) ));
	assume $Heap_$_68 == $Heap_$_21;
	assume call3formal_$_$result_$_0_$11 <==> #SExpressionSimplifier.Sx.get_IsTrue($Heap_$_68,call3formal_$_$result_$_0_$9);
	assume (forall<alpha> $o_$125 : ref, $f_$39 : Field (alpha)  :: {$Heap_$_68[$o_$125,$f_$39]} ( ((((((!($o_$125 == null)) && IncludeInMainFrameCondition($f_$39)) && $Heap_$_21[$o_$125,$allocated]) && ((($Heap_$_21[$o_$125,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_21[$Heap_$_21[$o_$125,$ownerRef],$inv] <: $Heap_$_21[$o_$125,$ownerFrame]))) || ($Heap_$_21[$Heap_$_21[$o_$125,$ownerRef],$localinv] == $BaseClass($Heap_$_21[$o_$125,$ownerFrame])))) && true) && true) ==> ($Heap_$_21[$o_$125,$f_$39] == $Heap_$_68[$o_$125,$f_$39]) ));
	assume $HeapSucc($Heap_$_21,$Heap_$_68);
	assume (forall  $o_$126 : ref :: {$Heap_$_68[$o_$126,$localinv]} {$Heap_$_68[$o_$126,$inv]} ( $Heap_$_21[$o_$126,$allocated] ==> (($Heap_$_21[$o_$126,$inv] == $Heap_$_68[$o_$126,$inv]) && ($Heap_$_21[$o_$126,$localinv] == $Heap_$_68[$o_$126,$localinv])) ));
	assume (((forall  $o_$127 : ref :: {$Heap_$_68[$o_$127,$allocated]} ( $Heap_$_21[$o_$127,$allocated] ==> $Heap_$_68[$o_$127,$allocated] ))) && ((forall  $ot_$20 : ref :: {$Heap_$_68[$ot_$20,$ownerFrame]} {$Heap_$_68[$ot_$20,$ownerRef]} ( ($Heap_$_21[$ot_$20,$allocated] && (!($Heap_$_21[$ot_$20,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_68[$ot_$20,$ownerRef] == $Heap_$_21[$ot_$20,$ownerRef]) && ($Heap_$_68[$ot_$20,$ownerFrame] == $Heap_$_21[$ot_$20,$ownerFrame])) )))) && ($Heap_$_21[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_68[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$10) { goto true12801to13226; } else { goto false12801to13294; }
false13634to12886:
	assume call3formal_$_$result_$_0_$10;
	assume $Heap_$_79 == $Heap_$_21;
	assume return.value_$_0 == call3formal_$_$result_$_0_$9;
	goto block12750;
true13158to13362:
	assume call3formal_$_$result_$_0 == $stringLiteral5;
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_0,$Heap_$_0[this,SExpressionSimplifier.Nary.Args]) == 1;
	assert  !(this == null);
	assume stack0o_$_2 == $Heap_$_0[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_2 == null);
	assume $Utter($Heap_$_0[stack0o_$_2,$ownerRef]);
	assert  (forall<alpha> $o_$128 : ref, $f_$40 : Field (alpha)  :: {$Heap_$_0[$o_$128,$f_$40]} ( ((((((!($o_$128 == null)) && IncludeInMainFrameCondition($f_$40)) && $Heap[$o_$128,$allocated]) && ((($Heap[$o_$128,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$128,$ownerRef],$inv] <: $Heap[$o_$128,$ownerFrame]))) || ($Heap[$Heap[$o_$128,$ownerRef],$localinv] == $BaseClass($Heap[$o_$128,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$40) && $Heap_$_0[$o_$128,$allocated]) && ((($Heap_$_0[$o_$128,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$128,$ownerRef],$inv] <: $Heap_$_0[$o_$128,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$128,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$128,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$2,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$2,$allocated];
	assert  0 <= 0;
	assert  0 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_0,stack0o_$_2);
	assert  (forall  $pc_$17 : ref :: {$typeof($pc_$17)} {$Heap_$_0[$pc_$17,$localinv]} {$Heap_$_0[$pc_$17,$inv]} {$Heap_$_0[$pc_$17,$ownerFrame]} {$Heap_$_0[$pc_$17,$ownerRef]} ( ((((!($pc_$17 == null)) && $Heap_$_0[$pc_$17,$allocated]) && ($Heap_$_0[$pc_$17,$ownerRef] == $Heap_$_0[stack0o_$_2,$ownerRef])) && ($Heap_$_0[$pc_$17,$ownerFrame] == $Heap_$_0[stack0o_$_2,$ownerFrame])) ==> (($Heap_$_0[$pc_$17,$inv] == $typeof($pc_$17)) && ($Heap_$_0[$pc_$17,$localinv] == $typeof($pc_$17))) ));
	assume IsHeap($Heap_$_22);
	assume $IsNotNull(call5formal_$_$result_$_0_$2,SExpressionSimplifier.Sx) && $Heap_$_22[call5formal_$_$result_$_0_$2,$allocated];
	assume $Heap_$_0[call5formal_$_$result_$_0_$2,$allocated];
	assume (((!($Heap_$_22[stack0o_$_2,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$inv] <: $Heap_$_22[stack0o_$_2,$ownerFrame])) && (!($Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$localinv] == $BaseClass($Heap_$_22[stack0o_$_2,$ownerFrame])))) ==> (((!(((!($Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_22[$Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerRef],$inv] <: $Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerFrame])) && (!($Heap_$_22[$Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_22[stack0o_$_2,$FirstConsistentOwner] == $Heap_$_22[stack0o_$_2,$ownerRef])) && ((((!($Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_22[$Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerRef],$inv] <: $Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerFrame])) && (!($Heap_$_22[$Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$ownerFrame])))) ==> ($Heap_$_22[stack0o_$_2,$FirstConsistentOwner] == $Heap_$_22[$Heap_$_22[stack0o_$_2,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_2) == stack0o_$_2;
	assume IsFrozen(call5formal_$_$result_$_0_$2,$Heap_$_22);
	assume (forall  $o_$129 : ref :: {$Heap_$_22[$o_$129,$localinv]} {$Heap_$_22[$o_$129,$inv]} ( (((!($o_$129 == null)) && (!$Heap_$_0[$o_$129,$allocated])) && $Heap_$_22[$o_$129,$allocated]) ==> (($Heap_$_22[$o_$129,$inv] == $typeof($o_$129)) && ($Heap_$_22[$o_$129,$localinv] == $typeof($o_$129))) ));
	assume (forall  $o_$130 : ref :: {$Heap_$_22[$o_$130,$FirstConsistentOwner]} ( ($Heap_$_0[$Heap_$_0[$o_$130,$FirstConsistentOwner],$exposeVersion] == $Heap_$_22[$Heap_$_0[$o_$130,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_0[$o_$130,$FirstConsistentOwner] == $Heap_$_22[$o_$130,$FirstConsistentOwner]) ));
	assume $Heap_$_22 == $Heap_$_0;
	assume false || (call5formal_$_$result_$_0_$2 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_22,stack0o_$_2,0));
	assume (forall<alpha> $o_$131 : ref, $f_$41 : Field (alpha)  :: {$Heap_$_22[$o_$131,$f_$41]} ( ((((((!($o_$131 == null)) && IncludeInMainFrameCondition($f_$41)) && $Heap_$_0[$o_$131,$allocated]) && ((($Heap_$_0[$o_$131,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$131,$ownerRef],$inv] <: $Heap_$_0[$o_$131,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$131,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$131,$ownerFrame])))) && true) && true) ==> ($Heap_$_0[$o_$131,$f_$41] == $Heap_$_22[$o_$131,$f_$41]) ));
	assume $HeapSucc($Heap_$_0,$Heap_$_22);
	assume (forall  $o_$132 : ref :: {$Heap_$_22[$o_$132,$localinv]} {$Heap_$_22[$o_$132,$inv]} ( $Heap_$_0[$o_$132,$allocated] ==> (($Heap_$_0[$o_$132,$inv] == $Heap_$_22[$o_$132,$inv]) && ($Heap_$_0[$o_$132,$localinv] == $Heap_$_22[$o_$132,$localinv])) ));
	assume (((forall  $o_$133 : ref :: {$Heap_$_22[$o_$133,$allocated]} ( $Heap_$_0[$o_$133,$allocated] ==> $Heap_$_22[$o_$133,$allocated] ))) && ((forall  $ot_$21 : ref :: {$Heap_$_22[$ot_$21,$ownerFrame]} {$Heap_$_22[$ot_$21,$ownerRef]} ( ($Heap_$_0[$ot_$21,$allocated] && (!($Heap_$_0[$ot_$21,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_22[$ot_$21,$ownerRef] == $Heap_$_0[$ot_$21,$ownerRef]) && ($Heap_$_22[$ot_$21,$ownerFrame] == $Heap_$_0[$ot_$21,$ownerFrame])) )))) && ($Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_22[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume stack0o_$_3 == $As(call5formal_$_$result_$_0_$2,SExpressionSimplifier.Nary);
	if ($_$_condition_$11) { goto true13651to13668; } else { goto false13651to13872; }
false13158to14025:
	assume !(call3formal_$_$result_$_0 == $stringLiteral5);
	if ($_$_condition_$12) { goto true14025to12478; } else { goto false14025to13396; }
true12512to13804:
	assume !call3formal_$_$result_$_0_$16;
	assert  !(this == null);
	assume $Utter($Heap_$_75[this,$ownerRef]);
	assume $Utter($Heap_$_75[call4formal_$_$result_$_0_$11,$ownerRef]);
	assume $Utter($Heap_$_75[call4formal_$_consequent$out_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$134 : ref, $f_$42 : Field (alpha)  :: {$Heap_$_75[$o_$134,$f_$42]} ( ((((((!($o_$134 == null)) && IncludeInMainFrameCondition($f_$42)) && $Heap[$o_$134,$allocated]) && ((($Heap[$o_$134,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$134,$ownerRef],$inv] <: $Heap[$o_$134,$ownerFrame]))) || ($Heap[$Heap[$o_$134,$ownerRef],$localinv] == $BaseClass($Heap[$o_$134,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$42) && $Heap_$_75[$o_$134,$allocated]) && ((($Heap_$_75[$o_$134,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_75[$Heap_$_75[$o_$134,$ownerRef],$inv] <: $Heap_$_75[$o_$134,$ownerFrame]))) || ($Heap_$_75[$Heap_$_75[$o_$134,$ownerRef],$localinv] == $BaseClass($Heap_$_75[$o_$134,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$11,SExpressionSimplifier.Nary) && $Heap[call5formal_$_$result_$11,$allocated];
	assert  IsFrozen(this,$Heap_$_75);
	assert  IsFrozen(call4formal_$_$result_$_0_$11,$Heap_$_75);
	assert  IsFrozen(call4formal_$_consequent$out_$_0,$Heap_$_75);
	assume IsHeap($Heap_$_76);
	assume $IsNotNull(call5formal_$_$result_$_0_$11,SExpressionSimplifier.Nary) && $Heap_$_76[call5formal_$_$result_$_0_$11,$allocated];
	assume IsFrozen(call5formal_$_$result_$_0_$11,$Heap_$_76);
	assume (forall  $o_$135 : ref :: {$Heap_$_76[$o_$135,$localinv]} {$Heap_$_76[$o_$135,$inv]} ( (((!($o_$135 == null)) && (!$Heap_$_75[$o_$135,$allocated])) && $Heap_$_76[$o_$135,$allocated]) ==> (($Heap_$_76[$o_$135,$inv] == $typeof($o_$135)) && ($Heap_$_76[$o_$135,$localinv] == $typeof($o_$135))) ));
	assume (forall  $o_$136 : ref :: {$Heap_$_76[$o_$136,$FirstConsistentOwner]} ( ($Heap_$_75[$Heap_$_75[$o_$136,$FirstConsistentOwner],$exposeVersion] == $Heap_$_76[$Heap_$_75[$o_$136,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_75[$o_$136,$FirstConsistentOwner] == $Heap_$_76[$o_$136,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$137 : ref, $f_$43 : Field (alpha)  :: {$Heap_$_76[$o_$137,$f_$43]} ( ((((((!($o_$137 == null)) && IncludeInMainFrameCondition($f_$43)) && $Heap_$_75[$o_$137,$allocated]) && ((($Heap_$_75[$o_$137,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_75[$Heap_$_75[$o_$137,$ownerRef],$inv] <: $Heap_$_75[$o_$137,$ownerFrame]))) || ($Heap_$_75[$Heap_$_75[$o_$137,$ownerRef],$localinv] == $BaseClass($Heap_$_75[$o_$137,$ownerFrame])))) && true) && true) ==> ($Heap_$_75[$o_$137,$f_$43] == $Heap_$_76[$o_$137,$f_$43]) ));
	assume $HeapSucc($Heap_$_75,$Heap_$_76);
	assume (forall  $o_$138 : ref :: {$Heap_$_76[$o_$138,$localinv]} {$Heap_$_76[$o_$138,$inv]} ( $Heap_$_75[$o_$138,$allocated] ==> (($Heap_$_75[$o_$138,$inv] == $Heap_$_76[$o_$138,$inv]) && ($Heap_$_75[$o_$138,$localinv] == $Heap_$_76[$o_$138,$localinv])) ));
	assume (((forall  $o_$139 : ref :: {$Heap_$_76[$o_$139,$allocated]} ( $Heap_$_75[$o_$139,$allocated] ==> $Heap_$_76[$o_$139,$allocated] ))) && ((forall  $ot_$22 : ref :: {$Heap_$_76[$ot_$22,$ownerFrame]} {$Heap_$_76[$ot_$22,$ownerRef]} ( ($Heap_$_75[$ot_$22,$allocated] && (!($Heap_$_75[$ot_$22,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_76[$ot_$22,$ownerRef] == $Heap_$_75[$ot_$22,$ownerRef]) && ($Heap_$_76[$ot_$22,$ownerFrame] == $Heap_$_75[$ot_$22,$ownerFrame])) )))) && ($Heap_$_75[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_76[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_76;
	assume return.value_$_0 == call5formal_$_$result_$_0_$11;
	goto block12750;
false12512to13821:
	assume call3formal_$_$result_$_0_$16;
	assert  (forall<alpha> $o_$140 : ref, $f_$44 : Field (alpha)  :: {$Heap_$_75[$o_$140,$f_$44]} ( ((((((!($o_$140 == null)) && IncludeInMainFrameCondition($f_$44)) && $Heap[$o_$140,$allocated]) && ((($Heap[$o_$140,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$140,$ownerRef],$inv] <: $Heap[$o_$140,$ownerFrame]))) || ($Heap[$Heap[$o_$140,$ownerRef],$localinv] == $BaseClass($Heap[$o_$140,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$44) && $Heap_$_75[$o_$140,$allocated]) && ((($Heap_$_75[$o_$140,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_75[$Heap_$_75[$o_$140,$ownerRef],$inv] <: $Heap_$_75[$o_$140,$ownerFrame]))) || ($Heap_$_75[$Heap_$_75[$o_$140,$ownerRef],$localinv] == $BaseClass($Heap_$_75[$o_$140,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call2formal_$_$result_$3,SExpressionSimplifier.Sx) && $Heap[call2formal_$_$result_$3,$allocated];
	assume IsHeap($Heap_$_77);
	assume $IsNotNull(call2formal_$_$result_$_0_$3,SExpressionSimplifier.Sx) && $Heap_$_77[call2formal_$_$result_$_0_$3,$allocated];
	assume IsFrozen(call2formal_$_$result_$_0_$3,$Heap_$_77);
	assume (forall  $o_$141 : ref :: {$Heap_$_77[$o_$141,$localinv]} {$Heap_$_77[$o_$141,$inv]} ( (((!($o_$141 == null)) && (!$Heap_$_75[$o_$141,$allocated])) && $Heap_$_77[$o_$141,$allocated]) ==> (($Heap_$_77[$o_$141,$inv] == $typeof($o_$141)) && ($Heap_$_77[$o_$141,$localinv] == $typeof($o_$141))) ));
	assume (forall  $o_$142 : ref :: {$Heap_$_77[$o_$142,$FirstConsistentOwner]} ( ($Heap_$_75[$Heap_$_75[$o_$142,$FirstConsistentOwner],$exposeVersion] == $Heap_$_77[$Heap_$_75[$o_$142,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_75[$o_$142,$FirstConsistentOwner] == $Heap_$_77[$o_$142,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$143 : ref, $f_$45 : Field (alpha)  :: {$Heap_$_77[$o_$143,$f_$45]} ( ((((((!($o_$143 == null)) && IncludeInMainFrameCondition($f_$45)) && $Heap_$_75[$o_$143,$allocated]) && ((($Heap_$_75[$o_$143,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_75[$Heap_$_75[$o_$143,$ownerRef],$inv] <: $Heap_$_75[$o_$143,$ownerFrame]))) || ($Heap_$_75[$Heap_$_75[$o_$143,$ownerRef],$localinv] == $BaseClass($Heap_$_75[$o_$143,$ownerFrame])))) && true) && true) ==> ($Heap_$_75[$o_$143,$f_$45] == $Heap_$_77[$o_$143,$f_$45]) ));
	assume $HeapSucc($Heap_$_75,$Heap_$_77);
	assume (forall  $o_$144 : ref :: {$Heap_$_77[$o_$144,$localinv]} {$Heap_$_77[$o_$144,$inv]} ( $Heap_$_75[$o_$144,$allocated] ==> (($Heap_$_75[$o_$144,$inv] == $Heap_$_77[$o_$144,$inv]) && ($Heap_$_75[$o_$144,$localinv] == $Heap_$_77[$o_$144,$localinv])) ));
	assume (((forall  $o_$145 : ref :: {$Heap_$_77[$o_$145,$allocated]} ( $Heap_$_75[$o_$145,$allocated] ==> $Heap_$_77[$o_$145,$allocated] ))) && ((forall  $ot_$23 : ref :: {$Heap_$_77[$ot_$23,$ownerFrame]} {$Heap_$_77[$ot_$23,$ownerRef]} ( ($Heap_$_75[$ot_$23,$allocated] && (!($Heap_$_75[$ot_$23,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_77[$ot_$23,$ownerRef] == $Heap_$_75[$ot_$23,$ownerRef]) && ($Heap_$_77[$ot_$23,$ownerFrame] == $Heap_$_75[$ot_$23,$ownerFrame])) )))) && ($Heap_$_75[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_77[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_77;
	assume return.value_$_0 == call2formal_$_$result_$_0_$3;
	goto block12750;
true12801to13226:
	assume !call3formal_$_$result_$_0_$11;
	assert  !(call3formal_$_$result_$_0_$8 == null);
	assume $Utter($Heap_$_68[call3formal_$_$result_$_0_$8,$ownerRef]);
	assert  (forall<alpha> $o_$146 : ref, $f_$46 : Field (alpha)  :: {$Heap_$_68[$o_$146,$f_$46]} ( ((((((!($o_$146 == null)) && IncludeInMainFrameCondition($f_$46)) && $Heap[$o_$146,$allocated]) && ((($Heap[$o_$146,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$146,$ownerRef],$inv] <: $Heap[$o_$146,$ownerFrame]))) || ($Heap[$Heap[$o_$146,$ownerRef],$localinv] == $BaseClass($Heap[$o_$146,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$46) && $Heap_$_68[$o_$146,$allocated]) && ((($Heap_$_68[$o_$146,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_68[$Heap_$_68[$o_$146,$ownerRef],$inv] <: $Heap_$_68[$o_$146,$ownerFrame]))) || ($Heap_$_68[$Heap_$_68[$o_$146,$ownerRef],$localinv] == $BaseClass($Heap_$_68[$o_$146,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call3formal_$_$result_$_0_$8,$Heap_$_68);
	assume IsHeap($Heap_$_69);
	assume true;
	assume $AsPureObject(call3formal_$_$result_$_0_$8) == call3formal_$_$result_$_0_$8;
	assume (forall  $o_$147 : ref :: {$Heap_$_69[$o_$147,$localinv]} {$Heap_$_69[$o_$147,$inv]} ( (((!($o_$147 == null)) && (!$Heap_$_68[$o_$147,$allocated])) && $Heap_$_69[$o_$147,$allocated]) ==> (($Heap_$_69[$o_$147,$inv] == $typeof($o_$147)) && ($Heap_$_69[$o_$147,$localinv] == $typeof($o_$147))) ));
	assume (forall  $o_$148 : ref :: {$Heap_$_69[$o_$148,$FirstConsistentOwner]} ( ($Heap_$_68[$Heap_$_68[$o_$148,$FirstConsistentOwner],$exposeVersion] == $Heap_$_69[$Heap_$_68[$o_$148,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_68[$o_$148,$FirstConsistentOwner] == $Heap_$_69[$o_$148,$FirstConsistentOwner]) ));
	assume $Heap_$_69 == $Heap_$_68;
	assume call3formal_$_$result_$_0_$12 <==> #SExpressionSimplifier.Sx.get_IsFalse($Heap_$_69,call3formal_$_$result_$_0_$8);
	assume (forall<alpha> $o_$149 : ref, $f_$47 : Field (alpha)  :: {$Heap_$_69[$o_$149,$f_$47]} ( ((((((!($o_$149 == null)) && IncludeInMainFrameCondition($f_$47)) && $Heap_$_68[$o_$149,$allocated]) && ((($Heap_$_68[$o_$149,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_68[$Heap_$_68[$o_$149,$ownerRef],$inv] <: $Heap_$_68[$o_$149,$ownerFrame]))) || ($Heap_$_68[$Heap_$_68[$o_$149,$ownerRef],$localinv] == $BaseClass($Heap_$_68[$o_$149,$ownerFrame])))) && true) && true) ==> ($Heap_$_68[$o_$149,$f_$47] == $Heap_$_69[$o_$149,$f_$47]) ));
	assume $HeapSucc($Heap_$_68,$Heap_$_69);
	assume (forall  $o_$150 : ref :: {$Heap_$_69[$o_$150,$localinv]} {$Heap_$_69[$o_$150,$inv]} ( $Heap_$_68[$o_$150,$allocated] ==> (($Heap_$_68[$o_$150,$inv] == $Heap_$_69[$o_$150,$inv]) && ($Heap_$_68[$o_$150,$localinv] == $Heap_$_69[$o_$150,$localinv])) ));
	assume (((forall  $o_$151 : ref :: {$Heap_$_69[$o_$151,$allocated]} ( $Heap_$_68[$o_$151,$allocated] ==> $Heap_$_69[$o_$151,$allocated] ))) && ((forall  $ot_$24 : ref :: {$Heap_$_69[$ot_$24,$ownerFrame]} {$Heap_$_69[$ot_$24,$ownerRef]} ( ($Heap_$_68[$ot_$24,$allocated] && (!($Heap_$_68[$ot_$24,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_69[$ot_$24,$ownerRef] == $Heap_$_68[$ot_$24,$ownerRef]) && ($Heap_$_69[$ot_$24,$ownerFrame] == $Heap_$_68[$ot_$24,$ownerFrame])) )))) && ($Heap_$_68[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_69[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$13) { goto true13226to12733; } else { goto false13226to13260; }
false12801to13294:
	assume call3formal_$_$result_$_0_$11;
	assume $Heap_$_79 == $Heap_$_68;
	assume return.value_$_0 == call3formal_$_$result_$_0_$8;
	goto block12750;
true13651to13668:
	assume stack0o_$_3 == null;
	assume $Heap_$_50 == $Heap_$_22;
	goto block13668;
false13651to13872:
	assume !(stack0o_$_3 == null);
	assert  $Is(call5formal_$_$result_$_0_$2,SExpressionSimplifier.Nary);
	assert  !(call5formal_$_$result_$_0_$2 == null);
	assume stack0o_$_13 == $Heap_$_22[call5formal_$_$result_$_0_$2,SExpressionSimplifier.Nary.F];
	assert  !(this == null);
	assume stack1o_$_1 == $Heap_$_22[this,SExpressionSimplifier.Nary.F];
	assume $Utter($Heap_$_22[stack0o_$_13,$ownerRef]);
	assume $Utter($Heap_$_22[stack1o_$_1,$ownerRef]);
	assert  (forall<alpha> $o_$152 : ref, $f_$48 : Field (alpha)  :: {$Heap_$_22[$o_$152,$f_$48]} ( ((((((!($o_$152 == null)) && IncludeInMainFrameCondition($f_$48)) && $Heap[$o_$152,$allocated]) && ((($Heap[$o_$152,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$152,$ownerRef],$inv] <: $Heap[$o_$152,$ownerFrame]))) || ($Heap[$Heap[$o_$152,$ownerRef],$localinv] == $BaseClass($Heap[$o_$152,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$48) && $Heap_$_22[$o_$152,$allocated]) && ((($Heap_$_22[$o_$152,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_22[$Heap_$_22[$o_$152,$ownerRef],$inv] <: $Heap_$_22[$o_$152,$ownerFrame]))) || ($Heap_$_22[$Heap_$_22[$o_$152,$ownerRef],$localinv] == $BaseClass($Heap_$_22[$o_$152,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  (stack0o_$_13 == null) || IsFrozen(stack0o_$_13,$Heap_$_22);
	assert  (stack1o_$_1 == null) || IsFrozen(stack1o_$_1,$Heap_$_22);
	assume IsHeap($Heap_$_47);
	assume true;
	assume ((!(stack0o_$_13 == null)) && (stack0o_$_13 == stack1o_$_1)) ==> call4formal_$_$result_$_0_$7;
	assume $AsPureObject(stack0o_$_13) == stack0o_$_13;
	assume $AsPureObject(stack1o_$_1) == stack1o_$_1;
	assume (forall  $o_$153 : ref :: {$Heap_$_47[$o_$153,$localinv]} {$Heap_$_47[$o_$153,$inv]} ( (((!($o_$153 == null)) && (!$Heap_$_22[$o_$153,$allocated])) && $Heap_$_47[$o_$153,$allocated]) ==> (($Heap_$_47[$o_$153,$inv] == $typeof($o_$153)) && ($Heap_$_47[$o_$153,$localinv] == $typeof($o_$153))) ));
	assume (forall  $o_$154 : ref :: {$Heap_$_47[$o_$154,$FirstConsistentOwner]} ( ($Heap_$_22[$Heap_$_22[$o_$154,$FirstConsistentOwner],$exposeVersion] == $Heap_$_47[$Heap_$_22[$o_$154,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_22[$o_$154,$FirstConsistentOwner] == $Heap_$_47[$o_$154,$FirstConsistentOwner]) ));
	assume $Heap_$_47 == $Heap_$_22;
	assume call4formal_$_$result_$_0_$7 <==> #System.String.Equals$System.String$System.String($Heap_$_47,stack0o_$_13,stack1o_$_1);
	assume (forall<alpha> $o_$155 : ref, $f_$49 : Field (alpha)  :: {$Heap_$_47[$o_$155,$f_$49]} ( ((((((!($o_$155 == null)) && IncludeInMainFrameCondition($f_$49)) && $Heap_$_22[$o_$155,$allocated]) && ((($Heap_$_22[$o_$155,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_22[$Heap_$_22[$o_$155,$ownerRef],$inv] <: $Heap_$_22[$o_$155,$ownerFrame]))) || ($Heap_$_22[$Heap_$_22[$o_$155,$ownerRef],$localinv] == $BaseClass($Heap_$_22[$o_$155,$ownerFrame])))) && true) && true) ==> ($Heap_$_22[$o_$155,$f_$49] == $Heap_$_47[$o_$155,$f_$49]) ));
	assume $HeapSucc($Heap_$_22,$Heap_$_47);
	assume (forall  $o_$156 : ref :: {$Heap_$_47[$o_$156,$localinv]} {$Heap_$_47[$o_$156,$inv]} ( $Heap_$_22[$o_$156,$allocated] ==> (($Heap_$_22[$o_$156,$inv] == $Heap_$_47[$o_$156,$inv]) && ($Heap_$_22[$o_$156,$localinv] == $Heap_$_47[$o_$156,$localinv])) ));
	assume (((forall  $o_$157 : ref :: {$Heap_$_47[$o_$157,$allocated]} ( $Heap_$_22[$o_$157,$allocated] ==> $Heap_$_47[$o_$157,$allocated] ))) && ((forall  $ot_$25 : ref :: {$Heap_$_47[$ot_$25,$ownerFrame]} {$Heap_$_47[$ot_$25,$ownerRef]} ( ($Heap_$_22[$ot_$25,$allocated] && (!($Heap_$_22[$ot_$25,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_47[$ot_$25,$ownerRef] == $Heap_$_22[$ot_$25,$ownerRef]) && ($Heap_$_47[$ot_$25,$ownerFrame] == $Heap_$_22[$ot_$25,$ownerFrame])) )))) && ($Heap_$_22[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_47[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$14) { goto true13872to13668; } else { goto false13872to13532; }
true14025to12478:
	assume call3formal_$_$result_$_0 == $stringLiteral7;
	goto block12478;
false14025to13396:
	assume !(call3formal_$_$result_$_0 == $stringLiteral7);
	if ($_$_condition_$15) { goto true13396to12478; } else { goto false13396to13583; }
true13226to12733:
	assume !call3formal_$_$result_$_0_$12;
	assume $Heap_$_72 == $Heap_$_69;
	goto block12733;
false13226to13260:
	assume call3formal_$_$result_$_0_$12;
	assert  !(call3formal_$_$result_$_0_$9 == null);
	assume $Utter($Heap_$_69[call3formal_$_$result_$_0_$9,$ownerRef]);
	assert  (forall<alpha> $o_$158 : ref, $f_$50 : Field (alpha)  :: {$Heap_$_69[$o_$158,$f_$50]} ( ((((((!($o_$158 == null)) && IncludeInMainFrameCondition($f_$50)) && $Heap[$o_$158,$allocated]) && ((($Heap[$o_$158,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$158,$ownerRef],$inv] <: $Heap[$o_$158,$ownerFrame]))) || ($Heap[$Heap[$o_$158,$ownerRef],$localinv] == $BaseClass($Heap[$o_$158,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$50) && $Heap_$_69[$o_$158,$allocated]) && ((($Heap_$_69[$o_$158,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_69[$Heap_$_69[$o_$158,$ownerRef],$inv] <: $Heap_$_69[$o_$158,$ownerFrame]))) || ($Heap_$_69[$Heap_$_69[$o_$158,$ownerRef],$localinv] == $BaseClass($Heap_$_69[$o_$158,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call3formal_$_$result_$_0_$9,$Heap_$_69);
	assume IsHeap($Heap_$_70);
	assume true;
	assume $AsPureObject(call3formal_$_$result_$_0_$9) == call3formal_$_$result_$_0_$9;
	assume (forall  $o_$159 : ref :: {$Heap_$_70[$o_$159,$localinv]} {$Heap_$_70[$o_$159,$inv]} ( (((!($o_$159 == null)) && (!$Heap_$_69[$o_$159,$allocated])) && $Heap_$_70[$o_$159,$allocated]) ==> (($Heap_$_70[$o_$159,$inv] == $typeof($o_$159)) && ($Heap_$_70[$o_$159,$localinv] == $typeof($o_$159))) ));
	assume (forall  $o_$160 : ref :: {$Heap_$_70[$o_$160,$FirstConsistentOwner]} ( ($Heap_$_69[$Heap_$_69[$o_$160,$FirstConsistentOwner],$exposeVersion] == $Heap_$_70[$Heap_$_69[$o_$160,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_69[$o_$160,$FirstConsistentOwner] == $Heap_$_70[$o_$160,$FirstConsistentOwner]) ));
	assume $Heap_$_70 == $Heap_$_69;
	assume call3formal_$_$result_$_0_$13 <==> #SExpressionSimplifier.Sx.get_IsFalse($Heap_$_70,call3formal_$_$result_$_0_$9);
	assume (forall<alpha> $o_$161 : ref, $f_$51 : Field (alpha)  :: {$Heap_$_70[$o_$161,$f_$51]} ( ((((((!($o_$161 == null)) && IncludeInMainFrameCondition($f_$51)) && $Heap_$_69[$o_$161,$allocated]) && ((($Heap_$_69[$o_$161,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_69[$Heap_$_69[$o_$161,$ownerRef],$inv] <: $Heap_$_69[$o_$161,$ownerFrame]))) || ($Heap_$_69[$Heap_$_69[$o_$161,$ownerRef],$localinv] == $BaseClass($Heap_$_69[$o_$161,$ownerFrame])))) && true) && true) ==> ($Heap_$_69[$o_$161,$f_$51] == $Heap_$_70[$o_$161,$f_$51]) ));
	assume $HeapSucc($Heap_$_69,$Heap_$_70);
	assume (forall  $o_$162 : ref :: {$Heap_$_70[$o_$162,$localinv]} {$Heap_$_70[$o_$162,$inv]} ( $Heap_$_69[$o_$162,$allocated] ==> (($Heap_$_69[$o_$162,$inv] == $Heap_$_70[$o_$162,$inv]) && ($Heap_$_69[$o_$162,$localinv] == $Heap_$_70[$o_$162,$localinv])) ));
	assume (((forall  $o_$163 : ref :: {$Heap_$_70[$o_$163,$allocated]} ( $Heap_$_69[$o_$163,$allocated] ==> $Heap_$_70[$o_$163,$allocated] ))) && ((forall  $ot_$26 : ref :: {$Heap_$_70[$ot_$26,$ownerFrame]} {$Heap_$_70[$ot_$26,$ownerRef]} ( ($Heap_$_69[$ot_$26,$allocated] && (!($Heap_$_69[$ot_$26,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_70[$ot_$26,$ownerRef] == $Heap_$_69[$ot_$26,$ownerRef]) && ($Heap_$_70[$ot_$26,$ownerFrame] == $Heap_$_69[$ot_$26,$ownerFrame])) )))) && ($Heap_$_69[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_70[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$16) { goto true13260to12733; } else { goto false13260to13311; }
block13668:
	assert  !(call5formal_$_$result_$_0_$2 == null);
	assume $Utter($Heap_$_50[call5formal_$_$result_$_0_$2,$ownerRef]);
	assert  (forall<alpha> $o_$182 : ref, $f_$58 : Field (alpha)  :: {$Heap_$_50[$o_$182,$f_$58]} ( ((((((!($o_$182 == null)) && IncludeInMainFrameCondition($f_$58)) && $Heap[$o_$182,$allocated]) && ((($Heap[$o_$182,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$182,$ownerRef],$inv] <: $Heap[$o_$182,$ownerFrame]))) || ($Heap[$Heap[$o_$182,$ownerRef],$localinv] == $BaseClass($Heap[$o_$182,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$58) && $Heap_$_50[$o_$182,$allocated]) && ((($Heap_$_50[$o_$182,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_50[$Heap_$_50[$o_$182,$ownerRef],$inv] <: $Heap_$_50[$o_$182,$ownerFrame]))) || ($Heap_$_50[$Heap_$_50[$o_$182,$ownerRef],$localinv] == $BaseClass($Heap_$_50[$o_$182,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call3formal_$_$result_$5,SExpressionSimplifier.Sx) && $Heap[call3formal_$_$result_$5,$allocated];
	assert  IsFrozen(call5formal_$_$result_$_0_$2,$Heap_$_50);
	assume IsHeap($Heap_$_51);
	assume $IsNotNull(call3formal_$_$result_$_0_$5,SExpressionSimplifier.Sx) && $Heap_$_51[call3formal_$_$result_$_0_$5,$allocated];
	assume IsFrozen(call3formal_$_$result_$_0_$5,$Heap_$_51);
	assume (forall  $o_$183 : ref :: {$Heap_$_51[$o_$183,$localinv]} {$Heap_$_51[$o_$183,$inv]} ( (((!($o_$183 == null)) && (!$Heap_$_50[$o_$183,$allocated])) && $Heap_$_51[$o_$183,$allocated]) ==> (($Heap_$_51[$o_$183,$inv] == $typeof($o_$183)) && ($Heap_$_51[$o_$183,$localinv] == $typeof($o_$183))) ));
	assume (forall  $o_$184 : ref :: {$Heap_$_51[$o_$184,$FirstConsistentOwner]} ( ($Heap_$_50[$Heap_$_50[$o_$184,$FirstConsistentOwner],$exposeVersion] == $Heap_$_51[$Heap_$_50[$o_$184,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_50[$o_$184,$FirstConsistentOwner] == $Heap_$_51[$o_$184,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$185 : ref, $f_$59 : Field (alpha)  :: {$Heap_$_51[$o_$185,$f_$59]} ( ((((((!($o_$185 == null)) && IncludeInMainFrameCondition($f_$59)) && $Heap_$_50[$o_$185,$allocated]) && ((($Heap_$_50[$o_$185,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_50[$Heap_$_50[$o_$185,$ownerRef],$inv] <: $Heap_$_50[$o_$185,$ownerFrame]))) || ($Heap_$_50[$Heap_$_50[$o_$185,$ownerRef],$localinv] == $BaseClass($Heap_$_50[$o_$185,$ownerFrame])))) && true) && true) ==> ($Heap_$_50[$o_$185,$f_$59] == $Heap_$_51[$o_$185,$f_$59]) ));
	assume $HeapSucc($Heap_$_50,$Heap_$_51);
	assume (forall  $o_$186 : ref :: {$Heap_$_51[$o_$186,$localinv]} {$Heap_$_51[$o_$186,$inv]} ( $Heap_$_50[$o_$186,$allocated] ==> (($Heap_$_50[$o_$186,$inv] == $Heap_$_51[$o_$186,$inv]) && ($Heap_$_50[$o_$186,$localinv] == $Heap_$_51[$o_$186,$localinv])) ));
	assume (((forall  $o_$187 : ref :: {$Heap_$_51[$o_$187,$allocated]} ( $Heap_$_50[$o_$187,$allocated] ==> $Heap_$_51[$o_$187,$allocated] ))) && ((forall  $ot_$30 : ref :: {$Heap_$_51[$ot_$30,$ownerFrame]} {$Heap_$_51[$ot_$30,$ownerRef]} ( ($Heap_$_50[$ot_$30,$allocated] && (!($Heap_$_50[$ot_$30,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_51[$ot_$30,$ownerRef] == $Heap_$_50[$ot_$30,$ownerRef]) && ($Heap_$_51[$ot_$30,$ownerFrame] == $Heap_$_50[$ot_$30,$ownerFrame])) )))) && ($Heap_$_50[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_51[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume $Utter($Heap_$_51[call3formal_$_$result_$_0_$5,$ownerRef]);
	assert  (forall<alpha> $o_$188 : ref, $f_$60 : Field (alpha)  :: {$Heap_$_51[$o_$188,$f_$60]} ( ((((((!($o_$188 == null)) && IncludeInMainFrameCondition($f_$60)) && $Heap[$o_$188,$allocated]) && ((($Heap[$o_$188,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$188,$ownerRef],$inv] <: $Heap[$o_$188,$ownerFrame]))) || ($Heap[$Heap[$o_$188,$ownerRef],$localinv] == $BaseClass($Heap[$o_$188,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$60) && $Heap_$_51[$o_$188,$allocated]) && ((($Heap_$_51[$o_$188,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_51[$Heap_$_51[$o_$188,$ownerRef],$inv] <: $Heap_$_51[$o_$188,$ownerFrame]))) || ($Heap_$_51[$Heap_$_51[$o_$188,$ownerRef],$localinv] == $BaseClass($Heap_$_51[$o_$188,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call3formal_$_$result_$_0_$5,$Heap_$_51);
	assume IsHeap($Heap_$_52);
	assume true;
	assume $AsPureObject(call3formal_$_$result_$_0_$5) == call3formal_$_$result_$_0_$5;
	assume (forall  $o_$189 : ref :: {$Heap_$_52[$o_$189,$localinv]} {$Heap_$_52[$o_$189,$inv]} ( (((!($o_$189 == null)) && (!$Heap_$_51[$o_$189,$allocated])) && $Heap_$_52[$o_$189,$allocated]) ==> (($Heap_$_52[$o_$189,$inv] == $typeof($o_$189)) && ($Heap_$_52[$o_$189,$localinv] == $typeof($o_$189))) ));
	assume (forall  $o_$190 : ref :: {$Heap_$_52[$o_$190,$FirstConsistentOwner]} ( ($Heap_$_51[$Heap_$_51[$o_$190,$FirstConsistentOwner],$exposeVersion] == $Heap_$_52[$Heap_$_51[$o_$190,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_51[$o_$190,$FirstConsistentOwner] == $Heap_$_52[$o_$190,$FirstConsistentOwner]) ));
	assume $Heap_$_52 == $Heap_$_51;
	assume call3formal_$_$result_$_0_$6 <==> #SExpressionSimplifier.Sx.get_IsTrue($Heap_$_52,call3formal_$_$result_$_0_$5);
	assume (forall<alpha> $o_$191 : ref, $f_$61 : Field (alpha)  :: {$Heap_$_52[$o_$191,$f_$61]} ( ((((((!($o_$191 == null)) && IncludeInMainFrameCondition($f_$61)) && $Heap_$_51[$o_$191,$allocated]) && ((($Heap_$_51[$o_$191,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_51[$Heap_$_51[$o_$191,$ownerRef],$inv] <: $Heap_$_51[$o_$191,$ownerFrame]))) || ($Heap_$_51[$Heap_$_51[$o_$191,$ownerRef],$localinv] == $BaseClass($Heap_$_51[$o_$191,$ownerFrame])))) && true) && true) ==> ($Heap_$_51[$o_$191,$f_$61] == $Heap_$_52[$o_$191,$f_$61]) ));
	assume $HeapSucc($Heap_$_51,$Heap_$_52);
	assume (forall  $o_$192 : ref :: {$Heap_$_52[$o_$192,$localinv]} {$Heap_$_52[$o_$192,$inv]} ( $Heap_$_51[$o_$192,$allocated] ==> (($Heap_$_51[$o_$192,$inv] == $Heap_$_52[$o_$192,$inv]) && ($Heap_$_51[$o_$192,$localinv] == $Heap_$_52[$o_$192,$localinv])) ));
	assume (((forall  $o_$193 : ref :: {$Heap_$_52[$o_$193,$allocated]} ( $Heap_$_51[$o_$193,$allocated] ==> $Heap_$_52[$o_$193,$allocated] ))) && ((forall  $ot_$31 : ref :: {$Heap_$_52[$ot_$31,$ownerFrame]} {$Heap_$_52[$ot_$31,$ownerRef]} ( ($Heap_$_51[$ot_$31,$allocated] && (!($Heap_$_51[$ot_$31,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_52[$ot_$31,$ownerRef] == $Heap_$_51[$ot_$31,$ownerRef]) && ($Heap_$_52[$ot_$31,$ownerFrame] == $Heap_$_51[$ot_$31,$ownerFrame])) )))) && ($Heap_$_51[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_52[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$18) { goto true13668to13719; } else { goto false13668to13923; }
true13872to13668:
	assume !call4formal_$_$result_$_0_$7;
	assume $Heap_$_50 == $Heap_$_47;
	goto block13668;
false13872to13532:
	assume call4formal_$_$result_$_0_$7;
	assert  $Is(call5formal_$_$result_$_0_$2,SExpressionSimplifier.Nary);
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_47,$Heap_$_47[call5formal_$_$result_$_0_$2,SExpressionSimplifier.Nary.Args]) == 1;
	assert  !(call5formal_$_$result_$_0_$2 == null);
	assume stack0o_$_14 == $Heap_$_47[call5formal_$_$result_$_0_$2,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_14 == null);
	assume $Utter($Heap_$_47[stack0o_$_14,$ownerRef]);
	assert  (forall<alpha> $o_$164 : ref, $f_$52 : Field (alpha)  :: {$Heap_$_47[$o_$164,$f_$52]} ( ((((((!($o_$164 == null)) && IncludeInMainFrameCondition($f_$52)) && $Heap[$o_$164,$allocated]) && ((($Heap[$o_$164,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$164,$ownerRef],$inv] <: $Heap[$o_$164,$ownerFrame]))) || ($Heap[$Heap[$o_$164,$ownerRef],$localinv] == $BaseClass($Heap[$o_$164,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$52) && $Heap_$_47[$o_$164,$allocated]) && ((($Heap_$_47[$o_$164,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_47[$Heap_$_47[$o_$164,$ownerRef],$inv] <: $Heap_$_47[$o_$164,$ownerFrame]))) || ($Heap_$_47[$Heap_$_47[$o_$164,$ownerRef],$localinv] == $BaseClass($Heap_$_47[$o_$164,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$3,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$3,$allocated];
	assert  0 <= 0;
	assert  0 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_47,stack0o_$_14);
	assert  (forall  $pc_$18 : ref :: {$typeof($pc_$18)} {$Heap_$_47[$pc_$18,$localinv]} {$Heap_$_47[$pc_$18,$inv]} {$Heap_$_47[$pc_$18,$ownerFrame]} {$Heap_$_47[$pc_$18,$ownerRef]} ( ((((!($pc_$18 == null)) && $Heap_$_47[$pc_$18,$allocated]) && ($Heap_$_47[$pc_$18,$ownerRef] == $Heap_$_47[stack0o_$_14,$ownerRef])) && ($Heap_$_47[$pc_$18,$ownerFrame] == $Heap_$_47[stack0o_$_14,$ownerFrame])) ==> (($Heap_$_47[$pc_$18,$inv] == $typeof($pc_$18)) && ($Heap_$_47[$pc_$18,$localinv] == $typeof($pc_$18))) ));
	assume IsHeap($Heap_$_48);
	assume $IsNotNull(call5formal_$_$result_$_0_$3,SExpressionSimplifier.Sx) && $Heap_$_48[call5formal_$_$result_$_0_$3,$allocated];
	assume $Heap_$_47[call5formal_$_$result_$_0_$3,$allocated];
	assume (((!($Heap_$_48[stack0o_$_14,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$inv] <: $Heap_$_48[stack0o_$_14,$ownerFrame])) && (!($Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$localinv] == $BaseClass($Heap_$_48[stack0o_$_14,$ownerFrame])))) ==> (((!(((!($Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_48[$Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerRef],$inv] <: $Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerFrame])) && (!($Heap_$_48[$Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_48[stack0o_$_14,$FirstConsistentOwner] == $Heap_$_48[stack0o_$_14,$ownerRef])) && ((((!($Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_48[$Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerRef],$inv] <: $Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerFrame])) && (!($Heap_$_48[$Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$ownerFrame])))) ==> ($Heap_$_48[stack0o_$_14,$FirstConsistentOwner] == $Heap_$_48[$Heap_$_48[stack0o_$_14,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_14) == stack0o_$_14;
	assume IsFrozen(call5formal_$_$result_$_0_$3,$Heap_$_48);
	assume (forall  $o_$165 : ref :: {$Heap_$_48[$o_$165,$localinv]} {$Heap_$_48[$o_$165,$inv]} ( (((!($o_$165 == null)) && (!$Heap_$_47[$o_$165,$allocated])) && $Heap_$_48[$o_$165,$allocated]) ==> (($Heap_$_48[$o_$165,$inv] == $typeof($o_$165)) && ($Heap_$_48[$o_$165,$localinv] == $typeof($o_$165))) ));
	assume (forall  $o_$166 : ref :: {$Heap_$_48[$o_$166,$FirstConsistentOwner]} ( ($Heap_$_47[$Heap_$_47[$o_$166,$FirstConsistentOwner],$exposeVersion] == $Heap_$_48[$Heap_$_47[$o_$166,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_47[$o_$166,$FirstConsistentOwner] == $Heap_$_48[$o_$166,$FirstConsistentOwner]) ));
	assume $Heap_$_48 == $Heap_$_47;
	assume false || (call5formal_$_$result_$_0_$3 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_48,stack0o_$_14,0));
	assume (forall<alpha> $o_$167 : ref, $f_$53 : Field (alpha)  :: {$Heap_$_48[$o_$167,$f_$53]} ( ((((((!($o_$167 == null)) && IncludeInMainFrameCondition($f_$53)) && $Heap_$_47[$o_$167,$allocated]) && ((($Heap_$_47[$o_$167,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_47[$Heap_$_47[$o_$167,$ownerRef],$inv] <: $Heap_$_47[$o_$167,$ownerFrame]))) || ($Heap_$_47[$Heap_$_47[$o_$167,$ownerRef],$localinv] == $BaseClass($Heap_$_47[$o_$167,$ownerFrame])))) && true) && true) ==> ($Heap_$_47[$o_$167,$f_$53] == $Heap_$_48[$o_$167,$f_$53]) ));
	assume $HeapSucc($Heap_$_47,$Heap_$_48);
	assume (forall  $o_$168 : ref :: {$Heap_$_48[$o_$168,$localinv]} {$Heap_$_48[$o_$168,$inv]} ( $Heap_$_47[$o_$168,$allocated] ==> (($Heap_$_47[$o_$168,$inv] == $Heap_$_48[$o_$168,$inv]) && ($Heap_$_47[$o_$168,$localinv] == $Heap_$_48[$o_$168,$localinv])) ));
	assume (((forall  $o_$169 : ref :: {$Heap_$_48[$o_$169,$allocated]} ( $Heap_$_47[$o_$169,$allocated] ==> $Heap_$_48[$o_$169,$allocated] ))) && ((forall  $ot_$27 : ref :: {$Heap_$_48[$ot_$27,$ownerFrame]} {$Heap_$_48[$ot_$27,$ownerRef]} ( ($Heap_$_47[$ot_$27,$allocated] && (!($Heap_$_47[$ot_$27,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_48[$ot_$27,$ownerRef] == $Heap_$_47[$ot_$27,$ownerRef]) && ($Heap_$_48[$ot_$27,$ownerFrame] == $Heap_$_47[$ot_$27,$ownerFrame])) )))) && ($Heap_$_47[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_48[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call5formal_$_$result_$_0_$3 == null);
	assume $Utter($Heap_$_48[call5formal_$_$result_$_0_$3,$ownerRef]);
	assert  (forall<alpha> $o_$170 : ref, $f_$54 : Field (alpha)  :: {$Heap_$_48[$o_$170,$f_$54]} ( ((((((!($o_$170 == null)) && IncludeInMainFrameCondition($f_$54)) && $Heap[$o_$170,$allocated]) && ((($Heap[$o_$170,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$170,$ownerRef],$inv] <: $Heap[$o_$170,$ownerFrame]))) || ($Heap[$Heap[$o_$170,$ownerRef],$localinv] == $BaseClass($Heap[$o_$170,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$54) && $Heap_$_48[$o_$170,$allocated]) && ((($Heap_$_48[$o_$170,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_48[$Heap_$_48[$o_$170,$ownerRef],$inv] <: $Heap_$_48[$o_$170,$ownerFrame]))) || ($Heap_$_48[$Heap_$_48[$o_$170,$ownerRef],$localinv] == $BaseClass($Heap_$_48[$o_$170,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call3formal_$_$result_$4,SExpressionSimplifier.Sx) && $Heap[call3formal_$_$result_$4,$allocated];
	assert  IsFrozen(call5formal_$_$result_$_0_$3,$Heap_$_48);
	assume IsHeap($Heap_$_49);
	assume $IsNotNull(call3formal_$_$result_$_0_$4,SExpressionSimplifier.Sx) && $Heap_$_49[call3formal_$_$result_$_0_$4,$allocated];
	assume IsFrozen(call3formal_$_$result_$_0_$4,$Heap_$_49);
	assume (forall  $o_$171 : ref :: {$Heap_$_49[$o_$171,$localinv]} {$Heap_$_49[$o_$171,$inv]} ( (((!($o_$171 == null)) && (!$Heap_$_48[$o_$171,$allocated])) && $Heap_$_49[$o_$171,$allocated]) ==> (($Heap_$_49[$o_$171,$inv] == $typeof($o_$171)) && ($Heap_$_49[$o_$171,$localinv] == $typeof($o_$171))) ));
	assume (forall  $o_$172 : ref :: {$Heap_$_49[$o_$172,$FirstConsistentOwner]} ( ($Heap_$_48[$Heap_$_48[$o_$172,$FirstConsistentOwner],$exposeVersion] == $Heap_$_49[$Heap_$_48[$o_$172,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_48[$o_$172,$FirstConsistentOwner] == $Heap_$_49[$o_$172,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$173 : ref, $f_$55 : Field (alpha)  :: {$Heap_$_49[$o_$173,$f_$55]} ( ((((((!($o_$173 == null)) && IncludeInMainFrameCondition($f_$55)) && $Heap_$_48[$o_$173,$allocated]) && ((($Heap_$_48[$o_$173,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_48[$Heap_$_48[$o_$173,$ownerRef],$inv] <: $Heap_$_48[$o_$173,$ownerFrame]))) || ($Heap_$_48[$Heap_$_48[$o_$173,$ownerRef],$localinv] == $BaseClass($Heap_$_48[$o_$173,$ownerFrame])))) && true) && true) ==> ($Heap_$_48[$o_$173,$f_$55] == $Heap_$_49[$o_$173,$f_$55]) ));
	assume $HeapSucc($Heap_$_48,$Heap_$_49);
	assume (forall  $o_$174 : ref :: {$Heap_$_49[$o_$174,$localinv]} {$Heap_$_49[$o_$174,$inv]} ( $Heap_$_48[$o_$174,$allocated] ==> (($Heap_$_48[$o_$174,$inv] == $Heap_$_49[$o_$174,$inv]) && ($Heap_$_48[$o_$174,$localinv] == $Heap_$_49[$o_$174,$localinv])) ));
	assume (((forall  $o_$175 : ref :: {$Heap_$_49[$o_$175,$allocated]} ( $Heap_$_48[$o_$175,$allocated] ==> $Heap_$_49[$o_$175,$allocated] ))) && ((forall  $ot_$28 : ref :: {$Heap_$_49[$ot_$28,$ownerFrame]} {$Heap_$_49[$ot_$28,$ownerRef]} ( ($Heap_$_48[$ot_$28,$allocated] && (!($Heap_$_48[$ot_$28,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_49[$ot_$28,$ownerRef] == $Heap_$_48[$ot_$28,$ownerRef]) && ($Heap_$_49[$ot_$28,$ownerFrame] == $Heap_$_48[$ot_$28,$ownerFrame])) )))) && ($Heap_$_48[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_49[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_49;
	assume return.value_$_0 == call3formal_$_$result_$_0_$4;
	goto block12750;
block12478:
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_0,$Heap_$_0[this,SExpressionSimplifier.Nary.Args]) >= 2;
	assert  !(this == null);
	assume stack0o_$_8 == $Heap_$_0[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_8 == null);
	assume $Utter($Heap_$_0[stack0o_$_8,$ownerRef]);
	assert  (forall<alpha> $o_$218 : ref, $f_$70 : Field (alpha)  :: {$Heap_$_0[$o_$218,$f_$70]} ( ((((((!($o_$218 == null)) && IncludeInMainFrameCondition($f_$70)) && $Heap[$o_$218,$allocated]) && ((($Heap[$o_$218,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$218,$ownerRef],$inv] <: $Heap[$o_$218,$ownerFrame]))) || ($Heap[$Heap[$o_$218,$ownerRef],$localinv] == $BaseClass($Heap[$o_$218,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$70) && $Heap_$_0[$o_$218,$allocated]) && ((($Heap_$_0[$o_$218,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$218,$ownerRef],$inv] <: $Heap_$_0[$o_$218,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$218,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$218,$ownerFrame])))) && true) && true) ));
	assume InRange(call4formal_$_$result_$3,System.Int32);
	assert  (forall  $pc_$19 : ref :: {$typeof($pc_$19)} {$Heap_$_0[$pc_$19,$localinv]} {$Heap_$_0[$pc_$19,$inv]} {$Heap_$_0[$pc_$19,$ownerFrame]} {$Heap_$_0[$pc_$19,$ownerRef]} ( ((((!($pc_$19 == null)) && $Heap_$_0[$pc_$19,$allocated]) && ($Heap_$_0[$pc_$19,$ownerRef] == $Heap_$_0[stack0o_$_8,$ownerRef])) && ($Heap_$_0[$pc_$19,$ownerFrame] == $Heap_$_0[stack0o_$_8,$ownerFrame])) ==> (($Heap_$_0[$pc_$19,$inv] == $typeof($pc_$19)) && ($Heap_$_0[$pc_$19,$localinv] == $typeof($pc_$19))) ));
	assume IsHeap($Heap_$_35);
	assume InRange(call4formal_$_$result_$_0_$4,System.Int32);
	assume call4formal_$_$result_$_0_$4 >= 0;
	assume (((!($Heap_$_35[stack0o_$_8,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$inv] <: $Heap_$_35[stack0o_$_8,$ownerFrame])) && (!($Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$localinv] == $BaseClass($Heap_$_35[stack0o_$_8,$ownerFrame])))) ==> (((!(((!($Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_35[$Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerRef],$inv] <: $Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerFrame])) && (!($Heap_$_35[$Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_35[stack0o_$_8,$FirstConsistentOwner] == $Heap_$_35[stack0o_$_8,$ownerRef])) && ((((!($Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_35[$Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerRef],$inv] <: $Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerFrame])) && (!($Heap_$_35[$Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$ownerFrame])))) ==> ($Heap_$_35[stack0o_$_8,$FirstConsistentOwner] == $Heap_$_35[$Heap_$_35[stack0o_$_8,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_8) == stack0o_$_8;
	assume (forall  $o_$219 : ref :: {$Heap_$_35[$o_$219,$localinv]} {$Heap_$_35[$o_$219,$inv]} ( (((!($o_$219 == null)) && (!$Heap_$_0[$o_$219,$allocated])) && $Heap_$_35[$o_$219,$allocated]) ==> (($Heap_$_35[$o_$219,$inv] == $typeof($o_$219)) && ($Heap_$_35[$o_$219,$localinv] == $typeof($o_$219))) ));
	assume (forall  $o_$220 : ref :: {$Heap_$_35[$o_$220,$FirstConsistentOwner]} ( ($Heap_$_0[$Heap_$_0[$o_$220,$FirstConsistentOwner],$exposeVersion] == $Heap_$_35[$Heap_$_0[$o_$220,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_0[$o_$220,$FirstConsistentOwner] == $Heap_$_35[$o_$220,$FirstConsistentOwner]) ));
	assume $Heap_$_35 == $Heap_$_0;
	assume false || (call4formal_$_$result_$_0_$4 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_35,stack0o_$_8));
	assume (forall<alpha> $o_$221 : ref, $f_$71 : Field (alpha)  :: {$Heap_$_35[$o_$221,$f_$71]} ( ((((((!($o_$221 == null)) && IncludeInMainFrameCondition($f_$71)) && $Heap_$_0[$o_$221,$allocated]) && ((($Heap_$_0[$o_$221,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$221,$ownerRef],$inv] <: $Heap_$_0[$o_$221,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$221,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$221,$ownerFrame])))) && true) && true) ==> ($Heap_$_0[$o_$221,$f_$71] == $Heap_$_35[$o_$221,$f_$71]) ));
	assume $HeapSucc($Heap_$_0,$Heap_$_35);
	assume (forall  $o_$222 : ref :: {$Heap_$_35[$o_$222,$localinv]} {$Heap_$_35[$o_$222,$inv]} ( $Heap_$_0[$o_$222,$allocated] ==> (($Heap_$_0[$o_$222,$inv] == $Heap_$_35[$o_$222,$inv]) && ($Heap_$_0[$o_$222,$localinv] == $Heap_$_35[$o_$222,$localinv])) ));
	assume (((forall  $o_$223 : ref :: {$Heap_$_35[$o_$223,$allocated]} ( $Heap_$_0[$o_$223,$allocated] ==> $Heap_$_35[$o_$223,$allocated] ))) && ((forall  $ot_$36 : ref :: {$Heap_$_35[$ot_$36,$ownerFrame]} {$Heap_$_35[$ot_$36,$ownerRef]} ( ($Heap_$_0[$ot_$36,$allocated] && (!($Heap_$_0[$ot_$36,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_35[$ot_$36,$ownerRef] == $Heap_$_0[$ot_$36,$ownerRef]) && ($Heap_$_35[$ot_$36,$ownerFrame] == $Heap_$_0[$ot_$36,$ownerFrame])) )))) && ($Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_35[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_35[$ElementProxy(stack50000o_$_4,0),$allocated] <==> false) && (!($ElementProxy(stack50000o_$_4,0) == null))) && (!($ElementProxy(stack50000o_$_4,0) == stack50000o_$_4));
	assume ($Heap_$_35[$ElementProxy(stack50000o_$_4,0),$ownerRef] == $ElementProxy(stack50000o_$_4,0)) && ($Heap_$_35[$ElementProxy(stack50000o_$_4,0),$ownerFrame] == $PeerGroupPlaceholder);
	assume call0formal_$_this_$_0_$1 == $ElementProxy(stack50000o_$_4,0);
	assume IsHeap($Heap_$_36);
	assume $Heap_$_36[call0formal_$_this_$_0_$1,$allocated];
	assume (((($Heap_$_36[call0formal_$_this_$_0_$1,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_36[$Heap_$_36[call0formal_$_this_$_0_$1,$ownerRef],$inv] <: $Heap_$_36[call0formal_$_this_$_0_$1,$ownerFrame]))) || ($Heap_$_36[$Heap_$_36[call0formal_$_this_$_0_$1,$ownerRef],$localinv] == $BaseClass($Heap_$_36[call0formal_$_this_$_0_$1,$ownerFrame]))) && ($Heap_$_36[call0formal_$_this_$_0_$1,$inv] == System.Object)) && ($Heap_$_36[call0formal_$_this_$_0_$1,$localinv] == $typeof(call0formal_$_this_$_0_$1));
	assume ($Heap_$_36[call0formal_$_this_$_0_$1,$ownerRef] == $Heap_$_35[call0formal_$_this_$_0_$1,$ownerRef]) && ($Heap_$_36[call0formal_$_this_$_0_$1,$ownerFrame] == $Heap_$_35[call0formal_$_this_$_0_$1,$ownerFrame]);
	assume (forall  $o_$224 : ref :: {$Heap_$_36[$o_$224,$localinv]} {$Heap_$_36[$o_$224,$inv]} ( (((!($o_$224 == null)) && (!$Heap_$_35[$o_$224,$allocated])) && $Heap_$_36[$o_$224,$allocated]) ==> (($Heap_$_36[$o_$224,$inv] == $typeof($o_$224)) && ($Heap_$_36[$o_$224,$localinv] == $typeof($o_$224))) ));
	assume (forall  $o_$225 : ref :: {$Heap_$_36[$o_$225,$FirstConsistentOwner]} ( ($Heap_$_35[$Heap_$_35[$o_$225,$FirstConsistentOwner],$exposeVersion] == $Heap_$_36[$Heap_$_35[$o_$225,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_35[$o_$225,$FirstConsistentOwner] == $Heap_$_36[$o_$225,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$226 : ref, $f_$72 : Field (alpha)  :: {$Heap_$_36[$o_$226,$f_$72]} ( (((((((!($o_$226 == null)) && IncludeInMainFrameCondition($f_$72)) && $Heap_$_35[$o_$226,$allocated]) && ((($Heap_$_35[$o_$226,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_35[$Heap_$_35[$o_$226,$ownerRef],$inv] <: $Heap_$_35[$o_$226,$ownerFrame]))) || ($Heap_$_35[$Heap_$_35[$o_$226,$ownerRef],$localinv] == $BaseClass($Heap_$_35[$o_$226,$ownerFrame])))) && ((!($o_$226 == call0formal_$_this_$_0_$1)) || (!(System.Object <: DeclType($f_$72))))) && true) && true) ==> ($Heap_$_35[$o_$226,$f_$72] == $Heap_$_36[$o_$226,$f_$72]) ));
	assume $HeapSucc($Heap_$_35,$Heap_$_36);
	assume (forall  $o_$227 : ref :: {$Heap_$_36[$o_$227,$localinv]} {$Heap_$_36[$o_$227,$inv]} ( ($Heap_$_35[$o_$227,$allocated] && (!($o_$227 == call0formal_$_this_$_0_$1))) ==> (($Heap_$_35[$o_$227,$inv] == $Heap_$_36[$o_$227,$inv]) && ($Heap_$_35[$o_$227,$localinv] == $Heap_$_36[$o_$227,$localinv])) ));
	assume (((forall  $o_$228 : ref :: {$Heap_$_36[$o_$228,$allocated]} ( $Heap_$_35[$o_$228,$allocated] ==> $Heap_$_36[$o_$228,$allocated] ))) && ((forall  $ot_$37 : ref :: {$Heap_$_36[$ot_$37,$ownerFrame]} {$Heap_$_36[$ot_$37,$ownerRef]} ( ($Heap_$_35[$ot_$37,$allocated] && (!($Heap_$_35[$ot_$37,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_36[$ot_$37,$ownerRef] == $Heap_$_35[$ot_$37,$ownerRef]) && ($Heap_$_36[$ot_$37,$ownerFrame] == $Heap_$_35[$ot_$37,$ownerFrame])) )))) && ($Heap_$_35[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_36[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_36[stack50000o_$_4,$allocated] <==> false) && (!(stack50000o_$_4 == null))) && ($typeof(stack50000o_$_4) == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume ($Heap_$_36[stack50000o_$_4,$ownerRef] == stack50000o_$_4) && ($Heap_$_36[stack50000o_$_4,$ownerFrame] == $PeerGroupPlaceholder);
	assert  !(stack50000o_$_4 == null);
	assume $Utter($Heap_$_36[stack50000o_$_4,$ownerRef]);
	assert  (forall<alpha> $o_$229 : ref, $f_$73 : Field (alpha)  :: {$Heap_$_36[$o_$229,$f_$73]} ( ((((((!($o_$229 == null)) && IncludeInMainFrameCondition($f_$73)) && $Heap[$o_$229,$allocated]) && ((($Heap[$o_$229,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$229,$ownerRef],$inv] <: $Heap[$o_$229,$ownerFrame]))) || ($Heap[$Heap[$o_$229,$ownerRef],$localinv] == $BaseClass($Heap[$o_$229,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$73) && $Heap_$_36[$o_$229,$allocated]) && ((($Heap_$_36[$o_$229,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_36[$Heap_$_36[$o_$229,$ownerRef],$inv] <: $Heap_$_36[$o_$229,$ownerFrame]))) || ($Heap_$_36[$Heap_$_36[$o_$229,$ownerRef],$localinv] == $BaseClass($Heap_$_36[$o_$229,$ownerFrame])))) && ((!($o_$229 == stack50000o_$_4)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$73))))) && true) && true) ));
	assume IsHeap($Heap_$_37);
	assume $Heap_$_37[stack50000o_$_4,$allocated];
	assume (((($Heap_$_37[stack50000o_$_4,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_37[$Heap_$_37[stack50000o_$_4,$ownerRef],$inv] <: $Heap_$_37[stack50000o_$_4,$ownerFrame]))) || ($Heap_$_37[$Heap_$_37[stack50000o_$_4,$ownerRef],$localinv] == $BaseClass($Heap_$_37[stack50000o_$_4,$ownerFrame]))) && ($Heap_$_37[stack50000o_$_4,$inv] == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$_37[stack50000o_$_4,$localinv] == $typeof(stack50000o_$_4));
	assume ($Heap_$_37[stack50000o_$_4,$ownerRef] == $Heap_$_36[stack50000o_$_4,$ownerRef]) && ($Heap_$_37[stack50000o_$_4,$ownerFrame] == $Heap_$_36[stack50000o_$_4,$ownerFrame]);
	assume (forall  $o_$230 : ref :: {$Heap_$_37[$o_$230,$localinv]} {$Heap_$_37[$o_$230,$inv]} ( (((!($o_$230 == null)) && (!$Heap_$_36[$o_$230,$allocated])) && $Heap_$_37[$o_$230,$allocated]) ==> (($Heap_$_37[$o_$230,$inv] == $typeof($o_$230)) && ($Heap_$_37[$o_$230,$localinv] == $typeof($o_$230))) ));
	assume (forall  $o_$231 : ref :: {$Heap_$_37[$o_$231,$FirstConsistentOwner]} ( ($Heap_$_36[$Heap_$_36[$o_$231,$FirstConsistentOwner],$exposeVersion] == $Heap_$_37[$Heap_$_36[$o_$231,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_36[$o_$231,$FirstConsistentOwner] == $Heap_$_37[$o_$231,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$232 : ref, $f_$74 : Field (alpha)  :: {$Heap_$_37[$o_$232,$f_$74]} ( (((((((!($o_$232 == null)) && IncludeInMainFrameCondition($f_$74)) && $Heap_$_36[$o_$232,$allocated]) && ((($Heap_$_36[$o_$232,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_36[$Heap_$_36[$o_$232,$ownerRef],$inv] <: $Heap_$_36[$o_$232,$ownerFrame]))) || ($Heap_$_36[$Heap_$_36[$o_$232,$ownerRef],$localinv] == $BaseClass($Heap_$_36[$o_$232,$ownerFrame])))) && ((!($o_$232 == stack50000o_$_4)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$74))))) && true) && true) ==> ($Heap_$_36[$o_$232,$f_$74] == $Heap_$_37[$o_$232,$f_$74]) ));
	assume $HeapSucc($Heap_$_36,$Heap_$_37);
	assume (forall  $o_$233 : ref :: {$Heap_$_37[$o_$233,$localinv]} {$Heap_$_37[$o_$233,$inv]} ( ($Heap_$_36[$o_$233,$allocated] && (!($o_$233 == stack50000o_$_4))) ==> (($Heap_$_36[$o_$233,$inv] == $Heap_$_37[$o_$233,$inv]) && ($Heap_$_36[$o_$233,$localinv] == $Heap_$_37[$o_$233,$localinv])) ));
	assume (((forall  $o_$234 : ref :: {$Heap_$_37[$o_$234,$allocated]} ( $Heap_$_36[$o_$234,$allocated] ==> $Heap_$_37[$o_$234,$allocated] ))) && ((forall  $ot_$38 : ref :: {$Heap_$_37[$ot_$38,$ownerFrame]} {$Heap_$_37[$ot_$38,$ownerRef]} ( ($Heap_$_36[$ot_$38,$allocated] && (!($Heap_$_36[$ot_$38,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_37[$ot_$38,$ownerRef] == $Heap_$_36[$ot_$38,$ownerRef]) && ($Heap_$_37[$ot_$38,$ownerFrame] == $Heap_$_36[$ot_$38,$ownerFrame])) )))) && ($Heap_$_36[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_37[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  $Heap_$_37[$ElementProxy(stack50000o_$_4,0),$ownerFrame] == $PeerGroupPlaceholder;
	assert  (forall  $pc_$20 : ref :: {$typeof($pc_$20)} {$Heap_$_37[$pc_$20,$localinv]} {$Heap_$_37[$pc_$20,$inv]} {$Heap_$_37[$pc_$20,$ownerFrame]} {$Heap_$_37[$pc_$20,$ownerRef]} ( ((((!($pc_$20 == null)) && $Heap_$_37[$pc_$20,$allocated]) && ($Heap_$_37[$pc_$20,$ownerRef] == $Heap_$_37[$ElementProxy(stack50000o_$_4,0),$ownerRef])) && ($Heap_$_37[$pc_$20,$ownerFrame] == $Heap_$_37[$ElementProxy(stack50000o_$_4,0),$ownerFrame])) ==> (($Heap_$_37[$pc_$20,$inv] == $typeof($pc_$20)) && ($Heap_$_37[$pc_$20,$localinv] == $typeof($pc_$20))) ));
	assume call0formal_$_x_$_0_$1 == $ElementProxy(stack50000o_$_4,0);
	assume IsHeap($Heap_$_38);
	assume (forall<alpha> p_$13 : ref, F_$2 : Field (alpha)  :: {$Heap_$_38[p_$13,F_$2]} ( ((((!(F_$2 == $ownerRef)) && (!(F_$2 == $ownerFrame))) && (!(F_$2 == $FirstConsistentOwner))) || ((!($Heap_$_37[p_$13,$ownerRef] == $Heap_$_37[call0formal_$_x_$_0_$1,$ownerRef])) || (!($Heap_$_37[p_$13,$ownerFrame] == $Heap_$_37[call0formal_$_x_$_0_$1,$ownerFrame])))) ==> ($Heap_$_37[p_$13,F_$2] == $Heap_$_38[p_$13,F_$2]) ));
	assume (call0formal_$_x_$_0_$1 == null) ==> ($Heap_$_38 == $Heap_$_37);
	assume (!(call0formal_$_x_$_0_$1 == null)) ==> ((forall  p_$14 : ref :: {$Heap_$_38[p_$14,$ownerRef]} {$Heap_$_38[p_$14,$ownerFrame]} ( (($Heap_$_37[p_$14,$ownerRef] == $Heap_$_37[call0formal_$_x_$_0_$1,$ownerRef]) && ($Heap_$_37[p_$14,$ownerFrame] == $Heap_$_37[call0formal_$_x_$_0_$1,$ownerFrame])) ==> (($Heap_$_38[p_$14,$ownerRef] == $freezerRef) && ($Heap_$_38[p_$14,$ownerFrame] == $Freezer)) )));
	assume $HeapSucc($Heap_$_37,$Heap_$_38);
	assert  !(this == null);
	assume stack0o_$_9 == $Heap_$_38[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_9 == null);
	assume $Utter($Heap_$_38[stack0o_$_9,$ownerRef]);
	assert  (forall<alpha> $o_$235 : ref, $f_$75 : Field (alpha)  :: {$Heap_$_38[$o_$235,$f_$75]} ( ((((((!($o_$235 == null)) && IncludeInMainFrameCondition($f_$75)) && $Heap[$o_$235,$allocated]) && ((($Heap[$o_$235,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$235,$ownerRef],$inv] <: $Heap[$o_$235,$ownerFrame]))) || ($Heap[$Heap[$o_$235,$ownerRef],$localinv] == $BaseClass($Heap[$o_$235,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$75) && $Heap_$_38[$o_$235,$allocated]) && ((($Heap_$_38[$o_$235,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_38[$Heap_$_38[$o_$235,$ownerRef],$inv] <: $Heap_$_38[$o_$235,$ownerFrame]))) || ($Heap_$_38[$Heap_$_38[$o_$235,$ownerRef],$localinv] == $BaseClass($Heap_$_38[$o_$235,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result,$allocated];
	assert  0 <= 0;
	assert  0 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_38,stack0o_$_9);
	assert  (forall  $pc_$21 : ref :: {$typeof($pc_$21)} {$Heap_$_38[$pc_$21,$localinv]} {$Heap_$_38[$pc_$21,$inv]} {$Heap_$_38[$pc_$21,$ownerFrame]} {$Heap_$_38[$pc_$21,$ownerRef]} ( ((((!($pc_$21 == null)) && $Heap_$_38[$pc_$21,$allocated]) && ($Heap_$_38[$pc_$21,$ownerRef] == $Heap_$_38[stack0o_$_9,$ownerRef])) && ($Heap_$_38[$pc_$21,$ownerFrame] == $Heap_$_38[stack0o_$_9,$ownerFrame])) ==> (($Heap_$_38[$pc_$21,$inv] == $typeof($pc_$21)) && ($Heap_$_38[$pc_$21,$localinv] == $typeof($pc_$21))) ));
	assume IsHeap($Heap_$_39);
	assume $IsNotNull(call5formal_$_$result_$_0,SExpressionSimplifier.Sx) && $Heap_$_39[call5formal_$_$result_$_0,$allocated];
	assume $Heap_$_38[call5formal_$_$result_$_0,$allocated];
	assume (((!($Heap_$_39[stack0o_$_9,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$inv] <: $Heap_$_39[stack0o_$_9,$ownerFrame])) && (!($Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$localinv] == $BaseClass($Heap_$_39[stack0o_$_9,$ownerFrame])))) ==> (((!(((!($Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_39[$Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerRef],$inv] <: $Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerFrame])) && (!($Heap_$_39[$Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_39[stack0o_$_9,$FirstConsistentOwner] == $Heap_$_39[stack0o_$_9,$ownerRef])) && ((((!($Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_39[$Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerRef],$inv] <: $Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerFrame])) && (!($Heap_$_39[$Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$ownerFrame])))) ==> ($Heap_$_39[stack0o_$_9,$FirstConsistentOwner] == $Heap_$_39[$Heap_$_39[stack0o_$_9,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_9) == stack0o_$_9;
	assume IsFrozen(call5formal_$_$result_$_0,$Heap_$_39);
	assume (forall  $o_$236 : ref :: {$Heap_$_39[$o_$236,$localinv]} {$Heap_$_39[$o_$236,$inv]} ( (((!($o_$236 == null)) && (!$Heap_$_38[$o_$236,$allocated])) && $Heap_$_39[$o_$236,$allocated]) ==> (($Heap_$_39[$o_$236,$inv] == $typeof($o_$236)) && ($Heap_$_39[$o_$236,$localinv] == $typeof($o_$236))) ));
	assume (forall  $o_$237 : ref :: {$Heap_$_39[$o_$237,$FirstConsistentOwner]} ( ($Heap_$_38[$Heap_$_38[$o_$237,$FirstConsistentOwner],$exposeVersion] == $Heap_$_39[$Heap_$_38[$o_$237,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_38[$o_$237,$FirstConsistentOwner] == $Heap_$_39[$o_$237,$FirstConsistentOwner]) ));
	assume $Heap_$_39 == $Heap_$_38;
	assume false || (call5formal_$_$result_$_0 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_39,stack0o_$_9,0));
	assume (forall<alpha> $o_$238 : ref, $f_$76 : Field (alpha)  :: {$Heap_$_39[$o_$238,$f_$76]} ( ((((((!($o_$238 == null)) && IncludeInMainFrameCondition($f_$76)) && $Heap_$_38[$o_$238,$allocated]) && ((($Heap_$_38[$o_$238,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_38[$Heap_$_38[$o_$238,$ownerRef],$inv] <: $Heap_$_38[$o_$238,$ownerFrame]))) || ($Heap_$_38[$Heap_$_38[$o_$238,$ownerRef],$localinv] == $BaseClass($Heap_$_38[$o_$238,$ownerFrame])))) && true) && true) ==> ($Heap_$_38[$o_$238,$f_$76] == $Heap_$_39[$o_$238,$f_$76]) ));
	assume $HeapSucc($Heap_$_38,$Heap_$_39);
	assume (forall  $o_$239 : ref :: {$Heap_$_39[$o_$239,$localinv]} {$Heap_$_39[$o_$239,$inv]} ( $Heap_$_38[$o_$239,$allocated] ==> (($Heap_$_38[$o_$239,$inv] == $Heap_$_39[$o_$239,$inv]) && ($Heap_$_38[$o_$239,$localinv] == $Heap_$_39[$o_$239,$localinv])) ));
	assume (((forall  $o_$240 : ref :: {$Heap_$_39[$o_$240,$allocated]} ( $Heap_$_38[$o_$240,$allocated] ==> $Heap_$_39[$o_$240,$allocated] ))) && ((forall  $ot_$39 : ref :: {$Heap_$_39[$ot_$39,$ownerFrame]} {$Heap_$_39[$ot_$39,$ownerRef]} ( ($Heap_$_38[$ot_$39,$allocated] && (!($Heap_$_38[$ot_$39,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_39[$ot_$39,$ownerRef] == $Heap_$_38[$ot_$39,$ownerRef]) && ($Heap_$_39[$ot_$39,$ownerFrame] == $Heap_$_38[$ot_$39,$ownerFrame])) )))) && ($Heap_$_38[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_39[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(stack50000o_$_4 == null);
	assume $Utter($Heap_$_39[stack50000o_$_4,$ownerRef]);
	assume $Utter($Heap_$_39[call5formal_$_$result_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$241 : ref, $f_$77 : Field (alpha)  :: {$Heap_$_39[$o_$241,$f_$77]} ( ((((((!($o_$241 == null)) && IncludeInMainFrameCondition($f_$77)) && $Heap[$o_$241,$allocated]) && ((($Heap[$o_$241,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$241,$ownerRef],$inv] <: $Heap[$o_$241,$ownerFrame]))) || ($Heap[$Heap[$o_$241,$ownerRef],$localinv] == $BaseClass($Heap[$o_$241,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$77) && $Heap_$_39[$o_$241,$allocated]) && ((($Heap_$_39[$o_$241,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_39[$Heap_$_39[$o_$241,$ownerRef],$inv] <: $Heap_$_39[$o_$241,$ownerFrame]))) || ($Heap_$_39[$Heap_$_39[$o_$241,$ownerRef],$localinv] == $BaseClass($Heap_$_39[$o_$241,$ownerFrame])))) && (((!($o_$241 == stack50000o_$_4)) || (!($typeof(stack50000o_$_4) <: DeclType($f_$77)))) || (!$IncludedInModifiesStar($f_$77)))) && true) ));
	assert  (forall  $pc_$22 : ref :: {$typeof($pc_$22)} {$Heap_$_39[$pc_$22,$localinv]} {$Heap_$_39[$pc_$22,$inv]} {$Heap_$_39[$pc_$22,$ownerFrame]} {$Heap_$_39[$pc_$22,$ownerRef]} ( ((((!($pc_$22 == null)) && $Heap_$_39[$pc_$22,$allocated]) && ($Heap_$_39[$pc_$22,$ownerRef] == $Heap_$_39[stack50000o_$_4,$ownerRef])) && ($Heap_$_39[$pc_$22,$ownerFrame] == $Heap_$_39[stack50000o_$_4,$ownerFrame])) ==> (($Heap_$_39[$pc_$22,$inv] == $typeof($pc_$22)) && ($Heap_$_39[$pc_$22,$localinv] == $typeof($pc_$22))) ));
	assert  (($Heap_$_39[stack50000o_$_4,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_39[$Heap_$_39[stack50000o_$_4,$ownerRef],$inv] <: $Heap_$_39[stack50000o_$_4,$ownerFrame]))) || ($Heap_$_39[$Heap_$_39[stack50000o_$_4,$ownerRef],$localinv] == $BaseClass($Heap_$_39[stack50000o_$_4,$ownerFrame]));
	assert  IsFrozen(call5formal_$_$result_$_0,$Heap_$_39);
	assume IsHeap($Heap_$_40);
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_40,stack50000o_$_4) == (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_39,stack50000o_$_4) + 1);
	assume (forall  $o_$242 : ref :: {$Heap_$_40[$o_$242,$localinv]} {$Heap_$_40[$o_$242,$inv]} ( (((!($o_$242 == null)) && (!$Heap_$_39[$o_$242,$allocated])) && $Heap_$_40[$o_$242,$allocated]) ==> (($Heap_$_40[$o_$242,$inv] == $typeof($o_$242)) && ($Heap_$_40[$o_$242,$localinv] == $typeof($o_$242))) ));
	assume (forall  $o_$243 : ref :: {$Heap_$_40[$o_$243,$FirstConsistentOwner]} ( ($Heap_$_39[$Heap_$_39[$o_$243,$FirstConsistentOwner],$exposeVersion] == $Heap_$_40[$Heap_$_39[$o_$243,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_39[$o_$243,$FirstConsistentOwner] == $Heap_$_40[$o_$243,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$244 : ref, $f_$78 : Field (alpha)  :: {$Heap_$_40[$o_$244,$f_$78]} ( ((((((!($o_$244 == null)) && IncludeInMainFrameCondition($f_$78)) && $Heap_$_39[$o_$244,$allocated]) && ((($Heap_$_39[$o_$244,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_39[$Heap_$_39[$o_$244,$ownerRef],$inv] <: $Heap_$_39[$o_$244,$ownerFrame]))) || ($Heap_$_39[$Heap_$_39[$o_$244,$ownerRef],$localinv] == $BaseClass($Heap_$_39[$o_$244,$ownerFrame])))) && (((!($o_$244 == stack50000o_$_4)) || (!($typeof(stack50000o_$_4) <: DeclType($f_$78)))) || (!$IncludedInModifiesStar($f_$78)))) && true) ==> ($Heap_$_39[$o_$244,$f_$78] == $Heap_$_40[$o_$244,$f_$78]) ));
	assume $HeapSucc($Heap_$_39,$Heap_$_40);
	assume (forall  $o_$245 : ref :: {$Heap_$_40[$o_$245,$localinv]} {$Heap_$_40[$o_$245,$inv]} ( $Heap_$_39[$o_$245,$allocated] ==> (($Heap_$_39[$o_$245,$inv] == $Heap_$_40[$o_$245,$inv]) && ($Heap_$_39[$o_$245,$localinv] == $Heap_$_40[$o_$245,$localinv])) ));
	assume (((forall  $o_$246 : ref :: {$Heap_$_40[$o_$246,$allocated]} ( $Heap_$_39[$o_$246,$allocated] ==> $Heap_$_40[$o_$246,$allocated] ))) && ((forall  $ot_$40 : ref :: {$Heap_$_40[$ot_$40,$ownerFrame]} {$Heap_$_40[$ot_$40,$ownerRef]} ( ($Heap_$_39[$ot_$40,$allocated] && (!($Heap_$_39[$ot_$40,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_40[$ot_$40,$ownerRef] == $Heap_$_39[$ot_$40,$ownerRef]) && ($Heap_$_40[$ot_$40,$ownerFrame] == $Heap_$_39[$ot_$40,$ownerFrame])) )))) && ($Heap_$_39[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_40[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  (forall  $o_$247 : ref :: {$Heap_$_40[$o_$247,$ownerFrame]} {$Heap_$_40[$o_$247,$ownerRef]} ( ((!($o_$247 == null)) && $Heap_$_40[$o_$247,$allocated]) ==> (($Heap_$_40[$o_$247,$ownerRef] == $Heap_$_40[$o_$247,$ownerRef]) && ($Heap_$_40[$o_$247,$ownerFrame] == $Heap_$_40[$o_$247,$ownerFrame])) ));
	goto block13957;
true13396to12478:
	assume call3formal_$_$result_$_0 == $stringLiteral9;
	goto block12478;
false13396to13583:
	assume !(call3formal_$_$result_$_0 == $stringLiteral9);
	if ($_$_condition_$17) { goto true13583to12478; } else { goto false13583to12937; }
block12733:
	assert  !(this == null);
	assume $Utter($Heap_$_72[this,$ownerRef]);
	assume $Utter($Heap_$_72[call3formal_$_$result_$_0_$8,$ownerRef]);
	assume $Utter($Heap_$_72[call3formal_$_$result_$_0_$9,$ownerRef]);
	assert  (forall<alpha> $o_$194 : ref, $f_$62 : Field (alpha)  :: {$Heap_$_72[$o_$194,$f_$62]} ( ((((((!($o_$194 == null)) && IncludeInMainFrameCondition($f_$62)) && $Heap[$o_$194,$allocated]) && ((($Heap[$o_$194,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$194,$ownerRef],$inv] <: $Heap[$o_$194,$ownerFrame]))) || ($Heap[$Heap[$o_$194,$ownerRef],$localinv] == $BaseClass($Heap[$o_$194,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$62) && $Heap_$_72[$o_$194,$allocated]) && ((($Heap_$_72[$o_$194,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_72[$Heap_$_72[$o_$194,$ownerRef],$inv] <: $Heap_$_72[$o_$194,$ownerFrame]))) || ($Heap_$_72[$Heap_$_72[$o_$194,$ownerRef],$localinv] == $BaseClass($Heap_$_72[$o_$194,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$10,SExpressionSimplifier.Nary) && $Heap[call5formal_$_$result_$10,$allocated];
	assert  IsFrozen(this,$Heap_$_72);
	assert  IsFrozen(call3formal_$_$result_$_0_$8,$Heap_$_72);
	assert  IsFrozen(call3formal_$_$result_$_0_$9,$Heap_$_72);
	assume IsHeap($Heap_$_73);
	assume $IsNotNull(call5formal_$_$result_$_0_$10,SExpressionSimplifier.Nary) && $Heap_$_73[call5formal_$_$result_$_0_$10,$allocated];
	assume IsFrozen(call5formal_$_$result_$_0_$10,$Heap_$_73);
	assume (forall  $o_$195 : ref :: {$Heap_$_73[$o_$195,$localinv]} {$Heap_$_73[$o_$195,$inv]} ( (((!($o_$195 == null)) && (!$Heap_$_72[$o_$195,$allocated])) && $Heap_$_73[$o_$195,$allocated]) ==> (($Heap_$_73[$o_$195,$inv] == $typeof($o_$195)) && ($Heap_$_73[$o_$195,$localinv] == $typeof($o_$195))) ));
	assume (forall  $o_$196 : ref :: {$Heap_$_73[$o_$196,$FirstConsistentOwner]} ( ($Heap_$_72[$Heap_$_72[$o_$196,$FirstConsistentOwner],$exposeVersion] == $Heap_$_73[$Heap_$_72[$o_$196,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_72[$o_$196,$FirstConsistentOwner] == $Heap_$_73[$o_$196,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$197 : ref, $f_$63 : Field (alpha)  :: {$Heap_$_73[$o_$197,$f_$63]} ( ((((((!($o_$197 == null)) && IncludeInMainFrameCondition($f_$63)) && $Heap_$_72[$o_$197,$allocated]) && ((($Heap_$_72[$o_$197,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_72[$Heap_$_72[$o_$197,$ownerRef],$inv] <: $Heap_$_72[$o_$197,$ownerFrame]))) || ($Heap_$_72[$Heap_$_72[$o_$197,$ownerRef],$localinv] == $BaseClass($Heap_$_72[$o_$197,$ownerFrame])))) && true) && true) ==> ($Heap_$_72[$o_$197,$f_$63] == $Heap_$_73[$o_$197,$f_$63]) ));
	assume $HeapSucc($Heap_$_72,$Heap_$_73);
	assume (forall  $o_$198 : ref :: {$Heap_$_73[$o_$198,$localinv]} {$Heap_$_73[$o_$198,$inv]} ( $Heap_$_72[$o_$198,$allocated] ==> (($Heap_$_72[$o_$198,$inv] == $Heap_$_73[$o_$198,$inv]) && ($Heap_$_72[$o_$198,$localinv] == $Heap_$_73[$o_$198,$localinv])) ));
	assume (((forall  $o_$199 : ref :: {$Heap_$_73[$o_$199,$allocated]} ( $Heap_$_72[$o_$199,$allocated] ==> $Heap_$_73[$o_$199,$allocated] ))) && ((forall  $ot_$32 : ref :: {$Heap_$_73[$ot_$32,$ownerFrame]} {$Heap_$_73[$ot_$32,$ownerRef]} ( ($Heap_$_72[$ot_$32,$allocated] && (!($Heap_$_72[$ot_$32,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_73[$ot_$32,$ownerRef] == $Heap_$_72[$ot_$32,$ownerRef]) && ($Heap_$_73[$ot_$32,$ownerFrame] == $Heap_$_72[$ot_$32,$ownerFrame])) )))) && ($Heap_$_72[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_73[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_73;
	assume return.value_$_0 == call5formal_$_$result_$_0_$10;
	goto block12750;
true13260to12733:
	assume !call3formal_$_$result_$_0_$13;
	assume $Heap_$_72 == $Heap_$_70;
	goto block12733;
false13260to13311:
	assume call3formal_$_$result_$_0_$13;
	assert  (forall<alpha> $o_$176 : ref, $f_$56 : Field (alpha)  :: {$Heap_$_70[$o_$176,$f_$56]} ( ((((((!($o_$176 == null)) && IncludeInMainFrameCondition($f_$56)) && $Heap[$o_$176,$allocated]) && ((($Heap[$o_$176,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$176,$ownerRef],$inv] <: $Heap[$o_$176,$ownerFrame]))) || ($Heap[$Heap[$o_$176,$ownerRef],$localinv] == $BaseClass($Heap[$o_$176,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$56) && $Heap_$_70[$o_$176,$allocated]) && ((($Heap_$_70[$o_$176,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_70[$Heap_$_70[$o_$176,$ownerRef],$inv] <: $Heap_$_70[$o_$176,$ownerFrame]))) || ($Heap_$_70[$Heap_$_70[$o_$176,$ownerRef],$localinv] == $BaseClass($Heap_$_70[$o_$176,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call2formal_$_$result_$2,SExpressionSimplifier.Sx) && $Heap[call2formal_$_$result_$2,$allocated];
	assume IsHeap($Heap_$_71);
	assume $IsNotNull(call2formal_$_$result_$_0_$2,SExpressionSimplifier.Sx) && $Heap_$_71[call2formal_$_$result_$_0_$2,$allocated];
	assume IsFrozen(call2formal_$_$result_$_0_$2,$Heap_$_71);
	assume (forall  $o_$177 : ref :: {$Heap_$_71[$o_$177,$localinv]} {$Heap_$_71[$o_$177,$inv]} ( (((!($o_$177 == null)) && (!$Heap_$_70[$o_$177,$allocated])) && $Heap_$_71[$o_$177,$allocated]) ==> (($Heap_$_71[$o_$177,$inv] == $typeof($o_$177)) && ($Heap_$_71[$o_$177,$localinv] == $typeof($o_$177))) ));
	assume (forall  $o_$178 : ref :: {$Heap_$_71[$o_$178,$FirstConsistentOwner]} ( ($Heap_$_70[$Heap_$_70[$o_$178,$FirstConsistentOwner],$exposeVersion] == $Heap_$_71[$Heap_$_70[$o_$178,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_70[$o_$178,$FirstConsistentOwner] == $Heap_$_71[$o_$178,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$179 : ref, $f_$57 : Field (alpha)  :: {$Heap_$_71[$o_$179,$f_$57]} ( ((((((!($o_$179 == null)) && IncludeInMainFrameCondition($f_$57)) && $Heap_$_70[$o_$179,$allocated]) && ((($Heap_$_70[$o_$179,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_70[$Heap_$_70[$o_$179,$ownerRef],$inv] <: $Heap_$_70[$o_$179,$ownerFrame]))) || ($Heap_$_70[$Heap_$_70[$o_$179,$ownerRef],$localinv] == $BaseClass($Heap_$_70[$o_$179,$ownerFrame])))) && true) && true) ==> ($Heap_$_70[$o_$179,$f_$57] == $Heap_$_71[$o_$179,$f_$57]) ));
	assume $HeapSucc($Heap_$_70,$Heap_$_71);
	assume (forall  $o_$180 : ref :: {$Heap_$_71[$o_$180,$localinv]} {$Heap_$_71[$o_$180,$inv]} ( $Heap_$_70[$o_$180,$allocated] ==> (($Heap_$_70[$o_$180,$inv] == $Heap_$_71[$o_$180,$inv]) && ($Heap_$_70[$o_$180,$localinv] == $Heap_$_71[$o_$180,$localinv])) ));
	assume (((forall  $o_$181 : ref :: {$Heap_$_71[$o_$181,$allocated]} ( $Heap_$_70[$o_$181,$allocated] ==> $Heap_$_71[$o_$181,$allocated] ))) && ((forall  $ot_$29 : ref :: {$Heap_$_71[$ot_$29,$ownerFrame]} {$Heap_$_71[$ot_$29,$ownerRef]} ( ($Heap_$_70[$ot_$29,$allocated] && (!($Heap_$_70[$ot_$29,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_71[$ot_$29,$ownerRef] == $Heap_$_70[$ot_$29,$ownerRef]) && ($Heap_$_71[$ot_$29,$ownerFrame] == $Heap_$_70[$ot_$29,$ownerFrame])) )))) && ($Heap_$_70[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_71[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_71;
	assume return.value_$_0 == call2formal_$_$result_$_0_$2;
	goto block12750;
true13583to12478:
	assume call3formal_$_$result_$_0 == $stringLiteral10;
	goto block12478;
false13583to12937:
	assume !(call3formal_$_$result_$_0 == $stringLiteral10);
	if ($_$_condition_$19) { goto true12937to12478; } else { goto false12937to13787; }
true13668to13719:
	assume !call3formal_$_$result_$_0_$6;
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume $Utter($Heap_$_52[call3formal_$_$result_$_0_$5,$ownerRef]);
	assert  (forall<alpha> $o_$200 : ref, $f_$64 : Field (alpha)  :: {$Heap_$_52[$o_$200,$f_$64]} ( ((((((!($o_$200 == null)) && IncludeInMainFrameCondition($f_$64)) && $Heap[$o_$200,$allocated]) && ((($Heap[$o_$200,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$200,$ownerRef],$inv] <: $Heap[$o_$200,$ownerFrame]))) || ($Heap[$Heap[$o_$200,$ownerRef],$localinv] == $BaseClass($Heap[$o_$200,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$64) && $Heap_$_52[$o_$200,$allocated]) && ((($Heap_$_52[$o_$200,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_52[$Heap_$_52[$o_$200,$ownerRef],$inv] <: $Heap_$_52[$o_$200,$ownerFrame]))) || ($Heap_$_52[$Heap_$_52[$o_$200,$ownerRef],$localinv] == $BaseClass($Heap_$_52[$o_$200,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  IsFrozen(call3formal_$_$result_$_0_$5,$Heap_$_52);
	assume IsHeap($Heap_$_53);
	assume true;
	assume $AsPureObject(call3formal_$_$result_$_0_$5) == call3formal_$_$result_$_0_$5;
	assume (forall  $o_$201 : ref :: {$Heap_$_53[$o_$201,$localinv]} {$Heap_$_53[$o_$201,$inv]} ( (((!($o_$201 == null)) && (!$Heap_$_52[$o_$201,$allocated])) && $Heap_$_53[$o_$201,$allocated]) ==> (($Heap_$_53[$o_$201,$inv] == $typeof($o_$201)) && ($Heap_$_53[$o_$201,$localinv] == $typeof($o_$201))) ));
	assume (forall  $o_$202 : ref :: {$Heap_$_53[$o_$202,$FirstConsistentOwner]} ( ($Heap_$_52[$Heap_$_52[$o_$202,$FirstConsistentOwner],$exposeVersion] == $Heap_$_53[$Heap_$_52[$o_$202,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_52[$o_$202,$FirstConsistentOwner] == $Heap_$_53[$o_$202,$FirstConsistentOwner]) ));
	assume $Heap_$_53 == $Heap_$_52;
	assume call3formal_$_$result_$_0_$7 <==> #SExpressionSimplifier.Sx.get_IsFalse($Heap_$_53,call3formal_$_$result_$_0_$5);
	assume (forall<alpha> $o_$203 : ref, $f_$65 : Field (alpha)  :: {$Heap_$_53[$o_$203,$f_$65]} ( ((((((!($o_$203 == null)) && IncludeInMainFrameCondition($f_$65)) && $Heap_$_52[$o_$203,$allocated]) && ((($Heap_$_52[$o_$203,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_52[$Heap_$_52[$o_$203,$ownerRef],$inv] <: $Heap_$_52[$o_$203,$ownerFrame]))) || ($Heap_$_52[$Heap_$_52[$o_$203,$ownerRef],$localinv] == $BaseClass($Heap_$_52[$o_$203,$ownerFrame])))) && true) && true) ==> ($Heap_$_52[$o_$203,$f_$65] == $Heap_$_53[$o_$203,$f_$65]) ));
	assume $HeapSucc($Heap_$_52,$Heap_$_53);
	assume (forall  $o_$204 : ref :: {$Heap_$_53[$o_$204,$localinv]} {$Heap_$_53[$o_$204,$inv]} ( $Heap_$_52[$o_$204,$allocated] ==> (($Heap_$_52[$o_$204,$inv] == $Heap_$_53[$o_$204,$inv]) && ($Heap_$_52[$o_$204,$localinv] == $Heap_$_53[$o_$204,$localinv])) ));
	assume (((forall  $o_$205 : ref :: {$Heap_$_53[$o_$205,$allocated]} ( $Heap_$_52[$o_$205,$allocated] ==> $Heap_$_53[$o_$205,$allocated] ))) && ((forall  $ot_$33 : ref :: {$Heap_$_53[$ot_$33,$ownerFrame]} {$Heap_$_53[$ot_$33,$ownerRef]} ( ($Heap_$_52[$ot_$33,$allocated] && (!($Heap_$_52[$ot_$33,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_53[$ot_$33,$ownerRef] == $Heap_$_52[$ot_$33,$ownerRef]) && ($Heap_$_53[$ot_$33,$ownerFrame] == $Heap_$_52[$ot_$33,$ownerFrame])) )))) && ($Heap_$_52[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_53[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$20) { goto true13719to12665; } else { goto false13719to12495; }
false13668to13923:
	assume call3formal_$_$result_$_0_$6;
	assert  (forall<alpha> $o_$206 : ref, $f_$66 : Field (alpha)  :: {$Heap_$_52[$o_$206,$f_$66]} ( ((((((!($o_$206 == null)) && IncludeInMainFrameCondition($f_$66)) && $Heap[$o_$206,$allocated]) && ((($Heap[$o_$206,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$206,$ownerRef],$inv] <: $Heap[$o_$206,$ownerFrame]))) || ($Heap[$Heap[$o_$206,$ownerRef],$localinv] == $BaseClass($Heap[$o_$206,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$66) && $Heap_$_52[$o_$206,$allocated]) && ((($Heap_$_52[$o_$206,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_52[$Heap_$_52[$o_$206,$ownerRef],$inv] <: $Heap_$_52[$o_$206,$ownerFrame]))) || ($Heap_$_52[$Heap_$_52[$o_$206,$ownerRef],$localinv] == $BaseClass($Heap_$_52[$o_$206,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call2formal_$_$result,SExpressionSimplifier.Sx) && $Heap[call2formal_$_$result,$allocated];
	assume IsHeap($Heap_$_54);
	assume $IsNotNull(call2formal_$_$result_$_0,SExpressionSimplifier.Sx) && $Heap_$_54[call2formal_$_$result_$_0,$allocated];
	assume IsFrozen(call2formal_$_$result_$_0,$Heap_$_54);
	assume (forall  $o_$207 : ref :: {$Heap_$_54[$o_$207,$localinv]} {$Heap_$_54[$o_$207,$inv]} ( (((!($o_$207 == null)) && (!$Heap_$_52[$o_$207,$allocated])) && $Heap_$_54[$o_$207,$allocated]) ==> (($Heap_$_54[$o_$207,$inv] == $typeof($o_$207)) && ($Heap_$_54[$o_$207,$localinv] == $typeof($o_$207))) ));
	assume (forall  $o_$208 : ref :: {$Heap_$_54[$o_$208,$FirstConsistentOwner]} ( ($Heap_$_52[$Heap_$_52[$o_$208,$FirstConsistentOwner],$exposeVersion] == $Heap_$_54[$Heap_$_52[$o_$208,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_52[$o_$208,$FirstConsistentOwner] == $Heap_$_54[$o_$208,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$209 : ref, $f_$67 : Field (alpha)  :: {$Heap_$_54[$o_$209,$f_$67]} ( ((((((!($o_$209 == null)) && IncludeInMainFrameCondition($f_$67)) && $Heap_$_52[$o_$209,$allocated]) && ((($Heap_$_52[$o_$209,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_52[$Heap_$_52[$o_$209,$ownerRef],$inv] <: $Heap_$_52[$o_$209,$ownerFrame]))) || ($Heap_$_52[$Heap_$_52[$o_$209,$ownerRef],$localinv] == $BaseClass($Heap_$_52[$o_$209,$ownerFrame])))) && true) && true) ==> ($Heap_$_52[$o_$209,$f_$67] == $Heap_$_54[$o_$209,$f_$67]) ));
	assume $HeapSucc($Heap_$_52,$Heap_$_54);
	assume (forall  $o_$210 : ref :: {$Heap_$_54[$o_$210,$localinv]} {$Heap_$_54[$o_$210,$inv]} ( $Heap_$_52[$o_$210,$allocated] ==> (($Heap_$_52[$o_$210,$inv] == $Heap_$_54[$o_$210,$inv]) && ($Heap_$_52[$o_$210,$localinv] == $Heap_$_54[$o_$210,$localinv])) ));
	assume (((forall  $o_$211 : ref :: {$Heap_$_54[$o_$211,$allocated]} ( $Heap_$_52[$o_$211,$allocated] ==> $Heap_$_54[$o_$211,$allocated] ))) && ((forall  $ot_$34 : ref :: {$Heap_$_54[$ot_$34,$ownerFrame]} {$Heap_$_54[$ot_$34,$ownerRef]} ( ($Heap_$_52[$ot_$34,$allocated] && (!($Heap_$_52[$ot_$34,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_54[$ot_$34,$ownerRef] == $Heap_$_52[$ot_$34,$ownerRef]) && ($Heap_$_54[$ot_$34,$ownerFrame] == $Heap_$_52[$ot_$34,$ownerFrame])) )))) && ($Heap_$_52[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_54[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_54;
	assume return.value_$_0 == call2formal_$_$result_$_0;
	goto block12750;
true12937to12478:
	assume call3formal_$_$result_$_0 == $stringLiteral12;
	goto block12478;
false12937to13787:
	assume !(call3formal_$_$result_$_0 == $stringLiteral12);
	if ($_$_condition_$21) { goto true13787to13379; } else { goto false13787to12614; }
true13719to12665:
	assume !call3formal_$_$result_$_0_$7;
	assume stack0o_$_15 == $As(call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary);
	if ($_$_condition_$22) { goto true12665to13039; } else { goto false12665to13906; }
false13719to12495:
	assume call3formal_$_$result_$_0_$7;
	assert  (forall<alpha> $o_$212 : ref, $f_$68 : Field (alpha)  :: {$Heap_$_53[$o_$212,$f_$68]} ( ((((((!($o_$212 == null)) && IncludeInMainFrameCondition($f_$68)) && $Heap[$o_$212,$allocated]) && ((($Heap[$o_$212,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$212,$ownerRef],$inv] <: $Heap[$o_$212,$ownerFrame]))) || ($Heap[$Heap[$o_$212,$ownerRef],$localinv] == $BaseClass($Heap[$o_$212,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$68) && $Heap_$_53[$o_$212,$allocated]) && ((($Heap_$_53[$o_$212,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_53[$Heap_$_53[$o_$212,$ownerRef],$inv] <: $Heap_$_53[$o_$212,$ownerFrame]))) || ($Heap_$_53[$Heap_$_53[$o_$212,$ownerRef],$localinv] == $BaseClass($Heap_$_53[$o_$212,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call2formal_$_$result_$1,SExpressionSimplifier.Sx) && $Heap[call2formal_$_$result_$1,$allocated];
	assume IsHeap($Heap_$_55);
	assume $IsNotNull(call2formal_$_$result_$_0_$1,SExpressionSimplifier.Sx) && $Heap_$_55[call2formal_$_$result_$_0_$1,$allocated];
	assume IsFrozen(call2formal_$_$result_$_0_$1,$Heap_$_55);
	assume (forall  $o_$213 : ref :: {$Heap_$_55[$o_$213,$localinv]} {$Heap_$_55[$o_$213,$inv]} ( (((!($o_$213 == null)) && (!$Heap_$_53[$o_$213,$allocated])) && $Heap_$_55[$o_$213,$allocated]) ==> (($Heap_$_55[$o_$213,$inv] == $typeof($o_$213)) && ($Heap_$_55[$o_$213,$localinv] == $typeof($o_$213))) ));
	assume (forall  $o_$214 : ref :: {$Heap_$_55[$o_$214,$FirstConsistentOwner]} ( ($Heap_$_53[$Heap_$_53[$o_$214,$FirstConsistentOwner],$exposeVersion] == $Heap_$_55[$Heap_$_53[$o_$214,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_53[$o_$214,$FirstConsistentOwner] == $Heap_$_55[$o_$214,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$215 : ref, $f_$69 : Field (alpha)  :: {$Heap_$_55[$o_$215,$f_$69]} ( ((((((!($o_$215 == null)) && IncludeInMainFrameCondition($f_$69)) && $Heap_$_53[$o_$215,$allocated]) && ((($Heap_$_53[$o_$215,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_53[$Heap_$_53[$o_$215,$ownerRef],$inv] <: $Heap_$_53[$o_$215,$ownerFrame]))) || ($Heap_$_53[$Heap_$_53[$o_$215,$ownerRef],$localinv] == $BaseClass($Heap_$_53[$o_$215,$ownerFrame])))) && true) && true) ==> ($Heap_$_53[$o_$215,$f_$69] == $Heap_$_55[$o_$215,$f_$69]) ));
	assume $HeapSucc($Heap_$_53,$Heap_$_55);
	assume (forall  $o_$216 : ref :: {$Heap_$_55[$o_$216,$localinv]} {$Heap_$_55[$o_$216,$inv]} ( $Heap_$_53[$o_$216,$allocated] ==> (($Heap_$_53[$o_$216,$inv] == $Heap_$_55[$o_$216,$inv]) && ($Heap_$_53[$o_$216,$localinv] == $Heap_$_55[$o_$216,$localinv])) ));
	assume (((forall  $o_$217 : ref :: {$Heap_$_55[$o_$217,$allocated]} ( $Heap_$_53[$o_$217,$allocated] ==> $Heap_$_55[$o_$217,$allocated] ))) && ((forall  $ot_$35 : ref :: {$Heap_$_55[$ot_$35,$ownerFrame]} {$Heap_$_55[$ot_$35,$ownerRef]} ( ($Heap_$_53[$ot_$35,$allocated] && (!($Heap_$_53[$ot_$35,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_55[$ot_$35,$ownerRef] == $Heap_$_53[$ot_$35,$ownerRef]) && ($Heap_$_55[$ot_$35,$ownerFrame] == $Heap_$_53[$ot_$35,$ownerFrame])) )))) && ($Heap_$_53[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_55[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_55;
	assume return.value_$_0 == call2formal_$_$result_$_0_$1;
	goto block12750;
true13787to13379:
	assume call3formal_$_$result_$_0 == $stringLiteral13;
	assert  !(this == null);
	assume stack0o_$_4 == $Heap_$_0[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_4 == null);
	assume $Utter($Heap_$_0[stack0o_$_4,$ownerRef]);
	assert  (forall<alpha> $o_$248 : ref, $f_$79 : Field (alpha)  :: {$Heap_$_0[$o_$248,$f_$79]} ( ((((((!($o_$248 == null)) && IncludeInMainFrameCondition($f_$79)) && $Heap[$o_$248,$allocated]) && ((($Heap[$o_$248,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$248,$ownerRef],$inv] <: $Heap[$o_$248,$ownerFrame]))) || ($Heap[$Heap[$o_$248,$ownerRef],$localinv] == $BaseClass($Heap[$o_$248,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$79) && $Heap_$_0[$o_$248,$allocated]) && ((($Heap_$_0[$o_$248,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$248,$ownerRef],$inv] <: $Heap_$_0[$o_$248,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$248,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$248,$ownerFrame])))) && true) && true) ));
	assume InRange(call4formal_$_$result,System.Int32);
	assert  (forall  $pc_$23 : ref :: {$typeof($pc_$23)} {$Heap_$_0[$pc_$23,$localinv]} {$Heap_$_0[$pc_$23,$inv]} {$Heap_$_0[$pc_$23,$ownerFrame]} {$Heap_$_0[$pc_$23,$ownerRef]} ( ((((!($pc_$23 == null)) && $Heap_$_0[$pc_$23,$allocated]) && ($Heap_$_0[$pc_$23,$ownerRef] == $Heap_$_0[stack0o_$_4,$ownerRef])) && ($Heap_$_0[$pc_$23,$ownerFrame] == $Heap_$_0[stack0o_$_4,$ownerFrame])) ==> (($Heap_$_0[$pc_$23,$inv] == $typeof($pc_$23)) && ($Heap_$_0[$pc_$23,$localinv] == $typeof($pc_$23))) ));
	assume IsHeap($Heap_$_23);
	assume InRange(call4formal_$_$result_$_0,System.Int32);
	assume call4formal_$_$result_$_0 >= 0;
	assume (((!($Heap_$_23[stack0o_$_4,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$inv] <: $Heap_$_23[stack0o_$_4,$ownerFrame])) && (!($Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$localinv] == $BaseClass($Heap_$_23[stack0o_$_4,$ownerFrame])))) ==> (((!(((!($Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_23[$Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerRef],$inv] <: $Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerFrame])) && (!($Heap_$_23[$Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_23[stack0o_$_4,$FirstConsistentOwner] == $Heap_$_23[stack0o_$_4,$ownerRef])) && ((((!($Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_23[$Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerRef],$inv] <: $Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerFrame])) && (!($Heap_$_23[$Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$ownerFrame])))) ==> ($Heap_$_23[stack0o_$_4,$FirstConsistentOwner] == $Heap_$_23[$Heap_$_23[stack0o_$_4,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_4) == stack0o_$_4;
	assume (forall  $o_$249 : ref :: {$Heap_$_23[$o_$249,$localinv]} {$Heap_$_23[$o_$249,$inv]} ( (((!($o_$249 == null)) && (!$Heap_$_0[$o_$249,$allocated])) && $Heap_$_23[$o_$249,$allocated]) ==> (($Heap_$_23[$o_$249,$inv] == $typeof($o_$249)) && ($Heap_$_23[$o_$249,$localinv] == $typeof($o_$249))) ));
	assume (forall  $o_$250 : ref :: {$Heap_$_23[$o_$250,$FirstConsistentOwner]} ( ($Heap_$_0[$Heap_$_0[$o_$250,$FirstConsistentOwner],$exposeVersion] == $Heap_$_23[$Heap_$_0[$o_$250,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_0[$o_$250,$FirstConsistentOwner] == $Heap_$_23[$o_$250,$FirstConsistentOwner]) ));
	assume $Heap_$_23 == $Heap_$_0;
	assume false || (call4formal_$_$result_$_0 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_23,stack0o_$_4));
	assume (forall<alpha> $o_$251 : ref, $f_$80 : Field (alpha)  :: {$Heap_$_23[$o_$251,$f_$80]} ( ((((((!($o_$251 == null)) && IncludeInMainFrameCondition($f_$80)) && $Heap_$_0[$o_$251,$allocated]) && ((($Heap_$_0[$o_$251,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_0[$Heap_$_0[$o_$251,$ownerRef],$inv] <: $Heap_$_0[$o_$251,$ownerFrame]))) || ($Heap_$_0[$Heap_$_0[$o_$251,$ownerRef],$localinv] == $BaseClass($Heap_$_0[$o_$251,$ownerFrame])))) && true) && true) ==> ($Heap_$_0[$o_$251,$f_$80] == $Heap_$_23[$o_$251,$f_$80]) ));
	assume $HeapSucc($Heap_$_0,$Heap_$_23);
	assume (forall  $o_$252 : ref :: {$Heap_$_23[$o_$252,$localinv]} {$Heap_$_23[$o_$252,$inv]} ( $Heap_$_0[$o_$252,$allocated] ==> (($Heap_$_0[$o_$252,$inv] == $Heap_$_23[$o_$252,$inv]) && ($Heap_$_0[$o_$252,$localinv] == $Heap_$_23[$o_$252,$localinv])) ));
	assume (((forall  $o_$253 : ref :: {$Heap_$_23[$o_$253,$allocated]} ( $Heap_$_0[$o_$253,$allocated] ==> $Heap_$_23[$o_$253,$allocated] ))) && ((forall  $ot_$41 : ref :: {$Heap_$_23[$ot_$41,$ownerFrame]} {$Heap_$_23[$ot_$41,$ownerRef]} ( ($Heap_$_0[$ot_$41,$allocated] && (!($Heap_$_0[$ot_$41,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_23[$ot_$41,$ownerRef] == $Heap_$_0[$ot_$41,$ownerRef]) && ($Heap_$_23[$ot_$41,$ownerFrame] == $Heap_$_0[$ot_$41,$ownerFrame])) )))) && ($Heap_$_0[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_23[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_23[$ElementProxy(stack50000o_$_3,0),$allocated] <==> false) && (!($ElementProxy(stack50000o_$_3,0) == null))) && (!($ElementProxy(stack50000o_$_3,0) == stack50000o_$_3));
	assume ($Heap_$_23[$ElementProxy(stack50000o_$_3,0),$ownerRef] == $ElementProxy(stack50000o_$_3,0)) && ($Heap_$_23[$ElementProxy(stack50000o_$_3,0),$ownerFrame] == $PeerGroupPlaceholder);
	assume call0formal_$_this_$_0 == $ElementProxy(stack50000o_$_3,0);
	assume IsHeap($Heap_$_24);
	assume $Heap_$_24[call0formal_$_this_$_0,$allocated];
	assume (((($Heap_$_24[call0formal_$_this_$_0,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_24[$Heap_$_24[call0formal_$_this_$_0,$ownerRef],$inv] <: $Heap_$_24[call0formal_$_this_$_0,$ownerFrame]))) || ($Heap_$_24[$Heap_$_24[call0formal_$_this_$_0,$ownerRef],$localinv] == $BaseClass($Heap_$_24[call0formal_$_this_$_0,$ownerFrame]))) && ($Heap_$_24[call0formal_$_this_$_0,$inv] == System.Object)) && ($Heap_$_24[call0formal_$_this_$_0,$localinv] == $typeof(call0formal_$_this_$_0));
	assume ($Heap_$_24[call0formal_$_this_$_0,$ownerRef] == $Heap_$_23[call0formal_$_this_$_0,$ownerRef]) && ($Heap_$_24[call0formal_$_this_$_0,$ownerFrame] == $Heap_$_23[call0formal_$_this_$_0,$ownerFrame]);
	assume (forall  $o_$254 : ref :: {$Heap_$_24[$o_$254,$localinv]} {$Heap_$_24[$o_$254,$inv]} ( (((!($o_$254 == null)) && (!$Heap_$_23[$o_$254,$allocated])) && $Heap_$_24[$o_$254,$allocated]) ==> (($Heap_$_24[$o_$254,$inv] == $typeof($o_$254)) && ($Heap_$_24[$o_$254,$localinv] == $typeof($o_$254))) ));
	assume (forall  $o_$255 : ref :: {$Heap_$_24[$o_$255,$FirstConsistentOwner]} ( ($Heap_$_23[$Heap_$_23[$o_$255,$FirstConsistentOwner],$exposeVersion] == $Heap_$_24[$Heap_$_23[$o_$255,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_23[$o_$255,$FirstConsistentOwner] == $Heap_$_24[$o_$255,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$256 : ref, $f_$81 : Field (alpha)  :: {$Heap_$_24[$o_$256,$f_$81]} ( (((((((!($o_$256 == null)) && IncludeInMainFrameCondition($f_$81)) && $Heap_$_23[$o_$256,$allocated]) && ((($Heap_$_23[$o_$256,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_23[$Heap_$_23[$o_$256,$ownerRef],$inv] <: $Heap_$_23[$o_$256,$ownerFrame]))) || ($Heap_$_23[$Heap_$_23[$o_$256,$ownerRef],$localinv] == $BaseClass($Heap_$_23[$o_$256,$ownerFrame])))) && ((!($o_$256 == call0formal_$_this_$_0)) || (!(System.Object <: DeclType($f_$81))))) && true) && true) ==> ($Heap_$_23[$o_$256,$f_$81] == $Heap_$_24[$o_$256,$f_$81]) ));
	assume $HeapSucc($Heap_$_23,$Heap_$_24);
	assume (forall  $o_$257 : ref :: {$Heap_$_24[$o_$257,$localinv]} {$Heap_$_24[$o_$257,$inv]} ( ($Heap_$_23[$o_$257,$allocated] && (!($o_$257 == call0formal_$_this_$_0))) ==> (($Heap_$_23[$o_$257,$inv] == $Heap_$_24[$o_$257,$inv]) && ($Heap_$_23[$o_$257,$localinv] == $Heap_$_24[$o_$257,$localinv])) ));
	assume (((forall  $o_$258 : ref :: {$Heap_$_24[$o_$258,$allocated]} ( $Heap_$_23[$o_$258,$allocated] ==> $Heap_$_24[$o_$258,$allocated] ))) && ((forall  $ot_$42 : ref :: {$Heap_$_24[$ot_$42,$ownerFrame]} {$Heap_$_24[$ot_$42,$ownerRef]} ( ($Heap_$_23[$ot_$42,$allocated] && (!($Heap_$_23[$ot_$42,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_24[$ot_$42,$ownerRef] == $Heap_$_23[$ot_$42,$ownerRef]) && ($Heap_$_24[$ot_$42,$ownerFrame] == $Heap_$_23[$ot_$42,$ownerFrame])) )))) && ($Heap_$_23[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_24[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_24[stack50000o_$_3,$allocated] <==> false) && (!(stack50000o_$_3 == null))) && ($typeof(stack50000o_$_3) == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx);
	assume ($Heap_$_24[stack50000o_$_3,$ownerRef] == stack50000o_$_3) && ($Heap_$_24[stack50000o_$_3,$ownerFrame] == $PeerGroupPlaceholder);
	assert  !(stack50000o_$_3 == null);
	assume $Utter($Heap_$_24[stack50000o_$_3,$ownerRef]);
	assert  (forall<alpha> $o_$259 : ref, $f_$82 : Field (alpha)  :: {$Heap_$_24[$o_$259,$f_$82]} ( ((((((!($o_$259 == null)) && IncludeInMainFrameCondition($f_$82)) && $Heap[$o_$259,$allocated]) && ((($Heap[$o_$259,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$259,$ownerRef],$inv] <: $Heap[$o_$259,$ownerFrame]))) || ($Heap[$Heap[$o_$259,$ownerRef],$localinv] == $BaseClass($Heap[$o_$259,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$82) && $Heap_$_24[$o_$259,$allocated]) && ((($Heap_$_24[$o_$259,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_24[$Heap_$_24[$o_$259,$ownerRef],$inv] <: $Heap_$_24[$o_$259,$ownerFrame]))) || ($Heap_$_24[$Heap_$_24[$o_$259,$ownerRef],$localinv] == $BaseClass($Heap_$_24[$o_$259,$ownerFrame])))) && ((!($o_$259 == stack50000o_$_3)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$82))))) && true) && true) ));
	assume IsHeap($Heap_$_25);
	assume $Heap_$_25[stack50000o_$_3,$allocated];
	assume (((($Heap_$_25[stack50000o_$_3,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_25[$Heap_$_25[stack50000o_$_3,$ownerRef],$inv] <: $Heap_$_25[stack50000o_$_3,$ownerFrame]))) || ($Heap_$_25[$Heap_$_25[stack50000o_$_3,$ownerRef],$localinv] == $BaseClass($Heap_$_25[stack50000o_$_3,$ownerFrame]))) && ($Heap_$_25[stack50000o_$_3,$inv] == System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx)) && ($Heap_$_25[stack50000o_$_3,$localinv] == $typeof(stack50000o_$_3));
	assume ($Heap_$_25[stack50000o_$_3,$ownerRef] == $Heap_$_24[stack50000o_$_3,$ownerRef]) && ($Heap_$_25[stack50000o_$_3,$ownerFrame] == $Heap_$_24[stack50000o_$_3,$ownerFrame]);
	assume (forall  $o_$260 : ref :: {$Heap_$_25[$o_$260,$localinv]} {$Heap_$_25[$o_$260,$inv]} ( (((!($o_$260 == null)) && (!$Heap_$_24[$o_$260,$allocated])) && $Heap_$_25[$o_$260,$allocated]) ==> (($Heap_$_25[$o_$260,$inv] == $typeof($o_$260)) && ($Heap_$_25[$o_$260,$localinv] == $typeof($o_$260))) ));
	assume (forall  $o_$261 : ref :: {$Heap_$_25[$o_$261,$FirstConsistentOwner]} ( ($Heap_$_24[$Heap_$_24[$o_$261,$FirstConsistentOwner],$exposeVersion] == $Heap_$_25[$Heap_$_24[$o_$261,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_24[$o_$261,$FirstConsistentOwner] == $Heap_$_25[$o_$261,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$262 : ref, $f_$83 : Field (alpha)  :: {$Heap_$_25[$o_$262,$f_$83]} ( (((((((!($o_$262 == null)) && IncludeInMainFrameCondition($f_$83)) && $Heap_$_24[$o_$262,$allocated]) && ((($Heap_$_24[$o_$262,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_24[$Heap_$_24[$o_$262,$ownerRef],$inv] <: $Heap_$_24[$o_$262,$ownerFrame]))) || ($Heap_$_24[$Heap_$_24[$o_$262,$ownerRef],$localinv] == $BaseClass($Heap_$_24[$o_$262,$ownerFrame])))) && ((!($o_$262 == stack50000o_$_3)) || (!(System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx <: DeclType($f_$83))))) && true) && true) ==> ($Heap_$_24[$o_$262,$f_$83] == $Heap_$_25[$o_$262,$f_$83]) ));
	assume $HeapSucc($Heap_$_24,$Heap_$_25);
	assume (forall  $o_$263 : ref :: {$Heap_$_25[$o_$263,$localinv]} {$Heap_$_25[$o_$263,$inv]} ( ($Heap_$_24[$o_$263,$allocated] && (!($o_$263 == stack50000o_$_3))) ==> (($Heap_$_24[$o_$263,$inv] == $Heap_$_25[$o_$263,$inv]) && ($Heap_$_24[$o_$263,$localinv] == $Heap_$_25[$o_$263,$localinv])) ));
	assume (((forall  $o_$264 : ref :: {$Heap_$_25[$o_$264,$allocated]} ( $Heap_$_24[$o_$264,$allocated] ==> $Heap_$_25[$o_$264,$allocated] ))) && ((forall  $ot_$43 : ref :: {$Heap_$_25[$ot_$43,$ownerFrame]} {$Heap_$_25[$ot_$43,$ownerRef]} ( ($Heap_$_24[$ot_$43,$allocated] && (!($Heap_$_24[$ot_$43,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_25[$ot_$43,$ownerRef] == $Heap_$_24[$ot_$43,$ownerRef]) && ($Heap_$_25[$ot_$43,$ownerFrame] == $Heap_$_24[$ot_$43,$ownerFrame])) )))) && ($Heap_$_24[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_25[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  $Heap_$_25[$ElementProxy(stack50000o_$_3,0),$ownerFrame] == $PeerGroupPlaceholder;
	assert  (forall  $pc_$24 : ref :: {$typeof($pc_$24)} {$Heap_$_25[$pc_$24,$localinv]} {$Heap_$_25[$pc_$24,$inv]} {$Heap_$_25[$pc_$24,$ownerFrame]} {$Heap_$_25[$pc_$24,$ownerRef]} ( ((((!($pc_$24 == null)) && $Heap_$_25[$pc_$24,$allocated]) && ($Heap_$_25[$pc_$24,$ownerRef] == $Heap_$_25[$ElementProxy(stack50000o_$_3,0),$ownerRef])) && ($Heap_$_25[$pc_$24,$ownerFrame] == $Heap_$_25[$ElementProxy(stack50000o_$_3,0),$ownerFrame])) ==> (($Heap_$_25[$pc_$24,$inv] == $typeof($pc_$24)) && ($Heap_$_25[$pc_$24,$localinv] == $typeof($pc_$24))) ));
	assume call0formal_$_x_$_0 == $ElementProxy(stack50000o_$_3,0);
	assume IsHeap($Heap_$_26);
	assume (forall<alpha> p_$15 : ref, F_$3 : Field (alpha)  :: {$Heap_$_26[p_$15,F_$3]} ( ((((!(F_$3 == $ownerRef)) && (!(F_$3 == $ownerFrame))) && (!(F_$3 == $FirstConsistentOwner))) || ((!($Heap_$_25[p_$15,$ownerRef] == $Heap_$_25[call0formal_$_x_$_0,$ownerRef])) || (!($Heap_$_25[p_$15,$ownerFrame] == $Heap_$_25[call0formal_$_x_$_0,$ownerFrame])))) ==> ($Heap_$_25[p_$15,F_$3] == $Heap_$_26[p_$15,F_$3]) ));
	assume (call0formal_$_x_$_0 == null) ==> ($Heap_$_26 == $Heap_$_25);
	assume (!(call0formal_$_x_$_0 == null)) ==> ((forall  p_$16 : ref :: {$Heap_$_26[p_$16,$ownerRef]} {$Heap_$_26[p_$16,$ownerFrame]} ( (($Heap_$_25[p_$16,$ownerRef] == $Heap_$_25[call0formal_$_x_$_0,$ownerRef]) && ($Heap_$_25[p_$16,$ownerFrame] == $Heap_$_25[call0formal_$_x_$_0,$ownerFrame])) ==> (($Heap_$_26[p_$16,$ownerRef] == $freezerRef) && ($Heap_$_26[p_$16,$ownerFrame] == $Freezer)) )));
	assume $HeapSucc($Heap_$_25,$Heap_$_26);
	assert  !(this == null);
	assume local18_$_0 == $Heap_$_26[this,SExpressionSimplifier.Nary.Args];
	assert  !(local18_$_0 == null);
	assume $Utter($Heap_$_26[local18_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$265 : ref, $f_$84 : Field (alpha)  :: {$Heap_$_26[$o_$265,$f_$84]} ( ((((((!($o_$265 == null)) && IncludeInMainFrameCondition($f_$84)) && $Heap[$o_$265,$allocated]) && ((($Heap[$o_$265,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$265,$ownerRef],$inv] <: $Heap[$o_$265,$ownerFrame]))) || ($Heap[$Heap[$o_$265,$ownerRef],$localinv] == $BaseClass($Heap[$o_$265,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$84) && $Heap_$_26[$o_$265,$allocated]) && ((($Heap_$_26[$o_$265,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_26[$Heap_$_26[$o_$265,$ownerRef],$inv] <: $Heap_$_26[$o_$265,$ownerFrame]))) || ($Heap_$_26[$Heap_$_26[$o_$265,$ownerRef],$localinv] == $BaseClass($Heap_$_26[$o_$265,$ownerFrame])))) && true) && true) ));
	assume IsAllocated($Heap,call3formal_$_$result_$1);
	assert  (forall  $pc_$25 : ref :: {$typeof($pc_$25)} {$Heap_$_26[$pc_$25,$localinv]} {$Heap_$_26[$pc_$25,$inv]} {$Heap_$_26[$pc_$25,$ownerFrame]} {$Heap_$_26[$pc_$25,$ownerRef]} ( ((((!($pc_$25 == null)) && $Heap_$_26[$pc_$25,$allocated]) && ($Heap_$_26[$pc_$25,$ownerRef] == $Heap_$_26[local18_$_0,$ownerRef])) && ($Heap_$_26[$pc_$25,$ownerFrame] == $Heap_$_26[local18_$_0,$ownerFrame])) ==> (($Heap_$_26[$pc_$25,$inv] == $typeof($pc_$25)) && ($Heap_$_26[$pc_$25,$localinv] == $typeof($pc_$25))) ));
	assume IsHeap($Heap_$_27);
	assume IsAllocated($Heap_$_27,call3formal_$_$result_$_0_$1);
	assume (((!($Heap_$_27[local18_$_0,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$inv] <: $Heap_$_27[local18_$_0,$ownerFrame])) && (!($Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$localinv] == $BaseClass($Heap_$_27[local18_$_0,$ownerFrame])))) ==> (((!(((!($Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_27[$Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerRef],$inv] <: $Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerFrame])) && (!($Heap_$_27[$Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_27[local18_$_0,$FirstConsistentOwner] == $Heap_$_27[local18_$_0,$ownerRef])) && ((((!($Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_27[$Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerRef],$inv] <: $Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerFrame])) && (!($Heap_$_27[$Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$ownerFrame])))) ==> ($Heap_$_27[local18_$_0,$FirstConsistentOwner] == $Heap_$_27[$Heap_$_27[local18_$_0,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(local18_$_0) == local18_$_0;
	assume (forall  $o_$266 : ref :: {$Heap_$_27[$o_$266,$localinv]} {$Heap_$_27[$o_$266,$inv]} ( (((!($o_$266 == null)) && (!$Heap_$_26[$o_$266,$allocated])) && $Heap_$_27[$o_$266,$allocated]) ==> (($Heap_$_27[$o_$266,$inv] == $typeof($o_$266)) && ($Heap_$_27[$o_$266,$localinv] == $typeof($o_$266))) ));
	assume (forall  $o_$267 : ref :: {$Heap_$_27[$o_$267,$FirstConsistentOwner]} ( ($Heap_$_26[$Heap_$_26[$o_$267,$FirstConsistentOwner],$exposeVersion] == $Heap_$_27[$Heap_$_26[$o_$267,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_26[$o_$267,$FirstConsistentOwner] == $Heap_$_27[$o_$267,$FirstConsistentOwner]) ));
	assume $Heap_$_27 == $Heap_$_26;
	assume call3formal_$_$result_$_0_$1 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.GetEnumerator($Heap_$_27,local18_$_0);
	assume (forall<alpha> $o_$268 : ref, $f_$85 : Field (alpha)  :: {$Heap_$_27[$o_$268,$f_$85]} ( ((((((!($o_$268 == null)) && IncludeInMainFrameCondition($f_$85)) && $Heap_$_26[$o_$268,$allocated]) && ((($Heap_$_26[$o_$268,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_26[$Heap_$_26[$o_$268,$ownerRef],$inv] <: $Heap_$_26[$o_$268,$ownerFrame]))) || ($Heap_$_26[$Heap_$_26[$o_$268,$ownerRef],$localinv] == $BaseClass($Heap_$_26[$o_$268,$ownerFrame])))) && true) && true) ==> ($Heap_$_26[$o_$268,$f_$85] == $Heap_$_27[$o_$268,$f_$85]) ));
	assume $HeapSucc($Heap_$_26,$Heap_$_27);
	assume (forall  $o_$269 : ref :: {$Heap_$_27[$o_$269,$localinv]} {$Heap_$_27[$o_$269,$inv]} ( $Heap_$_26[$o_$269,$allocated] ==> (($Heap_$_26[$o_$269,$inv] == $Heap_$_27[$o_$269,$inv]) && ($Heap_$_26[$o_$269,$localinv] == $Heap_$_27[$o_$269,$localinv])) ));
	assume (((forall  $o_$270 : ref :: {$Heap_$_27[$o_$270,$allocated]} ( $Heap_$_26[$o_$270,$allocated] ==> $Heap_$_27[$o_$270,$allocated] ))) && ((forall  $ot_$44 : ref :: {$Heap_$_27[$ot_$44,$ownerFrame]} {$Heap_$_27[$ot_$44,$ownerRef]} ( ($Heap_$_26[$ot_$44,$allocated] && (!($Heap_$_26[$ot_$44,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_27[$ot_$44,$ownerRef] == $Heap_$_26[$ot_$44,$ownerRef]) && ($Heap_$_27[$ot_$44,$ownerFrame] == $Heap_$_26[$ot_$44,$ownerFrame])) )))) && ($Heap_$_26[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_27[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  (forall  $o_$271 : ref :: {$Heap_$_27[$o_$271,$ownerFrame]} {$Heap_$_27[$o_$271,$ownerRef]} ( ((!($o_$271 == null)) && $Heap_$_27[$o_$271,$allocated]) ==> (($Heap_$_27[$o_$271,$ownerRef] == $Heap_$_27[$o_$271,$ownerRef]) && ($Heap_$_27[$o_$271,$ownerFrame] == $Heap_$_27[$o_$271,$ownerFrame])) ));
	goto block13685;
false13787to12614:
	assume !(call3formal_$_$result_$_0 == $stringLiteral13);
	assume $Heap_$_28 == $Heap_$_0;
	goto block13073;
true12665to13039:
	assume stack0o_$_15 == null;
	assume $Heap_$_66 == $Heap_$_53;
	goto block13039;
false12665to13906:
	assume !(stack0o_$_15 == null);
	assert  $Is(call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary);
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume stack0o_$_16 == $Heap_$_53[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.F];
	assume $Utter($Heap_$_53[stack0o_$_16,$ownerRef]);
	assume $Utter($Heap_$_53[$stringLiteral14,$ownerRef]);
	assert  (forall<alpha> $o_$272 : ref, $f_$86 : Field (alpha)  :: {$Heap_$_53[$o_$272,$f_$86]} ( ((((((!($o_$272 == null)) && IncludeInMainFrameCondition($f_$86)) && $Heap[$o_$272,$allocated]) && ((($Heap[$o_$272,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$272,$ownerRef],$inv] <: $Heap[$o_$272,$ownerFrame]))) || ($Heap[$Heap[$o_$272,$ownerRef],$localinv] == $BaseClass($Heap[$o_$272,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$86) && $Heap_$_53[$o_$272,$allocated]) && ((($Heap_$_53[$o_$272,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_53[$Heap_$_53[$o_$272,$ownerRef],$inv] <: $Heap_$_53[$o_$272,$ownerFrame]))) || ($Heap_$_53[$Heap_$_53[$o_$272,$ownerRef],$localinv] == $BaseClass($Heap_$_53[$o_$272,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  (stack0o_$_16 == null) || IsFrozen(stack0o_$_16,$Heap_$_53);
	assert  ($stringLiteral14 == null) || IsFrozen($stringLiteral14,$Heap_$_53);
	assume IsHeap($Heap_$_56);
	assume true;
	assume ((!(stack0o_$_16 == null)) && (stack0o_$_16 == $stringLiteral14)) ==> call4formal_$_$result_$_0_$8;
	assume $AsPureObject(stack0o_$_16) == stack0o_$_16;
	assume $AsPureObject($stringLiteral14) == $stringLiteral14;
	assume (forall  $o_$273 : ref :: {$Heap_$_56[$o_$273,$localinv]} {$Heap_$_56[$o_$273,$inv]} ( (((!($o_$273 == null)) && (!$Heap_$_53[$o_$273,$allocated])) && $Heap_$_56[$o_$273,$allocated]) ==> (($Heap_$_56[$o_$273,$inv] == $typeof($o_$273)) && ($Heap_$_56[$o_$273,$localinv] == $typeof($o_$273))) ));
	assume (forall  $o_$274 : ref :: {$Heap_$_56[$o_$274,$FirstConsistentOwner]} ( ($Heap_$_53[$Heap_$_53[$o_$274,$FirstConsistentOwner],$exposeVersion] == $Heap_$_56[$Heap_$_53[$o_$274,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_53[$o_$274,$FirstConsistentOwner] == $Heap_$_56[$o_$274,$FirstConsistentOwner]) ));
	assume $Heap_$_56 == $Heap_$_53;
	assume call4formal_$_$result_$_0_$8 <==> #System.String.Equals$System.String$System.String($Heap_$_56,stack0o_$_16,$stringLiteral14);
	assume (forall<alpha> $o_$275 : ref, $f_$87 : Field (alpha)  :: {$Heap_$_56[$o_$275,$f_$87]} ( ((((((!($o_$275 == null)) && IncludeInMainFrameCondition($f_$87)) && $Heap_$_53[$o_$275,$allocated]) && ((($Heap_$_53[$o_$275,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_53[$Heap_$_53[$o_$275,$ownerRef],$inv] <: $Heap_$_53[$o_$275,$ownerFrame]))) || ($Heap_$_53[$Heap_$_53[$o_$275,$ownerRef],$localinv] == $BaseClass($Heap_$_53[$o_$275,$ownerFrame])))) && true) && true) ==> ($Heap_$_53[$o_$275,$f_$87] == $Heap_$_56[$o_$275,$f_$87]) ));
	assume $HeapSucc($Heap_$_53,$Heap_$_56);
	assume (forall  $o_$276 : ref :: {$Heap_$_56[$o_$276,$localinv]} {$Heap_$_56[$o_$276,$inv]} ( $Heap_$_53[$o_$276,$allocated] ==> (($Heap_$_53[$o_$276,$inv] == $Heap_$_56[$o_$276,$inv]) && ($Heap_$_53[$o_$276,$localinv] == $Heap_$_56[$o_$276,$localinv])) ));
	assume (((forall  $o_$277 : ref :: {$Heap_$_56[$o_$277,$allocated]} ( $Heap_$_53[$o_$277,$allocated] ==> $Heap_$_56[$o_$277,$allocated] ))) && ((forall  $ot_$45 : ref :: {$Heap_$_56[$ot_$45,$ownerFrame]} {$Heap_$_56[$ot_$45,$ownerRef]} ( ($Heap_$_53[$ot_$45,$allocated] && (!($Heap_$_53[$ot_$45,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_56[$ot_$45,$ownerRef] == $Heap_$_53[$ot_$45,$ownerRef]) && ($Heap_$_56[$ot_$45,$ownerFrame] == $Heap_$_53[$ot_$45,$ownerFrame])) )))) && ($Heap_$_53[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_56[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$23) { goto true13906to13770; } else { goto false13906to12461; }
block13957:
	assume IsHeap($Heap_$_41);
	assume InRange(local17_$_0,System.Int32);
	assume InRange(i_$_0,System.Int32);
	assume ((0 <= stack1i_$_0) && (0 <= stack0i_$_0)) && (1 <= i_$_0);
	assume (((forall  $o_$278 : ref :: {$Heap_$_41[$o_$278,$allocated]} ( $Heap_$_40[$o_$278,$allocated] ==> $Heap_$_41[$o_$278,$allocated] ))) && ((forall  $ot_$46 : ref :: {$Heap_$_41[$ot_$46,$ownerFrame]} {$Heap_$_41[$ot_$46,$ownerRef]} ( ($Heap_$_40[$ot_$46,$allocated] && (!($Heap_$_40[$ot_$46,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_41[$ot_$46,$ownerRef] == $Heap_$_40[$ot_$46,$ownerRef]) && ($Heap_$_41[$ot_$46,$ownerFrame] == $Heap_$_40[$ot_$46,$ownerFrame])) )))) && ($Heap_$_40[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_41[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (forall  $o_$279 : ref :: {$Heap_$_41[$o_$279,$localinv]} {$Heap_$_41[$o_$279,$inv]} ( $Heap_$_40[$o_$279,$allocated] ==> (($Heap_$_40[$o_$279,$inv] == $Heap_$_41[$o_$279,$inv]) && ($Heap_$_40[$o_$279,$localinv] == $Heap_$_41[$o_$279,$localinv])) ));
	assume (forall  $o_$280 : ref :: ( ((!$Heap_$_40[$o_$280,$allocated]) && $Heap_$_41[$o_$280,$allocated]) ==> (($Heap_$_41[$o_$280,$inv] == $typeof($o_$280)) && ($Heap_$_41[$o_$280,$localinv] == $typeof($o_$280))) ));
	assume $Heap_$_41[this,$inv] == $Heap_$_40[this,$inv];
	assume (forall<alpha> $o_$281 : ref, $f_$88 : Field (alpha)  :: {$Heap_$_41[$o_$281,$f_$88]} ( ((((((!($o_$281 == null)) && IncludeInMainFrameCondition($f_$88)) && $Heap[$o_$281,$allocated]) && ((($Heap[$o_$281,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$281,$ownerRef],$inv] <: $Heap[$o_$281,$ownerFrame]))) || ($Heap[$Heap[$o_$281,$ownerRef],$localinv] == $BaseClass($Heap[$o_$281,$ownerFrame])))) && true) && true) ==> ($Heap_$_40[$o_$281,$f_$88] == $Heap_$_41[$o_$281,$f_$88]) ));
	assume $HeapSucc($Heap_$_40,$Heap_$_41);
	assume (forall  $o_$282 : ref :: {$Heap_$_41[$o_$282,$ownerFrame]} {$Heap_$_41[$o_$282,$ownerRef]} ( ((!($o_$282 == null)) && $Heap_$_40[$o_$282,$allocated]) ==> (($Heap_$_41[$o_$282,$ownerRef] == $Heap_$_40[$o_$282,$ownerRef]) && ($Heap_$_41[$o_$282,$ownerFrame] == $Heap_$_40[$o_$282,$ownerFrame])) ));
	assert  !(this == null);
	assume stack0o_$_11 == $Heap_$_41[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_11 == null);
	assume $Utter($Heap_$_41[stack0o_$_11,$ownerRef]);
	assert  (forall<alpha> $o_$283 : ref, $f_$89 : Field (alpha)  :: {$Heap_$_41[$o_$283,$f_$89]} ( ((((((!($o_$283 == null)) && IncludeInMainFrameCondition($f_$89)) && $Heap[$o_$283,$allocated]) && ((($Heap[$o_$283,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$283,$ownerRef],$inv] <: $Heap[$o_$283,$ownerFrame]))) || ($Heap[$Heap[$o_$283,$ownerRef],$localinv] == $BaseClass($Heap[$o_$283,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$89) && $Heap_$_41[$o_$283,$allocated]) && ((($Heap_$_41[$o_$283,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_41[$Heap_$_41[$o_$283,$ownerRef],$inv] <: $Heap_$_41[$o_$283,$ownerFrame]))) || ($Heap_$_41[$Heap_$_41[$o_$283,$ownerRef],$localinv] == $BaseClass($Heap_$_41[$o_$283,$ownerFrame])))) && true) && true) ));
	assume InRange(call4formal_$_$result_$4,System.Int32);
	assert  (forall  $pc_$26 : ref :: {$typeof($pc_$26)} {$Heap_$_41[$pc_$26,$localinv]} {$Heap_$_41[$pc_$26,$inv]} {$Heap_$_41[$pc_$26,$ownerFrame]} {$Heap_$_41[$pc_$26,$ownerRef]} ( ((((!($pc_$26 == null)) && $Heap_$_41[$pc_$26,$allocated]) && ($Heap_$_41[$pc_$26,$ownerRef] == $Heap_$_41[stack0o_$_11,$ownerRef])) && ($Heap_$_41[$pc_$26,$ownerFrame] == $Heap_$_41[stack0o_$_11,$ownerFrame])) ==> (($Heap_$_41[$pc_$26,$inv] == $typeof($pc_$26)) && ($Heap_$_41[$pc_$26,$localinv] == $typeof($pc_$26))) ));
	assume IsHeap($Heap_$_42);
	assume InRange(call4formal_$_$result_$_0_$5,System.Int32);
	assume call4formal_$_$result_$_0_$5 >= 0;
	assume (((!($Heap_$_42[stack0o_$_11,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$inv] <: $Heap_$_42[stack0o_$_11,$ownerFrame])) && (!($Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$localinv] == $BaseClass($Heap_$_42[stack0o_$_11,$ownerFrame])))) ==> (((!(((!($Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_42[$Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerRef],$inv] <: $Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerFrame])) && (!($Heap_$_42[$Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_42[stack0o_$_11,$FirstConsistentOwner] == $Heap_$_42[stack0o_$_11,$ownerRef])) && ((((!($Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_42[$Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerRef],$inv] <: $Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerFrame])) && (!($Heap_$_42[$Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$ownerFrame])))) ==> ($Heap_$_42[stack0o_$_11,$FirstConsistentOwner] == $Heap_$_42[$Heap_$_42[stack0o_$_11,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_11) == stack0o_$_11;
	assume (forall  $o_$284 : ref :: {$Heap_$_42[$o_$284,$localinv]} {$Heap_$_42[$o_$284,$inv]} ( (((!($o_$284 == null)) && (!$Heap_$_41[$o_$284,$allocated])) && $Heap_$_42[$o_$284,$allocated]) ==> (($Heap_$_42[$o_$284,$inv] == $typeof($o_$284)) && ($Heap_$_42[$o_$284,$localinv] == $typeof($o_$284))) ));
	assume (forall  $o_$285 : ref :: {$Heap_$_42[$o_$285,$FirstConsistentOwner]} ( ($Heap_$_41[$Heap_$_41[$o_$285,$FirstConsistentOwner],$exposeVersion] == $Heap_$_42[$Heap_$_41[$o_$285,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_41[$o_$285,$FirstConsistentOwner] == $Heap_$_42[$o_$285,$FirstConsistentOwner]) ));
	assume $Heap_$_42 == $Heap_$_41;
	assume false || (call4formal_$_$result_$_0_$5 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_42,stack0o_$_11));
	assume (forall<alpha> $o_$286 : ref, $f_$90 : Field (alpha)  :: {$Heap_$_42[$o_$286,$f_$90]} ( ((((((!($o_$286 == null)) && IncludeInMainFrameCondition($f_$90)) && $Heap_$_41[$o_$286,$allocated]) && ((($Heap_$_41[$o_$286,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_41[$Heap_$_41[$o_$286,$ownerRef],$inv] <: $Heap_$_41[$o_$286,$ownerFrame]))) || ($Heap_$_41[$Heap_$_41[$o_$286,$ownerRef],$localinv] == $BaseClass($Heap_$_41[$o_$286,$ownerFrame])))) && true) && true) ==> ($Heap_$_41[$o_$286,$f_$90] == $Heap_$_42[$o_$286,$f_$90]) ));
	assume $HeapSucc($Heap_$_41,$Heap_$_42);
	assume (forall  $o_$287 : ref :: {$Heap_$_42[$o_$287,$localinv]} {$Heap_$_42[$o_$287,$inv]} ( $Heap_$_41[$o_$287,$allocated] ==> (($Heap_$_41[$o_$287,$inv] == $Heap_$_42[$o_$287,$inv]) && ($Heap_$_41[$o_$287,$localinv] == $Heap_$_42[$o_$287,$localinv])) ));
	assume (((forall  $o_$288 : ref :: {$Heap_$_42[$o_$288,$allocated]} ( $Heap_$_41[$o_$288,$allocated] ==> $Heap_$_42[$o_$288,$allocated] ))) && ((forall  $ot_$47 : ref :: {$Heap_$_42[$ot_$47,$ownerFrame]} {$Heap_$_42[$ot_$47,$ownerRef]} ( ($Heap_$_41[$ot_$47,$allocated] && (!($Heap_$_41[$ot_$47,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_42[$ot_$47,$ownerRef] == $Heap_$_41[$ot_$47,$ownerRef]) && ($Heap_$_42[$ot_$47,$ownerFrame] == $Heap_$_41[$ot_$47,$ownerFrame])) )))) && ($Heap_$_41[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_42[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$24) { goto true13957to13974; } else { goto false13957to13447; }
block13685:
	assume IsAllocated($Heap_$_29,foreachEnumerator^.33574638_$_0);
	assume IsHeap($Heap_$_29);
	assume ($Is(local20_$_0,SExpressionSimplifier.Sx) && $Heap_$_29[local20_$_0,$allocated]) && ((!(local20_$_0 == null)) ==> IsFrozen(local20_$_0,$Heap_$_29));
	assume ($Is(arg_$_0,SExpressionSimplifier.Sx) && $Heap_$_29[arg_$_0,$allocated]) && ((!(arg_$_0 == null)) ==> IsFrozen(arg_$_0,$Heap_$_29));
	assume 0 <= call4formal_$_$result_$_0;
	assume (((forall  $o_$289 : ref :: {$Heap_$_29[$o_$289,$allocated]} ( $Heap_$_27[$o_$289,$allocated] ==> $Heap_$_29[$o_$289,$allocated] ))) && ((forall  $ot_$48 : ref :: {$Heap_$_29[$ot_$48,$ownerFrame]} {$Heap_$_29[$ot_$48,$ownerRef]} ( ($Heap_$_27[$ot_$48,$allocated] && (!($Heap_$_27[$ot_$48,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_29[$ot_$48,$ownerRef] == $Heap_$_27[$ot_$48,$ownerRef]) && ($Heap_$_29[$ot_$48,$ownerFrame] == $Heap_$_27[$ot_$48,$ownerFrame])) )))) && ($Heap_$_27[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_29[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (forall  $o_$290 : ref :: {$Heap_$_29[$o_$290,$localinv]} {$Heap_$_29[$o_$290,$inv]} ( $Heap_$_27[$o_$290,$allocated] ==> (($Heap_$_27[$o_$290,$inv] == $Heap_$_29[$o_$290,$inv]) && ($Heap_$_27[$o_$290,$localinv] == $Heap_$_29[$o_$290,$localinv])) ));
	assume (forall  $o_$291 : ref :: ( ((!$Heap_$_27[$o_$291,$allocated]) && $Heap_$_29[$o_$291,$allocated]) ==> (($Heap_$_29[$o_$291,$inv] == $typeof($o_$291)) && ($Heap_$_29[$o_$291,$localinv] == $typeof($o_$291))) ));
	assume $Heap_$_29[this,$inv] == $Heap_$_27[this,$inv];
	assume (forall<alpha> $o_$292 : ref, $f_$91 : Field (alpha)  :: {$Heap_$_29[$o_$292,$f_$91]} ( ((((((!($o_$292 == null)) && IncludeInMainFrameCondition($f_$91)) && $Heap[$o_$292,$allocated]) && ((($Heap[$o_$292,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$292,$ownerRef],$inv] <: $Heap[$o_$292,$ownerFrame]))) || ($Heap[$Heap[$o_$292,$ownerRef],$localinv] == $BaseClass($Heap[$o_$292,$ownerFrame])))) && true) && true) ==> ($Heap_$_27[$o_$292,$f_$91] == $Heap_$_29[$o_$292,$f_$91]) ));
	assume $HeapSucc($Heap_$_27,$Heap_$_29);
	assume (forall  $o_$293 : ref :: {$Heap_$_29[$o_$293,$ownerFrame]} {$Heap_$_29[$o_$293,$ownerRef]} ( ((!($o_$293 == null)) && $Heap_$_27[$o_$293,$allocated]) ==> (($Heap_$_29[$o_$293,$ownerRef] == $Heap_$_27[$o_$293,$ownerRef]) && ($Heap_$_29[$o_$293,$ownerFrame] == $Heap_$_27[$o_$293,$ownerFrame])) ));
	assert  (forall<alpha> $o_$294 : ref, $f_$92 : Field (alpha)  :: {$Heap_$_29[$o_$294,$f_$92]} ( ((((((!($o_$294 == null)) && IncludeInMainFrameCondition($f_$92)) && $Heap[$o_$294,$allocated]) && ((($Heap[$o_$294,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$294,$ownerRef],$inv] <: $Heap[$o_$294,$ownerFrame]))) || ($Heap[$Heap[$o_$294,$ownerRef],$localinv] == $BaseClass($Heap[$o_$294,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$92) && $Heap_$_29[$o_$294,$allocated]) && ((($Heap_$_29[$o_$294,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_29[$Heap_$_29[$o_$294,$ownerRef],$inv] <: $Heap_$_29[$o_$294,$ownerFrame]))) || ($Heap_$_29[$Heap_$_29[$o_$294,$ownerRef],$localinv] == $BaseClass($Heap_$_29[$o_$294,$ownerFrame])))) && true) && true) ));
	assume true;
	assume IsHeap($Heap_$_30);
	assume true;
	assume (forall  $o_$295 : ref :: {$Heap_$_30[$o_$295,$localinv]} {$Heap_$_30[$o_$295,$inv]} ( (((!($o_$295 == null)) && (!$Heap_$_29[$o_$295,$allocated])) && $Heap_$_30[$o_$295,$allocated]) ==> (($Heap_$_30[$o_$295,$inv] == $typeof($o_$295)) && ($Heap_$_30[$o_$295,$localinv] == $typeof($o_$295))) ));
	assume (forall  $o_$296 : ref :: {$Heap_$_30[$o_$296,$FirstConsistentOwner]} ( ($Heap_$_29[$Heap_$_29[$o_$296,$FirstConsistentOwner],$exposeVersion] == $Heap_$_30[$Heap_$_29[$o_$296,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_29[$o_$296,$FirstConsistentOwner] == $Heap_$_30[$o_$296,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$297 : ref, $f_$93 : Field (alpha)  :: {$Heap_$_30[$o_$297,$f_$93]} ( ((((((!($o_$297 == null)) && IncludeInMainFrameCondition($f_$93)) && $Heap_$_29[$o_$297,$allocated]) && ((($Heap_$_29[$o_$297,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_29[$Heap_$_29[$o_$297,$ownerRef],$inv] <: $Heap_$_29[$o_$297,$ownerFrame]))) || ($Heap_$_29[$Heap_$_29[$o_$297,$ownerRef],$localinv] == $BaseClass($Heap_$_29[$o_$297,$ownerFrame])))) && true) && true) ==> ($Heap_$_29[$o_$297,$f_$93] == $Heap_$_30[$o_$297,$f_$93]) ));
	assume $HeapSucc($Heap_$_29,$Heap_$_30);
	assume (forall  $o_$298 : ref :: {$Heap_$_30[$o_$298,$localinv]} {$Heap_$_30[$o_$298,$inv]} ( $Heap_$_29[$o_$298,$allocated] ==> (($Heap_$_29[$o_$298,$inv] == $Heap_$_30[$o_$298,$inv]) && ($Heap_$_29[$o_$298,$localinv] == $Heap_$_30[$o_$298,$localinv])) ));
	assume (((forall  $o_$299 : ref :: {$Heap_$_30[$o_$299,$allocated]} ( $Heap_$_29[$o_$299,$allocated] ==> $Heap_$_30[$o_$299,$allocated] ))) && ((forall  $ot_$49 : ref :: {$Heap_$_30[$ot_$49,$ownerFrame]} {$Heap_$_30[$ot_$49,$ownerRef]} ( ($Heap_$_29[$ot_$49,$allocated] && (!($Heap_$_29[$ot_$49,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_30[$ot_$49,$ownerRef] == $Heap_$_29[$ot_$49,$ownerRef]) && ($Heap_$_30[$ot_$49,$ownerFrame] == $Heap_$_29[$ot_$49,$ownerFrame])) )))) && ($Heap_$_29[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_30[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$25) { goto true13685to12529; } else { goto false13685to13056; }
block13039:
	assert  !(this == null);
	assume $Utter($Heap_$_66[this,$ownerRef]);
	assume $Utter($Heap_$_66[call3formal_$_$result_$_0_$5,$ownerRef]);
	assert  (forall<alpha> $o_$392 : ref, $f_$124 : Field (alpha)  :: {$Heap_$_66[$o_$392,$f_$124]} ( ((((((!($o_$392 == null)) && IncludeInMainFrameCondition($f_$124)) && $Heap[$o_$392,$allocated]) && ((($Heap[$o_$392,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$392,$ownerRef],$inv] <: $Heap[$o_$392,$ownerFrame]))) || ($Heap[$Heap[$o_$392,$ownerRef],$localinv] == $BaseClass($Heap[$o_$392,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$124) && $Heap_$_66[$o_$392,$allocated]) && ((($Heap_$_66[$o_$392,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_66[$Heap_$_66[$o_$392,$ownerRef],$inv] <: $Heap_$_66[$o_$392,$ownerFrame]))) || ($Heap_$_66[$Heap_$_66[$o_$392,$ownerRef],$localinv] == $BaseClass($Heap_$_66[$o_$392,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call4formal_$_$result_$6,SExpressionSimplifier.Nary) && $Heap[call4formal_$_$result_$6,$allocated];
	assert  IsFrozen(this,$Heap_$_66);
	assert  IsFrozen(call3formal_$_$result_$_0_$5,$Heap_$_66);
	assume IsHeap($Heap_$_67);
	assume $IsNotNull(call4formal_$_$result_$_0_$10,SExpressionSimplifier.Nary) && $Heap_$_67[call4formal_$_$result_$_0_$10,$allocated];
	assume IsFrozen(call4formal_$_$result_$_0_$10,$Heap_$_67);
	assume (forall  $o_$393 : ref :: {$Heap_$_67[$o_$393,$localinv]} {$Heap_$_67[$o_$393,$inv]} ( (((!($o_$393 == null)) && (!$Heap_$_66[$o_$393,$allocated])) && $Heap_$_67[$o_$393,$allocated]) ==> (($Heap_$_67[$o_$393,$inv] == $typeof($o_$393)) && ($Heap_$_67[$o_$393,$localinv] == $typeof($o_$393))) ));
	assume (forall  $o_$394 : ref :: {$Heap_$_67[$o_$394,$FirstConsistentOwner]} ( ($Heap_$_66[$Heap_$_66[$o_$394,$FirstConsistentOwner],$exposeVersion] == $Heap_$_67[$Heap_$_66[$o_$394,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_66[$o_$394,$FirstConsistentOwner] == $Heap_$_67[$o_$394,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$395 : ref, $f_$125 : Field (alpha)  :: {$Heap_$_67[$o_$395,$f_$125]} ( ((((((!($o_$395 == null)) && IncludeInMainFrameCondition($f_$125)) && $Heap_$_66[$o_$395,$allocated]) && ((($Heap_$_66[$o_$395,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_66[$Heap_$_66[$o_$395,$ownerRef],$inv] <: $Heap_$_66[$o_$395,$ownerFrame]))) || ($Heap_$_66[$Heap_$_66[$o_$395,$ownerRef],$localinv] == $BaseClass($Heap_$_66[$o_$395,$ownerFrame])))) && true) && true) ==> ($Heap_$_66[$o_$395,$f_$125] == $Heap_$_67[$o_$395,$f_$125]) ));
	assume $HeapSucc($Heap_$_66,$Heap_$_67);
	assume (forall  $o_$396 : ref :: {$Heap_$_67[$o_$396,$localinv]} {$Heap_$_67[$o_$396,$inv]} ( $Heap_$_66[$o_$396,$allocated] ==> (($Heap_$_66[$o_$396,$inv] == $Heap_$_67[$o_$396,$inv]) && ($Heap_$_66[$o_$396,$localinv] == $Heap_$_67[$o_$396,$localinv])) ));
	assume (((forall  $o_$397 : ref :: {$Heap_$_67[$o_$397,$allocated]} ( $Heap_$_66[$o_$397,$allocated] ==> $Heap_$_67[$o_$397,$allocated] ))) && ((forall  $ot_$65 : ref :: {$Heap_$_67[$ot_$65,$ownerFrame]} {$Heap_$_67[$ot_$65,$ownerRef]} ( ($Heap_$_66[$ot_$65,$allocated] && (!($Heap_$_66[$ot_$65,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_67[$ot_$65,$ownerRef] == $Heap_$_66[$ot_$65,$ownerRef]) && ($Heap_$_67[$ot_$65,$ownerFrame] == $Heap_$_66[$ot_$65,$ownerFrame])) )))) && ($Heap_$_66[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_67[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_67;
	assume return.value_$_0 == call4formal_$_$result_$_0_$10;
	goto block12750;
true13906to13770:
	assume !call4formal_$_$result_$_0_$8;
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume stack0o_$_17 == $Heap_$_56[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.F];
	assume $Utter($Heap_$_56[stack0o_$_17,$ownerRef]);
	assume $Utter($Heap_$_56[$stringLiteral15,$ownerRef]);
	assert  (forall<alpha> $o_$300 : ref, $f_$94 : Field (alpha)  :: {$Heap_$_56[$o_$300,$f_$94]} ( ((((((!($o_$300 == null)) && IncludeInMainFrameCondition($f_$94)) && $Heap[$o_$300,$allocated]) && ((($Heap[$o_$300,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$300,$ownerRef],$inv] <: $Heap[$o_$300,$ownerFrame]))) || ($Heap[$Heap[$o_$300,$ownerRef],$localinv] == $BaseClass($Heap[$o_$300,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$94) && $Heap_$_56[$o_$300,$allocated]) && ((($Heap_$_56[$o_$300,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_56[$Heap_$_56[$o_$300,$ownerRef],$inv] <: $Heap_$_56[$o_$300,$ownerFrame]))) || ($Heap_$_56[$Heap_$_56[$o_$300,$ownerRef],$localinv] == $BaseClass($Heap_$_56[$o_$300,$ownerFrame])))) && true) && true) ));
	assume true;
	assert  (stack0o_$_17 == null) || IsFrozen(stack0o_$_17,$Heap_$_56);
	assert  ($stringLiteral15 == null) || IsFrozen($stringLiteral15,$Heap_$_56);
	assume IsHeap($Heap_$_57);
	assume true;
	assume ((!(stack0o_$_17 == null)) && (stack0o_$_17 == $stringLiteral15)) ==> call4formal_$_$result_$_0_$9;
	assume $AsPureObject(stack0o_$_17) == stack0o_$_17;
	assume $AsPureObject($stringLiteral15) == $stringLiteral15;
	assume (forall  $o_$301 : ref :: {$Heap_$_57[$o_$301,$localinv]} {$Heap_$_57[$o_$301,$inv]} ( (((!($o_$301 == null)) && (!$Heap_$_56[$o_$301,$allocated])) && $Heap_$_57[$o_$301,$allocated]) ==> (($Heap_$_57[$o_$301,$inv] == $typeof($o_$301)) && ($Heap_$_57[$o_$301,$localinv] == $typeof($o_$301))) ));
	assume (forall  $o_$302 : ref :: {$Heap_$_57[$o_$302,$FirstConsistentOwner]} ( ($Heap_$_56[$Heap_$_56[$o_$302,$FirstConsistentOwner],$exposeVersion] == $Heap_$_57[$Heap_$_56[$o_$302,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_56[$o_$302,$FirstConsistentOwner] == $Heap_$_57[$o_$302,$FirstConsistentOwner]) ));
	assume $Heap_$_57 == $Heap_$_56;
	assume call4formal_$_$result_$_0_$9 <==> #System.String.Equals$System.String$System.String($Heap_$_57,stack0o_$_17,$stringLiteral15);
	assume (forall<alpha> $o_$303 : ref, $f_$95 : Field (alpha)  :: {$Heap_$_57[$o_$303,$f_$95]} ( ((((((!($o_$303 == null)) && IncludeInMainFrameCondition($f_$95)) && $Heap_$_56[$o_$303,$allocated]) && ((($Heap_$_56[$o_$303,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_56[$Heap_$_56[$o_$303,$ownerRef],$inv] <: $Heap_$_56[$o_$303,$ownerFrame]))) || ($Heap_$_56[$Heap_$_56[$o_$303,$ownerRef],$localinv] == $BaseClass($Heap_$_56[$o_$303,$ownerFrame])))) && true) && true) ==> ($Heap_$_56[$o_$303,$f_$95] == $Heap_$_57[$o_$303,$f_$95]) ));
	assume $HeapSucc($Heap_$_56,$Heap_$_57);
	assume (forall  $o_$304 : ref :: {$Heap_$_57[$o_$304,$localinv]} {$Heap_$_57[$o_$304,$inv]} ( $Heap_$_56[$o_$304,$allocated] ==> (($Heap_$_56[$o_$304,$inv] == $Heap_$_57[$o_$304,$inv]) && ($Heap_$_56[$o_$304,$localinv] == $Heap_$_57[$o_$304,$localinv])) ));
	assume (((forall  $o_$305 : ref :: {$Heap_$_57[$o_$305,$allocated]} ( $Heap_$_56[$o_$305,$allocated] ==> $Heap_$_57[$o_$305,$allocated] ))) && ((forall  $ot_$50 : ref :: {$Heap_$_57[$ot_$50,$ownerFrame]} {$Heap_$_57[$ot_$50,$ownerRef]} ( ($Heap_$_56[$ot_$50,$allocated] && (!($Heap_$_56[$ot_$50,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_57[$ot_$50,$ownerRef] == $Heap_$_56[$ot_$50,$ownerRef]) && ($Heap_$_57[$ot_$50,$ownerFrame] == $Heap_$_56[$ot_$50,$ownerFrame])) )))) && ($Heap_$_56[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_57[$BeingConstructed,$NonNullFieldsAreInitialized]);
	if ($_$_condition_$26) { goto true13770to12835; } else { goto false13770to13498; }
false13906to12461:
	assume call4formal_$_$result_$_0_$8;
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_56,$Heap_$_56[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.Args]) == 2;
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume stack1o_$_2 == $Heap_$_56[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.Args];
	assert  !(stack1o_$_2 == null);
	assume $Utter($Heap_$_56[stack1o_$_2,$ownerRef]);
	assert  (forall<alpha> $o_$306 : ref, $f_$96 : Field (alpha)  :: {$Heap_$_56[$o_$306,$f_$96]} ( ((((((!($o_$306 == null)) && IncludeInMainFrameCondition($f_$96)) && $Heap[$o_$306,$allocated]) && ((($Heap[$o_$306,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$306,$ownerRef],$inv] <: $Heap[$o_$306,$ownerFrame]))) || ($Heap[$Heap[$o_$306,$ownerRef],$localinv] == $BaseClass($Heap[$o_$306,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$96) && $Heap_$_56[$o_$306,$allocated]) && ((($Heap_$_56[$o_$306,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_56[$Heap_$_56[$o_$306,$ownerRef],$inv] <: $Heap_$_56[$o_$306,$ownerFrame]))) || ($Heap_$_56[$Heap_$_56[$o_$306,$ownerRef],$localinv] == $BaseClass($Heap_$_56[$o_$306,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$4,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$4,$allocated];
	assert  0 <= 0;
	assert  0 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_56,stack1o_$_2);
	assert  (forall  $pc_$27 : ref :: {$typeof($pc_$27)} {$Heap_$_56[$pc_$27,$localinv]} {$Heap_$_56[$pc_$27,$inv]} {$Heap_$_56[$pc_$27,$ownerFrame]} {$Heap_$_56[$pc_$27,$ownerRef]} ( ((((!($pc_$27 == null)) && $Heap_$_56[$pc_$27,$allocated]) && ($Heap_$_56[$pc_$27,$ownerRef] == $Heap_$_56[stack1o_$_2,$ownerRef])) && ($Heap_$_56[$pc_$27,$ownerFrame] == $Heap_$_56[stack1o_$_2,$ownerFrame])) ==> (($Heap_$_56[$pc_$27,$inv] == $typeof($pc_$27)) && ($Heap_$_56[$pc_$27,$localinv] == $typeof($pc_$27))) ));
	assume IsHeap($Heap_$_58);
	assume $IsNotNull(call5formal_$_$result_$_0_$4,SExpressionSimplifier.Sx) && $Heap_$_58[call5formal_$_$result_$_0_$4,$allocated];
	assume $Heap_$_56[call5formal_$_$result_$_0_$4,$allocated];
	assume (((!($Heap_$_58[stack1o_$_2,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$inv] <: $Heap_$_58[stack1o_$_2,$ownerFrame])) && (!($Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$localinv] == $BaseClass($Heap_$_58[stack1o_$_2,$ownerFrame])))) ==> (((!(((!($Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_58[$Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerRef],$inv] <: $Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerFrame])) && (!($Heap_$_58[$Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_58[stack1o_$_2,$FirstConsistentOwner] == $Heap_$_58[stack1o_$_2,$ownerRef])) && ((((!($Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_58[$Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerRef],$inv] <: $Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerFrame])) && (!($Heap_$_58[$Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$ownerFrame])))) ==> ($Heap_$_58[stack1o_$_2,$FirstConsistentOwner] == $Heap_$_58[$Heap_$_58[stack1o_$_2,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack1o_$_2) == stack1o_$_2;
	assume IsFrozen(call5formal_$_$result_$_0_$4,$Heap_$_58);
	assume (forall  $o_$307 : ref :: {$Heap_$_58[$o_$307,$localinv]} {$Heap_$_58[$o_$307,$inv]} ( (((!($o_$307 == null)) && (!$Heap_$_56[$o_$307,$allocated])) && $Heap_$_58[$o_$307,$allocated]) ==> (($Heap_$_58[$o_$307,$inv] == $typeof($o_$307)) && ($Heap_$_58[$o_$307,$localinv] == $typeof($o_$307))) ));
	assume (forall  $o_$308 : ref :: {$Heap_$_58[$o_$308,$FirstConsistentOwner]} ( ($Heap_$_56[$Heap_$_56[$o_$308,$FirstConsistentOwner],$exposeVersion] == $Heap_$_58[$Heap_$_56[$o_$308,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_56[$o_$308,$FirstConsistentOwner] == $Heap_$_58[$o_$308,$FirstConsistentOwner]) ));
	assume $Heap_$_58 == $Heap_$_56;
	assume false || (call5formal_$_$result_$_0_$4 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_58,stack1o_$_2,0));
	assume (forall<alpha> $o_$309 : ref, $f_$97 : Field (alpha)  :: {$Heap_$_58[$o_$309,$f_$97]} ( ((((((!($o_$309 == null)) && IncludeInMainFrameCondition($f_$97)) && $Heap_$_56[$o_$309,$allocated]) && ((($Heap_$_56[$o_$309,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_56[$Heap_$_56[$o_$309,$ownerRef],$inv] <: $Heap_$_56[$o_$309,$ownerFrame]))) || ($Heap_$_56[$Heap_$_56[$o_$309,$ownerRef],$localinv] == $BaseClass($Heap_$_56[$o_$309,$ownerFrame])))) && true) && true) ==> ($Heap_$_56[$o_$309,$f_$97] == $Heap_$_58[$o_$309,$f_$97]) ));
	assume $HeapSucc($Heap_$_56,$Heap_$_58);
	assume (forall  $o_$310 : ref :: {$Heap_$_58[$o_$310,$localinv]} {$Heap_$_58[$o_$310,$inv]} ( $Heap_$_56[$o_$310,$allocated] ==> (($Heap_$_56[$o_$310,$inv] == $Heap_$_58[$o_$310,$inv]) && ($Heap_$_56[$o_$310,$localinv] == $Heap_$_58[$o_$310,$localinv])) ));
	assume (((forall  $o_$311 : ref :: {$Heap_$_58[$o_$311,$allocated]} ( $Heap_$_56[$o_$311,$allocated] ==> $Heap_$_58[$o_$311,$allocated] ))) && ((forall  $ot_$51 : ref :: {$Heap_$_58[$ot_$51,$ownerFrame]} {$Heap_$_58[$ot_$51,$ownerRef]} ( ($Heap_$_56[$ot_$51,$allocated] && (!($Heap_$_56[$ot_$51,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_58[$ot_$51,$ownerRef] == $Heap_$_56[$ot_$51,$ownerRef]) && ($Heap_$_58[$ot_$51,$ownerFrame] == $Heap_$_56[$ot_$51,$ownerFrame])) )))) && ($Heap_$_56[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_58[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume stack2o_$_0 == $Heap_$_58[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.Args];
	assert  !(stack2o_$_0 == null);
	assume $Utter($Heap_$_58[stack2o_$_0,$ownerRef]);
	assert  (forall<alpha> $o_$312 : ref, $f_$98 : Field (alpha)  :: {$Heap_$_58[$o_$312,$f_$98]} ( ((((((!($o_$312 == null)) && IncludeInMainFrameCondition($f_$98)) && $Heap[$o_$312,$allocated]) && ((($Heap[$o_$312,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$312,$ownerRef],$inv] <: $Heap[$o_$312,$ownerFrame]))) || ($Heap[$Heap[$o_$312,$ownerRef],$localinv] == $BaseClass($Heap[$o_$312,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$98) && $Heap_$_58[$o_$312,$allocated]) && ((($Heap_$_58[$o_$312,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_58[$Heap_$_58[$o_$312,$ownerRef],$inv] <: $Heap_$_58[$o_$312,$ownerFrame]))) || ($Heap_$_58[$Heap_$_58[$o_$312,$ownerRef],$localinv] == $BaseClass($Heap_$_58[$o_$312,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$5,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$5,$allocated];
	assert  0 <= 1;
	assert  1 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_58,stack2o_$_0);
	assert  (forall  $pc_$28 : ref :: {$typeof($pc_$28)} {$Heap_$_58[$pc_$28,$localinv]} {$Heap_$_58[$pc_$28,$inv]} {$Heap_$_58[$pc_$28,$ownerFrame]} {$Heap_$_58[$pc_$28,$ownerRef]} ( ((((!($pc_$28 == null)) && $Heap_$_58[$pc_$28,$allocated]) && ($Heap_$_58[$pc_$28,$ownerRef] == $Heap_$_58[stack2o_$_0,$ownerRef])) && ($Heap_$_58[$pc_$28,$ownerFrame] == $Heap_$_58[stack2o_$_0,$ownerFrame])) ==> (($Heap_$_58[$pc_$28,$inv] == $typeof($pc_$28)) && ($Heap_$_58[$pc_$28,$localinv] == $typeof($pc_$28))) ));
	assume IsHeap($Heap_$_59);
	assume $IsNotNull(call5formal_$_$result_$_0_$5,SExpressionSimplifier.Sx) && $Heap_$_59[call5formal_$_$result_$_0_$5,$allocated];
	assume $Heap_$_58[call5formal_$_$result_$_0_$5,$allocated];
	assume (((!($Heap_$_59[stack2o_$_0,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$inv] <: $Heap_$_59[stack2o_$_0,$ownerFrame])) && (!($Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$localinv] == $BaseClass($Heap_$_59[stack2o_$_0,$ownerFrame])))) ==> (((!(((!($Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_59[$Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerRef],$inv] <: $Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerFrame])) && (!($Heap_$_59[$Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_59[stack2o_$_0,$FirstConsistentOwner] == $Heap_$_59[stack2o_$_0,$ownerRef])) && ((((!($Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_59[$Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerRef],$inv] <: $Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerFrame])) && (!($Heap_$_59[$Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$ownerFrame])))) ==> ($Heap_$_59[stack2o_$_0,$FirstConsistentOwner] == $Heap_$_59[$Heap_$_59[stack2o_$_0,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack2o_$_0) == stack2o_$_0;
	assume IsFrozen(call5formal_$_$result_$_0_$5,$Heap_$_59);
	assume (forall  $o_$313 : ref :: {$Heap_$_59[$o_$313,$localinv]} {$Heap_$_59[$o_$313,$inv]} ( (((!($o_$313 == null)) && (!$Heap_$_58[$o_$313,$allocated])) && $Heap_$_59[$o_$313,$allocated]) ==> (($Heap_$_59[$o_$313,$inv] == $typeof($o_$313)) && ($Heap_$_59[$o_$313,$localinv] == $typeof($o_$313))) ));
	assume (forall  $o_$314 : ref :: {$Heap_$_59[$o_$314,$FirstConsistentOwner]} ( ($Heap_$_58[$Heap_$_58[$o_$314,$FirstConsistentOwner],$exposeVersion] == $Heap_$_59[$Heap_$_58[$o_$314,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_58[$o_$314,$FirstConsistentOwner] == $Heap_$_59[$o_$314,$FirstConsistentOwner]) ));
	assume $Heap_$_59 == $Heap_$_58;
	assume false || (call5formal_$_$result_$_0_$5 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_59,stack2o_$_0,1));
	assume (forall<alpha> $o_$315 : ref, $f_$99 : Field (alpha)  :: {$Heap_$_59[$o_$315,$f_$99]} ( ((((((!($o_$315 == null)) && IncludeInMainFrameCondition($f_$99)) && $Heap_$_58[$o_$315,$allocated]) && ((($Heap_$_58[$o_$315,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_58[$Heap_$_58[$o_$315,$ownerRef],$inv] <: $Heap_$_58[$o_$315,$ownerFrame]))) || ($Heap_$_58[$Heap_$_58[$o_$315,$ownerRef],$localinv] == $BaseClass($Heap_$_58[$o_$315,$ownerFrame])))) && true) && true) ==> ($Heap_$_58[$o_$315,$f_$99] == $Heap_$_59[$o_$315,$f_$99]) ));
	assume $HeapSucc($Heap_$_58,$Heap_$_59);
	assume (forall  $o_$316 : ref :: {$Heap_$_59[$o_$316,$localinv]} {$Heap_$_59[$o_$316,$inv]} ( $Heap_$_58[$o_$316,$allocated] ==> (($Heap_$_58[$o_$316,$inv] == $Heap_$_59[$o_$316,$inv]) && ($Heap_$_58[$o_$316,$localinv] == $Heap_$_59[$o_$316,$localinv])) ));
	assume (((forall  $o_$317 : ref :: {$Heap_$_59[$o_$317,$allocated]} ( $Heap_$_58[$o_$317,$allocated] ==> $Heap_$_59[$o_$317,$allocated] ))) && ((forall  $ot_$52 : ref :: {$Heap_$_59[$ot_$52,$ownerFrame]} {$Heap_$_59[$ot_$52,$ownerRef]} ( ($Heap_$_58[$ot_$52,$allocated] && (!($Heap_$_58[$ot_$52,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_59[$ot_$52,$ownerRef] == $Heap_$_58[$ot_$52,$ownerRef]) && ($Heap_$_59[$ot_$52,$ownerFrame] == $Heap_$_58[$ot_$52,$ownerFrame])) )))) && ($Heap_$_58[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_59[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_59[stack50000o_$_5,$allocated] <==> false) && (!(stack50000o_$_5 == null))) && ($typeof(stack50000o_$_5) == SExpressionSimplifier.Nary);
	assume ($Heap_$_59[stack50000o_$_5,$ownerRef] == stack50000o_$_5) && ($Heap_$_59[stack50000o_$_5,$ownerFrame] == $PeerGroupPlaceholder);
	assert  !(stack50000o_$_5 == null);
	assume $Utter($Heap_$_59[stack50000o_$_5,$ownerRef]);
	assume $Utter($Heap_$_59[$stringLiteral15,$ownerRef]);
	assume $Utter($Heap_$_59[call5formal_$_$result_$_0_$4,$ownerRef]);
	assume $Utter($Heap_$_59[call5formal_$_$result_$_0_$5,$ownerRef]);
	assert  (forall<alpha> $o_$318 : ref, $f_$100 : Field (alpha)  :: {$Heap_$_59[$o_$318,$f_$100]} ( ((((((!($o_$318 == null)) && IncludeInMainFrameCondition($f_$100)) && $Heap[$o_$318,$allocated]) && ((($Heap[$o_$318,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$318,$ownerRef],$inv] <: $Heap[$o_$318,$ownerFrame]))) || ($Heap[$Heap[$o_$318,$ownerRef],$localinv] == $BaseClass($Heap[$o_$318,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$100) && $Heap_$_59[$o_$318,$allocated]) && ((($Heap_$_59[$o_$318,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_59[$Heap_$_59[$o_$318,$ownerRef],$inv] <: $Heap_$_59[$o_$318,$ownerFrame]))) || ($Heap_$_59[$Heap_$_59[$o_$318,$ownerRef],$localinv] == $BaseClass($Heap_$_59[$o_$318,$ownerFrame])))) && ((!($o_$318 == stack50000o_$_5)) || (!(SExpressionSimplifier.Nary <: DeclType($f_$100))))) && true) && true) ));
	assert  IsFrozen($stringLiteral15,$Heap_$_59);
	assert  IsFrozen(call5formal_$_$result_$_0_$4,$Heap_$_59);
	assert  IsFrozen(call5formal_$_$result_$_0_$5,$Heap_$_59);
	assume IsHeap($Heap_$_60);
	assume $Heap_$_60[stack50000o_$_5,$allocated];
	assume (((($Heap_$_60[stack50000o_$_5,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_60[$Heap_$_60[stack50000o_$_5,$ownerRef],$inv] <: $Heap_$_60[stack50000o_$_5,$ownerFrame]))) || ($Heap_$_60[$Heap_$_60[stack50000o_$_5,$ownerRef],$localinv] == $BaseClass($Heap_$_60[stack50000o_$_5,$ownerFrame]))) && ($Heap_$_60[stack50000o_$_5,$inv] == SExpressionSimplifier.Nary)) && ($Heap_$_60[stack50000o_$_5,$localinv] == $typeof(stack50000o_$_5));
	assume ($Heap_$_60[stack50000o_$_5,$ownerRef] == $Heap_$_59[stack50000o_$_5,$ownerRef]) && ($Heap_$_60[stack50000o_$_5,$ownerFrame] == $Heap_$_59[stack50000o_$_5,$ownerFrame]);
	assume (forall  $o_$319 : ref :: {$Heap_$_60[$o_$319,$localinv]} {$Heap_$_60[$o_$319,$inv]} ( (((!($o_$319 == null)) && (!$Heap_$_59[$o_$319,$allocated])) && $Heap_$_60[$o_$319,$allocated]) ==> (($Heap_$_60[$o_$319,$inv] == $typeof($o_$319)) && ($Heap_$_60[$o_$319,$localinv] == $typeof($o_$319))) ));
	assume (forall  $o_$320 : ref :: {$Heap_$_60[$o_$320,$FirstConsistentOwner]} ( ($Heap_$_59[$Heap_$_59[$o_$320,$FirstConsistentOwner],$exposeVersion] == $Heap_$_60[$Heap_$_59[$o_$320,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_59[$o_$320,$FirstConsistentOwner] == $Heap_$_60[$o_$320,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$321 : ref, $f_$101 : Field (alpha)  :: {$Heap_$_60[$o_$321,$f_$101]} ( (((((((!($o_$321 == null)) && IncludeInMainFrameCondition($f_$101)) && $Heap_$_59[$o_$321,$allocated]) && ((($Heap_$_59[$o_$321,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_59[$Heap_$_59[$o_$321,$ownerRef],$inv] <: $Heap_$_59[$o_$321,$ownerFrame]))) || ($Heap_$_59[$Heap_$_59[$o_$321,$ownerRef],$localinv] == $BaseClass($Heap_$_59[$o_$321,$ownerFrame])))) && ((!($o_$321 == stack50000o_$_5)) || (!(SExpressionSimplifier.Nary <: DeclType($f_$101))))) && true) && true) ==> ($Heap_$_59[$o_$321,$f_$101] == $Heap_$_60[$o_$321,$f_$101]) ));
	assume $HeapSucc($Heap_$_59,$Heap_$_60);
	assume (forall  $o_$322 : ref :: {$Heap_$_60[$o_$322,$localinv]} {$Heap_$_60[$o_$322,$inv]} ( ($Heap_$_59[$o_$322,$allocated] && (!($o_$322 == stack50000o_$_5))) ==> (($Heap_$_59[$o_$322,$inv] == $Heap_$_60[$o_$322,$inv]) && ($Heap_$_59[$o_$322,$localinv] == $Heap_$_60[$o_$322,$localinv])) ));
	assume (((forall  $o_$323 : ref :: {$Heap_$_60[$o_$323,$allocated]} ( $Heap_$_59[$o_$323,$allocated] ==> $Heap_$_60[$o_$323,$allocated] ))) && ((forall  $ot_$53 : ref :: {$Heap_$_60[$ot_$53,$ownerFrame]} {$Heap_$_60[$ot_$53,$ownerRef]} ( ($Heap_$_59[$ot_$53,$allocated] && (!($Heap_$_59[$ot_$53,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_60[$ot_$53,$ownerRef] == $Heap_$_59[$ot_$53,$ownerRef]) && ($Heap_$_60[$ot_$53,$ownerFrame] == $Heap_$_59[$ot_$53,$ownerFrame])) )))) && ($Heap_$_59[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_60[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  $Heap_$_60[stack50000o_$_5,$ownerFrame] == $PeerGroupPlaceholder;
	assert  (forall  $pc_$29 : ref :: {$typeof($pc_$29)} {$Heap_$_60[$pc_$29,$localinv]} {$Heap_$_60[$pc_$29,$inv]} {$Heap_$_60[$pc_$29,$ownerFrame]} {$Heap_$_60[$pc_$29,$ownerRef]} ( ((((!($pc_$29 == null)) && $Heap_$_60[$pc_$29,$allocated]) && ($Heap_$_60[$pc_$29,$ownerRef] == $Heap_$_60[stack50000o_$_5,$ownerRef])) && ($Heap_$_60[$pc_$29,$ownerFrame] == $Heap_$_60[stack50000o_$_5,$ownerFrame])) ==> (($Heap_$_60[$pc_$29,$inv] == $typeof($pc_$29)) && ($Heap_$_60[$pc_$29,$localinv] == $typeof($pc_$29))) ));
	assume IsHeap($Heap_$_61);
	assume (forall<alpha> p_$17 : ref, F_$4 : Field (alpha)  :: {$Heap_$_61[p_$17,F_$4]} ( ((((!(F_$4 == $ownerRef)) && (!(F_$4 == $ownerFrame))) && (!(F_$4 == $FirstConsistentOwner))) || ((!($Heap_$_60[p_$17,$ownerRef] == $Heap_$_60[stack50000o_$_5,$ownerRef])) || (!($Heap_$_60[p_$17,$ownerFrame] == $Heap_$_60[stack50000o_$_5,$ownerFrame])))) ==> ($Heap_$_60[p_$17,F_$4] == $Heap_$_61[p_$17,F_$4]) ));
	assume (stack50000o_$_5 == null) ==> ($Heap_$_61 == $Heap_$_60);
	assume (!(stack50000o_$_5 == null)) ==> ((forall  p_$18 : ref :: {$Heap_$_61[p_$18,$ownerRef]} {$Heap_$_61[p_$18,$ownerFrame]} ( (($Heap_$_60[p_$18,$ownerRef] == $Heap_$_60[stack50000o_$_5,$ownerRef]) && ($Heap_$_60[p_$18,$ownerFrame] == $Heap_$_60[stack50000o_$_5,$ownerFrame])) ==> (($Heap_$_61[p_$18,$ownerRef] == $freezerRef) && ($Heap_$_61[p_$18,$ownerFrame] == $Freezer)) )));
	assume $HeapSucc($Heap_$_60,$Heap_$_61);
	assume $Heap_$_79 == $Heap_$_61;
	assume return.value_$_0 == stack50000o_$_5;
	goto block12750;
true13957to13974:
	assume i_$_0 >= call4formal_$_$result_$_0_$5;
	assert  !(this == null);
	assume $Utter($Heap_$_42[this,$ownerRef]);
	assume $Utter($Heap_$_42[stack50000o_$_4,$ownerRef]);
	assert  (forall<alpha> $o_$324 : ref, $f_$102 : Field (alpha)  :: {$Heap_$_42[$o_$324,$f_$102]} ( ((((((!($o_$324 == null)) && IncludeInMainFrameCondition($f_$102)) && $Heap[$o_$324,$allocated]) && ((($Heap[$o_$324,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$324,$ownerRef],$inv] <: $Heap[$o_$324,$ownerFrame]))) || ($Heap[$Heap[$o_$324,$ownerRef],$localinv] == $BaseClass($Heap[$o_$324,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$102) && $Heap_$_42[$o_$324,$allocated]) && ((($Heap_$_42[$o_$324,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_42[$Heap_$_42[$o_$324,$ownerRef],$inv] <: $Heap_$_42[$o_$324,$ownerFrame]))) || ($Heap_$_42[$Heap_$_42[$o_$324,$ownerRef],$localinv] == $BaseClass($Heap_$_42[$o_$324,$ownerFrame])))) && (!(((($f_$102 == $ownerRef) || ($f_$102 == $ownerFrame)) && ($Heap_$_42[$o_$324,$ownerRef] == $Heap_$_42[stack50000o_$_4,$ownerRef])) && ($Heap_$_42[$o_$324,$ownerFrame] == $Heap_$_42[stack50000o_$_4,$ownerFrame])))) && (((!($o_$324 == stack50000o_$_4)) || (!($typeof(stack50000o_$_4) <: DeclType($f_$102)))) || (!$IncludedInModifiesStar($f_$102)))) && ((!($o_$324 == stack50000o_$_4)) || (!($f_$102 == $exposeVersion)))) ));
	assume $IsNotNull(call4formal_$_$result_$5,SExpressionSimplifier.Nary) && $Heap[call4formal_$_$result_$5,$allocated];
	assert  $Heap_$_42[stack50000o_$_4,$ownerFrame] == $PeerGroupPlaceholder;
	assert  IsFrozen(this,$Heap_$_42);
	assert  IsFrozen($ElementProxy(stack50000o_$_4,0),$Heap_$_42);
	assert  (forall  $pc_$30 : ref :: {$typeof($pc_$30)} {$Heap_$_42[$pc_$30,$localinv]} {$Heap_$_42[$pc_$30,$inv]} {$Heap_$_42[$pc_$30,$ownerFrame]} {$Heap_$_42[$pc_$30,$ownerRef]} ( ((((!($pc_$30 == null)) && $Heap_$_42[$pc_$30,$allocated]) && ($Heap_$_42[$pc_$30,$ownerRef] == $Heap_$_42[stack50000o_$_4,$ownerRef])) && ($Heap_$_42[$pc_$30,$ownerFrame] == $Heap_$_42[stack50000o_$_4,$ownerFrame])) ==> (($Heap_$_42[$pc_$30,$inv] == $typeof($pc_$30)) && ($Heap_$_42[$pc_$30,$localinv] == $typeof($pc_$30))) ));
	assert  (($Heap_$_42[stack50000o_$_4,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_42[$Heap_$_42[stack50000o_$_4,$ownerRef],$inv] <: $Heap_$_42[stack50000o_$_4,$ownerFrame]))) || ($Heap_$_42[$Heap_$_42[stack50000o_$_4,$ownerRef],$localinv] == $BaseClass($Heap_$_42[stack50000o_$_4,$ownerFrame]));
	assume IsHeap($Heap_$_43);
	assume $IsNotNull(call4formal_$_$result_$_0_$6,SExpressionSimplifier.Nary) && $Heap_$_43[call4formal_$_$result_$_0_$6,$allocated];
	assume IsFrozen(call4formal_$_$result_$_0_$6,$Heap_$_43);
	assume (forall  $o_$325 : ref :: {$Heap_$_43[$o_$325,$localinv]} {$Heap_$_43[$o_$325,$inv]} ( (((!($o_$325 == null)) && (!$Heap_$_42[$o_$325,$allocated])) && $Heap_$_43[$o_$325,$allocated]) ==> (($Heap_$_43[$o_$325,$inv] == $typeof($o_$325)) && ($Heap_$_43[$o_$325,$localinv] == $typeof($o_$325))) ));
	assume (forall  $o_$326 : ref :: {$Heap_$_43[$o_$326,$FirstConsistentOwner]} ( ($Heap_$_42[$Heap_$_42[$o_$326,$FirstConsistentOwner],$exposeVersion] == $Heap_$_43[$Heap_$_42[$o_$326,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_42[$o_$326,$FirstConsistentOwner] == $Heap_$_43[$o_$326,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$327 : ref, $f_$103 : Field (alpha)  :: {$Heap_$_43[$o_$327,$f_$103]} ( (((((((!($o_$327 == null)) && IncludeInMainFrameCondition($f_$103)) && $Heap_$_42[$o_$327,$allocated]) && ((($Heap_$_42[$o_$327,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_42[$Heap_$_42[$o_$327,$ownerRef],$inv] <: $Heap_$_42[$o_$327,$ownerFrame]))) || ($Heap_$_42[$Heap_$_42[$o_$327,$ownerRef],$localinv] == $BaseClass($Heap_$_42[$o_$327,$ownerFrame])))) && (!((($f_$103 == $ownerRef) || ($f_$103 == $ownerFrame)) && (($Heap_$_42[$o_$327,$ownerRef] == $Heap_$_42[stack50000o_$_4,$ownerRef]) && ($Heap_$_42[$o_$327,$ownerFrame] == $Heap_$_42[stack50000o_$_4,$ownerFrame]))))) && (((!($o_$327 == stack50000o_$_4)) || (!($typeof(stack50000o_$_4) <: DeclType($f_$103)))) || (!$IncludedInModifiesStar($f_$103)))) && ((!($o_$327 == stack50000o_$_4)) || (!($f_$103 == $exposeVersion)))) ==> ($Heap_$_42[$o_$327,$f_$103] == $Heap_$_43[$o_$327,$f_$103]) ));
	assume $HeapSucc($Heap_$_42,$Heap_$_43);
	assume (forall  $o_$328 : ref :: {$Heap_$_43[$o_$328,$localinv]} {$Heap_$_43[$o_$328,$inv]} ( $Heap_$_42[$o_$328,$allocated] ==> (($Heap_$_42[$o_$328,$inv] == $Heap_$_43[$o_$328,$inv]) && ($Heap_$_42[$o_$328,$localinv] == $Heap_$_43[$o_$328,$localinv])) ));
	assume (((forall  $o_$329 : ref :: {$Heap_$_43[$o_$329,$allocated]} ( $Heap_$_42[$o_$329,$allocated] ==> $Heap_$_43[$o_$329,$allocated] ))) && ((forall  $ot_$54 : ref :: {$Heap_$_43[$ot_$54,$ownerFrame]} {$Heap_$_43[$ot_$54,$ownerRef]} ( ($Heap_$_42[$ot_$54,$allocated] && (!($Heap_$_42[$ot_$54,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_43[$ot_$54,$ownerRef] == $Heap_$_42[$ot_$54,$ownerRef]) && ($Heap_$_43[$ot_$54,$ownerFrame] == $Heap_$_42[$ot_$54,$ownerFrame])) )))) && ($Heap_$_42[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_43[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_43;
	assume return.value_$_0 == call4formal_$_$result_$_0_$6;
	goto block12750;
false13957to13447:
	assume i_$_0 < call4formal_$_$result_$_0_$5;
	assert  !(this == null);
	assume stack0o_$_12 == $Heap_$_42[this,SExpressionSimplifier.Nary.Args];
	assert  !(stack0o_$_12 == null);
	assume $Utter($Heap_$_42[stack0o_$_12,$ownerRef]);
	assert  (forall<alpha> $o_$330 : ref, $f_$104 : Field (alpha)  :: {$Heap_$_42[$o_$330,$f_$104]} ( ((((((!($o_$330 == null)) && IncludeInMainFrameCondition($f_$104)) && $Heap[$o_$330,$allocated]) && ((($Heap[$o_$330,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$330,$ownerRef],$inv] <: $Heap[$o_$330,$ownerFrame]))) || ($Heap[$Heap[$o_$330,$ownerRef],$localinv] == $BaseClass($Heap[$o_$330,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$104) && $Heap_$_42[$o_$330,$allocated]) && ((($Heap_$_42[$o_$330,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_42[$Heap_$_42[$o_$330,$ownerRef],$inv] <: $Heap_$_42[$o_$330,$ownerFrame]))) || ($Heap_$_42[$Heap_$_42[$o_$330,$ownerRef],$localinv] == $BaseClass($Heap_$_42[$o_$330,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$1,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$1,$allocated];
	assert  0 <= i_$_0;
	assert  i_$_0 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_42,stack0o_$_12);
	assert  (forall  $pc_$31 : ref :: {$typeof($pc_$31)} {$Heap_$_42[$pc_$31,$localinv]} {$Heap_$_42[$pc_$31,$inv]} {$Heap_$_42[$pc_$31,$ownerFrame]} {$Heap_$_42[$pc_$31,$ownerRef]} ( ((((!($pc_$31 == null)) && $Heap_$_42[$pc_$31,$allocated]) && ($Heap_$_42[$pc_$31,$ownerRef] == $Heap_$_42[stack0o_$_12,$ownerRef])) && ($Heap_$_42[$pc_$31,$ownerFrame] == $Heap_$_42[stack0o_$_12,$ownerFrame])) ==> (($Heap_$_42[$pc_$31,$inv] == $typeof($pc_$31)) && ($Heap_$_42[$pc_$31,$localinv] == $typeof($pc_$31))) ));
	assume IsHeap($Heap_$_44);
	assume $IsNotNull(call5formal_$_$result_$_0_$1,SExpressionSimplifier.Sx) && $Heap_$_44[call5formal_$_$result_$_0_$1,$allocated];
	assume $Heap_$_42[call5formal_$_$result_$_0_$1,$allocated];
	assume (((!($Heap_$_44[stack0o_$_12,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$inv] <: $Heap_$_44[stack0o_$_12,$ownerFrame])) && (!($Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$localinv] == $BaseClass($Heap_$_44[stack0o_$_12,$ownerFrame])))) ==> (((!(((!($Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_44[$Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerRef],$inv] <: $Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerFrame])) && (!($Heap_$_44[$Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_44[stack0o_$_12,$FirstConsistentOwner] == $Heap_$_44[stack0o_$_12,$ownerRef])) && ((((!($Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_44[$Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerRef],$inv] <: $Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerFrame])) && (!($Heap_$_44[$Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$ownerFrame])))) ==> ($Heap_$_44[stack0o_$_12,$FirstConsistentOwner] == $Heap_$_44[$Heap_$_44[stack0o_$_12,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack0o_$_12) == stack0o_$_12;
	assume IsFrozen(call5formal_$_$result_$_0_$1,$Heap_$_44);
	assume (forall  $o_$331 : ref :: {$Heap_$_44[$o_$331,$localinv]} {$Heap_$_44[$o_$331,$inv]} ( (((!($o_$331 == null)) && (!$Heap_$_42[$o_$331,$allocated])) && $Heap_$_44[$o_$331,$allocated]) ==> (($Heap_$_44[$o_$331,$inv] == $typeof($o_$331)) && ($Heap_$_44[$o_$331,$localinv] == $typeof($o_$331))) ));
	assume (forall  $o_$332 : ref :: {$Heap_$_44[$o_$332,$FirstConsistentOwner]} ( ($Heap_$_42[$Heap_$_42[$o_$332,$FirstConsistentOwner],$exposeVersion] == $Heap_$_44[$Heap_$_42[$o_$332,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_42[$o_$332,$FirstConsistentOwner] == $Heap_$_44[$o_$332,$FirstConsistentOwner]) ));
	assume $Heap_$_44 == $Heap_$_42;
	assume false || (call5formal_$_$result_$_0_$1 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_44,stack0o_$_12,i_$_0));
	assume (forall<alpha> $o_$333 : ref, $f_$105 : Field (alpha)  :: {$Heap_$_44[$o_$333,$f_$105]} ( ((((((!($o_$333 == null)) && IncludeInMainFrameCondition($f_$105)) && $Heap_$_42[$o_$333,$allocated]) && ((($Heap_$_42[$o_$333,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_42[$Heap_$_42[$o_$333,$ownerRef],$inv] <: $Heap_$_42[$o_$333,$ownerFrame]))) || ($Heap_$_42[$Heap_$_42[$o_$333,$ownerRef],$localinv] == $BaseClass($Heap_$_42[$o_$333,$ownerFrame])))) && true) && true) ==> ($Heap_$_42[$o_$333,$f_$105] == $Heap_$_44[$o_$333,$f_$105]) ));
	assume $HeapSucc($Heap_$_42,$Heap_$_44);
	assume (forall  $o_$334 : ref :: {$Heap_$_44[$o_$334,$localinv]} {$Heap_$_44[$o_$334,$inv]} ( $Heap_$_42[$o_$334,$allocated] ==> (($Heap_$_42[$o_$334,$inv] == $Heap_$_44[$o_$334,$inv]) && ($Heap_$_42[$o_$334,$localinv] == $Heap_$_44[$o_$334,$localinv])) ));
	assume (((forall  $o_$335 : ref :: {$Heap_$_44[$o_$335,$allocated]} ( $Heap_$_42[$o_$335,$allocated] ==> $Heap_$_44[$o_$335,$allocated] ))) && ((forall  $ot_$55 : ref :: {$Heap_$_44[$ot_$55,$ownerFrame]} {$Heap_$_44[$ot_$55,$ownerRef]} ( ($Heap_$_42[$ot_$55,$allocated] && (!($Heap_$_42[$ot_$55,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_44[$ot_$55,$ownerRef] == $Heap_$_42[$ot_$55,$ownerRef]) && ($Heap_$_44[$ot_$55,$ownerFrame] == $Heap_$_42[$ot_$55,$ownerFrame])) )))) && ($Heap_$_42[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_44[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call5formal_$_$result_$_0_$1 == null);
	assume $Utter($Heap_$_44[call5formal_$_$result_$_0_$1,$ownerRef]);
	assert  (forall<alpha> $o_$336 : ref, $f_$106 : Field (alpha)  :: {$Heap_$_44[$o_$336,$f_$106]} ( ((((((!($o_$336 == null)) && IncludeInMainFrameCondition($f_$106)) && $Heap[$o_$336,$allocated]) && ((($Heap[$o_$336,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$336,$ownerRef],$inv] <: $Heap[$o_$336,$ownerFrame]))) || ($Heap[$Heap[$o_$336,$ownerRef],$localinv] == $BaseClass($Heap[$o_$336,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$106) && $Heap_$_44[$o_$336,$allocated]) && ((($Heap_$_44[$o_$336,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_44[$Heap_$_44[$o_$336,$ownerRef],$inv] <: $Heap_$_44[$o_$336,$ownerFrame]))) || ($Heap_$_44[$Heap_$_44[$o_$336,$ownerRef],$localinv] == $BaseClass($Heap_$_44[$o_$336,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call3formal_$_$result_$3,SExpressionSimplifier.Sx) && $Heap[call3formal_$_$result_$3,$allocated];
	assert  IsFrozen(call5formal_$_$result_$_0_$1,$Heap_$_44);
	assume IsHeap($Heap_$_45);
	assume $IsNotNull(call3formal_$_$result_$_0_$3,SExpressionSimplifier.Sx) && $Heap_$_45[call3formal_$_$result_$_0_$3,$allocated];
	assume IsFrozen(call3formal_$_$result_$_0_$3,$Heap_$_45);
	assume (forall  $o_$337 : ref :: {$Heap_$_45[$o_$337,$localinv]} {$Heap_$_45[$o_$337,$inv]} ( (((!($o_$337 == null)) && (!$Heap_$_44[$o_$337,$allocated])) && $Heap_$_45[$o_$337,$allocated]) ==> (($Heap_$_45[$o_$337,$inv] == $typeof($o_$337)) && ($Heap_$_45[$o_$337,$localinv] == $typeof($o_$337))) ));
	assume (forall  $o_$338 : ref :: {$Heap_$_45[$o_$338,$FirstConsistentOwner]} ( ($Heap_$_44[$Heap_$_44[$o_$338,$FirstConsistentOwner],$exposeVersion] == $Heap_$_45[$Heap_$_44[$o_$338,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_44[$o_$338,$FirstConsistentOwner] == $Heap_$_45[$o_$338,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$339 : ref, $f_$107 : Field (alpha)  :: {$Heap_$_45[$o_$339,$f_$107]} ( ((((((!($o_$339 == null)) && IncludeInMainFrameCondition($f_$107)) && $Heap_$_44[$o_$339,$allocated]) && ((($Heap_$_44[$o_$339,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_44[$Heap_$_44[$o_$339,$ownerRef],$inv] <: $Heap_$_44[$o_$339,$ownerFrame]))) || ($Heap_$_44[$Heap_$_44[$o_$339,$ownerRef],$localinv] == $BaseClass($Heap_$_44[$o_$339,$ownerFrame])))) && true) && true) ==> ($Heap_$_44[$o_$339,$f_$107] == $Heap_$_45[$o_$339,$f_$107]) ));
	assume $HeapSucc($Heap_$_44,$Heap_$_45);
	assume (forall  $o_$340 : ref :: {$Heap_$_45[$o_$340,$localinv]} {$Heap_$_45[$o_$340,$inv]} ( $Heap_$_44[$o_$340,$allocated] ==> (($Heap_$_44[$o_$340,$inv] == $Heap_$_45[$o_$340,$inv]) && ($Heap_$_44[$o_$340,$localinv] == $Heap_$_45[$o_$340,$localinv])) ));
	assume (((forall  $o_$341 : ref :: {$Heap_$_45[$o_$341,$allocated]} ( $Heap_$_44[$o_$341,$allocated] ==> $Heap_$_45[$o_$341,$allocated] ))) && ((forall  $ot_$56 : ref :: {$Heap_$_45[$ot_$56,$ownerFrame]} {$Heap_$_45[$ot_$56,$ownerRef]} ( ($Heap_$_44[$ot_$56,$allocated] && (!($Heap_$_44[$ot_$56,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_45[$ot_$56,$ownerRef] == $Heap_$_44[$ot_$56,$ownerRef]) && ($Heap_$_45[$ot_$56,$ownerFrame] == $Heap_$_44[$ot_$56,$ownerFrame])) )))) && ($Heap_$_44[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_45[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(stack50000o_$_4 == null);
	assume $Utter($Heap_$_45[stack50000o_$_4,$ownerRef]);
	assume $Utter($Heap_$_45[call3formal_$_$result_$_0_$3,$ownerRef]);
	assert  (forall<alpha> $o_$342 : ref, $f_$108 : Field (alpha)  :: {$Heap_$_45[$o_$342,$f_$108]} ( ((((((!($o_$342 == null)) && IncludeInMainFrameCondition($f_$108)) && $Heap[$o_$342,$allocated]) && ((($Heap[$o_$342,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$342,$ownerRef],$inv] <: $Heap[$o_$342,$ownerFrame]))) || ($Heap[$Heap[$o_$342,$ownerRef],$localinv] == $BaseClass($Heap[$o_$342,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$108) && $Heap_$_45[$o_$342,$allocated]) && ((($Heap_$_45[$o_$342,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_45[$Heap_$_45[$o_$342,$ownerRef],$inv] <: $Heap_$_45[$o_$342,$ownerFrame]))) || ($Heap_$_45[$Heap_$_45[$o_$342,$ownerRef],$localinv] == $BaseClass($Heap_$_45[$o_$342,$ownerFrame])))) && (((!($o_$342 == stack50000o_$_4)) || (!($typeof(stack50000o_$_4) <: DeclType($f_$108)))) || (!$IncludedInModifiesStar($f_$108)))) && true) ));
	assert  (forall  $pc_$32 : ref :: {$typeof($pc_$32)} {$Heap_$_45[$pc_$32,$localinv]} {$Heap_$_45[$pc_$32,$inv]} {$Heap_$_45[$pc_$32,$ownerFrame]} {$Heap_$_45[$pc_$32,$ownerRef]} ( ((((!($pc_$32 == null)) && $Heap_$_45[$pc_$32,$allocated]) && ($Heap_$_45[$pc_$32,$ownerRef] == $Heap_$_45[stack50000o_$_4,$ownerRef])) && ($Heap_$_45[$pc_$32,$ownerFrame] == $Heap_$_45[stack50000o_$_4,$ownerFrame])) ==> (($Heap_$_45[$pc_$32,$inv] == $typeof($pc_$32)) && ($Heap_$_45[$pc_$32,$localinv] == $typeof($pc_$32))) ));
	assert  (($Heap_$_45[stack50000o_$_4,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_45[$Heap_$_45[stack50000o_$_4,$ownerRef],$inv] <: $Heap_$_45[stack50000o_$_4,$ownerFrame]))) || ($Heap_$_45[$Heap_$_45[stack50000o_$_4,$ownerRef],$localinv] == $BaseClass($Heap_$_45[stack50000o_$_4,$ownerFrame]));
	assert  IsFrozen(call3formal_$_$result_$_0_$3,$Heap_$_45);
	assume IsHeap($Heap_$_46);
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_46,stack50000o_$_4) == (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_45,stack50000o_$_4) + 1);
	assume (forall  $o_$343 : ref :: {$Heap_$_46[$o_$343,$localinv]} {$Heap_$_46[$o_$343,$inv]} ( (((!($o_$343 == null)) && (!$Heap_$_45[$o_$343,$allocated])) && $Heap_$_46[$o_$343,$allocated]) ==> (($Heap_$_46[$o_$343,$inv] == $typeof($o_$343)) && ($Heap_$_46[$o_$343,$localinv] == $typeof($o_$343))) ));
	assume (forall  $o_$344 : ref :: {$Heap_$_46[$o_$344,$FirstConsistentOwner]} ( ($Heap_$_45[$Heap_$_45[$o_$344,$FirstConsistentOwner],$exposeVersion] == $Heap_$_46[$Heap_$_45[$o_$344,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_45[$o_$344,$FirstConsistentOwner] == $Heap_$_46[$o_$344,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$345 : ref, $f_$109 : Field (alpha)  :: {$Heap_$_46[$o_$345,$f_$109]} ( ((((((!($o_$345 == null)) && IncludeInMainFrameCondition($f_$109)) && $Heap_$_45[$o_$345,$allocated]) && ((($Heap_$_45[$o_$345,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_45[$Heap_$_45[$o_$345,$ownerRef],$inv] <: $Heap_$_45[$o_$345,$ownerFrame]))) || ($Heap_$_45[$Heap_$_45[$o_$345,$ownerRef],$localinv] == $BaseClass($Heap_$_45[$o_$345,$ownerFrame])))) && (((!($o_$345 == stack50000o_$_4)) || (!($typeof(stack50000o_$_4) <: DeclType($f_$109)))) || (!$IncludedInModifiesStar($f_$109)))) && true) ==> ($Heap_$_45[$o_$345,$f_$109] == $Heap_$_46[$o_$345,$f_$109]) ));
	assume $HeapSucc($Heap_$_45,$Heap_$_46);
	assume (forall  $o_$346 : ref :: {$Heap_$_46[$o_$346,$localinv]} {$Heap_$_46[$o_$346,$inv]} ( $Heap_$_45[$o_$346,$allocated] ==> (($Heap_$_45[$o_$346,$inv] == $Heap_$_46[$o_$346,$inv]) && ($Heap_$_45[$o_$346,$localinv] == $Heap_$_46[$o_$346,$localinv])) ));
	assume (((forall  $o_$347 : ref :: {$Heap_$_46[$o_$347,$allocated]} ( $Heap_$_45[$o_$347,$allocated] ==> $Heap_$_46[$o_$347,$allocated] ))) && ((forall  $ot_$57 : ref :: {$Heap_$_46[$ot_$57,$ownerFrame]} {$Heap_$_46[$ot_$57,$ownerRef]} ( ($Heap_$_45[$ot_$57,$allocated] && (!($Heap_$_45[$ot_$57,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_46[$ot_$57,$ownerRef] == $Heap_$_45[$ot_$57,$ownerRef]) && ($Heap_$_46[$ot_$57,$ownerFrame] == $Heap_$_45[$ot_$57,$ownerFrame])) )))) && ($Heap_$_45[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_46[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume stack0i_$_1 == (i_$_0 + 1);
	assert  (forall  $o_$348 : ref :: {$Heap_$_46[$o_$348,$ownerFrame]} {$Heap_$_46[$o_$348,$ownerRef]} ( ((!($o_$348 == null)) && $Heap_$_40[$o_$348,$allocated]) ==> (($Heap_$_46[$o_$348,$ownerRef] == $Heap_$_40[$o_$348,$ownerRef]) && ($Heap_$_46[$o_$348,$ownerFrame] == $Heap_$_40[$o_$348,$ownerFrame])) ));
	assume false;
	assume $result_$_0 == $result;
	assume $Heap_$_80 == $Heap_$_46;
	goto $exit;
true13685to12529:
	assume !call4formal_$_$result_$_0_$1;
	assert  !(this == null);
	assume $Utter($Heap_$_30[this,$ownerRef]);
	assume $Utter($Heap_$_30[stack50000o_$_3,$ownerRef]);
	assert  (forall<alpha> $o_$349 : ref, $f_$110 : Field (alpha)  :: {$Heap_$_30[$o_$349,$f_$110]} ( ((((((!($o_$349 == null)) && IncludeInMainFrameCondition($f_$110)) && $Heap[$o_$349,$allocated]) && ((($Heap[$o_$349,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$349,$ownerRef],$inv] <: $Heap[$o_$349,$ownerFrame]))) || ($Heap[$Heap[$o_$349,$ownerRef],$localinv] == $BaseClass($Heap[$o_$349,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$110) && $Heap_$_30[$o_$349,$allocated]) && ((($Heap_$_30[$o_$349,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_30[$Heap_$_30[$o_$349,$ownerRef],$inv] <: $Heap_$_30[$o_$349,$ownerFrame]))) || ($Heap_$_30[$Heap_$_30[$o_$349,$ownerRef],$localinv] == $BaseClass($Heap_$_30[$o_$349,$ownerFrame])))) && (!(((($f_$110 == $ownerRef) || ($f_$110 == $ownerFrame)) && ($Heap_$_30[$o_$349,$ownerRef] == $Heap_$_30[stack50000o_$_3,$ownerRef])) && ($Heap_$_30[$o_$349,$ownerFrame] == $Heap_$_30[stack50000o_$_3,$ownerFrame])))) && (((!($o_$349 == stack50000o_$_3)) || (!($typeof(stack50000o_$_3) <: DeclType($f_$110)))) || (!$IncludedInModifiesStar($f_$110)))) && ((!($o_$349 == stack50000o_$_3)) || (!($f_$110 == $exposeVersion)))) ));
	assume $IsNotNull(call4formal_$_$result_$2,SExpressionSimplifier.Nary) && $Heap[call4formal_$_$result_$2,$allocated];
	assert  $Heap_$_30[stack50000o_$_3,$ownerFrame] == $PeerGroupPlaceholder;
	assert  IsFrozen(this,$Heap_$_30);
	assert  IsFrozen($ElementProxy(stack50000o_$_3,0),$Heap_$_30);
	assert  (forall  $pc_$33 : ref :: {$typeof($pc_$33)} {$Heap_$_30[$pc_$33,$localinv]} {$Heap_$_30[$pc_$33,$inv]} {$Heap_$_30[$pc_$33,$ownerFrame]} {$Heap_$_30[$pc_$33,$ownerRef]} ( ((((!($pc_$33 == null)) && $Heap_$_30[$pc_$33,$allocated]) && ($Heap_$_30[$pc_$33,$ownerRef] == $Heap_$_30[stack50000o_$_3,$ownerRef])) && ($Heap_$_30[$pc_$33,$ownerFrame] == $Heap_$_30[stack50000o_$_3,$ownerFrame])) ==> (($Heap_$_30[$pc_$33,$inv] == $typeof($pc_$33)) && ($Heap_$_30[$pc_$33,$localinv] == $typeof($pc_$33))) ));
	assert  (($Heap_$_30[stack50000o_$_3,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_30[$Heap_$_30[stack50000o_$_3,$ownerRef],$inv] <: $Heap_$_30[stack50000o_$_3,$ownerFrame]))) || ($Heap_$_30[$Heap_$_30[stack50000o_$_3,$ownerRef],$localinv] == $BaseClass($Heap_$_30[stack50000o_$_3,$ownerFrame]));
	assume IsHeap($Heap_$_31);
	assume $IsNotNull(call4formal_$_$result_$_0_$3,SExpressionSimplifier.Nary) && $Heap_$_31[call4formal_$_$result_$_0_$3,$allocated];
	assume IsFrozen(call4formal_$_$result_$_0_$3,$Heap_$_31);
	assume (forall  $o_$350 : ref :: {$Heap_$_31[$o_$350,$localinv]} {$Heap_$_31[$o_$350,$inv]} ( (((!($o_$350 == null)) && (!$Heap_$_30[$o_$350,$allocated])) && $Heap_$_31[$o_$350,$allocated]) ==> (($Heap_$_31[$o_$350,$inv] == $typeof($o_$350)) && ($Heap_$_31[$o_$350,$localinv] == $typeof($o_$350))) ));
	assume (forall  $o_$351 : ref :: {$Heap_$_31[$o_$351,$FirstConsistentOwner]} ( ($Heap_$_30[$Heap_$_30[$o_$351,$FirstConsistentOwner],$exposeVersion] == $Heap_$_31[$Heap_$_30[$o_$351,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_30[$o_$351,$FirstConsistentOwner] == $Heap_$_31[$o_$351,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$352 : ref, $f_$111 : Field (alpha)  :: {$Heap_$_31[$o_$352,$f_$111]} ( (((((((!($o_$352 == null)) && IncludeInMainFrameCondition($f_$111)) && $Heap_$_30[$o_$352,$allocated]) && ((($Heap_$_30[$o_$352,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_30[$Heap_$_30[$o_$352,$ownerRef],$inv] <: $Heap_$_30[$o_$352,$ownerFrame]))) || ($Heap_$_30[$Heap_$_30[$o_$352,$ownerRef],$localinv] == $BaseClass($Heap_$_30[$o_$352,$ownerFrame])))) && (!((($f_$111 == $ownerRef) || ($f_$111 == $ownerFrame)) && (($Heap_$_30[$o_$352,$ownerRef] == $Heap_$_30[stack50000o_$_3,$ownerRef]) && ($Heap_$_30[$o_$352,$ownerFrame] == $Heap_$_30[stack50000o_$_3,$ownerFrame]))))) && (((!($o_$352 == stack50000o_$_3)) || (!($typeof(stack50000o_$_3) <: DeclType($f_$111)))) || (!$IncludedInModifiesStar($f_$111)))) && ((!($o_$352 == stack50000o_$_3)) || (!($f_$111 == $exposeVersion)))) ==> ($Heap_$_30[$o_$352,$f_$111] == $Heap_$_31[$o_$352,$f_$111]) ));
	assume $HeapSucc($Heap_$_30,$Heap_$_31);
	assume (forall  $o_$353 : ref :: {$Heap_$_31[$o_$353,$localinv]} {$Heap_$_31[$o_$353,$inv]} ( $Heap_$_30[$o_$353,$allocated] ==> (($Heap_$_30[$o_$353,$inv] == $Heap_$_31[$o_$353,$inv]) && ($Heap_$_30[$o_$353,$localinv] == $Heap_$_31[$o_$353,$localinv])) ));
	assume (((forall  $o_$354 : ref :: {$Heap_$_31[$o_$354,$allocated]} ( $Heap_$_30[$o_$354,$allocated] ==> $Heap_$_31[$o_$354,$allocated] ))) && ((forall  $ot_$58 : ref :: {$Heap_$_31[$ot_$58,$ownerFrame]} {$Heap_$_31[$ot_$58,$ownerRef]} ( ($Heap_$_30[$ot_$58,$allocated] && (!($Heap_$_30[$ot_$58,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_31[$ot_$58,$ownerRef] == $Heap_$_30[$ot_$58,$ownerRef]) && ($Heap_$_31[$ot_$58,$ownerFrame] == $Heap_$_30[$ot_$58,$ownerFrame])) )))) && ($Heap_$_30[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_31[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume $Heap_$_79 == $Heap_$_31;
	assume return.value_$_0 == call4formal_$_$result_$_0_$3;
	goto block12750;
false13685to13056:
	assume call4formal_$_$result_$_0_$1;
	assert  (forall<alpha> $o_$355 : ref, $f_$112 : Field (alpha)  :: {$Heap_$_30[$o_$355,$f_$112]} ( ((((((!($o_$355 == null)) && IncludeInMainFrameCondition($f_$112)) && $Heap[$o_$355,$allocated]) && ((($Heap[$o_$355,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$355,$ownerRef],$inv] <: $Heap[$o_$355,$ownerFrame]))) || ($Heap[$Heap[$o_$355,$ownerRef],$localinv] == $BaseClass($Heap[$o_$355,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$112) && $Heap_$_30[$o_$355,$allocated]) && ((($Heap_$_30[$o_$355,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_30[$Heap_$_30[$o_$355,$ownerRef],$inv] <: $Heap_$_30[$o_$355,$ownerFrame]))) || ($Heap_$_30[$Heap_$_30[$o_$355,$ownerRef],$localinv] == $BaseClass($Heap_$_30[$o_$355,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call4formal_$_$result_$1,SExpressionSimplifier.Sx) && $Heap[call4formal_$_$result_$1,$allocated];
	assume IsHeap($Heap_$_32);
	assume $IsNotNull(call4formal_$_$result_$_0_$2,SExpressionSimplifier.Sx) && $Heap_$_32[call4formal_$_$result_$_0_$2,$allocated];
	assume IsFrozen(call4formal_$_$result_$_0_$2,$Heap_$_32);
	assume (forall  $o_$356 : ref :: {$Heap_$_32[$o_$356,$localinv]} {$Heap_$_32[$o_$356,$inv]} ( (((!($o_$356 == null)) && (!$Heap_$_30[$o_$356,$allocated])) && $Heap_$_32[$o_$356,$allocated]) ==> (($Heap_$_32[$o_$356,$inv] == $typeof($o_$356)) && ($Heap_$_32[$o_$356,$localinv] == $typeof($o_$356))) ));
	assume (forall  $o_$357 : ref :: {$Heap_$_32[$o_$357,$FirstConsistentOwner]} ( ($Heap_$_30[$Heap_$_30[$o_$357,$FirstConsistentOwner],$exposeVersion] == $Heap_$_32[$Heap_$_30[$o_$357,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_30[$o_$357,$FirstConsistentOwner] == $Heap_$_32[$o_$357,$FirstConsistentOwner]) ));
	assume true || (call4formal_$_$result_$_0_$2 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.Enumerator.get_Current($Heap_$_32,call3formal_$_this$out_$_0));
	assume (forall<alpha> $o_$358 : ref, $f_$113 : Field (alpha)  :: {$Heap_$_32[$o_$358,$f_$113]} ( ((((((!($o_$358 == null)) && IncludeInMainFrameCondition($f_$113)) && $Heap_$_30[$o_$358,$allocated]) && ((($Heap_$_30[$o_$358,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_30[$Heap_$_30[$o_$358,$ownerRef],$inv] <: $Heap_$_30[$o_$358,$ownerFrame]))) || ($Heap_$_30[$Heap_$_30[$o_$358,$ownerRef],$localinv] == $BaseClass($Heap_$_30[$o_$358,$ownerFrame])))) && true) && true) ==> ($Heap_$_30[$o_$358,$f_$113] == $Heap_$_32[$o_$358,$f_$113]) ));
	assume $HeapSucc($Heap_$_30,$Heap_$_32);
	assume (forall  $o_$359 : ref :: {$Heap_$_32[$o_$359,$localinv]} {$Heap_$_32[$o_$359,$inv]} ( $Heap_$_30[$o_$359,$allocated] ==> (($Heap_$_30[$o_$359,$inv] == $Heap_$_32[$o_$359,$inv]) && ($Heap_$_30[$o_$359,$localinv] == $Heap_$_32[$o_$359,$localinv])) ));
	assume (((forall  $o_$360 : ref :: {$Heap_$_32[$o_$360,$allocated]} ( $Heap_$_30[$o_$360,$allocated] ==> $Heap_$_32[$o_$360,$allocated] ))) && ((forall  $ot_$59 : ref :: {$Heap_$_32[$ot_$59,$ownerFrame]} {$Heap_$_32[$ot_$59,$ownerRef]} ( ($Heap_$_30[$ot_$59,$allocated] && (!($Heap_$_30[$ot_$59,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_32[$ot_$59,$ownerRef] == $Heap_$_30[$ot_$59,$ownerRef]) && ($Heap_$_32[$ot_$59,$ownerFrame] == $Heap_$_30[$ot_$59,$ownerFrame])) )))) && ($Heap_$_30[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_32[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call4formal_$_$result_$_0_$2 == null);
	assume $Utter($Heap_$_32[call4formal_$_$result_$_0_$2,$ownerRef]);
	assert  (forall<alpha> $o_$361 : ref, $f_$114 : Field (alpha)  :: {$Heap_$_32[$o_$361,$f_$114]} ( ((((((!($o_$361 == null)) && IncludeInMainFrameCondition($f_$114)) && $Heap[$o_$361,$allocated]) && ((($Heap[$o_$361,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$361,$ownerRef],$inv] <: $Heap[$o_$361,$ownerFrame]))) || ($Heap[$Heap[$o_$361,$ownerRef],$localinv] == $BaseClass($Heap[$o_$361,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$114) && $Heap_$_32[$o_$361,$allocated]) && ((($Heap_$_32[$o_$361,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_32[$Heap_$_32[$o_$361,$ownerRef],$inv] <: $Heap_$_32[$o_$361,$ownerFrame]))) || ($Heap_$_32[$Heap_$_32[$o_$361,$ownerRef],$localinv] == $BaseClass($Heap_$_32[$o_$361,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call3formal_$_$result_$2,SExpressionSimplifier.Sx) && $Heap[call3formal_$_$result_$2,$allocated];
	assert  IsFrozen(call4formal_$_$result_$_0_$2,$Heap_$_32);
	assume IsHeap($Heap_$_33);
	assume $IsNotNull(call3formal_$_$result_$_0_$2,SExpressionSimplifier.Sx) && $Heap_$_33[call3formal_$_$result_$_0_$2,$allocated];
	assume IsFrozen(call3formal_$_$result_$_0_$2,$Heap_$_33);
	assume (forall  $o_$362 : ref :: {$Heap_$_33[$o_$362,$localinv]} {$Heap_$_33[$o_$362,$inv]} ( (((!($o_$362 == null)) && (!$Heap_$_32[$o_$362,$allocated])) && $Heap_$_33[$o_$362,$allocated]) ==> (($Heap_$_33[$o_$362,$inv] == $typeof($o_$362)) && ($Heap_$_33[$o_$362,$localinv] == $typeof($o_$362))) ));
	assume (forall  $o_$363 : ref :: {$Heap_$_33[$o_$363,$FirstConsistentOwner]} ( ($Heap_$_32[$Heap_$_32[$o_$363,$FirstConsistentOwner],$exposeVersion] == $Heap_$_33[$Heap_$_32[$o_$363,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_32[$o_$363,$FirstConsistentOwner] == $Heap_$_33[$o_$363,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$364 : ref, $f_$115 : Field (alpha)  :: {$Heap_$_33[$o_$364,$f_$115]} ( ((((((!($o_$364 == null)) && IncludeInMainFrameCondition($f_$115)) && $Heap_$_32[$o_$364,$allocated]) && ((($Heap_$_32[$o_$364,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_32[$Heap_$_32[$o_$364,$ownerRef],$inv] <: $Heap_$_32[$o_$364,$ownerFrame]))) || ($Heap_$_32[$Heap_$_32[$o_$364,$ownerRef],$localinv] == $BaseClass($Heap_$_32[$o_$364,$ownerFrame])))) && true) && true) ==> ($Heap_$_32[$o_$364,$f_$115] == $Heap_$_33[$o_$364,$f_$115]) ));
	assume $HeapSucc($Heap_$_32,$Heap_$_33);
	assume (forall  $o_$365 : ref :: {$Heap_$_33[$o_$365,$localinv]} {$Heap_$_33[$o_$365,$inv]} ( $Heap_$_32[$o_$365,$allocated] ==> (($Heap_$_32[$o_$365,$inv] == $Heap_$_33[$o_$365,$inv]) && ($Heap_$_32[$o_$365,$localinv] == $Heap_$_33[$o_$365,$localinv])) ));
	assume (((forall  $o_$366 : ref :: {$Heap_$_33[$o_$366,$allocated]} ( $Heap_$_32[$o_$366,$allocated] ==> $Heap_$_33[$o_$366,$allocated] ))) && ((forall  $ot_$60 : ref :: {$Heap_$_33[$ot_$60,$ownerFrame]} {$Heap_$_33[$ot_$60,$ownerRef]} ( ($Heap_$_32[$ot_$60,$allocated] && (!($Heap_$_32[$ot_$60,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_33[$ot_$60,$ownerRef] == $Heap_$_32[$ot_$60,$ownerRef]) && ($Heap_$_33[$ot_$60,$ownerFrame] == $Heap_$_32[$ot_$60,$ownerFrame])) )))) && ($Heap_$_32[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_33[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(stack50000o_$_3 == null);
	assume $Utter($Heap_$_33[stack50000o_$_3,$ownerRef]);
	assume $Utter($Heap_$_33[call3formal_$_$result_$_0_$2,$ownerRef]);
	assert  (forall<alpha> $o_$367 : ref, $f_$116 : Field (alpha)  :: {$Heap_$_33[$o_$367,$f_$116]} ( ((((((!($o_$367 == null)) && IncludeInMainFrameCondition($f_$116)) && $Heap[$o_$367,$allocated]) && ((($Heap[$o_$367,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$367,$ownerRef],$inv] <: $Heap[$o_$367,$ownerFrame]))) || ($Heap[$Heap[$o_$367,$ownerRef],$localinv] == $BaseClass($Heap[$o_$367,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$116) && $Heap_$_33[$o_$367,$allocated]) && ((($Heap_$_33[$o_$367,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_33[$Heap_$_33[$o_$367,$ownerRef],$inv] <: $Heap_$_33[$o_$367,$ownerFrame]))) || ($Heap_$_33[$Heap_$_33[$o_$367,$ownerRef],$localinv] == $BaseClass($Heap_$_33[$o_$367,$ownerFrame])))) && (((!($o_$367 == stack50000o_$_3)) || (!($typeof(stack50000o_$_3) <: DeclType($f_$116)))) || (!$IncludedInModifiesStar($f_$116)))) && true) ));
	assert  (forall  $pc_$34 : ref :: {$typeof($pc_$34)} {$Heap_$_33[$pc_$34,$localinv]} {$Heap_$_33[$pc_$34,$inv]} {$Heap_$_33[$pc_$34,$ownerFrame]} {$Heap_$_33[$pc_$34,$ownerRef]} ( ((((!($pc_$34 == null)) && $Heap_$_33[$pc_$34,$allocated]) && ($Heap_$_33[$pc_$34,$ownerRef] == $Heap_$_33[stack50000o_$_3,$ownerRef])) && ($Heap_$_33[$pc_$34,$ownerFrame] == $Heap_$_33[stack50000o_$_3,$ownerFrame])) ==> (($Heap_$_33[$pc_$34,$inv] == $typeof($pc_$34)) && ($Heap_$_33[$pc_$34,$localinv] == $typeof($pc_$34))) ));
	assert  (($Heap_$_33[stack50000o_$_3,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_33[$Heap_$_33[stack50000o_$_3,$ownerRef],$inv] <: $Heap_$_33[stack50000o_$_3,$ownerFrame]))) || ($Heap_$_33[$Heap_$_33[stack50000o_$_3,$ownerRef],$localinv] == $BaseClass($Heap_$_33[stack50000o_$_3,$ownerFrame]));
	assert  IsFrozen(call3formal_$_$result_$_0_$2,$Heap_$_33);
	assume IsHeap($Heap_$_34);
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_34,stack50000o_$_3) == (#System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_33,stack50000o_$_3) + 1);
	assume (forall  $o_$368 : ref :: {$Heap_$_34[$o_$368,$localinv]} {$Heap_$_34[$o_$368,$inv]} ( (((!($o_$368 == null)) && (!$Heap_$_33[$o_$368,$allocated])) && $Heap_$_34[$o_$368,$allocated]) ==> (($Heap_$_34[$o_$368,$inv] == $typeof($o_$368)) && ($Heap_$_34[$o_$368,$localinv] == $typeof($o_$368))) ));
	assume (forall  $o_$369 : ref :: {$Heap_$_34[$o_$369,$FirstConsistentOwner]} ( ($Heap_$_33[$Heap_$_33[$o_$369,$FirstConsistentOwner],$exposeVersion] == $Heap_$_34[$Heap_$_33[$o_$369,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_33[$o_$369,$FirstConsistentOwner] == $Heap_$_34[$o_$369,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$370 : ref, $f_$117 : Field (alpha)  :: {$Heap_$_34[$o_$370,$f_$117]} ( ((((((!($o_$370 == null)) && IncludeInMainFrameCondition($f_$117)) && $Heap_$_33[$o_$370,$allocated]) && ((($Heap_$_33[$o_$370,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_33[$Heap_$_33[$o_$370,$ownerRef],$inv] <: $Heap_$_33[$o_$370,$ownerFrame]))) || ($Heap_$_33[$Heap_$_33[$o_$370,$ownerRef],$localinv] == $BaseClass($Heap_$_33[$o_$370,$ownerFrame])))) && (((!($o_$370 == stack50000o_$_3)) || (!($typeof(stack50000o_$_3) <: DeclType($f_$117)))) || (!$IncludedInModifiesStar($f_$117)))) && true) ==> ($Heap_$_33[$o_$370,$f_$117] == $Heap_$_34[$o_$370,$f_$117]) ));
	assume $HeapSucc($Heap_$_33,$Heap_$_34);
	assume (forall  $o_$371 : ref :: {$Heap_$_34[$o_$371,$localinv]} {$Heap_$_34[$o_$371,$inv]} ( $Heap_$_33[$o_$371,$allocated] ==> (($Heap_$_33[$o_$371,$inv] == $Heap_$_34[$o_$371,$inv]) && ($Heap_$_33[$o_$371,$localinv] == $Heap_$_34[$o_$371,$localinv])) ));
	assume (((forall  $o_$372 : ref :: {$Heap_$_34[$o_$372,$allocated]} ( $Heap_$_33[$o_$372,$allocated] ==> $Heap_$_34[$o_$372,$allocated] ))) && ((forall  $ot_$61 : ref :: {$Heap_$_34[$ot_$61,$ownerFrame]} {$Heap_$_34[$ot_$61,$ownerRef]} ( ($Heap_$_33[$ot_$61,$allocated] && (!($Heap_$_33[$ot_$61,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_34[$ot_$61,$ownerRef] == $Heap_$_33[$ot_$61,$ownerRef]) && ($Heap_$_34[$ot_$61,$ownerFrame] == $Heap_$_33[$ot_$61,$ownerFrame])) )))) && ($Heap_$_33[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_34[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  (forall  $o_$373 : ref :: {$Heap_$_34[$o_$373,$ownerFrame]} {$Heap_$_34[$o_$373,$ownerRef]} ( ((!($o_$373 == null)) && $Heap_$_27[$o_$373,$allocated]) ==> (($Heap_$_34[$o_$373,$ownerRef] == $Heap_$_27[$o_$373,$ownerRef]) && ($Heap_$_34[$o_$373,$ownerFrame] == $Heap_$_27[$o_$373,$ownerFrame])) ));
	assume false;
	assume $result_$_0 == $result;
	assume $Heap_$_80 == $Heap_$_34;
	goto $exit;
true13770to12835:
	assume !call4formal_$_$result_$_0_$9;
	assume $Heap_$_66 == $Heap_$_57;
	goto block13039;
false13770to13498:
	assume call4formal_$_$result_$_0_$9;
	assume #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_57,$Heap_$_57[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.Args]) == 2;
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume stack1o_$_3 == $Heap_$_57[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.Args];
	assert  !(stack1o_$_3 == null);
	assume $Utter($Heap_$_57[stack1o_$_3,$ownerRef]);
	assert  (forall<alpha> $o_$374 : ref, $f_$118 : Field (alpha)  :: {$Heap_$_57[$o_$374,$f_$118]} ( ((((((!($o_$374 == null)) && IncludeInMainFrameCondition($f_$118)) && $Heap[$o_$374,$allocated]) && ((($Heap[$o_$374,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$374,$ownerRef],$inv] <: $Heap[$o_$374,$ownerFrame]))) || ($Heap[$Heap[$o_$374,$ownerRef],$localinv] == $BaseClass($Heap[$o_$374,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$118) && $Heap_$_57[$o_$374,$allocated]) && ((($Heap_$_57[$o_$374,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_57[$Heap_$_57[$o_$374,$ownerRef],$inv] <: $Heap_$_57[$o_$374,$ownerFrame]))) || ($Heap_$_57[$Heap_$_57[$o_$374,$ownerRef],$localinv] == $BaseClass($Heap_$_57[$o_$374,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$6,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$6,$allocated];
	assert  0 <= 0;
	assert  0 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_57,stack1o_$_3);
	assert  (forall  $pc_$35 : ref :: {$typeof($pc_$35)} {$Heap_$_57[$pc_$35,$localinv]} {$Heap_$_57[$pc_$35,$inv]} {$Heap_$_57[$pc_$35,$ownerFrame]} {$Heap_$_57[$pc_$35,$ownerRef]} ( ((((!($pc_$35 == null)) && $Heap_$_57[$pc_$35,$allocated]) && ($Heap_$_57[$pc_$35,$ownerRef] == $Heap_$_57[stack1o_$_3,$ownerRef])) && ($Heap_$_57[$pc_$35,$ownerFrame] == $Heap_$_57[stack1o_$_3,$ownerFrame])) ==> (($Heap_$_57[$pc_$35,$inv] == $typeof($pc_$35)) && ($Heap_$_57[$pc_$35,$localinv] == $typeof($pc_$35))) ));
	assume IsHeap($Heap_$_62);
	assume $IsNotNull(call5formal_$_$result_$_0_$6,SExpressionSimplifier.Sx) && $Heap_$_62[call5formal_$_$result_$_0_$6,$allocated];
	assume $Heap_$_57[call5formal_$_$result_$_0_$6,$allocated];
	assume (((!($Heap_$_62[stack1o_$_3,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$inv] <: $Heap_$_62[stack1o_$_3,$ownerFrame])) && (!($Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$localinv] == $BaseClass($Heap_$_62[stack1o_$_3,$ownerFrame])))) ==> (((!(((!($Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_62[$Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerRef],$inv] <: $Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerFrame])) && (!($Heap_$_62[$Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_62[stack1o_$_3,$FirstConsistentOwner] == $Heap_$_62[stack1o_$_3,$ownerRef])) && ((((!($Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_62[$Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerRef],$inv] <: $Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerFrame])) && (!($Heap_$_62[$Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$ownerFrame])))) ==> ($Heap_$_62[stack1o_$_3,$FirstConsistentOwner] == $Heap_$_62[$Heap_$_62[stack1o_$_3,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack1o_$_3) == stack1o_$_3;
	assume IsFrozen(call5formal_$_$result_$_0_$6,$Heap_$_62);
	assume (forall  $o_$375 : ref :: {$Heap_$_62[$o_$375,$localinv]} {$Heap_$_62[$o_$375,$inv]} ( (((!($o_$375 == null)) && (!$Heap_$_57[$o_$375,$allocated])) && $Heap_$_62[$o_$375,$allocated]) ==> (($Heap_$_62[$o_$375,$inv] == $typeof($o_$375)) && ($Heap_$_62[$o_$375,$localinv] == $typeof($o_$375))) ));
	assume (forall  $o_$376 : ref :: {$Heap_$_62[$o_$376,$FirstConsistentOwner]} ( ($Heap_$_57[$Heap_$_57[$o_$376,$FirstConsistentOwner],$exposeVersion] == $Heap_$_62[$Heap_$_57[$o_$376,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_57[$o_$376,$FirstConsistentOwner] == $Heap_$_62[$o_$376,$FirstConsistentOwner]) ));
	assume $Heap_$_62 == $Heap_$_57;
	assume false || (call5formal_$_$result_$_0_$6 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_62,stack1o_$_3,0));
	assume (forall<alpha> $o_$377 : ref, $f_$119 : Field (alpha)  :: {$Heap_$_62[$o_$377,$f_$119]} ( ((((((!($o_$377 == null)) && IncludeInMainFrameCondition($f_$119)) && $Heap_$_57[$o_$377,$allocated]) && ((($Heap_$_57[$o_$377,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_57[$Heap_$_57[$o_$377,$ownerRef],$inv] <: $Heap_$_57[$o_$377,$ownerFrame]))) || ($Heap_$_57[$Heap_$_57[$o_$377,$ownerRef],$localinv] == $BaseClass($Heap_$_57[$o_$377,$ownerFrame])))) && true) && true) ==> ($Heap_$_57[$o_$377,$f_$119] == $Heap_$_62[$o_$377,$f_$119]) ));
	assume $HeapSucc($Heap_$_57,$Heap_$_62);
	assume (forall  $o_$378 : ref :: {$Heap_$_62[$o_$378,$localinv]} {$Heap_$_62[$o_$378,$inv]} ( $Heap_$_57[$o_$378,$allocated] ==> (($Heap_$_57[$o_$378,$inv] == $Heap_$_62[$o_$378,$inv]) && ($Heap_$_57[$o_$378,$localinv] == $Heap_$_62[$o_$378,$localinv])) ));
	assume (((forall  $o_$379 : ref :: {$Heap_$_62[$o_$379,$allocated]} ( $Heap_$_57[$o_$379,$allocated] ==> $Heap_$_62[$o_$379,$allocated] ))) && ((forall  $ot_$62 : ref :: {$Heap_$_62[$ot_$62,$ownerFrame]} {$Heap_$_62[$ot_$62,$ownerRef]} ( ($Heap_$_57[$ot_$62,$allocated] && (!($Heap_$_57[$ot_$62,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_62[$ot_$62,$ownerRef] == $Heap_$_57[$ot_$62,$ownerRef]) && ($Heap_$_62[$ot_$62,$ownerFrame] == $Heap_$_57[$ot_$62,$ownerFrame])) )))) && ($Heap_$_57[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_62[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  !(call3formal_$_$result_$_0_$5 == null);
	assume stack2o_$_1 == $Heap_$_62[call3formal_$_$result_$_0_$5,SExpressionSimplifier.Nary.Args];
	assert  !(stack2o_$_1 == null);
	assume $Utter($Heap_$_62[stack2o_$_1,$ownerRef]);
	assert  (forall<alpha> $o_$380 : ref, $f_$120 : Field (alpha)  :: {$Heap_$_62[$o_$380,$f_$120]} ( ((((((!($o_$380 == null)) && IncludeInMainFrameCondition($f_$120)) && $Heap[$o_$380,$allocated]) && ((($Heap[$o_$380,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$380,$ownerRef],$inv] <: $Heap[$o_$380,$ownerFrame]))) || ($Heap[$Heap[$o_$380,$ownerRef],$localinv] == $BaseClass($Heap[$o_$380,$ownerFrame])))) && true) && true) ==> ((((IncludeInMainFrameCondition($f_$120) && $Heap_$_62[$o_$380,$allocated]) && ((($Heap_$_62[$o_$380,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_62[$Heap_$_62[$o_$380,$ownerRef],$inv] <: $Heap_$_62[$o_$380,$ownerFrame]))) || ($Heap_$_62[$Heap_$_62[$o_$380,$ownerRef],$localinv] == $BaseClass($Heap_$_62[$o_$380,$ownerFrame])))) && true) && true) ));
	assume $IsNotNull(call5formal_$_$result_$7,SExpressionSimplifier.Sx) && $Heap[call5formal_$_$result_$7,$allocated];
	assert  0 <= 1;
	assert  1 < #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Count($Heap_$_62,stack2o_$_1);
	assert  (forall  $pc_$36 : ref :: {$typeof($pc_$36)} {$Heap_$_62[$pc_$36,$localinv]} {$Heap_$_62[$pc_$36,$inv]} {$Heap_$_62[$pc_$36,$ownerFrame]} {$Heap_$_62[$pc_$36,$ownerRef]} ( ((((!($pc_$36 == null)) && $Heap_$_62[$pc_$36,$allocated]) && ($Heap_$_62[$pc_$36,$ownerRef] == $Heap_$_62[stack2o_$_1,$ownerRef])) && ($Heap_$_62[$pc_$36,$ownerFrame] == $Heap_$_62[stack2o_$_1,$ownerFrame])) ==> (($Heap_$_62[$pc_$36,$inv] == $typeof($pc_$36)) && ($Heap_$_62[$pc_$36,$localinv] == $typeof($pc_$36))) ));
	assume IsHeap($Heap_$_63);
	assume $IsNotNull(call5formal_$_$result_$_0_$7,SExpressionSimplifier.Sx) && $Heap_$_63[call5formal_$_$result_$_0_$7,$allocated];
	assume $Heap_$_62[call5formal_$_$result_$_0_$7,$allocated];
	assume (((!($Heap_$_63[stack2o_$_1,$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$inv] <: $Heap_$_63[stack2o_$_1,$ownerFrame])) && (!($Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$localinv] == $BaseClass($Heap_$_63[stack2o_$_1,$ownerFrame])))) ==> (((!(((!($Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_63[$Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerRef],$inv] <: $Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerFrame])) && (!($Heap_$_63[$Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerFrame]))))) ==> ($Heap_$_63[stack2o_$_1,$FirstConsistentOwner] == $Heap_$_63[stack2o_$_1,$ownerRef])) && ((((!($Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerFrame] == $PeerGroupPlaceholder)) && ($Heap_$_63[$Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerRef],$inv] <: $Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerFrame])) && (!($Heap_$_63[$Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerRef],$localinv] == $BaseClass($Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$ownerFrame])))) ==> ($Heap_$_63[stack2o_$_1,$FirstConsistentOwner] == $Heap_$_63[$Heap_$_63[stack2o_$_1,$ownerRef],$FirstConsistentOwner])));
	assume $AsPureObject(stack2o_$_1) == stack2o_$_1;
	assume IsFrozen(call5formal_$_$result_$_0_$7,$Heap_$_63);
	assume (forall  $o_$381 : ref :: {$Heap_$_63[$o_$381,$localinv]} {$Heap_$_63[$o_$381,$inv]} ( (((!($o_$381 == null)) && (!$Heap_$_62[$o_$381,$allocated])) && $Heap_$_63[$o_$381,$allocated]) ==> (($Heap_$_63[$o_$381,$inv] == $typeof($o_$381)) && ($Heap_$_63[$o_$381,$localinv] == $typeof($o_$381))) ));
	assume (forall  $o_$382 : ref :: {$Heap_$_63[$o_$382,$FirstConsistentOwner]} ( ($Heap_$_62[$Heap_$_62[$o_$382,$FirstConsistentOwner],$exposeVersion] == $Heap_$_63[$Heap_$_62[$o_$382,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_62[$o_$382,$FirstConsistentOwner] == $Heap_$_63[$o_$382,$FirstConsistentOwner]) ));
	assume $Heap_$_63 == $Heap_$_62;
	assume false || (call5formal_$_$result_$_0_$7 == #System.Collections.Generic.List`1...optional...Microsoft.Contracts.NonNullType.SExpressionSimplifier.Sx.get_Item$System.Int32($Heap_$_63,stack2o_$_1,1));
	assume (forall<alpha> $o_$383 : ref, $f_$121 : Field (alpha)  :: {$Heap_$_63[$o_$383,$f_$121]} ( ((((((!($o_$383 == null)) && IncludeInMainFrameCondition($f_$121)) && $Heap_$_62[$o_$383,$allocated]) && ((($Heap_$_62[$o_$383,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_62[$Heap_$_62[$o_$383,$ownerRef],$inv] <: $Heap_$_62[$o_$383,$ownerFrame]))) || ($Heap_$_62[$Heap_$_62[$o_$383,$ownerRef],$localinv] == $BaseClass($Heap_$_62[$o_$383,$ownerFrame])))) && true) && true) ==> ($Heap_$_62[$o_$383,$f_$121] == $Heap_$_63[$o_$383,$f_$121]) ));
	assume $HeapSucc($Heap_$_62,$Heap_$_63);
	assume (forall  $o_$384 : ref :: {$Heap_$_63[$o_$384,$localinv]} {$Heap_$_63[$o_$384,$inv]} ( $Heap_$_62[$o_$384,$allocated] ==> (($Heap_$_62[$o_$384,$inv] == $Heap_$_63[$o_$384,$inv]) && ($Heap_$_62[$o_$384,$localinv] == $Heap_$_63[$o_$384,$localinv])) ));
	assume (((forall  $o_$385 : ref :: {$Heap_$_63[$o_$385,$allocated]} ( $Heap_$_62[$o_$385,$allocated] ==> $Heap_$_63[$o_$385,$allocated] ))) && ((forall  $ot_$63 : ref :: {$Heap_$_63[$ot_$63,$ownerFrame]} {$Heap_$_63[$ot_$63,$ownerRef]} ( ($Heap_$_62[$ot_$63,$allocated] && (!($Heap_$_62[$ot_$63,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_63[$ot_$63,$ownerRef] == $Heap_$_62[$ot_$63,$ownerRef]) && ($Heap_$_63[$ot_$63,$ownerFrame] == $Heap_$_62[$ot_$63,$ownerFrame])) )))) && ($Heap_$_62[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_63[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assume (($Heap_$_63[stack50000o_$_6,$allocated] <==> false) && (!(stack50000o_$_6 == null))) && ($typeof(stack50000o_$_6) == SExpressionSimplifier.Nary);
	assume ($Heap_$_63[stack50000o_$_6,$ownerRef] == stack50000o_$_6) && ($Heap_$_63[stack50000o_$_6,$ownerFrame] == $PeerGroupPlaceholder);
	assert  !(stack50000o_$_6 == null);
	assume $Utter($Heap_$_63[stack50000o_$_6,$ownerRef]);
	assume $Utter($Heap_$_63[$stringLiteral14,$ownerRef]);
	assume $Utter($Heap_$_63[call5formal_$_$result_$_0_$6,$ownerRef]);
	assume $Utter($Heap_$_63[call5formal_$_$result_$_0_$7,$ownerRef]);
	assert  (forall<alpha> $o_$386 : ref, $f_$122 : Field (alpha)  :: {$Heap_$_63[$o_$386,$f_$122]} ( ((((((!($o_$386 == null)) && IncludeInMainFrameCondition($f_$122)) && $Heap[$o_$386,$allocated]) && ((($Heap[$o_$386,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap[$Heap[$o_$386,$ownerRef],$inv] <: $Heap[$o_$386,$ownerFrame]))) || ($Heap[$Heap[$o_$386,$ownerRef],$localinv] == $BaseClass($Heap[$o_$386,$ownerFrame])))) && true) && true) ==> (((((IncludeInMainFrameCondition($f_$122) && $Heap_$_63[$o_$386,$allocated]) && ((($Heap_$_63[$o_$386,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_63[$Heap_$_63[$o_$386,$ownerRef],$inv] <: $Heap_$_63[$o_$386,$ownerFrame]))) || ($Heap_$_63[$Heap_$_63[$o_$386,$ownerRef],$localinv] == $BaseClass($Heap_$_63[$o_$386,$ownerFrame])))) && ((!($o_$386 == stack50000o_$_6)) || (!(SExpressionSimplifier.Nary <: DeclType($f_$122))))) && true) && true) ));
	assert  IsFrozen($stringLiteral14,$Heap_$_63);
	assert  IsFrozen(call5formal_$_$result_$_0_$6,$Heap_$_63);
	assert  IsFrozen(call5formal_$_$result_$_0_$7,$Heap_$_63);
	assume IsHeap($Heap_$_64);
	assume $Heap_$_64[stack50000o_$_6,$allocated];
	assume (((($Heap_$_64[stack50000o_$_6,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_64[$Heap_$_64[stack50000o_$_6,$ownerRef],$inv] <: $Heap_$_64[stack50000o_$_6,$ownerFrame]))) || ($Heap_$_64[$Heap_$_64[stack50000o_$_6,$ownerRef],$localinv] == $BaseClass($Heap_$_64[stack50000o_$_6,$ownerFrame]))) && ($Heap_$_64[stack50000o_$_6,$inv] == SExpressionSimplifier.Nary)) && ($Heap_$_64[stack50000o_$_6,$localinv] == $typeof(stack50000o_$_6));
	assume ($Heap_$_64[stack50000o_$_6,$ownerRef] == $Heap_$_63[stack50000o_$_6,$ownerRef]) && ($Heap_$_64[stack50000o_$_6,$ownerFrame] == $Heap_$_63[stack50000o_$_6,$ownerFrame]);
	assume (forall  $o_$387 : ref :: {$Heap_$_64[$o_$387,$localinv]} {$Heap_$_64[$o_$387,$inv]} ( (((!($o_$387 == null)) && (!$Heap_$_63[$o_$387,$allocated])) && $Heap_$_64[$o_$387,$allocated]) ==> (($Heap_$_64[$o_$387,$inv] == $typeof($o_$387)) && ($Heap_$_64[$o_$387,$localinv] == $typeof($o_$387))) ));
	assume (forall  $o_$388 : ref :: {$Heap_$_64[$o_$388,$FirstConsistentOwner]} ( ($Heap_$_63[$Heap_$_63[$o_$388,$FirstConsistentOwner],$exposeVersion] == $Heap_$_64[$Heap_$_63[$o_$388,$FirstConsistentOwner],$exposeVersion]) ==> ($Heap_$_63[$o_$388,$FirstConsistentOwner] == $Heap_$_64[$o_$388,$FirstConsistentOwner]) ));
	assume (forall<alpha> $o_$389 : ref, $f_$123 : Field (alpha)  :: {$Heap_$_64[$o_$389,$f_$123]} ( (((((((!($o_$389 == null)) && IncludeInMainFrameCondition($f_$123)) && $Heap_$_63[$o_$389,$allocated]) && ((($Heap_$_63[$o_$389,$ownerFrame] == $PeerGroupPlaceholder) || (!($Heap_$_63[$Heap_$_63[$o_$389,$ownerRef],$inv] <: $Heap_$_63[$o_$389,$ownerFrame]))) || ($Heap_$_63[$Heap_$_63[$o_$389,$ownerRef],$localinv] == $BaseClass($Heap_$_63[$o_$389,$ownerFrame])))) && ((!($o_$389 == stack50000o_$_6)) || (!(SExpressionSimplifier.Nary <: DeclType($f_$123))))) && true) && true) ==> ($Heap_$_63[$o_$389,$f_$123] == $Heap_$_64[$o_$389,$f_$123]) ));
	assume $HeapSucc($Heap_$_63,$Heap_$_64);
	assume (forall  $o_$390 : ref :: {$Heap_$_64[$o_$390,$localinv]} {$Heap_$_64[$o_$390,$inv]} ( ($Heap_$_63[$o_$390,$allocated] && (!($o_$390 == stack50000o_$_6))) ==> (($Heap_$_63[$o_$390,$inv] == $Heap_$_64[$o_$390,$inv]) && ($Heap_$_63[$o_$390,$localinv] == $Heap_$_64[$o_$390,$localinv])) ));
	assume (((forall  $o_$391 : ref :: {$Heap_$_64[$o_$391,$allocated]} ( $Heap_$_63[$o_$391,$allocated] ==> $Heap_$_64[$o_$391,$allocated] ))) && ((forall  $ot_$64 : ref :: {$Heap_$_64[$ot_$64,$ownerFrame]} {$Heap_$_64[$ot_$64,$ownerRef]} ( ($Heap_$_63[$ot_$64,$allocated] && (!($Heap_$_63[$ot_$64,$ownerFrame] == $PeerGroupPlaceholder))) ==> (($Heap_$_64[$ot_$64,$ownerRef] == $Heap_$_63[$ot_$64,$ownerRef]) && ($Heap_$_64[$ot_$64,$ownerFrame] == $Heap_$_63[$ot_$64,$ownerFrame])) )))) && ($Heap_$_63[$BeingConstructed,$NonNullFieldsAreInitialized] <==> $Heap_$_64[$BeingConstructed,$NonNullFieldsAreInitialized]);
	assert  $Heap_$_64[stack50000o_$_6,$ownerFrame] == $PeerGroupPlaceholder;
	assert  (forall  $pc_$37 : ref :: {$typeof($pc_$37)} {$Heap_$_64[$pc_$37,$localinv]} {$Heap_$_64[$pc_$37,$inv]} {$Heap_$_64[$pc_$37,$ownerFrame]} {$Heap_$_64[$pc_$37,$ownerRef]} ( ((((!($pc_$37 == null)) && $Heap_$_64[$pc_$37,$allocated]) && ($Heap_$_64[$pc_$37,$ownerRef] == $Heap_$_64[stack50000o_$_6,$ownerRef])) && ($Heap_$_64[$pc_$37,$ownerFrame] == $Heap_$_64[stack50000o_$_6,$ownerFrame])) ==> (($Heap_$_64[$pc_$37,$inv] == $typeof($pc_$37)) && ($Heap_$_64[$pc_$37,$localinv] == $typeof($pc_$37))) ));
	assume IsHeap($Heap_$_65);
	assume (forall<alpha> p_$19 : ref, F_$5 : Field (alpha)  :: {$Heap_$_65[p_$19,F_$5]} ( ((((!(F_$5 == $ownerRef)) && (!(F_$5 == $ownerFrame))) && (!(F_$5 == $FirstConsistentOwner))) || ((!($Heap_$_64[p_$19,$ownerRef] == $Heap_$_64[stack50000o_$_6,$ownerRef])) || (!($Heap_$_64[p_$19,$ownerFrame] == $Heap_$_64[stack50000o_$_6,$ownerFrame])))) ==> ($Heap_$_64[p_$19,F_$5] == $Heap_$_65[p_$19,F_$5]) ));
	assume (stack50000o_$_6 == null) ==> ($Heap_$_65 == $Heap_$_64);
	assume (!(stack50000o_$_6 == null)) ==> ((forall  p_$20 : ref :: {$Heap_$_65[p_$20,$ownerRef]} {$Heap_$_65[p_$20,$ownerFrame]} ( (($Heap_$_64[p_$20,$ownerRef] == $Heap_$_64[stack50000o_$_6,$ownerRef]) && ($Heap_$_64[p_$20,$ownerFrame] == $Heap_$_64[stack50000o_$_6,$ownerFrame])) ==> (($Heap_$_65[p_$20,$ownerRef] == $freezerRef) && ($Heap_$_65[p_$20,$ownerFrame] == $Freezer)) )));
	assume $HeapSucc($Heap_$_64,$Heap_$_65);
	assume $Heap_$_79 == $Heap_$_65;
	assume return.value_$_0 == stack50000o_$_6;
	goto block12750;
GeneratedUnifiedExit:
	assert  IsFrozen($result_$_0,$Heap_$_80);
	goto $exit;
}
