type Integer = int;
type Boolean = bool;
type $labelset = [$ptr]bool;
type $ctype;
type $ptr;
type $field;
type $kind;
type $type_state;
type $status;
type $primitive;
type $struct;
type $token;
type $state;
type $pure_function;
type $label;
type $memory_t;
type $typemap_t;
type $statusmap_t;
type $record;
type $version;
type $vol_version;
type $ptrset;
type $flowdata;
type $map_t..$ptr_to..^^void.^^bool;
type $ptrclub;
type cf_event;
type var_locglob;
const unique $kind_composite : $kind;
const unique $kind_primitive : $kind;
const unique $kind_array : $kind;
const unique $kind_thread : $kind;
const unique ^^i1 : $ctype;
const unique ^^i2 : $ctype;
const unique ^^i4 : $ctype;
const unique ^^i8 : $ctype;
const unique ^^u1 : $ctype;
const unique ^^u2 : $ctype;
const unique ^^u4 : $ctype;
const unique ^^u8 : $ctype;
const unique ^^void : $ctype;
const unique ^^bool : $ctype;
const unique ^^claim : $ctype;
const unique ^^root_emb : $ctype;
const unique ^^mathint : $ctype;
const unique ^$#ptrset : $ctype;
const $arch_ptr_size : int;
const $null : $ptr;
const $struct_zero : $struct;
const $rec_zero : $record;
const $arch_spec_ptr_start : int;
const unique $memory_allocator_type : $ctype;
const $memory_allocator_ref : int;
const $min.i1 : int;
const $max.i1 : int;
const $min.i2 : int;
const $max.i2 : int;
const $min.i4 : int;
const $max.i4 : int;
const $min.i8 : int;
const $max.i8 : int;
const $max.u1 : int;
const $max.u2 : int;
const $max.u4 : int;
const $max.u8 : int;
const unique $no_claim : $ptr;
const $current_frame_level : int;
const $current_pure_post_level : int;
const $seclbl.top : bool;
const $seclbl.bot : bool;
const $lblset.top : $labelset;
const $lblset.bot : $labelset;
const $zero.$map_t..$ptr_to..^^void.^^bool : $map_t..$ptr_to..^^void.^^bool;
const unique cf#classifier#default : $pure_function;
const $ptrclub.empty : [$ptr]bool;
const unique ^$#thread_id : $ctype;
const unique ^A : $ctype;
const unique A.$owns : $field;
const unique A.x : $field;
const unique l#public : $label;
const unique #distTp3 : $ctype;
const unique #distTp2 : $ctype;
const unique #distTp1 : $ctype;
const unique #loc._this_ : $token;
const unique #tok$1^13.1 : $token;
const unique #file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c : $token;
function $kind_of($ctype) : $kind;
function $sizeof($ctype) : int;
function $as_in_range_t($ctype) : $ctype;
function $ptr_to($ctype) : $ctype;
function $spec_ptr_to($ctype) : $ctype;
function $ptr_level($ctype) : int;
function $map_t($ctype,$ctype) : $ctype;
function {:weight  0} $is_primitive($ctype) : bool;
function {:inline  true} $is_primitive_ch(t:$ctype) : bool {$kind_of(t) == $kind_primitive}
function {:weight  0} $is_composite($ctype) : bool;
function {:weight  0} $is_arraytype($ctype) : bool;
function {:weight  0} $is_threadtype($ctype) : bool;
function $field_parent_type($field) : $ctype;
function $is_non_primitive($ctype) : bool;
function $me() : $ptr;
function $select.mem($memory_t,$ptr) : int;
function $store.mem($memory_t,$ptr,int) : $memory_t;
function $select_range.mem($memory_t,$ptr,int) : int;
function $select.tm($typemap_t,$ptr) : $type_state;
function $select.sm($statusmap_t,$ptr) : $status;
function $store.sm($statusmap_t,$ptr,$status) : $statusmap_t;
function $memory($state) : $memory_t;
function $typemap($state) : $typemap_t;
function $statusmap($state) : $statusmap_t;
function {:inline  true} $mem(s_$0:$state,p_$2:$ptr) : int {$select.mem($memory(s_$0),p_$2)}
function {:inline  true} $mem_eq(s1:$state,s2:$state,p_$4:$ptr) : bool {$mem(s1,p_$4) == $mem(s2,p_$4)}
function {:inline  true} $st_eq(s1_$0:$state,s2_$0:$state,p_$5:$ptr) : bool {$st(s1_$0,p_$5) == $st(s2_$0,p_$5)}
function {:inline  true} $ts_eq(s1_$1:$state,s2_$1:$state,p_$6:$ptr) : bool {$ts(s1_$1,p_$6) == $ts(s2_$1,p_$6)}
function $extent_hint($ptr,$ptr) : bool;
function $is_nested($ctype,$ctype) : bool;
function $nesting_min($ctype,$ctype) : int;
function $nesting_max($ctype,$ctype) : int;
function $typ($ptr) : $ctype;
function $ref($ptr) : int;
function $ptr($ctype,int) : $ptr;
function $ghost_ref($ptr,$field) : int;
function $ghost_emb(int) : $ptr;
function $ghost_path(int) : $field;
function $array_path($field,int) : $field;
function $is_base_field($field) : bool;
function $array_path_1($field) : $field;
function $array_path_2($field) : int;
function $is($ptr,$ctype) : bool;
function $dot($ptr,$field) : $ptr;
function {:inline  true} $emb(S_$0:$state,#p_$0:$ptr) : $ptr {$ts_emb($ts(S_$0,#p_$0))}
function {:inline  true} $path(S_$1:$state,#p_$1:$ptr) : $field {$ts_path($ts(S_$1,#p_$1))}
function $is_primitive_non_volatile_field($field) : bool;
function $is_primitive_volatile_field($field) : bool;
function $is_primitive_embedded_array($field,int) : bool;
function $is_primitive_embedded_volatile_array($field,int,$ctype) : bool;
function $embedded_array_size($field,$ctype) : int;
function $ts_typed($type_state) : bool;
function $ts_emb($type_state) : $ptr;
function $ts_path($type_state) : $field;
function $ts_is_volatile($type_state) : bool;
function {:inline  true} $is_object_root(S_$3:$state,p_$9:$ptr) : bool {$emb(S_$3,p_$9) == $ptr(^^root_emb,$ref(p_$9))}
function {:inline  true} $is_volatile(S_$4:$state,p_$10:$ptr) : bool {$ts_is_volatile($ts(S_$4,p_$10))}
function $current_timestamp($state) : int;
function $in_writes_at(int,$ptr) : bool;
function $vs_base_ref($struct) : int;
function $vs_state($struct) : $state;
function $vs_ctor($state,$ptr) : $struct;
function $rec_update($record,$field,int) : $record;
function $rec_fetch($record,$field) : int;
function $is_record_type($ctype) : bool;
function $is_record_field($ctype,$field,$ctype) : bool;
function $as_record_record_field($field) : $field;
function $record_field_int_kind($field) : $ctype;
function $rec_eq($record,$record) : bool;
function $rec_base_eq(int,int) : bool;
function $int_to_record(int) : $record;
function $good_state($state) : bool;
function $invok_state($state) : bool;
function $has_volatile_owns_set($ctype) : bool;
function $owns_set_field($ctype) : $field;
function $st_owner($status) : $ptr;
function $st_closed($status) : bool;
function $st_timestamp($status) : int;
function $owner($state,$ptr) : $ptr;
function $closed($state,$ptr) : bool;
function $timestamp($state,$ptr) : int;
function $position_marker() : bool;
function {:inline  true} $st(S_$8:$state,p_$15:$ptr) : $status {$select.sm($statusmap(S_$8),p_$15)}
function {:inline  true} $ts(S_$9:$state,p_$16:$ptr) : $type_state {$select.tm($typemap(S_$9),p_$16)}
function {:weight  0} $owns($state,$ptr) : $ptrset;
function {:inline  true} $nested(S_$10:$state,p_$17:$ptr) : bool {!($kind_of($typ($owner(S_$10,p_$17))) == $kind_thread)}
function {:inline  true} $nested_in(S_$11:$state,p_$18:$ptr,owner:$ptr) : bool {($owner(S_$11,p_$18) == owner) && $closed(S_$11,p_$18)}
function {:inline  true} $wrapped(S_$12:$state,#p_$2:$ptr,#t_$0:$ctype) : bool {((($closed(S_$12,#p_$2) && ($owner(S_$12,#p_$2) == $me())) && $typed2(S_$12,#p_$2,#t_$0)) && (!($kind_of(#t_$0) == $kind_primitive))) && $is_non_primitive(#t_$0)}
function {:weight  0} $mutable($state,$ptr) : bool;
function {:inline  true} $thread_owned_or_even_mutable(S_$15:$state,p_$21:$ptr) : bool {($typed(S_$15,p_$21) && ($owner(S_$15,p_$21) == $me())) && ($is_primitive_ch($typ(p_$21)) ==> (!$closed(S_$15,p_$21)))}
function $typed($state,$ptr) : bool;
function $in_range_phys_ptr(int) : bool;
function $in_range_spec_ptr(int) : bool;
function {:inline  true} $typed2(S_$16:$state,#p_$3:$ptr,#t_$1:$ctype) : bool {$is(#p_$3,#t_$1) && $typed(S_$16,#p_$3)}
function $is_domain_root($state,$ptr) : bool;
function $in_wrapped_domain($state,$ptr) : bool;
function $thread_local($state,$ptr) : bool;
function {:inline  true} $thread_local2(S_$21:$state,#p_$6:$ptr,#t_$4:$ctype) : bool {$is(#p_$6,#t_$4) && $thread_local(S_$21,#p_$6)}
function $dont_instantiate($ptr) : bool;
function $dont_instantiate_state($state) : bool;
function $instantiate_int(int) : bool;
function $instantiate_bool(bool) : bool;
function $instantiate_ptr($ptr) : bool;
function $instantiate_ptrset($ptrset) : bool;
function {:inline  true} $inv(#s1:$state,#p_$7:$ptr,typ:$ctype) : bool {$inv2(#s1,#s1,#p_$7,typ)}
function {:inline  true} $inv2nt(S1:$state,S2:$state,p_$24:$ptr) : bool {$inv2(S1,S2,p_$24,$typ(p_$24))}
function $inv2($state,$state,$ptr,$ctype) : bool;
function {:inline  true} $inv2_when_closed(#s1_$0:$state,#s2:$state,#p_$8:$ptr,typ_$0:$ctype) : bool {((!$closed(#s1_$0,#p_$8)) && (!$closed(#s2,#p_$8))) || ($inv2(#s1_$0,#s2,#p_$8,typ_$0) && $nonvolatile_spans_the_same(#s1_$0,#s2,#p_$8,typ_$0))}
function {:weight  0} $spans_the_same($state,$state,$ptr,$ctype) : bool;
function $state_spans_the_same($state,$state,$ptr,$ctype) : bool;
function {:weight  0} $nonvolatile_spans_the_same($state,$state,$ptr,$ctype) : bool;
function $state_nonvolatile_spans_the_same($state,$state,$ptr,$ctype) : bool;
function {:inline  true} $in_extent_of(S_$22:$state,#p1:$ptr,#p2:$ptr) : bool {$set_in(#p1,$extent(S_$22,#p2))}
function {:inline  true} $in_full_extent_of(#p1_$0:$ptr,#p2_$0:$ptr) : bool {$set_in(#p1_$0,$full_extent(#p2_$0))}
function $extent_mutable($state,$ptr) : bool;
function $extent_zero($state,$ptr) : bool;
function {:inline  true} $forall_inv2_when_closed(#s1_$1:$state,#s2_$0:$state) : bool {(forall  #p_$9 : $ptr :: {$closed(#s1_$1,#p_$9)} {$closed(#s2_$0,#p_$9)} ( $inv2_when_closed(#s1_$1,#s2_$0,#p_$9,$typ(#p_$9)) ))}
function $function_entry($state) : bool;
function $full_stop($state) : bool;
function {:inline  true} $full_stop_ext(t_$6:$token,S_$23:$state) : bool {$good_state_ext(t_$6,S_$23) && $full_stop(S_$23)}
function $file_name_is(int,$token) : bool;
function {:inline  true} $closed_is_transitive(S_$24:$state) : bool {(forall  #p_$10 : $ptr, #q : $ptr :: {$set_in(#p_$10,$owns(S_$24,#q))} ( (($good_state(S_$24) && $set_in(#p_$10,$owns(S_$24,#q))) && $closed(S_$24,#q)) ==> ($closed(S_$24,#p_$10) && (!($ref(#p_$10) == 0))) ))}
function $call_transition($state,$state) : bool;
function $good_state_ext($token,$state) : bool;
function $local_value_is($state,$token,$token,int,$ctype) : bool;
function $local_value_is_ptr($state,$token,$token,$ptr,$ctype) : bool;
function $read_ptr_m($state,$ptr,$ctype) : $ptr;
function $function_arg_type($pure_function,int,$ctype) : bool;
function $ver_domain($version) : $ptrset;
function {:weight  0} $read_version($state,$ptr) : $version;
function {:weight  0} $domain($state,$ptr) : $ptrset;
function $in_domain($state,$ptr,$ptr) : bool;
function $in_vdomain($state,$ptr,$ptr) : bool;
function $in_domain_lab($state,$ptr,$ptr,$label) : bool;
function $in_vdomain_lab($state,$ptr,$ptr,$label) : bool;
function $inv_lab($state,$ptr,$label) : bool;
function $fetch_from_domain($version,$ptr) : int;
function $in_claim_domain($ptr,$ptr) : bool;
function {:weight  0} $by_claim($state,$ptr,$ptr,$ptr) : $ptr;
function $claim_version($ptr) : $version;
function {:weight  0} $read_vol_version($state,$ptr) : $vol_version;
function $fetch_from_vv($vol_version,$ptr) : int;
function $is_approved_by($ctype,$field,$field) : bool;
function {:inline  true} $inv_is_approved_by_ptr(S1_$0:$state,S2_$0:$state,this:$ptr,approver:$ptr,subject:$field) : bool {(($mem_eq(S1_$0,S2_$0,$dot(this,subject)) || ($ref(approver) == 0)) || ((!$is_threadtype($typ(approver))) && $inv2nt(S1_$0,S2_$0,approver))) || ($is_threadtype($typ(approver)) && (!($read_vol_version(S1_$0,this) == $read_vol_version(S2_$0,this))))}
function $is_owner_approved($ctype,$field) : bool;
function $good_for_admissibility($state) : bool;
function {:inline  true} $stuttering_pre(S_$27:$state,p_$26:$ptr) : bool {((forall  #q_$0 : $ptr :: {$st(S_$27,#q_$0)} ( $closed(S_$27,#q_$0) ==> $inv(S_$27,#q_$0,$typ(#q_$0)) ))) && $good_for_admissibility(S_$27)}
function $is_stuttering_check() : bool;
function $is_unwrap_check() : bool;
function $good_for_pre_can_unwrap($state) : bool;
function $update_int($state,$ptr,int) : $state;
function {:inline  true} $timestamp_is_now(S_$30:$state,p_$30:$ptr) : bool {$timestamp(S_$30,p_$30) == $current_timestamp(S_$30)}
function {:inline  true} $timestamp_post(M1_$0:$state,M2_$0:$state) : bool {(($current_timestamp(M1_$0) <= $current_timestamp(M2_$0)) && ((forall  p_$32 : $ptr :: {$timestamp(M2_$0,p_$32)} {:weight  0}( $timestamp(M1_$0,p_$32) <= $timestamp(M2_$0,p_$32) )))) && $call_transition(M1_$0,M2_$0)}
function {:inline  true} $unwrap_post(S0:$state,S_$32:$state,#l:$ptr,#p_$12:$ptr) : bool {(((($typed(S0,#p_$12) && $wrapped(S_$32,#p_$12,$typ(#p_$12))) && $timestamp_is_now(S_$32,#p_$12)) && $is_non_primitive($typ(#p_$12))) && $set_in(#p_$12,$owns(S0,#l))) && $nested_in(S0,#p_$12,#l)}
function $taken_over($state,$ptr,$ptr) : $status;
function $take_over($state,$ptr,$ptr) : $state;
function $released($state,$ptr,$ptr) : $status;
function $release($state,$state,$ptr,$ptr) : $state;
function $post_unwrap($state,$state) : bool;
function $program_entry_point($state) : bool;
function $program_entry_point_ch($state) : bool;
function {:inline  true} $active_option(S_$41:$state,u:$ptr) : $field {$ts_active_option($ts(S_$41,u))}
function $ts_active_option($type_state) : $field;
function $full_extent($ptr) : $ptrset;
function $extent($state,$ptr) : $ptrset;
function $span($ptr) : $ptrset;
function {:inline  true} $struct_extent(#p_$17:$ptr) : $ptrset {$full_extent(#p_$17)}
function $volatile_span($state,$ptr) : $ptrset;
function $set_in($ptr,$ptrset) : bool;
function $set_empty() : $ptrset;
function $set_singleton($ptr) : $ptrset;
function $non_null_set_singleton($ptr) : $ptrset;
function $set_union($ptrset,$ptrset) : $ptrset;
function $set_difference($ptrset,$ptrset) : $ptrset;
function $set_intersection($ptrset,$ptrset) : $ptrset;
function $set_eq($ptrset,$ptrset) : bool;
function $set_cardinality($ptrset) : int;
function $set_universe() : $ptrset;
function $set_disjoint($ptrset,$ptrset) : bool;
function $id_set_disjoint($ptr,$ptrset,$ptrset) : int;
function $set_in2($ptr,$ptrset) : bool;
function $in_some_owns($ptr) : bool;
function $set_in0($ptr,$ptrset) : bool;
function $array($ctype,int) : $ctype;
function $element_type($ctype) : $ctype;
function $array_length($ctype) : int;
function $idx($ptr,int,$ctype) : $ptr;
function {:weight  0} $is_array_vol_or_nonvol($state,$ptr,$ctype,int,bool) : bool;
function {:weight  0} $is_array($state,$ptr,$ctype,int) : bool;
function $array_members($ptr,$ctype,int) : $ptrset;
function $array_range_no_state($ptr,$ctype,int) : $ptrset;
function $array_range($state,$ptr,$ctype,int) : $ptrset;
function $non_null_array_range($ptr,$ctype,int) : $ptrset;
function $non_null_extent($state,$ptr) : $ptrset;
function {:inline  true} $as_array(p_$49:$ptr,T_$6:$ctype,sz_$7:int) : $ptr {$ptr($array(T_$6,sz_$7),$ref(p_$49))}
function $index_within($ptr,$ptr) : int;
function $simple_index($ptr,$ptr) : bool;
function {:inline  true} $in_range(min:int,val:int,max:int) : bool {(min <= val) && (val <= max)}
function $ptr_to_u8($ptr) : int;
function $ptr_to_i8($ptr) : int;
function $ptr_to_u4($ptr) : int;
function $ptr_to_i4($ptr) : int;
function $ptr_to_u2($ptr) : int;
function $ptr_to_i2($ptr) : int;
function $ptr_to_u1($ptr) : int;
function $ptr_to_i1($ptr) : int;
function $_pow2(int) : int;
function $in_range_ubits(int,int) : bool;
function $unchecked_sbits(int,int) : int;
function $in_range_sbits(int,int) : bool;
function $unchecked_ubits(int,int) : int;
function $_or($ctype,int,int) : int;
function $_xor($ctype,int,int) : int;
function $_and($ctype,int,int) : int;
function $_not($ctype,int) : int;
function {:weight  0} $unchk_add($ctype,int,int) : int;
function $bv_extract_signed(int,int,int,int) : int;
function $bv_extract_unsigned(int,int,int,int) : int;
function $bv_update(int,int,int,int,int) : int;
function $unchecked($ctype,int) : int;
function $in_range_t($ctype,int) : bool;
function $get_string_literal(int,int) : $ptr;
function $get_fnptr(int,$ctype) : $ptr;
function $get_fnptr_ref(int) : int;
function $is_fnptr_type($ctype) : bool;
function $is_math_type($ctype) : bool;
function $claims_obj($ptr,$ptr) : bool;
function $valid_claim($state,$ptr) : bool;
function $claims_claim($ptr,$ptr) : bool;
function {:weight  0} $claimed_closed($state,$ptr) : bool;
function {:weight  0} $ref_cnt($state,$ptr) : int;
function $is_claimable($ctype) : bool;
function $account_claim($state,$ptr,$ptr) : bool;
function $claim_no($state,$ptr,int) : $ptr;
function $claim_idx($ptr,$ptr) : int;
function $frame_level($pure_function) : int;
function $pure_post_level($pure_function) : int;
function $int_to_ptrset(int) : $ptrset;
function $int_to_version(int) : $version;
function $int_to_vol_version(int) : $vol_version;
function $ptr_to_int($ptr) : int;
function $int_to_ptr(int) : $ptr;
function $domain_updated_at($state,$state,$ptr,$ptrset) : bool;
function {:inline  true} $seclbl.leq(l1:bool,l2:bool) : bool {l1 ==> l2}
function $select.flow.label($flowdata) : $labelset;
function $store.flow.label($flowdata,$labelset) : $flowdata;
function $select.flow.meta($flowdata) : $labelset;
function $store.flow.meta($flowdata,$labelset) : $flowdata;
function $select.flow.data($memory_t,$ptr) : $flowdata;
function $store.flow.data($memory_t,$ptr,$flowdata) : $memory_t;
function $select.$map_t..$ptr_to..^^void.^^bool($map_t..$ptr_to..^^void.^^bool,$ptr) : bool;
function $store.$map_t..$ptr_to..^^void.^^bool($map_t..$ptr_to..^^void.^^bool,$ptr,bool) : $map_t..$ptr_to..^^void.^^bool;
function $eq.$map_t..$ptr_to..^^void.^^bool($map_t..$ptr_to..^^void.^^bool,$map_t..$ptr_to..^^void.^^bool) : bool;
function $int_to_map_t..ptr_to..^^void.^^bool(int) : $map_t..$ptr_to..^^void.^^bool;
function #classifier#default() : $map_t..$ptr_to..^^void.^^bool;
function is_active_ptrclub($ptrclub) : bool;
function $ptrclub.construct([$ptr]bool,$labelset) : $ptrclub;
function $ptrclub.members($ptrclub) : [$ptr]bool;
function $ptrclub.bound($ptrclub) : $labelset;
function $ptrclub.addMember($ptr,$ptrclub) : $ptrclub;
function $ptrclub.compare($ptr,$ptr) : $labelset;
var $s : $state;
procedure f (P#_this_ : int)
{
	var #wrTime$1^13.1 : int;
	var call0formal_$_#l_$_0 : $ptr;
	var $s_$_0 : $state;
$$start:
	assume (forall  t_$10 : $ctype :: {$is_primitive(t_$10)} {:weight  0}( $is_primitive(t_$10) <==> ($kind_of(t_$10) == $kind_primitive) ));
	assume (forall  t : $ctype :: ( ($kind_of(t) == $kind_primitive) == ($kind_of(t) == $kind_primitive) ));
	assume (forall  t_$11 : $ctype :: {$is_composite(t_$11)} {:weight  0}( $is_composite(t_$11) <==> ($kind_of(t_$11) == $kind_composite) ));
	assume (forall  t_$0 : $ctype :: ( ($kind_of(t_$0) == $kind_composite) == ($kind_of(t_$0) == $kind_composite) ));
	assume (forall  t_$12 : $ctype :: {$is_arraytype(t_$12)} {:weight  0}( $is_arraytype(t_$12) <==> ($kind_of(t_$12) == $kind_array) ));
	assume (forall  t_$1 : $ctype :: ( ($kind_of(t_$1) == $kind_array) == ($kind_of(t_$1) == $kind_array) ));
	assume (forall  t_$13 : $ctype :: {$is_threadtype(t_$13)} {:weight  0}( $is_threadtype(t_$13) <==> ($kind_of(t_$13) == $kind_thread) ));
	assume (forall  p : $ptr :: ( $is_threadtype($typ(p)) == $is_threadtype($typ(p)) ));
	assume (forall  p_$0 : $ptr :: ( ($kind_of($typ(p_$0)) == $kind_composite) == ($kind_of($typ(p_$0)) == $kind_composite) ));
	assume (forall  t_$2 : $ctype :: ( (!($kind_of(t_$2) == $kind_primitive)) == (!($kind_of(t_$2) == $kind_primitive)) ));
	assume (forall  p_$1 : $ptr :: ( $is_non_primitive($typ(p_$1)) == $is_non_primitive($typ(p_$1)) ));
	assume (forall  s : $state :: ( s == s ));
	assume (forall  p_$2 : $ptr, s_$0 : $state :: ( $select.mem($memory(s_$0),p_$2) == $select.mem($memory(s_$0),p_$2) ));
	assume (forall  sz : Integer, p_$3 : $ptr, s_$1 : $state :: ( $select_range.mem($memory(s_$1),p_$3,sz) == $select_range.mem($memory(s_$1),p_$3,sz) ));
	assume (forall  p_$4 : $ptr, s2 : $state, s1 : $state :: ( ($mem(s1,p_$4) == $mem(s2,p_$4)) == ($select.mem($memory(s1),p_$4) == $select.mem($memory(s2),p_$4)) ));
	assume (forall  p_$5 : $ptr, s2_$0 : $state, s1_$0 : $state :: ( ($st(s1_$0,p_$5) == $st(s2_$0,p_$5)) == ($select.sm($statusmap(s1_$0),p_$5) == $select.sm($statusmap(s2_$0),p_$5)) ));
	assume (forall  p_$6 : $ptr, s2_$1 : $state, s1_$1 : $state :: ( ($ts(s1_$1,p_$6) == $ts(s2_$1,p_$6)) == ($select.tm($typemap(s1_$1),p_$6) == $select.tm($typemap(s2_$1),p_$6)) ));
	assume (forall  S1_$5 : $state, S2_$4 : $state, p_$54 : $ptr, sz_$12 : Integer :: {$call_transition(S1_$5,S2_$4),$select_range.mem($memory(S2_$4),p_$54,sz_$12)} ( ((forall  i_$7 : Integer :: ( ((0 <= i_$7) && (i_$7 < sz_$12)) ==> ($select.mem($memory(S1_$5),$idx(p_$54,i_$7,$typ(p_$54))) == $select.mem($memory(S2_$4),$idx(p_$54,i_$7,$typ(p_$54)))) ))) ==> ($select_range.mem($memory(S1_$5),p_$54,sz_$12) == $select_range.mem($memory(S2_$4),p_$54,sz_$12)) ));
	assume (forall  #t_$5 : $ctype, #b : Integer :: {:weight  0}( $typ($ptr(#t_$5,#b)) == #t_$5 ));
	assume (forall  #t_$6 : $ctype, #b_$0 : Integer :: {:weight  0}( $ref($ptr(#t_$6,#b_$0)) == #b_$0 ));
	assume (forall  p_$55 : $ptr, f_$12 : $field :: {$ghost_ref(p_$55,f_$12)} {:weight  0}( ($ghost_emb($ghost_ref(p_$55,f_$12)) == p_$55) && ($ghost_path($ghost_ref(p_$55,f_$12)) == f_$12) ));
	assume (forall  p_$56 : $ptr, f_$13 : $field :: {$ghost_ref(p_$56,f_$13)} ( $in_range_spec_ptr($ghost_ref(p_$56,f_$13)) ));
	assume (forall  fld : $field, off : Integer :: {$array_path(fld,off)} {:weight  0}( ((!$is_base_field($array_path(fld,off))) && ($array_path_1($array_path(fld,off)) == fld)) && ($array_path_2($array_path(fld,off)) == off) ));
	assume $null == $ptr(^^void,0);
	assume (forall  #p_$19 : $ptr, #t_$7 : $ctype :: {:weight  0}( $is(#p_$19,#t_$7) <==> ($typ(#p_$19) == #t_$7) ));
	assume (forall  #p_$20 : $ptr, #t_$8 : $ctype :: {$is(#p_$20,#t_$8)} ( $is(#p_$20,#t_$8) ==> (#p_$20 == $ptr(#t_$8,$ref(#p_$20))) ));
	assume (forall  #t : $ctype, #p : $ptr :: ( $ptr(#t,$ref(#p)) == $ptr(#t,$ref(#p)) ));
	assume (forall  t_$3 : $ctype, p_$7 : $ptr, S : $state :: ( $ptr(t_$3,$mem(S,p_$7)) == $ptr(t_$3,$select.mem($memory(S),p_$7)) ));
	assume (forall  #p_$0 : $ptr, S_$0 : $state :: ( $ts_emb($ts(S_$0,#p_$0)) == $ts_emb($select.tm($typemap(S_$0),#p_$0)) ));
	assume (forall  #p_$1 : $ptr, S_$1 : $state :: ( $ts_path($ts(S_$1,#p_$1)) == $ts_path($select.tm($typemap(S_$1),#p_$1)) ));
	assume (forall  t_$4 : $ctype, f : $field :: ( ($is_base_field(f) && ($field_parent_type(f) == t_$4)) == ($is_base_field(f) && ($field_parent_type(f) == t_$4)) ));
	assume (forall  isvolatile : Boolean, tp : $ctype, f_$0 : $field, p_$8 : $ptr, S_$2 : $state :: ( ((($typed2(S_$2,$dot(p_$8,f_$0),tp) && ($emb(S_$2,$dot(p_$8,f_$0)) == p_$8)) && ($path(S_$2,$dot(p_$8,f_$0)) == f_$0)) && ($is_volatile(S_$2,$dot(p_$8,f_$0)) <==> isvolatile)) == (((($is($dot(p_$8,f_$0),tp) && $typed(S_$2,$dot(p_$8,f_$0))) && ($ts_emb($ts(S_$2,$dot(p_$8,f_$0))) == p_$8)) && ($ts_path($ts(S_$2,$dot(p_$8,f_$0))) == f_$0)) && ($ts_is_volatile($ts(S_$2,$dot(p_$8,f_$0))) <==> isvolatile)) ));
	assume (forall  ts : $type_state :: {$ts_emb(ts)} ( (!($kind_of($typ($ts_emb(ts))) == $kind_primitive)) && $is_non_primitive($typ($ts_emb(ts))) ));
	assume (forall  S_$55 : $state, p_$58 : $ptr :: {$typed(S_$55,p_$58),$select.tm($typemap(S_$55),$ts_emb($ts(S_$55,p_$58)))} ( $typed(S_$55,p_$58) ==> $typed(S_$55,$ts_emb($ts(S_$55,p_$58))) ));
	assume (forall  p_$9 : $ptr, S_$3 : $state :: ( ($emb(S_$3,p_$9) == $ptr(^^root_emb,$ref(p_$9))) == ($ts_emb($ts(S_$3,p_$9)) == $ptr(^^root_emb,$ref(p_$9))) ));
	assume (forall  p_$10 : $ptr, S_$4 : $state :: ( $ts_is_volatile($ts(S_$4,p_$10)) == $ts_is_volatile($select.tm($typemap(S_$4),p_$10)) ));
	assume (forall  S_$56 : $state, p_$59 : $ptr :: {$ts_is_volatile($ts(S_$56,p_$59))} ( ($good_state(S_$56) && $ts_is_volatile($ts(S_$56,p_$59))) ==> ($kind_of($typ(p_$59)) == $kind_primitive) ));
	assume (forall  p_$11 : $ptr, S_$5 : $state :: ( $is_object_root(S_$5,p_$11) == ($emb(S_$5,p_$11) == $ptr(^^root_emb,$ref(p_$11))) ));
	assume (forall  S_$57 : $state, p_$60 : $ptr :: {$select.sm($statusmap(S_$57),p_$60)} {:weight  0}( ($timestamp(S_$57,p_$60) <= $current_timestamp(S_$57)) || (!$ts_typed($select.tm($typemap(S_$57),p_$60))) ));
	assume (forall  p_$12 : $ptr, M2 : $state, M1 : $state :: ( (($current_timestamp(M1) < $timestamp(M2,p_$12)) && ($timestamp(M2,p_$12) <= $current_timestamp(M2))) == (($current_timestamp(M1) < $timestamp(M2,p_$12)) && ($timestamp(M2,p_$12) <= $current_timestamp(M2))) ));
	assume (forall  p_$13 : $ptr, begin_time : Integer, S_$6 : $state :: ( (($in_writes_at(begin_time,p_$13) || ($timestamp(S_$6,p_$13) >= begin_time)) && $mutable(S_$6,p_$13)) == (($in_writes_at(begin_time,p_$13) || ($timestamp(S_$6,p_$13) >= begin_time)) && $mutable(S_$6,p_$13)) ));
	assume (forall  p_$14 : $ptr, begin_time_$0 : Integer, S_$7 : $state :: ( (($in_writes_at(begin_time_$0,p_$14) || ($timestamp(S_$7,p_$14) >= begin_time_$0)) && $thread_owned_or_even_mutable(S_$7,p_$14)) == (($in_writes_at(begin_time_$0,p_$14) || ($timestamp(S_$7,p_$14) >= begin_time_$0)) && (($typed(S_$7,p_$14) && ($owner(S_$7,p_$14) == $me())) && ($is_primitive_ch($typ(p_$14)) ==> (!$closed(S_$7,p_$14))))) ));
	assume $good_state($vs_state($struct_zero));
	assume (forall  t_$5 : $ctype, s_$2 : $struct :: ( $ptr(t_$5,$vs_base_ref(s_$2)) == $ptr(t_$5,$vs_base_ref(s_$2)) ));
	assume (forall  s_$6 : $struct :: ( $good_state($vs_state(s_$6)) ));
	assume (forall  S_$58 : $state, p_$61 : $ptr :: {$vs_ctor(S_$58,p_$61)} ( $good_state(S_$58) ==> (($vs_base_ref($vs_ctor(S_$58,p_$61)) == $ref(p_$61)) && ($vs_state($vs_ctor(S_$58,p_$61)) == S_$58)) ));
	assume (forall  f_$15 : $field, t_$15 : $ctype :: {$select.mem($memory($vs_state($struct_zero)),$dot($ptr(t_$15,$vs_base_ref($struct_zero)),f_$15))} ( $select.mem($memory($vs_state($struct_zero)),$dot($ptr(t_$15,$vs_base_ref($struct_zero)),f_$15)) == 0 ));
	assume (forall  f_$17 : $field :: ( $rec_fetch($rec_zero,f_$17) == 0 ));
	assume (forall  r_$1 : $record, f_$18 : $field, v_$0 : Integer :: {$rec_fetch($rec_update(r_$1,f_$18,v_$0),f_$18)} ( $rec_fetch($rec_update(r_$1,f_$18,v_$0),f_$18) == $unchecked($record_field_int_kind(f_$18),v_$0) ));
	assume (forall  r_$2 : $record, f_$19 : $field :: {$rec_fetch(r_$2,f_$19)} ( $in_range_t($record_field_int_kind(f_$19),$rec_fetch(r_$2,f_$19)) ));
	assume (forall  r_$3 : $record, f1 : $field, f2 : $field, v_$1 : Integer :: {$rec_fetch($rec_update(r_$3,f1,v_$1),f2)} ( ($rec_fetch($rec_update(r_$3,f1,v_$1),f2) == $rec_fetch(r_$3,f2)) || (f1 == f2) ));
	assume (forall  t_$16 : $ctype :: {$is_record_type(t_$16)} ( $is_record_type(t_$16) ==> $is_primitive(t_$16) ));
	assume (forall  p_$62 : $ctype, f_$20 : $field, ft : $ctype :: {$is_record_field(p_$62,f_$20,ft),$is_record_type(ft)} ( ($is_record_field(p_$62,f_$20,ft) && $is_record_type(ft)) ==> ($as_record_record_field(f_$20) == f_$20) ));
	assume (forall  r1 : $record, r2 : $record :: {$rec_eq(r1,r2)} ( $rec_eq(r1,r2) <==> (r1 == r2) ));
	assume (forall  x_$24 : Integer, y_$7 : Integer :: {$rec_base_eq(x_$24,y_$7)} ( $rec_base_eq(x_$24,y_$7) <==> (x_$24 == y_$7) ));
	assume (forall  r1_$0 : $record, r2_$0 : $record :: {$rec_eq(r1_$0,r2_$0)} ( ((forall  f_$21 : $field :: ( $rec_base_eq($rec_fetch(r1_$0,f_$21),$rec_fetch(r2_$0,f_$21)) ))) ==> $rec_eq(r1_$0,r2_$0) ));
	assume (forall  r1_$1 : $record, r2_$1 : $record, f_$22 : $field :: {$rec_base_eq($rec_fetch(r1_$1,f_$22),$rec_fetch(r2_$1,$as_record_record_field(f_$22)))} ( $rec_eq($int_to_record($rec_fetch(r1_$1,f_$22)),$int_to_record($rec_fetch(r2_$1,f_$22))) ==> $rec_base_eq($rec_fetch(r1_$1,f_$22),$rec_fetch(r2_$1,f_$22)) ));
	assume $has_volatile_owns_set(^^claim);
	assume (forall  #p_$21 : $ptr, t_$17 : $ctype :: {$dot(#p_$21,$owns_set_field(t_$17))} ( $dot(#p_$21,$owns_set_field(t_$17)) == $ptr(^$#ptrset,$ghost_ref(#p_$21,$owns_set_field(t_$17))) ));
	assume (forall  S_$59 : $state, p_$63 : $ptr :: {$is_primitive($typ(p_$63)),$owner(S_$59,p_$63)} {:weight  0}( $is_primitive($typ(p_$63)) ==> ($owner(S_$59,p_$63) == $owner(S_$59,$ts_emb($ts(S_$59,p_$63)))) ));
	assume (forall  S_$60 : $state, p_$64 : $ptr :: {$is_non_primitive($typ(p_$64)),$owner(S_$60,p_$64)} {:weight  0}( $is_non_primitive($typ(p_$64)) ==> ($owner(S_$60,p_$64) == $st_owner($select.sm($statusmap(S_$60),p_$64))) ));
	assume (forall  S_$61 : $state, p_$65 : $ptr :: {$is_primitive($typ(p_$65)),$closed(S_$61,p_$65)} {:weight  0}( $is_primitive($typ(p_$65)) ==> ($closed(S_$61,p_$65) <==> $st_closed($select.sm($statusmap(S_$61),$ts_emb($ts(S_$61,p_$65))))) ));
	assume (forall  S_$62 : $state, p_$66 : $ptr :: {$is_non_primitive($typ(p_$66)),$closed(S_$62,p_$66)} {:weight  0}( $is_non_primitive($typ(p_$66)) ==> ($closed(S_$62,p_$66) <==> $st_closed($select.sm($statusmap(S_$62),p_$66))) ));
	assume (forall  S_$63 : $state, p_$67 : $ptr :: {$is_primitive($typ(p_$67)),$timestamp(S_$63,p_$67)} {:weight  0}( $is_primitive($typ(p_$67)) ==> ($timestamp(S_$63,p_$67) == $st_timestamp($select.sm($statusmap(S_$63),$ts_emb($ts(S_$63,p_$67))))) ));
	assume (forall  S_$64 : $state, p_$68 : $ptr :: {$is_non_primitive($typ(p_$68)),$timestamp(S_$64,p_$68)} {:weight  0}( $is_non_primitive($typ(p_$68)) ==> ($timestamp(S_$64,p_$68) == $st_timestamp($select.sm($statusmap(S_$64),p_$68))) ));
	assume $position_marker();
	assume (forall  s_$7 : $status :: {$st_owner(s_$7)} ( (!($kind_of($typ($st_owner(s_$7))) == $kind_primitive)) && $is_non_primitive($typ($st_owner(s_$7))) ));
	assume (forall  p_$15 : $ptr, S_$8 : $state :: ( $select.sm($statusmap(S_$8),p_$15) == $select.sm($statusmap(S_$8),p_$15) ));
	assume (forall  p_$16 : $ptr, S_$9 : $state :: ( $select.tm($typemap(S_$9),p_$16) == $select.tm($typemap(S_$9),p_$16) ));
	assume (forall  S_$65 : $state, #p_$22 : $ptr :: {$owns(S_$65,#p_$22)} {:weight  0}( $owns(S_$65,#p_$22) == $int_to_ptrset($select.mem($memory(S_$65),$dot(#p_$22,$owns_set_field($typ(#p_$22))))) ));
	assume (forall  p_$17 : $ptr, S_$10 : $state :: ( (!($kind_of($typ($owner(S_$10,p_$17))) == $kind_thread)) == (!($kind_of($typ($owner(S_$10,p_$17))) == $kind_thread)) ));
	assume (forall  owner : $ptr, p_$18 : $ptr, S_$11 : $state :: ( (($owner(S_$11,p_$18) == owner) && $closed(S_$11,p_$18)) == (($owner(S_$11,p_$18) == owner) && $closed(S_$11,p_$18)) ));
	assume (forall  #t_$0 : $ctype, #p_$2 : $ptr, S_$12 : $state :: ( (((($closed(S_$12,#p_$2) && ($owner(S_$12,#p_$2) == $me())) && $typed2(S_$12,#p_$2,#t_$0)) && (!($kind_of(#t_$0) == $kind_primitive))) && $is_non_primitive(#t_$0)) == (((($closed(S_$12,#p_$2) && ($owner(S_$12,#p_$2) == $me())) && ($is(#p_$2,#t_$0) && $typed(S_$12,#p_$2))) && (!($kind_of(#t_$0) == $kind_primitive))) && $is_non_primitive(#t_$0)) ));
	assume (forall  p_$19 : $ptr, S_$13 : $state :: ( ((!($owner(S_$13,p_$19) == $me())) || ($is_primitive_ch($typ(p_$19)) && $closed(S_$13,p_$19))) == ((!($owner(S_$13,p_$19) == $me())) || (($kind_of($typ(p_$19)) == $kind_primitive) && $closed(S_$13,p_$19))) ));
	assume (forall  S_$66 : $state, p_$69 : $ptr :: {$mutable(S_$66,p_$69)} {:weight  0}( $mutable(S_$66,p_$69) <==> (($typed(S_$66,p_$69) && ($owner(S_$66,p_$69) == $me())) && (!$closed(S_$66,p_$69))) ));
	assume (forall  p_$20 : $ptr, S_$14 : $state :: ( ($typed(S_$14,p_$20) && ($owner(S_$14,p_$20) == $me())) == ($typed(S_$14,p_$20) && ($owner(S_$14,p_$20) == $me())) ));
	assume (forall  p_$21 : $ptr, S_$15 : $state :: ( (($typed(S_$15,p_$21) && ($owner(S_$15,p_$21) == $me())) && ($is_primitive_ch($typ(p_$21)) ==> (!$closed(S_$15,p_$21)))) == (($typed(S_$15,p_$21) && ($owner(S_$15,p_$21) == $me())) && (($kind_of($typ(p_$21)) == $kind_primitive) ==> (!$closed(S_$15,p_$21)))) ));
	assume (forall  S_$67 : $state, #p_$23 : $ptr :: {$typed(S_$67,#p_$23)} {:weight  0}( $good_state(S_$67) ==> ($typed(S_$67,#p_$23) <==> $ts_typed($select.tm($typemap(S_$67),#p_$23))) ));
	assume (forall  S_$68 : $state, #p_$24 : $ptr :: {$typed(S_$68,#p_$24)} ( ($good_state(S_$68) && $typed(S_$68,#p_$24)) ==> ($ref(#p_$24) > 0) ));
	assume (forall  #r : Integer :: {$in_range_phys_ptr(#r)} ( $in_range_phys_ptr(#r) <==> ((0 <= #r) && (#r <= $arch_spec_ptr_start)) ));
	assume (forall  #r_$0 : Integer :: {$in_range_spec_ptr(#r_$0)} ( $in_range_spec_ptr(#r_$0) <==> ((0 == #r_$0) || (#r_$0 > $arch_spec_ptr_start)) ));
	assume (forall  #t_$1 : $ctype, #p_$3 : $ptr, S_$16 : $state :: ( ($is(#p_$3,#t_$1) && $typed(S_$16,#p_$3)) == ($is(#p_$3,#t_$1) && $typed(S_$16,#p_$3)) ));
	assume (forall  S_$69 : $state, #r_$1 : Integer, #t_$9 : $ctype :: {$typed(S_$69,$ptr(#t_$9,#r_$1))} ( ($typed(S_$69,$ptr(#t_$9,#r_$1)) && $in_range_phys_ptr(#r_$1)) ==> $in_range_phys_ptr((#r_$1 + $sizeof(#t_$9)) - 1) ));
	assume (forall  #t_$2 : $ctype, #p_$4 : $ptr, S_$17 : $state :: ( ($typed2(S_$17,#p_$4,#t_$2) && ($typed2(S_$17,#p_$4,#t_$2) ==> $in_range_phys_ptr($ref(#p_$4)))) == (($is(#p_$4,#t_$2) && $typed(S_$17,#p_$4)) && (($is(#p_$4,#t_$2) && $typed(S_$17,#p_$4)) ==> $in_range_phys_ptr($ref(#p_$4)))) ));
	assume (forall  #t_$3 : $ctype, #p_$5 : $ptr, S_$18 : $state :: ( ($typed2(S_$18,#p_$5,#t_$3) && ($typed2(S_$18,#p_$5,#t_$3) ==> $in_range_spec_ptr($ref(#p_$5)))) == (($is(#p_$5,#t_$3) && $typed(S_$18,#p_$5)) && (($is(#p_$5,#t_$3) && $typed(S_$18,#p_$5)) ==> $in_range_spec_ptr($ref(#p_$5)))) ));
	assume (forall  p2 : $ptr, p1 : $ptr :: ( ($ref(p1) == $ref(p2)) == ($ref(p1) == $ref(p2)) ));
	assume (forall  p2_$0 : $ptr, p1_$0 : $ptr :: ( (!($ref(p1_$0) == $ref(p2_$0))) == (!($ref(p1_$0) == $ref(p2_$0))) ));
	assume (forall  #o : $ptr, #f : $ptr, S_$19 : $state :: ( ($is_primitive_ch($typ(#f)) && ($emb(S_$19,#f) == #o)) == (($kind_of($typ(#f)) == $kind_primitive) && ($ts_emb($ts(S_$19,#f)) == #o)) ));
	assume (forall  S1_$7 : $state, S2_$6 : $state, p_$71 : $ptr :: {$select.mem($memory(S2_$6),p_$71),$call_transition(S1_$7,S2_$6)} ( $call_transition(S1_$7,S2_$6) ==> $instantiate_int($select.mem($memory(S1_$7),p_$71)) ));
	assume (forall  S_$70 : $state, p_$72 : $ptr :: {$is_domain_root(S_$70,p_$72)} ( $is_domain_root(S_$70,p_$72) <==> true ));
	assume (forall  S_$71 : $state, p_$73 : $ptr :: {$in_wrapped_domain(S_$71,p_$73)} ( $in_wrapped_domain(S_$71,p_$73) <==> ((exists  q_$2 : $ptr :: {$set_in2(p_$73,$ver_domain($read_version(S_$71,q_$2)))} ( ($set_in(p_$73,$ver_domain($read_version(S_$71,q_$2))) && (((($closed(S_$71,q_$2) && ($owner(S_$71,q_$2) == $me())) && $typed2(S_$71,q_$2,$typ(q_$2))) && (!($kind_of($typ(q_$2)) == $kind_primitive))) && $is_non_primitive($typ(q_$2)))) && $is_domain_root(S_$71,q_$2) ))) ));
	assume (forall  p_$23 : $ptr, S_$20 : $state :: ( ((!$is_primitive_ch($typ(p_$23))) && (($owner(S_$20,p_$23) == $me()) || $in_wrapped_domain(S_$20,p_$23))) == ((!($kind_of($typ(p_$23)) == $kind_primitive)) && (($owner(S_$20,p_$23) == $me()) || $in_wrapped_domain(S_$20,p_$23))) ));
	assume (forall  S_$72 : $state, p_$74 : $ptr :: {$thread_local(S_$72,p_$74)} ( $thread_local(S_$72,p_$74) <==> ($typed(S_$72,p_$74) && (((($kind_of($typ(p_$74)) == $kind_primitive) && ((!$ts_is_volatile($ts(S_$72,p_$74))) || (!$closed(S_$72,$ts_emb($ts(S_$72,p_$74)))))) && ((!$is_primitive_ch($typ($ts_emb($ts(S_$72,p_$74))))) && (($owner(S_$72,$ts_emb($ts(S_$72,p_$74))) == $me()) || $in_wrapped_domain(S_$72,$ts_emb($ts(S_$72,p_$74)))))) || ((!$is_primitive_ch($typ(p_$74))) && (($owner(S_$72,p_$74) == $me()) || $in_wrapped_domain(S_$72,p_$74))))) ));
	assume (forall  #t_$4 : $ctype, #p_$6 : $ptr, S_$21 : $state :: ( ($is(#p_$6,#t_$4) && $thread_local(S_$21,#p_$6)) == ($is(#p_$6,#t_$4) && $thread_local(S_$21,#p_$6)) ));
	assume (forall  typ : $ctype, #p_$7 : $ptr, #s1 : $state :: ( $inv2(#s1,#s1,#p_$7,typ) == $inv2(#s1,#s1,#p_$7,typ) ));
	assume (forall  p_$24 : $ptr, S2 : $state, S1 : $state :: ( $inv2(S1,S2,p_$24,$typ(p_$24)) == $inv2(S1,S2,p_$24,$typ(p_$24)) ));
	assume (forall  typ_$0 : $ctype, #p_$8 : $ptr, #s2 : $state, #s1_$0 : $state :: ( (((!$closed(#s1_$0,#p_$8)) && (!$closed(#s2,#p_$8))) || ($inv2(#s1_$0,#s2,#p_$8,typ_$0) && $nonvolatile_spans_the_same(#s1_$0,#s2,#p_$8,typ_$0))) == (((!$closed(#s1_$0,#p_$8)) && (!$closed(#s2,#p_$8))) || ($inv2(#s1_$0,#s2,#p_$8,typ_$0) && $nonvolatile_spans_the_same(#s1_$0,#s2,#p_$8,typ_$0))) ));
	assume (forall  #s1_$8 : $state, #s2_$5 : $state, #p_$27 : $ptr, #t_$11 : $ctype :: {$spans_the_same(#s1_$8,#s2_$5,#p_$27,#t_$11)} {:weight  0}( $spans_the_same(#s1_$8,#s2_$5,#p_$27,#t_$11) <==> (((($read_version(#s1_$8,#p_$27) == $read_version(#s2_$5,#p_$27)) && ($owns(#s1_$8,#p_$27) == $owns(#s2_$5,#p_$27))) && ($select.tm($typemap(#s1_$8),#p_$27) == $select.tm($typemap(#s2_$5),#p_$27))) && $state_spans_the_same(#s1_$8,#s2_$5,#p_$27,#t_$11)) ));
	assume (forall  #s1_$9 : $state, #s2_$6 : $state, #p_$28 : $ptr, #t_$12 : $ctype :: {$nonvolatile_spans_the_same(#s1_$9,#s2_$6,#p_$28,#t_$12)} {:weight  0}( $nonvolatile_spans_the_same(#s1_$9,#s2_$6,#p_$28,#t_$12) <==> ((($read_version(#s1_$9,#p_$28) == $read_version(#s2_$6,#p_$28)) && ($select.tm($typemap(#s1_$9),#p_$28) == $select.tm($typemap(#s2_$6),#p_$28))) && $state_nonvolatile_spans_the_same(#s1_$9,#s2_$6,#p_$28,#t_$12)) ));
	assume (forall  #p2 : $ptr, #p1 : $ptr, S_$22 : $state :: ( $set_in(#p1,$extent(S_$22,#p2)) == $set_in(#p1,$extent(S_$22,#p2)) ));
	assume (forall  #p2_$0 : $ptr, #p1_$0 : $ptr :: ( $set_in(#p1_$0,$full_extent(#p2_$0)) == $set_in(#p1_$0,$full_extent(#p2_$0)) ));
	assume (forall  T_$11 : $ctype :: {$is_primitive(T_$11)} ( $is_primitive(T_$11) ==> (((forall  r_$5 : Integer, p_$75 : $ptr :: {$set_in(p_$75,$full_extent($ptr(T_$11,r_$5)))} ( $set_in(p_$75,$full_extent($ptr(T_$11,r_$5))) <==> (p_$75 == $ptr(T_$11,r_$5)) ))) && ((forall  r_$6 : Integer, S_$73 : $state :: {$extent_mutable(S_$73,$ptr(T_$11,r_$6))} ( $extent_mutable(S_$73,$ptr(T_$11,r_$6)) <==> $mutable(S_$73,$ptr(T_$11,r_$6)) )))) ));
	assume (forall  T_$12 : $ctype :: {$is_primitive(T_$12)} ( $is_primitive(T_$12) ==> ((forall  S_$74 : $state, r_$7 : Integer, p_$76 : $ptr :: {$set_in(p_$76,$extent(S_$74,$ptr(T_$12,r_$7)))} ( $set_in(p_$76,$extent(S_$74,$ptr(T_$12,r_$7))) <==> (p_$76 == $ptr(T_$12,r_$7)) ))) ));
	assume (forall  S_$75 : $state, T_$13 : $ctype, sz_$13 : Integer, r_$8 : Integer :: {$extent_mutable(S_$75,$ptr($array(T_$13,sz_$13),r_$8))} ( $extent_mutable(S_$75,$ptr($array(T_$13,sz_$13),r_$8)) <==> ($mutable(S_$75,$ptr($array(T_$13,sz_$13),r_$8)) && ((forall  i_$8 : Integer :: {$extent_mutable(S_$75,$idx($ptr(T_$13,r_$8),i_$8,T_$13))} ( ((0 <= i_$8) && (i_$8 < sz_$13)) ==> $extent_mutable(S_$75,$idx($ptr(T_$13,r_$8),i_$8,T_$13)) )))) ));
	assume (forall  T_$14 : $ctype :: {$is_primitive(T_$14)} ( $is_primitive(T_$14) ==> ((forall  S_$76 : $state, r_$9 : Integer :: {$extent_zero(S_$76,$ptr(T_$14,r_$9))} ( $extent_zero(S_$76,$ptr(T_$14,r_$9)) <==> ($select.mem($memory(S_$76),$ptr(T_$14,r_$9)) == 0) ))) ));
	assume (forall  S_$77 : $state, T_$15 : $ctype, sz_$14 : Integer, r_$10 : Integer :: {$extent_zero(S_$77,$ptr($array(T_$15,sz_$14),r_$10))} ( $extent_zero(S_$77,$ptr($array(T_$15,sz_$14),r_$10)) <==> ((forall  i_$9 : Integer :: {$idx($ptr(T_$15,r_$10),i_$9,T_$15)} ( ((0 <= i_$9) && (i_$9 < sz_$14)) ==> $extent_zero(S_$77,$idx($ptr(T_$15,r_$10),i_$9,T_$15)) ))) ));
	assume (forall  #s2_$0 : $state, #s1_$1 : $state :: ( ((forall  #p_$9_$0 : $ptr :: {$closed(#s1_$1,#p_$9_$0)} {$closed(#s2_$0,#p_$9_$0)} ( $inv2_when_closed(#s1_$1,#s2_$0,#p_$9_$0,$typ(#p_$9_$0)) ))) == ((forall  #p_$9 : $ptr :: {$closed(#s1_$1,#p_$9)} {$closed(#s2_$0,#p_$9)} ( ((!$closed(#s1_$1,#p_$9)) && (!$closed(#s2_$0,#p_$9))) || ($inv2(#s1_$1,#s2_$0,#p_$9,$typ(#p_$9)) && $nonvolatile_spans_the_same(#s1_$1,#s2_$0,#p_$9,$typ(#p_$9))) ))) ));
	assume (forall  S_$23 : $state, t_$6 : $token :: ( ($good_state_ext(t_$6,S_$23) && $full_stop(S_$23)) == ($good_state_ext(t_$6,S_$23) && $full_stop(S_$23)) ));
	assume (forall  S_$78 : $state :: {$function_entry(S_$78)} ( $function_entry(S_$78) ==> ($full_stop(S_$78) && ($current_timestamp(S_$78) >= 0)) ));
	assume (forall  S_$79 : $state :: {$full_stop(S_$79)} ( $full_stop(S_$79) ==> ($good_state(S_$79) && $invok_state(S_$79)) ));
	assume (forall  S_$80 : $state :: {$invok_state(S_$80)} ( $invok_state(S_$80) ==> $good_state(S_$80) ));
	assume (forall  S_$24 : $state :: ( ((forall  #p_$10_$0 : $ptr, #q_$6 : $ptr :: {$set_in(#p_$10_$0,$owns(S_$24,#q_$6))} ( (($good_state(S_$24) && $set_in(#p_$10_$0,$owns(S_$24,#q_$6))) && $closed(S_$24,#q_$6)) ==> ($closed(S_$24,#p_$10_$0) && (!($ref(#p_$10_$0) == 0))) ))) == ((forall  #p_$10 : $ptr, #q : $ptr :: {$set_in(#p_$10,$owns(S_$24,#q))} ( (($good_state(S_$24) && $set_in(#p_$10,$owns(S_$24,#q))) && $closed(S_$24,#q)) ==> ($closed(S_$24,#p_$10) && (!($ref(#p_$10) == 0))) ))) ));
	assume (forall  id : $token, S_$81 : $state :: {$good_state_ext(id,S_$81)} ( $good_state_ext(id,S_$81) ==> $good_state(S_$81) ));
	assume (forall  S_$82 : $state, r_$11 : Integer, t_$18 : $ctype :: {$ptr(t_$18,$select.mem($memory(S_$82),$ptr($ptr_to(t_$18),r_$11)))} ( $ptr(t_$18,$select.mem($memory(S_$82),$ptr($ptr_to(t_$18),r_$11))) == $read_ptr_m(S_$82,$ptr($ptr_to(t_$18),r_$11),t_$18) ));
	assume (forall  S_$83 : $state, r_$12 : Integer, t_$19 : $ctype :: {$ptr(t_$19,$select.mem($memory(S_$83),$ptr($spec_ptr_to(t_$19),r_$12)))} ( $ptr(t_$19,$select.mem($memory(S_$83),$ptr($spec_ptr_to(t_$19),r_$12))) == $read_ptr_m(S_$83,$ptr($spec_ptr_to(t_$19),r_$12),t_$19) ));
	assume (forall  S_$84 : $state, p_$77 : $ptr :: {$read_version(S_$84,p_$77)} {:weight  0}( $read_version(S_$84,p_$77) == $int_to_version($select.mem($memory(S_$84),p_$77)) ));
	assume (forall  S_$85 : $state, p_$78 : $ptr :: {$domain(S_$85,p_$78)} {:weight  0}( $domain(S_$85,p_$78) == $ver_domain($read_version(S_$85,p_$78)) ));
	assume (forall  S_$86 : $state, p_$79 : $ptr, q_$3 : $ptr, l : $label :: {$in_domain_lab(S_$86,p_$79,q_$3,l)} {:weight  0}( $in_domain_lab(S_$86,p_$79,q_$3,l) ==> $inv_lab(S_$86,p_$79,l) ));
	assume (forall  S_$87 : $state, p_$80 : $ptr, q_$4 : $ptr, l_$0 : $label :: {$in_domain_lab(S_$87,p_$80,q_$4,l_$0)} {:weight  0}( $in_domain_lab(S_$87,p_$80,q_$4,l_$0) <==> $in_domain(S_$87,p_$80,q_$4) ));
	assume (forall  S_$88 : $state, p_$81 : $ptr, q_$5 : $ptr, l_$1 : $label :: {$in_vdomain_lab(S_$88,p_$81,q_$5,l_$1)} {:weight  0}( $in_vdomain_lab(S_$88,p_$81,q_$5,l_$1) ==> $inv_lab(S_$88,p_$81,l_$1) ));
	assume (forall  S_$89 : $state, p_$82 : $ptr, q_$6 : $ptr, l_$2 : $label :: {$in_vdomain_lab(S_$89,p_$82,q_$6,l_$2)} {:weight  0}( $in_vdomain_lab(S_$89,p_$82,q_$6,l_$2) <==> $in_vdomain(S_$89,p_$82,q_$6) ));
	assume (forall  #p_$11 : $ptr, S_$25 : $state :: ( ($typed(S_$25,#p_$11) && (!$is_volatile(S_$25,#p_$11))) == ($typed(S_$25,#p_$11) && (!$ts_is_volatile($ts(S_$25,#p_$11)))) ));
	assume (forall  S_$90 : $state, p_$83 : $ptr, q_$7 : $ptr :: {$in_domain(S_$90,p_$83,q_$7)} {:weight  0}( $in_domain(S_$90,p_$83,q_$7) ==> (($set_in(p_$83,$domain(S_$90,q_$7)) && $closed(S_$90,p_$83)) && ((forall  r_$13 : $ptr :: {$set_in(r_$13,$owns(S_$90,p_$83))} ( ((!$has_volatile_owns_set($typ(p_$83))) && $set_in(r_$13,$owns(S_$90,p_$83))) ==> $set_in2(r_$13,$ver_domain($read_version(S_$90,q_$7))) )))) ));
	assume (forall  S_$91 : $state, p_$84 : $ptr :: {$in_domain(S_$91,p_$84,p_$84)} ( ($full_stop(S_$91) && (((($closed(S_$91,p_$84) && ($owner(S_$91,p_$84) == $me())) && $typed2(S_$91,p_$84,$typ(p_$84))) && (!($kind_of($typ(p_$84)) == $kind_primitive))) && $is_non_primitive($typ(p_$84)))) ==> $in_domain(S_$91,p_$84,p_$84) ));
	assume (forall  S_$92 : $state, p_$85 : $ptr, q_$8 : $ptr :: {$in_domain(S_$92,q_$8,p_$85)} {:weight  0}( ($full_stop(S_$92) && $set_in(q_$8,$domain(S_$92,p_$85))) ==> $in_domain(S_$92,q_$8,p_$85) ));
	assume (forall  S_$93 : $state, p_$86 : $ptr, q_$9 : $ptr, r_$14 : $ptr :: {$set_in(q_$9,$domain(S_$93,p_$86)),$in_domain(S_$93,r_$14,p_$86)} {:weight  0}( (((!$has_volatile_owns_set($typ(q_$9))) && $set_in(q_$9,$domain(S_$93,p_$86))) && $set_in0(r_$14,$owns(S_$93,q_$9))) ==> ($in_domain(S_$93,r_$14,p_$86) && $set_in0(r_$14,$owns(S_$93,q_$9))) ));
	assume (forall  S_$94 : $state, p_$87 : $ptr, q_$10 : $ptr, r_$15 : $ptr :: {$set_in(q_$10,$domain(S_$94,p_$87)),$in_vdomain(S_$94,r_$15,p_$87)} {:weight  0}( (($has_volatile_owns_set($typ(q_$10)) && $set_in(q_$10,$domain(S_$94,p_$87))) && ((forall  S1_$8 : $state :: ( (($inv2(S1_$8,S1_$8,q_$10,$typ(q_$10)) && ($read_version(S1_$8,p_$87) == $read_version(S_$94,p_$87))) && ($domain(S1_$8,p_$87) == $domain(S_$94,p_$87))) ==> $set_in0(r_$15,$owns(S1_$8,q_$10)) )))) ==> ($in_vdomain(S_$94,r_$15,p_$87) && $set_in0(r_$15,$owns(S_$94,q_$10))) ));
	assume (forall  S_$95 : $state, p_$88 : $ptr, q_$11 : $ptr :: {$in_vdomain(S_$95,p_$88,q_$11)} {:weight  0}( $in_vdomain(S_$95,p_$88,q_$11) ==> $in_domain(S_$95,p_$88,q_$11) ));
	assume (forall  S_$96 : $state, p_$89 : $ptr, d : $ptr, f_$23 : $field :: {$set_in(p_$89,$domain(S_$96,d)),$is_primitive_non_volatile_field(f_$23),$select.mem($memory(S_$96),$dot(p_$89,f_$23))} ( ($set_in(p_$89,$domain(S_$96,d)) && $is_primitive_non_volatile_field(f_$23)) ==> ($select.mem($memory(S_$96),$dot(p_$89,f_$23)) == $fetch_from_domain($read_version(S_$96,d),$dot(p_$89,f_$23))) ));
	assume (forall  S_$97 : $state, p_$90 : $ptr, d_$0 : $ptr :: {$full_stop(S_$97),$set_in(p_$90,$domain(S_$97,d_$0)),$select.sm($statusmap(S_$97),p_$90)} {$full_stop(S_$97),$set_in(p_$90,$domain(S_$97,d_$0)),$select.tm($typemap(S_$97),p_$90)} ( ($full_stop(S_$97) && $set_in(p_$90,$domain(S_$97,d_$0))) ==> ($typed(S_$97,p_$90) && (!$is_volatile(S_$97,p_$90))) ));
	assume (forall  S_$98 : $state, p_$91 : $ptr, d_$1 : $ptr, f_$24 : $field :: {$set_in(p_$91,$domain(S_$98,d_$1)),$is_primitive_non_volatile_field(f_$24),$owner(S_$98,$dot(p_$91,f_$24))} {$set_in(p_$91,$domain(S_$98,d_$1)),$is_primitive_non_volatile_field(f_$24),$select.tm($typemap(S_$98),$dot(p_$91,f_$24))} ( (($full_stop(S_$98) && $set_in(p_$91,$domain(S_$98,d_$1))) && $is_primitive_non_volatile_field(f_$24)) ==> ($typed(S_$98,$dot(p_$91,f_$24)) && (!$is_volatile(S_$98,$dot(p_$91,f_$24)))) ));
	assume (forall  S_$99 : $state, p_$92 : $ptr, d_$2 : $ptr, f_$25 : $field, sz_$15 : Integer, i_$10 : Integer, t_$20 : $ctype :: {$set_in(p_$92,$domain(S_$99,d_$2)),$is_primitive_embedded_array(f_$25,sz_$15),$select.mem($memory(S_$99),$idx($dot(p_$92,f_$25),i_$10,t_$20))} ( (((($full_stop(S_$99) && $set_in(p_$92,$domain(S_$99,d_$2))) && $is_primitive_embedded_array(f_$25,sz_$15)) && (0 <= i_$10)) && (i_$10 < sz_$15)) ==> ($select.mem($memory(S_$99),$idx($dot(p_$92,f_$25),i_$10,t_$20)) == $fetch_from_domain($read_version(S_$99,d_$2),$idx($dot(p_$92,f_$25),i_$10,t_$20))) ));
	assume (forall  S_$100 : $state, p_$93 : $ptr, d_$3 : $ptr, f_$26 : $field, sz_$16 : Integer, i_$11 : Integer, t_$21 : $ctype :: {$set_in(p_$93,$domain(S_$100,d_$3)),$is_primitive_embedded_array(f_$26,sz_$16),$select.tm($typemap(S_$100),$idx($dot(p_$93,f_$26),i_$11,t_$21))} {$set_in(p_$93,$domain(S_$100,d_$3)),$is_primitive_embedded_array(f_$26,sz_$16),$owner(S_$100,$idx($dot(p_$93,f_$26),i_$11,t_$21))} ( (((($full_stop(S_$100) && $set_in(p_$93,$domain(S_$100,d_$3))) && $is_primitive_embedded_array(f_$26,sz_$16)) && (0 <= i_$11)) && (i_$11 < sz_$16)) ==> ($typed(S_$100,$idx($dot(p_$93,f_$26),i_$11,t_$21)) && (!$is_volatile(S_$100,$idx($dot(p_$93,f_$26),i_$11,t_$21)))) ));
	assume (forall  S_$101 : $state, r_$16 : Integer, d_$4 : $ptr, sz_$17 : Integer, i_$12 : Integer, t_$22 : $ctype :: {$set_in($ptr($array(t_$22,sz_$17),r_$16),$domain(S_$101,d_$4)),$select.tm($typemap(S_$101),$idx($ptr(t_$22,r_$16),i_$12,t_$22)),$is_primitive(t_$22)} {$set_in($ptr($array(t_$22,sz_$17),r_$16),$domain(S_$101,d_$4)),$owner(S_$101,$idx($ptr(t_$22,r_$16),i_$12,t_$22)),$is_primitive(t_$22)} ( (((($full_stop(S_$101) && $is_primitive(t_$22)) && $set_in($ptr($array(t_$22,sz_$17),r_$16),$domain(S_$101,d_$4))) && (0 <= i_$12)) && (i_$12 < sz_$17)) ==> ($typed(S_$101,$idx($ptr(t_$22,r_$16),i_$12,t_$22)) && (!$is_volatile(S_$101,$idx($ptr(t_$22,r_$16),i_$12,t_$22)))) ));
	assume (forall  S_$102 : $state, r_$17 : Integer, d_$5 : $ptr, sz_$18 : Integer, i_$13 : Integer, t_$23 : $ctype :: {$set_in($ptr($array(t_$23,sz_$18),r_$17),$domain(S_$102,d_$5)),$select.mem($memory(S_$102),$idx($ptr(t_$23,r_$17),i_$13,t_$23)),$is_primitive(t_$23)} ( (((($full_stop(S_$102) && $is_primitive(t_$23)) && $set_in($ptr($array(t_$23,sz_$18),r_$17),$domain(S_$102,d_$5))) && (0 <= i_$13)) && (i_$13 < sz_$18)) ==> ($select.mem($memory(S_$102),$idx($ptr(t_$23,r_$17),i_$13,t_$23)) == $fetch_from_domain($read_version(S_$102,d_$5),$idx($ptr(t_$23,r_$17),i_$13,t_$23))) ));
	assume (forall  S_$103 : $state, p_$94 : $ptr, f_$27 : $field, sz_$19 : Integer, i_$14 : Integer, t_$24 : $ctype :: {$is_primitive_embedded_volatile_array(f_$27,sz_$19,t_$24),$ts_is_volatile($ts(S_$103,$idx($dot(p_$94,f_$27),i_$14,t_$24)))} ( ((($good_state(S_$103) && $is_primitive_embedded_volatile_array(f_$27,sz_$19,t_$24)) && (0 <= i_$14)) && (i_$14 < sz_$19)) ==> $ts_is_volatile($ts(S_$103,$idx($dot(p_$94,f_$27),i_$14,t_$24))) ));
	assume (forall  p_$95 : $ptr, S1_$9 : $state, S2_$7 : $state, q_$12 : $ptr :: {$set_in(q_$12,$domain(S1_$9,p_$95)),$call_transition(S1_$9,S2_$7)} {:weight  0}( $instantiate_bool($set_in(q_$12,$domain(S2_$7,p_$95))) ));
	assume (forall  p_$96 : $ptr, S1_$10 : $state, S2_$8 : $state, q_$13 : $ptr :: {$set_in(q_$13,$ver_domain($read_version(S1_$10,p_$96))),$call_transition(S1_$10,S2_$8)} {:weight  0}( $instantiate_bool($set_in(q_$13,$ver_domain($read_version(S2_$8,p_$96)))) ));
	assume (forall  p_$97 : $ptr, c_$2 : $ptr :: {$in_claim_domain(p_$97,c_$2)} ( ((forall  s_$8 : $state :: {$dont_instantiate_state(s_$8)} ( $valid_claim(s_$8,c_$2) ==> $closed(s_$8,p_$97) ))) ==> $in_claim_domain(p_$97,c_$2) ));
	assume (forall  S_$104 : $state, c_$3 : $ptr, obj : $ptr, ptr : $ptr :: {$by_claim(S_$104,c_$3,obj,ptr)} {:weight  0}( $by_claim(S_$104,c_$3,obj,ptr) == ptr ));
	assume (forall  S_$105 : $state, p_$98 : $ptr, c_$4 : $ptr, f_$28 : $field :: {$in_claim_domain(p_$98,c_$4),$select.mem($memory(S_$105),$dot(p_$98,f_$28))} {$by_claim(S_$105,c_$4,p_$98,$dot(p_$98,f_$28))} ( ((($good_state(S_$105) && $closed(S_$105,c_$4)) && $in_claim_domain(p_$98,c_$4)) && $is_primitive_non_volatile_field(f_$28)) ==> ($in_claim_domain(p_$98,c_$4) && ($select.mem($memory(S_$105),$dot(p_$98,f_$28)) == $fetch_from_domain($claim_version(c_$4),$dot(p_$98,f_$28)))) ));
	assume (forall  S_$106 : $state, p_$99 : $ptr, c_$5 : $ptr, f_$29 : $field, i_$15 : Integer, sz_$20 : Integer, t_$25 : $ctype :: {$valid_claim(S_$106,c_$5),$in_claim_domain(p_$99,c_$5),$select.mem($memory(S_$106),$idx($dot(p_$99,f_$29),i_$15,t_$25)),$is_primitive_embedded_array(f_$29,sz_$20)} {$by_claim(S_$106,c_$5,p_$99,$idx($dot(p_$99,f_$29),i_$15,t_$25)),$is_primitive_embedded_array(f_$29,sz_$20)} ( ((((($good_state(S_$106) && $closed(S_$106,c_$5)) && $in_claim_domain(p_$99,c_$5)) && $is_primitive_embedded_array(f_$29,sz_$20)) && (0 <= i_$15)) && (i_$15 < sz_$20)) ==> ($select.mem($memory(S_$106),$idx($dot(p_$99,f_$29),i_$15,t_$25)) == $fetch_from_domain($claim_version(c_$5),$idx($dot(p_$99,f_$29),i_$15,t_$25))) ));
	assume (forall  S_$107 : $state, p_$100 : $ptr, c_$6 : $ptr, i_$16 : Integer, sz_$21 : Integer, t_$26 : $ctype :: {$valid_claim(S_$107,c_$6),$in_claim_domain($ptr($array(t_$26,sz_$21),$ref(p_$100)),c_$6),$select.mem($memory(S_$107),$idx(p_$100,i_$16,t_$26)),$is_primitive(t_$26)} {$by_claim(S_$107,c_$6,p_$100,$idx(p_$100,i_$16,t_$26)),$is_primitive(t_$26),$is_array(S_$107,p_$100,t_$26,sz_$21)} ( ((((($good_state(S_$107) && $closed(S_$107,c_$6)) && $in_claim_domain($ptr($array(t_$26,sz_$21),$ref(p_$100)),c_$6)) && $is_primitive(t_$26)) && (0 <= i_$16)) && (i_$16 < sz_$21)) ==> ($select.mem($memory(S_$107),$idx(p_$100,i_$16,t_$26)) == $fetch_from_domain($claim_version(c_$6),$idx(p_$100,i_$16,t_$26))) ));
	assume (forall  S_$108 : $state, p_$101 : $ptr :: {$read_vol_version(S_$108,p_$101)} {:weight  0}( $read_vol_version(S_$108,p_$101) == $int_to_vol_version($select.mem($memory(S_$108),p_$101)) ));
	assume (forall  f_$1 : $field, p_$25 : $ptr, S_$26 : $state :: ( $fetch_from_vv($read_vol_version(S_$26,p_$25),$dot(p_$25,f_$1)) == $fetch_from_vv($read_vol_version(S_$26,p_$25),$dot(p_$25,f_$1)) ));
	assume (forall  S_$109 : $state, r_$18 : Integer, t_$27 : $ctype, approver_$1 : $field, subject_$2 : $field :: {$is_approved_by(t_$27,approver_$1,subject_$2),$select.mem($memory(S_$109),$dot($ptr(t_$27,r_$18),subject_$2))} ( ((($full_stop(S_$109) && $is_approved_by(t_$27,approver_$1,subject_$2)) && $closed(S_$109,$ptr(t_$27,r_$18))) && (($int_to_ptr($select.mem($memory(S_$109),$dot($ptr(t_$27,r_$18),approver_$1))) == $me()) || ($int_to_ptr($fetch_from_vv($read_vol_version(S_$109,$ptr(t_$27,r_$18)),$dot($ptr(t_$27,r_$18),approver_$1))) == $me()))) ==> ($select.mem($memory(S_$109),$dot($ptr(t_$27,r_$18),subject_$2)) == $fetch_from_vv($read_vol_version(S_$109,$ptr(t_$27,r_$18)),$dot($ptr(t_$27,r_$18),subject_$2))) ));
	assume (forall  subject : $field, approver : $ptr, this : $ptr, S2_$0 : $state, S1_$0 : $state :: ( ((($mem_eq(S1_$0,S2_$0,$dot(this,subject)) || ($ref(approver) == 0)) || ((!$is_threadtype($typ(approver))) && $inv2nt(S1_$0,S2_$0,approver))) || ($is_threadtype($typ(approver)) && (!($read_vol_version(S1_$0,this) == $read_vol_version(S2_$0,this))))) == (((($mem(S1_$0,$dot(this,subject)) == $mem(S2_$0,$dot(this,subject))) || ($ref(approver) == 0)) || ((!$is_threadtype($typ(approver))) && $inv2(S1_$0,S2_$0,approver,$typ(approver)))) || ($is_threadtype($typ(approver)) && (!($read_vol_version(S1_$0,this) == $read_vol_version(S2_$0,this))))) ));
	assume (forall  subject_$0 : $field, approver_$0 : $field, this_$0 : $ptr, S2_$1 : $state, S1_$1 : $state :: ( $inv_is_approved_by_ptr(S1_$1,S2_$1,this_$0,$int_to_ptr($mem(S1_$1,$dot(this_$0,approver_$0))),subject_$0) == ((($mem_eq(S1_$1,S2_$1,$dot(this_$0,subject_$0)) || ($ref($int_to_ptr($select.mem($memory(S1_$1),$dot(this_$0,approver_$0)))) == 0)) || ((!$is_threadtype($typ($int_to_ptr($select.mem($memory(S1_$1),$dot(this_$0,approver_$0)))))) && $inv2nt(S1_$1,S2_$1,$int_to_ptr($select.mem($memory(S1_$1),$dot(this_$0,approver_$0)))))) || ($is_threadtype($typ($int_to_ptr($select.mem($memory(S1_$1),$dot(this_$0,approver_$0))))) && (!($read_vol_version(S1_$1,this_$0) == $read_vol_version(S2_$1,this_$0))))) ));
	assume (forall  S_$110 : $state, r_$19 : Integer, t_$28 : $ctype, subject_$3 : $field :: {$is_owner_approved(t_$28,subject_$3),$select.mem($memory(S_$110),$dot($ptr(t_$28,r_$19),subject_$3))} ( ((($full_stop(S_$110) && $closed(S_$110,$ptr(t_$28,r_$19))) && $is_owner_approved(t_$28,subject_$3)) && ($owner(S_$110,$ptr(t_$28,r_$19)) == $me())) ==> ($select.mem($memory(S_$110),$dot($ptr(t_$28,r_$19),subject_$3)) == $fetch_from_vv($read_vol_version(S_$110,$ptr(t_$28,r_$19)),$dot($ptr(t_$28,r_$19),subject_$3))) ));
	assume (forall  S1_$11 : $state, S2_$9 : $state, r_$20 : Integer, t_$29 : $ctype, subject_$4 : $field :: {$is_owner_approved(t_$29,subject_$4),$post_unwrap(S1_$11,S2_$9),$select.mem($memory(S1_$11),$dot($ptr(t_$29,r_$20),subject_$4))} ( $instantiate_int($select.mem($memory(S2_$9),$dot($ptr(t_$29,r_$20),subject_$4))) ));
	assume (forall  subject_$1 : $field, this_$1 : $ptr, S2_$2 : $state, S1_$2 : $state :: ( $inv_is_approved_by_ptr(S1_$2,S2_$2,this_$1,$owner(S1_$2,this_$1),subject_$1) == ((($mem_eq(S1_$2,S2_$2,$dot(this_$1,subject_$1)) || ($ref($owner(S1_$2,this_$1)) == 0)) || ((!$is_threadtype($typ($owner(S1_$2,this_$1)))) && $inv2nt(S1_$2,S2_$2,$owner(S1_$2,this_$1)))) || ($is_threadtype($typ($owner(S1_$2,this_$1))) && (!($read_vol_version(S1_$2,this_$1) == $read_vol_version(S2_$2,this_$1))))) ));
	assume (forall  p_$26 : $ptr, S_$27 : $state :: ( (((forall  #q_$0_$1 : $ptr :: {$st(S_$27,#q_$0_$1)} ( $closed(S_$27,#q_$0_$1) ==> $inv(S_$27,#q_$0_$1,$typ(#q_$0_$1)) ))) && $good_for_admissibility(S_$27)) == (((forall  #q_$0 : $ptr :: {$select.sm($statusmap(S_$27),#q_$0)} ( $closed(S_$27,#q_$0) ==> $inv2(S_$27,S_$27,#q_$0,$typ(#q_$0)) ))) && $good_for_admissibility(S_$27)) ));
	assume (forall  p_$27 : $ptr, S_$28 : $state :: ( (($closed(S_$28,p_$27) && $inv(S_$28,p_$27,$typ(p_$27))) && $stuttering_pre(S_$28,p_$27)) == (($closed(S_$28,p_$27) && $inv2(S_$28,S_$28,p_$27,$typ(p_$27))) && (((forall  #q_$0_$3 : $ptr :: {$st(S_$28,#q_$0_$3)} ( $closed(S_$28,#q_$0_$3) ==> $inv(S_$28,#q_$0_$3,$typ(#q_$0_$3)) ))) && $good_for_admissibility(S_$28))) ));
	assume (forall  s2_$2 : $state, s1_$2 : $state :: ( ((forall  p_$28_$0 : $ptr :: {$st(s2_$2,p_$28_$0)} {$ts(s2_$2,p_$28_$0)} ( $mutable(s1_$2,p_$28_$0) ==> $mutable(s2_$2,p_$28_$0) ))) == ((forall  p_$28 : $ptr :: {$select.sm($statusmap(s2_$2),p_$28)} {$select.tm($typemap(s2_$2),p_$28)} ( $mutable(s1_$2,p_$28) ==> $mutable(s2_$2,p_$28) ))) ));
	assume (forall  s2_$3 : $state, s1_$3 : $state :: ( (($typemap(s1_$3) == $typemap(s2_$3)) && ($statusmap(s1_$3) == $statusmap(s2_$3))) == (($typemap(s1_$3) == $typemap(s2_$3)) && ($statusmap(s1_$3) == $statusmap(s2_$3))) ));
	assume ((!$is_stuttering_check()) && (!$is_unwrap_check())) == ((!$is_stuttering_check()) && (!$is_unwrap_check()));
	assume (forall  p_$29 : $ptr, S_$29 : $state :: ( (((($wrapped(S_$29,p_$29,$typ(p_$29)) && ((!$is_claimable($typ(p_$29))) || ($ref_cnt(S_$29,p_$29) == 0))) && $inv(S_$29,p_$29,$typ(p_$29))) && ((forall  #q_$1_$1 : $ptr :: {$st(S_$29,#q_$1_$1)} ( $closed(S_$29,#q_$1_$1) ==> $inv(S_$29,#q_$1_$1,$typ(#q_$1_$1)) )))) && $good_for_pre_can_unwrap(S_$29)) == (((((((($closed(S_$29,p_$29) && ($owner(S_$29,p_$29) == $me())) && $typed2(S_$29,p_$29,$typ(p_$29))) && (!($kind_of($typ(p_$29)) == $kind_primitive))) && $is_non_primitive($typ(p_$29))) && ((!$is_claimable($typ(p_$29))) || ($ref_cnt(S_$29,p_$29) == 0))) && $inv2(S_$29,S_$29,p_$29,$typ(p_$29))) && ((forall  #q_$1 : $ptr :: {$select.sm($statusmap(S_$29),#q_$1)} ( $closed(S_$29,#q_$1) ==> $inv2(S_$29,S_$29,#q_$1,$typ(#q_$1)) )))) && $good_for_pre_can_unwrap(S_$29)) ));
	assume (forall  S_$111 : $state, p_$102 : $ptr, v_$2 : Integer :: {$update_int(S_$111,p_$102,v_$2)} ( ((($typemap($update_int(S_$111,p_$102,v_$2)) == $typemap(S_$111)) && ($statusmap($update_int(S_$111,p_$102,v_$2)) == $statusmap(S_$111))) && ($memory($update_int(S_$111,p_$102,v_$2)) == $store.mem($memory(S_$111),p_$102,v_$2))) && ((($current_timestamp(S_$111) < $current_timestamp($update_int(S_$111,p_$102,v_$2))) && ((forall  p_$33_$1 : $ptr :: {$timestamp($update_int(S_$111,p_$102,v_$2),p_$33_$1)} {:weight  0}( $timestamp(S_$111,p_$33_$1) <= $timestamp($update_int(S_$111,p_$102,v_$2),p_$33_$1) )))) && $call_transition(S_$111,$update_int(S_$111,p_$102,v_$2))) ));
	assume (forall  p_$30 : $ptr, S_$30 : $state :: ( ($timestamp(S_$30,p_$30) == $current_timestamp(S_$30)) == ($timestamp(S_$30,p_$30) == $current_timestamp(S_$30)) ));
	assume (forall  p_$31 : $ptr, S_$31 : $state :: ( ($timestamp_is_now(S_$31,p_$31) && $mutable(S_$31,p_$31)) == (($timestamp(S_$31,p_$31) == $current_timestamp(S_$31)) && $mutable(S_$31,p_$31)) ));
	assume (forall  M2_$0 : $state, M1_$0 : $state :: ( ((($current_timestamp(M1_$0) <= $current_timestamp(M2_$0)) && ((forall  p_$32_$1 : $ptr :: {$timestamp(M2_$0,p_$32_$1)} {:weight  0}( $timestamp(M1_$0,p_$32_$1) <= $timestamp(M2_$0,p_$32_$1) )))) && $call_transition(M1_$0,M2_$0)) == ((($current_timestamp(M1_$0) <= $current_timestamp(M2_$0)) && ((forall  p_$32 : $ptr :: {$timestamp(M2_$0,p_$32)} {:weight  0}( $timestamp(M1_$0,p_$32) <= $timestamp(M2_$0,p_$32) )))) && $call_transition(M1_$0,M2_$0)) ));
	assume (forall  M2_$1 : $state, M1_$1 : $state :: ( ((($current_timestamp(M1_$1) < $current_timestamp(M2_$1)) && ((forall  p_$33_$3 : $ptr :: {$timestamp(M2_$1,p_$33_$3)} {:weight  0}( $timestamp(M1_$1,p_$33_$3) <= $timestamp(M2_$1,p_$33_$3) )))) && $call_transition(M1_$1,M2_$1)) == ((($current_timestamp(M1_$1) < $current_timestamp(M2_$1)) && ((forall  p_$33 : $ptr :: {$timestamp(M2_$1,p_$33)} {:weight  0}( $timestamp(M1_$1,p_$33) <= $timestamp(M2_$1,p_$33) )))) && $call_transition(M1_$1,M2_$1)) ));
	assume (forall  #p_$12 : $ptr, #l : $ptr, S_$32 : $state, S0 : $state :: ( ((((($typed(S0,#p_$12) && $wrapped(S_$32,#p_$12,$typ(#p_$12))) && $timestamp_is_now(S_$32,#p_$12)) && $is_non_primitive($typ(#p_$12))) && $set_in(#p_$12,$owns(S0,#l))) && $nested_in(S0,#p_$12,#l)) == ((((($typed(S0,#p_$12) && (((($closed(S_$32,#p_$12) && ($owner(S_$32,#p_$12) == $me())) && $typed2(S_$32,#p_$12,$typ(#p_$12))) && (!($kind_of($typ(#p_$12)) == $kind_primitive))) && $is_non_primitive($typ(#p_$12)))) && ($timestamp(S_$32,#p_$12) == $current_timestamp(S_$32))) && $is_non_primitive($typ(#p_$12))) && $set_in(#p_$12,$owns(S0,#l))) && (($owner(S0,#p_$12) == #l) && $closed(S0,#p_$12))) ));
	assume (forall  #p_$13 : $ptr, #l_$0 : $ptr, S_$33 : $state, S0_$0 : $state :: ( ($unwrap_post(S0_$0,S_$33,#l_$0,#p_$13) && ($is_claimable($typ(#p_$13)) ==> ($ref_cnt(S0_$0,#p_$13) == $ref_cnt(S_$33,#p_$13)))) == (((((($typed(S0_$0,#p_$13) && $wrapped(S_$33,#p_$13,$typ(#p_$13))) && $timestamp_is_now(S_$33,#p_$13)) && $is_non_primitive($typ(#p_$13))) && $set_in(#p_$13,$owns(S0_$0,#l_$0))) && $nested_in(S0_$0,#p_$13,#l_$0)) && ($is_claimable($typ(#p_$13)) ==> ($ref_cnt(S0_$0,#p_$13) == $ref_cnt(S_$33,#p_$13)))) ));
	assume (forall  #p_$14 : $ptr, #l_$1 : $ptr, S_$34 : $state :: ( $set_in(#p_$14,$owns(S_$34,#l_$1)) == $set_in(#p_$14,$owns(S_$34,#l_$1)) ));
	assume (forall  S_$112 : $state, l_$3 : $ptr, p_$103 : $ptr :: {$take_over(S_$112,l_$3,p_$103)} ( (!($kind_of($typ(l_$3)) == $kind_primitive)) ==> ((((($statusmap($take_over(S_$112,l_$3,p_$103)) == $store.sm($statusmap(S_$112),p_$103,$taken_over(S_$112,l_$3,p_$103))) && $closed($take_over(S_$112,l_$3,p_$103),p_$103)) && ($owner($take_over(S_$112,l_$3,p_$103),p_$103) == l_$3)) && ($ref_cnt($take_over(S_$112,l_$3,p_$103),p_$103) == $ref_cnt(S_$112,p_$103))) && true) ));
	assume (forall  S0_$2 : $state, S_$113 : $state, l_$4 : $ptr, p_$104 : $ptr :: {$release(S0_$2,S_$113,l_$4,p_$104)} ( ((((($statusmap($release(S0_$2,S_$113,l_$4,p_$104)) == $store.sm($statusmap(S_$113),p_$104,$released(S_$113,l_$4,p_$104))) && $closed($release(S0_$2,S_$113,l_$4,p_$104),p_$104)) && ($owner($release(S0_$2,S_$113,l_$4,p_$104),p_$104) == $me())) && ($ref_cnt($release(S0_$2,S_$113,l_$4,p_$104),p_$104) == $ref_cnt(S_$113,p_$104))) && ($timestamp($release(S0_$2,S_$113,l_$4,p_$104),p_$104) == $current_timestamp(S0_$2))) && true ));
	assume (forall  owns : $ptrset, o : $ptr, S_$35 : $state :: ( $set_difference(owns,$owns(S_$35,o)) == $set_difference(owns,$owns(S_$35,o)) ));
	assume $ptr_level($memory_allocator_type) == 0;
	assume (forall  S_$114 : $state :: {$program_entry_point(S_$114)} ( $program_entry_point(S_$114) ==> $program_entry_point_ch(S_$114) ));
	assume (forall  t_$7 : $ctype, p_$34 : $ptr :: ( (((((forall  S_$36_$1 : $state :: {$ts(S_$36_$1,p_$34)} ( $good_state(S_$36_$1) ==> ($typed(S_$36_$1,p_$34) && $is_object_root(S_$36_$1,p_$34)) ))) && ((forall  S_$37_$1 : $state, f_$2_$1 : $field :: {$ts(S_$37_$1,$dot(p_$34,f_$2_$1))} ( $good_state(S_$37_$1) ==> ($typed(S_$37_$1,p_$34) && $is_object_root(S_$37_$1,p_$34)) )))) && ((forall  S_$38_$1 : $state, f_$3_$1 : $field, i_$30 : Integer, tt_$1 : $ctype :: {$ts(S_$38_$1,$idx($dot(p_$34,f_$3_$1),i_$30,tt_$1))} ( $good_state(S_$38_$1) ==> ($typed(S_$38_$1,p_$34) && $is_object_root(S_$38_$1,p_$34)) )))) && ((forall  S_$39_$1 : $state :: {$program_entry_point(S_$39_$1)} ( $program_entry_point(S_$39_$1) ==> ($extent_mutable(S_$39_$1,p_$34) && ($owns(S_$39_$1,p_$34) == $set_empty())) )))) == (((((forall  S_$36 : $state :: {$select.tm($typemap(S_$36),p_$34)} ( $good_state(S_$36) ==> ($typed(S_$36,p_$34) && ($emb(S_$36,p_$34) == $ptr(^^root_emb,$ref(p_$34)))) ))) && ((forall  S_$37 : $state, f_$2 : $field :: {$select.tm($typemap(S_$37),$dot(p_$34,f_$2))} ( $good_state(S_$37) ==> ($typed(S_$37,p_$34) && ($emb(S_$37,p_$34) == $ptr(^^root_emb,$ref(p_$34)))) )))) && ((forall  S_$38 : $state, f_$3 : $field, i : Integer, tt : $ctype :: {$select.tm($typemap(S_$38),$idx($dot(p_$34,f_$3),i,tt))} ( $good_state(S_$38) ==> ($typed(S_$38,p_$34) && ($emb(S_$38,p_$34) == $ptr(^^root_emb,$ref(p_$34)))) )))) && ((forall  S_$39 : $state :: {$program_entry_point(S_$39)} ( $program_entry_point(S_$39) ==> ($extent_mutable(S_$39,p_$34) && ($owns(S_$39,p_$34) == $set_empty())) )))) ));
	assume (forall  sz_$0 : Integer, T : $ctype, p_$35 : $ptr :: ( ($is(p_$35,T) && ((forall  S_$40_$1 : $state, i_$0_$1 : Integer :: {$st(S_$40_$1,$idx(p_$35,i_$0_$1,T))} {$ts(S_$40_$1,$idx(p_$35,i_$0_$1,T))} ( $good_state(S_$40_$1) ==> (((0 <= i_$0_$1) && (i_$0_$1 < sz_$0)) ==> (((!$is_volatile(S_$40_$1,$idx(p_$35,i_$0_$1,T))) && $typed(S_$40_$1,$idx(p_$35,i_$0_$1,T))) && ($program_entry_point_ch(S_$40_$1) ==> $mutable(S_$40_$1,$idx(p_$35,i_$0_$1,T))))) )))) == ($is(p_$35,T) && ((forall  S_$40 : $state, i_$0 : Integer :: {$select.sm($statusmap(S_$40),$idx(p_$35,i_$0,T))} {$select.tm($typemap(S_$40),$idx(p_$35,i_$0,T))} ( $good_state(S_$40) ==> (((0 <= i_$0) && (i_$0 < sz_$0)) ==> (((!$ts_is_volatile($ts(S_$40,$idx(p_$35,i_$0,T)))) && $typed(S_$40,$idx(p_$35,i_$0,T))) && ($program_entry_point_ch(S_$40) ==> $mutable(S_$40,$idx(p_$35,i_$0,T))))) )))) ));
	assume (forall  u : $ptr, S_$41 : $state :: ( $ts_active_option($ts(S_$41,u)) == $ts_active_option($select.tm($typemap(S_$41),u)) ));
	assume (forall  f_$4 : $field, u_$0 : $ptr, S_$42 : $state :: ( ($active_option(S_$42,u_$0) == f_$4) == ($ts_active_option($ts(S_$42,u_$0)) == f_$4) ));
	assume (forall  #x : $ptr, #s2_$1 : $state, #s1_$2 : $state :: ( ((forall  #p_$15_$0 : $ptr :: {$mem(#s2_$1,#p_$15_$0)} ( ((#p_$15_$0 == #x) || ($in_full_extent_of(#p_$15_$0,#x) && ((!$typed(#s1_$2,#p_$15_$0)) || (!$typed(#s2_$1,#p_$15_$0))))) || $mem_eq(#s1_$2,#s2_$1,#p_$15_$0) ))) == ((forall  #p_$15 : $ptr :: {$select.mem($memory(#s2_$1),#p_$15)} ( ((#p_$15 == #x) || ($set_in(#p_$15,$full_extent(#x)) && ((!$typed(#s1_$2,#p_$15)) || (!$typed(#s2_$1,#p_$15))))) || ($mem(#s1_$2,#p_$15) == $mem(#s2_$1,#p_$15)) ))) ));
	assume (forall  #l_$2 : $ptr, #p_$16 : $ptr :: ( $set_in(#p_$16,$span(#l_$2)) == $set_in(#p_$16,$span(#l_$2)) ));
	assume (forall  #p_$17 : $ptr :: ( $full_extent(#p_$17) == $full_extent(#p_$17) ));
	assume (forall  #l_$3 : $ptr, #p_$18 : $ptr :: ( $set_in(#p_$18,$struct_extent(#l_$3)) == $set_in(#p_$18,$full_extent(#l_$3)) ));
	assume (forall  S_$115 : $state, p_$105 : $ptr, q_$14 : $ptr :: {$set_in(p_$105,$volatile_span(S_$115,q_$14))} ( $set_in(p_$105,$volatile_span(S_$115,q_$14)) <==> ((p_$105 == q_$14) || ($ts_is_volatile($ts(S_$115,p_$105)) && $set_in(p_$105,$span(q_$14)))) ));
	assume (forall  p_$36 : $ptr, S_$43 : $state :: ( (($extent_mutable(S_$43,p_$36) && $is_object_root(S_$43,p_$36)) && $timestamp_is_now(S_$43,p_$36)) == (($extent_mutable(S_$43,p_$36) && ($emb(S_$43,p_$36) == $ptr(^^root_emb,$ref(p_$36)))) && ($timestamp(S_$43,p_$36) == $current_timestamp(S_$43))) ));
	assume (forall  #o_$0 : $ptr :: {$set_in(#o_$0,$set_empty())} {:weight  0}( !$set_in(#o_$0,$set_empty()) ));
	assume (forall  #r_$2 : $ptr, #o_$1 : $ptr :: {$set_in(#o_$1,$set_singleton(#r_$2))} {:weight  0}( $set_in(#o_$1,$set_singleton(#r_$2)) <==> (#r_$2 == #o_$1) ));
	assume (forall  #r_$3 : $ptr, #o_$2 : $ptr :: {$set_in(#o_$2,$non_null_set_singleton(#r_$3))} {:weight  0}( $set_in(#o_$2,$non_null_set_singleton(#r_$3)) <==> ((#r_$3 == #o_$2) && (!($ref(#r_$3) == $ref($null)))) ));
	assume (forall  #a : $ptrset, #b_$1 : $ptrset, #o_$3 : $ptr :: {$set_in(#o_$3,$set_union(#a,#b_$1))} {:weight  0}( $set_in(#o_$3,$set_union(#a,#b_$1)) <==> ($set_in(#o_$3,#a) || $set_in(#o_$3,#b_$1)) ));
	assume (forall  #a_$0 : $ptrset, #b_$2 : $ptrset, #o_$4 : $ptr :: {$set_in(#o_$4,$set_difference(#a_$0,#b_$2))} {:weight  0}( $set_in(#o_$4,$set_difference(#a_$0,#b_$2)) <==> ($set_in(#o_$4,#a_$0) && (!$set_in(#o_$4,#b_$2))) ));
	assume (forall  #a_$1 : $ptrset, #b_$3 : $ptrset, #o_$5 : $ptr :: {$set_in(#o_$5,$set_intersection(#a_$1,#b_$3))} {:weight  0}( $set_in(#o_$5,$set_intersection(#a_$1,#b_$3)) <==> ($set_in(#o_$5,#a_$1) && $set_in(#o_$5,#b_$3)) ));
	assume (forall  e : $ptr, S_$44 : $ptrset :: ( $set_union(S_$44,$set_singleton(e)) == $set_union(S_$44,$set_singleton(e)) ));
	assume (forall  e_$0 : $ptr, S_$45 : $ptrset :: ( $set_difference(S_$45,$set_singleton(e_$0)) == $set_difference(S_$45,$set_singleton(e_$0)) ));
	assume (forall  #a_$3 : $ptrset, #b_$5 : $ptrset :: {$set_eq(#a_$3,#b_$5)} {:weight  0}( ((forall  #o_$7 : $ptr :: {$dont_instantiate(#o_$7)} {:weight  0}( $set_in(#o_$7,#a_$3) <==> $set_in(#o_$7,#b_$5) ))) ==> $set_eq(#a_$3,#b_$5) ));
	assume (forall  #a_$4 : $ptrset, #b_$6 : $ptrset :: {$set_eq(#a_$4,#b_$6)} {:weight  0}( $set_eq(#a_$4,#b_$6) ==> (#a_$4 == #b_$6) ));
	assume $set_cardinality($set_empty()) == 0;
	assume (forall  p_$106 : $ptr :: {:weight  0}( $set_cardinality($set_singleton(p_$106)) == 1 ));
	assume (forall  #o_$8 : $ptr :: {$set_in(#o_$8,$set_universe())} {:weight  0}( $set_in(#o_$8,$set_universe()) ));
	assume (forall  p_$107 : $ptr, s1_$5 : $ptrset, s2_$5 : $ptrset :: {$set_disjoint(s1_$5,s2_$5),$set_in(p_$107,s1_$5)} {:weight  0}( ($set_disjoint(s1_$5,s2_$5) && $set_in(p_$107,s1_$5)) ==> ($id_set_disjoint(p_$107,s1_$5,s2_$5) == 1) ));
	assume (forall  p_$108 : $ptr, s1_$6 : $ptrset, s2_$6 : $ptrset :: {$set_disjoint(s1_$6,s2_$6),$set_in(p_$108,s2_$6)} {:weight  0}( ($set_disjoint(s1_$6,s2_$6) && $set_in(p_$108,s2_$6)) ==> ($id_set_disjoint(p_$108,s1_$6,s2_$6) == 2) ));
	assume (forall  s1_$7 : $ptrset, s2_$7 : $ptrset :: {$set_disjoint(s1_$7,s2_$7)} {:weight  0}( ((forall  p_$109 : $ptr :: {$dont_instantiate(p_$109)} ( ($set_in(p_$109,s1_$7) ==> (!$set_in(p_$109,s2_$7))) && ($set_in(p_$109,s2_$7) ==> (!$set_in(p_$109,s1_$7))) ))) ==> $set_disjoint(s1_$7,s2_$7) ));
	assume (forall  p_$110 : $ptr, S1_$12 : $state, p1_$1 : $ptr :: {$set_in(p_$110,$owns(S1_$12,p1_$1))} {:weight  0}( $set_in(p_$110,$owns(S1_$12,p1_$1)) ==> $in_some_owns(p_$110) ));
	assume (forall  p_$111 : $ptr, S1_$13 : $state, p1_$2 : $ptr :: {$set_in2(p_$111,$owns(S1_$13,p1_$2)),$in_some_owns(p_$111)} {:weight  0}( $set_in(p_$111,$owns(S1_$13,p1_$2)) <==> $set_in2(p_$111,$owns(S1_$13,p1_$2)) ));
	assume (forall  p_$112 : $ptr, s_$9 : $ptrset :: {$set_in(p_$112,s_$9)} {:weight  0}( $set_in(p_$112,s_$9) <==> $set_in2(p_$112,s_$9) ));
	assume (forall  p_$114 : $ptr, s_$11 : $ptrset :: {$set_in0(p_$114,s_$11)} {:weight  0}( $set_in(p_$114,s_$11) <==> $set_in0(p_$114,s_$11) ));
	assume (forall  S2_$3 : $state, S1_$3 : $state :: ( ((((((forall  p_$37_$1 : $ptr :: {$st(S2_$3,p_$37_$1)} ( $nested(S2_$3,p_$37_$1) ==> $nested(S1_$3,p_$37_$1) ))) && ((forall  p_$38_$1 : $ptr :: {$mem(S2_$3,p_$38_$1)} ( $thread_local(S1_$3,p_$38_$1) ==> ($mem_eq(S1_$3,S2_$3,p_$38_$1) && $thread_local(S2_$3,p_$38_$1)) )))) && ((forall  p_$39_$1 : $ptr :: {$st(S2_$3,p_$39_$1)} ( $thread_local(S1_$3,p_$39_$1) ==> ($st_eq(S1_$3,S2_$3,p_$39_$1) && $thread_local(S2_$3,p_$39_$1)) )))) && ((forall  p_$40_$1 : $ptr :: {$ts(S2_$3,p_$40_$1)} ( $thread_local(S1_$3,p_$40_$1) ==> ($ts_eq(S1_$3,S2_$3,p_$40_$1) && $thread_local(S2_$3,p_$40_$1)) )))) && $timestamp_post(S1_$3,S2_$3)) == ((((((forall  p_$37 : $ptr :: {$select.sm($statusmap(S2_$3),p_$37)} ( (!($kind_of($typ($owner(S2_$3,p_$37))) == $kind_thread)) ==> (!($kind_of($typ($owner(S1_$3,p_$37))) == $kind_thread)) ))) && ((forall  p_$38 : $ptr :: {$select.mem($memory(S2_$3),p_$38)} ( $thread_local(S1_$3,p_$38) ==> (($mem(S1_$3,p_$38) == $mem(S2_$3,p_$38)) && $thread_local(S2_$3,p_$38)) )))) && ((forall  p_$39 : $ptr :: {$select.sm($statusmap(S2_$3),p_$39)} ( $thread_local(S1_$3,p_$39) ==> (($st(S1_$3,p_$39) == $st(S2_$3,p_$39)) && $thread_local(S2_$3,p_$39)) )))) && ((forall  p_$40 : $ptr :: {$select.tm($typemap(S2_$3),p_$40)} ( $thread_local(S1_$3,p_$40) ==> (($ts(S1_$3,p_$40) == $ts(S2_$3,p_$40)) && $thread_local(S2_$3,p_$40)) )))) && ((($current_timestamp(S1_$3) <= $current_timestamp(S2_$3)) && ((forall  p_$32_$3 : $ptr :: {$timestamp(S2_$3,p_$32_$3)} {:weight  0}( $timestamp(S1_$3,p_$32_$3) <= $timestamp(S2_$3,p_$32_$3) )))) && $call_transition(S1_$3,S2_$3))) ));
	assume (forall  T_$16 : $ctype, s_$12 : Integer :: {$array(T_$16,s_$12)} ( $element_type($array(T_$16,s_$12)) == T_$16 ));
	assume (forall  T_$17 : $ctype, s_$13 : Integer :: {$array(T_$17,s_$13)} ( $array_length($array(T_$17,s_$13)) == s_$13 ));
	assume (forall  T_$18 : $ctype, s_$14 : Integer :: {$array(T_$18,s_$14)} ( $ptr_level($array(T_$18,s_$14)) == 0 ));
	assume (forall  T_$19 : $ctype, s_$15 : Integer :: {$array(T_$19,s_$15)} ( $is_arraytype($array(T_$19,s_$15)) ));
	assume (forall  T_$20 : $ctype, s_$16 : Integer :: {$array(T_$20,s_$16)} ( !$is_claimable($array(T_$20,s_$16)) ));
	assume (forall  T_$21 : $ctype, s_$17 : Integer :: {$sizeof($array(T_$21,s_$17))} ( $sizeof($array(T_$21,s_$17)) == ($sizeof(T_$21) * s_$17) ));
	assume (forall  #p_$29 : $ptr, #i_$0 : Integer, #t_$13 : $ctype :: {$idx(#p_$29,#i_$0,#t_$13)} ( $extent_hint($idx(#p_$29,#i_$0,#t_$13),#p_$29) && ($idx(#p_$29,#i_$0,#t_$13) == $ptr(#t_$13,$ref(#p_$29) + (#i_$0 * $sizeof(#t_$13)))) ));
	assume (forall  z : Integer, y : Integer, x : Integer :: ( (x + (y * z)) == (x + (y * z)) ));
	assume (forall  y_$0 : Integer, x_$0 : Integer :: ( (x_$0 + y_$0) == (x_$0 + y_$0) ));
	assume (forall  p_$116 : $ptr, i_$19 : Integer, j : Integer, T_$23 : $ctype :: {$idx($idx(p_$116,i_$19,T_$23),j,T_$23)} ( ((!(i_$19 == 0)) && (!(j == 0))) ==> ($idx($idx(p_$116,i_$19,T_$23),j,T_$23) == $idx(p_$116,i_$19 + j,T_$23)) ));
	assume (forall  S_$116 : $state, p_$117 : $ptr, T_$24 : $ctype, sz_$22 : Integer, vol_$1 : Boolean :: {$is_array_vol_or_nonvol(S_$116,p_$117,T_$24,sz_$22,vol_$1)} {:weight  0}( $is_array_vol_or_nonvol(S_$116,p_$117,T_$24,sz_$22,vol_$1) <==> ($is(p_$117,T_$24) && ((forall  i_$20 : Integer :: {$select.sm($statusmap(S_$116),$idx(p_$117,i_$20,T_$24))} {$select.tm($typemap(S_$116),$idx(p_$117,i_$20,T_$24))} {$select.mem($memory(S_$116),$idx(p_$117,i_$20,T_$24))} ( ((0 <= i_$20) && (i_$20 < sz_$22)) ==> (($ts_is_volatile($ts(S_$116,$idx(p_$117,i_$20,T_$24))) <==> vol_$1) && $typed(S_$116,$idx(p_$117,i_$20,T_$24))) )))) ));
	assume (forall  S_$117 : $state, p_$118 : $ptr, T_$25 : $ctype, sz_$23 : Integer :: {$is_array(S_$117,p_$118,T_$25,sz_$23)} {:weight  0}( $is_array(S_$117,p_$118,T_$25,sz_$23) <==> ($is(p_$118,T_$25) && ((forall  i_$21 : Integer :: {$select.sm($statusmap(S_$117),$idx(p_$118,i_$21,T_$25))} {$select.tm($typemap(S_$117),$idx(p_$118,i_$21,T_$25))} {$select.mem($memory(S_$117),$idx(p_$118,i_$21,T_$25))} ( ((0 <= i_$21) && (i_$21 < sz_$23)) ==> $typed(S_$117,$idx(p_$118,i_$21,T_$25)) )))) ));
	assume (forall  sz_$1 : Integer, T_$0 : $ctype, p_$41 : $ptr, S_$46 : $state :: ( ((forall  i_$1_$0 : Integer :: {$st(S_$46,$idx(p_$41,i_$1_$0,T_$0))} {$ts(S_$46,$idx(p_$41,i_$1_$0,T_$0))} ( ((0 <= i_$1_$0) && (i_$1_$0 < sz_$1)) ==> $thread_local2(S_$46,$idx(p_$41,i_$1_$0,T_$0),T_$0) ))) == ((forall  i_$1 : Integer :: {$select.sm($statusmap(S_$46),$idx(p_$41,i_$1,T_$0))} {$select.tm($typemap(S_$46),$idx(p_$41,i_$1,T_$0))} ( ((0 <= i_$1) && (i_$1 < sz_$1)) ==> ($is($idx(p_$41,i_$1,T_$0),T_$0) && $thread_local(S_$46,$idx(p_$41,i_$1,T_$0))) ))) ));
	assume (forall  sz_$2 : Integer, T_$1 : $ctype, p_$42 : $ptr, S_$47 : $state :: ( ($is_array(S_$47,p_$42,T_$1,sz_$2) && ((forall  i_$2_$1 : Integer :: {$st(S_$47,$idx(p_$42,i_$2_$1,T_$1))} {$ts(S_$47,$idx(p_$42,i_$2_$1,T_$1))} ( ((0 <= i_$2_$1) && (i_$2_$1 < sz_$2)) ==> $mutable(S_$47,$idx(p_$42,i_$2_$1,T_$1)) )))) == ($is_array(S_$47,p_$42,T_$1,sz_$2) && ((forall  i_$2 : Integer :: {$select.sm($statusmap(S_$47),$idx(p_$42,i_$2,T_$1))} {$select.tm($typemap(S_$47),$idx(p_$42,i_$2,T_$1))} ( ((0 <= i_$2) && (i_$2 < sz_$2)) ==> $mutable(S_$47,$idx(p_$42,i_$2,T_$1)) )))) ));
	assume (forall  emb : $ptr, sz_$3 : Integer, T_$2 : $ctype, p_$43 : $ptr, S_$48 : $state :: ( ($is_array_vol_or_nonvol(S_$48,p_$43,T_$2,sz_$3,false) && ((forall  i_$3_$1 : Integer :: {$ts(S_$48,$idx(p_$43,i_$3_$1,T_$2))} ( ((0 <= i_$3_$1) && (i_$3_$1 < sz_$3)) ==> ($emb(S_$48,$idx(p_$43,i_$3_$1,T_$2)) == emb) )))) == ($is_array_vol_or_nonvol(S_$48,p_$43,T_$2,sz_$3,false) && ((forall  i_$3 : Integer :: {$select.tm($typemap(S_$48),$idx(p_$43,i_$3,T_$2))} ( ((0 <= i_$3) && (i_$3 < sz_$3)) ==> ($ts_emb($ts(S_$48,$idx(p_$43,i_$3,T_$2))) == emb) )))) ));
	assume (forall  isvol : Boolean, f_$5 : $field, emb_$0 : $ptr, sz_$4 : Integer, T_$3 : $ctype, p_$44 : $ptr, S_$49 : $state :: ( ($is_array_vol_or_nonvol(S_$49,p_$44,T_$3,sz_$4,isvol) && ((forall  i_$4_$1 : Integer :: {$ts(S_$49,$idx(p_$44,i_$4_$1,T_$3))} {$mem(S_$49,$idx(p_$44,i_$4_$1,T_$3))} ( ((0 <= i_$4_$1) && (i_$4_$1 < sz_$4)) ==> (($emb(S_$49,$idx(p_$44,i_$4_$1,T_$3)) == emb_$0) && ($path(S_$49,$idx(p_$44,i_$4_$1,T_$3)) == $array_path(f_$5,i_$4_$1))) )))) == ($is_array_vol_or_nonvol(S_$49,p_$44,T_$3,sz_$4,isvol) && ((forall  i_$4 : Integer :: {$select.tm($typemap(S_$49),$idx(p_$44,i_$4,T_$3))} {$select.mem($memory(S_$49),$idx(p_$44,i_$4,T_$3))} ( ((0 <= i_$4) && (i_$4 < sz_$4)) ==> (($ts_emb($ts(S_$49,$idx(p_$44,i_$4,T_$3))) == emb_$0) && ($ts_path($ts(S_$49,$idx(p_$44,i_$4,T_$3))) == $array_path(f_$5,i_$4))) )))) ));
	assume (forall  vol : Boolean, union : Boolean, sz_$5 : Integer, T_$4 : $ctype, f_$6 : $field :: ( ((forall  S_$50_$0 : $state, p_$45_$0 : $ptr, i_$5_$0 : Integer :: {$ts(S_$50_$0,$idx($dot(p_$45_$0,f_$6),i_$5_$0,T_$4))} {$st(S_$50_$0,$idx($dot(p_$45_$0,f_$6),i_$5_$0,T_$4))} {$mem(S_$50_$0,$idx($dot(p_$45_$0,f_$6),i_$5_$0,T_$4))} ( ((((0 <= i_$5_$0) && (i_$5_$0 < sz_$5)) && ((!union) || ($active_option(S_$50_$0,p_$45_$0) == f_$6))) && $typed2(S_$50_$0,p_$45_$0,$field_parent_type(f_$6))) ==> (((($is_volatile(S_$50_$0,$idx($dot(p_$45_$0,f_$6),i_$5_$0,T_$4)) <==> vol) && $typed(S_$50_$0,$idx($dot(p_$45_$0,f_$6),i_$5_$0,T_$4))) && ($emb(S_$50_$0,$idx($dot(p_$45_$0,f_$6),i_$5_$0,T_$4)) == p_$45_$0)) && ($path(S_$50_$0,$idx($dot(p_$45_$0,f_$6),i_$5_$0,T_$4)) == $array_path(f_$6,i_$5_$0))) ))) == ((forall  S_$50 : $state, p_$45 : $ptr, i_$5 : Integer :: {$select.tm($typemap(S_$50),$idx($dot(p_$45,f_$6),i_$5,T_$4))} {$select.sm($statusmap(S_$50),$idx($dot(p_$45,f_$6),i_$5,T_$4))} {$select.mem($memory(S_$50),$idx($dot(p_$45,f_$6),i_$5,T_$4))} ( ((((0 <= i_$5) && (i_$5 < sz_$5)) && ((!union) || ($ts_active_option($ts(S_$50,p_$45)) == f_$6))) && ($is(p_$45,$field_parent_type(f_$6)) && $typed(S_$50,p_$45))) ==> (((($ts_is_volatile($ts(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))) <==> vol) && $typed(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))) && ($ts_emb($ts(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))) == p_$45)) && ($ts_path($ts(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))) == $array_path(f_$6,i_$5))) ))) ));
	assume (forall  vol_$0 : Boolean, union_$0 : Boolean, sz_$6 : Integer, T_$5 : $ctype, f_$7 : $field :: ( (((forall  S_$51_$1 : $state, p_$46_$1 : $ptr :: {$ts(S_$51_$1,$as_array($dot(p_$46_$1,f_$7),T_$5,sz_$6))} {$st(S_$51_$1,$as_array($dot(p_$46_$1,f_$7),T_$5,sz_$6))} {$mem(S_$51_$1,$as_array($dot(p_$46_$1,f_$7),T_$5,sz_$6))} ( (((!union_$0) || ($active_option(S_$51_$1,p_$46_$1) == f_$7)) && $typed2(S_$51_$1,p_$46_$1,$field_parent_type(f_$7))) ==> ((($extent_hint($as_array($dot(p_$46_$1,f_$7),T_$5,sz_$6),p_$46_$1) && $typed(S_$51_$1,$as_array($dot(p_$46_$1,f_$7),T_$5,sz_$6))) && ($emb(S_$51_$1,$as_array($dot(p_$46_$1,f_$7),T_$5,sz_$6)) == p_$46_$1)) && ($path(S_$51_$1,$as_array($dot(p_$46_$1,f_$7),T_$5,sz_$6)) == f_$7)) ))) && ((forall  p_$47_$1 : $ptr, i_$6_$1 : Integer :: {$idx($dot(p_$47_$1,f_$7),i_$6_$1,T_$5)} ( $instantiate_ptr($as_array($dot(p_$47_$1,f_$7),T_$5,sz_$6)) )))) == (((forall  S_$51 : $state, p_$46 : $ptr :: {$select.tm($typemap(S_$51),$ptr($array(T_$5,sz_$6),$ref($dot(p_$46,f_$7))))} {$select.sm($statusmap(S_$51),$ptr($array(T_$5,sz_$6),$ref($dot(p_$46,f_$7))))} {$select.mem($memory(S_$51),$ptr($array(T_$5,sz_$6),$ref($dot(p_$46,f_$7))))} ( (((!union_$0) || ($ts_active_option($ts(S_$51,p_$46)) == f_$7)) && ($is(p_$46,$field_parent_type(f_$7)) && $typed(S_$51,p_$46))) ==> ((($extent_hint($ptr($array(T_$5,sz_$6),$ref($dot(p_$46,f_$7))),p_$46) && $typed(S_$51,$ptr($array(T_$5,sz_$6),$ref($dot(p_$46,f_$7))))) && ($ts_emb($ts(S_$51,$ptr($array(T_$5,sz_$6),$ref($dot(p_$46,f_$7))))) == p_$46)) && ($ts_path($ts(S_$51,$ptr($array(T_$5,sz_$6),$ref($dot(p_$46,f_$7))))) == f_$7)) ))) && ((forall  p_$47 : $ptr, i_$6 : Integer :: {$idx($dot(p_$47,f_$7),i_$6,T_$5)} ( $instantiate_ptr($ptr($array(T_$5,sz_$6),$ref($dot(p_$47,f_$7)))) )))) ));
	assume (forall  p_$119 : $ptr, #r_$4 : Integer, T_$26 : $ctype, sz_$24 : Integer :: {$set_in(p_$119,$full_extent($ptr($array(T_$26,sz_$24),#r_$4)))} ( $set_in(p_$119,$full_extent($ptr($array(T_$26,sz_$24),#r_$4))) <==> ((p_$119 == $ptr($array(T_$26,sz_$24),#r_$4)) || ($in_range(0,$index_within(p_$119,$ptr(T_$26,#r_$4)),sz_$24 - 1) && $in_full_extent_of(p_$119,$idx($ptr(T_$26,#r_$4),$index_within(p_$119,$ptr(T_$26,#r_$4)),T_$26)))) ));
	assume (forall  S_$118 : $state, p_$120 : $ptr, #r_$5 : Integer, T_$27 : $ctype, sz_$25 : Integer :: {$set_in(p_$120,$extent(S_$118,$ptr($array(T_$27,sz_$25),#r_$5)))} ( $set_in(p_$120,$extent(S_$118,$ptr($array(T_$27,sz_$25),#r_$5))) <==> ((p_$120 == $ptr($array(T_$27,sz_$25),#r_$5)) || ($in_range(0,$index_within(p_$120,$ptr(T_$27,#r_$5)),sz_$25 - 1) && $in_extent_of(S_$118,p_$120,$idx($ptr(T_$27,#r_$5),$index_within(p_$120,$ptr(T_$27,#r_$5)),T_$27)))) ));
	assume (forall  p_$121 : $ptr, #r_$6 : Integer, T_$28 : $ctype, sz_$26 : Integer :: {$set_in(p_$121,$span($ptr($array(T_$28,sz_$26),#r_$6))),$is_primitive(T_$28)} ( $is_primitive(T_$28) ==> ($set_in(p_$121,$span($ptr($array(T_$28,sz_$26),#r_$6))) <==> ($in_range(0,$index_within(p_$121,$ptr(T_$28,#r_$6)),sz_$26 - 1) && (p_$121 == $idx($ptr(T_$28,#r_$6),$index_within(p_$121,$ptr(T_$28,#r_$6)),T_$28)))) ));
	assume (forall  emb_$1 : $ptr, p_$48 : $ptr, S_$52 : $state :: ( ((($emb(S_$52,p_$48) == emb_$1) && (!$is_volatile(S_$52,p_$48))) && $typed(S_$52,p_$48)) == ((($ts_emb($ts(S_$52,p_$48)) == emb_$1) && (!$ts_is_volatile($ts(S_$52,p_$48)))) && $typed(S_$52,p_$48)) ));
	assume (forall  S_$119 : $state, #r_$7 : Integer, T_$29 : $ctype, sz_$27 : Integer, i_$22 : Integer :: {$select.sm($statusmap(S_$119),$idx($ptr(T_$29,#r_$7),i_$22,T_$29)),$ptr($array(T_$29,sz_$27),#r_$7)} {$select.tm($typemap(S_$119),$idx($ptr(T_$29,#r_$7),i_$22,T_$29)),$ptr($array(T_$29,sz_$27),#r_$7)} ( $typed(S_$119,$ptr($array(T_$29,sz_$27),#r_$7)) ==> (((0 <= i_$22) && (i_$22 < sz_$27)) ==> ((($emb(S_$119,$idx($ptr($array(T_$29,sz_$27),#r_$7),i_$22,T_$29)) == $ptr($array(T_$29,sz_$27),#r_$7)) && (!$is_volatile(S_$119,$idx($ptr($array(T_$29,sz_$27),#r_$7),i_$22,T_$29)))) && $typed(S_$119,$idx($ptr($array(T_$29,sz_$27),#r_$7),i_$22,T_$29)))) ));
	assume (forall  p_$122 : $ptr, T_$30 : $ctype, sz_$28 : Integer, elem : $ptr :: {$set_in(elem,$array_members(p_$122,T_$30,sz_$28))} ( $set_in(elem,$array_members(p_$122,T_$30,sz_$28)) <==> ($in_range(0,$index_within(elem,p_$122),sz_$28 - 1) && (elem == $idx(p_$122,$index_within(elem,p_$122),T_$30))) ));
	assume (forall  S_$120 : $state, p_$123 : $ptr, T_$31 : $ctype, sz_$29 : Integer :: {$array_range(S_$120,p_$123,T_$31,sz_$29)} ( $array_range(S_$120,p_$123,T_$31,sz_$29) == $array_range_no_state(p_$123,T_$31,sz_$29) ));
	assume (forall  S_$121 : $state, p_$124 : $ptr, #r_$8 : Integer, T_$32 : $ctype, sz_$30 : Integer :: {$set_in(p_$124,$array_range(S_$121,$ptr(T_$32,#r_$8),T_$32,sz_$30))} ( $instantiate_bool($typed(S_$121,p_$124)) && ($set_in(p_$124,$array_range(S_$121,$ptr(T_$32,#r_$8),T_$32,sz_$30)) <==> ($in_range(0,$index_within(p_$124,$ptr(T_$32,#r_$8)),sz_$30 - 1) && $in_full_extent_of(p_$124,$idx($ptr(T_$32,#r_$8),$index_within(p_$124,$ptr(T_$32,#r_$8)),T_$32)))) ));
	assume (forall  p_$125 : $ptr, T_$33 : $ctype, sz_$31 : Integer, idx : Integer, S_$122 : $ptrset :: {$idx(p_$125,idx,T_$33),$set_disjoint($array_range_no_state(p_$125,T_$33,sz_$31),S_$122)} ( $set_disjoint($array_range_no_state(p_$125,T_$33,sz_$31),S_$122) ==> (((0 <= idx) && (idx < sz_$31)) ==> ($id_set_disjoint($idx(p_$125,idx,T_$33),$array_range_no_state(p_$125,T_$33,sz_$31),S_$122) == 1)) ));
	assume (forall  p_$126 : $ptr, T_$34 : $ctype, sz_$32 : Integer, idx_$0 : Integer, S_$123 : $ptrset :: {$idx(p_$126,idx_$0,T_$34),$set_disjoint(S_$123,$array_range_no_state(p_$126,T_$34,sz_$32))} ( $set_disjoint(S_$123,$array_range_no_state(p_$126,T_$34,sz_$32)) ==> (((0 <= idx_$0) && (idx_$0 < sz_$32)) ==> ($id_set_disjoint($idx(p_$126,idx_$0,T_$34),S_$123,$array_range_no_state(p_$126,T_$34,sz_$32)) == 2)) ));
	assume (forall  p_$127 : $ptr, #r_$9 : Integer, T_$35 : $ctype, sz_$33 : Integer :: {$set_in(p_$127,$non_null_array_range($ptr(T_$35,#r_$9),T_$35,sz_$33))} ( $set_in(p_$127,$non_null_array_range($ptr(T_$35,#r_$9),T_$35,sz_$33)) <==> ((!(#r_$9 == 0)) && ($in_range(0,$index_within(p_$127,$ptr(T_$35,#r_$9)),sz_$33 - 1) && $in_full_extent_of(p_$127,$idx($ptr(T_$35,#r_$9),$index_within(p_$127,$ptr(T_$35,#r_$9)),T_$35)))) ));
	assume (forall  q_$15 : $ptr, S_$124 : $state, p_$128 : $ptr :: {$set_in(q_$15,$non_null_extent(S_$124,p_$128))} ( $set_in(q_$15,$non_null_extent(S_$124,p_$128)) <==> ((!($ref(p_$128) == $ref($null))) && $set_in(q_$15,$extent(S_$124,p_$128))) ));
	assume (forall  sz_$7 : Integer, T_$6 : $ctype, p_$49 : $ptr :: ( $ptr($array(T_$6,sz_$7),$ref(p_$49)) == $ptr($array(T_$6,sz_$7),$ref(p_$49)) ));
	assume (forall  sz_$8 : Integer, T_$7 : $ctype, arr : $ptr, s2_$4 : $state, s1_$4 : $state :: ( ((forall  #i_$1 : Integer :: {$idx(arr,#i_$1,T_$7)} ( ((0 <= #i_$1) && (#i_$1 < sz_$8)) ==> $mem_eq(s1_$4,s2_$4,$idx(arr,#i_$1,T_$7)) ))) == ((forall  #i : Integer :: {$idx(arr,#i,T_$7)} ( ((0 <= #i) && (#i < sz_$8)) ==> ($mem(s1_$4,$idx(arr,#i,T_$7)) == $mem(s2_$4,$idx(arr,#i,T_$7))) ))) ));
	assume (forall  p_$129 : $ptr, k : Integer :: {$idx(p_$129,k,$typ(p_$129))} ( ($index_within($idx(p_$129,k,$typ(p_$129)),p_$129) == k) && $simple_index($idx(p_$129,k,$typ(p_$129)),p_$129) ));
	assume (forall  p_$130 : $ptr, q_$16 : $ptr, f_$30 : $field :: {$simple_index($dot(p_$130,f_$30),q_$16)} {$index_within($dot(p_$130,f_$30),q_$16)} ( $simple_index(p_$130,q_$16) ==> ($simple_index($dot(p_$130,f_$30),q_$16) && ($index_within($dot(p_$130,f_$30),q_$16) == $index_within(p_$130,q_$16))) ));
	assume (forall  p_$131 : $ptr, q_$17 : $ptr, f_$31 : $field, i_$23 : Integer, t_$30 : $ctype :: {$simple_index($idx($dot(p_$131,f_$31),i_$23,t_$30),q_$17)} {$index_within($idx($dot(p_$131,f_$31),i_$23,t_$30),q_$17)} ( (((0 <= i_$23) && (i_$23 < $embedded_array_size(f_$31,t_$30))) && $simple_index(p_$131,q_$17)) ==> ($simple_index($idx($dot(p_$131,f_$31),i_$23,t_$30),q_$17) && ($index_within($idx($dot(p_$131,f_$31),i_$23,t_$30),q_$17) == $index_within(p_$131,q_$17))) ));
	assume (forall  sz_$9 : Integer, T_$8 : $ctype, arr_$0 : $ptr, q : $ptr :: ( ($in_range(0,$index_within(q,arr_$0),sz_$9 - 1) && (q == $idx(arr_$0,$index_within(q,arr_$0),T_$8))) == (((0 <= $index_within(q,arr_$0)) && ($index_within(q,arr_$0) <= (sz_$9 - 1))) && (q == $idx(arr_$0,$index_within(q,arr_$0),T_$8))) ));
	assume (forall  sz_$10 : Integer, T_$9 : $ctype, arr_$1 : $ptr, q_$0 : $ptr :: ( ($in_range(0,$index_within(q_$0,arr_$1),sz_$10 - 1) && $in_full_extent_of(q_$0,$idx(arr_$1,$index_within(q_$0,arr_$1),T_$9))) == (((0 <= $index_within(q_$0,arr_$1)) && ($index_within(q_$0,arr_$1) <= (sz_$10 - 1))) && $set_in(q_$0,$full_extent($idx(arr_$1,$index_within(q_$0,arr_$1),T_$9)))) ));
	assume (forall  sz_$11 : Integer, T_$10 : $ctype, arr_$2 : $ptr, q_$1 : $ptr, S_$53 : $state :: ( ($in_range(0,$index_within(q_$1,arr_$2),sz_$11 - 1) && $in_extent_of(S_$53,q_$1,$idx(arr_$2,$index_within(q_$1,arr_$2),T_$10))) == (((0 <= $index_within(q_$1,arr_$2)) && ($index_within(q_$1,arr_$2) <= (sz_$11 - 1))) && $set_in(q_$1,$extent(S_$53,$idx(arr_$2,$index_within(q_$1,arr_$2),T_$10)))) ));
	assume (forall  s1_$8 : $state, s2_$8 : $state, p_$132 : $ptr, t_$31 : $ctype, sz_$34 : Integer :: {$state_spans_the_same(s1_$8,s2_$8,p_$132,$array(t_$31,sz_$34)),$is_primitive(t_$31)} ( $is_primitive(t_$31) ==> ($state_spans_the_same(s1_$8,s2_$8,p_$132,$array(t_$31,sz_$34)) ==> ((forall  i_$24 : Integer :: {$select.mem($memory(s2_$8),$idx($ptr(t_$31,$ref(p_$132)),i_$24,t_$31))} ( ((0 <= i_$24) && (i_$24 < sz_$34)) ==> ($mem(s1_$8,$idx($ptr(t_$31,$ref(p_$132)),i_$24,t_$31)) == $mem(s2_$8,$idx($ptr(t_$31,$ref(p_$132)),i_$24,t_$31))) )))) ));
	assume (forall  max : Integer, val : Integer, min : Integer :: ( ((min <= val) && (val <= max)) == ((min <= val) && (val <= max)) ));
	assume (forall  v : Boolean :: ( (if v then 1 else 0) == (if v then 1 else 0) ));
	assume (forall  x_$1 : Integer :: ( (!(x_$1 == 0)) == (!(x_$1 == 0)) ));
	assume $min.i1 == (0 - 128);
	assume $max.i1 == 127;
	assume $min.i2 == (0 - 32768);
	assume $max.i2 == 32767;
	assume $min.i4 == (0 - (65536 * 32768));
	assume $max.i4 == ((65536 * 32768) - 1);
	assume $min.i8 == (0 - (((65536 * 65536) * 65536) * 32768));
	assume $max.i8 == ((((65536 * 65536) * 65536) * 32768) - 1);
	assume $max.u1 == 255;
	assume $max.u2 == 65535;
	assume $max.u4 == ((65536 * 65536) - 1);
	assume $max.u8 == ((((65536 * 65536) * 65536) * 65536) - 1);
	assume (forall  x_$2 : Integer :: ( $in_range($min.i1,x_$2,$max.i1) == (($min.i1 <= x_$2) && (x_$2 <= $max.i1)) ));
	assume (forall  x_$3 : Integer :: ( $in_range($min.i2,x_$3,$max.i2) == (($min.i2 <= x_$3) && (x_$3 <= $max.i2)) ));
	assume (forall  x_$4 : Integer :: ( $in_range($min.i4,x_$4,$max.i4) == (($min.i4 <= x_$4) && (x_$4 <= $max.i4)) ));
	assume (forall  x_$5 : Integer :: ( $in_range($min.i8,x_$5,$max.i8) == (($min.i8 <= x_$5) && (x_$5 <= $max.i8)) ));
	assume (forall  x_$6 : Integer :: ( $in_range(0,x_$6,$max.u1) == ((0 <= x_$6) && (x_$6 <= $max.u1)) ));
	assume (forall  x_$7 : Integer :: ( $in_range(0,x_$7,$max.u2) == ((0 <= x_$7) && (x_$7 <= $max.u2)) ));
	assume (forall  x_$8 : Integer :: ( $in_range(0,x_$8,$max.u4) == ((0 <= x_$8) && (x_$8 <= $max.u4)) ));
	assume (forall  x_$9 : Integer :: ( $in_range(0,x_$9,$max.u8) == ((0 <= x_$9) && (x_$9 <= $max.u8)) ));
	assume (forall  y_$1 : Integer, x_$10 : Integer :: ( ((!(y_$1 == (0 - 1))) || (!(x_$10 == $min.i1))) == ((!(y_$1 == (0 - 1))) || (!(x_$10 == $min.i1))) ));
	assume (forall  y_$2 : Integer, x_$11 : Integer :: ( ((!(y_$2 == (0 - 1))) || (!(x_$11 == $min.i2))) == ((!(y_$2 == (0 - 1))) || (!(x_$11 == $min.i2))) ));
	assume (forall  y_$3 : Integer, x_$12 : Integer :: ( ((!(y_$3 == (0 - 1))) || (!(x_$12 == $min.i4))) == ((!(y_$3 == (0 - 1))) || (!(x_$12 == $min.i4))) ));
	assume (forall  y_$4 : Integer, x_$13 : Integer :: ( ((!(y_$4 == (0 - 1))) || (!(x_$13 == $min.i8))) == ((!(y_$4 == (0 - 1))) || (!(x_$13 == $min.i8))) ));
	assume $ptr_to_u8($null) == 0;
	assume $ptr_to_i8($null) == 0;
	assume $ptr_to_u4($null) == 0;
	assume $ptr_to_i4($null) == 0;
	assume $ptr_to_u2($null) == 0;
	assume $ptr_to_i2($null) == 0;
	assume $ptr_to_u1($null) == 0;
	assume $ptr_to_i1($null) == 0;
	assume (forall  x_$14 : Integer :: ( $ptr(^^void,x_$14) == $ptr(^^void,x_$14) ));
	assume (forall  x_$15 : Integer :: ( $ptr(^^void,x_$15) == $ptr(^^void,x_$15) ));
	assume (forall  x_$16 : Integer :: ( $ptr(^^void,x_$16) == $ptr(^^void,x_$16) ));
	assume (forall  x_$17 : Integer :: ( $ptr(^^void,x_$17) == $ptr(^^void,x_$17) ));
	assume (forall  x_$18 : Integer :: ( $ptr(^^void,x_$18) == $ptr(^^void,x_$18) ));
	assume (forall  x_$19 : Integer :: ( $ptr(^^void,x_$19) == $ptr(^^void,x_$19) ));
	assume (forall  x_$20 : Integer :: ( $ptr(^^void,x_$20) == $ptr(^^void,x_$20) ));
	assume (forall  x_$21 : Integer :: ( $ptr(^^void,x_$21) == $ptr(^^void,x_$21) ));
	assume (forall  p_$133 : $ptr :: {$ptr_to_u8(p_$133)} ( $in_range(0,$ref(p_$133),$max.u8) ==> ($ptr_to_u8(p_$133) == $ref(p_$133)) ));
	assume (forall  p_$134 : $ptr :: {$ptr_to_i8(p_$134)} ( $in_range($min.i8,$ref(p_$134),$max.i8) ==> ($ptr_to_i8(p_$134) == $ref(p_$134)) ));
	assume (forall  p_$135 : $ptr :: {$ptr_to_u4(p_$135)} ( $in_range(0,$ref(p_$135),$max.u4) ==> ($ptr_to_u4(p_$135) == $ref(p_$135)) ));
	assume (forall  p_$136 : $ptr :: {$ptr_to_i4(p_$136)} ( $in_range($min.i4,$ref(p_$136),$max.i4) ==> ($ptr_to_i4(p_$136) == $ref(p_$136)) ));
	assume (forall  p_$137 : $ptr :: {$ptr_to_u2(p_$137)} ( $in_range(0,$ref(p_$137),$max.u2) ==> ($ptr_to_u2(p_$137) == $ref(p_$137)) ));
	assume (forall  p_$138 : $ptr :: {$ptr_to_i2(p_$138)} ( $in_range($min.i2,$ref(p_$138),$max.i2) ==> ($ptr_to_i2(p_$138) == $ref(p_$138)) ));
	assume (forall  p_$139 : $ptr :: {$ptr_to_u1(p_$139)} ( $in_range(0,$ref(p_$139),$max.u1) ==> ($ptr_to_u1(p_$139) == $ref(p_$139)) ));
	assume (forall  p_$140 : $ptr :: {$ptr_to_i1(p_$140)} ( $in_range($min.i1,$ref(p_$140),$max.i1) ==> ($ptr_to_i1(p_$140) == $ref(p_$140)) ));
	assume (forall  S_$125 : $state, r_$21 : Integer, t_$32 : $ctype :: {$select.mem($memory(S_$125),$ptr($as_in_range_t(t_$32),r_$21))} ( $good_state(S_$125) ==> $in_range_t(t_$32,$select.mem($memory(S_$125),$ptr($as_in_range_t(t_$32),r_$21))) ));
	assume (forall  S_$126 : $state, r_$22 : Integer, t_$33 : $ctype :: {$select.mem($memory(S_$126),$ptr($ptr_to(t_$33),r_$22))} ( $good_state(S_$126) ==> $in_range_phys_ptr($select.mem($memory(S_$126),$ptr($ptr_to(t_$33),r_$22))) ));
	assume (forall  S_$127 : $state, r_$23 : Integer, t_$34 : $ctype :: {$select.mem($memory(S_$127),$ptr($spec_ptr_to(t_$34),r_$23))} ( $good_state(S_$127) ==> $in_range_spec_ptr($select.mem($memory(S_$127),$ptr($spec_ptr_to(t_$34),r_$23))) ));
	assume ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((($_pow2(0) == 1) && ($_pow2(1) == 2)) && ($_pow2(2) == 4)) && ($_pow2(3) == 8)) && ($_pow2(4) == 16)) && ($_pow2(5) == 32)) && ($_pow2(6) == 64)) && ($_pow2(7) == 128)) && ($_pow2(8) == 256)) && ($_pow2(9) == 512)) && ($_pow2(10) == 1024)) && ($_pow2(11) == 2048)) && ($_pow2(12) == 4096)) && ($_pow2(13) == 8192)) && ($_pow2(14) == 16384)) && ($_pow2(15) == 32768)) && ($_pow2(16) == 65536)) && ($_pow2(17) == 131072)) && ($_pow2(18) == 262144)) && ($_pow2(19) == 524288)) && ($_pow2(20) == 1048576)) && ($_pow2(21) == 2097152)) && ($_pow2(22) == 4194304)) && ($_pow2(23) == 8388608)) && ($_pow2(24) == 16777216)) && ($_pow2(25) == 33554432)) && ($_pow2(26) == 67108864)) && ($_pow2(27) == 134217728)) && ($_pow2(28) == 268435456)) && ($_pow2(29) == 536870912)) && ($_pow2(30) == 1073741824)) && ($_pow2(31) == 2147483648)) && ($_pow2(32) == 4294967296)) && ($_pow2(33) == 8589934592)) && ($_pow2(34) == 17179869184)) && ($_pow2(35) == 34359738368)) && ($_pow2(36) == 68719476736)) && ($_pow2(37) == 137438953472)) && ($_pow2(38) == 274877906944)) && ($_pow2(39) == 549755813888)) && ($_pow2(40) == 1099511627776)) && ($_pow2(41) == 2199023255552)) && ($_pow2(42) == 4398046511104)) && ($_pow2(43) == 8796093022208)) && ($_pow2(44) == 17592186044416)) && ($_pow2(45) == 35184372088832)) && ($_pow2(46) == 70368744177664)) && ($_pow2(47) == 140737488355328)) && ($_pow2(48) == 281474976710656)) && ($_pow2(49) == 562949953421312)) && ($_pow2(50) == 1125899906842624)) && ($_pow2(51) == 2251799813685248)) && ($_pow2(52) == 4503599627370496)) && ($_pow2(53) == 9007199254740992)) && ($_pow2(54) == 18014398509481984)) && ($_pow2(55) == 36028797018963968)) && ($_pow2(56) == 72057594037927936)) && ($_pow2(57) == 144115188075855872)) && ($_pow2(58) == 288230376151711744)) && ($_pow2(59) == 576460752303423488)) && ($_pow2(60) == 1152921504606846976)) && ($_pow2(61) == 2305843009213693952)) && ($_pow2(62) == 4611686018427387904)) && ($_pow2(63) == 9223372036854775808);
	assume (forall  bits : Integer, v_$3 : Integer :: {$in_range_ubits(bits,v_$3)} ( $in_range_ubits(bits,v_$3) <==> ((0 <= v_$3) && (v_$3 <= ($_pow2(bits) - 1))) ));
	assume (forall  bits_$0 : Integer, v_$4 : Integer :: {$unchecked_sbits(bits_$0,v_$4)} ( $in_range_sbits(bits_$0,$unchecked_sbits(bits_$0,v_$4)) && ($in_range_sbits(bits_$0,v_$4) ==> ($unchecked_sbits(bits_$0,v_$4) == v_$4)) ));
	assume (forall  bits_$1 : Integer, v_$5 : Integer :: {$in_range_sbits(bits_$1,v_$5)} ( $in_range_sbits(bits_$1,v_$5) <==> (((0 - $_pow2(bits_$1 - 1)) <= v_$5) && (v_$5 <= ($_pow2(bits_$1 - 1) - 1))) ));
	assume (forall  bits_$2 : Integer, v_$6 : Integer :: {$unchecked_ubits(bits_$2,v_$6)} ( $in_range_ubits(bits_$2,$unchecked_ubits(bits_$2,v_$6)) && ($in_range_ubits(bits_$2,v_$6) ==> ($unchecked_ubits(bits_$2,v_$6) == v_$6)) ));
	assume (forall  t_$35 : $ctype, x_$26 : Integer, y_$8 : Integer :: {$unchk_add(t_$35,x_$26,y_$8)} {:weight  0}( $unchk_add(t_$35,x_$26,y_$8) == $unchecked(t_$35,x_$26 + y_$8) ));
	assume (forall  y_$5 : Integer, x_$22 : Integer, t_$8 : $ctype :: ( $unchecked(t_$8,x_$22 div y_$5) == $unchecked(t_$8,x_$22 div y_$5) ));
	assume (forall  y_$6 : Integer, x_$23 : Integer, t_$9 : $ctype :: ( $unchecked(t_$9,x_$23 mod y_$6) == $unchecked(t_$9,x_$23 mod y_$6) ));
	assume (forall  x_$29 : Integer, y_$11 : Integer :: {$unchk_add(^^u8,x_$29,y_$11)} ( (($in_range(0,x_$29,$max.u8) && $in_range(0,y_$11,$max.u8)) && ((x_$29 + y_$11) > $max.u8)) ==> ($unchk_add(^^u8,x_$29,y_$11) == (((x_$29 + y_$11) - $max.u8) - 1)) ));
	assume (forall  x_$30 : Integer, y_$12 : Integer :: {$unchk_add(^^u4,x_$30,y_$12)} ( (($in_range(0,x_$30,$max.u4) && $in_range(0,y_$12,$max.u4)) && ((x_$30 + y_$12) > $max.u8)) ==> ($unchk_add(^^u4,x_$30,y_$12) == (((x_$30 + y_$12) - $max.u4) - 1)) ));
	assume (forall  x_$33 : Integer, from_$0 : Integer, to_$0 : Integer, xs : Integer, val_$0 : Integer :: {$bv_update(x_$33,xs,from_$0,to_$0,val_$0)} ( (((0 <= from_$0) && (from_$0 < to_$0)) && (to_$0 <= xs)) ==> (((0 <= val_$0) && (val_$0 < $_pow2(to_$0 - from_$0))) ==> ((0 <= $bv_update(x_$33,xs,from_$0,to_$0,val_$0)) && ($bv_update(x_$33,xs,from_$0,to_$0,val_$0) < $_pow2(xs)))) ));
	assume (forall  from_$1 : Integer, to_$1 : Integer, xs_$0 : Integer :: {$bv_update(0,xs_$0,from_$1,to_$1,0)} ( (((0 <= from_$1) && (from_$1 < to_$1)) && (to_$1 <= xs_$0)) ==> ($bv_update(0,xs_$0,from_$1,to_$1,0) == 0) ));
	assume (forall  from_$2 : Integer, to_$2 : Integer, val_$1 : Integer, x_$34 : Integer, xs_$1 : Integer :: {$bv_extract_signed($bv_update(x_$34,xs_$1,from_$2,to_$2,val_$1),xs_$1,from_$2,to_$2)} ( (((0 <= from_$2) && (from_$2 < to_$2)) && (to_$2 <= xs_$1)) ==> ((((0 - $_pow2((to_$2 - from_$2) - 1)) <= val_$1) && (val_$1 < $_pow2((to_$2 - from_$2) - 1))) ==> ($bv_extract_signed($bv_update(x_$34,xs_$1,from_$2,to_$2,val_$1),xs_$1,from_$2,to_$2) == val_$1)) ));
	assume (forall  from_$3 : Integer, to_$3 : Integer, val_$2 : Integer, x_$35 : Integer, xs_$2 : Integer :: {$bv_extract_unsigned($bv_update(x_$35,xs_$2,from_$3,to_$3,val_$2),xs_$2,from_$3,to_$3)} ( (((0 <= from_$3) && (from_$3 < to_$3)) && (to_$3 <= xs_$2)) ==> (((0 <= val_$2) && (val_$2 < $_pow2(to_$3 - from_$3))) ==> ($bv_extract_unsigned($bv_update(x_$35,xs_$2,from_$3,to_$3,val_$2),xs_$2,from_$3,to_$3) == val_$2)) ));
	assume (forall  from_$4 : Integer, to_$4 : Integer, x_$36 : Integer, xs_$3 : Integer :: {$bv_extract_signed(x_$36,xs_$3,from_$4,to_$4)} ( (((0 <= from_$4) && (from_$4 < to_$4)) && (to_$4 <= xs_$3)) ==> (((0 - $_pow2((to_$4 - from_$4) - 1)) <= $bv_extract_signed(x_$36,xs_$3,from_$4,to_$4)) && ($bv_extract_signed(x_$36,xs_$3,from_$4,to_$4) <= ($_pow2((to_$4 - from_$4) - 1) - 1))) ));
	assume (forall  from_$5 : Integer, to_$5 : Integer, x_$37 : Integer, xs_$4 : Integer :: {$bv_extract_unsigned(x_$37,xs_$4,from_$5,to_$5)} ( (((0 <= from_$5) && (from_$5 < to_$5)) && (to_$5 <= xs_$4)) ==> ((0 <= $bv_extract_unsigned(x_$37,xs_$4,from_$5,to_$5)) && ($bv_extract_unsigned(x_$37,xs_$4,from_$5,to_$5) <= ($_pow2(to_$5 - from_$5) - 1))) ));
	assume (forall  from_$6 : Integer, to_$6 : Integer, val_$3 : Integer, x_$38 : Integer, xs_$5 : Integer, from2 : Integer, to2 : Integer :: {$bv_extract_signed($bv_update(x_$38,xs_$5,from_$6,to_$6,val_$3),xs_$5,from2,to2)} ( (((0 <= from_$6) && (from_$6 < to_$6)) && (to_$6 <= xs_$5)) ==> ((((0 <= from2) && (from2 < to2)) && (to2 <= xs_$5)) ==> (((to2 <= from_$6) || (to_$6 <= from2)) ==> ($bv_extract_signed($bv_update(x_$38,xs_$5,from_$6,to_$6,val_$3),xs_$5,from2,to2) == $bv_extract_signed(x_$38,xs_$5,from2,to2)))) ));
	assume (forall  from_$7 : Integer, to_$7 : Integer, val_$4 : Integer, x_$39 : Integer, xs_$6 : Integer, from2_$0 : Integer, to2_$0 : Integer :: {$bv_extract_unsigned($bv_update(x_$39,xs_$6,from_$7,to_$7,val_$4),xs_$6,from2_$0,to2_$0)} ( (((0 <= from_$7) && (from_$7 < to_$7)) && (to_$7 <= xs_$6)) ==> ((((0 <= from2_$0) && (from2_$0 < to2_$0)) && (to2_$0 <= xs_$6)) ==> (((to2_$0 <= from_$7) || (to_$7 <= from2_$0)) ==> ($bv_extract_unsigned($bv_update(x_$39,xs_$6,from_$7,to_$7,val_$4),xs_$6,from2_$0,to2_$0) == $bv_extract_unsigned(x_$39,xs_$6,from2_$0,to2_$0)))) ));
	assume (forall  from_$8 : Integer, to_$8 : Integer, xs_$7 : Integer :: {$bv_extract_signed(0,xs_$7,from_$8,to_$8)} ( (((0 <= from_$8) && (from_$8 < to_$8)) && (to_$8 <= xs_$7)) ==> ($bv_extract_signed(0,xs_$7,from_$8,to_$8) == 0) ));
	assume (forall  from_$9 : Integer, to_$9 : Integer, xs_$8 : Integer :: {$bv_extract_unsigned(0,xs_$8,from_$9,to_$9)} ( (((0 <= from_$9) && (from_$9 < to_$9)) && (to_$9 <= xs_$8)) ==> ($bv_extract_unsigned(0,xs_$8,from_$9,to_$9) == 0) ));
	assume (forall  from_$10 : Integer, to_$10 : Integer, val_$5 : Integer, xs_$9 : Integer :: {$bv_extract_unsigned(val_$5,xs_$9,from_$10,to_$10)} ( ((((0 <= from_$10) && (from_$10 < to_$10)) && (to_$10 <= xs_$9)) && (0 <= val_$5)) ==> ($bv_extract_unsigned(val_$5,xs_$9,from_$10,to_$10) == ((val_$5 div $_pow2(from_$10)) mod $_pow2(to_$10 - from_$10))) ));
	assume (forall  from_$11 : Integer, to_$11 : Integer, val_$6 : Integer, xs_$10 : Integer :: {$bv_extract_signed(val_$6,xs_$10,from_$11,to_$11)} ( (((((0 <= from_$11) && (from_$11 < to_$11)) && (to_$11 <= xs_$10)) && (0 <= val_$6)) && (((val_$6 div $_pow2(from_$11)) mod $_pow2(to_$11 - from_$11)) < $_pow2((to_$11 - from_$11) - 1))) ==> ($bv_extract_signed(val_$6,xs_$10,from_$11,to_$11) == ((val_$6 div $_pow2(from_$11)) mod $_pow2(to_$11 - from_$11))) ));
	assume (forall  from_$12 : Integer, to_$12 : Integer, val_$7 : Integer, xs_$11 : Integer :: {$bv_extract_signed(val_$7,xs_$11,from_$12,to_$12)} ( (((((0 <= from_$12) && (from_$12 < to_$12)) && (to_$12 <= xs_$11)) && (0 <= val_$7)) && (((val_$7 div $_pow2(from_$12)) mod $_pow2(to_$12 - from_$12)) >= $_pow2((to_$12 - from_$12) - 1))) ==> ($bv_extract_signed(val_$7,xs_$11,from_$12,to_$12) == ($_pow2((to_$12 - from_$12) - 1) - ((val_$7 div $_pow2(from_$12)) mod $_pow2(to_$12 - from_$12)))) ));
	assume (forall  val_$8 : Integer :: {$in_range_t(^^i1,val_$8)} ( $in_range_t(^^i1,val_$8) <==> $in_range($min.i1,val_$8,$max.i1) ));
	assume (forall  val_$9 : Integer :: {$in_range_t(^^i2,val_$9)} ( $in_range_t(^^i2,val_$9) <==> $in_range($min.i2,val_$9,$max.i2) ));
	assume (forall  val_$10 : Integer :: {$in_range_t(^^i4,val_$10)} ( $in_range_t(^^i4,val_$10) <==> $in_range($min.i4,val_$10,$max.i4) ));
	assume (forall  val_$11 : Integer :: {$in_range_t(^^i8,val_$11)} ( $in_range_t(^^i8,val_$11) <==> $in_range($min.i8,val_$11,$max.i8) ));
	assume (forall  val_$12 : Integer :: {$in_range_t(^^u1,val_$12)} ( $in_range_t(^^u1,val_$12) <==> $in_range(0,val_$12,$max.u1) ));
	assume (forall  val_$13 : Integer :: {$in_range_t(^^u2,val_$13)} ( $in_range_t(^^u2,val_$13) <==> $in_range(0,val_$13,$max.u2) ));
	assume (forall  val_$14 : Integer :: {$in_range_t(^^u4,val_$14)} ( $in_range_t(^^u4,val_$14) <==> $in_range(0,val_$14,$max.u4) ));
	assume (forall  val_$15 : Integer :: {$in_range_t(^^u8,val_$15)} ( $in_range_t(^^u8,val_$15) <==> $in_range(0,val_$15,$max.u8) ));
	assume (forall  val_$16 : Integer :: {$in_range_t(^^mathint,val_$16)} ( $in_range_t(^^mathint,val_$16) ));
	assume (forall  t_$39 : $ctype, val_$17 : Integer :: {$unchecked(t_$39,val_$17)} ( $in_range_t(t_$39,val_$17) ==> ($unchecked(t_$39,val_$17) == val_$17) ));
	assume (forall  t_$40 : $ctype, val_$18 : Integer :: {$unchecked(t_$40,val_$18)} ( $in_range_t(t_$40,$unchecked(t_$40,val_$18)) ));
	assume (forall  val_$19 : Integer :: {$unchecked(^^u1,$unchecked(^^i1,val_$19))} ( $in_range(0,val_$19,$max.u1) ==> ($unchecked(^^u1,$unchecked(^^i1,val_$19)) == val_$19) ));
	assume (forall  val_$20 : Integer :: {$unchecked(^^u2,$unchecked(^^i2,val_$20))} ( $in_range(0,val_$20,$max.u2) ==> ($unchecked(^^u2,$unchecked(^^i2,val_$20)) == val_$20) ));
	assume (forall  val_$21 : Integer :: {$unchecked(^^u4,$unchecked(^^i4,val_$21))} ( $in_range(0,val_$21,$max.u4) ==> ($unchecked(^^u4,$unchecked(^^i4,val_$21)) == val_$21) ));
	assume (forall  val_$22 : Integer :: {$unchecked(^^u8,$unchecked(^^i8,val_$22))} ( $in_range(0,val_$22,$max.u8) ==> ($unchecked(^^u8,$unchecked(^^i8,val_$22)) == val_$22) ));
	assume (forall  val_$23 : Integer :: {$unchecked(^^i1,$unchecked(^^u1,val_$23))} ( $in_range($min.i1,val_$23,$max.i1) ==> ($unchecked(^^i1,$unchecked(^^u1,val_$23)) == val_$23) ));
	assume (forall  val_$24 : Integer :: {$unchecked(^^i2,$unchecked(^^u2,val_$24))} ( $in_range($min.i2,val_$24,$max.i2) ==> ($unchecked(^^i2,$unchecked(^^u2,val_$24)) == val_$24) ));
	assume (forall  val_$25 : Integer :: {$unchecked(^^i4,$unchecked(^^u4,val_$25))} ( $in_range($min.i4,val_$25,$max.i4) ==> ($unchecked(^^i4,$unchecked(^^u4,val_$25)) == val_$25) ));
	assume (forall  val_$26 : Integer :: {$unchecked(^^i8,$unchecked(^^u8,val_$26))} ( $in_range($min.i8,val_$26,$max.i8) ==> ($unchecked(^^i8,$unchecked(^^u8,val_$26)) == val_$26) ));
	assume $unchecked(^^u4,0 - 1) == $max.u4;
	assume $unchecked(^^u4,$max.u4 + 1) == 0;
	assume $unchecked(^^u8,0 - 1) == $max.u8;
	assume $unchecked(^^u8,$max.u8 + 1) == 0;
	assume (forall  t_$41 : $ctype, x_$40 : Integer, y_$15 : Integer, z_$0 : Integer :: {x_$40 mod $_pow2(y_$15),$_and(t_$41,x_$40,z_$0)} ( (($in_range_t(t_$41,x_$40) && $in_range_t(t_$41,$_pow2(y_$15) - 1)) && (x_$40 >= 0)) ==> ((x_$40 mod $_pow2(y_$15)) == $_and(t_$41,x_$40,$_pow2(y_$15) - 1)) ));
	assume (forall  i_$25 : Integer, j_$0 : Integer :: {i_$25 div j_$0} ( ((0 <= i_$25) && (0 < j_$0)) ==> ((i_$25 div j_$0) <= i_$25) ));
	assume (forall  i_$26 : Integer, j_$1 : Integer :: {i_$26 div j_$1} ( ((i_$26 > 0) && (j_$1 > 0)) ==> (((i_$26 - j_$1) < ((i_$26 div j_$1) * j_$1)) && (((i_$26 div j_$1) * j_$1) <= i_$26)) ));
	assume (forall  i_$27 : Integer :: {i_$27 div i_$27} ( (!(i_$27 == 0)) ==> ((i_$27 div i_$27) == 1) ));
	assume (forall  i_$28 : Integer :: {0 div i_$28} ( (!(i_$28 == 0)) ==> ((0 div i_$28) == 0) ));
	assume (forall  x_$41 : Integer, y_$16 : Integer :: {x_$41 mod y_$16} {x_$41 div y_$16} ( (x_$41 mod y_$16) == (x_$41 - ((x_$41 div y_$16) * y_$16)) ));
	assume (forall  x_$42 : Integer, y_$17 : Integer :: {x_$42 mod y_$17} ( ((0 <= x_$42) && (0 < y_$17)) ==> ((0 <= (x_$42 mod y_$17)) && ((x_$42 mod y_$17) < y_$17)) ));
	assume (forall  x_$43 : Integer, y_$18 : Integer :: {x_$43 mod y_$18} ( ((0 <= x_$43) && (y_$18 < 0)) ==> ((0 <= (x_$43 mod y_$18)) && ((x_$43 mod y_$18) < (0 - y_$18))) ));
	assume (forall  x_$44 : Integer, y_$19 : Integer :: {x_$44 mod y_$19} ( ((x_$44 <= 0) && (0 < y_$19)) ==> (((0 - y_$19) < (x_$44 mod y_$19)) && ((x_$44 mod y_$19) <= 0)) ));
	assume (forall  x_$45 : Integer, y_$20 : Integer :: {x_$45 mod y_$20} ( ((x_$45 <= 0) && (y_$20 < 0)) ==> ((y_$20 < (x_$45 mod y_$20)) && ((x_$45 mod y_$20) <= 0)) ));
	assume (forall  t_$42 : $ctype, x_$46 : Integer, y_$21 : Integer :: {$_and(t_$42,x_$46,y_$21)} ( ((0 <= x_$46) && $in_range_t(t_$42,x_$46)) ==> ((0 <= $_and(t_$42,x_$46,y_$21)) && ($_and(t_$42,x_$46,y_$21) <= x_$46)) ));
	assume (forall  t_$43 : $ctype, x_$47 : Integer, y_$22 : Integer :: {$_and(t_$43,x_$47,y_$22)} ( ((((0 <= x_$47) && (0 <= y_$22)) && $in_range_t(t_$43,x_$47)) && $in_range_t(t_$43,y_$22)) ==> (($_and(t_$43,x_$47,y_$22) <= x_$47) && ($_and(t_$43,x_$47,y_$22) <= y_$22)) ));
	assume (forall  t_$44 : $ctype, x_$48 : Integer, y_$23 : Integer :: {$_or(t_$44,x_$48,y_$23)} ( ((((0 <= x_$48) && (0 <= y_$23)) && $in_range_t(t_$44,x_$48)) && $in_range_t(t_$44,y_$23)) ==> ((0 <= $_or(t_$44,x_$48,y_$23)) && ($_or(t_$44,x_$48,y_$23) <= (x_$48 + y_$23))) ));
	assume (forall  t_$45 : $ctype, x_$49 : Integer, y_$24 : Integer :: {$_or(t_$45,x_$49,y_$24)} ( ((((0 <= x_$49) && (0 <= y_$24)) && $in_range_t(t_$45,x_$49)) && $in_range_t(t_$45,y_$24)) ==> ((x_$49 <= $_or(t_$45,x_$49,y_$24)) && (y_$24 <= $_or(t_$45,x_$49,y_$24))) ));
	assume (forall  t_$46 : $ctype, x_$50 : Integer, y_$25 : Integer, z_$1 : Integer :: {$_or(t_$46,x_$50,y_$25),$_pow2(z_$1)} ( ((((((((0 <= x_$50) && (0 <= y_$25)) && (0 <= z_$1)) && (z_$1 < 64)) && (x_$50 < $_pow2(z_$1))) && (y_$25 < $_pow2(z_$1))) && $in_range_t(t_$46,x_$50)) && $in_range_t(t_$46,y_$25)) ==> ($_or(t_$46,x_$50,y_$25) < $_pow2(z_$1)) ));
	assume (forall  t_$47 : $ctype, x_$51 : Integer, y_$26 : Integer :: {$_or(t_$47,x_$51,y_$26)} ( ($in_range(0,x_$51,$max.u1) && $in_range(0,y_$26,$max.u1)) ==> $in_range(0,$_or(t_$47,x_$51,y_$26),$max.u1) ));
	assume (forall  t_$48 : $ctype, x_$52 : Integer, y_$27 : Integer :: {$_or(t_$48,x_$52,y_$27)} ( ($in_range(0,x_$52,$max.u2) && $in_range(0,y_$27,$max.u2)) ==> $in_range(0,$_or(t_$48,x_$52,y_$27),$max.u2) ));
	assume (forall  t_$49 : $ctype, x_$53 : Integer, y_$28 : Integer :: {$_or(t_$49,x_$53,y_$28)} ( ($in_range(0,x_$53,$max.u4) && $in_range(0,y_$28,$max.u4)) ==> $in_range(0,$_or(t_$49,x_$53,y_$28),$max.u4) ));
	assume (forall  t_$50 : $ctype, x_$54 : Integer, y_$29 : Integer :: {$_or(t_$50,x_$54,y_$29)} ( ($in_range(0,x_$54,$max.u8) && $in_range(0,y_$29,$max.u8)) ==> $in_range(0,$_or(t_$50,x_$54,y_$29),$max.u8) ));
	assume (forall  t_$51 : $ctype, x_$55 : Integer, y_$30 : Integer :: {$_and(t_$51,x_$55,y_$30)} ( ($in_range(0,x_$55,$max.u1) && $in_range(0,y_$30,$max.u1)) ==> $in_range(0,$_and(t_$51,x_$55,y_$30),$max.u1) ));
	assume (forall  t_$52 : $ctype, x_$56 : Integer, y_$31 : Integer :: {$_and(t_$52,x_$56,y_$31)} ( ($in_range(0,x_$56,$max.u2) && $in_range(0,y_$31,$max.u2)) ==> $in_range(0,$_and(t_$52,x_$56,y_$31),$max.u2) ));
	assume (forall  t_$53 : $ctype, x_$57 : Integer, y_$32 : Integer :: {$_and(t_$53,x_$57,y_$32)} ( ($in_range(0,x_$57,$max.u4) && $in_range(0,y_$32,$max.u4)) ==> $in_range(0,$_and(t_$53,x_$57,y_$32),$max.u4) ));
	assume (forall  t_$54 : $ctype, x_$58 : Integer, y_$33 : Integer :: {$_and(t_$54,x_$58,y_$33)} ( ($in_range(0,x_$58,$max.u8) && $in_range(0,y_$33,$max.u8)) ==> $in_range(0,$_and(t_$54,x_$58,y_$33),$max.u8) ));
	assume (forall  t_$55 : $ctype, x_$59 : Integer, y_$34 : Integer :: {$_xor(t_$55,x_$59,y_$34)} ( ($in_range(0,x_$59,$max.u1) && $in_range(0,y_$34,$max.u1)) ==> $in_range(0,$_xor(t_$55,x_$59,y_$34),$max.u1) ));
	assume (forall  t_$56 : $ctype, x_$60 : Integer, y_$35 : Integer :: {$_xor(t_$56,x_$60,y_$35)} ( ($in_range(0,x_$60,$max.u2) && $in_range(0,y_$35,$max.u2)) ==> $in_range(0,$_xor(t_$56,x_$60,y_$35),$max.u2) ));
	assume (forall  t_$57 : $ctype, x_$61 : Integer, y_$36 : Integer :: {$_xor(t_$57,x_$61,y_$36)} ( ($in_range(0,x_$61,$max.u4) && $in_range(0,y_$36,$max.u4)) ==> $in_range(0,$_xor(t_$57,x_$61,y_$36),$max.u4) ));
	assume (forall  t_$58 : $ctype, x_$62 : Integer, y_$37 : Integer :: {$_xor(t_$58,x_$62,y_$37)} ( ($in_range(0,x_$62,$max.u8) && $in_range(0,y_$37,$max.u8)) ==> $in_range(0,$_xor(t_$58,x_$62,y_$37),$max.u8) ));
	assume (forall  t_$59 : $ctype, x_$63 : Integer :: {$_not(t_$59,x_$63)} ( $in_range_t(t_$59,$_not(t_$59,x_$63)) ));
	assume (forall  t_$60 : $ctype, x_$64 : Integer :: {$_or(t_$60,x_$64,$_not(t_$60,x_$64))} ( $_or(t_$60,x_$64,$_not(t_$60,x_$64)) == $_not(t_$60,0) ));
	assume (forall  t_$61 : $ctype, x_$65 : Integer :: {$_and(t_$61,x_$65,$_not(t_$61,x_$65))} ( $_and(t_$61,x_$65,$_not(t_$61,x_$65)) == 0 ));
	assume (forall  t_$62 : $ctype, x_$66 : Integer :: {$_or(t_$62,x_$66,0)} ( $in_range_t(t_$62,x_$66) ==> ($_or(t_$62,x_$66,0) == x_$66) ));
	assume (forall  t_$63 : $ctype, x_$67 : Integer :: {$_or(t_$63,x_$67,$_not(t_$63,0))} ( $_or(t_$63,x_$67,$_not(t_$63,0)) == $_not(t_$63,0) ));
	assume (forall  t_$64 : $ctype, x_$68 : Integer :: {$_or(t_$64,x_$68,x_$68)} ( $in_range_t(t_$64,x_$68) ==> ($_or(t_$64,x_$68,x_$68) == x_$68) ));
	assume (forall  t_$65 : $ctype, x_$69 : Integer :: {$_and(t_$65,x_$69,0)} ( $_and(t_$65,x_$69,0) == 0 ));
	assume (forall  t_$66 : $ctype, x_$70 : Integer :: {$_and(t_$66,x_$70,$_not(t_$66,0))} ( $in_range_t(t_$66,x_$70) ==> ($_and(t_$66,x_$70,$_not(t_$66,0)) == x_$70) ));
	assume (forall  t_$67 : $ctype, x_$71 : Integer :: {$_and(t_$67,x_$71,x_$71)} ( $in_range_t(t_$67,x_$71) ==> ($_and(t_$67,x_$71,x_$71) == x_$71) ));
	assume (forall  t_$68 : $ctype, x_$72 : Integer, y_$38 : Integer :: {$_and(t_$68,$_or(t_$68,x_$72,y_$38),y_$38)} ( $_and(t_$68,$_or(t_$68,x_$72,y_$38),y_$38) == y_$38 ));
	assume (forall  t_$69 : $ctype, x_$73 : Integer, y_$39 : Integer :: {$_and(t_$69,$_or(t_$69,x_$73,y_$39),x_$73)} ( $_and(t_$69,$_or(t_$69,x_$73,y_$39),x_$73) == x_$73 ));
	assume (forall  t_$70 : $ctype, x_$74 : Integer :: {$_xor(t_$70,x_$74,0)} ( $in_range_t(t_$70,x_$74) ==> ($_xor(t_$70,x_$74,0) == x_$74) ));
	assume (forall  t_$71 : $ctype, x_$75 : Integer :: {$_xor(t_$71,x_$75,x_$75)} ( $_xor(t_$71,x_$75,x_$75) == 0 ));
	assume (forall  t_$72 : $ctype, x_$76 : Integer :: {$_xor(t_$72,x_$76,$_not(t_$72,0))} ( $_xor(t_$72,x_$76,$_not(t_$72,0)) == $_not(t_$72,x_$76) ));
	assume (forall  t_$73 : $ctype, x_$77 : Integer :: {$_not(t_$73,$_not(t_$73,x_$77))} ( $in_range_t(t_$73,x_$77) ==> ($_not(t_$73,$_not(t_$73,x_$77)) == x_$77) ));
	assume (forall  t_$74 : $ctype, x_$78 : Integer, y_$40 : Integer :: {$_or(t_$74,x_$78,y_$40)} ( $_or(t_$74,x_$78,y_$40) == $_or(t_$74,y_$40,x_$78) ));
	assume (forall  t_$75 : $ctype, x_$79 : Integer, y_$41 : Integer :: {$_xor(t_$75,x_$79,y_$41)} ( $_xor(t_$75,x_$79,y_$41) == $_xor(t_$75,y_$41,x_$79) ));
	assume (forall  t_$76 : $ctype, x_$80 : Integer, y_$42 : Integer :: {$_and(t_$76,x_$80,y_$42)} ( $_and(t_$76,x_$80,y_$42) == $_and(t_$76,y_$42,x_$80) ));
	assume (forall  id_$0 : Integer, length : Integer :: {$get_string_literal(id_$0,length)} ( $is($get_string_literal(id_$0,length),^^u1) ));
	assume (forall  id_$1 : Integer, length_$0 : Integer, S_$128 : $state :: {$typed(S_$128,$get_string_literal(id_$1,length_$0))} {$is_array(S_$128,$get_string_literal(id_$1,length_$0),^^u1,length_$0)} ( $good_state(S_$128) ==> ($typed(S_$128,$get_string_literal(id_$1,length_$0)) && ((forall  i_$1_$1 : Integer :: {$st(S_$128,$idx($get_string_literal(id_$1,length_$0),i_$1_$1,^^u1))} {$ts(S_$128,$idx($get_string_literal(id_$1,length_$0),i_$1_$1,^^u1))} ( ((0 <= i_$1_$1) && (i_$1_$1 < length_$0)) ==> $thread_local2(S_$128,$idx($get_string_literal(id_$1,length_$0),i_$1_$1,^^u1),^^u1) )))) ));
	assume (forall  no : Integer, t_$84 : $ctype :: {$get_fnptr(no,t_$84)} ( $get_fnptr(no,t_$84) == $ptr(t_$84,$get_fnptr_ref(no)) ));
	assume (forall  S_$129 : $state, no_$1 : Integer, t_$85 : $ctype :: {$select.tm($typemap(S_$129),$get_fnptr(no_$1,t_$85))} {$select.sm($statusmap(S_$129),$get_fnptr(no_$1,t_$85))} ( ($is_fnptr_type(t_$85) && $good_state(S_$129)) ==> $mutable(S_$129,$get_fnptr(no_$1,t_$85)) ));
	assume (forall  t_$86 : $ctype :: {$is_math_type(t_$86)} ( $is_math_type(t_$86) ==> $is_primitive(t_$86) ));
	assume (forall  t_$87 : $ctype :: {$is_fnptr_type(t_$87)} ( $is_fnptr_type(t_$87) ==> $is_primitive(t_$87) ));
	assume (forall  S_$130 : $state, c_$7 : $ptr :: {$full_stop(S_$130),$valid_claim(S_$130,c_$7)} ( ($full_stop(S_$130) && $closed(S_$130,c_$7)) ==> $valid_claim(S_$130,c_$7) ));
	assume (forall  S_$131 : $state, c_$8 : $ptr :: {$valid_claim(S_$131,c_$8)} ( $valid_claim(S_$131,c_$8) ==> ($closed(S_$131,c_$8) && $invok_state(S_$131)) ));
	assume (forall  tok : $token, c : $ptr, #s1_$3 : $state :: ( (($good_state_ext(tok,#s1_$3) && $closed_is_transitive(#s1_$3)) && true) == (($good_state_ext(tok,#s1_$3) && ((forall  #p_$10_$1 : $ptr, #q_$7 : $ptr :: {$set_in(#p_$10_$1,$owns(#s1_$3,#q_$7))} ( (($good_state(#s1_$3) && $set_in(#p_$10_$1,$owns(#s1_$3,#q_$7))) && $closed(#s1_$3,#q_$7)) ==> ($closed(#s1_$3,#p_$10_$1) && (!($ref(#p_$10_$1) == 0))) )))) && true) ));
	assume (forall  tok_$0 : $token, c_$0 : $ptr, #s2_$2 : $state, #s1_$4 : $state :: ( ((((((($full_stop_ext(tok_$0,#s1_$4) && $good_state_ext(tok_$0,#s2_$2)) && $closed_is_transitive(#s1_$4)) && $closed_is_transitive(#s2_$2)) && $forall_inv2_when_closed(#s1_$4,#s2_$2)) && $valid_claim(#s1_$4,c_$0)) && $closed(#s2_$2,c_$0)) && true) == (((((((($good_state_ext(tok_$0,#s1_$4) && $full_stop(#s1_$4)) && $good_state_ext(tok_$0,#s2_$2)) && ((forall  #p_$10_$2 : $ptr, #q_$8 : $ptr :: {$set_in(#p_$10_$2,$owns(#s1_$4,#q_$8))} ( (($good_state(#s1_$4) && $set_in(#p_$10_$2,$owns(#s1_$4,#q_$8))) && $closed(#s1_$4,#q_$8)) ==> ($closed(#s1_$4,#p_$10_$2) && (!($ref(#p_$10_$2) == 0))) )))) && ((forall  #p_$10_$3 : $ptr, #q_$9 : $ptr :: {$set_in(#p_$10_$3,$owns(#s2_$2,#q_$9))} ( (($good_state(#s2_$2) && $set_in(#p_$10_$3,$owns(#s2_$2,#q_$9))) && $closed(#s2_$2,#q_$9)) ==> ($closed(#s2_$2,#p_$10_$3) && (!($ref(#p_$10_$3) == 0))) )))) && ((forall  #p_$9_$1 : $ptr :: {$closed(#s1_$4,#p_$9_$1)} {$closed(#s2_$2,#p_$9_$1)} ( $inv2_when_closed(#s1_$4,#s2_$2,#p_$9_$1,$typ(#p_$9_$1)) )))) && $valid_claim(#s1_$4,c_$0)) && $closed(#s2_$2,c_$0)) && true) ));
	assume (forall  S1_$4 : $state, S0_$1 : $state :: ( ((forall  r_$25 : Integer :: {$closed(S1_$4,$ptr(^^claim,r_$25))} ( ($closed(S0_$1,$ptr(^^claim,r_$25)) && $closed(S1_$4,$ptr(^^claim,r_$25))) ==> $valid_claim(S1_$4,$ptr(^^claim,r_$25)) ))) == ((forall  r : Integer :: {$closed(S1_$4,$ptr(^^claim,r))} ( ($closed(S0_$1,$ptr(^^claim,r)) && $closed(S1_$4,$ptr(^^claim,r))) ==> $valid_claim(S1_$4,$ptr(^^claim,r)) ))) ));
	assume (forall  c1 : $ptr, c2 : $ptr :: {$claims_claim(c1,c2)} ( (($is(c1,^^claim) && $is(c2,^^claim)) && ((forall  S_$132 : $state :: ( $valid_claim(S_$132,c1) ==> $closed(S_$132,c2) )))) ==> $claims_claim(c1,c2) ));
	assume (forall  S_$133 : $state, c1_$0 : $ptr, c2_$0 : $ptr :: {$valid_claim(S_$133,c1_$0),$claims_claim(c1_$0,c2_$0)} ( ($valid_claim(S_$133,c1_$0) && $claims_claim(c1_$0,c2_$0)) ==> $valid_claim(S_$133,c2_$0) ));
	assume (forall  S_$134 : $state, c_$9 : $ptr, o_$0 : $ptr :: {$closed(S_$134,c_$9),$claims_obj(c_$9,o_$0)} ( $good_state(S_$134) ==> (($claims_obj(c_$9,o_$0) && $closed(S_$134,c_$9)) ==> (($instantiate_ptrset($owns(S_$134,o_$0)) && $closed(S_$134,o_$0)) && ($ref_cnt(S_$134,o_$0) > 0))) ));
	assume (forall  S_$135 : $state, c_$10 : $ptr, o_$1 : $ptr :: {$valid_claim(S_$135,c_$10),$claims_obj(c_$10,o_$1)} ( ($valid_claim(S_$135,c_$10) && $claims_obj(c_$10,o_$1)) ==> $inv2(S_$135,S_$135,o_$1,$typ(o_$1)) ));
	assume (forall  S_$136 : $state, c_$11 : $ptr, r_$24 : Integer :: {$valid_claim(S_$136,c_$11),$claims_obj(c_$11,$ptr(^^claim,r_$24))} ( ($valid_claim(S_$136,c_$11) && $claims_obj(c_$11,$ptr(^^claim,r_$24))) ==> $valid_claim(S_$136,$ptr(^^claim,r_$24)) ));
	assume (forall  s_$18 : $state, p_$142 : $ptr :: {$claimed_closed(s_$18,p_$142)} {:weight  0}( $claimed_closed(s_$18,p_$142) <==> $closed(s_$18,p_$142) ));
	assume (forall  S_$138 : $state, p_$143 : $ptr :: {$invok_state(S_$138),$claimed_closed(S_$138,p_$143)} ( ($invok_state(S_$138) && $claimed_closed(S_$138,p_$143)) ==> $inv2(S_$138,S_$138,p_$143,$typ(p_$143)) ));
	assume $no_claim == $ptr(^^claim,0);
	assume $is_claimable(^^claim);
	assume (forall  S_$140 : $state, c_$12 : $ptr, o_$3 : $ptr :: {$account_claim(S_$140,c_$12,o_$3)} ( $account_claim(S_$140,c_$12,o_$3) <==> (($good_state(S_$140) && $closed(S_$140,c_$12)) && $claims_obj(c_$12,o_$3)) ));
	assume (forall  S_$141 : $state, c_$13 : $ptr, o_$4 : $ptr :: {$account_claim(S_$141,c_$13,o_$4)} ( $account_claim(S_$141,c_$13,o_$4) ==> ((($claim_no(S_$141,o_$4,$claim_idx(o_$4,c_$13)) == c_$13) && (0 <= $claim_idx(o_$4,c_$13))) && ($claim_idx(o_$4,c_$13) < $ref_cnt(S_$141,o_$4))) ));
	assume (forall  s_$3 : $state :: ( ((forall  f_$8 : $pure_function :: {$frame_level(f_$8)} ( $frame_level(f_$8) < $current_frame_level ))) == ((forall  f_$8 : $pure_function :: {$frame_level(f_$8)} ( $frame_level(f_$8) < $current_frame_level ))) ));
	assume (forall  f_$9 : $pure_function :: ( ($frame_level(f_$9) < $current_frame_level) == ($frame_level(f_$9) < $current_frame_level) ));
	assume (forall  s_$4 : $state :: ( ((forall  f_$10 : $pure_function :: {$frame_level(f_$10)} ( $pure_post_level(f_$10) < $current_frame_level ))) == ((forall  f_$10 : $pure_function :: {$frame_level(f_$10)} ( $pure_post_level(f_$10) < $current_frame_level ))) ));
	assume (forall  f_$11 : $pure_function :: ( ($pure_post_level(f_$11) < $current_pure_post_level) == ($pure_post_level(f_$11) < $current_pure_post_level) ));
	assume (forall  p_$148 : $ptr :: ( $int_to_ptr($ptr_to_int(p_$148)) == p_$148 ));
	assume (forall  S1_$16 : $state, S2_$12 : $state, p_$151 : $ptr, W_$1 : $ptrset :: {$domain_updated_at(S1_$16,S2_$12,p_$151,W_$1)} ( $domain_updated_at(S1_$16,S2_$12,p_$151,W_$1) <==> (((forall  q_$18 : $ptr :: {$fetch_from_domain($read_version(S2_$12,p_$151),q_$18)} ( (($kind_of($typ(q_$18)) == $kind_primitive) && (!$set_in(q_$18,W_$1))) ==> ($fetch_from_domain($read_version(S1_$16,p_$151),q_$18) == $fetch_from_domain($read_version(S2_$12,p_$151),q_$18)) ))) && ($domain(S1_$16,p_$151) == $domain(S2_$12,p_$151))) ));
	assume $seclbl.top <==> true;
	assume $seclbl.bot <==> false;
	assume (forall  l2 : Boolean, l1 : Boolean :: ( (l1 ==> l2) == (l1 ==> l2) ));
	assume (forall  l2_$0 : Boolean, l1_$0 : Boolean :: ( (l1_$0 && l2_$0) == (l1_$0 && l2_$0) ));
	assume (forall  l2_$1 : Boolean, l1_$1 : Boolean :: ( (l1_$1 || l2_$1) == (l1_$1 || l2_$1) ));
	assume (forall  p_$152 : $ptr :: ( $lblset.top[p_$152] <==> $seclbl.top ));
	assume (forall  p_$153 : $ptr :: ( $lblset.bot[p_$153] <==> $seclbl.bot ));
	assume (forall  l2_$2 : $labelset, l1_$2 : $labelset :: ( ((forall  p_$52_$0 : $ptr :: ( $seclbl.leq(l1_$2[p_$52_$0],l2_$2[p_$52_$0]) ))) == ((forall  p_$52 : $ptr :: ( l1_$2[p_$52] ==> l2_$2[p_$52] ))) ));
	assume (forall  fd : $flowdata, l_$5 : $labelset :: {:weight  0}( $select.flow.label($store.flow.label(fd,l_$5)) == l_$5 ));
	assume (forall  fd_$0 : $flowdata, l_$6 : $labelset :: {:weight  0}( $select.flow.meta($store.flow.meta(fd_$0,l_$6)) == l_$6 ));
	assume (forall  fd_$1 : $flowdata, l_$7 : $labelset :: {:weight  0}( $select.flow.label($store.flow.meta(fd_$1,l_$7)) == $select.flow.label(fd_$1) ));
	assume (forall  fd_$2 : $flowdata, l_$8 : $labelset :: {:weight  0}( $select.flow.meta($store.flow.label(fd_$2,l_$8)) == $select.flow.meta(fd_$2) ));
	assume (forall  M : $memory_t, p_$156 : $ptr, q_$19 : $ptr, fd_$3 : $flowdata :: {:weight  0}( $set_in(q_$19,$full_extent(p_$156)) ==> ($select.flow.data($store.flow.data(M,p_$156,fd_$3),q_$19) == fd_$3) ));
	assume (forall  M_$0 : $memory_t, p_$157 : $ptr, q_$20 : $ptr, fd_$4 : $flowdata :: {:weight  0}( $set_in(q_$20,$full_extent(p_$157)) || ($select.flow.data($store.flow.data(M_$0,p_$157,fd_$4),q_$20) == $select.flow.data(M_$0,q_$20)) ));
	assume (forall  M_$1 : $map_t..$ptr_to..^^void.^^bool, p_$158 : $ptr, v_$7 : Boolean :: {:weight  0}( $select.$map_t..$ptr_to..^^void.^^bool($store.$map_t..$ptr_to..^^void.^^bool(M_$1,p_$158,v_$7),p_$158) <==> v_$7 ));
	assume (forall  M_$2 : $map_t..$ptr_to..^^void.^^bool, p_$159 : $ptr, v_$8 : Boolean, q_$21 : $ptr :: {:weight  0}( (!(p_$159 == q_$21)) ==> ($select.$map_t..$ptr_to..^^void.^^bool($store.$map_t..$ptr_to..^^void.^^bool(M_$2,q_$21,v_$8),p_$159) <==> $select.$map_t..$ptr_to..^^void.^^bool(M_$2,p_$159)) ));
	assume (forall  M1_$2 : $map_t..$ptr_to..^^void.^^bool, M2_$2 : $map_t..$ptr_to..^^void.^^bool :: {$eq.$map_t..$ptr_to..^^void.^^bool(M1_$2,M2_$2)} {:weight  0}( ((forall  p_$160 : $ptr :: {:weight  0}( $select.$map_t..$ptr_to..^^void.^^bool(M1_$2,p_$160) <==> $select.$map_t..$ptr_to..^^void.^^bool(M2_$2,p_$160) ))) ==> $eq.$map_t..$ptr_to..^^void.^^bool(M1_$2,M2_$2) ));
	assume (forall  M1_$3 : $map_t..$ptr_to..^^void.^^bool, M2_$3 : $map_t..$ptr_to..^^void.^^bool :: {$eq.$map_t..$ptr_to..^^void.^^bool(M1_$3,M2_$3)} {:weight  0}( $eq.$map_t..$ptr_to..^^void.^^bool(M1_$3,M2_$3) ==> (M1_$3 == M2_$3) ));
	assume $int_to_map_t..ptr_to..^^void.^^bool(0) == $zero.$map_t..$ptr_to..^^void.^^bool;
	assume (forall  p_$161 : $ptr :: {:weight  0}( $select.$map_t..$ptr_to..^^void.^^bool($zero.$map_t..$ptr_to..^^void.^^bool,p_$161) <==> false ));
	assume (forall  r1_$2 : $record, r2_$2 : $record, f_$32 : $field, R : $ctype :: {$rec_base_eq($rec_fetch(r1_$2,f_$32),$rec_fetch(r2_$2,f_$32)),$is_record_field(R,f_$32,$map_t($ptr_to(^^void),^^bool))} {:weight  0}( $eq.$map_t..$ptr_to..^^void.^^bool($int_to_map_t..ptr_to..^^void.^^bool($rec_fetch(r1_$2,f_$32)),$int_to_map_t..ptr_to..^^void.^^bool($rec_fetch(r2_$2,f_$32))) ==> $rec_base_eq($rec_fetch(r1_$2,f_$32),$rec_fetch(r2_$2,f_$32)) ));
	assume $function_arg_type(cf#classifier#default,0,$map_t($ptr_to(^^void),^^bool));
	assume (forall  p_$162 : $ptr :: {$select.$map_t..$ptr_to..^^void.^^bool(#classifier#default(),p_$162)} ( $select.$map_t..$ptr_to..^^void.^^bool(#classifier#default(),p_$162) <==> false ));
	assume (forall  p_$163 : $ptr :: ( $ptrclub.empty[p_$163] <==> false ));
	assume (forall  c_$1 : $ptrclub, p_$53 : $ptr :: ( $ptrclub.members(c_$1)[p_$53] == $ptrclub.members(c_$1)[p_$53] ));
	assume (forall  c_$14 : [$ptr]Boolean, l_$9 : $labelset :: {:weight  0}( $ptrclub.members($ptrclub.construct(c_$14,l_$9)) == c_$14 ));
	assume (forall  c_$15 : [$ptr]Boolean, l_$10 : $labelset :: {:weight  0}( $ptrclub.bound($ptrclub.construct(c_$15,l_$10)) == l_$10 ));
	assume (forall  c_$16 : $ptrclub, p_$164 : $ptr :: {:weight  0}( $ptrclub.members($ptrclub.addMember(p_$164,c_$16)) == $ptrclub.members(c_$16)[p_$164 := true] ));
	assume (forall  c_$17 : $ptrclub, p_$165 : $ptr :: {:weight  0}( $ptrclub.bound($ptrclub.addMember(p_$165,c_$17)) == $ptrclub.bound(c_$17) ));
	assume (forall  p1_$4 : $ptr, p2_$2 : $ptr :: ( ($ref(p1_$4) == $ref(p2_$2)) ==> ((forall  p_$52_$1 : $ptr :: ( $seclbl.leq($ptrclub.compare(p1_$4,p2_$2)[p_$52_$1],$lblset.bot[p_$52_$1]) ))) ));
	assume (forall  p1_$5 : $ptr, p2_$3 : $ptr, c_$18 : $ptrclub :: ( (($ptrclub.members(c_$18)[p1_$5] && $ptrclub.members(c_$18)[p2_$3]) && is_active_ptrclub(c_$18)) ==> ((forall  p_$52_$2 : $ptr :: ( $seclbl.leq($ptrclub.compare(p1_$5,p2_$3)[p_$52_$2],$ptrclub.bound(c_$18)[p_$52_$2]) ))) ));
	assume (forall  M_$3 : $memory_t, p_$166 : $ptr, q_$22 : $ptr, v_$9 : Integer :: {:weight  0}( $select.flow.data($store.mem(M_$3,q_$22,v_$9),p_$166) == $select.flow.data(M_$3,p_$166) ));
	assume (forall  M_$4 : $memory_t, p_$167 : $ptr, q_$23 : $ptr, fd_$5 : $flowdata :: {:weight  0}( $select.mem($store.flow.data(M_$4,q_$23,fd_$5),p_$167) == $select.mem(M_$4,p_$167) ));
	assume $arch_ptr_size == 8;
	assume $arch_spec_ptr_start == $max.u8;
	assume $is_math_type(^$#thread_id);
	assume $is_composite(^A);
	assume $ptr_level(^A) == 0;
	assume $sizeof(^A) == 4;
	assume (forall  #s1_$10 : $state, #s2_$7 : $state, #p_$30 : $ptr :: {$inv2(#s1_$10,#s2_$7,#p_$30,^A)} ( $inv2(#s1_$10,#s2_$7,#p_$30,^A) <==> (($typed(#s2_$7,#p_$30) && $set_eq($owns(#s2_$7,#p_$30),$set_empty())) && (($select.mem($memory(#s1_$10),$dot(#p_$30,A.x)) == $select.mem($memory(#s2_$7),$dot(#p_$30,A.x))) || (($select.mem($memory(#s1_$10),$dot(#p_$30,A.x)) + 1) == $select.mem($memory(#s2_$7),$dot(#p_$30,A.x))))) ));
	assume (forall  #s2_$8 : $state, #r_$10 : Integer :: {$inv_lab(#s2_$8,$ptr(^A,#r_$10),l#public)} ( $inv_lab(#s2_$8,$ptr(^A,#r_$10),l#public) <==> (($typed(#s2_$8,$ptr(^A,#r_$10)) && $set_eq($owns(#s2_$8,$ptr(^A,#r_$10)),$set_empty())) && (true || (($select.mem($memory(#s2_$8),$dot($ptr(^A,#r_$10),A.x)) + 1) == $select.mem($memory(#s2_$8),$dot($ptr(^A,#r_$10),A.x))))) ));
	assume (forall  #q_$2 : $ptr, #r_$11 : Integer :: {$set_in(#q_$2,$full_extent($ptr(^A,#r_$11)))} ( $set_in(#q_$2,$full_extent($ptr(^A,#r_$11))) <==> (((#q_$2 == $ptr(^A,#r_$11)) || (#q_$2 == $dot($ptr(^A,#r_$11),A.$owns))) || (#q_$2 == $dot($ptr(^A,#r_$11),A.x))) ));
	assume ((forall  #s : $state, #q_$3 : $ptr, #r_$12 : Integer :: {$set_in(#q_$3,$extent(#s,$ptr(^A,#r_$12)))} ( $set_in(#q_$3,$extent(#s,$ptr(^A,#r_$12))) <==> $set_in(#q_$3,$struct_extent($ptr(^A,#r_$12))) ))) && ((forall  #s_$0 : $state, #q_$4 : $ptr, #r_$13 : Integer :: {$set_in(#q_$4,$extent(#s_$0,$ptr(^A,#r_$13)))} ( $typed(#s_$0,$ptr(^A,#r_$13)) ==> ($set_in(#q_$4,$extent(#s_$0,$ptr(^A,#r_$13))) <==> ((#q_$4 == $ptr(^A,#r_$13)) || ($ts_emb($ts(#s_$0,#q_$4)) == $ptr(^A,#r_$13)))) )));
	assume (forall  #q_$5 : $ptr, #r_$14 : Integer :: {$set_in(#q_$5,$span($ptr(^A,#r_$14)))} ( $set_in(#q_$5,$span($ptr(^A,#r_$14))) <==> (((#q_$5 == $ptr(^A,#r_$14)) || (#q_$5 == $dot($ptr(^A,#r_$14),A.$owns))) || (#q_$5 == $dot($ptr(^A,#r_$14),A.x))) ));
	assume (forall  #p_$31 : $ptr, #s1_$11 : $state, #s2_$9 : $state :: {$state_spans_the_same(#s1_$11,#s2_$9,#p_$31,^A)} ( $state_spans_the_same(#s1_$11,#s2_$9,#p_$31,^A) <==> (($mem(#s1_$11,$dot(#p_$31,A.$owns)) == $mem(#s2_$9,$dot(#p_$31,A.$owns))) && ($mem(#s1_$11,$dot(#p_$31,A.x)) == $mem(#s2_$9,$dot(#p_$31,A.x)))) ));
	assume (forall  #p_$32 : $ptr, #s1_$12 : $state, #s2_$10 : $state :: {$state_nonvolatile_spans_the_same(#s1_$12,#s2_$10,#p_$32,^A)} ( $state_nonvolatile_spans_the_same(#s1_$12,#s2_$10,#p_$32,^A) <==> ($mem(#s1_$12,$dot(#p_$32,A.$owns)) == $mem(#s2_$10,$dot(#p_$32,A.$owns))) ));
	assume $is_claimable(^A) <==> false;
	assume $has_volatile_owns_set(^A) <==> false;
	assume (forall  #s1_$13 : $state, #r_$15 : Integer :: {$extent_mutable(#s1_$13,$ptr(^A,#r_$15))} ( $extent_mutable(#s1_$13,$ptr(^A,#r_$15)) <==> $mutable(#s1_$13,$ptr(^A,#r_$15)) ));
	assume (forall  #s1_$15 : $state, #r_$17 : Integer :: {$extent_zero(#s1_$15,$ptr(^A,#r_$17))} ( $extent_zero(#s1_$15,$ptr(^A,#r_$17)) <==> ($select.mem($memory(#s1_$15),$dot($ptr(^A,#r_$17),A.x)) == 0) ));
	assume $is_base_field(A.$owns) && ($field_parent_type(A.$owns) == ^A);
	assume $is_primitive_non_volatile_field(A.$owns);
	assume (forall  #p_$33 : $ptr :: {$dot(#p_$33,A.$owns)} ( $is(#p_$33,^A) ==> (($dot(#p_$33,A.$owns) == $ptr(^$#ptrset,$ghost_ref(#p_$33,A.$owns))) && $extent_hint($dot(#p_$33,A.$owns),#p_$33)) ));
	assume (forall  #p_$34 : $ptr, #s_$1 : $state :: {$select.tm($typemap(#s_$1),$dot(#p_$34,A.$owns))} {$select.sm($statusmap(#s_$1),$dot(#p_$34,A.$owns))} ( ($is(#p_$34,^A) && $typed(#s_$1,#p_$34)) ==> ((($typed2(#s_$1,$dot(#p_$34,A.$owns),^$#ptrset) && ($emb(#s_$1,$dot(#p_$34,A.$owns)) == #p_$34)) && ($path(#s_$1,$dot(#p_$34,A.$owns)) == A.$owns)) && ($is_volatile(#s_$1,$dot(#p_$34,A.$owns)) <==> false)) ));
	assume $owns_set_field(^A) == A.$owns;
	assume $is_base_field(A.x) && ($field_parent_type(A.x) == ^A);
	assume $is_primitive_volatile_field(A.x);
	assume (forall  #p_$35 : $ptr :: {$dot(#p_$35,A.x)} ( $is(#p_$35,^A) ==> (($dot(#p_$35,A.x) == $ptr(^^i4,$ref(#p_$35) + 0)) && $extent_hint($dot(#p_$35,A.x),#p_$35)) ));
	assume (forall  #p_$36 : $ptr, #s_$2 : $state :: {$select.tm($typemap(#s_$2),$dot(#p_$36,A.x))} {$select.sm($statusmap(#s_$2),$dot(#p_$36,A.x))} ( ($is(#p_$36,^A) && $typed(#s_$2,#p_$36)) ==> ((($typed2(#s_$2,$dot(#p_$36,A.x),^^i4) && ($emb(#s_$2,$dot(#p_$36,A.x)) == #p_$36)) && ($path(#s_$2,$dot(#p_$36,A.x)) == A.x)) && ($is_volatile(#s_$2,$dot(#p_$36,A.x)) <==> true)) ));
	assume #distTp3 == $ptr_to(^^i4);
	assume #distTp2 == $spec_ptr_to(^^claim);
	assume #distTp1 == $ptr_to(^A);
	assume $file_name_is(1,#file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c);
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	goto anon6;
anon6:
	assume $function_entry($s);
	assume $good_state_ext(#tok$1^13.1,$s) && $full_stop($s);
	assume (forall  f_$8 : $pure_function :: {$frame_level(f_$8)} ( $frame_level(f_$8) < $current_frame_level ));
	assume $local_value_is($s,#tok$1^13.1,#loc._this_,$ptr_to_int($ptr(^A,P#_this_)),$ptr_to(^A)) && $local_value_is_ptr($s,#tok$1^13.1,#loc._this_,$ptr(^A,P#_this_),$ptr_to(^A));
	assume #wrTime$1^13.1 == $current_timestamp($s);
	assume (forall  #p_$37 : $ptr :: {$in_writes_at(#wrTime$1^13.1,#p_$37)} ( $in_writes_at(#wrTime$1^13.1,#p_$37) <==> false ));
	assume true;
	assume $is_unwrap_check();
	assume !$is_stuttering_check();
	assume ((($wrapped($s,$ptr(^A,P#_this_),$typ($ptr(^A,P#_this_))) && ((!$is_claimable($typ($ptr(^A,P#_this_)))) || ($ref_cnt($s,$ptr(^A,P#_this_)) == 0))) && $inv($s,$ptr(^A,P#_this_),$typ($ptr(^A,P#_this_)))) && ((forall  #q_$1_$3 : $ptr :: {$st($s,#q_$1_$3)} ( $closed($s,#q_$1_$3) ==> $inv($s,#q_$1_$3,$typ(#q_$1_$3)) )))) && $good_for_pre_can_unwrap($s);
	assume call0formal_$_#l_$_0 == $ptr(^A,P#_this_);
	assume $spans_the_same($s,$s_$_0,call0formal_$_#l_$_0,$typ(call0formal_$_#l_$_0));
	assume $good_state_ext(#tok$1^13.1,$s_$_0);
	assert  $is_unwrap_check() ==> $set_eq($owns($s_$_0,$ptr(^A,P#_this_)),$set_empty());
	goto $exit;
}
