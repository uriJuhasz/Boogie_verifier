;Analysis time until now:     2s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ 0)
(declare-sort $@Map@@$ptr@To@$ptr@@ 0)
(declare-sort $@Map@@$ptr@To@Bool@@ 0)
(declare-sort $@Map@@$ptr@To@Int@@ 0)
(declare-sort $@Map@@Int@$ctype@To@$ptr@@ 0)
(declare-sort $ctype 0)
(declare-sort $ctype_branch 0)
(declare-sort $field 0)
(declare-sort $field_kind 0)
(declare-sort $label 0)
(declare-sort $map_t..^^mathint.^^mathint 0)
(declare-sort $ptr 0)
(declare-sort $pure_function 0)
(declare-sort $state 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)

;Functions
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c ( ) $token)
(declare-fun $@loc.i ( ) $token)
(declare-fun $@loc.j ( ) $token)
(declare-fun $@loc.k ( ) $token)
(declare-fun $@loc.map ( ) $token)
(declare-fun $@tok$1^11.39 ( ) $token)
(declare-fun $@tok$1^17.25 ( ) $token)
(declare-fun $@tok$1^18.17 ( ) $token)
(declare-fun $@tok$1^18.3 ( ) $token)
(declare-fun $@wrTime$1^11.39 ( ) Int)
(declare-fun $_and ( $ctype Int Int ) Int)
(declare-fun $_not ( $ctype Int ) Int)
(declare-fun $_or ( $ctype Int Int ) Int)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $_shl ( $ctype Int Int ) Int)
(declare-fun $_shr ( Int Int ) Int)
(declare-fun $_xor ( $ctype Int Int ) Int)
(declare-fun $active_option ( $state $ptr ) $field)
(declare-fun $addr ( $ptr ) Int)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_ptr_type ( ) $ctype)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $array_emb ( $ctype Int ) $field)
(declare-fun $array_length ( $ctype ) Int)
(declare-fun $array_range_no_state ( $ptr $ctype Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun $arrays_disjoint_id ( $ptr Int $ptr Int $ptr ) Int)
(declare-fun $as_addr ( $ptr $ctype Int ) $ptr)
(declare-fun $as_composite_field ( $field ) $field)
(declare-fun $as_deep_domain ( $state $ptr ) $ptr)
(declare-fun $as_field_with_type ( $field $ctype ) $field)
(declare-fun $as_in_range_t ( $ctype ) $ctype)
(declare-fun $as_primitive_field ( $field ) $field)
(declare-fun $as_union_type ( $ctype ) $ctype)
(declare-fun $base ( $ptr ) $ptr)
(declare-fun $bv_extract_signed ( Int Int Int Int ) Int)
(declare-fun $bv_extract_unsigned ( Int Int Int Int ) Int)
(declare-fun $bv_update ( Int Int Int Int Int ) Int)
(declare-fun $by_claim ( $state $ptr $ptr $ptr ) $ptr)
(declare-fun $claim_idx ( $ptr $ptr ) Int)
(declare-fun $claim_no ( $state $ptr Int ) $ptr)
(declare-fun $claim_version ( $ptr ) $version)
(declare-fun $composite_extent ( $state $ptr $ctype ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ctype_array ( ) $ctype_branch)
(declare-fun $ctype_flat ( ) $ctype_branch)
(declare-fun $ctype_map ( ) $ctype_branch)
(declare-fun $ctype_ptr ( ) $ctype_branch)
(declare-fun $ctype_spec_ptr ( ) $ctype_branch)
(declare-fun $current_frame_level ( ) Int)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $decreases_level ( ) Int)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $element_type ( $ctype ) $ctype)
(declare-fun $emb0 ( $ptr ) $ptr)
(declare-fun $extent ( $state $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $f_closed ( $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun $f_group_root ( $ctype ) $field)
(declare-fun $f_owner ( $state ) $@Map@@$ptr@To@$ptr@@)
(declare-fun $f_owns ( $ctype ) $field)
(declare-fun $f_ref_cnt ( $ctype ) $field)
(declare-fun $f_root ( $ctype ) $field)
(declare-fun $f_timestamp ( $state ) $@Map@@$ptr@To@Int@@)
(declare-fun $f_vol_version ( $ctype ) $field)
(declare-fun $fetch_from_domain ( $version $ptr $field ) Int)
(declare-fun $fetch_from_vv ( $vol_version $ptr $field ) Int)
(declare-fun $field ( $ptr ) $field)
(declare-fun $field_arr_ctor ( $field Int ) $field)
(declare-fun $field_arr_index ( $field ) Int)
(declare-fun $field_arr_root ( $field ) $field)
(declare-fun $field_arr_size ( $field ) Int)
(declare-fun $field_kind ( $field ) $field_kind)
(declare-fun $field_offset ( $field ) Int)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $field_plus ( $field Int ) $field)
(declare-fun $field_type ( $field ) $ctype)
(declare-fun $first_union_field ( $ctype ) $field)
(declare-fun $fk_allocation_root ( ) $field_kind)
(declare-fun $fk_as_array_first ( ) $field_kind)
(declare-fun $fk_base ( ) $field_kind)
(declare-fun $fk_emb_array ( ) $field_kind)
(declare-fun $fk_owns ( ) $field_kind)
(declare-fun $fk_ref_cnt ( ) $field_kind)
(declare-fun $fk_vol_version ( ) $field_kind)
(declare-fun $frame_level ( $pure_function ) Int)
(declare-fun $full_extent ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $full_extent_state ( ) $state)
(declare-fun $get_fnptr ( Int $ctype ) $ptr)
(declare-fun $get_fnptr_ref ( Int ) $ptr)
(declare-fun $get_string_literal ( Int Int ) $ptr)
(declare-fun $heap ( $state ) $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)
(declare-fun $i1_to_ptr ( Int ) $ptr)
(declare-fun $i2_to_ptr ( Int ) $ptr)
(declare-fun $i4_to_ptr ( Int ) $ptr)
(declare-fun $i8_to_ptr ( Int ) $ptr)
(declare-fun $id_set_disjoint ( $ptr $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) Int)
(declare-fun $idx ( $ptr Int ) $ptr)
(declare-fun $inactive_union_owner ( ) $ptr)
(declare-fun $inactive_union_owner_type ( ) $ctype)
(declare-fun $index_within ( $ptr $ptr ) Int)
(declare-fun $int_to_map_t..^^mathint.^^mathint ( Int ) $map_t..^^mathint.^^mathint)
(declare-fun $int_to_ptr ( Int ) $ptr)
(declare-fun $int_to_ptrset ( Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun $int_to_version ( Int ) $version)
(declare-fun $map_domain ( $ctype ) $ctype)
(declare-fun $map_range ( $ctype ) $ctype)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $map_t..^^mathint.^^mathint_to_int ( $map_t..^^mathint.^^mathint ) Int)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $mem_range_heap ( $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ $ptr Int ) Int)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $no_claim ( ) $ptr)
(declare-fun $null ( ) $ptr)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $phys_ptr_cast ( $ptr $ctype ) $ptr)
(declare-fun $primitive_emb_type ( ) $ctype)
(declare-fun $ptr ( $field $ptr ) $ptr)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $ptrset_to_int ( $@Map@@$ptr@To@Bool@@ ) Int)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $release ( $state $state $ptr $ptr ) $state)
(declare-fun $retype ( $state $ptr ) $ptr)
(declare-fun $roots ( $state ) $@Map@@$ptr@To@$ptr@@)
(declare-fun $s ( ) $state)
(declare-fun $select.$map_t..^^mathint.^^mathint ( $map_t..^^mathint.^^mathint Int ) Int)
(declare-fun $set_cardinality ( $@Map@@$ptr@To@Bool@@ ) Int)
(declare-fun $set_difference ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_empty ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_singleton ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_union ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_universe ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $spec_ptr_cast ( $ptr $ctype ) $ptr)
(declare-fun $spec_ptr_to ( $ctype ) $ctype)
(declare-fun $store.$map_t..^^mathint.^^mathint ( $map_t..^^mathint.^^mathint Int Int ) $map_t..^^mathint.^^mathint)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $type_branch ( $ctype ) $ctype_branch)
(declare-fun $type_project_0 ( $ctype ) $ctype)
(declare-fun $typemap ( $@Map@@$ptr@To@$ptr@@ ) $@Map@@Int@$ctype@To@$ptr@@)
(declare-fun $u8_to_ptr ( Int ) $ptr)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $unchecked_sbits ( Int Int ) Int)
(declare-fun $unchecked_ubits ( Int Int ) Int)
(declare-fun $unchk_add ( $ctype Int Int ) Int)
(declare-fun $update_int ( $state $ptr Int ) $state)
(declare-fun $ver_domain ( $version ) $@Map@@$ptr@To@Bool@@)
(declare-fun $vs_base_ref ( $struct ) $ptr)
(declare-fun $vs_ctor ( $state $ptr ) $struct)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun $writes_at ( Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun $zero.$map_t..^^mathint.^^mathint ( ) $map_t..^^mathint.^^mathint)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@state_t ( ) $ctype)
(declare-fun ^$@struct ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^$@thread_id_t ( ) $ctype)
(declare-fun ^$@volatile_version_t ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^f4 ( ) $ctype)
(declare-fun ^^f8 ( ) $ctype)
(declare-fun ^^field ( ) $ctype)
(declare-fun ^^i1 ( ) $ctype)
(declare-fun ^^i2 ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^i8 ( ) $ctype)
(declare-fun ^^mathint ( ) $ctype)
(declare-fun ^^null_type ( ) $ctype)
(declare-fun ^^object ( ) $ctype)
(declare-fun ^^u1 ( ) $ctype)
(declare-fun ^^u2 ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun cf@fsum ( ) $pure_function)
(declare-fun cf@lambda@2 ( ) $pure_function)
(declare-fun cf@lambda@3 ( ) $pure_function)
(declare-fun cf@lambda@4 ( ) $pure_function)
(declare-fun F@fsum ( Int $map_t..^^mathint.^^mathint ) Int)
(declare-fun F@lambda@2 ( $state $ptr Int ) $map_t..^^mathint.^^mathint)
(declare-fun F@lambda@3 ( $state $ptr Int ) $map_t..^^mathint.^^mathint)
(declare-fun F@lambda@4 ( $state $ptr Int ) $map_t..^^mathint.^^mathint)
(declare-fun lambda@0 ( $field_kind $ptr $ctype Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@1 ( Int $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@10 ( $ptr $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@11 ( $ptr $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@12 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@13 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@14 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@15 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@16 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@17 ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@18 ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@19 ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@2 ( Int $ptr $ctype ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@3 ( $state $state $ptr ) $@Map@@$ptr@To@Int@@)
(declare-fun lambda@4 ( $state $ptr ) $@Map@@$ptr@To@$ptr@@)
(declare-fun lambda@5 ( $ptr $state ) $@Map@@$ptr@To@$ptr@@)
(declare-fun MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ( $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ $field ) $@Map@@$ptr@To@Int@@)
(declare-fun MapRead$$@Map@@$ptr@To@$ptr@@$ ( $@Map@@$ptr@To@$ptr@@ $ptr ) $ptr)
(declare-fun MapRead$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr ) Bool)
(declare-fun MapRead$$@Map@@$ptr@To@Int@@$ ( $@Map@@$ptr@To@Int@@ $ptr ) Int)
(declare-fun MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ( $@Map@@Int@$ctype@To@$ptr@@ Int $ctype ) $ptr)
(declare-fun MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ( $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ $field $@Map@@$ptr@To@Int@@ ) $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)
(declare-fun MapWrite$$@Map@@$ptr@To@$ptr@@$ ( $@Map@@$ptr@To@$ptr@@ $ptr $ptr ) $@Map@@$ptr@To@$ptr@@)
(declare-fun MapWrite$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr Bool ) $@Map@@$ptr@To@Bool@@)
(declare-fun MapWrite$$@Map@@$ptr@To@Int@@$ ( $@Map@@$ptr@To@Int@@ $ptr Int ) $@Map@@$ptr@To@Int@@)
(declare-fun SL@k ( ) Int)
(declare-fun SL@k@0 ( ) Int)
(declare-fun SL@k@1 ( ) Int)
(declare-fun SP@i ( ) Int)
(declare-fun SP@j ( ) Int)
(declare-fun SP@map ( ) $map_t..^^mathint.^^mathint)

;Predicates
(declare-fun $account_claim ( $state $ptr $ptr ) Bool)
(declare-fun $all_first_option_typed ( $state $ptr ) Bool)
(declare-fun $arrays_disjoint ( $ptr Int $ptr Int ) Bool)
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $claimed_closed ( $state $ptr ) Bool)
(declare-fun $claims_claim ( $ptr $ptr ) Bool)
(declare-fun $claims_obj ( $ptr $ptr ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $dont_instantiate_int ( Int ) Bool)
(declare-fun $dont_instantiate_state ( $state ) Bool)
(declare-fun $eq.$map_t..^^mathint.^^mathint ( $map_t..^^mathint.^^mathint $map_t..^^mathint.^^mathint ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_is_fresh ( $state $state $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $file_name_is ( Int $token ) Bool)
(declare-fun $first_option_typed ( $state $ptr ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $function_arg_type ( $pure_function Int $ctype ) Bool)
(declare-fun $function_entry ( $state ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_field_at0 ( $ctype $field ) Bool)
(declare-fun $in_claim_domain ( $ptr $ptr ) Bool)
(declare-fun $in_composite_array_lev2 ( $state $ptr $ptr Int ) Bool)
(declare-fun $in_domain ( $state $ptr $ptr ) Bool)
(declare-fun $in_domain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_range_phys_ptr ( $ptr ) Bool)
(declare-fun $in_range_sbits ( Int Int ) Bool)
(declare-fun $in_range_spec_ptr ( $ptr ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $in_range_ubits ( Int Int ) Bool)
(declare-fun $in_vdomain ( $state $ptr $ptr ) Bool)
(declare-fun $in_vdomain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_writes_at ( Int $ptr ) Bool)
(declare-fun $instantiate_int ( Int ) Bool)
(declare-fun $instantiate_ptr ( $ptr ) Bool)
(declare-fun $instantiate_ptrset ( $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $inv_lab ( $state $ptr $label ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $invok_state ( $state ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_approved_by ( $ctype $field $field ) Bool)
(declare-fun $is_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_datatype ( $ctype ) Bool)
(declare-fun $is_fnptr_type ( $ctype ) Bool)
(declare-fun $is_ghost_field ( $field ) Bool)
(declare-fun $is_group_type ( $ctype ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_mutable_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_object_root_ptr ( $ptr ) Bool)
(declare-fun $is_owner_approved ( $ctype $field ) Bool)
(declare-fun $is_phys_field ( $field ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_proper ( $ptr ) Bool)
(declare-fun $is_record_type ( $ctype ) Bool)
(declare-fun $is_semi_sequential_field ( $field ) Bool)
(declare-fun $is_sequential_field ( $field ) Bool)
(declare-fun $is_span_sequential ( $ctype ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_thread_local_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_union_field ( $field ) Bool)
(declare-fun $is_union_type ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $is_unwrapped ( $state $state $ptr ) Bool)
(declare-fun $is_volatile_field ( $field ) Bool)
(declare-fun $is_wrapped ( $state $state $ptr $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $local_value_is ( $state $token $token Int $ctype ) Bool)
(declare-fun $modifies ( $state $state $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $post_unwrap ( $state $state ) Bool)
(declare-fun $program_entry_point ( $state ) Bool)
(declare-fun $ptr_eq ( $ptr $ptr ) Bool)
(declare-fun $set_disjoint ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $set_eq ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $set_in_pos ( $ptr $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $set_in0 ( $ptr $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $strong_shallow_struct_eq ( $state $ptr $state $ptr ) Bool)
(declare-fun $strong_struct_eq ( $state $ptr $state $ptr ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $trans_call_transition ( $state $state ) Bool)
(declare-fun $type_code_is ( Int $ctype ) Bool)
(declare-fun $valid_claim ( $state $ptr ) Bool)
(declare-fun $valid_fnptr ( $ptr ) Bool)

;Axioms
   (assert (! (forall ((|i_1| $field)(|m| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)(|v| $@Map@@$ptr@To@Int@@))(!(= v (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m i_1 v) i_1)):pattern ( (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m i_1 v) i_1)) :qid map_1_$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ :weight 0 )) :named ax_0))
   (assert (! (forall ((|i_3| $ptr)(|m_2| $@Map@@$ptr@To@Int@@)(|v_2| Int))(!(= v_2 (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_2 i_3 v_2) i_3)):pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_2 i_3 v_2) i_3)) :qid map_1_$@Map@@$ptr@To@Int@@ :weight 0 )) :named ax_1))
   (assert (! (forall ((|i_5| $ptr)(|m_4| $@Map@@$ptr@To@Bool@@)(|v_5| Bool))(!(= v_5 (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_4 i_5 v_5) i_5)):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_4 i_5 v_5) i_5)) :qid map_1_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_2))
   (assert (! (forall ((|i_7| $ptr)(|m_6| $@Map@@$ptr@To@$ptr@@)(|v_7| $ptr))(!(= v_7 (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_6 i_7 v_7) i_7)):pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_6 i_7 v_7) i_7)) :qid map_1_$@Map@@$ptr@To@$ptr@@ :weight 0 )) :named ax_3))
   (assert (! (forall ((|v_1| $@Map@@$ptr@To@Int@@)(|m_1| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)(|i_2| $field)(|j_1| $field))(!(=> (not (= j_1 i_2)) (= (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m_1 j_1) (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m_1 i_2 v_1) j_1))):pattern ( (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m_1 i_2 v_1) j_1)) :qid map_2_$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ :weight 0 )) :named ax_4))
   (assert (! (forall ((|v_3| Int)(|m_3| $@Map@@$ptr@To@Int@@)(|i_4| $ptr)(|j_2| $ptr))(!(=> (not (= j_2 i_4)) (= (MapRead$$@Map@@$ptr@To@Int@@$ m_3 j_2) (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_3 i_4 v_3) j_2))):pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_3 i_4 v_3) j_2)) :qid map_2_$@Map@@$ptr@To@Int@@ :weight 0 )) :named ax_5))
   (assert (! (forall ((|v_6| Bool)(|m_5| $@Map@@$ptr@To@Bool@@)(|i_6| $ptr)(|j_3| $ptr))(!(=> (not (= j_3 i_6)) (= (MapRead$$@Map@@$ptr@To@Bool@@$ m_5 j_3) (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_5 i_6 v_6) j_3))):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_5 i_6 v_6) j_3)) :qid map_2_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_6))
   (assert (! (forall ((|v_8| $ptr)(|m_7| $@Map@@$ptr@To@$ptr@@)(|i_8| $ptr)(|j_4| $ptr))(!(=> (not (= j_4 i_8)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ m_7 j_4) (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_7 i_8 v_8) j_4))):pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_7 i_8 v_8) j_4)) :qid map_2_$@Map@@$ptr@To@$ptr@@ :weight 0 )) :named ax_7))
   (assert (! (not (= $@distTp1 $inactive_union_owner_type)) :named ax_8))
   (assert (! (not (= $@distTp1 $primitive_emb_type)) :named ax_9))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_10))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_11))
   (assert (! (not (= $@distTp2 $inactive_union_owner_type)) :named ax_12))
   (assert (! (not (= $@distTp2 $primitive_emb_type)) :named ax_13))
   (assert (! (not (= $@loc.i $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_14))
   (assert (! (not (= $@loc.i $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_15))
   (assert (! (not (= $@loc.j $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_16))
   (assert (! (not (= $@loc.j $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_17))
   (assert (! (not (= $@loc.j $@loc.i)) :named ax_18))
   (assert (! (not (= $@loc.j $@loc.i)) :named ax_19))
   (assert (! (not (= $@loc.j $@loc.map)) :named ax_20))
   (assert (! (not (= $@loc.j $@tok$1^11.39)) :named ax_21))
   (assert (! (not (= $@loc.k $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_22))
   (assert (! (not (= $@loc.k $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_23))
   (assert (! (not (= $@loc.k $@loc.i)) :named ax_24))
   (assert (! (not (= $@loc.k $@loc.i)) :named ax_25))
   (assert (! (not (= $@loc.k $@loc.j)) :named ax_26))
   (assert (! (not (= $@loc.k $@loc.j)) :named ax_27))
   (assert (! (not (= $@loc.k $@loc.map)) :named ax_28))
   (assert (! (not (= $@loc.k $@tok$1^11.39)) :named ax_29))
   (assert (! (not (= $@loc.k $@tok$1^17.25)) :named ax_30))
   (assert (! (not (= $@loc.map $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_31))
   (assert (! (not (= $@loc.map $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_32))
   (assert (! (not (= $@loc.map $@loc.i)) :named ax_33))
   (assert (! (not (= $@loc.map $@loc.i)) :named ax_34))
   (assert (! (not (= $@loc.map $@loc.j)) :named ax_35))
   (assert (! (not (= $@loc.map $@loc.k)) :named ax_36))
   (assert (! (not (= $@tok$1^11.39 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_37))
   (assert (! (not (= $@tok$1^11.39 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_38))
   (assert (! (not (= $@tok$1^11.39 $@loc.i)) :named ax_39))
   (assert (! (not (= $@tok$1^11.39 $@loc.i)) :named ax_40))
   (assert (! (not (= $@tok$1^11.39 $@loc.j)) :named ax_41))
   (assert (! (not (= $@tok$1^11.39 $@loc.k)) :named ax_42))
   (assert (! (not (= $@tok$1^11.39 $@loc.map)) :named ax_43))
   (assert (! (not (= $@tok$1^11.39 $@loc.map)) :named ax_44))
   (assert (! (not (= $@tok$1^17.25 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_45))
   (assert (! (not (= $@tok$1^17.25 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_46))
   (assert (! (not (= $@tok$1^17.25 $@loc.i)) :named ax_47))
   (assert (! (not (= $@tok$1^17.25 $@loc.i)) :named ax_48))
   (assert (! (not (= $@tok$1^17.25 $@loc.j)) :named ax_49))
   (assert (! (not (= $@tok$1^17.25 $@loc.j)) :named ax_50))
   (assert (! (not (= $@tok$1^17.25 $@loc.k)) :named ax_51))
   (assert (! (not (= $@tok$1^17.25 $@loc.map)) :named ax_52))
   (assert (! (not (= $@tok$1^17.25 $@loc.map)) :named ax_53))
   (assert (! (not (= $@tok$1^17.25 $@tok$1^11.39)) :named ax_54))
   (assert (! (not (= $@tok$1^17.25 $@tok$1^11.39)) :named ax_55))
   (assert (! (not (= $@tok$1^18.17 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_56))
   (assert (! (not (= $@tok$1^18.17 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_57))
   (assert (! (not (= $@tok$1^18.17 $@loc.i)) :named ax_58))
   (assert (! (not (= $@tok$1^18.17 $@loc.i)) :named ax_59))
   (assert (! (not (= $@tok$1^18.17 $@loc.j)) :named ax_60))
   (assert (! (not (= $@tok$1^18.17 $@loc.j)) :named ax_61))
   (assert (! (not (= $@tok$1^18.17 $@loc.k)) :named ax_62))
   (assert (! (not (= $@tok$1^18.17 $@loc.k)) :named ax_63))
   (assert (! (not (= $@tok$1^18.17 $@loc.map)) :named ax_64))
   (assert (! (not (= $@tok$1^18.17 $@loc.map)) :named ax_65))
   (assert (! (not (= $@tok$1^18.17 $@tok$1^11.39)) :named ax_66))
   (assert (! (not (= $@tok$1^18.17 $@tok$1^11.39)) :named ax_67))
   (assert (! (not (= $@tok$1^18.17 $@tok$1^17.25)) :named ax_68))
   (assert (! (not (= $@tok$1^18.17 $@tok$1^17.25)) :named ax_69))
   (assert (! (not (= $@tok$1^18.17 $@tok$1^18.3)) :named ax_70))
   (assert (! (not (= $@tok$1^18.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_71))
   (assert (! (not (= $@tok$1^18.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)) :named ax_72))
   (assert (! (not (= $@tok$1^18.3 $@loc.i)) :named ax_73))
   (assert (! (not (= $@tok$1^18.3 $@loc.i)) :named ax_74))
   (assert (! (not (= $@tok$1^18.3 $@loc.j)) :named ax_75))
   (assert (! (not (= $@tok$1^18.3 $@loc.j)) :named ax_76))
   (assert (! (not (= $@tok$1^18.3 $@loc.k)) :named ax_77))
   (assert (! (not (= $@tok$1^18.3 $@loc.k)) :named ax_78))
   (assert (! (not (= $@tok$1^18.3 $@loc.map)) :named ax_79))
   (assert (! (not (= $@tok$1^18.3 $@loc.map)) :named ax_80))
   (assert (! (not (= $@tok$1^18.3 $@tok$1^11.39)) :named ax_81))
   (assert (! (not (= $@tok$1^18.3 $@tok$1^11.39)) :named ax_82))
   (assert (! (not (= $@tok$1^18.3 $@tok$1^17.25)) :named ax_83))
   (assert (! (not (= $@tok$1^18.3 $@tok$1^17.25)) :named ax_84))
   (assert (! (not (= $@tok$1^18.3 $@tok$1^18.17)) :named ax_85))
   (assert (! (not (= $ctype_flat $ctype_array)) :named ax_86))
   (assert (! (not (= $ctype_flat $ctype_array)) :named ax_87))
   (assert (! (not (= $ctype_flat $ctype_map)) :named ax_88))
   (assert (! (not (= $ctype_flat $ctype_ptr)) :named ax_89))
   (assert (! (not (= $ctype_flat $ctype_spec_ptr)) :named ax_90))
   (assert (! (not (= $ctype_map $ctype_array)) :named ax_91))
   (assert (! (not (= $ctype_map $ctype_array)) :named ax_92))
   (assert (! (not (= $ctype_map $ctype_flat)) :named ax_93))
   (assert (! (not (= $ctype_ptr $ctype_array)) :named ax_94))
   (assert (! (not (= $ctype_ptr $ctype_array)) :named ax_95))
   (assert (! (not (= $ctype_ptr $ctype_flat)) :named ax_96))
   (assert (! (not (= $ctype_ptr $ctype_map)) :named ax_97))
   (assert (! (not (= $ctype_ptr $ctype_map)) :named ax_98))
   (assert (! (not (= $ctype_ptr $ctype_spec_ptr)) :named ax_99))
   (assert (! (not (= $ctype_spec_ptr $ctype_array)) :named ax_100))
   (assert (! (not (= $ctype_spec_ptr $ctype_array)) :named ax_101))
   (assert (! (not (= $ctype_spec_ptr $ctype_flat)) :named ax_102))
   (assert (! (not (= $ctype_spec_ptr $ctype_map)) :named ax_103))
   (assert (! (not (= $ctype_spec_ptr $ctype_map)) :named ax_104))
   (assert (! (not (= $ctype_spec_ptr $ctype_ptr)) :named ax_105))
   (assert (! (not (= $fk_allocation_root $fk_as_array_first)) :named ax_106))
   (assert (! (not (= $fk_allocation_root $fk_emb_array)) :named ax_107))
   (assert (! (not (= $fk_as_array_first $fk_allocation_root)) :named ax_108))
   (assert (! (not (= $fk_as_array_first $fk_emb_array)) :named ax_109))
   (assert (! (not (= $fk_base $fk_allocation_root)) :named ax_110))
   (assert (! (not (= $fk_base $fk_allocation_root)) :named ax_111))
   (assert (! (not (= $fk_base $fk_as_array_first)) :named ax_112))
   (assert (! (not (= $fk_base $fk_as_array_first)) :named ax_113))
   (assert (! (not (= $fk_base $fk_emb_array)) :named ax_114))
   (assert (! (not (= $fk_base $fk_owns)) :named ax_115))
   (assert (! (not (= $fk_base $fk_ref_cnt)) :named ax_116))
   (assert (! (not (= $fk_base $fk_vol_version)) :named ax_117))
   (assert (! (not (= $fk_emb_array $fk_allocation_root)) :named ax_118))
   (assert (! (not (= $fk_emb_array $fk_as_array_first)) :named ax_119))
   (assert (! (not (= $fk_emb_array $fk_base)) :named ax_120))
   (assert (! (not (= $fk_owns $fk_allocation_root)) :named ax_121))
   (assert (! (not (= $fk_owns $fk_allocation_root)) :named ax_122))
   (assert (! (not (= $fk_owns $fk_as_array_first)) :named ax_123))
   (assert (! (not (= $fk_owns $fk_as_array_first)) :named ax_124))
   (assert (! (not (= $fk_owns $fk_base)) :named ax_125))
   (assert (! (not (= $fk_owns $fk_emb_array)) :named ax_126))
   (assert (! (not (= $fk_owns $fk_emb_array)) :named ax_127))
   (assert (! (not (= $fk_owns $fk_ref_cnt)) :named ax_128))
   (assert (! (not (= $fk_owns $fk_vol_version)) :named ax_129))
   (assert (! (not (= $fk_ref_cnt $fk_allocation_root)) :named ax_130))
   (assert (! (not (= $fk_ref_cnt $fk_allocation_root)) :named ax_131))
   (assert (! (not (= $fk_ref_cnt $fk_as_array_first)) :named ax_132))
   (assert (! (not (= $fk_ref_cnt $fk_as_array_first)) :named ax_133))
   (assert (! (not (= $fk_ref_cnt $fk_base)) :named ax_134))
   (assert (! (not (= $fk_ref_cnt $fk_emb_array)) :named ax_135))
   (assert (! (not (= $fk_ref_cnt $fk_emb_array)) :named ax_136))
   (assert (! (not (= $fk_ref_cnt $fk_owns)) :named ax_137))
   (assert (! (not (= $fk_ref_cnt $fk_vol_version)) :named ax_138))
   (assert (! (not (= $fk_vol_version $fk_allocation_root)) :named ax_139))
   (assert (! (not (= $fk_vol_version $fk_allocation_root)) :named ax_140))
   (assert (! (not (= $fk_vol_version $fk_as_array_first)) :named ax_141))
   (assert (! (not (= $fk_vol_version $fk_as_array_first)) :named ax_142))
   (assert (! (not (= $fk_vol_version $fk_base)) :named ax_143))
   (assert (! (not (= $fk_vol_version $fk_emb_array)) :named ax_144))
   (assert (! (not (= $fk_vol_version $fk_emb_array)) :named ax_145))
   (assert (! (not (= $fk_vol_version $fk_owns)) :named ax_146))
   (assert (! (not (= $fk_vol_version $fk_ref_cnt)) :named ax_147))
   (assert (! (not (= $inactive_union_owner_type $@distTp1)) :named ax_148))
   (assert (! (not (= $inactive_union_owner_type $@distTp2)) :named ax_149))
   (assert (! (not (= $inactive_union_owner_type ^$@thread_id)) :named ax_150))
   (assert (! (not (= $primitive_emb_type $@distTp1)) :named ax_151))
   (assert (! (not (= $primitive_emb_type $@distTp2)) :named ax_152))
   (assert (! (not (= $primitive_emb_type $inactive_union_owner_type)) :named ax_153))
   (assert (! (not (= $primitive_emb_type $inactive_union_owner_type)) :named ax_154))
   (assert (! (not (= $primitive_emb_type ^$@ptrset)) :named ax_155))
   (assert (! (not (= $primitive_emb_type ^$@state_t)) :named ax_156))
   (assert (! (not (= $primitive_emb_type ^$@struct)) :named ax_157))
   (assert (! (not (= $primitive_emb_type ^$@thread_id)) :named ax_158))
   (assert (! (not (= $primitive_emb_type ^$@thread_id_t)) :named ax_159))
   (assert (! (not (= $primitive_emb_type ^$@volatile_version_t)) :named ax_160))
   (assert (! (not (= $primitive_emb_type ^^bool)) :named ax_161))
   (assert (! (not (= $primitive_emb_type ^^claim)) :named ax_162))
   (assert (! (not (= $primitive_emb_type ^^f4)) :named ax_163))
   (assert (! (not (= $primitive_emb_type ^^f8)) :named ax_164))
   (assert (! (not (= $primitive_emb_type ^^field)) :named ax_165))
   (assert (! (not (= $primitive_emb_type ^^i1)) :named ax_166))
   (assert (! (not (= $primitive_emb_type ^^i2)) :named ax_167))
   (assert (! (not (= $primitive_emb_type ^^i4)) :named ax_168))
   (assert (! (not (= $primitive_emb_type ^^i8)) :named ax_169))
   (assert (! (not (= $primitive_emb_type ^^mathint)) :named ax_170))
   (assert (! (not (= $primitive_emb_type ^^null_type)) :named ax_171))
   (assert (! (not (= $primitive_emb_type ^^object)) :named ax_172))
   (assert (! (not (= $primitive_emb_type ^^u1)) :named ax_173))
   (assert (! (not (= $primitive_emb_type ^^u2)) :named ax_174))
   (assert (! (not (= $primitive_emb_type ^^u4)) :named ax_175))
   (assert (! (not (= $primitive_emb_type ^^u8)) :named ax_176))
   (assert (! (not (= $primitive_emb_type ^^void)) :named ax_177))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_178))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_179))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_180))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_181))
   (assert (! (not (= ^$@ptrset $inactive_union_owner_type)) :named ax_182))
   (assert (! (not (= ^$@ptrset $inactive_union_owner_type)) :named ax_183))
   (assert (! (not (= ^$@ptrset $primitive_emb_type)) :named ax_184))
   (assert (! (not (= ^$@ptrset ^$@state_t)) :named ax_185))
   (assert (! (not (= ^$@ptrset ^$@struct)) :named ax_186))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_187))
   (assert (! (not (= ^$@ptrset ^$@thread_id_t)) :named ax_188))
   (assert (! (not (= ^$@ptrset ^$@volatile_version_t)) :named ax_189))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_190))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_191))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_192))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_193))
   (assert (! (not (= ^$@state_t $inactive_union_owner_type)) :named ax_194))
   (assert (! (not (= ^$@state_t $inactive_union_owner_type)) :named ax_195))
   (assert (! (not (= ^$@state_t $primitive_emb_type)) :named ax_196))
   (assert (! (not (= ^$@state_t ^$@ptrset)) :named ax_197))
   (assert (! (not (= ^$@state_t ^$@struct)) :named ax_198))
   (assert (! (not (= ^$@state_t ^$@thread_id)) :named ax_199))
   (assert (! (not (= ^$@state_t ^$@thread_id_t)) :named ax_200))
   (assert (! (not (= ^$@state_t ^$@volatile_version_t)) :named ax_201))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_202))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_203))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_204))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_205))
   (assert (! (not (= ^$@struct $inactive_union_owner_type)) :named ax_206))
   (assert (! (not (= ^$@struct $inactive_union_owner_type)) :named ax_207))
   (assert (! (not (= ^$@struct $primitive_emb_type)) :named ax_208))
   (assert (! (not (= ^$@struct ^$@ptrset)) :named ax_209))
   (assert (! (not (= ^$@struct ^$@state_t)) :named ax_210))
   (assert (! (not (= ^$@struct ^$@thread_id)) :named ax_211))
   (assert (! (not (= ^$@struct ^$@thread_id_t)) :named ax_212))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_213))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_214))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_215))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_216))
   (assert (! (not (= ^$@thread_id $inactive_union_owner_type)) :named ax_217))
   (assert (! (not (= ^$@thread_id $primitive_emb_type)) :named ax_218))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_219))
   (assert (! (not (= ^$@thread_id ^$@state_t)) :named ax_220))
   (assert (! (not (= ^$@thread_id ^$@struct)) :named ax_221))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_222))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_223))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_224))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_225))
   (assert (! (not (= ^$@thread_id_t $inactive_union_owner_type)) :named ax_226))
   (assert (! (not (= ^$@thread_id_t $inactive_union_owner_type)) :named ax_227))
   (assert (! (not (= ^$@thread_id_t $primitive_emb_type)) :named ax_228))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_229))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_230))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_231))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_232))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_233))
   (assert (! (not (= ^$@volatile_version_t $@distTp1)) :named ax_234))
   (assert (! (not (= ^$@volatile_version_t $@distTp1)) :named ax_235))
   (assert (! (not (= ^$@volatile_version_t $@distTp2)) :named ax_236))
   (assert (! (not (= ^$@volatile_version_t $@distTp2)) :named ax_237))
   (assert (! (not (= ^$@volatile_version_t $inactive_union_owner_type)) :named ax_238))
   (assert (! (not (= ^$@volatile_version_t $inactive_union_owner_type)) :named ax_239))
   (assert (! (not (= ^$@volatile_version_t $primitive_emb_type)) :named ax_240))
   (assert (! (not (= ^$@volatile_version_t ^$@ptrset)) :named ax_241))
   (assert (! (not (= ^$@volatile_version_t ^$@state_t)) :named ax_242))
   (assert (! (not (= ^$@volatile_version_t ^$@struct)) :named ax_243))
   (assert (! (not (= ^$@volatile_version_t ^$@struct)) :named ax_244))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id)) :named ax_245))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id)) :named ax_246))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id_t)) :named ax_247))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id_t)) :named ax_248))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_249))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_250))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_251))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_252))
   (assert (! (not (= ^^bool $inactive_union_owner_type)) :named ax_253))
   (assert (! (not (= ^^bool $inactive_union_owner_type)) :named ax_254))
   (assert (! (not (= ^^bool $primitive_emb_type)) :named ax_255))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_256))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_257))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_258))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_259))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_260))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_261))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_262))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_263))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_264))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_265))
   (assert (! (not (= ^^bool ^$@volatile_version_t)) :named ax_266))
   (assert (! (not (= ^^bool ^$@volatile_version_t)) :named ax_267))
   (assert (! (not (= ^^bool ^^claim)) :named ax_268))
   (assert (! (not (= ^^bool ^^f4)) :named ax_269))
   (assert (! (not (= ^^bool ^^f8)) :named ax_270))
   (assert (! (not (= ^^bool ^^field)) :named ax_271))
   (assert (! (not (= ^^bool ^^mathint)) :named ax_272))
   (assert (! (not (= ^^bool ^^null_type)) :named ax_273))
   (assert (! (not (= ^^bool ^^object)) :named ax_274))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_275))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_276))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_277))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_278))
   (assert (! (not (= ^^claim $inactive_union_owner_type)) :named ax_279))
   (assert (! (not (= ^^claim $inactive_union_owner_type)) :named ax_280))
   (assert (! (not (= ^^claim $primitive_emb_type)) :named ax_281))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_282))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_283))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_284))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_285))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_286))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_287))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_288))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_289))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_290))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_291))
   (assert (! (not (= ^^claim ^$@volatile_version_t)) :named ax_292))
   (assert (! (not (= ^^claim ^$@volatile_version_t)) :named ax_293))
   (assert (! (not (= ^^claim ^^bool)) :named ax_294))
   (assert (! (not (= ^^claim ^^mathint)) :named ax_295))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_296))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_297))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_298))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_299))
   (assert (! (not (= ^^f4 $inactive_union_owner_type)) :named ax_300))
   (assert (! (not (= ^^f4 $inactive_union_owner_type)) :named ax_301))
   (assert (! (not (= ^^f4 $primitive_emb_type)) :named ax_302))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_303))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_304))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_305))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_306))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_307))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_308))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_309))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_310))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_311))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_312))
   (assert (! (not (= ^^f4 ^$@volatile_version_t)) :named ax_313))
   (assert (! (not (= ^^f4 ^$@volatile_version_t)) :named ax_314))
   (assert (! (not (= ^^f4 ^^bool)) :named ax_315))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_316))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_317))
   (assert (! (not (= ^^f4 ^^f8)) :named ax_318))
   (assert (! (not (= ^^f4 ^^field)) :named ax_319))
   (assert (! (not (= ^^f4 ^^mathint)) :named ax_320))
   (assert (! (not (= ^^f4 ^^null_type)) :named ax_321))
   (assert (! (not (= ^^f4 ^^object)) :named ax_322))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_323))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_324))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_325))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_326))
   (assert (! (not (= ^^f8 $inactive_union_owner_type)) :named ax_327))
   (assert (! (not (= ^^f8 $inactive_union_owner_type)) :named ax_328))
   (assert (! (not (= ^^f8 $primitive_emb_type)) :named ax_329))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_330))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_331))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_332))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_333))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_334))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_335))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_336))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_337))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_338))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_339))
   (assert (! (not (= ^^f8 ^$@volatile_version_t)) :named ax_340))
   (assert (! (not (= ^^f8 ^$@volatile_version_t)) :named ax_341))
   (assert (! (not (= ^^f8 ^^bool)) :named ax_342))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_343))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_344))
   (assert (! (not (= ^^f8 ^^f4)) :named ax_345))
   (assert (! (not (= ^^f8 ^^field)) :named ax_346))
   (assert (! (not (= ^^f8 ^^mathint)) :named ax_347))
   (assert (! (not (= ^^f8 ^^null_type)) :named ax_348))
   (assert (! (not (= ^^f8 ^^object)) :named ax_349))
   (assert (! (not (= ^^field $@distTp1)) :named ax_350))
   (assert (! (not (= ^^field $@distTp1)) :named ax_351))
   (assert (! (not (= ^^field $@distTp2)) :named ax_352))
   (assert (! (not (= ^^field $@distTp2)) :named ax_353))
   (assert (! (not (= ^^field $inactive_union_owner_type)) :named ax_354))
   (assert (! (not (= ^^field $inactive_union_owner_type)) :named ax_355))
   (assert (! (not (= ^^field $primitive_emb_type)) :named ax_356))
   (assert (! (not (= ^^field ^$@ptrset)) :named ax_357))
   (assert (! (not (= ^^field ^$@ptrset)) :named ax_358))
   (assert (! (not (= ^^field ^$@state_t)) :named ax_359))
   (assert (! (not (= ^^field ^$@state_t)) :named ax_360))
   (assert (! (not (= ^^field ^$@struct)) :named ax_361))
   (assert (! (not (= ^^field ^$@struct)) :named ax_362))
   (assert (! (not (= ^^field ^$@thread_id)) :named ax_363))
   (assert (! (not (= ^^field ^$@thread_id)) :named ax_364))
   (assert (! (not (= ^^field ^$@thread_id_t)) :named ax_365))
   (assert (! (not (= ^^field ^$@thread_id_t)) :named ax_366))
   (assert (! (not (= ^^field ^$@volatile_version_t)) :named ax_367))
   (assert (! (not (= ^^field ^$@volatile_version_t)) :named ax_368))
   (assert (! (not (= ^^field ^^bool)) :named ax_369))
   (assert (! (not (= ^^field ^^claim)) :named ax_370))
   (assert (! (not (= ^^field ^^claim)) :named ax_371))
   (assert (! (not (= ^^field ^^f4)) :named ax_372))
   (assert (! (not (= ^^field ^^f8)) :named ax_373))
   (assert (! (not (= ^^field ^^mathint)) :named ax_374))
   (assert (! (not (= ^^field ^^null_type)) :named ax_375))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_376))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_377))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_378))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_379))
   (assert (! (not (= ^^i1 $inactive_union_owner_type)) :named ax_380))
   (assert (! (not (= ^^i1 $inactive_union_owner_type)) :named ax_381))
   (assert (! (not (= ^^i1 $primitive_emb_type)) :named ax_382))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_383))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_384))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_385))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_386))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_387))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_388))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_389))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_390))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_391))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_392))
   (assert (! (not (= ^^i1 ^$@volatile_version_t)) :named ax_393))
   (assert (! (not (= ^^i1 ^$@volatile_version_t)) :named ax_394))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_395))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_396))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_397))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_398))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_399))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_400))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_401))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_402))
   (assert (! (not (= ^^i1 ^^field)) :named ax_403))
   (assert (! (not (= ^^i1 ^^field)) :named ax_404))
   (assert (! (not (= ^^i1 ^^i2)) :named ax_405))
   (assert (! (not (= ^^i1 ^^i4)) :named ax_406))
   (assert (! (not (= ^^i1 ^^i8)) :named ax_407))
   (assert (! (not (= ^^i1 ^^mathint)) :named ax_408))
   (assert (! (not (= ^^i1 ^^null_type)) :named ax_409))
   (assert (! (not (= ^^i1 ^^object)) :named ax_410))
   (assert (! (not (= ^^i1 ^^u1)) :named ax_411))
   (assert (! (not (= ^^i1 ^^u2)) :named ax_412))
   (assert (! (not (= ^^i1 ^^u4)) :named ax_413))
   (assert (! (not (= ^^i1 ^^u8)) :named ax_414))
   (assert (! (not (= ^^i1 ^^void)) :named ax_415))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_416))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_417))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_418))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_419))
   (assert (! (not (= ^^i2 $inactive_union_owner_type)) :named ax_420))
   (assert (! (not (= ^^i2 $inactive_union_owner_type)) :named ax_421))
   (assert (! (not (= ^^i2 $primitive_emb_type)) :named ax_422))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_423))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_424))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_425))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_426))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_427))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_428))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_429))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_430))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_431))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_432))
   (assert (! (not (= ^^i2 ^$@volatile_version_t)) :named ax_433))
   (assert (! (not (= ^^i2 ^$@volatile_version_t)) :named ax_434))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_435))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_436))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_437))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_438))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_439))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_440))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_441))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_442))
   (assert (! (not (= ^^i2 ^^field)) :named ax_443))
   (assert (! (not (= ^^i2 ^^field)) :named ax_444))
   (assert (! (not (= ^^i2 ^^i1)) :named ax_445))
   (assert (! (not (= ^^i2 ^^i4)) :named ax_446))
   (assert (! (not (= ^^i2 ^^i8)) :named ax_447))
   (assert (! (not (= ^^i2 ^^mathint)) :named ax_448))
   (assert (! (not (= ^^i2 ^^null_type)) :named ax_449))
   (assert (! (not (= ^^i2 ^^object)) :named ax_450))
   (assert (! (not (= ^^i2 ^^u1)) :named ax_451))
   (assert (! (not (= ^^i2 ^^u2)) :named ax_452))
   (assert (! (not (= ^^i2 ^^u4)) :named ax_453))
   (assert (! (not (= ^^i2 ^^u8)) :named ax_454))
   (assert (! (not (= ^^i2 ^^void)) :named ax_455))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_456))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_457))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_458))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_459))
   (assert (! (not (= ^^i4 $inactive_union_owner_type)) :named ax_460))
   (assert (! (not (= ^^i4 $inactive_union_owner_type)) :named ax_461))
   (assert (! (not (= ^^i4 $primitive_emb_type)) :named ax_462))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_463))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_464))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_465))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_466))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_467))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_468))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_469))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_470))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_471))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_472))
   (assert (! (not (= ^^i4 ^$@volatile_version_t)) :named ax_473))
   (assert (! (not (= ^^i4 ^$@volatile_version_t)) :named ax_474))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_475))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_476))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_477))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_478))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_479))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_480))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_481))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_482))
   (assert (! (not (= ^^i4 ^^field)) :named ax_483))
   (assert (! (not (= ^^i4 ^^field)) :named ax_484))
   (assert (! (not (= ^^i4 ^^i1)) :named ax_485))
   (assert (! (not (= ^^i4 ^^i2)) :named ax_486))
   (assert (! (not (= ^^i4 ^^i8)) :named ax_487))
   (assert (! (not (= ^^i4 ^^mathint)) :named ax_488))
   (assert (! (not (= ^^i4 ^^null_type)) :named ax_489))
   (assert (! (not (= ^^i4 ^^object)) :named ax_490))
   (assert (! (not (= ^^i4 ^^u1)) :named ax_491))
   (assert (! (not (= ^^i4 ^^u2)) :named ax_492))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_493))
   (assert (! (not (= ^^i4 ^^u8)) :named ax_494))
   (assert (! (not (= ^^i4 ^^void)) :named ax_495))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_496))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_497))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_498))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_499))
   (assert (! (not (= ^^i8 $inactive_union_owner_type)) :named ax_500))
   (assert (! (not (= ^^i8 $inactive_union_owner_type)) :named ax_501))
   (assert (! (not (= ^^i8 $primitive_emb_type)) :named ax_502))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_503))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_504))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_505))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_506))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_507))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_508))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_509))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_510))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_511))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_512))
   (assert (! (not (= ^^i8 ^$@volatile_version_t)) :named ax_513))
   (assert (! (not (= ^^i8 ^$@volatile_version_t)) :named ax_514))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_515))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_516))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_517))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_518))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_519))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_520))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_521))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_522))
   (assert (! (not (= ^^i8 ^^field)) :named ax_523))
   (assert (! (not (= ^^i8 ^^field)) :named ax_524))
   (assert (! (not (= ^^i8 ^^i1)) :named ax_525))
   (assert (! (not (= ^^i8 ^^i2)) :named ax_526))
   (assert (! (not (= ^^i8 ^^i4)) :named ax_527))
   (assert (! (not (= ^^i8 ^^mathint)) :named ax_528))
   (assert (! (not (= ^^i8 ^^null_type)) :named ax_529))
   (assert (! (not (= ^^i8 ^^object)) :named ax_530))
   (assert (! (not (= ^^i8 ^^u1)) :named ax_531))
   (assert (! (not (= ^^i8 ^^u2)) :named ax_532))
   (assert (! (not (= ^^i8 ^^u4)) :named ax_533))
   (assert (! (not (= ^^i8 ^^u8)) :named ax_534))
   (assert (! (not (= ^^i8 ^^void)) :named ax_535))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_536))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_537))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_538))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_539))
   (assert (! (not (= ^^mathint $inactive_union_owner_type)) :named ax_540))
   (assert (! (not (= ^^mathint $inactive_union_owner_type)) :named ax_541))
   (assert (! (not (= ^^mathint $primitive_emb_type)) :named ax_542))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_543))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_544))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_545))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_546))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_547))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_548))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_549))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_550))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_551))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_552))
   (assert (! (not (= ^^mathint ^$@volatile_version_t)) :named ax_553))
   (assert (! (not (= ^^mathint ^$@volatile_version_t)) :named ax_554))
   (assert (! (not (= ^^mathint ^^bool)) :named ax_555))
   (assert (! (not (= ^^mathint ^^claim)) :named ax_556))
   (assert (! (not (= ^^mathint ^^f4)) :named ax_557))
   (assert (! (not (= ^^mathint ^^f8)) :named ax_558))
   (assert (! (not (= ^^mathint ^^field)) :named ax_559))
   (assert (! (not (= ^^mathint ^^i1)) :named ax_560))
   (assert (! (not (= ^^mathint ^^i2)) :named ax_561))
   (assert (! (not (= ^^mathint ^^i4)) :named ax_562))
   (assert (! (not (= ^^mathint ^^i8)) :named ax_563))
   (assert (! (not (= ^^null_type $@distTp1)) :named ax_564))
   (assert (! (not (= ^^null_type $@distTp1)) :named ax_565))
   (assert (! (not (= ^^null_type $@distTp2)) :named ax_566))
   (assert (! (not (= ^^null_type $@distTp2)) :named ax_567))
   (assert (! (not (= ^^null_type $inactive_union_owner_type)) :named ax_568))
   (assert (! (not (= ^^null_type $inactive_union_owner_type)) :named ax_569))
   (assert (! (not (= ^^null_type $primitive_emb_type)) :named ax_570))
   (assert (! (not (= ^^null_type ^$@ptrset)) :named ax_571))
   (assert (! (not (= ^^null_type ^$@ptrset)) :named ax_572))
   (assert (! (not (= ^^null_type ^$@state_t)) :named ax_573))
   (assert (! (not (= ^^null_type ^$@state_t)) :named ax_574))
   (assert (! (not (= ^^null_type ^$@struct)) :named ax_575))
   (assert (! (not (= ^^null_type ^$@struct)) :named ax_576))
   (assert (! (not (= ^^null_type ^$@thread_id)) :named ax_577))
   (assert (! (not (= ^^null_type ^$@thread_id)) :named ax_578))
   (assert (! (not (= ^^null_type ^$@thread_id_t)) :named ax_579))
   (assert (! (not (= ^^null_type ^$@thread_id_t)) :named ax_580))
   (assert (! (not (= ^^null_type ^$@volatile_version_t)) :named ax_581))
   (assert (! (not (= ^^null_type ^$@volatile_version_t)) :named ax_582))
   (assert (! (not (= ^^null_type ^^bool)) :named ax_583))
   (assert (! (not (= ^^null_type ^^claim)) :named ax_584))
   (assert (! (not (= ^^null_type ^^claim)) :named ax_585))
   (assert (! (not (= ^^null_type ^^f4)) :named ax_586))
   (assert (! (not (= ^^null_type ^^f8)) :named ax_587))
   (assert (! (not (= ^^null_type ^^field)) :named ax_588))
   (assert (! (not (= ^^null_type ^^i1)) :named ax_589))
   (assert (! (not (= ^^null_type ^^i2)) :named ax_590))
   (assert (! (not (= ^^null_type ^^i4)) :named ax_591))
   (assert (! (not (= ^^null_type ^^i8)) :named ax_592))
   (assert (! (not (= ^^null_type ^^mathint)) :named ax_593))
   (assert (! (not (= ^^null_type ^^mathint)) :named ax_594))
   (assert (! (not (= ^^object $@distTp1)) :named ax_595))
   (assert (! (not (= ^^object $@distTp1)) :named ax_596))
   (assert (! (not (= ^^object $@distTp2)) :named ax_597))
   (assert (! (not (= ^^object $@distTp2)) :named ax_598))
   (assert (! (not (= ^^object $inactive_union_owner_type)) :named ax_599))
   (assert (! (not (= ^^object $inactive_union_owner_type)) :named ax_600))
   (assert (! (not (= ^^object $primitive_emb_type)) :named ax_601))
   (assert (! (not (= ^^object ^$@ptrset)) :named ax_602))
   (assert (! (not (= ^^object ^$@ptrset)) :named ax_603))
   (assert (! (not (= ^^object ^$@state_t)) :named ax_604))
   (assert (! (not (= ^^object ^$@state_t)) :named ax_605))
   (assert (! (not (= ^^object ^$@struct)) :named ax_606))
   (assert (! (not (= ^^object ^$@struct)) :named ax_607))
   (assert (! (not (= ^^object ^$@thread_id)) :named ax_608))
   (assert (! (not (= ^^object ^$@thread_id)) :named ax_609))
   (assert (! (not (= ^^object ^$@thread_id_t)) :named ax_610))
   (assert (! (not (= ^^object ^$@thread_id_t)) :named ax_611))
   (assert (! (not (= ^^object ^$@volatile_version_t)) :named ax_612))
   (assert (! (not (= ^^object ^$@volatile_version_t)) :named ax_613))
   (assert (! (not (= ^^object ^^bool)) :named ax_614))
   (assert (! (not (= ^^object ^^claim)) :named ax_615))
   (assert (! (not (= ^^object ^^claim)) :named ax_616))
   (assert (! (not (= ^^object ^^f4)) :named ax_617))
   (assert (! (not (= ^^object ^^f8)) :named ax_618))
   (assert (! (not (= ^^object ^^field)) :named ax_619))
   (assert (! (not (= ^^object ^^field)) :named ax_620))
   (assert (! (not (= ^^object ^^i1)) :named ax_621))
   (assert (! (not (= ^^object ^^i2)) :named ax_622))
   (assert (! (not (= ^^object ^^i4)) :named ax_623))
   (assert (! (not (= ^^object ^^i8)) :named ax_624))
   (assert (! (not (= ^^object ^^mathint)) :named ax_625))
   (assert (! (not (= ^^object ^^mathint)) :named ax_626))
   (assert (! (not (= ^^object ^^null_type)) :named ax_627))
   (assert (! (not (= ^^object ^^null_type)) :named ax_628))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_629))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_630))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_631))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_632))
   (assert (! (not (= ^^u1 $inactive_union_owner_type)) :named ax_633))
   (assert (! (not (= ^^u1 $inactive_union_owner_type)) :named ax_634))
   (assert (! (not (= ^^u1 $primitive_emb_type)) :named ax_635))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_636))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_637))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_638))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_639))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_640))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_641))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_642))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_643))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_644))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_645))
   (assert (! (not (= ^^u1 ^$@volatile_version_t)) :named ax_646))
   (assert (! (not (= ^^u1 ^$@volatile_version_t)) :named ax_647))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_648))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_649))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_650))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_651))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_652))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_653))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_654))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_655))
   (assert (! (not (= ^^u1 ^^field)) :named ax_656))
   (assert (! (not (= ^^u1 ^^field)) :named ax_657))
   (assert (! (not (= ^^u1 ^^i1)) :named ax_658))
   (assert (! (not (= ^^u1 ^^i2)) :named ax_659))
   (assert (! (not (= ^^u1 ^^i4)) :named ax_660))
   (assert (! (not (= ^^u1 ^^i8)) :named ax_661))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_662))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_663))
   (assert (! (not (= ^^u1 ^^null_type)) :named ax_664))
   (assert (! (not (= ^^u1 ^^null_type)) :named ax_665))
   (assert (! (not (= ^^u1 ^^object)) :named ax_666))
   (assert (! (not (= ^^u1 ^^object)) :named ax_667))
   (assert (! (not (= ^^u1 ^^u2)) :named ax_668))
   (assert (! (not (= ^^u1 ^^u4)) :named ax_669))
   (assert (! (not (= ^^u1 ^^u8)) :named ax_670))
   (assert (! (not (= ^^u1 ^^void)) :named ax_671))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_672))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_673))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_674))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_675))
   (assert (! (not (= ^^u2 $inactive_union_owner_type)) :named ax_676))
   (assert (! (not (= ^^u2 $inactive_union_owner_type)) :named ax_677))
   (assert (! (not (= ^^u2 $primitive_emb_type)) :named ax_678))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_679))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_680))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_681))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_682))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_683))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_684))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_685))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_686))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_687))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_688))
   (assert (! (not (= ^^u2 ^$@volatile_version_t)) :named ax_689))
   (assert (! (not (= ^^u2 ^$@volatile_version_t)) :named ax_690))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_691))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_692))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_693))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_694))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_695))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_696))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_697))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_698))
   (assert (! (not (= ^^u2 ^^field)) :named ax_699))
   (assert (! (not (= ^^u2 ^^field)) :named ax_700))
   (assert (! (not (= ^^u2 ^^i1)) :named ax_701))
   (assert (! (not (= ^^u2 ^^i2)) :named ax_702))
   (assert (! (not (= ^^u2 ^^i4)) :named ax_703))
   (assert (! (not (= ^^u2 ^^i8)) :named ax_704))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_705))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_706))
   (assert (! (not (= ^^u2 ^^null_type)) :named ax_707))
   (assert (! (not (= ^^u2 ^^null_type)) :named ax_708))
   (assert (! (not (= ^^u2 ^^object)) :named ax_709))
   (assert (! (not (= ^^u2 ^^object)) :named ax_710))
   (assert (! (not (= ^^u2 ^^u1)) :named ax_711))
   (assert (! (not (= ^^u2 ^^u4)) :named ax_712))
   (assert (! (not (= ^^u2 ^^u8)) :named ax_713))
   (assert (! (not (= ^^u2 ^^void)) :named ax_714))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_715))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_716))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_717))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_718))
   (assert (! (not (= ^^u4 $inactive_union_owner_type)) :named ax_719))
   (assert (! (not (= ^^u4 $inactive_union_owner_type)) :named ax_720))
   (assert (! (not (= ^^u4 $primitive_emb_type)) :named ax_721))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_722))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_723))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_724))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_725))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_726))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_727))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_728))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_729))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_730))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_731))
   (assert (! (not (= ^^u4 ^$@volatile_version_t)) :named ax_732))
   (assert (! (not (= ^^u4 ^$@volatile_version_t)) :named ax_733))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_734))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_735))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_736))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_737))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_738))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_739))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_740))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_741))
   (assert (! (not (= ^^u4 ^^field)) :named ax_742))
   (assert (! (not (= ^^u4 ^^field)) :named ax_743))
   (assert (! (not (= ^^u4 ^^i1)) :named ax_744))
   (assert (! (not (= ^^u4 ^^i2)) :named ax_745))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_746))
   (assert (! (not (= ^^u4 ^^i8)) :named ax_747))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_748))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_749))
   (assert (! (not (= ^^u4 ^^null_type)) :named ax_750))
   (assert (! (not (= ^^u4 ^^null_type)) :named ax_751))
   (assert (! (not (= ^^u4 ^^object)) :named ax_752))
   (assert (! (not (= ^^u4 ^^object)) :named ax_753))
   (assert (! (not (= ^^u4 ^^u1)) :named ax_754))
   (assert (! (not (= ^^u4 ^^u2)) :named ax_755))
   (assert (! (not (= ^^u4 ^^u8)) :named ax_756))
   (assert (! (not (= ^^u4 ^^void)) :named ax_757))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_758))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_759))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_760))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_761))
   (assert (! (not (= ^^u8 $inactive_union_owner_type)) :named ax_762))
   (assert (! (not (= ^^u8 $inactive_union_owner_type)) :named ax_763))
   (assert (! (not (= ^^u8 $primitive_emb_type)) :named ax_764))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_765))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_766))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_767))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_768))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_769))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_770))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_771))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_772))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_773))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_774))
   (assert (! (not (= ^^u8 ^$@volatile_version_t)) :named ax_775))
   (assert (! (not (= ^^u8 ^$@volatile_version_t)) :named ax_776))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_777))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_778))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_779))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_780))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_781))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_782))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_783))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_784))
   (assert (! (not (= ^^u8 ^^field)) :named ax_785))
   (assert (! (not (= ^^u8 ^^field)) :named ax_786))
   (assert (! (not (= ^^u8 ^^i1)) :named ax_787))
   (assert (! (not (= ^^u8 ^^i2)) :named ax_788))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_789))
   (assert (! (not (= ^^u8 ^^i8)) :named ax_790))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_791))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_792))
   (assert (! (not (= ^^u8 ^^null_type)) :named ax_793))
   (assert (! (not (= ^^u8 ^^null_type)) :named ax_794))
   (assert (! (not (= ^^u8 ^^object)) :named ax_795))
   (assert (! (not (= ^^u8 ^^object)) :named ax_796))
   (assert (! (not (= ^^u8 ^^u1)) :named ax_797))
   (assert (! (not (= ^^u8 ^^u2)) :named ax_798))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_799))
   (assert (! (not (= ^^u8 ^^void)) :named ax_800))
   (assert (! (not (= ^^void $@distTp1)) :named ax_801))
   (assert (! (not (= ^^void $@distTp1)) :named ax_802))
   (assert (! (not (= ^^void $@distTp2)) :named ax_803))
   (assert (! (not (= ^^void $@distTp2)) :named ax_804))
   (assert (! (not (= ^^void $inactive_union_owner_type)) :named ax_805))
   (assert (! (not (= ^^void $inactive_union_owner_type)) :named ax_806))
   (assert (! (not (= ^^void $primitive_emb_type)) :named ax_807))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_808))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_809))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_810))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_811))
   (assert (! (not (= ^^void ^$@struct)) :named ax_812))
   (assert (! (not (= ^^void ^$@struct)) :named ax_813))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_814))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_815))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_816))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_817))
   (assert (! (not (= ^^void ^$@volatile_version_t)) :named ax_818))
   (assert (! (not (= ^^void ^$@volatile_version_t)) :named ax_819))
   (assert (! (not (= ^^void ^^bool)) :named ax_820))
   (assert (! (not (= ^^void ^^bool)) :named ax_821))
   (assert (! (not (= ^^void ^^claim)) :named ax_822))
   (assert (! (not (= ^^void ^^claim)) :named ax_823))
   (assert (! (not (= ^^void ^^f4)) :named ax_824))
   (assert (! (not (= ^^void ^^f4)) :named ax_825))
   (assert (! (not (= ^^void ^^f8)) :named ax_826))
   (assert (! (not (= ^^void ^^f8)) :named ax_827))
   (assert (! (not (= ^^void ^^field)) :named ax_828))
   (assert (! (not (= ^^void ^^field)) :named ax_829))
   (assert (! (not (= ^^void ^^i1)) :named ax_830))
   (assert (! (not (= ^^void ^^i2)) :named ax_831))
   (assert (! (not (= ^^void ^^i4)) :named ax_832))
   (assert (! (not (= ^^void ^^i8)) :named ax_833))
   (assert (! (not (= ^^void ^^mathint)) :named ax_834))
   (assert (! (not (= ^^void ^^mathint)) :named ax_835))
   (assert (! (not (= ^^void ^^null_type)) :named ax_836))
   (assert (! (not (= ^^void ^^null_type)) :named ax_837))
   (assert (! (not (= ^^void ^^object)) :named ax_838))
   (assert (! (not (= ^^void ^^object)) :named ax_839))
   (assert (! (not (= ^^void ^^u1)) :named ax_840))
   (assert (! (not (= ^^void ^^u2)) :named ax_841))
   (assert (! (not (= ^^void ^^u4)) :named ax_842))
   (assert (! (not (= ^^void ^^u8)) :named ax_843))
   (assert (! (not (= cf@fsum cf@lambda@2)) :named ax_844))
   (assert (! (not (= cf@fsum cf@lambda@3)) :named ax_845))
   (assert (! (not (= cf@fsum cf@lambda@4)) :named ax_846))
   (assert (! (not (= cf@lambda@2 cf@fsum)) :named ax_847))
   (assert (! (not (= cf@lambda@3 cf@fsum)) :named ax_848))
   (assert (! (not (= cf@lambda@3 cf@lambda@2)) :named ax_849))
   (assert (! (not (= cf@lambda@3 cf@lambda@2)) :named ax_850))
   (assert (! (not (= cf@lambda@4 cf@fsum)) :named ax_851))
   (assert (! (not (= cf@lambda@4 cf@lambda@2)) :named ax_852))
   (assert (! (not (= cf@lambda@4 cf@lambda@2)) :named ax_853))
   (assert (! (not (= cf@lambda@4 cf@lambda@3)) :named ax_854))
   (assert (! (not (= cf@lambda@4 cf@lambda@3)) :named ax_855))

;Program
(assert (not
(let (($@hash@break_5_assertion (and
    (= SL@k@0 SP@j)
)))
(let ((anon01_Then_assertion (and
    (<= (F@fsum SP@i SP@map) (F@fsum SL@k@1 SP@map))
)))
(let ((anon9_assertion (and
    (<= (F@fsum SP@i SP@map) (F@fsum SP@i SP@map))
)))
(let ((GeneratedUnifiedExit_assertion (and
    (<= (F@fsum SP@i SP@map) (F@fsum SP@j SP@map))
)))
(let ((anon01_Then@1_assertion (and
    (<= SP@i SL@k@1)
)))
(let ((anon9@1_assertion (and
    (<= SP@i SP@i)
)))
(let ((anon01_Then@2_assertion (and
    (<= SL@k@1 SP@j)
)))
(let ((anon9@2_assertion (and
    (<= SP@i SP@j)
)))
(let ((GeneratedUnifiedExit (=> (and true
  )
    GeneratedUnifiedExit_assertion
)))
(let ((anon01_Then@2 (=> (and true
    (<= SP@i SL@k@1)
  )
    anon01_Then@2_assertion
)))
(let (($@hash@break_5@1 (=> (and true
    (= SL@k@0 SP@j)
    (= SL@k@0 SP@j)
  )
    GeneratedUnifiedExit
)))
(let ((anon01_Then@1 (=> (and true
    (<= (F@fsum SP@i SP@map) (F@fsum SL@k@1 SP@map))
  )(and 
    anon01_Then@1_assertion
    anon01_Then@2
))))
(let (($@hash@break_5 (=> (and true
  )(and 
    $@hash@break_5_assertion
    $@hash@break_5@1
))))
(let ((anon01_Then (=> (and true
    ($local_value_is $s $@tok$1^18.17 $@loc.k SL@k@1 ^^mathint)
    (< SL@k@0 SP@j)
    (= SL@k@1 (+ SL@k@0 1))
  )(and 
    anon01_Then_assertion
    anon01_Then@1
))))
(let ((anon01_Else (=> (and true
    (<= SP@j SL@k@0)
  )
    $@hash@break_5
)))
(let ((anon00_LoopBody (=> (and true
    ($call_transition $s $s)
    ($full_stop $s)
    ($good_state_ext $@tok$1^18.3 $s)
    ($local_value_is $s $@tok$1^18.3 $@loc.j SP@j ^^mathint)
    ($local_value_is $s $@tok$1^18.3 $@loc.k SL@k@0 ^^mathint)
    ($modifies $s $s $set_empty)
    (<= ($current_timestamp $s) ($current_timestamp $s))
    (= ($f_closed $s) ($f_closed $s))
    (= ($f_owner $s) ($f_owner $s))
    (= ($f_timestamp $s) ($f_timestamp $s))
    (= ($roots $s) ($roots $s))
  )
    (and anon01_Else anon01_Then)
)))
(let ((anon00_LoopHead (=> (and true
    (<= (F@fsum SP@i SP@map) (F@fsum SL@k@0 SP@map))
    (<= 0 SL@k@0)
    (<= SL@k@0 SP@j)
    (<= SP@i SL@k@0)
  )
    anon00_LoopBody
)))
(let ((anon9@3 (=> (and true
    (<= SP@i SP@j)
  )
    anon00_LoopHead
)))
(let ((anon9@2 (=> (and true
    (<= SP@i SP@i)
  )(and 
    anon9@2_assertion
    anon9@3
))))
(let ((anon9@1 (=> (and true
    (<= (F@fsum SP@i SP@map) (F@fsum SP@i SP@map))
  )(and 
    anon9@1_assertion
    anon9@2
))))
(let ((anon9 (=> (and true
    ($full_stop $s)
    ($function_entry $s)
    ($good_state_ext $@tok$1^11.39 $s)
    ($local_value_is $s $@tok$1^11.39 $@loc.i SP@i ^^mathint)
    ($local_value_is $s $@tok$1^11.39 $@loc.j SP@j ^^mathint)
    ($local_value_is $s $@tok$1^11.39 $@loc.map ($map_t..^^mathint.^^mathint_to_int SP@map) ($map_t ^^mathint ^^mathint))
    ($local_value_is $s $@tok$1^17.25 $@loc.k SL@k ^^mathint)
    ($local_value_is $s $@tok$1^17.25 $@loc.k SP@i ^^mathint)
    (= $@wrTime$1^11.39 ($current_timestamp $s))
    (= ($writes_at $@wrTime$1^11.39) lambda@14)
    (= 2147483647 $decreases_level)
    (forall( (|f_$22| $pure_function))(!(< ($frame_level |f_$22|) $current_frame_level)  :pattern ( ($frame_level |f_$22|))))
  )(and 
    anon9_assertion
    anon9@1
))))
(let ((PreconditionGeneratedEntry (=> (and true
    (<= 0 SP@i)
    (<= SP@i SP@j)
    (forall( (|Q#k$1^14.27#tc1| Int))(!(=> (and (<= 0 |Q#k$1^14.27#tc1|) (< |Q#k$1^14.27#tc1| SP@j)) (<= 0 ($select.$map_t..^^mathint.^^mathint SP@map |Q#k$1^14.27#tc1|)))  :weight  10 :pattern ( ($select.$map_t..^^mathint.^^mathint SP@map |Q#k$1^14.27#tc1|))))
  )
    anon9
)))
(let (($start (=> (and true
    ($file_name_is 1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p1_v2.c)
    ($function_arg_type cf@fsum 0 ^^mathint)
    ($function_arg_type cf@fsum 1 ^^mathint)
    ($function_arg_type cf@fsum 2 ($map_t ^^mathint ^^mathint))
    ($function_arg_type cf@lambda@2 0 ($map_t ^^mathint ^^mathint))
    ($function_arg_type cf@lambda@2 1 ($ptr_to ^^u4))
    ($function_arg_type cf@lambda@2 2 ^^u4)
    ($function_arg_type cf@lambda@3 0 ($map_t ^^mathint ^^mathint))
    ($function_arg_type cf@lambda@3 1 ($ptr_to ^^u4))
    ($function_arg_type cf@lambda@3 2 ^^u4)
    ($function_arg_type cf@lambda@4 0 ($map_t ^^mathint ^^mathint))
    ($function_arg_type cf@lambda@4 1 ($ptr_to ^^u4))
    ($function_arg_type cf@lambda@4 2 ^^u4)
    ($good_state ($vs_state $struct_zero))
    ($in_range_phys_ptr $null)
    ($in_range_spec_ptr $inactive_union_owner)
    ($in_range_spec_ptr $me)
    ($in_range_spec_ptr $null)
    ($is_math_type ^$@ptrset)
    ($is_math_type ^$@state_t)
    ($is_math_type ^$@struct)
    ($is_math_type ^$@thread_id)
    ($is_math_type ^^field)
    ($is_math_type ^^mathint)
    ($is_math_type ^^null_type)
    ($is_math_type ^^object)
    ($is_primitive ^$@ptrset)
    ($is_primitive ^$@state_t)
    ($is_primitive ^$@struct)
    ($is_primitive ^$@thread_id)
    ($is_primitive ^^bool)
    ($is_primitive ^^f4)
    ($is_primitive ^^f8)
    ($is_primitive ^^field)
    ($is_primitive ^^i1)
    ($is_primitive ^^i2)
    ($is_primitive ^^i4)
    ($is_primitive ^^i8)
    ($is_primitive ^^mathint)
    ($is_primitive ^^null_type)
    ($is_primitive ^^object)
    ($is_primitive ^^u1)
    ($is_primitive ^^u2)
    ($is_primitive ^^u4)
    ($is_primitive ^^u8)
    ($is_primitive ^^void)
    ($is_proper $inactive_union_owner)
    ($is_proper $me)
    ($type_code_is 1 ^^mathint)
    ($type_code_is 2 ^^u4)
    ($type_code_is 3 ^$@state_t)
    (= $@distTp1 ($map_t ^^mathint ^^mathint))
    (= $@distTp2 ($ptr_to ^^u4))
    (= $arch_ptr_size 8)
    (= $arch_spec_ptr_start $max.u8)
    (= $max.i1 127)
    (= $max.i2 32767)
    (= $max.i4 (- (* 65536 32768) 1))
    (= $max.i8 (- (* (* (* 65536 65536) 65536) 32768) 1))
    (= $max.u1 255)
    (= $max.u2 65535)
    (= $max.u4 (- (* 65536 65536) 1))
    (= $max.u8 (- (* (* (* 65536 65536) 65536) 65536) 1))
    (= $min.i1 (- 0 128))
    (= $min.i2 (- 0 32768))
    (= $min.i4 (- 0 (* 65536 32768)))
    (= $min.i8 (- 0 (* (* (* 65536 65536) 65536) 32768)))
    (= $no_claim ($phys_ptr_cast $null ^^claim))
    (= $set_empty lambda@14)
    (= ($_pow2 0) 1)
    (= ($_pow2 1) 2)
    (= ($_pow2 10) 1024)
    (= ($_pow2 11) 2048)
    (= ($_pow2 12) 4096)
    (= ($_pow2 13) 8192)
    (= ($_pow2 14) 16384)
    (= ($_pow2 15) 32768)
    (= ($_pow2 16) 65536)
    (= ($_pow2 17) 131072)
    (= ($_pow2 18) 262144)
    (= ($_pow2 19) 524288)
    (= ($_pow2 2) 4)
    (= ($_pow2 20) 1048576)
    (= ($_pow2 21) 2097152)
    (= ($_pow2 22) 4194304)
    (= ($_pow2 23) 8388608)
    (= ($_pow2 24) 16777216)
    (= ($_pow2 25) 33554432)
    (= ($_pow2 26) 67108864)
    (= ($_pow2 27) 134217728)
    (= ($_pow2 28) 268435456)
    (= ($_pow2 29) 536870912)
    (= ($_pow2 3) 8)
    (= ($_pow2 30) 1073741824)
    (= ($_pow2 31) 2147483648)
    (= ($_pow2 32) 4294967296)
    (= ($_pow2 33) 8589934592)
    (= ($_pow2 34) 17179869184)
    (= ($_pow2 35) 34359738368)
    (= ($_pow2 36) 68719476736)
    (= ($_pow2 37) 137438953472)
    (= ($_pow2 38) 274877906944)
    (= ($_pow2 39) 549755813888)
    (= ($_pow2 4) 16)
    (= ($_pow2 40) 1099511627776)
    (= ($_pow2 41) 2199023255552)
    (= ($_pow2 42) 4398046511104)
    (= ($_pow2 43) 8796093022208)
    (= ($_pow2 44) 17592186044416)
    (= ($_pow2 45) 35184372088832)
    (= ($_pow2 46) 70368744177664)
    (= ($_pow2 47) 140737488355328)
    (= ($_pow2 48) 281474976710656)
    (= ($_pow2 49) 562949953421312)
    (= ($_pow2 5) 32)
    (= ($_pow2 50) 1125899906842624)
    (= ($_pow2 51) 2251799813685248)
    (= ($_pow2 52) 4503599627370496)
    (= ($_pow2 53) 9007199254740992)
    (= ($_pow2 54) 18014398509481984)
    (= ($_pow2 55) 36028797018963968)
    (= ($_pow2 56) 72057594037927936)
    (= ($_pow2 57) 144115188075855872)
    (= ($_pow2 58) 288230376151711744)
    (= ($_pow2 59) 576460752303423488)
    (= ($_pow2 6) 64)
    (= ($_pow2 60) 1152921504606846976)
    (= ($_pow2 61) 2305843009213693952)
    (= ($_pow2 62) 4611686018427387904)
    (= ($_pow2 63) 9223372036854775808)
    (= ($_pow2 64) 18446744073709551616)
    (= ($_pow2 7) 128)
    (= ($_pow2 8) 256)
    (= ($_pow2 9) 512)
    (= ($addr $null) 0)
    (= ($as_in_range_t ^^i1) ^^i1)
    (= ($as_in_range_t ^^i2) ^^i2)
    (= ($as_in_range_t ^^i4) ^^i4)
    (= ($as_in_range_t ^^i8) ^^i8)
    (= ($as_in_range_t ^^u1) ^^u1)
    (= ($as_in_range_t ^^u2) ^^u2)
    (= ($as_in_range_t ^^u4) ^^u4)
    (= ($as_in_range_t ^^u8) ^^u8)
    (= ($field $inactive_union_owner) ($f_root $inactive_union_owner_type))
    (= ($field $me) ($f_root ^$@thread_id_t))
    (= ($int_to_map_t..^^mathint.^^mathint 0) $zero.$map_t..^^mathint.^^mathint)
    (= ($is_claimable $inactive_union_owner_type) false)
    (= ($is_claimable ^$@thread_id_t) false)
    (= ($is_claimable ^$@volatile_version_t) false)
    (= ($is_claimable ^^claim) true)
    (= ($set_cardinality $set_empty) 0)
    (= ($sizeof $inactive_union_owner_type) 1)
    (= ($sizeof ^$@ptrset) 1)
    (= ($sizeof ^$@state_t) 1)
    (= ($sizeof ^$@struct) 1)
    (= ($sizeof ^$@thread_id) 1)
    (= ($sizeof ^$@thread_id_t) 1)
    (= ($sizeof ^$@volatile_version_t) 1)
    (= ($sizeof ^^bool) 1)
    (= ($sizeof ^^claim) 1)
    (= ($sizeof ^^f4) 4)
    (= ($sizeof ^^f8) 8)
    (= ($sizeof ^^field) 1)
    (= ($sizeof ^^i1) 1)
    (= ($sizeof ^^i2) 2)
    (= ($sizeof ^^i4) 4)
    (= ($sizeof ^^i8) 8)
    (= ($sizeof ^^mathint) 1)
    (= ($sizeof ^^null_type) 1)
    (= ($sizeof ^^object) 1)
    (= ($sizeof ^^u1) 1)
    (= ($sizeof ^^u2) 2)
    (= ($sizeof ^^u4) 4)
    (= ($sizeof ^^u8) 8)
    (= ($sizeof ^^void) 1)
    (= ($type_branch $inactive_union_owner_type) $ctype_flat)
    (= ($type_branch ^$@ptrset) $ctype_flat)
    (= ($type_branch ^$@state_t) $ctype_flat)
    (= ($type_branch ^$@struct) $ctype_flat)
    (= ($type_branch ^$@thread_id) $ctype_flat)
    (= ($type_branch ^$@thread_id_t) $ctype_flat)
    (= ($type_branch ^$@volatile_version_t) $ctype_flat)
    (= ($type_branch ^^bool) $ctype_flat)
    (= ($type_branch ^^claim) $ctype_flat)
    (= ($type_branch ^^f4) $ctype_flat)
    (= ($type_branch ^^f8) $ctype_flat)
    (= ($type_branch ^^field) $ctype_flat)
    (= ($type_branch ^^i1) $ctype_flat)
    (= ($type_branch ^^i2) $ctype_flat)
    (= ($type_branch ^^i4) $ctype_flat)
    (= ($type_branch ^^i8) $ctype_flat)
    (= ($type_branch ^^mathint) $ctype_flat)
    (= ($type_branch ^^null_type) $ctype_flat)
    (= ($type_branch ^^object) $ctype_flat)
    (= ($type_branch ^^u1) $ctype_flat)
    (= ($type_branch ^^u2) $ctype_flat)
    (= ($type_branch ^^u4) $ctype_flat)
    (= ($type_branch ^^u8) $ctype_flat)
    (= ($type_branch ^^void) $ctype_flat)
    (= ($unchecked ^^u4 (- 0 1)) $max.u4)
    (= ($unchecked ^^u4 (+ $max.u4 1)) 0)
    (= ($unchecked ^^u8 (- 0 1)) $max.u8)
    (= ($unchecked ^^u8 (+ $max.u8 1)) 0)
    (= (and (not $is_stuttering_check) (not $is_unwrap_check)) (and (not $is_stuttering_check) (not $is_unwrap_check)))
    (=> (= $arch_ptr_size 4) (= $arch_ptr_type ^^u4))
    (=> (= $arch_ptr_size 8) (= $arch_ptr_type ^^u8))
    (=> (>= $arch_ptr_size 8) (forall( (|k_$3| Int))(!(=> (>= |k_$3| 0) (= ($addr ($i8_to_ptr |k_$3|)) |k_$3|))  :pattern ( ($i8_to_ptr |k_$3|)))))
    (=> (>= $arch_ptr_size 8) (forall( (|k| Int))(!(= ($addr ($u8_to_ptr |k|)) |k|)  :pattern ( ($u8_to_ptr |k|)))))
    (forall( (|#a_$0| $@Map@@$ptr@To@Bool@@) (|#b_$0| $@Map@@$ptr@To@Bool@@))(!(=> ($set_eq |#a_$0| |#b_$0|) (= |#a_$0| |#b_$0|))  :pattern ( ($set_eq |#a_$0| |#b_$0|))))
    (forall( (|#a| $@Map@@$ptr@To@Bool@@) (|#b| $@Map@@$ptr@To@Bool@@))(!(=> (forall( (|#o_$0| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ |#a| |#o_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ |#b| |#o_$0|))  :pattern ( ($dont_instantiate |#o_$0|)))) ($set_eq |#a| |#b|))  :pattern ( ($set_eq |#a| |#b|))))
    (forall( (|#n_$0| $ctype))(!(and (= ($type_project_0 ($spec_ptr_to |#n_$0|)) |#n_$0|) (= ($type_branch ($spec_ptr_to |#n_$0|)) $ctype_spec_ptr))  :pattern ( ($spec_ptr_to |#n_$0|))))
    (forall( (|#n_$1| $ctype))(!(= ($sizeof ($ptr_to |#n_$1|)) $arch_ptr_size)  :pattern ( ($ptr_to |#n_$1|))))
    (forall( (|#n_$2| $ctype))(!(= ($sizeof ($ptr_to |#n_$2|)) $arch_ptr_size)  :pattern ( ($spec_ptr_to |#n_$2|))))
    (forall( (|#n_$3| $ctype))(!($is_primitive ($ptr_to |#n_$3|))  :pattern ( ($ptr_to |#n_$3|))))
    (forall( (|#n_$4| $ctype))(!($is_primitive ($spec_ptr_to |#n_$4|))  :pattern ( ($spec_ptr_to |#n_$4|))))
    (forall( (|#n_$5| $ctype))(!(=> ($is_primitive |#n_$5|) (not ($is_claimable |#n_$5|)))  :pattern ( ($is_primitive |#n_$5|))))
    (forall( (|#n| $ctype))(!(and (= ($type_project_0 ($ptr_to |#n|)) |#n|) (= ($type_branch ($ptr_to |#n|)) $ctype_ptr))  :pattern ( ($ptr_to |#n|))))
    (forall( (|#o_$1| $ptr))(!(MapRead$$@Map@@$ptr@To@Bool@@$ $set_universe |#o_$1|)  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ $set_universe |#o_$1|))))
    (forall( (|#o| $ptr) (|#f| $ptr) (|S_$14| $state))(= (and ($is_primitive ($field_type ($field |#f|))) (= ($emb0 |#f|) |#o|)) (and ($is_primitive ($field_type ($field |#f|))) (= ($emb0 |#f|) |#o|))))
    (forall( (|#p_$7| $ptr))(= ($full_extent |#p_$7|) ($full_extent |#p_$7|)))
    (forall( (|#p| $ptr) (|#l| $ptr) (|S_$3| $state))(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$3| |#l|) |#p|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$3| |#l|) |#p|)))
    (forall( (|#r_$0| $ctype) (|#d_$0| $ctype))(!($is_primitive ($map_t |#r_$0| |#d_$0|))  :pattern ( ($map_t |#r_$0| |#d_$0|))))
    (forall( (|#r| $ctype) (|#d| $ctype))(!(and (and (= ($map_domain ($map_t |#r| |#d|)) |#d|) (= ($map_range ($map_t |#r| |#d|)) |#r|)) (= ($type_branch ($map_t |#r| |#d|)) $ctype_map))  :pattern ( ($map_t |#r| |#d|))))
    (forall( (|#s0_$0| $state) (|#s1_$4| $state) (|#l1_$1| $ptr) (|#l0_$1| Int))(!(=> ($eq.$map_t..^^mathint.^^mathint (F@lambda@3 |#s0_$0| |#l1_$1| |#l0_$1|) (F@lambda@3 |#s1_$4| |#l1_$1| |#l0_$1|)) (= (F@lambda@3 |#s0_$0| |#l1_$1| |#l0_$1|) (F@lambda@3 |#s1_$4| |#l1_$1| |#l0_$1|)))  :weight  5 :pattern ( ($trans_call_transition |#s0_$0| |#s1_$4|) (F@lambda@3 |#s0_$0| |#l1_$1| |#l0_$1|) (F@lambda@3 |#s1_$4| |#l1_$1| |#l0_$1|))))
    (forall( (|#s0_$1| $state) (|#s1_$5| $state) (|#l1_$3| $ptr) (|#l0_$3| Int))(!(=> ($eq.$map_t..^^mathint.^^mathint (F@lambda@2 |#s0_$1| |#l1_$3| |#l0_$3|) (F@lambda@2 |#s1_$5| |#l1_$3| |#l0_$3|)) (= (F@lambda@2 |#s0_$1| |#l1_$3| |#l0_$3|) (F@lambda@2 |#s1_$5| |#l1_$3| |#l0_$3|)))  :weight  5 :pattern ( ($trans_call_transition |#s0_$1| |#s1_$5|) (F@lambda@2 |#s0_$1| |#l1_$3| |#l0_$3|) (F@lambda@2 |#s1_$5| |#l1_$3| |#l0_$3|))))
    (forall( (|#s0| $state) (|#s1_$3| $state) (|#l1| $ptr) (|#l0| Int))(!(=> ($eq.$map_t..^^mathint.^^mathint (F@lambda@4 |#s0| |#l1| |#l0|) (F@lambda@4 |#s1_$3| |#l1| |#l0|)) (= (F@lambda@4 |#s0| |#l1| |#l0|) (F@lambda@4 |#s1_$3| |#l1| |#l0|)))  :weight  5 :pattern ( ($trans_call_transition |#s0| |#s1_$3|) (F@lambda@4 |#s0| |#l1| |#l0|) (F@lambda@4 |#s1_$3| |#l1| |#l0|))))
    (forall( (|#t_$0| $ctype) (|#p_$1| $ptr) (|S_$12| $state))(= ($in_range_phys_ptr |#p_$1|) ($in_range_phys_ptr |#p_$1|)))
    (forall( (|#t_$1| $ctype) (|#p_$2| $ptr) (|S_$13| $state))(= ($in_range_spec_ptr |#p_$2|) ($in_range_spec_ptr |#p_$2|)))
    (forall( (|#t_$2| $ctype) (|#p_$3| $ptr) (|S_$16| $state))(= (and ($is |#p_$3| |#t_$2|) ($thread_local |S_$16| |#p_$3|)) (and ($is |#p_$3| |#t_$2|) ($thread_local |S_$16| |#p_$3|))))
    (forall( (|#t| $ctype) (|#p_$0| $ptr) (|S_$4| $state))(= (and (and (and (and ($is |#p_$0| |#t|) ($is_proper |#p_$0|)) (= ($owner |S_$4| |#p_$0|) $me)) ($closed |S_$4| |#p_$0|)) (not ($is_primitive |#t|))) (and (and (and (and ($is |#p_$0| |#t|) ($is_proper |#p_$0|)) (= ($owner |S_$4| |#p_$0|) $me)) ($closed |S_$4| |#p_$0|)) (not ($is_primitive |#t|)))))
    (forall( (|#x| $map_t..^^mathint.^^mathint))(= |#x| ($int_to_map_t..^^mathint.^^mathint ($map_t..^^mathint.^^mathint_to_int |#x|))))
    (forall( (|a_$0| $ptr) (|al| Int) (|b_$1| $ptr) (|bl| Int))(!(=> (forall( (|i_$9| Int) (|j_$0| Int))(!(=> (and (and (and (<= 0 |i_$9|) (< |i_$9| |al|)) (<= 0 |j_$0|)) (< |j_$0| |bl|)) (not (= ($idx |a_$0| |i_$9|) ($idx |b_$1| |j_$0|))))  :pattern ( ($dont_instantiate_int |i_$9|) ($dont_instantiate_int |j_$0|)))) ($arrays_disjoint |a_$0| |al| |b_$1| |bl|))  :pattern ( ($arrays_disjoint |a_$0| |al| |b_$1| |bl|))))
    (forall( (|A_$0| $state) (|a_$10| $ptr) (|B_$0| $state) (|b_$6| $ptr))(!(= ($strong_shallow_struct_eq |A_$0| |a_$10| |B_$0| |b_$6|) (forall( (|f_$53| $field))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |A_$0|) |f_$53|) |a_$10|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |B_$0|) |f_$53|) |b_$6|))))  :pattern ( ($strong_shallow_struct_eq |A_$0| |a_$10| |B_$0| |b_$6|))))
    (forall( (|A_$1| $@Map@@$ptr@To@Bool@@) (|B_$1| $@Map@@$ptr@To@Bool@@))(!(= ($set_union |A_$1| |B_$1|) (lambda@17 |A_$1| |B_$1|))  :pattern ( ($set_union |A_$1| |B_$1|))))
    (forall( (|a_$1| $ptr) (|al_$0| Int) (|b_$2| $ptr) (|bl_$0| Int))(!(=> ($set_disjoint ($array_range_no_state |a_$1| ($field_type ($field |a_$1|)) |al_$0|) ($array_range_no_state |b_$2| ($field_type ($field |b_$2|)) |bl_$0|)) ($arrays_disjoint |a_$1| |al_$0| |b_$2| |bl_$0|))  :pattern ( ($set_disjoint ($array_range_no_state |a_$1| ($field_type ($field |a_$1|)) |al_$0|) ($array_range_no_state |b_$2| ($field_type ($field |b_$2|)) |bl_$0|)))))
    (forall( (|A_$2| $@Map@@$ptr@To@Bool@@) (|B_$2| $@Map@@$ptr@To@Bool@@))(!(= ($set_difference |A_$2| |B_$2|) (lambda@18 |A_$2| |B_$2|))  :pattern ( ($set_difference |A_$2| |B_$2|))))
    (forall( (|a_$2| $ptr) (|al_$1| Int) (|b_$3| $ptr) (|bl_$1| Int) (|i_$10| Int))(!(=> (and (and ($arrays_disjoint |a_$2| |al_$1| |b_$3| |bl_$1|) (<= 0 |i_$10|)) (< |i_$10| |al_$1|)) (= ($arrays_disjoint_id |a_$2| |al_$1| |b_$3| |bl_$1| ($dot ($base |a_$2|) ($field_plus ($field |a_$2|) |i_$10|))) 0))  :pattern ( ($arrays_disjoint |a_$2| |al_$1| |b_$3| |bl_$1|) ($dot ($base |a_$2|) ($field_plus ($field |a_$2|) |i_$10|)))))
    (forall( (|a_$3| $ptr) (|al_$2| Int) (|b_$4| $ptr) (|bl_$2| Int) (|i_$11| Int))(!(=> (and (and ($arrays_disjoint |a_$3| |al_$2| |b_$4| |bl_$2|) (<= 0 |i_$11|)) (< |i_$11| |bl_$2|)) (= ($arrays_disjoint_id |a_$3| |al_$2| |b_$4| |bl_$2| ($dot ($base |b_$4|) ($field_plus ($field |b_$4|) |i_$11|))) 1))  :pattern ( ($arrays_disjoint |a_$3| |al_$2| |b_$4| |bl_$2|) ($dot ($base |b_$4|) ($field_plus ($field |b_$4|) |i_$11|)))))
    (forall( (|A| $state) (|a_$9| $ptr) (|B| $state) (|b_$5| $ptr))(!(= ($strong_struct_eq |A| |a_$9| |B| |b_$5|) (and ($strong_shallow_struct_eq |A| |a_$9| |B| |b_$5|) (forall( (|f_$52| $field))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |A| |a_$9| ($field_type ($field |a_$9|))) ($dot |a_$9| |f_$52|)) ($strong_struct_eq |A| ($dot |a_$9| |f_$52|) |B| ($dot |b_$5| |f_$52|)))  :pattern ( ($dot |a_$9| ($as_composite_field |f_$52|)))))))  :pattern ( ($strong_struct_eq |A| |a_$9| |B| |b_$5|))))
    (forall( (|a| Int))(= ($in_range_t $arch_ptr_type |a|) ($in_range_t $arch_ptr_type |a|)))
    (forall( (|bits_$0| Int) (|v_$4| Int))(!(and ($in_range_sbits |bits_$0| ($unchecked_sbits |bits_$0| |v_$4|)) (=> ($in_range_sbits |bits_$0| |v_$4|) (= ($unchecked_sbits |bits_$0| |v_$4|) |v_$4|)))  :pattern ( ($unchecked_sbits |bits_$0| |v_$4|))))
    (forall( (|bits_$1| Int) (|v_$5| Int))(!(= ($in_range_sbits |bits_$1| |v_$5|) (and (<= (- 0 ($_pow2 (- |bits_$1| 1))) |v_$5|) (<= |v_$5| (- ($_pow2 (- |bits_$1| 1)) 1))))  :pattern ( ($in_range_sbits |bits_$1| |v_$5|))))
    (forall( (|bits_$2| Int) (|v_$6| Int))(!(and ($in_range_ubits |bits_$2| ($unchecked_ubits |bits_$2| |v_$6|)) (=> ($in_range_ubits |bits_$2| |v_$6|) (= ($unchecked_ubits |bits_$2| |v_$6|) |v_$6|)))  :pattern ( ($unchecked_ubits |bits_$2| |v_$6|))))
    (forall( (|bits| Int) (|v_$3| Int))(!(= ($in_range_ubits |bits| |v_$3|) (and (<= 0 |v_$3|) (<= |v_$3| (- ($_pow2 |bits|) 1))))  :pattern ( ($in_range_ubits |bits| |v_$3|))))
    (forall( (|c_$2| $ptr) (|S_$39| $state) (|S0_$8| $state))(= (and (and (and (and (and (= ($f_closed |S_$39|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$8|) |c_$2| false)) (= ($f_timestamp |S_$39|) ($f_timestamp |S0_$8|))) (= ($f_owner |S_$39|) ($f_owner |S0_$8|))) (= ($heap |S_$39|) ($heap |S0_$8|))) ($good_state |S_$39|)) (and (< ($current_timestamp |S0_$8|) ($current_timestamp |S_$39|)) ($call_transition |S0_$8| |S_$39|))) (and (and (and (and (and (= ($f_closed |S_$39|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$8|) |c_$2| false)) (= ($f_timestamp |S_$39|) ($f_timestamp |S0_$8|))) (= ($f_owner |S_$39|) ($f_owner |S0_$8|))) (= ($heap |S_$39|) ($heap |S0_$8|))) ($good_state |S_$39|)) (and (< ($current_timestamp |S0_$8|) ($current_timestamp |S_$39|)) ($call_transition |S0_$8| |S_$39|)))))
    (forall( (|c| $ptr) (|t_$9| $ctype) (|p_$3| $ptr))(= (and (and (= ($field_type ($field |c|)) |t_$9|) (= (= |c| ($phys_ptr_cast $null ($field_type ($field |c|)))) (= |p_$3| ($phys_ptr_cast $null ($field_type ($field |p_$3|)))))) (= ($field |c|) ($as_field_with_type ($field |c|) |t_$9|))) (and (and (= ($field_type ($field |c|)) |t_$9|) (= (= |c| ($phys_ptr_cast $null ($field_type ($field |c|)))) (= |p_$3| ($phys_ptr_cast $null ($field_type ($field |p_$3|)))))) (= ($field |c|) ($as_field_with_type ($field |c|) |t_$9|)))))
    (forall( (|c1| $ptr) (|c2| $ptr))(!(=> (and (and ($is |c1| ^^claim) ($is |c2| ^^claim)) (forall( (|S_$88| $state))(=> ($valid_claim |S_$88| |c1|) ($closed |S_$88| |c2|)))) ($claims_claim |c1| |c2|))  :pattern ( ($claims_claim |c1| |c2|))))
    (forall( (|e_$0| $ptr) (|S_$47| $@Map@@$ptr@To@Bool@@))(= ($set_difference |S_$47| ($set_singleton |e_$0|)) ($set_difference |S_$47| ($set_singleton |e_$0|))))
    (forall( (|e| $ptr) (|S_$46| $@Map@@$ptr@To@Bool@@))(= ($set_union |S_$46| ($set_singleton |e|)) ($set_union |S_$46| ($set_singleton |e|))))
    (forall( (|E1| $@Map@@$ptr@To@Bool@@) (|E0| $@Map@@$ptr@To@Bool@@) (|S1_$6| $state) (|S0_$9| $state))(= (and (and (and (and (and (forall( (|p_$60_$1| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$60_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$60_$1|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$9|) |p_$60_$1|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60_$1|)))) (forall( (|p_$61_$1| $ptr) (|f_$26_$1| $field))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$61_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$61_$1|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$9|) |f_$26_$1|) |p_$61_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26_$1|) |p_$61_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26_$1|) |p_$61_$1|))))) (forall( (|p_$62_$1| $ptr))(!(and (or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$62_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$62_$1|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62_$1|))) (>= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62_$1|))))) (= ($f_closed |S0_$9|) ($f_closed |S1_$6|))) (forall( (|p_$63_$1| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$63_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$63_$1|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$9|) |p_$63_$1|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63_$1|))))) (and (<= ($current_timestamp |S0_$9|) ($current_timestamp |S1_$6|)) ($call_transition |S0_$9| |S1_$6|))) (and (and (and (and (and (forall( (|p_$60| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$60|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$60|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$9|) |p_$60|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60|)))) (forall( (|p_$61| $ptr) (|f_$26| $field))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$61|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$61|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$9|) |f_$26|) |p_$61|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26|) |p_$61|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26|) |p_$61|))))) (forall( (|p_$62| $ptr))(!(and (or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$62|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$62|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62|))) (>= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62|))))) (= ($f_closed |S0_$9|) ($f_closed |S1_$6|))) (forall( (|p_$63| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$63|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$63|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$9|) |p_$63|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63|))))) (and (<= ($current_timestamp |S0_$9|) ($current_timestamp |S1_$6|)) ($call_transition |S0_$9| |S1_$6|)))))
    (forall( (|f_$13| $field) (|p_$17| $ptr) (|s_$2| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$2|) |f_$13|) |p_$17|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$2|) |f_$13|) |p_$17|)))
    (forall( (|f_$14| $field) (|p_$18| $ptr) (|s_$3| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$3|) |f_$14|) |p_$18|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$3|) |f_$14|) |p_$18|)))
    (forall( (|f_$18| $field) (|p_$37| $ptr) (|S_$23| $state) (|S0| $state))(= (= ($heap |S_$23|) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18|) |p_$37| (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$23|) |f_$18|) |p_$37|)))) (= ($heap |S_$23|) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18|) |p_$37| (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$23|) |f_$18|) |p_$37|))))))
    (forall( (|f_$23| $pure_function))(= (< ($frame_level |f_$23|) $current_frame_level) (< ($frame_level |f_$23|) $current_frame_level)))
    (forall( (|f_$25| $field) (|p_$59| $ptr) (|S_$43| $state))(= ($fetch_from_vv ($read_vol_version |S_$43| |p_$59|) |p_$59| |f_$25|) ($fetch_from_vv ($read_vol_version |S_$43| |p_$59|) |p_$59| |f_$25|)))
    (forall( (|f_$27| $field))(= (and ($is_union_field |f_$27|) (= ($first_union_field ($field_parent_type |f_$27|)) |f_$27|)) (and ($is_union_field |f_$27|) (= ($first_union_field ($field_parent_type |f_$27|)) |f_$27|))))
    (forall( (|f_$28| $field) (|p_$65| $ptr) (|s_$8| $state))(= (not (= ($owner |s_$8| ($dot |p_$65| |f_$28|)) $inactive_union_owner)) (not (= ($owner |s_$8| ($dot |p_$65| |f_$28|)) $inactive_union_owner))))
    (forall( (|f_$33| $field))(!(not ($is_primitive ($field_parent_type |f_$33|)))  :pattern ( ($field_parent_type |f_$33|))))
    (forall( (|f_$34| $field))(!(= |f_$34| ($field_arr_ctor ($field_arr_root |f_$34|) ($field_arr_index |f_$34|)))  :pattern ( ($field_arr_index |f_$34|))))
    (forall( (|f_$35| $field) (|i_$1| Int))(!(and (= ($field_arr_root ($field_arr_ctor |f_$35| |i_$1|)) |f_$35|) (= ($field_arr_index ($field_arr_ctor |f_$35| |i_$1|)) |i_$1|))  :pattern ( ($field_arr_ctor |f_$35| |i_$1|))))
    (forall( (|f_$36| $field) (|i_$7| Int))(!(and (and (and (and (and (and (and (and (and (and (= ($field_kind ($field_plus |f_$36| |i_$7|)) ($field_kind |f_$36|)) (= ($field_arr_root ($field_plus |f_$36| |i_$7|)) ($field_arr_root |f_$36|))) (= ($field_arr_index ($field_plus |f_$36| |i_$7|)) (+ ($field_arr_index |f_$36|) |i_$7|))) (= ($field_arr_size ($field_plus |f_$36| |i_$7|)) ($field_arr_size |f_$36|))) (= ($field_type ($field_plus |f_$36| |i_$7|)) ($field_type |f_$36|))) (= ($as_field_with_type ($field_plus |f_$36| |i_$7|) ($field_type |f_$36|)) ($field_plus |f_$36| |i_$7|))) (= ($is_sequential_field ($field_plus |f_$36| |i_$7|)) ($is_sequential_field |f_$36|))) (= ($is_volatile_field ($field_plus |f_$36| |i_$7|)) ($is_volatile_field |f_$36|))) (= ($is_phys_field ($field_plus |f_$36| |i_$7|)) ($is_phys_field |f_$36|))) (=> (and (<= 0 (+ ($field_arr_index |f_$36|) |i_$7|)) (<= (+ ($field_arr_index |f_$36|) |i_$7|) (- ($field_arr_size |f_$36|) 1))) (= ($field_parent_type ($field_plus |f_$36| |i_$7|)) ($field_parent_type ($field_arr_root |f_$36|))))) true)  :pattern ( ($field_plus |f_$36| |i_$7|))))
    (forall( (|f_$54| $field) (|t_$51| $ctype))(!(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap ($vs_state $struct_zero)) |f_$54|) ($phys_ptr_cast ($vs_base_ref $struct_zero) |t_$51|)) 0)  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap ($vs_state $struct_zero)) |f_$54|) ($phys_ptr_cast ($vs_base_ref $struct_zero) |t_$51|)))))
    (forall( (|f| $field))(= (= ($field_kind |f|) $fk_base) (= ($field_kind |f|) $fk_base)))
    (forall( (|fk_$0| $field_kind) (|tp_$5| $ctype) (|f_$6| $field) (|partp_$5| $ctype))(= (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$6|) |partp_$5|) (= ($field_type |f_$6|) |tp_$5|)) (= ($as_field_with_type |f_$6| |tp_$5|) |f_$6|)) (=> ($is_primitive |tp_$5|) (= ($as_primitive_field |f_$6|) |f_$6|))) (=> (not ($is_primitive |tp_$5|)) (= ($as_composite_field |f_$6|) |f_$6|))) (= ($field_arr_root |f_$6|) |f_$6|)) true) (= ($field_kind |f_$6|) |fk_$0|)) true) ($is_ghost_field |f_$6|)) (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$6|) |partp_$5|) (= ($field_type |f_$6|) |tp_$5|)) (= ($as_field_with_type |f_$6| |tp_$5|) |f_$6|)) (=> ($is_primitive |tp_$5|) (= ($as_primitive_field |f_$6|) |f_$6|))) (=> (not ($is_primitive |tp_$5|)) (= ($as_composite_field |f_$6|) |f_$6|))) (= ($field_arr_root |f_$6|) |f_$6|)) true) (= ($field_kind |f_$6|) |fk_$0|)) true) ($is_ghost_field |f_$6|))))
    (forall( (|fk| $field_kind) (|tp_$4| $ctype) (|f_$5| $field) (|partp_$4| $ctype))(= (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$5|) |partp_$4|) (= ($field_type |f_$5|) |tp_$4|)) (= ($as_field_with_type |f_$5| |tp_$4|) |f_$5|)) (=> ($is_primitive |tp_$4|) (= ($as_primitive_field |f_$5|) |f_$5|))) (=> (not ($is_primitive |tp_$4|)) (= ($as_composite_field |f_$5|) |f_$5|))) (= ($field_arr_root |f_$5|) |f_$5|)) true) (= ($field_kind |f_$5|) |fk|)) true) (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$5|) |partp_$4|) (= ($field_type |f_$5|) |tp_$4|)) (= ($as_field_with_type |f_$5| |tp_$4|) |f_$5|)) (=> ($is_primitive |tp_$4|) (= ($as_primitive_field |f_$5|) |f_$5|))) (=> (not ($is_primitive |tp_$4|)) (= ($as_composite_field |f_$5|) |f_$5|))) (= ($field_arr_root |f_$5|) |f_$5|)) true) (= ($field_kind |f_$5|) |fk|)) true)))
    (forall( (|from_$0| Int) (|to_$0| Int) (|xs_$0| Int))(!(=> (and (and (<= 0 |from_$0|) (< |from_$0| |to_$0|)) (<= |to_$0| |xs_$0|)) (= ($bv_update 0 |xs_$0| |from_$0| |to_$0| 0) 0))  :pattern ( ($bv_update 0 |xs_$0| |from_$0| |to_$0| 0))))
    (forall( (|from_$1| Int) (|to_$1| Int) (|val_$1| Int) (|x_$24| Int) (|xs_$1| Int))(!(=> (and (and (<= 0 |from_$1|) (< |from_$1| |to_$1|)) (<= |to_$1| |xs_$1|)) (=> (and (<= (- 0 ($_pow2 (- (- |to_$1| |from_$1|) 1))) |val_$1|) (< |val_$1| ($_pow2 (- (- |to_$1| |from_$1|) 1)))) (= ($bv_extract_signed ($bv_update |x_$24| |xs_$1| |from_$1| |to_$1| |val_$1|) |xs_$1| |from_$1| |to_$1|) |val_$1|)))  :pattern ( ($bv_extract_signed ($bv_update |x_$24| |xs_$1| |from_$1| |to_$1| |val_$1|) |xs_$1| |from_$1| |to_$1|))))
    (forall( (|from_$10| Int) (|to_$10| Int) (|xs_$8| Int))(!(=> (and (and (<= 0 |from_$10|) (< |from_$10| |to_$10|)) (<= |to_$10| |xs_$8|)) (= ($bv_extract_unsigned 0 |xs_$8| |from_$10| |to_$10|) 0))  :pattern ( ($bv_extract_unsigned 0 |xs_$8| |from_$10| |to_$10|))))
    (forall( (|from_$11| Int) (|to_$11| Int) (|val_$5| Int) (|xs_$9| Int))(!(=> (and (and (and (<= 0 |from_$11|) (< |from_$11| |to_$11|)) (<= |to_$11| |xs_$9|)) (<= 0 |val_$5|)) (= ($bv_extract_unsigned |val_$5| |xs_$9| |from_$11| |to_$11|) (mod (div |val_$5| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|)))))  :pattern ( ($bv_extract_unsigned |val_$5| |xs_$9| |from_$11| |to_$11|))))
    (forall( (|from_$12| Int) (|to_$12| Int) (|val_$6| Int) (|xs_$10| Int))(!(=> (and (and (and (and (<= 0 |from_$12|) (< |from_$12| |to_$12|)) (<= |to_$12| |xs_$10|)) (<= 0 |val_$6|)) (< (mod (div |val_$6| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))) ($_pow2 (- (- |to_$12| |from_$12|) 1)))) (= ($bv_extract_signed |val_$6| |xs_$10| |from_$12| |to_$12|) (mod (div |val_$6| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|)))))  :pattern ( ($bv_extract_signed |val_$6| |xs_$10| |from_$12| |to_$12|))))
    (forall( (|from_$13| Int) (|to_$13| Int) (|val_$7| Int) (|xs_$11| Int))(!(=> (and (and (and (and (<= 0 |from_$13|) (< |from_$13| |to_$13|)) (<= |to_$13| |xs_$11|)) (<= 0 |val_$7|)) (>= (mod (div |val_$7| ($_pow2 |from_$13|)) ($_pow2 (- |to_$13| |from_$13|))) ($_pow2 (- (- |to_$13| |from_$13|) 1)))) (= ($bv_extract_signed |val_$7| |xs_$11| |from_$13| |to_$13|) (- ($_pow2 (- (- |to_$13| |from_$13|) 1)) (mod (div |val_$7| ($_pow2 |from_$13|)) ($_pow2 (- |to_$13| |from_$13|))))))  :pattern ( ($bv_extract_signed |val_$7| |xs_$11| |from_$13| |to_$13|))))
    (forall( (|from_$2| Int) (|to_$2| Int) (|val_$2| Int) (|x_$25| Int) (|xs_$2| Int))(!(=> (and (and (<= 0 |from_$2|) (< |from_$2| |to_$2|)) (<= |to_$2| |xs_$2|)) (=> (and (<= 0 |val_$2|) (< |val_$2| ($_pow2 (- |to_$2| |from_$2|)))) (= ($bv_extract_unsigned ($bv_update |x_$25| |xs_$2| |from_$2| |to_$2| |val_$2|) |xs_$2| |from_$2| |to_$2|) |val_$2|)))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$25| |xs_$2| |from_$2| |to_$2| |val_$2|) |xs_$2| |from_$2| |to_$2|))))
    (forall( (|from_$3| Int) (|to_$3| Int) (|x_$26| Int) (|xs_$3| Int))(!(=> (and (and (<= 0 |from_$3|) (< |from_$3| |to_$3|)) (<= |to_$3| |xs_$3|)) (and (<= (- 0 ($_pow2 (- (- |to_$3| |from_$3|) 1))) ($bv_extract_signed |x_$26| |xs_$3| |from_$3| |to_$3|)) (<= ($bv_extract_signed |x_$26| |xs_$3| |from_$3| |to_$3|) (- ($_pow2 (- (- |to_$3| |from_$3|) 1)) 1))))  :pattern ( ($bv_extract_signed |x_$26| |xs_$3| |from_$3| |to_$3|))))
    (forall( (|from_$4| Int) (|to_$4| Int) (|x_$27| Int) (|xs_$4| Int))(!(=> (and (and (<= 0 |from_$4|) (< |from_$4| |to_$4|)) (<= |to_$4| |xs_$4|)) (and (<= 0 ($bv_extract_unsigned |x_$27| |xs_$4| |from_$4| |to_$4|)) (<= ($bv_extract_unsigned |x_$27| |xs_$4| |from_$4| |to_$4|) (- ($_pow2 (- |to_$4| |from_$4|)) 1))))  :pattern ( ($bv_extract_unsigned |x_$27| |xs_$4| |from_$4| |to_$4|))))
    (forall( (|from_$5| Int) (|to_$5| Int) (|x_$28| Int) (|y_$12| Int))(!(=> (and (and (<= 0 |from_$5|) (< |from_$5| |to_$5|)) (<= |to_$5| 32)) (= ($bv_extract_unsigned |x_$28| 32 |from_$5| |to_$5|) ($_shr ($_and ^^u4 |x_$28| ($_shl ^^u4 (- ($_shl ^^u4 1 (- |to_$5| |from_$5|)) 1) |from_$5|)) |from_$5|)))  :pattern ( ($bv_extract_unsigned |x_$28| 32 |from_$5| |to_$5|) ($_and ^^u4 |x_$28| |y_$12|))))
    (forall( (|from_$6| Int) (|to_$6| Int) (|x_$29| Int) (|y_$13| Int))(!(=> (and (and (<= 0 |from_$6|) (< |from_$6| |to_$6|)) (<= |to_$6| 64)) (= ($bv_extract_unsigned |x_$29| 64 |from_$6| |to_$6|) ($_shr ($_and ^^u8 |x_$29| ($_shl ^^u4 (- ($_shl ^^u8 1 (- |to_$6| |from_$6|)) 1) |from_$6|)) |from_$6|)))  :pattern ( ($bv_extract_unsigned |x_$29| 64 |from_$6| |to_$6|) ($_and ^^u8 |x_$29| |y_$13|))))
    (forall( (|from_$7| Int) (|to_$7| Int) (|val_$3| Int) (|x_$30| Int) (|xs_$5| Int) (|from2| Int) (|to2| Int))(!(=> (and (and (<= 0 |from_$7|) (< |from_$7| |to_$7|)) (<= |to_$7| |xs_$5|)) (=> (and (and (<= 0 |from2|) (< |from2| |to2|)) (<= |to2| |xs_$5|)) (=> (or (<= |to2| |from_$7|) (<= |to_$7| |from2|)) (= ($bv_extract_signed ($bv_update |x_$30| |xs_$5| |from_$7| |to_$7| |val_$3|) |xs_$5| |from2| |to2|) ($bv_extract_signed |x_$30| |xs_$5| |from2| |to2|)))))  :pattern ( ($bv_extract_signed ($bv_update |x_$30| |xs_$5| |from_$7| |to_$7| |val_$3|) |xs_$5| |from2| |to2|))))
    (forall( (|from_$8| Int) (|to_$8| Int) (|val_$4| Int) (|x_$31| Int) (|xs_$6| Int) (|from2_$0| Int) (|to2_$0| Int))(!(=> (and (and (<= 0 |from_$8|) (< |from_$8| |to_$8|)) (<= |to_$8| |xs_$6|)) (=> (and (and (<= 0 |from2_$0|) (< |from2_$0| |to2_$0|)) (<= |to2_$0| |xs_$6|)) (=> (or (<= |to2_$0| |from_$8|) (<= |to_$8| |from2_$0|)) (= ($bv_extract_unsigned ($bv_update |x_$31| |xs_$6| |from_$8| |to_$8| |val_$4|) |xs_$6| |from2_$0| |to2_$0|) ($bv_extract_unsigned |x_$31| |xs_$6| |from2_$0| |to2_$0|)))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$31| |xs_$6| |from_$8| |to_$8| |val_$4|) |xs_$6| |from2_$0| |to2_$0|))))
    (forall( (|from_$9| Int) (|to_$9| Int) (|xs_$7| Int))(!(=> (and (and (<= 0 |from_$9|) (< |from_$9| |to_$9|)) (<= |to_$9| |xs_$7|)) (= ($bv_extract_signed 0 |xs_$7| |from_$9| |to_$9|) 0))  :pattern ( ($bv_extract_signed 0 |xs_$7| |from_$9| |to_$9|))))
    (forall( (|h_$3| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@) (|r_$3| $ptr) (|f_$37| $field) (|v_$1| Int) (|p_$99| $ptr) (|sz_$22| Int))(=> (or (not (and (<= 0 ($index_within |p_$99| ($ptr |f_$37| |r_$3|))) (<= ($index_within |p_$99| ($ptr |f_$37| |r_$3|)) (- |sz_$22| 1)))) (not (= ($ptr |f_$37| |r_$3|) ($idx |p_$99| ($index_within |p_$99| ($ptr |f_$37| |r_$3|)))))) (= ($mem_range_heap (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h_$3| |f_$37| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h_$3| |f_$37|) |r_$3| |v_$1|)) |p_$99| |sz_$22|) ($mem_range_heap |h_$3| |p_$99| |sz_$22|))))
    (forall( (|has_volatile_owns_$0| Bool) (|claimable_$0| Bool) (|sz_$2| Int) (|t_$5| $ctype))(= (and (and (and (and (and (and (and (= ($sizeof |t_$5|) |sz_$2|) (= ($type_branch |t_$5|) $ctype_flat)) (not ($is_primitive |t_$5|))) (= ($is_claimable |t_$5|) |claimable_$0|)) (ite |has_volatile_owns_$0| ($is_volatile_field ($f_owns |t_$5|)) ($is_sequential_field ($f_owns |t_$5|)))) true) (= ($as_union_type |t_$5|) |t_$5|)) ($is_union_type |t_$5|)) (and (and (and (and (and (and (and (= ($sizeof |t_$5|) |sz_$2|) (= ($type_branch |t_$5|) $ctype_flat)) (not ($is_primitive |t_$5|))) (= ($is_claimable |t_$5|) |claimable_$0|)) (ite |has_volatile_owns_$0| ($is_volatile_field ($f_owns |t_$5|)) ($is_sequential_field ($f_owns |t_$5|)))) true) (= ($as_union_type |t_$5|) |t_$5|)) ($is_union_type |t_$5|))))
    (forall( (|has_volatile_owns_$1| Bool) (|claimable_$1| Bool) (|sz_$3| Int) (|t_$6| $ctype))(= (and (and (and (and (and (and (= ($sizeof |t_$6|) |sz_$3|) (= ($type_branch |t_$6|) $ctype_flat)) (not ($is_primitive |t_$6|))) (= ($is_claimable |t_$6|) |claimable_$1|)) (ite |has_volatile_owns_$1| ($is_volatile_field ($f_owns |t_$6|)) ($is_sequential_field ($f_owns |t_$6|)))) true) (not ($is_union_type |t_$6|))) (and (and (and (and (and (and (= ($sizeof |t_$6|) |sz_$3|) (= ($type_branch |t_$6|) $ctype_flat)) (not ($is_primitive |t_$6|))) (= ($is_claimable |t_$6|) |claimable_$1|)) (ite |has_volatile_owns_$1| ($is_volatile_field ($f_owns |t_$6|)) ($is_sequential_field ($f_owns |t_$6|)))) true) (not ($is_union_type |t_$6|)))))
    (forall( (|has_volatile_owns| Bool) (|claimable| Bool) (|sz_$1| Int) (|t_$4| $ctype))(= (and (and (and (and (and (= ($sizeof |t_$4|) |sz_$1|) (= ($type_branch |t_$4|) $ctype_flat)) (not ($is_primitive |t_$4|))) (= ($is_claimable |t_$4|) |claimable|)) (ite |has_volatile_owns| ($is_volatile_field ($f_owns |t_$4|)) ($is_sequential_field ($f_owns |t_$4|)))) true) (and (and (and (and (and (= ($sizeof |t_$4|) |sz_$1|) (= ($type_branch |t_$4|) $ctype_flat)) (not ($is_primitive |t_$4|))) (= ($is_claimable |t_$4|) |claimable|)) (ite |has_volatile_owns| ($is_volatile_field ($f_owns |t_$4|)) ($is_sequential_field ($f_owns |t_$4|)))) true)))
    (forall( (|i_$13| Int) (|a_$4| $ptr))(!(= ($index_within ($idx |a_$4| |i_$13|) |a_$4|) |i_$13|)  :pattern ( ($index_within ($idx |a_$4| |i_$13|) |a_$4|))))
    (forall( (|i_$16| Int) (|j_$1| Int))(!(=> (and (<= 0 |i_$16|) (< 0 |j_$1|)) (<= (div |i_$16| |j_$1|) |i_$16|))  :pattern ( (div |i_$16| |j_$1|))))
    (forall( (|i_$17| Int) (|j_$2| Int))(!(=> (and (> |i_$17| 0) (> |j_$2| 0)) (and (< (- |i_$17| |j_$2|) (* (div |i_$17| |j_$2|) |j_$2|)) (<= (* (div |i_$17| |j_$2|) |j_$2|) |i_$17|)))  :pattern ( (div |i_$17| |j_$2|))))
    (forall( (|i_$18| Int))(!(=> (not (= |i_$18| 0)) (= (div |i_$18| |i_$18|) 1))  :pattern ( (div |i_$18| |i_$18|))))
    (forall( (|i_$19| Int))(!(=> (not (= |i_$19| 0)) (= (div 0 |i_$19|) 0))  :pattern ( (div 0 |i_$19|))))
    (forall( (|i| Int) (|p_$10| $ptr))(= ($dot ($base |p_$10|) ($field_plus ($field |p_$10|) |i|)) ($dot ($base |p_$10|) ($field_plus ($field |p_$10|) |i|))))
    (forall( (|id| $token) (|S_$69| $state))(!(=> ($good_state_ext |id| |S_$69|) ($good_state |S_$69|))  :pattern ( ($good_state_ext |id| |S_$69|))))
    (forall( (|isvolatile_$1| Bool) (|tp_$2| $ctype) (|f_$3| $field) (|partp_$2| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$3|) |partp_$2|) (= ($field_type |f_$3|) |tp_$2|)) (= ($as_field_with_type |f_$3| |tp_$2|) |f_$3|)) (=> ($is_primitive |tp_$2|) (= ($as_primitive_field |f_$3|) |f_$3|))) (=> (not ($is_primitive |tp_$2|)) (= ($as_composite_field |f_$3|) |f_$3|))) (= ($field_arr_root |f_$3|) |f_$3|)) true) (=> (not |isvolatile_$1|) ($is_sequential_field |f_$3|))) (=> |isvolatile_$1| ($is_volatile_field |f_$3|))) true) (= ($field_kind |f_$3|) $fk_base)) ($is_ghost_field |f_$3|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$3|) |partp_$2|) (= ($field_type |f_$3|) |tp_$2|)) (= ($as_field_with_type |f_$3| |tp_$2|) |f_$3|)) (=> ($is_primitive |tp_$2|) (= ($as_primitive_field |f_$3|) |f_$3|))) (=> (not ($is_primitive |tp_$2|)) (= ($as_composite_field |f_$3|) |f_$3|))) (= ($field_arr_root |f_$3|) |f_$3|)) true) (=> (not |isvolatile_$1|) ($is_sequential_field |f_$3|))) (=> |isvolatile_$1| ($is_volatile_field |f_$3|))) true) (= ($field_kind |f_$3|) $fk_base)) ($is_ghost_field |f_$3|)) true)))
    (forall( (|isvolatile| Bool) (|tp_$0| $ctype) (|f_$1| $field) (|partp_$0| $ctype))(= (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$1|) |partp_$0|) (= ($field_type |f_$1|) |tp_$0|)) (= ($as_field_with_type |f_$1| |tp_$0|) |f_$1|)) (=> ($is_primitive |tp_$0|) (= ($as_primitive_field |f_$1|) |f_$1|))) (=> (not ($is_primitive |tp_$0|)) (= ($as_composite_field |f_$1|) |f_$1|))) (= ($field_arr_root |f_$1|) |f_$1|)) true) (=> (not |isvolatile|) ($is_sequential_field |f_$1|))) (=> |isvolatile| ($is_volatile_field |f_$1|))) true) (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$1|) |partp_$0|) (= ($field_type |f_$1|) |tp_$0|)) (= ($as_field_with_type |f_$1| |tp_$0|) |f_$1|)) (=> ($is_primitive |tp_$0|) (= ($as_primitive_field |f_$1|) |f_$1|))) (=> (not ($is_primitive |tp_$0|)) (= ($as_composite_field |f_$1|) |f_$1|))) (= ($field_arr_root |f_$1|) |f_$1|)) true) (=> (not |isvolatile|) ($is_sequential_field |f_$1|))) (=> |isvolatile| ($is_volatile_field |f_$1|))) true)))
    (forall( (|k_$4| Int))(!(=> (>= |k_$4| 0) (= ($addr ($i4_to_ptr |k_$4|)) |k_$4|))  :pattern ( ($i4_to_ptr |k_$4|))))
    (forall( (|k_$5| Int))(!(=> (>= |k_$5| 0) (= ($addr ($i2_to_ptr |k_$5|)) |k_$5|))  :pattern ( ($i2_to_ptr |k_$5|))))
    (forall( (|k_$6| Int))(!(=> (>= |k_$6| 0) (= ($addr ($i1_to_ptr |k_$6|)) |k_$6|))  :pattern ( ($i1_to_ptr |k_$6|))))
    (forall( (|M_$0| $map_t..^^mathint.^^mathint) (|p_$199| Int) (|v_$8| Int) (|q_$24| Int))(= ($select.$map_t..^^mathint.^^mathint ($store.$map_t..^^mathint.^^mathint |M_$0| |q_$24| |v_$8|) |p_$199|) (ite (= |p_$199| |q_$24|) |v_$8| ($select.$map_t..^^mathint.^^mathint |M_$0| |p_$199|))))
    (forall( (|M| $map_t..^^mathint.^^mathint) (|p_$198| Int) (|v_$7| Int))true)
    (forall( (|M1_$2| $map_t..^^mathint.^^mathint) (|M2_$2| $map_t..^^mathint.^^mathint))(!(=> (forall( (|p_$200| Int))(= ($select.$map_t..^^mathint.^^mathint |M1_$2| |p_$200|) ($select.$map_t..^^mathint.^^mathint |M2_$2| |p_$200|))) ($eq.$map_t..^^mathint.^^mathint |M1_$2| |M2_$2|))  :pattern ( ($eq.$map_t..^^mathint.^^mathint |M1_$2| |M2_$2|))))
    (forall( (|M1_$3| $map_t..^^mathint.^^mathint) (|M2_$3| $map_t..^^mathint.^^mathint))(!(=> ($eq.$map_t..^^mathint.^^mathint |M1_$3| |M2_$3|) (= |M1_$3| |M2_$3|))  :pattern ( ($eq.$map_t..^^mathint.^^mathint |M1_$3| |M2_$3|))))
    (forall( (|M2_$0| $state) (|M1_$0| $state))(= (and (< ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) ($call_transition |M1_$0| |M2_$0|)) (and (< ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) ($call_transition |M1_$0| |M2_$0|))))
    (forall( (|M2| $state) (|M1| $state))(= (and (<= ($current_timestamp |M1|) ($current_timestamp |M2|)) ($call_transition |M1| |M2|)) (and (<= ($current_timestamp |M1|) ($current_timestamp |M2|)) ($call_transition |M1| |M2|))))
    (forall( (|max| Int) (|val| Int) (|min| Int))(= (and (<= |min| |val|) (<= |val| |max|)) (and (<= |min| |val|) (<= |val| |max|))))
    (forall( (|no_$1| Int) (|t_$53| $ctype))(!(=> ($is_fnptr_type |t_$53|) (and ($in_range_phys_ptr ($get_fnptr |no_$1| |t_$53|)) ($valid_fnptr ($get_fnptr |no_$1| |t_$53|))))  :pattern ( ($get_fnptr |no_$1| |t_$53|))))
    (forall( (|no| Int) (|t_$52| $ctype))(!(= ($get_fnptr |no| |t_$52|) ($ptr ($f_root |t_$52|) ($get_fnptr_ref |no|)))  :pattern ( ($get_fnptr |no| |t_$52|))))
    (forall( (|o_$16| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ lambda@14 |o_$16|) false)  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ lambda@14 |o_$16|))))
    (forall( (|o_$17| $ptr) (|p_$209| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@15 |p_$209|) |o_$17|) (= |o_$17| |p_$209|))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@15 |p_$209|) |o_$17|))))
    (forall( (|o_$18| $ptr) (|p_$210| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@16 |p_$210|) |o_$18|) (and (not (= |p_$210| ($phys_ptr_cast $null ($field_type ($field |p_$210|))))) (= |p_$210| |o_$18|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@16 |p_$210|) |o_$18|))))
    (forall( (|o_$19| $ptr) (|A_$5| $@Map@@$ptr@To@Bool@@) (|B_$5| $@Map@@$ptr@To@Bool@@))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@17 |A_$5| |B_$5|) |o_$19|) (or (MapRead$$@Map@@$ptr@To@Bool@@$ |A_$5| |o_$19|) (MapRead$$@Map@@$ptr@To@Bool@@$ |B_$5| |o_$19|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@17 |A_$5| |B_$5|) |o_$19|))))
    (forall( (|o_$20| $ptr) (|A_$6| $@Map@@$ptr@To@Bool@@) (|B_$6| $@Map@@$ptr@To@Bool@@))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@18 |A_$6| |B_$6|) |o_$20|) (and (MapRead$$@Map@@$ptr@To@Bool@@$ |A_$6| |o_$20|) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |B_$6| |o_$20|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@18 |A_$6| |B_$6|) |o_$20|))))
    (forall( (|o_$21| $ptr) (|A_$7| $@Map@@$ptr@To@Bool@@) (|B_$7| $@Map@@$ptr@To@Bool@@))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@19 |A_$7| |B_$7|) |o_$21|) (and (MapRead$$@Map@@$ptr@To@Bool@@$ |A_$7| |o_$21|) (MapRead$$@Map@@$ptr@To@Bool@@$ |B_$7| |o_$21|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@19 |A_$7| |B_$7|) |o_$21|))))
    (forall( (|off_$0| Int) (|p_$8| Int))(= ($unchk_add $arch_ptr_type |p_$8| |off_$0|) ($unchk_add $arch_ptr_type |p_$8| |off_$0|)))
    (forall( (|off| Int) (|isvolatile_$0| Bool) (|tp_$1| $ctype) (|f_$2| $field) (|partp_$1| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$2|) |partp_$1|) (= ($field_type |f_$2|) |tp_$1|)) (= ($as_field_with_type |f_$2| |tp_$1|) |f_$2|)) (=> ($is_primitive |tp_$1|) (= ($as_primitive_field |f_$2|) |f_$2|))) (=> (not ($is_primitive |tp_$1|)) (= ($as_composite_field |f_$2|) |f_$2|))) (= ($field_arr_root |f_$2|) |f_$2|)) true) (=> (not |isvolatile_$0|) ($is_sequential_field |f_$2|))) (=> |isvolatile_$0| ($is_volatile_field |f_$2|))) true) (= ($field_offset |f_$2|) |off|)) ($is_phys_field |f_$2|)) (= ($field_kind |f_$2|) $fk_base)) (=> (= |off| 0) ($has_field_at0 |partp_$1| |f_$2|))) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$2|) |partp_$1|) (= ($field_type |f_$2|) |tp_$1|)) (= ($as_field_with_type |f_$2| |tp_$1|) |f_$2|)) (=> ($is_primitive |tp_$1|) (= ($as_primitive_field |f_$2|) |f_$2|))) (=> (not ($is_primitive |tp_$1|)) (= ($as_composite_field |f_$2|) |f_$2|))) (= ($field_arr_root |f_$2|) |f_$2|)) true) (=> (not |isvolatile_$0|) ($is_sequential_field |f_$2|))) (=> |isvolatile_$0| ($is_volatile_field |f_$2|))) true) (= ($field_offset |f_$2|) |off|)) ($is_phys_field |f_$2|)) (= ($field_kind |f_$2|) $fk_base)) (=> (= |off| 0) ($has_field_at0 |partp_$1| |f_$2|))) true)))
    (forall( (|owns| $@Map@@$ptr@To@Bool@@) (|o| $ptr) (|S_$40| $state))(= ($set_difference |owns| ($owns |S_$40| |o|)) ($set_difference |owns| ($owns |S_$40| |o|))))
    (forall( (|p_$0| $ptr))(= ($field_type ($field |p_$0|)) ($field_type ($field |p_$0|))))
    (forall( (|p_$1| $ptr))(= (not (= |p_$1| ($phys_ptr_cast $null ($field_type ($field |p_$1|))))) (not (= |p_$1| ($phys_ptr_cast $null ($field_type ($field |p_$1|)))))))
    (forall( (|p_$102| $ptr) (|a_$5| $ptr) (|f_$39| $field))(!(=> (and ($is_proper ($dot |p_$102| |f_$39|)) (<= ($sizeof ($field_type ($field |p_$102|))) ($sizeof ($field_type ($field |a_$5|))))) (= ($index_within ($dot |p_$102| |f_$39|) |a_$5|) ($index_within |p_$102| |a_$5|)))  :pattern ( ($index_within ($dot |p_$102| |f_$39|) |a_$5|))))
    (forall( (|p_$103| $ptr) (|q_$5| $ptr) (|t_$38| $ctype))(!(=> (and (= ($field_type ($field |p_$103|)) |t_$38|) (= ($field_type ($field |q_$5|)) |t_$38|)) (= ($index_within |p_$103| |q_$5|) (- ($field_arr_index ($field |p_$103|)) ($field_arr_index ($field |q_$5|)))))  :pattern ( ($index_within ($ptr ($as_field_with_type ($field |p_$103|) |t_$38|) ($base |p_$103|)) ($ptr ($as_field_with_type ($field |q_$5|) |t_$38|) ($base |q_$5|))))))
    (forall( (|p_$104| $ptr) (|T_$9| $ctype) (|sz_$24| Int))(!(= ($array_range_no_state |p_$104| |T_$9| |sz_$24|) (ite ($is_primitive |T_$9|) (lambda@0 $fk_base |p_$104| |T_$9| |sz_$24|) (lambda@1 |sz_$24| |p_$104|)))  :pattern ( ($array_range_no_state |p_$104| |T_$9| |sz_$24|))))
    (forall( (|p_$107| $ptr) (|t_$39| $ctype) (|sz_$28| Int))(!(= ($phys_ptr_cast ($ptr ($as_field_with_type ($field |p_$107|) ($array |t_$39| |sz_$28|)) ($base |p_$107|)) |t_$39|) ($dot |p_$107| ($array_emb ($element_type ($field_type ($field |p_$107|))) ($array_length ($field_type ($field |p_$107|))))))  :pattern ( ($phys_ptr_cast ($ptr ($as_field_with_type ($field |p_$107|) ($array |t_$39| |sz_$28|)) ($base |p_$107|)) |t_$39|))))
    (forall( (|p_$108| $ptr) (|t_$40| $ctype) (|sz_$29| Int))(!(= ($spec_ptr_cast ($ptr ($as_field_with_type ($field |p_$108|) ($array |t_$40| |sz_$29|)) ($base |p_$108|)) |t_$40|) ($dot |p_$108| ($array_emb ($element_type ($field_type ($field |p_$108|))) ($array_length ($field_type ($field |p_$108|))))))  :pattern ( ($spec_ptr_cast ($ptr ($as_field_with_type ($field |p_$108|) ($array |t_$40| |sz_$29|)) ($base |p_$108|)) |t_$40|))))
    (forall( (|p_$120| $ptr))(!(= ($as_addr |p_$120| ($field_type ($field |p_$120|)) ($addr |p_$120|)) |p_$120|)  :pattern ( ($addr |p_$120|))))
    (forall( (|p_$14| $ptr))(= ($dot |p_$14| ($array_emb ($element_type ($field_type ($field |p_$14|))) ($array_length ($field_type ($field |p_$14|))))) ($dot |p_$14| ($array_emb ($element_type ($field_type ($field |p_$14|))) ($array_length ($field_type ($field |p_$14|)))))))
    (forall( (|p_$15| $ptr) (|s_$0| $state))(= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s_$0|) |p_$15|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s_$0|) |p_$15|)))
    (forall( (|p_$159| $ptr) (|c_$10| $ptr))(!(=> (forall( (|s_$18| $state))(!(=> ($valid_claim |s_$18| |c_$10|) ($closed |s_$18| |p_$159|))  :pattern ( ($dont_instantiate_state |s_$18|)))) ($in_claim_domain |p_$159| |c_$10|))  :pattern ( ($in_claim_domain |p_$159| |c_$10|))))
    (forall( (|p_$16| $ptr) (|f_$12| $field) (|s_$1| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$1|) |f_$12|) |p_$16|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$1|) |f_$12|) |p_$16|)))
    (forall( (|p_$171| $ptr) (|q_$21| $ptr) (|r_$16| $ptr))(!(=> (and ($extent_hint |p_$171| |q_$21|) ($extent_hint |q_$21| |r_$16|)) ($extent_hint |p_$171| |r_$16|))  :pattern ( ($extent_hint |p_$171| |q_$21|) ($extent_hint |q_$21| |r_$16|))))
    (forall( (|p_$172| $ptr) (|f_$49| $field))(!($extent_hint ($dot |p_$172| ($as_composite_field |f_$49|)) |p_$172|)  :pattern ( ($dot |p_$172| ($as_composite_field |f_$49|)))))
    (forall( (|p_$173| $ptr) (|i_$15| Int))(!($extent_hint ($idx |p_$173| |i_$15|) |p_$173|)  :pattern ( ($idx |p_$173| |i_$15|))))
    (forall( (|p_$179| $ptr))(!(= ($set_singleton |p_$179|) (lambda@15 |p_$179|))  :pattern ( ($set_singleton |p_$179|))))
    (forall( (|p_$181| $ptr))(!(= ($set_cardinality ($set_singleton |p_$181|)) 1)  :pattern ( ($set_singleton |p_$181|))))
    (forall( (|p_$182| $ptr) (|s1_$2| $@Map@@$ptr@To@Bool@@) (|s2_$1| $@Map@@$ptr@To@Bool@@))(!(=> (and ($set_disjoint |s1_$2| |s2_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$2| |p_$182|)) (= ($id_set_disjoint |p_$182| |s1_$2| |s2_$1|) 1))  :pattern ( ($set_disjoint |s1_$2| |s2_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$2| |p_$182|))))
    (forall( (|p_$183| $ptr) (|s1_$3| $@Map@@$ptr@To@Bool@@) (|s2_$2| $@Map@@$ptr@To@Bool@@))(!(=> (and ($set_disjoint |s1_$3| |s2_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$2| |p_$183|)) (= ($id_set_disjoint |p_$183| |s1_$3| |s2_$2|) 2))  :pattern ( ($set_disjoint |s1_$3| |s2_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$2| |p_$183|))))
    (forall( (|p_$185| $ptr) (|s_$20| $@Map@@$ptr@To@Bool@@))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$20| |p_$185|) ($set_in_pos |p_$185| |s_$20|))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$20| |p_$185|))))
    (forall( (|p_$186| $ptr) (|s_$21| $@Map@@$ptr@To@Bool@@))(!(= ($set_in0 |p_$186| |s_$21|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$21| |p_$186|))  :pattern ( ($set_in0 |p_$186| |s_$21|))))
    (forall( (|p_$189| $@Map@@$ptr@To@Bool@@))(= ($int_to_ptrset ($ptrset_to_int |p_$189|)) |p_$189|))
    (forall( (|p_$190| $ptr))(!(=> (and (<= 0 ($addr |p_$190|)) (<= ($addr |p_$190|) $max.u8)) (= ($ptr_to_u8 |p_$190|) ($addr |p_$190|)))  :pattern ( ($ptr_to_u8 |p_$190|))))
    (forall( (|p_$191| $ptr))(!(=> (and (<= $min.i8 ($addr |p_$191|)) (<= ($addr |p_$191|) $max.i8)) (= ($ptr_to_i8 |p_$191|) ($addr |p_$191|)))  :pattern ( ($ptr_to_i8 |p_$191|))))
    (forall( (|p_$192| $ptr))(!(=> (and (<= 0 ($addr |p_$192|)) (<= ($addr |p_$192|) $max.u4)) (= ($ptr_to_u4 |p_$192|) ($addr |p_$192|)))  :pattern ( ($ptr_to_u4 |p_$192|))))
    (forall( (|p_$193| $ptr))(!(=> (and (<= $min.i4 ($addr |p_$193|)) (<= ($addr |p_$193|) $max.i4)) (= ($ptr_to_i4 |p_$193|) ($addr |p_$193|)))  :pattern ( ($ptr_to_i4 |p_$193|))))
    (forall( (|p_$194| $ptr))(!(=> (and (<= 0 ($addr |p_$194|)) (<= ($addr |p_$194|) $max.u2)) (= ($ptr_to_u2 |p_$194|) ($addr |p_$194|)))  :pattern ( ($ptr_to_u2 |p_$194|))))
    (forall( (|p_$195| $ptr))(!(=> (and (<= $min.i2 ($addr |p_$195|)) (<= ($addr |p_$195|) $max.i2)) (= ($ptr_to_i2 |p_$195|) ($addr |p_$195|)))  :pattern ( ($ptr_to_i2 |p_$195|))))
    (forall( (|p_$196| $ptr))(!(=> (and (<= 0 ($addr |p_$196|)) (<= ($addr |p_$196|) $max.u1)) (= ($ptr_to_u1 |p_$196|) ($addr |p_$196|)))  :pattern ( ($ptr_to_u1 |p_$196|))))
    (forall( (|p_$197| $ptr))(!(=> (and (<= $min.i1 ($addr |p_$197|)) (<= ($addr |p_$197|) $max.i1)) (= ($ptr_to_i1 |p_$197|) ($addr |p_$197|)))  :pattern ( ($ptr_to_i1 |p_$197|))))
    (forall( (|p_$2| $ptr))(= (= |p_$2| ($phys_ptr_cast $null ($field_type ($field |p_$2|)))) (= |p_$2| ($phys_ptr_cast $null ($field_type ($field |p_$2|))))))
    (forall( (|p_$201| Int))(= ($select.$map_t..^^mathint.^^mathint $zero.$map_t..^^mathint.^^mathint |p_$201|) 0))
    (forall( (|p_$205| $ptr) (|r_$20| $ptr) (|S_$134| $state))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@10 |r_$20| |S_$134|) |p_$205|) (and ($is_proper ($dot ($base |p_$205|) ($field |p_$205|))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$134| |r_$20| ($field_type ($field |r_$20|))) ($emb0 |p_$205|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@10 |r_$20| |S_$134|) |p_$205|))))
    (forall( (|p_$206| $ptr) (|r_$21| $ptr) (|$full_extent_state_$0| $state))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@11 |r_$21| |$full_extent_state_$0|) |p_$206|) (and ($is_proper |p_$206|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |$full_extent_state_$0| |r_$21| ($field_type ($field |r_$21|))) ($emb0 |p_$206|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@11 |r_$21| |$full_extent_state_$0|) |p_$206|))))
    (forall( (|p_$207| $ptr) (|o_$15| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@12 |o_$15|) |p_$207|) (and ($is_proper |p_$207|) (= ($emb0 |p_$207|) |o_$15|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@12 |o_$15|) |p_$207|))))
    (forall( (|p_$208| $ptr) (|q_$32| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@13 |q_$32|) |p_$208|) (and (and ($is_proper |p_$208|) ($is_volatile_field ($field |p_$208|))) (= ($emb0 |p_$208|) |q_$32|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@13 |q_$32|) |p_$208|))))
    (forall( (|p_$21| $ptr) (|S_$2| $state))(= ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$2|) ($f_owns ($field_type ($field |p_$21|)))) |p_$21|)) ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$2|) ($f_owns ($field_type ($field |p_$21|)))) |p_$21|))))
    (forall( (|p_$22| $ptr) (|S_$5| $state))(= (not (= ($field_type ($field ($owner |S_$5| |p_$22|))) ^$@thread_id_t)) (not (= ($field_type ($field ($owner |S_$5| |p_$22|))) ^$@thread_id_t))))
    (forall( (|p_$23| $ptr) (|S_$6| $state))(= (or (not (= ($owner |S_$6| |p_$23|) $me)) (and ($is_primitive ($field_type ($field |p_$23|))) ($closed |S_$6| |p_$23|))) (or (not (= ($owner |S_$6| |p_$23|) $me)) (and ($is_primitive ($field_type ($field |p_$23|))) ($closed |S_$6| |p_$23|)))))
    (forall( (|p_$24| $ptr) (|S_$7| $state))(= (= ($owner |S_$7| ($emb0 |p_$24|)) $me) (= ($owner |S_$7| ($emb0 |p_$24|)) $me)))
    (forall( (|p_$25| $ptr) (|S_$8| $state))(= (ite ($is_primitive ($field_type ($field |p_$25|))) (and (= ($owner |S_$8| ($emb0 |p_$25|)) $me) (not ($closed |S_$8| ($emb0 |p_$25|)))) (= ($owner |S_$8| |p_$25|) $me)) (ite ($is_primitive ($field_type ($field |p_$25|))) (and (= ($owner |S_$8| ($emb0 |p_$25|)) $me) (not ($closed |S_$8| ($emb0 |p_$25|)))) (= ($owner |S_$8| |p_$25|) $me))))
    (forall( (|p_$29| $ptr))(= ($in_range_spec_ptr |p_$29|) ($in_range_spec_ptr |p_$29|)))
    (forall( (|p_$30| $ptr) (|S_$15| $state))(= (and (and (and (not ($is_primitive ($field_type ($field |p_$30|)))) ($is_proper |p_$30|)) (= ($owner |S_$15| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$15|) |p_$30|)) $me)) (not (= |p_$30| ($phys_ptr_cast $null ($field_type ($field |p_$30|)))))) (and (and (and (not ($is_primitive ($field_type ($field |p_$30|)))) ($is_proper |p_$30|)) (= ($owner |S_$15| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$15|) |p_$30|)) $me)) (not (= |p_$30| ($phys_ptr_cast $null ($field_type ($field |p_$30|))))))))
    (forall( (|p_$32| $ptr) (|S_$18| $state))(= ($thread_local |S_$18| |p_$32|) ($thread_local |S_$18| |p_$32|)))
    (forall( (|p_$33| $ptr) (|S_$19| $state))(= (or (and ($is_span_sequential ($field_type ($field |p_$33|))) ($thread_local |S_$19| |p_$33|)) ($mutable |S_$19| |p_$33|)) (or (and ($is_span_sequential ($field_type ($field |p_$33|))) ($thread_local |S_$19| |p_$33|)) ($mutable |S_$19| |p_$33|))))
    (forall( (|p_$34| $ptr) (|S2| $state) (|S1| $state))(= ($inv2 |S1| |S2| |p_$34| ($field_type ($field |p_$34|))) ($inv2 |S1| |S2| |p_$34| ($field_type ($field |p_$34|)))))
    (forall( (|p_$38| $ptr) (|S_$25| $state) (|S0_$1| $state))(= (and (and (and (= ($f_timestamp |S_$25|) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$25|) |p_$38|))) (= ($f_closed |S_$25|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S_$25|) |p_$38|)))) (= ($f_owner |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$25|) |p_$38|)))) (= ($roots |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$25|) |p_$38|)))) (and (and (and (= ($f_timestamp |S_$25|) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$25|) |p_$38|))) (= ($f_closed |S_$25|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S_$25|) |p_$38|)))) (= ($f_owner |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$25|) |p_$38|)))) (= ($roots |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$25|) |p_$38|))))))
    (forall( (|p_$4| $ptr))(= ($base |p_$4|) ($base |p_$4|)))
    (forall( (|p_$40| $ptr) (|f_$19| $field) (|h_$0| $@Map@@$ptr@To@Int@@))(= (MapRead$$@Map@@$ptr@To@Int@@$ |h_$0| |p_$40|) (MapRead$$@Map@@$ptr@To@Int@@$ |h_$0| |p_$40|)))
    (forall( (|p_$43| $ptr) (|S_$26| $state))(= (= ($timestamp |S_$26| |p_$43|) ($current_timestamp |S_$26|)) (= ($timestamp |S_$26| |p_$43|) ($current_timestamp |S_$26|))))
    (forall( (|p_$44| $ptr) (|S_$27| $state))(= (and (= ($timestamp |S_$27| |p_$44|) ($current_timestamp |S_$27|)) ($mutable |S_$27| |p_$44|)) (and (= ($timestamp |S_$27| |p_$44|) ($current_timestamp |S_$27|)) ($mutable |S_$27| |p_$44|))))
    (forall( (|p_$45| $ptr) (|M2_$1| $state) (|M1_$1| $state))(= (and (< ($current_timestamp |M1_$1|) ($timestamp |M2_$1| |p_$45|)) (<= ($timestamp |M2_$1| |p_$45|) ($current_timestamp |M2_$1|))) (and (< ($current_timestamp |M1_$1|) ($timestamp |M2_$1| |p_$45|)) (<= ($timestamp |M2_$1| |p_$45|) ($current_timestamp |M2_$1|)))))
    (forall( (|p_$46| $ptr) (|begin_time| Int) (|S_$29| $state))(= (and (and (not ($is_primitive ($field_type ($field |p_$46|)))) ($is_proper |p_$46|)) (and ($mutable |S_$29| |p_$46|) (or (>= ($timestamp |S_$29| |p_$46|) |begin_time|) ($in_writes_at |begin_time| |p_$46|)))) (and (and (not ($is_primitive ($field_type ($field |p_$46|)))) ($is_proper |p_$46|)) (and ($mutable |S_$29| |p_$46|) (or (>= ($timestamp |S_$29| |p_$46|) |begin_time|) ($in_writes_at |begin_time| |p_$46|))))))
    (forall( (|p_$47| $ptr) (|begin_time_$0| Int) (|S_$30| $state))(= (and (and ($is_primitive ($field_type ($field |p_$47|))) ($is_proper |p_$47|)) (and ($mutable |S_$30| ($emb0 |p_$47|)) (or (>= ($timestamp |S_$30| ($emb0 |p_$47|)) |begin_time_$0|) ($in_writes_at |begin_time_$0| |p_$47|)))) (and (and ($is_primitive ($field_type ($field |p_$47|))) ($is_proper |p_$47|)) (and ($mutable |S_$30| ($emb0 |p_$47|)) (or (>= ($timestamp |S_$30| ($emb0 |p_$47|)) |begin_time_$0|) ($in_writes_at |begin_time_$0| |p_$47|))))))
    (forall( (|p_$48| $ptr) (|begin_time_$1| Int) (|S_$31| $state))(= ($in_writes_at |begin_time_$1| |p_$48|) ($in_writes_at |begin_time_$1| |p_$48|)))
    (forall( (|p_$5| $ptr) (|S| $state))(= ($emb0 |p_$5|) ($emb0 |p_$5|)))
    (forall( (|p_$51| $ptr) (|S_$34| $state))(= ($is_object_root_ptr |p_$51|) ($is_object_root_ptr |p_$51|)))
    (forall( (|p_$52| $ptr) (|S_$35| $state))(= ($is_object_root_ptr |p_$52|) ($is_object_root_ptr |p_$52|)))
    (forall( (|p_$53| $ptr) (|S_$36| $state))(= (and (forall( (|q_$3_$1| $ptr))(!(=> ($closed |S_$36| |q_$3_$1|) ($inv2 |S_$36| |S_$36| |q_$3_$1| ($field_type ($field |q_$3_$1|))))  :pattern ( ($closed |S_$36| |q_$3_$1|)))) ($good_for_admissibility |S_$36|)) (and (forall( (|q_$3| $ptr))(!(=> ($closed |S_$36| |q_$3|) ($inv2 |S_$36| |S_$36| |q_$3| ($field_type ($field |q_$3|))))  :pattern ( ($closed |S_$36| |q_$3|)))) ($good_for_admissibility |S_$36|))))
    (forall( (|p_$54| $ptr) (|S_$37| $state))(= (and (and ($closed |S_$37| |p_$54|) ($inv2 |S_$37| |S_$37| |p_$54| ($field_type ($field |p_$54|)))) (and (forall( (|q_$3_$3| $ptr))(!(=> ($closed |S_$37| |q_$3_$3|) ($inv2 |S_$37| |S_$37| |q_$3_$3| ($field_type ($field |q_$3_$3|))))  :pattern ( ($closed |S_$37| |q_$3_$3|)))) ($good_for_admissibility |S_$37|))) (and (and ($closed |S_$37| |p_$54|) ($inv2 |S_$37| |S_$37| |p_$54| ($field_type ($field |p_$54|)))) (and (forall( (|q_$3_$3| $ptr))(!(=> ($closed |S_$37| |q_$3_$3|) ($inv2 |S_$37| |S_$37| |q_$3_$3| ($field_type ($field |q_$3_$3|))))  :pattern ( ($closed |S_$37| |q_$3_$3|)))) ($good_for_admissibility |S_$37|)))))
    (forall( (|p_$55| $ptr) (|S_$38| $state))(= (and (and (and (and (and (and (and (and ($is |p_$55| ($field_type ($field |p_$55|))) ($is_proper |p_$55|)) (= ($owner |S_$38| |p_$55|) $me)) ($closed |S_$38| |p_$55|)) (not ($is_primitive ($field_type ($field |p_$55|))))) (or (not ($is_claimable ($field_type ($field |p_$55|)))) (= ($ref_cnt |S_$38| |p_$55|) 0))) ($inv2 |S_$38| |S_$38| |p_$55| ($field_type ($field |p_$55|)))) (forall( (|q_$4_$1| $ptr))(!(=> ($closed |S_$38| |q_$4_$1|) ($inv2 |S_$38| |S_$38| |q_$4_$1| ($field_type ($field |q_$4_$1|))))  :pattern ( ($closed |S_$38| |q_$4_$1|))))) ($good_for_pre_can_unwrap |S_$38|)) (and (and (and (and (and (and (and (and ($is |p_$55| ($field_type ($field |p_$55|))) ($is_proper |p_$55|)) (= ($owner |S_$38| |p_$55|) $me)) ($closed |S_$38| |p_$55|)) (not ($is_primitive ($field_type ($field |p_$55|))))) (or (not ($is_claimable ($field_type ($field |p_$55|)))) (= ($ref_cnt |S_$38| |p_$55|) 0))) ($inv2 |S_$38| |S_$38| |p_$55| ($field_type ($field |p_$55|)))) (forall( (|q_$4| $ptr))(!(=> ($closed |S_$38| |q_$4|) ($inv2 |S_$38| |S_$38| |q_$4| ($field_type ($field |q_$4|))))  :pattern ( ($closed |S_$38| |q_$4|))))) ($good_for_pre_can_unwrap |S_$38|))))
    (forall( (|p_$56| $ptr) (|S_$41| $state))(= ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$41|) |p_$56|)) ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$41|) |p_$56|))))
    (forall( (|p_$57| $ptr) (|S_$42| $state))(= ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$42|) |p_$57|))) ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$42|) |p_$57|)))))
    (forall( (|p_$58| $ptr))(= ($dot |p_$58| ($f_vol_version ($field_type ($field |p_$58|)))) ($dot |p_$58| ($f_vol_version ($field_type ($field |p_$58|))))))
    (forall( (|p_$6| $ptr))(= ($base |p_$6|) ($base |p_$6|)))
    (forall( (|p_$66| $ptr) (|s_$10| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$10|) ($field |p_$66|)) ($base |p_$66|)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$10|) ($field |p_$66|)) ($base |p_$66|))))
    (forall( (|p_$72| $ptr))(= (and (<= 0 ($addr |p_$72|)) (<= ($addr |p_$72|) $max.u8)) (and (<= 0 ($addr |p_$72|)) (<= ($addr |p_$72|) $max.u8))))
    (forall( (|p_$73| $ptr))(!(= ($ptr ($field |p_$73|) ($base |p_$73|)) |p_$73|)  :pattern ( ($base |p_$73|)) :pattern ( ($field |p_$73|))))
    (forall( (|p_$74| $ptr))(!(and (and (= (= ($addr |p_$74|) 0) (= |p_$74| ($phys_ptr_cast $null ($field_type ($field |p_$74|))))) (=> ($in_range_phys_ptr |p_$74|) ($in_range_t $arch_ptr_type ($addr |p_$74|)))) (=> (and ($in_range_phys_ptr |p_$74|) ($is_proper |p_$74|)) ($in_range_t $arch_ptr_type (+ ($addr |p_$74|) ($sizeof ($field_type ($field |p_$74|)))))))  :pattern ( ($addr |p_$74|))))
    (forall( (|p_$75| $ptr))(!(=> ($is_proper |p_$75|) (= ($field_parent_type ($field |p_$75|)) ($field_type ($field ($base |p_$75|)))))  :pattern ( ($is_proper |p_$75|))))
    (forall( (|p_$76| $ptr) (|t_$29| $ctype))(!(= ($is |p_$76| |t_$29|) (= ($field_type ($field |p_$76|)) |t_$29|))  :pattern ( ($is |p_$76| |t_$29|))))
    (forall( (|p_$77| $ptr))(!(=> ($in_range_spec_ptr |p_$77|) (= ($spec_ptr_cast |p_$77| ($field_type ($field |p_$77|))) |p_$77|))  :pattern ( ($spec_ptr_cast |p_$77| ($field_type ($field |p_$77|)))) :pattern ( ($in_range_spec_ptr |p_$77|))))
    (forall( (|p_$78| $ptr))(!(=> ($in_range_phys_ptr |p_$78|) (and (= ($phys_ptr_cast |p_$78| ($field_type ($field |p_$78|))) |p_$78|) ($is_phys_field ($field |p_$78|))))  :pattern ( ($phys_ptr_cast |p_$78| ($field_type ($field |p_$78|)))) :pattern ( ($in_range_phys_ptr |p_$78|))))
    (forall( (|p_$79| $ptr))(!(=> ($in_range_phys_ptr |p_$79|) ($in_range_phys_ptr ($base |p_$79|)))  :pattern ( ($in_range_phys_ptr ($base |p_$79|)))))
    (forall( (|p_$80| $ptr) (|t_$30| $ctype))(!(= ($addr ($phys_ptr_cast |p_$80| |t_$30|)) ($addr |p_$80|))  :pattern ( ($addr ($phys_ptr_cast |p_$80| |t_$30|)))))
    (forall( (|p_$81| $ptr) (|t_$31| $ctype))(!(and (and (and (= ($field_type ($field ($spec_ptr_cast |p_$81| |t_$31|))) |t_$31|) (= (= ($spec_ptr_cast |p_$81| |t_$31|) ($phys_ptr_cast $null ($field_type ($field ($spec_ptr_cast |p_$81| |t_$31|))))) (= |p_$81| ($phys_ptr_cast $null ($field_type ($field |p_$81|)))))) (= ($field ($spec_ptr_cast |p_$81| |t_$31|)) ($as_field_with_type ($field ($spec_ptr_cast |p_$81| |t_$31|)) |t_$31|))) ($in_range_spec_ptr ($spec_ptr_cast |p_$81| |t_$31|)))  :pattern ( ($spec_ptr_cast |p_$81| |t_$31|))))
    (forall( (|p_$82| $ptr) (|t_$32| $ctype))(!(and (and (and (= ($field_type ($field ($phys_ptr_cast |p_$82| |t_$32|))) |t_$32|) (= (= ($phys_ptr_cast |p_$82| |t_$32|) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast |p_$82| |t_$32|))))) (= |p_$82| ($phys_ptr_cast $null ($field_type ($field |p_$82|)))))) (= ($field ($phys_ptr_cast |p_$82| |t_$32|)) ($as_field_with_type ($field ($phys_ptr_cast |p_$82| |t_$32|)) |t_$32|))) ($in_range_phys_ptr ($phys_ptr_cast |p_$82| |t_$32|)))  :pattern ( ($phys_ptr_cast |p_$82| |t_$32|))))
    (forall( (|p_$83| $ptr))(!(and (=> (not ($in_range_phys_ptr |p_$83|)) ($in_range_spec_ptr |p_$83|)) true)  :pattern ( ($in_range_phys_ptr |p_$83|))))
    (forall( (|p_$84| $ptr) (|f_$29| $field))(!(=> (and (and ($is_proper |p_$84|) ($in_range_phys_ptr |p_$84|)) ($has_field_at0 ($field_type ($field |p_$84|)) |f_$29|)) (= ($phys_ptr_cast |p_$84| ($field_type |f_$29|)) ($dot |p_$84| |f_$29|)))  :pattern ( ($has_field_at0 ($field_type ($field |p_$84|)) |f_$29|) ($phys_ptr_cast |p_$84| ($field_type |f_$29|)))))
    (forall( (|p_$85| $ptr))(!(=> (and (and ($is_proper |p_$85|) ($in_range_phys_ptr |p_$85|)) ($has_field_at0 ($field_parent_type ($field |p_$85|)) ($field |p_$85|))) (= ($phys_ptr_cast |p_$85| ($field_parent_type ($field |p_$85|))) ($base |p_$85|)))  :pattern ( ($phys_ptr_cast |p_$85| ($field_parent_type ($field |p_$85|))) ($has_field_at0 ($field_parent_type ($field |p_$85|)) ($field |p_$85|)))))
    (forall( (|p_$86| $ptr) (|f_$30| $field))(!(= ($dot |p_$86| |f_$30|) ($ptr |f_$30| |p_$86|))  :pattern ( ($dot |p_$86| |f_$30|))))
    (forall( (|p_$87| $ptr) (|f_$31| $field))(!(=> ($is_phys_field |f_$31|) (= ($addr ($dot |p_$87| |f_$31|)) ($unchk_add $arch_ptr_type ($addr |p_$87|) ($field_offset |f_$31|))))  :pattern ( ($addr ($dot |p_$87| |f_$31|)))))
    (forall( (|p_$88| $ptr) (|f_$32| $field))(!(and (and (and (=> (or ($in_range_spec_ptr |p_$88|) ($is_ghost_field |f_$32|)) ($in_range_spec_ptr ($dot |p_$88| |f_$32|))) (=> (and ($in_range_phys_ptr |p_$88|) ($is_phys_field |f_$32|)) ($in_range_phys_ptr ($dot |p_$88| |f_$32|)))) (=> ($is_proper ($dot |p_$88| |f_$32|)) (=> (not (= |p_$88| ($phys_ptr_cast $null ($field_type ($field |p_$88|))))) (not (= ($dot |p_$88| |f_$32|) ($phys_ptr_cast $null ($field_type ($field ($dot |p_$88| |f_$32|))))))))) (=> (and ($is_proper |p_$88|) (= ($field_parent_type |f_$32|) ($field_type ($field |p_$88|)))) ($is_proper ($dot |p_$88| |f_$32|))))  :pattern ( ($dot |p_$88| |f_$32|))))
    (forall( (|p_$89| $ptr))(!(= ($emb0 |p_$89|) (ite ($is_primitive ($field_type ($field |p_$89|))) ($base |p_$89|) |p_$89|))  :pattern ( ($emb0 |p_$89|))))
    (forall( (|p_$90| $ptr) (|i_$2| Int))(!(= ($idx |p_$90| |i_$2|) ($dot ($base |p_$90|) ($field_plus ($field |p_$90|) |i_$2|)))  :pattern ( ($idx |p_$90| |i_$2|))))
    (forall( (|p_$91| $ptr) (|i_$3| Int) (|j| Int))(!(= ($idx ($idx |p_$91| |i_$3|) |j|) ($dot ($base |p_$91|) ($field_plus ($field |p_$91|) (+ |i_$3| |j|))))  :pattern ( ($idx ($idx |p_$91| |i_$3|) |j|))))
    (forall( (|p_$92| $ptr) (|i_$4| Int))(!(= ($addr ($idx |p_$92| |i_$4|)) ($unchk_add $arch_ptr_type ($addr |p_$92|) (* ($sizeof ($field_type ($field |p_$92|))) |i_$4|)))  :pattern ( ($addr ($idx |p_$92| |i_$4|)))))
    (forall( (|p_$93| $ptr) (|i_$5| Int))(!(=> ($is_proper ($idx |p_$93| |i_$5|)) (=> (not (= |p_$93| ($phys_ptr_cast $null ($field_type ($field |p_$93|))))) (not (= ($idx |p_$93| |i_$5|) ($phys_ptr_cast $null ($field_type ($field ($idx |p_$93| |i_$5|))))))))  :pattern ( ($idx |p_$93| |i_$5|))))
    (forall( (|p_$94| $ptr) (|i_$6| Int))(!(=> (and (or ($in_range_phys_ptr |p_$94|) ($in_range_phys_ptr ($base |p_$94|))) ($is_proper ($idx |p_$94| |i_$6|))) ($in_range_phys_ptr ($idx |p_$94| |i_$6|)))  :pattern ( ($idx |p_$94| |i_$6|))))
    (forall( (|p| $ptr))(= (not ($is_primitive ($field_type ($field |p|)))) (not ($is_primitive ($field_type ($field |p|))))))
    (forall( (|p1_$1| $ptr) (|p2_$1| $ptr))(!(= ($ptr_eq |p1_$1| |p2_$1|) (= ($addr |p1_$1|) ($addr |p2_$1|)))  :pattern ( ($ptr_eq |p1_$1| |p2_$1|))))
    (forall( (|p2_$0| $ptr) (|p1_$0| $ptr))(= (not ($ptr_eq |p1_$0| |p2_$0|)) (not ($ptr_eq |p1_$0| |p2_$0|))))
    (forall( (|p2| $ptr) (|p1| $ptr))(= ($ptr_eq |p1| |p2|) ($ptr_eq |p1| |p2|)))
    (forall( (|ptrs| $@Map@@$ptr@To@Bool@@) (|time| Int) (|S_$28| $state))(= (= ($writes_at |time|) |ptrs|) (= ($writes_at |time|) |ptrs|)))
    (forall( (|Q#__vcc_state$1^41.49#tc3| $state) (|Q#x$1^41.49#tc1| Int) (|#l1_$4| $ptr) (|#l0_$4| Int))(!(=> (and (and ($good_state |Q#__vcc_state$1^41.49#tc3|) true) (and (<= 0 |#l0_$4|) (<= |#l0_$4| $max.u4))) (= ($select.$map_t..^^mathint.^^mathint (F@lambda@2 |Q#__vcc_state$1^41.49#tc3| ($phys_ptr_cast |#l1_$4| ^^u4) |#l0_$4|) |Q#x$1^41.49#tc1|) (ite (or (< |Q#x$1^41.49#tc1| 0) (>= |Q#x$1^41.49#tc1| |#l0_$4|)) 0 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |Q#__vcc_state$1^41.49#tc3|) ($field ($idx ($phys_ptr_cast |#l1_$4| ^^u4) |Q#x$1^41.49#tc1|))) ($emb0 ($idx ($phys_ptr_cast |#l1_$4| ^^u4) |Q#x$1^41.49#tc1|))))))  :weight  10 :pattern ( ($select.$map_t..^^mathint.^^mathint (F@lambda@2 |Q#__vcc_state$1^41.49#tc3| ($phys_ptr_cast |#l1_$4| ^^u4) |#l0_$4|) |Q#x$1^41.49#tc1|))))
    (forall( (|Q#__vcc_state$1^65.32#tc3_$0| $state) (|Q#x$1^65.32#tc1_$0| Int) (|#l1_$2| $ptr) (|#l0_$2| Int))(!(=> (and (and ($good_state |Q#__vcc_state$1^65.32#tc3_$0|) true) (and (<= 0 |#l0_$2|) (<= |#l0_$2| $max.u4))) (= ($select.$map_t..^^mathint.^^mathint (F@lambda@3 |Q#__vcc_state$1^65.32#tc3_$0| ($phys_ptr_cast |#l1_$2| ^^u4) |#l0_$2|) |Q#x$1^65.32#tc1_$0|) (ite (or (< |Q#x$1^65.32#tc1_$0| 0) (>= |Q#x$1^65.32#tc1_$0| |#l0_$2|)) 0 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |Q#__vcc_state$1^65.32#tc3_$0|) ($field ($idx ($phys_ptr_cast |#l1_$2| ^^u4) |Q#x$1^65.32#tc1_$0|))) ($emb0 ($idx ($phys_ptr_cast |#l1_$2| ^^u4) |Q#x$1^65.32#tc1_$0|))))))  :weight  10 :pattern ( ($select.$map_t..^^mathint.^^mathint (F@lambda@3 |Q#__vcc_state$1^65.32#tc3_$0| ($phys_ptr_cast |#l1_$2| ^^u4) |#l0_$2|) |Q#x$1^65.32#tc1_$0|))))
    (forall( (|Q#__vcc_state$1^65.32#tc3| $state) (|Q#x$1^65.32#tc1| Int) (|#l1_$0| $ptr) (|#l0_$0| Int))(!(=> (and (and ($good_state |Q#__vcc_state$1^65.32#tc3|) true) (and (<= 0 |#l0_$0|) (<= |#l0_$0| $max.u4))) (= ($select.$map_t..^^mathint.^^mathint (F@lambda@4 |Q#__vcc_state$1^65.32#tc3| ($phys_ptr_cast |#l1_$0| ^^u4) |#l0_$0|) |Q#x$1^65.32#tc1|) (ite (or (< |Q#x$1^65.32#tc1| 0) (>= |Q#x$1^65.32#tc1| |#l0_$0|)) 0 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |Q#__vcc_state$1^65.32#tc3|) ($field ($idx ($phys_ptr_cast |#l1_$0| ^^u4) |Q#x$1^65.32#tc1|))) ($emb0 ($idx ($phys_ptr_cast |#l1_$0| ^^u4) |Q#x$1^65.32#tc1|))))))  :weight  10 :pattern ( ($select.$map_t..^^mathint.^^mathint (F@lambda@4 |Q#__vcc_state$1^65.32#tc3| ($phys_ptr_cast |#l1_$0| ^^u4) |#l0_$0|) |Q#x$1^65.32#tc1|))))
    (forall( (|q_$25| $ptr) (|$fk_base_$0| $field_kind) (|p_$202| $ptr) (|T_$18| $ctype) (|sz_$36| Int))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@0 |$fk_base_$0| |p_$202| |T_$18| |sz_$36|) |q_$25|) (and (and (and (and (and (= ($emb0 |q_$25|) ($emb0 |p_$202|)) (= ($field_type ($field |q_$25|)) |T_$18|)) (= ($field_arr_root ($field |q_$25|)) ($field_arr_root ($field |p_$202|)))) (and (<= 0 ($index_within |q_$25| |p_$202|)) (<= ($index_within |q_$25| |p_$202|) (- |sz_$36| 1)))) (= |q_$25| ($dot ($base |p_$202|) ($field_plus ($field |p_$202|) ($index_within |q_$25| |p_$202|))))) (not (= ($field_kind ($field |q_$25|)) |$fk_base_$0|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@0 |$fk_base_$0| |p_$202| |T_$18| |sz_$36|) |q_$25|))))
    (forall( (|q_$26| $ptr) (|sz_$37| Int) (|p_$203| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@1 |sz_$37| |p_$203|) |q_$26|) (and (and (<= 0 ($index_within |q_$26| |p_$203|)) (<= ($index_within |q_$26| |p_$203|) (- |sz_$37| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($full_extent ($idx |p_$203| ($index_within |q_$26| |p_$203|))) |q_$26|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@1 |sz_$37| |p_$203|) |q_$26|))))
    (forall( (|q_$27| $ptr) (|sz_$38| Int) (|p_$204| $ptr) (|T_$19| $ctype))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@2 |sz_$38| |p_$204| |T_$19|) |q_$27|) (and (and (<= 0 ($index_within |q_$27| |p_$204|)) (<= ($index_within |q_$27| |p_$204|) (- |sz_$38| 1))) (= |q_$27| ($idx |p_$204| ($index_within |q_$27| |p_$204|)))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@2 |sz_$38| |p_$204| |T_$19|) |q_$27|))))
    (forall( (|r_$11| $ptr))(!(= ($full_extent |r_$11|) (lambda@11 |r_$11| $full_extent_state))  :pattern ( ($full_extent |r_$11|))))
    (forall( (|r_$17| $ptr) (|S0_$23| $state) (|S_$133| $state) (|o_$12| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Int@@$ (lambda@3 |S0_$23| |S_$133| |o_$12|) |r_$17|) (ite (or (= ($owner |S0_$23| |r_$17|) |o_$12|) (= |r_$17| |o_$12|)) ($current_timestamp |S_$133|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$23|) |r_$17|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (lambda@3 |S0_$23| |S_$133| |o_$12|) |r_$17|))))
    (forall( (|r_$18| $ptr) (|S0_$24| $state) (|o_$13| $ptr))(!(= (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@4 |S0_$24| |o_$13|) |r_$18|) (ite (= ($owner |S0_$24| |r_$18|) |o_$13|) $me (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$24|) |r_$18|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@4 |S0_$24| |o_$13|) |r_$18|))))
    (forall( (|r_$19| $ptr) (|o_$14| $ptr) (|S0_$25| $state))(!(= (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@5 |o_$14| |S0_$25|) |r_$19|) (ite (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S0_$25| |o_$14|) |r_$19|) |o_$14| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$25|) |r_$19|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@5 |o_$14| |S0_$25|) |r_$19|))))
    (forall( (|S_$100| $state) (|p_$149| $ptr) (|q_$12| $ptr) (|l_$4| $label))(!(=> ($in_vdomain_lab |S_$100| |p_$149| |q_$12| |l_$4|) ($inv_lab |S_$100| |p_$149| |l_$4|))  :pattern ( ($in_vdomain_lab |S_$100| |p_$149| |q_$12| |l_$4|))))
    (forall( (|S_$101| $state) (|p_$150| $ptr))(!(=> (and ($full_stop |S_$101|) (and (and (and (and ($is (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|) ($field_type ($field (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)))) ($is_proper (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|))) (= ($owner |S_$101| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)) $me)) ($closed |S_$101| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|))) (not ($is_primitive ($field_type ($field (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|))))))) ($in_domain |S_$101| |p_$150| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)))  :pattern ( ($in_domain |S_$101| |p_$150| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)))))
    (forall( (|S_$102| $state) (|p_$151| $ptr) (|q_$13| $ptr))(!(and ($instantiate_ptr (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$102|) |q_$13|)) (=> ($in_domain |S_$102| |p_$151| |q_$13|) (and (and (and (and (and (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$102|) |p_$151|) |q_$13|) (and (and (and (and ($is |q_$13| ($field_type ($field |q_$13|))) ($is_proper |q_$13|)) (= ($owner |S_$102| |q_$13|) $me)) ($closed |S_$102| |q_$13|)) (not ($is_primitive ($field_type ($field |q_$13|)))))) ($closed |S_$102| |p_$151|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$102|) |q_$13|))) |p_$151|)) ($inv2 |S_$102| |S_$102| |p_$151| ($field_type ($field |p_$151|)))) ($set_in0 |p_$151| ($owns |S_$102| ($owner |S_$102| |p_$151|))))))  :pattern ( ($in_domain |S_$102| |p_$151| |q_$13|))))
    (forall( (|S_$103| $state) (|p_$152| $ptr) (|q_$14| $ptr))(!(=> (and (and ($full_stop |S_$103|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$103|) |q_$14|))) |p_$152|)) (and (and (and (and ($is |q_$14| ($field_type ($field |q_$14|))) ($is_proper |q_$14|)) (= ($owner |S_$103| |q_$14|) $me)) ($closed |S_$103| |q_$14|)) (not ($is_primitive ($field_type ($field |q_$14|)))))) ($in_domain |S_$103| |p_$152| |q_$14|))  :pattern ( ($in_domain |S_$103| |p_$152| |q_$14|))))
    (forall( (|S_$104| $state) (|q_$15| $ptr) (|r_$7| $ptr))(!(=> (and (and ($in_domain |S_$104| |q_$15| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|)) ($is_sequential_field ($f_owns ($field_type ($field |q_$15|))))) ($set_in0 |r_$7| ($owns |S_$104| |q_$15|))) (and (and (= ($owner |S_$104| |r_$7|) |q_$15|) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |r_$7|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|))) ($in_domain |S_$104| |r_$7| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|))))  :pattern ( ($in_domain |S_$104| |r_$7| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|)))))
    (forall( (|S_$105| $state) (|p_$153| $ptr))(!(= ($as_deep_domain |S_$105| |p_$153|) |p_$153|)  :pattern ( ($as_deep_domain |S_$105| |p_$153|))))
    (forall( (|S_$107| $state) (|p_$155| $ptr) (|q_$16| $ptr) (|r_$8| $ptr))(!(=> (and (and (and ($good_state |S_$107|) ($is_sequential_field ($f_owns ($field_type ($field |p_$155|))))) ($in_domain |S_$107| |p_$155| |q_$16|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$107| |p_$155|) |r_$8|)) ($in_domain |S_$107| |r_$8| |q_$16|))  :pattern ( ($in_domain |S_$107| |p_$155| ($as_deep_domain |S_$107| |q_$16|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$107| |p_$155|) |r_$8|))))
    (forall( (|S_$108| $state) (|p_$156| $ptr) (|q_$17| $ptr) (|r_$9| $ptr))(!(=> (and (and ($is_volatile_field ($f_owns ($field_type ($field |q_$17|)))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|))) |q_$17|)) (forall( (|S1_$14| $state))(=> (and (and ($inv2 |S1_$14| |S1_$14| |q_$17| ($field_type ($field |q_$17|))) (= ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$14|) |p_$156|)) ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|)))) (= ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$14|) |p_$156|))) ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|))))) ($set_in0 |r_$9| ($owns |S1_$14| |q_$17|))))) (and ($in_vdomain |S_$108| |r_$9| |p_$156|) ($set_in0 |r_$9| ($owns |S_$108| |q_$17|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|))) |q_$17|) ($in_vdomain |S_$108| |r_$9| |p_$156|))))
    (forall( (|S_$109| $state) (|p_$157| $ptr) (|q_$18| $ptr))(!(=> ($in_vdomain |S_$109| |p_$157| |q_$18|) ($in_domain |S_$109| |p_$157| |q_$18|))  :pattern ( ($in_vdomain |S_$109| |p_$157| |q_$18|))))
    (forall( (|s_$11| $@Map@@$ptr@To@Bool@@) (|p_$70| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$11| |p_$70|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$11| |p_$70|)))
    (forall( (|S_$110| $state) (|p_$158| $ptr) (|d| $ptr) (|f_$46| $field))(!(=> (and (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$110|) |d|))) |p_$158|) ($is_sequential_field |f_$46|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$110|) |f_$46|) |p_$158|) ($fetch_from_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$110|) |d|)) |p_$158| |f_$46|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$110|) |f_$46|) |p_$158|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$110|) |d|))) |p_$158|) ($is_sequential_field |f_$46|))))
    (forall( (|S_$111| $state) (|c_$11| $ptr) (|obj| $ptr) (|ptr| $ptr))(!(= ($by_claim |S_$111| |c_$11| |obj| |ptr|) |ptr|)  :pattern ( ($by_claim |S_$111| |c_$11| |obj| |ptr|))))
    (forall( (|S_$112| $state) (|p_$160| $ptr) (|c_$12| $ptr) (|f_$47| $field))(!(=> (and (and (and ($good_state |S_$112|) ($closed |S_$112| |c_$12|)) ($in_claim_domain |p_$160| |c_$12|)) ($is_sequential_field |f_$47|)) (and ($in_claim_domain |p_$160| |c_$12|) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$112|) |f_$47|) |p_$160|) ($fetch_from_domain ($claim_version |c_$12|) |p_$160| |f_$47|))))  :pattern ( ($in_claim_domain |p_$160| |c_$12|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$112|) |f_$47|) |p_$160|))))
    (forall( (|S_$113| $state) (|p_$161| $ptr) (|q_$19| $ptr) (|c_$13| $ptr) (|f_$48| $field))(!(=> (and (and (and ($good_state |S_$113|) ($closed |S_$113| |c_$13|)) ($in_claim_domain |p_$161| |c_$13|)) ($is_sequential_field |f_$48|)) (and ($in_claim_domain |p_$161| |c_$13|) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$113|) |f_$48|) |p_$161|) ($fetch_from_domain ($claim_version |c_$13|) |p_$161| |f_$48|))))  :pattern ( ($by_claim |S_$113| |c_$13| |q_$19| ($dot |p_$161| |f_$48|)))))
    (forall( (|S_$115| $state) (|t_$46| $ctype) (|p_$163| $ptr) (|approver_$1| $field) (|subject_$2| $field))(!(=> (and (and (and ($full_stop |S_$115|) ($is_approved_by |t_$46| |approver_$1| |subject_$2|)) ($closed |S_$115| |p_$163|)) (or (= ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$115|) |approver_$1|) |p_$163|)) $me) (= ($int_to_ptr ($fetch_from_vv ($read_vol_version |S_$115| |p_$163|) |p_$163| |approver_$1|)) $me))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$115|) |subject_$2|) |p_$163|) ($fetch_from_vv ($read_vol_version |S_$115| |p_$163|) |p_$163| |subject_$2|)))  :pattern ( ($is_approved_by |t_$46| |approver_$1| |subject_$2|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$115|) |subject_$2|) |p_$163|))))
    (forall( (|S_$116| $state) (|p_$164| $ptr) (|t_$47| $ctype) (|subject_$3| $field))(!(=> (and (and (and ($full_stop |S_$116|) ($closed |S_$116| |p_$164|)) ($is_owner_approved |t_$47| |subject_$3|)) (= ($owner |S_$116| |p_$164|) $me)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$116|) |subject_$3|) |p_$164|) ($fetch_from_vv ($read_vol_version |S_$116| |p_$164|) |p_$164| |subject_$3|)))  :pattern ( ($is_owner_approved |t_$47| |subject_$3|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$116|) |subject_$3|) |p_$164|))))
    (forall( (|S_$117| $state) (|r_$10| $ptr))(!(= ($extent |S_$117| |r_$10|) (lambda@10 |r_$10| |S_$117|))  :pattern ( ($extent |S_$117| |r_$10|))))
    (forall( (|S_$118| $state) (|p_$165| $ptr) (|r_$12| $ptr))(!($extent_hint |p_$165| |r_$12|)  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$118| |r_$12| ($field_type ($field |r_$12|))) |p_$165|))))
    (forall( (|S_$119| $state) (|r_$13| $ptr))(!(= ($extent_mutable |S_$119| |r_$13|) (and ($mutable |S_$119| |r_$13|) (forall( (|p_$166| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$119| |r_$13| ($field_type ($field |r_$13|))) |p_$166|) ($mutable |S_$119| |p_$166|))  :pattern ( ($extent_hint |p_$166| |r_$13|))))))  :pattern ( ($extent_mutable |S_$119| |r_$13|))))
    (forall( (|s_$12| $@Map@@$ptr@To@Bool@@) (|p_$71| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$12| |p_$71|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$12| |p_$71|)))
    (forall( (|S_$121| $state) (|T_$16| $ctype) (|sz_$34| Int) (|p_$168| $ptr))(!(=> ($extent_mutable |S_$121| ($ptr ($as_field_with_type ($field |p_$168|) ($array |T_$16| |sz_$34|)) ($base |p_$168|))) ($is_mutable_array |S_$121| ($dot |p_$168| ($array_emb ($element_type ($field_type ($field |p_$168|))) ($array_length ($field_type ($field |p_$168|))))) |T_$16| |sz_$34|))  :pattern ( ($extent_mutable |S_$121| ($ptr ($as_field_with_type ($field |p_$168|) ($array |T_$16| |sz_$34|)) ($base |p_$168|))))))
    (forall( (|S_$122| $state) (|T_$17| $ctype) (|sz_$35| Int) (|p_$169| $ptr))(!(=> ($in_range_phys_ptr |p_$169|) (=> (and ($is_primitive |T_$17|) ($mutable |S_$122| ($ptr ($as_field_with_type ($field |p_$169|) ($array |T_$17| |sz_$35|)) ($base |p_$169|)))) ($is_mutable_array |S_$122| ($dot |p_$169| ($array_emb ($element_type ($field_type ($field |p_$169|))) ($array_length ($field_type ($field |p_$169|))))) |T_$17| |sz_$35|)))  :pattern ( ($mutable |S_$122| ($ptr ($as_field_with_type ($field |p_$169|) ($array |T_$17| |sz_$35|)) ($base |p_$169|))))))
    (forall( (|S_$125| $state) (|#p_$9| $ptr))(!(= ($first_option_typed |S_$125| |#p_$9|) (=> ($is_union_type ($field_type ($field |#p_$9|))) (not (= ($owner |S_$125| ($dot |#p_$9| ($first_union_field ($field_type ($field |#p_$9|))))) $inactive_union_owner))))  :pattern ( ($first_option_typed |S_$125| |#p_$9|))))
    (forall( (|S_$126| $state) (|p_$174| $ptr))(!(= ($all_first_option_typed |S_$126| |p_$174|) (and ($first_option_typed |S_$126| |p_$174|) (forall( (|q_$22| $ptr) (|t_$48| $ctype))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$126| |p_$174| ($field_type ($field |p_$174|))) |q_$22|) ($first_option_typed |S_$126| |q_$22|))  :pattern ( ($extent_hint ($ptr ($as_field_with_type ($field |q_$22|) ($as_union_type |t_$48|)) ($base |q_$22|)) |p_$174|))))))  :pattern ( ($all_first_option_typed |S_$126| |p_$174|))))
    (forall( (|S_$127| $state) (|p_$175| $ptr) (|f_$50| $field))(!(and (and (and ($good_state |S_$127|) ($is_union_field |f_$50|)) (=> (not (= ($owner |S_$127| ($dot |p_$175| |f_$50|)) $inactive_union_owner)) (= ($active_option |S_$127| |p_$175|) |f_$50|))) (=> (= ($owner |S_$127| ($dot |p_$175| |f_$50|)) $inactive_union_owner) (forall( (|q_$23| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$127| ($dot |p_$175| |f_$50|) ($field_type ($field ($dot |p_$175| |f_$50|)))) |q_$23|) (not (and (and (and (not ($is_primitive ($field_type ($field |q_$23|)))) ($is_proper |q_$23|)) (= ($owner |S_$127| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$127|) |q_$23|)) $me)) (not (= |q_$23| ($phys_ptr_cast $null ($field_type ($field |q_$23|))))))))  :pattern ( ($extent_hint |q_$23| |p_$175|))))))  :pattern ( ($is_union_field |f_$50|) ($owner |S_$127| ($dot |p_$175| |f_$50|)))))
    (forall( (|S_$128| $state) (|p_$176| $ptr) (|f_$51| $field))(!(=> (and ($good_state |S_$128|) ($is_union_field |f_$51|)) (or (= |f_$51| ($active_option |S_$128| |p_$176|)) (= ($owner |S_$128| ($dot |p_$176| |f_$51|)) $inactive_union_owner)))  :pattern ( ($is_union_field |f_$51|) ($dot |p_$176| |f_$51|) ($active_option |S_$128| |p_$176|))))
    (forall( (|S_$129| $state) (|p_$177| $ptr))(!(=> ($good_state |S_$129|) (and (= ($phys_ptr_cast ($vs_base_ref ($vs_ctor |S_$129| |p_$177|)) ($field_type ($field |p_$177|))) |p_$177|) (= ($vs_state ($vs_ctor |S_$129| |p_$177|)) |S_$129|)))  :pattern ( ($vs_ctor |S_$129| |p_$177|))))
    (forall( (|s_$13| $state) (|q_$7| $ptr) (|a_$7| $ptr) (|sz_$26| Int))(!(= ($in_composite_array_lev2 |s_$13| |q_$7| |a_$7| |sz_$26|) (and (and (<= 0 ($index_within |q_$7| |a_$7|)) (<= ($index_within |q_$7| |a_$7|) (- |sz_$26| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |s_$13| ($idx |a_$7| ($index_within |q_$7| |a_$7|)) ($field_type ($field |a_$7|))) |q_$7|)))  :pattern ( ($in_composite_array_lev2 |s_$13| |q_$7| |a_$7| |sz_$26|))))
    (forall( (|S_$130| $state) (|p_$178| $ptr) (|v_$2| Int))(!(and (and (and (and (= ($f_timestamp |S_$130|) ($f_timestamp ($update_int |S_$130| |p_$178| |v_$2|))) (= ($f_closed |S_$130|) ($f_closed ($update_int |S_$130| |p_$178| |v_$2|)))) (= ($f_owner |S_$130|) ($f_owner ($update_int |S_$130| |p_$178| |v_$2|)))) (= ($roots |S_$130|) ($roots ($update_int |S_$130| |p_$178| |v_$2|)))) (= ($heap ($update_int |S_$130| |p_$178| |v_$2|)) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$130|) ($field |p_$178|) (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$130|) ($field |p_$178|)) ($base |p_$178|) |v_$2|))))  :pattern ( ($update_int |S_$130| |p_$178| |v_$2|))))
    (forall( (|S_$132| $state) (|id_$0| Int) (|length| Int))(!(=> ($good_state |S_$132|) (and ($in_range_phys_ptr ($get_string_literal |id_$0| |length|)) ($is_thread_local_array |S_$132| ($get_string_literal |id_$0| |length|) ^^i1 (+ |length| 1))))  :pattern ( ($good_state |S_$132|) ($get_string_literal |id_$0| |length|))))
    (forall( (|s_$17| $state) (|p_$144| $ptr))(!(= ($claimed_closed |s_$17| |p_$144|) ($closed |s_$17| |p_$144|))  :pattern ( ($claimed_closed |s_$17| |p_$144|))))
    (forall( (|s_$19| $struct))($good_state ($vs_state |s_$19|)))
    (forall( (|S_$20| $state) (|t_$17| $token))(= (and ($good_state_ext |t_$17| |S_$20|) ($full_stop |S_$20|)) (and ($good_state_ext |t_$17| |S_$20|) ($full_stop |S_$20|))))
    (forall( (|S_$21| $state))(= (forall( (|p_$35_$1| $ptr))(!(<= ($timestamp |S_$21| |p_$35_$1|) ($current_timestamp |S_$21|))  :pattern ( ($owner |S_$21| |p_$35_$1|)))) (forall( (|p_$35| $ptr))(!(<= ($timestamp |S_$21| |p_$35|) ($current_timestamp |S_$21|))  :pattern ( ($owner |S_$21| |p_$35|))))))
    (forall( (|S_$22| $state))(= (forall( (|p_$36_$0| $ptr) (|q_$2_$0| $ptr))(!(=> (and (and ($good_state |S_$22|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$22|) ($f_owns ($field_type ($field |q_$2_$0|)))) |q_$2_$0|)) |p_$36_$0|)) ($closed |S_$22| |q_$2_$0|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$0|)))) (= ($owner |S_$22| |p_$36_$0|) |q_$2_$0|)) ($closed |S_$22| |p_$36_$0|)) (not (= |p_$36_$0| ($phys_ptr_cast $null ($field_type ($field |p_$36_$0|)))))) true))  :pattern ( ($set_in_pos |p_$36_$0| ($owns |S_$22| |q_$2_$0|))))) (forall( (|p_$36| $ptr) (|q_$2| $ptr))(!(=> (and (and ($good_state |S_$22|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$22|) ($f_owns ($field_type ($field |q_$2|)))) |q_$2|)) |p_$36|)) ($closed |S_$22| |q_$2|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36|)))) (= ($owner |S_$22| |p_$36|) |q_$2|)) ($closed |S_$22| |p_$36|)) (not (= |p_$36| ($phys_ptr_cast $null ($field_type ($field |p_$36|)))))) true))  :pattern ( ($set_in_pos |p_$36| ($owns |S_$22| |q_$2|)))))))
    (forall( (|S_$24| $state) (|S0_$0| $state))(= (and (and (and (= ($f_timestamp |S0_$0|) ($f_timestamp |S_$24|)) (= ($f_closed |S0_$0|) ($f_closed |S_$24|))) (= ($f_owner |S0_$0|) ($f_owner |S_$24|))) (= ($roots |S0_$0|) ($roots |S_$24|))) (and (and (and (= ($f_timestamp |S0_$0|) ($f_timestamp |S_$24|)) (= ($f_closed |S0_$0|) ($f_closed |S_$24|))) (= ($f_owner |S0_$0|) ($f_owner |S_$24|))) (= ($roots |S0_$0|) ($roots |S_$24|)))))
    (forall( (|S_$48| $state) (|p_$95| $ptr) (|T_$5| $ctype) (|sz_$18| Int))(!(= ($is_array |S_$48| |p_$95| |T_$5| |sz_$18|) (and (and (and (and (and (and ($is |p_$95| |T_$5|) ($is_proper |p_$95|)) (>= ($field_arr_size ($field |p_$95|)) (+ ($field_arr_index ($field |p_$95|)) |sz_$18|))) (= |p_$95| ($idx ($dot ($base |p_$95|) ($field_arr_root ($field |p_$95|))) ($field_arr_index ($field |p_$95|))))) (not (= ($field_kind ($field |p_$95|)) $fk_base))) (>= ($field_arr_index ($field |p_$95|)) 0)) (not ($is_primitive ($field_type ($field ($emb0 |p_$95|)))))))  :pattern ( ($is_array |S_$48| |p_$95| |T_$5| |sz_$18|))))
    (forall( (|S_$49| $state) (|p_$96| $ptr) (|T_$6| $ctype) (|sz_$19| Int))(!(= ($is_thread_local_array |S_$49| |p_$96| |T_$6| |sz_$19|) (and ($is_array |S_$49| |p_$96| |T_$6| |sz_$19|) (ite ($is_primitive |T_$6|) ($thread_local |S_$49| |p_$96|) (forall( (|i_$0_$1| Int))(!(=> (and (<= 0 |i_$0_$1|) (< |i_$0_$1| |sz_$19|)) ($thread_local |S_$49| ($idx |p_$96| |i_$0_$1|)))  :pattern ( ($owner |S_$49| ($idx |p_$96| |i_$0_$1|))))))))  :pattern ( ($is_thread_local_array |S_$49| |p_$96| |T_$6| |sz_$19|))))
    (forall( (|S_$50| $state) (|p_$97| $ptr) (|T_$7| $ctype) (|sz_$20| Int))(!(= ($is_mutable_array |S_$50| |p_$97| |T_$7| |sz_$20|) (and ($is_array |S_$50| |p_$97| |T_$7| |sz_$20|) (ite ($is_primitive |T_$7|) ($mutable |S_$50| ($emb0 |p_$97|)) (forall( (|i_$8| Int))(!(=> (and (<= 0 |i_$8|) (< |i_$8| |sz_$20|)) ($mutable |S_$50| ($idx |p_$97| |i_$8|)))  :pattern ( ($idx |p_$97| |i_$8|)))))))  :pattern ( ($is_mutable_array |S_$50| |p_$97| |T_$7| |sz_$20|))))
    (forall( (|S_$53| $state) (|T_$15| $ctype) (|sz_$32| Int) (|p_$110| $ptr) (|a_$8| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$53| |a_$8| ($array |T_$15| |sz_$32|)) |p_$110|) (or (= |p_$110| |a_$8|) (and (not ($is_primitive |T_$15|)) ($in_composite_array_lev2 |S_$53| |p_$110| ($dot |a_$8| ($array_emb ($element_type ($field_type ($field |a_$8|))) ($array_length ($field_type ($field |a_$8|))))) |sz_$32|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$53| |a_$8| ($array |T_$15| |sz_$32|)) |p_$110|))))
    (forall( (|S_$54| $state) (|p_$111| $ptr))(!(= ($owner |S_$54| |p_$111|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$54|) |p_$111|))  :inline  false :pattern ( ($owner |S_$54| |p_$111|))))
    (forall( (|S_$55| $state) (|p_$112| $ptr))(!(= ($closed |S_$55| |p_$112|) (and ($is_proper |p_$112|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S_$55|) |p_$112|)))  :inline  false :pattern ( ($closed |S_$55| |p_$112|))))
    (forall( (|S_$56| $state) (|p_$113| $ptr))(!(= ($timestamp |S_$56| |p_$113|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$56|) |p_$113|))  :inline  false :pattern ( ($timestamp |S_$56| |p_$113|))))
    (forall( (|S_$57| $state) (|p_$114| $ptr))(!(= ($ref_cnt |S_$57| |p_$114|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$57|) ($f_ref_cnt ($field_type ($field |p_$114|)))) |p_$114|))  :inline  false :pattern ( ($ref_cnt |S_$57| |p_$114|))))
    (forall( (|S_$58| $state) (|p_$115| $ptr))(!(= ($owns |S_$58| |p_$115|) ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$58|) ($f_owns ($field_type ($field |p_$115|)))) |p_$115|)))  :pattern ( ($owns |S_$58| |p_$115|))))
    (forall( (|S_$59| $state) (|p_$116| $ptr))(!(= ($mutable |S_$59| |p_$116|) (and (and ($is_proper |p_$116|) (= ($owner |S_$59| ($emb0 |p_$116|)) $me)) (not ($closed |S_$59| ($emb0 |p_$116|)))))  :pattern ( ($mutable |S_$59| |p_$116|))))
    (forall( (|s_$6| $state))(= |s_$6| |s_$6|))
    (forall( (|S_$60| $state) (|p_$117| $ptr))(!(=> ($good_state |S_$60|) (=> (and (and ($is_proper |p_$117|) ($in_range_phys_ptr |p_$117|)) (= ($owner |S_$60| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$60|) ($emb0 |p_$117|))) $me)) (= (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$60|)) ($addr |p_$117|) ($field_type ($field |p_$117|))) |p_$117|)))  :pattern ( ($addr |p_$117|) ($owner |S_$60| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$60|) |p_$117|)))))
    (forall( (|S_$61| $state) (|p_$118| $ptr) (|f_$40| $field))(!(=> ($good_state |S_$61|) (=> (and (and ($is_proper ($dot |p_$118| |f_$40|)) ($in_range_phys_ptr ($dot |p_$118| |f_$40|))) (= ($owner |S_$61| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$61|) |p_$118|)) $me)) (= (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$61|)) ($addr ($dot |p_$118| |f_$40|)) ($field_type |f_$40|)) ($dot |p_$118| |f_$40|))))  :pattern ( ($addr ($dot |p_$118| |f_$40|)) ($owner |S_$61| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$61|) |p_$118|)))))
    (forall( (|S_$62| $state) (|p_$119| $ptr) (|q_$8| $ptr))(!(=> ($good_state |S_$62|) (=> (and (and ($is_proper |p_$119|) ($in_range_phys_ptr |p_$119|)) (= ($owner |S_$62| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$62|) ($emb0 |p_$119|))) $me)) (= (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$62|)) ($addr |p_$119|) ($field_type ($field |p_$119|))) |p_$119|)))  :pattern ( ($retype |S_$62| |q_$8|) ($as_addr |p_$119| ($field_type ($field |q_$8|)) ($addr |q_$8|)))))
    (forall( (|S_$63| $state) (|p_$121| $ptr))(!(= ($retype |S_$63| |p_$121|) (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$63|)) ($addr |p_$121|) ($field_type ($field |p_$121|))))  :pattern ( ($retype |S_$63| |p_$121|))))
    (forall( (|S_$65| $state) (|p_$123| $ptr))(!(= ($thread_local |S_$65| |p_$123|) (and ($is_proper |p_$123|) (ite ($is_primitive ($field_type ($field |p_$123|))) (and (or ($is_sequential_field ($field |p_$123|)) (not ($closed |S_$65| ($emb0 |p_$123|)))) (and (and (and (not ($is_primitive ($field_type ($field ($emb0 |p_$123|))))) ($is_proper ($emb0 |p_$123|))) (= ($owner |S_$65| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$65|) ($emb0 |p_$123|))) $me)) (not (= ($emb0 |p_$123|) ($phys_ptr_cast $null ($field_type ($field ($emb0 |p_$123|)))))))) (and (and (and (not ($is_primitive ($field_type ($field |p_$123|)))) ($is_proper |p_$123|)) (= ($owner |S_$65| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$65|) |p_$123|)) $me)) (not (= |p_$123| ($phys_ptr_cast $null ($field_type ($field |p_$123|)))))))))  :pattern ( ($thread_local |S_$65| |p_$123|))))
    (forall( (|S_$66| $state))(!(=> ($function_entry |S_$66|) (and (and ($full_stop |S_$66|) (>= ($current_timestamp |S_$66|) 0)) (forall( (|p_$35_$0| $ptr))(!(<= ($timestamp |S_$66| |p_$35_$0|) ($current_timestamp |S_$66|))  :pattern ( ($owner |S_$66| |p_$35_$0|))))))  :pattern ( ($function_entry |S_$66|))))
    (forall( (|S_$67| $state))(!(=> ($full_stop |S_$67|) (and ($good_state |S_$67|) ($invok_state |S_$67|)))  :pattern ( ($full_stop |S_$67|))))
    (forall( (|S_$68| $state))(!(=> ($invok_state |S_$68|) ($good_state |S_$68|))  :pattern ( ($invok_state |S_$68|))))
    (forall( (|s_$7| $state))(= (forall( (|f_$22| $pure_function))(!(< ($frame_level |f_$22|) $current_frame_level)  :pattern ( ($frame_level |f_$22|)))) (forall( (|f_$22| $pure_function))(!(< ($frame_level |f_$22|) $current_frame_level)  :pattern ( ($frame_level |f_$22|))))))
    (forall( (|S_$70| $state) (|#r_$1| $ptr) (|#t_$3| $ctype) (|#f_$0| $field) (|#sz| Int))(!(=> ($good_state |S_$70|) (= ($owns |S_$70| ($ptr ($as_field_with_type |#f_$0| ($array |#t_$3| |#sz|)) |#r_$1|)) $set_empty))  :pattern ( ($owns |S_$70| ($ptr ($as_field_with_type |#f_$0| ($array |#t_$3| |#sz|)) |#r_$1|)))))
    (forall( (|S_$71| $state) (|#p_$8| $ptr) (|#t_$4| $ctype))(!(=> (and ($invok_state |S_$71|) ($closed |S_$71| |#p_$8|)) ($inv2 |S_$71| |S_$71| |#p_$8| |#t_$4|))  :pattern ( ($inv2 |S_$71| |S_$71| |#p_$8| |#t_$4|))))
    (forall( (|S_$72| $state))(!(=> ($good_state |S_$72|) (forall( (|p_$36_$1| $ptr) (|q_$2_$1| $ptr))(!(=> (and (and ($good_state |S_$72|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$72|) ($f_owns ($field_type ($field |q_$2_$1|)))) |q_$2_$1|)) |p_$36_$1|)) ($closed |S_$72| |q_$2_$1|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$1|)))) (= ($owner |S_$72| |p_$36_$1|) |q_$2_$1|)) ($closed |S_$72| |p_$36_$1|)) (not (= |p_$36_$1| ($phys_ptr_cast $null ($field_type ($field |p_$36_$1|)))))) true))  :pattern ( ($set_in_pos |p_$36_$1| ($owns |S_$72| |q_$2_$1|))))))  :pattern ( ($good_state |S_$72|))))
    (forall( (|S_$73| $state) (|p_$124| $ptr))(!(=> ($good_state |S_$73|) (=> ($closed |S_$73| |p_$124|) (not (= |p_$124| ($phys_ptr_cast $null ($field_type ($field |p_$124|)))))))  :pattern ( ($closed |S_$73| |p_$124|))))
    (forall( (|S_$74| $state) (|p_$125| $ptr))(!(=> ($good_state |S_$74|) (=> (= ($owner |S_$74| |p_$125|) $me) (and (and (and (and ($is_proper |p_$125|) (not (= |p_$125| ($phys_ptr_cast $null ($field_type ($field |p_$125|)))))) (not ($is_primitive ($field_type ($field |p_$125|))))) ($is_proper |p_$125|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$74|) |p_$125|) |p_$125|))))  :pattern ( ($owner |S_$74| |p_$125|)) :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$74|) |p_$125|))))
    (forall( (|S_$75| $state) (|r_$4| $ptr))(!(=> ($good_state |S_$75|) (and (and (not (= ($owner |S_$75| |r_$4|) ($phys_ptr_cast $null ($field_type ($field ($owner |S_$75| |r_$4|)))))) ($is_proper ($owner |S_$75| |r_$4|))) (=> (not (= ($field_type ($field ($owner |S_$75| |r_$4|))) ^$@thread_id_t)) (and (and (and ($is_proper |r_$4|) (not (= |r_$4| ($phys_ptr_cast $null ($field_type ($field |r_$4|)))))) (not ($is_primitive ($field_type ($field |r_$4|))))) (=> ($is_sequential_field ($f_owns ($field_type ($field ($owner |S_$75| |r_$4|))))) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$75|) |r_$4|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$75|) ($owner |S_$75| |r_$4|))))))))  :pattern ( ($owner |S_$75| |r_$4|))))
    (forall( (|S_$76| $state) (|p_$126| $ptr))(!(=> ($good_state |S_$76|) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) |p_$126|)) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) |p_$126|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) |p_$126|)))))
    (forall( (|S_$77| $state) (|p_$127| $ptr) (|f_$41| $field) (|t_$42| $ctype))(!(=> ($good_state |S_$77|) ($in_range_t |t_$42| (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$77|) ($as_field_with_type |f_$41| ($as_in_range_t |t_$42|))) |p_$127|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$77|) ($as_field_with_type |f_$41| ($as_in_range_t |t_$42|))) |p_$127|))))
    (forall( (|S_$86| $state) (|c_$3| $ptr))(!(=> (and ($full_stop |S_$86|) ($closed |S_$86| |c_$3|)) ($valid_claim |S_$86| |c_$3|))  :pattern ( ($full_stop |S_$86|) ($valid_claim |S_$86| |c_$3|))))
    (forall( (|S_$87| $state) (|c_$4| $ptr))(!(=> ($valid_claim |S_$87| |c_$4|) (and ($closed |S_$87| |c_$4|) ($invok_state |S_$87|)))  :pattern ( ($valid_claim |S_$87| |c_$4|))))
    (forall( (|S_$89| $state) (|c1_$0| $ptr) (|c2_$0| $ptr))(!(=> (and ($valid_claim |S_$89| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)) ($valid_claim |S_$89| |c2_$0|))  :pattern ( ($valid_claim |S_$89| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|))))
    (forall( (|S_$90| $state) (|c_$5| $ptr) (|o_$5| $ptr))(!(=> ($good_state |S_$90|) (=> (and ($claims_obj |c_$5| |o_$5|) ($closed |S_$90| |c_$5|)) (and (and ($instantiate_ptrset ($owns |S_$90| |o_$5|)) ($closed |S_$90| |o_$5|)) (> ($ref_cnt |S_$90| |o_$5|) 0))))  :pattern ( ($closed |S_$90| |c_$5|) ($claims_obj |c_$5| |o_$5|))))
    (forall( (|S_$91| $state) (|c_$6| $ptr) (|o_$6| $ptr))(!(=> (and ($valid_claim |S_$91| |c_$6|) ($claims_obj |c_$6| |o_$6|)) ($inv2 |S_$91| |S_$91| |o_$6| ($field_type ($field |o_$6|))))  :pattern ( ($valid_claim |S_$91| |c_$6|) ($claims_obj |c_$6| |o_$6|))))
    (forall( (|S_$92| $state) (|c_$7| $ptr) (|r_$6| $ptr) (|f_$45| $field))(!(=> ($is ($ptr |f_$45| |r_$6|) ^^claim) (=> (and ($valid_claim |S_$92| |c_$7|) ($claims_obj |c_$7| ($ptr |f_$45| |r_$6|))) ($valid_claim |S_$92| ($ptr |f_$45| |r_$6|))))  :pattern ( ($valid_claim |S_$92| |c_$7|) ($claims_obj |c_$7| ($ptr ($as_field_with_type |f_$45| ^^claim) |r_$6|)))))
    (forall( (|S_$94| $state) (|p_$145| $ptr))(!(=> (and ($invok_state |S_$94|) ($claimed_closed |S_$94| |p_$145|)) ($inv2 |S_$94| |S_$94| |p_$145| ($field_type ($field |p_$145|))))  :pattern ( ($invok_state |S_$94|) ($claimed_closed |S_$94| |p_$145|))))
    (forall( (|S_$95| $state) (|c_$8| $ptr) (|o_$8| $ptr))(!(= ($account_claim |S_$95| |c_$8| |o_$8|) (and (and ($good_state |S_$95|) ($closed |S_$95| |c_$8|)) ($claims_obj |c_$8| |o_$8|)))  :pattern ( ($account_claim |S_$95| |c_$8| |o_$8|))))
    (forall( (|S_$96| $state) (|c_$9| $ptr) (|o_$9| $ptr))(!(=> ($account_claim |S_$96| |c_$9| |o_$9|) (and (and (= ($claim_no |S_$96| |o_$9| ($claim_idx |o_$9| |c_$9|)) |c_$9|) (<= 0 ($claim_idx |o_$9| |c_$9|))) (< ($claim_idx |o_$9| |c_$9|) ($ref_cnt |S_$96| |o_$9|))))  :pattern ( ($account_claim |S_$96| |c_$9| |o_$9|))))
    (forall( (|S_$97| $state) (|p_$146| $ptr) (|q_$9| $ptr) (|l_$1| $label))(!(= ($in_domain_lab |S_$97| |p_$146| |q_$9| |l_$1|) ($in_domain |S_$97| |p_$146| |q_$9|))  :pattern ( ($in_domain_lab |S_$97| |p_$146| |q_$9| |l_$1|))))
    (forall( (|S_$98| $state) (|p_$147| $ptr) (|q_$10| $ptr) (|l_$2| $label))(!(= ($in_vdomain_lab |S_$98| |p_$147| |q_$10| |l_$2|) ($in_vdomain |S_$98| |p_$147| |q_$10|))  :pattern ( ($in_vdomain_lab |S_$98| |p_$147| |q_$10| |l_$2|))))
    (forall( (|S_$99| $state) (|p_$148| $ptr) (|q_$11| $ptr) (|l_$3| $label))(!(=> ($in_domain_lab |S_$99| |p_$148| |q_$11| |l_$3|) ($inv_lab |S_$99| |p_$148| |l_$3|))  :pattern ( ($in_domain_lab |S_$99| |p_$148| |q_$11| |l_$3|))))
    (forall( (|S0_$10| $state) (|S1_$7| $state) (|p_$100| $ptr) (|sz_$23| Int))(!(=> (and ($call_transition |S0_$10| |S1_$7|) (forall( (|i_$12| Int))(!(=> (and (<= 0 |i_$12|) (<= |i_$12| (- |sz_$23| 1))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$10|) ($field ($idx |p_$100| |i_$12|))) ($base ($idx |p_$100| |i_$12|))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$7|) ($field ($idx |p_$100| |i_$12|))) ($base ($idx |p_$100| |i_$12|)))))  :pattern ( ($dont_instantiate_int |i_$12|))))) (= ($mem_range_heap ($heap |S0_$10|) |p_$100| |sz_$23|) ($mem_range_heap ($heap |S1_$7|) |p_$100| |sz_$23|)))  :pattern ( ($call_transition |S0_$10| |S1_$7|) ($mem_range_heap ($heap |S1_$7|) |p_$100| |sz_$23|))))
    (forall( (|S0_$11| $state) (|S1_$8| $state) (|p_$101| $ptr) (|f_$38| $field))(!($instantiate_int (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$11|) |f_$38|) |p_$101|))  :pattern ( ($call_transition |S0_$11| |S1_$8|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$8|) |f_$38|) |p_$101|))))
    (forall( (|S0_$12| $state) (|S_$52| $state) (|p_$106| $ptr) (|T_$13| $ctype) (|s_$16| Int))(!(= ($inv2 |S0_$12| |S_$52| |p_$106| ($array |T_$13| |s_$16|)) (= ($owns |S_$52| |p_$106|) $set_empty))  :pattern ( ($inv2 |S0_$12| |S_$52| |p_$106| ($array |T_$13| |s_$16|)))))
    (forall( (|S0_$13| $state) (|S1_$9| $state))(!(=> ($call_transition |S0_$13| |S1_$9|) ($trans_call_transition |S0_$13| |S1_$9|))  :pattern ( ($call_transition |S0_$13| |S1_$9|))))
    (forall( (|S0_$14| $state) (|S1_$10| $state) (|S2_$3| $state))(!(=> (and ($trans_call_transition |S0_$14| |S1_$10|) ($call_transition |S1_$10| |S2_$3|)) ($trans_call_transition |S0_$14| |S2_$3|))  :pattern ( ($trans_call_transition |S0_$14| |S1_$10|) ($call_transition |S1_$10| |S2_$3|))))
    (forall( (|S0_$16| $state) (|S1_$11| $state) (|W_$2| $@Map@@$ptr@To@Bool@@))(!(= ($modifies |S0_$16| |S1_$11| |W_$2|) (and (and (and (and (and (forall( (|p_$130| $ptr))(!(=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$130|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$130|)))) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$130|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$11|) |p_$130|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$11|) |p_$130|)))) (forall( (|p_$131| $ptr) (|f_$42| $field))(!(=> (and (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$131|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$131|)))) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| ($dot |p_$131| |f_$42|)))) (=> (or (or ($is_sequential_field |f_$42|) ($is_semi_sequential_field |f_$42|)) (not ($closed |S0_$16| |p_$131|))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$16|) |f_$42|) |p_$131|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$11|) |f_$42|) |p_$131|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$11|) |f_$42|) |p_$131|))))) (forall( (|p_$132| $ptr))(!(and (=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$132|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$132|)))) (= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$11|) |p_$132|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$16|) |p_$132|))) (>= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$11|) |p_$132|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$16|) |p_$132|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$11|) |p_$132|))))) (forall( (|p_$133| $ptr))(!(=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$133|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$133|)))) (= (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S1_$11|) |p_$133|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$16|) |p_$133|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S1_$11|) |p_$133|))))) (forall( (|p_$134| $ptr))(!(=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$134|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$134|)))) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$16|) |p_$134|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$11|) |p_$134|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$11|) |p_$134|))))) (and (<= ($current_timestamp |S0_$16|) ($current_timestamp |S1_$11|)) ($call_transition |S0_$16| |S1_$11|))))  :inline  false :pattern ( ($modifies |S0_$16| |S1_$11| |W_$2|))))
    (forall( (|S0_$18| $state) (|S_$81| $state) (|o_$2| $ptr))(!(= ($is_unwrapped |S0_$18| |S_$81| |o_$2|) (and (and (and (and (and (and (and (and true ($mutable |S_$81| |o_$2|)) (= ($heap |S_$81|) ($heap |S0_$18|))) (= ($owns |S0_$18| |o_$2|) ($owns |S_$81| |o_$2|))) (forall( (|p_$136| $ptr))(!(or (and (not (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$18|) |p_$136|) |o_$2|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$18|) |p_$136|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|))) (and (and (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$18|) |p_$136|) |o_$2|) (or (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|) |p_$136|) (not (= ($owner |S0_$18| |p_$136|) |o_$2|)))) (= ($owner |S_$81| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|)) $me)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|))))) (= ($f_closed |S_$81|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$18|) |o_$2| false))) (and (< ($current_timestamp |S0_$18|) ($current_timestamp |S_$81|)) ($call_transition |S0_$18| |S_$81|))) ($post_unwrap |S0_$18| |S_$81|)) (= ($typemap ($f_owner |S0_$18|)) ($typemap ($f_owner |S_$81|)))))  :pattern ( ($is_unwrapped |S0_$18| |S_$81| |o_$2|))))
    (forall( (|S0_$20| $state) (|S_$83| $state) (|o_$4| $ptr) (|owns_$1| $@Map@@$ptr@To@Bool@@))(!(= ($is_wrapped |S0_$20| |S_$83| |o_$4| |owns_$1|) (and (and (and (and (and (and (and true (= ($f_closed |S_$83|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$20|) |o_$4| true))) (= ($f_timestamp |S_$83|) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$20|) |o_$4| ($current_timestamp |S_$83|)))) (forall( (|p_$137| $ptr))(!(or (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$83|) |p_$137|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$20|) |p_$137|)) (and (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$83|) |p_$137|) |o_$4|) (or (= |p_$137| |o_$4|) (MapRead$$@Map@@$ptr@To@Bool@@$ |owns_$1| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$20|) |p_$137|)))))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$83|) |p_$137|))))) (and (and (and (and ($is |o_$4| ($field_type ($field |o_$4|))) ($is_proper |o_$4|)) (= ($owner |S_$83| |o_$4|) $me)) ($closed |S_$83| |o_$4|)) (not ($is_primitive ($field_type ($field |o_$4|)))))) (=> ($is_claimable ($field_type ($field |o_$4|))) (and (= ($ref_cnt |S0_$20| |o_$4|) 0) (= ($ref_cnt |S_$83| |o_$4|) 0)))) (and (< ($current_timestamp |S0_$20|) ($current_timestamp |S_$83|)) ($call_transition |S0_$20| |S_$83|))) (= ($typemap ($f_owner |S0_$20|)) ($typemap ($f_owner |S_$83|)))))  :pattern ( ($is_wrapped |S0_$20| |S_$83| |o_$4| |owns_$1|))))
    (forall( (|S0_$21| $state) (|S_$85| $state) (|l_$0| $ptr) (|p_$139| $ptr))(!(and (= ($f_owner ($release |S0_$21| |S_$85| |l_$0| |p_$139|)) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$85|) |p_$139| $me)) (= ($f_timestamp ($release |S0_$21| |S_$85| |l_$0| |p_$139|)) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$85|) |p_$139| ($current_timestamp |S0_$21|))))  :pattern ( ($release |S0_$21| |S_$85| |l_$0| |p_$139|))))
    (forall( (|S0_$22| $state) (|S_$123| $state) (|r_$15| $ptr))(!(= ($extent_is_fresh |S0_$22| |S_$123| |r_$15|) (and (= ($timestamp |S_$123| |r_$15|) ($current_timestamp |S_$123|)) (forall( (|p_$170| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$123| |r_$15| ($field_type ($field |r_$15|))) |p_$170|) (= ($timestamp |S_$123| |p_$170|) ($current_timestamp |S_$123|)))  :pattern ( ($extent_hint |p_$170| |r_$15|))))))  :pattern ( ($extent_is_fresh |S0_$22| |S_$123| |r_$15|))))
    (forall( (|S1_$0| $state) (|S0_$3| $state))(= (forall( (|p_$50_$0| $ptr))(!(=> ($thread_local |S0_$3| |p_$50_$0|) ($thread_local |S1_$0| |p_$50_$0|))  :pattern ( ($thread_local |S1_$0| |p_$50_$0|)))) (forall( (|p_$50| $ptr))(!(=> ($thread_local |S0_$3| |p_$50|) ($thread_local |S1_$0| |p_$50|))  :pattern ( ($thread_local |S1_$0| |p_$50|))))))
    (forall( (|S1_$1| $state) (|S0_$4| $state))(= ($modifies |S0_$4| |S1_$1| $set_empty) ($modifies |S0_$4| |S1_$1| $set_empty)))
    (forall( (|S1_$12| $state) (|S2_$4| $state) (|p_$140| $ptr) (|t_$43| $ctype))(!(= ($spans_the_same |S1_$12| |S2_$4| |p_$140| |t_$43|) (and (= ($owns |S1_$12| |p_$140|) ($owns |S2_$4| |p_$140|)) (forall( (|f_$43| $field))(!(=> (and ($is_proper ($dot |p_$140| |f_$43|)) (not (= |f_$43| ($f_ref_cnt |t_$43|)))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$12|) |f_$43|) |p_$140|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$4|) |f_$43|) |p_$140|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$4|) |f_$43|) |p_$140|))))))  :pattern ( ($spans_the_same |S1_$12| |S2_$4| |p_$140| |t_$43|))))
    (forall( (|S1_$13| $state) (|S2_$5| $state) (|p_$141| $ptr) (|t_$44| $ctype))(!(= ($nonvolatile_spans_the_same |S1_$13| |S2_$5| |p_$141| |t_$44|) (forall( (|f_$44| $field))(!(=> (and ($is_proper ($dot |p_$141| |f_$44|)) ($is_sequential_field |f_$44|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$13|) |f_$44|) |p_$141|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$5|) |f_$44|) |p_$141|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$5|) |f_$44|) |p_$141|)))))  :pattern ( ($nonvolatile_spans_the_same |S1_$13| |S2_$5| |p_$141| |t_$44|))))
    (forall( (|S1_$2| $state) (|S0_$7| $state))(= (forall( (|r_$2_$0| $ptr) (|f_$24_$0| $field))(!(=> ($is ($ptr |f_$24_$0| |r_$2_$0|) ^^claim) (=> (and ($closed |S0_$7| ($ptr |f_$24_$0| |r_$2_$0|)) ($closed |S1_$2| ($ptr |f_$24_$0| |r_$2_$0|))) ($valid_claim |S1_$2| ($ptr |f_$24_$0| |r_$2_$0|))))  :pattern ( ($closed |S1_$2| ($ptr ($as_field_with_type |f_$24_$0| ^^claim) |r_$2_$0|))))) (forall( (|r_$2| $ptr) (|f_$24| $field))(!(=> ($is ($ptr |f_$24| |r_$2|) ^^claim) (=> (and ($closed |S0_$7| ($ptr |f_$24| |r_$2|)) ($closed |S1_$2| ($ptr |f_$24| |r_$2|))) ($valid_claim |S1_$2| ($ptr |f_$24| |r_$2|))))  :pattern ( ($closed |S1_$2| ($ptr ($as_field_with_type |f_$24| ^^claim) |r_$2|)))))))
    (forall( (|s1_$4| $@Map@@$ptr@To@Bool@@) (|s2_$3| $@Map@@$ptr@To@Bool@@))(!(=> (forall( (|p_$184| $ptr))(!(and (=> (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$4| |p_$184|) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$3| |p_$184|))) (=> (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$3| |p_$184|) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$4| |p_$184|))))  :pattern ( ($dont_instantiate |p_$184|)))) ($set_disjoint |s1_$4| |s2_$3|))  :pattern ( ($set_disjoint |s1_$4| |s2_$3|))))
    (forall( (|s2_$0| $state) (|s1_$0| $state))(= (forall( (|p_$39_$0| $ptr))(!(=> ($mutable |s1_$0| |p_$39_$0|) ($mutable |s2_$0| |p_$39_$0|))  :pattern ( ($owner |s2_$0| |p_$39_$0|)) :pattern ( ($closed |s2_$0| |p_$39_$0|)) :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s2_$0|) |p_$39_$0|)))) (forall( (|p_$39| $ptr))(!(=> ($mutable |s1_$0| |p_$39|) ($mutable |s2_$0| |p_$39|))  :pattern ( ($owner |s2_$0| |p_$39|)) :pattern ( ($closed |s2_$0| |p_$39|)) :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s2_$0|) |p_$39|))))))
    (forall( (|s2| $state) (|s1| $state))(= (and (and (and (= ($f_timestamp |s1|) ($f_timestamp |s2|)) (= ($f_closed |s1|) ($f_closed |s2|))) (= ($f_owner |s1|) ($f_owner |s2|))) (= ($roots |s1|) ($roots |s2|))) (and (and (and (= ($f_timestamp |s1|) ($f_timestamp |s2|)) (= ($f_closed |s1|) ($f_closed |s2|))) (= ($f_owner |s1|) ($f_owner |s2|))) (= ($roots |s1|) ($roots |s2|)))))
    (forall( (|SP#i_$0| Int) (|SP#map_$0| $map_t..^^mathint.^^mathint))(!(= (F@fsum |SP#i_$0| |SP#map_$0|) (ite (<= |SP#i_$0| 0) 0 (+ ($select.$map_t..^^mathint.^^mathint |SP#map_$0| (- |SP#i_$0| 1)) (F@fsum (- |SP#i_$0| 1) |SP#map_$0|))))  :pattern ( (F@fsum |SP#i_$0| |SP#map_$0|))))
    (forall( (|subject_$0| $field) (|approver_$0| $field) (|this_$0| $ptr) (|S2_$1| $state) (|S1_$4| $state))(= (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |subject_$0|) |this_$0|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$1|) |subject_$0|) |this_$0|)) (= ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($phys_ptr_cast $null ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and (not ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)))))) ($inv2 |S1_$4| |S2_$1| ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))) (not (= ($read_vol_version |S1_$4| |this_$0|) ($read_vol_version |S2_$1| |this_$0|))))) (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |subject_$0|) |this_$0|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$1|) |subject_$0|) |this_$0|)) (= ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($phys_ptr_cast $null ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and (not ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)))))) ($inv2 |S1_$4| |S2_$1| ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))) (not (= ($read_vol_version |S1_$4| |this_$0|) ($read_vol_version |S2_$1| |this_$0|)))))))
    (forall( (|subject_$1| $field) (|this_$1| $ptr) (|S2_$2| $state) (|S1_$5| $state))(= (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$5|) |subject_$1|) |this_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$2|) |subject_$1|) |this_$1|)) (= ($owner |S1_$5| |this_$1|) ($phys_ptr_cast $null ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and (not ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|))))) ($inv2 |S1_$5| |S2_$2| ($owner |S1_$5| |this_$1|) ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|)))) (not (= ($read_vol_version |S1_$5| |this_$1|) ($read_vol_version |S2_$2| |this_$1|))))) (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$5|) |subject_$1|) |this_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$2|) |subject_$1|) |this_$1|)) (= ($owner |S1_$5| |this_$1|) ($phys_ptr_cast $null ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and (not ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|))))) ($inv2 |S1_$5| |S2_$2| ($owner |S1_$5| |this_$1|) ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|)))) (not (= ($read_vol_version |S1_$5| |this_$1|) ($read_vol_version |S2_$2| |this_$1|)))))))
    (forall( (|subject| $field) (|approver| $ptr) (|this| $ptr) (|S2_$0| $state) (|S1_$3| $state))(= (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$3|) |subject|) |this|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$0|) |subject|) |this|)) (= |approver| ($phys_ptr_cast $null ($field_type ($field |approver|))))) (and (not ($is_threadtype ($field_type ($field |approver|)))) ($inv2 |S1_$3| |S2_$0| |approver| ($field_type ($field |approver|))))) (and ($is_threadtype ($field_type ($field |approver|))) (not (= ($read_vol_version |S1_$3| |this|) ($read_vol_version |S2_$0| |this|))))) (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$3|) |subject|) |this|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$0|) |subject|) |this|)) (= |approver| ($phys_ptr_cast $null ($field_type ($field |approver|))))) (and (not ($is_threadtype ($field_type ($field |approver|)))) ($inv2 |S1_$3| |S2_$0| |approver| ($field_type ($field |approver|))))) (and ($is_threadtype ($field_type ($field |approver|))) (not (= ($read_vol_version |S1_$3| |this|) ($read_vol_version |S2_$0| |this|)))))))
    (forall( (|sz_$0| Int) (|t_$0| $ctype))(= (and (and (= ($sizeof |t_$0|) |sz_$0|) (= ($type_branch |t_$0|) $ctype_flat)) ($is_primitive |t_$0|)) (and (and (= ($sizeof |t_$0|) |sz_$0|) (= ($type_branch |t_$0|) $ctype_flat)) ($is_primitive |t_$0|))))
    (forall( (|sz_$10| Int) (|T| $ctype) (|p_$11| $ptr))(= (and (and (and (and (and (and ($is |p_$11| |T|) ($is_proper |p_$11|)) (>= ($field_arr_size ($field |p_$11|)) (+ ($field_arr_index ($field |p_$11|)) |sz_$10|))) (= |p_$11| ($idx ($dot ($base |p_$11|) ($field_arr_root ($field |p_$11|))) ($field_arr_index ($field |p_$11|))))) (not (= ($field_kind ($field |p_$11|)) $fk_base))) (>= ($field_arr_index ($field |p_$11|)) 0)) (not ($is_primitive ($field_type ($field ($emb0 |p_$11|)))))) (and (and (and (and (and (and ($is |p_$11| |T|) ($is_proper |p_$11|)) (>= ($field_arr_size ($field |p_$11|)) (+ ($field_arr_index ($field |p_$11|)) |sz_$10|))) (= |p_$11| ($idx ($dot ($base |p_$11|) ($field_arr_root ($field |p_$11|))) ($field_arr_index ($field |p_$11|))))) (not (= ($field_kind ($field |p_$11|)) $fk_base))) (>= ($field_arr_index ($field |p_$11|)) 0)) (not ($is_primitive ($field_type ($field ($emb0 |p_$11|))))))))
    (forall( (|sz_$11| Int) (|T_$0| $ctype) (|p_$12| $ptr) (|S_$0| $state))(= (and ($is_array |S_$0| |p_$12| |T_$0| |sz_$11|) (ite ($is_primitive |T_$0|) ($thread_local |S_$0| |p_$12|) (forall( (|i_$0_$3| Int))(!(=> (and (<= 0 |i_$0_$3|) (< |i_$0_$3| |sz_$11|)) ($thread_local |S_$0| ($idx |p_$12| |i_$0_$3|)))  :pattern ( ($owner |S_$0| ($idx |p_$12| |i_$0_$3|))))))) (and ($is_array |S_$0| |p_$12| |T_$0| |sz_$11|) (ite ($is_primitive |T_$0|) ($thread_local |S_$0| |p_$12|) (forall( (|i_$0| Int))(!(=> (and (<= 0 |i_$0|) (< |i_$0| |sz_$11|)) ($thread_local |S_$0| ($idx |p_$12| |i_$0|)))  :pattern ( ($owner |S_$0| ($idx |p_$12| |i_$0|)))))))))
    (forall( (|sz_$12| Int) (|p_$13| $ptr) (|s| $state))(= ($mem_range_heap ($heap |s|) |p_$13| |sz_$12|) ($mem_range_heap ($heap |s|) |p_$13| |sz_$12|)))
    (forall( (|sz_$13| Int) (|T_$1| $ctype) (|arr| $ptr) (|q| $ptr))(= (and (and (<= 0 ($index_within |q| |arr|)) (<= ($index_within |q| |arr|) (- |sz_$13| 1))) (= |q| ($idx |arr| ($index_within |q| |arr|)))) (and (and (<= 0 ($index_within |q| |arr|)) (<= ($index_within |q| |arr|) (- |sz_$13| 1))) (= |q| ($idx |arr| ($index_within |q| |arr|))))))
    (forall( (|sz_$14| Int) (|T_$2| $ctype) (|arr_$0| $ptr) (|q_$0| $ptr))(= (and (and (<= 0 ($index_within |q_$0| |arr_$0|)) (<= ($index_within |q_$0| |arr_$0|) (- |sz_$14| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($full_extent ($idx |arr_$0| ($index_within |q_$0| |arr_$0|))) |q_$0|)) (and (and (<= 0 ($index_within |q_$0| |arr_$0|)) (<= ($index_within |q_$0| |arr_$0|) (- |sz_$14| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($full_extent ($idx |arr_$0| ($index_within |q_$0| |arr_$0|))) |q_$0|))))
    (forall( (|sz_$15| Int) (|T_$3| $ctype) (|arr_$1| $ptr) (|q_$1| $ptr) (|S_$1| $state))(= (and (and (<= 0 ($index_within |q_$1| |arr_$1|)) (<= ($index_within |q_$1| |arr_$1|) (- |sz_$15| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($extent |S_$1| ($idx |arr_$1| ($index_within |q_$1| |arr_$1|))) |q_$1|)) (and (and (<= 0 ($index_within |q_$1| |arr_$1|)) (<= ($index_within |q_$1| |arr_$1|) (- |sz_$15| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($extent |S_$1| ($idx |arr_$1| ($index_within |q_$1| |arr_$1|))) |q_$1|))))
    (forall( (|sz_$16| Int) (|t_$15| $ctype) (|p_$27| $ptr) (|S_$10| $state))(= ($is_mutable_array |S_$10| |p_$27| |t_$15| |sz_$16|) ($is_mutable_array |S_$10| |p_$27| |t_$15| |sz_$16|)))
    (forall( (|sz_$17| Int) (|T_$4| $ctype) (|p_$69| $ptr))(= (forall( (|S_$45_$0| $state))(!(=> ($program_entry_point |S_$45_$0|) ($is_mutable_array |S_$45_$0| |p_$69| |T_$4| |sz_$17|))  :pattern ( ($program_entry_point |S_$45_$0|)))) (forall( (|S_$45| $state))(!(=> ($program_entry_point |S_$45|) ($is_mutable_array |S_$45| |p_$69| |T_$4| |sz_$17|))  :pattern ( ($program_entry_point |S_$45|))))))
    (forall( (|sz_$4| Int) (|t_$7| $ctype))(= (and (and (and (= ($sizeof |t_$7|) |sz_$4|) (= ($type_branch |t_$7|) $ctype_flat)) ($is_primitive |t_$7|)) (= ($as_in_range_t |t_$7|) |t_$7|)) (and (and (and (= ($sizeof |t_$7|) |sz_$4|) (= ($type_branch |t_$7|) $ctype_flat)) ($is_primitive |t_$7|)) (= ($as_in_range_t |t_$7|) |t_$7|))))
    (forall( (|sz_$5| Int) (|isvolatile_$2| Bool) (|tp_$6| $ctype) (|f_$7| $field) (|partp_$6| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$7|) |partp_$6|) (= ($field_type |f_$7|) |tp_$6|)) (= ($as_field_with_type |f_$7| |tp_$6|) |f_$7|)) (=> ($is_primitive |tp_$6|) (= ($as_primitive_field |f_$7|) |f_$7|))) (=> (not ($is_primitive |tp_$6|)) (= ($as_composite_field |f_$7|) |f_$7|))) (= ($field_arr_root |f_$7|) |f_$7|)) true) (=> (not |isvolatile_$2|) ($is_sequential_field |f_$7|))) (=> |isvolatile_$2| ($is_volatile_field |f_$7|))) true) (= ($field_arr_size |f_$7|) |sz_$5|)) (= ($field_arr_index |f_$7|) 0)) (= ($field_kind |f_$7|) $fk_emb_array)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$7|) |partp_$6|) (= ($field_type |f_$7|) |tp_$6|)) (= ($as_field_with_type |f_$7| |tp_$6|) |f_$7|)) (=> ($is_primitive |tp_$6|) (= ($as_primitive_field |f_$7|) |f_$7|))) (=> (not ($is_primitive |tp_$6|)) (= ($as_composite_field |f_$7|) |f_$7|))) (= ($field_arr_root |f_$7|) |f_$7|)) true) (=> (not |isvolatile_$2|) ($is_sequential_field |f_$7|))) (=> |isvolatile_$2| ($is_volatile_field |f_$7|))) true) (= ($field_arr_size |f_$7|) |sz_$5|)) (= ($field_arr_index |f_$7|) 0)) (= ($field_kind |f_$7|) $fk_emb_array)) true)))
    (forall( (|sz_$6| Int) (|off_$1| Int) (|isvolatile_$3| Bool) (|tp_$7| $ctype) (|f_$8| $field) (|partp_$7| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$8|) |partp_$7|) (= ($field_type |f_$8|) |tp_$7|)) (= ($as_field_with_type |f_$8| |tp_$7|) |f_$8|)) (=> ($is_primitive |tp_$7|) (= ($as_primitive_field |f_$8|) |f_$8|))) (=> (not ($is_primitive |tp_$7|)) (= ($as_composite_field |f_$8|) |f_$8|))) (= ($field_arr_root |f_$8|) |f_$8|)) true) (=> (not |isvolatile_$3|) ($is_sequential_field |f_$8|))) (=> |isvolatile_$3| ($is_volatile_field |f_$8|))) true) (= ($field_arr_size |f_$8|) |sz_$6|)) (= ($field_arr_index |f_$8|) 0)) (= ($field_kind |f_$8|) $fk_emb_array)) true) (= ($field_offset |f_$8|) |off_$1|)) ($is_phys_field |f_$8|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$8|) |partp_$7|) (= ($field_type |f_$8|) |tp_$7|)) (= ($as_field_with_type |f_$8| |tp_$7|) |f_$8|)) (=> ($is_primitive |tp_$7|) (= ($as_primitive_field |f_$8|) |f_$8|))) (=> (not ($is_primitive |tp_$7|)) (= ($as_composite_field |f_$8|) |f_$8|))) (= ($field_arr_root |f_$8|) |f_$8|)) true) (=> (not |isvolatile_$3|) ($is_sequential_field |f_$8|))) (=> |isvolatile_$3| ($is_volatile_field |f_$8|))) true) (= ($field_arr_size |f_$8|) |sz_$6|)) (= ($field_arr_index |f_$8|) 0)) (= ($field_kind |f_$8|) $fk_emb_array)) true) (= ($field_offset |f_$8|) |off_$1|)) ($is_phys_field |f_$8|)) true)))
    (forall( (|sz_$7| Int) (|isvolatile_$4| Bool) (|tp_$8| $ctype) (|f_$9| $field) (|partp_$8| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$9|) |partp_$8|) (= ($field_type |f_$9|) |tp_$8|)) (= ($as_field_with_type |f_$9| |tp_$8|) |f_$9|)) (=> ($is_primitive |tp_$8|) (= ($as_primitive_field |f_$9|) |f_$9|))) (=> (not ($is_primitive |tp_$8|)) (= ($as_composite_field |f_$9|) |f_$9|))) (= ($field_arr_root |f_$9|) |f_$9|)) true) (=> (not |isvolatile_$4|) ($is_sequential_field |f_$9|))) (=> |isvolatile_$4| ($is_volatile_field |f_$9|))) true) (= ($field_arr_size |f_$9|) |sz_$7|)) (= ($field_arr_index |f_$9|) 0)) (= ($field_kind |f_$9|) $fk_emb_array)) true) ($is_ghost_field |f_$9|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$9|) |partp_$8|) (= ($field_type |f_$9|) |tp_$8|)) (= ($as_field_with_type |f_$9| |tp_$8|) |f_$9|)) (=> ($is_primitive |tp_$8|) (= ($as_primitive_field |f_$9|) |f_$9|))) (=> (not ($is_primitive |tp_$8|)) (= ($as_composite_field |f_$9|) |f_$9|))) (= ($field_arr_root |f_$9|) |f_$9|)) true) (=> (not |isvolatile_$4|) ($is_sequential_field |f_$9|))) (=> |isvolatile_$4| ($is_volatile_field |f_$9|))) true) (= ($field_arr_size |f_$9|) |sz_$7|)) (= ($field_arr_index |f_$9|) 0)) (= ($field_kind |f_$9|) $fk_emb_array)) true) ($is_ghost_field |f_$9|)) true)))
    (forall( (|sz_$8| Int) (|off_$2| Int) (|isvolatile_$5| Bool) (|tp_$9| $ctype) (|f_$10| $field) (|partp_$9| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$10|) |partp_$9|) (= ($field_type |f_$10|) ($array |tp_$9| |sz_$8|))) (= ($as_field_with_type |f_$10| ($array |tp_$9| |sz_$8|)) |f_$10|)) (=> ($is_primitive ($array |tp_$9| |sz_$8|)) (= ($as_primitive_field |f_$10|) |f_$10|))) (=> (not ($is_primitive ($array |tp_$9| |sz_$8|))) (= ($as_composite_field |f_$10|) |f_$10|))) (= ($field_arr_root |f_$10|) |f_$10|)) true) (=> (not |isvolatile_$5|) ($is_sequential_field |f_$10|))) (=> |isvolatile_$5| ($is_volatile_field |f_$10|))) true) (= ($field_offset |f_$10|) |off_$2|)) ($is_phys_field |f_$10|)) (= ($field_kind |f_$10|) $fk_base)) (=> (= |off_$2| 0) ($has_field_at0 |partp_$9| |f_$10|))) true) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$10|) |partp_$9|) (= ($field_type |f_$10|) ($array |tp_$9| |sz_$8|))) (= ($as_field_with_type |f_$10| ($array |tp_$9| |sz_$8|)) |f_$10|)) (=> ($is_primitive ($array |tp_$9| |sz_$8|)) (= ($as_primitive_field |f_$10|) |f_$10|))) (=> (not ($is_primitive ($array |tp_$9| |sz_$8|))) (= ($as_composite_field |f_$10|) |f_$10|))) (= ($field_arr_root |f_$10|) |f_$10|)) true) (=> (not |isvolatile_$5|) ($is_sequential_field |f_$10|))) (=> |isvolatile_$5| ($is_volatile_field |f_$10|))) true) (= ($field_offset |f_$10|) |off_$2|)) ($is_phys_field |f_$10|)) (= ($field_kind |f_$10|) $fk_base)) (=> (= |off_$2| 0) ($has_field_at0 |partp_$9| |f_$10|))) true) true)))
    (forall( (|sz_$9| Int) (|isvolatile_$6| Bool) (|tp_$10| $ctype) (|f_$11| $field) (|partp_$10| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$11|) |partp_$10|) (= ($field_type |f_$11|) ($array |tp_$10| |sz_$9|))) (= ($as_field_with_type |f_$11| ($array |tp_$10| |sz_$9|)) |f_$11|)) (=> ($is_primitive ($array |tp_$10| |sz_$9|)) (= ($as_primitive_field |f_$11|) |f_$11|))) (=> (not ($is_primitive ($array |tp_$10| |sz_$9|))) (= ($as_composite_field |f_$11|) |f_$11|))) (= ($field_arr_root |f_$11|) |f_$11|)) true) (=> (not |isvolatile_$6|) ($is_sequential_field |f_$11|))) (=> |isvolatile_$6| ($is_volatile_field |f_$11|))) true) (= ($field_kind |f_$11|) $fk_base)) ($is_ghost_field |f_$11|)) true) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$11|) |partp_$10|) (= ($field_type |f_$11|) ($array |tp_$10| |sz_$9|))) (= ($as_field_with_type |f_$11| ($array |tp_$10| |sz_$9|)) |f_$11|)) (=> ($is_primitive ($array |tp_$10| |sz_$9|)) (= ($as_primitive_field |f_$11|) |f_$11|))) (=> (not ($is_primitive ($array |tp_$10| |sz_$9|))) (= ($as_composite_field |f_$11|) |f_$11|))) (= ($field_arr_root |f_$11|) |f_$11|)) true) (=> (not |isvolatile_$6|) ($is_sequential_field |f_$11|))) (=> |isvolatile_$6| ($is_volatile_field |f_$11|))) true) (= ($field_kind |f_$11|) $fk_base)) ($is_ghost_field |f_$11|)) true) true)))
    (forall( (|sz| Int) (|t| $ctype))(= (and (= ($sizeof |t|) |sz|) (= ($type_branch |t|) $ctype_flat)) (and (= ($sizeof |t|) |sz|) (= ($type_branch |t|) $ctype_flat))))
    (forall( (|t_$1| $ctype))(= (and (and (and (= ($sizeof |t_$1|) 1) (= ($type_branch |t_$1|) $ctype_flat)) ($is_primitive |t_$1|)) ($is_math_type |t_$1|)) (and (and (and (= ($sizeof |t_$1|) 1) (= ($type_branch |t_$1|) $ctype_flat)) ($is_primitive |t_$1|)) ($is_math_type |t_$1|))))
    (forall( (|t_$10| $ctype) (|p_$7| $ptr))(= ($ptr ($as_field_with_type ($field |p_$7|) |t_$10|) ($base |p_$7|)) ($ptr ($as_field_with_type ($field |p_$7|) |t_$10|) ($base |p_$7|))))
    (forall( (|T_$11| $ctype) (|s_$14| Int))(!(and (and (and (and (and (and true (= ($element_type ($array |T_$11| |s_$14|)) |T_$11|)) (= ($array_length ($array |T_$11| |s_$14|)) |s_$14|)) (not ($is_primitive ($array |T_$11| |s_$14|)))) (not ($is_claimable ($array |T_$11| |s_$14|)))) (= ($type_branch ($array |T_$11| |s_$14|)) $ctype_array)) ($is_sequential_field ($f_owns ($array |T_$11| |s_$14|))))  :pattern ( ($array |T_$11| |s_$14|))))
    (forall( (|t_$11| $ctype))(= ($phys_ptr_cast $null |t_$11|) ($phys_ptr_cast $null |t_$11|)))
    (forall( (|t_$12| $ctype) (|p_$9| $ptr))(= (and (and (and ($in_range_spec_ptr |p_$9|) (not (= |p_$9| ($phys_ptr_cast $null ($field_type ($field |p_$9|)))))) ($is_proper |p_$9|)) (= ($field |p_$9|) ($f_root |t_$12|))) (and (and (and ($in_range_spec_ptr |p_$9|) (not (= |p_$9| ($phys_ptr_cast $null ($field_type ($field |p_$9|)))))) ($is_proper |p_$9|)) (= ($field |p_$9|) ($f_root |t_$12|)))))
    (forall( (|T_$12| $ctype) (|s_$15| Int))(!(= ($sizeof ($array |T_$12| |s_$15|)) (* ($sizeof |T_$12|) |s_$15|))  :pattern ( ($sizeof ($array |T_$12| |s_$15|)))))
    (forall( (|t_$13| $ctype) (|p_$19| $ptr) (|f_$15| $field) (|s_$4| $state))(= ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$4|) |f_$15|) |p_$19|)) |t_$13|) ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$4|) |f_$15|) |p_$19|)) |t_$13|)))
    (forall( (|t_$14| $ctype) (|p_$20| $ptr) (|f_$16| $field) (|s_$5| $state))(= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$5|) |f_$16|) |p_$20|)) |t_$14|) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$5|) |f_$16|) |p_$20|)) |t_$14|)))
    (forall( (|t_$16| $ctype) (|p_$31| $ptr) (|S_$17| $state))(= (and ($is |p_$31| |t_$16|) ($thread_local |S_$17| |p_$31|)) (and ($is |p_$31| |t_$16|) ($thread_local |S_$17| |p_$31|))))
    (forall( (|t_$18| $ctype) (|p_$41| $ptr) (|f_$20| $field) (|h_$1| $@Map@@$ptr@To@Int@@))(= ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$1| |p_$41|)) |t_$18|) ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$1| |p_$41|)) |t_$18|)))
    (forall( (|t_$19| $ctype) (|p_$42| $ptr) (|f_$21| $field) (|h_$2| $@Map@@$ptr@To@Int@@))(= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$2| |p_$42|)) |t_$19|) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$2| |p_$42|)) |t_$19|)))
    (forall( (|t_$2| $ctype))(= (and (and (and (= ($sizeof |t_$2|) $arch_ptr_size) (= ($type_branch |t_$2|) $ctype_flat)) ($is_primitive |t_$2|)) ($is_fnptr_type |t_$2|)) (and (and (and (= ($sizeof |t_$2|) $arch_ptr_size) (= ($type_branch |t_$2|) $ctype_flat)) ($is_primitive |t_$2|)) ($is_fnptr_type |t_$2|))))
    (forall( (|t_$20| $ctype) (|r_$0| $ptr) (|S_$32| $state) (|S0_$5| $state))(= (and (and (and (and (and (and (and (and (and true ($is |r_$0| |t_$20|)) ($is_proper |r_$0|)) ($modifies |S0_$5| |S_$32| $set_empty)) (= ($heap |S_$32|) ($heap |S0_$5|))) (and (< ($current_timestamp |S0_$5|) ($current_timestamp |S_$32|)) ($call_transition |S0_$5| |S_$32|))) (not ($closed |S0_$5| |r_$0|))) (not (= ($owner |S0_$5| |r_$0|) $me))) ($is_object_root_ptr |r_$0|)) (= ($field |r_$0|) ($f_root |t_$20|))) (and (and (and (and (and (and (and (and (and true ($is |r_$0| |t_$20|)) ($is_proper |r_$0|)) ($modifies |S0_$5| |S_$32| $set_empty)) (= ($heap |S_$32|) ($heap |S0_$5|))) (and (< ($current_timestamp |S0_$5|) ($current_timestamp |S_$32|)) ($call_transition |S0_$5| |S_$32|))) (not ($closed |S0_$5| |r_$0|))) (not (= ($owner |S0_$5| |r_$0|) $me))) ($is_object_root_ptr |r_$0|)) (= ($field |r_$0|) ($f_root |t_$20|)))))
    (forall( (|t_$21| $ctype) (|r_$1| $ptr) (|S_$33| $state) (|S0_$6| $state))(= (and (and (and (and (and (and (and (and (and (and true ($is |r_$1| |t_$21|)) ($is_proper |r_$1|)) ($modifies |S0_$6| |S_$33| $set_empty)) (= ($heap |S_$33|) ($heap |S0_$6|))) (and (< ($current_timestamp |S0_$6|) ($current_timestamp |S_$33|)) ($call_transition |S0_$6| |S_$33|))) (not ($closed |S0_$6| |r_$1|))) (not (= ($owner |S0_$6| |r_$1|) $me))) ($is_object_root_ptr |r_$1|)) (= ($field |r_$1|) ($f_root |t_$21|))) (ite ($is_primitive |t_$21|) (and (and ($mutable |S_$33| ($emb0 |r_$1|)) (= |r_$1| ($dot ($emb0 |r_$1|) ($field |r_$1|)))) (= ($timestamp |S_$33| ($emb0 |r_$1|)) ($current_timestamp |S_$33|))) (and (and ($extent_mutable |S_$33| |r_$1|) ($extent_is_fresh |S0_$6| |S_$33| |r_$1|)) ($all_first_option_typed |S_$33| |r_$1|)))) (and (and (and (and (and (and (and (and (and (and true ($is |r_$1| |t_$21|)) ($is_proper |r_$1|)) ($modifies |S0_$6| |S_$33| $set_empty)) (= ($heap |S_$33|) ($heap |S0_$6|))) (and (< ($current_timestamp |S0_$6|) ($current_timestamp |S_$33|)) ($call_transition |S0_$6| |S_$33|))) (not ($closed |S0_$6| |r_$1|))) (not (= ($owner |S0_$6| |r_$1|) $me))) ($is_object_root_ptr |r_$1|)) (= ($field |r_$1|) ($f_root |t_$21|))) (ite ($is_primitive |t_$21|) (and (and ($mutable |S_$33| ($emb0 |r_$1|)) (= |r_$1| ($dot ($emb0 |r_$1|) ($field |r_$1|)))) (= ($timestamp |S_$33| ($emb0 |r_$1|)) ($current_timestamp |S_$33|))) (and (and ($extent_mutable |S_$33| |r_$1|) ($extent_is_fresh |S0_$6| |S_$33| |r_$1|)) ($all_first_option_typed |S_$33| |r_$1|))))))
    (forall( (|t_$22| $ctype) (|p_$64| $ptr))(= ($ptr ($as_field_with_type ($field |p_$64|) ($as_union_type |t_$22|)) ($base |p_$64|)) ($ptr ($as_field_with_type ($field |p_$64|) ($as_union_type |t_$22|)) ($base |p_$64|))))
    (forall( (|t_$23| $ctype) (|s_$9| $struct))(= ($phys_ptr_cast ($vs_base_ref |s_$9|) |t_$23|) ($phys_ptr_cast ($vs_base_ref |s_$9|) |t_$23|)))
    (forall( (|t_$24| $ctype) (|p_$67| $ptr))(= (and (and ($is |p_$67| |t_$24|) ($is_object_root_ptr |p_$67|)) true) (and (and ($is |p_$67| |t_$24|) ($is_object_root_ptr |p_$67|)) true)))
    (forall( (|t_$25| $ctype) (|p_$68| $ptr))(= (forall( (|S_$44_$0| $state))(!(=> ($program_entry_point |S_$44_$0|) (and ($extent_mutable |S_$44_$0| |p_$68|) (= ($owns |S_$44_$0| |p_$68|) $set_empty)))  :pattern ( ($program_entry_point |S_$44_$0|)))) (forall( (|S_$44| $state))(!(=> ($program_entry_point |S_$44|) (and ($extent_mutable |S_$44| |p_$68|) (= ($owns |S_$44| |p_$68|) $set_empty)))  :pattern ( ($program_entry_point |S_$44|))))))
    (forall( (|t_$26| $ctype))(= (and (and (and (and (= ($sizeof |t_$26|) 1) (= ($type_branch |t_$26|) $ctype_flat)) ($is_primitive |t_$26|)) ($is_math_type |t_$26|)) ($is_datatype |t_$26|)) (and (and (and (and (= ($sizeof |t_$26|) 1) (= ($type_branch |t_$26|) $ctype_flat)) ($is_primitive |t_$26|)) ($is_math_type |t_$26|)) ($is_datatype |t_$26|))))
    (forall( (|t_$27| $field) (|b| $ptr))(= ($field ($ptr |t_$27| |b|)) |t_$27|))
    (forall( (|t_$28| $field) (|b_$0| $ptr))(= ($base ($ptr |t_$28| |b_$0|)) |b_$0|))
    (forall( (|t_$3| $ctype))(= (and (and (and (= ($sizeof |t_$3|) 1) (= ($type_branch |t_$3|) $ctype_flat)) ($is_primitive |t_$3|)) ($is_record_type |t_$3|)) (and (and (and (= ($sizeof |t_$3|) 1) (= ($type_branch |t_$3|) $ctype_flat)) ($is_primitive |t_$3|)) ($is_record_type |t_$3|))))
    (forall( (|t_$33| $ctype))(!(ite (not ($is_primitive |t_$33|)) (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_root |t_$33|)) |t_$33|) (= ($field_type ($f_root |t_$33|)) |t_$33|)) (= ($as_field_with_type ($f_root |t_$33|) |t_$33|) ($f_root |t_$33|))) (=> ($is_primitive |t_$33|) (= ($as_primitive_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (=> (not ($is_primitive |t_$33|)) (= ($as_composite_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (= ($field_arr_root ($f_root |t_$33|)) ($f_root |t_$33|))) true) (= ($field_kind ($f_root |t_$33|)) $fk_allocation_root)) true) (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_root |t_$33|)) $primitive_emb_type) (= ($field_type ($f_root |t_$33|)) |t_$33|)) (= ($as_field_with_type ($f_root |t_$33|) |t_$33|) ($f_root |t_$33|))) (=> ($is_primitive |t_$33|) (= ($as_primitive_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (=> (not ($is_primitive |t_$33|)) (= ($as_composite_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (= ($field_arr_root ($f_root |t_$33|)) ($f_root |t_$33|))) true) (= ($field_kind ($f_root |t_$33|)) $fk_allocation_root)) true) ($is_sequential_field ($f_root |t_$33|))))  :pattern ( ($f_root |t_$33|))))
    (forall( (|t_$34| $ctype))(!(=> (not ($is_primitive |t_$34|)) (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_owns |t_$34|)) |t_$34|) (= ($field_type ($f_owns |t_$34|)) ^$@ptrset)) (= ($as_field_with_type ($f_owns |t_$34|) ^$@ptrset) ($f_owns |t_$34|))) (=> ($is_primitive ^$@ptrset) (= ($as_primitive_field ($f_owns |t_$34|)) ($f_owns |t_$34|)))) (=> (not ($is_primitive ^$@ptrset)) (= ($as_composite_field ($f_owns |t_$34|)) ($f_owns |t_$34|)))) (= ($field_arr_root ($f_owns |t_$34|)) ($f_owns |t_$34|))) true) (= ($field_kind ($f_owns |t_$34|)) $fk_owns)) true) ($is_ghost_field ($f_owns |t_$34|))))  :pattern ( ($f_owns |t_$34|))))
    (forall( (|t_$35| $ctype))(!(=> (not ($is_primitive |t_$35|)) (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_ref_cnt |t_$35|)) |t_$35|) (= ($field_type ($f_ref_cnt |t_$35|)) ^^mathint)) (= ($as_field_with_type ($f_ref_cnt |t_$35|) ^^mathint) ($f_ref_cnt |t_$35|))) (=> ($is_primitive ^^mathint) (= ($as_primitive_field ($f_ref_cnt |t_$35|)) ($f_ref_cnt |t_$35|)))) (=> (not ($is_primitive ^^mathint)) (= ($as_composite_field ($f_ref_cnt |t_$35|)) ($f_ref_cnt |t_$35|)))) (= ($field_arr_root ($f_ref_cnt |t_$35|)) ($f_ref_cnt |t_$35|))) true) (= ($field_kind ($f_ref_cnt |t_$35|)) $fk_ref_cnt)) true) ($is_ghost_field ($f_ref_cnt |t_$35|))) ($is_semi_sequential_field ($f_ref_cnt |t_$35|))))  :pattern ( ($f_ref_cnt |t_$35|))))
    (forall( (|t_$36| $ctype))(!(=> (not ($is_primitive |t_$36|)) (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_vol_version |t_$36|)) |t_$36|) (= ($field_type ($f_vol_version |t_$36|)) ^$@volatile_version_t)) (= ($as_field_with_type ($f_vol_version |t_$36|) ^$@volatile_version_t) ($f_vol_version |t_$36|))) (=> ($is_primitive ^$@volatile_version_t) (= ($as_primitive_field ($f_vol_version |t_$36|)) ($f_vol_version |t_$36|)))) (=> (not ($is_primitive ^$@volatile_version_t)) (= ($as_composite_field ($f_vol_version |t_$36|)) ($f_vol_version |t_$36|)))) (= ($field_arr_root ($f_vol_version |t_$36|)) ($f_vol_version |t_$36|))) true) (= ($field_kind ($f_vol_version |t_$36|)) $fk_vol_version)) true) ($is_ghost_field ($f_vol_version |t_$36|))) ($is_semi_sequential_field ($f_vol_version |t_$36|))))  :pattern ( ($f_vol_version |t_$36|))))
    (forall( (|t_$37| $ctype))(!(= ($is_threadtype |t_$37|) (= |t_$37| ^$@thread_id_t))  :pattern ( ($is_threadtype |t_$37|))))
    (forall( (|t_$41| $ctype) (|sz_$30| Int))(!(and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($array_emb |t_$41| |sz_$30|)) ($array |t_$41| |sz_$30|)) (= ($field_type ($array_emb |t_$41| |sz_$30|)) |t_$41|)) (= ($as_field_with_type ($array_emb |t_$41| |sz_$30|) |t_$41|) ($array_emb |t_$41| |sz_$30|))) (=> ($is_primitive |t_$41|) (= ($as_primitive_field ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|)))) (=> (not ($is_primitive |t_$41|)) (= ($as_composite_field ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|)))) (= ($field_arr_root ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|))) true) (= ($field_kind ($array_emb |t_$41| |sz_$30|)) $fk_as_array_first)) ($is_phys_field ($array_emb |t_$41| |sz_$30|))) (= ($field_offset ($array_emb |t_$41| |sz_$30|)) 0)) (= ($field_arr_size ($array_emb |t_$41| |sz_$30|)) |sz_$30|)) (= ($field_arr_index ($array_emb |t_$41| |sz_$30|)) 0)) (= ($field_arr_root ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|))) ($is_sequential_field ($array_emb |t_$41| |sz_$30|))) true)  :pattern ( ($array_emb |t_$41| |sz_$30|)) :pattern ( ($array |t_$41| |sz_$30|))))
    (forall( (|t_$54| $ctype) (|x_$14| Int) (|y_$3| Int))(!(= ($unchk_add |t_$54| |x_$14| |y_$3|) ($unchecked |t_$54| (+ |x_$14| |y_$3|)))  :pattern ( ($unchk_add |t_$54| |x_$14| |y_$3|))))
    (forall( (|t_$59| $ctype) (|x_$21| Int) (|y_$10| Int))(!(= ($_shl |t_$59| |x_$21| |y_$10|) ($unchecked |t_$59| (* |x_$21| ($_pow2 |y_$10|))))  :pattern ( ($_shl |t_$59| |x_$21| |y_$10|))))
    (forall( (|t_$60| $ctype) (|val_$17| Int))(!(=> ($in_range_t |t_$60| |val_$17|) (= ($unchecked |t_$60| |val_$17|) |val_$17|))  :pattern ( ($unchecked |t_$60| |val_$17|))))
    (forall( (|t_$61| $ctype) (|val_$18| Int))(!($in_range_t |t_$61| ($unchecked |t_$61| |val_$18|))  :pattern ( ($unchecked |t_$61| |val_$18|))))
    (forall( (|t_$62| $ctype) (|x_$32| Int) (|y_$14| Int) (|z| Int))(!(=> (and (and ($in_range_t |t_$62| |x_$32|) ($in_range_t |t_$62| (- ($_pow2 |y_$14|) 1))) (>= |x_$32| 0)) (= (mod |x_$32| ($_pow2 |y_$14|)) ($_and |t_$62| |x_$32| (- ($_pow2 |y_$14|) 1))))  :pattern ( (mod |x_$32| ($_pow2 |y_$14|)) ($_and |t_$62| |x_$32| |z|))))
    (forall( (|t_$63| $ctype) (|x_$38| Int) (|y_$20| Int))(!(=> (and (<= 0 |x_$38|) ($in_range_t |t_$63| |x_$38|)) (and (<= 0 ($_and |t_$63| |x_$38| |y_$20|)) (<= ($_and |t_$63| |x_$38| |y_$20|) |x_$38|)))  :pattern ( ($_and |t_$63| |x_$38| |y_$20|))))
    (forall( (|t_$64| $ctype) (|x_$39| Int) (|y_$21| Int))(!(=> (and (and (and (<= 0 |x_$39|) (<= 0 |y_$21|)) ($in_range_t |t_$64| |x_$39|)) ($in_range_t |t_$64| |y_$21|)) (and (<= ($_and |t_$64| |x_$39| |y_$21|) |x_$39|) (<= ($_and |t_$64| |x_$39| |y_$21|) |y_$21|)))  :pattern ( ($_and |t_$64| |x_$39| |y_$21|))))
    (forall( (|t_$65| $ctype) (|x_$40| Int) (|y_$22| Int))(!(=> (and (and (and (<= 0 |x_$40|) (<= 0 |y_$22|)) ($in_range_t |t_$65| |x_$40|)) ($in_range_t |t_$65| |y_$22|)) (and (<= 0 ($_or |t_$65| |x_$40| |y_$22|)) (<= ($_or |t_$65| |x_$40| |y_$22|) (+ |x_$40| |y_$22|))))  :pattern ( ($_or |t_$65| |x_$40| |y_$22|))))
    (forall( (|t_$66| $ctype) (|x_$41| Int) (|y_$23| Int))(!(=> (and (and (and (<= 0 |x_$41|) (<= 0 |y_$23|)) ($in_range_t |t_$66| |x_$41|)) ($in_range_t |t_$66| |y_$23|)) (and (<= |x_$41| ($_or |t_$66| |x_$41| |y_$23|)) (<= |y_$23| ($_or |t_$66| |x_$41| |y_$23|))))  :pattern ( ($_or |t_$66| |x_$41| |y_$23|))))
    (forall( (|t_$67| $ctype) (|x_$42| Int) (|y_$24| Int) (|z_$0| Int))(!(=> (and (and (and (and (and (and (and (<= 0 |x_$42|) (<= 0 |y_$24|)) (<= 0 |z_$0|)) (< |z_$0| 64)) (< |x_$42| ($_pow2 |z_$0|))) (< |y_$24| ($_pow2 |z_$0|))) ($in_range_t |t_$67| |x_$42|)) ($in_range_t |t_$67| |y_$24|)) (< ($_or |t_$67| |x_$42| |y_$24|) ($_pow2 |z_$0|)))  :pattern ( ($_or |t_$67| |x_$42| |y_$24|) ($_pow2 |z_$0|))))
    (forall( (|t_$68| $ctype) (|x_$43| Int) (|y_$25| Int))(!(=> (and (and (<= 0 |x_$43|) (<= |x_$43| $max.u1)) (and (<= 0 |y_$25|) (<= |y_$25| $max.u1))) (and (<= 0 ($_or |t_$68| |x_$43| |y_$25|)) (<= ($_or |t_$68| |x_$43| |y_$25|) $max.u1)))  :pattern ( ($_or |t_$68| |x_$43| |y_$25|))))
    (forall( (|t_$69| $ctype) (|x_$44| Int) (|y_$26| Int))(!(=> (and (and (<= 0 |x_$44|) (<= |x_$44| $max.u2)) (and (<= 0 |y_$26|) (<= |y_$26| $max.u2))) (and (<= 0 ($_or |t_$69| |x_$44| |y_$26|)) (<= ($_or |t_$69| |x_$44| |y_$26|) $max.u2)))  :pattern ( ($_or |t_$69| |x_$44| |y_$26|))))
    (forall( (|t_$70| $ctype) (|x_$45| Int) (|y_$27| Int))(!(=> (and (and (<= 0 |x_$45|) (<= |x_$45| $max.u4)) (and (<= 0 |y_$27|) (<= |y_$27| $max.u4))) (and (<= 0 ($_or |t_$70| |x_$45| |y_$27|)) (<= ($_or |t_$70| |x_$45| |y_$27|) $max.u4)))  :pattern ( ($_or |t_$70| |x_$45| |y_$27|))))
    (forall( (|t_$71| $ctype) (|x_$46| Int) (|y_$28| Int))(!(=> (and (and (<= 0 |x_$46|) (<= |x_$46| $max.u8)) (and (<= 0 |y_$28|) (<= |y_$28| $max.u8))) (and (<= 0 ($_or |t_$71| |x_$46| |y_$28|)) (<= ($_or |t_$71| |x_$46| |y_$28|) $max.u8)))  :pattern ( ($_or |t_$71| |x_$46| |y_$28|))))
    (forall( (|t_$72| $ctype) (|x_$47| Int) (|y_$29| Int))(!(=> (and (and (<= 0 |x_$47|) (<= |x_$47| $max.u1)) (and (<= 0 |y_$29|) (<= |y_$29| $max.u1))) (and (<= 0 ($_and |t_$72| |x_$47| |y_$29|)) (<= ($_and |t_$72| |x_$47| |y_$29|) $max.u1)))  :pattern ( ($_and |t_$72| |x_$47| |y_$29|))))
    (forall( (|t_$73| $ctype) (|x_$48| Int) (|y_$30| Int))(!(=> (and (and (<= 0 |x_$48|) (<= |x_$48| $max.u2)) (and (<= 0 |y_$30|) (<= |y_$30| $max.u2))) (and (<= 0 ($_and |t_$73| |x_$48| |y_$30|)) (<= ($_and |t_$73| |x_$48| |y_$30|) $max.u2)))  :pattern ( ($_and |t_$73| |x_$48| |y_$30|))))
    (forall( (|t_$74| $ctype) (|x_$49| Int) (|y_$31| Int))(!(=> (and (and (<= 0 |x_$49|) (<= |x_$49| $max.u4)) (and (<= 0 |y_$31|) (<= |y_$31| $max.u4))) (and (<= 0 ($_and |t_$74| |x_$49| |y_$31|)) (<= ($_and |t_$74| |x_$49| |y_$31|) $max.u4)))  :pattern ( ($_and |t_$74| |x_$49| |y_$31|))))
    (forall( (|t_$75| $ctype) (|x_$50| Int) (|y_$32| Int))(!(=> (and (and (<= 0 |x_$50|) (<= |x_$50| $max.u8)) (and (<= 0 |y_$32|) (<= |y_$32| $max.u8))) (and (<= 0 ($_and |t_$75| |x_$50| |y_$32|)) (<= ($_and |t_$75| |x_$50| |y_$32|) $max.u8)))  :pattern ( ($_and |t_$75| |x_$50| |y_$32|))))
    (forall( (|t_$76| $ctype) (|x_$51| Int) (|y_$33| Int))(!(=> (and (and (<= 0 |x_$51|) (<= |x_$51| $max.u1)) (and (<= 0 |y_$33|) (<= |y_$33| $max.u1))) (and (<= 0 ($_xor |t_$76| |x_$51| |y_$33|)) (<= ($_xor |t_$76| |x_$51| |y_$33|) $max.u1)))  :pattern ( ($_xor |t_$76| |x_$51| |y_$33|))))
    (forall( (|t_$77| $ctype) (|x_$52| Int) (|y_$34| Int))(!(=> (and (and (<= 0 |x_$52|) (<= |x_$52| $max.u2)) (and (<= 0 |y_$34|) (<= |y_$34| $max.u2))) (and (<= 0 ($_xor |t_$77| |x_$52| |y_$34|)) (<= ($_xor |t_$77| |x_$52| |y_$34|) $max.u2)))  :pattern ( ($_xor |t_$77| |x_$52| |y_$34|))))
    (forall( (|t_$78| $ctype) (|x_$53| Int) (|y_$35| Int))(!(=> (and (and (<= 0 |x_$53|) (<= |x_$53| $max.u4)) (and (<= 0 |y_$35|) (<= |y_$35| $max.u4))) (and (<= 0 ($_xor |t_$78| |x_$53| |y_$35|)) (<= ($_xor |t_$78| |x_$53| |y_$35|) $max.u4)))  :pattern ( ($_xor |t_$78| |x_$53| |y_$35|))))
    (forall( (|t_$79| $ctype) (|x_$54| Int) (|y_$36| Int))(!(=> (and (and (<= 0 |x_$54|) (<= |x_$54| $max.u8)) (and (<= 0 |y_$36|) (<= |y_$36| $max.u8))) (and (<= 0 ($_xor |t_$79| |x_$54| |y_$36|)) (<= ($_xor |t_$79| |x_$54| |y_$36|) $max.u8)))  :pattern ( ($_xor |t_$79| |x_$54| |y_$36|))))
    (forall( (|t_$8| $ctype))(= (not ($is_primitive |t_$8|)) (not ($is_primitive |t_$8|))))
    (forall( (|t_$80| $ctype) (|x_$55| Int))(!($in_range_t |t_$80| ($_not |t_$80| |x_$55|))  :pattern ( ($_not |t_$80| |x_$55|))))
    (forall( (|t_$81| $ctype) (|x_$56| Int))(!(= ($_or |t_$81| |x_$56| ($_not |t_$81| |x_$56|)) ($_not |t_$81| 0))  :pattern ( ($_or |t_$81| |x_$56| ($_not |t_$81| |x_$56|)))))
    (forall( (|t_$82| $ctype) (|x_$57| Int))(!(= ($_and |t_$82| |x_$57| ($_not |t_$82| |x_$57|)) 0)  :pattern ( ($_and |t_$82| |x_$57| ($_not |t_$82| |x_$57|)))))
    (forall( (|t_$83| $ctype) (|x_$58| Int))(!(=> ($in_range_t |t_$83| |x_$58|) (= ($_or |t_$83| |x_$58| 0) |x_$58|))  :pattern ( ($_or |t_$83| |x_$58| 0))))
    (forall( (|t_$84| $ctype) (|x_$59| Int))(!(= ($_or |t_$84| |x_$59| ($_not |t_$84| 0)) ($_not |t_$84| 0))  :pattern ( ($_or |t_$84| |x_$59| ($_not |t_$84| 0)))))
    (forall( (|t_$85| $ctype) (|x_$60| Int))(!(=> ($in_range_t |t_$85| |x_$60|) (= ($_or |t_$85| |x_$60| |x_$60|) |x_$60|))  :pattern ( ($_or |t_$85| |x_$60| |x_$60|))))
    (forall( (|t_$86| $ctype) (|x_$61| Int))(!(= ($_and |t_$86| |x_$61| 0) 0)  :pattern ( ($_and |t_$86| |x_$61| 0))))
    (forall( (|t_$87| $ctype) (|x_$62| Int))(!(=> ($in_range_t |t_$87| |x_$62|) (= ($_and |t_$87| |x_$62| ($_not |t_$87| 0)) |x_$62|))  :pattern ( ($_and |t_$87| |x_$62| ($_not |t_$87| 0)))))
    (forall( (|t_$88| $ctype) (|x_$63| Int))(!(=> ($in_range_t |t_$88| |x_$63|) (= ($_and |t_$88| |x_$63| |x_$63|) |x_$63|))  :pattern ( ($_and |t_$88| |x_$63| |x_$63|))))
    (forall( (|t_$89| $ctype) (|x_$64| Int) (|y_$37| Int))(!(= ($_and |t_$89| ($_or |t_$89| |x_$64| |y_$37|) |y_$37|) |y_$37|)  :pattern ( ($_and |t_$89| ($_or |t_$89| |x_$64| |y_$37|) |y_$37|))))
    (forall( (|t_$90| $ctype) (|x_$65| Int) (|y_$38| Int))(!(= ($_and |t_$90| ($_or |t_$90| |x_$65| |y_$38|) |x_$65|) |x_$65|)  :pattern ( ($_and |t_$90| ($_or |t_$90| |x_$65| |y_$38|) |x_$65|))))
    (forall( (|t_$91| $ctype) (|x_$66| Int))(!(=> ($in_range_t |t_$91| |x_$66|) (= ($_xor |t_$91| |x_$66| 0) |x_$66|))  :pattern ( ($_xor |t_$91| |x_$66| 0))))
    (forall( (|t_$92| $ctype) (|x_$67| Int))(!(= ($_xor |t_$92| |x_$67| |x_$67|) 0)  :pattern ( ($_xor |t_$92| |x_$67| |x_$67|))))
    (forall( (|t_$93| $ctype) (|x_$68| Int))(!(= ($_xor |t_$93| |x_$68| ($_not |t_$93| 0)) ($_not |t_$93| |x_$68|))  :pattern ( ($_xor |t_$93| |x_$68| ($_not |t_$93| 0)))))
    (forall( (|t_$94| $ctype) (|x_$69| Int))(!(=> ($in_range_t |t_$94| |x_$69|) (= ($_not |t_$94| ($_not |t_$94| |x_$69|)) |x_$69|))  :pattern ( ($_not |t_$94| ($_not |t_$94| |x_$69|)))))
    (forall( (|t_$95| $ctype) (|x_$70| Int) (|y_$39| Int))(!(= ($_or |t_$95| |x_$70| |y_$39|) ($_or |t_$95| |y_$39| |x_$70|))  :pattern ( ($_or |t_$95| |x_$70| |y_$39|))))
    (forall( (|t_$96| $ctype) (|x_$71| Int) (|y_$40| Int))(!(= ($_xor |t_$96| |x_$71| |y_$40|) ($_xor |t_$96| |y_$40| |x_$71|))  :pattern ( ($_xor |t_$96| |x_$71| |y_$40|))))
    (forall( (|t_$97| $ctype) (|x_$72| Int) (|y_$41| Int))(!(= ($_and |t_$97| |x_$72| |y_$41|) ($_and |t_$97| |y_$41| |x_$72|))  :pattern ( ($_and |t_$97| |x_$72| |y_$41|))))
    (forall( (|time_$0| Int) (|p_$128| $ptr))(!(= ($in_writes_at |time_$0| |p_$128|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($writes_at |time_$0|) |p_$128|))  :inline  false :pattern ( ($in_writes_at |time_$0| |p_$128|))))
    (forall( (|tok_$0| $token) (|c_$1| $ptr) (|#s2_$0| $state) (|#s1_$2| $state))(= (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$2|) ($full_stop |#s1_$2|)) ($good_state_ext |tok_$0| |#s2_$0|)) (forall( (|p_$36_$4| $ptr) (|q_$2_$4| $ptr))(!(=> (and (and ($good_state |#s1_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$2|) ($f_owns ($field_type ($field |q_$2_$4|)))) |q_$2_$4|)) |p_$36_$4|)) ($closed |#s1_$2| |q_$2_$4|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$4|)))) (= ($owner |#s1_$2| |p_$36_$4|) |q_$2_$4|)) ($closed |#s1_$2| |p_$36_$4|)) (not (= |p_$36_$4| ($phys_ptr_cast $null ($field_type ($field |p_$36_$4|)))))) true))  :pattern ( ($set_in_pos |p_$36_$4| ($owns |#s1_$2| |q_$2_$4|)))))) (forall( (|p_$36_$5| $ptr) (|q_$2_$5| $ptr))(!(=> (and (and ($good_state |#s2_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$0|) ($f_owns ($field_type ($field |q_$2_$5|)))) |q_$2_$5|)) |p_$36_$5|)) ($closed |#s2_$0| |q_$2_$5|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$5|)))) (= ($owner |#s2_$0| |p_$36_$5|) |q_$2_$5|)) ($closed |#s2_$0| |p_$36_$5|)) (not (= |p_$36_$5| ($phys_ptr_cast $null ($field_type ($field |p_$36_$5|)))))) true))  :pattern ( ($set_in_pos |p_$36_$5| ($owns |#s2_$0| |q_$2_$5|)))))) (forall( (|#p_$6_$1| $ptr))(!(or (and (not ($closed |#s1_$2| |#p_$6_$1|)) (not ($closed |#s2_$0| |#p_$6_$1|))) (and ($inv2 |#s1_$2| |#s2_$0| |#p_$6_$1| ($field_type ($field |#p_$6_$1|))) ($nonvolatile_spans_the_same |#s1_$2| |#s2_$0| |#p_$6_$1| ($field_type ($field |#p_$6_$1|)))))  :pattern ( ($closed |#s1_$2| |#p_$6_$1|)) :pattern ( ($closed |#s2_$0| |#p_$6_$1|))))) ($valid_claim |#s1_$2| |c_$1|)) ($closed |#s2_$0| |c_$1|)) true) (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$2|) ($full_stop |#s1_$2|)) ($good_state_ext |tok_$0| |#s2_$0|)) (forall( (|p_$36_$6| $ptr) (|q_$2_$6| $ptr))(!(=> (and (and ($good_state |#s1_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$2|) ($f_owns ($field_type ($field |q_$2_$6|)))) |q_$2_$6|)) |p_$36_$6|)) ($closed |#s1_$2| |q_$2_$6|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$6|)))) (= ($owner |#s1_$2| |p_$36_$6|) |q_$2_$6|)) ($closed |#s1_$2| |p_$36_$6|)) (not (= |p_$36_$6| ($phys_ptr_cast $null ($field_type ($field |p_$36_$6|)))))) true))  :pattern ( ($set_in_pos |p_$36_$6| ($owns |#s1_$2| |q_$2_$6|)))))) (forall( (|p_$36_$7| $ptr) (|q_$2_$7| $ptr))(!(=> (and (and ($good_state |#s2_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$0|) ($f_owns ($field_type ($field |q_$2_$7|)))) |q_$2_$7|)) |p_$36_$7|)) ($closed |#s2_$0| |q_$2_$7|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$7|)))) (= ($owner |#s2_$0| |p_$36_$7|) |q_$2_$7|)) ($closed |#s2_$0| |p_$36_$7|)) (not (= |p_$36_$7| ($phys_ptr_cast $null ($field_type ($field |p_$36_$7|)))))) true))  :pattern ( ($set_in_pos |p_$36_$7| ($owns |#s2_$0| |q_$2_$7|)))))) (forall( (|#p_$6| $ptr))(!(or (and (not ($closed |#s1_$2| |#p_$6|)) (not ($closed |#s2_$0| |#p_$6|))) (and ($inv2 |#s1_$2| |#s2_$0| |#p_$6| ($field_type ($field |#p_$6|))) ($nonvolatile_spans_the_same |#s1_$2| |#s2_$0| |#p_$6| ($field_type ($field |#p_$6|)))))  :pattern ( ($closed |#s1_$2| |#p_$6|)) :pattern ( ($closed |#s2_$0| |#p_$6|))))) ($valid_claim |#s1_$2| |c_$1|)) ($closed |#s2_$0| |c_$1|)) true)))
    (forall( (|tok| $token) (|c_$0| $ptr) (|#s1_$0| $state))(= (and (and ($good_state_ext |tok| |#s1_$0|) (forall( (|p_$36_$2| $ptr) (|q_$2_$2| $ptr))(!(=> (and (and ($good_state |#s1_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$0|) ($f_owns ($field_type ($field |q_$2_$2|)))) |q_$2_$2|)) |p_$36_$2|)) ($closed |#s1_$0| |q_$2_$2|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$2|)))) (= ($owner |#s1_$0| |p_$36_$2|) |q_$2_$2|)) ($closed |#s1_$0| |p_$36_$2|)) (not (= |p_$36_$2| ($phys_ptr_cast $null ($field_type ($field |p_$36_$2|)))))) true))  :pattern ( ($set_in_pos |p_$36_$2| ($owns |#s1_$0| |q_$2_$2|)))))) true) (and (and ($good_state_ext |tok| |#s1_$0|) (forall( (|p_$36_$3| $ptr) (|q_$2_$3| $ptr))(!(=> (and (and ($good_state |#s1_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$0|) ($f_owns ($field_type ($field |q_$2_$3|)))) |q_$2_$3|)) |p_$36_$3|)) ($closed |#s1_$0| |q_$2_$3|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$3|)))) (= ($owner |#s1_$0| |p_$36_$3|) |q_$2_$3|)) ($closed |#s1_$0| |p_$36_$3|)) (not (= |p_$36_$3| ($phys_ptr_cast $null ($field_type ($field |p_$36_$3|)))))) true))  :pattern ( ($set_in_pos |p_$36_$3| ($owns |#s1_$0| |q_$2_$3|)))))) true)))
    (forall( (|tp_$3| $ctype) (|f_$4| $field) (|partp_$3| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$4|) |partp_$3|) (= ($field_type |f_$4|) |tp_$3|)) (= ($as_field_with_type |f_$4| |tp_$3|) |f_$4|)) (=> ($is_primitive |tp_$3|) (= ($as_primitive_field |f_$4|) |f_$4|))) (=> (not ($is_primitive |tp_$3|)) (= ($as_composite_field |f_$4|) |f_$4|))) (= ($field_arr_root |f_$4|) |f_$4|)) true) (=> (not false) ($is_sequential_field |f_$4|))) (=> false ($is_volatile_field |f_$4|))) true) (= ($field_offset |f_$4|) 0)) ($is_phys_field |f_$4|)) (= ($field_kind |f_$4|) $fk_base)) (=> (= 0 0) ($has_field_at0 |partp_$3| |f_$4|))) true) (= ($f_group_root |tp_$3|) |f_$4|)) ($is_group_type |tp_$3|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$4|) |partp_$3|) (= ($field_type |f_$4|) |tp_$3|)) (= ($as_field_with_type |f_$4| |tp_$3|) |f_$4|)) (=> ($is_primitive |tp_$3|) (= ($as_primitive_field |f_$4|) |f_$4|))) (=> (not ($is_primitive |tp_$3|)) (= ($as_composite_field |f_$4|) |f_$4|))) (= ($field_arr_root |f_$4|) |f_$4|)) true) (=> (not false) ($is_sequential_field |f_$4|))) (=> false ($is_volatile_field |f_$4|))) true) (= ($field_offset |f_$4|) 0)) ($is_phys_field |f_$4|)) (= ($field_kind |f_$4|) $fk_base)) (=> (= 0 0) ($has_field_at0 |partp_$3| |f_$4|))) true) (= ($f_group_root |tp_$3|) |f_$4|)) ($is_group_type |tp_$3|)) true)))
    (forall( (|tp| $ctype) (|f_$0| $field) (|partp| $ctype))(= (and (and (and (and (and (and (= ($field_parent_type |f_$0|) |partp|) (= ($field_type |f_$0|) |tp|)) (= ($as_field_with_type |f_$0| |tp|) |f_$0|)) (=> ($is_primitive |tp|) (= ($as_primitive_field |f_$0|) |f_$0|))) (=> (not ($is_primitive |tp|)) (= ($as_composite_field |f_$0|) |f_$0|))) (= ($field_arr_root |f_$0|) |f_$0|)) true) (and (and (and (and (and (and (= ($field_parent_type |f_$0|) |partp|) (= ($field_type |f_$0|) |tp|)) (= ($as_field_with_type |f_$0| |tp|) |f_$0|)) (=> ($is_primitive |tp|) (= ($as_primitive_field |f_$0|) |f_$0|))) (=> (not ($is_primitive |tp|)) (= ($as_composite_field |f_$0|) |f_$0|))) (= ($field_arr_root |f_$0|) |f_$0|)) true)))
    (forall( (|typ_$0| $ctype) (|#p_$5| $ptr) (|#s2| $state) (|#s1_$1| $state))(= (or (and (not ($closed |#s1_$1| |#p_$5|)) (not ($closed |#s2| |#p_$5|))) (and ($inv2 |#s1_$1| |#s2| |#p_$5| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$1| |#s2| |#p_$5| |typ_$0|))) (or (and (not ($closed |#s1_$1| |#p_$5|)) (not ($closed |#s2| |#p_$5|))) (and ($inv2 |#s1_$1| |#s2| |#p_$5| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$1| |#s2| |#p_$5| |typ_$0|)))))
    (forall( (|typ| $ctype) (|#p_$4| $ptr) (|#s1| $state))(= ($inv2 |#s1| |#s1| |#p_$4| |typ|) ($inv2 |#s1| |#s1| |#p_$4| |typ|)))
    (forall( (|v_$0| Bool))(= (ite |v_$0| 1 0) (ite |v_$0| 1 0)))
    (forall( (|v| Int) (|f_$17| $field) (|r| $ptr) (|h| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@))(= (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17|) |r| |v|)) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17|) |r| |v|))))
    (forall( (|val_$10| Int))(!(= ($in_range_t ^^i4 |val_$10|) (and (<= $min.i4 |val_$10|) (<= |val_$10| $max.i4)))  :pattern ( ($in_range_t ^^i4 |val_$10|))))
    (forall( (|val_$11| Int))(!(= ($in_range_t ^^i8 |val_$11|) (and (<= $min.i8 |val_$11|) (<= |val_$11| $max.i8)))  :pattern ( ($in_range_t ^^i8 |val_$11|))))
    (forall( (|val_$12| Int))(!(= ($in_range_t ^^u1 |val_$12|) (and (<= 0 |val_$12|) (<= |val_$12| $max.u1)))  :pattern ( ($in_range_t ^^u1 |val_$12|))))
    (forall( (|val_$13| Int))(!(= ($in_range_t ^^u2 |val_$13|) (and (<= 0 |val_$13|) (<= |val_$13| $max.u2)))  :pattern ( ($in_range_t ^^u2 |val_$13|))))
    (forall( (|val_$14| Int))(!(= ($in_range_t ^^u4 |val_$14|) (and (<= 0 |val_$14|) (<= |val_$14| $max.u4)))  :pattern ( ($in_range_t ^^u4 |val_$14|))))
    (forall( (|val_$15| Int))(!(= ($in_range_t ^^u8 |val_$15|) (and (<= 0 |val_$15|) (<= |val_$15| $max.u8)))  :pattern ( ($in_range_t ^^u8 |val_$15|))))
    (forall( (|val_$16| Int))(!($in_range_t ^^mathint |val_$16|)  :pattern ( ($in_range_t ^^mathint |val_$16|))))
    (forall( (|val_$19| Int))(!(=> (and (<= 0 |val_$19|) (<= |val_$19| $max.u1)) (= ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|)) |val_$19|))  :pattern ( ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|)))))
    (forall( (|val_$20| Int))(!(=> (and (<= 0 |val_$20|) (<= |val_$20| $max.u2)) (= ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|)) |val_$20|))  :pattern ( ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|)))))
    (forall( (|val_$21| Int))(!(=> (and (<= 0 |val_$21|) (<= |val_$21| $max.u4)) (= ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|)) |val_$21|))  :pattern ( ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|)))))
    (forall( (|val_$22| Int))(!(=> (and (<= 0 |val_$22|) (<= |val_$22| $max.u8)) (= ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|)) |val_$22|))  :pattern ( ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|)))))
    (forall( (|val_$23| Int))(!(=> (and (<= $min.i1 |val_$23|) (<= |val_$23| $max.i1)) (= ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|)) |val_$23|))  :pattern ( ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|)))))
    (forall( (|val_$24| Int))(!(=> (and (<= $min.i2 |val_$24|) (<= |val_$24| $max.i2)) (= ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|)) |val_$24|))  :pattern ( ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|)))))
    (forall( (|val_$25| Int))(!(=> (and (<= $min.i4 |val_$25|) (<= |val_$25| $max.i4)) (= ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|)) |val_$25|))  :pattern ( ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|)))))
    (forall( (|val_$26| Int))(!(=> (and (<= $min.i8 |val_$26|) (<= |val_$26| $max.i8)) (= ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|)) |val_$26|))  :pattern ( ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|)))))
    (forall( (|val_$8| Int))(!(= ($in_range_t ^^i1 |val_$8|) (and (<= $min.i1 |val_$8|) (<= |val_$8| $max.i1)))  :pattern ( ($in_range_t ^^i1 |val_$8|))))
    (forall( (|val_$9| Int))(!(= ($in_range_t ^^i2 |val_$9|) (and (<= $min.i2 |val_$9|) (<= |val_$9| $max.i2)))  :pattern ( ($in_range_t ^^i2 |val_$9|))))
    (forall( (|W_$0| $@Map@@$ptr@To@Bool@@) (|S_$11| $state))(= (forall( (|p_$28_$0| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$0| |p_$28_$0|) (ite ($is_primitive ($field_type ($field |p_$28_$0|))) (and (= ($owner |S_$11| ($emb0 |p_$28_$0|)) $me) (not ($closed |S_$11| ($emb0 |p_$28_$0|)))) (= ($owner |S_$11| |p_$28_$0|) $me)))  :pattern ( ($mutable |S_$11| |p_$28_$0|)) :pattern ( ($owner |S_$11| |p_$28_$0|)) :pattern ( ($closed |S_$11| |p_$28_$0|)) :pattern ( ($owner |S_$11| ($emb0 |p_$28_$0|))) :pattern ( ($closed |S_$11| ($emb0 |p_$28_$0|))))) (forall( (|p_$28| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$0| |p_$28|) (ite ($is_primitive ($field_type ($field |p_$28|))) (and (= ($owner |S_$11| ($emb0 |p_$28|)) $me) (not ($closed |S_$11| ($emb0 |p_$28|)))) (= ($owner |S_$11| |p_$28|) $me)))  :pattern ( ($mutable |S_$11| |p_$28|)) :pattern ( ($owner |S_$11| |p_$28|)) :pattern ( ($closed |S_$11| |p_$28|)) :pattern ( ($owner |S_$11| ($emb0 |p_$28|))) :pattern ( ($closed |S_$11| ($emb0 |p_$28|)))))))
    (forall( (|W_$1| $@Map@@$ptr@To@Bool@@) (|p_$49| $ptr) (|S0_$2| $state))(= (and (= ($owner |S0_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$1| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|)))) (and (= ($owner |S0_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$1| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|))))))
    (forall( (|W| $@Map@@$ptr@To@Bool@@) (|S_$9| $state))(= (forall( (|p_$26_$0| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W| |p_$26_$0|) ($mutable |S_$9| |p_$26_$0|))  :pattern ( ($mutable |S_$9| |p_$26_$0|)) :pattern ( ($owner |S_$9| |p_$26_$0|)) :pattern ( ($closed |S_$9| |p_$26_$0|)) :pattern ( ($owner |S_$9| ($emb0 |p_$26_$0|))) :pattern ( ($closed |S_$9| ($emb0 |p_$26_$0|))))) (forall( (|p_$26| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W| |p_$26|) ($mutable |S_$9| |p_$26|))  :pattern ( ($mutable |S_$9| |p_$26|)) :pattern ( ($owner |S_$9| |p_$26|)) :pattern ( ($closed |S_$9| |p_$26|)) :pattern ( ($owner |S_$9| ($emb0 |p_$26|))) :pattern ( ($closed |S_$9| ($emb0 |p_$26|)))))))
    (forall( (|x_$0| Int))(= (and (<= $min.i1 |x_$0|) (<= |x_$0| $max.i1)) (and (<= $min.i1 |x_$0|) (<= |x_$0| $max.i1))))
    (forall( (|x_$1| Int))(= (and (<= $min.i2 |x_$1|) (<= |x_$1| $max.i2)) (and (<= $min.i2 |x_$1|) (<= |x_$1| $max.i2))))
    (forall( (|x_$19| Int) (|y_$8| Int))(!(=> (and (and (and (<= 0 |x_$19|) (<= |x_$19| $max.u8)) (and (<= 0 |y_$8|) (<= |y_$8| $max.u8))) (> (+ |x_$19| |y_$8|) $max.u8)) (= ($unchk_add ^^u8 |x_$19| |y_$8|) (- (- (+ |x_$19| |y_$8|) $max.u8) 1)))  :pattern ( ($unchk_add ^^u8 |x_$19| |y_$8|))))
    (forall( (|x_$2| Int))(= (and (<= $min.i4 |x_$2|) (<= |x_$2| $max.i4)) (and (<= $min.i4 |x_$2|) (<= |x_$2| $max.i4))))
    (forall( (|x_$20| Int) (|y_$9| Int))(!(=> (and (and (and (<= 0 |x_$20|) (<= |x_$20| $max.u4)) (and (<= 0 |y_$9|) (<= |y_$9| $max.u4))) (> (+ |x_$20| |y_$9|) $max.u8)) (= ($unchk_add ^^u4 |x_$20| |y_$9|) (- (- (+ |x_$20| |y_$9|) $max.u4) 1)))  :pattern ( ($unchk_add ^^u4 |x_$20| |y_$9|))))
    (forall( (|x_$22| Int) (|y_$11| Int))(!(= ($_shr |x_$22| |y_$11|) (div |x_$22| ($_pow2 |y_$11|)))  :pattern ( ($_shr |x_$22| |y_$11|))))
    (forall( (|x_$23| Int) (|from| Int) (|to| Int) (|xs| Int) (|val_$0| Int))(!(=> (and (and (<= 0 |from|) (< |from| |to|)) (<= |to| |xs|)) (=> (and (<= 0 |val_$0|) (< |val_$0| ($_pow2 (- |to| |from|)))) (and (<= 0 ($bv_update |x_$23| |xs| |from| |to| |val_$0|)) (< ($bv_update |x_$23| |xs| |from| |to| |val_$0|) ($_pow2 |xs|)))))  :pattern ( ($bv_update |x_$23| |xs| |from| |to| |val_$0|))))
    (forall( (|x_$3| Int))(= (and (<= $min.i8 |x_$3|) (<= |x_$3| $max.i8)) (and (<= $min.i8 |x_$3|) (<= |x_$3| $max.i8))))
    (forall( (|x_$33| Int) (|y_$15| Int))(!(= (mod |x_$33| |y_$15|) (- |x_$33| (* (div |x_$33| |y_$15|) |y_$15|)))  :pattern ( (mod |x_$33| |y_$15|)) :pattern ( (div |x_$33| |y_$15|))))
    (forall( (|x_$34| Int) (|y_$16| Int))(!(=> (and (<= 0 |x_$34|) (< 0 |y_$16|)) (and (<= 0 (mod |x_$34| |y_$16|)) (< (mod |x_$34| |y_$16|) |y_$16|)))  :pattern ( (mod |x_$34| |y_$16|))))
    (forall( (|x_$35| Int) (|y_$17| Int))(!(=> (and (<= 0 |x_$35|) (< |y_$17| 0)) (and (<= 0 (mod |x_$35| |y_$17|)) (< (mod |x_$35| |y_$17|) (- 0 |y_$17|))))  :pattern ( (mod |x_$35| |y_$17|))))
    (forall( (|x_$36| Int) (|y_$18| Int))(!(=> (and (<= |x_$36| 0) (< 0 |y_$18|)) (and (< (- 0 |y_$18|) (mod |x_$36| |y_$18|)) (<= (mod |x_$36| |y_$18|) 0)))  :pattern ( (mod |x_$36| |y_$18|))))
    (forall( (|x_$37| Int) (|y_$19| Int))(!(=> (and (<= |x_$37| 0) (< |y_$19| 0)) (and (< |y_$19| (mod |x_$37| |y_$19|)) (<= (mod |x_$37| |y_$19|) 0)))  :pattern ( (mod |x_$37| |y_$19|))))
    (forall( (|x_$4| Int))(= (and (<= 0 |x_$4|) (<= |x_$4| $max.u1)) (and (<= 0 |x_$4|) (<= |x_$4| $max.u1))))
    (forall( (|x_$5| Int))(= (and (<= 0 |x_$5|) (<= |x_$5| $max.u2)) (and (<= 0 |x_$5|) (<= |x_$5| $max.u2))))
    (forall( (|x_$6| Int))(= (and (<= 0 |x_$6|) (<= |x_$6| $max.u4)) (and (<= 0 |x_$6|) (<= |x_$6| $max.u4))))
    (forall( (|x_$7| Int))(= (and (<= 0 |x_$7|) (<= |x_$7| $max.u8)) (and (<= 0 |x_$7|) (<= |x_$7| $max.u8))))
    (forall( (|x| Int))(= (not (= |x| 0)) (not (= |x| 0))))
    (forall( (|y_$0| Int) (|x_$9| Int))(= (or (not (= |y_$0| (- 0 1))) (not (= |x_$9| $min.i2))) (or (not (= |y_$0| (- 0 1))) (not (= |x_$9| $min.i2)))))
    (forall( (|y_$1| Int) (|x_$10| Int))(= (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i4))) (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i4)))))
    (forall( (|y_$2| Int) (|x_$11| Int))(= (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i8))) (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i8)))))
    (forall( (|y| Int) (|x_$8| Int))(= (or (not (= |y| (- 0 1))) (not (= |x_$8| $min.i1))) (or (not (= |y| (- 0 1))) (not (= |x_$8| $min.i1)))))
    (ite false ($is_volatile_field ($f_owns ^$@volatile_version_t)) ($is_sequential_field ($f_owns ^$@volatile_version_t)))
    (ite false ($is_volatile_field ($f_owns ^^claim)) ($is_sequential_field ($f_owns ^^claim)))
    (ite true ($is_volatile_field ($f_owns $inactive_union_owner_type)) ($is_sequential_field ($f_owns $inactive_union_owner_type)))
    (ite true ($is_volatile_field ($f_owns ^$@thread_id_t)) ($is_sequential_field ($f_owns ^$@thread_id_t)))
    (not ($is_primitive $inactive_union_owner_type))
    (not ($is_primitive ^$@thread_id_t))
    (not ($is_primitive ^$@volatile_version_t))
    (not ($is_primitive ^^claim))
    (not (= $inactive_union_owner ($phys_ptr_cast $null ($field_type ($field $inactive_union_owner)))))
    (not (= $me ($phys_ptr_cast $null ($field_type ($field $me)))))
  )
    PreconditionGeneratedEntry
)))
(let (($root (=> (and true
  )
    $start
)))
   $root
))))))))))))))))))))))))
))

;Commands
   (check-sat)
   ;(get-unsat-core)
