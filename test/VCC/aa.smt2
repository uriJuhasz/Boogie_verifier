;Analysis time until now:     9s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$ptr@To@Bool@@ 0)
(declare-sort $ctype 0)
(declare-sort $field 0)
(declare-sort $flowdata 0)
(declare-sort $kind 0)
(declare-sort $label 0)
(declare-sort $map_t..$ptr_to..^^void.^^bool 0)
(declare-sort $memory_t 0)
(declare-sort $ptr 0)
(declare-sort $ptrclub 0)
(declare-sort $ptrset 0)
(declare-sort $pure_function 0)
(declare-sort $record 0)
(declare-sort $state 0)
(declare-sort $status 0)
(declare-sort $statusmap_t 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $type_state 0)
(declare-sort $typemap_t 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)

;Functions
(declare-fun $@bf_126 ( $state ) Bool)
(declare-fun $@bf_127 ( $state ) Bool)
(declare-fun $@bf_132 ( ) Bool)
(declare-fun $@bf_164 ( $ptrset $ptrset ) Bool)
(declare-fun $@bf_218 ( Int ) Bool)
(declare-fun $@bf_235 ( Int Int ) Bool)
(declare-fun $@bf_236 ( Int Int ) Bool)
(declare-fun $@bf_237 ( Int Int ) Bool)
(declare-fun $@bf_238 ( Int Int ) Bool)
(declare-fun $@bf_252 ( $ctype ) Bool)
(declare-fun $@bf_254 ( $token $state ) Bool)
(declare-fun $@bf_255 ( $token $state ) Bool)
(declare-fun $@bf_265 ( ) Bool)
(declare-fun $@bf_267 ( ) Bool)
(declare-fun $@bf_270 ( ) Bool)
(declare-fun $@bf_271 ( ) Bool)
(declare-fun $@bf_272 ( ) Bool)
(declare-fun $@bf_273 ( ) Bool)
(declare-fun $@bf_274 ( ) Bool)
(declare-fun $@bf_275 ( ) Bool)
(declare-fun $@bf_276 ( ) Bool)
(declare-fun $@bf_277 ( ) Bool)
(declare-fun $@bf_278 ( ) Bool)
(declare-fun $@bf_279 ( ) Bool)
(declare-fun $@bf_280 ( ) Bool)
(declare-fun $@bf_281 ( ) Bool)
(declare-fun $@bf_47 ( $state $ptr ) Bool)
(declare-fun $@bf_48 ( $state $ptr ) Bool)
(declare-fun $@bf_51 ( $state $ptr ) Bool)
(declare-fun $@bf_89 ( $token $state ) Bool)
(declare-fun $@classifier@default ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@distTp3 ( ) $ctype)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c ( ) $token)
(declare-fun $@loc._this_ ( ) $token)
(declare-fun $@sk_112 ( $state ) $ptr)
(declare-fun $@sk_113 ( $state ) $ptr)
(declare-fun $@sk_122 ( ) $pure_function)
(declare-fun $@sk_123 ( ) $pure_function)
(declare-fun $@sk_124 ( ) $pure_function)
(declare-fun $@sk_125 ( ) $pure_function)
(declare-fun $@sk_38 ( $ptrset $ptrset ) $ptr)
(declare-fun $@tok$1^13.1 ( ) $token)
(declare-fun $@wrTime$1^13.1 ( ) Int)
(declare-fun $_and ( $ctype Int Int ) Int)
(declare-fun $_not ( $ctype Int ) Int)
(declare-fun $_or ( $ctype Int Int ) Int)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $_xor ( $ctype Int Int ) Int)
(declare-fun $active_option ( $state $ptr ) $field)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $array_length ( $ctype ) Int)
(declare-fun $array_members ( $ptr $ctype Int ) $ptrset)
(declare-fun $array_path ( $field Int ) $field)
(declare-fun $array_path_1 ( $field ) $field)
(declare-fun $array_path_2 ( $field ) Int)
(declare-fun $array_range ( $state $ptr $ctype Int ) $ptrset)
(declare-fun $array_range_no_state ( $ptr $ctype Int ) $ptrset)
(declare-fun $as_array ( $ptr $ctype Int ) $ptr)
(declare-fun $as_in_range_t ( $ctype ) $ctype)
(declare-fun $as_record_record_field ( $field ) $field)
(declare-fun $bv_extract_signed ( Int Int Int Int ) Int)
(declare-fun $bv_extract_unsigned ( Int Int Int Int ) Int)
(declare-fun $bv_update ( Int Int Int Int Int ) Int)
(declare-fun $by_claim ( $state $ptr $ptr $ptr ) $ptr)
(declare-fun $claim_idx ( $ptr $ptr ) Int)
(declare-fun $claim_no ( $state $ptr Int ) $ptr)
(declare-fun $claim_version ( $ptr ) $version)
(declare-fun $current_frame_level ( ) Int)
(declare-fun $current_pure_post_level ( ) Int)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $domain ( $state $ptr ) $ptrset)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $element_type ( $ctype ) $ctype)
(declare-fun $emb ( $state $ptr ) $ptr)
(declare-fun $embedded_array_size ( $field $ctype ) Int)
(declare-fun $extent ( $state $ptr ) $ptrset)
(declare-fun $fetch_from_domain ( $version $ptr ) Int)
(declare-fun $fetch_from_vv ( $vol_version $ptr ) Int)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $frame_level ( $pure_function ) Int)
(declare-fun $full_extent ( $ptr ) $ptrset)
(declare-fun $get_fnptr ( Int $ctype ) $ptr)
(declare-fun $get_fnptr_ref ( Int ) Int)
(declare-fun $get_string_literal ( Int Int ) $ptr)
(declare-fun $ghost_emb ( Int ) $ptr)
(declare-fun $ghost_path ( Int ) $field)
(declare-fun $ghost_ref ( $ptr $field ) Int)
(declare-fun $id_set_disjoint ( $ptr $ptrset $ptrset ) Int)
(declare-fun $idx ( $ptr Int $ctype ) $ptr)
(declare-fun $index_within ( $ptr $ptr ) Int)
(declare-fun $int_to_map_t..ptr_to..^^void.^^bool ( Int ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $int_to_ptr ( Int ) $ptr)
(declare-fun $int_to_ptrset ( Int ) $ptrset)
(declare-fun $int_to_record ( Int ) $record)
(declare-fun $int_to_version ( Int ) $version)
(declare-fun $int_to_vol_version ( Int ) $vol_version)
(declare-fun $kind_array ( ) $kind)
(declare-fun $kind_composite ( ) $kind)
(declare-fun $kind_of ( $ctype ) $kind)
(declare-fun $kind_primitive ( ) $kind)
(declare-fun $kind_thread ( ) $kind)
(declare-fun $lblset.bot ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $lblset.top ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $me_ref ( ) Int)
(declare-fun $mem ( $state $ptr ) Int)
(declare-fun $memory ( $state ) $memory_t)
(declare-fun $memory_allocator_type ( ) $ctype)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $no_claim ( ) $ptr)
(declare-fun $non_null_array_range ( $ptr $ctype Int ) $ptrset)
(declare-fun $non_null_extent ( $state $ptr ) $ptrset)
(declare-fun $non_null_set_singleton ( $ptr ) $ptrset)
(declare-fun $null ( ) $ptr)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $ptrset)
(declare-fun $owns_set_field ( $ctype ) $field)
(declare-fun $path ( $state $ptr ) $field)
(declare-fun $ptr ( $ctype Int ) $ptr)
(declare-fun $ptr_level ( $ctype ) Int)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_int ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $ptrclub.addMember ( $ptr $ptrclub ) $ptrclub)
(declare-fun $ptrclub.bound ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.compare ( $ptr $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.construct ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $ptrclub)
(declare-fun $ptrclub.empty ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.members ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $pure_post_level ( $pure_function ) Int)
(declare-fun $read_ptr_m ( $state $ptr $ctype ) $ptr)
(declare-fun $read_version ( $state $ptr ) $version)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $rec_fetch ( $record $field ) Int)
(declare-fun $rec_update ( $record $field Int ) $record)
(declare-fun $rec_zero ( ) $record)
(declare-fun $record_field_int_kind ( $field ) $ctype)
(declare-fun $ref ( $ptr ) Int)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $release ( $state $state $ptr $ptr ) $state)
(declare-fun $released ( $state $ptr $ptr ) $status)
(declare-fun $s ( ) $state)
(declare-fun $s@0 ( ) $state)
(declare-fun $s@1 ( ) $state)
(declare-fun $s@2 ( ) $state)
(declare-fun $select.flow.data ( $memory_t $ptr ) $flowdata)
(declare-fun $select.flow.label ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.flow.meta ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.mem ( $memory_t $ptr ) Int)
(declare-fun $select.sec.pc ( $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.sm ( $statusmap_t $ptr ) $status)
(declare-fun $select.tm ( $typemap_t $ptr ) $type_state)
(declare-fun $select_range.mem ( $memory_t $ptr Int ) Int)
(declare-fun $set_cardinality ( $ptrset ) Int)
(declare-fun $set_difference ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_empty ( ) $ptrset)
(declare-fun $set_intersection ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_singleton ( $ptr ) $ptrset)
(declare-fun $set_union ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_universe ( ) $ptrset)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $span ( $ptr ) $ptrset)
(declare-fun $spec_ptr_to ( $ctype ) $ctype)
(declare-fun $st ( $state $ptr ) $status)
(declare-fun $st_owner ( $status ) $ptr)
(declare-fun $st_timestamp ( $status ) Int)
(declare-fun $statusmap ( $state ) $statusmap_t)
(declare-fun $store.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr Bool ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $store.flow.data ( $memory_t $ptr $flowdata ) $memory_t)
(declare-fun $store.flow.label ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.flow.meta ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.mem ( $memory_t $ptr Int ) $memory_t)
(declare-fun $store.sm ( $statusmap_t $ptr $status ) $statusmap_t)
(declare-fun $store.tm ( $typemap_t $ptr $type_state ) $typemap_t)
(declare-fun $struct_extent ( $ptr ) $ptrset)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $take_over ( $state $ptr $ptr ) $state)
(declare-fun $taken_over ( $state $ptr $ptr ) $status)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $ts ( $state $ptr ) $type_state)
(declare-fun $ts_active_option ( $type_state ) $field)
(declare-fun $ts_emb ( $type_state ) $ptr)
(declare-fun $ts_path ( $type_state ) $field)
(declare-fun $typ ( $ptr ) $ctype)
(declare-fun $typemap ( $state ) $typemap_t)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $unchecked_sbits ( Int Int ) Int)
(declare-fun $unchecked_ubits ( Int Int ) Int)
(declare-fun $unchk_add ( $ctype Int Int ) Int)
(declare-fun $unptr_to ( $ctype ) $ctype)
(declare-fun $update_int ( $state $ptr Int ) $state)
(declare-fun $ver_domain ( $version ) $ptrset)
(declare-fun $volatile_span ( $state $ptr ) $ptrset)
(declare-fun $vs_base_ref ( $struct ) Int)
(declare-fun $vs_ctor ( $state $ptr ) $struct)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun $zero.$map_t..$ptr_to..^^void.^^bool ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@state_t ( ) $ctype)
(declare-fun ^$@struct ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^$@thread_id_t ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^f4 ( ) $ctype)
(declare-fun ^^f8 ( ) $ctype)
(declare-fun ^^i1 ( ) $ctype)
(declare-fun ^^i2 ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^i8 ( ) $ctype)
(declare-fun ^^mathint ( ) $ctype)
(declare-fun ^^root_emb ( ) $ctype)
(declare-fun ^^u1 ( ) $ctype)
(declare-fun ^^u2 ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun ^A ( ) $ctype)
(declare-fun A.$owns ( ) $field)
(declare-fun A.x ( ) $field)
(declare-fun call0formal@@l@0 ( ) $ptr)
(declare-fun call0formal@p@0 ( ) $ptr)
(declare-fun cf@classifier@default ( ) $pure_function)
(declare-fun l@public ( ) $label)
(declare-fun MapRead$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr ) Bool)
(declare-fun MapWrite$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr Bool ) $@Map@@$ptr@To@Bool@@)
(declare-fun P@_this_ ( ) Int)

;Predicates
(declare-fun $@condition ( ) Bool)
(declare-fun $@condition_$0 ( ) Bool)
(declare-fun $account_claim ( $state $ptr $ptr ) Bool)
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $claimed_closed ( $state $ptr ) Bool)
(declare-fun $claims_claim ( $ptr $ptr ) Bool)
(declare-fun $claims_obj ( $ptr $ptr ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $closed_is_transitive ( $state ) Bool)
(declare-fun $domain_updated_at ( $state $state $ptr $ptrset ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $dont_instantiate_state ( $state ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $map_t..$ptr_to..^^void.^^bool ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $extent_zero ( $state $ptr ) Bool)
(declare-fun $file_name_is ( Int $token ) Bool)
(declare-fun $forall_inv2_when_closed ( $state $state ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $full_stop_ext ( $token $state ) Bool)
(declare-fun $function_arg_type ( $pure_function Int $ctype ) Bool)
(declare-fun $function_entry ( $state ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_post_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_volatile_owns_set ( $ctype ) Bool)
(declare-fun $in_claim_domain ( $ptr $ptr ) Bool)
(declare-fun $in_domain ( $state $ptr $ptr ) Bool)
(declare-fun $in_domain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_extent_of ( $state $ptr $ptr ) Bool)
(declare-fun $in_full_extent_of ( $ptr $ptr ) Bool)
(declare-fun $in_range ( Int Int Int ) Bool)
(declare-fun $in_range_phys_ptr ( Int ) Bool)
(declare-fun $in_range_sbits ( Int Int ) Bool)
(declare-fun $in_range_spec_ptr ( Int ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $in_range_ubits ( Int Int ) Bool)
(declare-fun $in_some_owns ( $ptr ) Bool)
(declare-fun $in_vdomain ( $state $ptr $ptr ) Bool)
(declare-fun $in_vdomain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_wrapped_domain ( $state $ptr ) Bool)
(declare-fun $in_writes_at ( Int $ptr ) Bool)
(declare-fun $instantiate_bool ( Bool ) Bool)
(declare-fun $instantiate_int ( Int ) Bool)
(declare-fun $instantiate_ptr ( $ptr ) Bool)
(declare-fun $instantiate_ptrset ( $ptrset ) Bool)
(declare-fun $inv ( $state $ptr $ctype ) Bool)
(declare-fun $inv_is_approved_by_ptr ( $state $state $ptr $ptr $field ) Bool)
(declare-fun $inv_lab ( $state $ptr $label ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2_when_closed ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2nt ( $state $state $ptr ) Bool)
(declare-fun $invok_state ( $state ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_approved_by ( $ctype $field $field ) Bool)
(declare-fun $is_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_array_vol_or_nonvol ( $state $ptr $ctype Int Bool ) Bool)
(declare-fun $is_arraytype ( $ctype ) Bool)
(declare-fun $is_base_field ( $field ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_composite ( $ctype ) Bool)
(declare-fun $is_domain_root ( $state $ptr ) Bool)
(declare-fun $is_fnptr_type ( $ctype ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_non_primitive ( $ctype ) Bool)
(declare-fun $is_object_root ( $state $ptr ) Bool)
(declare-fun $is_owner_approved ( $ctype $field ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_primitive_ch ( $ctype ) Bool)
(declare-fun $is_primitive_embedded_array ( $field Int ) Bool)
(declare-fun $is_primitive_embedded_volatile_array ( $field Int $ctype ) Bool)
(declare-fun $is_primitive_non_volatile_field ( $field ) Bool)
(declare-fun $is_primitive_volatile_field ( $field ) Bool)
(declare-fun $is_record_field ( $ctype $field $ctype ) Bool)
(declare-fun $is_record_type ( $ctype ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $is_volatile ( $state $ptr ) Bool)
(declare-fun $local_value_is ( $state $token $token Int $ctype ) Bool)
(declare-fun $local_value_is_ptr ( $state $token $token $ptr $ctype ) Bool)
(declare-fun $mem_eq ( $state $state $ptr ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $nested ( $state $ptr ) Bool)
(declare-fun $nested_in ( $state $ptr $ptr ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $position_marker ( ) Bool)
(declare-fun $post_unwrap ( $state $state ) Bool)
(declare-fun $program_entry_point ( $state ) Bool)
(declare-fun $program_entry_point_ch ( $state ) Bool)
(declare-fun $rec_base_eq ( Int Int ) Bool)
(declare-fun $rec_eq ( $record $record ) Bool)
(declare-fun $seclbl.bot ( ) Bool)
(declare-fun $seclbl.leq ( Bool Bool ) Bool)
(declare-fun $seclbl.top ( ) Bool)
(declare-fun $select.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr ) Bool)
(declare-fun $sequential ( $state $state $ptr $ctype ) Bool)
(declare-fun $set_disjoint ( $ptrset $ptrset ) Bool)
(declare-fun $set_eq ( $ptrset $ptrset ) Bool)
(declare-fun $set_in ( $ptr $ptrset ) Bool)
(declare-fun $set_in0 ( $ptr $ptrset ) Bool)
(declare-fun $set_in2 ( $ptr $ptrset ) Bool)
(declare-fun $simple_index ( $ptr $ptr ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $st_closed ( $status ) Bool)
(declare-fun $st_eq ( $state $state $ptr ) Bool)
(declare-fun $state_nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $state_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $stuttering_pre ( $state $ptr ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $thread_local2 ( $state $ptr $ctype ) Bool)
(declare-fun $thread_owned_or_even_mutable ( $state $ptr ) Bool)
(declare-fun $timestamp_is_now ( $state $ptr ) Bool)
(declare-fun $timestamp_post ( $state $state ) Bool)
(declare-fun $ts_eq ( $state $state $ptr ) Bool)
(declare-fun $ts_is_volatile ( $type_state ) Bool)
(declare-fun $ts_typed ( $type_state ) Bool)
(declare-fun $typed ( $state $ptr ) Bool)
(declare-fun $typed2 ( $state $ptr $ctype ) Bool)
(declare-fun $unwrap_post ( $state $state $ptr $ptr ) Bool)
(declare-fun $valid_claim ( $state $ptr ) Bool)
(declare-fun $wrapped ( $state $ptr $ctype ) Bool)
(declare-fun is_active_ptrclub ( $ptrclub ) Bool)

;Axioms
   (assert (! $position_marker :named ax_0))
   (assert (! $seclbl.top :named ax_1))
   (assert (! ($file_name_is 1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c) :named ax_2))
   (assert (! ($full_stop $s) :named ax_3))
   (assert (! ($function_arg_type cf@classifier@default 0 ($map_t ($ptr_to ^^void) ^^bool)) :named ax_4))
   (assert (! ($function_entry $s) :named ax_5))
   (assert (! ($good_state ($vs_state $struct_zero)) :named ax_6))
   (assert (! ($good_state_ext $@tok$1^13.1 $s) :named ax_7))
   (assert (! ($has_volatile_owns_set ^^claim) :named ax_8))
   (assert (! ($in_range_spec_ptr $me_ref) :named ax_9))
   (assert (! ($in_range_spec_ptr 0) :named ax_10))
   (assert (! ($is_base_field A.$owns) :named ax_11))
   (assert (! ($is_base_field A.x) :named ax_12))
   (assert (! ($is_claimable ^^claim) :named ax_13))
   (assert (! ($is_composite ^^claim) :named ax_14))
   (assert (! ($is_composite ^^root_emb) :named ax_15))
   (assert (! ($is_composite ^A) :named ax_16))
   (assert (! ($is_math_type ^$@thread_id) :named ax_17))
   (assert (! ($is_primitive ^$@ptrset) :named ax_18))
   (assert (! ($is_primitive ^$@state_t) :named ax_19))
   (assert (! ($is_primitive ^$@thread_id) :named ax_20))
   (assert (! ($is_primitive ^^bool) :named ax_21))
   (assert (! ($is_primitive ^^f4) :named ax_22))
   (assert (! ($is_primitive ^^f8) :named ax_23))
   (assert (! ($is_primitive ^^i1) :named ax_24))
   (assert (! ($is_primitive ^^i2) :named ax_25))
   (assert (! ($is_primitive ^^i4) :named ax_26))
   (assert (! ($is_primitive ^^i8) :named ax_27))
   (assert (! ($is_primitive ^^mathint) :named ax_28))
   (assert (! ($is_primitive ^^u1) :named ax_29))
   (assert (! ($is_primitive ^^u2) :named ax_30))
   (assert (! ($is_primitive ^^u4) :named ax_31))
   (assert (! ($is_primitive ^^u8) :named ax_32))
   (assert (! ($is_primitive ^^void) :named ax_33))
   (assert (! ($is_primitive_non_volatile_field A.$owns) :named ax_34))
   (assert (! ($is_primitive_volatile_field A.x) :named ax_35))
   (assert (! ($is_threadtype ^$@thread_id_t) :named ax_36))
   (assert (! ($local_value_is $s $@tok$1^13.1 $@loc._this_ ($ptr_to_int ($ptr ^A P@_this_)) $@distTp1) :named ax_37))
   (assert (! ($local_value_is_ptr $s $@tok$1^13.1 $@loc._this_ ($ptr ^A P@_this_) $@distTp1) :named ax_38))
   (assert (! (= $@distTp1 ($ptr_to ^A)) :named ax_39))
   (assert (! (= $@distTp2 ($spec_ptr_to ^^claim)) :named ax_40))
   (assert (! (= $@distTp3 ($ptr_to ^^i4)) :named ax_41))
   (assert (! (= $@wrTime$1^13.1 ($current_timestamp $s)) :named ax_42))
   (assert (! (= $arch_spec_ptr_start $max.u8) :named ax_43))
   (assert (! (= $arch_spec_ptr_start ($unchecked ^^u8 (- 1))) :named ax_44))
   (assert (! (= $arch_spec_ptr_start (+ (* 281474976710656 65536) (- 1))) :named ax_45))
   (assert (! (= $max.i4 (+ 2147483648 (- 1))) :named ax_46))
   (assert (! (= $max.i8 (+ (* 281474976710656 32768) (- 1))) :named ax_47))
   (assert (! (= $max.u4 ($unchecked ^^u4 (- 1))) :named ax_48))
   (assert (! (= $max.u4 (+ 4294967296 (- 1))) :named ax_49))
   (assert (! (= $me ($ptr ^$@thread_id_t $me_ref)) :named ax_50))
   (assert (! (= $min.i8 (* (- 1) (* 281474976710656 32768))) :named ax_51))
   (assert (! (= $min.i8 (+ 0 $min.i8)) :named ax_52))
   (assert (! (= $null ($ptr ^^void 0)) :named ax_53))
   (assert (! (= $zero.$map_t..$ptr_to..^^void.^^bool ($int_to_map_t..ptr_to..^^void.^^bool 0)) :named ax_54))
   (assert (! (= (- (* (* (* 65536 65536) 65536) 32768) 1) $max.i8) :named ax_55))
   (assert (! (= (- (* (* (* 65536 65536) 65536) 65536) 1) $max.u8) :named ax_56))
   (assert (! (= (- (* 65536 32768) 1) $max.i4) :named ax_57))
   (assert (! (= (- (* 65536 65536) 1) $max.u4) :named ax_58))
   (assert (! (= (- 0 (* (* (* 65536 65536) 65536) 32768)) $min.i8) :named ax_59))
   (assert (! (= (- 1) (* (- 1) 1)) :named ax_60))
   (assert (! (= (- 128) $min.i1) :named ax_61))
   (assert (! (= (- 2147483648) $min.i4) :named ax_62))
   (assert (! (= (- 2147483648) (* (- 1) 2147483648)) :named ax_63))
   (assert (! (= (- 2147483648) (+ 0 (- 2147483648))) :named ax_64))
   (assert (! (= (- 32768) $min.i2) :named ax_65))
   (assert (! (= ($ptr ^^claim 0) $no_claim) :named ax_66))
   (assert (! (= (= true $@bf_132) (and (not $is_unwrap_check) (not $is_stuttering_check))) :named ax_67))
   (assert (! (= (= true $@bf_265) (forall ((|f_$8| $pure_function))(!(< ($frame_level f_$8) $current_frame_level):pattern ( ($frame_level f_$8))  ))) :named ax_68))
   (assert (! (= (= true $@bf_267) (forall ((|f_$10| $pure_function))(!(< ($pure_post_level f_$10) $current_frame_level):pattern ( ($frame_level f_$10))  ))) :named ax_69))
   (assert (! (= (and (not $is_unwrap_check) (not $is_stuttering_check)) (and (not $is_unwrap_check) (not $is_stuttering_check))) :named ax_70))
   (assert (! (= ^^f4 ($as_in_range_t ^^f4)) :named ax_71))
   (assert (! (= ^^f8 ($as_in_range_t ^^f8)) :named ax_72))
   (assert (! (= ^^i1 ($as_in_range_t ^^i1)) :named ax_73))
   (assert (! (= ^^i2 ($as_in_range_t ^^i2)) :named ax_74))
   (assert (! (= ^^i4 ($as_in_range_t ^^i4)) :named ax_75))
   (assert (! (= ^^i8 ($as_in_range_t ^^i8)) :named ax_76))
   (assert (! (= ^^u1 ($as_in_range_t ^^u1)) :named ax_77))
   (assert (! (= ^^u2 ($as_in_range_t ^^u2)) :named ax_78))
   (assert (! (= ^^u4 ($as_in_range_t ^^u4)) :named ax_79))
   (assert (! (= ^^u8 ($as_in_range_t ^^u8)) :named ax_80))
   (assert (! (= ^A ($field_parent_type A.$owns)) :named ax_81))
   (assert (! (= ^A ($field_parent_type A.x)) :named ax_82))
   (assert (! (= 0 ($ptr_level $memory_allocator_type)) :named ax_83))
   (assert (! (= 0 ($ptr_level ^$@ptrset)) :named ax_84))
   (assert (! (= 0 ($ptr_level ^$@state_t)) :named ax_85))
   (assert (! (= 0 ($ptr_level ^$@struct)) :named ax_86))
   (assert (! (= 0 ($ptr_level ^$@thread_id_t)) :named ax_87))
   (assert (! (= 0 ($ptr_level ^^bool)) :named ax_88))
   (assert (! (= 0 ($ptr_level ^^claim)) :named ax_89))
   (assert (! (= 0 ($ptr_level ^^f4)) :named ax_90))
   (assert (! (= 0 ($ptr_level ^^f8)) :named ax_91))
   (assert (! (= 0 ($ptr_level ^^i1)) :named ax_92))
   (assert (! (= 0 ($ptr_level ^^i2)) :named ax_93))
   (assert (! (= 0 ($ptr_level ^^i4)) :named ax_94))
   (assert (! (= 0 ($ptr_level ^^i8)) :named ax_95))
   (assert (! (= 0 ($ptr_level ^^mathint)) :named ax_96))
   (assert (! (= 0 ($ptr_level ^^root_emb)) :named ax_97))
   (assert (! (= 0 ($ptr_level ^^u1)) :named ax_98))
   (assert (! (= 0 ($ptr_level ^^u2)) :named ax_99))
   (assert (! (= 0 ($ptr_level ^^u4)) :named ax_100))
   (assert (! (= 0 ($ptr_level ^^u8)) :named ax_101))
   (assert (! (= 0 ($ptr_level ^^void)) :named ax_102))
   (assert (! (= 0 ($ptr_level ^A)) :named ax_103))
   (assert (! (= 0 ($ptr_to_i1 $null)) :named ax_104))
   (assert (! (= 0 ($ptr_to_i2 $null)) :named ax_105))
   (assert (! (= 0 ($ptr_to_i4 $null)) :named ax_106))
   (assert (! (= 0 ($ptr_to_i8 $null)) :named ax_107))
   (assert (! (= 0 ($ptr_to_u1 $null)) :named ax_108))
   (assert (! (= 0 ($ptr_to_u2 $null)) :named ax_109))
   (assert (! (= 0 ($ptr_to_u4 $null)) :named ax_110))
   (assert (! (= 0 ($ptr_to_u8 $null)) :named ax_111))
   (assert (! (= 0 ($set_cardinality $set_empty)) :named ax_112))
   (assert (! (= 0 ($unchecked ^^u4 (+ $max.u4 1))) :named ax_113))
   (assert (! (= 0 ($unchecked ^^u8 (+ $arch_spec_ptr_start 1))) :named ax_114))
   (assert (! (= 1 ($_pow2 0)) :named ax_115))
   (assert (! (= 1 ($sizeof ^$@ptrset)) :named ax_116))
   (assert (! (= 1 ($sizeof ^$@thread_id_t)) :named ax_117))
   (assert (! (= 1 ($sizeof ^^i1)) :named ax_118))
   (assert (! (= 1 ($sizeof ^^u1)) :named ax_119))
   (assert (! (= 1024 ($_pow2 10)) :named ax_120))
   (assert (! (= 1048576 ($_pow2 20)) :named ax_121))
   (assert (! (= 1073741824 ($_pow2 30)) :named ax_122))
   (assert (! (= 1099511627776 ($_pow2 40)) :named ax_123))
   (assert (! (= 1125899906842624 ($_pow2 50)) :named ax_124))
   (assert (! (= 1152921504606846976 ($_pow2 60)) :named ax_125))
   (assert (! (= 127 $max.i1) :named ax_126))
   (assert (! (= 128 ($_pow2 7)) :named ax_127))
   (assert (! (= 131072 ($_pow2 17)) :named ax_128))
   (assert (! (= 134217728 ($_pow2 27)) :named ax_129))
   (assert (! (= 137438953472 ($_pow2 37)) :named ax_130))
   (assert (! (= 140737488355328 ($_pow2 47)) :named ax_131))
   (assert (! (= 144115188075855872 ($_pow2 57)) :named ax_132))
   (assert (! (= 16 ($_pow2 4)) :named ax_133))
   (assert (! (= 16384 ($_pow2 14)) :named ax_134))
   (assert (! (= 16777216 ($_pow2 24)) :named ax_135))
   (assert (! (= 17179869184 ($_pow2 34)) :named ax_136))
   (assert (! (= 17592186044416 ($_pow2 44)) :named ax_137))
   (assert (! (= 18014398509481984 ($_pow2 54)) :named ax_138))
   (assert (! (= 2 ($_pow2 1)) :named ax_139))
   (assert (! (= 2 ($sizeof ^^i2)) :named ax_140))
   (assert (! (= 2 ($sizeof ^^u2)) :named ax_141))
   (assert (! (= 2048 ($_pow2 11)) :named ax_142))
   (assert (! (= 2097152 ($_pow2 21)) :named ax_143))
   (assert (! (= 2147483648 ($_pow2 31)) :named ax_144))
   (assert (! (= 2199023255552 ($_pow2 41)) :named ax_145))
   (assert (! (= 2251799813685248 ($_pow2 51)) :named ax_146))
   (assert (! (= 2305843009213693952 ($_pow2 61)) :named ax_147))
   (assert (! (= 255 $max.u1) :named ax_148))
   (assert (! (= 256 ($_pow2 8)) :named ax_149))
   (assert (! (= 262144 ($_pow2 18)) :named ax_150))
   (assert (! (= 268435456 ($_pow2 28)) :named ax_151))
   (assert (! (= 274877906944 ($_pow2 38)) :named ax_152))
   (assert (! (= 281474976710656 ($_pow2 48)) :named ax_153))
   (assert (! (= 281474976710656 (* 4294967296 65536)) :named ax_154))
   (assert (! (= 288230376151711744 ($_pow2 58)) :named ax_155))
   (assert (! (= 32 ($_pow2 5)) :named ax_156))
   (assert (! (= 32767 $max.i2) :named ax_157))
   (assert (! (= 32768 ($_pow2 15)) :named ax_158))
   (assert (! (= 33554432 ($_pow2 25)) :named ax_159))
   (assert (! (= 34359738368 ($_pow2 35)) :named ax_160))
   (assert (! (= 35184372088832 ($_pow2 45)) :named ax_161))
   (assert (! (= 36028797018963968 ($_pow2 55)) :named ax_162))
   (assert (! (= 4 ($_pow2 2)) :named ax_163))
   (assert (! (= 4 ($sizeof ^^f4)) :named ax_164))
   (assert (! (= 4 ($sizeof ^^i4)) :named ax_165))
   (assert (! (= 4 ($sizeof ^^u4)) :named ax_166))
   (assert (! (= 4 ($sizeof ^A)) :named ax_167))
   (assert (! (= 4096 ($_pow2 12)) :named ax_168))
   (assert (! (= 4194304 ($_pow2 22)) :named ax_169))
   (assert (! (= 4294967296 ($_pow2 32)) :named ax_170))
   (assert (! (= 4398046511104 ($_pow2 42)) :named ax_171))
   (assert (! (= 4503599627370496 ($_pow2 52)) :named ax_172))
   (assert (! (= 4611686018427387904 ($_pow2 62)) :named ax_173))
   (assert (! (= 512 ($_pow2 9)) :named ax_174))
   (assert (! (= 524288 ($_pow2 19)) :named ax_175))
   (assert (! (= 536870912 ($_pow2 29)) :named ax_176))
   (assert (! (= 549755813888 ($_pow2 39)) :named ax_177))
   (assert (! (= 562949953421312 ($_pow2 49)) :named ax_178))
   (assert (! (= 576460752303423488 ($_pow2 59)) :named ax_179))
   (assert (! (= 64 ($_pow2 6)) :named ax_180))
   (assert (! (= 65535 $max.u2) :named ax_181))
   (assert (! (= 65536 ($_pow2 16)) :named ax_182))
   (assert (! (= 67108864 ($_pow2 26)) :named ax_183))
   (assert (! (= 68719476736 ($_pow2 36)) :named ax_184))
   (assert (! (= 70368744177664 ($_pow2 46)) :named ax_185))
   (assert (! (= 72057594037927936 ($_pow2 56)) :named ax_186))
   (assert (! (= 8 $arch_ptr_size) :named ax_187))
   (assert (! (= 8 ($_pow2 3)) :named ax_188))
   (assert (! (= 8 ($sizeof ^^f8)) :named ax_189))
   (assert (! (= 8 ($sizeof ^^i8)) :named ax_190))
   (assert (! (= 8 ($sizeof ^^u8)) :named ax_191))
   (assert (! (= 8192 ($_pow2 13)) :named ax_192))
   (assert (! (= 8388608 ($_pow2 23)) :named ax_193))
   (assert (! (= 8589934592 ($_pow2 33)) :named ax_194))
   (assert (! (= 8796093022208 ($_pow2 43)) :named ax_195))
   (assert (! (= 9007199254740992 ($_pow2 53)) :named ax_196))
   (assert (! (= 9223372036854775808 ($_pow2 63)) :named ax_197))
   (assert (! (= A.$owns ($owns_set_field ^A)) :named ax_198))
   (assert (! (= true $@bf_270) :named ax_199))
   (assert (! (= true $@bf_271) :named ax_200))
   (assert (! (= true $@bf_273) :named ax_201))
   (assert (! (= true $@bf_274) :named ax_202))
   (assert (! (= true $@bf_278) :named ax_203))
   (assert (! (= true $@bf_279) :named ax_204))
   (assert (! (= true $@bf_280) :named ax_205))
   (assert (! (= true ($@bf_252 ^$@thread_id)) :named ax_206))
   (assert (! (forall ((|i| $ptr)(|m| $@Map@@$ptr@To@Bool@@)(|v| Bool))(!(= v (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i v) i)):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i v) i)) :qid map_1_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_207))
   (assert (! (forall ((|v_1| Bool)(|m_1| $@Map@@$ptr@To@Bool@@)(|i_1| $ptr)(|j_1| $ptr))(!(=> (not (= j_1 i_1)) (= (MapRead$$@Map@@$ptr@To@Bool@@$ m_1 j_1) (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_1 v_1) j_1))):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_1 v_1) j_1)) :qid map_2_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_208))
   (assert (! (forall( (|#a_$0| $ptrset) (|#b_$2| $ptrset) (|#o_$4| $ptr))(!(= ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|)) (and ($set_in |#o_$4| |#a_$0|) (not ($set_in |#o_$4| |#b_$2|))))  :weight  0 :pattern ( ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|))))) :named ax_209))
   (assert (! (forall( (|#a_$1| $ptrset) (|#b_$3| $ptrset) (|#o_$5| $ptr))(!(= ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|)) (and ($set_in |#o_$5| |#b_$3|) ($set_in |#o_$5| |#a_$1|)))  :weight  0 :pattern ( ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|))))) :named ax_210))
   (assert (! (forall( (|#a_$3| $ptrset) (|#b_$5| $ptrset))(!(=> (forall( (|#o_$7| $ptr))(!(= ($set_in |#o_$7| |#b_$5|) ($set_in |#o_$7| |#a_$3|))  :weight  0 :pattern ( ($dont_instantiate |#o_$7|)))) ($set_eq |#a_$3| |#b_$5|))  :weight  0 :pattern ( ($set_eq |#a_$3| |#b_$5|)))) :named ax_211))
   (assert (! (forall( (|#a_$4| $ptrset) (|#b_$6| $ptrset))(!(=> ($set_eq |#a_$4| |#b_$6|) (= |#b_$6| |#a_$4|))  :weight  0 :pattern ( ($set_eq |#a_$4| |#b_$6|)))) :named ax_212))
   (assert (! (forall( (|#a| $ptrset) (|#b_$1| $ptrset) (|#o_$3| $ptr))(!(= ($set_in |#o_$3| ($set_union |#a| |#b_$1|)) (or ($set_in |#o_$3| |#b_$1|) ($set_in |#o_$3| |#a|)))  :weight  0 :pattern ( ($set_in |#o_$3| ($set_union |#a| |#b_$1|))))) :named ax_213))
   (assert (! (forall( (|#l_$2| $ptr) (|#p_$16| $ptr))(= ($set_in |#p_$16| ($span |#l_$2|)) ($set_in |#p_$16| ($span |#l_$2|)))) :named ax_214))
   (assert (! (forall( (|#l_$3| $ptr) (|#p_$18| $ptr))(= ($set_in |#p_$18| ($struct_extent |#l_$3|)) ($set_in |#p_$18| ($full_extent |#l_$3|)))) :named ax_215))
   (assert (! (forall( (|#n_$0| $ctype))(!(= ($unptr_to ($spec_ptr_to |#n_$0|)) |#n_$0|)  :pattern ( ($spec_ptr_to |#n_$0|)))) :named ax_216))
   (assert (! (forall( (|#n_$1| $ctype))(!(= ($sizeof ($ptr_to |#n_$1|)) $arch_ptr_size)  :pattern ( ($ptr_to |#n_$1|)))) :named ax_217))
   (assert (! (forall( (|#n_$2| $ctype))(!(= ($sizeof ($ptr_to |#n_$2|)) $arch_ptr_size)  :pattern ( ($spec_ptr_to |#n_$2|)))) :named ax_218))
   (assert (! (forall( (|#n_$3| $ctype))(!(= ($ptr_level ($ptr_to |#n_$3|)) (+ ($ptr_level |#n_$3|) 17))  :pattern ( ($ptr_to |#n_$3|)))) :named ax_219))
   (assert (! (forall( (|#n_$4| $ctype))(!(= ($ptr_level ($spec_ptr_to |#n_$4|)) (+ ($ptr_level |#n_$4|) 31))  :pattern ( ($spec_ptr_to |#n_$4|)))) :named ax_220))
   (assert (! (forall( (|#n_$5| $ctype))(!($is_primitive ($ptr_to |#n_$5|))  :pattern ( ($ptr_to |#n_$5|)))) :named ax_221))
   (assert (! (forall( (|#n_$6| $ctype))(!($is_primitive ($spec_ptr_to |#n_$6|))  :pattern ( ($spec_ptr_to |#n_$6|)))) :named ax_222))
   (assert (! (forall( (|#n_$7| $ctype))(!(=> ($is_primitive |#n_$7|) (not ($is_claimable |#n_$7|)))  :pattern ( ($is_primitive |#n_$7|)))) :named ax_223))
   (assert (! (forall( (|#n_$8| $ctype))(!(=> ($is_claimable |#n_$8|) ($is_composite |#n_$8|))  :pattern ( ($is_claimable |#n_$8|)))) :named ax_224))
   (assert (! (forall( (|#n| $ctype))(!(= ($unptr_to ($ptr_to |#n|)) |#n|)  :pattern ( ($ptr_to |#n|)))) :named ax_225))
   (assert (! (forall( (|#o_$0| $ptr))(!(not ($set_in |#o_$0| $set_empty))  :weight  0 :pattern ( ($set_in |#o_$0| $set_empty)))) :named ax_226))
   (assert (! (forall( (|#o_$8| $ptr))(!($set_in |#o_$8| $set_universe)  :weight  0 :pattern ( ($set_in |#o_$8| $set_universe)))) :named ax_227))
   (assert (! (forall( (|#o| $ptr) (|#f| $ptr) (|S_$19| $state))(= (and (= ($ts_emb ($ts |S_$19| |#f|)) |#o|) (= $kind_primitive ($kind_of ($typ |#f|)))) (and ($is_primitive_ch ($typ |#f|)) (= ($emb |S_$19| |#f|) |#o|)))) :named ax_228))
   (assert (! (forall( (|#p_$0| $ptr) (|S_$0| $state))(= ($ts_emb ($ts |S_$0| |#p_$0|)) ($ts_emb ($select.tm ($typemap |S_$0|) |#p_$0|)))) :named ax_229))
   (assert (! (forall( (|#p_$1| $ptr) (|S_$1| $state))(= ($ts_path ($ts |S_$1| |#p_$1|)) ($ts_path ($select.tm ($typemap |S_$1|) |#p_$1|)))) :named ax_230))
   (assert (! (forall( (|#p_$11| $ptr) (|S_$25| $state))(= (and ($typed |S_$25| |#p_$11|) (not ($ts_is_volatile ($ts |S_$25| |#p_$11|)))) (and ($typed |S_$25| |#p_$11|) (not ($is_volatile |S_$25| |#p_$11|))))) :named ax_231))
   (assert (! (forall( (|#p_$12| $ptr) (|#l| $ptr) (|S_$32| $state) (|S0| $state))(= (and (and (and (and (and (and (and (and (and (= ($owner |S_$32| |#p_$12|) $me) ($closed |S_$32| |#p_$12|)) ($typed2 |S_$32| |#p_$12| ($typ |#p_$12|))) (not (= $kind_primitive ($kind_of ($typ |#p_$12|))))) ($is_non_primitive ($typ |#p_$12|))) ($typed |S0| |#p_$12|)) (= ($timestamp |S_$32| |#p_$12|) ($current_timestamp |S_$32|))) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) (and (= ($owner |S0| |#p_$12|) |#l|) ($closed |S0| |#p_$12|))) (and (and (and (and (and ($wrapped |S_$32| |#p_$12| ($typ |#p_$12|)) ($typed |S0| |#p_$12|)) ($timestamp_is_now |S_$32| |#p_$12|)) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) ($nested_in |S0| |#p_$12| |#l|)))) :named ax_232))
   (assert (! (forall( (|#p_$13| $ptr) (|#l_$0| $ptr) (|S_$33| $state) (|S0_$0| $state))(= (and (and (and (and (and (and ($wrapped |S_$33| |#p_$13| ($typ |#p_$13|)) ($typed |S0_$0| |#p_$13|)) ($timestamp_is_now |S_$33| |#p_$13|)) ($is_non_primitive ($typ |#p_$13|))) ($set_in |#p_$13| ($owns |S0_$0| |#l_$0|))) ($nested_in |S0_$0| |#p_$13| |#l_$0|)) (=> ($is_claimable ($typ |#p_$13|)) (= ($ref_cnt |S0_$0| |#p_$13|) ($ref_cnt |S_$33| |#p_$13|)))) (and ($unwrap_post |S0_$0| |S_$33| |#l_$0| |#p_$13|) (=> ($is_claimable ($typ |#p_$13|)) (= ($ref_cnt |S0_$0| |#p_$13|) ($ref_cnt |S_$33| |#p_$13|)))))) :named ax_233))
   (assert (! (forall( (|#p_$14| $ptr) (|#l_$1| $ptr) (|S_$34| $state))(= ($set_in |#p_$14| ($owns |S_$34| |#l_$1|)) ($set_in |#p_$14| ($owns |S_$34| |#l_$1|)))) :named ax_234))
   (assert (! (forall( (|#p_$17| $ptr))(= ($full_extent |#p_$17|) ($full_extent |#p_$17|))) :named ax_235))
   (assert (! (forall( (|#p_$19| $ptr) (|#t_$7| $ctype))(!(= (= ($typ |#p_$19|) |#t_$7|) ($is |#p_$19| |#t_$7|))  :weight  0)) :named ax_236))
   (assert (! (forall( (|#p_$20| $ptr) (|#t_$8| $ctype))(!(=> ($is |#p_$20| |#t_$8|) (= ($ptr |#t_$8| ($ref |#p_$20|)) |#p_$20|))  :pattern ( ($is |#p_$20| |#t_$8|)))) :named ax_237))
   (assert (! (forall( (|#p_$21| $ptr) (|t_$20| $ctype))(!(= ($ptr ^$@ptrset ($ghost_ref |#p_$21| ($owns_set_field |t_$20|))) ($dot |#p_$21| ($owns_set_field |t_$20|)))  :pattern ( ($dot |#p_$21| ($owns_set_field |t_$20|))))) :named ax_238))
   (assert (! (forall( (|#p_$32| $ptr) (|#i_$0| Int) (|#t_$16| $ctype))(!(and (= ($ptr |#t_$16| (+ ($ref |#p_$32|) (* |#i_$0| ($sizeof |#t_$16|)))) ($idx |#p_$32| |#i_$0| |#t_$16|)) ($extent_hint ($idx |#p_$32| |#i_$0| |#t_$16|) |#p_$32|))  :pattern ( ($idx |#p_$32| |#i_$0| |#t_$16|)))) :named ax_239))
   (assert (! (forall( (|#p_$34| $ptr) (|#s1_$12| $state) (|#s2_$10| $state))(!(= (and (= ($mem |#s2_$10| ($dot |#p_$34| A.x)) ($mem |#s1_$12| ($dot |#p_$34| A.x))) (= ($mem |#s2_$10| ($dot |#p_$34| A.$owns)) ($mem |#s1_$12| ($dot |#p_$34| A.$owns)))) ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^A))  :pattern ( ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^A)))) :named ax_240))
   (assert (! (forall( (|#p_$35| $ptr) (|#s1_$13| $state) (|#s2_$11| $state))(!(= ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^A) (= ($mem |#s2_$11| ($dot |#p_$35| A.$owns)) ($mem |#s1_$13| ($dot |#p_$35| A.$owns))))  :pattern ( ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^A)))) :named ax_241))
   (assert (! (forall( (|#p_$36| $ptr))(!(=> ($is |#p_$36| ^A) (and (= ($ptr ^$@ptrset ($ghost_ref |#p_$36| A.$owns)) ($dot |#p_$36| A.$owns)) ($extent_hint ($dot |#p_$36| A.$owns) |#p_$36|)))  :pattern ( ($dot |#p_$36| A.$owns)))) :named ax_242))
   (assert (! (forall( (|#p_$37| $ptr) (|#s_$1| $state))(!(=> (and ($typed |#s_$1| |#p_$37|) ($is |#p_$37| ^A)) (and (and (= A.$owns ($path |#s_$1| ($dot |#p_$37| A.$owns))) (and ($typed2 |#s_$1| ($dot |#p_$37| A.$owns) ^$@ptrset) (= ($emb |#s_$1| ($dot |#p_$37| A.$owns)) |#p_$37|))) (not ($is_volatile |#s_$1| ($dot |#p_$37| A.$owns)))))  :pattern ( ($select.tm ($typemap |#s_$1|) ($dot |#p_$37| A.$owns))) :pattern ( ($select.sm ($statusmap |#s_$1|) ($dot |#p_$37| A.$owns))))) :named ax_243))
   (assert (! (forall( (|#p_$38| $ptr))(!(=> ($is |#p_$38| ^A) (and (= ($ptr ^^i4 (+ ($ref |#p_$38|) 0)) ($dot |#p_$38| A.x)) ($extent_hint ($dot |#p_$38| A.x) |#p_$38|)))  :pattern ( ($dot |#p_$38| A.x)))) :named ax_244))
   (assert (! (forall( (|#p_$39| $ptr) (|#s_$2| $state))(!(=> (and ($typed |#s_$2| |#p_$39|) ($is |#p_$39| ^A)) (and (and (= A.x ($path |#s_$2| ($dot |#p_$39| A.x))) (and ($typed2 |#s_$2| ($dot |#p_$39| A.x) ^^i4) (= ($emb |#s_$2| ($dot |#p_$39| A.x)) |#p_$39|))) ($is_volatile |#s_$2| ($dot |#p_$39| A.x))))  :pattern ( ($select.tm ($typemap |#s_$2|) ($dot |#p_$39| A.x))) :pattern ( ($select.sm ($statusmap |#s_$2|) ($dot |#p_$39| A.x))))) :named ax_245))
   (assert (! (forall( (|#p_$40| $ptr))(!(not ($in_writes_at $@wrTime$1^13.1 |#p_$40|))  :pattern ( ($in_writes_at $@wrTime$1^13.1 |#p_$40|)))) :named ax_246))
   (assert (! (forall( (|#p2_$0| $ptr) (|#p1_$0| $ptr))(= ($set_in |#p1_$0| ($full_extent |#p2_$0|)) ($set_in |#p1_$0| ($full_extent |#p2_$0|)))) :named ax_247))
   (assert (! (forall( (|#p2| $ptr) (|#p1| $ptr) (|S_$22| $state))(= ($set_in |#p1| ($extent |S_$22| |#p2|)) ($set_in |#p1| ($extent |S_$22| |#p2|)))) :named ax_248))
   (assert (! (forall( (|#q_$2| $ptr) (|#r_$16| Int))(!(= (or (or (= ($ptr ^A |#r_$16|) |#q_$2|) (= ($dot ($ptr ^A |#r_$16|) A.$owns) |#q_$2|)) (= ($dot ($ptr ^A |#r_$16|) A.x) |#q_$2|)) ($set_in |#q_$2| ($full_extent ($ptr ^A |#r_$16|))))  :pattern ( ($set_in |#q_$2| ($full_extent ($ptr ^A |#r_$16|)))))) :named ax_249))
   (assert (! (forall( (|#q_$5| $ptr) (|#r_$19| Int))(!(= (or (or (= ($ptr ^A |#r_$19|) |#q_$5|) (= ($dot ($ptr ^A |#r_$19|) A.$owns) |#q_$5|)) (= ($dot ($ptr ^A |#r_$19|) A.x) |#q_$5|)) ($set_in |#q_$5| ($span ($ptr ^A |#r_$19|))))  :pattern ( ($set_in |#q_$5| ($span ($ptr ^A |#r_$19|)))))) :named ax_250))
   (assert (! (forall( (|#r_$1| $ctype) (|#d_$1| $ctype))(!(= ($ptr_level ($map_t |#r_$1| |#d_$1|)) (+ ($ptr_level |#r_$1|) 23))  :pattern ( ($map_t |#r_$1| |#d_$1|)))) :named ax_251))
   (assert (! (forall( (|#r_$2| $ctype) (|#d_$2| $ctype))(!($is_primitive ($map_t |#r_$2| |#d_$2|))  :pattern ( ($map_t |#r_$2| |#d_$2|)))) :named ax_252))
   (assert (! (forall( (|#r_$3| Int))(!(= (and (<= 0 |#r_$3|) (<= |#r_$3| $arch_spec_ptr_start)) ($in_range_phys_ptr |#r_$3|))  :pattern ( ($in_range_phys_ptr |#r_$3|)))) :named ax_253))
   (assert (! (forall( (|#r_$4| Int))(!(= (or (= 0 |#r_$4|) (> |#r_$4| $arch_spec_ptr_start)) ($in_range_spec_ptr |#r_$4|))  :pattern ( ($in_range_spec_ptr |#r_$4|)))) :named ax_254))
   (assert (! (forall( (|#r_$7| $ptr) (|#o_$1| $ptr))(!(= ($set_in |#o_$1| ($set_singleton |#r_$7|)) (= |#r_$7| |#o_$1|))  :weight  0 :pattern ( ($set_in |#o_$1| ($set_singleton |#r_$7|))))) :named ax_255))
   (assert (! (forall( (|#r_$8| $ptr) (|#o_$2| $ptr))(!(= (and (= |#r_$8| |#o_$2|) (not (= ($ref $null) ($ref |#r_$8|)))) ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|)))  :weight  0 :pattern ( ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|))))) :named ax_256))
   (assert (! (forall( (|#s_$0| $state) (|#q_$4| $ptr) (|#r_$18| Int))(!(=> ($typed |#s_$0| ($ptr ^A |#r_$18|)) (= (or (= ($ts_emb ($ts |#s_$0| |#q_$4|)) ($ptr ^A |#r_$18|)) (= ($ptr ^A |#r_$18|) |#q_$4|)) ($set_in |#q_$4| ($extent |#s_$0| ($ptr ^A |#r_$18|)))))  :pattern ( ($set_in |#q_$4| ($extent |#s_$0| ($ptr ^A |#r_$18|)))))) :named ax_257))
   (assert (! (forall( (|#s| $state) (|#q_$3| $ptr) (|#r_$17| Int))(!(= ($set_in |#q_$3| ($struct_extent ($ptr ^A |#r_$17|))) ($set_in |#q_$3| ($extent |#s| ($ptr ^A |#r_$17|))))  :pattern ( ($set_in |#q_$3| ($extent |#s| ($ptr ^A |#r_$17|)))))) :named ax_258))
   (assert (! (forall( (|#s1_$10| $state) (|#s2_$7| $state) (|#p_$29| $ptr) (|#t_$13| $ctype))(!(=> (and (= ($typ |#p_$29|) |#t_$13|) ($is_arraytype |#t_$13|)) (and (= ($typed |#s2_$7| |#p_$29|) ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)) ($sequential |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)))  :pattern ( ($is_arraytype |#t_$13|) ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)))) :named ax_259))
   (assert (! (forall( (|#s1_$11| $state) (|#s2_$8| $state) (|#p_$33| $ptr))(!(= (and (or (= ($select.mem ($memory |#s2_$8|) ($dot |#p_$33| A.x)) (+ ($select.mem ($memory |#s1_$11|) ($dot |#p_$33| A.x)) 1)) (= ($select.mem ($memory |#s2_$8|) ($dot |#p_$33| A.x)) ($select.mem ($memory |#s1_$11|) ($dot |#p_$33| A.x)))) (and ($typed |#s2_$8| |#p_$33|) ($set_eq ($owns |#s2_$8| |#p_$33|) $set_empty))) ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^A))  :pattern ( ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^A)))) :named ax_260))
   (assert (! (forall( (|#s1_$14| $state) (|#r_$20| Int))(!(= ($mutable |#s1_$14| ($ptr ^A |#r_$20|)) ($extent_mutable |#s1_$14| ($ptr ^A |#r_$20|)))  :pattern ( ($extent_mutable |#s1_$14| ($ptr ^A |#r_$20|))))) :named ax_261))
   (assert (! (forall( (|#s1_$16| $state) (|#r_$22| Int))(!(= (= 0 ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^A |#r_$22|) A.x))) ($extent_zero |#s1_$16| ($ptr ^A |#r_$22|)))  :pattern ( ($extent_zero |#s1_$16| ($ptr ^A |#r_$22|))))) :named ax_262))
   (assert (! (forall( (|#s1_$6| $state) (|#s2_$3| $state) (|#p_$26| $ptr) (|#t_$10| $ctype))(!(= (=> (and ($closed |#s2_$3| |#p_$26|) ($closed |#s1_$6| |#p_$26|)) ($spans_the_same |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|)) ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|))  :weight  0 :pattern ( ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|)))) :named ax_263))
   (assert (! (forall( (|#s1_$8| $state) (|#s2_$5| $state) (|#p_$27| $ptr) (|#t_$11| $ctype))(!(= (and (and (and (= ($read_version |#s2_$5| |#p_$27|) ($read_version |#s1_$8| |#p_$27|)) (= ($owns |#s2_$5| |#p_$27|) ($owns |#s1_$8| |#p_$27|))) (= ($select.tm ($typemap |#s2_$5|) |#p_$27|) ($select.tm ($typemap |#s1_$8|) |#p_$27|))) ($state_spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)) ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|))  :weight  0 :pattern ( ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))) :named ax_264))
   (assert (! (forall( (|#s1_$9| $state) (|#s2_$6| $state) (|#p_$28| $ptr) (|#t_$12| $ctype))(!(= (and (and (= ($select.tm ($typemap |#s2_$6|) |#p_$28|) ($select.tm ($typemap |#s1_$9|) |#p_$28|)) (= ($read_version |#s2_$6| |#p_$28|) ($read_version |#s1_$9| |#p_$28|))) ($state_nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|)) ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|))  :weight  0 :pattern ( ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|)))) :named ax_265))
   (assert (! (forall( (|#s2_$0| $state) (|#s1_$1| $state))(= (forall( (|#p_$9_$0| $ptr))(!($inv2_when_closed |#s1_$1| |#s2_$0| |#p_$9_$0| ($typ |#p_$9_$0|))  :pattern ( ($closed |#s1_$1| |#p_$9_$0|)) :pattern ( ($closed |#s2_$0| |#p_$9_$0|)))) (forall( (|#p_$9| $ptr))(!(or (and (not ($closed |#s2_$0| |#p_$9|)) (not ($closed |#s1_$1| |#p_$9|))) (and ($nonvolatile_spans_the_same |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|)) ($inv2 |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|))))  :pattern ( ($closed |#s1_$1| |#p_$9|)) :pattern ( ($closed |#s2_$0| |#p_$9|)))))) :named ax_266))
   (assert (! (forall( (|#s2_$9| $state) (|#r_$15| Int))(!(= (and ($typed |#s2_$9| ($ptr ^A |#r_$15|)) ($set_eq ($owns |#s2_$9| ($ptr ^A |#r_$15|)) $set_empty)) ($inv_lab |#s2_$9| ($ptr ^A |#r_$15|) l@public))  :pattern ( ($inv_lab |#s2_$9| ($ptr ^A |#r_$15|) l@public)))) :named ax_267))
   (assert (! (forall( (|#t_$0| $ctype) (|#p_$2| $ptr) (|S_$12| $state))(= (and (and (and (and (= ($owner |S_$12| |#p_$2|) $me) ($closed |S_$12| |#p_$2|)) (and ($typed |S_$12| |#p_$2|) ($is |#p_$2| |#t_$0|))) (not (= $kind_primitive ($kind_of |#t_$0|)))) ($is_non_primitive |#t_$0|)) (and (and (and (and (= ($owner |S_$12| |#p_$2|) $me) ($closed |S_$12| |#p_$2|)) ($typed2 |S_$12| |#p_$2| |#t_$0|)) (not (= $kind_primitive ($kind_of |#t_$0|)))) ($is_non_primitive |#t_$0|)))) :named ax_268))
   (assert (! (forall( (|#t_$1| $ctype) (|#p_$3| $ptr) (|S_$16| $state))(= (and ($typed |S_$16| |#p_$3|) ($is |#p_$3| |#t_$1|)) (and ($typed |S_$16| |#p_$3|) ($is |#p_$3| |#t_$1|)))) :named ax_269))
   (assert (! (forall( (|#t_$2| $ctype) (|#p_$4| $ptr) (|S_$17| $state))(= (and (=> (and ($typed |S_$17| |#p_$4|) ($is |#p_$4| |#t_$2|)) ($in_range_phys_ptr ($ref |#p_$4|))) (and ($typed |S_$17| |#p_$4|) ($is |#p_$4| |#t_$2|))) (and (=> ($typed2 |S_$17| |#p_$4| |#t_$2|) ($in_range_phys_ptr ($ref |#p_$4|))) ($typed2 |S_$17| |#p_$4| |#t_$2|)))) :named ax_270))
   (assert (! (forall( (|#t_$3| $ctype) (|#p_$5| $ptr) (|S_$18| $state))(= (and (=> (and ($typed |S_$18| |#p_$5|) ($is |#p_$5| |#t_$3|)) ($in_range_spec_ptr ($ref |#p_$5|))) (and ($typed |S_$18| |#p_$5|) ($is |#p_$5| |#t_$3|))) (and (=> ($typed2 |S_$18| |#p_$5| |#t_$3|) ($in_range_spec_ptr ($ref |#p_$5|))) ($typed2 |S_$18| |#p_$5| |#t_$3|)))) :named ax_271))
   (assert (! (forall( (|#t_$4| $ctype) (|#p_$6| $ptr) (|S_$21| $state))(= (and ($thread_local |S_$21| |#p_$6|) ($is |#p_$6| |#t_$4|)) (and ($thread_local |S_$21| |#p_$6|) ($is |#p_$6| |#t_$4|)))) :named ax_272))
   (assert (! (forall( (|#t_$5| $ctype) (|#b| Int))(!(= ($typ ($ptr |#t_$5| |#b|)) |#t_$5|)  :weight  0)) :named ax_273))
   (assert (! (forall( (|#t_$6| $ctype) (|#b_$0| Int))(!(= ($ref ($ptr |#t_$6| |#b_$0|)) |#b_$0|)  :weight  0)) :named ax_274))
   (assert (! (forall( (|#t| $ctype) (|#p| $ptr))(= ($ptr |#t| ($ref |#p|)) ($ptr |#t| ($ref |#p|)))) :named ax_275))
   (assert (! (forall( (|#x| $ptr) (|#s2_$1| $state) (|#s1_$2| $state))(= (forall( (|#p_$15_$0| $ptr))(!(or (or (and (or (not ($typed |#s2_$1| |#p_$15_$0|)) (not ($typed |#s1_$2| |#p_$15_$0|))) ($in_full_extent_of |#p_$15_$0| |#x|)) (= |#x| |#p_$15_$0|)) ($mem_eq |#s1_$2| |#s2_$1| |#p_$15_$0|))  :pattern ( ($mem |#s2_$1| |#p_$15_$0|)))) (forall( (|#p_$15| $ptr))(!(or (or (and (or (not ($typed |#s2_$1| |#p_$15|)) (not ($typed |#s1_$2| |#p_$15|))) ($set_in |#p_$15| ($full_extent |#x|))) (= |#x| |#p_$15|)) (= ($mem |#s2_$1| |#p_$15|) ($mem |#s1_$2| |#p_$15|)))  :pattern ( ($select.mem ($memory |#s2_$1|) |#p_$15|)))))) :named ax_276))
   (assert (! (forall( (|bits_$0| Int) (|v_$11| Int))(!(and (=> ($in_range_sbits |bits_$0| |v_$11|) (= |v_$11| ($unchecked_sbits |bits_$0| |v_$11|))) ($in_range_sbits |bits_$0| ($unchecked_sbits |bits_$0| |v_$11|)))  :pattern ( ($unchecked_sbits |bits_$0| |v_$11|)))) :named ax_277))
   (assert (! (forall( (|bits_$1| Int) (|v_$12| Int))(!(= (and (<= |v_$12| (- ($_pow2 (- |bits_$1| 1)) 1)) (<= (- 0 ($_pow2 (- |bits_$1| 1))) |v_$12|)) ($in_range_sbits |bits_$1| |v_$12|))  :pattern ( ($in_range_sbits |bits_$1| |v_$12|)))) :named ax_278))
   (assert (! (forall( (|bits_$2| Int) (|v_$13| Int))(!(and (=> ($in_range_ubits |bits_$2| |v_$13|) (= |v_$13| ($unchecked_ubits |bits_$2| |v_$13|))) ($in_range_ubits |bits_$2| ($unchecked_ubits |bits_$2| |v_$13|)))  :pattern ( ($unchecked_ubits |bits_$2| |v_$13|)))) :named ax_279))
   (assert (! (forall( (|bits| Int) (|v_$10| Int))(!(= (and (<= |v_$10| (- ($_pow2 |bits|) 1)) (<= 0 |v_$10|)) ($in_range_ubits |bits| |v_$10|))  :pattern ( ($in_range_ubits |bits| |v_$10|)))) :named ax_280))
   (assert (! (forall( (|c_$1| $ptrclub) (|p_$53| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$1|) |p_$53|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$1|) |p_$53|))) :named ax_281))
   (assert (! (forall( (|c_$14| $@Map@@$ptr@To@Bool@@) (|l_$9| $@Map@@$ptr@To@Bool@@))(!(= |c_$14| ($ptrclub.members ($ptrclub.construct |c_$14| |l_$9|)))  :weight  0)) :named ax_282))
   (assert (! (forall( (|c_$15| $@Map@@$ptr@To@Bool@@) (|l_$10| $@Map@@$ptr@To@Bool@@))(!(= |l_$10| ($ptrclub.bound ($ptrclub.construct |c_$15| |l_$10|)))  :weight  0)) :named ax_283))
   (assert (! (forall( (|c_$16| $ptrclub) (|p_$174| $ptr))(!(= (MapWrite$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$16|) |p_$174| true) ($ptrclub.members ($ptrclub.addMember |p_$174| |c_$16|)))  :weight  0)) :named ax_284))
   (assert (! (forall( (|c_$17| $ptrclub) (|p_$175| $ptr))(!(= ($ptrclub.bound |c_$17|) ($ptrclub.bound ($ptrclub.addMember |p_$175| |c_$17|)))  :weight  0)) :named ax_285))
   (assert (! (forall( (|c1| $ptr) (|c2| $ptr))(!(=> (and (forall( (|S_$137| $state))(=> ($valid_claim |S_$137| |c1|) ($closed |S_$137| |c2|))) (and ($is |c2| ^^claim) ($is |c1| ^^claim))) ($claims_claim |c1| |c2|))  :pattern ( ($claims_claim |c1| |c2|)))) :named ax_286))
   (assert (! (forall( (|e_$0| $ptr) (|S_$45| $ptrset))(= ($set_difference |S_$45| ($set_singleton |e_$0|)) ($set_difference |S_$45| ($set_singleton |e_$0|)))) :named ax_287))
   (assert (! (forall( (|e| $ptr) (|S_$44| $ptrset))(= ($set_union |S_$44| ($set_singleton |e|)) ($set_union |S_$44| ($set_singleton |e|)))) :named ax_288))
   (assert (! (forall( (|emb_$1| $ptr) (|p_$48| $ptr) (|S_$52| $state))(= (and (and (= |emb_$1| ($ts_emb ($ts |S_$52| |p_$48|))) (not ($ts_is_volatile ($ts |S_$52| |p_$48|)))) ($typed |S_$52| |p_$48|)) (and (and (= |emb_$1| ($emb |S_$52| |p_$48|)) (not ($is_volatile |S_$52| |p_$48|))) ($typed |S_$52| |p_$48|)))) :named ax_289))
   (assert (! (forall( (|emb| $ptr) (|sz_$3| Int) (|T_$2| $ctype) (|p_$43| $ptr) (|S_$48| $state))(= (and (forall( (|i_$3_$1| Int))(!(=> (and (< |i_$3_$1| |sz_$3|) (<= 0 |i_$3_$1|)) (= |emb| ($emb |S_$48| ($idx |p_$43| |i_$3_$1| |T_$2|))))  :pattern ( ($ts |S_$48| ($idx |p_$43| |i_$3_$1| |T_$2|))))) ($is_array_vol_or_nonvol |S_$48| |p_$43| |T_$2| |sz_$3| false)) (and (forall( (|i_$3| Int))(!(=> (and (< |i_$3| |sz_$3|) (<= 0 |i_$3|)) (= |emb| ($ts_emb ($ts |S_$48| ($idx |p_$43| |i_$3| |T_$2|)))))  :pattern ( ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3| |T_$2|))))) ($is_array_vol_or_nonvol |S_$48| |p_$43| |T_$2| |sz_$3| false)))) :named ax_290))
   (assert (! (forall( (|f_$1| $field) (|p_$25| $ptr) (|S_$26| $state))(= ($fetch_from_vv ($read_vol_version |S_$26| |p_$25|) ($dot |p_$25| |f_$1|)) ($fetch_from_vv ($read_vol_version |S_$26| |p_$25|) ($dot |p_$25| |f_$1|)))) :named ax_291))
   (assert (! (forall( (|f_$11| $pure_function))(= (< ($pure_post_level |f_$11|) $current_pure_post_level) (< ($pure_post_level |f_$11|) $current_pure_post_level))) :named ax_292))
   (assert (! (forall( (|f_$15| $field) (|t_$18| $ctype))(!(= 0 ($select.mem ($memory ($vs_state $struct_zero)) ($dot ($ptr |t_$18| ($vs_base_ref $struct_zero)) |f_$15|)))  :pattern ( ($select.mem ($memory ($vs_state $struct_zero)) ($dot ($ptr |t_$18| ($vs_base_ref $struct_zero)) |f_$15|))))) :named ax_293))
   (assert (! (forall( (|f_$17| $field))(= 0 ($rec_fetch $rec_zero |f_$17|))) :named ax_294))
   (assert (! (forall( (|f_$4| $field) (|u_$0| $ptr) (|S_$42| $state))(= (= |f_$4| ($ts_active_option ($ts |S_$42| |u_$0|))) (= |f_$4| ($active_option |S_$42| |u_$0|)))) :named ax_295))
   (assert (! (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|)))) :named ax_296))
   (assert (! (forall( (|f_$9| $pure_function))(= (< ($frame_level |f_$9|) $current_frame_level) (< ($frame_level |f_$9|) $current_frame_level))) :named ax_297))
   (assert (! (forall( (|fd_$0| $flowdata) (|l_$6| $@Map@@$ptr@To@Bool@@))(!(= |l_$6| ($select.flow.meta ($store.flow.meta |fd_$0| |l_$6|)))  :weight  0)) :named ax_298))
   (assert (! (forall( (|fd_$1| $flowdata) (|l_$7| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.label |fd_$1|) ($select.flow.label ($store.flow.meta |fd_$1| |l_$7|)))  :weight  0)) :named ax_299))
   (assert (! (forall( (|fd_$2| $flowdata) (|l_$8| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.meta |fd_$2|) ($select.flow.meta ($store.flow.label |fd_$2| |l_$8|)))  :weight  0)) :named ax_300))
   (assert (! (forall( (|fd| $flowdata) (|l_$5| $@Map@@$ptr@To@Bool@@))(!(= |l_$5| ($select.flow.label ($store.flow.label |fd| |l_$5|)))  :weight  0)) :named ax_301))
   (assert (! (forall( (|fld| $field) (|off| Int))(!(and (= |off| ($array_path_2 ($array_path |fld| |off|))) (and (= |fld| ($array_path_1 ($array_path |fld| |off|))) (not ($is_base_field ($array_path |fld| |off|)))))  :weight  0 :pattern ( ($array_path |fld| |off|)))) :named ax_302))
   (assert (! (forall( (|from_$1| Int) (|to_$1| Int) (|xs_$0| Int))(!(=> (and (<= |to_$1| |xs_$0|) (and (< |from_$1| |to_$1|) (<= 0 |from_$1|))) (= 0 ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0)))  :pattern ( ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0)))) :named ax_303))
   (assert (! (forall( (|from_$10| Int) (|to_$10| Int) (|val_$5| Int) (|xs_$9| Int))(!(=> (and (<= 0 |val_$5|) (and (<= |to_$10| |xs_$9|) (and (< |from_$10| |to_$10|) (<= 0 |from_$10|)))) (= (mod (div |val_$5| ($_pow2 |from_$10|)) ($_pow2 (- |to_$10| |from_$10|))) ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|)))  :pattern ( ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|)))) :named ax_304))
   (assert (! (forall( (|from_$11| Int) (|to_$11| Int) (|val_$6| Int) (|xs_$10| Int))(!(=> (and (and (<= 0 |val_$6|) (and (<= |to_$11| |xs_$10|) (and (< |from_$11| |to_$11|) (<= 0 |from_$11|)))) (< (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|))) ($_pow2 (- (- |to_$11| |from_$11|) 1)))) (= (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|))) ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|)))  :pattern ( ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|)))) :named ax_305))
   (assert (! (forall( (|from_$12| Int) (|to_$12| Int) (|val_$7| Int) (|xs_$11| Int))(!(=> (and (and (<= 0 |val_$7|) (and (<= |to_$12| |xs_$11|) (and (< |from_$12| |to_$12|) (<= 0 |from_$12|)))) (>= (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))) ($_pow2 (- (- |to_$12| |from_$12|) 1)))) (= ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|) (- ($_pow2 (- (- |to_$12| |from_$12|) 1)) (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))))))  :pattern ( ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|)))) :named ax_306))
   (assert (! (forall( (|from_$2| Int) (|to_$2| Int) (|val_$1| Int) (|x_$34| Int) (|xs_$1| Int))(!(=> (and (<= |to_$2| |xs_$1|) (and (< |from_$2| |to_$2|) (<= 0 |from_$2|))) (=> (and (< |val_$1| ($_pow2 (- (- |to_$2| |from_$2|) 1))) (<= (- 0 ($_pow2 (- (- |to_$2| |from_$2|) 1))) |val_$1|)) (= |val_$1| ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|))))  :pattern ( ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|)))) :named ax_307))
   (assert (! (forall( (|from_$3| Int) (|to_$3| Int) (|val_$2| Int) (|x_$35| Int) (|xs_$2| Int))(!(=> (and (<= |to_$3| |xs_$2|) (and (< |from_$3| |to_$3|) (<= 0 |from_$3|))) (=> (and (< |val_$2| ($_pow2 (- |to_$3| |from_$3|))) (<= 0 |val_$2|)) (= |val_$2| ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|)))) :named ax_308))
   (assert (! (forall( (|from_$4| Int) (|to_$4| Int) (|x_$36| Int) (|xs_$3| Int))(!(=> (and (<= |to_$4| |xs_$3|) (and (< |from_$4| |to_$4|) (<= 0 |from_$4|))) (and (<= (- 0 ($_pow2 (- (- |to_$4| |from_$4|) 1))) ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|)) (<= ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|) (- ($_pow2 (- (- |to_$4| |from_$4|) 1)) 1))))  :pattern ( ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|)))) :named ax_309))
   (assert (! (forall( (|from_$5| Int) (|to_$5| Int) (|x_$37| Int) (|xs_$4| Int))(!(=> (and (<= |to_$5| |xs_$4|) (and (< |from_$5| |to_$5|) (<= 0 |from_$5|))) (and (<= 0 ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|)) (<= ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|) (- ($_pow2 (- |to_$5| |from_$5|)) 1))))  :pattern ( ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|)))) :named ax_310))
   (assert (! (forall( (|from_$6| Int) (|to_$6| Int) (|val_$3| Int) (|x_$38| Int) (|xs_$5| Int) (|from2| Int) (|to2| Int))(!(=> (and (<= |to_$6| |xs_$5|) (and (< |from_$6| |to_$6|) (<= 0 |from_$6|))) (=> (and (<= |to2| |xs_$5|) (and (< |from2| |to2|) (<= 0 |from2|))) (=> (or (<= |to2| |from_$6|) (<= |to_$6| |from2|)) (= ($bv_extract_signed |x_$38| |xs_$5| |from2| |to2|) ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|)))))  :pattern ( ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|)))) :named ax_311))
   (assert (! (forall( (|from_$7| Int) (|to_$7| Int) (|val_$4| Int) (|x_$39| Int) (|xs_$6| Int) (|from2_$0| Int) (|to2_$0| Int))(!(=> (and (<= |to_$7| |xs_$6|) (and (< |from_$7| |to_$7|) (<= 0 |from_$7|))) (=> (and (<= |to2_$0| |xs_$6|) (and (< |from2_$0| |to2_$0|) (<= 0 |from2_$0|))) (=> (or (<= |to2_$0| |from_$7|) (<= |to_$7| |from2_$0|)) (= ($bv_extract_unsigned |x_$39| |xs_$6| |from2_$0| |to2_$0|) ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|)))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|)))) :named ax_312))
   (assert (! (forall( (|from_$8| Int) (|to_$8| Int) (|xs_$7| Int))(!(=> (and (<= |to_$8| |xs_$7|) (and (< |from_$8| |to_$8|) (<= 0 |from_$8|))) (= 0 ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|)))  :pattern ( ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|)))) :named ax_313))
   (assert (! (forall( (|from_$9| Int) (|to_$9| Int) (|xs_$8| Int))(!(=> (and (<= |to_$9| |xs_$8|) (and (< |from_$9| |to_$9|) (<= 0 |from_$9|))) (= 0 ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|)))  :pattern ( ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|)))) :named ax_314))
   (assert (! (forall( (|i_$25| Int) (|j_$0| Int))(!(=> (and (<= 0 |i_$25|) (< 0 |j_$0|)) (<= (div |i_$25| |j_$0|) |i_$25|))  :pattern ( (div |i_$25| |j_$0|)))) :named ax_315))
   (assert (! (forall( (|i_$26| Int) (|j_$1| Int))(!(=> (and (> |j_$1| 0) (> |i_$26| 0)) (and (< (- |i_$26| |j_$1|) (* (div |i_$26| |j_$1|) |j_$1|)) (<= (* (div |i_$26| |j_$1|) |j_$1|) |i_$26|)))  :pattern ( (div |i_$26| |j_$1|)))) :named ax_316))
   (assert (! (forall( (|i_$27| Int))(!(=> (not (= |i_$27| 0)) (= (div |i_$27| |i_$27|) 1))  :pattern ( (div |i_$27| |i_$27|)))) :named ax_317))
   (assert (! (forall( (|i_$28| Int))(!(=> (not (= |i_$28| 0)) (= (div 0 |i_$28|) 0))  :pattern ( (div 0 |i_$28|)))) :named ax_318))
   (assert (! (forall( (|id_$0| Int) (|length| Int))(!($is ($get_string_literal |id_$0| |length|) ^^u1)  :pattern ( ($get_string_literal |id_$0| |length|)))) :named ax_319))
   (assert (! (forall( (|id_$1| Int) (|length_$0| Int) (|S_$133| $state))(!(=> ($good_state |S_$133|) (and (forall( (|i_$1_$1| Int))(!(=> (and (< |i_$1_$1| |length_$0|) (<= 0 |i_$1_$1|)) ($thread_local2 |S_$133| ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1) ^^u1))  :pattern ( ($st |S_$133| ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1))) :pattern ( ($ts |S_$133| ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1))))) ($typed |S_$133| ($get_string_literal |id_$1| |length_$0|))))  :pattern ( ($typed |S_$133| ($get_string_literal |id_$1| |length_$0|))) :pattern ( ($is_array |S_$133| ($get_string_literal |id_$1| |length_$0|) ^^u1 |length_$0|)))) :named ax_320))
   (assert (! (forall( (|id| $token) (|S_$81| $state))(!(=> ($good_state_ext |id| |S_$81|) ($good_state |S_$81|))  :pattern ( ($good_state_ext |id| |S_$81|)))) :named ax_321))
   (assert (! (forall( (|isvol| Bool) (|f_$5| $field) (|emb_$0| $ptr) (|sz_$4| Int) (|T_$3| $ctype) (|p_$44| $ptr) (|S_$49| $state))(= (and (forall( (|i_$4_$1| Int))(!(=> (and (< |i_$4_$1| |sz_$4|) (<= 0 |i_$4_$1|)) (and (= |emb_$0| ($emb |S_$49| ($idx |p_$44| |i_$4_$1| |T_$3|))) (= ($path |S_$49| ($idx |p_$44| |i_$4_$1| |T_$3|)) ($array_path |f_$5| |i_$4_$1|))))  :pattern ( ($ts |S_$49| ($idx |p_$44| |i_$4_$1| |T_$3|))) :pattern ( ($mem |S_$49| ($idx |p_$44| |i_$4_$1| |T_$3|))))) ($is_array_vol_or_nonvol |S_$49| |p_$44| |T_$3| |sz_$4| |isvol|)) (and (forall( (|i_$4| Int))(!(=> (and (< |i_$4| |sz_$4|) (<= 0 |i_$4|)) (and (= |emb_$0| ($ts_emb ($ts |S_$49| ($idx |p_$44| |i_$4| |T_$3|)))) (= ($ts_path ($ts |S_$49| ($idx |p_$44| |i_$4| |T_$3|))) ($array_path |f_$5| |i_$4|))))  :pattern ( ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))) :pattern ( ($select.mem ($memory |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))))) ($is_array_vol_or_nonvol |S_$49| |p_$44| |T_$3| |sz_$4| |isvol|)))) :named ax_322))
   (assert (! (forall( (|isvolatile| Bool) (|tp| $ctype) (|f_$0| $field) (|p_$8| $ptr) (|S_$2| $state))(= (and (= |isvolatile| ($ts_is_volatile ($ts |S_$2| ($dot |p_$8| |f_$0|)))) (and (= |f_$0| ($ts_path ($ts |S_$2| ($dot |p_$8| |f_$0|)))) (and (= |p_$8| ($ts_emb ($ts |S_$2| ($dot |p_$8| |f_$0|)))) (and ($typed |S_$2| ($dot |p_$8| |f_$0|)) ($is ($dot |p_$8| |f_$0|) |tp|))))) (and (= |isvolatile| ($is_volatile |S_$2| ($dot |p_$8| |f_$0|))) (and (= |f_$0| ($path |S_$2| ($dot |p_$8| |f_$0|))) (and (= |p_$8| ($emb |S_$2| ($dot |p_$8| |f_$0|))) ($typed2 |S_$2| ($dot |p_$8| |f_$0|) |tp|)))))) :named ax_323))
   (assert (! (forall( (|l2_$0| Bool) (|l1_$0| Bool))(= (and |l2_$0| |l1_$0|) (and |l2_$0| |l1_$0|))) :named ax_324))
   (assert (! (forall( (|l2_$1| Bool) (|l1_$1| Bool))(= (or |l2_$1| |l1_$1|) (or |l2_$1| |l1_$1|))) :named ax_325))
   (assert (! (forall( (|l2_$2| $@Map@@$ptr@To@Bool@@) (|l1_$2| $@Map@@$ptr@To@Bool@@))(= (forall( (|p_$52_$0| $ptr))($seclbl.leq (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$2| |p_$52_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$2| |p_$52_$0|))) (forall( (|p_$52| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$2| |p_$52|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$2| |p_$52|))))) :named ax_326))
   (assert (! (forall( (|l2| Bool) (|l1| Bool))(= (=> |l1| |l2|) (=> |l1| |l2|))) :named ax_327))
   (assert (! (forall( (|M_$0| $memory_t) (|p_$55| $ptr) (|q_$2| $ptr) (|v_$1| Int))(!(or (= |q_$2| |p_$55|) (= ($select.mem |M_$0| |q_$2|) ($select.mem ($store.mem |M_$0| |p_$55| |v_$1|) |q_$2|)))  :weight  0)) :named ax_328))
   (assert (! (forall( (|M_$1| $memory_t) (|p_$56| $ptr) (|q_$3| $ptr) (|sz_$12| Int) (|v_$2| Int))(!(or (and (and (= ($typ |q_$3|) ($typ |p_$56|)) (<= ($ref |q_$3|) ($ref |p_$56|))) (< ($ref |p_$56|) ($ref ($idx |q_$3| |sz_$12| ($typ |q_$3|))))) (= ($select_range.mem |M_$1| |q_$3| |sz_$12|) ($select_range.mem ($store.mem |M_$1| |p_$56| |v_$2|) |q_$3| |sz_$12|)))  :weight  0)) :named ax_329))
   (assert (! (forall( (|M_$10| $memory_t) (|p_$176| $ptr) (|q_$28| $ptr) (|v_$16| Int))(!(= ($select.flow.data |M_$10| |p_$176|) ($select.flow.data ($store.mem |M_$10| |q_$28| |v_$16|) |p_$176|))  :weight  0)) :named ax_330))
   (assert (! (forall( (|M_$11| $memory_t) (|p_$177| $ptr) (|q_$29| $ptr) (|fd_$5| $flowdata))(!(= ($select.mem |M_$11| |p_$177|) ($select.mem ($store.flow.data |M_$11| |q_$29| |fd_$5|) |p_$177|))  :weight  0)) :named ax_331))
   (assert (! (forall( (|M_$2| $typemap_t) (|p_$57| $ptr) (|v_$3| $type_state))(!(= |v_$3| ($select.tm ($store.tm |M_$2| |p_$57| |v_$3|) |p_$57|))  :weight  0)) :named ax_332))
   (assert (! (forall( (|M_$3| $typemap_t) (|p_$58| $ptr) (|q_$4| $ptr) (|v_$4| $type_state))(!(or (= |q_$4| |p_$58|) (= ($select.tm |M_$3| |q_$4|) ($select.tm ($store.tm |M_$3| |p_$58| |v_$4|) |q_$4|)))  :weight  0)) :named ax_333))
   (assert (! (forall( (|M_$4| $statusmap_t) (|p_$59| $ptr) (|v_$5| $status))(!(= |v_$5| ($select.sm ($store.sm |M_$4| |p_$59| |v_$5|) |p_$59|))  :weight  0)) :named ax_334))
   (assert (! (forall( (|M_$5| $statusmap_t) (|p_$60| $ptr) (|q_$5| $ptr) (|v_$6| $status))(!(or (= |q_$5| |p_$60|) (= ($select.sm |M_$5| |q_$5|) ($select.sm ($store.sm |M_$5| |p_$60| |v_$6|) |q_$5|)))  :weight  0)) :named ax_335))
   (assert (! (forall( (|M_$6| $memory_t) (|p_$166| $ptr) (|q_$25| $ptr) (|fd_$3| $flowdata))(!(=> ($set_in |q_$25| ($full_extent |p_$166|)) (= |fd_$3| ($select.flow.data ($store.flow.data |M_$6| |p_$166| |fd_$3|) |q_$25|)))  :weight  0)) :named ax_336))
   (assert (! (forall( (|M_$7| $memory_t) (|p_$167| $ptr) (|q_$26| $ptr) (|fd_$4| $flowdata))(!(or ($set_in |q_$26| ($full_extent |p_$167|)) (= ($select.flow.data |M_$7| |q_$26|) ($select.flow.data ($store.flow.data |M_$7| |p_$167| |fd_$4|) |q_$26|)))  :weight  0)) :named ax_337))
   (assert (! (forall( (|M_$8| $map_t..$ptr_to..^^void.^^bool) (|p_$168| $ptr) (|v_$14| Bool))(!(= |v_$14| ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$8| |p_$168| |v_$14|) |p_$168|))  :weight  0)) :named ax_338))
   (assert (! (forall( (|M_$9| $map_t..$ptr_to..^^void.^^bool) (|p_$169| $ptr) (|v_$15| Bool) (|q_$27| $ptr))(!(=> (not (= |q_$27| |p_$169|)) (= ($select.$map_t..$ptr_to..^^void.^^bool |M_$9| |p_$169|) ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$9| |q_$27| |v_$15|) |p_$169|)))  :weight  0)) :named ax_339))
   (assert (! (forall( (|M| $memory_t) (|p_$54| $ptr) (|v_$0| Int))(!(= |v_$0| ($select.mem ($store.mem |M| |p_$54| |v_$0|) |p_$54|))  :weight  0)) :named ax_340))
   (assert (! (forall( (|M1_$2| $map_t..$ptr_to..^^void.^^bool) (|M2_$2| $map_t..$ptr_to..^^void.^^bool))(!(=> (forall( (|p_$170| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool |M2_$2| |p_$170|) ($select.$map_t..$ptr_to..^^void.^^bool |M1_$2| |p_$170|))  :weight  0)) ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|)))) :named ax_341))
   (assert (! (forall( (|M1_$3| $map_t..$ptr_to..^^void.^^bool) (|M2_$3| $map_t..$ptr_to..^^void.^^bool))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|) (= |M2_$3| |M1_$3|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|)))) :named ax_342))
   (assert (! (forall( (|M2_$0| $state) (|M1_$0| $state))(= (and (and (forall( (|p_$32_$1| $ptr))(!(<= ($timestamp |M1_$0| |p_$32_$1|) ($timestamp |M2_$0| |p_$32_$1|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32_$1|)))) (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|))) ($call_transition |M1_$0| |M2_$0|)) (and (and (forall( (|p_$32| $ptr))(!(<= ($timestamp |M1_$0| |p_$32|) ($timestamp |M2_$0| |p_$32|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32|)))) (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|))) ($call_transition |M1_$0| |M2_$0|)))) :named ax_343))
   (assert (! (forall( (|M2_$1| $state) (|M1_$1| $state))(= (and (and (forall( (|p_$33_$3| $ptr))(!(<= ($timestamp |M1_$1| |p_$33_$3|) ($timestamp |M2_$1| |p_$33_$3|))  :weight  0 :pattern ( ($timestamp |M2_$1| |p_$33_$3|)))) (< ($current_timestamp |M1_$1|) ($current_timestamp |M2_$1|))) ($call_transition |M1_$1| |M2_$1|)) (and (and (forall( (|p_$33| $ptr))(!(<= ($timestamp |M1_$1| |p_$33|) ($timestamp |M2_$1| |p_$33|))  :weight  0 :pattern ( ($timestamp |M2_$1| |p_$33|)))) (< ($current_timestamp |M1_$1|) ($current_timestamp |M2_$1|))) ($call_transition |M1_$1| |M2_$1|)))) :named ax_344))
   (assert (! (forall( (|max| Int) (|val| Int) (|min| Int))(= (and (<= |val| |max|) (<= |min| |val|)) (and (<= |val| |max|) (<= |min| |val|)))) :named ax_345))
   (assert (! (forall( (|no| Int) (|t_$87| $ctype))(!(= ($ptr |t_$87| ($get_fnptr_ref |no|)) ($get_fnptr |no| |t_$87|))  :pattern ( ($get_fnptr |no| |t_$87|)))) :named ax_346))
   (assert (! (forall( (|owner| $ptr) (|p_$18| $ptr) (|S_$11| $state))(= (and (= |owner| ($owner |S_$11| |p_$18|)) ($closed |S_$11| |p_$18|)) (and (= |owner| ($owner |S_$11| |p_$18|)) ($closed |S_$11| |p_$18|)))) :named ax_347))
   (assert (! (forall( (|owns| $ptrset) (|o| $ptr) (|S_$35| $state))(= ($set_difference |owns| ($owns |S_$35| |o|)) ($set_difference |owns| ($owns |S_$35| |o|)))) :named ax_348))
   (assert (! (forall( (|p_$0| $ptr))(= (= ($kind_of ($typ |p_$0|)) $kind_composite) (= ($kind_of ($typ |p_$0|)) $kind_composite))) :named ax_349))
   (assert (! (forall( (|p_$1| $ptr))(= ($is_non_primitive ($typ |p_$1|)) ($is_non_primitive ($typ |p_$1|)))) :named ax_350))
   (assert (! (forall( (|p_$10| $ptr) (|S_$4| $state))(= ($ts_is_volatile ($ts |S_$4| |p_$10|)) ($ts_is_volatile ($select.tm ($typemap |S_$4|) |p_$10|)))) :named ax_351))
   (assert (! (forall( (|p_$104| $ptr) (|S1_$9| $state) (|S2_$7| $state) (|q_$17| $ptr))(!($instantiate_bool ($set_in |q_$17| ($domain |S2_$7| |p_$104|)))  :weight  0 :pattern ( ($set_in |q_$17| ($domain |S1_$9| |p_$104|)) ($call_transition |S1_$9| |S2_$7|)))) :named ax_352))
   (assert (! (forall( (|p_$105| $ptr) (|S1_$10| $state) (|S2_$8| $state) (|q_$18| $ptr))(!($instantiate_bool ($set_in |q_$18| ($ver_domain ($read_version |S2_$8| |p_$105|))))  :weight  0 :pattern ( ($set_in |q_$18| ($ver_domain ($read_version |S1_$10| |p_$105|))) ($call_transition |S1_$10| |S2_$8|)))) :named ax_353))
   (assert (! (forall( (|p_$106| $ptr) (|c_$2| $ptr))(!(=> (forall( (|s_$8| $state))(!(=> ($valid_claim |s_$8| |c_$2|) ($closed |s_$8| |p_$106|))  :pattern ( ($dont_instantiate_state |s_$8|)))) ($in_claim_domain |p_$106| |c_$2|))  :pattern ( ($in_claim_domain |p_$106| |c_$2|)))) :named ax_354))
   (assert (! (forall( (|p_$11| $ptr) (|S_$5| $state))(= (= ($ptr ^^root_emb ($ref |p_$11|)) ($emb |S_$5| |p_$11|)) ($is_object_root |S_$5| |p_$11|))) :named ax_355))
   (assert (! (forall( (|p_$116| $ptr))(!(= 1 ($set_cardinality ($set_singleton |p_$116|)))  :weight  0)) :named ax_356))
   (assert (! (forall( (|p_$117| $ptr) (|s1_$5| $ptrset) (|s2_$5| $ptrset))(!(=> (and ($set_in |p_$117| |s1_$5|) ($set_disjoint |s1_$5| |s2_$5|)) (= 1 ($id_set_disjoint |p_$117| |s1_$5| |s2_$5|)))  :weight  0 :pattern ( ($set_disjoint |s1_$5| |s2_$5|) ($set_in |p_$117| |s1_$5|)))) :named ax_357))
   (assert (! (forall( (|p_$118| $ptr) (|s1_$6| $ptrset) (|s2_$6| $ptrset))(!(=> (and ($set_in |p_$118| |s2_$6|) ($set_disjoint |s1_$6| |s2_$6|)) (= 2 ($id_set_disjoint |p_$118| |s1_$6| |s2_$6|)))  :weight  0 :pattern ( ($set_disjoint |s1_$6| |s2_$6|) ($set_in |p_$118| |s2_$6|)))) :named ax_358))
   (assert (! (forall( (|p_$12| $ptr) (|M2| $state) (|M1| $state))(= (and (<= ($timestamp |M2| |p_$12|) ($current_timestamp |M2|)) (< ($current_timestamp |M1|) ($timestamp |M2| |p_$12|))) (and (<= ($timestamp |M2| |p_$12|) ($current_timestamp |M2|)) (< ($current_timestamp |M1|) ($timestamp |M2| |p_$12|))))) :named ax_359))
   (assert (! (forall( (|p_$120| $ptr) (|S1_$12| $state) (|p1_$1| $ptr))(!(=> ($set_in |p_$120| ($owns |S1_$12| |p1_$1|)) ($in_some_owns |p_$120|))  :weight  0 :pattern ( ($set_in |p_$120| ($owns |S1_$12| |p1_$1|))))) :named ax_360))
   (assert (! (forall( (|p_$121| $ptr) (|S1_$13| $state) (|p1_$2| $ptr))(!(= ($set_in2 |p_$121| ($owns |S1_$13| |p1_$2|)) ($set_in |p_$121| ($owns |S1_$13| |p1_$2|)))  :weight  0 :pattern ( ($set_in2 |p_$121| ($owns |S1_$13| |p1_$2|)) ($in_some_owns |p_$121|)))) :named ax_361))
   (assert (! (forall( (|p_$122| $ptr) (|s_$9| $ptrset))(!(= ($set_in2 |p_$122| |s_$9|) ($set_in |p_$122| |s_$9|))  :weight  0 :pattern ( ($set_in |p_$122| |s_$9|)))) :named ax_362))
   (assert (! (forall( (|p_$124| $ptr) (|s_$11| $ptrset))(!(= ($set_in0 |p_$124| |s_$11|) ($set_in |p_$124| |s_$11|))  :weight  0 :pattern ( ($set_in0 |p_$124| |s_$11|)))) :named ax_363))
   (assert (! (forall( (|p_$126| $ptr) (|i_$19| Int) (|j| Int) (|T_$23| $ctype))(!(=> (and (not (= |j| 0)) (not (= |i_$19| 0))) (= ($idx |p_$126| (+ |i_$19| |j|) |T_$23|) ($idx ($idx |p_$126| |i_$19| |T_$23|) |j| |T_$23|)))  :pattern ( ($idx ($idx |p_$126| |i_$19| |T_$23|) |j| |T_$23|)))) :named ax_364))
   (assert (! (forall( (|p_$129| $ptr) (|#r_$9| Int) (|T_$26| $ctype) (|sz_$25| Int))(!(= (or (= |p_$129| ($ptr ($array |T_$26| |sz_$25|) |#r_$9|)) (and ($in_range 0 ($index_within |p_$129| ($ptr |T_$26| |#r_$9|)) (- |sz_$25| 1)) ($in_full_extent_of |p_$129| ($idx ($ptr |T_$26| |#r_$9|) ($index_within |p_$129| ($ptr |T_$26| |#r_$9|)) |T_$26|)))) ($set_in |p_$129| ($full_extent ($ptr ($array |T_$26| |sz_$25|) |#r_$9|))))  :pattern ( ($set_in |p_$129| ($full_extent ($ptr ($array |T_$26| |sz_$25|) |#r_$9|)))))) :named ax_365))
   (assert (! (forall( (|p_$13| $ptr) (|begin_time| Int) (|S_$6| $state))(= (and (or (>= ($timestamp |S_$6| |p_$13|) |begin_time|) ($in_writes_at |begin_time| |p_$13|)) ($mutable |S_$6| |p_$13|)) (and (or (>= ($timestamp |S_$6| |p_$13|) |begin_time|) ($in_writes_at |begin_time| |p_$13|)) ($mutable |S_$6| |p_$13|)))) :named ax_366))
   (assert (! (forall( (|p_$131| $ptr) (|#r_$11| Int) (|T_$28| $ctype) (|sz_$27| Int))(!(=> ($is_primitive |T_$28|) (= (and (= |p_$131| ($idx ($ptr |T_$28| |#r_$11|) ($index_within |p_$131| ($ptr |T_$28| |#r_$11|)) |T_$28|)) ($in_range 0 ($index_within |p_$131| ($ptr |T_$28| |#r_$11|)) (- |sz_$27| 1))) ($set_in |p_$131| ($span ($ptr ($array |T_$28| |sz_$27|) |#r_$11|)))))  :pattern ( ($set_in |p_$131| ($span ($ptr ($array |T_$28| |sz_$27|) |#r_$11|))) ($is_primitive |T_$28|)))) :named ax_367))
   (assert (! (forall( (|p_$132| $ptr) (|T_$30| $ctype) (|sz_$29| Int) (|elem| $ptr))(!(= (and (= |elem| ($idx |p_$132| ($index_within |elem| |p_$132|) |T_$30|)) ($in_range 0 ($index_within |elem| |p_$132|) (- |sz_$29| 1))) ($set_in |elem| ($array_members |p_$132| |T_$30| |sz_$29|)))  :pattern ( ($set_in |elem| ($array_members |p_$132| |T_$30| |sz_$29|))))) :named ax_368))
   (assert (! (forall( (|p_$135| $ptr) (|T_$33| $ctype) (|sz_$32| Int) (|idx| Int) (|S_$127| $ptrset))(!(=> ($set_disjoint ($array_range_no_state |p_$135| |T_$33| |sz_$32|) |S_$127|) (=> (and (< |idx| |sz_$32|) (<= 0 |idx|)) (= 1 ($id_set_disjoint ($idx |p_$135| |idx| |T_$33|) ($array_range_no_state |p_$135| |T_$33| |sz_$32|) |S_$127|))))  :pattern ( ($idx |p_$135| |idx| |T_$33|) ($set_disjoint ($array_range_no_state |p_$135| |T_$33| |sz_$32|) |S_$127|)))) :named ax_369))
   (assert (! (forall( (|p_$136| $ptr) (|T_$34| $ctype) (|sz_$33| Int) (|idx_$0| Int) (|S_$128| $ptrset))(!(=> ($set_disjoint |S_$128| ($array_range_no_state |p_$136| |T_$34| |sz_$33|)) (=> (and (< |idx_$0| |sz_$33|) (<= 0 |idx_$0|)) (= 2 ($id_set_disjoint ($idx |p_$136| |idx_$0| |T_$34|) |S_$128| ($array_range_no_state |p_$136| |T_$34| |sz_$33|)))))  :pattern ( ($idx |p_$136| |idx_$0| |T_$34|) ($set_disjoint |S_$128| ($array_range_no_state |p_$136| |T_$34| |sz_$33|))))) :named ax_370))
   (assert (! (forall( (|p_$137| $ptr) (|#r_$14| Int) (|T_$35| $ctype) (|sz_$34| Int))(!(= (and (and ($in_range 0 ($index_within |p_$137| ($ptr |T_$35| |#r_$14|)) (- |sz_$34| 1)) ($in_full_extent_of |p_$137| ($idx ($ptr |T_$35| |#r_$14|) ($index_within |p_$137| ($ptr |T_$35| |#r_$14|)) |T_$35|))) (not (= 0 |#r_$14|))) ($set_in |p_$137| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|)))  :pattern ( ($set_in |p_$137| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|))))) :named ax_371))
   (assert (! (forall( (|p_$139| $ptr) (|k| Int))(!(and (= |k| ($index_within ($idx |p_$139| |k| ($typ |p_$139|)) |p_$139|)) ($simple_index ($idx |p_$139| |k| ($typ |p_$139|)) |p_$139|))  :pattern ( ($idx |p_$139| |k| ($typ |p_$139|))))) :named ax_372))
   (assert (! (forall( (|p_$14| $ptr) (|begin_time_$0| Int) (|S_$7| $state))(= (and (and (and ($typed |S_$7| |p_$14|) (= ($owner |S_$7| |p_$14|) $me)) (=> ($is_primitive_ch ($typ |p_$14|)) (not ($closed |S_$7| |p_$14|)))) (or (>= ($timestamp |S_$7| |p_$14|) |begin_time_$0|) ($in_writes_at |begin_time_$0| |p_$14|))) (and (or (>= ($timestamp |S_$7| |p_$14|) |begin_time_$0|) ($in_writes_at |begin_time_$0| |p_$14|)) ($thread_owned_or_even_mutable |S_$7| |p_$14|)))) :named ax_373))
   (assert (! (forall( (|p_$140| $ptr) (|q_$22| $ptr) (|f_$30| $field))(!(=> ($simple_index |p_$140| |q_$22|) (and ($simple_index ($dot |p_$140| |f_$30|) |q_$22|) (= ($index_within |p_$140| |q_$22|) ($index_within ($dot |p_$140| |f_$30|) |q_$22|))))  :pattern ( ($simple_index ($dot |p_$140| |f_$30|) |q_$22|)) :pattern ( ($index_within ($dot |p_$140| |f_$30|) |q_$22|)))) :named ax_374))
   (assert (! (forall( (|p_$141| $ptr) (|q_$23| $ptr) (|f_$31| $field) (|i_$23| Int) (|t_$33| $ctype))(!(=> (and (and (< |i_$23| ($embedded_array_size |f_$31| |t_$33|)) (<= 0 |i_$23|)) ($simple_index |p_$141| |q_$23|)) (and ($simple_index ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|) (= ($index_within |p_$141| |q_$23|) ($index_within ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|))))  :pattern ( ($simple_index ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|)) :pattern ( ($index_within ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|)))) :named ax_375))
   (assert (! (forall( (|p_$143| $ptr))(!(=> ($in_range 0 ($ref |p_$143|) $max.u8) (= ($ref |p_$143|) ($ptr_to_u8 |p_$143|)))  :pattern ( ($ptr_to_u8 |p_$143|)))) :named ax_376))
   (assert (! (forall( (|p_$144| $ptr))(!(=> ($in_range $min.i8 ($ref |p_$144|) $max.i8) (= ($ref |p_$144|) ($ptr_to_i8 |p_$144|)))  :pattern ( ($ptr_to_i8 |p_$144|)))) :named ax_377))
   (assert (! (forall( (|p_$145| $ptr))(!(=> ($in_range 0 ($ref |p_$145|) $max.u4) (= ($ref |p_$145|) ($ptr_to_u4 |p_$145|)))  :pattern ( ($ptr_to_u4 |p_$145|)))) :named ax_378))
   (assert (! (forall( (|p_$146| $ptr))(!(=> ($in_range $min.i4 ($ref |p_$146|) $max.i4) (= ($ref |p_$146|) ($ptr_to_i4 |p_$146|)))  :pattern ( ($ptr_to_i4 |p_$146|)))) :named ax_379))
   (assert (! (forall( (|p_$147| $ptr))(!(=> ($in_range 0 ($ref |p_$147|) $max.u2) (= ($ref |p_$147|) ($ptr_to_u2 |p_$147|)))  :pattern ( ($ptr_to_u2 |p_$147|)))) :named ax_380))
   (assert (! (forall( (|p_$148| $ptr))(!(=> ($in_range $min.i2 ($ref |p_$148|) $max.i2) (= ($ref |p_$148|) ($ptr_to_i2 |p_$148|)))  :pattern ( ($ptr_to_i2 |p_$148|)))) :named ax_381))
   (assert (! (forall( (|p_$149| $ptr))(!(=> ($in_range 0 ($ref |p_$149|) $max.u1) (= ($ref |p_$149|) ($ptr_to_u1 |p_$149|)))  :pattern ( ($ptr_to_u1 |p_$149|)))) :named ax_382))
   (assert (! (forall( (|p_$15| $ptr) (|S_$8| $state))(= ($select.sm ($statusmap |S_$8|) |p_$15|) ($select.sm ($statusmap |S_$8|) |p_$15|))) :named ax_383))
   (assert (! (forall( (|p_$150| $ptr))(!(=> ($in_range $min.i1 ($ref |p_$150|) $max.i1) (= ($ref |p_$150|) ($ptr_to_i1 |p_$150|)))  :pattern ( ($ptr_to_i1 |p_$150|)))) :named ax_384))
   (assert (! (forall( (|p_$158| $ptr))(= |p_$158| ($int_to_ptr ($ptr_to_int |p_$158|)))) :named ax_385))
   (assert (! (forall( (|p_$16| $ptr) (|S_$9| $state))(= ($select.tm ($typemap |S_$9|) |p_$16|) ($select.tm ($typemap |S_$9|) |p_$16|))) :named ax_386))
   (assert (! (forall( (|p_$162| $ptr))(= $seclbl.top (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.top |p_$162|))) :named ax_387))
   (assert (! (forall( (|p_$163| $ptr))(not (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.bot |p_$163|))) :named ax_388))
   (assert (! (forall( (|p_$17| $ptr) (|S_$10| $state))(= (not (= $kind_thread ($kind_of ($typ ($owner |S_$10| |p_$17|))))) (not (= $kind_thread ($kind_of ($typ ($owner |S_$10| |p_$17|))))))) :named ax_389))
   (assert (! (forall( (|p_$171| $ptr))(!(not ($select.$map_t..$ptr_to..^^void.^^bool $zero.$map_t..$ptr_to..^^void.^^bool |p_$171|))  :weight  0)) :named ax_390))
   (assert (! (forall( (|p_$172| $ptr))(!(not ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$172|))  :pattern ( ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$172|)))) :named ax_391))
   (assert (! (forall( (|p_$173| $ptr))(not (MapRead$$@Map@@$ptr@To@Bool@@$ $ptrclub.empty |p_$173|))) :named ax_392))
   (assert (! (forall( (|p_$19| $ptr) (|S_$13| $state))(= (or (and (= $kind_primitive ($kind_of ($typ |p_$19|))) ($closed |S_$13| |p_$19|)) (not (= ($owner |S_$13| |p_$19|) $me))) (or (and ($is_primitive_ch ($typ |p_$19|)) ($closed |S_$13| |p_$19|)) (not (= ($owner |S_$13| |p_$19|) $me))))) :named ax_393))
   (assert (! (forall( (|p_$2| $ptr) (|s_$0| $state))(= ($select.mem ($memory |s_$0|) |p_$2|) ($select.mem ($memory |s_$0|) |p_$2|))) :named ax_394))
   (assert (! (forall( (|p_$20| $ptr) (|S_$14| $state))(= (and ($typed |S_$14| |p_$20|) (= ($owner |S_$14| |p_$20|) $me)) (and ($typed |S_$14| |p_$20|) (= ($owner |S_$14| |p_$20|) $me)))) :named ax_395))
   (assert (! (forall( (|p_$21| $ptr) (|S_$15| $state))(= (and (=> (= $kind_primitive ($kind_of ($typ |p_$21|))) (not ($closed |S_$15| |p_$21|))) (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me))) (and (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me)) (=> ($is_primitive_ch ($typ |p_$21|)) (not ($closed |S_$15| |p_$21|)))))) :named ax_396))
   (assert (! (forall( (|p_$23| $ptr) (|S_$20| $state))(= (and (or (= ($owner |S_$20| |p_$23|) $me) ($in_wrapped_domain |S_$20| |p_$23|)) (not (= $kind_primitive ($kind_of ($typ |p_$23|))))) (and (or (= ($owner |S_$20| |p_$23|) $me) ($in_wrapped_domain |S_$20| |p_$23|)) (not ($is_primitive_ch ($typ |p_$23|)))))) :named ax_397))
   (assert (! (forall( (|p_$24| $ptr) (|S2| $state) (|S1| $state))(= ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)) ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)))) :named ax_398))
   (assert (! (forall( (|p_$26| $ptr) (|S_$27| $state))(= (and (forall( (|#q_$0_$1| $ptr))(!(=> ($closed |S_$27| |#q_$0_$1|) ($inv |S_$27| |#q_$0_$1| ($typ |#q_$0_$1|)))  :pattern ( ($st |S_$27| |#q_$0_$1|)))) ($good_for_admissibility |S_$27|)) (and (forall( (|#q_$0| $ptr))(!(=> ($closed |S_$27| |#q_$0|) ($inv2 |S_$27| |S_$27| |#q_$0| ($typ |#q_$0|)))  :pattern ( ($select.sm ($statusmap |S_$27|) |#q_$0|)))) ($good_for_admissibility |S_$27|)))) :named ax_399))
   (assert (! (forall( (|p_$27| $ptr) (|S_$28| $state))(= (and (and (forall( (|#q_$0_$3| $ptr))(!(=> ($closed |S_$28| |#q_$0_$3|) ($inv |S_$28| |#q_$0_$3| ($typ |#q_$0_$3|)))  :pattern ( ($st |S_$28| |#q_$0_$3|)))) ($good_for_admissibility |S_$28|)) (and ($inv2 |S_$28| |S_$28| |p_$27| ($typ |p_$27|)) ($closed |S_$28| |p_$27|))) (and ($stuttering_pre |S_$28| |p_$27|) (and ($inv |S_$28| |p_$27| ($typ |p_$27|)) ($closed |S_$28| |p_$27|))))) :named ax_400))
   (assert (! (forall( (|p_$29| $ptr) (|S_$29| $state))(= (and (and (forall( (|#q_$1_$1| $ptr))(!(=> ($closed |S_$29| |#q_$1_$1|) ($inv |S_$29| |#q_$1_$1| ($typ |#q_$1_$1|)))  :pattern ( ($st |S_$29| |#q_$1_$1|)))) (and (and (or (= 0 ($ref_cnt |S_$29| |p_$29|)) (not ($is_claimable ($typ |p_$29|)))) ($wrapped |S_$29| |p_$29| ($typ |p_$29|))) ($inv |S_$29| |p_$29| ($typ |p_$29|)))) ($good_for_pre_can_unwrap |S_$29|)) (and (and (forall( (|#q_$1| $ptr))(!(=> ($closed |S_$29| |#q_$1|) ($inv2 |S_$29| |S_$29| |#q_$1| ($typ |#q_$1|)))  :pattern ( ($select.sm ($statusmap |S_$29|) |#q_$1|)))) (and (and (or (= 0 ($ref_cnt |S_$29| |p_$29|)) (not ($is_claimable ($typ |p_$29|)))) (and (and (and (and (= ($owner |S_$29| |p_$29|) $me) ($closed |S_$29| |p_$29|)) ($typed2 |S_$29| |p_$29| ($typ |p_$29|))) (not (= $kind_primitive ($kind_of ($typ |p_$29|))))) ($is_non_primitive ($typ |p_$29|)))) ($inv2 |S_$29| |S_$29| |p_$29| ($typ |p_$29|)))) ($good_for_pre_can_unwrap |S_$29|)))) :named ax_401))
   (assert (! (forall( (|p_$30| $ptr) (|S_$30| $state))(= (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)) (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)))) :named ax_402))
   (assert (! (forall( (|p_$31| $ptr) (|S_$31| $state))(= (and (= ($timestamp |S_$31| |p_$31|) ($current_timestamp |S_$31|)) ($mutable |S_$31| |p_$31|)) (and ($timestamp_is_now |S_$31| |p_$31|) ($mutable |S_$31| |p_$31|)))) :named ax_403))
   (assert (! (forall( (|p_$36| $ptr) (|S_$43| $state))(= (and (and (= ($ptr ^^root_emb ($ref |p_$36|)) ($emb |S_$43| |p_$36|)) ($extent_mutable |S_$43| |p_$36|)) (= ($timestamp |S_$43| |p_$36|) ($current_timestamp |S_$43|))) (and ($timestamp_is_now |S_$43| |p_$36|) (and ($is_object_root |S_$43| |p_$36|) ($extent_mutable |S_$43| |p_$36|))))) :named ax_404))
   (assert (! (forall( (|p_$4| $ptr) (|s2| $state) (|s1| $state))(= (= ($select.mem ($memory |s2|) |p_$4|) ($select.mem ($memory |s1|) |p_$4|)) (= ($mem |s2| |p_$4|) ($mem |s1| |p_$4|)))) :named ax_405))
   (assert (! (forall( (|p_$5| $ptr) (|s2_$0| $state) (|s1_$0| $state))(= (= ($st |s2_$0| |p_$5|) ($st |s1_$0| |p_$5|)) (= ($select.sm ($statusmap |s2_$0|) |p_$5|) ($select.sm ($statusmap |s1_$0|) |p_$5|)))) :named ax_406))
   (assert (! (forall( (|p_$6| $ptr) (|s2_$1| $state) (|s1_$1| $state))(= (= ($ts |s2_$1| |p_$6|) ($ts |s1_$1| |p_$6|)) (= ($select.tm ($typemap |s2_$1|) |p_$6|) ($select.tm ($typemap |s1_$1|) |p_$6|)))) :named ax_407))
   (assert (! (forall( (|p_$62| $ptr) (|q_$6| $ptr) (|r_$0| $ptr))(!(=> (and ($extent_hint |q_$6| |r_$0|) ($extent_hint |p_$62| |q_$6|)) ($extent_hint |p_$62| |r_$0|))  :pattern ( ($extent_hint |p_$62| |q_$6|) ($extent_hint |q_$6| |r_$0|)))) :named ax_408))
   (assert (! (forall( (|p_$63| $ptr))(!($extent_hint |p_$63| |p_$63|)  :pattern ( ($typ |p_$63|)))) :named ax_409))
   (assert (! (forall( (|p_$64| $ptr) (|f_$12| $field))(!(and (= |p_$64| ($ghost_emb ($ghost_ref |p_$64| |f_$12|))) (= |f_$12| ($ghost_path ($ghost_ref |p_$64| |f_$12|))))  :weight  0 :pattern ( ($ghost_ref |p_$64| |f_$12|)))) :named ax_410))
   (assert (! (forall( (|p_$65| $ptr) (|f_$13| $field))(!($in_range_spec_ptr ($ghost_ref |p_$65| |f_$13|))  :pattern ( ($ghost_ref |p_$65| |f_$13|)))) :named ax_411))
   (assert (! (forall( (|p_$71| $ctype) (|f_$20| $field) (|ft| $ctype))(!(=> (and ($is_record_type |ft|) ($is_record_field |p_$71| |f_$20| |ft|)) (= |f_$20| ($as_record_record_field |f_$20|)))  :pattern ( ($is_record_field |p_$71| |f_$20| |ft|) ($is_record_type |ft|)))) :named ax_412))
   (assert (! (forall( (|p_$9| $ptr) (|S_$3| $state))(= (= ($ts_emb ($ts |S_$3| |p_$9|)) ($ptr ^^root_emb ($ref |p_$9|))) (= ($ptr ^^root_emb ($ref |p_$9|)) ($emb |S_$3| |p_$9|)))) :named ax_413))
   (assert (! (forall( (|p| $ptr))(= ($is_threadtype ($typ |p|)) ($is_threadtype ($typ |p|)))) :named ax_414))
   (assert (! (forall( (|p1_$4| $ptr) (|p2_$2| $ptr))(=> (= ($ref |p2_$2|) ($ref |p1_$4|)) (forall( (|p_$52_$1| $ptr))($seclbl.leq (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.compare |p1_$4| |p2_$2|) |p_$52_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.bot |p_$52_$1|))))) :named ax_415))
   (assert (! (forall( (|p1_$5| $ptr) (|p2_$3| $ptr) (|c_$18| $ptrclub))(=> (and (is_active_ptrclub |c_$18|) (and (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$18|) |p2_$3|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$18|) |p1_$5|))) (forall( (|p_$52_$2| $ptr))($seclbl.leq (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.compare |p1_$5| |p2_$3|) |p_$52_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.bound |c_$18|) |p_$52_$2|))))) :named ax_416))
   (assert (! (forall( (|p2_$0| $ptr) (|p1_$0| $ptr))(= (not (= ($ref |p2_$0|) ($ref |p1_$0|))) (not (= ($ref |p2_$0|) ($ref |p1_$0|))))) :named ax_417))
   (assert (! (forall( (|p2| $ptr) (|p1| $ptr))(= (= ($ref |p2|) ($ref |p1|)) (= ($ref |p2|) ($ref |p1|)))) :named ax_418))
   (assert (! (forall( (|q_$21| $ptr) (|S_$129| $state) (|p_$138| $ptr))(!(= ($set_in |q_$21| ($non_null_extent |S_$129| |p_$138|)) (and ($set_in |q_$21| ($extent |S_$129| |p_$138|)) (not (= ($ref |p_$138|) ($ref $null)))))  :pattern ( ($set_in |q_$21| ($non_null_extent |S_$129| |p_$138|))))) :named ax_419))
   (assert (! (forall( (|r_$2| $record) (|f_$18| $field) (|v_$7| Int))(!(= ($unchecked ($record_field_int_kind |f_$18|) |v_$7|) ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|))  :pattern ( ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|)))) :named ax_420))
   (assert (! (forall( (|r_$3| $record) (|f_$19| $field))(!($in_range_t ($record_field_int_kind |f_$19|) ($rec_fetch |r_$3| |f_$19|))  :pattern ( ($rec_fetch |r_$3| |f_$19|)))) :named ax_421))
   (assert (! (forall( (|r_$4| $record) (|f1| $field) (|f2| $field) (|v_$8| Int))(!(or (= |f2| |f1|) (= ($rec_fetch |r_$4| |f2|) ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|)))  :pattern ( ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|)))) :named ax_422))
   (assert (! (forall( (|r1_$0| $record) (|r2_$0| $record))(!(=> (forall( (|f_$21| $field))($rec_base_eq ($rec_fetch |r1_$0| |f_$21|) ($rec_fetch |r2_$0| |f_$21|))) ($rec_eq |r1_$0| |r2_$0|))  :pattern ( ($rec_eq |r1_$0| |r2_$0|)))) :named ax_423))
   (assert (! (forall( (|r1_$1| $record) (|r2_$1| $record) (|f_$22| $field))(!(=> ($rec_eq ($int_to_record ($rec_fetch |r1_$1| |f_$22|)) ($int_to_record ($rec_fetch |r2_$1| |f_$22|))) ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| |f_$22|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| ($as_record_record_field |f_$22|)))))) :named ax_424))
   (assert (! (forall( (|r1_$2| $record) (|r2_$2| $record) (|f_$32| $field) (|R| $ctype))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r1_$2| |f_$32|)) ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r2_$2| |f_$32|))) ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)))  :weight  0 :pattern ( ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)) ($is_record_field |R| |f_$32| ($map_t ($ptr_to ^^void) ^^bool))))) :named ax_425))
   (assert (! (forall( (|r1| $record) (|r2| $record))(!(= (= |r2| |r1|) ($rec_eq |r1| |r2|))  :pattern ( ($rec_eq |r1| |r2|)))) :named ax_426))
   (assert (! (forall( (|S_$100| $state) (|p_$102| $ptr) (|d_$3| $ptr) (|f_$26| $field) (|sz_$17| Int) (|i_$11| Int) (|t_$24| $ctype))(!(=> (and (< |i_$11| |sz_$17|) (and (<= 0 |i_$11|) (and (and ($set_in |p_$102| ($domain |S_$100| |d_$3|)) ($full_stop |S_$100|)) ($is_primitive_embedded_array |f_$26| |sz_$17|)))) (and ($typed |S_$100| ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|)) (not ($is_volatile |S_$100| ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|)))))  :pattern ( ($set_in |p_$102| ($domain |S_$100| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($select.tm ($typemap |S_$100|) ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|))) :pattern ( ($set_in |p_$102| ($domain |S_$100| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($owner |S_$100| ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|))))) :named ax_427))
   (assert (! (forall( (|S_$101| $state) (|r_$17| Int) (|d_$4| $ptr) (|sz_$18| Int) (|i_$12| Int) (|t_$25| $ctype))(!(=> (and (< |i_$12| |sz_$18|) (and (<= 0 |i_$12|) (and ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$17|) ($domain |S_$101| |d_$4|)) (and ($is_primitive |t_$25|) ($full_stop |S_$101|))))) (and ($typed |S_$101| ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|)) (not ($is_volatile |S_$101| ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|)))))  :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$17|) ($domain |S_$101| |d_$4|)) ($select.tm ($typemap |S_$101|) ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|)) ($is_primitive |t_$25|)) :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$17|) ($domain |S_$101| |d_$4|)) ($owner |S_$101| ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|)) ($is_primitive |t_$25|)))) :named ax_428))
   (assert (! (forall( (|S_$102| $state) (|r_$18| Int) (|d_$5| $ptr) (|sz_$19| Int) (|i_$13| Int) (|t_$26| $ctype))(!(=> (and (< |i_$13| |sz_$19|) (and (<= 0 |i_$13|) (and ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$18|) ($domain |S_$102| |d_$5|)) (and ($is_primitive |t_$26|) ($full_stop |S_$102|))))) (= ($select.mem ($memory |S_$102|) ($idx ($ptr |t_$26| |r_$18|) |i_$13| |t_$26|)) ($fetch_from_domain ($read_version |S_$102| |d_$5|) ($idx ($ptr |t_$26| |r_$18|) |i_$13| |t_$26|))))  :pattern ( ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$18|) ($domain |S_$102| |d_$5|)) ($select.mem ($memory |S_$102|) ($idx ($ptr |t_$26| |r_$18|) |i_$13| |t_$26|)) ($is_primitive |t_$26|)))) :named ax_429))
   (assert (! (forall( (|S_$103| $state) (|p_$103| $ptr) (|f_$27| $field) (|sz_$20| Int) (|i_$14| Int) (|t_$27| $ctype))(!(=> (and (< |i_$14| |sz_$20|) (and (<= 0 |i_$14|) (and ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|) ($good_state |S_$103|)))) ($ts_is_volatile ($ts |S_$103| ($idx ($dot |p_$103| |f_$27|) |i_$14| |t_$27|))))  :pattern ( ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|) ($ts_is_volatile ($ts |S_$103| ($idx ($dot |p_$103| |f_$27|) |i_$14| |t_$27|)))))) :named ax_430))
   (assert (! (forall( (|S_$104| $state) (|c_$3| $ptr) (|obj| $ptr) (|ptr| $ptr))(!(= |ptr| ($by_claim |S_$104| |c_$3| |obj| |ptr|))  :weight  0 :pattern ( ($by_claim |S_$104| |c_$3| |obj| |ptr|)))) :named ax_431))
   (assert (! (forall( (|S_$105| $state) (|p_$107| $ptr) (|c_$4| $ptr) (|f_$28| $field))(!(=> (and ($is_primitive_non_volatile_field |f_$28|) (and ($in_claim_domain |p_$107| |c_$4|) (and ($good_state |S_$105|) ($closed |S_$105| |c_$4|)))) (and (= ($select.mem ($memory |S_$105|) ($dot |p_$107| |f_$28|)) ($fetch_from_domain ($claim_version |c_$4|) ($dot |p_$107| |f_$28|))) ($in_claim_domain |p_$107| |c_$4|)))  :pattern ( ($in_claim_domain |p_$107| |c_$4|) ($select.mem ($memory |S_$105|) ($dot |p_$107| |f_$28|))) :pattern ( ($by_claim |S_$105| |c_$4| |p_$107| ($dot |p_$107| |f_$28|))))) :named ax_432))
   (assert (! (forall( (|S_$106| $state) (|p_$108| $ptr) (|c_$5| $ptr) (|f_$29| $field) (|i_$15| Int) (|sz_$21| Int) (|t_$28| $ctype))(!(=> (and (< |i_$15| |sz_$21|) (and (<= 0 |i_$15|) (and ($is_primitive_embedded_array |f_$29| |sz_$21|) (and ($in_claim_domain |p_$108| |c_$5|) (and ($good_state |S_$106|) ($closed |S_$106| |c_$5|)))))) (= ($select.mem ($memory |S_$106|) ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|)) ($fetch_from_domain ($claim_version |c_$5|) ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|))))  :pattern ( ($valid_claim |S_$106| |c_$5|) ($in_claim_domain |p_$108| |c_$5|) ($select.mem ($memory |S_$106|) ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)) :pattern ( ($by_claim |S_$106| |c_$5| |p_$108| ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)))) :named ax_433))
   (assert (! (forall( (|S_$107| $state) (|p_$109| $ptr) (|c_$6| $ptr) (|i_$16| Int) (|sz_$22| Int) (|t_$29| $ctype))(!(=> (and (< |i_$16| |sz_$22|) (and (<= 0 |i_$16|) (and ($is_primitive |t_$29|) (and ($in_claim_domain ($ptr ($array |t_$29| |sz_$22|) ($ref |p_$109|)) |c_$6|) (and ($good_state |S_$107|) ($closed |S_$107| |c_$6|)))))) (= ($select.mem ($memory |S_$107|) ($idx |p_$109| |i_$16| |t_$29|)) ($fetch_from_domain ($claim_version |c_$6|) ($idx |p_$109| |i_$16| |t_$29|))))  :pattern ( ($valid_claim |S_$107| |c_$6|) ($in_claim_domain ($ptr ($array |t_$29| |sz_$22|) ($ref |p_$109|)) |c_$6|) ($select.mem ($memory |S_$107|) ($idx |p_$109| |i_$16| |t_$29|)) ($is_primitive |t_$29|)) :pattern ( ($by_claim |S_$107| |c_$6| |p_$109| ($idx |p_$109| |i_$16| |t_$29|)) ($is_primitive |t_$29|) ($is_array |S_$107| |p_$109| |t_$29| |sz_$22|)))) :named ax_434))
   (assert (! (forall( (|S_$108| $state) (|p_$110| $ptr))(!(= ($read_vol_version |S_$108| |p_$110|) ($int_to_vol_version ($select.mem ($memory |S_$108|) |p_$110|)))  :weight  0 :pattern ( ($read_vol_version |S_$108| |p_$110|)))) :named ax_435))
   (assert (! (forall( (|S_$109| $state) (|r_$19| Int) (|t_$30| $ctype) (|approver_$1| $field) (|subject_$2| $field))(!(=> (and (or (= $me ($int_to_ptr ($select.mem ($memory |S_$109|) ($dot ($ptr |t_$30| |r_$19|) |approver_$1|)))) (= $me ($int_to_ptr ($fetch_from_vv ($read_vol_version |S_$109| ($ptr |t_$30| |r_$19|)) ($dot ($ptr |t_$30| |r_$19|) |approver_$1|))))) (and (and ($is_approved_by |t_$30| |approver_$1| |subject_$2|) ($full_stop |S_$109|)) ($closed |S_$109| ($ptr |t_$30| |r_$19|)))) (= ($select.mem ($memory |S_$109|) ($dot ($ptr |t_$30| |r_$19|) |subject_$2|)) ($fetch_from_vv ($read_vol_version |S_$109| ($ptr |t_$30| |r_$19|)) ($dot ($ptr |t_$30| |r_$19|) |subject_$2|))))  :pattern ( ($is_approved_by |t_$30| |approver_$1| |subject_$2|) ($select.mem ($memory |S_$109|) ($dot ($ptr |t_$30| |r_$19|) |subject_$2|))))) :named ax_436))
   (assert (! (forall( (|S_$110| $state) (|r_$20| Int) (|t_$31| $ctype) (|subject_$3| $field))(!(=> (and (= ($owner |S_$110| ($ptr |t_$31| |r_$20|)) $me) (and ($is_owner_approved |t_$31| |subject_$3|) (and ($full_stop |S_$110|) ($closed |S_$110| ($ptr |t_$31| |r_$20|))))) (= ($select.mem ($memory |S_$110|) ($dot ($ptr |t_$31| |r_$20|) |subject_$3|)) ($fetch_from_vv ($read_vol_version |S_$110| ($ptr |t_$31| |r_$20|)) ($dot ($ptr |t_$31| |r_$20|) |subject_$3|))))  :pattern ( ($is_owner_approved |t_$31| |subject_$3|) ($select.mem ($memory |S_$110|) ($dot ($ptr |t_$31| |r_$20|) |subject_$3|))))) :named ax_437))
   (assert (! (forall( (|S_$111| $state) (|p_$111| $ptr) (|q_$19| $ptr))(!(=> (and ($is_non_primitive ($typ |p_$111|)) (and ($good_state |S_$111|) ($closed |S_$111| |q_$19|))) (= (= |q_$19| ($owner |S_$111| |p_$111|)) ($set_in |p_$111| ($owns |S_$111| |q_$19|))))  :pattern ( ($set_in |p_$111| ($owns |S_$111| |q_$19|)) ($is_non_primitive ($typ |p_$111|))))) :named ax_438))
   (assert (! (forall( (|S_$112| $state) (|#r_$6| Int) (|#t_$14| $ctype))(!(=> ($good_state |S_$112|) (=> ($is_arraytype |#t_$14|) (= $set_empty ($owns |S_$112| ($ptr |#t_$14| |#r_$6|)))))  :pattern ( ($owns |S_$112| ($ptr |#t_$14| |#r_$6|)) ($is_arraytype |#t_$14|)))) :named ax_439))
   (assert (! (forall( (|S_$113| $state) (|#p_$30| $ptr) (|#t_$15| $ctype))(!(=> (and ($invok_state |S_$113|) ($closed |S_$113| |#p_$30|)) ($inv2 |S_$113| |S_$113| |#p_$30| |#t_$15|))  :pattern ( ($inv2 |S_$113| |S_$113| |#p_$30| |#t_$15|)))) :named ax_440))
   (assert (! (forall( (|S_$114| $state))(!(=> ($good_state |S_$114|) (forall( (|#p_$10_$1| $ptr) (|#q_$9| $ptr))(!(=> (and (and ($set_in |#p_$10_$1| ($owns |S_$114| |#q_$9|)) ($good_state |S_$114|)) ($closed |S_$114| |#q_$9|)) (and ($closed |S_$114| |#p_$10_$1|) (not (= 0 ($ref |#p_$10_$1|)))))  :pattern ( ($set_in |#p_$10_$1| ($owns |S_$114| |#q_$9|))))))  :pattern ( ($good_state |S_$114|)))) :named ax_441))
   (assert (! (forall( (|S_$115| $state) (|#p_$31| $ptr))(!(=> ($closed |S_$115| |#p_$31|) ($typed |S_$115| |#p_$31|))  :pattern ( ($closed |S_$115| |#p_$31|)))) :named ax_442))
   (assert (! (forall( (|S_$116| $state) (|p_$112| $ptr) (|v_$9| Int))(!(and (and (and (forall( (|p_$33_$1| $ptr))(!(<= ($timestamp |S_$116| |p_$33_$1|) ($timestamp ($update_int |S_$116| |p_$112| |v_$9|) |p_$33_$1|))  :weight  0 :pattern ( ($timestamp ($update_int |S_$116| |p_$112| |v_$9|) |p_$33_$1|)))) (< ($current_timestamp |S_$116|) ($current_timestamp ($update_int |S_$116| |p_$112| |v_$9|)))) ($call_transition |S_$116| ($update_int |S_$116| |p_$112| |v_$9|))) (and (and (= ($typemap |S_$116|) ($typemap ($update_int |S_$116| |p_$112| |v_$9|))) (= ($statusmap |S_$116|) ($statusmap ($update_int |S_$116| |p_$112| |v_$9|)))) (= ($store.mem ($memory |S_$116|) |p_$112| |v_$9|) ($memory ($update_int |S_$116| |p_$112| |v_$9|)))))  :pattern ( ($update_int |S_$116| |p_$112| |v_$9|)))) :named ax_443))
   (assert (! (forall( (|S_$117| $state) (|l_$3| $ptr) (|p_$113| $ptr))(!(=> (not (= $kind_primitive ($kind_of ($typ |l_$3|)))) (and (and (= |l_$3| ($owner ($take_over |S_$117| |l_$3| |p_$113|) |p_$113|)) (and (= ($store.sm ($statusmap |S_$117|) |p_$113| ($taken_over |S_$117| |l_$3| |p_$113|)) ($statusmap ($take_over |S_$117| |l_$3| |p_$113|))) ($closed ($take_over |S_$117| |l_$3| |p_$113|) |p_$113|))) (= ($ref_cnt |S_$117| |p_$113|) ($ref_cnt ($take_over |S_$117| |l_$3| |p_$113|) |p_$113|))))  :pattern ( ($take_over |S_$117| |l_$3| |p_$113|)))) :named ax_444))
   (assert (! (forall( (|S_$119| $state))(!(=> ($program_entry_point |S_$119|) ($program_entry_point_ch |S_$119|))  :pattern ( ($program_entry_point |S_$119|)))) :named ax_445))
   (assert (! (forall( (|S_$120| $state) (|p_$115| $ptr) (|q_$20| $ptr))(!(= (or (= |q_$20| |p_$115|) (and ($ts_is_volatile ($ts |S_$120| |p_$115|)) ($set_in |p_$115| ($span |q_$20|)))) ($set_in |p_$115| ($volatile_span |S_$120| |q_$20|)))  :pattern ( ($set_in |p_$115| ($volatile_span |S_$120| |q_$20|))))) :named ax_446))
   (assert (! (forall( (|S_$121| $state) (|p_$127| $ptr) (|T_$24| $ctype) (|sz_$23| Int) (|vol_$1| Bool))(!(= (and (forall( (|i_$20| Int))(!(=> (and (< |i_$20| |sz_$23|) (<= 0 |i_$20|)) (and (= |vol_$1| ($ts_is_volatile ($ts |S_$121| ($idx |p_$127| |i_$20| |T_$24|)))) ($typed |S_$121| ($idx |p_$127| |i_$20| |T_$24|))))  :pattern ( ($select.sm ($statusmap |S_$121|) ($idx |p_$127| |i_$20| |T_$24|))) :pattern ( ($select.tm ($typemap |S_$121|) ($idx |p_$127| |i_$20| |T_$24|))) :pattern ( ($select.mem ($memory |S_$121|) ($idx |p_$127| |i_$20| |T_$24|))))) ($is |p_$127| |T_$24|)) ($is_array_vol_or_nonvol |S_$121| |p_$127| |T_$24| |sz_$23| |vol_$1|))  :weight  0 :pattern ( ($is_array_vol_or_nonvol |S_$121| |p_$127| |T_$24| |sz_$23| |vol_$1|)))) :named ax_447))
   (assert (! (forall( (|S_$122| $state) (|p_$128| $ptr) (|T_$25| $ctype) (|sz_$24| Int))(!(= (and (forall( (|i_$21| Int))(!(=> (and (< |i_$21| |sz_$24|) (<= 0 |i_$21|)) ($typed |S_$122| ($idx |p_$128| |i_$21| |T_$25|)))  :pattern ( ($select.sm ($statusmap |S_$122|) ($idx |p_$128| |i_$21| |T_$25|))) :pattern ( ($select.tm ($typemap |S_$122|) ($idx |p_$128| |i_$21| |T_$25|))) :pattern ( ($select.mem ($memory |S_$122|) ($idx |p_$128| |i_$21| |T_$25|))))) ($is |p_$128| |T_$25|)) ($is_array |S_$122| |p_$128| |T_$25| |sz_$24|))  :weight  0 :pattern ( ($is_array |S_$122| |p_$128| |T_$25| |sz_$24|)))) :named ax_448))
   (assert (! (forall( (|S_$123| $state) (|p_$130| $ptr) (|#r_$10| Int) (|T_$27| $ctype) (|sz_$26| Int))(!(= (or (= |p_$130| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|)) (and ($in_range 0 ($index_within |p_$130| ($ptr |T_$27| |#r_$10|)) (- |sz_$26| 1)) ($in_extent_of |S_$123| |p_$130| ($idx ($ptr |T_$27| |#r_$10|) ($index_within |p_$130| ($ptr |T_$27| |#r_$10|)) |T_$27|)))) ($set_in |p_$130| ($extent |S_$123| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|))))  :pattern ( ($set_in |p_$130| ($extent |S_$123| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|)))))) :named ax_449))
   (assert (! (forall( (|S_$124| $state) (|#r_$12| Int) (|T_$29| $ctype) (|sz_$28| Int) (|i_$22| Int))(!(=> ($typed |S_$124| ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) (=> (and (< |i_$22| |sz_$28|) (<= 0 |i_$22|)) (and (and (= ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) ($emb |S_$124| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|))) (not ($is_volatile |S_$124| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|)))) ($typed |S_$124| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|)))))  :pattern ( ($select.sm ($statusmap |S_$124|) ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) :pattern ( ($select.tm ($typemap |S_$124|) ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)))) :named ax_450))
   (assert (! (forall( (|S_$125| $state) (|p_$133| $ptr) (|T_$31| $ctype) (|sz_$30| Int))(!(= ($array_range_no_state |p_$133| |T_$31| |sz_$30|) ($array_range |S_$125| |p_$133| |T_$31| |sz_$30|))  :pattern ( ($array_range |S_$125| |p_$133| |T_$31| |sz_$30|)))) :named ax_451))
   (assert (! (forall( (|S_$126| $state) (|p_$134| $ptr) (|#r_$13| Int) (|T_$32| $ctype) (|sz_$31| Int))(!(and (= ($set_in |p_$134| ($array_range |S_$126| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|)) (and ($in_range 0 ($index_within |p_$134| ($ptr |T_$32| |#r_$13|)) (- |sz_$31| 1)) ($in_full_extent_of |p_$134| ($idx ($ptr |T_$32| |#r_$13|) ($index_within |p_$134| ($ptr |T_$32| |#r_$13|)) |T_$32|)))) ($instantiate_bool ($typed |S_$126| |p_$134|)))  :pattern ( ($set_in |p_$134| ($array_range |S_$126| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|))))) :named ax_452))
   (assert (! (forall( (|S_$130| $state) (|r_$22| Int) (|t_$35| $ctype))(!(=> ($good_state |S_$130|) ($in_range_t |t_$35| ($select.mem ($memory |S_$130|) ($ptr ($as_in_range_t |t_$35|) |r_$22|))))  :pattern ( ($select.mem ($memory |S_$130|) ($ptr ($as_in_range_t |t_$35|) |r_$22|))))) :named ax_453))
   (assert (! (forall( (|S_$131| $state) (|r_$23| Int) (|t_$36| $ctype))(!(=> ($good_state |S_$131|) ($in_range_phys_ptr ($select.mem ($memory |S_$131|) ($ptr ($ptr_to |t_$36|) |r_$23|))))  :pattern ( ($select.mem ($memory |S_$131|) ($ptr ($ptr_to |t_$36|) |r_$23|))))) :named ax_454))
   (assert (! (forall( (|S_$132| $state) (|r_$24| Int) (|t_$37| $ctype))(!(=> ($good_state |S_$132|) ($in_range_spec_ptr ($select.mem ($memory |S_$132|) ($ptr ($spec_ptr_to |t_$37|) |r_$24|))))  :pattern ( ($select.mem ($memory |S_$132|) ($ptr ($spec_ptr_to |t_$37|) |r_$24|))))) :named ax_455))
   (assert (! (forall( (|S_$134| $state) (|no_$1| Int) (|t_$88| $ctype))(!(=> (and ($is_fnptr_type |t_$88|) ($good_state |S_$134|)) ($mutable |S_$134| ($get_fnptr |no_$1| |t_$88|)))  :pattern ( ($select.tm ($typemap |S_$134|) ($get_fnptr |no_$1| |t_$88|))) :pattern ( ($select.sm ($statusmap |S_$134|) ($get_fnptr |no_$1| |t_$88|))))) :named ax_456))
   (assert (! (forall( (|S_$135| $state) (|c_$7| $ptr))(!(=> (and ($full_stop |S_$135|) ($closed |S_$135| |c_$7|)) ($valid_claim |S_$135| |c_$7|))  :pattern ( ($full_stop |S_$135|) ($valid_claim |S_$135| |c_$7|)))) :named ax_457))
   (assert (! (forall( (|S_$136| $state) (|c_$8| $ptr))(!(=> ($valid_claim |S_$136| |c_$8|) (and ($invok_state |S_$136|) ($closed |S_$136| |c_$8|)))  :pattern ( ($valid_claim |S_$136| |c_$8|)))) :named ax_458))
   (assert (! (forall( (|S_$138| $state) (|c1_$0| $ptr) (|c2_$0| $ptr))(!(=> (and ($valid_claim |S_$138| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)) ($valid_claim |S_$138| |c2_$0|))  :pattern ( ($valid_claim |S_$138| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)))) :named ax_459))
   (assert (! (forall( (|S_$139| $state) (|c_$9| $ptr) (|o_$0| $ptr))(!(=> ($good_state |S_$139|) (=> (and ($closed |S_$139| |c_$9|) ($claims_obj |c_$9| |o_$0|)) (and (> ($ref_cnt |S_$139| |o_$0|) 0) (and ($instantiate_ptrset ($owns |S_$139| |o_$0|)) ($closed |S_$139| |o_$0|)))))  :pattern ( ($closed |S_$139| |c_$9|) ($claims_obj |c_$9| |o_$0|)))) :named ax_460))
   (assert (! (forall( (|S_$140| $state) (|c_$10| $ptr) (|o_$1| $ptr))(!(=> (and ($valid_claim |S_$140| |c_$10|) ($claims_obj |c_$10| |o_$1|)) ($inv2 |S_$140| |S_$140| |o_$1| ($typ |o_$1|)))  :pattern ( ($valid_claim |S_$140| |c_$10|) ($claims_obj |c_$10| |o_$1|)))) :named ax_461))
   (assert (! (forall( (|S_$141| $state) (|c_$11| $ptr) (|r_$25| Int))(!(=> (and ($valid_claim |S_$141| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$25|))) ($valid_claim |S_$141| ($ptr ^^claim |r_$25|)))  :pattern ( ($valid_claim |S_$141| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$25|))))) :named ax_462))
   (assert (! (forall( (|S_$143| $state) (|p_$153| $ptr))(!(=> (and ($invok_state |S_$143|) ($claimed_closed |S_$143| |p_$153|)) ($inv2 |S_$143| |S_$143| |p_$153| ($typ |p_$153|)))  :pattern ( ($invok_state |S_$143|) ($claimed_closed |S_$143| |p_$153|)))) :named ax_463))
   (assert (! (forall( (|S_$145| $state) (|c_$12| $ptr) (|o_$3| $ptr))(!(= (and (and ($good_state |S_$145|) ($closed |S_$145| |c_$12|)) ($claims_obj |c_$12| |o_$3|)) ($account_claim |S_$145| |c_$12| |o_$3|))  :pattern ( ($account_claim |S_$145| |c_$12| |o_$3|)))) :named ax_464))
   (assert (! (forall( (|S_$146| $state) (|c_$13| $ptr) (|o_$4| $ptr))(!(=> ($account_claim |S_$146| |c_$13| |o_$4|) (and (and (= |c_$13| ($claim_no |S_$146| |o_$4| ($claim_idx |o_$4| |c_$13|))) (<= 0 ($claim_idx |o_$4| |c_$13|))) (< ($claim_idx |o_$4| |c_$13|) ($ref_cnt |S_$146| |o_$4|))))  :pattern ( ($account_claim |S_$146| |c_$13| |o_$4|)))) :named ax_465))
   (assert (! (forall( (|s_$18| $state) (|p_$152| $ptr))(!(= ($closed |s_$18| |p_$152|) ($claimed_closed |s_$18| |p_$152|))  :weight  0 :pattern ( ($claimed_closed |s_$18| |p_$152|)))) :named ax_466))
   (assert (! (forall( (|S_$23| $state) (|t_$6| $token))(= (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)) (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)))) :named ax_467))
   (assert (! (forall( (|S_$24| $state))(= (forall( (|#p_$10_$0| $ptr) (|#q_$8| $ptr))(!(=> (and (and ($set_in |#p_$10_$0| ($owns |S_$24| |#q_$8|)) ($good_state |S_$24|)) ($closed |S_$24| |#q_$8|)) (and ($closed |S_$24| |#p_$10_$0|) (not (= 0 ($ref |#p_$10_$0|)))))  :pattern ( ($set_in |#p_$10_$0| ($owns |S_$24| |#q_$8|))))) (forall( (|#p_$10| $ptr) (|#q| $ptr))(!(=> (and (and ($set_in |#p_$10| ($owns |S_$24| |#q|)) ($good_state |S_$24|)) ($closed |S_$24| |#q|)) (and ($closed |S_$24| |#p_$10|) (not (= 0 ($ref |#p_$10|)))))  :pattern ( ($set_in |#p_$10| ($owns |S_$24| |#q|))))))) :named ax_468))
   (assert (! (forall( (|s_$3| $state))(= (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|)))) (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|)))))) :named ax_469))
   (assert (! (forall( (|s_$4| $state))(= (forall( (|f_$10| $pure_function))(!(< ($pure_post_level |f_$10|) $current_frame_level)  :pattern ( ($frame_level |f_$10|)))) (forall( (|f_$10| $pure_function))(!(< ($pure_post_level |f_$10|) $current_frame_level)  :pattern ( ($frame_level |f_$10|)))))) :named ax_470))
   (assert (! (forall( (|S_$55| $state) (|p_$67| $ptr))(!(=> ($typed |S_$55| |p_$67|) ($typed |S_$55| ($ts_emb ($ts |S_$55| |p_$67|))))  :pattern ( ($typed |S_$55| |p_$67|) ($select.tm ($typemap |S_$55|) ($ts_emb ($ts |S_$55| |p_$67|)))))) :named ax_471))
   (assert (! (forall( (|S_$56| $state) (|p_$68| $ptr))(!(=> (and ($ts_is_volatile ($ts |S_$56| |p_$68|)) ($good_state |S_$56|)) (= $kind_primitive ($kind_of ($typ |p_$68|))))  :pattern ( ($ts_is_volatile ($ts |S_$56| |p_$68|))))) :named ax_472))
   (assert (! (forall( (|S_$57| $state) (|p_$69| $ptr))(!(or (<= ($timestamp |S_$57| |p_$69|) ($current_timestamp |S_$57|)) (not ($ts_typed ($select.tm ($typemap |S_$57|) |p_$69|))))  :weight  0 :pattern ( ($select.sm ($statusmap |S_$57|) |p_$69|)))) :named ax_473))
   (assert (! (forall( (|S_$58| $state) (|p_$70| $ptr))(!(=> ($good_state |S_$58|) (and (= |S_$58| ($vs_state ($vs_ctor |S_$58| |p_$70|))) (= ($vs_base_ref ($vs_ctor |S_$58| |p_$70|)) ($ref |p_$70|))))  :pattern ( ($vs_ctor |S_$58| |p_$70|)))) :named ax_474))
   (assert (! (forall( (|S_$59| $state) (|p_$72| $ptr))(!(=> ($is_primitive ($typ |p_$72|)) (= ($owner |S_$59| |p_$72|) ($owner |S_$59| ($ts_emb ($ts |S_$59| |p_$72|)))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$72|)) ($owner |S_$59| |p_$72|)))) :named ax_475))
   (assert (! (forall( (|s_$6| $struct))($good_state ($vs_state |s_$6|))) :named ax_476))
   (assert (! (forall( (|S_$60| $state) (|p_$73| $ptr))(!(=> ($is_non_primitive ($typ |p_$73|)) (= ($st_owner ($select.sm ($statusmap |S_$60|) |p_$73|)) ($owner |S_$60| |p_$73|)))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$73|)) ($owner |S_$60| |p_$73|)))) :named ax_477))
   (assert (! (forall( (|S_$61| $state) (|p_$74| $ptr))(!(=> ($is_primitive ($typ |p_$74|)) (= ($st_closed ($select.sm ($statusmap |S_$61|) ($ts_emb ($ts |S_$61| |p_$74|)))) ($closed |S_$61| |p_$74|)))  :weight  0 :pattern ( ($is_primitive ($typ |p_$74|)) ($closed |S_$61| |p_$74|)))) :named ax_478))
   (assert (! (forall( (|S_$62| $state) (|p_$75| $ptr))(!(=> ($is_non_primitive ($typ |p_$75|)) (= ($st_closed ($select.sm ($statusmap |S_$62|) |p_$75|)) ($closed |S_$62| |p_$75|)))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$75|)) ($closed |S_$62| |p_$75|)))) :named ax_479))
   (assert (! (forall( (|S_$63| $state) (|p_$76| $ptr))(!(=> ($is_primitive ($typ |p_$76|)) (= ($timestamp |S_$63| |p_$76|) ($st_timestamp ($select.sm ($statusmap |S_$63|) ($ts_emb ($ts |S_$63| |p_$76|))))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$76|)) ($timestamp |S_$63| |p_$76|)))) :named ax_480))
   (assert (! (forall( (|S_$64| $state) (|p_$77| $ptr))(!(=> ($is_non_primitive ($typ |p_$77|)) (= ($timestamp |S_$64| |p_$77|) ($st_timestamp ($select.sm ($statusmap |S_$64|) |p_$77|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$77|)) ($timestamp |S_$64| |p_$77|)))) :named ax_481))
   (assert (! (forall( (|S_$65| $state) (|#p_$22| $ptr))(!(= ($owns |S_$65| |#p_$22|) ($int_to_ptrset ($select.mem ($memory |S_$65|) ($dot |#p_$22| ($owns_set_field ($typ |#p_$22|))))))  :weight  0 :pattern ( ($owns |S_$65| |#p_$22|)))) :named ax_482))
   (assert (! (forall( (|S_$66| $state) (|p_$78| $ptr))(!(= (and (and ($typed |S_$66| |p_$78|) (= ($owner |S_$66| |p_$78|) $me)) (not ($closed |S_$66| |p_$78|))) ($mutable |S_$66| |p_$78|))  :weight  0 :pattern ( ($mutable |S_$66| |p_$78|)))) :named ax_483))
   (assert (! (forall( (|S_$67| $state) (|#p_$23| $ptr))(!(=> ($good_state |S_$67|) (= ($typed |S_$67| |#p_$23|) ($ts_typed ($select.tm ($typemap |S_$67|) |#p_$23|))))  :weight  0 :pattern ( ($typed |S_$67| |#p_$23|)))) :named ax_484))
   (assert (! (forall( (|S_$68| $state) (|#p_$24| $ptr))(!(=> (and ($typed |S_$68| |#p_$24|) ($good_state |S_$68|)) (> ($ref |#p_$24|) 0))  :pattern ( ($typed |S_$68| |#p_$24|)))) :named ax_485))
   (assert (! (forall( (|S_$69| $state) (|#r_$5| Int) (|#t_$9| $ctype))(!(=> (and ($typed |S_$69| ($ptr |#t_$9| |#r_$5|)) ($in_range_phys_ptr |#r_$5|)) ($in_range_phys_ptr (- (+ |#r_$5| ($sizeof |#t_$9|)) 1)))  :pattern ( ($typed |S_$69| ($ptr |#t_$9| |#r_$5|))))) :named ax_486))
   (assert (! (forall( (|s_$7| $status))(!(and ($is_non_primitive ($typ ($st_owner |s_$7|))) (not (= $kind_primitive ($kind_of ($typ ($st_owner |s_$7|))))))  :pattern ( ($st_owner |s_$7|)))) :named ax_487))
   (assert (! (forall( (|S_$70| $state) (|p_$81| $ptr))(!($is_domain_root |S_$70| |p_$81|)  :pattern ( ($is_domain_root |S_$70| |p_$81|)))) :named ax_488))
   (assert (! (forall( (|S_$71| $state) (|p_$82| $ptr))(!(= (exists( (|q_$7| $ptr))(!(and (and (and (and (and (and (= ($owner |S_$71| |q_$7|) $me) ($closed |S_$71| |q_$7|)) ($typed2 |S_$71| |q_$7| ($typ |q_$7|))) (not (= $kind_primitive ($kind_of ($typ |q_$7|))))) ($is_non_primitive ($typ |q_$7|))) ($set_in |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|)))) ($is_domain_root |S_$71| |q_$7|))  :pattern ( ($set_in2 |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|)))))) ($in_wrapped_domain |S_$71| |p_$82|))  :pattern ( ($in_wrapped_domain |S_$71| |p_$82|)))) :named ax_489))
   (assert (! (forall( (|S_$72| $state) (|p_$83| $ptr))(!(= (and (or (and (and (or (= ($owner |S_$72| ($ts_emb ($ts |S_$72| |p_$83|))) $me) ($in_wrapped_domain |S_$72| ($ts_emb ($ts |S_$72| |p_$83|)))) (not ($is_primitive_ch ($typ ($ts_emb ($ts |S_$72| |p_$83|)))))) (and (or (not ($ts_is_volatile ($ts |S_$72| |p_$83|))) (not ($closed |S_$72| ($ts_emb ($ts |S_$72| |p_$83|))))) (= $kind_primitive ($kind_of ($typ |p_$83|))))) (and (or (= ($owner |S_$72| |p_$83|) $me) ($in_wrapped_domain |S_$72| |p_$83|)) (not ($is_primitive_ch ($typ |p_$83|))))) ($typed |S_$72| |p_$83|)) ($thread_local |S_$72| |p_$83|))  :pattern ( ($thread_local |S_$72| |p_$83|)))) :named ax_490))
   (assert (! (forall( (|S_$75| $state) (|T_$13| $ctype) (|sz_$14| Int) (|r_$9| Int))(!(= (and (forall( (|i_$8| Int))(!(=> (and (< |i_$8| |sz_$14|) (<= 0 |i_$8|)) ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|)))  :pattern ( ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|))))) ($mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|))) ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|)))  :pattern ( ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|))))) :named ax_491))
   (assert (! (forall( (|S_$77| $state) (|T_$15| $ctype) (|sz_$15| Int) (|r_$11| Int))(!(= (forall( (|i_$9| Int))(!(=> (and (< |i_$9| |sz_$15|) (<= 0 |i_$9|)) ($extent_zero |S_$77| ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))  :pattern ( ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))) ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|)))  :pattern ( ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|))))) :named ax_492))
   (assert (! (forall( (|S_$78| $state))(!(=> ($function_entry |S_$78|) (and ($full_stop |S_$78|) (>= ($current_timestamp |S_$78|) 0)))  :pattern ( ($function_entry |S_$78|)))) :named ax_493))
   (assert (! (forall( (|S_$79| $state))(!(=> ($full_stop |S_$79|) (and ($invok_state |S_$79|) ($good_state |S_$79|)))  :pattern ( ($full_stop |S_$79|)))) :named ax_494))
   (assert (! (forall( (|S_$80| $state))(!(=> ($invok_state |S_$80|) ($good_state |S_$80|))  :pattern ( ($invok_state |S_$80|)))) :named ax_495))
   (assert (! (forall( (|S_$82| $state) (|r_$12| Int) (|t_$21| $ctype))(!(= ($read_ptr_m |S_$82| ($ptr ($ptr_to |t_$21|) |r_$12|) |t_$21|) ($ptr |t_$21| ($select.mem ($memory |S_$82|) ($ptr ($ptr_to |t_$21|) |r_$12|))))  :pattern ( ($ptr |t_$21| ($select.mem ($memory |S_$82|) ($ptr ($ptr_to |t_$21|) |r_$12|)))))) :named ax_496))
   (assert (! (forall( (|S_$83| $state) (|r_$13| Int) (|t_$22| $ctype))(!(= ($read_ptr_m |S_$83| ($ptr ($spec_ptr_to |t_$22|) |r_$13|) |t_$22|) ($ptr |t_$22| ($select.mem ($memory |S_$83|) ($ptr ($spec_ptr_to |t_$22|) |r_$13|))))  :pattern ( ($ptr |t_$22| ($select.mem ($memory |S_$83|) ($ptr ($spec_ptr_to |t_$22|) |r_$13|)))))) :named ax_497))
   (assert (! (forall( (|S_$84| $state) (|p_$86| $ptr))(!(= ($read_version |S_$84| |p_$86|) ($int_to_version ($select.mem ($memory |S_$84|) |p_$86|)))  :weight  0 :pattern ( ($read_version |S_$84| |p_$86|)))) :named ax_498))
   (assert (! (forall( (|S_$85| $state) (|p_$87| $ptr))(!(= ($ver_domain ($read_version |S_$85| |p_$87|)) ($domain |S_$85| |p_$87|))  :weight  0 :pattern ( ($domain |S_$85| |p_$87|)))) :named ax_499))
   (assert (! (forall( (|S_$86| $state) (|p_$88| $ptr) (|q_$8| $ptr) (|l| $label))(!(=> ($in_domain_lab |S_$86| |p_$88| |q_$8| |l|) ($inv_lab |S_$86| |p_$88| |l|))  :weight  0 :pattern ( ($in_domain_lab |S_$86| |p_$88| |q_$8| |l|)))) :named ax_500))
   (assert (! (forall( (|S_$87| $state) (|p_$89| $ptr) (|q_$9| $ptr) (|l_$0| $label))(!(= ($in_domain_lab |S_$87| |p_$89| |q_$9| |l_$0|) ($in_domain |S_$87| |p_$89| |q_$9|))  :weight  0 :pattern ( ($in_domain_lab |S_$87| |p_$89| |q_$9| |l_$0|)))) :named ax_501))
   (assert (! (forall( (|S_$88| $state) (|p_$90| $ptr) (|q_$10| $ptr) (|l_$1| $label))(!(=> ($in_vdomain_lab |S_$88| |p_$90| |q_$10| |l_$1|) ($inv_lab |S_$88| |p_$90| |l_$1|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$88| |p_$90| |q_$10| |l_$1|)))) :named ax_502))
   (assert (! (forall( (|S_$89| $state) (|p_$91| $ptr) (|q_$11| $ptr) (|l_$2| $label))(!(= ($in_vdomain_lab |S_$89| |p_$91| |q_$11| |l_$2|) ($in_vdomain |S_$89| |p_$91| |q_$11|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$89| |p_$91| |q_$11| |l_$2|)))) :named ax_503))
   (assert (! (forall( (|S_$90| $state) (|p_$92| $ptr) (|q_$12| $ptr))(!(=> ($in_domain |S_$90| |p_$92| |q_$12|) (and (forall( (|r_$14| $ptr))(!(=> (and ($set_in |r_$14| ($owns |S_$90| |p_$92|)) (not ($has_volatile_owns_set ($typ |p_$92|)))) ($set_in2 |r_$14| ($ver_domain ($read_version |S_$90| |q_$12|))))  :pattern ( ($set_in |r_$14| ($owns |S_$90| |p_$92|))))) (and ($set_in |p_$92| ($domain |S_$90| |q_$12|)) ($closed |S_$90| |p_$92|))))  :weight  0 :pattern ( ($in_domain |S_$90| |p_$92| |q_$12|)))) :named ax_504))
   (assert (! (forall( (|S_$91| $state) (|p_$93| $ptr))(!(=> (and (and (and (and (and (= ($owner |S_$91| |p_$93|) $me) ($closed |S_$91| |p_$93|)) ($typed2 |S_$91| |p_$93| ($typ |p_$93|))) (not (= $kind_primitive ($kind_of ($typ |p_$93|))))) ($is_non_primitive ($typ |p_$93|))) ($full_stop |S_$91|)) ($in_domain |S_$91| |p_$93| |p_$93|))  :pattern ( ($in_domain |S_$91| |p_$93| |p_$93|)))) :named ax_505))
   (assert (! (forall( (|S_$92| $state) (|p_$94| $ptr) (|q_$13| $ptr))(!(=> (and ($set_in |q_$13| ($domain |S_$92| |p_$94|)) ($full_stop |S_$92|)) ($in_domain |S_$92| |q_$13| |p_$94|))  :weight  0 :pattern ( ($in_domain |S_$92| |q_$13| |p_$94|)))) :named ax_506))
   (assert (! (forall( (|S_$93| $state) (|p_$95| $ptr) (|q_$14| $ptr) (|r_$15| $ptr))(!(=> (and ($set_in0 |r_$15| ($owns |S_$93| |q_$14|)) (and ($set_in |q_$14| ($domain |S_$93| |p_$95|)) (not ($has_volatile_owns_set ($typ |q_$14|))))) (and ($set_in0 |r_$15| ($owns |S_$93| |q_$14|)) ($in_domain |S_$93| |r_$15| |p_$95|)))  :weight  0 :pattern ( ($set_in |q_$14| ($domain |S_$93| |p_$95|)) ($in_domain |S_$93| |r_$15| |p_$95|)))) :named ax_507))
   (assert (! (forall( (|S_$94| $state) (|p_$96| $ptr) (|q_$15| $ptr) (|r_$16| $ptr))(!(=> (and (forall( (|S1_$8| $state))(=> (and (and (= ($read_version |S1_$8| |p_$96|) ($read_version |S_$94| |p_$96|)) ($inv2 |S1_$8| |S1_$8| |q_$15| ($typ |q_$15|))) (= ($domain |S1_$8| |p_$96|) ($domain |S_$94| |p_$96|))) ($set_in0 |r_$16| ($owns |S1_$8| |q_$15|)))) (and ($set_in |q_$15| ($domain |S_$94| |p_$96|)) ($has_volatile_owns_set ($typ |q_$15|)))) (and ($set_in0 |r_$16| ($owns |S_$94| |q_$15|)) ($in_vdomain |S_$94| |r_$16| |p_$96|)))  :weight  0 :pattern ( ($set_in |q_$15| ($domain |S_$94| |p_$96|)) ($in_vdomain |S_$94| |r_$16| |p_$96|)))) :named ax_508))
   (assert (! (forall( (|S_$95| $state) (|p_$97| $ptr) (|q_$16| $ptr))(!(=> ($in_vdomain |S_$95| |p_$97| |q_$16|) ($in_domain |S_$95| |p_$97| |q_$16|))  :weight  0 :pattern ( ($in_vdomain |S_$95| |p_$97| |q_$16|)))) :named ax_509))
   (assert (! (forall( (|S_$96| $state) (|p_$98| $ptr) (|d| $ptr) (|f_$23| $field))(!(=> (and ($set_in |p_$98| ($domain |S_$96| |d|)) ($is_primitive_non_volatile_field |f_$23|)) (= ($select.mem ($memory |S_$96|) ($dot |p_$98| |f_$23|)) ($fetch_from_domain ($read_version |S_$96| |d|) ($dot |p_$98| |f_$23|))))  :pattern ( ($set_in |p_$98| ($domain |S_$96| |d|)) ($is_primitive_non_volatile_field |f_$23|) ($select.mem ($memory |S_$96|) ($dot |p_$98| |f_$23|))))) :named ax_510))
   (assert (! (forall( (|S_$97| $state) (|p_$99| $ptr) (|d_$0| $ptr))(!(=> (and ($set_in |p_$99| ($domain |S_$97| |d_$0|)) ($full_stop |S_$97|)) (and ($typed |S_$97| |p_$99|) (not ($is_volatile |S_$97| |p_$99|))))  :pattern ( ($full_stop |S_$97|) ($set_in |p_$99| ($domain |S_$97| |d_$0|)) ($select.sm ($statusmap |S_$97|) |p_$99|)) :pattern ( ($full_stop |S_$97|) ($set_in |p_$99| ($domain |S_$97| |d_$0|)) ($select.tm ($typemap |S_$97|) |p_$99|)))) :named ax_511))
   (assert (! (forall( (|S_$98| $state) (|p_$100| $ptr) (|d_$1| $ptr) (|f_$24| $field))(!(=> (and (and ($set_in |p_$100| ($domain |S_$98| |d_$1|)) ($full_stop |S_$98|)) ($is_primitive_non_volatile_field |f_$24|)) (and ($typed |S_$98| ($dot |p_$100| |f_$24|)) (not ($is_volatile |S_$98| ($dot |p_$100| |f_$24|)))))  :pattern ( ($set_in |p_$100| ($domain |S_$98| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($owner |S_$98| ($dot |p_$100| |f_$24|))) :pattern ( ($set_in |p_$100| ($domain |S_$98| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($select.tm ($typemap |S_$98|) ($dot |p_$100| |f_$24|))))) :named ax_512))
   (assert (! (forall( (|S_$99| $state) (|p_$101| $ptr) (|d_$2| $ptr) (|f_$25| $field) (|sz_$16| Int) (|i_$10| Int) (|t_$23| $ctype))(!(=> (and (< |i_$10| |sz_$16|) (and (<= 0 |i_$10|) (and (and ($set_in |p_$101| ($domain |S_$99| |d_$2|)) ($full_stop |S_$99|)) ($is_primitive_embedded_array |f_$25| |sz_$16|)))) (= ($select.mem ($memory |S_$99|) ($idx ($dot |p_$101| |f_$25|) |i_$10| |t_$23|)) ($fetch_from_domain ($read_version |S_$99| |d_$2|) ($idx ($dot |p_$101| |f_$25|) |i_$10| |t_$23|))))  :pattern ( ($set_in |p_$101| ($domain |S_$99| |d_$2|)) ($is_primitive_embedded_array |f_$25| |sz_$16|) ($select.mem ($memory |S_$99|) ($idx ($dot |p_$101| |f_$25|) |i_$10| |t_$23|))))) :named ax_513))
   (assert (! (forall( (|s| $state))(= |s| |s|)) :named ax_514))
   (assert (! (forall( (|S0_$2| $state) (|S_$118| $state) (|l_$4| $ptr) (|p_$114| $ptr))(!(and (and (and (and (= ($store.sm ($statusmap |S_$118|) |p_$114| ($released |S_$118| |l_$4| |p_$114|)) ($statusmap ($release |S0_$2| |S_$118| |l_$4| |p_$114|))) ($closed ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|)) (= ($owner ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|) $me)) (= ($ref_cnt |S_$118| |p_$114|) ($ref_cnt ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|))) (= ($timestamp ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|) ($current_timestamp |S0_$2|)))  :pattern ( ($release |S0_$2| |S_$118| |l_$4| |p_$114|)))) :named ax_515))
   (assert (! (forall( (|S1_$11| $state) (|S2_$9| $state) (|r_$21| Int) (|t_$32| $ctype) (|subject_$4| $field))(!($instantiate_int ($select.mem ($memory |S2_$9|) ($dot ($ptr |t_$32| |r_$21|) |subject_$4|)))  :pattern ( ($is_owner_approved |t_$32| |subject_$4|) ($post_unwrap |S1_$11| |S2_$9|) ($select.mem ($memory |S1_$11|) ($dot ($ptr |t_$32| |r_$21|) |subject_$4|))))) :named ax_516))
   (assert (! (forall( (|S1_$16| $state) (|S2_$12| $state) (|p_$161| $ptr) (|W_$1| $ptrset))(!(= (and (forall( (|q_$24| $ptr))(!(=> (and (= $kind_primitive ($kind_of ($typ |q_$24|))) (not ($set_in |q_$24| |W_$1|))) (= ($fetch_from_domain ($read_version |S2_$12| |p_$161|) |q_$24|) ($fetch_from_domain ($read_version |S1_$16| |p_$161|) |q_$24|)))  :pattern ( ($fetch_from_domain ($read_version |S2_$12| |p_$161|) |q_$24|)))) (= ($domain |S2_$12| |p_$161|) ($domain |S1_$16| |p_$161|))) ($domain_updated_at |S1_$16| |S2_$12| |p_$161| |W_$1|))  :pattern ( ($domain_updated_at |S1_$16| |S2_$12| |p_$161| |W_$1|)))) :named ax_517))
   (assert (! (forall( (|S1_$4| $state) (|S0_$1| $state))(= (forall( (|r_$26| Int))(!(=> (and ($closed |S1_$4| ($ptr ^^claim |r_$26|)) ($closed |S0_$1| ($ptr ^^claim |r_$26|))) ($valid_claim |S1_$4| ($ptr ^^claim |r_$26|)))  :pattern ( ($closed |S1_$4| ($ptr ^^claim |r_$26|))))) (forall( (|r| Int))(!(=> (and ($closed |S1_$4| ($ptr ^^claim |r|)) ($closed |S0_$1| ($ptr ^^claim |r|))) ($valid_claim |S1_$4| ($ptr ^^claim |r|)))  :pattern ( ($closed |S1_$4| ($ptr ^^claim |r|))))))) :named ax_518))
   (assert (! (forall( (|S1_$5| $state) (|S2_$4| $state) (|p_$61| $ptr) (|sz_$13| Int))(!(=> (forall( (|i_$7| Int))(=> (and (< |i_$7| |sz_$13|) (<= 0 |i_$7|)) (= ($select.mem ($memory |S2_$4|) ($idx |p_$61| |i_$7| ($typ |p_$61|))) ($select.mem ($memory |S1_$5|) ($idx |p_$61| |i_$7| ($typ |p_$61|)))))) (= ($select_range.mem ($memory |S2_$4|) |p_$61| |sz_$13|) ($select_range.mem ($memory |S1_$5|) |p_$61| |sz_$13|)))  :pattern ( ($call_transition |S1_$5| |S2_$4|) ($select_range.mem ($memory |S2_$4|) |p_$61| |sz_$13|)))) :named ax_519))
   (assert (! (forall( (|s1_$7| $ptrset) (|s2_$7| $ptrset))(!(=> (forall( (|p_$119| $ptr))(!(and (=> ($set_in |p_$119| |s2_$7|) (not ($set_in |p_$119| |s1_$7|))) (=> ($set_in |p_$119| |s1_$7|) (not ($set_in |p_$119| |s2_$7|))))  :pattern ( ($dont_instantiate |p_$119|)))) ($set_disjoint |s1_$7| |s2_$7|))  :weight  0 :pattern ( ($set_disjoint |s1_$7| |s2_$7|)))) :named ax_520))
   (assert (! (forall( (|S1_$7| $state) (|S2_$6| $state) (|p_$80| $ptr))(!(=> ($call_transition |S1_$7| |S2_$6|) ($instantiate_int ($select.mem ($memory |S1_$7|) |p_$80|)))  :pattern ( ($select.mem ($memory |S2_$6|) |p_$80|) ($call_transition |S1_$7| |S2_$6|)))) :named ax_521))
   (assert (! (forall( (|s1_$8| $state) (|s2_$8| $state) (|p_$142| $ptr) (|t_$34| $ctype) (|sz_$35| Int))(!(=> ($is_primitive |t_$34|) (=> ($state_spans_the_same |s1_$8| |s2_$8| |p_$142| ($array |t_$34| |sz_$35|)) (forall( (|i_$24| Int))(!(=> (and (< |i_$24| |sz_$35|) (<= 0 |i_$24|)) (= ($mem |s2_$8| ($idx ($ptr |t_$34| ($ref |p_$142|)) |i_$24| |t_$34|)) ($mem |s1_$8| ($idx ($ptr |t_$34| ($ref |p_$142|)) |i_$24| |t_$34|))))  :pattern ( ($select.mem ($memory |s2_$8|) ($idx ($ptr |t_$34| ($ref |p_$142|)) |i_$24| |t_$34|)))))))  :pattern ( ($state_spans_the_same |s1_$8| |s2_$8| |p_$142| ($array |t_$34| |sz_$35|)) ($is_primitive |t_$34|)))) :named ax_522))
   (assert (! (forall( (|s2_$2| $state) (|s1_$2| $state))(= (forall( (|p_$28_$0| $ptr))(!(=> ($mutable |s1_$2| |p_$28_$0|) ($mutable |s2_$2| |p_$28_$0|))  :pattern ( ($st |s2_$2| |p_$28_$0|)) :pattern ( ($ts |s2_$2| |p_$28_$0|)))) (forall( (|p_$28| $ptr))(!(=> ($mutable |s1_$2| |p_$28|) ($mutable |s2_$2| |p_$28|))  :pattern ( ($select.sm ($statusmap |s2_$2|) |p_$28|)) :pattern ( ($select.tm ($typemap |s2_$2|) |p_$28|)))))) :named ax_523))
   (assert (! (forall( (|s2_$3| $state) (|s1_$3| $state))(= (and (= ($typemap |s2_$3|) ($typemap |s1_$3|)) (= ($statusmap |s2_$3|) ($statusmap |s1_$3|))) (and (= ($typemap |s2_$3|) ($typemap |s1_$3|)) (= ($statusmap |s2_$3|) ($statusmap |s1_$3|))))) :named ax_524))
   (assert (! (forall( (|S2_$3| $state) (|S1_$3| $state))(= (and (and (forall( (|p_$40_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$40_$1|) (and ($ts_eq |S1_$3| |S2_$3| |p_$40_$1|) ($thread_local |S2_$3| |p_$40_$1|)))  :pattern ( ($ts |S2_$3| |p_$40_$1|)))) (and (forall( (|p_$39_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$39_$1|) (and ($thread_local |S2_$3| |p_$39_$1|) ($st_eq |S1_$3| |S2_$3| |p_$39_$1|)))  :pattern ( ($st |S2_$3| |p_$39_$1|)))) (and (forall( (|p_$38_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$38_$1|) (and ($thread_local |S2_$3| |p_$38_$1|) ($mem_eq |S1_$3| |S2_$3| |p_$38_$1|)))  :pattern ( ($mem |S2_$3| |p_$38_$1|)))) (forall( (|p_$37_$1| $ptr))(!(=> ($nested |S2_$3| |p_$37_$1|) ($nested |S1_$3| |p_$37_$1|))  :pattern ( ($st |S2_$3| |p_$37_$1|))))))) ($timestamp_post |S1_$3| |S2_$3|)) (and (and (forall( (|p_$40| $ptr))(!(=> ($thread_local |S1_$3| |p_$40|) (and (= ($ts |S2_$3| |p_$40|) ($ts |S1_$3| |p_$40|)) ($thread_local |S2_$3| |p_$40|)))  :pattern ( ($select.tm ($typemap |S2_$3|) |p_$40|)))) (and (forall( (|p_$39| $ptr))(!(=> ($thread_local |S1_$3| |p_$39|) (and ($thread_local |S2_$3| |p_$39|) (= ($st |S2_$3| |p_$39|) ($st |S1_$3| |p_$39|))))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$39|)))) (and (forall( (|p_$38| $ptr))(!(=> ($thread_local |S1_$3| |p_$38|) (and ($thread_local |S2_$3| |p_$38|) (= ($mem |S2_$3| |p_$38|) ($mem |S1_$3| |p_$38|))))  :pattern ( ($select.mem ($memory |S2_$3|) |p_$38|)))) (forall( (|p_$37| $ptr))(!(=> (not (= $kind_thread ($kind_of ($typ ($owner |S2_$3| |p_$37|))))) (not (= $kind_thread ($kind_of ($typ ($owner |S1_$3| |p_$37|))))))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$37|))))))) (and (and (forall( (|p_$32_$3| $ptr))(!(<= ($timestamp |S1_$3| |p_$32_$3|) ($timestamp |S2_$3| |p_$32_$3|))  :weight  0 :pattern ( ($timestamp |S2_$3| |p_$32_$3|)))) (<= ($current_timestamp |S1_$3|) ($current_timestamp |S2_$3|))) ($call_transition |S1_$3| |S2_$3|))))) :named ax_525))
   (assert (! (forall( (|subject_$0| $field) (|approver_$0| $field) (|this_$0| $ptr) (|S2_$1| $state) (|S1_$1| $state))(= (or (or (or (= 0 ($ref ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))))) ($mem_eq |S1_$1| |S2_$1| ($dot |this_$0| |subject_$0|))) (and ($inv2nt |S1_$1| |S2_$1| ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|)))) (not ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|)))))))) (and ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))))) (not (= ($read_vol_version |S2_$1| |this_$0|) ($read_vol_version |S1_$1| |this_$0|))))) ($inv_is_approved_by_ptr |S1_$1| |S2_$1| |this_$0| ($int_to_ptr ($mem |S1_$1| ($dot |this_$0| |approver_$0|))) |subject_$0|))) :named ax_526))
   (assert (! (forall( (|subject_$1| $field) (|this_$1| $ptr) (|S2_$2| $state) (|S1_$2| $state))(= (or (or (or (= 0 ($ref ($owner |S1_$2| |this_$1|))) ($mem_eq |S1_$2| |S2_$2| ($dot |this_$1| |subject_$1|))) (and ($inv2nt |S1_$2| |S2_$2| ($owner |S1_$2| |this_$1|)) (not ($is_threadtype ($typ ($owner |S1_$2| |this_$1|)))))) (and ($is_threadtype ($typ ($owner |S1_$2| |this_$1|))) (not (= ($read_vol_version |S2_$2| |this_$1|) ($read_vol_version |S1_$2| |this_$1|))))) ($inv_is_approved_by_ptr |S1_$2| |S2_$2| |this_$1| ($owner |S1_$2| |this_$1|) |subject_$1|))) :named ax_527))
   (assert (! (forall( (|subject| $field) (|approver| $ptr) (|this| $ptr) (|S2_$0| $state) (|S1_$0| $state))(= (or (or (or (= 0 ($ref |approver|)) (= ($mem |S2_$0| ($dot |this| |subject|)) ($mem |S1_$0| ($dot |this| |subject|)))) (and ($inv2 |S1_$0| |S2_$0| |approver| ($typ |approver|)) (not ($is_threadtype ($typ |approver|))))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S2_$0| |this|) ($read_vol_version |S1_$0| |this|))))) (or (or (or (= 0 ($ref |approver|)) ($mem_eq |S1_$0| |S2_$0| ($dot |this| |subject|))) (and ($inv2nt |S1_$0| |S2_$0| |approver|) (not ($is_threadtype ($typ |approver|))))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S2_$0| |this|) ($read_vol_version |S1_$0| |this|))))))) :named ax_528))
   (assert (! (forall( (|sz_$0| Int) (|T| $ctype) (|p_$35| $ptr))(= (and (forall( (|S_$40_$1| $state) (|i_$0_$1| Int))(!(=> ($good_state |S_$40_$1|) (=> (and (< |i_$0_$1| |sz_$0|) (<= 0 |i_$0_$1|)) (and (and ($typed |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|)) (not ($is_volatile |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|)))) (=> ($program_entry_point_ch |S_$40_$1|) ($mutable |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|))))))  :pattern ( ($st |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|))) :pattern ( ($ts |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|))))) ($is |p_$35| |T|)) (and (forall( (|S_$40| $state) (|i_$0| Int))(!(=> ($good_state |S_$40|) (=> (and (< |i_$0| |sz_$0|) (<= 0 |i_$0|)) (and (and ($typed |S_$40| ($idx |p_$35| |i_$0| |T|)) (not ($ts_is_volatile ($ts |S_$40| ($idx |p_$35| |i_$0| |T|))))) (=> ($program_entry_point_ch |S_$40|) ($mutable |S_$40| ($idx |p_$35| |i_$0| |T|))))))  :pattern ( ($select.sm ($statusmap |S_$40|) ($idx |p_$35| |i_$0| |T|))) :pattern ( ($select.tm ($typemap |S_$40|) ($idx |p_$35| |i_$0| |T|))))) ($is |p_$35| |T|)))) :named ax_529))
   (assert (! (forall( (|sz_$1| Int) (|T_$0| $ctype) (|p_$41| $ptr) (|S_$46| $state))(= (forall( (|i_$1_$0| Int))(!(=> (and (< |i_$1_$0| |sz_$1|) (<= 0 |i_$1_$0|)) ($thread_local2 |S_$46| ($idx |p_$41| |i_$1_$0| |T_$0|) |T_$0|))  :pattern ( ($st |S_$46| ($idx |p_$41| |i_$1_$0| |T_$0|))) :pattern ( ($ts |S_$46| ($idx |p_$41| |i_$1_$0| |T_$0|))))) (forall( (|i_$1| Int))(!(=> (and (< |i_$1| |sz_$1|) (<= 0 |i_$1|)) (and ($thread_local |S_$46| ($idx |p_$41| |i_$1| |T_$0|)) ($is ($idx |p_$41| |i_$1| |T_$0|) |T_$0|)))  :pattern ( ($select.sm ($statusmap |S_$46|) ($idx |p_$41| |i_$1| |T_$0|))) :pattern ( ($select.tm ($typemap |S_$46|) ($idx |p_$41| |i_$1| |T_$0|))))))) :named ax_530))
   (assert (! (forall( (|sz_$10| Int) (|T_$9| $ctype) (|arr_$1| $ptr) (|q_$0| $ptr))(= (and (and (<= 0 ($index_within |q_$0| |arr_$1|)) (<= ($index_within |q_$0| |arr_$1|) (- |sz_$10| 1))) ($set_in |q_$0| ($full_extent ($idx |arr_$1| ($index_within |q_$0| |arr_$1|) |T_$9|)))) (and ($in_range 0 ($index_within |q_$0| |arr_$1|) (- |sz_$10| 1)) ($in_full_extent_of |q_$0| ($idx |arr_$1| ($index_within |q_$0| |arr_$1|) |T_$9|))))) :named ax_531))
   (assert (! (forall( (|sz_$11| Int) (|T_$10| $ctype) (|arr_$2| $ptr) (|q_$1| $ptr) (|S_$53| $state))(= (and (and (<= 0 ($index_within |q_$1| |arr_$2|)) (<= ($index_within |q_$1| |arr_$2|) (- |sz_$11| 1))) ($set_in |q_$1| ($extent |S_$53| ($idx |arr_$2| ($index_within |q_$1| |arr_$2|) |T_$10|)))) (and ($in_range 0 ($index_within |q_$1| |arr_$2|) (- |sz_$11| 1)) ($in_extent_of |S_$53| |q_$1| ($idx |arr_$2| ($index_within |q_$1| |arr_$2|) |T_$10|))))) :named ax_532))
   (assert (! (forall( (|sz_$2| Int) (|T_$1| $ctype) (|p_$42| $ptr) (|S_$47| $state))(= (and (forall( (|i_$2_$1| Int))(!(=> (and (< |i_$2_$1| |sz_$2|) (<= 0 |i_$2_$1|)) ($mutable |S_$47| ($idx |p_$42| |i_$2_$1| |T_$1|)))  :pattern ( ($st |S_$47| ($idx |p_$42| |i_$2_$1| |T_$1|))) :pattern ( ($ts |S_$47| ($idx |p_$42| |i_$2_$1| |T_$1|))))) ($is_array |S_$47| |p_$42| |T_$1| |sz_$2|)) (and (forall( (|i_$2| Int))(!(=> (and (< |i_$2| |sz_$2|) (<= 0 |i_$2|)) ($mutable |S_$47| ($idx |p_$42| |i_$2| |T_$1|)))  :pattern ( ($select.sm ($statusmap |S_$47|) ($idx |p_$42| |i_$2| |T_$1|))) :pattern ( ($select.tm ($typemap |S_$47|) ($idx |p_$42| |i_$2| |T_$1|))))) ($is_array |S_$47| |p_$42| |T_$1| |sz_$2|)))) :named ax_533))
   (assert (! (forall( (|sz_$7| Int) (|T_$6| $ctype) (|p_$49| $ptr))(= ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)) ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)))) :named ax_534))
   (assert (! (forall( (|sz_$8| Int) (|T_$7| $ctype) (|arr| $ptr) (|s2_$4| $state) (|s1_$4| $state))(= (forall( (|#i_$1| Int))(!(=> (and (<= 0 |#i_$1|) (< |#i_$1| |sz_$8|)) ($mem_eq |s1_$4| |s2_$4| ($idx |arr| |#i_$1| |T_$7|)))  :pattern ( ($idx |arr| |#i_$1| |T_$7|)))) (forall( (|#i| Int))(!(=> (and (<= 0 |#i|) (< |#i| |sz_$8|)) (= ($mem |s2_$4| ($idx |arr| |#i| |T_$7|)) ($mem |s1_$4| ($idx |arr| |#i| |T_$7|))))  :pattern ( ($idx |arr| |#i| |T_$7|)))))) :named ax_535))
   (assert (! (forall( (|sz_$9| Int) (|T_$8| $ctype) (|arr_$0| $ptr) (|q| $ptr))(= (and (= |q| ($idx |arr_$0| ($index_within |q| |arr_$0|) |T_$8|)) (and (<= 0 ($index_within |q| |arr_$0|)) (<= ($index_within |q| |arr_$0|) (- |sz_$9| 1)))) (and (= |q| ($idx |arr_$0| ($index_within |q| |arr_$0|) |T_$8|)) ($in_range 0 ($index_within |q| |arr_$0|) (- |sz_$9| 1))))) :named ax_536))
   (assert (! (forall( (|sz| Int) (|p_$3| $ptr) (|s_$1| $state))(= ($select_range.mem ($memory |s_$1|) |p_$3| |sz|) ($select_range.mem ($memory |s_$1|) |p_$3| |sz|))) :named ax_537))
   (assert (! (forall( (|t_$0| $ctype))(= (= ($kind_of |t_$0|) $kind_composite) (= ($kind_of |t_$0|) $kind_composite))) :named ax_538))
   (assert (! (forall( (|t_$1| $ctype))(= (= ($kind_of |t_$1|) $kind_array) (= ($kind_of |t_$1|) $kind_array))) :named ax_539))
   (assert (! (forall( (|t_$10| $ctype))(!(= (= $kind_primitive ($kind_of |t_$10|)) ($is_primitive |t_$10|))  :weight  0 :pattern ( ($is_primitive |t_$10|)))) :named ax_540))
   (assert (! (forall( (|t_$11| $ctype))(!(= (= ($kind_of |t_$11|) $kind_composite) ($is_composite |t_$11|))  :weight  0 :pattern ( ($is_composite |t_$11|)))) :named ax_541))
   (assert (! (forall( (|T_$11| $ctype))(!(=> ($is_primitive |T_$11|) (and (forall( (|r_$7| Int) (|S_$73| $state))(!(= ($mutable |S_$73| ($ptr |T_$11| |r_$7|)) ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|)))  :pattern ( ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|))))) (forall( (|r_$6| Int) (|p_$84| $ptr))(!(= (= |p_$84| ($ptr |T_$11| |r_$6|)) ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|))))  :pattern ( ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|))))))))  :pattern ( ($is_primitive |T_$11|)))) :named ax_542))
   (assert (! (forall( (|t_$12| $ctype))(!(= (= ($kind_of |t_$12|) $kind_array) ($is_arraytype |t_$12|))  :weight  0 :pattern ( ($is_arraytype |t_$12|)))) :named ax_543))
   (assert (! (forall( (|T_$12| $ctype))(!(=> ($is_primitive |T_$12|) (forall( (|S_$74| $state) (|r_$8| Int) (|p_$85| $ptr))(!(= (= |p_$85| ($ptr |T_$12| |r_$8|)) ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|))))  :pattern ( ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|)))))))  :pattern ( ($is_primitive |T_$12|)))) :named ax_544))
   (assert (! (forall( (|t_$13| $ctype))(!(= (= $kind_thread ($kind_of |t_$13|)) ($is_threadtype |t_$13|))  :weight  0 :pattern ( ($is_threadtype |t_$13|)))) :named ax_545))
   (assert (! (forall( (|t_$14| $ctype))(!(=> ($is_composite |t_$14|) ($is_non_primitive |t_$14|))  :weight  0 :pattern ( ($is_composite |t_$14|)))) :named ax_546))
   (assert (! (forall( (|T_$14| $ctype))(!(=> ($is_primitive |T_$14|) (forall( (|S_$76| $state) (|r_$10| Int))(!(= (= 0 ($select.mem ($memory |S_$76|) ($ptr |T_$14| |r_$10|))) ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|)))  :pattern ( ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|))))))  :pattern ( ($is_primitive |T_$14|)))) :named ax_547))
   (assert (! (forall( (|t_$15| $ctype))(!(=> ($is_arraytype |t_$15|) ($is_non_primitive |t_$15|))  :weight  0 :pattern ( ($is_arraytype |t_$15|)))) :named ax_548))
   (assert (! (forall( (|T_$16| $ctype) (|s_$12| Int))(!(= |T_$16| ($element_type ($array |T_$16| |s_$12|)))  :pattern ( ($array |T_$16| |s_$12|)))) :named ax_549))
   (assert (! (forall( (|t_$16| $ctype))(!(=> ($is_threadtype |t_$16|) ($is_non_primitive |t_$16|))  :weight  0 :pattern ( ($is_threadtype |t_$16|)))) :named ax_550))
   (assert (! (forall( (|T_$17| $ctype) (|s_$13| Int))(!(= |s_$13| ($array_length ($array |T_$17| |s_$13|)))  :pattern ( ($array |T_$17| |s_$13|)))) :named ax_551))
   (assert (! (forall( (|T_$18| $ctype) (|s_$14| Int))(!(= 0 ($ptr_level ($array |T_$18| |s_$14|)))  :pattern ( ($array |T_$18| |s_$14|)))) :named ax_552))
   (assert (! (forall( (|T_$19| $ctype) (|s_$15| Int))(!($is_arraytype ($array |T_$19| |s_$15|))  :pattern ( ($array |T_$19| |s_$15|)))) :named ax_553))
   (assert (! (forall( (|t_$19| $ctype))(!(=> ($is_record_type |t_$19|) ($is_primitive |t_$19|))  :pattern ( ($is_record_type |t_$19|)))) :named ax_554))
   (assert (! (forall( (|t_$2| $ctype))(= (not (= $kind_primitive ($kind_of |t_$2|))) (not (= $kind_primitive ($kind_of |t_$2|))))) :named ax_555))
   (assert (! (forall( (|T_$20| $ctype) (|s_$16| Int))(!(not ($is_claimable ($array |T_$20| |s_$16|)))  :pattern ( ($array |T_$20| |s_$16|)))) :named ax_556))
   (assert (! (forall( (|T_$21| $ctype) (|s_$17| Int))(!(= (* ($sizeof |T_$21|) |s_$17|) ($sizeof ($array |T_$21| |s_$17|)))  :pattern ( ($sizeof ($array |T_$21| |s_$17|))))) :named ax_557))
   (assert (! (forall( (|t_$3| $ctype) (|p_$7| $ptr) (|S| $state))(= ($ptr |t_$3| ($select.mem ($memory |S|) |p_$7|)) ($ptr |t_$3| ($mem |S| |p_$7|)))) :named ax_558))
   (assert (! (forall( (|t_$38| $ctype) (|x_$26| Int) (|y_$8| Int))(!(= ($unchk_add |t_$38| |x_$26| |y_$8|) ($unchecked |t_$38| (+ |x_$26| |y_$8|)))  :weight  0 :pattern ( ($unchk_add |t_$38| |x_$26| |y_$8|)))) :named ax_559))
   (assert (! (forall( (|t_$4| $ctype) (|f| $field))(= (and (= |t_$4| ($field_parent_type |f|)) ($is_base_field |f|)) (and (= |t_$4| ($field_parent_type |f|)) ($is_base_field |f|)))) :named ax_560))
   (assert (! (forall( (|t_$42| $ctype) (|val_$17| Int))(!(=> ($in_range_t |t_$42| |val_$17|) (= |val_$17| ($unchecked |t_$42| |val_$17|)))  :pattern ( ($unchecked |t_$42| |val_$17|)))) :named ax_561))
   (assert (! (forall( (|t_$43| $ctype) (|val_$18| Int))(!($in_range_t |t_$43| ($unchecked |t_$43| |val_$18|))  :pattern ( ($unchecked |t_$43| |val_$18|)))) :named ax_562))
   (assert (! (forall( (|t_$44| $ctype) (|x_$40| Int) (|y_$15| Int) (|z_$0| Int))(!(=> (and (>= |x_$40| 0) (and ($in_range_t |t_$44| |x_$40|) ($in_range_t |t_$44| (- ($_pow2 |y_$15|) 1)))) (= (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| (- ($_pow2 |y_$15|) 1))))  :pattern ( (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| |z_$0|)))) :named ax_563))
   (assert (! (forall( (|t_$45| $ctype) (|x_$46| Int) (|y_$21| Int))(!(=> (and (<= 0 |x_$46|) ($in_range_t |t_$45| |x_$46|)) (and (<= 0 ($_and |t_$45| |x_$46| |y_$21|)) (<= ($_and |t_$45| |x_$46| |y_$21|) |x_$46|)))  :pattern ( ($_and |t_$45| |x_$46| |y_$21|)))) :named ax_564))
   (assert (! (forall( (|t_$46| $ctype) (|x_$47| Int) (|y_$22| Int))(!(=> (and (and (and (<= 0 |y_$22|) (<= 0 |x_$47|)) ($in_range_t |t_$46| |x_$47|)) ($in_range_t |t_$46| |y_$22|)) (and (<= ($_and |t_$46| |x_$47| |y_$22|) |y_$22|) (<= ($_and |t_$46| |x_$47| |y_$22|) |x_$47|)))  :pattern ( ($_and |t_$46| |x_$47| |y_$22|)))) :named ax_565))
   (assert (! (forall( (|t_$47| $ctype) (|x_$48| Int) (|y_$23| Int))(!(=> (and (and (and (<= 0 |y_$23|) (<= 0 |x_$48|)) ($in_range_t |t_$47| |x_$48|)) ($in_range_t |t_$47| |y_$23|)) (and (<= 0 ($_or |t_$47| |x_$48| |y_$23|)) (<= ($_or |t_$47| |x_$48| |y_$23|) (+ |x_$48| |y_$23|))))  :pattern ( ($_or |t_$47| |x_$48| |y_$23|)))) :named ax_566))
   (assert (! (forall( (|t_$48| $ctype) (|x_$49| Int) (|y_$24| Int))(!(=> (and (and (and (<= 0 |y_$24|) (<= 0 |x_$49|)) ($in_range_t |t_$48| |x_$49|)) ($in_range_t |t_$48| |y_$24|)) (and (<= |y_$24| ($_or |t_$48| |x_$49| |y_$24|)) (<= |x_$49| ($_or |t_$48| |x_$49| |y_$24|))))  :pattern ( ($_or |t_$48| |x_$49| |y_$24|)))) :named ax_567))
   (assert (! (forall( (|t_$49| $ctype) (|x_$50| Int) (|y_$25| Int) (|z_$1| Int))(!(=> (and (and (and (< |y_$25| ($_pow2 |z_$1|)) (and (< |x_$50| ($_pow2 |z_$1|)) (and (< |z_$1| 64) (and (<= 0 |z_$1|) (and (<= 0 |y_$25|) (<= 0 |x_$50|)))))) ($in_range_t |t_$49| |x_$50|)) ($in_range_t |t_$49| |y_$25|)) (< ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|)))  :pattern ( ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|)))) :named ax_568))
   (assert (! (forall( (|t_$5| $ctype) (|s_$2| $struct))(= ($ptr |t_$5| ($vs_base_ref |s_$2|)) ($ptr |t_$5| ($vs_base_ref |s_$2|)))) :named ax_569))
   (assert (! (forall( (|t_$50| $ctype) (|x_$51| Int) (|y_$26| Int))(!(=> (and ($in_range 0 |y_$26| $max.u1) ($in_range 0 |x_$51| $max.u1)) ($in_range 0 ($_or |t_$50| |x_$51| |y_$26|) $max.u1))  :pattern ( ($_or |t_$50| |x_$51| |y_$26|)))) :named ax_570))
   (assert (! (forall( (|t_$51| $ctype) (|x_$52| Int) (|y_$27| Int))(!(=> (and ($in_range 0 |y_$27| $max.u2) ($in_range 0 |x_$52| $max.u2)) ($in_range 0 ($_or |t_$51| |x_$52| |y_$27|) $max.u2))  :pattern ( ($_or |t_$51| |x_$52| |y_$27|)))) :named ax_571))
   (assert (! (forall( (|t_$52| $ctype) (|x_$53| Int) (|y_$28| Int))(!(=> (and ($in_range 0 |y_$28| $max.u4) ($in_range 0 |x_$53| $max.u4)) ($in_range 0 ($_or |t_$52| |x_$53| |y_$28|) $max.u4))  :pattern ( ($_or |t_$52| |x_$53| |y_$28|)))) :named ax_572))
   (assert (! (forall( (|t_$53| $ctype) (|x_$54| Int) (|y_$29| Int))(!(=> (and ($in_range 0 |y_$29| $max.u8) ($in_range 0 |x_$54| $max.u8)) ($in_range 0 ($_or |t_$53| |x_$54| |y_$29|) $max.u8))  :pattern ( ($_or |t_$53| |x_$54| |y_$29|)))) :named ax_573))
   (assert (! (forall( (|t_$54| $ctype) (|x_$55| Int) (|y_$30| Int))(!(=> (and ($in_range 0 |y_$30| $max.u1) ($in_range 0 |x_$55| $max.u1)) ($in_range 0 ($_and |t_$54| |x_$55| |y_$30|) $max.u1))  :pattern ( ($_and |t_$54| |x_$55| |y_$30|)))) :named ax_574))
   (assert (! (forall( (|t_$55| $ctype) (|x_$56| Int) (|y_$31| Int))(!(=> (and ($in_range 0 |y_$31| $max.u2) ($in_range 0 |x_$56| $max.u2)) ($in_range 0 ($_and |t_$55| |x_$56| |y_$31|) $max.u2))  :pattern ( ($_and |t_$55| |x_$56| |y_$31|)))) :named ax_575))
   (assert (! (forall( (|t_$56| $ctype) (|x_$57| Int) (|y_$32| Int))(!(=> (and ($in_range 0 |y_$32| $max.u4) ($in_range 0 |x_$57| $max.u4)) ($in_range 0 ($_and |t_$56| |x_$57| |y_$32|) $max.u4))  :pattern ( ($_and |t_$56| |x_$57| |y_$32|)))) :named ax_576))
   (assert (! (forall( (|t_$57| $ctype) (|x_$58| Int) (|y_$33| Int))(!(=> (and ($in_range 0 |y_$33| $max.u8) ($in_range 0 |x_$58| $max.u8)) ($in_range 0 ($_and |t_$57| |x_$58| |y_$33|) $max.u8))  :pattern ( ($_and |t_$57| |x_$58| |y_$33|)))) :named ax_577))
   (assert (! (forall( (|t_$58| $ctype) (|x_$59| Int) (|y_$34| Int))(!(=> (and ($in_range 0 |y_$34| $max.u1) ($in_range 0 |x_$59| $max.u1)) ($in_range 0 ($_xor |t_$58| |x_$59| |y_$34|) $max.u1))  :pattern ( ($_xor |t_$58| |x_$59| |y_$34|)))) :named ax_578))
   (assert (! (forall( (|t_$59| $ctype) (|x_$60| Int) (|y_$35| Int))(!(=> (and ($in_range 0 |y_$35| $max.u2) ($in_range 0 |x_$60| $max.u2)) ($in_range 0 ($_xor |t_$59| |x_$60| |y_$35|) $max.u2))  :pattern ( ($_xor |t_$59| |x_$60| |y_$35|)))) :named ax_579))
   (assert (! (forall( (|t_$60| $ctype) (|x_$61| Int) (|y_$36| Int))(!(=> (and ($in_range 0 |y_$36| $max.u4) ($in_range 0 |x_$61| $max.u4)) ($in_range 0 ($_xor |t_$60| |x_$61| |y_$36|) $max.u4))  :pattern ( ($_xor |t_$60| |x_$61| |y_$36|)))) :named ax_580))
   (assert (! (forall( (|t_$61| $ctype) (|x_$62| Int) (|y_$37| Int))(!(=> (and ($in_range 0 |y_$37| $max.u8) ($in_range 0 |x_$62| $max.u8)) ($in_range 0 ($_xor |t_$61| |x_$62| |y_$37|) $max.u8))  :pattern ( ($_xor |t_$61| |x_$62| |y_$37|)))) :named ax_581))
   (assert (! (forall( (|t_$62| $ctype) (|x_$63| Int))(!($in_range_t |t_$62| ($_not |t_$62| |x_$63|))  :pattern ( ($_not |t_$62| |x_$63|)))) :named ax_582))
   (assert (! (forall( (|t_$63| $ctype) (|x_$64| Int))(!(= ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|)) ($_not |t_$63| 0))  :pattern ( ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|))))) :named ax_583))
   (assert (! (forall( (|t_$64| $ctype) (|x_$65| Int))(!(= 0 ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|)))  :pattern ( ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|))))) :named ax_584))
   (assert (! (forall( (|t_$65| $ctype) (|x_$66| Int))(!(=> ($in_range_t |t_$65| |x_$66|) (= |x_$66| ($_or |t_$65| |x_$66| 0)))  :pattern ( ($_or |t_$65| |x_$66| 0)))) :named ax_585))
   (assert (! (forall( (|t_$66| $ctype) (|x_$67| Int))(!(= ($_or |t_$66| |x_$67| ($_not |t_$66| 0)) ($_not |t_$66| 0))  :pattern ( ($_or |t_$66| |x_$67| ($_not |t_$66| 0))))) :named ax_586))
   (assert (! (forall( (|t_$67| $ctype) (|x_$68| Int))(!(=> ($in_range_t |t_$67| |x_$68|) (= |x_$68| ($_or |t_$67| |x_$68| |x_$68|)))  :pattern ( ($_or |t_$67| |x_$68| |x_$68|)))) :named ax_587))
   (assert (! (forall( (|t_$68| $ctype) (|x_$69| Int))(!(= 0 ($_and |t_$68| |x_$69| 0))  :pattern ( ($_and |t_$68| |x_$69| 0)))) :named ax_588))
   (assert (! (forall( (|t_$69| $ctype) (|x_$70| Int))(!(=> ($in_range_t |t_$69| |x_$70|) (= |x_$70| ($_and |t_$69| |x_$70| ($_not |t_$69| 0))))  :pattern ( ($_and |t_$69| |x_$70| ($_not |t_$69| 0))))) :named ax_589))
   (assert (! (forall( (|t_$7| $ctype) (|p_$34| $ptr))(= (and (forall( (|S_$39_$1| $state))(!(=> ($program_entry_point |S_$39_$1|) (and (= $set_empty ($owns |S_$39_$1| |p_$34|)) ($extent_mutable |S_$39_$1| |p_$34|)))  :pattern ( ($program_entry_point |S_$39_$1|)))) (and (forall( (|S_$38_$1| $state) (|f_$3_$1| $field) (|i_$30| Int) (|tt_$1| $ctype))(!(=> ($good_state |S_$38_$1|) (and ($typed |S_$38_$1| |p_$34|) ($is_object_root |S_$38_$1| |p_$34|)))  :pattern ( ($ts |S_$38_$1| ($idx ($dot |p_$34| |f_$3_$1|) |i_$30| |tt_$1|))))) (and (forall( (|S_$37_$1| $state) (|f_$2_$1| $field))(!(=> ($good_state |S_$37_$1|) (and ($typed |S_$37_$1| |p_$34|) ($is_object_root |S_$37_$1| |p_$34|)))  :pattern ( ($ts |S_$37_$1| ($dot |p_$34| |f_$2_$1|))))) (forall( (|S_$36_$1| $state))(!(=> ($good_state |S_$36_$1|) (and ($typed |S_$36_$1| |p_$34|) ($is_object_root |S_$36_$1| |p_$34|)))  :pattern ( ($ts |S_$36_$1| |p_$34|))))))) (and (forall( (|S_$39| $state))(!(=> ($program_entry_point |S_$39|) (and (= $set_empty ($owns |S_$39| |p_$34|)) ($extent_mutable |S_$39| |p_$34|)))  :pattern ( ($program_entry_point |S_$39|)))) (and (forall( (|S_$38| $state) (|f_$3| $field) (|i| Int) (|tt| $ctype))(!(=> ($good_state |S_$38|) (and ($typed |S_$38| |p_$34|) (= ($ptr ^^root_emb ($ref |p_$34|)) ($emb |S_$38| |p_$34|))))  :pattern ( ($select.tm ($typemap |S_$38|) ($idx ($dot |p_$34| |f_$3|) |i| |tt|))))) (and (forall( (|S_$37| $state) (|f_$2| $field))(!(=> ($good_state |S_$37|) (and ($typed |S_$37| |p_$34|) (= ($ptr ^^root_emb ($ref |p_$34|)) ($emb |S_$37| |p_$34|))))  :pattern ( ($select.tm ($typemap |S_$37|) ($dot |p_$34| |f_$2|))))) (forall( (|S_$36| $state))(!(=> ($good_state |S_$36|) (and ($typed |S_$36| |p_$34|) (= ($ptr ^^root_emb ($ref |p_$34|)) ($emb |S_$36| |p_$34|))))  :pattern ( ($select.tm ($typemap |S_$36|) |p_$34|))))))))) :named ax_590))
   (assert (! (forall( (|t_$70| $ctype) (|x_$71| Int))(!(=> ($in_range_t |t_$70| |x_$71|) (= |x_$71| ($_and |t_$70| |x_$71| |x_$71|)))  :pattern ( ($_and |t_$70| |x_$71| |x_$71|)))) :named ax_591))
   (assert (! (forall( (|t_$71| $ctype) (|x_$72| Int) (|y_$38| Int))(!(= |y_$38| ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|))  :pattern ( ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|)))) :named ax_592))
   (assert (! (forall( (|t_$72| $ctype) (|x_$73| Int) (|y_$39| Int))(!(= |x_$73| ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|))  :pattern ( ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|)))) :named ax_593))
   (assert (! (forall( (|t_$73| $ctype) (|x_$74| Int))(!(=> ($in_range_t |t_$73| |x_$74|) (= |x_$74| ($_xor |t_$73| |x_$74| 0)))  :pattern ( ($_xor |t_$73| |x_$74| 0)))) :named ax_594))
   (assert (! (forall( (|t_$74| $ctype) (|x_$75| Int))(!(= 0 ($_xor |t_$74| |x_$75| |x_$75|))  :pattern ( ($_xor |t_$74| |x_$75| |x_$75|)))) :named ax_595))
   (assert (! (forall( (|t_$75| $ctype) (|x_$76| Int))(!(= ($_xor |t_$75| |x_$76| ($_not |t_$75| 0)) ($_not |t_$75| |x_$76|))  :pattern ( ($_xor |t_$75| |x_$76| ($_not |t_$75| 0))))) :named ax_596))
   (assert (! (forall( (|t_$76| $ctype) (|x_$77| Int))(!(=> ($in_range_t |t_$76| |x_$77|) (= |x_$77| ($_not |t_$76| ($_not |t_$76| |x_$77|))))  :pattern ( ($_not |t_$76| ($_not |t_$76| |x_$77|))))) :named ax_597))
   (assert (! (forall( (|t_$77| $ctype) (|x_$78| Int) (|y_$40| Int))(!(= ($_or |t_$77| |y_$40| |x_$78|) ($_or |t_$77| |x_$78| |y_$40|))  :pattern ( ($_or |t_$77| |x_$78| |y_$40|)))) :named ax_598))
   (assert (! (forall( (|t_$78| $ctype) (|x_$79| Int) (|y_$41| Int))(!(= ($_xor |t_$78| |y_$41| |x_$79|) ($_xor |t_$78| |x_$79| |y_$41|))  :pattern ( ($_xor |t_$78| |x_$79| |y_$41|)))) :named ax_599))
   (assert (! (forall( (|t_$79| $ctype) (|x_$80| Int) (|y_$42| Int))(!(= ($_and |t_$79| |y_$42| |x_$80|) ($_and |t_$79| |x_$80| |y_$42|))  :pattern ( ($_and |t_$79| |x_$80| |y_$42|)))) :named ax_600))
   (assert (! (forall( (|t_$89| $ctype))(!(=> ($is_math_type |t_$89|) ($is_primitive |t_$89|))  :pattern ( ($is_math_type |t_$89|)))) :named ax_601))
   (assert (! (forall( (|t_$90| $ctype))(!(=> ($is_fnptr_type |t_$90|) ($is_primitive |t_$90|))  :pattern ( ($is_fnptr_type |t_$90|)))) :named ax_602))
   (assert (! (forall( (|t| $ctype))(= (= $kind_primitive ($kind_of |t|)) (= $kind_primitive ($kind_of |t|)))) :named ax_603))
   (assert (! (forall( (|tok_$0| $token) (|c_$0| $ptr) (|#s2_$2| $state) (|#s1_$4| $state))(= (and (and (and (forall( (|#p_$9_$1| $ptr))(!($inv2_when_closed |#s1_$4| |#s2_$2| |#p_$9_$1| ($typ |#p_$9_$1|))  :pattern ( ($closed |#s1_$4| |#p_$9_$1|)) :pattern ( ($closed |#s2_$2| |#p_$9_$1|)))) (and (forall( (|#p_$10_$4| $ptr) (|#q_$12| $ptr))(!(=> (and (and ($set_in |#p_$10_$4| ($owns |#s2_$2| |#q_$12|)) ($good_state |#s2_$2|)) ($closed |#s2_$2| |#q_$12|)) (and ($closed |#s2_$2| |#p_$10_$4|) (not (= 0 ($ref |#p_$10_$4|)))))  :pattern ( ($set_in |#p_$10_$4| ($owns |#s2_$2| |#q_$12|))))) (and (forall( (|#p_$10_$3| $ptr) (|#q_$11| $ptr))(!(=> (and (and ($set_in |#p_$10_$3| ($owns |#s1_$4| |#q_$11|)) ($good_state |#s1_$4|)) ($closed |#s1_$4| |#q_$11|)) (and ($closed |#s1_$4| |#p_$10_$3|) (not (= 0 ($ref |#p_$10_$3|)))))  :pattern ( ($set_in |#p_$10_$3| ($owns |#s1_$4| |#q_$11|))))) (and ($good_state_ext |tok_$0| |#s2_$2|) (and ($good_state_ext |tok_$0| |#s1_$4|) ($full_stop |#s1_$4|)))))) ($valid_claim |#s1_$4| |c_$0|)) ($closed |#s2_$2| |c_$0|)) (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s2_$2|) ($full_stop_ext |tok_$0| |#s1_$4|)) ($closed_is_transitive |#s1_$4|)) ($closed_is_transitive |#s2_$2|)) ($forall_inv2_when_closed |#s1_$4| |#s2_$2|)) ($valid_claim |#s1_$4| |c_$0|)) ($closed |#s2_$2| |c_$0|)))) :named ax_604))
   (assert (! (forall( (|tok| $token) (|c| $ptr) (|#s1_$3| $state))(= (and (forall( (|#p_$10_$2| $ptr) (|#q_$10| $ptr))(!(=> (and (and ($set_in |#p_$10_$2| ($owns |#s1_$3| |#q_$10|)) ($good_state |#s1_$3|)) ($closed |#s1_$3| |#q_$10|)) (and ($closed |#s1_$3| |#p_$10_$2|) (not (= 0 ($ref |#p_$10_$2|)))))  :pattern ( ($set_in |#p_$10_$2| ($owns |#s1_$3| |#q_$10|))))) ($good_state_ext |tok| |#s1_$3|)) (and ($good_state_ext |tok| |#s1_$3|) ($closed_is_transitive |#s1_$3|)))) :named ax_605))
   (assert (! (forall( (|ts| $type_state))(!(and ($is_non_primitive ($typ ($ts_emb |ts|))) (not (= $kind_primitive ($kind_of ($typ ($ts_emb |ts|))))))  :pattern ( ($ts_emb |ts|)))) :named ax_606))
   (assert (! (forall( (|typ_$0| $ctype) (|#p_$8| $ptr) (|#s2| $state) (|#s1_$0| $state))(= (or (and (not ($closed |#s2| |#p_$8|)) (not ($closed |#s1_$0| |#p_$8|))) (and ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|))) (or (and (not ($closed |#s2| |#p_$8|)) (not ($closed |#s1_$0| |#p_$8|))) (and ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|))))) :named ax_607))
   (assert (! (forall( (|typ| $ctype) (|#p_$7| $ptr) (|#s1| $state))(= ($inv2 |#s1| |#s1| |#p_$7| |typ|) ($inv2 |#s1| |#s1| |#p_$7| |typ|))) :named ax_608))
   (assert (! (forall( (|u| $ptr) (|S_$41| $state))(= ($ts_active_option ($ts |S_$41| |u|)) ($ts_active_option ($select.tm ($typemap |S_$41|) |u|)))) :named ax_609))
   (assert (! (forall( (|v| Bool))(= (ite |v| 1 0) (ite |v| 1 0))) :named ax_610))
   (assert (! (forall( (|val_$10| Int))(!(= ($in_range_t ^^i4 |val_$10|) ($in_range $min.i4 |val_$10| $max.i4))  :pattern ( ($in_range_t ^^i4 |val_$10|)))) :named ax_611))
   (assert (! (forall( (|val_$11| Int))(!(= ($in_range_t ^^i8 |val_$11|) ($in_range $min.i8 |val_$11| $max.i8))  :pattern ( ($in_range_t ^^i8 |val_$11|)))) :named ax_612))
   (assert (! (forall( (|val_$12| Int))(!(= ($in_range_t ^^u1 |val_$12|) ($in_range 0 |val_$12| $max.u1))  :pattern ( ($in_range_t ^^u1 |val_$12|)))) :named ax_613))
   (assert (! (forall( (|val_$13| Int))(!(= ($in_range_t ^^u2 |val_$13|) ($in_range 0 |val_$13| $max.u2))  :pattern ( ($in_range_t ^^u2 |val_$13|)))) :named ax_614))
   (assert (! (forall( (|val_$14| Int))(!(= ($in_range_t ^^u4 |val_$14|) ($in_range 0 |val_$14| $max.u4))  :pattern ( ($in_range_t ^^u4 |val_$14|)))) :named ax_615))
   (assert (! (forall( (|val_$15| Int))(!(= ($in_range_t ^^u8 |val_$15|) ($in_range 0 |val_$15| $max.u8))  :pattern ( ($in_range_t ^^u8 |val_$15|)))) :named ax_616))
   (assert (! (forall( (|val_$16| Int))(!($in_range_t ^^mathint |val_$16|)  :pattern ( ($in_range_t ^^mathint |val_$16|)))) :named ax_617))
   (assert (! (forall( (|val_$19| Int))(!(=> ($in_range 0 |val_$19| $max.u1) (= |val_$19| ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|))))  :pattern ( ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|))))) :named ax_618))
   (assert (! (forall( (|val_$20| Int))(!(=> ($in_range 0 |val_$20| $max.u2) (= |val_$20| ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|))))  :pattern ( ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|))))) :named ax_619))
   (assert (! (forall( (|val_$21| Int))(!(=> ($in_range 0 |val_$21| $max.u4) (= |val_$21| ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|))))  :pattern ( ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|))))) :named ax_620))
   (assert (! (forall( (|val_$22| Int))(!(=> ($in_range 0 |val_$22| $max.u8) (= |val_$22| ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|))))  :pattern ( ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|))))) :named ax_621))
   (assert (! (forall( (|val_$23| Int))(!(=> ($in_range $min.i1 |val_$23| $max.i1) (= |val_$23| ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|))))  :pattern ( ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|))))) :named ax_622))
   (assert (! (forall( (|val_$24| Int))(!(=> ($in_range $min.i2 |val_$24| $max.i2) (= |val_$24| ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|))))  :pattern ( ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|))))) :named ax_623))
   (assert (! (forall( (|val_$25| Int))(!(=> ($in_range $min.i4 |val_$25| $max.i4) (= |val_$25| ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|))))  :pattern ( ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|))))) :named ax_624))
   (assert (! (forall( (|val_$26| Int))(!(=> ($in_range $min.i8 |val_$26| $max.i8) (= |val_$26| ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|))))  :pattern ( ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|))))) :named ax_625))
   (assert (! (forall( (|val_$8| Int))(!(= ($in_range_t ^^i1 |val_$8|) ($in_range $min.i1 |val_$8| $max.i1))  :pattern ( ($in_range_t ^^i1 |val_$8|)))) :named ax_626))
   (assert (! (forall( (|val_$9| Int))(!(= ($in_range_t ^^i2 |val_$9|) ($in_range $min.i2 |val_$9| $max.i2))  :pattern ( ($in_range_t ^^i2 |val_$9|)))) :named ax_627))
   (assert (! (forall( (|vol_$0| Bool) (|union_$0| Bool) (|sz_$6| Int) (|T_$5| $ctype) (|f_$7| $field))(= (and (forall( (|S_$51_$1| $state) (|p_$46_$1| $ptr))(!(=> (and (or (= |f_$7| ($active_option |S_$51_$1| |p_$46_$1|)) (not |union_$0|)) ($typed2 |S_$51_$1| |p_$46_$1| ($field_parent_type |f_$7|))) (and (= |f_$7| ($path |S_$51_$1| ($as_array ($dot |p_$46_$1| |f_$7|) |T_$5| |sz_$6|))) (and (= |p_$46_$1| ($emb |S_$51_$1| ($as_array ($dot |p_$46_$1| |f_$7|) |T_$5| |sz_$6|))) (and ($typed |S_$51_$1| ($as_array ($dot |p_$46_$1| |f_$7|) |T_$5| |sz_$6|)) ($extent_hint ($as_array ($dot |p_$46_$1| |f_$7|) |T_$5| |sz_$6|) |p_$46_$1|)))))  :pattern ( ($ts |S_$51_$1| ($as_array ($dot |p_$46_$1| |f_$7|) |T_$5| |sz_$6|))) :pattern ( ($st |S_$51_$1| ($as_array ($dot |p_$46_$1| |f_$7|) |T_$5| |sz_$6|))) :pattern ( ($mem |S_$51_$1| ($as_array ($dot |p_$46_$1| |f_$7|) |T_$5| |sz_$6|))))) (forall( (|p_$47_$1| $ptr) (|i_$6_$1| Int))(!($instantiate_ptr ($as_array ($dot |p_$47_$1| |f_$7|) |T_$5| |sz_$6|))  :pattern ( ($idx ($dot |p_$47_$1| |f_$7|) |i_$6_$1| |T_$5|))))) (and (forall( (|S_$51| $state) (|p_$46| $ptr))(!(=> (and (or (= |f_$7| ($ts_active_option ($ts |S_$51| |p_$46|))) (not |union_$0|)) (and ($typed |S_$51| |p_$46|) ($is |p_$46| ($field_parent_type |f_$7|)))) (and (= |f_$7| ($ts_path ($ts |S_$51| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|)))))) (and (= |p_$46| ($ts_emb ($ts |S_$51| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|)))))) (and ($typed |S_$51| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|)))) ($extent_hint ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))) |p_$46|)))))  :pattern ( ($select.tm ($typemap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) :pattern ( ($select.sm ($statusmap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) :pattern ( ($select.mem ($memory |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))))) (forall( (|p_$47| $ptr) (|i_$6| Int))(!($instantiate_ptr ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$47| |f_$7|))))  :pattern ( ($idx ($dot |p_$47| |f_$7|) |i_$6| |T_$5|))))))) :named ax_628))
   (assert (! (forall( (|vol| Bool) (|union| Bool) (|sz_$5| Int) (|T_$4| $ctype) (|f_$6| $field))(= (forall( (|S_$50_$0| $state) (|p_$45_$0| $ptr) (|i_$5_$0| Int))(!(=> (and (and (and (< |i_$5_$0| |sz_$5|) (<= 0 |i_$5_$0|)) (or (= |f_$6| ($active_option |S_$50_$0| |p_$45_$0|)) (not |union|))) ($typed2 |S_$50_$0| |p_$45_$0| ($field_parent_type |f_$6|))) (and (and (= |p_$45_$0| ($emb |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) (and (= |vol| ($is_volatile |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) ($typed |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|)))) (= ($path |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|)) ($array_path |f_$6| |i_$5_$0|))))  :pattern ( ($ts |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) :pattern ( ($st |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) :pattern ( ($mem |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))))) (forall( (|S_$50| $state) (|p_$45| $ptr) (|i_$5| Int))(!(=> (and (and (and (< |i_$5| |sz_$5|) (<= 0 |i_$5|)) (or (= |f_$6| ($ts_active_option ($ts |S_$50| |p_$45|))) (not |union|))) (and ($typed |S_$50| |p_$45|) ($is |p_$45| ($field_parent_type |f_$6|)))) (and (and (= |p_$45| ($ts_emb ($ts |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|)))) (and (= |vol| ($ts_is_volatile ($ts |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|)))) ($typed |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|)))) (= ($ts_path ($ts |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) ($array_path |f_$6| |i_$5|))))  :pattern ( ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($select.sm ($statusmap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($select.mem ($memory |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))))))) :named ax_629))
   (assert (! (forall( (|x_$1| Int))(= (not (= |x_$1| 0)) (not (= |x_$1| 0)))) :named ax_630))
   (assert (! (forall( (|x_$14| Int))(= ($ptr ^^void |x_$14|) ($ptr ^^void |x_$14|))) :named ax_631))
   (assert (! (forall( (|x_$15| Int))(= ($ptr ^^void |x_$15|) ($ptr ^^void |x_$15|))) :named ax_632))
   (assert (! (forall( (|x_$16| Int))(= ($ptr ^^void |x_$16|) ($ptr ^^void |x_$16|))) :named ax_633))
   (assert (! (forall( (|x_$17| Int))(= ($ptr ^^void |x_$17|) ($ptr ^^void |x_$17|))) :named ax_634))
   (assert (! (forall( (|x_$18| Int))(= ($ptr ^^void |x_$18|) ($ptr ^^void |x_$18|))) :named ax_635))
   (assert (! (forall( (|x_$19| Int))(= ($ptr ^^void |x_$19|) ($ptr ^^void |x_$19|))) :named ax_636))
   (assert (! (forall( (|x_$2| Int))(= (and (<= |x_$2| $max.i1) (<= $min.i1 |x_$2|)) ($in_range $min.i1 |x_$2| $max.i1))) :named ax_637))
   (assert (! (forall( (|x_$20| Int))(= ($ptr ^^void |x_$20|) ($ptr ^^void |x_$20|))) :named ax_638))
   (assert (! (forall( (|x_$21| Int))(= ($ptr ^^void |x_$21|) ($ptr ^^void |x_$21|))) :named ax_639))
   (assert (! (forall( (|x_$24| Int) (|y_$7| Int))(!(= (= |y_$7| |x_$24|) ($rec_base_eq |x_$24| |y_$7|))  :pattern ( ($rec_base_eq |x_$24| |y_$7|)))) :named ax_640))
   (assert (! (forall( (|x_$29| Int) (|y_$11| Int))(!(=> (and (> (+ |x_$29| |y_$11|) $max.u8) (and ($in_range 0 |y_$11| $max.u8) ($in_range 0 |x_$29| $max.u8))) (= (- (- (+ |x_$29| |y_$11|) $max.u8) 1) ($unchk_add ^^u8 |x_$29| |y_$11|)))  :pattern ( ($unchk_add ^^u8 |x_$29| |y_$11|)))) :named ax_641))
   (assert (! (forall( (|x_$3| Int))(= (and (<= |x_$3| $max.i2) (<= $min.i2 |x_$3|)) ($in_range $min.i2 |x_$3| $max.i2))) :named ax_642))
   (assert (! (forall( (|x_$30| Int) (|y_$12| Int))(!(=> (and (> (+ |x_$30| |y_$12|) $max.u8) (and ($in_range 0 |y_$12| $max.u4) ($in_range 0 |x_$30| $max.u4))) (= (- (- (+ |x_$30| |y_$12|) $max.u4) 1) ($unchk_add ^^u4 |x_$30| |y_$12|)))  :pattern ( ($unchk_add ^^u4 |x_$30| |y_$12|)))) :named ax_643))
   (assert (! (forall( (|x_$33| Int) (|from_$0| Int) (|to_$0| Int) (|xs| Int) (|val_$0| Int))(!(=> (and (<= |to_$0| |xs|) (and (< |from_$0| |to_$0|) (<= 0 |from_$0|))) (=> (and (< |val_$0| ($_pow2 (- |to_$0| |from_$0|))) (<= 0 |val_$0|)) (and (<= 0 ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|)) (< ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|) ($_pow2 |xs|)))))  :pattern ( ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|)))) :named ax_644))
   (assert (! (forall( (|x_$4| Int))(= (and (<= |x_$4| $max.i4) (<= $min.i4 |x_$4|)) ($in_range $min.i4 |x_$4| $max.i4))) :named ax_645))
   (assert (! (forall( (|x_$41| Int) (|y_$16| Int))(!(= (mod |x_$41| |y_$16|) (- |x_$41| (* (div |x_$41| |y_$16|) |y_$16|)))  :pattern ( (mod |x_$41| |y_$16|)) :pattern ( (div |x_$41| |y_$16|)))) :named ax_646))
   (assert (! (forall( (|x_$42| Int) (|y_$17| Int))(!(=> (and (<= 0 |x_$42|) (< 0 |y_$17|)) (and (<= 0 (mod |x_$42| |y_$17|)) (< (mod |x_$42| |y_$17|) |y_$17|)))  :pattern ( (mod |x_$42| |y_$17|)))) :named ax_647))
   (assert (! (forall( (|x_$43| Int) (|y_$18| Int))(!(=> (and (< |y_$18| 0) (<= 0 |x_$43|)) (and (<= 0 (mod |x_$43| |y_$18|)) (< (mod |x_$43| |y_$18|) (- 0 |y_$18|))))  :pattern ( (mod |x_$43| |y_$18|)))) :named ax_648))
   (assert (! (forall( (|x_$44| Int) (|y_$19| Int))(!(=> (and (<= |x_$44| 0) (< 0 |y_$19|)) (and (<= (mod |x_$44| |y_$19|) 0) (< (- 0 |y_$19|) (mod |x_$44| |y_$19|))))  :pattern ( (mod |x_$44| |y_$19|)))) :named ax_649))
   (assert (! (forall( (|x_$45| Int) (|y_$20| Int))(!(=> (and (< |y_$20| 0) (<= |x_$45| 0)) (and (< |y_$20| (mod |x_$45| |y_$20|)) (<= (mod |x_$45| |y_$20|) 0)))  :pattern ( (mod |x_$45| |y_$20|)))) :named ax_650))
   (assert (! (forall( (|x_$5| Int))(= (and (<= |x_$5| $max.i8) (<= $min.i8 |x_$5|)) ($in_range $min.i8 |x_$5| $max.i8))) :named ax_651))
   (assert (! (forall( (|x_$6| Int))(= (and (<= |x_$6| $max.u1) (<= 0 |x_$6|)) ($in_range 0 |x_$6| $max.u1))) :named ax_652))
   (assert (! (forall( (|x_$7| Int))(= (and (<= |x_$7| $max.u2) (<= 0 |x_$7|)) ($in_range 0 |x_$7| $max.u2))) :named ax_653))
   (assert (! (forall( (|x_$8| Int))(= (and (<= |x_$8| $max.u4) (<= 0 |x_$8|)) ($in_range 0 |x_$8| $max.u4))) :named ax_654))
   (assert (! (forall( (|x_$9| Int))(= (and (<= |x_$9| $max.u8) (<= 0 |x_$9|)) ($in_range 0 |x_$9| $max.u8))) :named ax_655))
   (assert (! (forall( (|y_$0| Int) (|x_$0| Int))(= (+ |x_$0| |y_$0|) (+ |x_$0| |y_$0|))) :named ax_656))
   (assert (! (forall( (|y_$1| Int) (|x_$10| Int))(= (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i1))) (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i1))))) :named ax_657))
   (assert (! (forall( (|y_$2| Int) (|x_$11| Int))(= (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i2))) (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i2))))) :named ax_658))
   (assert (! (forall( (|y_$3| Int) (|x_$12| Int))(= (or (not (= |y_$3| (- 0 1))) (not (= |x_$12| $min.i4))) (or (not (= |y_$3| (- 0 1))) (not (= |x_$12| $min.i4))))) :named ax_659))
   (assert (! (forall( (|y_$4| Int) (|x_$13| Int))(= (or (not (= |y_$4| (- 0 1))) (not (= |x_$13| $min.i8))) (or (not (= |y_$4| (- 0 1))) (not (= |x_$13| $min.i8))))) :named ax_660))
   (assert (! (forall( (|y_$5| Int) (|x_$22| Int) (|t_$8| $ctype))(= ($unchecked |t_$8| (div |x_$22| |y_$5|)) ($unchecked |t_$8| (div |x_$22| |y_$5|)))) :named ax_661))
   (assert (! (forall( (|y_$6| Int) (|x_$23| Int) (|t_$9| $ctype))(= ($unchecked |t_$9| (mod |x_$23| |y_$6|)) ($unchecked |t_$9| (mod |x_$23| |y_$6|)))) :named ax_662))
   (assert (! (forall( (|z| Int) (|y| Int) (|x| Int))(= (+ |x| (* |y| |z|)) (+ |x| (* |y| |z|)))) :named ax_663))
   (assert (! (not $seclbl.bot) :named ax_664))
   (assert (! (not ($has_volatile_owns_set ^A)) :named ax_665))
   (assert (! (not ($is_claimable ^A)) :named ax_666))
   (assert (! (not (= $@bf_272 true)) :named ax_667))
   (assert (! (not (= $@bf_275 true)) :named ax_668))
   (assert (! (not (= $@bf_276 true)) :named ax_669))
   (assert (! (not (= $@bf_277 true)) :named ax_670))
   (assert (! (not (= $@bf_281 true)) :named ax_671))
   (assert (! (not (= $@distTp1 $@distTp2)) :named ax_672))
   (assert (! (not (= $@distTp1 $@distTp3)) :named ax_673))
   (assert (! (not (= $@distTp1 $memory_allocator_type)) :named ax_674))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_675))
   (assert (! (not (= $@distTp2 $@distTp3)) :named ax_676))
   (assert (! (not (= $@distTp2 $memory_allocator_type)) :named ax_677))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_678))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_679))
   (assert (! (not (= $@distTp3 $memory_allocator_type)) :named ax_680))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c $@tok$1^13.1)) :named ax_681))
   (assert (! (not (= $@loc._this_ $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c)) :named ax_682))
   (assert (! (not (= $@loc._this_ $@tok$1^13.1)) :named ax_683))
   (assert (! (not (= $@tok$1^13.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c)) :named ax_684))
   (assert (! (not (= $@tok$1^13.1 $@loc._this_)) :named ax_685))
   (assert (! (not (= $kind_array $kind_primitive)) :named ax_686))
   (assert (! (not (= $kind_array $kind_thread)) :named ax_687))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_688))
   (assert (! (not (= $kind_composite $kind_primitive)) :named ax_689))
   (assert (! (not (= $kind_composite $kind_thread)) :named ax_690))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_691))
   (assert (! (not (= $kind_primitive $kind_composite)) :named ax_692))
   (assert (! (not (= $kind_primitive $kind_thread)) :named ax_693))
   (assert (! (not (= $kind_thread $kind_array)) :named ax_694))
   (assert (! (not (= $kind_thread $kind_composite)) :named ax_695))
   (assert (! (not (= $kind_thread $kind_primitive)) :named ax_696))
   (assert (! (not (= $me_ref $arch_spec_ptr_start)) :named ax_697))
   (assert (! (not (= $me_ref 0)) :named ax_698))
   (assert (! (not (= $memory_allocator_type $@distTp1)) :named ax_699))
   (assert (! (not (= $memory_allocator_type $@distTp2)) :named ax_700))
   (assert (! (not (= $memory_allocator_type $@distTp3)) :named ax_701))
   (assert (! (not (= $memory_allocator_type ^$@ptrset)) :named ax_702))
   (assert (! (not (= $memory_allocator_type ^$@state_t)) :named ax_703))
   (assert (! (not (= $memory_allocator_type ^$@struct)) :named ax_704))
   (assert (! (not (= $memory_allocator_type ^$@thread_id)) :named ax_705))
   (assert (! (not (= $memory_allocator_type ^$@thread_id_t)) :named ax_706))
   (assert (! (not (= $memory_allocator_type ^^bool)) :named ax_707))
   (assert (! (not (= $memory_allocator_type ^^claim)) :named ax_708))
   (assert (! (not (= $memory_allocator_type ^^f4)) :named ax_709))
   (assert (! (not (= $memory_allocator_type ^^f8)) :named ax_710))
   (assert (! (not (= $memory_allocator_type ^^i1)) :named ax_711))
   (assert (! (not (= $memory_allocator_type ^^i2)) :named ax_712))
   (assert (! (not (= $memory_allocator_type ^^i4)) :named ax_713))
   (assert (! (not (= $memory_allocator_type ^^i8)) :named ax_714))
   (assert (! (not (= $memory_allocator_type ^^mathint)) :named ax_715))
   (assert (! (not (= $memory_allocator_type ^^u1)) :named ax_716))
   (assert (! (not (= $memory_allocator_type ^^u2)) :named ax_717))
   (assert (! (not (= $memory_allocator_type ^^u4)) :named ax_718))
   (assert (! (not (= $memory_allocator_type ^^u8)) :named ax_719))
   (assert (! (not (= $memory_allocator_type ^^void)) :named ax_720))
   (assert (! (not (= $memory_allocator_type ^A)) :named ax_721))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_722))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_723))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_724))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_725))
   (assert (! (not (= ^$@ptrset ^$@state_t)) :named ax_726))
   (assert (! (not (= ^$@ptrset ^$@struct)) :named ax_727))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_728))
   (assert (! (not (= ^$@ptrset ^$@thread_id_t)) :named ax_729))
   (assert (! (not (= ^$@ptrset ^^bool)) :named ax_730))
   (assert (! (not (= ^$@ptrset ^^claim)) :named ax_731))
   (assert (! (not (= ^$@ptrset ^^f4)) :named ax_732))
   (assert (! (not (= ^$@ptrset ^^f8)) :named ax_733))
   (assert (! (not (= ^$@ptrset ^^i1)) :named ax_734))
   (assert (! (not (= ^$@ptrset ^^i2)) :named ax_735))
   (assert (! (not (= ^$@ptrset ^^i4)) :named ax_736))
   (assert (! (not (= ^$@ptrset ^^i8)) :named ax_737))
   (assert (! (not (= ^$@ptrset ^^mathint)) :named ax_738))
   (assert (! (not (= ^$@ptrset ^^u1)) :named ax_739))
   (assert (! (not (= ^$@ptrset ^^u2)) :named ax_740))
   (assert (! (not (= ^$@ptrset ^^u4)) :named ax_741))
   (assert (! (not (= ^$@ptrset ^^u8)) :named ax_742))
   (assert (! (not (= ^$@ptrset ^^void)) :named ax_743))
   (assert (! (not (= ^$@ptrset ^A)) :named ax_744))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_745))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_746))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_747))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_748))
   (assert (! (not (= ^$@state_t ^$@ptrset)) :named ax_749))
   (assert (! (not (= ^$@state_t ^$@struct)) :named ax_750))
   (assert (! (not (= ^$@state_t ^$@thread_id)) :named ax_751))
   (assert (! (not (= ^$@state_t ^$@thread_id_t)) :named ax_752))
   (assert (! (not (= ^$@state_t ^^bool)) :named ax_753))
   (assert (! (not (= ^$@state_t ^^claim)) :named ax_754))
   (assert (! (not (= ^$@state_t ^^f4)) :named ax_755))
   (assert (! (not (= ^$@state_t ^^f8)) :named ax_756))
   (assert (! (not (= ^$@state_t ^^i1)) :named ax_757))
   (assert (! (not (= ^$@state_t ^^i2)) :named ax_758))
   (assert (! (not (= ^$@state_t ^^i4)) :named ax_759))
   (assert (! (not (= ^$@state_t ^^i8)) :named ax_760))
   (assert (! (not (= ^$@state_t ^^mathint)) :named ax_761))
   (assert (! (not (= ^$@state_t ^^u1)) :named ax_762))
   (assert (! (not (= ^$@state_t ^^u2)) :named ax_763))
   (assert (! (not (= ^$@state_t ^^u4)) :named ax_764))
   (assert (! (not (= ^$@state_t ^^u8)) :named ax_765))
   (assert (! (not (= ^$@state_t ^^void)) :named ax_766))
   (assert (! (not (= ^$@state_t ^A)) :named ax_767))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_768))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_769))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_770))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_771))
   (assert (! (not (= ^$@struct ^$@ptrset)) :named ax_772))
   (assert (! (not (= ^$@struct ^$@state_t)) :named ax_773))
   (assert (! (not (= ^$@struct ^$@thread_id)) :named ax_774))
   (assert (! (not (= ^$@struct ^$@thread_id_t)) :named ax_775))
   (assert (! (not (= ^$@struct ^^bool)) :named ax_776))
   (assert (! (not (= ^$@struct ^^claim)) :named ax_777))
   (assert (! (not (= ^$@struct ^^f4)) :named ax_778))
   (assert (! (not (= ^$@struct ^^f8)) :named ax_779))
   (assert (! (not (= ^$@struct ^^i1)) :named ax_780))
   (assert (! (not (= ^$@struct ^^i2)) :named ax_781))
   (assert (! (not (= ^$@struct ^^i4)) :named ax_782))
   (assert (! (not (= ^$@struct ^^i8)) :named ax_783))
   (assert (! (not (= ^$@struct ^^mathint)) :named ax_784))
   (assert (! (not (= ^$@struct ^^u1)) :named ax_785))
   (assert (! (not (= ^$@struct ^^u2)) :named ax_786))
   (assert (! (not (= ^$@struct ^^u4)) :named ax_787))
   (assert (! (not (= ^$@struct ^^u8)) :named ax_788))
   (assert (! (not (= ^$@struct ^^void)) :named ax_789))
   (assert (! (not (= ^$@struct ^A)) :named ax_790))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_791))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_792))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_793))
   (assert (! (not (= ^$@thread_id $memory_allocator_type)) :named ax_794))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_795))
   (assert (! (not (= ^$@thread_id ^$@state_t)) :named ax_796))
   (assert (! (not (= ^$@thread_id ^$@struct)) :named ax_797))
   (assert (! (not (= ^$@thread_id ^$@thread_id_t)) :named ax_798))
   (assert (! (not (= ^$@thread_id ^^bool)) :named ax_799))
   (assert (! (not (= ^$@thread_id ^^claim)) :named ax_800))
   (assert (! (not (= ^$@thread_id ^^f4)) :named ax_801))
   (assert (! (not (= ^$@thread_id ^^f8)) :named ax_802))
   (assert (! (not (= ^$@thread_id ^^i1)) :named ax_803))
   (assert (! (not (= ^$@thread_id ^^i2)) :named ax_804))
   (assert (! (not (= ^$@thread_id ^^i4)) :named ax_805))
   (assert (! (not (= ^$@thread_id ^^i8)) :named ax_806))
   (assert (! (not (= ^$@thread_id ^^mathint)) :named ax_807))
   (assert (! (not (= ^$@thread_id ^^u1)) :named ax_808))
   (assert (! (not (= ^$@thread_id ^^u2)) :named ax_809))
   (assert (! (not (= ^$@thread_id ^^u4)) :named ax_810))
   (assert (! (not (= ^$@thread_id ^^u8)) :named ax_811))
   (assert (! (not (= ^$@thread_id ^^void)) :named ax_812))
   (assert (! (not (= ^$@thread_id ^A)) :named ax_813))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_814))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_815))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_816))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_817))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_818))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_819))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_820))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_821))
   (assert (! (not (= ^$@thread_id_t ^^bool)) :named ax_822))
   (assert (! (not (= ^$@thread_id_t ^^claim)) :named ax_823))
   (assert (! (not (= ^$@thread_id_t ^^f4)) :named ax_824))
   (assert (! (not (= ^$@thread_id_t ^^f8)) :named ax_825))
   (assert (! (not (= ^$@thread_id_t ^^i1)) :named ax_826))
   (assert (! (not (= ^$@thread_id_t ^^i2)) :named ax_827))
   (assert (! (not (= ^$@thread_id_t ^^i4)) :named ax_828))
   (assert (! (not (= ^$@thread_id_t ^^i8)) :named ax_829))
   (assert (! (not (= ^$@thread_id_t ^^mathint)) :named ax_830))
   (assert (! (not (= ^$@thread_id_t ^^u1)) :named ax_831))
   (assert (! (not (= ^$@thread_id_t ^^u2)) :named ax_832))
   (assert (! (not (= ^$@thread_id_t ^^u4)) :named ax_833))
   (assert (! (not (= ^$@thread_id_t ^^u8)) :named ax_834))
   (assert (! (not (= ^$@thread_id_t ^^void)) :named ax_835))
   (assert (! (not (= ^$@thread_id_t ^A)) :named ax_836))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_837))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_838))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_839))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_840))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_841))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_842))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_843))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_844))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_845))
   (assert (! (not (= ^^bool ^^claim)) :named ax_846))
   (assert (! (not (= ^^bool ^^f4)) :named ax_847))
   (assert (! (not (= ^^bool ^^f8)) :named ax_848))
   (assert (! (not (= ^^bool ^^i1)) :named ax_849))
   (assert (! (not (= ^^bool ^^i2)) :named ax_850))
   (assert (! (not (= ^^bool ^^i4)) :named ax_851))
   (assert (! (not (= ^^bool ^^i8)) :named ax_852))
   (assert (! (not (= ^^bool ^^mathint)) :named ax_853))
   (assert (! (not (= ^^bool ^^u1)) :named ax_854))
   (assert (! (not (= ^^bool ^^u2)) :named ax_855))
   (assert (! (not (= ^^bool ^^u4)) :named ax_856))
   (assert (! (not (= ^^bool ^^u8)) :named ax_857))
   (assert (! (not (= ^^bool ^^void)) :named ax_858))
   (assert (! (not (= ^^bool ^A)) :named ax_859))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_860))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_861))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_862))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_863))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_864))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_865))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_866))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_867))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_868))
   (assert (! (not (= ^^claim ^^bool)) :named ax_869))
   (assert (! (not (= ^^claim ^^f4)) :named ax_870))
   (assert (! (not (= ^^claim ^^f8)) :named ax_871))
   (assert (! (not (= ^^claim ^^i1)) :named ax_872))
   (assert (! (not (= ^^claim ^^i2)) :named ax_873))
   (assert (! (not (= ^^claim ^^i4)) :named ax_874))
   (assert (! (not (= ^^claim ^^i8)) :named ax_875))
   (assert (! (not (= ^^claim ^^mathint)) :named ax_876))
   (assert (! (not (= ^^claim ^^u1)) :named ax_877))
   (assert (! (not (= ^^claim ^^u2)) :named ax_878))
   (assert (! (not (= ^^claim ^^u4)) :named ax_879))
   (assert (! (not (= ^^claim ^^u8)) :named ax_880))
   (assert (! (not (= ^^claim ^^void)) :named ax_881))
   (assert (! (not (= ^^claim ^A)) :named ax_882))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_883))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_884))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_885))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_886))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_887))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_888))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_889))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_890))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_891))
   (assert (! (not (= ^^f4 ^^bool)) :named ax_892))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_893))
   (assert (! (not (= ^^f4 ^^f8)) :named ax_894))
   (assert (! (not (= ^^f4 ^^i1)) :named ax_895))
   (assert (! (not (= ^^f4 ^^i2)) :named ax_896))
   (assert (! (not (= ^^f4 ^^i4)) :named ax_897))
   (assert (! (not (= ^^f4 ^^i8)) :named ax_898))
   (assert (! (not (= ^^f4 ^^u1)) :named ax_899))
   (assert (! (not (= ^^f4 ^^u2)) :named ax_900))
   (assert (! (not (= ^^f4 ^^u4)) :named ax_901))
   (assert (! (not (= ^^f4 ^A)) :named ax_902))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_903))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_904))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_905))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_906))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_907))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_908))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_909))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_910))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_911))
   (assert (! (not (= ^^f8 ^^bool)) :named ax_912))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_913))
   (assert (! (not (= ^^f8 ^^f4)) :named ax_914))
   (assert (! (not (= ^^f8 ^^i1)) :named ax_915))
   (assert (! (not (= ^^f8 ^^i2)) :named ax_916))
   (assert (! (not (= ^^f8 ^^i4)) :named ax_917))
   (assert (! (not (= ^^f8 ^^i8)) :named ax_918))
   (assert (! (not (= ^^f8 ^^u1)) :named ax_919))
   (assert (! (not (= ^^f8 ^^u2)) :named ax_920))
   (assert (! (not (= ^^f8 ^^u4)) :named ax_921))
   (assert (! (not (= ^^f8 ^A)) :named ax_922))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_923))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_924))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_925))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_926))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_927))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_928))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_929))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_930))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_931))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_932))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_933))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_934))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_935))
   (assert (! (not (= ^^i1 ^^i2)) :named ax_936))
   (assert (! (not (= ^^i1 ^^i4)) :named ax_937))
   (assert (! (not (= ^^i1 ^^i8)) :named ax_938))
   (assert (! (not (= ^^i1 ^^u1)) :named ax_939))
   (assert (! (not (= ^^i1 ^^u2)) :named ax_940))
   (assert (! (not (= ^^i1 ^^u4)) :named ax_941))
   (assert (! (not (= ^^i1 ^A)) :named ax_942))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_943))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_944))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_945))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_946))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_947))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_948))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_949))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_950))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_951))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_952))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_953))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_954))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_955))
   (assert (! (not (= ^^i2 ^^i1)) :named ax_956))
   (assert (! (not (= ^^i2 ^^i4)) :named ax_957))
   (assert (! (not (= ^^i2 ^^i8)) :named ax_958))
   (assert (! (not (= ^^i2 ^^u1)) :named ax_959))
   (assert (! (not (= ^^i2 ^^u2)) :named ax_960))
   (assert (! (not (= ^^i2 ^^u4)) :named ax_961))
   (assert (! (not (= ^^i2 ^A)) :named ax_962))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_963))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_964))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_965))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_966))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_967))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_968))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_969))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_970))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_971))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_972))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_973))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_974))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_975))
   (assert (! (not (= ^^i4 ^^i1)) :named ax_976))
   (assert (! (not (= ^^i4 ^^i2)) :named ax_977))
   (assert (! (not (= ^^i4 ^^i8)) :named ax_978))
   (assert (! (not (= ^^i4 ^^u1)) :named ax_979))
   (assert (! (not (= ^^i4 ^^u2)) :named ax_980))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_981))
   (assert (! (not (= ^^i4 ^A)) :named ax_982))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_983))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_984))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_985))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_986))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_987))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_988))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_989))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_990))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_991))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_992))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_993))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_994))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_995))
   (assert (! (not (= ^^i8 ^^i1)) :named ax_996))
   (assert (! (not (= ^^i8 ^^i2)) :named ax_997))
   (assert (! (not (= ^^i8 ^^i4)) :named ax_998))
   (assert (! (not (= ^^i8 ^^u1)) :named ax_999))
   (assert (! (not (= ^^i8 ^^u2)) :named ax_1000))
   (assert (! (not (= ^^i8 ^^u4)) :named ax_1001))
   (assert (! (not (= ^^i8 ^A)) :named ax_1002))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_1003))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_1004))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_1005))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_1006))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_1007))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_1008))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_1009))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_1010))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_1011))
   (assert (! (not (= ^^mathint ^^bool)) :named ax_1012))
   (assert (! (not (= ^^mathint ^^claim)) :named ax_1013))
   (assert (! (not (= ^^mathint ^^f4)) :named ax_1014))
   (assert (! (not (= ^^mathint ^^f8)) :named ax_1015))
   (assert (! (not (= ^^mathint ^^i1)) :named ax_1016))
   (assert (! (not (= ^^mathint ^^i2)) :named ax_1017))
   (assert (! (not (= ^^mathint ^^i4)) :named ax_1018))
   (assert (! (not (= ^^mathint ^^i8)) :named ax_1019))
   (assert (! (not (= ^^mathint ^^root_emb)) :named ax_1020))
   (assert (! (not (= ^^mathint ^^u1)) :named ax_1021))
   (assert (! (not (= ^^mathint ^^u2)) :named ax_1022))
   (assert (! (not (= ^^mathint ^^u4)) :named ax_1023))
   (assert (! (not (= ^^mathint ^^u8)) :named ax_1024))
   (assert (! (not (= ^^mathint ^^void)) :named ax_1025))
   (assert (! (not (= ^^mathint ^A)) :named ax_1026))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_1027))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_1028))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_1029))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_1030))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_1031))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_1032))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_1033))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_1034))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_1035))
   (assert (! (not (= ^^root_emb ^^bool)) :named ax_1036))
   (assert (! (not (= ^^root_emb ^^claim)) :named ax_1037))
   (assert (! (not (= ^^root_emb ^^f4)) :named ax_1038))
   (assert (! (not (= ^^root_emb ^^f8)) :named ax_1039))
   (assert (! (not (= ^^root_emb ^^i1)) :named ax_1040))
   (assert (! (not (= ^^root_emb ^^i2)) :named ax_1041))
   (assert (! (not (= ^^root_emb ^^i4)) :named ax_1042))
   (assert (! (not (= ^^root_emb ^^i8)) :named ax_1043))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_1044))
   (assert (! (not (= ^^root_emb ^^u1)) :named ax_1045))
   (assert (! (not (= ^^root_emb ^^u2)) :named ax_1046))
   (assert (! (not (= ^^root_emb ^^u4)) :named ax_1047))
   (assert (! (not (= ^^root_emb ^^u8)) :named ax_1048))
   (assert (! (not (= ^^root_emb ^^void)) :named ax_1049))
   (assert (! (not (= ^^root_emb ^A)) :named ax_1050))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_1051))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_1052))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_1053))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_1054))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_1055))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_1056))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_1057))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_1058))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_1059))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_1060))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_1061))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_1062))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_1063))
   (assert (! (not (= ^^u1 ^^i1)) :named ax_1064))
   (assert (! (not (= ^^u1 ^^i2)) :named ax_1065))
   (assert (! (not (= ^^u1 ^^i4)) :named ax_1066))
   (assert (! (not (= ^^u1 ^^i8)) :named ax_1067))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_1068))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_1069))
   (assert (! (not (= ^^u1 ^^u2)) :named ax_1070))
   (assert (! (not (= ^^u1 ^^u4)) :named ax_1071))
   (assert (! (not (= ^^u1 ^A)) :named ax_1072))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_1073))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_1074))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_1075))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_1076))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_1077))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_1078))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_1079))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_1080))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_1081))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_1082))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_1083))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_1084))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_1085))
   (assert (! (not (= ^^u2 ^^i1)) :named ax_1086))
   (assert (! (not (= ^^u2 ^^i2)) :named ax_1087))
   (assert (! (not (= ^^u2 ^^i4)) :named ax_1088))
   (assert (! (not (= ^^u2 ^^i8)) :named ax_1089))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_1090))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_1091))
   (assert (! (not (= ^^u2 ^^u1)) :named ax_1092))
   (assert (! (not (= ^^u2 ^^u4)) :named ax_1093))
   (assert (! (not (= ^^u2 ^A)) :named ax_1094))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_1095))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_1096))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_1097))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_1098))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_1099))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_1100))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_1101))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_1102))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_1103))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_1104))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_1105))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_1106))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_1107))
   (assert (! (not (= ^^u4 ^^i1)) :named ax_1108))
   (assert (! (not (= ^^u4 ^^i2)) :named ax_1109))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_1110))
   (assert (! (not (= ^^u4 ^^i8)) :named ax_1111))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_1112))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_1113))
   (assert (! (not (= ^^u4 ^^u1)) :named ax_1114))
   (assert (! (not (= ^^u4 ^^u2)) :named ax_1115))
   (assert (! (not (= ^^u4 ^A)) :named ax_1116))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_1117))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_1118))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_1119))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_1120))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_1121))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_1122))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_1123))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_1124))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_1125))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_1126))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_1127))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_1128))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_1129))
   (assert (! (not (= ^^u8 ^^i1)) :named ax_1130))
   (assert (! (not (= ^^u8 ^^i2)) :named ax_1131))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_1132))
   (assert (! (not (= ^^u8 ^^i8)) :named ax_1133))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_1134))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_1135))
   (assert (! (not (= ^^u8 ^^u1)) :named ax_1136))
   (assert (! (not (= ^^u8 ^^u2)) :named ax_1137))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_1138))
   (assert (! (not (= ^^u8 ^A)) :named ax_1139))
   (assert (! (not (= ^^void $@distTp1)) :named ax_1140))
   (assert (! (not (= ^^void $@distTp2)) :named ax_1141))
   (assert (! (not (= ^^void $@distTp3)) :named ax_1142))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_1143))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_1144))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_1145))
   (assert (! (not (= ^^void ^$@struct)) :named ax_1146))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_1147))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_1148))
   (assert (! (not (= ^^void ^^bool)) :named ax_1149))
   (assert (! (not (= ^^void ^^claim)) :named ax_1150))
   (assert (! (not (= ^^void ^^f4)) :named ax_1151))
   (assert (! (not (= ^^void ^^f8)) :named ax_1152))
   (assert (! (not (= ^^void ^^i1)) :named ax_1153))
   (assert (! (not (= ^^void ^^i2)) :named ax_1154))
   (assert (! (not (= ^^void ^^i4)) :named ax_1155))
   (assert (! (not (= ^^void ^^i8)) :named ax_1156))
   (assert (! (not (= ^^void ^^mathint)) :named ax_1157))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_1158))
   (assert (! (not (= ^^void ^^u1)) :named ax_1159))
   (assert (! (not (= ^^void ^^u2)) :named ax_1160))
   (assert (! (not (= ^^void ^^u4)) :named ax_1161))
   (assert (! (not (= ^^void ^^u8)) :named ax_1162))
   (assert (! (not (= ^^void ^A)) :named ax_1163))
   (assert (! (not (= ^A $@distTp1)) :named ax_1164))
   (assert (! (not (= ^A $@distTp2)) :named ax_1165))
   (assert (! (not (= ^A $@distTp3)) :named ax_1166))
   (assert (! (not (= ^A $memory_allocator_type)) :named ax_1167))
   (assert (! (not (= ^A ^$@ptrset)) :named ax_1168))
   (assert (! (not (= ^A ^$@state_t)) :named ax_1169))
   (assert (! (not (= ^A ^$@struct)) :named ax_1170))
   (assert (! (not (= ^A ^$@thread_id)) :named ax_1171))
   (assert (! (not (= ^A ^$@thread_id_t)) :named ax_1172))
   (assert (! (not (= ^A ^^bool)) :named ax_1173))
   (assert (! (not (= ^A ^^claim)) :named ax_1174))
   (assert (! (not (= ^A ^^f4)) :named ax_1175))
   (assert (! (not (= ^A ^^f8)) :named ax_1176))
   (assert (! (not (= ^A ^^i1)) :named ax_1177))
   (assert (! (not (= ^A ^^i2)) :named ax_1178))
   (assert (! (not (= ^A ^^i4)) :named ax_1179))
   (assert (! (not (= ^A ^^i8)) :named ax_1180))
   (assert (! (not (= ^A ^^mathint)) :named ax_1181))
   (assert (! (not (= ^A ^^root_emb)) :named ax_1182))
   (assert (! (not (= ^A ^^u1)) :named ax_1183))
   (assert (! (not (= ^A ^^u2)) :named ax_1184))
   (assert (! (not (= ^A ^^u4)) :named ax_1185))
   (assert (! (not (= ^A ^^u8)) :named ax_1186))
   (assert (! (not (= ^A ^^void)) :named ax_1187))
   (assert (! (not (= A.x A.$owns)) :named ax_1188))
   (assert (! (not (= true $@bf_272)) :named ax_1189))
   (assert (! (not (= true $@bf_275)) :named ax_1190))
   (assert (! (not (= true $@bf_276)) :named ax_1191))
   (assert (! (not (= true $@bf_277)) :named ax_1192))
   (assert (! (not (= true $@bf_281)) :named ax_1193))
   (assert (! (not (= true ($@bf_218 0))) :named ax_1194))
   (assert (! (not (= true ($@bf_235 (- 1) (- 128)))) :named ax_1195))
   (assert (! (not (= true ($@bf_236 (- 1) (- 32768)))) :named ax_1196))
   (assert (! (not (= true ($@bf_237 (- 1) (- 2147483648)))) :named ax_1197))
   (assert (! (not (= true ($@bf_238 (- 1) $min.i8))) :named ax_1198))
   (assert (! true :named ax_1199))

;Program
(assert (not
(let (($@hash@exit@1_assertion (and
    true ;(=> (and (not $is_stuttering_check) (not $is_unwrap_check)) (or (= ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x))) (= (+ ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) 1) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x)))))
)))
(let (($@hash@exit@3_assertion (and
    (=> $is_unwrap_check ($set_eq ($owns $s@2 ($ptr ^A P@_this_)) $set_empty))
)))
(let (($@hash@exit_assertion (and
    true ;(=> (and (not $is_stuttering_check) (not $is_unwrap_check)) ($set_eq ($owns $s@2 ($ptr ^A P@_this_)) $set_empty))
)))
(let ((anon5_assertion (and
    true ;($good_for_admissibility $s)
)))
(let ((anon00_Then_assertion (and
    true ;($set_eq ($owns $s@0 ($ptr ^A P@_this_)) $set_empty)
)))
(let (($@hash@exit@2 (=> (and true
    (=> (and (not $is_unwrap_check) (not $is_stuttering_check)) (or (= (+ ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) 1) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x))) (= ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x)))))
  )
    $@hash@exit@3_assertion
)))
(let (($@hash@exit@1 (=> (and true
    (=> (and (not $is_unwrap_check) (not $is_stuttering_check)) ($set_eq ($owns $s@2 ($ptr ^A P@_this_)) $set_empty))
  )(and 
    $@hash@exit@1_assertion
    $@hash@exit@2
))))
(let (($@hash@exit (=> (and true
  )(and 
    $@hash@exit_assertion
    $@hash@exit@1
))))
(let ((anon00_Then@1 (=> (and true
    ($good_state_ext $@tok$1^13.1 $s@0)
    ($set_eq $set_empty $set_empty)
    (= $s@0 $s@2)
    (= $set_empty ($owns $s@0 ($ptr ^A P@_this_)))
  )
    $@hash@exit
)))
(let ((anon5@1 (=> (and true
    ($call_transition $s $s@1)
    ($closed $s@1 call0formal@p@0)
    ($good_for_admissibility $s)
    ($good_for_post_admissibility $s@1)
    ($good_state $s@1)
    ($good_state_ext $@tok$1^13.1 $s@1)
    ($nonvolatile_spans_the_same $s $s@1 call0formal@p@0 ^A)
    ($typed $s@1 call0formal@p@0)
    (= $s@1 $s@2)
    (= ($select.sec.pc $s@1) ($select.sec.pc $s))
    (=> $is_stuttering_check ($inv2 $s $s@1 call0formal@p@0 ^A))
    (forall( (|#p_$10_$5| $ptr) (|#q_$13| $ptr))(!(=> (and ($set_in |#p_$10_$5| ($owns $s@1 |#q_$13|)) ($closed $s@1 |#q_$13|)) (and ($closed $s@1 |#p_$10_$5|) (not (= 0 ($ref |#p_$10_$5|)))))  :pattern ( ($set_in |#p_$10_$5| ($owns $s@1 |#q_$13|)))))
    (forall( (|#q_$6| $ptr))(!(=> (and (or (= ($closed $s |#q_$6|) (not ($closed $s@1 |#q_$6|))) (not ($spans_the_same $s $s@1 |#q_$6| ($typ |#q_$6|)))) (or ($closed $s@1 |#q_$6|) ($closed $s |#q_$6|))) (and ($nonvolatile_spans_the_same $s $s@1 |#q_$6| ($typ |#q_$6|)) ($inv2 $s $s@1 |#q_$6| ($typ |#q_$6|))))  :pattern ( ($select.sm ($statusmap $s) |#q_$6|)) :pattern ( ($select.sm ($statusmap $s@1) |#q_$6|))))
    (forall( (|#q_$7| $ptr))(!(=> ($set_in |#q_$7| ($owns $s call0formal@p@0)) (= ($ref_cnt $s@1 |#q_$7|) ($ref_cnt $s |#q_$7|)))  :pattern ( ($set_in |#q_$7| ($owns $s call0formal@p@0)))))
    (forall( (|p_$32_$5| $ptr))(!(<= ($timestamp $s |p_$32_$5|) ($timestamp $s@1 |p_$32_$5|))  :weight  0 :pattern ( ($timestamp $s@1 |p_$32_$5|))))
    (not (< ($current_timestamp $s@1) ($current_timestamp $s)))
    (or ($spans_the_same $s $s@1 call0formal@p@0 ^A) $is_stuttering_check)
  )
    $@hash@exit
)))
(let ((anon00_Then (=> (and true
    $@condition
    $is_unwrap_check
    ($good_for_pre_can_unwrap $s)
    ($inv $s call0formal@@l@0 ($typ call0formal@@l@0))
    ($spans_the_same $s $s@0 call0formal@@l@0 ($typ call0formal@@l@0))
    ($wrapped $s call0formal@@l@0 ($typ call0formal@@l@0))
    (= call0formal@@l@0 ($ptr ^A P@_this_))
    (forall( (|#q_$1_$3| $ptr))(!(=> ($closed $s |#q_$1_$3|) ($inv $s |#q_$1_$3| ($typ |#q_$1_$3|)))  :pattern ( ($st $s |#q_$1_$3|))))
    (not $is_stuttering_check)
    (or (= ($ref_cnt $s call0formal@@l@0) 0) (not ($is_claimable ($typ call0formal@@l@0))))
  )(and 
    anon00_Then_assertion
    anon00_Then@1
))))
(let ((anon5 (=> (and true
    (= call0formal@p@0 ($ptr ^A P@_this_))
  )(and 
    anon5_assertion
    anon5@1
))))
(let ((anon01_Else (=> (and true
    $is_stuttering_check
    ($good_for_admissibility $s)
    (forall( (|#q_$0_$5| $ptr))(!(=> ($closed $s |#q_$0_$5|) ($inv $s |#q_$0_$5| ($typ |#q_$0_$5|)))  :pattern ( ($st $s |#q_$0_$5|))))
    (not $@condition_$0)
  )
    anon5
)))
(let ((anon01_Then (=> (and true
    $@condition_$0
    ($closed $s ($ptr ^A P@_this_))
    ($inv $s ($ptr ^A P@_this_) ($typ ($ptr ^A P@_this_)))
    ($stuttering_pre $s ($ptr ^A P@_this_))
    (not $is_stuttering_check)
  )
    anon5
)))
(let ((anon00_Else (=> (and true
    (not $@condition)
    (not $is_unwrap_check)
  )
    (and anon01_Else anon01_Then)
)))
(let (($root (=> (and true
  )
    (and anon00_Else anon00_Then)
)))
   $root
))))))))))))))))
))

;Commands
   (check-sat)
   ;(get-unsat-core)
