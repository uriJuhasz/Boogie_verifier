;Analysis time until now:     3s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$ptr@To@Bool@@ 0)
(declare-sort $ctype 0)
(declare-sort $field 0)
(declare-sort $flowdata 0)
(declare-sort $kind 0)
(declare-sort $label 0)
(declare-sort $map_t..$ptr_to..^^void.^^bool 0)
(declare-sort $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool 0)
(declare-sort $map_t..$ptr_to..^Node.^^u4 0)
(declare-sort $map_t..^^i4.^^bool 0)
(declare-sort $map_t..^^u4.$ptr_to..^Node 0)
(declare-sort $memory_t 0)
(declare-sort $ptr 0)
(declare-sort $ptrclub 0)
(declare-sort $ptrset 0)
(declare-sort $pure_function 0)
(declare-sort $record 0)
(declare-sort $state 0)
(declare-sort $status 0)
(declare-sort $statusmap_t 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $type_state 0)
(declare-sort $typemap_t 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)

;Functions
(declare-fun $@bf_212 ( ) Bool)
(declare-fun $@bf_213 ( ) Bool)
(declare-fun $@bf_214 ( ) Bool)
(declare-fun $@bf_215 ( ) Bool)
(declare-fun $@bf_216 ( ) Bool)
(declare-fun $@bf_217 ( ) Bool)
(declare-fun $@bf_218 ( ) Bool)
(declare-fun $@bf_219 ( ) Bool)
(declare-fun $@bf_220 ( ) Bool)
(declare-fun $@bf_221 ( ) Bool)
(declare-fun $@bf_222 ( ) Bool)
(declare-fun $@bf_223 ( ) Bool)
(declare-fun $@classifier@default ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@distTp3 ( ) $ctype)
(declare-fun $@distTp4 ( ) $ctype)
(declare-fun $@distTp5 ( ) $ctype)
(declare-fun $@distTp6 ( ) $ctype)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c ( ) $token)
(declare-fun $@loc.i ( ) $token)
(declare-fun $@loc.l ( ) $token)
(declare-fun $@loc.n ( ) $token)
(declare-fun $@tok$1^30.1 ( ) $token)
(declare-fun $@tok$1^35.10 ( ) $token)
(declare-fun $@tok$1^36.3 ( ) $token)
(declare-fun $@tok$1^38.21 ( ) $token)
(declare-fun $@tok$1^38.3 ( ) $token)
(declare-fun $@tok$1^38.31 ( ) $token)
(declare-fun $@tok$1^38.44 ( ) $token)
(declare-fun $@tok$1^38.8 ( ) $token)
(declare-fun $@wrTime$1^30.1 ( ) Int)
(declare-fun $_and ( $ctype Int Int ) Int)
(declare-fun $_not ( $ctype Int ) Int)
(declare-fun $_or ( $ctype Int Int ) Int)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $_xor ( $ctype Int Int ) Int)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $array_length ( $ctype ) Int)
(declare-fun $array_members ( $ptr $ctype Int ) $ptrset)
(declare-fun $array_path ( $field Int ) $field)
(declare-fun $array_path_1 ( $field ) $field)
(declare-fun $array_path_2 ( $field ) Int)
(declare-fun $array_range ( $state $ptr $ctype Int ) $ptrset)
(declare-fun $array_range_no_state ( $ptr $ctype Int ) $ptrset)
(declare-fun $as_in_range_t ( $ctype ) $ctype)
(declare-fun $as_record_record_field ( $field ) $field)
(declare-fun $bv_extract_signed ( Int Int Int Int ) Int)
(declare-fun $bv_extract_unsigned ( Int Int Int Int ) Int)
(declare-fun $bv_update ( Int Int Int Int Int ) Int)
(declare-fun $by_claim ( $state $ptr $ptr $ptr ) $ptr)
(declare-fun $claim_idx ( $ptr $ptr ) Int)
(declare-fun $claim_no ( $state $ptr Int ) $ptr)
(declare-fun $claim_version ( $ptr ) $version)
(declare-fun $current_frame_level ( ) Int)
(declare-fun $current_pure_post_level ( ) Int)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $domain ( $state $ptr ) $ptrset)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $element_type ( $ctype ) $ctype)
(declare-fun $embedded_array_size ( $field $ctype ) Int)
(declare-fun $extent ( $state $ptr ) $ptrset)
(declare-fun $fetch_from_domain ( $version $ptr ) Int)
(declare-fun $fetch_from_vv ( $vol_version $ptr ) Int)
(declare-fun $field_offset ( $field ) Int)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $frame_level ( $pure_function ) Int)
(declare-fun $full_extent ( $ptr ) $ptrset)
(declare-fun $get_fnptr ( Int $ctype ) $ptr)
(declare-fun $get_fnptr_ref ( Int ) Int)
(declare-fun $get_string_literal ( Int Int ) $ptr)
(declare-fun $ghost_emb ( Int ) $ptr)
(declare-fun $ghost_path ( Int ) $field)
(declare-fun $ghost_ref ( $ptr $field ) Int)
(declare-fun $id_set_disjoint ( $ptr $ptrset $ptrset ) Int)
(declare-fun $idx ( $ptr Int $ctype ) $ptr)
(declare-fun $index_within ( $ptr $ptr ) Int)
(declare-fun $int_to_map_t..^^i4.^^bool ( Int ) $map_t..^^i4.^^bool)
(declare-fun $int_to_map_t..^^u4.ptr_to..^Node ( Int ) $map_t..^^u4.$ptr_to..^Node)
(declare-fun $int_to_map_t..ptr_to..^^void.^^bool ( Int ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $int_to_map_t..ptr_to..^Node.^^u4 ( Int ) $map_t..$ptr_to..^Node.^^u4)
(declare-fun $int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ( Int ) $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool)
(declare-fun $int_to_ptr ( Int ) $ptr)
(declare-fun $int_to_ptrset ( Int ) $ptrset)
(declare-fun $int_to_record ( Int ) $record)
(declare-fun $int_to_version ( Int ) $version)
(declare-fun $int_to_vol_version ( Int ) $vol_version)
(declare-fun $kind_array ( ) $kind)
(declare-fun $kind_composite ( ) $kind)
(declare-fun $kind_of ( $ctype ) $kind)
(declare-fun $kind_primitive ( ) $kind)
(declare-fun $kind_thread ( ) $kind)
(declare-fun $lblset.bot ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $lblset.top ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $me_ref ( ) Int)
(declare-fun $memory ( $state ) $memory_t)
(declare-fun $memory_allocator_type ( ) $ctype)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $no_claim ( ) $ptr)
(declare-fun $non_null_array_range ( $ptr $ctype Int ) $ptrset)
(declare-fun $non_null_extent ( $state $ptr ) $ptrset)
(declare-fun $non_null_set_singleton ( $ptr ) $ptrset)
(declare-fun $null ( ) $ptr)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $ptrset)
(declare-fun $owns_set_field ( $ctype ) $field)
(declare-fun $ptr ( $ctype Int ) $ptr)
(declare-fun $ptr_level ( $ctype ) Int)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_int ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $ptrclub.addMember ( $ptr $ptrclub ) $ptrclub)
(declare-fun $ptrclub.bound ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.compare ( $ptr $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.construct ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $ptrclub)
(declare-fun $ptrclub.empty ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.members ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $pure_post_level ( $pure_function ) Int)
(declare-fun $read_ptr_m ( $state $ptr $ctype ) $ptr)
(declare-fun $read_version ( $state $ptr ) $version)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $rec_fetch ( $record $field ) Int)
(declare-fun $rec_update ( $record $field Int ) $record)
(declare-fun $rec_zero ( ) $record)
(declare-fun $record_field_int_kind ( $field ) $ctype)
(declare-fun $ref ( $ptr ) Int)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $release ( $state $state $ptr $ptr ) $state)
(declare-fun $released ( $state $ptr $ptr ) $status)
(declare-fun $result@0 ( ) Int)
(declare-fun $s ( ) $state)
(declare-fun $select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool Int ) $map_t..^^i4.^^bool)
(declare-fun $select.$map_t..$ptr_to..^Node.^^u4 ( $map_t..$ptr_to..^Node.^^u4 Int ) Int)
(declare-fun $select.$map_t..^^u4.$ptr_to..^Node ( $map_t..^^u4.$ptr_to..^Node Int ) Int)
(declare-fun $select.flow.data ( $memory_t $ptr ) $flowdata)
(declare-fun $select.flow.label ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.flow.meta ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.mem ( $memory_t $ptr ) Int)
(declare-fun $select.sm ( $statusmap_t $ptr ) $status)
(declare-fun $select.tm ( $typemap_t $ptr ) $type_state)
(declare-fun $select_range.mem ( $memory_t $ptr Int ) Int)
(declare-fun $set_cardinality ( $ptrset ) Int)
(declare-fun $set_difference ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_empty ( ) $ptrset)
(declare-fun $set_intersection ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_singleton ( $ptr ) $ptrset)
(declare-fun $set_union ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_universe ( ) $ptrset)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $span ( $ptr ) $ptrset)
(declare-fun $spec_ptr_to ( $ctype ) $ctype)
(declare-fun $st_owner ( $status ) $ptr)
(declare-fun $st_timestamp ( $status ) Int)
(declare-fun $statusmap ( $state ) $statusmap_t)
(declare-fun $store.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr Bool ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $store.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool Int $map_t..^^i4.^^bool ) $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool)
(declare-fun $store.$map_t..$ptr_to..^Node.^^u4 ( $map_t..$ptr_to..^Node.^^u4 Int Int ) $map_t..$ptr_to..^Node.^^u4)
(declare-fun $store.$map_t..^^i4.^^bool ( $map_t..^^i4.^^bool Int Bool ) $map_t..^^i4.^^bool)
(declare-fun $store.$map_t..^^u4.$ptr_to..^Node ( $map_t..^^u4.$ptr_to..^Node Int Int ) $map_t..^^u4.$ptr_to..^Node)
(declare-fun $store.flow.data ( $memory_t $ptr $flowdata ) $memory_t)
(declare-fun $store.flow.label ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.flow.meta ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.mem ( $memory_t $ptr Int ) $memory_t)
(declare-fun $store.sm ( $statusmap_t $ptr $status ) $statusmap_t)
(declare-fun $store.tm ( $typemap_t $ptr $type_state ) $typemap_t)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $take_over ( $state $ptr $ptr ) $state)
(declare-fun $taken_over ( $state $ptr $ptr ) $status)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $ts_active_option ( $type_state ) $field)
(declare-fun $ts_emb ( $type_state ) $ptr)
(declare-fun $ts_path ( $type_state ) $field)
(declare-fun $typ ( $ptr ) $ctype)
(declare-fun $typemap ( $state ) $typemap_t)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $unchecked_sbits ( Int Int ) Int)
(declare-fun $unchecked_ubits ( Int Int ) Int)
(declare-fun $unchk_add ( $ctype Int Int ) Int)
(declare-fun $unptr_to ( $ctype ) $ctype)
(declare-fun $update_int ( $state $ptr Int ) $state)
(declare-fun $ver_domain ( $version ) $ptrset)
(declare-fun $volatile_span ( $state $ptr ) $ptrset)
(declare-fun $vs_base_ref ( $struct ) Int)
(declare-fun $vs_ctor ( $state $ptr ) $struct)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun $zero.$map_t..$ptr_to..^^void.^^bool ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $zero.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( ) $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool)
(declare-fun $zero.$map_t..$ptr_to..^Node.^^u4 ( ) $map_t..$ptr_to..^Node.^^u4)
(declare-fun $zero.$map_t..^^i4.^^bool ( ) $map_t..^^i4.^^bool)
(declare-fun $zero.$map_t..^^u4.$ptr_to..^Node ( ) $map_t..^^u4.$ptr_to..^Node)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@state_t ( ) $ctype)
(declare-fun ^$@struct ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^$@thread_id_t ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^f4 ( ) $ctype)
(declare-fun ^^f8 ( ) $ctype)
(declare-fun ^^i1 ( ) $ctype)
(declare-fun ^^i2 ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^i8 ( ) $ctype)
(declare-fun ^^mathint ( ) $ctype)
(declare-fun ^^root_emb ( ) $ctype)
(declare-fun ^^u1 ( ) $ctype)
(declare-fun ^^u2 ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun ^List ( ) $ctype)
(declare-fun ^Node ( ) $ctype)
(declare-fun cf@classifier@default ( ) $pure_function)
(declare-fun cf@lambda@1 ( ) $pure_function)
(declare-fun F@lambda@1 ( ) $map_t..^^i4.^^bool)
(declare-fun L@i ( ) Int)
(declare-fun L@i@0 ( ) Int)
(declare-fun L@i@1 ( ) Int)
(declare-fun L@n ( ) Int)
(declare-fun L@n@0 ( ) Int)
(declare-fun L@n@1 ( ) Int)
(declare-fun L@n@2 ( ) Int)
(declare-fun l@public ( ) $label)
(declare-fun List.$owns ( ) $field)
(declare-fun List.followers ( ) $field)
(declare-fun List.head ( ) $field)
(declare-fun List.idx ( ) $field)
(declare-fun List.length ( ) $field)
(declare-fun List.length_acc ( ) $field)
(declare-fun List.seq ( ) $field)
(declare-fun MapRead$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr ) Bool)
(declare-fun MapWrite$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr Bool ) $@Map@@$ptr@To@Bool@@)
(declare-fun Node.$owns ( ) $field)
(declare-fun Node.data ( ) $field)
(declare-fun Node.next ( ) $field)
(declare-fun P@l ( ) Int)

;Predicates
(declare-fun $account_claim ( $state $ptr $ptr ) Bool)
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $claimed_closed ( $state $ptr ) Bool)
(declare-fun $claims_claim ( $ptr $ptr ) Bool)
(declare-fun $claims_obj ( $ptr $ptr ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $domain_updated_at ( $state $state $ptr $ptrset ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $dont_instantiate_state ( $state ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $map_t..$ptr_to..^^void.^^bool ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.^^u4 ( $map_t..$ptr_to..^Node.^^u4 $map_t..$ptr_to..^Node.^^u4 ) Bool)
(declare-fun $eq.$map_t..^^i4.^^bool ( $map_t..^^i4.^^bool $map_t..^^i4.^^bool ) Bool)
(declare-fun $eq.$map_t..^^u4.$ptr_to..^Node ( $map_t..^^u4.$ptr_to..^Node $map_t..^^u4.$ptr_to..^Node ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_is_fresh ( $state $state $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $extent_zero ( $state $ptr ) Bool)
(declare-fun $file_name_is ( Int $token ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $function_arg_type ( $pure_function Int $ctype ) Bool)
(declare-fun $function_entry ( $state ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_volatile_owns_set ( $ctype ) Bool)
(declare-fun $in_claim_domain ( $ptr $ptr ) Bool)
(declare-fun $in_domain ( $state $ptr $ptr ) Bool)
(declare-fun $in_domain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_range_phys_ptr ( Int ) Bool)
(declare-fun $in_range_sbits ( Int Int ) Bool)
(declare-fun $in_range_spec_ptr ( Int ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $in_range_ubits ( Int Int ) Bool)
(declare-fun $in_some_owns ( $ptr ) Bool)
(declare-fun $in_vdomain ( $state $ptr $ptr ) Bool)
(declare-fun $in_vdomain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_wrapped_domain ( $state $ptr ) Bool)
(declare-fun $in_writes_at ( Int $ptr ) Bool)
(declare-fun $instantiate_bool ( Bool ) Bool)
(declare-fun $instantiate_int ( Int ) Bool)
(declare-fun $instantiate_ptr ( $ptr ) Bool)
(declare-fun $instantiate_ptrset ( $ptrset ) Bool)
(declare-fun $inv_lab ( $state $ptr $label ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $invok_state ( $state ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_approved_by ( $ctype $field $field ) Bool)
(declare-fun $is_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_array_vol_or_nonvol ( $state $ptr $ctype Int Bool ) Bool)
(declare-fun $is_arraytype ( $ctype ) Bool)
(declare-fun $is_base_field ( $field ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_composite ( $ctype ) Bool)
(declare-fun $is_domain_root ( $state $ptr ) Bool)
(declare-fun $is_fnptr_type ( $ctype ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_non_primitive ( $ctype ) Bool)
(declare-fun $is_owner_approved ( $ctype $field ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_primitive_embedded_array ( $field Int ) Bool)
(declare-fun $is_primitive_embedded_volatile_array ( $field Int $ctype ) Bool)
(declare-fun $is_primitive_non_volatile_field ( $field ) Bool)
(declare-fun $is_record_field ( $ctype $field $ctype ) Bool)
(declare-fun $is_record_type ( $ctype ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $local_value_is ( $state $token $token Int $ctype ) Bool)
(declare-fun $local_value_is_ptr ( $state $token $token $ptr $ctype ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $position_marker ( ) Bool)
(declare-fun $post_unwrap ( $state $state ) Bool)
(declare-fun $program_entry_point ( $state ) Bool)
(declare-fun $program_entry_point_ch ( $state ) Bool)
(declare-fun $rec_base_eq ( Int Int ) Bool)
(declare-fun $rec_eq ( $record $record ) Bool)
(declare-fun $seclbl.bot ( ) Bool)
(declare-fun $seclbl.top ( ) Bool)
(declare-fun $select.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr ) Bool)
(declare-fun $select.$map_t..^^i4.^^bool ( $map_t..^^i4.^^bool Int ) Bool)
(declare-fun $sequential ( $state $state $ptr $ctype ) Bool)
(declare-fun $set_disjoint ( $ptrset $ptrset ) Bool)
(declare-fun $set_eq ( $ptrset $ptrset ) Bool)
(declare-fun $set_in ( $ptr $ptrset ) Bool)
(declare-fun $set_in0 ( $ptr $ptrset ) Bool)
(declare-fun $set_in2 ( $ptr $ptrset ) Bool)
(declare-fun $simple_index ( $ptr $ptr ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $st_closed ( $status ) Bool)
(declare-fun $state_nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $state_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $ts_is_volatile ( $type_state ) Bool)
(declare-fun $ts_typed ( $type_state ) Bool)
(declare-fun $type_code_is ( Int $ctype ) Bool)
(declare-fun $typed ( $state $ptr ) Bool)
(declare-fun $valid_claim ( $state $ptr ) Bool)
(declare-fun is_active_ptrclub ( $ptrclub ) Bool)
(declare-fun sk_hack ( Bool ) Bool)

;Axioms
   (assert (! (forall ((|i| $ptr)(|m| $@Map@@$ptr@To@Bool@@)(|v| Bool))(!(= v (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i v) i)):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i v) i)) :qid map_1_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_0))
   (assert (! (forall ((|v_1| Bool)(|m_1| $@Map@@$ptr@To@Bool@@)(|i_1| $ptr)(|j_1| $ptr))(!(=> (not (= j_1 i_1)) (= (MapRead$$@Map@@$ptr@To@Bool@@$ m_1 j_1) (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_1 v_1) j_1))):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_1 v_1) j_1)) :qid map_2_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_1))
   (assert (! (not (= $@distTp1 $memory_allocator_type)) :named ax_2))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_3))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_4))
   (assert (! (not (= $@distTp2 $memory_allocator_type)) :named ax_5))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_6))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_7))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_8))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_9))
   (assert (! (not (= $@distTp3 $memory_allocator_type)) :named ax_10))
   (assert (! (not (= $@distTp4 $@distTp1)) :named ax_11))
   (assert (! (not (= $@distTp4 $@distTp1)) :named ax_12))
   (assert (! (not (= $@distTp4 $@distTp2)) :named ax_13))
   (assert (! (not (= $@distTp4 $@distTp2)) :named ax_14))
   (assert (! (not (= $@distTp4 $@distTp3)) :named ax_15))
   (assert (! (not (= $@distTp4 $@distTp3)) :named ax_16))
   (assert (! (not (= $@distTp4 $memory_allocator_type)) :named ax_17))
   (assert (! (not (= $@distTp5 $@distTp1)) :named ax_18))
   (assert (! (not (= $@distTp5 $@distTp1)) :named ax_19))
   (assert (! (not (= $@distTp5 $@distTp2)) :named ax_20))
   (assert (! (not (= $@distTp5 $@distTp2)) :named ax_21))
   (assert (! (not (= $@distTp5 $@distTp3)) :named ax_22))
   (assert (! (not (= $@distTp5 $@distTp3)) :named ax_23))
   (assert (! (not (= $@distTp5 $@distTp4)) :named ax_24))
   (assert (! (not (= $@distTp5 $@distTp4)) :named ax_25))
   (assert (! (not (= $@distTp5 $memory_allocator_type)) :named ax_26))
   (assert (! (not (= $@distTp6 $@distTp1)) :named ax_27))
   (assert (! (not (= $@distTp6 $@distTp1)) :named ax_28))
   (assert (! (not (= $@distTp6 $@distTp2)) :named ax_29))
   (assert (! (not (= $@distTp6 $@distTp2)) :named ax_30))
   (assert (! (not (= $@distTp6 $@distTp3)) :named ax_31))
   (assert (! (not (= $@distTp6 $@distTp3)) :named ax_32))
   (assert (! (not (= $@distTp6 $@distTp4)) :named ax_33))
   (assert (! (not (= $@distTp6 $@distTp4)) :named ax_34))
   (assert (! (not (= $@distTp6 $@distTp5)) :named ax_35))
   (assert (! (not (= $@distTp6 $@distTp5)) :named ax_36))
   (assert (! (not (= $@distTp6 $memory_allocator_type)) :named ax_37))
   (assert (! (not (= $@loc.i $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_38))
   (assert (! (not (= $@loc.i $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_39))
   (assert (! (not (= $@loc.i $@loc.l)) :named ax_40))
   (assert (! (not (= $@loc.i $@tok$1^30.1)) :named ax_41))
   (assert (! (not (= $@loc.i $@tok$1^36.3)) :named ax_42))
   (assert (! (not (= $@loc.l $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_43))
   (assert (! (not (= $@loc.l $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_44))
   (assert (! (not (= $@loc.l $@loc.i)) :named ax_45))
   (assert (! (not (= $@loc.l $@tok$1^30.1)) :named ax_46))
   (assert (! (not (= $@loc.n $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_47))
   (assert (! (not (= $@loc.n $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_48))
   (assert (! (not (= $@loc.n $@loc.i)) :named ax_49))
   (assert (! (not (= $@loc.n $@loc.i)) :named ax_50))
   (assert (! (not (= $@loc.n $@loc.l)) :named ax_51))
   (assert (! (not (= $@loc.n $@loc.l)) :named ax_52))
   (assert (! (not (= $@loc.n $@tok$1^30.1)) :named ax_53))
   (assert (! (not (= $@loc.n $@tok$1^35.10)) :named ax_54))
   (assert (! (not (= $@loc.n $@tok$1^36.3)) :named ax_55))
   (assert (! (not (= $@tok$1^30.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_56))
   (assert (! (not (= $@tok$1^30.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_57))
   (assert (! (not (= $@tok$1^30.1 $@loc.i)) :named ax_58))
   (assert (! (not (= $@tok$1^30.1 $@loc.l)) :named ax_59))
   (assert (! (not (= $@tok$1^30.1 $@loc.n)) :named ax_60))
   (assert (! (not (= $@tok$1^35.10 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_61))
   (assert (! (not (= $@tok$1^35.10 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_62))
   (assert (! (not (= $@tok$1^35.10 $@loc.i)) :named ax_63))
   (assert (! (not (= $@tok$1^35.10 $@loc.i)) :named ax_64))
   (assert (! (not (= $@tok$1^35.10 $@loc.l)) :named ax_65))
   (assert (! (not (= $@tok$1^35.10 $@loc.l)) :named ax_66))
   (assert (! (not (= $@tok$1^35.10 $@loc.n)) :named ax_67))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^30.1)) :named ax_68))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^30.1)) :named ax_69))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^36.3)) :named ax_70))
   (assert (! (not (= $@tok$1^36.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_71))
   (assert (! (not (= $@tok$1^36.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_72))
   (assert (! (not (= $@tok$1^36.3 $@loc.i)) :named ax_73))
   (assert (! (not (= $@tok$1^36.3 $@loc.l)) :named ax_74))
   (assert (! (not (= $@tok$1^36.3 $@loc.l)) :named ax_75))
   (assert (! (not (= $@tok$1^36.3 $@loc.n)) :named ax_76))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^30.1)) :named ax_77))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^30.1)) :named ax_78))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^35.10)) :named ax_79))
   (assert (! (not (= $@tok$1^38.21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_80))
   (assert (! (not (= $@tok$1^38.21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_81))
   (assert (! (not (= $@tok$1^38.21 $@loc.i)) :named ax_82))
   (assert (! (not (= $@tok$1^38.21 $@loc.i)) :named ax_83))
   (assert (! (not (= $@tok$1^38.21 $@loc.l)) :named ax_84))
   (assert (! (not (= $@tok$1^38.21 $@loc.l)) :named ax_85))
   (assert (! (not (= $@tok$1^38.21 $@loc.n)) :named ax_86))
   (assert (! (not (= $@tok$1^38.21 $@loc.n)) :named ax_87))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^30.1)) :named ax_88))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^30.1)) :named ax_89))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^35.10)) :named ax_90))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^35.10)) :named ax_91))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^36.3)) :named ax_92))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^36.3)) :named ax_93))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^38.8)) :named ax_94))
   (assert (! (not (= $@tok$1^38.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_95))
   (assert (! (not (= $@tok$1^38.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_96))
   (assert (! (not (= $@tok$1^38.3 $@loc.i)) :named ax_97))
   (assert (! (not (= $@tok$1^38.3 $@loc.i)) :named ax_98))
   (assert (! (not (= $@tok$1^38.3 $@loc.l)) :named ax_99))
   (assert (! (not (= $@tok$1^38.3 $@loc.l)) :named ax_100))
   (assert (! (not (= $@tok$1^38.3 $@loc.n)) :named ax_101))
   (assert (! (not (= $@tok$1^38.3 $@loc.n)) :named ax_102))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^30.1)) :named ax_103))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^30.1)) :named ax_104))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^35.10)) :named ax_105))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^35.10)) :named ax_106))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^36.3)) :named ax_107))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^36.3)) :named ax_108))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^38.21)) :named ax_109))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^38.21)) :named ax_110))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^38.8)) :named ax_111))
   (assert (! (not (= $@tok$1^38.31 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_112))
   (assert (! (not (= $@tok$1^38.31 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_113))
   (assert (! (not (= $@tok$1^38.31 $@loc.i)) :named ax_114))
   (assert (! (not (= $@tok$1^38.31 $@loc.i)) :named ax_115))
   (assert (! (not (= $@tok$1^38.31 $@loc.l)) :named ax_116))
   (assert (! (not (= $@tok$1^38.31 $@loc.l)) :named ax_117))
   (assert (! (not (= $@tok$1^38.31 $@loc.n)) :named ax_118))
   (assert (! (not (= $@tok$1^38.31 $@loc.n)) :named ax_119))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^30.1)) :named ax_120))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^30.1)) :named ax_121))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^35.10)) :named ax_122))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^35.10)) :named ax_123))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^36.3)) :named ax_124))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^36.3)) :named ax_125))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.21)) :named ax_126))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.21)) :named ax_127))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.3)) :named ax_128))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.3)) :named ax_129))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.8)) :named ax_130))
   (assert (! (not (= $@tok$1^38.44 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_131))
   (assert (! (not (= $@tok$1^38.44 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_132))
   (assert (! (not (= $@tok$1^38.44 $@loc.i)) :named ax_133))
   (assert (! (not (= $@tok$1^38.44 $@loc.i)) :named ax_134))
   (assert (! (not (= $@tok$1^38.44 $@loc.l)) :named ax_135))
   (assert (! (not (= $@tok$1^38.44 $@loc.l)) :named ax_136))
   (assert (! (not (= $@tok$1^38.44 $@loc.n)) :named ax_137))
   (assert (! (not (= $@tok$1^38.44 $@loc.n)) :named ax_138))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^30.1)) :named ax_139))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^30.1)) :named ax_140))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^35.10)) :named ax_141))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^35.10)) :named ax_142))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^36.3)) :named ax_143))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^36.3)) :named ax_144))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.21)) :named ax_145))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.21)) :named ax_146))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.3)) :named ax_147))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.3)) :named ax_148))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.31)) :named ax_149))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.31)) :named ax_150))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.8)) :named ax_151))
   (assert (! (not (= $@tok$1^38.8 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_152))
   (assert (! (not (= $@tok$1^38.8 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_153))
   (assert (! (not (= $@tok$1^38.8 $@loc.i)) :named ax_154))
   (assert (! (not (= $@tok$1^38.8 $@loc.i)) :named ax_155))
   (assert (! (not (= $@tok$1^38.8 $@loc.l)) :named ax_156))
   (assert (! (not (= $@tok$1^38.8 $@loc.l)) :named ax_157))
   (assert (! (not (= $@tok$1^38.8 $@loc.n)) :named ax_158))
   (assert (! (not (= $@tok$1^38.8 $@loc.n)) :named ax_159))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^30.1)) :named ax_160))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^30.1)) :named ax_161))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^35.10)) :named ax_162))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^35.10)) :named ax_163))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^36.3)) :named ax_164))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^36.3)) :named ax_165))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.21)) :named ax_166))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.3)) :named ax_167))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.31)) :named ax_168))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.44)) :named ax_169))
   (assert (! (not (= $kind_array $kind_thread)) :named ax_170))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_171))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_172))
   (assert (! (not (= $kind_composite $kind_primitive)) :named ax_173))
   (assert (! (not (= $kind_composite $kind_thread)) :named ax_174))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_175))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_176))
   (assert (! (not (= $kind_primitive $kind_composite)) :named ax_177))
   (assert (! (not (= $kind_primitive $kind_thread)) :named ax_178))
   (assert (! (not (= $kind_thread $kind_array)) :named ax_179))
   (assert (! (not (= $kind_thread $kind_composite)) :named ax_180))
   (assert (! (not (= $kind_thread $kind_primitive)) :named ax_181))
   (assert (! (not (= $memory_allocator_type $@distTp1)) :named ax_182))
   (assert (! (not (= $memory_allocator_type $@distTp2)) :named ax_183))
   (assert (! (not (= $memory_allocator_type $@distTp3)) :named ax_184))
   (assert (! (not (= $memory_allocator_type $@distTp4)) :named ax_185))
   (assert (! (not (= $memory_allocator_type $@distTp5)) :named ax_186))
   (assert (! (not (= $memory_allocator_type $@distTp6)) :named ax_187))
   (assert (! (not (= $memory_allocator_type ^$@thread_id)) :named ax_188))
   (assert (! (not (= $memory_allocator_type ^List)) :named ax_189))
   (assert (! (not (= $memory_allocator_type ^Node)) :named ax_190))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_191))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_192))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_193))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_194))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_195))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_196))
   (assert (! (not (= ^$@ptrset $@distTp4)) :named ax_197))
   (assert (! (not (= ^$@ptrset $@distTp4)) :named ax_198))
   (assert (! (not (= ^$@ptrset $@distTp5)) :named ax_199))
   (assert (! (not (= ^$@ptrset $@distTp5)) :named ax_200))
   (assert (! (not (= ^$@ptrset $@distTp6)) :named ax_201))
   (assert (! (not (= ^$@ptrset $@distTp6)) :named ax_202))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_203))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_204))
   (assert (! (not (= ^$@ptrset ^$@state_t)) :named ax_205))
   (assert (! (not (= ^$@ptrset ^$@struct)) :named ax_206))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_207))
   (assert (! (not (= ^$@ptrset ^List)) :named ax_208))
   (assert (! (not (= ^$@ptrset ^Node)) :named ax_209))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_210))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_211))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_212))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_213))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_214))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_215))
   (assert (! (not (= ^$@state_t $@distTp4)) :named ax_216))
   (assert (! (not (= ^$@state_t $@distTp4)) :named ax_217))
   (assert (! (not (= ^$@state_t $@distTp5)) :named ax_218))
   (assert (! (not (= ^$@state_t $@distTp5)) :named ax_219))
   (assert (! (not (= ^$@state_t $@distTp6)) :named ax_220))
   (assert (! (not (= ^$@state_t $@distTp6)) :named ax_221))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_222))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_223))
   (assert (! (not (= ^$@state_t ^$@ptrset)) :named ax_224))
   (assert (! (not (= ^$@state_t ^$@struct)) :named ax_225))
   (assert (! (not (= ^$@state_t ^$@thread_id)) :named ax_226))
   (assert (! (not (= ^$@state_t ^List)) :named ax_227))
   (assert (! (not (= ^$@state_t ^Node)) :named ax_228))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_229))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_230))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_231))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_232))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_233))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_234))
   (assert (! (not (= ^$@struct $@distTp4)) :named ax_235))
   (assert (! (not (= ^$@struct $@distTp4)) :named ax_236))
   (assert (! (not (= ^$@struct $@distTp5)) :named ax_237))
   (assert (! (not (= ^$@struct $@distTp5)) :named ax_238))
   (assert (! (not (= ^$@struct $@distTp6)) :named ax_239))
   (assert (! (not (= ^$@struct $@distTp6)) :named ax_240))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_241))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_242))
   (assert (! (not (= ^$@struct ^$@ptrset)) :named ax_243))
   (assert (! (not (= ^$@struct ^$@state_t)) :named ax_244))
   (assert (! (not (= ^$@struct ^$@thread_id)) :named ax_245))
   (assert (! (not (= ^$@struct ^List)) :named ax_246))
   (assert (! (not (= ^$@struct ^Node)) :named ax_247))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_248))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_249))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_250))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_251))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_252))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_253))
   (assert (! (not (= ^$@thread_id $@distTp4)) :named ax_254))
   (assert (! (not (= ^$@thread_id $@distTp4)) :named ax_255))
   (assert (! (not (= ^$@thread_id $@distTp5)) :named ax_256))
   (assert (! (not (= ^$@thread_id $@distTp5)) :named ax_257))
   (assert (! (not (= ^$@thread_id $@distTp6)) :named ax_258))
   (assert (! (not (= ^$@thread_id $@distTp6)) :named ax_259))
   (assert (! (not (= ^$@thread_id $memory_allocator_type)) :named ax_260))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_261))
   (assert (! (not (= ^$@thread_id ^$@state_t)) :named ax_262))
   (assert (! (not (= ^$@thread_id ^$@struct)) :named ax_263))
   (assert (! (not (= ^$@thread_id ^List)) :named ax_264))
   (assert (! (not (= ^$@thread_id ^Node)) :named ax_265))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_266))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_267))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_268))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_269))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_270))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_271))
   (assert (! (not (= ^$@thread_id_t $@distTp4)) :named ax_272))
   (assert (! (not (= ^$@thread_id_t $@distTp4)) :named ax_273))
   (assert (! (not (= ^$@thread_id_t $@distTp5)) :named ax_274))
   (assert (! (not (= ^$@thread_id_t $@distTp5)) :named ax_275))
   (assert (! (not (= ^$@thread_id_t $@distTp6)) :named ax_276))
   (assert (! (not (= ^$@thread_id_t $@distTp6)) :named ax_277))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_278))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_279))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_280))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_281))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_282))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_283))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_284))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_285))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_286))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_287))
   (assert (! (not (= ^$@thread_id_t ^List)) :named ax_288))
   (assert (! (not (= ^$@thread_id_t ^Node)) :named ax_289))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_290))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_291))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_292))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_293))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_294))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_295))
   (assert (! (not (= ^^bool $@distTp4)) :named ax_296))
   (assert (! (not (= ^^bool $@distTp4)) :named ax_297))
   (assert (! (not (= ^^bool $@distTp5)) :named ax_298))
   (assert (! (not (= ^^bool $@distTp5)) :named ax_299))
   (assert (! (not (= ^^bool $@distTp6)) :named ax_300))
   (assert (! (not (= ^^bool $@distTp6)) :named ax_301))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_302))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_303))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_304))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_305))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_306))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_307))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_308))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_309))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_310))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_311))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_312))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_313))
   (assert (! (not (= ^^bool ^^claim)) :named ax_314))
   (assert (! (not (= ^^bool ^^f4)) :named ax_315))
   (assert (! (not (= ^^bool ^^f8)) :named ax_316))
   (assert (! (not (= ^^bool ^^mathint)) :named ax_317))
   (assert (! (not (= ^^bool ^^root_emb)) :named ax_318))
   (assert (! (not (= ^^bool ^List)) :named ax_319))
   (assert (! (not (= ^^bool ^Node)) :named ax_320))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_321))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_322))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_323))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_324))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_325))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_326))
   (assert (! (not (= ^^claim $@distTp4)) :named ax_327))
   (assert (! (not (= ^^claim $@distTp4)) :named ax_328))
   (assert (! (not (= ^^claim $@distTp5)) :named ax_329))
   (assert (! (not (= ^^claim $@distTp5)) :named ax_330))
   (assert (! (not (= ^^claim $@distTp6)) :named ax_331))
   (assert (! (not (= ^^claim $@distTp6)) :named ax_332))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_333))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_334))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_335))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_336))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_337))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_338))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_339))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_340))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_341))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_342))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_343))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_344))
   (assert (! (not (= ^^claim ^^bool)) :named ax_345))
   (assert (! (not (= ^^claim ^^mathint)) :named ax_346))
   (assert (! (not (= ^^claim ^^root_emb)) :named ax_347))
   (assert (! (not (= ^^claim ^List)) :named ax_348))
   (assert (! (not (= ^^claim ^Node)) :named ax_349))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_350))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_351))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_352))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_353))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_354))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_355))
   (assert (! (not (= ^^f4 $@distTp4)) :named ax_356))
   (assert (! (not (= ^^f4 $@distTp4)) :named ax_357))
   (assert (! (not (= ^^f4 $@distTp5)) :named ax_358))
   (assert (! (not (= ^^f4 $@distTp5)) :named ax_359))
   (assert (! (not (= ^^f4 $@distTp6)) :named ax_360))
   (assert (! (not (= ^^f4 $@distTp6)) :named ax_361))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_362))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_363))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_364))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_365))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_366))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_367))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_368))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_369))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_370))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_371))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_372))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_373))
   (assert (! (not (= ^^f4 ^^bool)) :named ax_374))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_375))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_376))
   (assert (! (not (= ^^f4 ^^f8)) :named ax_377))
   (assert (! (not (= ^^f4 ^^mathint)) :named ax_378))
   (assert (! (not (= ^^f4 ^^root_emb)) :named ax_379))
   (assert (! (not (= ^^f4 ^List)) :named ax_380))
   (assert (! (not (= ^^f4 ^Node)) :named ax_381))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_382))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_383))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_384))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_385))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_386))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_387))
   (assert (! (not (= ^^f8 $@distTp4)) :named ax_388))
   (assert (! (not (= ^^f8 $@distTp4)) :named ax_389))
   (assert (! (not (= ^^f8 $@distTp5)) :named ax_390))
   (assert (! (not (= ^^f8 $@distTp5)) :named ax_391))
   (assert (! (not (= ^^f8 $@distTp6)) :named ax_392))
   (assert (! (not (= ^^f8 $@distTp6)) :named ax_393))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_394))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_395))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_396))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_397))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_398))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_399))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_400))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_401))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_402))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_403))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_404))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_405))
   (assert (! (not (= ^^f8 ^^bool)) :named ax_406))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_407))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_408))
   (assert (! (not (= ^^f8 ^^f4)) :named ax_409))
   (assert (! (not (= ^^f8 ^^mathint)) :named ax_410))
   (assert (! (not (= ^^f8 ^^root_emb)) :named ax_411))
   (assert (! (not (= ^^f8 ^List)) :named ax_412))
   (assert (! (not (= ^^f8 ^Node)) :named ax_413))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_414))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_415))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_416))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_417))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_418))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_419))
   (assert (! (not (= ^^i1 $@distTp4)) :named ax_420))
   (assert (! (not (= ^^i1 $@distTp4)) :named ax_421))
   (assert (! (not (= ^^i1 $@distTp5)) :named ax_422))
   (assert (! (not (= ^^i1 $@distTp5)) :named ax_423))
   (assert (! (not (= ^^i1 $@distTp6)) :named ax_424))
   (assert (! (not (= ^^i1 $@distTp6)) :named ax_425))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_426))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_427))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_428))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_429))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_430))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_431))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_432))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_433))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_434))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_435))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_436))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_437))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_438))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_439))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_440))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_441))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_442))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_443))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_444))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_445))
   (assert (! (not (= ^^i1 ^^i2)) :named ax_446))
   (assert (! (not (= ^^i1 ^^i4)) :named ax_447))
   (assert (! (not (= ^^i1 ^^i8)) :named ax_448))
   (assert (! (not (= ^^i1 ^^mathint)) :named ax_449))
   (assert (! (not (= ^^i1 ^^root_emb)) :named ax_450))
   (assert (! (not (= ^^i1 ^^u1)) :named ax_451))
   (assert (! (not (= ^^i1 ^^u2)) :named ax_452))
   (assert (! (not (= ^^i1 ^^u4)) :named ax_453))
   (assert (! (not (= ^^i1 ^^u8)) :named ax_454))
   (assert (! (not (= ^^i1 ^^void)) :named ax_455))
   (assert (! (not (= ^^i1 ^List)) :named ax_456))
   (assert (! (not (= ^^i1 ^Node)) :named ax_457))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_458))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_459))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_460))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_461))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_462))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_463))
   (assert (! (not (= ^^i2 $@distTp4)) :named ax_464))
   (assert (! (not (= ^^i2 $@distTp4)) :named ax_465))
   (assert (! (not (= ^^i2 $@distTp5)) :named ax_466))
   (assert (! (not (= ^^i2 $@distTp5)) :named ax_467))
   (assert (! (not (= ^^i2 $@distTp6)) :named ax_468))
   (assert (! (not (= ^^i2 $@distTp6)) :named ax_469))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_470))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_471))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_472))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_473))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_474))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_475))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_476))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_477))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_478))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_479))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_480))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_481))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_482))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_483))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_484))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_485))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_486))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_487))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_488))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_489))
   (assert (! (not (= ^^i2 ^^i1)) :named ax_490))
   (assert (! (not (= ^^i2 ^^i4)) :named ax_491))
   (assert (! (not (= ^^i2 ^^i8)) :named ax_492))
   (assert (! (not (= ^^i2 ^^mathint)) :named ax_493))
   (assert (! (not (= ^^i2 ^^root_emb)) :named ax_494))
   (assert (! (not (= ^^i2 ^^u1)) :named ax_495))
   (assert (! (not (= ^^i2 ^^u2)) :named ax_496))
   (assert (! (not (= ^^i2 ^^u4)) :named ax_497))
   (assert (! (not (= ^^i2 ^^u8)) :named ax_498))
   (assert (! (not (= ^^i2 ^^void)) :named ax_499))
   (assert (! (not (= ^^i2 ^List)) :named ax_500))
   (assert (! (not (= ^^i2 ^Node)) :named ax_501))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_502))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_503))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_504))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_505))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_506))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_507))
   (assert (! (not (= ^^i4 $@distTp4)) :named ax_508))
   (assert (! (not (= ^^i4 $@distTp4)) :named ax_509))
   (assert (! (not (= ^^i4 $@distTp5)) :named ax_510))
   (assert (! (not (= ^^i4 $@distTp5)) :named ax_511))
   (assert (! (not (= ^^i4 $@distTp6)) :named ax_512))
   (assert (! (not (= ^^i4 $@distTp6)) :named ax_513))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_514))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_515))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_516))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_517))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_518))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_519))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_520))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_521))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_522))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_523))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_524))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_525))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_526))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_527))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_528))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_529))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_530))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_531))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_532))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_533))
   (assert (! (not (= ^^i4 ^^i1)) :named ax_534))
   (assert (! (not (= ^^i4 ^^i2)) :named ax_535))
   (assert (! (not (= ^^i4 ^^i8)) :named ax_536))
   (assert (! (not (= ^^i4 ^^mathint)) :named ax_537))
   (assert (! (not (= ^^i4 ^^root_emb)) :named ax_538))
   (assert (! (not (= ^^i4 ^^u1)) :named ax_539))
   (assert (! (not (= ^^i4 ^^u2)) :named ax_540))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_541))
   (assert (! (not (= ^^i4 ^^u8)) :named ax_542))
   (assert (! (not (= ^^i4 ^^void)) :named ax_543))
   (assert (! (not (= ^^i4 ^List)) :named ax_544))
   (assert (! (not (= ^^i4 ^Node)) :named ax_545))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_546))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_547))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_548))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_549))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_550))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_551))
   (assert (! (not (= ^^i8 $@distTp4)) :named ax_552))
   (assert (! (not (= ^^i8 $@distTp4)) :named ax_553))
   (assert (! (not (= ^^i8 $@distTp5)) :named ax_554))
   (assert (! (not (= ^^i8 $@distTp5)) :named ax_555))
   (assert (! (not (= ^^i8 $@distTp6)) :named ax_556))
   (assert (! (not (= ^^i8 $@distTp6)) :named ax_557))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_558))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_559))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_560))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_561))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_562))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_563))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_564))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_565))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_566))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_567))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_568))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_569))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_570))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_571))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_572))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_573))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_574))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_575))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_576))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_577))
   (assert (! (not (= ^^i8 ^^i1)) :named ax_578))
   (assert (! (not (= ^^i8 ^^i2)) :named ax_579))
   (assert (! (not (= ^^i8 ^^i4)) :named ax_580))
   (assert (! (not (= ^^i8 ^^mathint)) :named ax_581))
   (assert (! (not (= ^^i8 ^^root_emb)) :named ax_582))
   (assert (! (not (= ^^i8 ^^u1)) :named ax_583))
   (assert (! (not (= ^^i8 ^^u2)) :named ax_584))
   (assert (! (not (= ^^i8 ^^u4)) :named ax_585))
   (assert (! (not (= ^^i8 ^^u8)) :named ax_586))
   (assert (! (not (= ^^i8 ^^void)) :named ax_587))
   (assert (! (not (= ^^i8 ^List)) :named ax_588))
   (assert (! (not (= ^^i8 ^Node)) :named ax_589))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_590))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_591))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_592))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_593))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_594))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_595))
   (assert (! (not (= ^^mathint $@distTp4)) :named ax_596))
   (assert (! (not (= ^^mathint $@distTp4)) :named ax_597))
   (assert (! (not (= ^^mathint $@distTp5)) :named ax_598))
   (assert (! (not (= ^^mathint $@distTp5)) :named ax_599))
   (assert (! (not (= ^^mathint $@distTp6)) :named ax_600))
   (assert (! (not (= ^^mathint $@distTp6)) :named ax_601))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_602))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_603))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_604))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_605))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_606))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_607))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_608))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_609))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_610))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_611))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_612))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_613))
   (assert (! (not (= ^^mathint ^^bool)) :named ax_614))
   (assert (! (not (= ^^mathint ^^claim)) :named ax_615))
   (assert (! (not (= ^^mathint ^^f4)) :named ax_616))
   (assert (! (not (= ^^mathint ^^f8)) :named ax_617))
   (assert (! (not (= ^^mathint ^^i1)) :named ax_618))
   (assert (! (not (= ^^mathint ^^i2)) :named ax_619))
   (assert (! (not (= ^^mathint ^^i4)) :named ax_620))
   (assert (! (not (= ^^mathint ^^i8)) :named ax_621))
   (assert (! (not (= ^^mathint ^List)) :named ax_622))
   (assert (! (not (= ^^mathint ^Node)) :named ax_623))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_624))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_625))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_626))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_627))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_628))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_629))
   (assert (! (not (= ^^root_emb $@distTp4)) :named ax_630))
   (assert (! (not (= ^^root_emb $@distTp4)) :named ax_631))
   (assert (! (not (= ^^root_emb $@distTp5)) :named ax_632))
   (assert (! (not (= ^^root_emb $@distTp5)) :named ax_633))
   (assert (! (not (= ^^root_emb $@distTp6)) :named ax_634))
   (assert (! (not (= ^^root_emb $@distTp6)) :named ax_635))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_636))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_637))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_638))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_639))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_640))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_641))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_642))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_643))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_644))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_645))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_646))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_647))
   (assert (! (not (= ^^root_emb ^^bool)) :named ax_648))
   (assert (! (not (= ^^root_emb ^^claim)) :named ax_649))
   (assert (! (not (= ^^root_emb ^^f4)) :named ax_650))
   (assert (! (not (= ^^root_emb ^^f8)) :named ax_651))
   (assert (! (not (= ^^root_emb ^^i1)) :named ax_652))
   (assert (! (not (= ^^root_emb ^^i2)) :named ax_653))
   (assert (! (not (= ^^root_emb ^^i4)) :named ax_654))
   (assert (! (not (= ^^root_emb ^^i8)) :named ax_655))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_656))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_657))
   (assert (! (not (= ^^root_emb ^List)) :named ax_658))
   (assert (! (not (= ^^root_emb ^Node)) :named ax_659))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_660))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_661))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_662))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_663))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_664))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_665))
   (assert (! (not (= ^^u1 $@distTp4)) :named ax_666))
   (assert (! (not (= ^^u1 $@distTp4)) :named ax_667))
   (assert (! (not (= ^^u1 $@distTp5)) :named ax_668))
   (assert (! (not (= ^^u1 $@distTp5)) :named ax_669))
   (assert (! (not (= ^^u1 $@distTp6)) :named ax_670))
   (assert (! (not (= ^^u1 $@distTp6)) :named ax_671))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_672))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_673))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_674))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_675))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_676))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_677))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_678))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_679))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_680))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_681))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_682))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_683))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_684))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_685))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_686))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_687))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_688))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_689))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_690))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_691))
   (assert (! (not (= ^^u1 ^^i1)) :named ax_692))
   (assert (! (not (= ^^u1 ^^i2)) :named ax_693))
   (assert (! (not (= ^^u1 ^^i4)) :named ax_694))
   (assert (! (not (= ^^u1 ^^i8)) :named ax_695))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_696))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_697))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_698))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_699))
   (assert (! (not (= ^^u1 ^^u2)) :named ax_700))
   (assert (! (not (= ^^u1 ^^u4)) :named ax_701))
   (assert (! (not (= ^^u1 ^^u8)) :named ax_702))
   (assert (! (not (= ^^u1 ^^void)) :named ax_703))
   (assert (! (not (= ^^u1 ^List)) :named ax_704))
   (assert (! (not (= ^^u1 ^Node)) :named ax_705))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_706))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_707))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_708))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_709))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_710))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_711))
   (assert (! (not (= ^^u2 $@distTp4)) :named ax_712))
   (assert (! (not (= ^^u2 $@distTp4)) :named ax_713))
   (assert (! (not (= ^^u2 $@distTp5)) :named ax_714))
   (assert (! (not (= ^^u2 $@distTp5)) :named ax_715))
   (assert (! (not (= ^^u2 $@distTp6)) :named ax_716))
   (assert (! (not (= ^^u2 $@distTp6)) :named ax_717))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_718))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_719))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_720))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_721))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_722))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_723))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_724))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_725))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_726))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_727))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_728))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_729))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_730))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_731))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_732))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_733))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_734))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_735))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_736))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_737))
   (assert (! (not (= ^^u2 ^^i1)) :named ax_738))
   (assert (! (not (= ^^u2 ^^i2)) :named ax_739))
   (assert (! (not (= ^^u2 ^^i4)) :named ax_740))
   (assert (! (not (= ^^u2 ^^i8)) :named ax_741))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_742))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_743))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_744))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_745))
   (assert (! (not (= ^^u2 ^^u1)) :named ax_746))
   (assert (! (not (= ^^u2 ^^u4)) :named ax_747))
   (assert (! (not (= ^^u2 ^^u8)) :named ax_748))
   (assert (! (not (= ^^u2 ^^void)) :named ax_749))
   (assert (! (not (= ^^u2 ^List)) :named ax_750))
   (assert (! (not (= ^^u2 ^Node)) :named ax_751))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_752))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_753))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_754))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_755))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_756))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_757))
   (assert (! (not (= ^^u4 $@distTp4)) :named ax_758))
   (assert (! (not (= ^^u4 $@distTp4)) :named ax_759))
   (assert (! (not (= ^^u4 $@distTp5)) :named ax_760))
   (assert (! (not (= ^^u4 $@distTp5)) :named ax_761))
   (assert (! (not (= ^^u4 $@distTp6)) :named ax_762))
   (assert (! (not (= ^^u4 $@distTp6)) :named ax_763))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_764))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_765))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_766))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_767))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_768))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_769))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_770))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_771))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_772))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_773))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_774))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_775))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_776))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_777))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_778))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_779))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_780))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_781))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_782))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_783))
   (assert (! (not (= ^^u4 ^^i1)) :named ax_784))
   (assert (! (not (= ^^u4 ^^i2)) :named ax_785))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_786))
   (assert (! (not (= ^^u4 ^^i8)) :named ax_787))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_788))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_789))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_790))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_791))
   (assert (! (not (= ^^u4 ^^u1)) :named ax_792))
   (assert (! (not (= ^^u4 ^^u2)) :named ax_793))
   (assert (! (not (= ^^u4 ^^u8)) :named ax_794))
   (assert (! (not (= ^^u4 ^^void)) :named ax_795))
   (assert (! (not (= ^^u4 ^List)) :named ax_796))
   (assert (! (not (= ^^u4 ^Node)) :named ax_797))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_798))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_799))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_800))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_801))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_802))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_803))
   (assert (! (not (= ^^u8 $@distTp4)) :named ax_804))
   (assert (! (not (= ^^u8 $@distTp4)) :named ax_805))
   (assert (! (not (= ^^u8 $@distTp5)) :named ax_806))
   (assert (! (not (= ^^u8 $@distTp5)) :named ax_807))
   (assert (! (not (= ^^u8 $@distTp6)) :named ax_808))
   (assert (! (not (= ^^u8 $@distTp6)) :named ax_809))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_810))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_811))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_812))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_813))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_814))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_815))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_816))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_817))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_818))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_819))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_820))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_821))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_822))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_823))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_824))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_825))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_826))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_827))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_828))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_829))
   (assert (! (not (= ^^u8 ^^i1)) :named ax_830))
   (assert (! (not (= ^^u8 ^^i2)) :named ax_831))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_832))
   (assert (! (not (= ^^u8 ^^i8)) :named ax_833))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_834))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_835))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_836))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_837))
   (assert (! (not (= ^^u8 ^^u1)) :named ax_838))
   (assert (! (not (= ^^u8 ^^u2)) :named ax_839))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_840))
   (assert (! (not (= ^^u8 ^^void)) :named ax_841))
   (assert (! (not (= ^^u8 ^List)) :named ax_842))
   (assert (! (not (= ^^u8 ^Node)) :named ax_843))
   (assert (! (not (= ^^void $@distTp1)) :named ax_844))
   (assert (! (not (= ^^void $@distTp1)) :named ax_845))
   (assert (! (not (= ^^void $@distTp2)) :named ax_846))
   (assert (! (not (= ^^void $@distTp2)) :named ax_847))
   (assert (! (not (= ^^void $@distTp3)) :named ax_848))
   (assert (! (not (= ^^void $@distTp3)) :named ax_849))
   (assert (! (not (= ^^void $@distTp4)) :named ax_850))
   (assert (! (not (= ^^void $@distTp4)) :named ax_851))
   (assert (! (not (= ^^void $@distTp5)) :named ax_852))
   (assert (! (not (= ^^void $@distTp5)) :named ax_853))
   (assert (! (not (= ^^void $@distTp6)) :named ax_854))
   (assert (! (not (= ^^void $@distTp6)) :named ax_855))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_856))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_857))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_858))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_859))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_860))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_861))
   (assert (! (not (= ^^void ^$@struct)) :named ax_862))
   (assert (! (not (= ^^void ^$@struct)) :named ax_863))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_864))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_865))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_866))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_867))
   (assert (! (not (= ^^void ^^bool)) :named ax_868))
   (assert (! (not (= ^^void ^^bool)) :named ax_869))
   (assert (! (not (= ^^void ^^claim)) :named ax_870))
   (assert (! (not (= ^^void ^^claim)) :named ax_871))
   (assert (! (not (= ^^void ^^f4)) :named ax_872))
   (assert (! (not (= ^^void ^^f4)) :named ax_873))
   (assert (! (not (= ^^void ^^f8)) :named ax_874))
   (assert (! (not (= ^^void ^^f8)) :named ax_875))
   (assert (! (not (= ^^void ^^i1)) :named ax_876))
   (assert (! (not (= ^^void ^^i2)) :named ax_877))
   (assert (! (not (= ^^void ^^i4)) :named ax_878))
   (assert (! (not (= ^^void ^^i8)) :named ax_879))
   (assert (! (not (= ^^void ^^mathint)) :named ax_880))
   (assert (! (not (= ^^void ^^mathint)) :named ax_881))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_882))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_883))
   (assert (! (not (= ^^void ^^u1)) :named ax_884))
   (assert (! (not (= ^^void ^^u2)) :named ax_885))
   (assert (! (not (= ^^void ^^u4)) :named ax_886))
   (assert (! (not (= ^^void ^^u8)) :named ax_887))
   (assert (! (not (= ^^void ^List)) :named ax_888))
   (assert (! (not (= ^^void ^Node)) :named ax_889))
   (assert (! (not (= ^List $@distTp1)) :named ax_890))
   (assert (! (not (= ^List $@distTp1)) :named ax_891))
   (assert (! (not (= ^List $@distTp2)) :named ax_892))
   (assert (! (not (= ^List $@distTp2)) :named ax_893))
   (assert (! (not (= ^List $@distTp3)) :named ax_894))
   (assert (! (not (= ^List $@distTp3)) :named ax_895))
   (assert (! (not (= ^List $@distTp4)) :named ax_896))
   (assert (! (not (= ^List $@distTp4)) :named ax_897))
   (assert (! (not (= ^List $@distTp5)) :named ax_898))
   (assert (! (not (= ^List $@distTp5)) :named ax_899))
   (assert (! (not (= ^List $@distTp6)) :named ax_900))
   (assert (! (not (= ^List $@distTp6)) :named ax_901))
   (assert (! (not (= ^List $memory_allocator_type)) :named ax_902))
   (assert (! (not (= ^List ^$@ptrset)) :named ax_903))
   (assert (! (not (= ^List ^$@state_t)) :named ax_904))
   (assert (! (not (= ^List ^$@struct)) :named ax_905))
   (assert (! (not (= ^List ^$@thread_id)) :named ax_906))
   (assert (! (not (= ^List ^$@thread_id_t)) :named ax_907))
   (assert (! (not (= ^List ^^bool)) :named ax_908))
   (assert (! (not (= ^List ^^claim)) :named ax_909))
   (assert (! (not (= ^List ^^f4)) :named ax_910))
   (assert (! (not (= ^List ^^f8)) :named ax_911))
   (assert (! (not (= ^List ^^i1)) :named ax_912))
   (assert (! (not (= ^List ^^i2)) :named ax_913))
   (assert (! (not (= ^List ^^i4)) :named ax_914))
   (assert (! (not (= ^List ^^i8)) :named ax_915))
   (assert (! (not (= ^List ^^mathint)) :named ax_916))
   (assert (! (not (= ^List ^^root_emb)) :named ax_917))
   (assert (! (not (= ^List ^^u1)) :named ax_918))
   (assert (! (not (= ^List ^^u2)) :named ax_919))
   (assert (! (not (= ^List ^^u4)) :named ax_920))
   (assert (! (not (= ^List ^^u8)) :named ax_921))
   (assert (! (not (= ^List ^^void)) :named ax_922))
   (assert (! (not (= ^Node $@distTp1)) :named ax_923))
   (assert (! (not (= ^Node $@distTp1)) :named ax_924))
   (assert (! (not (= ^Node $@distTp2)) :named ax_925))
   (assert (! (not (= ^Node $@distTp2)) :named ax_926))
   (assert (! (not (= ^Node $@distTp3)) :named ax_927))
   (assert (! (not (= ^Node $@distTp3)) :named ax_928))
   (assert (! (not (= ^Node $@distTp4)) :named ax_929))
   (assert (! (not (= ^Node $@distTp4)) :named ax_930))
   (assert (! (not (= ^Node $@distTp5)) :named ax_931))
   (assert (! (not (= ^Node $@distTp5)) :named ax_932))
   (assert (! (not (= ^Node $@distTp6)) :named ax_933))
   (assert (! (not (= ^Node $@distTp6)) :named ax_934))
   (assert (! (not (= ^Node $memory_allocator_type)) :named ax_935))
   (assert (! (not (= ^Node ^$@ptrset)) :named ax_936))
   (assert (! (not (= ^Node ^$@state_t)) :named ax_937))
   (assert (! (not (= ^Node ^$@struct)) :named ax_938))
   (assert (! (not (= ^Node ^$@thread_id)) :named ax_939))
   (assert (! (not (= ^Node ^$@thread_id_t)) :named ax_940))
   (assert (! (not (= ^Node ^^bool)) :named ax_941))
   (assert (! (not (= ^Node ^^claim)) :named ax_942))
   (assert (! (not (= ^Node ^^f4)) :named ax_943))
   (assert (! (not (= ^Node ^^f8)) :named ax_944))
   (assert (! (not (= ^Node ^^i1)) :named ax_945))
   (assert (! (not (= ^Node ^^i2)) :named ax_946))
   (assert (! (not (= ^Node ^^i4)) :named ax_947))
   (assert (! (not (= ^Node ^^i8)) :named ax_948))
   (assert (! (not (= ^Node ^^mathint)) :named ax_949))
   (assert (! (not (= ^Node ^^root_emb)) :named ax_950))
   (assert (! (not (= ^Node ^^u1)) :named ax_951))
   (assert (! (not (= ^Node ^^u2)) :named ax_952))
   (assert (! (not (= ^Node ^^u4)) :named ax_953))
   (assert (! (not (= ^Node ^^u8)) :named ax_954))
   (assert (! (not (= ^Node ^^void)) :named ax_955))
   (assert (! (not (= ^Node ^List)) :named ax_956))
   (assert (! (not (= ^Node ^List)) :named ax_957))
   (assert (! (not (= cf@classifier@default cf@lambda@1)) :named ax_958))
   (assert (! (not (= cf@lambda@1 cf@classifier@default)) :named ax_959))
   (assert (! (not (= List.$owns List.followers)) :named ax_960))
   (assert (! (not (= List.$owns List.head)) :named ax_961))
   (assert (! (not (= List.$owns List.idx)) :named ax_962))
   (assert (! (not (= List.$owns List.length)) :named ax_963))
   (assert (! (not (= List.$owns List.length_acc)) :named ax_964))
   (assert (! (not (= List.$owns List.seq)) :named ax_965))
   (assert (! (not (= List.followers List.$owns)) :named ax_966))
   (assert (! (not (= List.followers List.length)) :named ax_967))
   (assert (! (not (= List.followers List.length_acc)) :named ax_968))
   (assert (! (not (= List.head List.$owns)) :named ax_969))
   (assert (! (not (= List.head List.followers)) :named ax_970))
   (assert (! (not (= List.head List.followers)) :named ax_971))
   (assert (! (not (= List.head List.idx)) :named ax_972))
   (assert (! (not (= List.head List.length)) :named ax_973))
   (assert (! (not (= List.head List.length_acc)) :named ax_974))
   (assert (! (not (= List.head List.seq)) :named ax_975))
   (assert (! (not (= List.idx List.$owns)) :named ax_976))
   (assert (! (not (= List.idx List.followers)) :named ax_977))
   (assert (! (not (= List.idx List.followers)) :named ax_978))
   (assert (! (not (= List.idx List.head)) :named ax_979))
   (assert (! (not (= List.idx List.length)) :named ax_980))
   (assert (! (not (= List.idx List.length_acc)) :named ax_981))
   (assert (! (not (= List.length List.$owns)) :named ax_982))
   (assert (! (not (= List.length List.followers)) :named ax_983))
   (assert (! (not (= List.length List.head)) :named ax_984))
   (assert (! (not (= List.length List.idx)) :named ax_985))
   (assert (! (not (= List.length_acc List.$owns)) :named ax_986))
   (assert (! (not (= List.length_acc List.followers)) :named ax_987))
   (assert (! (not (= List.length_acc List.head)) :named ax_988))
   (assert (! (not (= List.length_acc List.idx)) :named ax_989))
   (assert (! (not (= List.length_acc List.length)) :named ax_990))
   (assert (! (not (= List.length_acc List.length)) :named ax_991))
   (assert (! (not (= List.seq List.$owns)) :named ax_992))
   (assert (! (not (= List.seq List.followers)) :named ax_993))
   (assert (! (not (= List.seq List.followers)) :named ax_994))
   (assert (! (not (= List.seq List.head)) :named ax_995))
   (assert (! (not (= List.seq List.idx)) :named ax_996))
   (assert (! (not (= List.seq List.idx)) :named ax_997))
   (assert (! (not (= List.seq List.length)) :named ax_998))
   (assert (! (not (= List.seq List.length)) :named ax_999))
   (assert (! (not (= List.seq List.length_acc)) :named ax_1000))
   (assert (! (not (= List.seq List.length_acc)) :named ax_1001))
   (assert (! (not (= Node.$owns List.$owns)) :named ax_1002))
   (assert (! (not (= Node.$owns List.$owns)) :named ax_1003))
   (assert (! (not (= Node.$owns List.followers)) :named ax_1004))
   (assert (! (not (= Node.$owns List.followers)) :named ax_1005))
   (assert (! (not (= Node.$owns List.head)) :named ax_1006))
   (assert (! (not (= Node.$owns List.head)) :named ax_1007))
   (assert (! (not (= Node.$owns List.idx)) :named ax_1008))
   (assert (! (not (= Node.$owns List.idx)) :named ax_1009))
   (assert (! (not (= Node.$owns List.length)) :named ax_1010))
   (assert (! (not (= Node.$owns List.length)) :named ax_1011))
   (assert (! (not (= Node.$owns List.length_acc)) :named ax_1012))
   (assert (! (not (= Node.$owns List.length_acc)) :named ax_1013))
   (assert (! (not (= Node.$owns List.seq)) :named ax_1014))
   (assert (! (not (= Node.$owns List.seq)) :named ax_1015))
   (assert (! (not (= Node.$owns Node.data)) :named ax_1016))
   (assert (! (not (= Node.$owns Node.next)) :named ax_1017))
   (assert (! (not (= Node.data List.$owns)) :named ax_1018))
   (assert (! (not (= Node.data List.$owns)) :named ax_1019))
   (assert (! (not (= Node.data List.followers)) :named ax_1020))
   (assert (! (not (= Node.data List.followers)) :named ax_1021))
   (assert (! (not (= Node.data List.head)) :named ax_1022))
   (assert (! (not (= Node.data List.head)) :named ax_1023))
   (assert (! (not (= Node.data List.idx)) :named ax_1024))
   (assert (! (not (= Node.data List.idx)) :named ax_1025))
   (assert (! (not (= Node.data List.length)) :named ax_1026))
   (assert (! (not (= Node.data List.length)) :named ax_1027))
   (assert (! (not (= Node.data List.length_acc)) :named ax_1028))
   (assert (! (not (= Node.data List.length_acc)) :named ax_1029))
   (assert (! (not (= Node.data List.seq)) :named ax_1030))
   (assert (! (not (= Node.data List.seq)) :named ax_1031))
   (assert (! (not (= Node.data Node.$owns)) :named ax_1032))
   (assert (! (not (= Node.next List.$owns)) :named ax_1033))
   (assert (! (not (= Node.next List.$owns)) :named ax_1034))
   (assert (! (not (= Node.next List.followers)) :named ax_1035))
   (assert (! (not (= Node.next List.followers)) :named ax_1036))
   (assert (! (not (= Node.next List.head)) :named ax_1037))
   (assert (! (not (= Node.next List.head)) :named ax_1038))
   (assert (! (not (= Node.next List.idx)) :named ax_1039))
   (assert (! (not (= Node.next List.idx)) :named ax_1040))
   (assert (! (not (= Node.next List.length)) :named ax_1041))
   (assert (! (not (= Node.next List.length)) :named ax_1042))
   (assert (! (not (= Node.next List.length_acc)) :named ax_1043))
   (assert (! (not (= Node.next List.length_acc)) :named ax_1044))
   (assert (! (not (= Node.next List.seq)) :named ax_1045))
   (assert (! (not (= Node.next List.seq)) :named ax_1046))
   (assert (! (not (= Node.next Node.$owns)) :named ax_1047))
   (assert (! (not (= Node.next Node.data)) :named ax_1048))
   (assert (! (not (= Node.next Node.data)) :named ax_1049))

;Program
(assert (not
(let ((anon12_assertion (and
    ($in_domain_lab $s ($ptr ^List P@l) ($ptr ^List P@l) l@public)
)))
(let ((anon12@2_assertion (and
    ($is ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
    ($thread_local $s ($dot ($ptr ^List P@l) List.head))
)))
(let ((anon12@1_assertion (and
    ($is ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
    ($typed $s ($dot ($ptr ^List P@l) List.head))
)))
(let ((anon01_Then@1_assertion (and
    ($is ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
    ($thread_local $s ($dot ($ptr ^Node L@n@1) Node.data))
)))
(let ((anon01_Then_assertion (and
    ($is ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
    ($typed $s ($dot ($ptr ^Node L@n@1) Node.data))
)))
(let ((anon02_Else@1_assertion (and
    ($is ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
    ($thread_local $s ($dot ($ptr ^Node L@n@1) Node.next))
)))
(let ((anon02_Else_assertion (and
    ($is ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
    ($typed $s ($dot ($ptr ^Node L@n@1) Node.next))
)))
(let ((anon12@3_assertion (and
    (=> (not (= ($ref ($ptr ^Node L@n@0)) ($ref $null))) ($set_in ($ptr ^Node L@n@0) ($owns $s ($ptr ^List P@l))))
)))
(let ((anon02_Else@3_assertion (and
    (=> (not (= ($ref ($ptr ^Node L@n@2)) ($ref $null))) ($set_in ($ptr ^Node L@n@2) ($owns $s ($ptr ^List P@l))))
)))
(let ((anon02_Else@4_assertion (and
    (= (- ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length)) L@i@1) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@2))))
)))
(let ((anon02_Else@5_assertion (and
    (=> (not (= ($ref ($ptr ^Node L@n@2)) ($ref $null))) (= ($ref ($ptr ^Node L@n@2)) ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) L@i@1)))))
)))
(let ((anon12@4_assertion (and
    (= (- ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length)) 0) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@0))))
)))
(let ((anon12@5_assertion (and
    (=> (not (= ($ref ($ptr ^Node L@n@0)) ($ref $null))) (= ($ref ($ptr ^Node L@n@0)) ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) 0)))))
)))
(let ((GeneratedUnifiedExit@1_assertion (and
    (=> (< $result@0 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length))) (= ($select.mem ($memory $s) ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) $result@0)) Node.data)) 0))
)))
(let ((anon02_Else@2_assertion (and
    (<= (+ L@i@0 1) $max.u4)
    (<= 0 (+ L@i@0 1))
)))
(let ((GeneratedUnifiedExit_assertion (and
    (<= $result@0 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length)))
    (forall( (|Q#i$1^32.51#tc3| Int))(=> (and (<= 0 |Q#i$1^32.51#tc3|) (<= |Q#i$1^32.51#tc3| $max.u4)) (=> (< |Q#i$1^32.51#tc3| $result@0) (not (= ($select.mem ($memory $s) ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) |Q#i$1^32.51#tc3|)) Node.data)) 0)))))
)))
(let ((anon02_Else@5 (=> (and true
    (= (- ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length)) L@i@1) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@2))))
  )
    anon02_Else@5_assertion
)))
(let ((GeneratedUnifiedExit@1 (=> (and true
    (<= $result@0 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length)))
    (forall( (|Q#i$1^32.51#tc3| Int))(=> (and (<= 0 |Q#i$1^32.51#tc3|) (<= |Q#i$1^32.51#tc3| $max.u4)) (=> (< |Q#i$1^32.51#tc3| $result@0) (not (= ($select.mem ($memory $s) ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) |Q#i$1^32.51#tc3|)) Node.data)) 0)))))
  )
    GeneratedUnifiedExit@1_assertion
)))
(let ((anon02_Else@4 (=> (and true
    (=> (not (= ($ref ($ptr ^Node L@n@2)) ($ref $null))) ($set_in ($ptr ^Node L@n@2) ($owns $s ($ptr ^List P@l))))
  )(and 
    anon02_Else@4_assertion
    anon02_Else@5
))))
(let ((GeneratedUnifiedExit (=> (and true
  )(and 
    GeneratedUnifiedExit_assertion
    GeneratedUnifiedExit@1
))))
(let ((anon02_Else@3 (=> (and true
    ($local_value_is $s $@tok$1^38.44 $@loc.i L@i@1 ^^u4)
    (<= (+ L@i@0 1) $max.u4)
    (<= 0 (+ L@i@0 1))
    (= L@i@1 (+ L@i@0 1))
  )(and 
    anon02_Else@3_assertion
    anon02_Else@4
))))
(let (($@hash@break_2@1 (=> (and true
    $position_marker
    (= $result@0 L@i@0)
  )
    GeneratedUnifiedExit
)))
(let ((anon02_Else@2 (=> (and true
    ($is ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
    ($local_value_is $s $@tok$1^38.31 $@loc.n ($ptr_to_int ($ptr ^Node L@n@2)) ($ptr_to ^Node))
    ($local_value_is_ptr $s $@tok$1^38.31 $@loc.n ($ptr ^Node L@n@2) ($ptr_to ^Node))
    ($thread_local $s ($dot ($ptr ^Node L@n@1) Node.next))
    (= L@n@2 ($ref ($ptr ^Node ($select.mem ($memory $s) ($dot ($ptr ^Node L@n@1) Node.next)))))
  )(and 
    anon02_Else@2_assertion
    anon02_Else@3
))))
(let (($@hash@break_2 (=> (and true
  )
    $@hash@break_2@1
)))
(let ((anon02_Else@1 (=> (and true
    ($is ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
    ($typed $s ($dot ($ptr ^Node L@n@1) Node.next))
  )(and 
    anon02_Else@1_assertion
    anon02_Else@2
))))
(let ((anon01_Else (=> (and true
    (not (not (= ($ref ($ptr ^Node L@n@1)) ($ref $null))))
  )
    $@hash@break_2
)))
(let ((anon02_Then (=> (and true
    (= ($select.mem ($memory $s) ($dot ($ptr ^Node L@n@1) Node.data)) 0)
  )
    $@hash@break_2
)))
(let ((anon02_Else (=> (and true
    (not (= ($select.mem ($memory $s) ($dot ($ptr ^Node L@n@1) Node.data)) 0))
  )(and 
    anon02_Else_assertion
    anon02_Else@1
))))
(let ((anon01_Then@2 (=> (and true
    ($is ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
    ($thread_local $s ($dot ($ptr ^Node L@n@1) Node.data))
  )
    (and anon02_Else anon02_Then)
)))
(let ((anon01_Then@1 (=> (and true
    ($is ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
    ($typed $s ($dot ($ptr ^Node L@n@1) Node.data))
  )(and 
    anon01_Then@1_assertion
    anon01_Then@2
))))
(let ((anon01_Then (=> (and true
    (not (= ($ref ($ptr ^Node L@n@1)) ($ref $null)))
  )(and 
    anon01_Then_assertion
    anon01_Then@1
))))
(let ((anon00_LoopBody (=> (and true
    ($call_transition $s $s)
    ($call_transition $s $s)
    ($full_stop $s)
    ($good_state_ext $@tok$1^38.3 $s)
    ($local_value_is $s $@tok$1^38.3 $@loc.i L@i@0 ^^u4)
    ($local_value_is $s $@tok$1^38.3 $@loc.l ($ptr_to_int ($ptr ^List P@l)) ($ptr_to ^List))
    ($local_value_is $s $@tok$1^38.3 $@loc.n ($ptr_to_int ($ptr ^Node L@n@1)) ($ptr_to ^Node))
    ($local_value_is_ptr $s $@tok$1^38.3 $@loc.l ($ptr ^List P@l) ($ptr_to ^List))
    ($local_value_is_ptr $s $@tok$1^38.3 $@loc.n ($ptr ^Node L@n@1) ($ptr_to ^Node))
    (<= ($current_timestamp $s) ($current_timestamp $s))
    (<= ($current_timestamp $s) ($current_timestamp $s))
    (= ($statusmap $s) ($statusmap $s))
    (= ($typemap $s) ($typemap $s))
    (forall( (|p_$32_$5| $ptr))(!(<= ($timestamp $s |p_$32_$5|) ($timestamp $s |p_$32_$5|))  :weight  0 :pattern ( ($timestamp $s |p_$32_$5|))))
    (forall( (|p_$32_$5| $ptr))(!(<= ($timestamp $s |p_$32_$5|) ($timestamp $s |p_$32_$5|))  :weight  0 :pattern ( ($timestamp $s |p_$32_$5|))))
    (forall( (|p_$37_$3| $ptr))(!(=> (not (= ($kind_of ($typ ($owner $s |p_$37_$3|))) $kind_thread)) (not (= ($kind_of ($typ ($owner $s |p_$37_$3|))) $kind_thread)))  :pattern ( ($select.sm ($statusmap $s) |p_$37_$3|))))
    (forall( (|p_$38_$3| $ptr))(!(=> ($thread_local $s |p_$38_$3|) (and (= ($select.mem ($memory $s) |p_$38_$3|) ($select.mem ($memory $s) |p_$38_$3|)) ($thread_local $s |p_$38_$3|)))  :pattern ( ($select.mem ($memory $s) |p_$38_$3|))))
    (forall( (|p_$39_$3| $ptr))(!(=> ($thread_local $s |p_$39_$3|) (and (= ($select.sm ($statusmap $s) |p_$39_$3|) ($select.sm ($statusmap $s) |p_$39_$3|)) ($thread_local $s |p_$39_$3|)))  :pattern ( ($select.sm ($statusmap $s) |p_$39_$3|))))
    (forall( (|p_$40_$3| $ptr))(!(=> ($thread_local $s |p_$40_$3|) (and (= ($select.tm ($typemap $s) |p_$40_$3|) ($select.tm ($typemap $s) |p_$40_$3|)) ($thread_local $s |p_$40_$3|)))  :pattern ( ($select.tm ($typemap $s) |p_$40_$3|))))
  )
    (and anon01_Else anon01_Then)
)))
(let ((anon00_LoopHead (=> (and true
    ($in_range_phys_ptr L@n@1)
    (<= 0 L@i@0)
    (<= 0 L@i@0)
    (<= L@i@0 $max.u4)
    (= (- ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length)) L@i@0) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@1))))
    (=> (not (= ($ref ($ptr ^Node L@n@1)) ($ref $null))) ($set_in ($ptr ^Node L@n@1) ($owns $s ($ptr ^List P@l))))
    (=> (not (= ($ref ($ptr ^Node L@n@1)) ($ref $null))) (= ($ref ($ptr ^Node L@n@1)) ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) L@i@0)))))
    (forall( (|Q#j$1^42.31#tc3| Int))(=> (and (<= 0 |Q#j$1^42.31#tc3|) (<= |Q#j$1^42.31#tc3| $max.u4)) (=> (< |Q#j$1^42.31#tc3| L@i@0) (not (= ($select.mem ($memory $s) ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) |Q#j$1^42.31#tc3|)) Node.data)) 0)))))
  )
    anon00_LoopBody
)))
(let ((anon12@6 (=> (and true
    (=> (not (= ($ref ($ptr ^Node L@n@0)) ($ref $null))) (= ($ref ($ptr ^Node L@n@0)) ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.seq))) 0)))))
  )
    anon00_LoopHead
)))
(let ((anon12@5 (=> (and true
    (= (- ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length)) 0) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@0))))
  )(and 
    anon12@5_assertion
    anon12@6
))))
(let ((anon12@4 (=> (and true
    (=> (not (= ($ref ($ptr ^Node L@n@0)) ($ref $null))) ($set_in ($ptr ^Node L@n@0) ($owns $s ($ptr ^List P@l))))
  )(and 
    anon12@4_assertion
    anon12@5
))))
(let ((anon12@3 (=> (and true
    ($is ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
    ($local_value_is $s $@tok$1^38.21 $@loc.i 0 ^^u4)
    ($local_value_is $s $@tok$1^38.8 $@loc.n ($ptr_to_int ($ptr ^Node L@n@0)) ($ptr_to ^Node))
    ($local_value_is_ptr $s $@tok$1^38.8 $@loc.n ($ptr ^Node L@n@0) ($ptr_to ^Node))
    ($thread_local $s ($dot ($ptr ^List P@l) List.head))
    (= L@n@0 ($ref ($ptr ^Node ($select.mem ($memory $s) ($dot ($ptr ^List P@l) List.head)))))
  )(and 
    anon12@3_assertion
    anon12@4
))))
(let ((anon12@2 (=> (and true
    ($is ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
    ($typed $s ($dot ($ptr ^List P@l) List.head))
  )(and 
    anon12@2_assertion
    anon12@3
))))
(let ((anon12@1 (=> (and true
    ($in_domain_lab $s ($ptr ^List P@l) ($ptr ^List P@l) l@public)
    ($local_value_is $s $@tok$1^35.10 $@loc.n ($ptr_to_int ($ptr ^Node L@n)) ($ptr_to ^Node))
    ($local_value_is $s $@tok$1^36.3 $@loc.i L@i ^^u4)
    ($local_value_is_ptr $s $@tok$1^35.10 $@loc.n ($ptr ^Node L@n) ($ptr_to ^Node))
  )(and 
    anon12@1_assertion
    anon12@2
))))
(let ((anon12 (=> (and true
    ($full_stop $s)
    ($function_entry $s)
    ($good_state_ext $@tok$1^30.1 $s)
    ($in_range_phys_ptr ($ref ($ptr ^List P@l)))
    ($local_value_is $s $@tok$1^30.1 $@loc.l ($ptr_to_int ($ptr ^List P@l)) ($ptr_to ^List))
    ($local_value_is_ptr $s $@tok$1^30.1 $@loc.l ($ptr ^List P@l) ($ptr_to ^List))
    (= $@wrTime$1^30.1 ($current_timestamp $s))
    (forall( (|#p_$59| $ptr))(!(= ($in_writes_at $@wrTime$1^30.1 |#p_$59|) false)  :pattern ( ($in_writes_at $@wrTime$1^30.1 |#p_$59|))))
    (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|))))
  )(and 
    anon12_assertion
    anon12@1
))))
(let ((PreconditionGeneratedEntry (=> (and true
    ($closed $s ($ptr ^List P@l))
    ($in_range_phys_ptr L@n)
    ($is ($ptr ^List P@l) ^List)
    ($is_non_primitive ^List)
    ($typed $s ($ptr ^List P@l))
    (<= 0 L@i)
    (<= L@i $max.u4)
    (= ($owner $s ($ptr ^List P@l)) $me)
    (not (= ($kind_of ^List) $kind_primitive))
  )
    anon12
)))
(let (($start (=> (and true
    $position_marker
    ($file_name_is 1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)
    ($function_arg_type cf@classifier@default 0 ($map_t ($ptr_to ^^void) ^^bool))
    ($function_arg_type cf@lambda@1 0 ($map_t ^^i4 ^^bool))
    ($good_state ($vs_state $struct_zero))
    ($has_volatile_owns_set ^^claim)
    ($in_range_spec_ptr $me_ref)
    ($is_base_field List.$owns)
    ($is_base_field List.followers)
    ($is_base_field List.head)
    ($is_base_field List.idx)
    ($is_base_field List.length)
    ($is_base_field List.length_acc)
    ($is_base_field List.seq)
    ($is_base_field Node.$owns)
    ($is_base_field Node.data)
    ($is_base_field Node.next)
    ($is_claimable ^^claim)
    ($is_composite ^^claim)
    ($is_composite ^^root_emb)
    ($is_composite ^List)
    ($is_composite ^Node)
    ($is_math_type ^$@thread_id)
    ($is_primitive ^$@ptrset)
    ($is_primitive ^$@state_t)
    ($is_primitive ^^bool)
    ($is_primitive ^^f4)
    ($is_primitive ^^f8)
    ($is_primitive ^^i1)
    ($is_primitive ^^i2)
    ($is_primitive ^^i4)
    ($is_primitive ^^i8)
    ($is_primitive ^^mathint)
    ($is_primitive ^^u1)
    ($is_primitive ^^u2)
    ($is_primitive ^^u4)
    ($is_primitive ^^u8)
    ($is_primitive ^^void)
    ($is_primitive_non_volatile_field List.$owns)
    ($is_primitive_non_volatile_field List.followers)
    ($is_primitive_non_volatile_field List.head)
    ($is_primitive_non_volatile_field List.idx)
    ($is_primitive_non_volatile_field List.length)
    ($is_primitive_non_volatile_field List.length_acc)
    ($is_primitive_non_volatile_field List.seq)
    ($is_primitive_non_volatile_field Node.$owns)
    ($is_primitive_non_volatile_field Node.data)
    ($is_primitive_non_volatile_field Node.next)
    ($is_threadtype ^$@thread_id_t)
    ($type_code_is 2 ^^i4)
    ($type_code_is 3 ^^u4)
    (= $@distTp1 ($ptr_to ^Node))
    (= $@distTp2 ($map_t ^^i4 ^^bool))
    (= $@distTp3 ($map_t ($ptr_to ^Node) ($map_t ^^i4 ^^bool)))
    (= $@distTp4 ($map_t ($ptr_to ^Node) ^^u4))
    (= $@distTp5 ($map_t ^^u4 ($ptr_to ^Node)))
    (= $@distTp6 ($ptr_to ^List))
    (= $arch_ptr_size 8)
    (= $arch_spec_ptr_start $max.u8)
    (= $max.i1 127)
    (= $max.i2 32767)
    (= $max.i4 (- (* 65536 32768) 1))
    (= $max.i8 (- (* (* (* 65536 65536) 65536) 32768) 1))
    (= $max.u1 255)
    (= $max.u2 65535)
    (= $max.u4 (- (* 65536 65536) 1))
    (= $max.u8 (- (* (* (* 65536 65536) 65536) 65536) 1))
    (= $me ($ptr ^$@thread_id_t $me_ref))
    (= $min.i1 (- 0 128))
    (= $min.i2 (- 0 32768))
    (= $min.i4 (- 0 (* 65536 32768)))
    (= $min.i8 (- 0 (* (* (* 65536 65536) 65536) 32768)))
    (= $no_claim ($ptr ^^claim 0))
    (= $null ($ptr ^^void 0))
    (= $seclbl.bot false)
    (= $seclbl.top true)
    (= ($_pow2 0) 1)
    (= ($_pow2 1) 2)
    (= ($_pow2 10) 1024)
    (= ($_pow2 11) 2048)
    (= ($_pow2 12) 4096)
    (= ($_pow2 13) 8192)
    (= ($_pow2 14) 16384)
    (= ($_pow2 15) 32768)
    (= ($_pow2 16) 65536)
    (= ($_pow2 17) 131072)
    (= ($_pow2 18) 262144)
    (= ($_pow2 19) 524288)
    (= ($_pow2 2) 4)
    (= ($_pow2 20) 1048576)
    (= ($_pow2 21) 2097152)
    (= ($_pow2 22) 4194304)
    (= ($_pow2 23) 8388608)
    (= ($_pow2 24) 16777216)
    (= ($_pow2 25) 33554432)
    (= ($_pow2 26) 67108864)
    (= ($_pow2 27) 134217728)
    (= ($_pow2 28) 268435456)
    (= ($_pow2 29) 536870912)
    (= ($_pow2 3) 8)
    (= ($_pow2 30) 1073741824)
    (= ($_pow2 31) 2147483648)
    (= ($_pow2 32) 4294967296)
    (= ($_pow2 33) 8589934592)
    (= ($_pow2 34) 17179869184)
    (= ($_pow2 35) 34359738368)
    (= ($_pow2 36) 68719476736)
    (= ($_pow2 37) 137438953472)
    (= ($_pow2 38) 274877906944)
    (= ($_pow2 39) 549755813888)
    (= ($_pow2 4) 16)
    (= ($_pow2 40) 1099511627776)
    (= ($_pow2 41) 2199023255552)
    (= ($_pow2 42) 4398046511104)
    (= ($_pow2 43) 8796093022208)
    (= ($_pow2 44) 17592186044416)
    (= ($_pow2 45) 35184372088832)
    (= ($_pow2 46) 70368744177664)
    (= ($_pow2 47) 140737488355328)
    (= ($_pow2 48) 281474976710656)
    (= ($_pow2 49) 562949953421312)
    (= ($_pow2 5) 32)
    (= ($_pow2 50) 1125899906842624)
    (= ($_pow2 51) 2251799813685248)
    (= ($_pow2 52) 4503599627370496)
    (= ($_pow2 53) 9007199254740992)
    (= ($_pow2 54) 18014398509481984)
    (= ($_pow2 55) 36028797018963968)
    (= ($_pow2 56) 72057594037927936)
    (= ($_pow2 57) 144115188075855872)
    (= ($_pow2 58) 288230376151711744)
    (= ($_pow2 59) 576460752303423488)
    (= ($_pow2 6) 64)
    (= ($_pow2 60) 1152921504606846976)
    (= ($_pow2 61) 2305843009213693952)
    (= ($_pow2 62) 4611686018427387904)
    (= ($_pow2 63) 9223372036854775808)
    (= ($_pow2 7) 128)
    (= ($_pow2 8) 256)
    (= ($_pow2 9) 512)
    (= ($as_in_range_t ^^f4) ^^f4)
    (= ($as_in_range_t ^^f8) ^^f8)
    (= ($as_in_range_t ^^i1) ^^i1)
    (= ($as_in_range_t ^^i2) ^^i2)
    (= ($as_in_range_t ^^i4) ^^i4)
    (= ($as_in_range_t ^^i8) ^^i8)
    (= ($as_in_range_t ^^u1) ^^u1)
    (= ($as_in_range_t ^^u2) ^^u2)
    (= ($as_in_range_t ^^u4) ^^u4)
    (= ($as_in_range_t ^^u8) ^^u8)
    (= ($field_offset List.head) 0)
    (= ($field_offset Node.data) 8)
    (= ($field_offset Node.next) 0)
    (= ($field_parent_type List.$owns) ^List)
    (= ($field_parent_type List.followers) ^List)
    (= ($field_parent_type List.head) ^List)
    (= ($field_parent_type List.idx) ^List)
    (= ($field_parent_type List.length) ^List)
    (= ($field_parent_type List.length_acc) ^List)
    (= ($field_parent_type List.seq) ^List)
    (= ($field_parent_type Node.$owns) ^Node)
    (= ($field_parent_type Node.data) ^Node)
    (= ($field_parent_type Node.next) ^Node)
    (= ($has_volatile_owns_set ^List) false)
    (= ($has_volatile_owns_set ^Node) false)
    (= ($int_to_map_t..^^i4.^^bool 0) $zero.$map_t..^^i4.^^bool)
    (= ($int_to_map_t..^^u4.ptr_to..^Node 0) $zero.$map_t..^^u4.$ptr_to..^Node)
    (= ($int_to_map_t..ptr_to..^^void.^^bool 0) $zero.$map_t..$ptr_to..^^void.^^bool)
    (= ($int_to_map_t..ptr_to..^Node.^^u4 0) $zero.$map_t..$ptr_to..^Node.^^u4)
    (= ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool 0) $zero.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool)
    (= ($is_claimable ^List) false)
    (= ($is_claimable ^Node) false)
    (= ($owns_set_field ^List) List.$owns)
    (= ($owns_set_field ^Node) Node.$owns)
    (= ($ptr_level $memory_allocator_type) 0)
    (= ($ptr_level ^$@ptrset) 0)
    (= ($ptr_level ^$@state_t) 0)
    (= ($ptr_level ^$@struct) 0)
    (= ($ptr_level ^$@thread_id_t) 0)
    (= ($ptr_level ^^bool) 0)
    (= ($ptr_level ^^claim) 0)
    (= ($ptr_level ^^f4) 0)
    (= ($ptr_level ^^f8) 0)
    (= ($ptr_level ^^i1) 0)
    (= ($ptr_level ^^i2) 0)
    (= ($ptr_level ^^i4) 0)
    (= ($ptr_level ^^i8) 0)
    (= ($ptr_level ^^mathint) 0)
    (= ($ptr_level ^^root_emb) 0)
    (= ($ptr_level ^^u1) 0)
    (= ($ptr_level ^^u2) 0)
    (= ($ptr_level ^^u4) 0)
    (= ($ptr_level ^^u8) 0)
    (= ($ptr_level ^^void) 0)
    (= ($ptr_level ^List) 0)
    (= ($ptr_level ^Node) 0)
    (= ($ptr_to_i1 $null) 0)
    (= ($ptr_to_i2 $null) 0)
    (= ($ptr_to_i4 $null) 0)
    (= ($ptr_to_i8 $null) 0)
    (= ($ptr_to_u1 $null) 0)
    (= ($ptr_to_u2 $null) 0)
    (= ($ptr_to_u4 $null) 0)
    (= ($ptr_to_u8 $null) 0)
    (= ($set_cardinality $set_empty) 0)
    (= ($sizeof ^$@ptrset) 1)
    (= ($sizeof ^$@thread_id_t) 1)
    (= ($sizeof ^^f4) 4)
    (= ($sizeof ^^f8) 8)
    (= ($sizeof ^^i1) 1)
    (= ($sizeof ^^i2) 2)
    (= ($sizeof ^^i4) 4)
    (= ($sizeof ^^i8) 8)
    (= ($sizeof ^^u1) 1)
    (= ($sizeof ^^u2) 2)
    (= ($sizeof ^^u4) 4)
    (= ($sizeof ^^u8) 8)
    (= ($sizeof ^List) 8)
    (= ($sizeof ^Node) 16)
    (= ($unchecked ^^u4 (- 0 1)) $max.u4)
    (= ($unchecked ^^u4 (+ $max.u4 1)) 0)
    (= ($unchecked ^^u8 (- 0 1)) $max.u8)
    (= ($unchecked ^^u8 (+ $max.u8 1)) 0)
    (= (and (not $is_stuttering_check) (not $is_unwrap_check)) (and (not $is_stuttering_check) (not $is_unwrap_check)))
    (= true $@bf_212)
    (= true $@bf_212)
    (= true $@bf_213)
    (= true $@bf_213)
    (= true $@bf_215)
    (= true $@bf_215)
    (= true $@bf_216)
    (= true $@bf_216)
    (= true $@bf_220)
    (= true $@bf_220)
    (= true $@bf_221)
    (= true $@bf_221)
    (= true $@bf_222)
    (= true $@bf_222)
    (forall( (|#a_$0| $ptrset) (|#b_$2| $ptrset) (|#o_$4| $ptr))(!(= ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|)) (and ($set_in |#o_$4| |#a_$0|) (not ($set_in |#o_$4| |#b_$2|))))  :weight  0 :pattern ( ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|)))))
    (forall( (|#a_$1| $ptrset) (|#b_$3| $ptrset) (|#o_$5| $ptr))(!(= ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|)) (and ($set_in |#o_$5| |#a_$1|) ($set_in |#o_$5| |#b_$3|)))  :weight  0 :pattern ( ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|)))))
    (forall( (|#a_$3| $ptrset) (|#b_$5| $ptrset))(!(=> (forall( (|#o_$7| $ptr))(!(= ($set_in |#o_$7| |#a_$3|) ($set_in |#o_$7| |#b_$5|))  :weight  0 :pattern ( ($dont_instantiate |#o_$7|)))) ($set_eq |#a_$3| |#b_$5|))  :weight  0 :pattern ( ($set_eq |#a_$3| |#b_$5|))))
    (forall( (|#a_$4| $ptrset) (|#b_$6| $ptrset))(!(=> ($set_eq |#a_$4| |#b_$6|) (= |#a_$4| |#b_$6|))  :weight  0 :pattern ( ($set_eq |#a_$4| |#b_$6|))))
    (forall( (|#a| $ptrset) (|#b_$1| $ptrset) (|#o_$3| $ptr))(!(= ($set_in |#o_$3| ($set_union |#a| |#b_$1|)) (or ($set_in |#o_$3| |#a|) ($set_in |#o_$3| |#b_$1|)))  :weight  0 :pattern ( ($set_in |#o_$3| ($set_union |#a| |#b_$1|)))))
    (forall( (|#l_$2| $ptr) (|#p_$16| $ptr))(= ($set_in |#p_$16| ($span |#l_$2|)) ($set_in |#p_$16| ($span |#l_$2|))))
    (forall( (|#l_$3| $ptr) (|#p_$18| $ptr))(= ($set_in |#p_$18| ($full_extent |#l_$3|)) ($set_in |#p_$18| ($full_extent |#l_$3|))))
    (forall( (|#n_$0| $ctype))(!(= ($unptr_to ($spec_ptr_to |#n_$0|)) |#n_$0|)  :pattern ( ($spec_ptr_to |#n_$0|))))
    (forall( (|#n_$1| $ctype))(!(= ($sizeof ($ptr_to |#n_$1|)) $arch_ptr_size)  :pattern ( ($ptr_to |#n_$1|))))
    (forall( (|#n_$2| $ctype))(!(= ($sizeof ($ptr_to |#n_$2|)) $arch_ptr_size)  :pattern ( ($spec_ptr_to |#n_$2|))))
    (forall( (|#n_$3| $ctype))(!(= ($ptr_level ($ptr_to |#n_$3|)) (+ ($ptr_level |#n_$3|) 17))  :pattern ( ($ptr_to |#n_$3|))))
    (forall( (|#n_$4| $ctype))(!(= ($ptr_level ($spec_ptr_to |#n_$4|)) (+ ($ptr_level |#n_$4|) 31))  :pattern ( ($spec_ptr_to |#n_$4|))))
    (forall( (|#n_$5| $ctype))(!($is_primitive ($ptr_to |#n_$5|))  :pattern ( ($ptr_to |#n_$5|))))
    (forall( (|#n_$6| $ctype))(!($is_primitive ($spec_ptr_to |#n_$6|))  :pattern ( ($spec_ptr_to |#n_$6|))))
    (forall( (|#n_$7| $ctype))(!(=> ($is_primitive |#n_$7|) (not ($is_claimable |#n_$7|)))  :pattern ( ($is_primitive |#n_$7|))))
    (forall( (|#n_$8| $ctype))(!(=> ($is_claimable |#n_$8|) ($is_composite |#n_$8|))  :pattern ( ($is_claimable |#n_$8|))))
    (forall( (|#n| $ctype))(!(= ($unptr_to ($ptr_to |#n|)) |#n|)  :pattern ( ($ptr_to |#n|))))
    (forall( (|#o_$0| $ptr))(!(not ($set_in |#o_$0| $set_empty))  :weight  0 :pattern ( ($set_in |#o_$0| $set_empty))))
    (forall( (|#o_$8| $ptr))(!($set_in |#o_$8| $set_universe)  :weight  0 :pattern ( ($set_in |#o_$8| $set_universe))))
    (forall( (|#o| $ptr) (|#f| $ptr) (|S_$19| $state))(= (and (= ($kind_of ($typ |#f|)) $kind_primitive) (= ($ts_emb ($select.tm ($typemap |S_$19|) |#f|)) |#o|)) (and (= ($kind_of ($typ |#f|)) $kind_primitive) (= ($ts_emb ($select.tm ($typemap |S_$19|) |#f|)) |#o|))))
    (forall( (|#p_$0| $ptr) (|S_$0| $state))(= ($ts_emb ($select.tm ($typemap |S_$0|) |#p_$0|)) ($ts_emb ($select.tm ($typemap |S_$0|) |#p_$0|))))
    (forall( (|#p_$1| $ptr) (|S_$1| $state))(= ($ts_path ($select.tm ($typemap |S_$1|) |#p_$1|)) ($ts_path ($select.tm ($typemap |S_$1|) |#p_$1|))))
    (forall( (|#p_$11| $ptr) (|S_$25| $state))(= (and ($typed |S_$25| |#p_$11|) (not ($ts_is_volatile ($select.tm ($typemap |S_$25|) |#p_$11|)))) (and ($typed |S_$25| |#p_$11|) (not ($ts_is_volatile ($select.tm ($typemap |S_$25|) |#p_$11|))))))
    (forall( (|#p_$12| $ptr) (|#l| $ptr) (|S_$32| $state) (|S0| $state))(= (and (and (and (and (and ($typed |S0| |#p_$12|) (and (and (and (and ($closed |S_$32| |#p_$12|) (= ($owner |S_$32| |#p_$12|) $me)) (and ($is |#p_$12| ($typ |#p_$12|)) ($typed |S_$32| |#p_$12|))) (not (= ($kind_of ($typ |#p_$12|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$12|)))) (= ($timestamp |S_$32| |#p_$12|) ($current_timestamp |S_$32|))) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) (and (= ($owner |S0| |#p_$12|) |#l|) ($closed |S0| |#p_$12|))) (and (and (and (and (and ($typed |S0| |#p_$12|) (and (and (and (and ($closed |S_$32| |#p_$12|) (= ($owner |S_$32| |#p_$12|) $me)) (and ($is |#p_$12| ($typ |#p_$12|)) ($typed |S_$32| |#p_$12|))) (not (= ($kind_of ($typ |#p_$12|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$12|)))) (= ($timestamp |S_$32| |#p_$12|) ($current_timestamp |S_$32|))) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) (and (= ($owner |S0| |#p_$12|) |#l|) ($closed |S0| |#p_$12|)))))
    (forall( (|#p_$13| $ptr) (|#l_$0| $ptr) (|S_$33| $state) (|S0_$0| $state))(= (and (and (and (and (and (and ($typed |S0_$0| |#p_$13|) (and (and (and (and ($closed |S_$33| |#p_$13|) (= ($owner |S_$33| |#p_$13|) $me)) (and ($is |#p_$13| ($typ |#p_$13|)) ($typed |S_$33| |#p_$13|))) (not (= ($kind_of ($typ |#p_$13|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$13|)))) (= ($timestamp |S_$33| |#p_$13|) ($current_timestamp |S_$33|))) ($is_non_primitive ($typ |#p_$13|))) ($set_in |#p_$13| ($owns |S0_$0| |#l_$0|))) (and (= ($owner |S0_$0| |#p_$13|) |#l_$0|) ($closed |S0_$0| |#p_$13|))) (=> ($is_claimable ($typ |#p_$13|)) (= ($ref_cnt |S0_$0| |#p_$13|) ($ref_cnt |S_$33| |#p_$13|)))) (and (and (and (and (and (and ($typed |S0_$0| |#p_$13|) (and (and (and (and ($closed |S_$33| |#p_$13|) (= ($owner |S_$33| |#p_$13|) $me)) (and ($is |#p_$13| ($typ |#p_$13|)) ($typed |S_$33| |#p_$13|))) (not (= ($kind_of ($typ |#p_$13|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$13|)))) (= ($timestamp |S_$33| |#p_$13|) ($current_timestamp |S_$33|))) ($is_non_primitive ($typ |#p_$13|))) ($set_in |#p_$13| ($owns |S0_$0| |#l_$0|))) (and (= ($owner |S0_$0| |#p_$13|) |#l_$0|) ($closed |S0_$0| |#p_$13|))) (=> ($is_claimable ($typ |#p_$13|)) (= ($ref_cnt |S0_$0| |#p_$13|) ($ref_cnt |S_$33| |#p_$13|))))))
    (forall( (|#p_$14| $ptr) (|#l_$1| $ptr) (|S_$34| $state))(= ($set_in |#p_$14| ($owns |S_$34| |#l_$1|)) ($set_in |#p_$14| ($owns |S_$34| |#l_$1|))))
    (forall( (|#p_$17| $ptr))(= ($full_extent |#p_$17|) ($full_extent |#p_$17|)))
    (forall( (|#p_$19| $ptr) (|#t_$7| $ctype))(!(= ($is |#p_$19| |#t_$7|) (= ($typ |#p_$19|) |#t_$7|))  :weight  0))
    (forall( (|#p_$20| $ptr) (|#t_$8| $ctype))(!(=> ($is |#p_$20| |#t_$8|) (= |#p_$20| ($ptr |#t_$8| ($ref |#p_$20|))))  :pattern ( ($is |#p_$20| |#t_$8|))))
    (forall( (|#p_$21| $ptr) (|t_$20| $ctype))(!(= ($dot |#p_$21| ($owns_set_field |t_$20|)) ($ptr ^$@ptrset ($ghost_ref |#p_$21| ($owns_set_field |t_$20|))))  :pattern ( ($dot |#p_$21| ($owns_set_field |t_$20|)))))
    (forall( (|#p_$32| $ptr) (|#i_$0| Int) (|#t_$16| $ctype))(!(and ($extent_hint ($idx |#p_$32| |#i_$0| |#t_$16|) |#p_$32|) (= ($idx |#p_$32| |#i_$0| |#t_$16|) ($ptr |#t_$16| (+ ($ref |#p_$32|) (* |#i_$0| ($sizeof |#t_$16|))))))  :pattern ( ($idx |#p_$32| |#i_$0| |#t_$16|))))
    (forall( (|#p_$34| $ptr) (|#s1_$12| $state) (|#s2_$10| $state))(!(= ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^Node) (and (and (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.$owns)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.$owns))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.next)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.next)))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.data)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.data)))))  :pattern ( ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^Node))))
    (forall( (|#p_$35| $ptr) (|#s1_$13| $state) (|#s2_$11| $state))(!(= ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^Node) (and (and (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.$owns)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.$owns))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.next)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.next)))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.data)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.data)))))  :pattern ( ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^Node))))
    (forall( (|#p_$36| $ptr))(!(=> ($is |#p_$36| ^Node) (and (= ($dot |#p_$36| Node.$owns) ($ptr ^$@ptrset ($ghost_ref |#p_$36| Node.$owns))) ($extent_hint ($dot |#p_$36| Node.$owns) |#p_$36|)))  :pattern ( ($dot |#p_$36| Node.$owns))))
    (forall( (|#p_$37| $ptr) (|#s_$1| $state))(!(=> (and ($is |#p_$37| ^Node) ($typed |#s_$1| |#p_$37|)) (and (and (and (and ($is ($dot |#p_$37| Node.$owns) ^$@ptrset) ($typed |#s_$1| ($dot |#p_$37| Node.$owns))) (= ($ts_emb ($select.tm ($typemap |#s_$1|) ($dot |#p_$37| Node.$owns))) |#p_$37|)) (= ($ts_path ($select.tm ($typemap |#s_$1|) ($dot |#p_$37| Node.$owns))) Node.$owns)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$1|) ($dot |#p_$37| Node.$owns))) false)))  :pattern ( ($select.tm ($typemap |#s_$1|) ($dot |#p_$37| Node.$owns))) :pattern ( ($select.sm ($statusmap |#s_$1|) ($dot |#p_$37| Node.$owns)))))
    (forall( (|#p_$38| $ptr))(!(=> ($is |#p_$38| ^Node) (and (= ($dot |#p_$38| Node.next) ($ptr ($ptr_to ^Node) (+ ($ref |#p_$38|) 0))) ($extent_hint ($dot |#p_$38| Node.next) |#p_$38|)))  :pattern ( ($dot |#p_$38| Node.next))))
    (forall( (|#p_$39| $ptr) (|#s_$2| $state))(!(=> (and ($is |#p_$39| ^Node) ($typed |#s_$2| |#p_$39|)) (and (and (and (and ($is ($dot |#p_$39| Node.next) ($ptr_to ^Node)) ($typed |#s_$2| ($dot |#p_$39| Node.next))) (= ($ts_emb ($select.tm ($typemap |#s_$2|) ($dot |#p_$39| Node.next))) |#p_$39|)) (= ($ts_path ($select.tm ($typemap |#s_$2|) ($dot |#p_$39| Node.next))) Node.next)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$2|) ($dot |#p_$39| Node.next))) false)))  :pattern ( ($select.tm ($typemap |#s_$2|) ($dot |#p_$39| Node.next))) :pattern ( ($select.sm ($statusmap |#s_$2|) ($dot |#p_$39| Node.next)))))
    (forall( (|#p_$40| $ptr))(!(=> ($is |#p_$40| ^Node) (and (= ($dot |#p_$40| Node.data) ($ptr ^^i4 (+ ($ref |#p_$40|) 8))) ($extent_hint ($dot |#p_$40| Node.data) |#p_$40|)))  :pattern ( ($dot |#p_$40| Node.data))))
    (forall( (|#p_$41| $ptr) (|#s_$3| $state))(!(=> (and ($is |#p_$41| ^Node) ($typed |#s_$3| |#p_$41|)) (and (and (and (and ($is ($dot |#p_$41| Node.data) ^^i4) ($typed |#s_$3| ($dot |#p_$41| Node.data))) (= ($ts_emb ($select.tm ($typemap |#s_$3|) ($dot |#p_$41| Node.data))) |#p_$41|)) (= ($ts_path ($select.tm ($typemap |#s_$3|) ($dot |#p_$41| Node.data))) Node.data)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$3|) ($dot |#p_$41| Node.data))) false)))  :pattern ( ($select.tm ($typemap |#s_$3|) ($dot |#p_$41| Node.data))) :pattern ( ($select.sm ($statusmap |#s_$3|) ($dot |#p_$41| Node.data)))))
    (forall( (|#p_$43| $ptr) (|#s1_$18| $state) (|#s2_$15| $state))(!(= ($state_spans_the_same |#s1_$18| |#s2_$15| |#p_$43| ^List) (and (and (and (and (and (and (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$43| List.$owns)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$43| List.$owns))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$43| List.head)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$43| List.head)))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$43| List.seq)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$43| List.seq)))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$43| List.idx)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$43| List.idx)))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$43| List.followers)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$43| List.followers)))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$43| List.length_acc)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$43| List.length_acc)))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$43| List.length)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$43| List.length)))))  :pattern ( ($state_spans_the_same |#s1_$18| |#s2_$15| |#p_$43| ^List))))
    (forall( (|#p_$44| $ptr) (|#s1_$19| $state) (|#s2_$16| $state))(!(= ($state_nonvolatile_spans_the_same |#s1_$19| |#s2_$16| |#p_$44| ^List) (and (and (and (and (and (and (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$44| List.$owns)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$44| List.$owns))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$44| List.head)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$44| List.head)))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$44| List.seq)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$44| List.seq)))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$44| List.idx)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$44| List.idx)))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$44| List.followers)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$44| List.followers)))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$44| List.length_acc)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$44| List.length_acc)))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$44| List.length)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$44| List.length)))))  :pattern ( ($state_nonvolatile_spans_the_same |#s1_$19| |#s2_$16| |#p_$44| ^List))))
    (forall( (|#p_$45| $ptr))(!(=> ($is |#p_$45| ^List) (and (= ($dot |#p_$45| List.$owns) ($ptr ^$@ptrset ($ghost_ref |#p_$45| List.$owns))) ($extent_hint ($dot |#p_$45| List.$owns) |#p_$45|)))  :pattern ( ($dot |#p_$45| List.$owns))))
    (forall( (|#p_$46| $ptr) (|#s_$6| $state))(!(=> (and ($is |#p_$46| ^List) ($typed |#s_$6| |#p_$46|)) (and (and (and (and ($is ($dot |#p_$46| List.$owns) ^$@ptrset) ($typed |#s_$6| ($dot |#p_$46| List.$owns))) (= ($ts_emb ($select.tm ($typemap |#s_$6|) ($dot |#p_$46| List.$owns))) |#p_$46|)) (= ($ts_path ($select.tm ($typemap |#s_$6|) ($dot |#p_$46| List.$owns))) List.$owns)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$6|) ($dot |#p_$46| List.$owns))) false)))  :pattern ( ($select.tm ($typemap |#s_$6|) ($dot |#p_$46| List.$owns))) :pattern ( ($select.sm ($statusmap |#s_$6|) ($dot |#p_$46| List.$owns)))))
    (forall( (|#p_$47| $ptr))(!(=> ($is |#p_$47| ^List) (and (= ($dot |#p_$47| List.head) ($ptr ($ptr_to ^Node) (+ ($ref |#p_$47|) 0))) ($extent_hint ($dot |#p_$47| List.head) |#p_$47|)))  :pattern ( ($dot |#p_$47| List.head))))
    (forall( (|#p_$48| $ptr) (|#s_$7| $state))(!(=> (and ($is |#p_$48| ^List) ($typed |#s_$7| |#p_$48|)) (and (and (and (and ($is ($dot |#p_$48| List.head) ($ptr_to ^Node)) ($typed |#s_$7| ($dot |#p_$48| List.head))) (= ($ts_emb ($select.tm ($typemap |#s_$7|) ($dot |#p_$48| List.head))) |#p_$48|)) (= ($ts_path ($select.tm ($typemap |#s_$7|) ($dot |#p_$48| List.head))) List.head)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$7|) ($dot |#p_$48| List.head))) false)))  :pattern ( ($select.tm ($typemap |#s_$7|) ($dot |#p_$48| List.head))) :pattern ( ($select.sm ($statusmap |#s_$7|) ($dot |#p_$48| List.head)))))
    (forall( (|#p_$49| $ptr))(!(=> ($is |#p_$49| ^List) (and (= ($dot |#p_$49| List.seq) ($ptr ($map_t ^^u4 ($ptr_to ^Node)) ($ghost_ref |#p_$49| List.seq))) ($extent_hint ($dot |#p_$49| List.seq) |#p_$49|)))  :pattern ( ($dot |#p_$49| List.seq))))
    (forall( (|#p_$50| $ptr) (|#s_$8| $state))(!(=> (and ($is |#p_$50| ^List) ($typed |#s_$8| |#p_$50|)) (and (and (and (and ($is ($dot |#p_$50| List.seq) ($map_t ^^u4 ($ptr_to ^Node))) ($typed |#s_$8| ($dot |#p_$50| List.seq))) (= ($ts_emb ($select.tm ($typemap |#s_$8|) ($dot |#p_$50| List.seq))) |#p_$50|)) (= ($ts_path ($select.tm ($typemap |#s_$8|) ($dot |#p_$50| List.seq))) List.seq)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$8|) ($dot |#p_$50| List.seq))) false)))  :pattern ( ($select.tm ($typemap |#s_$8|) ($dot |#p_$50| List.seq))) :pattern ( ($select.sm ($statusmap |#s_$8|) ($dot |#p_$50| List.seq)))))
    (forall( (|#p_$51| $ptr))(!(=> ($is |#p_$51| ^List) (and (= ($dot |#p_$51| List.idx) ($ptr ($map_t ($ptr_to ^Node) ^^u4) ($ghost_ref |#p_$51| List.idx))) ($extent_hint ($dot |#p_$51| List.idx) |#p_$51|)))  :pattern ( ($dot |#p_$51| List.idx))))
    (forall( (|#p_$52| $ptr) (|#s_$9| $state))(!(=> (and ($is |#p_$52| ^List) ($typed |#s_$9| |#p_$52|)) (and (and (and (and ($is ($dot |#p_$52| List.idx) ($map_t ($ptr_to ^Node) ^^u4)) ($typed |#s_$9| ($dot |#p_$52| List.idx))) (= ($ts_emb ($select.tm ($typemap |#s_$9|) ($dot |#p_$52| List.idx))) |#p_$52|)) (= ($ts_path ($select.tm ($typemap |#s_$9|) ($dot |#p_$52| List.idx))) List.idx)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$9|) ($dot |#p_$52| List.idx))) false)))  :pattern ( ($select.tm ($typemap |#s_$9|) ($dot |#p_$52| List.idx))) :pattern ( ($select.sm ($statusmap |#s_$9|) ($dot |#p_$52| List.idx)))))
    (forall( (|#p_$53| $ptr))(!(=> ($is |#p_$53| ^List) (and (= ($dot |#p_$53| List.followers) ($ptr ($map_t ($ptr_to ^Node) ($map_t ^^i4 ^^bool)) ($ghost_ref |#p_$53| List.followers))) ($extent_hint ($dot |#p_$53| List.followers) |#p_$53|)))  :pattern ( ($dot |#p_$53| List.followers))))
    (forall( (|#p_$54| $ptr) (|#s_$10| $state))(!(=> (and ($is |#p_$54| ^List) ($typed |#s_$10| |#p_$54|)) (and (and (and (and ($is ($dot |#p_$54| List.followers) ($map_t ($ptr_to ^Node) ($map_t ^^i4 ^^bool))) ($typed |#s_$10| ($dot |#p_$54| List.followers))) (= ($ts_emb ($select.tm ($typemap |#s_$10|) ($dot |#p_$54| List.followers))) |#p_$54|)) (= ($ts_path ($select.tm ($typemap |#s_$10|) ($dot |#p_$54| List.followers))) List.followers)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$10|) ($dot |#p_$54| List.followers))) false)))  :pattern ( ($select.tm ($typemap |#s_$10|) ($dot |#p_$54| List.followers))) :pattern ( ($select.sm ($statusmap |#s_$10|) ($dot |#p_$54| List.followers)))))
    (forall( (|#p_$55| $ptr))(!(=> ($is |#p_$55| ^List) (and (= ($dot |#p_$55| List.length_acc) ($ptr ($map_t ($ptr_to ^Node) ^^u4) ($ghost_ref |#p_$55| List.length_acc))) ($extent_hint ($dot |#p_$55| List.length_acc) |#p_$55|)))  :pattern ( ($dot |#p_$55| List.length_acc))))
    (forall( (|#p_$56| $ptr) (|#s_$11| $state))(!(=> (and ($is |#p_$56| ^List) ($typed |#s_$11| |#p_$56|)) (and (and (and (and ($is ($dot |#p_$56| List.length_acc) ($map_t ($ptr_to ^Node) ^^u4)) ($typed |#s_$11| ($dot |#p_$56| List.length_acc))) (= ($ts_emb ($select.tm ($typemap |#s_$11|) ($dot |#p_$56| List.length_acc))) |#p_$56|)) (= ($ts_path ($select.tm ($typemap |#s_$11|) ($dot |#p_$56| List.length_acc))) List.length_acc)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$11|) ($dot |#p_$56| List.length_acc))) false)))  :pattern ( ($select.tm ($typemap |#s_$11|) ($dot |#p_$56| List.length_acc))) :pattern ( ($select.sm ($statusmap |#s_$11|) ($dot |#p_$56| List.length_acc)))))
    (forall( (|#p_$57| $ptr))(!(=> ($is |#p_$57| ^List) (and (= ($dot |#p_$57| List.length) ($ptr ^^u4 ($ghost_ref |#p_$57| List.length))) ($extent_hint ($dot |#p_$57| List.length) |#p_$57|)))  :pattern ( ($dot |#p_$57| List.length))))
    (forall( (|#p_$58| $ptr) (|#s_$12| $state))(!(=> (and ($is |#p_$58| ^List) ($typed |#s_$12| |#p_$58|)) (and (and (and (and ($is ($dot |#p_$58| List.length) ^^u4) ($typed |#s_$12| ($dot |#p_$58| List.length))) (= ($ts_emb ($select.tm ($typemap |#s_$12|) ($dot |#p_$58| List.length))) |#p_$58|)) (= ($ts_path ($select.tm ($typemap |#s_$12|) ($dot |#p_$58| List.length))) List.length)) (= ($ts_is_volatile ($select.tm ($typemap |#s_$12|) ($dot |#p_$58| List.length))) false)))  :pattern ( ($select.tm ($typemap |#s_$12|) ($dot |#p_$58| List.length))) :pattern ( ($select.sm ($statusmap |#s_$12|) ($dot |#p_$58| List.length)))))
    (forall( (|#p2_$0| $ptr) (|#p1_$0| $ptr))(= ($set_in |#p1_$0| ($full_extent |#p2_$0|)) ($set_in |#p1_$0| ($full_extent |#p2_$0|))))
    (forall( (|#p2| $ptr) (|#p1| $ptr) (|S_$22| $state))(= ($set_in |#p1| ($extent |S_$22| |#p2|)) ($set_in |#p1| ($extent |S_$22| |#p2|))))
    (forall( (|#q_$2| $ptr) (|#r_$16| Int))(!(= ($set_in |#q_$2| ($full_extent ($ptr ^Node |#r_$16|))) (or (or (or (= |#q_$2| ($ptr ^Node |#r_$16|)) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.$owns))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.next))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.data))))  :pattern ( ($set_in |#q_$2| ($full_extent ($ptr ^Node |#r_$16|))))))
    (forall( (|#q_$5| $ptr) (|#r_$19| Int))(!(= ($set_in |#q_$5| ($span ($ptr ^Node |#r_$19|))) (or (or (or (= |#q_$5| ($ptr ^Node |#r_$19|)) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.$owns))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.next))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.data))))  :pattern ( ($set_in |#q_$5| ($span ($ptr ^Node |#r_$19|))))))
    (forall( (|#q_$6| $ptr) (|#r_$24| Int))(!(= ($set_in |#q_$6| ($full_extent ($ptr ^List |#r_$24|))) (or (or (or (or (or (or (or (= |#q_$6| ($ptr ^List |#r_$24|)) (= |#q_$6| ($dot ($ptr ^List |#r_$24|) List.$owns))) (= |#q_$6| ($dot ($ptr ^List |#r_$24|) List.head))) (= |#q_$6| ($dot ($ptr ^List |#r_$24|) List.seq))) (= |#q_$6| ($dot ($ptr ^List |#r_$24|) List.idx))) (= |#q_$6| ($dot ($ptr ^List |#r_$24|) List.followers))) (= |#q_$6| ($dot ($ptr ^List |#r_$24|) List.length_acc))) (= |#q_$6| ($dot ($ptr ^List |#r_$24|) List.length))))  :pattern ( ($set_in |#q_$6| ($full_extent ($ptr ^List |#r_$24|))))))
    (forall( (|#q_$9| $ptr) (|#r_$27| Int))(!(= ($set_in |#q_$9| ($span ($ptr ^List |#r_$27|))) (or (or (or (or (or (or (or (= |#q_$9| ($ptr ^List |#r_$27|)) (= |#q_$9| ($dot ($ptr ^List |#r_$27|) List.$owns))) (= |#q_$9| ($dot ($ptr ^List |#r_$27|) List.head))) (= |#q_$9| ($dot ($ptr ^List |#r_$27|) List.seq))) (= |#q_$9| ($dot ($ptr ^List |#r_$27|) List.idx))) (= |#q_$9| ($dot ($ptr ^List |#r_$27|) List.followers))) (= |#q_$9| ($dot ($ptr ^List |#r_$27|) List.length_acc))) (= |#q_$9| ($dot ($ptr ^List |#r_$27|) List.length))))  :pattern ( ($set_in |#q_$9| ($span ($ptr ^List |#r_$27|))))))
    (forall( (|#r_$1| $ctype) (|#d_$1| $ctype))(!(= ($ptr_level ($map_t |#r_$1| |#d_$1|)) (+ ($ptr_level |#r_$1|) 23))  :pattern ( ($map_t |#r_$1| |#d_$1|))))
    (forall( (|#r_$2| $ctype) (|#d_$2| $ctype))(!($is_primitive ($map_t |#r_$2| |#d_$2|))  :pattern ( ($map_t |#r_$2| |#d_$2|))))
    (forall( (|#r_$3| Int))(!(= ($in_range_phys_ptr |#r_$3|) (and (<= 0 |#r_$3|) (<= |#r_$3| $arch_spec_ptr_start)))  :pattern ( ($in_range_phys_ptr |#r_$3|))))
    (forall( (|#r_$4| Int))(!(= ($in_range_spec_ptr |#r_$4|) (or (= 0 |#r_$4|) (> |#r_$4| $arch_spec_ptr_start)))  :pattern ( ($in_range_spec_ptr |#r_$4|))))
    (forall( (|#r_$7| $ptr) (|#o_$1| $ptr))(!(= ($set_in |#o_$1| ($set_singleton |#r_$7|)) (= |#r_$7| |#o_$1|))  :weight  0 :pattern ( ($set_in |#o_$1| ($set_singleton |#r_$7|)))))
    (forall( (|#r_$8| $ptr) (|#o_$2| $ptr))(!(= ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|)) (and (= |#r_$8| |#o_$2|) (not (= ($ref |#r_$8|) ($ref $null)))))  :weight  0 :pattern ( ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|)))))
    (forall( (|#s_$0| $state) (|#q_$4| $ptr) (|#r_$18| Int))(!(=> ($typed |#s_$0| ($ptr ^Node |#r_$18|)) (= ($set_in |#q_$4| ($extent |#s_$0| ($ptr ^Node |#r_$18|))) (or (= |#q_$4| ($ptr ^Node |#r_$18|)) (= ($ts_emb ($select.tm ($typemap |#s_$0|) |#q_$4|)) ($ptr ^Node |#r_$18|)))))  :pattern ( ($set_in |#q_$4| ($extent |#s_$0| ($ptr ^Node |#r_$18|))))))
    (forall( (|#s_$4| $state) (|#q_$7| $ptr) (|#r_$25| Int))(!(= ($set_in |#q_$7| ($extent |#s_$4| ($ptr ^List |#r_$25|))) ($set_in |#q_$7| ($full_extent ($ptr ^List |#r_$25|))))  :pattern ( ($set_in |#q_$7| ($extent |#s_$4| ($ptr ^List |#r_$25|))))))
    (forall( (|#s_$5| $state) (|#q_$8| $ptr) (|#r_$26| Int))(!(=> ($typed |#s_$5| ($ptr ^List |#r_$26|)) (= ($set_in |#q_$8| ($extent |#s_$5| ($ptr ^List |#r_$26|))) (or (= |#q_$8| ($ptr ^List |#r_$26|)) (= ($ts_emb ($select.tm ($typemap |#s_$5|) |#q_$8|)) ($ptr ^List |#r_$26|)))))  :pattern ( ($set_in |#q_$8| ($extent |#s_$5| ($ptr ^List |#r_$26|))))))
    (forall( (|#s| $state) (|#q_$3| $ptr) (|#r_$17| Int))(!(= ($set_in |#q_$3| ($extent |#s| ($ptr ^Node |#r_$17|))) ($set_in |#q_$3| ($full_extent ($ptr ^Node |#r_$17|))))  :pattern ( ($set_in |#q_$3| ($extent |#s| ($ptr ^Node |#r_$17|))))))
    (forall( (|#s1_$10| $state) (|#s2_$7| $state) (|#p_$29| $ptr) (|#t_$13| $ctype))(!(=> (and ($is_arraytype |#t_$13|) (= ($typ |#p_$29|) |#t_$13|)) (and (= ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|) ($typed |#s2_$7| |#p_$29|)) ($sequential |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)))  :pattern ( ($is_arraytype |#t_$13|) ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|))))
    (forall( (|#s1_$11| $state) (|#s2_$8| $state) (|#p_$33| $ptr))(!(= ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^Node) (and ($typed |#s2_$8| |#p_$33|) ($set_eq ($owns |#s2_$8| |#p_$33|) $set_empty)))  :pattern ( ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^Node))))
    (forall( (|#s1_$14| $state) (|#r_$20| Int))(!(= ($extent_mutable |#s1_$14| ($ptr ^Node |#r_$20|)) ($mutable |#s1_$14| ($ptr ^Node |#r_$20|)))  :pattern ( ($extent_mutable |#s1_$14| ($ptr ^Node |#r_$20|)))))
    (forall( (|#s1_$15| $state) (|#s2_$12| $state) (|#r_$21| Int))(!(= ($extent_is_fresh |#s1_$15| |#s2_$12| ($ptr ^Node |#r_$21|)) (and (< ($current_timestamp |#s1_$15|) ($timestamp |#s2_$12| ($ptr ^Node |#r_$21|))) (<= ($timestamp |#s2_$12| ($ptr ^Node |#r_$21|)) ($current_timestamp |#s2_$12|))))  :pattern ( ($extent_is_fresh |#s1_$15| |#s2_$12| ($ptr ^Node |#r_$21|)))))
    (forall( (|#s1_$16| $state) (|#r_$22| Int))(!(= ($extent_zero |#s1_$16| ($ptr ^Node |#r_$22|)) (and (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.next)) 0) (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.data)) 0)))  :pattern ( ($extent_zero |#s1_$16| ($ptr ^Node |#r_$22|)))))
    (forall( (|#s1_$17| $state) (|#s2_$13| $state) (|#p_$42| $ptr))(!(= ($inv2 |#s1_$17| |#s2_$13| |#p_$42| ^List) (and (and (and (and (and (and (and (and (and (and (and (and (and ($typed |#s2_$13| |#p_$42|) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.head)))) ($ref $null))) ($set_in ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.head))) ($owns |#s2_$13| |#p_$42|)))) ($eq.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.followers))) ($ref ($ptr ^Node ($ref $null)))) F@lambda@1)) (forall( (|Q#n$1^18.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^18.29#dt1|))) (=> ($set_in ($ptr ^Node |Q#n$1^18.29#dt1|) ($owns |#s2_$13| |#p_$42|)) (or (not (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^18.29#dt1|) Node.next)))) ($ref $null)))) ($set_in ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^18.29#dt1|) Node.next))) ($owns |#s2_$13| |#p_$42|))))))) (forall( (|Q#n$1^19.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^19.29#dt1|))) (=> ($set_in ($ptr ^Node |Q#n$1^19.29#dt1|) ($owns |#s2_$13| |#p_$42|)) (forall( (|Q#e$1^20.5#tc2| Int))(=> (and (<= $min.i4 |Q#e$1^20.5#tc2|) (<= |Q#e$1^20.5#tc2| $max.i4)) (= ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.followers))) ($ref ($ptr ^Node |Q#n$1^19.29#dt1|))) |Q#e$1^20.5#tc2|) (or ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.followers))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^19.29#dt1|) Node.next))))) |Q#e$1^20.5#tc2|) (= |Q#e$1^20.5#tc2| ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^19.29#dt1|) Node.data))))))))))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.length_acc))) ($ref ($ptr ^Node ($ref $null)))) 0)) (forall( (|Q#n$1^21.51#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^21.51#dt1|))) (=> ($set_in ($ptr ^Node |Q#n$1^21.51#dt1|) ($owns |#s2_$13| |#p_$42|)) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.length_acc))) ($ref ($ptr ^Node |Q#n$1^21.51#dt1|))) (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.length_acc))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^21.51#dt1|) Node.next))))) 1)))))) (forall( (|Q#n$1^22.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^22.29#dt1|))) (=> ($set_in ($ptr ^Node |Q#n$1^22.29#dt1|) ($owns |#s2_$13| |#p_$42|)) (= ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.seq))) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.idx))) ($ref ($ptr ^Node |Q#n$1^22.29#dt1|)))))) ($ref ($ptr ^Node |Q#n$1^22.29#dt1|))))))) (forall( (|Q#i$1^23.29#tc3| Int))(=> (and (<= 0 |Q#i$1^23.29#tc3|) (<= |Q#i$1^23.29#tc3| $max.u4)) (=> (< |Q#i$1^23.29#tc3| ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.length))) ($set_in ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.seq))) |Q#i$1^23.29#tc3|)) ($owns |#s2_$13| |#p_$42|)))))) (forall( (|Q#i$1^24.29#tc3| Int))(!(=> (and (<= 0 |Q#i$1^24.29#tc3|) (<= |Q#i$1^24.29#tc3| $max.u4)) (=> (< |Q#i$1^24.29#tc3| ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.length))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.seq))) |Q#i$1^24.29#tc3|)) Node.next)))) ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.seq))) (+ |Q#i$1^24.29#tc3| 1)))))))  :pattern ( (sk_hack ($set_in ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.seq))) |Q#i$1^24.29#tc3|)) ($owns |#s2_$13| |#p_$42|))))))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.idx))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.head))))) 0)) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.head)))) ($ref $null))) (= ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.seq))) 0))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.head))))))) (forall( (|Q#n$1^26.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^26.29#dt1|))) (=> (and ($set_in ($ptr ^Node |Q#n$1^26.29#dt1|) ($owns |#s2_$13| |#p_$42|)) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^26.29#dt1|) Node.next)))) ($ref $null)))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.idx))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^26.29#dt1|) Node.next))))) (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.idx))) ($ref ($ptr ^Node |Q#n$1^26.29#dt1|))) 1)))))) (= ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.length)) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.length_acc))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$42| List.head))))))))  :pattern ( ($inv2 |#s1_$17| |#s2_$13| |#p_$42| ^List))))
    (forall( (|#s1_$20| $state) (|#r_$28| Int))(!(= ($extent_mutable |#s1_$20| ($ptr ^List |#r_$28|)) ($mutable |#s1_$20| ($ptr ^List |#r_$28|)))  :pattern ( ($extent_mutable |#s1_$20| ($ptr ^List |#r_$28|)))))
    (forall( (|#s1_$21| $state) (|#s2_$17| $state) (|#r_$29| Int))(!(= ($extent_is_fresh |#s1_$21| |#s2_$17| ($ptr ^List |#r_$29|)) (and (< ($current_timestamp |#s1_$21|) ($timestamp |#s2_$17| ($ptr ^List |#r_$29|))) (<= ($timestamp |#s2_$17| ($ptr ^List |#r_$29|)) ($current_timestamp |#s2_$17|))))  :pattern ( ($extent_is_fresh |#s1_$21| |#s2_$17| ($ptr ^List |#r_$29|)))))
    (forall( (|#s1_$22| $state) (|#r_$30| Int))(!(= ($extent_zero |#s1_$22| ($ptr ^List |#r_$30|)) (and (and (and (and (and (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^List |#r_$30|) List.head)) 0) (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^List |#r_$30|) List.seq)) 0)) (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^List |#r_$30|) List.idx)) 0)) (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^List |#r_$30|) List.followers)) 0)) (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^List |#r_$30|) List.length_acc)) 0)) (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^List |#r_$30|) List.length)) 0)))  :pattern ( ($extent_zero |#s1_$22| ($ptr ^List |#r_$30|)))))
    (forall( (|#s1_$6| $state) (|#s2_$3| $state) (|#p_$26| $ptr) (|#t_$10| $ctype))(!(= ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|) (=> (and ($closed |#s1_$6| |#p_$26|) ($closed |#s2_$3| |#p_$26|)) ($spans_the_same |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|)))  :weight  0 :pattern ( ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|))))
    (forall( (|#s1_$8| $state) (|#s2_$5| $state) (|#p_$27| $ptr) (|#t_$11| $ctype))(!(= ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|) (and (and (and (= ($read_version |#s1_$8| |#p_$27|) ($read_version |#s2_$5| |#p_$27|)) (= ($owns |#s1_$8| |#p_$27|) ($owns |#s2_$5| |#p_$27|))) (= ($select.tm ($typemap |#s1_$8|) |#p_$27|) ($select.tm ($typemap |#s2_$5|) |#p_$27|))) ($state_spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))  :weight  0 :pattern ( ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|))))
    (forall( (|#s1_$9| $state) (|#s2_$6| $state) (|#p_$28| $ptr) (|#t_$12| $ctype))(!(= ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|) (and (and (= ($read_version |#s1_$9| |#p_$28|) ($read_version |#s2_$6| |#p_$28|)) (= ($select.tm ($typemap |#s1_$9|) |#p_$28|) ($select.tm ($typemap |#s2_$6|) |#p_$28|))) ($state_nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|)))  :weight  0 :pattern ( ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|))))
    (forall( (|#s2_$0| $state) (|#s1_$1| $state))(= (forall( (|#p_$9_$0| $ptr))(!(or (and (not ($closed |#s1_$1| |#p_$9_$0|)) (not ($closed |#s2_$0| |#p_$9_$0|))) (and ($inv2 |#s1_$1| |#s2_$0| |#p_$9_$0| ($typ |#p_$9_$0|)) ($nonvolatile_spans_the_same |#s1_$1| |#s2_$0| |#p_$9_$0| ($typ |#p_$9_$0|))))  :pattern ( ($closed |#s1_$1| |#p_$9_$0|)) :pattern ( ($closed |#s2_$0| |#p_$9_$0|)))) (forall( (|#p_$9| $ptr))(!(or (and (not ($closed |#s1_$1| |#p_$9|)) (not ($closed |#s2_$0| |#p_$9|))) (and ($inv2 |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|)) ($nonvolatile_spans_the_same |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|))))  :pattern ( ($closed |#s1_$1| |#p_$9|)) :pattern ( ($closed |#s2_$0| |#p_$9|))))))
    (forall( (|#s2_$14| $state) (|#r_$23| Int))(!(= ($inv_lab |#s2_$14| ($ptr ^List |#r_$23|) l@public) (and (and (and (and (and (and (and (and (and (and (and (and (and ($typed |#s2_$14| ($ptr ^List |#r_$23|)) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.head)))) ($ref $null))) ($set_in ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.head))) ($owns |#s2_$14| ($ptr ^List |#r_$23|))))) ($eq.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.followers))) ($ref ($ptr ^Node ($ref $null)))) F@lambda@1)) (forall( (|Q#n$1^18.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^18.29#dt1_$0|))) (=> ($set_in ($ptr ^Node |Q#n$1^18.29#dt1_$0|) ($owns |#s2_$14| ($ptr ^List |#r_$23|))) (or (not (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^18.29#dt1_$0|) Node.next)))) ($ref $null)))) ($set_in ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^18.29#dt1_$0|) Node.next))) ($owns |#s2_$14| ($ptr ^List |#r_$23|)))))))) (forall( (|Q#n$1^19.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^19.29#dt1_$0|))) (=> ($set_in ($ptr ^Node |Q#n$1^19.29#dt1_$0|) ($owns |#s2_$14| ($ptr ^List |#r_$23|))) (forall( (|Q#e$1^20.5#tc2_$0| Int))(=> (and (<= $min.i4 |Q#e$1^20.5#tc2_$0|) (<= |Q#e$1^20.5#tc2_$0| $max.i4)) (= ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.followers))) ($ref ($ptr ^Node |Q#n$1^19.29#dt1_$0|))) |Q#e$1^20.5#tc2_$0|) (or ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.followers))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^19.29#dt1_$0|) Node.next))))) |Q#e$1^20.5#tc2_$0|) (= |Q#e$1^20.5#tc2_$0| ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^19.29#dt1_$0|) Node.data))))))))))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($ptr ^Node ($ref $null)))) 0)) (forall( (|Q#n$1^21.51#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^21.51#dt1_$0|))) (=> ($set_in ($ptr ^Node |Q#n$1^21.51#dt1_$0|) ($owns |#s2_$14| ($ptr ^List |#r_$23|))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($ptr ^Node |Q#n$1^21.51#dt1_$0|))) (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^21.51#dt1_$0|) Node.next))))) 1)))))) (forall( (|Q#n$1^22.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^22.29#dt1_$0|))) (=> ($set_in ($ptr ^Node |Q#n$1^22.29#dt1_$0|) ($owns |#s2_$14| ($ptr ^List |#r_$23|))) (= ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.seq))) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($ptr ^Node |Q#n$1^22.29#dt1_$0|)))))) ($ref ($ptr ^Node |Q#n$1^22.29#dt1_$0|))))))) (forall( (|Q#i$1^23.29#tc3_$0| Int))(=> (and (<= 0 |Q#i$1^23.29#tc3_$0|) (<= |Q#i$1^23.29#tc3_$0| $max.u4)) (=> (< |Q#i$1^23.29#tc3_$0| ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.length))) ($set_in ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.seq))) |Q#i$1^23.29#tc3_$0|)) ($owns |#s2_$14| ($ptr ^List |#r_$23|))))))) (forall( (|Q#i$1^24.29#tc3_$0| Int))(!(=> (and (<= 0 |Q#i$1^24.29#tc3_$0|) (<= |Q#i$1^24.29#tc3_$0| $max.u4)) (=> (< |Q#i$1^24.29#tc3_$0| ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.length))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.seq))) |Q#i$1^24.29#tc3_$0|)) Node.next)))) ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.seq))) (+ |Q#i$1^24.29#tc3_$0| 1)))))))  :pattern ( (sk_hack ($set_in ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.seq))) |Q#i$1^24.29#tc3_$0|)) ($owns |#s2_$14| ($ptr ^List |#r_$23|)))))))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.head))))) 0)) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.head)))) ($ref $null))) (= ($ref ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.seq))) 0))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.head))))))) (forall( (|Q#n$1^26.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^26.29#dt1_$0|))) (=> (and ($set_in ($ptr ^Node |Q#n$1^26.29#dt1_$0|) ($owns |#s2_$14| ($ptr ^List |#r_$23|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^26.29#dt1_$0|) Node.next)))) ($ref $null)))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^26.29#dt1_$0|) Node.next))))) (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($ptr ^Node |Q#n$1^26.29#dt1_$0|))) 1)))))) (= ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.length)) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^List |#r_$23|) List.head))))))))  :pattern ( ($inv_lab |#s2_$14| ($ptr ^List |#r_$23|) l@public))))
    (forall( (|#s2_$9| $state) (|#r_$15| Int))(!(= ($inv_lab |#s2_$9| ($ptr ^Node |#r_$15|) l@public) (and ($typed |#s2_$9| ($ptr ^Node |#r_$15|)) ($set_eq ($owns |#s2_$9| ($ptr ^Node |#r_$15|)) $set_empty)))  :pattern ( ($inv_lab |#s2_$9| ($ptr ^Node |#r_$15|) l@public))))
    (forall( (|#t_$0| $ctype) (|#p_$2| $ptr) (|S_$12| $state))(= (and (and (and (and ($closed |S_$12| |#p_$2|) (= ($owner |S_$12| |#p_$2|) $me)) (and ($is |#p_$2| |#t_$0|) ($typed |S_$12| |#p_$2|))) (not (= ($kind_of |#t_$0|) $kind_primitive))) ($is_non_primitive |#t_$0|)) (and (and (and (and ($closed |S_$12| |#p_$2|) (= ($owner |S_$12| |#p_$2|) $me)) (and ($is |#p_$2| |#t_$0|) ($typed |S_$12| |#p_$2|))) (not (= ($kind_of |#t_$0|) $kind_primitive))) ($is_non_primitive |#t_$0|))))
    (forall( (|#t_$1| $ctype) (|#p_$3| $ptr) (|S_$16| $state))(= (and ($is |#p_$3| |#t_$1|) ($typed |S_$16| |#p_$3|)) (and ($is |#p_$3| |#t_$1|) ($typed |S_$16| |#p_$3|))))
    (forall( (|#t_$2| $ctype) (|#p_$4| $ptr) (|S_$17| $state))(= (and (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) (=> (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) ($in_range_phys_ptr ($ref |#p_$4|)))) (and (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) (=> (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) ($in_range_phys_ptr ($ref |#p_$4|))))))
    (forall( (|#t_$3| $ctype) (|#p_$5| $ptr) (|S_$18| $state))(= (and (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) (=> (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) ($in_range_spec_ptr ($ref |#p_$5|)))) (and (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) (=> (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) ($in_range_spec_ptr ($ref |#p_$5|))))))
    (forall( (|#t_$4| $ctype) (|#p_$6| $ptr) (|S_$21| $state))(= (and ($is |#p_$6| |#t_$4|) ($thread_local |S_$21| |#p_$6|)) (and ($is |#p_$6| |#t_$4|) ($thread_local |S_$21| |#p_$6|))))
    (forall( (|#t_$5| $ctype) (|#b| Int))(!(= ($typ ($ptr |#t_$5| |#b|)) |#t_$5|)  :weight  0))
    (forall( (|#t_$6| $ctype) (|#b_$0| Int))(!(= ($ref ($ptr |#t_$6| |#b_$0|)) |#b_$0|)  :weight  0))
    (forall( (|#t| $ctype) (|#p| $ptr))(= ($ptr |#t| ($ref |#p|)) ($ptr |#t| ($ref |#p|))))
    (forall( (|#x| $ptr) (|#s2_$1| $state) (|#s1_$2| $state))(= (forall( (|#p_$15_$0| $ptr))(!(or (or (= |#p_$15_$0| |#x|) (and ($set_in |#p_$15_$0| ($full_extent |#x|)) (or (not ($typed |#s1_$2| |#p_$15_$0|)) (not ($typed |#s2_$1| |#p_$15_$0|))))) (= ($select.mem ($memory |#s1_$2|) |#p_$15_$0|) ($select.mem ($memory |#s2_$1|) |#p_$15_$0|)))  :pattern ( ($select.mem ($memory |#s2_$1|) |#p_$15_$0|)))) (forall( (|#p_$15| $ptr))(!(or (or (= |#p_$15| |#x|) (and ($set_in |#p_$15| ($full_extent |#x|)) (or (not ($typed |#s1_$2| |#p_$15|)) (not ($typed |#s2_$1| |#p_$15|))))) (= ($select.mem ($memory |#s1_$2|) |#p_$15|) ($select.mem ($memory |#s2_$1|) |#p_$15|)))  :pattern ( ($select.mem ($memory |#s2_$1|) |#p_$15|))))))
    (forall( (|bits_$0| Int) (|v_$11| Int))(!(and ($in_range_sbits |bits_$0| ($unchecked_sbits |bits_$0| |v_$11|)) (=> ($in_range_sbits |bits_$0| |v_$11|) (= ($unchecked_sbits |bits_$0| |v_$11|) |v_$11|)))  :pattern ( ($unchecked_sbits |bits_$0| |v_$11|))))
    (forall( (|bits_$1| Int) (|v_$12| Int))(!(= ($in_range_sbits |bits_$1| |v_$12|) (and (<= (- 0 ($_pow2 (- |bits_$1| 1))) |v_$12|) (<= |v_$12| (- ($_pow2 (- |bits_$1| 1)) 1))))  :pattern ( ($in_range_sbits |bits_$1| |v_$12|))))
    (forall( (|bits_$2| Int) (|v_$13| Int))(!(and ($in_range_ubits |bits_$2| ($unchecked_ubits |bits_$2| |v_$13|)) (=> ($in_range_ubits |bits_$2| |v_$13|) (= ($unchecked_ubits |bits_$2| |v_$13|) |v_$13|)))  :pattern ( ($unchecked_ubits |bits_$2| |v_$13|))))
    (forall( (|bits| Int) (|v_$10| Int))(!(= ($in_range_ubits |bits| |v_$10|) (and (<= 0 |v_$10|) (<= |v_$10| (- ($_pow2 |bits|) 1))))  :pattern ( ($in_range_ubits |bits| |v_$10|))))
    (forall( (|c_$1| $ptrclub) (|p_$53| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$1|) |p_$53|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$1|) |p_$53|)))
    (forall( (|c_$14| $@Map@@$ptr@To@Bool@@) (|l_$9| $@Map@@$ptr@To@Bool@@))(!(= ($ptrclub.members ($ptrclub.construct |c_$14| |l_$9|)) |c_$14|)  :weight  0))
    (forall( (|c_$15| $@Map@@$ptr@To@Bool@@) (|l_$10| $@Map@@$ptr@To@Bool@@))(!(= ($ptrclub.bound ($ptrclub.construct |c_$15| |l_$10|)) |l_$10|)  :weight  0))
    (forall( (|c_$16| $ptrclub) (|p_$171| $ptr))(!(= ($ptrclub.members ($ptrclub.addMember |p_$171| |c_$16|)) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$16|) |p_$171| true))  :weight  0))
    (forall( (|c_$17| $ptrclub) (|p_$172| $ptr))(!(= ($ptrclub.bound ($ptrclub.addMember |p_$172| |c_$17|)) ($ptrclub.bound |c_$17|))  :weight  0))
    (forall( (|c1| $ptr) (|c2| $ptr))(!(=> (and (and ($is |c1| ^^claim) ($is |c2| ^^claim)) (forall( (|S_$133| $state))(=> ($valid_claim |S_$133| |c1|) ($closed |S_$133| |c2|)))) ($claims_claim |c1| |c2|))  :pattern ( ($claims_claim |c1| |c2|))))
    (forall( (|e_$0| $ptr) (|S_$45| $ptrset))(= ($set_difference |S_$45| ($set_singleton |e_$0|)) ($set_difference |S_$45| ($set_singleton |e_$0|))))
    (forall( (|e| $ptr) (|S_$44| $ptrset))(= ($set_union |S_$44| ($set_singleton |e|)) ($set_union |S_$44| ($set_singleton |e|))))
    (forall( (|emb_$1| $ptr) (|p_$48| $ptr) (|S_$52| $state))(= (and (and (= ($ts_emb ($select.tm ($typemap |S_$52|) |p_$48|)) |emb_$1|) (not ($ts_is_volatile ($select.tm ($typemap |S_$52|) |p_$48|)))) ($typed |S_$52| |p_$48|)) (and (and (= ($ts_emb ($select.tm ($typemap |S_$52|) |p_$48|)) |emb_$1|) (not ($ts_is_volatile ($select.tm ($typemap |S_$52|) |p_$48|)))) ($typed |S_$52| |p_$48|))))
    (forall( (|emb| $ptr) (|sz_$3| Int) (|T_$2| $ctype) (|p_$43| $ptr) (|S_$48| $state))(= (and ($is_array_vol_or_nonvol |S_$48| |p_$43| |T_$2| |sz_$3| false) (forall( (|i_$3_$1| Int))(!(=> (and (<= 0 |i_$3_$1|) (< |i_$3_$1| |sz_$3|)) (= ($ts_emb ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3_$1| |T_$2|))) |emb|))  :pattern ( ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3_$1| |T_$2|)))))) (and ($is_array_vol_or_nonvol |S_$48| |p_$43| |T_$2| |sz_$3| false) (forall( (|i_$3| Int))(!(=> (and (<= 0 |i_$3|) (< |i_$3| |sz_$3|)) (= ($ts_emb ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3| |T_$2|))) |emb|))  :pattern ( ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3| |T_$2|))))))))
    (forall( (|f_$1| $field) (|p_$25| $ptr) (|S_$26| $state))(= ($fetch_from_vv ($read_vol_version |S_$26| |p_$25|) ($dot |p_$25| |f_$1|)) ($fetch_from_vv ($read_vol_version |S_$26| |p_$25|) ($dot |p_$25| |f_$1|))))
    (forall( (|f_$11| $pure_function))(= (< ($pure_post_level |f_$11|) $current_pure_post_level) (< ($pure_post_level |f_$11|) $current_pure_post_level)))
    (forall( (|f_$15| $field) (|t_$18| $ctype))(!(= ($select.mem ($memory ($vs_state $struct_zero)) ($dot ($ptr |t_$18| ($vs_base_ref $struct_zero)) |f_$15|)) 0)  :pattern ( ($select.mem ($memory ($vs_state $struct_zero)) ($dot ($ptr |t_$18| ($vs_base_ref $struct_zero)) |f_$15|)))))
    (forall( (|f_$17| $field))(= ($rec_fetch $rec_zero |f_$17|) 0))
    (forall( (|f_$4| $field) (|u_$0| $ptr) (|S_$42| $state))(= (= ($ts_active_option ($select.tm ($typemap |S_$42|) |u_$0|)) |f_$4|) (= ($ts_active_option ($select.tm ($typemap |S_$42|) |u_$0|)) |f_$4|)))
    (forall( (|f_$9| $pure_function))(= (< ($frame_level |f_$9|) $current_frame_level) (< ($frame_level |f_$9|) $current_frame_level)))
    (forall( (|fd_$0| $flowdata) (|l_$6| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.meta ($store.flow.meta |fd_$0| |l_$6|)) |l_$6|)  :weight  0))
    (forall( (|fd_$1| $flowdata) (|l_$7| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.label ($store.flow.meta |fd_$1| |l_$7|)) ($select.flow.label |fd_$1|))  :weight  0))
    (forall( (|fd_$2| $flowdata) (|l_$8| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.meta ($store.flow.label |fd_$2| |l_$8|)) ($select.flow.meta |fd_$2|))  :weight  0))
    (forall( (|fd| $flowdata) (|l_$5| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.label ($store.flow.label |fd| |l_$5|)) |l_$5|)  :weight  0))
    (forall( (|fld| $field) (|off| Int))(!(and (and (not ($is_base_field ($array_path |fld| |off|))) (= ($array_path_1 ($array_path |fld| |off|)) |fld|)) (= ($array_path_2 ($array_path |fld| |off|)) |off|))  :weight  0 :pattern ( ($array_path |fld| |off|))))
    (forall( (|from_$1| Int) (|to_$1| Int) (|xs_$0| Int))(!(=> (and (and (<= 0 |from_$1|) (< |from_$1| |to_$1|)) (<= |to_$1| |xs_$0|)) (= ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0) 0))  :pattern ( ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0))))
    (forall( (|from_$10| Int) (|to_$10| Int) (|val_$5| Int) (|xs_$9| Int))(!(=> (and (and (and (<= 0 |from_$10|) (< |from_$10| |to_$10|)) (<= |to_$10| |xs_$9|)) (<= 0 |val_$5|)) (= ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|) (mod (div |val_$5| ($_pow2 |from_$10|)) ($_pow2 (- |to_$10| |from_$10|)))))  :pattern ( ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|))))
    (forall( (|from_$11| Int) (|to_$11| Int) (|val_$6| Int) (|xs_$10| Int))(!(=> (and (and (and (and (<= 0 |from_$11|) (< |from_$11| |to_$11|)) (<= |to_$11| |xs_$10|)) (<= 0 |val_$6|)) (< (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|))) ($_pow2 (- (- |to_$11| |from_$11|) 1)))) (= ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|) (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|)))))  :pattern ( ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|))))
    (forall( (|from_$12| Int) (|to_$12| Int) (|val_$7| Int) (|xs_$11| Int))(!(=> (and (and (and (and (<= 0 |from_$12|) (< |from_$12| |to_$12|)) (<= |to_$12| |xs_$11|)) (<= 0 |val_$7|)) (>= (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))) ($_pow2 (- (- |to_$12| |from_$12|) 1)))) (= ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|) (- ($_pow2 (- (- |to_$12| |from_$12|) 1)) (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))))))  :pattern ( ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|))))
    (forall( (|from_$2| Int) (|to_$2| Int) (|val_$1| Int) (|x_$34| Int) (|xs_$1| Int))(!(=> (and (and (<= 0 |from_$2|) (< |from_$2| |to_$2|)) (<= |to_$2| |xs_$1|)) (=> (and (<= (- 0 ($_pow2 (- (- |to_$2| |from_$2|) 1))) |val_$1|) (< |val_$1| ($_pow2 (- (- |to_$2| |from_$2|) 1)))) (= ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|) |val_$1|)))  :pattern ( ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|))))
    (forall( (|from_$3| Int) (|to_$3| Int) (|val_$2| Int) (|x_$35| Int) (|xs_$2| Int))(!(=> (and (and (<= 0 |from_$3|) (< |from_$3| |to_$3|)) (<= |to_$3| |xs_$2|)) (=> (and (<= 0 |val_$2|) (< |val_$2| ($_pow2 (- |to_$3| |from_$3|)))) (= ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|) |val_$2|)))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|))))
    (forall( (|from_$4| Int) (|to_$4| Int) (|x_$36| Int) (|xs_$3| Int))(!(=> (and (and (<= 0 |from_$4|) (< |from_$4| |to_$4|)) (<= |to_$4| |xs_$3|)) (and (<= (- 0 ($_pow2 (- (- |to_$4| |from_$4|) 1))) ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|)) (<= ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|) (- ($_pow2 (- (- |to_$4| |from_$4|) 1)) 1))))  :pattern ( ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|))))
    (forall( (|from_$5| Int) (|to_$5| Int) (|x_$37| Int) (|xs_$4| Int))(!(=> (and (and (<= 0 |from_$5|) (< |from_$5| |to_$5|)) (<= |to_$5| |xs_$4|)) (and (<= 0 ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|)) (<= ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|) (- ($_pow2 (- |to_$5| |from_$5|)) 1))))  :pattern ( ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|))))
    (forall( (|from_$6| Int) (|to_$6| Int) (|val_$3| Int) (|x_$38| Int) (|xs_$5| Int) (|from2| Int) (|to2| Int))(!(=> (and (and (<= 0 |from_$6|) (< |from_$6| |to_$6|)) (<= |to_$6| |xs_$5|)) (=> (and (and (<= 0 |from2|) (< |from2| |to2|)) (<= |to2| |xs_$5|)) (=> (or (<= |to2| |from_$6|) (<= |to_$6| |from2|)) (= ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|) ($bv_extract_signed |x_$38| |xs_$5| |from2| |to2|)))))  :pattern ( ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|))))
    (forall( (|from_$7| Int) (|to_$7| Int) (|val_$4| Int) (|x_$39| Int) (|xs_$6| Int) (|from2_$0| Int) (|to2_$0| Int))(!(=> (and (and (<= 0 |from_$7|) (< |from_$7| |to_$7|)) (<= |to_$7| |xs_$6|)) (=> (and (and (<= 0 |from2_$0|) (< |from2_$0| |to2_$0|)) (<= |to2_$0| |xs_$6|)) (=> (or (<= |to2_$0| |from_$7|) (<= |to_$7| |from2_$0|)) (= ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|) ($bv_extract_unsigned |x_$39| |xs_$6| |from2_$0| |to2_$0|)))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|))))
    (forall( (|from_$8| Int) (|to_$8| Int) (|xs_$7| Int))(!(=> (and (and (<= 0 |from_$8|) (< |from_$8| |to_$8|)) (<= |to_$8| |xs_$7|)) (= ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|) 0))  :pattern ( ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|))))
    (forall( (|from_$9| Int) (|to_$9| Int) (|xs_$8| Int))(!(=> (and (and (<= 0 |from_$9|) (< |from_$9| |to_$9|)) (<= |to_$9| |xs_$8|)) (= ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|) 0))  :pattern ( ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|))))
    (forall( (|i_$25| Int) (|j_$0| Int))(!(=> (and (<= 0 |i_$25|) (< 0 |j_$0|)) (<= (div |i_$25| |j_$0|) |i_$25|))  :pattern ( (div |i_$25| |j_$0|))))
    (forall( (|i_$26| Int) (|j_$1| Int))(!(=> (and (> |i_$26| 0) (> |j_$1| 0)) (and (< (- |i_$26| |j_$1|) (* (div |i_$26| |j_$1|) |j_$1|)) (<= (* (div |i_$26| |j_$1|) |j_$1|) |i_$26|)))  :pattern ( (div |i_$26| |j_$1|))))
    (forall( (|i_$27| Int))(!(=> (not (= |i_$27| 0)) (= (div |i_$27| |i_$27|) 1))  :pattern ( (div |i_$27| |i_$27|))))
    (forall( (|i_$28| Int))(!(=> (not (= |i_$28| 0)) (= (div 0 |i_$28|) 0))  :pattern ( (div 0 |i_$28|))))
    (forall( (|id_$0| Int) (|length| Int))(!($is ($get_string_literal |id_$0| |length|) ^^u1)  :pattern ( ($get_string_literal |id_$0| |length|))))
    (forall( (|id_$1| Int) (|length_$0| Int) (|S_$129| $state))(!(=> ($good_state |S_$129|) (and ($typed |S_$129| ($get_string_literal |id_$1| |length_$0|)) (forall( (|i_$1_$1| Int))(!(=> (and (<= 0 |i_$1_$1|) (< |i_$1_$1| |length_$0|)) (and ($is ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1) ^^u1) ($thread_local |S_$129| ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1))))  :pattern ( ($select.sm ($statusmap |S_$129|) ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1))) :pattern ( ($select.tm ($typemap |S_$129|) ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1)))))))  :pattern ( ($typed |S_$129| ($get_string_literal |id_$1| |length_$0|))) :pattern ( ($is_array |S_$129| ($get_string_literal |id_$1| |length_$0|) ^^u1 |length_$0|))))
    (forall( (|id| $token) (|S_$80| $state))(!(=> ($good_state_ext |id| |S_$80|) ($good_state |S_$80|))  :pattern ( ($good_state_ext |id| |S_$80|))))
    (forall( (|isvol| Bool) (|f_$5| $field) (|emb_$0| $ptr) (|sz_$4| Int) (|T_$3| $ctype) (|p_$44| $ptr) (|S_$49| $state))(= (and ($is_array_vol_or_nonvol |S_$49| |p_$44| |T_$3| |sz_$4| |isvol|) (forall( (|i_$4_$1| Int))(!(=> (and (<= 0 |i_$4_$1|) (< |i_$4_$1| |sz_$4|)) (and (= ($ts_emb ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4_$1| |T_$3|))) |emb_$0|) (= ($ts_path ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4_$1| |T_$3|))) ($array_path |f_$5| |i_$4_$1|))))  :pattern ( ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4_$1| |T_$3|))) :pattern ( ($select.mem ($memory |S_$49|) ($idx |p_$44| |i_$4_$1| |T_$3|)))))) (and ($is_array_vol_or_nonvol |S_$49| |p_$44| |T_$3| |sz_$4| |isvol|) (forall( (|i_$4| Int))(!(=> (and (<= 0 |i_$4|) (< |i_$4| |sz_$4|)) (and (= ($ts_emb ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))) |emb_$0|) (= ($ts_path ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))) ($array_path |f_$5| |i_$4|))))  :pattern ( ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))) :pattern ( ($select.mem ($memory |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))))))))
    (forall( (|isvolatile| Bool) (|tp| $ctype) (|f_$0| $field) (|p_$8| $ptr) (|S_$2| $state))(= (and (and (and (and ($is ($dot |p_$8| |f_$0|) |tp|) ($typed |S_$2| ($dot |p_$8| |f_$0|))) (= ($ts_emb ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |p_$8|)) (= ($ts_path ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |f_$0|)) (= ($ts_is_volatile ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |isvolatile|)) (and (and (and (and ($is ($dot |p_$8| |f_$0|) |tp|) ($typed |S_$2| ($dot |p_$8| |f_$0|))) (= ($ts_emb ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |p_$8|)) (= ($ts_path ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |f_$0|)) (= ($ts_is_volatile ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |isvolatile|))))
    (forall( (|l2_$0| Bool) (|l1_$0| Bool))(= (and |l1_$0| |l2_$0|) (and |l1_$0| |l2_$0|)))
    (forall( (|l2_$1| Bool) (|l1_$1| Bool))(= (or |l1_$1| |l2_$1|) (or |l1_$1| |l2_$1|)))
    (forall( (|l2_$2| $@Map@@$ptr@To@Bool@@) (|l1_$2| $@Map@@$ptr@To@Bool@@))(= (forall( (|p_$52_$0| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$2| |p_$52_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$2| |p_$52_$0|))) (forall( (|p_$52| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$2| |p_$52|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$2| |p_$52|)))))
    (forall( (|l2| Bool) (|l1| Bool))(= (=> |l1| |l2|) (=> |l1| |l2|)))
    (forall( (|M_$0| $memory_t) (|p_$55| $ptr) (|q_$2| $ptr) (|v_$1| Int))(!(or (= |p_$55| |q_$2|) (= ($select.mem ($store.mem |M_$0| |p_$55| |v_$1|) |q_$2|) ($select.mem |M_$0| |q_$2|)))  :weight  0))
    (forall( (|M_$1| $memory_t) (|p_$56| $ptr) (|q_$3| $ptr) (|sz_$12| Int) (|v_$2| Int))(!(or (and (and (= ($typ |p_$56|) ($typ |q_$3|)) (<= ($ref |q_$3|) ($ref |p_$56|))) (< ($ref |p_$56|) ($ref ($idx |q_$3| |sz_$12| ($typ |q_$3|))))) (= ($select_range.mem ($store.mem |M_$1| |p_$56| |v_$2|) |q_$3| |sz_$12|) ($select_range.mem |M_$1| |q_$3| |sz_$12|)))  :weight  0))
    (forall( (|M_$10| $memory_t) (|p_$173| $ptr) (|q_$25| $ptr) (|v_$16| Int))(!(= ($select.flow.data ($store.mem |M_$10| |q_$25| |v_$16|) |p_$173|) ($select.flow.data |M_$10| |p_$173|))  :weight  0))
    (forall( (|M_$11| $memory_t) (|p_$174| $ptr) (|q_$26| $ptr) (|fd_$5| $flowdata))(!(= ($select.mem ($store.flow.data |M_$11| |q_$26| |fd_$5|) |p_$174|) ($select.mem |M_$11| |p_$174|))  :weight  0))
    (forall( (|M_$12| $map_t..^^i4.^^bool) (|p_$175| Int) (|v_$17| Bool))(=> ($in_range_t ^^i4 |p_$175|) (= ($select.$map_t..^^i4.^^bool ($store.$map_t..^^i4.^^bool |M_$12| |p_$175| |v_$17|) |p_$175|) |v_$17|)))
    (forall( (|M_$13| $map_t..^^i4.^^bool) (|p_$176| Int) (|v_$18| Bool) (|q_$27| Int))(=> (not (= |p_$176| |q_$27|)) (= ($select.$map_t..^^i4.^^bool ($store.$map_t..^^i4.^^bool |M_$13| |q_$27| |v_$18|) |p_$176|) ($select.$map_t..^^i4.^^bool |M_$13| |p_$176|))))
    (forall( (|M_$14| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|p_$179| Int) (|v_$19| $map_t..^^i4.^^bool))(= ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($store.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M_$14| |p_$179| |v_$19|) |p_$179|) |v_$19|))
    (forall( (|M_$15| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|p_$180| Int) (|v_$20| $map_t..^^i4.^^bool) (|q_$28| Int))(=> (not (= |p_$180| |q_$28|)) (= ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($store.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M_$15| |q_$28| |v_$20|) |p_$180|) ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M_$15| |p_$180|))))
    (forall( (|M_$16| $map_t..$ptr_to..^Node.^^u4) (|p_$183| Int) (|v_$21| Int))(= ($select.$map_t..$ptr_to..^Node.^^u4 ($store.$map_t..$ptr_to..^Node.^^u4 |M_$16| |p_$183| |v_$21|) |p_$183|) ($unchecked ^^u4 |v_$21|)))
    (forall( (|M_$17| $map_t..$ptr_to..^Node.^^u4) (|p_$184| Int) (|v_$22| Int) (|q_$29| Int))(=> (not (= |p_$184| |q_$29|)) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($store.$map_t..$ptr_to..^Node.^^u4 |M_$17| |q_$29| |v_$22|) |p_$184|) ($select.$map_t..$ptr_to..^Node.^^u4 |M_$17| |p_$184|))))
    (forall( (|M_$18| $map_t..$ptr_to..^Node.^^u4) (|p_$187| Int))($in_range_t ^^u4 ($select.$map_t..$ptr_to..^Node.^^u4 |M_$18| |p_$187|)))
    (forall( (|M_$19| $map_t..^^u4.$ptr_to..^Node) (|p_$188| Int) (|v_$23| Int))(=> ($in_range_t ^^u4 |p_$188|) (= ($select.$map_t..^^u4.$ptr_to..^Node ($store.$map_t..^^u4.$ptr_to..^Node |M_$19| |p_$188| |v_$23|) |p_$188|) |v_$23|)))
    (forall( (|M_$2| $typemap_t) (|p_$57| $ptr) (|v_$3| $type_state))(!(= ($select.tm ($store.tm |M_$2| |p_$57| |v_$3|) |p_$57|) |v_$3|)  :weight  0))
    (forall( (|M_$20| $map_t..^^u4.$ptr_to..^Node) (|p_$189| Int) (|v_$24| Int) (|q_$30| Int))(=> (not (= |p_$189| |q_$30|)) (= ($select.$map_t..^^u4.$ptr_to..^Node ($store.$map_t..^^u4.$ptr_to..^Node |M_$20| |q_$30| |v_$24|) |p_$189|) ($select.$map_t..^^u4.$ptr_to..^Node |M_$20| |p_$189|))))
    (forall( (|M_$21| $map_t..^^u4.$ptr_to..^Node) (|p_$192| Int))($in_range_phys_ptr ($select.$map_t..^^u4.$ptr_to..^Node |M_$21| |p_$192|)))
    (forall( (|M_$3| $typemap_t) (|p_$58| $ptr) (|q_$4| $ptr) (|v_$4| $type_state))(!(or (= |p_$58| |q_$4|) (= ($select.tm ($store.tm |M_$3| |p_$58| |v_$4|) |q_$4|) ($select.tm |M_$3| |q_$4|)))  :weight  0))
    (forall( (|M_$4| $statusmap_t) (|p_$59| $ptr) (|v_$5| $status))(!(= ($select.sm ($store.sm |M_$4| |p_$59| |v_$5|) |p_$59|) |v_$5|)  :weight  0))
    (forall( (|M_$5| $statusmap_t) (|p_$60| $ptr) (|q_$5| $ptr) (|v_$6| $status))(!(or (= |p_$60| |q_$5|) (= ($select.sm ($store.sm |M_$5| |p_$60| |v_$6|) |q_$5|) ($select.sm |M_$5| |q_$5|)))  :weight  0))
    (forall( (|M_$6| $memory_t) (|p_$163| $ptr) (|q_$22| $ptr) (|fd_$3| $flowdata))(!(=> ($set_in |q_$22| ($full_extent |p_$163|)) (= ($select.flow.data ($store.flow.data |M_$6| |p_$163| |fd_$3|) |q_$22|) |fd_$3|))  :weight  0))
    (forall( (|M_$7| $memory_t) (|p_$164| $ptr) (|q_$23| $ptr) (|fd_$4| $flowdata))(!(or ($set_in |q_$23| ($full_extent |p_$164|)) (= ($select.flow.data ($store.flow.data |M_$7| |p_$164| |fd_$4|) |q_$23|) ($select.flow.data |M_$7| |q_$23|)))  :weight  0))
    (forall( (|M_$8| $map_t..$ptr_to..^^void.^^bool) (|p_$165| $ptr) (|v_$14| Bool))(!(= ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$8| |p_$165| |v_$14|) |p_$165|) |v_$14|)  :weight  0))
    (forall( (|M_$9| $map_t..$ptr_to..^^void.^^bool) (|p_$166| $ptr) (|v_$15| Bool) (|q_$24| $ptr))(!(=> (not (= |p_$166| |q_$24|)) (= ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$9| |q_$24| |v_$15|) |p_$166|) ($select.$map_t..$ptr_to..^^void.^^bool |M_$9| |p_$166|)))  :weight  0))
    (forall( (|M| $memory_t) (|p_$54| $ptr) (|v_$0| Int))(!(= ($select.mem ($store.mem |M| |p_$54| |v_$0|) |p_$54|) |v_$0|)  :weight  0))
    (forall( (|M1_$10| $map_t..^^u4.$ptr_to..^Node) (|M2_$10| $map_t..^^u4.$ptr_to..^Node))(!(=> (forall( (|p_$190| Int))(=> ($in_range_t ^^u4 |p_$190|) (= ($select.$map_t..^^u4.$ptr_to..^Node |M1_$10| |p_$190|) ($select.$map_t..^^u4.$ptr_to..^Node |M2_$10| |p_$190|)))) ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$10| |M2_$10|))  :pattern ( ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$10| |M2_$10|))))
    (forall( (|M1_$11| $map_t..^^u4.$ptr_to..^Node) (|M2_$11| $map_t..^^u4.$ptr_to..^Node))(!(=> ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$11| |M2_$11|) (= |M1_$11| |M2_$11|))  :pattern ( ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$11| |M2_$11|))))
    (forall( (|M1_$2| $map_t..$ptr_to..^^void.^^bool) (|M2_$2| $map_t..$ptr_to..^^void.^^bool))(!(=> (forall( (|p_$167| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool |M1_$2| |p_$167|) ($select.$map_t..$ptr_to..^^void.^^bool |M2_$2| |p_$167|))  :weight  0)) ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|))))
    (forall( (|M1_$3| $map_t..$ptr_to..^^void.^^bool) (|M2_$3| $map_t..$ptr_to..^^void.^^bool))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|) (= |M1_$3| |M2_$3|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|))))
    (forall( (|M1_$4| $map_t..^^i4.^^bool) (|M2_$4| $map_t..^^i4.^^bool))(!(=> (forall( (|p_$177| Int))(=> ($in_range_t ^^i4 |p_$177|) (= ($select.$map_t..^^i4.^^bool |M1_$4| |p_$177|) ($select.$map_t..^^i4.^^bool |M2_$4| |p_$177|)))) ($eq.$map_t..^^i4.^^bool |M1_$4| |M2_$4|))  :pattern ( ($eq.$map_t..^^i4.^^bool |M1_$4| |M2_$4|))))
    (forall( (|M1_$5| $map_t..^^i4.^^bool) (|M2_$5| $map_t..^^i4.^^bool))(!(=> ($eq.$map_t..^^i4.^^bool |M1_$5| |M2_$5|) (= |M1_$5| |M2_$5|))  :pattern ( ($eq.$map_t..^^i4.^^bool |M1_$5| |M2_$5|))))
    (forall( (|M1_$6| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|M2_$6| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool))(!(=> (forall( (|p_$181| Int))($eq.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$6| |p_$181|) ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M2_$6| |p_$181|))) ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$6| |M2_$6|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$6| |M2_$6|))))
    (forall( (|M1_$7| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|M2_$7| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool))(!(=> ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$7| |M2_$7|) (= |M1_$7| |M2_$7|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$7| |M2_$7|))))
    (forall( (|M1_$8| $map_t..$ptr_to..^Node.^^u4) (|M2_$8| $map_t..$ptr_to..^Node.^^u4))(!(=> (forall( (|p_$185| Int))(= ($unchecked ^^u4 ($select.$map_t..$ptr_to..^Node.^^u4 |M1_$8| |p_$185|)) ($unchecked ^^u4 ($select.$map_t..$ptr_to..^Node.^^u4 |M2_$8| |p_$185|)))) ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$8| |M2_$8|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$8| |M2_$8|))))
    (forall( (|M1_$9| $map_t..$ptr_to..^Node.^^u4) (|M2_$9| $map_t..$ptr_to..^Node.^^u4))(!(=> ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$9| |M2_$9|) (= |M1_$9| |M2_$9|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$9| |M2_$9|))))
    (forall( (|M2_$0| $state) (|M1_$0| $state))(= (and (and (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) (forall( (|p_$32_$1| $ptr))(!(<= ($timestamp |M1_$0| |p_$32_$1|) ($timestamp |M2_$0| |p_$32_$1|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32_$1|))))) ($call_transition |M1_$0| |M2_$0|)) (and (and (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) (forall( (|p_$32| $ptr))(!(<= ($timestamp |M1_$0| |p_$32|) ($timestamp |M2_$0| |p_$32|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32|))))) ($call_transition |M1_$0| |M2_$0|))))
    (forall( (|M2_$1| $state) (|M1_$1| $state))(= (and (and (< ($current_timestamp |M1_$1|) ($current_timestamp |M2_$1|)) (forall( (|p_$33_$3| $ptr))(!(<= ($timestamp |M1_$1| |p_$33_$3|) ($timestamp |M2_$1| |p_$33_$3|))  :weight  0 :pattern ( ($timestamp |M2_$1| |p_$33_$3|))))) ($call_transition |M1_$1| |M2_$1|)) (and (and (< ($current_timestamp |M1_$1|) ($current_timestamp |M2_$1|)) (forall( (|p_$33| $ptr))(!(<= ($timestamp |M1_$1| |p_$33|) ($timestamp |M2_$1| |p_$33|))  :weight  0 :pattern ( ($timestamp |M2_$1| |p_$33|))))) ($call_transition |M1_$1| |M2_$1|))))
    (forall( (|max| Int) (|val| Int) (|min| Int))(= (and (<= |min| |val|) (<= |val| |max|)) (and (<= |min| |val|) (<= |val| |max|))))
    (forall( (|no| Int) (|t_$87| $ctype))(!(= ($get_fnptr |no| |t_$87|) ($ptr |t_$87| ($get_fnptr_ref |no|)))  :pattern ( ($get_fnptr |no| |t_$87|))))
    (forall( (|owner| $ptr) (|p_$18| $ptr) (|S_$11| $state))(= (and (= ($owner |S_$11| |p_$18|) |owner|) ($closed |S_$11| |p_$18|)) (and (= ($owner |S_$11| |p_$18|) |owner|) ($closed |S_$11| |p_$18|))))
    (forall( (|owns| $ptrset) (|o| $ptr) (|S_$35| $state))(= ($set_difference |owns| ($owns |S_$35| |o|)) ($set_difference |owns| ($owns |S_$35| |o|))))
    (forall( (|p_$0| $ptr))(= (= ($kind_of ($typ |p_$0|)) $kind_composite) (= ($kind_of ($typ |p_$0|)) $kind_composite)))
    (forall( (|p_$1| $ptr))(= ($is_non_primitive ($typ |p_$1|)) ($is_non_primitive ($typ |p_$1|))))
    (forall( (|p_$10| $ptr) (|S_$4| $state))(= ($ts_is_volatile ($select.tm ($typemap |S_$4|) |p_$10|)) ($ts_is_volatile ($select.tm ($typemap |S_$4|) |p_$10|))))
    (forall( (|p_$101| $ptr) (|S1_$9| $state) (|S2_$7| $state) (|q_$14| $ptr))(!($instantiate_bool ($set_in |q_$14| ($domain |S2_$7| |p_$101|)))  :weight  0 :pattern ( ($set_in |q_$14| ($domain |S1_$9| |p_$101|)) ($call_transition |S1_$9| |S2_$7|))))
    (forall( (|p_$102| $ptr) (|S1_$10| $state) (|S2_$8| $state) (|q_$15| $ptr))(!($instantiate_bool ($set_in |q_$15| ($ver_domain ($read_version |S2_$8| |p_$102|))))  :weight  0 :pattern ( ($set_in |q_$15| ($ver_domain ($read_version |S1_$10| |p_$102|))) ($call_transition |S1_$10| |S2_$8|))))
    (forall( (|p_$103| $ptr) (|c_$2| $ptr))(!(=> (forall( (|s_$8| $state))(!(=> ($valid_claim |s_$8| |c_$2|) ($closed |s_$8| |p_$103|))  :pattern ( ($dont_instantiate_state |s_$8|)))) ($in_claim_domain |p_$103| |c_$2|))  :pattern ( ($in_claim_domain |p_$103| |c_$2|))))
    (forall( (|p_$11| $ptr) (|S_$5| $state))(= (= ($ts_emb ($select.tm ($typemap |S_$5|) |p_$11|)) ($ptr ^^root_emb ($ref |p_$11|))) (= ($ts_emb ($select.tm ($typemap |S_$5|) |p_$11|)) ($ptr ^^root_emb ($ref |p_$11|)))))
    (forall( (|p_$113| $ptr))(!(= ($set_cardinality ($set_singleton |p_$113|)) 1)  :weight  0))
    (forall( (|p_$114| $ptr) (|s1_$5| $ptrset) (|s2_$5| $ptrset))(!(=> (and ($set_disjoint |s1_$5| |s2_$5|) ($set_in |p_$114| |s1_$5|)) (= ($id_set_disjoint |p_$114| |s1_$5| |s2_$5|) 1))  :weight  0 :pattern ( ($set_disjoint |s1_$5| |s2_$5|) ($set_in |p_$114| |s1_$5|))))
    (forall( (|p_$115| $ptr) (|s1_$6| $ptrset) (|s2_$6| $ptrset))(!(=> (and ($set_disjoint |s1_$6| |s2_$6|) ($set_in |p_$115| |s2_$6|)) (= ($id_set_disjoint |p_$115| |s1_$6| |s2_$6|) 2))  :weight  0 :pattern ( ($set_disjoint |s1_$6| |s2_$6|) ($set_in |p_$115| |s2_$6|))))
    (forall( (|p_$117| $ptr) (|S1_$12| $state) (|p1_$1| $ptr))(!(=> ($set_in |p_$117| ($owns |S1_$12| |p1_$1|)) ($in_some_owns |p_$117|))  :weight  0 :pattern ( ($set_in |p_$117| ($owns |S1_$12| |p1_$1|)))))
    (forall( (|p_$118| $ptr) (|S1_$13| $state) (|p1_$2| $ptr))(!(= ($set_in |p_$118| ($owns |S1_$13| |p1_$2|)) ($set_in2 |p_$118| ($owns |S1_$13| |p1_$2|)))  :weight  0 :pattern ( ($set_in2 |p_$118| ($owns |S1_$13| |p1_$2|)) ($in_some_owns |p_$118|))))
    (forall( (|p_$119| $ptr) (|s_$9| $ptrset))(!(= ($set_in |p_$119| |s_$9|) ($set_in2 |p_$119| |s_$9|))  :weight  0 :pattern ( ($set_in |p_$119| |s_$9|))))
    (forall( (|p_$12| $ptr) (|M2| $state) (|M1| $state))(= (and (< ($current_timestamp |M1|) ($timestamp |M2| |p_$12|)) (<= ($timestamp |M2| |p_$12|) ($current_timestamp |M2|))) (and (< ($current_timestamp |M1|) ($timestamp |M2| |p_$12|)) (<= ($timestamp |M2| |p_$12|) ($current_timestamp |M2|)))))
    (forall( (|p_$121| $ptr) (|s_$11| $ptrset))(!(= ($set_in |p_$121| |s_$11|) ($set_in0 |p_$121| |s_$11|))  :weight  0 :pattern ( ($set_in0 |p_$121| |s_$11|))))
    (forall( (|p_$123| $ptr) (|i_$19| Int) (|j| Int) (|T_$23| $ctype))(!(=> (and (not (= |i_$19| 0)) (not (= |j| 0))) (= ($idx ($idx |p_$123| |i_$19| |T_$23|) |j| |T_$23|) ($idx |p_$123| (+ |i_$19| |j|) |T_$23|)))  :pattern ( ($idx ($idx |p_$123| |i_$19| |T_$23|) |j| |T_$23|))))
    (forall( (|p_$126| $ptr) (|#r_$9| Int) (|T_$26| $ctype) (|sz_$25| Int))(!(= ($set_in |p_$126| ($full_extent ($ptr ($array |T_$26| |sz_$25|) |#r_$9|))) (or (= |p_$126| ($ptr ($array |T_$26| |sz_$25|) |#r_$9|)) (and (and (<= 0 ($index_within |p_$126| ($ptr |T_$26| |#r_$9|))) (<= ($index_within |p_$126| ($ptr |T_$26| |#r_$9|)) (- |sz_$25| 1))) ($set_in |p_$126| ($full_extent ($idx ($ptr |T_$26| |#r_$9|) ($index_within |p_$126| ($ptr |T_$26| |#r_$9|)) |T_$26|))))))  :pattern ( ($set_in |p_$126| ($full_extent ($ptr ($array |T_$26| |sz_$25|) |#r_$9|))))))
    (forall( (|p_$128| $ptr) (|#r_$11| Int) (|T_$28| $ctype) (|sz_$27| Int))(!(=> ($is_primitive |T_$28|) (= ($set_in |p_$128| ($span ($ptr ($array |T_$28| |sz_$27|) |#r_$11|))) (and (and (<= 0 ($index_within |p_$128| ($ptr |T_$28| |#r_$11|))) (<= ($index_within |p_$128| ($ptr |T_$28| |#r_$11|)) (- |sz_$27| 1))) (= |p_$128| ($idx ($ptr |T_$28| |#r_$11|) ($index_within |p_$128| ($ptr |T_$28| |#r_$11|)) |T_$28|)))))  :pattern ( ($set_in |p_$128| ($span ($ptr ($array |T_$28| |sz_$27|) |#r_$11|))) ($is_primitive |T_$28|))))
    (forall( (|p_$129| $ptr) (|T_$30| $ctype) (|sz_$29| Int) (|elem| $ptr))(!(= ($set_in |elem| ($array_members |p_$129| |T_$30| |sz_$29|)) (and (and (<= 0 ($index_within |elem| |p_$129|)) (<= ($index_within |elem| |p_$129|) (- |sz_$29| 1))) (= |elem| ($idx |p_$129| ($index_within |elem| |p_$129|) |T_$30|))))  :pattern ( ($set_in |elem| ($array_members |p_$129| |T_$30| |sz_$29|)))))
    (forall( (|p_$13| $ptr) (|begin_time| Int) (|S_$6| $state))(= (and (or ($in_writes_at |begin_time| |p_$13|) (>= ($timestamp |S_$6| |p_$13|) |begin_time|)) ($mutable |S_$6| |p_$13|)) (and (or ($in_writes_at |begin_time| |p_$13|) (>= ($timestamp |S_$6| |p_$13|) |begin_time|)) ($mutable |S_$6| |p_$13|))))
    (forall( (|p_$132| $ptr) (|T_$33| $ctype) (|sz_$32| Int) (|idx| Int) (|S_$123| $ptrset))(!(=> ($set_disjoint ($array_range_no_state |p_$132| |T_$33| |sz_$32|) |S_$123|) (=> (and (<= 0 |idx|) (< |idx| |sz_$32|)) (= ($id_set_disjoint ($idx |p_$132| |idx| |T_$33|) ($array_range_no_state |p_$132| |T_$33| |sz_$32|) |S_$123|) 1)))  :pattern ( ($idx |p_$132| |idx| |T_$33|) ($set_disjoint ($array_range_no_state |p_$132| |T_$33| |sz_$32|) |S_$123|))))
    (forall( (|p_$133| $ptr) (|T_$34| $ctype) (|sz_$33| Int) (|idx_$0| Int) (|S_$124| $ptrset))(!(=> ($set_disjoint |S_$124| ($array_range_no_state |p_$133| |T_$34| |sz_$33|)) (=> (and (<= 0 |idx_$0|) (< |idx_$0| |sz_$33|)) (= ($id_set_disjoint ($idx |p_$133| |idx_$0| |T_$34|) |S_$124| ($array_range_no_state |p_$133| |T_$34| |sz_$33|)) 2)))  :pattern ( ($idx |p_$133| |idx_$0| |T_$34|) ($set_disjoint |S_$124| ($array_range_no_state |p_$133| |T_$34| |sz_$33|)))))
    (forall( (|p_$134| $ptr) (|#r_$14| Int) (|T_$35| $ctype) (|sz_$34| Int))(!(= ($set_in |p_$134| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|)) (and (not (= |#r_$14| 0)) (and (and (<= 0 ($index_within |p_$134| ($ptr |T_$35| |#r_$14|))) (<= ($index_within |p_$134| ($ptr |T_$35| |#r_$14|)) (- |sz_$34| 1))) ($set_in |p_$134| ($full_extent ($idx ($ptr |T_$35| |#r_$14|) ($index_within |p_$134| ($ptr |T_$35| |#r_$14|)) |T_$35|))))))  :pattern ( ($set_in |p_$134| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|)))))
    (forall( (|p_$136| $ptr) (|k| Int))(!(and (= ($index_within ($idx |p_$136| |k| ($typ |p_$136|)) |p_$136|) |k|) ($simple_index ($idx |p_$136| |k| ($typ |p_$136|)) |p_$136|))  :pattern ( ($idx |p_$136| |k| ($typ |p_$136|)))))
    (forall( (|p_$137| $ptr) (|q_$19| $ptr) (|f_$30| $field))(!(=> ($simple_index |p_$137| |q_$19|) (and ($simple_index ($dot |p_$137| |f_$30|) |q_$19|) (= ($index_within ($dot |p_$137| |f_$30|) |q_$19|) ($index_within |p_$137| |q_$19|))))  :pattern ( ($simple_index ($dot |p_$137| |f_$30|) |q_$19|)) :pattern ( ($index_within ($dot |p_$137| |f_$30|) |q_$19|))))
    (forall( (|p_$138| $ptr) (|q_$20| $ptr) (|f_$31| $field) (|i_$23| Int) (|t_$33| $ctype))(!(=> (and (and (<= 0 |i_$23|) (< |i_$23| ($embedded_array_size |f_$31| |t_$33|))) ($simple_index |p_$138| |q_$20|)) (and ($simple_index ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|) (= ($index_within ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|) ($index_within |p_$138| |q_$20|))))  :pattern ( ($simple_index ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|)) :pattern ( ($index_within ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|))))
    (forall( (|p_$14| $ptr) (|begin_time_$0| Int) (|S_$7| $state))(= (and (or ($in_writes_at |begin_time_$0| |p_$14|) (>= ($timestamp |S_$7| |p_$14|) |begin_time_$0|)) (and (and ($typed |S_$7| |p_$14|) (= ($owner |S_$7| |p_$14|) $me)) (=> (= ($kind_of ($typ |p_$14|)) $kind_primitive) (not ($closed |S_$7| |p_$14|))))) (and (or ($in_writes_at |begin_time_$0| |p_$14|) (>= ($timestamp |S_$7| |p_$14|) |begin_time_$0|)) (and (and ($typed |S_$7| |p_$14|) (= ($owner |S_$7| |p_$14|) $me)) (=> (= ($kind_of ($typ |p_$14|)) $kind_primitive) (not ($closed |S_$7| |p_$14|)))))))
    (forall( (|p_$140| $ptr))(!(=> (and (<= 0 ($ref |p_$140|)) (<= ($ref |p_$140|) $max.u8)) (= ($ptr_to_u8 |p_$140|) ($ref |p_$140|)))  :pattern ( ($ptr_to_u8 |p_$140|))))
    (forall( (|p_$141| $ptr))(!(=> (and (<= $min.i8 ($ref |p_$141|)) (<= ($ref |p_$141|) $max.i8)) (= ($ptr_to_i8 |p_$141|) ($ref |p_$141|)))  :pattern ( ($ptr_to_i8 |p_$141|))))
    (forall( (|p_$142| $ptr))(!(=> (and (<= 0 ($ref |p_$142|)) (<= ($ref |p_$142|) $max.u4)) (= ($ptr_to_u4 |p_$142|) ($ref |p_$142|)))  :pattern ( ($ptr_to_u4 |p_$142|))))
    (forall( (|p_$143| $ptr))(!(=> (and (<= $min.i4 ($ref |p_$143|)) (<= ($ref |p_$143|) $max.i4)) (= ($ptr_to_i4 |p_$143|) ($ref |p_$143|)))  :pattern ( ($ptr_to_i4 |p_$143|))))
    (forall( (|p_$144| $ptr))(!(=> (and (<= 0 ($ref |p_$144|)) (<= ($ref |p_$144|) $max.u2)) (= ($ptr_to_u2 |p_$144|) ($ref |p_$144|)))  :pattern ( ($ptr_to_u2 |p_$144|))))
    (forall( (|p_$145| $ptr))(!(=> (and (<= $min.i2 ($ref |p_$145|)) (<= ($ref |p_$145|) $max.i2)) (= ($ptr_to_i2 |p_$145|) ($ref |p_$145|)))  :pattern ( ($ptr_to_i2 |p_$145|))))
    (forall( (|p_$146| $ptr))(!(=> (and (<= 0 ($ref |p_$146|)) (<= ($ref |p_$146|) $max.u1)) (= ($ptr_to_u1 |p_$146|) ($ref |p_$146|)))  :pattern ( ($ptr_to_u1 |p_$146|))))
    (forall( (|p_$147| $ptr))(!(=> (and (<= $min.i1 ($ref |p_$147|)) (<= ($ref |p_$147|) $max.i1)) (= ($ptr_to_i1 |p_$147|) ($ref |p_$147|)))  :pattern ( ($ptr_to_i1 |p_$147|))))
    (forall( (|p_$15| $ptr) (|S_$8| $state))(= ($select.sm ($statusmap |S_$8|) |p_$15|) ($select.sm ($statusmap |S_$8|) |p_$15|)))
    (forall( (|p_$155| $ptr))(= ($int_to_ptr ($ptr_to_int |p_$155|)) |p_$155|))
    (forall( (|p_$159| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.top |p_$159|) $seclbl.top))
    (forall( (|p_$16| $ptr) (|S_$9| $state))(= ($select.tm ($typemap |S_$9|) |p_$16|) ($select.tm ($typemap |S_$9|) |p_$16|)))
    (forall( (|p_$160| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.bot |p_$160|) $seclbl.bot))
    (forall( (|p_$168| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool $zero.$map_t..$ptr_to..^^void.^^bool |p_$168|) false)  :weight  0))
    (forall( (|p_$169| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$169|) false)  :pattern ( ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$169|))))
    (forall( (|p_$17| $ptr) (|S_$10| $state))(= (not (= ($kind_of ($typ ($owner |S_$10| |p_$17|))) $kind_thread)) (not (= ($kind_of ($typ ($owner |S_$10| |p_$17|))) $kind_thread))))
    (forall( (|p_$170| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ $ptrclub.empty |p_$170|) false))
    (forall( (|p_$178| Int))(= ($select.$map_t..^^i4.^^bool $zero.$map_t..^^i4.^^bool |p_$178|) false))
    (forall( (|p_$182| Int))(= ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool $zero.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |p_$182|) $zero.$map_t..^^i4.^^bool))
    (forall( (|p_$186| Int))(= ($select.$map_t..$ptr_to..^Node.^^u4 $zero.$map_t..$ptr_to..^Node.^^u4 |p_$186|) 0))
    (forall( (|p_$19| $ptr) (|S_$13| $state))(= (or (not (= ($owner |S_$13| |p_$19|) $me)) (and (= ($kind_of ($typ |p_$19|)) $kind_primitive) ($closed |S_$13| |p_$19|))) (or (not (= ($owner |S_$13| |p_$19|) $me)) (and (= ($kind_of ($typ |p_$19|)) $kind_primitive) ($closed |S_$13| |p_$19|)))))
    (forall( (|p_$191| Int))(= ($select.$map_t..^^u4.$ptr_to..^Node $zero.$map_t..^^u4.$ptr_to..^Node |p_$191|) 0))
    (forall( (|p_$2| $ptr) (|s_$0| $state))(= ($select.mem ($memory |s_$0|) |p_$2|) ($select.mem ($memory |s_$0|) |p_$2|)))
    (forall( (|p_$20| $ptr) (|S_$14| $state))(= (and ($typed |S_$14| |p_$20|) (= ($owner |S_$14| |p_$20|) $me)) (and ($typed |S_$14| |p_$20|) (= ($owner |S_$14| |p_$20|) $me))))
    (forall( (|p_$21| $ptr) (|S_$15| $state))(= (and (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me)) (=> (= ($kind_of ($typ |p_$21|)) $kind_primitive) (not ($closed |S_$15| |p_$21|)))) (and (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me)) (=> (= ($kind_of ($typ |p_$21|)) $kind_primitive) (not ($closed |S_$15| |p_$21|))))))
    (forall( (|p_$23| $ptr) (|S_$20| $state))(= (and (not (= ($kind_of ($typ |p_$23|)) $kind_primitive)) (or (= ($owner |S_$20| |p_$23|) $me) ($in_wrapped_domain |S_$20| |p_$23|))) (and (not (= ($kind_of ($typ |p_$23|)) $kind_primitive)) (or (= ($owner |S_$20| |p_$23|) $me) ($in_wrapped_domain |S_$20| |p_$23|)))))
    (forall( (|p_$24| $ptr) (|S2| $state) (|S1| $state))(= ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)) ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|))))
    (forall( (|p_$26| $ptr) (|S_$27| $state))(= (and (forall( (|#q_$0_$1| $ptr))(!(=> ($closed |S_$27| |#q_$0_$1|) ($inv2 |S_$27| |S_$27| |#q_$0_$1| ($typ |#q_$0_$1|)))  :pattern ( ($select.sm ($statusmap |S_$27|) |#q_$0_$1|)))) ($good_for_admissibility |S_$27|)) (and (forall( (|#q_$0| $ptr))(!(=> ($closed |S_$27| |#q_$0|) ($inv2 |S_$27| |S_$27| |#q_$0| ($typ |#q_$0|)))  :pattern ( ($select.sm ($statusmap |S_$27|) |#q_$0|)))) ($good_for_admissibility |S_$27|))))
    (forall( (|p_$27| $ptr) (|S_$28| $state))(= (and (and ($closed |S_$28| |p_$27|) ($inv2 |S_$28| |S_$28| |p_$27| ($typ |p_$27|))) (and (forall( (|#q_$0_$3| $ptr))(!(=> ($closed |S_$28| |#q_$0_$3|) ($inv2 |S_$28| |S_$28| |#q_$0_$3| ($typ |#q_$0_$3|)))  :pattern ( ($select.sm ($statusmap |S_$28|) |#q_$0_$3|)))) ($good_for_admissibility |S_$28|))) (and (and ($closed |S_$28| |p_$27|) ($inv2 |S_$28| |S_$28| |p_$27| ($typ |p_$27|))) (and (forall( (|#q_$0_$3| $ptr))(!(=> ($closed |S_$28| |#q_$0_$3|) ($inv2 |S_$28| |S_$28| |#q_$0_$3| ($typ |#q_$0_$3|)))  :pattern ( ($select.sm ($statusmap |S_$28|) |#q_$0_$3|)))) ($good_for_admissibility |S_$28|)))))
    (forall( (|p_$29| $ptr) (|S_$29| $state))(= (and (and (and (and (and (and (and (and ($closed |S_$29| |p_$29|) (= ($owner |S_$29| |p_$29|) $me)) (and ($is |p_$29| ($typ |p_$29|)) ($typed |S_$29| |p_$29|))) (not (= ($kind_of ($typ |p_$29|)) $kind_primitive))) ($is_non_primitive ($typ |p_$29|))) (or (not ($is_claimable ($typ |p_$29|))) (= ($ref_cnt |S_$29| |p_$29|) 0))) ($inv2 |S_$29| |S_$29| |p_$29| ($typ |p_$29|))) (forall( (|#q_$1_$1| $ptr))(!(=> ($closed |S_$29| |#q_$1_$1|) ($inv2 |S_$29| |S_$29| |#q_$1_$1| ($typ |#q_$1_$1|)))  :pattern ( ($select.sm ($statusmap |S_$29|) |#q_$1_$1|))))) ($good_for_pre_can_unwrap |S_$29|)) (and (and (and (and (and (and (and (and ($closed |S_$29| |p_$29|) (= ($owner |S_$29| |p_$29|) $me)) (and ($is |p_$29| ($typ |p_$29|)) ($typed |S_$29| |p_$29|))) (not (= ($kind_of ($typ |p_$29|)) $kind_primitive))) ($is_non_primitive ($typ |p_$29|))) (or (not ($is_claimable ($typ |p_$29|))) (= ($ref_cnt |S_$29| |p_$29|) 0))) ($inv2 |S_$29| |S_$29| |p_$29| ($typ |p_$29|))) (forall( (|#q_$1| $ptr))(!(=> ($closed |S_$29| |#q_$1|) ($inv2 |S_$29| |S_$29| |#q_$1| ($typ |#q_$1|)))  :pattern ( ($select.sm ($statusmap |S_$29|) |#q_$1|))))) ($good_for_pre_can_unwrap |S_$29|))))
    (forall( (|p_$30| $ptr) (|S_$30| $state))(= (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)) (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|))))
    (forall( (|p_$31| $ptr) (|S_$31| $state))(= (and (= ($timestamp |S_$31| |p_$31|) ($current_timestamp |S_$31|)) ($mutable |S_$31| |p_$31|)) (and (= ($timestamp |S_$31| |p_$31|) ($current_timestamp |S_$31|)) ($mutable |S_$31| |p_$31|))))
    (forall( (|p_$36| $ptr) (|S_$43| $state))(= (and (and ($extent_mutable |S_$43| |p_$36|) (= ($ts_emb ($select.tm ($typemap |S_$43|) |p_$36|)) ($ptr ^^root_emb ($ref |p_$36|)))) (= ($timestamp |S_$43| |p_$36|) ($current_timestamp |S_$43|))) (and (and ($extent_mutable |S_$43| |p_$36|) (= ($ts_emb ($select.tm ($typemap |S_$43|) |p_$36|)) ($ptr ^^root_emb ($ref |p_$36|)))) (= ($timestamp |S_$43| |p_$36|) ($current_timestamp |S_$43|)))))
    (forall( (|p_$4| $ptr) (|s2| $state) (|s1| $state))(= (= ($select.mem ($memory |s1|) |p_$4|) ($select.mem ($memory |s2|) |p_$4|)) (= ($select.mem ($memory |s1|) |p_$4|) ($select.mem ($memory |s2|) |p_$4|))))
    (forall( (|p_$5| $ptr) (|s2_$0| $state) (|s1_$0| $state))(= (= ($select.sm ($statusmap |s1_$0|) |p_$5|) ($select.sm ($statusmap |s2_$0|) |p_$5|)) (= ($select.sm ($statusmap |s1_$0|) |p_$5|) ($select.sm ($statusmap |s2_$0|) |p_$5|))))
    (forall( (|p_$50| $ptr) (|S_$54| $state))(= (not (= ($select.mem ($memory |S_$54|) |p_$50|) 0)) (not (= ($select.mem ($memory |S_$54|) |p_$50|) 0))))
    (forall( (|p_$51| $ptr))(= (and (<= 0 ($ref |p_$51|)) (<= ($ref |p_$51|) $max.u8)) (and (<= 0 ($ref |p_$51|)) (<= ($ref |p_$51|) $max.u8))))
    (forall( (|p_$6| $ptr) (|s2_$1| $state) (|s1_$1| $state))(= (= ($select.tm ($typemap |s1_$1|) |p_$6|) ($select.tm ($typemap |s2_$1|) |p_$6|)) (= ($select.tm ($typemap |s1_$1|) |p_$6|) ($select.tm ($typemap |s2_$1|) |p_$6|))))
    (forall( (|p_$62| $ptr) (|q_$6| $ptr) (|r_$0| $ptr))(!(=> (and ($extent_hint |p_$62| |q_$6|) ($extent_hint |q_$6| |r_$0|)) ($extent_hint |p_$62| |r_$0|))  :pattern ( ($extent_hint |p_$62| |q_$6|) ($extent_hint |q_$6| |r_$0|))))
    (forall( (|p_$63| $ptr))(!($extent_hint |p_$63| |p_$63|)  :pattern ( ($typ |p_$63|))))
    (forall( (|p_$64| $ptr) (|f_$12| $field))(!(and (= ($ghost_emb ($ghost_ref |p_$64| |f_$12|)) |p_$64|) (= ($ghost_path ($ghost_ref |p_$64| |f_$12|)) |f_$12|))  :weight  0 :pattern ( ($ghost_ref |p_$64| |f_$12|))))
    (forall( (|p_$65| $ptr) (|f_$13| $field))(!($in_range_spec_ptr ($ghost_ref |p_$65| |f_$13|))  :pattern ( ($ghost_ref |p_$65| |f_$13|))))
    (forall( (|p_$71| $ctype) (|f_$20| $field) (|ft| $ctype))(!(=> (and ($is_record_field |p_$71| |f_$20| |ft|) ($is_record_type |ft|)) (= ($as_record_record_field |f_$20|) |f_$20|))  :pattern ( ($is_record_field |p_$71| |f_$20| |ft|) ($is_record_type |ft|))))
    (forall( (|p_$9| $ptr) (|S_$3| $state))(= (= ($ts_emb ($select.tm ($typemap |S_$3|) |p_$9|)) ($ptr ^^root_emb ($ref |p_$9|))) (= ($ts_emb ($select.tm ($typemap |S_$3|) |p_$9|)) ($ptr ^^root_emb ($ref |p_$9|)))))
    (forall( (|p| $ptr))(= ($is_threadtype ($typ |p|)) ($is_threadtype ($typ |p|))))
    (forall( (|p1_$4| $ptr) (|p2_$2| $ptr))(=> (= ($ref |p1_$4|) ($ref |p2_$2|)) (forall( (|p_$52_$1| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.compare |p1_$4| |p2_$2|) |p_$52_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.bot |p_$52_$1|)))))
    (forall( (|p1_$5| $ptr) (|p2_$3| $ptr) (|c_$18| $ptrclub))(=> (and (and (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$18|) |p1_$5|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$18|) |p2_$3|)) (is_active_ptrclub |c_$18|)) (forall( (|p_$52_$2| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.compare |p1_$5| |p2_$3|) |p_$52_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.bound |c_$18|) |p_$52_$2|)))))
    (forall( (|p2_$0| $ptr) (|p1_$0| $ptr))(= (not (= ($ref |p1_$0|) ($ref |p2_$0|))) (not (= ($ref |p1_$0|) ($ref |p2_$0|)))))
    (forall( (|p2| $ptr) (|p1| $ptr))(= (= ($ref |p1|) ($ref |p2|)) (= ($ref |p1|) ($ref |p2|))))
    (forall( (|Q#k$1^17.45#tc2| Int))(!(=> (and (<= $min.i4 |Q#k$1^17.45#tc2|) (<= |Q#k$1^17.45#tc2| $max.i4)) (= ($select.$map_t..^^i4.^^bool F@lambda@1 |Q#k$1^17.45#tc2|) false))  :pattern ( ($select.$map_t..^^i4.^^bool F@lambda@1 |Q#k$1^17.45#tc2|))))
    (forall( (|q_$18| $ptr) (|S_$125| $state) (|p_$135| $ptr))(!(= ($set_in |q_$18| ($non_null_extent |S_$125| |p_$135|)) (and (not (= ($ref |p_$135|) ($ref $null))) ($set_in |q_$18| ($extent |S_$125| |p_$135|))))  :pattern ( ($set_in |q_$18| ($non_null_extent |S_$125| |p_$135|)))))
    (forall( (|r_$2| $record) (|f_$18| $field) (|v_$7| Int))(!(= ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|) ($unchecked ($record_field_int_kind |f_$18|) |v_$7|))  :pattern ( ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|))))
    (forall( (|r_$3| $record) (|f_$19| $field))(!($in_range_t ($record_field_int_kind |f_$19|) ($rec_fetch |r_$3| |f_$19|))  :pattern ( ($rec_fetch |r_$3| |f_$19|))))
    (forall( (|r_$4| $record) (|f1| $field) (|f2| $field) (|v_$8| Int))(!(or (= ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|) ($rec_fetch |r_$4| |f2|)) (= |f1| |f2|))  :pattern ( ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|))))
    (forall( (|r1_$0| $record) (|r2_$0| $record))(!(=> (forall( (|f_$21| $field))($rec_base_eq ($rec_fetch |r1_$0| |f_$21|) ($rec_fetch |r2_$0| |f_$21|))) ($rec_eq |r1_$0| |r2_$0|))  :pattern ( ($rec_eq |r1_$0| |r2_$0|))))
    (forall( (|r1_$1| $record) (|r2_$1| $record) (|f_$22| $field))(!(=> ($rec_eq ($int_to_record ($rec_fetch |r1_$1| |f_$22|)) ($int_to_record ($rec_fetch |r2_$1| |f_$22|))) ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| |f_$22|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| ($as_record_record_field |f_$22|))))))
    (forall( (|r1_$2| $record) (|r2_$2| $record) (|f_$32| $field) (|R| $ctype))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r1_$2| |f_$32|)) ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r2_$2| |f_$32|))) ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)))  :weight  0 :pattern ( ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)) ($is_record_field |R| |f_$32| ($map_t ($ptr_to ^^void) ^^bool)))))
    (forall( (|r1_$3| $record) (|r2_$3| $record) (|f_$33| $field) (|R_$0| $ctype))(!(=> ($eq.$map_t..^^i4.^^bool ($int_to_map_t..^^i4.^^bool ($rec_fetch |r1_$3| |f_$33|)) ($int_to_map_t..^^i4.^^bool ($rec_fetch |r2_$3| |f_$33|))) ($rec_base_eq ($rec_fetch |r1_$3| |f_$33|) ($rec_fetch |r2_$3| |f_$33|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$3| |f_$33|) ($rec_fetch |r2_$3| |f_$33|)) ($is_record_field |R_$0| |f_$33| ($map_t ^^i4 ^^bool)))))
    (forall( (|r1_$4| $record) (|r2_$4| $record) (|f_$34| $field) (|R_$1| $ctype))(!(=> ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($rec_fetch |r1_$4| |f_$34|)) ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($rec_fetch |r2_$4| |f_$34|))) ($rec_base_eq ($rec_fetch |r1_$4| |f_$34|) ($rec_fetch |r2_$4| |f_$34|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$4| |f_$34|) ($rec_fetch |r2_$4| |f_$34|)) ($is_record_field |R_$1| |f_$34| ($map_t ($ptr_to ^Node) ($map_t ^^i4 ^^bool))))))
    (forall( (|r1_$5| $record) (|r2_$5| $record) (|f_$35| $field) (|R_$2| $ctype))(!(=> ($eq.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($rec_fetch |r1_$5| |f_$35|)) ($int_to_map_t..ptr_to..^Node.^^u4 ($rec_fetch |r2_$5| |f_$35|))) ($rec_base_eq ($rec_fetch |r1_$5| |f_$35|) ($rec_fetch |r2_$5| |f_$35|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$5| |f_$35|) ($rec_fetch |r2_$5| |f_$35|)) ($is_record_field |R_$2| |f_$35| ($map_t ($ptr_to ^Node) ^^u4)))))
    (forall( (|r1_$6| $record) (|r2_$6| $record) (|f_$36| $field) (|R_$3| $ctype))(!(=> ($eq.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($rec_fetch |r1_$6| |f_$36|)) ($int_to_map_t..^^u4.ptr_to..^Node ($rec_fetch |r2_$6| |f_$36|))) ($rec_base_eq ($rec_fetch |r1_$6| |f_$36|) ($rec_fetch |r2_$6| |f_$36|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$6| |f_$36|) ($rec_fetch |r2_$6| |f_$36|)) ($is_record_field |R_$3| |f_$36| ($map_t ^^u4 ($ptr_to ^Node))))))
    (forall( (|r1| $record) (|r2| $record))(!(= ($rec_eq |r1| |r2|) (= |r1| |r2|))  :pattern ( ($rec_eq |r1| |r2|))))
    (forall( (|S_$100| $state) (|c_$3| $ptr) (|obj| $ptr) (|ptr| $ptr))(!(= ($by_claim |S_$100| |c_$3| |obj| |ptr|) |ptr|)  :weight  0 :pattern ( ($by_claim |S_$100| |c_$3| |obj| |ptr|))))
    (forall( (|S_$101| $state) (|p_$104| $ptr) (|c_$4| $ptr) (|f_$28| $field))(!(=> (and (and (and ($good_state |S_$101|) ($closed |S_$101| |c_$4|)) ($in_claim_domain |p_$104| |c_$4|)) ($is_primitive_non_volatile_field |f_$28|)) (and ($in_claim_domain |p_$104| |c_$4|) (= ($select.mem ($memory |S_$101|) ($dot |p_$104| |f_$28|)) ($fetch_from_domain ($claim_version |c_$4|) ($dot |p_$104| |f_$28|)))))  :pattern ( ($in_claim_domain |p_$104| |c_$4|) ($select.mem ($memory |S_$101|) ($dot |p_$104| |f_$28|))) :pattern ( ($by_claim |S_$101| |c_$4| |p_$104| ($dot |p_$104| |f_$28|)))))
    (forall( (|S_$102| $state) (|p_$105| $ptr) (|c_$5| $ptr) (|f_$29| $field) (|i_$15| Int) (|sz_$21| Int) (|t_$28| $ctype))(!(=> (and (and (and (and (and ($good_state |S_$102|) ($closed |S_$102| |c_$5|)) ($in_claim_domain |p_$105| |c_$5|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)) (<= 0 |i_$15|)) (< |i_$15| |sz_$21|)) (= ($select.mem ($memory |S_$102|) ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|)) ($fetch_from_domain ($claim_version |c_$5|) ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|))))  :pattern ( ($valid_claim |S_$102| |c_$5|) ($in_claim_domain |p_$105| |c_$5|) ($select.mem ($memory |S_$102|) ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)) :pattern ( ($by_claim |S_$102| |c_$5| |p_$105| ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|))))
    (forall( (|S_$103| $state) (|p_$106| $ptr) (|c_$6| $ptr) (|i_$16| Int) (|sz_$22| Int) (|t_$29| $ctype))(!(=> (and (and (and (and (and ($good_state |S_$103|) ($closed |S_$103| |c_$6|)) ($in_claim_domain ($ptr ($array |t_$29| |sz_$22|) ($ref |p_$106|)) |c_$6|)) ($is_primitive |t_$29|)) (<= 0 |i_$16|)) (< |i_$16| |sz_$22|)) (= ($select.mem ($memory |S_$103|) ($idx |p_$106| |i_$16| |t_$29|)) ($fetch_from_domain ($claim_version |c_$6|) ($idx |p_$106| |i_$16| |t_$29|))))  :pattern ( ($valid_claim |S_$103| |c_$6|) ($in_claim_domain ($ptr ($array |t_$29| |sz_$22|) ($ref |p_$106|)) |c_$6|) ($select.mem ($memory |S_$103|) ($idx |p_$106| |i_$16| |t_$29|)) ($is_primitive |t_$29|)) :pattern ( ($by_claim |S_$103| |c_$6| |p_$106| ($idx |p_$106| |i_$16| |t_$29|)) ($is_primitive |t_$29|) ($is_array |S_$103| |p_$106| |t_$29| |sz_$22|))))
    (forall( (|S_$104| $state) (|p_$107| $ptr))(!(= ($read_vol_version |S_$104| |p_$107|) ($int_to_vol_version ($select.mem ($memory |S_$104|) |p_$107|)))  :weight  0 :pattern ( ($read_vol_version |S_$104| |p_$107|))))
    (forall( (|S_$105| $state) (|r_$18| Int) (|t_$30| $ctype) (|approver_$1| $field) (|subject_$2| $field))(!(=> (and (and (and ($full_stop |S_$105|) ($is_approved_by |t_$30| |approver_$1| |subject_$2|)) ($closed |S_$105| ($ptr |t_$30| |r_$18|))) (or (= ($int_to_ptr ($select.mem ($memory |S_$105|) ($dot ($ptr |t_$30| |r_$18|) |approver_$1|))) $me) (= ($int_to_ptr ($fetch_from_vv ($read_vol_version |S_$105| ($ptr |t_$30| |r_$18|)) ($dot ($ptr |t_$30| |r_$18|) |approver_$1|))) $me))) (= ($select.mem ($memory |S_$105|) ($dot ($ptr |t_$30| |r_$18|) |subject_$2|)) ($fetch_from_vv ($read_vol_version |S_$105| ($ptr |t_$30| |r_$18|)) ($dot ($ptr |t_$30| |r_$18|) |subject_$2|))))  :pattern ( ($is_approved_by |t_$30| |approver_$1| |subject_$2|) ($select.mem ($memory |S_$105|) ($dot ($ptr |t_$30| |r_$18|) |subject_$2|)))))
    (forall( (|S_$106| $state) (|r_$19| Int) (|t_$31| $ctype) (|subject_$3| $field))(!(=> (and (and (and ($full_stop |S_$106|) ($closed |S_$106| ($ptr |t_$31| |r_$19|))) ($is_owner_approved |t_$31| |subject_$3|)) (= ($owner |S_$106| ($ptr |t_$31| |r_$19|)) $me)) (= ($select.mem ($memory |S_$106|) ($dot ($ptr |t_$31| |r_$19|) |subject_$3|)) ($fetch_from_vv ($read_vol_version |S_$106| ($ptr |t_$31| |r_$19|)) ($dot ($ptr |t_$31| |r_$19|) |subject_$3|))))  :pattern ( ($is_owner_approved |t_$31| |subject_$3|) ($select.mem ($memory |S_$106|) ($dot ($ptr |t_$31| |r_$19|) |subject_$3|)))))
    (forall( (|S_$107| $state) (|p_$108| $ptr) (|q_$16| $ptr))(!(=> (and (and ($good_state |S_$107|) ($closed |S_$107| |q_$16|)) ($is_non_primitive ($typ |p_$108|))) (= ($set_in |p_$108| ($owns |S_$107| |q_$16|)) (= ($owner |S_$107| |p_$108|) |q_$16|)))  :pattern ( ($set_in |p_$108| ($owns |S_$107| |q_$16|)) ($is_non_primitive ($typ |p_$108|)))))
    (forall( (|S_$108| $state) (|#r_$6| Int) (|#t_$14| $ctype))(!(=> ($good_state |S_$108|) (=> ($is_arraytype |#t_$14|) (= ($owns |S_$108| ($ptr |#t_$14| |#r_$6|)) $set_empty)))  :pattern ( ($owns |S_$108| ($ptr |#t_$14| |#r_$6|)) ($is_arraytype |#t_$14|))))
    (forall( (|S_$109| $state) (|#p_$30| $ptr) (|#t_$15| $ctype))(!(=> (and ($invok_state |S_$109|) ($closed |S_$109| |#p_$30|)) ($inv2 |S_$109| |S_$109| |#p_$30| |#t_$15|))  :pattern ( ($inv2 |S_$109| |S_$109| |#p_$30| |#t_$15|))))
    (forall( (|S_$110| $state))(!(=> ($good_state |S_$110|) (forall( (|#p_$10_$1| $ptr) (|#q_$11| $ptr))(!(=> (and (and ($good_state |S_$110|) ($set_in |#p_$10_$1| ($owns |S_$110| |#q_$11|))) ($closed |S_$110| |#q_$11|)) (and ($closed |S_$110| |#p_$10_$1|) (not (= ($ref |#p_$10_$1|) 0))))  :pattern ( ($set_in |#p_$10_$1| ($owns |S_$110| |#q_$11|))))))  :pattern ( ($good_state |S_$110|))))
    (forall( (|S_$111| $state) (|#p_$31| $ptr))(!(=> ($closed |S_$111| |#p_$31|) ($typed |S_$111| |#p_$31|))  :pattern ( ($closed |S_$111| |#p_$31|))))
    (forall( (|S_$112| $state) (|p_$109| $ptr) (|v_$9| Int))(!(and (and (and (= ($typemap ($update_int |S_$112| |p_$109| |v_$9|)) ($typemap |S_$112|)) (= ($statusmap ($update_int |S_$112| |p_$109| |v_$9|)) ($statusmap |S_$112|))) (= ($memory ($update_int |S_$112| |p_$109| |v_$9|)) ($store.mem ($memory |S_$112|) |p_$109| |v_$9|))) (and (and (< ($current_timestamp |S_$112|) ($current_timestamp ($update_int |S_$112| |p_$109| |v_$9|))) (forall( (|p_$33_$1| $ptr))(!(<= ($timestamp |S_$112| |p_$33_$1|) ($timestamp ($update_int |S_$112| |p_$109| |v_$9|) |p_$33_$1|))  :weight  0 :pattern ( ($timestamp ($update_int |S_$112| |p_$109| |v_$9|) |p_$33_$1|))))) ($call_transition |S_$112| ($update_int |S_$112| |p_$109| |v_$9|))))  :pattern ( ($update_int |S_$112| |p_$109| |v_$9|))))
    (forall( (|S_$113| $state) (|l_$3| $ptr) (|p_$110| $ptr))(!(=> (not (= ($kind_of ($typ |l_$3|)) $kind_primitive)) (and (and (and (and (= ($statusmap ($take_over |S_$113| |l_$3| |p_$110|)) ($store.sm ($statusmap |S_$113|) |p_$110| ($taken_over |S_$113| |l_$3| |p_$110|))) ($closed ($take_over |S_$113| |l_$3| |p_$110|) |p_$110|)) (= ($owner ($take_over |S_$113| |l_$3| |p_$110|) |p_$110|) |l_$3|)) (= ($ref_cnt ($take_over |S_$113| |l_$3| |p_$110|) |p_$110|) ($ref_cnt |S_$113| |p_$110|))) true))  :pattern ( ($take_over |S_$113| |l_$3| |p_$110|))))
    (forall( (|S_$115| $state))(!(=> ($program_entry_point |S_$115|) ($program_entry_point_ch |S_$115|))  :pattern ( ($program_entry_point |S_$115|))))
    (forall( (|S_$116| $state) (|p_$112| $ptr) (|q_$17| $ptr))(!(= ($set_in |p_$112| ($volatile_span |S_$116| |q_$17|)) (or (= |p_$112| |q_$17|) (and ($ts_is_volatile ($select.tm ($typemap |S_$116|) |p_$112|)) ($set_in |p_$112| ($span |q_$17|)))))  :pattern ( ($set_in |p_$112| ($volatile_span |S_$116| |q_$17|)))))
    (forall( (|S_$117| $state) (|p_$124| $ptr) (|T_$24| $ctype) (|sz_$23| Int) (|vol_$1| Bool))(!(= ($is_array_vol_or_nonvol |S_$117| |p_$124| |T_$24| |sz_$23| |vol_$1|) (and ($is |p_$124| |T_$24|) (forall( (|i_$20| Int))(!(=> (and (<= 0 |i_$20|) (< |i_$20| |sz_$23|)) (and (= ($ts_is_volatile ($select.tm ($typemap |S_$117|) ($idx |p_$124| |i_$20| |T_$24|))) |vol_$1|) ($typed |S_$117| ($idx |p_$124| |i_$20| |T_$24|))))  :pattern ( ($select.sm ($statusmap |S_$117|) ($idx |p_$124| |i_$20| |T_$24|))) :pattern ( ($select.tm ($typemap |S_$117|) ($idx |p_$124| |i_$20| |T_$24|))) :pattern ( ($select.mem ($memory |S_$117|) ($idx |p_$124| |i_$20| |T_$24|)))))))  :weight  0 :pattern ( ($is_array_vol_or_nonvol |S_$117| |p_$124| |T_$24| |sz_$23| |vol_$1|))))
    (forall( (|S_$118| $state) (|p_$125| $ptr) (|T_$25| $ctype) (|sz_$24| Int))(!(= ($is_array |S_$118| |p_$125| |T_$25| |sz_$24|) (and ($is |p_$125| |T_$25|) (forall( (|i_$21| Int))(!(=> (and (<= 0 |i_$21|) (< |i_$21| |sz_$24|)) ($typed |S_$118| ($idx |p_$125| |i_$21| |T_$25|)))  :pattern ( ($select.sm ($statusmap |S_$118|) ($idx |p_$125| |i_$21| |T_$25|))) :pattern ( ($select.tm ($typemap |S_$118|) ($idx |p_$125| |i_$21| |T_$25|))) :pattern ( ($select.mem ($memory |S_$118|) ($idx |p_$125| |i_$21| |T_$25|)))))))  :weight  0 :pattern ( ($is_array |S_$118| |p_$125| |T_$25| |sz_$24|))))
    (forall( (|S_$119| $state) (|p_$127| $ptr) (|#r_$10| Int) (|T_$27| $ctype) (|sz_$26| Int))(!(= ($set_in |p_$127| ($extent |S_$119| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|))) (or (= |p_$127| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|)) (and (and (<= 0 ($index_within |p_$127| ($ptr |T_$27| |#r_$10|))) (<= ($index_within |p_$127| ($ptr |T_$27| |#r_$10|)) (- |sz_$26| 1))) ($set_in |p_$127| ($extent |S_$119| ($idx ($ptr |T_$27| |#r_$10|) ($index_within |p_$127| ($ptr |T_$27| |#r_$10|)) |T_$27|))))))  :pattern ( ($set_in |p_$127| ($extent |S_$119| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|))))))
    (forall( (|S_$120| $state) (|#r_$12| Int) (|T_$29| $ctype) (|sz_$28| Int) (|i_$22| Int))(!(=> ($typed |S_$120| ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) (=> (and (<= 0 |i_$22|) (< |i_$22| |sz_$28|)) (and (and (= ($ts_emb ($select.tm ($typemap |S_$120|) ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|))) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) (not ($ts_is_volatile ($select.tm ($typemap |S_$120|) ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|))))) ($typed |S_$120| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|)))))  :pattern ( ($select.sm ($statusmap |S_$120|) ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) :pattern ( ($select.tm ($typemap |S_$120|) ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|))))
    (forall( (|S_$121| $state) (|p_$130| $ptr) (|T_$31| $ctype) (|sz_$30| Int))(!(= ($array_range |S_$121| |p_$130| |T_$31| |sz_$30|) ($array_range_no_state |p_$130| |T_$31| |sz_$30|))  :pattern ( ($array_range |S_$121| |p_$130| |T_$31| |sz_$30|))))
    (forall( (|S_$122| $state) (|p_$131| $ptr) (|#r_$13| Int) (|T_$32| $ctype) (|sz_$31| Int))(!(and ($instantiate_bool ($typed |S_$122| |p_$131|)) (= ($set_in |p_$131| ($array_range |S_$122| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|)) (and (and (<= 0 ($index_within |p_$131| ($ptr |T_$32| |#r_$13|))) (<= ($index_within |p_$131| ($ptr |T_$32| |#r_$13|)) (- |sz_$31| 1))) ($set_in |p_$131| ($full_extent ($idx ($ptr |T_$32| |#r_$13|) ($index_within |p_$131| ($ptr |T_$32| |#r_$13|)) |T_$32|))))))  :pattern ( ($set_in |p_$131| ($array_range |S_$122| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|)))))
    (forall( (|S_$126| $state) (|r_$21| Int) (|t_$35| $ctype))(!(=> ($good_state |S_$126|) ($in_range_t |t_$35| ($select.mem ($memory |S_$126|) ($ptr ($as_in_range_t |t_$35|) |r_$21|))))  :pattern ( ($select.mem ($memory |S_$126|) ($ptr ($as_in_range_t |t_$35|) |r_$21|)))))
    (forall( (|S_$127| $state) (|r_$22| Int) (|t_$36| $ctype))(!(=> ($good_state |S_$127|) ($in_range_phys_ptr ($select.mem ($memory |S_$127|) ($ptr ($ptr_to |t_$36|) |r_$22|))))  :pattern ( ($select.mem ($memory |S_$127|) ($ptr ($ptr_to |t_$36|) |r_$22|)))))
    (forall( (|S_$128| $state) (|r_$23| Int) (|t_$37| $ctype))(!(=> ($good_state |S_$128|) ($in_range_spec_ptr ($select.mem ($memory |S_$128|) ($ptr ($spec_ptr_to |t_$37|) |r_$23|))))  :pattern ( ($select.mem ($memory |S_$128|) ($ptr ($spec_ptr_to |t_$37|) |r_$23|)))))
    (forall( (|S_$130| $state) (|no_$1| Int) (|t_$88| $ctype))(!(=> (and ($is_fnptr_type |t_$88|) ($good_state |S_$130|)) ($mutable |S_$130| ($get_fnptr |no_$1| |t_$88|)))  :pattern ( ($select.tm ($typemap |S_$130|) ($get_fnptr |no_$1| |t_$88|))) :pattern ( ($select.sm ($statusmap |S_$130|) ($get_fnptr |no_$1| |t_$88|)))))
    (forall( (|S_$131| $state) (|c_$7| $ptr))(!(=> (and ($full_stop |S_$131|) ($closed |S_$131| |c_$7|)) ($valid_claim |S_$131| |c_$7|))  :pattern ( ($full_stop |S_$131|) ($valid_claim |S_$131| |c_$7|))))
    (forall( (|S_$132| $state) (|c_$8| $ptr))(!(=> ($valid_claim |S_$132| |c_$8|) (and ($closed |S_$132| |c_$8|) ($invok_state |S_$132|)))  :pattern ( ($valid_claim |S_$132| |c_$8|))))
    (forall( (|S_$134| $state) (|c1_$0| $ptr) (|c2_$0| $ptr))(!(=> (and ($valid_claim |S_$134| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)) ($valid_claim |S_$134| |c2_$0|))  :pattern ( ($valid_claim |S_$134| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|))))
    (forall( (|S_$135| $state) (|c_$9| $ptr) (|o_$0| $ptr))(!(=> ($good_state |S_$135|) (=> (and ($claims_obj |c_$9| |o_$0|) ($closed |S_$135| |c_$9|)) (and (and ($instantiate_ptrset ($owns |S_$135| |o_$0|)) ($closed |S_$135| |o_$0|)) (> ($ref_cnt |S_$135| |o_$0|) 0))))  :pattern ( ($closed |S_$135| |c_$9|) ($claims_obj |c_$9| |o_$0|))))
    (forall( (|S_$136| $state) (|c_$10| $ptr) (|o_$1| $ptr))(!(=> (and ($valid_claim |S_$136| |c_$10|) ($claims_obj |c_$10| |o_$1|)) ($inv2 |S_$136| |S_$136| |o_$1| ($typ |o_$1|)))  :pattern ( ($valid_claim |S_$136| |c_$10|) ($claims_obj |c_$10| |o_$1|))))
    (forall( (|S_$137| $state) (|c_$11| $ptr) (|r_$24| Int))(!(=> (and ($valid_claim |S_$137| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$24|))) ($valid_claim |S_$137| ($ptr ^^claim |r_$24|)))  :pattern ( ($valid_claim |S_$137| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$24|)))))
    (forall( (|S_$139| $state) (|p_$150| $ptr))(!(=> (and ($invok_state |S_$139|) ($claimed_closed |S_$139| |p_$150|)) ($inv2 |S_$139| |S_$139| |p_$150| ($typ |p_$150|)))  :pattern ( ($invok_state |S_$139|) ($claimed_closed |S_$139| |p_$150|))))
    (forall( (|S_$141| $state) (|c_$12| $ptr) (|o_$3| $ptr))(!(= ($account_claim |S_$141| |c_$12| |o_$3|) (and (and ($good_state |S_$141|) ($closed |S_$141| |c_$12|)) ($claims_obj |c_$12| |o_$3|)))  :pattern ( ($account_claim |S_$141| |c_$12| |o_$3|))))
    (forall( (|S_$142| $state) (|c_$13| $ptr) (|o_$4| $ptr))(!(=> ($account_claim |S_$142| |c_$13| |o_$4|) (and (and (= ($claim_no |S_$142| |o_$4| ($claim_idx |o_$4| |c_$13|)) |c_$13|) (<= 0 ($claim_idx |o_$4| |c_$13|))) (< ($claim_idx |o_$4| |c_$13|) ($ref_cnt |S_$142| |o_$4|))))  :pattern ( ($account_claim |S_$142| |c_$13| |o_$4|))))
    (forall( (|s_$18| $state) (|p_$149| $ptr))(!(= ($claimed_closed |s_$18| |p_$149|) ($closed |s_$18| |p_$149|))  :weight  0 :pattern ( ($claimed_closed |s_$18| |p_$149|))))
    (forall( (|S_$23| $state) (|t_$6| $token))(= (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)) (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|))))
    (forall( (|S_$24| $state))(= (forall( (|#p_$10_$0| $ptr) (|#q_$10| $ptr))(!(=> (and (and ($good_state |S_$24|) ($set_in |#p_$10_$0| ($owns |S_$24| |#q_$10|))) ($closed |S_$24| |#q_$10|)) (and ($closed |S_$24| |#p_$10_$0|) (not (= ($ref |#p_$10_$0|) 0))))  :pattern ( ($set_in |#p_$10_$0| ($owns |S_$24| |#q_$10|))))) (forall( (|#p_$10| $ptr) (|#q| $ptr))(!(=> (and (and ($good_state |S_$24|) ($set_in |#p_$10| ($owns |S_$24| |#q|))) ($closed |S_$24| |#q|)) (and ($closed |S_$24| |#p_$10|) (not (= ($ref |#p_$10|) 0))))  :pattern ( ($set_in |#p_$10| ($owns |S_$24| |#q|)))))))
    (forall( (|s_$3| $state))(= (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|)))) (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|))))))
    (forall( (|s_$4| $state))(= (forall( (|f_$10| $pure_function))(!(< ($pure_post_level |f_$10|) $current_frame_level)  :pattern ( ($frame_level |f_$10|)))) (forall( (|f_$10| $pure_function))(!(< ($pure_post_level |f_$10|) $current_frame_level)  :pattern ( ($frame_level |f_$10|))))))
    (forall( (|S_$55| $state) (|p_$67| $ptr))(!(=> ($typed |S_$55| |p_$67|) ($typed |S_$55| ($ts_emb ($select.tm ($typemap |S_$55|) |p_$67|))))  :pattern ( ($typed |S_$55| |p_$67|) ($select.tm ($typemap |S_$55|) ($ts_emb ($select.tm ($typemap |S_$55|) |p_$67|))))))
    (forall( (|S_$56| $state) (|p_$68| $ptr))(!(=> (and ($good_state |S_$56|) ($ts_is_volatile ($select.tm ($typemap |S_$56|) |p_$68|))) (= ($kind_of ($typ |p_$68|)) $kind_primitive))  :pattern ( ($ts_is_volatile ($select.tm ($typemap |S_$56|) |p_$68|)))))
    (forall( (|S_$57| $state) (|p_$69| $ptr))(!(or (<= ($timestamp |S_$57| |p_$69|) ($current_timestamp |S_$57|)) (not ($ts_typed ($select.tm ($typemap |S_$57|) |p_$69|))))  :weight  0 :pattern ( ($select.sm ($statusmap |S_$57|) |p_$69|))))
    (forall( (|S_$58| $state) (|p_$70| $ptr))(!(=> ($good_state |S_$58|) (and (= ($vs_base_ref ($vs_ctor |S_$58| |p_$70|)) ($ref |p_$70|)) (= ($vs_state ($vs_ctor |S_$58| |p_$70|)) |S_$58|)))  :pattern ( ($vs_ctor |S_$58| |p_$70|))))
    (forall( (|S_$59| $state) (|p_$72| $ptr))(!(=> ($is_primitive ($typ |p_$72|)) (= ($owner |S_$59| |p_$72|) ($owner |S_$59| ($ts_emb ($select.tm ($typemap |S_$59|) |p_$72|)))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$72|)) ($owner |S_$59| |p_$72|))))
    (forall( (|s_$6| $struct))($good_state ($vs_state |s_$6|)))
    (forall( (|S_$60| $state) (|p_$73| $ptr))(!(=> ($is_non_primitive ($typ |p_$73|)) (= ($owner |S_$60| |p_$73|) ($st_owner ($select.sm ($statusmap |S_$60|) |p_$73|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$73|)) ($owner |S_$60| |p_$73|))))
    (forall( (|S_$61| $state) (|p_$74| $ptr))(!(=> ($is_primitive ($typ |p_$74|)) (= ($closed |S_$61| |p_$74|) ($st_closed ($select.sm ($statusmap |S_$61|) ($ts_emb ($select.tm ($typemap |S_$61|) |p_$74|))))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$74|)) ($closed |S_$61| |p_$74|))))
    (forall( (|S_$62| $state) (|p_$75| $ptr))(!(=> ($is_non_primitive ($typ |p_$75|)) (= ($closed |S_$62| |p_$75|) ($st_closed ($select.sm ($statusmap |S_$62|) |p_$75|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$75|)) ($closed |S_$62| |p_$75|))))
    (forall( (|S_$63| $state) (|p_$76| $ptr))(!(=> ($is_primitive ($typ |p_$76|)) (= ($timestamp |S_$63| |p_$76|) ($st_timestamp ($select.sm ($statusmap |S_$63|) ($ts_emb ($select.tm ($typemap |S_$63|) |p_$76|))))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$76|)) ($timestamp |S_$63| |p_$76|))))
    (forall( (|S_$64| $state) (|p_$77| $ptr))(!(=> ($is_non_primitive ($typ |p_$77|)) (= ($timestamp |S_$64| |p_$77|) ($st_timestamp ($select.sm ($statusmap |S_$64|) |p_$77|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$77|)) ($timestamp |S_$64| |p_$77|))))
    (forall( (|S_$65| $state) (|#p_$22| $ptr))(!(= ($owns |S_$65| |#p_$22|) ($int_to_ptrset ($select.mem ($memory |S_$65|) ($dot |#p_$22| ($owns_set_field ($typ |#p_$22|))))))  :weight  0 :pattern ( ($owns |S_$65| |#p_$22|))))
    (forall( (|S_$66| $state) (|p_$78| $ptr))(!(= ($mutable |S_$66| |p_$78|) (and (and ($typed |S_$66| |p_$78|) (= ($owner |S_$66| |p_$78|) $me)) (not ($closed |S_$66| |p_$78|))))  :weight  0 :pattern ( ($mutable |S_$66| |p_$78|))))
    (forall( (|S_$67| $state) (|#p_$23| $ptr))(!(=> ($good_state |S_$67|) (= ($typed |S_$67| |#p_$23|) ($ts_typed ($select.tm ($typemap |S_$67|) |#p_$23|))))  :weight  0 :pattern ( ($typed |S_$67| |#p_$23|))))
    (forall( (|S_$68| $state) (|#p_$24| $ptr))(!(=> (and ($good_state |S_$68|) ($typed |S_$68| |#p_$24|)) (> ($ref |#p_$24|) 0))  :pattern ( ($typed |S_$68| |#p_$24|))))
    (forall( (|S_$69| $state) (|#r_$5| Int) (|#t_$9| $ctype))(!(=> (and ($typed |S_$69| ($ptr |#t_$9| |#r_$5|)) ($in_range_phys_ptr |#r_$5|)) ($in_range_phys_ptr (- (+ |#r_$5| ($sizeof |#t_$9|)) 1)))  :pattern ( ($typed |S_$69| ($ptr |#t_$9| |#r_$5|)))))
    (forall( (|s_$7| $status))(!(and (not (= ($kind_of ($typ ($st_owner |s_$7|))) $kind_primitive)) ($is_non_primitive ($typ ($st_owner |s_$7|))))  :pattern ( ($st_owner |s_$7|))))
    (forall( (|S_$70| $state) (|p_$81| $ptr))(!(= ($is_domain_root |S_$70| |p_$81|) true)  :pattern ( ($is_domain_root |S_$70| |p_$81|))))
    (forall( (|S_$71| $state) (|p_$82| $ptr))(!(= ($in_wrapped_domain |S_$71| |p_$82|) (exists( (|q_$7| $ptr))(!(and (and ($set_in |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|))) (and (and (and (and ($closed |S_$71| |q_$7|) (= ($owner |S_$71| |q_$7|) $me)) (and ($is |q_$7| ($typ |q_$7|)) ($typed |S_$71| |q_$7|))) (not (= ($kind_of ($typ |q_$7|)) $kind_primitive))) ($is_non_primitive ($typ |q_$7|)))) ($is_domain_root |S_$71| |q_$7|))  :pattern ( ($set_in2 |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|)))))))  :pattern ( ($in_wrapped_domain |S_$71| |p_$82|))))
    (forall( (|S_$72| $state) (|p_$83| $ptr))(!(= ($thread_local |S_$72| |p_$83|) (and ($typed |S_$72| |p_$83|) (or (and (and (= ($kind_of ($typ |p_$83|)) $kind_primitive) (or (not ($ts_is_volatile ($select.tm ($typemap |S_$72|) |p_$83|))) (not ($closed |S_$72| ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|)))))) (and (not (= ($kind_of ($typ ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|)))) $kind_primitive)) (or (= ($owner |S_$72| ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|))) $me) ($in_wrapped_domain |S_$72| ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|)))))) (and (not (= ($kind_of ($typ |p_$83|)) $kind_primitive)) (or (= ($owner |S_$72| |p_$83|) $me) ($in_wrapped_domain |S_$72| |p_$83|))))))  :pattern ( ($thread_local |S_$72| |p_$83|))))
    (forall( (|S_$75| $state) (|T_$13| $ctype) (|sz_$14| Int) (|r_$9| Int))(!(= ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|)) (and ($mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|)) (forall( (|i_$8| Int))(!(=> (and (<= 0 |i_$8|) (< |i_$8| |sz_$14|)) ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|)))  :pattern ( ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|)))))))  :pattern ( ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|)))))
    (forall( (|S_$77| $state) (|T_$15| $ctype) (|sz_$15| Int) (|r_$11| Int))(!(= ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|)) (forall( (|i_$9| Int))(!(=> (and (<= 0 |i_$9|) (< |i_$9| |sz_$15|)) ($extent_zero |S_$77| ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))  :pattern ( ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))))  :pattern ( ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|)))))
    (forall( (|S_$78| $state))(!(=> ($full_stop |S_$78|) (and ($good_state |S_$78|) ($invok_state |S_$78|)))  :pattern ( ($full_stop |S_$78|))))
    (forall( (|S_$79| $state))(!(=> ($invok_state |S_$79|) ($good_state |S_$79|))  :pattern ( ($invok_state |S_$79|))))
    (forall( (|S_$81| $state) (|r_$12| Int) (|t_$21| $ctype))(!(= ($ptr |t_$21| ($select.mem ($memory |S_$81|) ($ptr ($ptr_to |t_$21|) |r_$12|))) ($read_ptr_m |S_$81| ($ptr ($ptr_to |t_$21|) |r_$12|) |t_$21|))  :pattern ( ($ptr |t_$21| ($select.mem ($memory |S_$81|) ($ptr ($ptr_to |t_$21|) |r_$12|))))))
    (forall( (|S_$82| $state) (|r_$13| Int) (|t_$22| $ctype))(!(= ($ptr |t_$22| ($select.mem ($memory |S_$82|) ($ptr ($spec_ptr_to |t_$22|) |r_$13|))) ($read_ptr_m |S_$82| ($ptr ($spec_ptr_to |t_$22|) |r_$13|) |t_$22|))  :pattern ( ($ptr |t_$22| ($select.mem ($memory |S_$82|) ($ptr ($spec_ptr_to |t_$22|) |r_$13|))))))
    (forall( (|S_$83| $state) (|p_$86| $ptr))(!(= ($read_version |S_$83| |p_$86|) ($int_to_version ($select.mem ($memory |S_$83|) |p_$86|)))  :weight  0 :pattern ( ($read_version |S_$83| |p_$86|))))
    (forall( (|S_$84| $state) (|p_$87| $ptr))(!(= ($domain |S_$84| |p_$87|) ($ver_domain ($read_version |S_$84| |p_$87|)))  :weight  0 :pattern ( ($domain |S_$84| |p_$87|))))
    (forall( (|S_$85| $state) (|p_$88| $ptr) (|q_$8| $ptr) (|l| $label))(!(=> ($in_domain_lab |S_$85| |p_$88| |q_$8| |l|) ($inv_lab |S_$85| |p_$88| |l|))  :weight  0 :pattern ( ($in_domain_lab |S_$85| |p_$88| |q_$8| |l|))))
    (forall( (|S_$86| $state) (|p_$89| $ptr) (|q_$9| $ptr) (|l_$0| $label))(!(= ($in_domain_lab |S_$86| |p_$89| |q_$9| |l_$0|) ($in_domain |S_$86| |p_$89| |q_$9|))  :weight  0 :pattern ( ($in_domain_lab |S_$86| |p_$89| |q_$9| |l_$0|))))
    (forall( (|S_$87| $state) (|p_$90| $ptr) (|q_$10| $ptr) (|l_$1| $label))(!(=> ($in_vdomain_lab |S_$87| |p_$90| |q_$10| |l_$1|) ($inv_lab |S_$87| |p_$90| |l_$1|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$87| |p_$90| |q_$10| |l_$1|))))
    (forall( (|S_$88| $state) (|p_$91| $ptr) (|q_$11| $ptr) (|l_$2| $label))(!(= ($in_vdomain_lab |S_$88| |p_$91| |q_$11| |l_$2|) ($in_vdomain |S_$88| |p_$91| |q_$11|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$88| |p_$91| |q_$11| |l_$2|))))
    (forall( (|S_$89| $state) (|p_$92| $ptr) (|q_$12| $ptr))(!(=> ($in_domain |S_$89| |p_$92| |q_$12|) (and (and ($set_in |p_$92| ($domain |S_$89| |q_$12|)) ($closed |S_$89| |p_$92|)) (forall( (|r_$14| $ptr))(!(=> (and (not ($has_volatile_owns_set ($typ |p_$92|))) ($set_in |r_$14| ($owns |S_$89| |p_$92|))) ($set_in2 |r_$14| ($ver_domain ($read_version |S_$89| |q_$12|))))  :pattern ( ($set_in |r_$14| ($owns |S_$89| |p_$92|)))))))  :weight  0 :pattern ( ($in_domain |S_$89| |p_$92| |q_$12|))))
    (forall( (|S_$90| $state) (|p_$93| $ptr))(!(=> (and ($full_stop |S_$90|) (and (and (and (and ($closed |S_$90| |p_$93|) (= ($owner |S_$90| |p_$93|) $me)) (and ($is |p_$93| ($typ |p_$93|)) ($typed |S_$90| |p_$93|))) (not (= ($kind_of ($typ |p_$93|)) $kind_primitive))) ($is_non_primitive ($typ |p_$93|)))) ($in_domain |S_$90| |p_$93| |p_$93|))  :pattern ( ($in_domain |S_$90| |p_$93| |p_$93|))))
    (forall( (|S_$91| $state) (|p_$94| $ptr) (|q_$13| $ptr) (|r_$15| $ptr))(!(=> (and (and ($has_volatile_owns_set ($typ |q_$13|)) ($set_in |q_$13| ($domain |S_$91| |p_$94|))) (forall( (|S1_$8| $state))(=> (and (and ($inv2 |S1_$8| |S1_$8| |q_$13| ($typ |q_$13|)) (= ($read_version |S1_$8| |p_$94|) ($read_version |S_$91| |p_$94|))) (= ($domain |S1_$8| |p_$94|) ($domain |S_$91| |p_$94|))) ($set_in0 |r_$15| ($owns |S1_$8| |q_$13|))))) (and ($in_vdomain |S_$91| |r_$15| |p_$94|) ($set_in0 |r_$15| ($owns |S_$91| |q_$13|))))  :weight  0 :pattern ( ($set_in |q_$13| ($domain |S_$91| |p_$94|)) ($in_vdomain |S_$91| |r_$15| |p_$94|))))
    (forall( (|S_$92| $state) (|p_$95| $ptr) (|d| $ptr) (|f_$23| $field))(!(=> (and ($set_in |p_$95| ($domain |S_$92| |d|)) ($is_primitive_non_volatile_field |f_$23|)) (= ($select.mem ($memory |S_$92|) ($dot |p_$95| |f_$23|)) ($fetch_from_domain ($read_version |S_$92| |d|) ($dot |p_$95| |f_$23|))))  :pattern ( ($set_in |p_$95| ($domain |S_$92| |d|)) ($is_primitive_non_volatile_field |f_$23|) ($select.mem ($memory |S_$92|) ($dot |p_$95| |f_$23|)))))
    (forall( (|S_$93| $state) (|p_$96| $ptr) (|d_$0| $ptr))(!(=> (and ($full_stop |S_$93|) ($set_in |p_$96| ($domain |S_$93| |d_$0|))) (and ($typed |S_$93| |p_$96|) (not ($ts_is_volatile ($select.tm ($typemap |S_$93|) |p_$96|)))))  :pattern ( ($full_stop |S_$93|) ($set_in |p_$96| ($domain |S_$93| |d_$0|)) ($select.sm ($statusmap |S_$93|) |p_$96|)) :pattern ( ($full_stop |S_$93|) ($set_in |p_$96| ($domain |S_$93| |d_$0|)) ($select.tm ($typemap |S_$93|) |p_$96|))))
    (forall( (|S_$94| $state) (|p_$97| $ptr) (|d_$1| $ptr) (|f_$24| $field))(!(=> (and (and ($full_stop |S_$94|) ($set_in |p_$97| ($domain |S_$94| |d_$1|))) ($is_primitive_non_volatile_field |f_$24|)) (and ($typed |S_$94| ($dot |p_$97| |f_$24|)) (not ($ts_is_volatile ($select.tm ($typemap |S_$94|) ($dot |p_$97| |f_$24|))))))  :pattern ( ($set_in |p_$97| ($domain |S_$94| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($owner |S_$94| ($dot |p_$97| |f_$24|))) :pattern ( ($set_in |p_$97| ($domain |S_$94| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($select.tm ($typemap |S_$94|) ($dot |p_$97| |f_$24|)))))
    (forall( (|S_$95| $state) (|p_$98| $ptr) (|d_$2| $ptr) (|f_$25| $field) (|sz_$16| Int) (|i_$10| Int) (|t_$23| $ctype))(!(=> (and (and (and (and ($full_stop |S_$95|) ($set_in |p_$98| ($domain |S_$95| |d_$2|))) ($is_primitive_embedded_array |f_$25| |sz_$16|)) (<= 0 |i_$10|)) (< |i_$10| |sz_$16|)) (= ($select.mem ($memory |S_$95|) ($idx ($dot |p_$98| |f_$25|) |i_$10| |t_$23|)) ($fetch_from_domain ($read_version |S_$95| |d_$2|) ($idx ($dot |p_$98| |f_$25|) |i_$10| |t_$23|))))  :pattern ( ($set_in |p_$98| ($domain |S_$95| |d_$2|)) ($is_primitive_embedded_array |f_$25| |sz_$16|) ($select.mem ($memory |S_$95|) ($idx ($dot |p_$98| |f_$25|) |i_$10| |t_$23|)))))
    (forall( (|S_$96| $state) (|p_$99| $ptr) (|d_$3| $ptr) (|f_$26| $field) (|sz_$17| Int) (|i_$11| Int) (|t_$24| $ctype))(!(=> (and (and (and (and ($full_stop |S_$96|) ($set_in |p_$99| ($domain |S_$96| |d_$3|))) ($is_primitive_embedded_array |f_$26| |sz_$17|)) (<= 0 |i_$11|)) (< |i_$11| |sz_$17|)) (and ($typed |S_$96| ($idx ($dot |p_$99| |f_$26|) |i_$11| |t_$24|)) (not ($ts_is_volatile ($select.tm ($typemap |S_$96|) ($idx ($dot |p_$99| |f_$26|) |i_$11| |t_$24|))))))  :pattern ( ($set_in |p_$99| ($domain |S_$96| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($select.tm ($typemap |S_$96|) ($idx ($dot |p_$99| |f_$26|) |i_$11| |t_$24|))) :pattern ( ($set_in |p_$99| ($domain |S_$96| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($owner |S_$96| ($idx ($dot |p_$99| |f_$26|) |i_$11| |t_$24|)))))
    (forall( (|S_$97| $state) (|r_$16| Int) (|d_$4| $ptr) (|sz_$18| Int) (|i_$12| Int) (|t_$25| $ctype))(!(=> (and (and (and (and ($full_stop |S_$97|) ($is_primitive |t_$25|)) ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$16|) ($domain |S_$97| |d_$4|))) (<= 0 |i_$12|)) (< |i_$12| |sz_$18|)) (and ($typed |S_$97| ($idx ($ptr |t_$25| |r_$16|) |i_$12| |t_$25|)) (not ($ts_is_volatile ($select.tm ($typemap |S_$97|) ($idx ($ptr |t_$25| |r_$16|) |i_$12| |t_$25|))))))  :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$16|) ($domain |S_$97| |d_$4|)) ($select.tm ($typemap |S_$97|) ($idx ($ptr |t_$25| |r_$16|) |i_$12| |t_$25|)) ($is_primitive |t_$25|)) :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$16|) ($domain |S_$97| |d_$4|)) ($owner |S_$97| ($idx ($ptr |t_$25| |r_$16|) |i_$12| |t_$25|)) ($is_primitive |t_$25|))))
    (forall( (|S_$98| $state) (|r_$17| Int) (|d_$5| $ptr) (|sz_$19| Int) (|i_$13| Int) (|t_$26| $ctype))(!(=> (and (and (and (and ($full_stop |S_$98|) ($is_primitive |t_$26|)) ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$17|) ($domain |S_$98| |d_$5|))) (<= 0 |i_$13|)) (< |i_$13| |sz_$19|)) (= ($select.mem ($memory |S_$98|) ($idx ($ptr |t_$26| |r_$17|) |i_$13| |t_$26|)) ($fetch_from_domain ($read_version |S_$98| |d_$5|) ($idx ($ptr |t_$26| |r_$17|) |i_$13| |t_$26|))))  :pattern ( ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$17|) ($domain |S_$98| |d_$5|)) ($select.mem ($memory |S_$98|) ($idx ($ptr |t_$26| |r_$17|) |i_$13| |t_$26|)) ($is_primitive |t_$26|))))
    (forall( (|S_$99| $state) (|p_$100| $ptr) (|f_$27| $field) (|sz_$20| Int) (|i_$14| Int) (|t_$27| $ctype))(!(=> (and (and (and ($good_state |S_$99|) ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|)) (<= 0 |i_$14|)) (< |i_$14| |sz_$20|)) ($ts_is_volatile ($select.tm ($typemap |S_$99|) ($idx ($dot |p_$100| |f_$27|) |i_$14| |t_$27|))))  :pattern ( ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|) ($ts_is_volatile ($select.tm ($typemap |S_$99|) ($idx ($dot |p_$100| |f_$27|) |i_$14| |t_$27|))))))
    (forall( (|s| $state))(= |s| |s|))
    (forall( (|S0_$2| $state) (|S_$114| $state) (|l_$4| $ptr) (|p_$111| $ptr))(!(and (and (and (and (and (= ($statusmap ($release |S0_$2| |S_$114| |l_$4| |p_$111|)) ($store.sm ($statusmap |S_$114|) |p_$111| ($released |S_$114| |l_$4| |p_$111|))) ($closed ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|)) (= ($owner ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|) $me)) (= ($ref_cnt ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|) ($ref_cnt |S_$114| |p_$111|))) (= ($timestamp ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|) ($current_timestamp |S0_$2|))) true)  :pattern ( ($release |S0_$2| |S_$114| |l_$4| |p_$111|))))
    (forall( (|S1_$11| $state) (|S2_$9| $state) (|r_$20| Int) (|t_$32| $ctype) (|subject_$4| $field))(!($instantiate_int ($select.mem ($memory |S2_$9|) ($dot ($ptr |t_$32| |r_$20|) |subject_$4|)))  :pattern ( ($is_owner_approved |t_$32| |subject_$4|) ($post_unwrap |S1_$11| |S2_$9|) ($select.mem ($memory |S1_$11|) ($dot ($ptr |t_$32| |r_$20|) |subject_$4|)))))
    (forall( (|S1_$16| $state) (|S2_$12| $state) (|p_$158| $ptr) (|W_$1| $ptrset))(!(= ($domain_updated_at |S1_$16| |S2_$12| |p_$158| |W_$1|) (and (forall( (|q_$21| $ptr))(!(=> (and (= ($kind_of ($typ |q_$21|)) $kind_primitive) (not ($set_in |q_$21| |W_$1|))) (= ($fetch_from_domain ($read_version |S1_$16| |p_$158|) |q_$21|) ($fetch_from_domain ($read_version |S2_$12| |p_$158|) |q_$21|)))  :pattern ( ($fetch_from_domain ($read_version |S2_$12| |p_$158|) |q_$21|)))) (= ($domain |S1_$16| |p_$158|) ($domain |S2_$12| |p_$158|))))  :pattern ( ($domain_updated_at |S1_$16| |S2_$12| |p_$158| |W_$1|))))
    (forall( (|S1_$4| $state) (|S0_$1| $state))(= (forall( (|r_$25| Int))(!(=> (and ($closed |S0_$1| ($ptr ^^claim |r_$25|)) ($closed |S1_$4| ($ptr ^^claim |r_$25|))) ($valid_claim |S1_$4| ($ptr ^^claim |r_$25|)))  :pattern ( ($closed |S1_$4| ($ptr ^^claim |r_$25|))))) (forall( (|r| Int))(!(=> (and ($closed |S0_$1| ($ptr ^^claim |r|)) ($closed |S1_$4| ($ptr ^^claim |r|))) ($valid_claim |S1_$4| ($ptr ^^claim |r|)))  :pattern ( ($closed |S1_$4| ($ptr ^^claim |r|)))))))
    (forall( (|S1_$5| $state) (|S2_$4| $state) (|p_$61| $ptr) (|sz_$13| Int))(!(=> (forall( (|i_$7| Int))(=> (and (<= 0 |i_$7|) (< |i_$7| |sz_$13|)) (= ($select.mem ($memory |S1_$5|) ($idx |p_$61| |i_$7| ($typ |p_$61|))) ($select.mem ($memory |S2_$4|) ($idx |p_$61| |i_$7| ($typ |p_$61|)))))) (= ($select_range.mem ($memory |S1_$5|) |p_$61| |sz_$13|) ($select_range.mem ($memory |S2_$4|) |p_$61| |sz_$13|)))  :pattern ( ($call_transition |S1_$5| |S2_$4|) ($select_range.mem ($memory |S2_$4|) |p_$61| |sz_$13|))))
    (forall( (|s1_$7| $ptrset) (|s2_$7| $ptrset))(!(=> (forall( (|p_$116| $ptr))(!(and (=> ($set_in |p_$116| |s1_$7|) (not ($set_in |p_$116| |s2_$7|))) (=> ($set_in |p_$116| |s2_$7|) (not ($set_in |p_$116| |s1_$7|))))  :pattern ( ($dont_instantiate |p_$116|)))) ($set_disjoint |s1_$7| |s2_$7|))  :weight  0 :pattern ( ($set_disjoint |s1_$7| |s2_$7|))))
    (forall( (|S1_$7| $state) (|S2_$6| $state) (|p_$80| $ptr))(!(=> ($call_transition |S1_$7| |S2_$6|) ($instantiate_int ($select.mem ($memory |S1_$7|) |p_$80|)))  :pattern ( ($select.mem ($memory |S2_$6|) |p_$80|) ($call_transition |S1_$7| |S2_$6|))))
    (forall( (|s1_$8| $state) (|s2_$8| $state) (|p_$139| $ptr) (|t_$34| $ctype) (|sz_$35| Int))(!(=> ($is_primitive |t_$34|) (=> ($state_spans_the_same |s1_$8| |s2_$8| |p_$139| ($array |t_$34| |sz_$35|)) (forall( (|i_$24| Int))(!(=> (and (<= 0 |i_$24|) (< |i_$24| |sz_$35|)) (= ($select.mem ($memory |s1_$8|) ($idx ($ptr |t_$34| ($ref |p_$139|)) |i_$24| |t_$34|)) ($select.mem ($memory |s2_$8|) ($idx ($ptr |t_$34| ($ref |p_$139|)) |i_$24| |t_$34|))))  :pattern ( ($select.mem ($memory |s2_$8|) ($idx ($ptr |t_$34| ($ref |p_$139|)) |i_$24| |t_$34|)))))))  :pattern ( ($state_spans_the_same |s1_$8| |s2_$8| |p_$139| ($array |t_$34| |sz_$35|)) ($is_primitive |t_$34|))))
    (forall( (|s2_$2| $state) (|s1_$2| $state))(= (forall( (|p_$28_$0| $ptr))(!(=> ($mutable |s1_$2| |p_$28_$0|) ($mutable |s2_$2| |p_$28_$0|))  :pattern ( ($select.sm ($statusmap |s2_$2|) |p_$28_$0|)) :pattern ( ($select.tm ($typemap |s2_$2|) |p_$28_$0|)))) (forall( (|p_$28| $ptr))(!(=> ($mutable |s1_$2| |p_$28|) ($mutable |s2_$2| |p_$28|))  :pattern ( ($select.sm ($statusmap |s2_$2|) |p_$28|)) :pattern ( ($select.tm ($typemap |s2_$2|) |p_$28|))))))
    (forall( (|s2_$3| $state) (|s1_$3| $state))(= (and (= ($typemap |s1_$3|) ($typemap |s2_$3|)) (= ($statusmap |s1_$3|) ($statusmap |s2_$3|))) (and (= ($typemap |s1_$3|) ($typemap |s2_$3|)) (= ($statusmap |s1_$3|) ($statusmap |s2_$3|)))))
    (forall( (|S2_$3| $state) (|S1_$3| $state))(= (and (and (and (and (forall( (|p_$37_$1| $ptr))(!(=> (not (= ($kind_of ($typ ($owner |S2_$3| |p_$37_$1|))) $kind_thread)) (not (= ($kind_of ($typ ($owner |S1_$3| |p_$37_$1|))) $kind_thread)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$37_$1|)))) (forall( (|p_$38_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$38_$1|) (and (= ($select.mem ($memory |S1_$3|) |p_$38_$1|) ($select.mem ($memory |S2_$3|) |p_$38_$1|)) ($thread_local |S2_$3| |p_$38_$1|)))  :pattern ( ($select.mem ($memory |S2_$3|) |p_$38_$1|))))) (forall( (|p_$39_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$39_$1|) (and (= ($select.sm ($statusmap |S1_$3|) |p_$39_$1|) ($select.sm ($statusmap |S2_$3|) |p_$39_$1|)) ($thread_local |S2_$3| |p_$39_$1|)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$39_$1|))))) (forall( (|p_$40_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$40_$1|) (and (= ($select.tm ($typemap |S1_$3|) |p_$40_$1|) ($select.tm ($typemap |S2_$3|) |p_$40_$1|)) ($thread_local |S2_$3| |p_$40_$1|)))  :pattern ( ($select.tm ($typemap |S2_$3|) |p_$40_$1|))))) (and (and (<= ($current_timestamp |S1_$3|) ($current_timestamp |S2_$3|)) (forall( (|p_$32_$3| $ptr))(!(<= ($timestamp |S1_$3| |p_$32_$3|) ($timestamp |S2_$3| |p_$32_$3|))  :weight  0 :pattern ( ($timestamp |S2_$3| |p_$32_$3|))))) ($call_transition |S1_$3| |S2_$3|))) (and (and (and (and (forall( (|p_$37| $ptr))(!(=> (not (= ($kind_of ($typ ($owner |S2_$3| |p_$37|))) $kind_thread)) (not (= ($kind_of ($typ ($owner |S1_$3| |p_$37|))) $kind_thread)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$37|)))) (forall( (|p_$38| $ptr))(!(=> ($thread_local |S1_$3| |p_$38|) (and (= ($select.mem ($memory |S1_$3|) |p_$38|) ($select.mem ($memory |S2_$3|) |p_$38|)) ($thread_local |S2_$3| |p_$38|)))  :pattern ( ($select.mem ($memory |S2_$3|) |p_$38|))))) (forall( (|p_$39| $ptr))(!(=> ($thread_local |S1_$3| |p_$39|) (and (= ($select.sm ($statusmap |S1_$3|) |p_$39|) ($select.sm ($statusmap |S2_$3|) |p_$39|)) ($thread_local |S2_$3| |p_$39|)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$39|))))) (forall( (|p_$40| $ptr))(!(=> ($thread_local |S1_$3| |p_$40|) (and (= ($select.tm ($typemap |S1_$3|) |p_$40|) ($select.tm ($typemap |S2_$3|) |p_$40|)) ($thread_local |S2_$3| |p_$40|)))  :pattern ( ($select.tm ($typemap |S2_$3|) |p_$40|))))) (and (and (<= ($current_timestamp |S1_$3|) ($current_timestamp |S2_$3|)) (forall( (|p_$32_$3| $ptr))(!(<= ($timestamp |S1_$3| |p_$32_$3|) ($timestamp |S2_$3| |p_$32_$3|))  :weight  0 :pattern ( ($timestamp |S2_$3| |p_$32_$3|))))) ($call_transition |S1_$3| |S2_$3|)))))
    (forall( (|subject_$0| $field) (|approver_$0| $field) (|this_$0| $ptr) (|S2_$1| $state) (|S1_$1| $state))(= (or (or (or (= ($select.mem ($memory |S1_$1|) ($dot |this_$0| |subject_$0|)) ($select.mem ($memory |S2_$1|) ($dot |this_$0| |subject_$0|))) (= ($ref ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|)))) 0)) (and (not ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|)))))) ($inv2 |S1_$1| |S2_$1| ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))) ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))))))) (and ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))))) (not (= ($read_vol_version |S1_$1| |this_$0|) ($read_vol_version |S2_$1| |this_$0|))))) (or (or (or (= ($select.mem ($memory |S1_$1|) ($dot |this_$0| |subject_$0|)) ($select.mem ($memory |S2_$1|) ($dot |this_$0| |subject_$0|))) (= ($ref ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|)))) 0)) (and (not ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|)))))) ($inv2 |S1_$1| |S2_$1| ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))) ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))))))) (and ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1|) ($dot |this_$0| |approver_$0|))))) (not (= ($read_vol_version |S1_$1| |this_$0|) ($read_vol_version |S2_$1| |this_$0|)))))))
    (forall( (|subject_$1| $field) (|this_$1| $ptr) (|S2_$2| $state) (|S1_$2| $state))(= (or (or (or (= ($select.mem ($memory |S1_$2|) ($dot |this_$1| |subject_$1|)) ($select.mem ($memory |S2_$2|) ($dot |this_$1| |subject_$1|))) (= ($ref ($owner |S1_$2| |this_$1|)) 0)) (and (not ($is_threadtype ($typ ($owner |S1_$2| |this_$1|)))) ($inv2 |S1_$2| |S2_$2| ($owner |S1_$2| |this_$1|) ($typ ($owner |S1_$2| |this_$1|))))) (and ($is_threadtype ($typ ($owner |S1_$2| |this_$1|))) (not (= ($read_vol_version |S1_$2| |this_$1|) ($read_vol_version |S2_$2| |this_$1|))))) (or (or (or (= ($select.mem ($memory |S1_$2|) ($dot |this_$1| |subject_$1|)) ($select.mem ($memory |S2_$2|) ($dot |this_$1| |subject_$1|))) (= ($ref ($owner |S1_$2| |this_$1|)) 0)) (and (not ($is_threadtype ($typ ($owner |S1_$2| |this_$1|)))) ($inv2 |S1_$2| |S2_$2| ($owner |S1_$2| |this_$1|) ($typ ($owner |S1_$2| |this_$1|))))) (and ($is_threadtype ($typ ($owner |S1_$2| |this_$1|))) (not (= ($read_vol_version |S1_$2| |this_$1|) ($read_vol_version |S2_$2| |this_$1|)))))))
    (forall( (|subject| $field) (|approver| $ptr) (|this| $ptr) (|S2_$0| $state) (|S1_$0| $state))(= (or (or (or (= ($select.mem ($memory |S1_$0|) ($dot |this| |subject|)) ($select.mem ($memory |S2_$0|) ($dot |this| |subject|))) (= ($ref |approver|) 0)) (and (not ($is_threadtype ($typ |approver|))) ($inv2 |S1_$0| |S2_$0| |approver| ($typ |approver|)))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S1_$0| |this|) ($read_vol_version |S2_$0| |this|))))) (or (or (or (= ($select.mem ($memory |S1_$0|) ($dot |this| |subject|)) ($select.mem ($memory |S2_$0|) ($dot |this| |subject|))) (= ($ref |approver|) 0)) (and (not ($is_threadtype ($typ |approver|))) ($inv2 |S1_$0| |S2_$0| |approver| ($typ |approver|)))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S1_$0| |this|) ($read_vol_version |S2_$0| |this|)))))))
    (forall( (|sz_$0| Int) (|T| $ctype) (|p_$35| $ptr))(= (and ($is |p_$35| |T|) (forall( (|S_$40_$1| $state) (|i_$0_$1| Int))(!(=> ($good_state |S_$40_$1|) (=> (and (<= 0 |i_$0_$1|) (< |i_$0_$1| |sz_$0|)) (and (and (not ($ts_is_volatile ($select.tm ($typemap |S_$40_$1|) ($idx |p_$35| |i_$0_$1| |T|)))) ($typed |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|))) (=> ($program_entry_point_ch |S_$40_$1|) ($mutable |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|))))))  :pattern ( ($select.sm ($statusmap |S_$40_$1|) ($idx |p_$35| |i_$0_$1| |T|))) :pattern ( ($select.tm ($typemap |S_$40_$1|) ($idx |p_$35| |i_$0_$1| |T|)))))) (and ($is |p_$35| |T|) (forall( (|S_$40| $state) (|i_$0| Int))(!(=> ($good_state |S_$40|) (=> (and (<= 0 |i_$0|) (< |i_$0| |sz_$0|)) (and (and (not ($ts_is_volatile ($select.tm ($typemap |S_$40|) ($idx |p_$35| |i_$0| |T|)))) ($typed |S_$40| ($idx |p_$35| |i_$0| |T|))) (=> ($program_entry_point_ch |S_$40|) ($mutable |S_$40| ($idx |p_$35| |i_$0| |T|))))))  :pattern ( ($select.sm ($statusmap |S_$40|) ($idx |p_$35| |i_$0| |T|))) :pattern ( ($select.tm ($typemap |S_$40|) ($idx |p_$35| |i_$0| |T|))))))))
    (forall( (|sz_$1| Int) (|T_$0| $ctype) (|p_$41| $ptr) (|S_$46| $state))(= (forall( (|i_$1_$0| Int))(!(=> (and (<= 0 |i_$1_$0|) (< |i_$1_$0| |sz_$1|)) (and ($is ($idx |p_$41| |i_$1_$0| |T_$0|) |T_$0|) ($thread_local |S_$46| ($idx |p_$41| |i_$1_$0| |T_$0|))))  :pattern ( ($select.sm ($statusmap |S_$46|) ($idx |p_$41| |i_$1_$0| |T_$0|))) :pattern ( ($select.tm ($typemap |S_$46|) ($idx |p_$41| |i_$1_$0| |T_$0|))))) (forall( (|i_$1| Int))(!(=> (and (<= 0 |i_$1|) (< |i_$1| |sz_$1|)) (and ($is ($idx |p_$41| |i_$1| |T_$0|) |T_$0|) ($thread_local |S_$46| ($idx |p_$41| |i_$1| |T_$0|))))  :pattern ( ($select.sm ($statusmap |S_$46|) ($idx |p_$41| |i_$1| |T_$0|))) :pattern ( ($select.tm ($typemap |S_$46|) ($idx |p_$41| |i_$1| |T_$0|)))))))
    (forall( (|sz_$10| Int) (|T_$9| $ctype) (|arr_$1| $ptr) (|q_$0| $ptr))(= (and (and (<= 0 ($index_within |q_$0| |arr_$1|)) (<= ($index_within |q_$0| |arr_$1|) (- |sz_$10| 1))) ($set_in |q_$0| ($full_extent ($idx |arr_$1| ($index_within |q_$0| |arr_$1|) |T_$9|)))) (and (and (<= 0 ($index_within |q_$0| |arr_$1|)) (<= ($index_within |q_$0| |arr_$1|) (- |sz_$10| 1))) ($set_in |q_$0| ($full_extent ($idx |arr_$1| ($index_within |q_$0| |arr_$1|) |T_$9|))))))
    (forall( (|sz_$11| Int) (|T_$10| $ctype) (|arr_$2| $ptr) (|q_$1| $ptr) (|S_$53| $state))(= (and (and (<= 0 ($index_within |q_$1| |arr_$2|)) (<= ($index_within |q_$1| |arr_$2|) (- |sz_$11| 1))) ($set_in |q_$1| ($extent |S_$53| ($idx |arr_$2| ($index_within |q_$1| |arr_$2|) |T_$10|)))) (and (and (<= 0 ($index_within |q_$1| |arr_$2|)) (<= ($index_within |q_$1| |arr_$2|) (- |sz_$11| 1))) ($set_in |q_$1| ($extent |S_$53| ($idx |arr_$2| ($index_within |q_$1| |arr_$2|) |T_$10|))))))
    (forall( (|sz_$2| Int) (|T_$1| $ctype) (|p_$42| $ptr) (|S_$47| $state))(= (and ($is_array |S_$47| |p_$42| |T_$1| |sz_$2|) (forall( (|i_$2_$1| Int))(!(=> (and (<= 0 |i_$2_$1|) (< |i_$2_$1| |sz_$2|)) ($mutable |S_$47| ($idx |p_$42| |i_$2_$1| |T_$1|)))  :pattern ( ($select.sm ($statusmap |S_$47|) ($idx |p_$42| |i_$2_$1| |T_$1|))) :pattern ( ($select.tm ($typemap |S_$47|) ($idx |p_$42| |i_$2_$1| |T_$1|)))))) (and ($is_array |S_$47| |p_$42| |T_$1| |sz_$2|) (forall( (|i_$2| Int))(!(=> (and (<= 0 |i_$2|) (< |i_$2| |sz_$2|)) ($mutable |S_$47| ($idx |p_$42| |i_$2| |T_$1|)))  :pattern ( ($select.sm ($statusmap |S_$47|) ($idx |p_$42| |i_$2| |T_$1|))) :pattern ( ($select.tm ($typemap |S_$47|) ($idx |p_$42| |i_$2| |T_$1|))))))))
    (forall( (|sz_$7| Int) (|T_$6| $ctype) (|p_$49| $ptr))(= ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)) ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|))))
    (forall( (|sz_$8| Int) (|T_$7| $ctype) (|arr| $ptr) (|s2_$4| $state) (|s1_$4| $state))(= (forall( (|#i_$1| Int))(!(=> (and (<= 0 |#i_$1|) (< |#i_$1| |sz_$8|)) (= ($select.mem ($memory |s1_$4|) ($idx |arr| |#i_$1| |T_$7|)) ($select.mem ($memory |s2_$4|) ($idx |arr| |#i_$1| |T_$7|))))  :pattern ( ($idx |arr| |#i_$1| |T_$7|)))) (forall( (|#i| Int))(!(=> (and (<= 0 |#i|) (< |#i| |sz_$8|)) (= ($select.mem ($memory |s1_$4|) ($idx |arr| |#i| |T_$7|)) ($select.mem ($memory |s2_$4|) ($idx |arr| |#i| |T_$7|))))  :pattern ( ($idx |arr| |#i| |T_$7|))))))
    (forall( (|sz_$9| Int) (|T_$8| $ctype) (|arr_$0| $ptr) (|q| $ptr))(= (and (and (<= 0 ($index_within |q| |arr_$0|)) (<= ($index_within |q| |arr_$0|) (- |sz_$9| 1))) (= |q| ($idx |arr_$0| ($index_within |q| |arr_$0|) |T_$8|))) (and (and (<= 0 ($index_within |q| |arr_$0|)) (<= ($index_within |q| |arr_$0|) (- |sz_$9| 1))) (= |q| ($idx |arr_$0| ($index_within |q| |arr_$0|) |T_$8|)))))
    (forall( (|sz| Int) (|p_$3| $ptr) (|s_$1| $state))(= ($select_range.mem ($memory |s_$1|) |p_$3| |sz|) ($select_range.mem ($memory |s_$1|) |p_$3| |sz|)))
    (forall( (|t_$0| $ctype))(= (= ($kind_of |t_$0|) $kind_composite) (= ($kind_of |t_$0|) $kind_composite)))
    (forall( (|t_$1| $ctype))(= (= ($kind_of |t_$1|) $kind_array) (= ($kind_of |t_$1|) $kind_array)))
    (forall( (|t_$10| $ctype))(!(= ($is_primitive |t_$10|) (= ($kind_of |t_$10|) $kind_primitive))  :weight  0 :pattern ( ($is_primitive |t_$10|))))
    (forall( (|t_$11| $ctype))(!(= ($is_composite |t_$11|) (= ($kind_of |t_$11|) $kind_composite))  :weight  0 :pattern ( ($is_composite |t_$11|))))
    (forall( (|T_$11| $ctype))(!(=> ($is_primitive |T_$11|) (and (forall( (|r_$6| Int) (|p_$84| $ptr))(!(= ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|))) (= |p_$84| ($ptr |T_$11| |r_$6|)))  :pattern ( ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|)))))) (forall( (|r_$7| Int) (|S_$73| $state))(!(= ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|)) ($mutable |S_$73| ($ptr |T_$11| |r_$7|)))  :pattern ( ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|)))))))  :pattern ( ($is_primitive |T_$11|))))
    (forall( (|t_$12| $ctype))(!(= ($is_arraytype |t_$12|) (= ($kind_of |t_$12|) $kind_array))  :weight  0 :pattern ( ($is_arraytype |t_$12|))))
    (forall( (|T_$12| $ctype))(!(=> ($is_primitive |T_$12|) (forall( (|S_$74| $state) (|r_$8| Int) (|p_$85| $ptr))(!(= ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|))) (= |p_$85| ($ptr |T_$12| |r_$8|)))  :pattern ( ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|)))))))  :pattern ( ($is_primitive |T_$12|))))
    (forall( (|t_$13| $ctype))(!(= ($is_threadtype |t_$13|) (= ($kind_of |t_$13|) $kind_thread))  :weight  0 :pattern ( ($is_threadtype |t_$13|))))
    (forall( (|t_$14| $ctype))(!(=> ($is_composite |t_$14|) ($is_non_primitive |t_$14|))  :weight  0 :pattern ( ($is_composite |t_$14|))))
    (forall( (|T_$14| $ctype))(!(=> ($is_primitive |T_$14|) (forall( (|S_$76| $state) (|r_$10| Int))(!(= ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|)) (= ($select.mem ($memory |S_$76|) ($ptr |T_$14| |r_$10|)) 0))  :pattern ( ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|))))))  :pattern ( ($is_primitive |T_$14|))))
    (forall( (|t_$15| $ctype))(!(=> ($is_arraytype |t_$15|) ($is_non_primitive |t_$15|))  :weight  0 :pattern ( ($is_arraytype |t_$15|))))
    (forall( (|T_$16| $ctype) (|s_$12| Int))(!(= ($element_type ($array |T_$16| |s_$12|)) |T_$16|)  :pattern ( ($array |T_$16| |s_$12|))))
    (forall( (|t_$16| $ctype))(!(=> ($is_threadtype |t_$16|) ($is_non_primitive |t_$16|))  :weight  0 :pattern ( ($is_threadtype |t_$16|))))
    (forall( (|T_$17| $ctype) (|s_$13| Int))(!(= ($array_length ($array |T_$17| |s_$13|)) |s_$13|)  :pattern ( ($array |T_$17| |s_$13|))))
    (forall( (|T_$18| $ctype) (|s_$14| Int))(!(= ($ptr_level ($array |T_$18| |s_$14|)) 0)  :pattern ( ($array |T_$18| |s_$14|))))
    (forall( (|T_$19| $ctype) (|s_$15| Int))(!($is_arraytype ($array |T_$19| |s_$15|))  :pattern ( ($array |T_$19| |s_$15|))))
    (forall( (|t_$19| $ctype))(!(=> ($is_record_type |t_$19|) ($is_primitive |t_$19|))  :pattern ( ($is_record_type |t_$19|))))
    (forall( (|t_$2| $ctype))(= (not (= ($kind_of |t_$2|) $kind_primitive)) (not (= ($kind_of |t_$2|) $kind_primitive))))
    (forall( (|T_$20| $ctype) (|s_$16| Int))(!(not ($is_claimable ($array |T_$20| |s_$16|)))  :pattern ( ($array |T_$20| |s_$16|))))
    (forall( (|T_$21| $ctype) (|s_$17| Int))(!(= ($sizeof ($array |T_$21| |s_$17|)) (* ($sizeof |T_$21|) |s_$17|))  :pattern ( ($sizeof ($array |T_$21| |s_$17|)))))
    (forall( (|t_$3| $ctype) (|p_$7| $ptr) (|S| $state))(= ($ptr |t_$3| ($select.mem ($memory |S|) |p_$7|)) ($ptr |t_$3| ($select.mem ($memory |S|) |p_$7|))))
    (forall( (|t_$38| $ctype) (|x_$26| Int) (|y_$8| Int))(!(= ($unchk_add |t_$38| |x_$26| |y_$8|) ($unchecked |t_$38| (+ |x_$26| |y_$8|)))  :weight  0 :pattern ( ($unchk_add |t_$38| |x_$26| |y_$8|))))
    (forall( (|t_$4| $ctype) (|f| $field))(= (and ($is_base_field |f|) (= ($field_parent_type |f|) |t_$4|)) (and ($is_base_field |f|) (= ($field_parent_type |f|) |t_$4|))))
    (forall( (|t_$42| $ctype) (|val_$17| Int))(!(=> ($in_range_t |t_$42| |val_$17|) (= ($unchecked |t_$42| |val_$17|) |val_$17|))  :pattern ( ($unchecked |t_$42| |val_$17|))))
    (forall( (|t_$43| $ctype) (|val_$18| Int))(!($in_range_t |t_$43| ($unchecked |t_$43| |val_$18|))  :pattern ( ($unchecked |t_$43| |val_$18|))))
    (forall( (|t_$44| $ctype) (|x_$40| Int) (|y_$15| Int) (|z_$0| Int))(!(=> (and (and ($in_range_t |t_$44| |x_$40|) ($in_range_t |t_$44| (- ($_pow2 |y_$15|) 1))) (>= |x_$40| 0)) (= (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| (- ($_pow2 |y_$15|) 1))))  :pattern ( (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| |z_$0|))))
    (forall( (|t_$45| $ctype) (|x_$46| Int) (|y_$21| Int))(!(=> (and (<= 0 |x_$46|) ($in_range_t |t_$45| |x_$46|)) (and (<= 0 ($_and |t_$45| |x_$46| |y_$21|)) (<= ($_and |t_$45| |x_$46| |y_$21|) |x_$46|)))  :pattern ( ($_and |t_$45| |x_$46| |y_$21|))))
    (forall( (|t_$46| $ctype) (|x_$47| Int) (|y_$22| Int))(!(=> (and (and (and (<= 0 |x_$47|) (<= 0 |y_$22|)) ($in_range_t |t_$46| |x_$47|)) ($in_range_t |t_$46| |y_$22|)) (and (<= ($_and |t_$46| |x_$47| |y_$22|) |x_$47|) (<= ($_and |t_$46| |x_$47| |y_$22|) |y_$22|)))  :pattern ( ($_and |t_$46| |x_$47| |y_$22|))))
    (forall( (|t_$47| $ctype) (|x_$48| Int) (|y_$23| Int))(!(=> (and (and (and (<= 0 |x_$48|) (<= 0 |y_$23|)) ($in_range_t |t_$47| |x_$48|)) ($in_range_t |t_$47| |y_$23|)) (and (<= 0 ($_or |t_$47| |x_$48| |y_$23|)) (<= ($_or |t_$47| |x_$48| |y_$23|) (+ |x_$48| |y_$23|))))  :pattern ( ($_or |t_$47| |x_$48| |y_$23|))))
    (forall( (|t_$48| $ctype) (|x_$49| Int) (|y_$24| Int))(!(=> (and (and (and (<= 0 |x_$49|) (<= 0 |y_$24|)) ($in_range_t |t_$48| |x_$49|)) ($in_range_t |t_$48| |y_$24|)) (and (<= |x_$49| ($_or |t_$48| |x_$49| |y_$24|)) (<= |y_$24| ($_or |t_$48| |x_$49| |y_$24|))))  :pattern ( ($_or |t_$48| |x_$49| |y_$24|))))
    (forall( (|t_$49| $ctype) (|x_$50| Int) (|y_$25| Int) (|z_$1| Int))(!(=> (and (and (and (and (and (and (and (<= 0 |x_$50|) (<= 0 |y_$25|)) (<= 0 |z_$1|)) (< |z_$1| 64)) (< |x_$50| ($_pow2 |z_$1|))) (< |y_$25| ($_pow2 |z_$1|))) ($in_range_t |t_$49| |x_$50|)) ($in_range_t |t_$49| |y_$25|)) (< ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|)))  :pattern ( ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|))))
    (forall( (|t_$5| $ctype) (|s_$2| $struct))(= ($ptr |t_$5| ($vs_base_ref |s_$2|)) ($ptr |t_$5| ($vs_base_ref |s_$2|))))
    (forall( (|t_$50| $ctype) (|x_$51| Int) (|y_$26| Int))(!(=> (and (and (<= 0 |x_$51|) (<= |x_$51| $max.u1)) (and (<= 0 |y_$26|) (<= |y_$26| $max.u1))) (and (<= 0 ($_or |t_$50| |x_$51| |y_$26|)) (<= ($_or |t_$50| |x_$51| |y_$26|) $max.u1)))  :pattern ( ($_or |t_$50| |x_$51| |y_$26|))))
    (forall( (|t_$51| $ctype) (|x_$52| Int) (|y_$27| Int))(!(=> (and (and (<= 0 |x_$52|) (<= |x_$52| $max.u2)) (and (<= 0 |y_$27|) (<= |y_$27| $max.u2))) (and (<= 0 ($_or |t_$51| |x_$52| |y_$27|)) (<= ($_or |t_$51| |x_$52| |y_$27|) $max.u2)))  :pattern ( ($_or |t_$51| |x_$52| |y_$27|))))
    (forall( (|t_$52| $ctype) (|x_$53| Int) (|y_$28| Int))(!(=> (and (and (<= 0 |x_$53|) (<= |x_$53| $max.u4)) (and (<= 0 |y_$28|) (<= |y_$28| $max.u4))) (and (<= 0 ($_or |t_$52| |x_$53| |y_$28|)) (<= ($_or |t_$52| |x_$53| |y_$28|) $max.u4)))  :pattern ( ($_or |t_$52| |x_$53| |y_$28|))))
    (forall( (|t_$53| $ctype) (|x_$54| Int) (|y_$29| Int))(!(=> (and (and (<= 0 |x_$54|) (<= |x_$54| $max.u8)) (and (<= 0 |y_$29|) (<= |y_$29| $max.u8))) (and (<= 0 ($_or |t_$53| |x_$54| |y_$29|)) (<= ($_or |t_$53| |x_$54| |y_$29|) $max.u8)))  :pattern ( ($_or |t_$53| |x_$54| |y_$29|))))
    (forall( (|t_$54| $ctype) (|x_$55| Int) (|y_$30| Int))(!(=> (and (and (<= 0 |x_$55|) (<= |x_$55| $max.u1)) (and (<= 0 |y_$30|) (<= |y_$30| $max.u1))) (and (<= 0 ($_and |t_$54| |x_$55| |y_$30|)) (<= ($_and |t_$54| |x_$55| |y_$30|) $max.u1)))  :pattern ( ($_and |t_$54| |x_$55| |y_$30|))))
    (forall( (|t_$55| $ctype) (|x_$56| Int) (|y_$31| Int))(!(=> (and (and (<= 0 |x_$56|) (<= |x_$56| $max.u2)) (and (<= 0 |y_$31|) (<= |y_$31| $max.u2))) (and (<= 0 ($_and |t_$55| |x_$56| |y_$31|)) (<= ($_and |t_$55| |x_$56| |y_$31|) $max.u2)))  :pattern ( ($_and |t_$55| |x_$56| |y_$31|))))
    (forall( (|t_$56| $ctype) (|x_$57| Int) (|y_$32| Int))(!(=> (and (and (<= 0 |x_$57|) (<= |x_$57| $max.u4)) (and (<= 0 |y_$32|) (<= |y_$32| $max.u4))) (and (<= 0 ($_and |t_$56| |x_$57| |y_$32|)) (<= ($_and |t_$56| |x_$57| |y_$32|) $max.u4)))  :pattern ( ($_and |t_$56| |x_$57| |y_$32|))))
    (forall( (|t_$57| $ctype) (|x_$58| Int) (|y_$33| Int))(!(=> (and (and (<= 0 |x_$58|) (<= |x_$58| $max.u8)) (and (<= 0 |y_$33|) (<= |y_$33| $max.u8))) (and (<= 0 ($_and |t_$57| |x_$58| |y_$33|)) (<= ($_and |t_$57| |x_$58| |y_$33|) $max.u8)))  :pattern ( ($_and |t_$57| |x_$58| |y_$33|))))
    (forall( (|t_$58| $ctype) (|x_$59| Int) (|y_$34| Int))(!(=> (and (and (<= 0 |x_$59|) (<= |x_$59| $max.u1)) (and (<= 0 |y_$34|) (<= |y_$34| $max.u1))) (and (<= 0 ($_xor |t_$58| |x_$59| |y_$34|)) (<= ($_xor |t_$58| |x_$59| |y_$34|) $max.u1)))  :pattern ( ($_xor |t_$58| |x_$59| |y_$34|))))
    (forall( (|t_$59| $ctype) (|x_$60| Int) (|y_$35| Int))(!(=> (and (and (<= 0 |x_$60|) (<= |x_$60| $max.u2)) (and (<= 0 |y_$35|) (<= |y_$35| $max.u2))) (and (<= 0 ($_xor |t_$59| |x_$60| |y_$35|)) (<= ($_xor |t_$59| |x_$60| |y_$35|) $max.u2)))  :pattern ( ($_xor |t_$59| |x_$60| |y_$35|))))
    (forall( (|t_$60| $ctype) (|x_$61| Int) (|y_$36| Int))(!(=> (and (and (<= 0 |x_$61|) (<= |x_$61| $max.u4)) (and (<= 0 |y_$36|) (<= |y_$36| $max.u4))) (and (<= 0 ($_xor |t_$60| |x_$61| |y_$36|)) (<= ($_xor |t_$60| |x_$61| |y_$36|) $max.u4)))  :pattern ( ($_xor |t_$60| |x_$61| |y_$36|))))
    (forall( (|t_$61| $ctype) (|x_$62| Int) (|y_$37| Int))(!(=> (and (and (<= 0 |x_$62|) (<= |x_$62| $max.u8)) (and (<= 0 |y_$37|) (<= |y_$37| $max.u8))) (and (<= 0 ($_xor |t_$61| |x_$62| |y_$37|)) (<= ($_xor |t_$61| |x_$62| |y_$37|) $max.u8)))  :pattern ( ($_xor |t_$61| |x_$62| |y_$37|))))
    (forall( (|t_$62| $ctype) (|x_$63| Int))(!($in_range_t |t_$62| ($_not |t_$62| |x_$63|))  :pattern ( ($_not |t_$62| |x_$63|))))
    (forall( (|t_$63| $ctype) (|x_$64| Int))(!(= ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|)) ($_not |t_$63| 0))  :pattern ( ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|)))))
    (forall( (|t_$64| $ctype) (|x_$65| Int))(!(= ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|)) 0)  :pattern ( ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|)))))
    (forall( (|t_$65| $ctype) (|x_$66| Int))(!(=> ($in_range_t |t_$65| |x_$66|) (= ($_or |t_$65| |x_$66| 0) |x_$66|))  :pattern ( ($_or |t_$65| |x_$66| 0))))
    (forall( (|t_$66| $ctype) (|x_$67| Int))(!(= ($_or |t_$66| |x_$67| ($_not |t_$66| 0)) ($_not |t_$66| 0))  :pattern ( ($_or |t_$66| |x_$67| ($_not |t_$66| 0)))))
    (forall( (|t_$67| $ctype) (|x_$68| Int))(!(=> ($in_range_t |t_$67| |x_$68|) (= ($_or |t_$67| |x_$68| |x_$68|) |x_$68|))  :pattern ( ($_or |t_$67| |x_$68| |x_$68|))))
    (forall( (|t_$68| $ctype) (|x_$69| Int))(!(= ($_and |t_$68| |x_$69| 0) 0)  :pattern ( ($_and |t_$68| |x_$69| 0))))
    (forall( (|t_$69| $ctype) (|x_$70| Int))(!(=> ($in_range_t |t_$69| |x_$70|) (= ($_and |t_$69| |x_$70| ($_not |t_$69| 0)) |x_$70|))  :pattern ( ($_and |t_$69| |x_$70| ($_not |t_$69| 0)))))
    (forall( (|t_$7| $ctype) (|p_$34| $ptr))(= (and (and (and (forall( (|S_$36_$1| $state))(!(=> ($good_state |S_$36_$1|) (and ($typed |S_$36_$1| |p_$34|) (= ($ts_emb ($select.tm ($typemap |S_$36_$1|) |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$36_$1|) |p_$34|)))) (forall( (|S_$37_$1| $state) (|f_$2_$1| $field))(!(=> ($good_state |S_$37_$1|) (and ($typed |S_$37_$1| |p_$34|) (= ($ts_emb ($select.tm ($typemap |S_$37_$1|) |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$37_$1|) ($dot |p_$34| |f_$2_$1|)))))) (forall( (|S_$38_$1| $state) (|f_$3_$1| $field) (|i_$30| Int) (|tt_$1| $ctype))(!(=> ($good_state |S_$38_$1|) (and ($typed |S_$38_$1| |p_$34|) (= ($ts_emb ($select.tm ($typemap |S_$38_$1|) |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$38_$1|) ($idx ($dot |p_$34| |f_$3_$1|) |i_$30| |tt_$1|)))))) (forall( (|S_$39_$1| $state))(!(=> ($program_entry_point |S_$39_$1|) (and ($extent_mutable |S_$39_$1| |p_$34|) (= ($owns |S_$39_$1| |p_$34|) $set_empty)))  :pattern ( ($program_entry_point |S_$39_$1|))))) (and (and (and (forall( (|S_$36| $state))(!(=> ($good_state |S_$36|) (and ($typed |S_$36| |p_$34|) (= ($ts_emb ($select.tm ($typemap |S_$36|) |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$36|) |p_$34|)))) (forall( (|S_$37| $state) (|f_$2| $field))(!(=> ($good_state |S_$37|) (and ($typed |S_$37| |p_$34|) (= ($ts_emb ($select.tm ($typemap |S_$37|) |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$37|) ($dot |p_$34| |f_$2|)))))) (forall( (|S_$38| $state) (|f_$3| $field) (|i| Int) (|tt| $ctype))(!(=> ($good_state |S_$38|) (and ($typed |S_$38| |p_$34|) (= ($ts_emb ($select.tm ($typemap |S_$38|) |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$38|) ($idx ($dot |p_$34| |f_$3|) |i| |tt|)))))) (forall( (|S_$39| $state))(!(=> ($program_entry_point |S_$39|) (and ($extent_mutable |S_$39| |p_$34|) (= ($owns |S_$39| |p_$34|) $set_empty)))  :pattern ( ($program_entry_point |S_$39|)))))))
    (forall( (|t_$70| $ctype) (|x_$71| Int))(!(=> ($in_range_t |t_$70| |x_$71|) (= ($_and |t_$70| |x_$71| |x_$71|) |x_$71|))  :pattern ( ($_and |t_$70| |x_$71| |x_$71|))))
    (forall( (|t_$71| $ctype) (|x_$72| Int) (|y_$38| Int))(!(= ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|) |y_$38|)  :pattern ( ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|))))
    (forall( (|t_$72| $ctype) (|x_$73| Int) (|y_$39| Int))(!(= ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|) |x_$73|)  :pattern ( ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|))))
    (forall( (|t_$73| $ctype) (|x_$74| Int))(!(=> ($in_range_t |t_$73| |x_$74|) (= ($_xor |t_$73| |x_$74| 0) |x_$74|))  :pattern ( ($_xor |t_$73| |x_$74| 0))))
    (forall( (|t_$74| $ctype) (|x_$75| Int))(!(= ($_xor |t_$74| |x_$75| |x_$75|) 0)  :pattern ( ($_xor |t_$74| |x_$75| |x_$75|))))
    (forall( (|t_$75| $ctype) (|x_$76| Int))(!(= ($_xor |t_$75| |x_$76| ($_not |t_$75| 0)) ($_not |t_$75| |x_$76|))  :pattern ( ($_xor |t_$75| |x_$76| ($_not |t_$75| 0)))))
    (forall( (|t_$76| $ctype) (|x_$77| Int))(!(=> ($in_range_t |t_$76| |x_$77|) (= ($_not |t_$76| ($_not |t_$76| |x_$77|)) |x_$77|))  :pattern ( ($_not |t_$76| ($_not |t_$76| |x_$77|)))))
    (forall( (|t_$77| $ctype) (|x_$78| Int) (|y_$40| Int))(!(= ($_or |t_$77| |x_$78| |y_$40|) ($_or |t_$77| |y_$40| |x_$78|))  :pattern ( ($_or |t_$77| |x_$78| |y_$40|))))
    (forall( (|t_$78| $ctype) (|x_$79| Int) (|y_$41| Int))(!(= ($_xor |t_$78| |x_$79| |y_$41|) ($_xor |t_$78| |y_$41| |x_$79|))  :pattern ( ($_xor |t_$78| |x_$79| |y_$41|))))
    (forall( (|t_$79| $ctype) (|x_$80| Int) (|y_$42| Int))(!(= ($_and |t_$79| |x_$80| |y_$42|) ($_and |t_$79| |y_$42| |x_$80|))  :pattern ( ($_and |t_$79| |x_$80| |y_$42|))))
    (forall( (|t_$89| $ctype))(!(=> ($is_math_type |t_$89|) ($is_primitive |t_$89|))  :pattern ( ($is_math_type |t_$89|))))
    (forall( (|t_$90| $ctype))(!(=> ($is_fnptr_type |t_$90|) ($is_primitive |t_$90|))  :pattern ( ($is_fnptr_type |t_$90|))))
    (forall( (|t| $ctype))(= (= ($kind_of |t|) $kind_primitive) (= ($kind_of |t|) $kind_primitive)))
    (forall( (|tok_$0| $token) (|c_$0| $ptr) (|#s2_$2| $state) (|#s1_$4| $state))(= (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$4|) ($full_stop |#s1_$4|)) ($good_state_ext |tok_$0| |#s2_$2|)) (forall( (|#p_$10_$4| $ptr) (|#q_$14| $ptr))(!(=> (and (and ($good_state |#s1_$4|) ($set_in |#p_$10_$4| ($owns |#s1_$4| |#q_$14|))) ($closed |#s1_$4| |#q_$14|)) (and ($closed |#s1_$4| |#p_$10_$4|) (not (= ($ref |#p_$10_$4|) 0))))  :pattern ( ($set_in |#p_$10_$4| ($owns |#s1_$4| |#q_$14|)))))) (forall( (|#p_$10_$5| $ptr) (|#q_$15| $ptr))(!(=> (and (and ($good_state |#s2_$2|) ($set_in |#p_$10_$5| ($owns |#s2_$2| |#q_$15|))) ($closed |#s2_$2| |#q_$15|)) (and ($closed |#s2_$2| |#p_$10_$5|) (not (= ($ref |#p_$10_$5|) 0))))  :pattern ( ($set_in |#p_$10_$5| ($owns |#s2_$2| |#q_$15|)))))) (forall( (|#p_$9_$1| $ptr))(!(or (and (not ($closed |#s1_$4| |#p_$9_$1|)) (not ($closed |#s2_$2| |#p_$9_$1|))) (and ($inv2 |#s1_$4| |#s2_$2| |#p_$9_$1| ($typ |#p_$9_$1|)) ($nonvolatile_spans_the_same |#s1_$4| |#s2_$2| |#p_$9_$1| ($typ |#p_$9_$1|))))  :pattern ( ($closed |#s1_$4| |#p_$9_$1|)) :pattern ( ($closed |#s2_$2| |#p_$9_$1|))))) ($valid_claim |#s1_$4| |c_$0|)) ($closed |#s2_$2| |c_$0|)) true) (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$4|) ($full_stop |#s1_$4|)) ($good_state_ext |tok_$0| |#s2_$2|)) (forall( (|#p_$10_$6| $ptr) (|#q_$16| $ptr))(!(=> (and (and ($good_state |#s1_$4|) ($set_in |#p_$10_$6| ($owns |#s1_$4| |#q_$16|))) ($closed |#s1_$4| |#q_$16|)) (and ($closed |#s1_$4| |#p_$10_$6|) (not (= ($ref |#p_$10_$6|) 0))))  :pattern ( ($set_in |#p_$10_$6| ($owns |#s1_$4| |#q_$16|)))))) (forall( (|#p_$10_$7| $ptr) (|#q_$17| $ptr))(!(=> (and (and ($good_state |#s2_$2|) ($set_in |#p_$10_$7| ($owns |#s2_$2| |#q_$17|))) ($closed |#s2_$2| |#q_$17|)) (and ($closed |#s2_$2| |#p_$10_$7|) (not (= ($ref |#p_$10_$7|) 0))))  :pattern ( ($set_in |#p_$10_$7| ($owns |#s2_$2| |#q_$17|)))))) (forall( (|#p_$9_$2| $ptr))(!(or (and (not ($closed |#s1_$4| |#p_$9_$2|)) (not ($closed |#s2_$2| |#p_$9_$2|))) (and ($inv2 |#s1_$4| |#s2_$2| |#p_$9_$2| ($typ |#p_$9_$2|)) ($nonvolatile_spans_the_same |#s1_$4| |#s2_$2| |#p_$9_$2| ($typ |#p_$9_$2|))))  :pattern ( ($closed |#s1_$4| |#p_$9_$2|)) :pattern ( ($closed |#s2_$2| |#p_$9_$2|))))) ($valid_claim |#s1_$4| |c_$0|)) ($closed |#s2_$2| |c_$0|)) true)))
    (forall( (|tok| $token) (|c| $ptr) (|#s1_$3| $state))(= (and (and ($good_state_ext |tok| |#s1_$3|) (forall( (|#p_$10_$2| $ptr) (|#q_$12| $ptr))(!(=> (and (and ($good_state |#s1_$3|) ($set_in |#p_$10_$2| ($owns |#s1_$3| |#q_$12|))) ($closed |#s1_$3| |#q_$12|)) (and ($closed |#s1_$3| |#p_$10_$2|) (not (= ($ref |#p_$10_$2|) 0))))  :pattern ( ($set_in |#p_$10_$2| ($owns |#s1_$3| |#q_$12|)))))) true) (and (and ($good_state_ext |tok| |#s1_$3|) (forall( (|#p_$10_$3| $ptr) (|#q_$13| $ptr))(!(=> (and (and ($good_state |#s1_$3|) ($set_in |#p_$10_$3| ($owns |#s1_$3| |#q_$13|))) ($closed |#s1_$3| |#q_$13|)) (and ($closed |#s1_$3| |#p_$10_$3|) (not (= ($ref |#p_$10_$3|) 0))))  :pattern ( ($set_in |#p_$10_$3| ($owns |#s1_$3| |#q_$13|)))))) true)))
    (forall( (|ts| $type_state))(!(and (not (= ($kind_of ($typ ($ts_emb |ts|))) $kind_primitive)) ($is_non_primitive ($typ ($ts_emb |ts|))))  :pattern ( ($ts_emb |ts|))))
    (forall( (|typ_$0| $ctype) (|#p_$8| $ptr) (|#s2| $state) (|#s1_$0| $state))(= (or (and (not ($closed |#s1_$0| |#p_$8|)) (not ($closed |#s2| |#p_$8|))) (and ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|))) (or (and (not ($closed |#s1_$0| |#p_$8|)) (not ($closed |#s2| |#p_$8|))) (and ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|)))))
    (forall( (|typ| $ctype) (|#p_$7| $ptr) (|#s1| $state))(= ($inv2 |#s1| |#s1| |#p_$7| |typ|) ($inv2 |#s1| |#s1| |#p_$7| |typ|)))
    (forall( (|u| $ptr) (|S_$41| $state))(= ($ts_active_option ($select.tm ($typemap |S_$41|) |u|)) ($ts_active_option ($select.tm ($typemap |S_$41|) |u|))))
    (forall( (|v| Bool))(= (ite |v| 1 0) (ite |v| 1 0)))
    (forall( (|val_$10| Int))(!(= ($in_range_t ^^i4 |val_$10|) (and (<= $min.i4 |val_$10|) (<= |val_$10| $max.i4)))  :pattern ( ($in_range_t ^^i4 |val_$10|))))
    (forall( (|val_$11| Int))(!(= ($in_range_t ^^i8 |val_$11|) (and (<= $min.i8 |val_$11|) (<= |val_$11| $max.i8)))  :pattern ( ($in_range_t ^^i8 |val_$11|))))
    (forall( (|val_$12| Int))(!(= ($in_range_t ^^u1 |val_$12|) (and (<= 0 |val_$12|) (<= |val_$12| $max.u1)))  :pattern ( ($in_range_t ^^u1 |val_$12|))))
    (forall( (|val_$13| Int))(!(= ($in_range_t ^^u2 |val_$13|) (and (<= 0 |val_$13|) (<= |val_$13| $max.u2)))  :pattern ( ($in_range_t ^^u2 |val_$13|))))
    (forall( (|val_$14| Int))(!(= ($in_range_t ^^u4 |val_$14|) (and (<= 0 |val_$14|) (<= |val_$14| $max.u4)))  :pattern ( ($in_range_t ^^u4 |val_$14|))))
    (forall( (|val_$15| Int))(!(= ($in_range_t ^^u8 |val_$15|) (and (<= 0 |val_$15|) (<= |val_$15| $max.u8)))  :pattern ( ($in_range_t ^^u8 |val_$15|))))
    (forall( (|val_$16| Int))(!($in_range_t ^^mathint |val_$16|)  :pattern ( ($in_range_t ^^mathint |val_$16|))))
    (forall( (|val_$19| Int))(!(=> (and (<= 0 |val_$19|) (<= |val_$19| $max.u1)) (= ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|)) |val_$19|))  :pattern ( ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|)))))
    (forall( (|val_$20| Int))(!(=> (and (<= 0 |val_$20|) (<= |val_$20| $max.u2)) (= ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|)) |val_$20|))  :pattern ( ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|)))))
    (forall( (|val_$21| Int))(!(=> (and (<= 0 |val_$21|) (<= |val_$21| $max.u4)) (= ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|)) |val_$21|))  :pattern ( ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|)))))
    (forall( (|val_$22| Int))(!(=> (and (<= 0 |val_$22|) (<= |val_$22| $max.u8)) (= ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|)) |val_$22|))  :pattern ( ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|)))))
    (forall( (|val_$23| Int))(!(=> (and (<= $min.i1 |val_$23|) (<= |val_$23| $max.i1)) (= ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|)) |val_$23|))  :pattern ( ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|)))))
    (forall( (|val_$24| Int))(!(=> (and (<= $min.i2 |val_$24|) (<= |val_$24| $max.i2)) (= ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|)) |val_$24|))  :pattern ( ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|)))))
    (forall( (|val_$25| Int))(!(=> (and (<= $min.i4 |val_$25|) (<= |val_$25| $max.i4)) (= ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|)) |val_$25|))  :pattern ( ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|)))))
    (forall( (|val_$26| Int))(!(=> (and (<= $min.i8 |val_$26|) (<= |val_$26| $max.i8)) (= ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|)) |val_$26|))  :pattern ( ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|)))))
    (forall( (|val_$8| Int))(!(= ($in_range_t ^^i1 |val_$8|) (and (<= $min.i1 |val_$8|) (<= |val_$8| $max.i1)))  :pattern ( ($in_range_t ^^i1 |val_$8|))))
    (forall( (|val_$9| Int))(!(= ($in_range_t ^^i2 |val_$9|) (and (<= $min.i2 |val_$9|) (<= |val_$9| $max.i2)))  :pattern ( ($in_range_t ^^i2 |val_$9|))))
    (forall( (|vol_$0| Bool) (|union_$0| Bool) (|sz_$6| Int) (|T_$5| $ctype) (|f_$7| $field))(= (and (forall( (|S_$51_$1| $state) (|p_$46_$1| $ptr))(!(=> (and (or (not |union_$0|) (= ($ts_active_option ($select.tm ($typemap |S_$51_$1|) |p_$46_$1|)) |f_$7|)) (and ($is |p_$46_$1| ($field_parent_type |f_$7|)) ($typed |S_$51_$1| |p_$46_$1|))) (and (and (and ($extent_hint ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))) |p_$46_$1|) ($typed |S_$51_$1| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) (= ($ts_emb ($select.tm ($typemap |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) |p_$46_$1|)) (= ($ts_path ($select.tm ($typemap |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) |f_$7|)))  :pattern ( ($select.tm ($typemap |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) :pattern ( ($select.sm ($statusmap |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) :pattern ( ($select.mem ($memory |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))))) (forall( (|p_$47_$1| $ptr) (|i_$6_$1| Int))(!($instantiate_ptr ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$47_$1| |f_$7|))))  :pattern ( ($idx ($dot |p_$47_$1| |f_$7|) |i_$6_$1| |T_$5|))))) (and (forall( (|S_$51| $state) (|p_$46| $ptr))(!(=> (and (or (not |union_$0|) (= ($ts_active_option ($select.tm ($typemap |S_$51|) |p_$46|)) |f_$7|)) (and ($is |p_$46| ($field_parent_type |f_$7|)) ($typed |S_$51| |p_$46|))) (and (and (and ($extent_hint ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))) |p_$46|) ($typed |S_$51| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) (= ($ts_emb ($select.tm ($typemap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) |p_$46|)) (= ($ts_path ($select.tm ($typemap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) |f_$7|)))  :pattern ( ($select.tm ($typemap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) :pattern ( ($select.sm ($statusmap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) :pattern ( ($select.mem ($memory |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))))) (forall( (|p_$47| $ptr) (|i_$6| Int))(!($instantiate_ptr ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$47| |f_$7|))))  :pattern ( ($idx ($dot |p_$47| |f_$7|) |i_$6| |T_$5|)))))))
    (forall( (|vol| Bool) (|union| Bool) (|sz_$5| Int) (|T_$4| $ctype) (|f_$6| $field))(= (forall( (|S_$50_$0| $state) (|p_$45_$0| $ptr) (|i_$5_$0| Int))(!(=> (and (and (and (<= 0 |i_$5_$0|) (< |i_$5_$0| |sz_$5|)) (or (not |union|) (= ($ts_active_option ($select.tm ($typemap |S_$50_$0|) |p_$45_$0|)) |f_$6|))) (and ($is |p_$45_$0| ($field_parent_type |f_$6|)) ($typed |S_$50_$0| |p_$45_$0|))) (and (and (and (= ($ts_is_volatile ($select.tm ($typemap |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) |vol|) ($typed |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) (= ($ts_emb ($select.tm ($typemap |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) |p_$45_$0|)) (= ($ts_path ($select.tm ($typemap |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) ($array_path |f_$6| |i_$5_$0|))))  :pattern ( ($select.tm ($typemap |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) :pattern ( ($select.sm ($statusmap |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) :pattern ( ($select.mem ($memory |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))))) (forall( (|S_$50| $state) (|p_$45| $ptr) (|i_$5| Int))(!(=> (and (and (and (<= 0 |i_$5|) (< |i_$5| |sz_$5|)) (or (not |union|) (= ($ts_active_option ($select.tm ($typemap |S_$50|) |p_$45|)) |f_$6|))) (and ($is |p_$45| ($field_parent_type |f_$6|)) ($typed |S_$50| |p_$45|))) (and (and (and (= ($ts_is_volatile ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) |vol|) ($typed |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) (= ($ts_emb ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) |p_$45|)) (= ($ts_path ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) ($array_path |f_$6| |i_$5|))))  :pattern ( ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($select.sm ($statusmap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($select.mem ($memory |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|)))))))
    (forall( (|x_$1| Int))(= (not (= |x_$1| 0)) (not (= |x_$1| 0))))
    (forall( (|x_$14| Int))(= ($ptr ^^void |x_$14|) ($ptr ^^void |x_$14|)))
    (forall( (|x_$15| Int))(= ($ptr ^^void |x_$15|) ($ptr ^^void |x_$15|)))
    (forall( (|x_$16| Int))(= ($ptr ^^void |x_$16|) ($ptr ^^void |x_$16|)))
    (forall( (|x_$17| Int))(= ($ptr ^^void |x_$17|) ($ptr ^^void |x_$17|)))
    (forall( (|x_$18| Int))(= ($ptr ^^void |x_$18|) ($ptr ^^void |x_$18|)))
    (forall( (|x_$19| Int))(= ($ptr ^^void |x_$19|) ($ptr ^^void |x_$19|)))
    (forall( (|x_$2| Int))(= (and (<= $min.i1 |x_$2|) (<= |x_$2| $max.i1)) (and (<= $min.i1 |x_$2|) (<= |x_$2| $max.i1))))
    (forall( (|x_$20| Int))(= ($ptr ^^void |x_$20|) ($ptr ^^void |x_$20|)))
    (forall( (|x_$21| Int))(= ($ptr ^^void |x_$21|) ($ptr ^^void |x_$21|)))
    (forall( (|x_$24| Int) (|y_$7| Int))(!(= ($rec_base_eq |x_$24| |y_$7|) (= |x_$24| |y_$7|))  :pattern ( ($rec_base_eq |x_$24| |y_$7|))))
    (forall( (|x_$29| Int) (|y_$11| Int))(!(=> (and (and (and (<= 0 |x_$29|) (<= |x_$29| $max.u8)) (and (<= 0 |y_$11|) (<= |y_$11| $max.u8))) (> (+ |x_$29| |y_$11|) $max.u8)) (= ($unchk_add ^^u8 |x_$29| |y_$11|) (- (- (+ |x_$29| |y_$11|) $max.u8) 1)))  :pattern ( ($unchk_add ^^u8 |x_$29| |y_$11|))))
    (forall( (|x_$3| Int))(= (and (<= $min.i2 |x_$3|) (<= |x_$3| $max.i2)) (and (<= $min.i2 |x_$3|) (<= |x_$3| $max.i2))))
    (forall( (|x_$30| Int) (|y_$12| Int))(!(=> (and (and (and (<= 0 |x_$30|) (<= |x_$30| $max.u4)) (and (<= 0 |y_$12|) (<= |y_$12| $max.u4))) (> (+ |x_$30| |y_$12|) $max.u8)) (= ($unchk_add ^^u4 |x_$30| |y_$12|) (- (- (+ |x_$30| |y_$12|) $max.u4) 1)))  :pattern ( ($unchk_add ^^u4 |x_$30| |y_$12|))))
    (forall( (|x_$33| Int) (|from_$0| Int) (|to_$0| Int) (|xs| Int) (|val_$0| Int))(!(=> (and (and (<= 0 |from_$0|) (< |from_$0| |to_$0|)) (<= |to_$0| |xs|)) (=> (and (<= 0 |val_$0|) (< |val_$0| ($_pow2 (- |to_$0| |from_$0|)))) (and (<= 0 ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|)) (< ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|) ($_pow2 |xs|)))))  :pattern ( ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|))))
    (forall( (|x_$4| Int))(= (and (<= $min.i4 |x_$4|) (<= |x_$4| $max.i4)) (and (<= $min.i4 |x_$4|) (<= |x_$4| $max.i4))))
    (forall( (|x_$41| Int) (|y_$16| Int))(!(= (mod |x_$41| |y_$16|) (- |x_$41| (* (div |x_$41| |y_$16|) |y_$16|)))  :pattern ( (mod |x_$41| |y_$16|)) :pattern ( (div |x_$41| |y_$16|))))
    (forall( (|x_$42| Int) (|y_$17| Int))(!(=> (and (<= 0 |x_$42|) (< 0 |y_$17|)) (and (<= 0 (mod |x_$42| |y_$17|)) (< (mod |x_$42| |y_$17|) |y_$17|)))  :pattern ( (mod |x_$42| |y_$17|))))
    (forall( (|x_$43| Int) (|y_$18| Int))(!(=> (and (<= 0 |x_$43|) (< |y_$18| 0)) (and (<= 0 (mod |x_$43| |y_$18|)) (< (mod |x_$43| |y_$18|) (- 0 |y_$18|))))  :pattern ( (mod |x_$43| |y_$18|))))
    (forall( (|x_$44| Int) (|y_$19| Int))(!(=> (and (<= |x_$44| 0) (< 0 |y_$19|)) (and (< (- 0 |y_$19|) (mod |x_$44| |y_$19|)) (<= (mod |x_$44| |y_$19|) 0)))  :pattern ( (mod |x_$44| |y_$19|))))
    (forall( (|x_$45| Int) (|y_$20| Int))(!(=> (and (<= |x_$45| 0) (< |y_$20| 0)) (and (< |y_$20| (mod |x_$45| |y_$20|)) (<= (mod |x_$45| |y_$20|) 0)))  :pattern ( (mod |x_$45| |y_$20|))))
    (forall( (|x_$5| Int))(= (and (<= $min.i8 |x_$5|) (<= |x_$5| $max.i8)) (and (<= $min.i8 |x_$5|) (<= |x_$5| $max.i8))))
    (forall( (|x_$6| Int))(= (and (<= 0 |x_$6|) (<= |x_$6| $max.u1)) (and (<= 0 |x_$6|) (<= |x_$6| $max.u1))))
    (forall( (|x_$7| Int))(= (and (<= 0 |x_$7|) (<= |x_$7| $max.u2)) (and (<= 0 |x_$7|) (<= |x_$7| $max.u2))))
    (forall( (|x_$8| Int))(= (and (<= 0 |x_$8|) (<= |x_$8| $max.u4)) (and (<= 0 |x_$8|) (<= |x_$8| $max.u4))))
    (forall( (|x_$9| Int))(= (and (<= 0 |x_$9|) (<= |x_$9| $max.u8)) (and (<= 0 |x_$9|) (<= |x_$9| $max.u8))))
    (forall( (|y_$0| Int) (|x_$0| Int))(= (+ |x_$0| |y_$0|) (+ |x_$0| |y_$0|)))
    (forall( (|y_$1| Int) (|x_$10| Int))(= (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i1))) (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i1)))))
    (forall( (|y_$2| Int) (|x_$11| Int))(= (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i2))) (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i2)))))
    (forall( (|y_$3| Int) (|x_$12| Int))(= (or (not (= |y_$3| (- 0 1))) (not (= |x_$12| $min.i4))) (or (not (= |y_$3| (- 0 1))) (not (= |x_$12| $min.i4)))))
    (forall( (|y_$4| Int) (|x_$13| Int))(= (or (not (= |y_$4| (- 0 1))) (not (= |x_$13| $min.i8))) (or (not (= |y_$4| (- 0 1))) (not (= |x_$13| $min.i8)))))
    (forall( (|y_$5| Int) (|x_$22| Int) (|t_$8| $ctype))(= ($unchecked |t_$8| (div |x_$22| |y_$5|)) ($unchecked |t_$8| (div |x_$22| |y_$5|))))
    (forall( (|y_$6| Int) (|x_$23| Int) (|t_$9| $ctype))(= ($unchecked |t_$9| (mod |x_$23| |y_$6|)) ($unchecked |t_$9| (mod |x_$23| |y_$6|))))
    (forall( (|z| Int) (|y| Int) (|x| Int))(= (+ |x| (* |y| |z|)) (+ |x| (* |y| |z|))))
    (not (= $me_ref 0))
    (not (= true $@bf_214))
    (not (= true $@bf_214))
    (not (= true $@bf_217))
    (not (= true $@bf_217))
    (not (= true $@bf_218))
    (not (= true $@bf_218))
    (not (= true $@bf_219))
    (not (= true $@bf_219))
    (not (= true $@bf_223))
    (not (= true $@bf_223))
  )
    PreconditionGeneratedEntry
)))
(let (($root (=> (and true
  )
    $start
)))
   $root
)))))))))))))))))))))))))))))))))))))))))))
))

;Commands
   (check-sat)
   ;(get-unsat-core)
