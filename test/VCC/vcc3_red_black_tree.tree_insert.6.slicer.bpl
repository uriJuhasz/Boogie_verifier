type Integer = int;
type Boolean = bool;
type $object = [$field][$ptr]int;
type $owner = [$ptr]$ptr;
type $closed = [$ptr]bool;
type $timestamps = [$ptr]int;
type $roots = [$ptr]$ptr;
type $ptrset = [$ptr]bool;
type $ctype;
type $ptr;
type $field;
type $primitive;
type $struct;
type $token;
type $state;
type $pure_function;
type $label;
type $ctype_branch;
type $field_kind;
type $version;
type $vol_version;
type $dt_tag;
type cf_event;
type var_locglob;
type $map_t..$ptr_to..^Node.^^bool;
type $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
type $map_t..^^i4.^^i4;
const unique $ctype_flat : $ctype_branch;
const unique $ctype_ptr : $ctype_branch;
const unique $ctype_spec_ptr : $ctype_branch;
const unique $ctype_map : $ctype_branch;
const unique $ctype_array : $ctype_branch;
const unique $fk_base : $field_kind;
const unique $fk_owns : $field_kind;
const unique $fk_ref_cnt : $field_kind;
const unique $fk_vol_version : $field_kind;
const unique $fk_allocation_root : $field_kind;
const unique $fk_as_array_first : $field_kind;
const unique $fk_emb_array : $field_kind;
const unique $primitive_emb_type : $ctype;
const $arch_ptr_size : int;
const $arch_ptr_type : $ctype;
const unique ^^i1 : $ctype;
const unique ^^i2 : $ctype;
const unique ^^i4 : $ctype;
const unique ^^i8 : $ctype;
const unique ^^u1 : $ctype;
const unique ^^u2 : $ctype;
const unique ^^u4 : $ctype;
const unique ^^u8 : $ctype;
const unique ^^void : $ctype;
const unique ^^bool : $ctype;
const unique ^^f4 : $ctype;
const unique ^^f8 : $ctype;
const unique ^^object : $ctype;
const unique ^^field : $ctype;
const unique ^^null_type : $ctype;
const unique ^^claim : $ctype;
const unique ^^mathint : $ctype;
const unique ^$#ptrset : $ctype;
const unique ^$#state_t : $ctype;
const unique ^$#volatile_version_t : $ctype;
const unique ^$#struct : $ctype;
const $null : $ptr;
const unique ^$#thread_id_t : $ctype;
const unique $inactive_union_owner_type : $ctype;
const $arch_spec_ptr_start : int;
const $current_frame_level : int;
const unique $no_claim : $ptr;
const $full_extent_state : $state;
const $struct_zero : $struct;
const $min.i1 : int;
const $max.i1 : int;
const $min.i2 : int;
const $max.i2 : int;
const $min.i4 : int;
const $max.i4 : int;
const $min.i8 : int;
const $max.i8 : int;
const $max.u1 : int;
const $max.u2 : int;
const $max.u4 : int;
const $max.u8 : int;
const $decreases_level : int;
const unique ^$#thread_id : $ctype;
const unique ^Node : $ctype;
const unique Node.red : $field;
const unique Node.key : $field;
const unique Node.value : $field;
const unique Node.left : $field;
const unique Node.right : $field;
const unique Node.parent : $field;
const unique ^Tree : $ctype;
const unique Tree.root : $field;
const unique Tree.abs : $field;
const unique Tree.R : $field;
const unique cf#mark : $pure_function;
const unique cf#doMark : $pure_function;
const unique cf#mark2 : $pure_function;
const unique cf#lambda#9 : $pure_function;
const unique cf#lambda#8 : $pure_function;
const unique cf#lambda#7 : $pure_function;
const unique cf#lambda#6 : $pure_function;
const unique cf#lambda#5 : $pure_function;
const unique cf#lambda#4 : $pure_function;
const unique cf#lambda#3 : $pure_function;
const unique cf#lambda#2 : $pure_function;
const unique cf#lambda#1 : $pure_function;
const unique l#public : $label;
const $zero.$map_t..$ptr_to..^Node.^^bool : $map_t..$ptr_to..^Node.^^bool;
const $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
const $zero.$map_t..^^i4.^^i4 : $map_t..^^i4.^^i4;
const unique #tok$1^200.19 : $token;
const unique #loc.prestate#44 : $token;
const unique #tok$1^199.19 : $token;
const unique #loc.owns#42 : $token;
const unique #loc.staticWrapState#41 : $token;
const unique #loc.prestate#43 : $token;
const unique #tok$1^198.3 : $token;
const unique #tok$1^195.5 : $token;
const unique #tok$1^194.27 : $token;
const unique #loc.res_lambda#7#20 : $token;
const unique #tok$1^194.37 : $token;
const unique #loc.owns#39 : $token;
const unique #loc.staticWrapState#38 : $token;
const unique #loc.prestate#40 : $token;
const unique #tok$1^187.41 : $token;
const unique #tok$1^187.36 : $token;
const unique #loc.prestate#37 : $token;
const unique #loc.prestate#35 : $token;
const unique #loc.owns#36 : $token;
const unique #tok$1^185.7 : $token;
const unique #loc.owns#33 : $token;
const unique #loc.staticWrapState#32 : $token;
const unique #loc.prestate#34 : $token;
const unique #tok$1^181.41 : $token;
const unique #tok$1^181.36 : $token;
const unique #loc.prestate#31 : $token;
const unique #loc.prestate#29 : $token;
const unique #loc.owns#30 : $token;
const unique #tok$1^179.7 : $token;
const unique #tok$1^167.3 : $token;
const unique #tok$1^168.28 : $token;
const unique #tok$1^163.25 : $token;
const unique #loc.res_lambda#6#19 : $token;
const unique #tok$1^163.41 : $token;
const unique #tok$1^159.21 : $token;
const unique #loc.prestate#28 : $token;
const unique #tok$1^158.21 : $token;
const unique #loc.owns#26 : $token;
const unique #loc.staticWrapState#25 : $token;
const unique #loc.prestate#27 : $token;
const unique #tok$1^157.5 : $token;
const unique #tok$1^153.5 : $token;
const unique #loc.res_lambda#5#18 : $token;
const unique #tok$1^153.15 : $token;
const unique #tok$1^152.5 : $token;
const unique #tok$1^151.5 : $token;
const unique #loc.res_lambda#4#17 : $token;
const unique #tok$1^151.14 : $token;
const unique #tok$1^148.3 : $token;
const unique #tok$1^146.3 : $token;
const unique #tok$1^146.13 : $token;
const unique #tok$1^146.24 : $token;
const unique #loc.assign#13 : $token;
const unique #loc.assign#12 : $token;
const unique #tok$1^144.19 : $token;
const unique #loc.prestate#24 : $token;
const unique #loc.n : $token;
const unique #tok$1^142.3 : $token;
const unique #loc.x : $token;
const unique #tok$1^134.1 : $token;
const unique #tok$2^0.0 : $token;
const unique #file^?3Cno?20file?3E : $token;
const unique #loc.t : $token;
const unique #loc.p : $token;
const unique #distTp5 : $ctype;
const unique #distTp4 : $ctype;
const unique #file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c : $token;
const unique #distTp3 : $ctype;
const unique #distTp2 : $ctype;
const unique #distTp1 : $ctype;
function $type_branch($ctype) : $ctype_branch;
function $ptr_to($ctype) : $ctype;
function $spec_ptr_to($ctype) : $ctype;
function $type_project_0($ctype) : $ctype;
function $map_t($ctype,$ctype) : $ctype;
function $map_domain($ctype) : $ctype;
function $map_range($ctype) : $ctype;
function $sizeof($ctype) : int;
function $as_in_range_t($ctype) : $ctype;
function $is_primitive($ctype) : bool;
function $is_claimable($ctype) : bool;
function $is_span_sequential($ctype) : bool;
function $is_group_type($ctype) : bool;
function $is_math_type($ctype) : bool;
function $is_fnptr_type($ctype) : bool;
function $is_record_type($ctype) : bool;
function $addr($ptr) : int;
function $base($ptr) : $ptr;
function $field($ptr) : $field;
function $ptr($field,$ptr) : $ptr;
function $field_kind($field) : $field_kind;
function $is_proper($ptr) : bool;
function $is($ptr,$ctype) : bool;
function $spec_ptr_cast($ptr,$ctype) : $ptr;
function $phys_ptr_cast($ptr,$ctype) : $ptr;
function $dot($ptr,$field) : $ptr;
function $emb0($ptr) : $ptr;
function $is_semi_sequential_field($field) : bool;
function $is_sequential_field($field) : bool;
function $is_volatile_field($field) : bool;
function $as_primitive_field($field) : $field;
function $as_composite_field($field) : $field;
function $as_field_with_type($field,$ctype) : $field;
function $field_type($field) : $ctype;
function $has_field_at0($ctype,$field) : bool;
function $f_group_root($ctype) : $field;
function $f_root($ctype) : $field;
function $f_owns($ctype) : $field;
function $f_ref_cnt($ctype) : $field;
function $f_vol_version($ctype) : $field;
function $field_offset($field) : int;
function $field_parent_type($field) : $ctype;
function $is_ghost_field($field) : bool;
function $is_phys_field($field) : bool;
function $me() : $ptr;
function $is_threadtype($ctype) : bool;
function $inactive_union_owner() : $ptr;
function $field_arr_index($field) : int;
function $field_arr_root($field) : $field;
function $field_arr_size($field) : int;
function $field_arr_ctor($field,int) : $field;
function $idx($ptr,int) : $ptr;
function $field_plus($field,int) : $field;
function $is_array($state,$ptr,$ctype,int) : bool;
function $is_thread_local_array($state,$ptr,$ctype,int) : bool;
function $is_mutable_array($state,$ptr,$ctype,int) : bool;
function $arrays_disjoint($ptr,int,$ptr,int) : bool;
function $arrays_disjoint_id($ptr,int,$ptr,int,$ptr) : int;
function $mem_range_heap($object,$ptr,int) : int;
function $index_within($ptr,$ptr) : int;
function $array_range_no_state($ptr,$ctype,int) : $ptrset;
function $in_composite_array_lev2($state,$ptr,$ptr,int) : bool;
function $array($ctype,int) : $ctype;
function $element_type($ctype) : $ctype;
function $array_length($ctype) : int;
function $array_emb($ctype,int) : $field;
function $f_timestamp($state) : $timestamps;
function $f_owner($state) : $owner;
function $f_closed($state) : $closed;
function $roots($state) : $roots;
function $heap($state) : $object;
function $typemap($owner) : [int,$ctype]$ptr;
function {:inline  false} $owner($state,$ptr) : $ptr;
function {:inline  false} $closed($state,$ptr) : bool;
function {:inline  false} $timestamp($state,$ptr) : int;
function {:inline  false} $ref_cnt($state,$ptr) : int;
function $position_marker() : bool;
function $owns($state,$ptr) : $ptrset;
function $mutable($state,$ptr) : bool;
function $in_range_phys_ptr($ptr) : bool;
function $in_range_spec_ptr($ptr) : bool;
function $as_addr($ptr,$ctype,int) : $ptr;
function $retype($state,$ptr) : $ptr;
function $ptr_eq($ptr,$ptr) : bool;
function $thread_local($state,$ptr) : bool;
function $dont_instantiate($ptr) : bool;
function $dont_instantiate_int(int) : bool;
function $dont_instantiate_state($state) : bool;
function $instantiate_int(int) : bool;
function $instantiate_ptr($ptr) : bool;
function $instantiate_ptrset($ptrset) : bool;
function sk_hack(bool) : bool;
function $function_entry($state) : bool;
function $good_state($state) : bool;
function $invok_state($state) : bool;
function $full_stop($state) : bool;
function $inv2($state,$state,$ptr,$ctype) : bool;
function $file_name_is(int,$token) : bool;
function $good_state_ext($token,$state) : bool;
function $call_transition($state,$state) : bool;
function $trans_call_transition($state,$state) : bool;
function $updated_owns($state,$state,$ptr,$ptrset) : bool;
function $writes_at(int) : $ptrset;
function {:inline  false} $in_writes_at(int,$ptr) : bool;
function $current_timestamp($state) : int;
function {:inline  false} $top_writable($state,int,$ptr) : bool;
function {:inline  false} $modifies($state,$state,$ptrset) : bool;
function $frame_level($pure_function) : int;
function $is_object_root_ptr($ptr) : bool;
function $pre_wrap($state) : bool;
function $pre_unwrap($state) : bool;
function $pre_static_wrap($state) : bool;
function $pre_static_unwrap($state) : bool;
function $post_unwrap($state,$state) : bool;
function $is_unwrapped_dynamic($state,$state,$ptr) : bool;
function $is_unwrapped($state,$state,$ptr) : bool;
function $is_wrapped_dynamic($state,$state,$ptr) : bool;
function $is_wrapped($state,$state,$ptr,$ptrset) : bool;
function $release($state,$state,$ptr,$ptr) : $state;
function $spans_the_same($state,$state,$ptr,$ctype) : bool;
function $nonvolatile_spans_the_same($state,$state,$ptr,$ctype) : bool;
function $good_for_admissibility($state) : bool;
function $is_stuttering_check() : bool;
function $is_unwrap_check() : bool;
function $good_for_pre_can_unwrap($state) : bool;
function $claims_obj($ptr,$ptr) : bool;
function $valid_claim($state,$ptr) : bool;
function $claims_claim($ptr,$ptr) : bool;
function $claimed_closed($state,$ptr) : bool;
function $account_claim($state,$ptr,$ptr) : bool;
function $claim_no($state,$ptr,int) : $ptr;
function $claim_idx($ptr,$ptr) : int;
function $in_domain_lab($state,$ptr,$ptr,$label) : bool;
function $in_vdomain_lab($state,$ptr,$ptr,$label) : bool;
function $inv_lab($state,$ptr,$label) : bool;
function $in_domain($state,$ptr,$ptr) : bool;
function $in_vdomain($state,$ptr,$ptr) : bool;
function $as_deep_domain($state,$ptr) : $ptr;
function $ver_domain($version) : $ptrset;
function $int_to_version(int) : $version;
function $fetch_from_domain($version,$ptr,$field) : int;
function $in_claim_domain($ptr,$ptr) : bool;
function $by_claim($state,$ptr,$ptr,$ptr) : $ptr;
function $claim_version($ptr) : $version;
function $read_vol_version($state,$ptr) : $vol_version;
function $fetch_from_vv($vol_version,$ptr,$field) : int;
function $is_approved_by($ctype,$field,$field) : bool;
function $is_owner_approved($ctype,$field) : bool;
function $composite_extent($state,$ptr,$ctype) : $ptrset;
function $extent($state,$ptr) : $ptrset;
function $full_extent($ptr) : $ptrset;
function $span($ptr) : $ptrset;
function $extent_mutable($state,$ptr) : bool;
function $extent_is_fresh($state,$state,$ptr) : bool;
function $extent_hint($ptr,$ptr) : bool;
function $is_union_field($field) : bool;
function $as_union_type($ctype) : $ctype;
function $is_union_type($ctype) : bool;
function $first_union_field($ctype) : $field;
function $first_option_typed($state,$ptr) : bool;
function $all_first_option_typed($state,$ptr) : bool;
function $active_option($state,$ptr) : $field;
function $strong_struct_eq($state,$ptr,$state,$ptr) : bool;
function $strong_shallow_struct_eq($state,$ptr,$state,$ptr) : bool;
function $vs_base_ref($struct) : $ptr;
function $vs_state($struct) : $state;
function $vs_ctor($state,$ptr) : $struct;
function $update_int($state,$ptr,int) : $state;
function $program_entry_point($state) : bool;
function $has_arity($dt_tag,int) : bool;
function $is_datatype($ctype) : bool;
function $set_empty() : $ptrset;
function $set_singleton($ptr) : $ptrset;
function $set_union($ptrset,$ptrset) : $ptrset;
function $set_difference($ptrset,$ptrset) : $ptrset;
function $set_eq($ptrset,$ptrset) : bool;
function $set_cardinality($ptrset) : int;
function $set_universe() : $ptrset;
function $set_disjoint($ptrset,$ptrset) : bool;
function $id_set_disjoint($ptr,$ptrset,$ptrset) : int;
function {:inline  false} $set_in_pos($ptr,$ptrset) : bool;
function $set_in0($ptr,$ptrset) : bool;
function $get_fnptr(int,$ctype) : $ptr;
function $get_fnptr_ref(int) : $ptr;
function $valid_fnptr($ptr) : bool;
function $_pow2(int) : int;
function $in_range_ubits(int,int) : bool;
function $unchecked_sbits(int,int) : int;
function $in_range_sbits(int,int) : bool;
function $unchecked_ubits(int,int) : int;
function $_or($ctype,int,int) : int;
function $_xor($ctype,int,int) : int;
function $_and($ctype,int,int) : int;
function $_not($ctype,int) : int;
function $unchk_add($ctype,int,int) : int;
function $_shl($ctype,int,int) : int;
function $_shr(int,int) : int;
function $bv_extract_signed(int,int,int,int) : int;
function $bv_extract_unsigned(int,int,int,int) : int;
function $bv_update(int,int,int,int,int) : int;
function $unchecked($ctype,int) : int;
function $in_range_t($ctype,int) : bool;
function $ptr_to_int($ptr) : int;
function $int_to_ptr(int) : $ptr;
function $field_to_int($field) : int;
function $ptrset_to_int($ptrset) : int;
function $int_to_ptrset(int) : $ptrset;
function $ptr_to_u8($ptr) : int;
function $ptr_to_i8($ptr) : int;
function $ptr_to_u4($ptr) : int;
function $ptr_to_i4($ptr) : int;
function $ptr_to_u2($ptr) : int;
function $ptr_to_i2($ptr) : int;
function $ptr_to_u1($ptr) : int;
function $ptr_to_i1($ptr) : int;
function $u8_to_ptr(int) : $ptr;
function $i8_to_ptr(int) : $ptr;
function $i4_to_ptr(int) : $ptr;
function $i2_to_ptr(int) : $ptr;
function $i1_to_ptr(int) : $ptr;
function $local_value_is($state,$token,$token,int,$ctype) : bool;
function $type_code_is(int,$ctype) : bool;
function $function_arg_type($pure_function,int,$ctype) : bool;
function $get_string_literal(int,int) : $ptr;
function F#mark($ptr) : $ptr;
function F#doMark($ptr) : bool;
function F#mark2($ptr) : bool;
function F#lambda#9($map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.^^bool,$ptr) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#8($map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.^^bool,$ptr) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#7($map_t..$ptr_to..^Node.^^bool,$ptr) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#6($map_t..$ptr_to..^Node.^^bool,$ptr) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#5($ptr) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#4($map_t..^^i4.^^i4,int,int) : $map_t..^^i4.^^i4;
function F#lambda#3() : $map_t..^^i4.^^i4;
function F#lambda#2($map_t..$ptr_to..^Node.^^bool) : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
function F#lambda#1() : $map_t..$ptr_to..^Node.^^bool;
function $select.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.^^bool,$ptr) : bool;
function $store.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.^^bool,$ptr,bool) : $map_t..$ptr_to..^Node.^^bool;
function $eq.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.^^bool) : bool;
function $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,$ptr) : $map_t..$ptr_to..^Node.^^bool;
function $store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,$ptr,$map_t..$ptr_to..^Node.^^bool) : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
function $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) : bool;
function $select.$map_t..^^i4.^^i4($map_t..^^i4.^^i4,int) : int;
function $store.$map_t..^^i4.^^i4($map_t..^^i4.^^i4,int,int) : $map_t..^^i4.^^i4;
function $eq.$map_t..^^i4.^^i4($map_t..^^i4.^^i4,$map_t..^^i4.^^i4) : bool;
function $state_to_int($state) : int;
function $map_t..ptr_to..^Node.^^bool_to_int($map_t..$ptr_to..^Node.^^bool) : int;
function $int_to_map_t..ptr_to..^Node.^^bool(int) : $map_t..$ptr_to..^Node.^^bool;
function $map_t..^^i4.^^i4_to_int($map_t..^^i4.^^i4) : int;
function $int_to_map_t..^^i4.^^i4(int) : $map_t..^^i4.^^i4;
function $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) : int;
function $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool(int) : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
function lambda#0($field_kind,$ptr,$ctype,int) : [$ptr]bool;
function lambda#1(int,$ptr) : [$ptr]bool;
function lambda#2(int,$ptr,$ctype) : [$ptr]bool;
function lambda#3($state,$state,$ptr) : [$ptr]int;
function lambda#4($state,$ptr) : [$ptr]$ptr;
function lambda#5($ptr,$state) : [$ptr]$ptr;
function lambda#10($ptr,$state) : [$ptr]bool;
function lambda#11($ptr,$state) : [$ptr]bool;
function lambda#12($ptr) : [$ptr]bool;
function lambda#13($ptr) : [$ptr]bool;
function lambda#14() : [$ptr]bool;
function lambda#15($ptr) : [$ptr]bool;
function lambda#16($ptr) : [$ptr]bool;
function lambda#17($ptrset,$ptrset) : [$ptr]bool;
function lambda#18($ptrset,$ptrset) : [$ptr]bool;
function lambda#19($ptrset,$ptrset) : [$ptr]bool;
function lambda#21($ctype,$ptr,$ctype,$ptr) : [$ptr]bool;
function lambda#22($field,$state,$ptr,$ctype,$ptr,$ctype) : [$ptr]bool;
var $s : $state;
var #wrTime$1^134.1 : int;
var L#n : $ptr;
var L#p : $ptr;
var prestate#24 : $state;
var prestate#24_$_0 : $state;
var call0formal_$_o_$_0 : $ptr;
var $s_$_0 : $state;
var assign#12 : $ptr;
var assign#13 : $ptr;
var assign#13_$_0 : $ptr;
var call1formal_$_p_$_0 : $ptr;
var call2formal_$_v_$_0 : int;
var $s_$_1 : $state;
var assign#12_$_0 : $ptr;
var call1formal_$_p_$_0_$1 : $ptr;
var call2formal_$_v_$_0_$1 : int;
var $s_$_2 : $state;
var call1formal_$_p_$_0_$2 : $ptr;
var call2formal_$_v_$_0_$2 : int;
var $s_$_3 : $state;
var L#p_$_0 : $ptr;
var res_lambda#4#17 : $map_t..^^i4.^^i4;
var call0formal_$_#l2_$_0 : $map_t..^^i4.^^i4;
var call1formal_$_#l1_$_0 : int;
var call2formal_$_#l0_$_0 : int;
var call3formal_$_$result_$_0 : $map_t..^^i4.^^i4;
var call1formal_$_p_$_0_$3 : $ptr;
var call2formal_$_v_$_0_$3 : int;
var $s_$_4 : $state;
var call0formal_$_p_$_0 : $ptr;
var call1formal_$_owns_$_0 : $ptrset;
var $s_$_5 : $state;
var res_lambda#5#18 : $map_t..$ptr_to..^Node.^^bool;
var call0formal_$_#l0_$_0 : $ptr;
var call1formal_$_$result_$_0 : $map_t..$ptr_to..^Node.^^bool;
var call1formal_$_p_$_0_$4 : $ptr;
var call2formal_$_v_$_0_$4 : int;
var $s_$_6 : $state;
var res_lambda#6#19 : $map_t..$ptr_to..^Node.^^bool;
var call0formal_$_#l1_$_0 : $map_t..$ptr_to..^Node.^^bool;
var call1formal_$_#l0_$_0 : $ptr;
var call2formal_$_$result_$_0 : $map_t..$ptr_to..^Node.^^bool;
var call1formal_$_p_$_0_$5 : $ptr;
var call2formal_$_v_$_0_$5 : int;
var $s_$_10 : $state;
var $s_$_11 : $state;
var #wrTime$1^168.28 : int;
var $s_$_12 : $state;
var L#p_$_1 : $ptr;
var prestate#28 : $state;
var owns#26 : $ptrset;
var staticWrapState#25 : $state;
var prestate#27 : $state;
var L#n_$_0 : $ptr;
var $s_$_19 : $state;
var call1formal_$_p_$_0_$6 : $ptr;
var call2formal_$_v_$_0_$6 : int;
var $s_$_20 : $state;
var prestate#43 : $state;
var prestate#43_$_0 : $state;
var staticWrapState#41 : $state;
var staticWrapState#41_$_0 : $state;
var owns#42 : $ptrset;
var owns#42_$_0 : $ptrset;
var call0formal_$_o_$_0_$1 : $ptr;
var $s_$_21 : $state;
var prestate#44 : $state;
var prestate#44_$_0 : $state;
var call0formal_$_o_$_0_$2 : $ptr;
var $s_$_22 : $state;
var $s_$_23 : $state;
var $s_$_25 : $state;
var L#n_$_2 : $ptr;
var L#n_$_3 : $ptr;
var res_lambda#7#20_$_0 : $map_t..$ptr_to..^Node.^^bool;
var call0formal_$_#l1_$_0_$1 : $map_t..$ptr_to..^Node.^^bool;
var call1formal_$_#l0_$_0_$1 : $ptr;
var call2formal_$_$result_$_0_$1 : $map_t..$ptr_to..^Node.^^bool;
var call1formal_$_p_$_0_$7 : $ptr;
var call2formal_$_v_$_0_$7 : int;
var $s_$_24 : $state;
var L#p_$_2 : $ptr;
var owns#36 : $ptrset;
var owns#36_$_0 : $ptrset;
var prestate#35 : $state;
var prestate#35_$_0 : $state;
var prestate#37 : $state;
var prestate#37_$_0 : $state;
var call0formal_$_o_$_0_$3 : $ptr;
var $s_$_13 : $state;
var call1formal_$_p_$_0_$8 : $ptr;
var call2formal_$_v_$_0_$8 : int;
var $s_$_14 : $state;
var prestate#40 : $state;
var prestate#40_$_0 : $state;
var staticWrapState#38 : $state;
var staticWrapState#38_$_0 : $state;
var owns#39 : $ptrset;
var owns#39_$_0 : $ptrset;
var call0formal_$_o_$_0_$4 : $ptr;
var $s_$_15 : $state;
var L#n_$_1 : $ptr;
var owns#30 : $ptrset;
var owns#30_$_0 : $ptrset;
var prestate#29 : $state;
var prestate#29_$_0 : $state;
var prestate#31 : $state;
var prestate#31_$_0 : $state;
var call0formal_$_o_$_0_$5 : $ptr;
var $s_$_16 : $state;
var call1formal_$_p_$_0_$9 : $ptr;
var call2formal_$_v_$_0_$9 : int;
var $s_$_17 : $state;
var prestate#34 : $state;
var prestate#34_$_0 : $state;
var staticWrapState#32 : $state;
var staticWrapState#32_$_0 : $state;
var owns#33 : $ptrset;
var owns#33_$_0 : $ptrset;
var call0formal_$_o_$_0_$6 : $ptr;
var $s_$_18 : $state;
var call1formal_$_p_$_0_$10 : $ptr;
var call2formal_$_v_$_0_$10 : int;
var $s_$_7 : $state;
var prestate#27_$_0 : $state;
var staticWrapState#25_$_0 : $state;
var owns#26_$_0 : $ptrset;
var call0formal_$_o_$_0_$7 : $ptr;
var $s_$_8 : $state;
var prestate#28_$_0 : $state;
var call0formal_$_o_$_0_$8 : $ptr;
var $s_$_9 : $state;
var res_lambda#7#20 : $map_t..$ptr_to..^Node.^^bool;
var loopState#1 : $state;
procedure tree_insert (P#t : $ptr,P#x : $ptr)
{
	var prestate#44 : $state;
	var owns#42 : $ptrset;
	var staticWrapState#41 : $state;
	var prestate#43 : $state;
	var owns#39 : $ptrset;
	var staticWrapState#38 : $state;
	var prestate#40 : $state;
	var prestate#37 : $state;
	var prestate#35 : $state;
	var owns#36 : $ptrset;
	var owns#33 : $ptrset;
	var staticWrapState#32 : $state;
	var prestate#34 : $state;
	var prestate#31 : $state;
	var prestate#29 : $state;
	var owns#30 : $ptrset;
	var #wrTime$1^168.28 : int;
	var res_lambda#6#19 : $map_t..$ptr_to..^Node.^^bool;
	var prestate#28 : $state;
	var owns#26 : $ptrset;
	var staticWrapState#25 : $state;
	var prestate#27 : $state;
	var res_lambda#5#18 : $map_t..$ptr_to..^Node.^^bool;
	var res_lambda#4#17 : $map_t..^^i4.^^i4;
	var assign#13 : $ptr;
	var assign#12 : $ptr;
	var prestate#24 : $state;
	var L#p : $ptr;
	var L#n : $ptr;
	var #wrTime$1^134.1 : int;
	var prestate#24_$_0 : $state;
	var call0formal_$_o_$_0 : $ptr;
	var $s_$_0 : $state;
	var assign#13_$_0 : $ptr;
	var call1formal_$_p_$_0 : $ptr;
	var call2formal_$_v_$_0 : int;
	var $s_$_1 : $state;
	var assign#12_$_0 : $ptr;
	var call1formal_$_p_$_0_$1 : $ptr;
	var call2formal_$_v_$_0_$1 : int;
	var $s_$_2 : $state;
	var call1formal_$_p_$_0_$2 : $ptr;
	var call2formal_$_v_$_0_$2 : int;
	var $s_$_3 : $state;
	var L#p_$_0 : $ptr;
	var call0formal_$_#l2_$_0 : $map_t..^^i4.^^i4;
	var call1formal_$_#l1_$_0 : int;
	var call2formal_$_#l0_$_0 : int;
	var call3formal_$_$result_$_0 : $map_t..^^i4.^^i4;
	var call1formal_$_p_$_0_$3 : $ptr;
	var call2formal_$_v_$_0_$3 : int;
	var $s_$_4 : $state;
	var call0formal_$_p_$_0 : $ptr;
	var call1formal_$_owns_$_0 : $ptrset;
	var $s_$_5 : $state;
	var call0formal_$_#l0_$_0 : $ptr;
	var call1formal_$_$result_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var call1formal_$_p_$_0_$4 : $ptr;
	var call2formal_$_v_$_0_$4 : int;
	var $s_$_6 : $state;
	var call1formal_$_p_$_0_$10 : $ptr;
	var call2formal_$_v_$_0_$10 : int;
	var $s_$_7 : $state;
	var prestate#27_$_0 : $state;
	var staticWrapState#25_$_0 : $state;
	var owns#26_$_0 : $ptrset;
	var call0formal_$_o_$_0_$7 : $ptr;
	var $s_$_8 : $state;
	var prestate#28_$_0 : $state;
	var call0formal_$_o_$_0_$8 : $ptr;
	var $s_$_9 : $state;
	var call0formal_$_#l1_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var call1formal_$_#l0_$_0 : $ptr;
	var call2formal_$_$result_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var call1formal_$_p_$_0_$5 : $ptr;
	var call2formal_$_v_$_0_$5 : int;
	var $s_$_10 : $state;
	var $s_$_11 : $state;
	var res_lambda#7#20_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var $s_$_12 : $state;
	var L#p_$_1 : $ptr;
	var L#n_$_0 : $ptr;
	var L#n_$_1 : $ptr;
	var L#n_$_2 : $ptr;
	var owns#36_$_0 : $ptrset;
	var prestate#35_$_0 : $state;
	var prestate#37_$_0 : $state;
	var call0formal_$_o_$_0_$3 : $ptr;
	var $s_$_13 : $state;
	var call1formal_$_p_$_0_$8 : $ptr;
	var call2formal_$_v_$_0_$8 : int;
	var $s_$_14 : $state;
	var prestate#40_$_0 : $state;
	var staticWrapState#38_$_0 : $state;
	var owns#39_$_0 : $ptrset;
	var call0formal_$_o_$_0_$4 : $ptr;
	var $s_$_15 : $state;
	var owns#30_$_0 : $ptrset;
	var prestate#29_$_0 : $state;
	var prestate#31_$_0 : $state;
	var call0formal_$_o_$_0_$5 : $ptr;
	var $s_$_16 : $state;
	var call1formal_$_p_$_0_$9 : $ptr;
	var call2formal_$_v_$_0_$9 : int;
	var $s_$_17 : $state;
	var prestate#34_$_0 : $state;
	var staticWrapState#32_$_0 : $state;
	var owns#33_$_0 : $ptrset;
	var call0formal_$_o_$_0_$6 : $ptr;
	var $s_$_18 : $state;
	var $s_$_19 : $state;
	var call1formal_$_p_$_0_$6 : $ptr;
	var call2formal_$_v_$_0_$6 : int;
	var $s_$_20 : $state;
	var prestate#43_$_0 : $state;
	var staticWrapState#41_$_0 : $state;
	var owns#42_$_0 : $ptrset;
	var call0formal_$_o_$_0_$1 : $ptr;
	var $s_$_21 : $state;
	var prestate#44_$_0 : $state;
	var call0formal_$_o_$_0_$2 : $ptr;
	var $s_$_22 : $state;
	var $s_$_23 : $state;
	var L#n_$_3 : $ptr;
	var call0formal_$_#l1_$_0_$1 : $map_t..$ptr_to..^Node.^^bool;
	var call1formal_$_#l0_$_0_$1 : $ptr;
	var call2formal_$_$result_$_0_$1 : $map_t..$ptr_to..^Node.^^bool;
	var call1formal_$_p_$_0_$7 : $ptr;
	var call2formal_$_v_$_0_$7 : int;
	var $s_$_24 : $state;
	var L#p_$_2 : $ptr;
	var $s_$_25 : $state;
	var $_$_condition : bool;
	var $_$_condition_$0 : bool;
	var $_$_condition_$1 : bool;
	var $_$_condition_$2 : bool;
	var $_$_condition_$3 : bool;
	var $_$_condition_$4 : bool;
	var $_$_condition_$5 : bool;
$start:
	assume (forall  #n : $ctype :: {$ptr_to(#n)} ( ($type_project_0($ptr_to(#n)) == #n) && ($type_branch($ptr_to(#n)) == $ctype_ptr) ));
	assume (forall  #n_$0 : $ctype :: {$spec_ptr_to(#n_$0)} ( ($type_project_0($spec_ptr_to(#n_$0)) == #n_$0) && ($type_branch($spec_ptr_to(#n_$0)) == $ctype_spec_ptr) ));
	assume (forall  #n_$1 : $ctype :: {$ptr_to(#n_$1)} ( $sizeof($ptr_to(#n_$1)) == $arch_ptr_size ));
	assume (forall  #n_$2 : $ctype :: {$spec_ptr_to(#n_$2)} ( $sizeof($ptr_to(#n_$2)) == $arch_ptr_size ));
	assume (forall  #r : $ctype, #d : $ctype :: {$map_t(#r,#d)} ( (($map_domain($map_t(#r,#d)) == #d) && ($map_range($map_t(#r,#d)) == #r)) && ($type_branch($map_t(#r,#d)) == $ctype_map) ));
	assume (forall  sz : Integer, t : $ctype :: ( (($sizeof(t) == sz) && ($type_branch(t) == $ctype_flat)) == (($sizeof(t) == sz) && ($type_branch(t) == $ctype_flat)) ));
	assume (forall  sz_$0 : Integer, t_$0 : $ctype :: ( ((($sizeof(t_$0) == sz_$0) && ($type_branch(t_$0) == $ctype_flat)) && $is_primitive(t_$0)) == ((($sizeof(t_$0) == sz_$0) && ($type_branch(t_$0) == $ctype_flat)) && $is_primitive(t_$0)) ));
	assume (forall  t_$1 : $ctype :: ( (((($sizeof(t_$1) == 1) && ($type_branch(t_$1) == $ctype_flat)) && $is_primitive(t_$1)) && $is_math_type(t_$1)) == (((($sizeof(t_$1) == 1) && ($type_branch(t_$1) == $ctype_flat)) && $is_primitive(t_$1)) && $is_math_type(t_$1)) ));
	assume (forall  t_$2 : $ctype :: ( (((($sizeof(t_$2) == $arch_ptr_size) && ($type_branch(t_$2) == $ctype_flat)) && $is_primitive(t_$2)) && $is_fnptr_type(t_$2)) == (((($sizeof(t_$2) == $arch_ptr_size) && ($type_branch(t_$2) == $ctype_flat)) && $is_primitive(t_$2)) && $is_fnptr_type(t_$2)) ));
	assume (forall  t_$3 : $ctype :: ( (((($sizeof(t_$3) == 1) && ($type_branch(t_$3) == $ctype_flat)) && $is_primitive(t_$3)) && $is_record_type(t_$3)) == (((($sizeof(t_$3) == 1) && ($type_branch(t_$3) == $ctype_flat)) && $is_primitive(t_$3)) && $is_record_type(t_$3)) ));
	assume (forall  has_volatile_owns : Boolean, claimable : Boolean, sz_$1 : Integer, t_$4 : $ctype :: ( (((((($sizeof(t_$4) == sz_$1) && ($type_branch(t_$4) == $ctype_flat)) && (!$is_primitive(t_$4))) && ($is_claimable(t_$4) <==> claimable)) && (if has_volatile_owns then $is_volatile_field($f_owns(t_$4)) else $is_sequential_field($f_owns(t_$4)))) && true) == (((((($sizeof(t_$4) == sz_$1) && ($type_branch(t_$4) == $ctype_flat)) && (!$is_primitive(t_$4))) && ($is_claimable(t_$4) <==> claimable)) && (if has_volatile_owns then $is_volatile_field($f_owns(t_$4)) else $is_sequential_field($f_owns(t_$4)))) && true) ));
	assume (forall  has_volatile_owns_$0 : Boolean, claimable_$0 : Boolean, sz_$2 : Integer, t_$5 : $ctype :: ( (((((((($sizeof(t_$5) == sz_$2) && ($type_branch(t_$5) == $ctype_flat)) && (!$is_primitive(t_$5))) && ($is_claimable(t_$5) <==> claimable_$0)) && (if has_volatile_owns_$0 then $is_volatile_field($f_owns(t_$5)) else $is_sequential_field($f_owns(t_$5)))) && true) && ($as_union_type(t_$5) == t_$5)) && $is_union_type(t_$5)) == (((((((($sizeof(t_$5) == sz_$2) && ($type_branch(t_$5) == $ctype_flat)) && (!$is_primitive(t_$5))) && ($is_claimable(t_$5) <==> claimable_$0)) && (if has_volatile_owns_$0 then $is_volatile_field($f_owns(t_$5)) else $is_sequential_field($f_owns(t_$5)))) && true) && ($as_union_type(t_$5) == t_$5)) && $is_union_type(t_$5)) ));
	assume (forall  has_volatile_owns_$1 : Boolean, claimable_$1 : Boolean, sz_$3 : Integer, t_$6 : $ctype :: ( ((((((($sizeof(t_$6) == sz_$3) && ($type_branch(t_$6) == $ctype_flat)) && (!$is_primitive(t_$6))) && ($is_claimable(t_$6) <==> claimable_$1)) && (if has_volatile_owns_$1 then $is_volatile_field($f_owns(t_$6)) else $is_sequential_field($f_owns(t_$6)))) && true) && (!$is_union_type(t_$6))) == ((((((($sizeof(t_$6) == sz_$3) && ($type_branch(t_$6) == $ctype_flat)) && (!$is_primitive(t_$6))) && ($is_claimable(t_$6) <==> claimable_$1)) && (if has_volatile_owns_$1 then $is_volatile_field($f_owns(t_$6)) else $is_sequential_field($f_owns(t_$6)))) && true) && (!$is_union_type(t_$6))) ));
	assume (forall  sz_$4 : Integer, t_$7 : $ctype :: ( (((($sizeof(t_$7) == sz_$4) && ($type_branch(t_$7) == $ctype_flat)) && $is_primitive(t_$7)) && ($as_in_range_t(t_$7) == t_$7)) == (((($sizeof(t_$7) == sz_$4) && ($type_branch(t_$7) == $ctype_flat)) && $is_primitive(t_$7)) && ($as_in_range_t(t_$7) == t_$7)) ));
	assume (forall  t_$8 : $ctype :: ( (!$is_primitive(t_$8)) == (!$is_primitive(t_$8)) ));
	assume (forall  p : $ptr :: ( (!$is_primitive($field_type($field(p)))) == (!$is_primitive($field_type($field(p)))) ));
	assume (forall  #r_$0 : $ctype, #d_$0 : $ctype :: {$map_t(#r_$0,#d_$0)} ( $is_primitive($map_t(#r_$0,#d_$0)) ));
	assume (forall  #n_$3 : $ctype :: {$ptr_to(#n_$3)} ( $is_primitive($ptr_to(#n_$3)) ));
	assume (forall  #n_$4 : $ctype :: {$spec_ptr_to(#n_$4)} ( $is_primitive($spec_ptr_to(#n_$4)) ));
	assume (forall  #n_$5 : $ctype :: {$is_primitive(#n_$5)} ( $is_primitive(#n_$5) ==> (!$is_claimable(#n_$5)) ));
	assume (forall  p_$0 : $ptr :: ( $field_type($field(p_$0)) == $field_type($field(p_$0)) ));
	assume (forall  t_$27 : $field, b : $ptr :: ( $field($ptr(t_$27,b)) == t_$27 ));
	assume (forall  t_$28 : $field, b_$0 : $ptr :: ( $base($ptr(t_$28,b_$0)) == b_$0 ));
	assume (forall  p_$73 : $ptr :: {$base(p_$73)} {$field(p_$73)} ( $ptr($field(p_$73),$base(p_$73)) == p_$73 ));
	assume (forall  p_$1 : $ptr :: ( (!(p_$1 == $phys_ptr_cast($null,$field_type($field(p_$1))))) == (!(p_$1 == $phys_ptr_cast($null,$field_type($field(p_$1))))) ));
	assume (forall  p_$2 : $ptr :: ( (p_$2 == $phys_ptr_cast($null,$field_type($field(p_$2)))) == (p_$2 == $phys_ptr_cast($null,$field_type($field(p_$2)))) ));
	assume (forall  p_$74 : $ptr :: {$addr(p_$74)} ( ((($addr(p_$74) == 0) <==> (p_$74 == $phys_ptr_cast($null,$field_type($field(p_$74))))) && ($in_range_phys_ptr(p_$74) ==> $in_range_t($arch_ptr_type,$addr(p_$74)))) && (($in_range_phys_ptr(p_$74) && $is_proper(p_$74)) ==> $in_range_t($arch_ptr_type,$addr(p_$74) + $sizeof($field_type($field(p_$74))))) ));
	assume (forall  f : $field :: ( ($field_kind(f) == $fk_base) == ($field_kind(f) == $fk_base) ));
	assume (forall  p_$75 : $ptr :: {$is_proper(p_$75)} ( $is_proper(p_$75) ==> ($field_parent_type($field(p_$75)) == $field_type($field($base(p_$75)))) ));
	assume (forall  p_$76 : $ptr, t_$29 : $ctype :: {$is(p_$76,t_$29)} ( $is(p_$76,t_$29) <==> ($field_type($field(p_$76)) == t_$29) ));
	assume (forall  p_$77 : $ptr :: {$spec_ptr_cast(p_$77,$field_type($field(p_$77)))} {$in_range_spec_ptr(p_$77)} ( $in_range_spec_ptr(p_$77) ==> ($spec_ptr_cast(p_$77,$field_type($field(p_$77))) == p_$77) ));
	assume (forall  p_$78 : $ptr :: {$phys_ptr_cast(p_$78,$field_type($field(p_$78)))} {$in_range_phys_ptr(p_$78)} ( $in_range_phys_ptr(p_$78) ==> (($phys_ptr_cast(p_$78,$field_type($field(p_$78))) == p_$78) && $is_phys_field($field(p_$78))) ));
	assume (forall  p_$79 : $ptr :: {$in_range_phys_ptr($base(p_$79))} ( $in_range_phys_ptr(p_$79) ==> $in_range_phys_ptr($base(p_$79)) ));
	assume (forall  p_$80 : $ptr, t_$30 : $ctype :: {$addr($phys_ptr_cast(p_$80,t_$30))} ( $addr($phys_ptr_cast(p_$80,t_$30)) == $addr(p_$80) ));
	assume (forall  c : $ptr, t_$9 : $ctype, p_$3 : $ptr :: ( ((($field_type($field(c)) == t_$9) && ((c == $phys_ptr_cast($null,$field_type($field(c)))) <==> (p_$3 == $phys_ptr_cast($null,$field_type($field(p_$3)))))) && ($field(c) == $as_field_with_type($field(c),t_$9))) == ((($field_type($field(c)) == t_$9) && ((c == $phys_ptr_cast($null,$field_type($field(c)))) <==> (p_$3 == $phys_ptr_cast($null,$field_type($field(p_$3)))))) && ($field(c) == $as_field_with_type($field(c),t_$9))) ));
	assume (forall  p_$81 : $ptr, t_$31 : $ctype :: {$spec_ptr_cast(p_$81,t_$31)} ( ((($field_type($field($spec_ptr_cast(p_$81,t_$31))) == t_$31) && (($spec_ptr_cast(p_$81,t_$31) == $phys_ptr_cast($null,$field_type($field($spec_ptr_cast(p_$81,t_$31))))) <==> (p_$81 == $phys_ptr_cast($null,$field_type($field(p_$81)))))) && ($field($spec_ptr_cast(p_$81,t_$31)) == $as_field_with_type($field($spec_ptr_cast(p_$81,t_$31)),t_$31))) && $in_range_spec_ptr($spec_ptr_cast(p_$81,t_$31)) ));
	assume (forall  p_$82 : $ptr, t_$32 : $ctype :: {$phys_ptr_cast(p_$82,t_$32)} ( ((($field_type($field($phys_ptr_cast(p_$82,t_$32))) == t_$32) && (($phys_ptr_cast(p_$82,t_$32) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(p_$82,t_$32))))) <==> (p_$82 == $phys_ptr_cast($null,$field_type($field(p_$82)))))) && ($field($phys_ptr_cast(p_$82,t_$32)) == $as_field_with_type($field($phys_ptr_cast(p_$82,t_$32)),t_$32))) && $in_range_phys_ptr($phys_ptr_cast(p_$82,t_$32)) ));
	assume (forall  p_$83 : $ptr :: {$in_range_phys_ptr(p_$83)} ( ((!$in_range_phys_ptr(p_$83)) ==> $in_range_spec_ptr(p_$83)) && true ));
	assume (forall  p_$84 : $ptr, f_$29 : $field :: {$has_field_at0($field_type($field(p_$84)),f_$29),$phys_ptr_cast(p_$84,$field_type(f_$29))} ( (($is_proper(p_$84) && $in_range_phys_ptr(p_$84)) && $has_field_at0($field_type($field(p_$84)),f_$29)) ==> ($phys_ptr_cast(p_$84,$field_type(f_$29)) == $dot(p_$84,f_$29)) ));
	assume (forall  p_$85 : $ptr :: {$phys_ptr_cast(p_$85,$field_parent_type($field(p_$85))),$has_field_at0($field_parent_type($field(p_$85)),$field(p_$85))} ( (($is_proper(p_$85) && $in_range_phys_ptr(p_$85)) && $has_field_at0($field_parent_type($field(p_$85)),$field(p_$85))) ==> ($phys_ptr_cast(p_$85,$field_parent_type($field(p_$85))) == $base(p_$85)) ));
	assume (forall  p_$86 : $ptr, f_$30 : $field :: {$dot(p_$86,f_$30)} ( $dot(p_$86,f_$30) == $ptr(f_$30,p_$86) ));
	assume (forall  p_$87 : $ptr, f_$31 : $field :: {$addr($dot(p_$87,f_$31))} ( $is_phys_field(f_$31) ==> ($addr($dot(p_$87,f_$31)) == $unchk_add($arch_ptr_type,$addr(p_$87),$field_offset(f_$31))) ));
	assume (forall  p_$88 : $ptr, f_$32 : $field :: {$dot(p_$88,f_$32)} ( (((($in_range_spec_ptr(p_$88) || $is_ghost_field(f_$32)) ==> $in_range_spec_ptr($dot(p_$88,f_$32))) && (($in_range_phys_ptr(p_$88) && $is_phys_field(f_$32)) ==> $in_range_phys_ptr($dot(p_$88,f_$32)))) && ($is_proper($dot(p_$88,f_$32)) ==> ((!(p_$88 == $phys_ptr_cast($null,$field_type($field(p_$88))))) ==> (!($dot(p_$88,f_$32) == $phys_ptr_cast($null,$field_type($field($dot(p_$88,f_$32))))))))) && (($is_proper(p_$88) && ($field_parent_type(f_$32) == $field_type($field(p_$88)))) ==> $is_proper($dot(p_$88,f_$32))) ));
	assume (forall  p_$4 : $ptr :: ( $base(p_$4) == $base(p_$4) ));
	assume (forall  p_$5 : $ptr, S : $state :: ( $emb0(p_$5) == $emb0(p_$5) ));
	assume (forall  p_$89 : $ptr :: {$emb0(p_$89)} ( $emb0(p_$89) == (if $is_primitive($field_type($field(p_$89))) then $base(p_$89) else p_$89) ));
	assume (forall  p_$6 : $ptr :: ( $base(p_$6) == $base(p_$6) ));
	assume (forall  t_$10 : $ctype, p_$7 : $ptr :: ( $ptr($as_field_with_type($field(p_$7),t_$10),$base(p_$7)) == $ptr($as_field_with_type($field(p_$7),t_$10),$base(p_$7)) ));
	assume (forall  f_$33 : $field :: {$field_parent_type(f_$33)} ( !$is_primitive($field_parent_type(f_$33)) ));
	assume (forall  tp : $ctype, f_$0 : $field, partp : $ctype :: ( ((((((($field_parent_type(f_$0) == partp) && ($field_type(f_$0) == tp)) && ($as_field_with_type(f_$0,tp) == f_$0)) && ($is_primitive(tp) ==> ($as_primitive_field(f_$0) == f_$0))) && ((!$is_primitive(tp)) ==> ($as_composite_field(f_$0) == f_$0))) && ($field_arr_root(f_$0) == f_$0)) && true) == ((((((($field_parent_type(f_$0) == partp) && ($field_type(f_$0) == tp)) && ($as_field_with_type(f_$0,tp) == f_$0)) && ($is_primitive(tp) ==> ($as_primitive_field(f_$0) == f_$0))) && ((!$is_primitive(tp)) ==> ($as_composite_field(f_$0) == f_$0))) && ($field_arr_root(f_$0) == f_$0)) && true) ));
	assume (forall  isvolatile : Boolean, tp_$0 : $ctype, f_$1 : $field, partp_$0 : $ctype :: ( (((((((((($field_parent_type(f_$1) == partp_$0) && ($field_type(f_$1) == tp_$0)) && ($as_field_with_type(f_$1,tp_$0) == f_$1)) && ($is_primitive(tp_$0) ==> ($as_primitive_field(f_$1) == f_$1))) && ((!$is_primitive(tp_$0)) ==> ($as_composite_field(f_$1) == f_$1))) && ($field_arr_root(f_$1) == f_$1)) && true) && ((!isvolatile) ==> $is_sequential_field(f_$1))) && (isvolatile ==> $is_volatile_field(f_$1))) && true) == (((((((((($field_parent_type(f_$1) == partp_$0) && ($field_type(f_$1) == tp_$0)) && ($as_field_with_type(f_$1,tp_$0) == f_$1)) && ($is_primitive(tp_$0) ==> ($as_primitive_field(f_$1) == f_$1))) && ((!$is_primitive(tp_$0)) ==> ($as_composite_field(f_$1) == f_$1))) && ($field_arr_root(f_$1) == f_$1)) && true) && ((!isvolatile) ==> $is_sequential_field(f_$1))) && (isvolatile ==> $is_volatile_field(f_$1))) && true) ));
	assume (forall  off : Integer, isvolatile_$0 : Boolean, tp_$1 : $ctype, f_$2 : $field, partp_$1 : $ctype :: ( ((((((((((((((($field_parent_type(f_$2) == partp_$1) && ($field_type(f_$2) == tp_$1)) && ($as_field_with_type(f_$2,tp_$1) == f_$2)) && ($is_primitive(tp_$1) ==> ($as_primitive_field(f_$2) == f_$2))) && ((!$is_primitive(tp_$1)) ==> ($as_composite_field(f_$2) == f_$2))) && ($field_arr_root(f_$2) == f_$2)) && true) && ((!isvolatile_$0) ==> $is_sequential_field(f_$2))) && (isvolatile_$0 ==> $is_volatile_field(f_$2))) && true) && ($field_offset(f_$2) == off)) && $is_phys_field(f_$2)) && ($field_kind(f_$2) == $fk_base)) && ((off == 0) ==> $has_field_at0(partp_$1,f_$2))) && true) == ((((((((((((((($field_parent_type(f_$2) == partp_$1) && ($field_type(f_$2) == tp_$1)) && ($as_field_with_type(f_$2,tp_$1) == f_$2)) && ($is_primitive(tp_$1) ==> ($as_primitive_field(f_$2) == f_$2))) && ((!$is_primitive(tp_$1)) ==> ($as_composite_field(f_$2) == f_$2))) && ($field_arr_root(f_$2) == f_$2)) && true) && ((!isvolatile_$0) ==> $is_sequential_field(f_$2))) && (isvolatile_$0 ==> $is_volatile_field(f_$2))) && true) && ($field_offset(f_$2) == off)) && $is_phys_field(f_$2)) && ($field_kind(f_$2) == $fk_base)) && ((off == 0) ==> $has_field_at0(partp_$1,f_$2))) && true) ));
	assume (forall  isvolatile_$1 : Boolean, tp_$2 : $ctype, f_$3 : $field, partp_$2 : $ctype :: ( ((((((((((((($field_parent_type(f_$3) == partp_$2) && ($field_type(f_$3) == tp_$2)) && ($as_field_with_type(f_$3,tp_$2) == f_$3)) && ($is_primitive(tp_$2) ==> ($as_primitive_field(f_$3) == f_$3))) && ((!$is_primitive(tp_$2)) ==> ($as_composite_field(f_$3) == f_$3))) && ($field_arr_root(f_$3) == f_$3)) && true) && ((!isvolatile_$1) ==> $is_sequential_field(f_$3))) && (isvolatile_$1 ==> $is_volatile_field(f_$3))) && true) && ($field_kind(f_$3) == $fk_base)) && $is_ghost_field(f_$3)) && true) == ((((((((((((($field_parent_type(f_$3) == partp_$2) && ($field_type(f_$3) == tp_$2)) && ($as_field_with_type(f_$3,tp_$2) == f_$3)) && ($is_primitive(tp_$2) ==> ($as_primitive_field(f_$3) == f_$3))) && ((!$is_primitive(tp_$2)) ==> ($as_composite_field(f_$3) == f_$3))) && ($field_arr_root(f_$3) == f_$3)) && true) && ((!isvolatile_$1) ==> $is_sequential_field(f_$3))) && (isvolatile_$1 ==> $is_volatile_field(f_$3))) && true) && ($field_kind(f_$3) == $fk_base)) && $is_ghost_field(f_$3)) && true) ));
	assume (forall  tp_$3 : $ctype, f_$4 : $field, partp_$3 : $ctype :: ( (((((((((((((((((($field_parent_type(f_$4) == partp_$3) && ($field_type(f_$4) == tp_$3)) && ($as_field_with_type(f_$4,tp_$3) == f_$4)) && ($is_primitive(tp_$3) ==> ($as_primitive_field(f_$4) == f_$4))) && ((!$is_primitive(tp_$3)) ==> ($as_composite_field(f_$4) == f_$4))) && ($field_arr_root(f_$4) == f_$4)) && true) && ((!false) ==> $is_sequential_field(f_$4))) && (false ==> $is_volatile_field(f_$4))) && true) && ($field_offset(f_$4) == 0)) && $is_phys_field(f_$4)) && ($field_kind(f_$4) == $fk_base)) && ((0 == 0) ==> $has_field_at0(partp_$3,f_$4))) && true) && ($f_group_root(tp_$3) == f_$4)) && $is_group_type(tp_$3)) && true) == (((((((((((((((((($field_parent_type(f_$4) == partp_$3) && ($field_type(f_$4) == tp_$3)) && ($as_field_with_type(f_$4,tp_$3) == f_$4)) && ($is_primitive(tp_$3) ==> ($as_primitive_field(f_$4) == f_$4))) && ((!$is_primitive(tp_$3)) ==> ($as_composite_field(f_$4) == f_$4))) && ($field_arr_root(f_$4) == f_$4)) && true) && ((!false) ==> $is_sequential_field(f_$4))) && (false ==> $is_volatile_field(f_$4))) && true) && ($field_offset(f_$4) == 0)) && $is_phys_field(f_$4)) && ($field_kind(f_$4) == $fk_base)) && ((0 == 0) ==> $has_field_at0(partp_$3,f_$4))) && true) && ($f_group_root(tp_$3) == f_$4)) && $is_group_type(tp_$3)) && true) ));
	assume (forall  fk : $field_kind, tp_$4 : $ctype, f_$5 : $field, partp_$4 : $ctype :: ( ((((((((($field_parent_type(f_$5) == partp_$4) && ($field_type(f_$5) == tp_$4)) && ($as_field_with_type(f_$5,tp_$4) == f_$5)) && ($is_primitive(tp_$4) ==> ($as_primitive_field(f_$5) == f_$5))) && ((!$is_primitive(tp_$4)) ==> ($as_composite_field(f_$5) == f_$5))) && ($field_arr_root(f_$5) == f_$5)) && true) && ($field_kind(f_$5) == fk)) && true) == ((((((((($field_parent_type(f_$5) == partp_$4) && ($field_type(f_$5) == tp_$4)) && ($as_field_with_type(f_$5,tp_$4) == f_$5)) && ($is_primitive(tp_$4) ==> ($as_primitive_field(f_$5) == f_$5))) && ((!$is_primitive(tp_$4)) ==> ($as_composite_field(f_$5) == f_$5))) && ($field_arr_root(f_$5) == f_$5)) && true) && ($field_kind(f_$5) == fk)) && true) ));
	assume (forall  fk_$0 : $field_kind, tp_$5 : $ctype, f_$6 : $field, partp_$5 : $ctype :: ( (((((((((($field_parent_type(f_$6) == partp_$5) && ($field_type(f_$6) == tp_$5)) && ($as_field_with_type(f_$6,tp_$5) == f_$6)) && ($is_primitive(tp_$5) ==> ($as_primitive_field(f_$6) == f_$6))) && ((!$is_primitive(tp_$5)) ==> ($as_composite_field(f_$6) == f_$6))) && ($field_arr_root(f_$6) == f_$6)) && true) && ($field_kind(f_$6) == fk_$0)) && true) && $is_ghost_field(f_$6)) == (((((((((($field_parent_type(f_$6) == partp_$5) && ($field_type(f_$6) == tp_$5)) && ($as_field_with_type(f_$6,tp_$5) == f_$6)) && ($is_primitive(tp_$5) ==> ($as_primitive_field(f_$6) == f_$6))) && ((!$is_primitive(tp_$5)) ==> ($as_composite_field(f_$6) == f_$6))) && ($field_arr_root(f_$6) == f_$6)) && true) && ($field_kind(f_$6) == fk_$0)) && true) && $is_ghost_field(f_$6)) ));
	assume (forall  t_$33 : $ctype :: {$f_root(t_$33)} ( if (!$is_primitive(t_$33)) then ((((((((($field_parent_type($f_root(t_$33)) == t_$33) && ($field_type($f_root(t_$33)) == t_$33)) && ($as_field_with_type($f_root(t_$33),t_$33) == $f_root(t_$33))) && ($is_primitive(t_$33) ==> ($as_primitive_field($f_root(t_$33)) == $f_root(t_$33)))) && ((!$is_primitive(t_$33)) ==> ($as_composite_field($f_root(t_$33)) == $f_root(t_$33)))) && ($field_arr_root($f_root(t_$33)) == $f_root(t_$33))) && true) && ($field_kind($f_root(t_$33)) == $fk_allocation_root)) && true) else (((((((((($field_parent_type($f_root(t_$33)) == $primitive_emb_type) && ($field_type($f_root(t_$33)) == t_$33)) && ($as_field_with_type($f_root(t_$33),t_$33) == $f_root(t_$33))) && ($is_primitive(t_$33) ==> ($as_primitive_field($f_root(t_$33)) == $f_root(t_$33)))) && ((!$is_primitive(t_$33)) ==> ($as_composite_field($f_root(t_$33)) == $f_root(t_$33)))) && ($field_arr_root($f_root(t_$33)) == $f_root(t_$33))) && true) && ($field_kind($f_root(t_$33)) == $fk_allocation_root)) && true) && $is_sequential_field($f_root(t_$33))) ));
	assume (forall  t_$34 : $ctype :: {$f_owns(t_$34)} ( (!$is_primitive(t_$34)) ==> (((((((((($field_parent_type($f_owns(t_$34)) == t_$34) && ($field_type($f_owns(t_$34)) == ^$#ptrset)) && ($as_field_with_type($f_owns(t_$34),^$#ptrset) == $f_owns(t_$34))) && ($is_primitive(^$#ptrset) ==> ($as_primitive_field($f_owns(t_$34)) == $f_owns(t_$34)))) && ((!$is_primitive(^$#ptrset)) ==> ($as_composite_field($f_owns(t_$34)) == $f_owns(t_$34)))) && ($field_arr_root($f_owns(t_$34)) == $f_owns(t_$34))) && true) && ($field_kind($f_owns(t_$34)) == $fk_owns)) && true) && $is_ghost_field($f_owns(t_$34))) ));
	assume (forall  t_$35 : $ctype :: {$f_ref_cnt(t_$35)} ( (!$is_primitive(t_$35)) ==> ((((((((((($field_parent_type($f_ref_cnt(t_$35)) == t_$35) && ($field_type($f_ref_cnt(t_$35)) == ^^mathint)) && ($as_field_with_type($f_ref_cnt(t_$35),^^mathint) == $f_ref_cnt(t_$35))) && ($is_primitive(^^mathint) ==> ($as_primitive_field($f_ref_cnt(t_$35)) == $f_ref_cnt(t_$35)))) && ((!$is_primitive(^^mathint)) ==> ($as_composite_field($f_ref_cnt(t_$35)) == $f_ref_cnt(t_$35)))) && ($field_arr_root($f_ref_cnt(t_$35)) == $f_ref_cnt(t_$35))) && true) && ($field_kind($f_ref_cnt(t_$35)) == $fk_ref_cnt)) && true) && $is_ghost_field($f_ref_cnt(t_$35))) && $is_semi_sequential_field($f_ref_cnt(t_$35))) ));
	assume (forall  t_$36 : $ctype :: {$f_vol_version(t_$36)} ( (!$is_primitive(t_$36)) ==> ((((((((((($field_parent_type($f_vol_version(t_$36)) == t_$36) && ($field_type($f_vol_version(t_$36)) == ^$#volatile_version_t)) && ($as_field_with_type($f_vol_version(t_$36),^$#volatile_version_t) == $f_vol_version(t_$36))) && ($is_primitive(^$#volatile_version_t) ==> ($as_primitive_field($f_vol_version(t_$36)) == $f_vol_version(t_$36)))) && ((!$is_primitive(^$#volatile_version_t)) ==> ($as_composite_field($f_vol_version(t_$36)) == $f_vol_version(t_$36)))) && ($field_arr_root($f_vol_version(t_$36)) == $f_vol_version(t_$36))) && true) && ($field_kind($f_vol_version(t_$36)) == $fk_vol_version)) && true) && $is_ghost_field($f_vol_version(t_$36))) && $is_semi_sequential_field($f_vol_version(t_$36))) ));
	assume (forall  a : Integer :: ( $in_range_t($arch_ptr_type,a) == $in_range_t($arch_ptr_type,a) ));
	assume (forall  off_$0 : Integer, p_$8 : Integer :: ( $unchk_add($arch_ptr_type,p_$8,off_$0) == $unchk_add($arch_ptr_type,p_$8,off_$0) ));
	assume ($arch_ptr_size == 4) ==> ($arch_ptr_type == ^^u4);
	assume ($arch_ptr_size == 8) ==> ($arch_ptr_type == ^^u8);
	assume ((($sizeof(^^i1) == 1) && ($type_branch(^^i1) == $ctype_flat)) && $is_primitive(^^i1)) && ($as_in_range_t(^^i1) == ^^i1);
	assume ((($sizeof(^^i2) == 2) && ($type_branch(^^i2) == $ctype_flat)) && $is_primitive(^^i2)) && ($as_in_range_t(^^i2) == ^^i2);
	assume ((($sizeof(^^i4) == 4) && ($type_branch(^^i4) == $ctype_flat)) && $is_primitive(^^i4)) && ($as_in_range_t(^^i4) == ^^i4);
	assume ((($sizeof(^^i8) == 8) && ($type_branch(^^i8) == $ctype_flat)) && $is_primitive(^^i8)) && ($as_in_range_t(^^i8) == ^^i8);
	assume ((($sizeof(^^u1) == 1) && ($type_branch(^^u1) == $ctype_flat)) && $is_primitive(^^u1)) && ($as_in_range_t(^^u1) == ^^u1);
	assume ((($sizeof(^^u2) == 2) && ($type_branch(^^u2) == $ctype_flat)) && $is_primitive(^^u2)) && ($as_in_range_t(^^u2) == ^^u2);
	assume ((($sizeof(^^u4) == 4) && ($type_branch(^^u4) == $ctype_flat)) && $is_primitive(^^u4)) && ($as_in_range_t(^^u4) == ^^u4);
	assume ((($sizeof(^^u8) == 8) && ($type_branch(^^u8) == $ctype_flat)) && $is_primitive(^^u8)) && ($as_in_range_t(^^u8) == ^^u8);
	assume (($sizeof(^^f4) == 4) && ($type_branch(^^f4) == $ctype_flat)) && $is_primitive(^^f4);
	assume (($sizeof(^^f8) == 8) && ($type_branch(^^f8) == $ctype_flat)) && $is_primitive(^^f8);
	assume (($sizeof(^^bool) == 1) && ($type_branch(^^bool) == $ctype_flat)) && $is_primitive(^^bool);
	assume (($sizeof(^^void) == 1) && ($type_branch(^^void) == $ctype_flat)) && $is_primitive(^^void);
	assume ((($sizeof(^^object) == 1) && ($type_branch(^^object) == $ctype_flat)) && $is_primitive(^^object)) && $is_math_type(^^object);
	assume ((($sizeof(^^field) == 1) && ($type_branch(^^field) == $ctype_flat)) && $is_primitive(^^field)) && $is_math_type(^^field);
	assume ((($sizeof(^^null_type) == 1) && ($type_branch(^^null_type) == $ctype_flat)) && $is_primitive(^^null_type)) && $is_math_type(^^null_type);
	assume ((((($sizeof(^^claim) == 1) && ($type_branch(^^claim) == $ctype_flat)) && (!$is_primitive(^^claim))) && ($is_claimable(^^claim) <==> true)) && (if false then $is_volatile_field($f_owns(^^claim)) else $is_sequential_field($f_owns(^^claim)))) && true;
	assume ((((($sizeof(^$#volatile_version_t) == 1) && ($type_branch(^$#volatile_version_t) == $ctype_flat)) && (!$is_primitive(^$#volatile_version_t))) && ($is_claimable(^$#volatile_version_t) <==> false)) && (if false then $is_volatile_field($f_owns(^$#volatile_version_t)) else $is_sequential_field($f_owns(^$#volatile_version_t)))) && true;
	assume ((($sizeof(^^mathint) == 1) && ($type_branch(^^mathint) == $ctype_flat)) && $is_primitive(^^mathint)) && $is_math_type(^^mathint);
	assume ((($sizeof(^$#ptrset) == 1) && ($type_branch(^$#ptrset) == $ctype_flat)) && $is_primitive(^$#ptrset)) && $is_math_type(^$#ptrset);
	assume ((($sizeof(^$#state_t) == 1) && ($type_branch(^$#state_t) == $ctype_flat)) && $is_primitive(^$#state_t)) && $is_math_type(^$#state_t);
	assume ((($sizeof(^$#struct) == 1) && ($type_branch(^$#struct) == $ctype_flat)) && $is_primitive(^$#struct)) && $is_math_type(^$#struct);
	assume (forall  t_$11 : $ctype :: ( $phys_ptr_cast($null,t_$11) == $phys_ptr_cast($null,t_$11) ));
	assume $addr($null) == 0;
	assume $in_range_spec_ptr($null) && $in_range_phys_ptr($null);
	assume (forall  t_$12 : $ctype, p_$9 : $ptr :: ( ((($in_range_spec_ptr(p_$9) && (!(p_$9 == $phys_ptr_cast($null,$field_type($field(p_$9)))))) && $is_proper(p_$9)) && ($field(p_$9) == $f_root(t_$12))) == ((($in_range_spec_ptr(p_$9) && (!(p_$9 == $phys_ptr_cast($null,$field_type($field(p_$9)))))) && $is_proper(p_$9)) && ($field(p_$9) == $f_root(t_$12))) ));
	assume ((((($sizeof(^$#thread_id_t) == 1) && ($type_branch(^$#thread_id_t) == $ctype_flat)) && (!$is_primitive(^$#thread_id_t))) && ($is_claimable(^$#thread_id_t) <==> false)) && (if true then $is_volatile_field($f_owns(^$#thread_id_t)) else $is_sequential_field($f_owns(^$#thread_id_t)))) && true;
	assume (($in_range_spec_ptr($me()) && (!($me() == $phys_ptr_cast($null,$field_type($field($me())))))) && $is_proper($me())) && ($field($me()) == $f_root(^$#thread_id_t));
	assume (forall  t_$37 : $ctype :: {$is_threadtype(t_$37)} ( $is_threadtype(t_$37) <==> (t_$37 == ^$#thread_id_t) ));
	assume ((((($sizeof($inactive_union_owner_type) == 1) && ($type_branch($inactive_union_owner_type) == $ctype_flat)) && (!$is_primitive($inactive_union_owner_type))) && ($is_claimable($inactive_union_owner_type) <==> false)) && (if true then $is_volatile_field($f_owns($inactive_union_owner_type)) else $is_sequential_field($f_owns($inactive_union_owner_type)))) && true;
	assume (($in_range_spec_ptr($inactive_union_owner()) && (!($inactive_union_owner() == $phys_ptr_cast($null,$field_type($field($inactive_union_owner())))))) && $is_proper($inactive_union_owner())) && ($field($inactive_union_owner()) == $f_root($inactive_union_owner_type));
	assume (forall  f_$34 : $field :: {$field_arr_index(f_$34)} ( f_$34 == $field_arr_ctor($field_arr_root(f_$34),$field_arr_index(f_$34)) ));
	assume (forall  f_$35 : $field, i_$1 : Integer :: {$field_arr_ctor(f_$35,i_$1)} ( ($field_arr_root($field_arr_ctor(f_$35,i_$1)) == f_$35) && ($field_arr_index($field_arr_ctor(f_$35,i_$1)) == i_$1) ));
	assume (forall  sz_$5 : Integer, isvolatile_$2 : Boolean, tp_$6 : $ctype, f_$7 : $field, partp_$6 : $ctype :: ( (((((((((((((($field_parent_type(f_$7) == partp_$6) && ($field_type(f_$7) == tp_$6)) && ($as_field_with_type(f_$7,tp_$6) == f_$7)) && ($is_primitive(tp_$6) ==> ($as_primitive_field(f_$7) == f_$7))) && ((!$is_primitive(tp_$6)) ==> ($as_composite_field(f_$7) == f_$7))) && ($field_arr_root(f_$7) == f_$7)) && true) && ((!isvolatile_$2) ==> $is_sequential_field(f_$7))) && (isvolatile_$2 ==> $is_volatile_field(f_$7))) && true) && ($field_arr_size(f_$7) == sz_$5)) && ($field_arr_index(f_$7) == 0)) && ($field_kind(f_$7) == $fk_emb_array)) && true) == (((((((((((((($field_parent_type(f_$7) == partp_$6) && ($field_type(f_$7) == tp_$6)) && ($as_field_with_type(f_$7,tp_$6) == f_$7)) && ($is_primitive(tp_$6) ==> ($as_primitive_field(f_$7) == f_$7))) && ((!$is_primitive(tp_$6)) ==> ($as_composite_field(f_$7) == f_$7))) && ($field_arr_root(f_$7) == f_$7)) && true) && ((!isvolatile_$2) ==> $is_sequential_field(f_$7))) && (isvolatile_$2 ==> $is_volatile_field(f_$7))) && true) && ($field_arr_size(f_$7) == sz_$5)) && ($field_arr_index(f_$7) == 0)) && ($field_kind(f_$7) == $fk_emb_array)) && true) ));
	assume (forall  sz_$6 : Integer, off_$1 : Integer, isvolatile_$3 : Boolean, tp_$7 : $ctype, f_$8 : $field, partp_$7 : $ctype :: ( ((((((((((((((((($field_parent_type(f_$8) == partp_$7) && ($field_type(f_$8) == tp_$7)) && ($as_field_with_type(f_$8,tp_$7) == f_$8)) && ($is_primitive(tp_$7) ==> ($as_primitive_field(f_$8) == f_$8))) && ((!$is_primitive(tp_$7)) ==> ($as_composite_field(f_$8) == f_$8))) && ($field_arr_root(f_$8) == f_$8)) && true) && ((!isvolatile_$3) ==> $is_sequential_field(f_$8))) && (isvolatile_$3 ==> $is_volatile_field(f_$8))) && true) && ($field_arr_size(f_$8) == sz_$6)) && ($field_arr_index(f_$8) == 0)) && ($field_kind(f_$8) == $fk_emb_array)) && true) && ($field_offset(f_$8) == off_$1)) && $is_phys_field(f_$8)) && true) == ((((((((((((((((($field_parent_type(f_$8) == partp_$7) && ($field_type(f_$8) == tp_$7)) && ($as_field_with_type(f_$8,tp_$7) == f_$8)) && ($is_primitive(tp_$7) ==> ($as_primitive_field(f_$8) == f_$8))) && ((!$is_primitive(tp_$7)) ==> ($as_composite_field(f_$8) == f_$8))) && ($field_arr_root(f_$8) == f_$8)) && true) && ((!isvolatile_$3) ==> $is_sequential_field(f_$8))) && (isvolatile_$3 ==> $is_volatile_field(f_$8))) && true) && ($field_arr_size(f_$8) == sz_$6)) && ($field_arr_index(f_$8) == 0)) && ($field_kind(f_$8) == $fk_emb_array)) && true) && ($field_offset(f_$8) == off_$1)) && $is_phys_field(f_$8)) && true) ));
	assume (forall  sz_$7 : Integer, isvolatile_$4 : Boolean, tp_$8 : $ctype, f_$9 : $field, partp_$8 : $ctype :: ( (((((((((((((((($field_parent_type(f_$9) == partp_$8) && ($field_type(f_$9) == tp_$8)) && ($as_field_with_type(f_$9,tp_$8) == f_$9)) && ($is_primitive(tp_$8) ==> ($as_primitive_field(f_$9) == f_$9))) && ((!$is_primitive(tp_$8)) ==> ($as_composite_field(f_$9) == f_$9))) && ($field_arr_root(f_$9) == f_$9)) && true) && ((!isvolatile_$4) ==> $is_sequential_field(f_$9))) && (isvolatile_$4 ==> $is_volatile_field(f_$9))) && true) && ($field_arr_size(f_$9) == sz_$7)) && ($field_arr_index(f_$9) == 0)) && ($field_kind(f_$9) == $fk_emb_array)) && true) && $is_ghost_field(f_$9)) && true) == (((((((((((((((($field_parent_type(f_$9) == partp_$8) && ($field_type(f_$9) == tp_$8)) && ($as_field_with_type(f_$9,tp_$8) == f_$9)) && ($is_primitive(tp_$8) ==> ($as_primitive_field(f_$9) == f_$9))) && ((!$is_primitive(tp_$8)) ==> ($as_composite_field(f_$9) == f_$9))) && ($field_arr_root(f_$9) == f_$9)) && true) && ((!isvolatile_$4) ==> $is_sequential_field(f_$9))) && (isvolatile_$4 ==> $is_volatile_field(f_$9))) && true) && ($field_arr_size(f_$9) == sz_$7)) && ($field_arr_index(f_$9) == 0)) && ($field_kind(f_$9) == $fk_emb_array)) && true) && $is_ghost_field(f_$9)) && true) ));
	assume (forall  sz_$8 : Integer, off_$2 : Integer, isvolatile_$5 : Boolean, tp_$9 : $ctype, f_$10 : $field, partp_$9 : $ctype :: ( (((((((((((((((($field_parent_type(f_$10) == partp_$9) && ($field_type(f_$10) == $array(tp_$9,sz_$8))) && ($as_field_with_type(f_$10,$array(tp_$9,sz_$8)) == f_$10)) && ($is_primitive($array(tp_$9,sz_$8)) ==> ($as_primitive_field(f_$10) == f_$10))) && ((!$is_primitive($array(tp_$9,sz_$8))) ==> ($as_composite_field(f_$10) == f_$10))) && ($field_arr_root(f_$10) == f_$10)) && true) && ((!isvolatile_$5) ==> $is_sequential_field(f_$10))) && (isvolatile_$5 ==> $is_volatile_field(f_$10))) && true) && ($field_offset(f_$10) == off_$2)) && $is_phys_field(f_$10)) && ($field_kind(f_$10) == $fk_base)) && ((off_$2 == 0) ==> $has_field_at0(partp_$9,f_$10))) && true) && true) == (((((((((((((((($field_parent_type(f_$10) == partp_$9) && ($field_type(f_$10) == $array(tp_$9,sz_$8))) && ($as_field_with_type(f_$10,$array(tp_$9,sz_$8)) == f_$10)) && ($is_primitive($array(tp_$9,sz_$8)) ==> ($as_primitive_field(f_$10) == f_$10))) && ((!$is_primitive($array(tp_$9,sz_$8))) ==> ($as_composite_field(f_$10) == f_$10))) && ($field_arr_root(f_$10) == f_$10)) && true) && ((!isvolatile_$5) ==> $is_sequential_field(f_$10))) && (isvolatile_$5 ==> $is_volatile_field(f_$10))) && true) && ($field_offset(f_$10) == off_$2)) && $is_phys_field(f_$10)) && ($field_kind(f_$10) == $fk_base)) && ((off_$2 == 0) ==> $has_field_at0(partp_$9,f_$10))) && true) && true) ));
	assume (forall  sz_$9 : Integer, isvolatile_$6 : Boolean, tp_$10 : $ctype, f_$11 : $field, partp_$10 : $ctype :: ( (((((((((((((($field_parent_type(f_$11) == partp_$10) && ($field_type(f_$11) == $array(tp_$10,sz_$9))) && ($as_field_with_type(f_$11,$array(tp_$10,sz_$9)) == f_$11)) && ($is_primitive($array(tp_$10,sz_$9)) ==> ($as_primitive_field(f_$11) == f_$11))) && ((!$is_primitive($array(tp_$10,sz_$9))) ==> ($as_composite_field(f_$11) == f_$11))) && ($field_arr_root(f_$11) == f_$11)) && true) && ((!isvolatile_$6) ==> $is_sequential_field(f_$11))) && (isvolatile_$6 ==> $is_volatile_field(f_$11))) && true) && ($field_kind(f_$11) == $fk_base)) && $is_ghost_field(f_$11)) && true) && true) == (((((((((((((($field_parent_type(f_$11) == partp_$10) && ($field_type(f_$11) == $array(tp_$10,sz_$9))) && ($as_field_with_type(f_$11,$array(tp_$10,sz_$9)) == f_$11)) && ($is_primitive($array(tp_$10,sz_$9)) ==> ($as_primitive_field(f_$11) == f_$11))) && ((!$is_primitive($array(tp_$10,sz_$9))) ==> ($as_composite_field(f_$11) == f_$11))) && ($field_arr_root(f_$11) == f_$11)) && true) && ((!isvolatile_$6) ==> $is_sequential_field(f_$11))) && (isvolatile_$6 ==> $is_volatile_field(f_$11))) && true) && ($field_kind(f_$11) == $fk_base)) && $is_ghost_field(f_$11)) && true) && true) ));
	assume (forall  i : Integer, p_$10 : $ptr :: ( $dot($base(p_$10),$field_plus($field(p_$10),i)) == $dot($base(p_$10),$field_plus($field(p_$10),i)) ));
	assume (forall  p_$90 : $ptr, i_$2 : Integer :: {$idx(p_$90,i_$2)} ( $idx(p_$90,i_$2) == $dot($base(p_$90),$field_plus($field(p_$90),i_$2)) ));
	assume (forall  p_$91 : $ptr, i_$3 : Integer, j : Integer :: {$idx($idx(p_$91,i_$3),j)} ( $idx($idx(p_$91,i_$3),j) == $dot($base(p_$91),$field_plus($field(p_$91),i_$3 + j)) ));
	assume (forall  p_$92 : $ptr, i_$4 : Integer :: {$addr($idx(p_$92,i_$4))} ( $addr($idx(p_$92,i_$4)) == $unchk_add($arch_ptr_type,$addr(p_$92),$sizeof($field_type($field(p_$92))) * i_$4) ));
	assume (forall  p_$93 : $ptr, i_$5 : Integer :: {$idx(p_$93,i_$5)} ( $is_proper($idx(p_$93,i_$5)) ==> ((!(p_$93 == $phys_ptr_cast($null,$field_type($field(p_$93))))) ==> (!($idx(p_$93,i_$5) == $phys_ptr_cast($null,$field_type($field($idx(p_$93,i_$5))))))) ));
	assume (forall  p_$94 : $ptr, i_$6 : Integer :: {$idx(p_$94,i_$6)} ( (($in_range_phys_ptr(p_$94) || $in_range_phys_ptr($base(p_$94))) && $is_proper($idx(p_$94,i_$6))) ==> $in_range_phys_ptr($idx(p_$94,i_$6)) ));
	assume (forall  f_$36 : $field, i_$7 : Integer :: {$field_plus(f_$36,i_$7)} ( (((((((((($field_kind($field_plus(f_$36,i_$7)) == $field_kind(f_$36)) && ($field_arr_root($field_plus(f_$36,i_$7)) == $field_arr_root(f_$36))) && ($field_arr_index($field_plus(f_$36,i_$7)) == ($field_arr_index(f_$36) + i_$7))) && ($field_arr_size($field_plus(f_$36,i_$7)) == $field_arr_size(f_$36))) && ($field_type($field_plus(f_$36,i_$7)) == $field_type(f_$36))) && ($as_field_with_type($field_plus(f_$36,i_$7),$field_type(f_$36)) == $field_plus(f_$36,i_$7))) && ($is_sequential_field($field_plus(f_$36,i_$7)) <==> $is_sequential_field(f_$36))) && ($is_volatile_field($field_plus(f_$36,i_$7)) <==> $is_volatile_field(f_$36))) && ($is_phys_field($field_plus(f_$36,i_$7)) <==> $is_phys_field(f_$36))) && (((0 <= ($field_arr_index(f_$36) + i_$7)) && (($field_arr_index(f_$36) + i_$7) <= ($field_arr_size(f_$36) - 1))) ==> ($field_parent_type($field_plus(f_$36,i_$7)) == $field_parent_type($field_arr_root(f_$36))))) && true ));
	assume (forall  S_$48 : $state, p_$95 : $ptr, T_$5 : $ctype, sz_$18 : Integer :: {$is_array(S_$48,p_$95,T_$5,sz_$18)} ( $is_array(S_$48,p_$95,T_$5,sz_$18) <==> (((((($is(p_$95,T_$5) && $is_proper(p_$95)) && ($field_arr_size($field(p_$95)) >= ($field_arr_index($field(p_$95)) + sz_$18))) && (p_$95 == $idx($dot($base(p_$95),$field_arr_root($field(p_$95))),$field_arr_index($field(p_$95))))) && (!($field_kind($field(p_$95)) == $fk_base))) && ($field_arr_index($field(p_$95)) >= 0)) && (!$is_primitive($field_type($field($emb0(p_$95)))))) ));
	assume (forall  sz_$10 : Integer, T : $ctype, p_$11 : $ptr :: ( (((((($is(p_$11,T) && $is_proper(p_$11)) && ($field_arr_size($field(p_$11)) >= ($field_arr_index($field(p_$11)) + sz_$10))) && (p_$11 == $idx($dot($base(p_$11),$field_arr_root($field(p_$11))),$field_arr_index($field(p_$11))))) && (!($field_kind($field(p_$11)) == $fk_base))) && ($field_arr_index($field(p_$11)) >= 0)) && (!$is_primitive($field_type($field($emb0(p_$11)))))) == (((((($is(p_$11,T) && $is_proper(p_$11)) && ($field_arr_size($field(p_$11)) >= ($field_arr_index($field(p_$11)) + sz_$10))) && (p_$11 == $idx($dot($base(p_$11),$field_arr_root($field(p_$11))),$field_arr_index($field(p_$11))))) && (!($field_kind($field(p_$11)) == $fk_base))) && ($field_arr_index($field(p_$11)) >= 0)) && (!$is_primitive($field_type($field($emb0(p_$11)))))) ));
	assume (forall  S_$49 : $state, p_$96 : $ptr, T_$6 : $ctype, sz_$19 : Integer :: {$is_thread_local_array(S_$49,p_$96,T_$6,sz_$19)} ( $is_thread_local_array(S_$49,p_$96,T_$6,sz_$19) <==> ($is_array(S_$49,p_$96,T_$6,sz_$19) && (if $is_primitive(T_$6) then $thread_local(S_$49,p_$96) else ((forall  i_$0_$1 : Integer :: {$owner(S_$49,$idx(p_$96,i_$0_$1))} ( ((0 <= i_$0_$1) && (i_$0_$1 < sz_$19)) ==> $thread_local(S_$49,$idx(p_$96,i_$0_$1)) ))))) ));
	assume (forall  sz_$11 : Integer, T_$0 : $ctype, p_$12 : $ptr, S_$0 : $state :: ( ($is_array(S_$0,p_$12,T_$0,sz_$11) && (if $is_primitive(T_$0) then $thread_local(S_$0,p_$12) else ((forall  i_$0_$3 : Integer :: {$owner(S_$0,$idx(p_$12,i_$0_$3))} ( ((0 <= i_$0_$3) && (i_$0_$3 < sz_$11)) ==> $thread_local(S_$0,$idx(p_$12,i_$0_$3)) ))))) == ($is_array(S_$0,p_$12,T_$0,sz_$11) && (if $is_primitive(T_$0) then $thread_local(S_$0,p_$12) else ((forall  i_$0 : Integer :: {$owner(S_$0,$idx(p_$12,i_$0))} ( ((0 <= i_$0) && (i_$0 < sz_$11)) ==> $thread_local(S_$0,$idx(p_$12,i_$0)) ))))) ));
	assume (forall  S_$50 : $state, p_$97 : $ptr, T_$7 : $ctype, sz_$20 : Integer :: {$is_mutable_array(S_$50,p_$97,T_$7,sz_$20)} ( $is_mutable_array(S_$50,p_$97,T_$7,sz_$20) <==> ($is_array(S_$50,p_$97,T_$7,sz_$20) && (if $is_primitive(T_$7) then $mutable(S_$50,$emb0(p_$97)) else ((forall  i_$8 : Integer :: {$idx(p_$97,i_$8)} ( ((0 <= i_$8) && (i_$8 < sz_$20)) ==> $mutable(S_$50,$idx(p_$97,i_$8)) ))))) ));
	assume (forall  a_$0 : $ptr, al : Integer, b_$1 : $ptr, bl : Integer :: {$arrays_disjoint(a_$0,al,b_$1,bl)} ( ((forall  i_$9 : Integer, j_$0 : Integer :: {$dont_instantiate_int(i_$9),$dont_instantiate_int(j_$0)} ( ((((0 <= i_$9) && (i_$9 < al)) && (0 <= j_$0)) && (j_$0 < bl)) ==> (!($idx(a_$0,i_$9) == $idx(b_$1,j_$0))) ))) ==> $arrays_disjoint(a_$0,al,b_$1,bl) ));
	assume (forall  a_$1 : $ptr, al_$0 : Integer, b_$2 : $ptr, bl_$0 : Integer :: {$set_disjoint($array_range_no_state(a_$1,$field_type($field(a_$1)),al_$0),$array_range_no_state(b_$2,$field_type($field(b_$2)),bl_$0))} ( $set_disjoint($array_range_no_state(a_$1,$field_type($field(a_$1)),al_$0),$array_range_no_state(b_$2,$field_type($field(b_$2)),bl_$0)) ==> $arrays_disjoint(a_$1,al_$0,b_$2,bl_$0) ));
	assume (forall  a_$2 : $ptr, al_$1 : Integer, b_$3 : $ptr, bl_$1 : Integer, i_$10 : Integer :: {$arrays_disjoint(a_$2,al_$1,b_$3,bl_$1),$dot($base(a_$2),$field_plus($field(a_$2),i_$10))} ( (($arrays_disjoint(a_$2,al_$1,b_$3,bl_$1) && (0 <= i_$10)) && (i_$10 < al_$1)) ==> ($arrays_disjoint_id(a_$2,al_$1,b_$3,bl_$1,$dot($base(a_$2),$field_plus($field(a_$2),i_$10))) == 0) ));
	assume (forall  a_$3 : $ptr, al_$2 : Integer, b_$4 : $ptr, bl_$2 : Integer, i_$11 : Integer :: {$arrays_disjoint(a_$3,al_$2,b_$4,bl_$2),$dot($base(b_$4),$field_plus($field(b_$4),i_$11))} ( (($arrays_disjoint(a_$3,al_$2,b_$4,bl_$2) && (0 <= i_$11)) && (i_$11 < bl_$2)) ==> ($arrays_disjoint_id(a_$3,al_$2,b_$4,bl_$2,$dot($base(b_$4),$field_plus($field(b_$4),i_$11))) == 1) ));
	assume (forall  sz_$12 : Integer, p_$13 : $ptr, s : $state :: ( $mem_range_heap($heap(s),p_$13,sz_$12) == $mem_range_heap($heap(s),p_$13,sz_$12) ));
	assume (forall  h_$3 : $object, r_$3 : $ptr, f_$37 : $field, v_$1 : Integer, p_$99 : $ptr, sz_$22 : Integer :: ( ((!((0 <= $index_within(p_$99,$ptr(f_$37,r_$3))) && ($index_within(p_$99,$ptr(f_$37,r_$3)) <= (sz_$22 - 1)))) || (!($ptr(f_$37,r_$3) == $idx(p_$99,$index_within(p_$99,$ptr(f_$37,r_$3)))))) ==> ($mem_range_heap(h_$3[f_$37 := h_$3[f_$37][r_$3 := v_$1]],p_$99,sz_$22) == $mem_range_heap(h_$3,p_$99,sz_$22)) ));
	assume (forall  S0_$10 : $state, S1_$7 : $state, p_$100 : $ptr, sz_$23 : Integer :: {$call_transition(S0_$10,S1_$7),$mem_range_heap($heap(S1_$7),p_$100,sz_$23)} ( ($call_transition(S0_$10,S1_$7) && ((forall  i_$12 : Integer :: {$dont_instantiate_int(i_$12)} ( ((0 <= i_$12) && (i_$12 <= (sz_$23 - 1))) ==> ($heap(S0_$10)[$field($idx(p_$100,i_$12))][$base($idx(p_$100,i_$12))] == $heap(S1_$7)[$field($idx(p_$100,i_$12))][$base($idx(p_$100,i_$12))]) )))) ==> ($mem_range_heap($heap(S0_$10),p_$100,sz_$23) == $mem_range_heap($heap(S1_$7),p_$100,sz_$23)) ));
	assume (forall  S0_$11 : $state, S1_$8 : $state, p_$101 : $ptr, f_$38 : $field :: {$call_transition(S0_$11,S1_$8),$heap(S1_$8)[f_$38][p_$101]} ( $instantiate_int($heap(S0_$11)[f_$38][p_$101]) ));
	assume (forall  i_$13 : Integer, a_$4 : $ptr :: {$index_within($idx(a_$4,i_$13),a_$4)} ( $index_within($idx(a_$4,i_$13),a_$4) == i_$13 ));
	assume (forall  p_$102 : $ptr, a_$5 : $ptr, f_$39 : $field :: {$index_within($dot(p_$102,f_$39),a_$5)} ( ($is_proper($dot(p_$102,f_$39)) && ($sizeof($field_type($field(p_$102))) <= $sizeof($field_type($field(a_$5))))) ==> ($index_within($dot(p_$102,f_$39),a_$5) == $index_within(p_$102,a_$5)) ));
	assume (forall  p_$103 : $ptr, q_$5 : $ptr, t_$38 : $ctype :: {$index_within($ptr($as_field_with_type($field(p_$103),t_$38),$base(p_$103)),$ptr($as_field_with_type($field(q_$5),t_$38),$base(q_$5)))} ( (($field_type($field(p_$103)) == t_$38) && ($field_type($field(q_$5)) == t_$38)) ==> ($index_within(p_$103,q_$5) == ($field_arr_index($field(p_$103)) - $field_arr_index($field(q_$5)))) ));
	assume (forall  p_$104 : $ptr, T_$9 : $ctype, sz_$24 : Integer :: {$array_range_no_state(p_$104,T_$9,sz_$24)} ( $array_range_no_state(p_$104,T_$9,sz_$24) == (if $is_primitive(T_$9) then lambda#0($fk_base,p_$104,T_$9,sz_$24) else lambda#1(sz_$24,p_$104)) ));
	assume (forall  s_$13 : $state, q_$7 : $ptr, a_$7 : $ptr, sz_$26 : Integer :: {$in_composite_array_lev2(s_$13,q_$7,a_$7,sz_$26)} ( $in_composite_array_lev2(s_$13,q_$7,a_$7,sz_$26) <==> (((0 <= $index_within(q_$7,a_$7)) && ($index_within(q_$7,a_$7) <= (sz_$26 - 1))) && $composite_extent(s_$13,$idx(a_$7,$index_within(q_$7,a_$7)),$field_type($field(a_$7)))[q_$7]) ));
	assume (forall  sz_$13 : Integer, T_$1 : $ctype, arr : $ptr, q : $ptr :: ( (((0 <= $index_within(q,arr)) && ($index_within(q,arr) <= (sz_$13 - 1))) && (q == $idx(arr,$index_within(q,arr)))) == (((0 <= $index_within(q,arr)) && ($index_within(q,arr) <= (sz_$13 - 1))) && (q == $idx(arr,$index_within(q,arr)))) ));
	assume (forall  sz_$14 : Integer, T_$2 : $ctype, arr_$0 : $ptr, q_$0 : $ptr :: ( (((0 <= $index_within(q_$0,arr_$0)) && ($index_within(q_$0,arr_$0) <= (sz_$14 - 1))) && $full_extent($idx(arr_$0,$index_within(q_$0,arr_$0)))[q_$0]) == (((0 <= $index_within(q_$0,arr_$0)) && ($index_within(q_$0,arr_$0) <= (sz_$14 - 1))) && $full_extent($idx(arr_$0,$index_within(q_$0,arr_$0)))[q_$0]) ));
	assume (forall  sz_$15 : Integer, T_$3 : $ctype, arr_$1 : $ptr, q_$1 : $ptr, S_$1 : $state :: ( (((0 <= $index_within(q_$1,arr_$1)) && ($index_within(q_$1,arr_$1) <= (sz_$15 - 1))) && $extent(S_$1,$idx(arr_$1,$index_within(q_$1,arr_$1)))[q_$1]) == (((0 <= $index_within(q_$1,arr_$1)) && ($index_within(q_$1,arr_$1) <= (sz_$15 - 1))) && $extent(S_$1,$idx(arr_$1,$index_within(q_$1,arr_$1)))[q_$1]) ));
	assume (forall  T_$11 : $ctype, s_$14 : Integer :: {$array(T_$11,s_$14)} ( (((((true && ($element_type($array(T_$11,s_$14)) == T_$11)) && ($array_length($array(T_$11,s_$14)) == s_$14)) && (!$is_primitive($array(T_$11,s_$14)))) && (!$is_claimable($array(T_$11,s_$14)))) && ($type_branch($array(T_$11,s_$14)) == $ctype_array)) && $is_sequential_field($f_owns($array(T_$11,s_$14))) ));
	assume (forall  T_$12 : $ctype, s_$15 : Integer :: {$sizeof($array(T_$12,s_$15))} ( $sizeof($array(T_$12,s_$15)) == ($sizeof(T_$12) * s_$15) ));
	assume (forall  S0_$12 : $state, S_$52 : $state, p_$106 : $ptr, T_$13 : $ctype, s_$16 : Integer :: {$inv2(S0_$12,S_$52,p_$106,$array(T_$13,s_$16))} ( $inv2(S0_$12,S_$52,p_$106,$array(T_$13,s_$16)) <==> ($owns(S_$52,p_$106) == $set_empty()) ));
	assume (forall  p_$14 : $ptr :: ( $dot(p_$14,$array_emb($element_type($field_type($field(p_$14))),$array_length($field_type($field(p_$14))))) == $dot(p_$14,$array_emb($element_type($field_type($field(p_$14))),$array_length($field_type($field(p_$14))))) ));
	assume (forall  p_$107 : $ptr, t_$39 : $ctype, sz_$28 : Integer :: {$phys_ptr_cast($ptr($as_field_with_type($field(p_$107),$array(t_$39,sz_$28)),$base(p_$107)),t_$39)} ( $phys_ptr_cast($ptr($as_field_with_type($field(p_$107),$array(t_$39,sz_$28)),$base(p_$107)),t_$39) == $dot(p_$107,$array_emb($element_type($field_type($field(p_$107))),$array_length($field_type($field(p_$107))))) ));
	assume (forall  p_$108 : $ptr, t_$40 : $ctype, sz_$29 : Integer :: {$spec_ptr_cast($ptr($as_field_with_type($field(p_$108),$array(t_$40,sz_$29)),$base(p_$108)),t_$40)} ( $spec_ptr_cast($ptr($as_field_with_type($field(p_$108),$array(t_$40,sz_$29)),$base(p_$108)),t_$40) == $dot(p_$108,$array_emb($element_type($field_type($field(p_$108))),$array_length($field_type($field(p_$108))))) ));
	assume (forall  t_$41 : $ctype, sz_$30 : Integer :: {$array_emb(t_$41,sz_$30)} {$array(t_$41,sz_$30)} ( (((((((((((((($field_parent_type($array_emb(t_$41,sz_$30)) == $array(t_$41,sz_$30)) && ($field_type($array_emb(t_$41,sz_$30)) == t_$41)) && ($as_field_with_type($array_emb(t_$41,sz_$30),t_$41) == $array_emb(t_$41,sz_$30))) && ($is_primitive(t_$41) ==> ($as_primitive_field($array_emb(t_$41,sz_$30)) == $array_emb(t_$41,sz_$30)))) && ((!$is_primitive(t_$41)) ==> ($as_composite_field($array_emb(t_$41,sz_$30)) == $array_emb(t_$41,sz_$30)))) && ($field_arr_root($array_emb(t_$41,sz_$30)) == $array_emb(t_$41,sz_$30))) && true) && ($field_kind($array_emb(t_$41,sz_$30)) == $fk_as_array_first)) && $is_phys_field($array_emb(t_$41,sz_$30))) && ($field_offset($array_emb(t_$41,sz_$30)) == 0)) && ($field_arr_size($array_emb(t_$41,sz_$30)) == sz_$30)) && ($field_arr_index($array_emb(t_$41,sz_$30)) == 0)) && ($field_arr_root($array_emb(t_$41,sz_$30)) == $array_emb(t_$41,sz_$30))) && $is_sequential_field($array_emb(t_$41,sz_$30))) && true ));
	assume (forall  S_$53 : $state, T_$15 : $ctype, sz_$32 : Integer, p_$110 : $ptr, a_$8 : $ptr :: {$composite_extent(S_$53,a_$8,$array(T_$15,sz_$32))[p_$110]} ( $composite_extent(S_$53,a_$8,$array(T_$15,sz_$32))[p_$110] <==> ((p_$110 == a_$8) || ((!$is_primitive(T_$15)) && $in_composite_array_lev2(S_$53,p_$110,$dot(a_$8,$array_emb($element_type($field_type($field(a_$8))),$array_length($field_type($field(a_$8))))),sz_$32))) ));
	assume (forall  p_$15 : $ptr, s_$0 : $state :: ( $roots(s_$0)[p_$15] == $roots(s_$0)[p_$15] ));
	assume (forall  p_$16 : $ptr, f_$12 : $field, s_$1 : $state :: ( $heap(s_$1)[f_$12][p_$16] == $heap(s_$1)[f_$12][p_$16] ));
	assume (forall  f_$13 : $field, p_$17 : $ptr, s_$2 : $state :: ( $heap(s_$2)[f_$13][p_$17] == $heap(s_$2)[f_$13][p_$17] ));
	assume (forall  f_$14 : $field, p_$18 : $ptr, s_$3 : $state :: ( $heap(s_$3)[f_$14][p_$18] == $heap(s_$3)[f_$14][p_$18] ));
	assume (forall  t_$13 : $ctype, p_$19 : $ptr, f_$15 : $field, s_$4 : $state :: ( $spec_ptr_cast($int_to_ptr($heap(s_$4)[f_$15][p_$19]),t_$13) == $spec_ptr_cast($int_to_ptr($heap(s_$4)[f_$15][p_$19]),t_$13) ));
	assume (forall  t_$14 : $ctype, p_$20 : $ptr, f_$16 : $field, s_$5 : $state :: ( $phys_ptr_cast($int_to_ptr($heap(s_$5)[f_$16][p_$20]),t_$14) == $phys_ptr_cast($int_to_ptr($heap(s_$5)[f_$16][p_$20]),t_$14) ));
	assume (forall  s_$6 : $state :: ( s_$6 == s_$6 ));
	assume (forall  S_$54 : $state, p_$111 : $ptr :: {$owner(S_$54,p_$111)} {:inline  false}( $owner(S_$54,p_$111) == $f_owner(S_$54)[p_$111] ));
	assume (forall  S_$55 : $state, p_$112 : $ptr :: {$closed(S_$55,p_$112)} {:inline  false}( $closed(S_$55,p_$112) <==> ($is_proper(p_$112) && $f_closed(S_$55)[p_$112]) ));
	assume (forall  S_$56 : $state, p_$113 : $ptr :: {$timestamp(S_$56,p_$113)} {:inline  false}( $timestamp(S_$56,p_$113) == $f_timestamp(S_$56)[p_$113] ));
	assume (forall  S_$57 : $state, p_$114 : $ptr :: {$ref_cnt(S_$57,p_$114)} {:inline  false}( $ref_cnt(S_$57,p_$114) == $heap(S_$57)[$f_ref_cnt($field_type($field(p_$114)))][p_$114] ));
	assume $position_marker() <==> true;
	assume (forall  p_$21 : $ptr, S_$2 : $state :: ( $int_to_ptrset($heap(S_$2)[$f_owns($field_type($field(p_$21)))][p_$21]) == $int_to_ptrset($heap(S_$2)[$f_owns($field_type($field(p_$21)))][p_$21]) ));
	assume (forall  S_$58 : $state, p_$115 : $ptr :: {$owns(S_$58,p_$115)} ( $owns(S_$58,p_$115) == $int_to_ptrset($heap(S_$58)[$f_owns($field_type($field(p_$115)))][p_$115]) ));
	assume (forall  #p : $ptr, #l : $ptr, S_$3 : $state :: ( $owns(S_$3,#l)[#p] == $owns(S_$3,#l)[#p] ));
	assume (forall  #t : $ctype, #p_$0 : $ptr, S_$4 : $state :: ( (((($is(#p_$0,#t) && $is_proper(#p_$0)) && ($owner(S_$4,#p_$0) == $me())) && $closed(S_$4,#p_$0)) && (!$is_primitive(#t))) == (((($is(#p_$0,#t) && $is_proper(#p_$0)) && ($owner(S_$4,#p_$0) == $me())) && $closed(S_$4,#p_$0)) && (!$is_primitive(#t))) ));
	assume (forall  p_$22 : $ptr, S_$5 : $state :: ( (!($field_type($field($owner(S_$5,p_$22))) == ^$#thread_id_t)) == (!($field_type($field($owner(S_$5,p_$22))) == ^$#thread_id_t)) ));
	assume (forall  p_$23 : $ptr, S_$6 : $state :: ( ((!($owner(S_$6,p_$23) == $me())) || ($is_primitive($field_type($field(p_$23))) && $closed(S_$6,p_$23))) == ((!($owner(S_$6,p_$23) == $me())) || ($is_primitive($field_type($field(p_$23))) && $closed(S_$6,p_$23))) ));
	assume (forall  S_$59 : $state, p_$116 : $ptr :: {$mutable(S_$59,p_$116)} ( $mutable(S_$59,p_$116) <==> (($is_proper(p_$116) && ($owner(S_$59,$emb0(p_$116)) == $me())) && (!$closed(S_$59,$emb0(p_$116)))) ));
	assume (forall  p_$24 : $ptr, S_$7 : $state :: ( ($owner(S_$7,$emb0(p_$24)) == $me()) == ($owner(S_$7,$emb0(p_$24)) == $me()) ));
	assume (forall  p_$25 : $ptr, S_$8 : $state :: ( (if $is_primitive($field_type($field(p_$25))) then (($owner(S_$8,$emb0(p_$25)) == $me()) && (!$closed(S_$8,$emb0(p_$25)))) else ($owner(S_$8,p_$25) == $me())) == (if $is_primitive($field_type($field(p_$25))) then (($owner(S_$8,$emb0(p_$25)) == $me()) && (!$closed(S_$8,$emb0(p_$25)))) else ($owner(S_$8,p_$25) == $me())) ));
	assume (forall  W : $ptrset, S_$9 : $state :: ( ((forall  p_$26_$0 : $ptr :: {$mutable(S_$9,p_$26_$0)} {$owner(S_$9,p_$26_$0)} {$closed(S_$9,p_$26_$0)} {$owner(S_$9,$emb0(p_$26_$0))} {$closed(S_$9,$emb0(p_$26_$0))} ( W[p_$26_$0] ==> $mutable(S_$9,p_$26_$0) ))) == ((forall  p_$26 : $ptr :: {$mutable(S_$9,p_$26)} {$owner(S_$9,p_$26)} {$closed(S_$9,p_$26)} {$owner(S_$9,$emb0(p_$26))} {$closed(S_$9,$emb0(p_$26))} ( W[p_$26] ==> $mutable(S_$9,p_$26) ))) ));
	assume (forall  sz_$16 : Integer, t_$15 : $ctype, p_$27 : $ptr, S_$10 : $state :: ( $is_mutable_array(S_$10,p_$27,t_$15,sz_$16) == $is_mutable_array(S_$10,p_$27,t_$15,sz_$16) ));
	assume (forall  W_$0 : $ptrset, S_$11 : $state :: ( ((forall  p_$28_$0 : $ptr :: {$mutable(S_$11,p_$28_$0)} {$owner(S_$11,p_$28_$0)} {$closed(S_$11,p_$28_$0)} {$owner(S_$11,$emb0(p_$28_$0))} {$closed(S_$11,$emb0(p_$28_$0))} ( W_$0[p_$28_$0] ==> (if $is_primitive($field_type($field(p_$28_$0))) then (($owner(S_$11,$emb0(p_$28_$0)) == $me()) && (!$closed(S_$11,$emb0(p_$28_$0)))) else ($owner(S_$11,p_$28_$0) == $me())) ))) == ((forall  p_$28 : $ptr :: {$mutable(S_$11,p_$28)} {$owner(S_$11,p_$28)} {$closed(S_$11,p_$28)} {$owner(S_$11,$emb0(p_$28))} {$closed(S_$11,$emb0(p_$28))} ( W_$0[p_$28] ==> (if $is_primitive($field_type($field(p_$28))) then (($owner(S_$11,$emb0(p_$28)) == $me()) && (!$closed(S_$11,$emb0(p_$28)))) else ($owner(S_$11,p_$28) == $me())) ))) ));
	assume (forall  p_$29 : $ptr :: ( $in_range_spec_ptr(p_$29) == $in_range_spec_ptr(p_$29) ));
	assume (forall  #t_$0 : $ctype, #p_$1 : $ptr, S_$12 : $state :: ( $in_range_phys_ptr(#p_$1) == $in_range_phys_ptr(#p_$1) ));
	assume (forall  #t_$1 : $ctype, #p_$2 : $ptr, S_$13 : $state :: ( $in_range_spec_ptr(#p_$2) == $in_range_spec_ptr(#p_$2) ));
	assume (forall  S_$60 : $state, p_$117 : $ptr :: {$addr(p_$117),$owner(S_$60,$roots(S_$60)[p_$117])} ( $good_state(S_$60) ==> ((($is_proper(p_$117) && $in_range_phys_ptr(p_$117)) && ($owner(S_$60,$roots(S_$60)[$emb0(p_$117)]) == $me())) ==> ($typemap($f_owner(S_$60))[$addr(p_$117),$field_type($field(p_$117))] == p_$117)) ));
	assume (forall  S_$61 : $state, p_$118 : $ptr, f_$40 : $field :: {$addr($dot(p_$118,f_$40)),$owner(S_$61,$roots(S_$61)[p_$118])} ( $good_state(S_$61) ==> ((($is_proper($dot(p_$118,f_$40)) && $in_range_phys_ptr($dot(p_$118,f_$40))) && ($owner(S_$61,$roots(S_$61)[p_$118]) == $me())) ==> ($typemap($f_owner(S_$61))[$addr($dot(p_$118,f_$40)),$field_type(f_$40)] == $dot(p_$118,f_$40))) ));
	assume (forall  S_$62 : $state, p_$119 : $ptr, q_$8 : $ptr :: {$retype(S_$62,q_$8),$as_addr(p_$119,$field_type($field(q_$8)),$addr(q_$8))} ( $good_state(S_$62) ==> ((($is_proper(p_$119) && $in_range_phys_ptr(p_$119)) && ($owner(S_$62,$roots(S_$62)[$emb0(p_$119)]) == $me())) ==> ($typemap($f_owner(S_$62))[$addr(p_$119),$field_type($field(p_$119))] == p_$119)) ));
	assume (forall  p_$120 : $ptr :: {$addr(p_$120)} ( $as_addr(p_$120,$field_type($field(p_$120)),$addr(p_$120)) == p_$120 ));
	assume (forall  S_$63 : $state, p_$121 : $ptr :: {$retype(S_$63,p_$121)} ( $retype(S_$63,p_$121) == $typemap($f_owner(S_$63))[$addr(p_$121),$field_type($field(p_$121))] ));
	assume (forall  p1_$1 : $ptr, p2_$1 : $ptr :: {$ptr_eq(p1_$1,p2_$1)} ( $ptr_eq(p1_$1,p2_$1) <==> ($addr(p1_$1) == $addr(p2_$1)) ));
	assume (forall  p2 : $ptr, p1 : $ptr :: ( $ptr_eq(p1,p2) == $ptr_eq(p1,p2) ));
	assume (forall  p2_$0 : $ptr, p1_$0 : $ptr :: ( (!$ptr_eq(p1_$0,p2_$0)) == (!$ptr_eq(p1_$0,p2_$0)) ));
	assume (forall  #o : $ptr, #f : $ptr, S_$14 : $state :: ( ($is_primitive($field_type($field(#f))) && ($emb0(#f) == #o)) == ($is_primitive($field_type($field(#f))) && ($emb0(#f) == #o)) ));
	assume (forall  p_$30 : $ptr, S_$15 : $state :: ( ((((!$is_primitive($field_type($field(p_$30)))) && $is_proper(p_$30)) && ($owner(S_$15,$roots(S_$15)[p_$30]) == $me())) && (!(p_$30 == $phys_ptr_cast($null,$field_type($field(p_$30)))))) == ((((!$is_primitive($field_type($field(p_$30)))) && $is_proper(p_$30)) && ($owner(S_$15,$roots(S_$15)[p_$30]) == $me())) && (!(p_$30 == $phys_ptr_cast($null,$field_type($field(p_$30)))))) ));
	assume (forall  S_$65 : $state, p_$123 : $ptr :: {$thread_local(S_$65,p_$123)} ( $thread_local(S_$65,p_$123) <==> ($is_proper(p_$123) && (if $is_primitive($field_type($field(p_$123))) then (($is_sequential_field($field(p_$123)) || (!$closed(S_$65,$emb0(p_$123)))) && ((((!$is_primitive($field_type($field($emb0(p_$123))))) && $is_proper($emb0(p_$123))) && ($owner(S_$65,$roots(S_$65)[$emb0(p_$123)]) == $me())) && (!($emb0(p_$123) == $phys_ptr_cast($null,$field_type($field($emb0(p_$123)))))))) else ((((!$is_primitive($field_type($field(p_$123)))) && $is_proper(p_$123)) && ($owner(S_$65,$roots(S_$65)[p_$123]) == $me())) && (!(p_$123 == $phys_ptr_cast($null,$field_type($field(p_$123)))))))) ));
	assume (forall  #t_$2 : $ctype, #p_$3 : $ptr, S_$16 : $state :: ( ($is(#p_$3,#t_$2) && $thread_local(S_$16,#p_$3)) == ($is(#p_$3,#t_$2) && $thread_local(S_$16,#p_$3)) ));
	assume (forall  t_$16 : $ctype, p_$31 : $ptr, S_$17 : $state :: ( ($is(p_$31,t_$16) && $thread_local(S_$17,p_$31)) == ($is(p_$31,t_$16) && $thread_local(S_$17,p_$31)) ));
	assume (forall  p_$32 : $ptr, S_$18 : $state :: ( $thread_local(S_$18,p_$32) == $thread_local(S_$18,p_$32) ));
	assume (forall  p_$33 : $ptr, S_$19 : $state :: ( (($is_span_sequential($field_type($field(p_$33))) && $thread_local(S_$19,p_$33)) || $mutable(S_$19,p_$33)) == (($is_span_sequential($field_type($field(p_$33))) && $thread_local(S_$19,p_$33)) || $mutable(S_$19,p_$33)) ));
	assume (forall  typ : $ctype, #p_$4 : $ptr, #s1 : $state :: ( $inv2(#s1,#s1,#p_$4,typ) == $inv2(#s1,#s1,#p_$4,typ) ));
	assume (forall  p_$34 : $ptr, S2 : $state, S1 : $state :: ( $inv2(S1,S2,p_$34,$field_type($field(p_$34))) == $inv2(S1,S2,p_$34,$field_type($field(p_$34))) ));
	assume (forall  S_$20 : $state, t_$17 : $token :: ( ($good_state_ext(t_$17,S_$20) && $full_stop(S_$20)) == ($good_state_ext(t_$17,S_$20) && $full_stop(S_$20)) ));
	assume (forall  S_$66 : $state :: {$function_entry(S_$66)} ( $function_entry(S_$66) ==> (($full_stop(S_$66) && ($current_timestamp(S_$66) >= 0)) && ((forall  p_$35_$0 : $ptr :: {$owner(S_$66,p_$35_$0)} ( $timestamp(S_$66,p_$35_$0) <= $current_timestamp(S_$66) )))) ));
	assume (forall  S_$67 : $state :: {$full_stop(S_$67)} ( $full_stop(S_$67) ==> ($good_state(S_$67) && $invok_state(S_$67)) ));
	assume (forall  S_$68 : $state :: {$invok_state(S_$68)} ( $invok_state(S_$68) ==> $good_state(S_$68) ));
	assume (forall  S_$21 : $state :: ( ((forall  p_$35_$1 : $ptr :: {$owner(S_$21,p_$35_$1)} ( $timestamp(S_$21,p_$35_$1) <= $current_timestamp(S_$21) ))) == ((forall  p_$35 : $ptr :: {$owner(S_$21,p_$35)} ( $timestamp(S_$21,p_$35) <= $current_timestamp(S_$21) ))) ));
	assume (forall  id : $token, S_$69 : $state :: {$good_state_ext(id,S_$69)} ( $good_state_ext(id,S_$69) ==> $good_state(S_$69) ));
	assume (forall  S_$22 : $state :: ( ((forall  p_$36_$0 : $ptr, q_$2_$0 : $ptr :: {$set_in_pos(p_$36_$0,$owns(S_$22,q_$2_$0))} ( (($good_state(S_$22) && $int_to_ptrset($heap(S_$22)[$f_owns($field_type($field(q_$2_$0)))][q_$2_$0])[p_$36_$0]) && $closed(S_$22,q_$2_$0)) ==> (((((!$is_primitive($field_type($field(p_$36_$0)))) && ($owner(S_$22,p_$36_$0) == q_$2_$0)) && $closed(S_$22,p_$36_$0)) && (!(p_$36_$0 == $phys_ptr_cast($null,$field_type($field(p_$36_$0)))))) && true) ))) == ((forall  p_$36 : $ptr, q_$2 : $ptr :: {$set_in_pos(p_$36,$owns(S_$22,q_$2))} ( (($good_state(S_$22) && $int_to_ptrset($heap(S_$22)[$f_owns($field_type($field(q_$2)))][q_$2])[p_$36]) && $closed(S_$22,q_$2)) ==> (((((!$is_primitive($field_type($field(p_$36)))) && ($owner(S_$22,p_$36) == q_$2)) && $closed(S_$22,p_$36)) && (!(p_$36 == $phys_ptr_cast($null,$field_type($field(p_$36)))))) && true) ))) ));
	assume (forall  S_$70 : $state, #r_$1 : $ptr, #t_$3 : $ctype, #f_$0 : $field, #sz : Integer :: {$owns(S_$70,$ptr($as_field_with_type(#f_$0,$array(#t_$3,#sz)),#r_$1))} ( $good_state(S_$70) ==> ($owns(S_$70,$ptr($as_field_with_type(#f_$0,$array(#t_$3,#sz)),#r_$1)) == $set_empty()) ));
	assume (forall  S_$71 : $state, #p_$8 : $ptr, #t_$4 : $ctype :: {$inv2(S_$71,S_$71,#p_$8,#t_$4)} ( ($invok_state(S_$71) && $closed(S_$71,#p_$8)) ==> $inv2(S_$71,S_$71,#p_$8,#t_$4) ));
	assume (forall  S_$72 : $state :: {$good_state(S_$72)} ( $good_state(S_$72) ==> ((forall  p_$36_$1 : $ptr, q_$2_$1 : $ptr :: {$set_in_pos(p_$36_$1,$owns(S_$72,q_$2_$1))} ( (($good_state(S_$72) && $int_to_ptrset($heap(S_$72)[$f_owns($field_type($field(q_$2_$1)))][q_$2_$1])[p_$36_$1]) && $closed(S_$72,q_$2_$1)) ==> (((((!$is_primitive($field_type($field(p_$36_$1)))) && ($owner(S_$72,p_$36_$1) == q_$2_$1)) && $closed(S_$72,p_$36_$1)) && (!(p_$36_$1 == $phys_ptr_cast($null,$field_type($field(p_$36_$1)))))) && true) ))) ));
	assume (forall  S_$73 : $state, p_$124 : $ptr :: {$closed(S_$73,p_$124)} ( $good_state(S_$73) ==> ($closed(S_$73,p_$124) ==> (!(p_$124 == $phys_ptr_cast($null,$field_type($field(p_$124)))))) ));
	assume (forall  S_$74 : $state, p_$125 : $ptr :: {$owner(S_$74,p_$125)} {$roots(S_$74)[p_$125]} ( $good_state(S_$74) ==> (($owner(S_$74,p_$125) == $me()) ==> (((($is_proper(p_$125) && (!(p_$125 == $phys_ptr_cast($null,$field_type($field(p_$125)))))) && (!$is_primitive($field_type($field(p_$125))))) && $is_proper(p_$125)) && ($roots(S_$74)[p_$125] == p_$125))) ));
	assume (forall  S_$75 : $state, r_$4 : $ptr :: {$owner(S_$75,r_$4)} ( $good_state(S_$75) ==> (((!($owner(S_$75,r_$4) == $phys_ptr_cast($null,$field_type($field($owner(S_$75,r_$4)))))) && $is_proper($owner(S_$75,r_$4))) && ((!($field_type($field($owner(S_$75,r_$4))) == ^$#thread_id_t)) ==> ((($is_proper(r_$4) && (!(r_$4 == $phys_ptr_cast($null,$field_type($field(r_$4)))))) && (!$is_primitive($field_type($field(r_$4))))) && ($is_sequential_field($f_owns($field_type($field($owner(S_$75,r_$4))))) ==> ($roots(S_$75)[r_$4] == $roots(S_$75)[$owner(S_$75,r_$4)]))))) ));
	assume (forall  S_$76 : $state, p_$126 : $ptr :: {$roots(S_$76)[$roots(S_$76)[p_$126]]} ( $good_state(S_$76) ==> ($roots(S_$76)[$roots(S_$76)[p_$126]] == $roots(S_$76)[p_$126]) ));
	assume (forall  S0_$13 : $state, S1_$9 : $state :: {$call_transition(S0_$13,S1_$9)} ( $call_transition(S0_$13,S1_$9) ==> $trans_call_transition(S0_$13,S1_$9) ));
	assume (forall  S0_$14 : $state, S1_$10 : $state, S2_$3 : $state :: {$trans_call_transition(S0_$14,S1_$10),$call_transition(S1_$10,S2_$3)} ( ($trans_call_transition(S0_$14,S1_$10) && $call_transition(S1_$10,S2_$3)) ==> $trans_call_transition(S0_$14,S2_$3) ));
	assume (forall  S_$77 : $state, p_$127 : $ptr, f_$41 : $field, t_$42 : $ctype :: {$heap(S_$77)[$as_field_with_type(f_$41,$as_in_range_t(t_$42))][p_$127]} ( $good_state(S_$77) ==> $in_range_t(t_$42,$heap(S_$77)[$as_field_with_type(f_$41,$as_in_range_t(t_$42))][p_$127]) ));
	assume (forall  v : Integer, f_$17 : $field, r : $ptr, h : $object :: ( h[f_$17 := h[f_$17][r := v]] == h[f_$17 := h[f_$17][r := v]] ));
	assume (forall  f_$18 : $field, p_$37 : $ptr, S_$23 : $state, S0 : $state :: ( ($heap(S_$23) == $heap(S0)[f_$18 := $heap(S0)[f_$18][p_$37 := $heap(S_$23)[f_$18][p_$37]]]) == ($heap(S_$23) == $heap(S0)[f_$18 := $heap(S0)[f_$18][p_$37 := $heap(S_$23)[f_$18][p_$37]]]) ));
	assume (forall  S_$24 : $state, S0_$0 : $state :: ( (((($f_timestamp(S0_$0) == $f_timestamp(S_$24)) && ($f_closed(S0_$0) == $f_closed(S_$24))) && ($f_owner(S0_$0) == $f_owner(S_$24))) && ($roots(S0_$0) == $roots(S_$24))) == (((($f_timestamp(S0_$0) == $f_timestamp(S_$24)) && ($f_closed(S0_$0) == $f_closed(S_$24))) && ($f_owner(S0_$0) == $f_owner(S_$24))) && ($roots(S0_$0) == $roots(S_$24))) ));
	assume (forall  p_$38 : $ptr, S_$25 : $state, S0_$1 : $state :: ( (((($f_timestamp(S_$25) == $f_timestamp(S0_$1)[p_$38 := $f_timestamp(S_$25)[p_$38]]) && ($f_closed(S_$25) == $f_closed(S0_$1)[p_$38 := $f_closed(S_$25)[p_$38]])) && ($f_owner(S_$25) == $f_owner(S0_$1)[p_$38 := $f_owner(S_$25)[p_$38]])) && ($roots(S_$25) == $roots(S0_$1)[p_$38 := $roots(S_$25)[p_$38]])) == (((($f_timestamp(S_$25) == $f_timestamp(S0_$1)[p_$38 := $f_timestamp(S_$25)[p_$38]]) && ($f_closed(S_$25) == $f_closed(S0_$1)[p_$38 := $f_closed(S_$25)[p_$38]])) && ($f_owner(S_$25) == $f_owner(S0_$1)[p_$38 := $f_owner(S_$25)[p_$38]])) && ($roots(S_$25) == $roots(S0_$1)[p_$38 := $roots(S_$25)[p_$38]])) ));
	assume (forall  s2 : $state, s1 : $state :: ( (((($f_timestamp(s1) == $f_timestamp(s2)) && ($f_closed(s1) == $f_closed(s2))) && ($f_owner(s1) == $f_owner(s2))) && ($roots(s1) == $roots(s2))) == (((($f_timestamp(s1) == $f_timestamp(s2)) && ($f_closed(s1) == $f_closed(s2))) && ($f_owner(s1) == $f_owner(s2))) && ($roots(s1) == $roots(s2))) ));
	assume (forall  s2_$0 : $state, s1_$0 : $state :: ( ((forall  p_$39_$0 : $ptr :: {$owner(s2_$0,p_$39_$0)} {$closed(s2_$0,p_$39_$0)} {$roots(s2_$0)[p_$39_$0]} ( $mutable(s1_$0,p_$39_$0) ==> $mutable(s2_$0,p_$39_$0) ))) == ((forall  p_$39 : $ptr :: {$owner(s2_$0,p_$39)} {$closed(s2_$0,p_$39)} {$roots(s2_$0)[p_$39]} ( $mutable(s1_$0,p_$39) ==> $mutable(s2_$0,p_$39) ))) ));
	assume (forall  p_$40 : $ptr, f_$19 : $field, h_$0 : [$ptr]Integer :: ( h_$0[p_$40] == h_$0[p_$40] ));
	assume (forall  t_$18 : $ctype, p_$41 : $ptr, f_$20 : $field, h_$1 : [$ptr]Integer :: ( $spec_ptr_cast($int_to_ptr(h_$1[p_$41]),t_$18) == $spec_ptr_cast($int_to_ptr(h_$1[p_$41]),t_$18) ));
	assume (forall  t_$19 : $ctype, p_$42 : $ptr, f_$21 : $field, h_$2 : [$ptr]Integer :: ( $phys_ptr_cast($int_to_ptr(h_$2[p_$42]),t_$19) == $phys_ptr_cast($int_to_ptr(h_$2[p_$42]),t_$19) ));
	assume (forall  S0_$15 : $state, S_$78 : $state, o_$0 : $ptr, owns_$0 : $ptrset :: {$updated_owns(S0_$15,S_$78,o_$0,owns_$0)} ( $updated_owns(S0_$15,S_$78,o_$0,owns_$0) <==> ($heap(S_$78) == $heap(S0_$15)[$f_owns($field_type($field(o_$0))) := $heap(S0_$15)[$f_owns($field_type($field(o_$0)))][o_$0 := $ptrset_to_int(owns_$0)]]) ));
	assume (forall  p_$43 : $ptr, S_$26 : $state :: ( ($timestamp(S_$26,p_$43) == $current_timestamp(S_$26)) == ($timestamp(S_$26,p_$43) == $current_timestamp(S_$26)) ));
	assume (forall  p_$44 : $ptr, S_$27 : $state :: ( (($timestamp(S_$27,p_$44) == $current_timestamp(S_$27)) && $mutable(S_$27,p_$44)) == (($timestamp(S_$27,p_$44) == $current_timestamp(S_$27)) && $mutable(S_$27,p_$44)) ));
	assume (forall  M2 : $state, M1 : $state :: ( (($current_timestamp(M1) <= $current_timestamp(M2)) && $call_transition(M1,M2)) == (($current_timestamp(M1) <= $current_timestamp(M2)) && $call_transition(M1,M2)) ));
	assume (forall  M2_$0 : $state, M1_$0 : $state :: ( (($current_timestamp(M1_$0) < $current_timestamp(M2_$0)) && $call_transition(M1_$0,M2_$0)) == (($current_timestamp(M1_$0) < $current_timestamp(M2_$0)) && $call_transition(M1_$0,M2_$0)) ));
	assume (forall  time_$0 : Integer, p_$128 : $ptr :: {$in_writes_at(time_$0,p_$128)} {:inline  false}( $in_writes_at(time_$0,p_$128) <==> $writes_at(time_$0)[p_$128] ));
	assume (forall  ptrs : $ptrset, time : Integer, S_$28 : $state :: ( ($writes_at(time) == ptrs) == ($writes_at(time) == ptrs) ));
	assume (forall  p_$45 : $ptr, M2_$1 : $state, M1_$1 : $state :: ( (($current_timestamp(M1_$1) < $timestamp(M2_$1,p_$45)) && ($timestamp(M2_$1,p_$45) <= $current_timestamp(M2_$1))) == (($current_timestamp(M1_$1) < $timestamp(M2_$1,p_$45)) && ($timestamp(M2_$1,p_$45) <= $current_timestamp(M2_$1))) ));
	assume (forall  p_$46 : $ptr, begin_time : Integer, S_$29 : $state :: ( (((!$is_primitive($field_type($field(p_$46)))) && $is_proper(p_$46)) && ($mutable(S_$29,p_$46) && (($timestamp(S_$29,p_$46) >= begin_time) || $in_writes_at(begin_time,p_$46)))) == (((!$is_primitive($field_type($field(p_$46)))) && $is_proper(p_$46)) && ($mutable(S_$29,p_$46) && (($timestamp(S_$29,p_$46) >= begin_time) || $in_writes_at(begin_time,p_$46)))) ));
	assume (forall  p_$47 : $ptr, begin_time_$0 : Integer, S_$30 : $state :: ( (($is_primitive($field_type($field(p_$47))) && $is_proper(p_$47)) && ($mutable(S_$30,$emb0(p_$47)) && (($timestamp(S_$30,$emb0(p_$47)) >= begin_time_$0) || $in_writes_at(begin_time_$0,p_$47)))) == (($is_primitive($field_type($field(p_$47))) && $is_proper(p_$47)) && ($mutable(S_$30,$emb0(p_$47)) && (($timestamp(S_$30,$emb0(p_$47)) >= begin_time_$0) || $in_writes_at(begin_time_$0,p_$47)))) ));
	assume (forall  p_$48 : $ptr, begin_time_$1 : Integer, S_$31 : $state :: ( $in_writes_at(begin_time_$1,p_$48) == $in_writes_at(begin_time_$1,p_$48) ));
	assume (forall  S_$79 : $state, begin_time_$2 : Integer, p_$129 : $ptr :: {$top_writable(S_$79,begin_time_$2,p_$129)} {:inline  false}( $top_writable(S_$79,begin_time_$2,p_$129) <==> (if $is_primitive($field_type($field(p_$129))) then (($is_primitive($field_type($field(p_$129))) && $is_proper(p_$129)) && ($mutable(S_$79,$emb0(p_$129)) && (($timestamp(S_$79,$emb0(p_$129)) >= begin_time_$2) || $in_writes_at(begin_time_$2,p_$129)))) else (($owner(S_$79,p_$129) == $me()) && (($timestamp(S_$79,p_$129) >= begin_time_$2) || $in_writes_at(begin_time_$2,p_$129)))) ));
	assume (forall  W_$1 : $ptrset, p_$49 : $ptr, S0_$2 : $state :: ( (($owner(S0_$2,$roots(S0_$2)[p_$49]) == $me()) && (!W_$1[$roots(S0_$2)[p_$49]])) == (($owner(S0_$2,$roots(S0_$2)[p_$49]) == $me()) && (!W_$1[$roots(S0_$2)[p_$49]])) ));
	assume (forall  S0_$16 : $state, S1_$11 : $state, W_$2 : $ptrset :: {$modifies(S0_$16,S1_$11,W_$2)} {:inline  false}( $modifies(S0_$16,S1_$11,W_$2) <==> (((((((forall  p_$130 : $ptr :: {$roots(S1_$11)[p_$130]} ( (($owner(S0_$16,$roots(S0_$16)[p_$130]) == $me()) && (!W_$2[$roots(S0_$16)[p_$130]])) ==> ($roots(S0_$16)[p_$130] == $roots(S1_$11)[p_$130]) ))) && ((forall  p_$131 : $ptr, f_$42 : $field :: {$heap(S1_$11)[f_$42][p_$131]} ( ((($owner(S0_$16,$roots(S0_$16)[p_$131]) == $me()) && (!W_$2[$roots(S0_$16)[p_$131]])) && (!W_$2[$dot(p_$131,f_$42)])) ==> ((($is_sequential_field(f_$42) || $is_semi_sequential_field(f_$42)) || (!$closed(S0_$16,p_$131))) ==> ($heap(S0_$16)[f_$42][p_$131] == $heap(S1_$11)[f_$42][p_$131])) )))) && ((forall  p_$132 : $ptr :: {$f_timestamp(S1_$11)[p_$132]} ( ((($owner(S0_$16,$roots(S0_$16)[p_$132]) == $me()) && (!W_$2[$roots(S0_$16)[p_$132]])) ==> ($f_timestamp(S1_$11)[p_$132] == $f_timestamp(S0_$16)[p_$132])) && ($f_timestamp(S1_$11)[p_$132] >= $f_timestamp(S0_$16)[p_$132]) )))) && ((forall  p_$133 : $ptr :: {$f_closed(S1_$11)[p_$133]} ( (($owner(S0_$16,$roots(S0_$16)[p_$133]) == $me()) && (!W_$2[$roots(S0_$16)[p_$133]])) ==> ($f_closed(S1_$11)[p_$133] <==> $f_closed(S0_$16)[p_$133]) )))) && ((forall  p_$134 : $ptr :: {$f_owner(S1_$11)[p_$134]} ( (($owner(S0_$16,$roots(S0_$16)[p_$134]) == $me()) && (!W_$2[$roots(S0_$16)[p_$134]])) ==> ($f_owner(S0_$16)[p_$134] == $f_owner(S1_$11)[p_$134]) )))) && (($current_timestamp(S0_$16) <= $current_timestamp(S1_$11)) && $call_transition(S0_$16,S1_$11))) ));
	assume (forall  S1_$0 : $state, S0_$3 : $state :: ( ((forall  p_$50_$0 : $ptr :: {$thread_local(S1_$0,p_$50_$0)} ( $thread_local(S0_$3,p_$50_$0) ==> $thread_local(S1_$0,p_$50_$0) ))) == ((forall  p_$50 : $ptr :: {$thread_local(S1_$0,p_$50)} ( $thread_local(S0_$3,p_$50) ==> $thread_local(S1_$0,p_$50) ))) ));
	assume (forall  S1_$1 : $state, S0_$4 : $state :: ( $modifies(S0_$4,S1_$1,$set_empty()) == $modifies(S0_$4,S1_$1,$set_empty()) ));
	assume (forall  s_$7 : $state :: ( ((forall  f_$22 : $pure_function :: {$frame_level(f_$22)} ( $frame_level(f_$22) < $current_frame_level ))) == ((forall  f_$22 : $pure_function :: {$frame_level(f_$22)} ( $frame_level(f_$22) < $current_frame_level ))) ));
	assume (forall  f_$23 : $pure_function :: ( ($frame_level(f_$23) < $current_frame_level) == ($frame_level(f_$23) < $current_frame_level) ));
	assume (forall  t_$20 : $ctype, r_$0 : $ptr, S_$32 : $state, S0_$5 : $state :: ( (((((((((true && $is(r_$0,t_$20)) && $is_proper(r_$0)) && $modifies(S0_$5,S_$32,$set_empty())) && ($heap(S_$32) == $heap(S0_$5))) && (($current_timestamp(S0_$5) < $current_timestamp(S_$32)) && $call_transition(S0_$5,S_$32))) && (!$closed(S0_$5,r_$0))) && (!($owner(S0_$5,r_$0) == $me()))) && $is_object_root_ptr(r_$0)) && ($field(r_$0) == $f_root(t_$20))) == (((((((((true && $is(r_$0,t_$20)) && $is_proper(r_$0)) && $modifies(S0_$5,S_$32,$set_empty())) && ($heap(S_$32) == $heap(S0_$5))) && (($current_timestamp(S0_$5) < $current_timestamp(S_$32)) && $call_transition(S0_$5,S_$32))) && (!$closed(S0_$5,r_$0))) && (!($owner(S0_$5,r_$0) == $me()))) && $is_object_root_ptr(r_$0)) && ($field(r_$0) == $f_root(t_$20))) ));
	assume (forall  t_$21 : $ctype, r_$1 : $ptr, S_$33 : $state, S0_$6 : $state :: ( ((((((((((true && $is(r_$1,t_$21)) && $is_proper(r_$1)) && $modifies(S0_$6,S_$33,$set_empty())) && ($heap(S_$33) == $heap(S0_$6))) && (($current_timestamp(S0_$6) < $current_timestamp(S_$33)) && $call_transition(S0_$6,S_$33))) && (!$closed(S0_$6,r_$1))) && (!($owner(S0_$6,r_$1) == $me()))) && $is_object_root_ptr(r_$1)) && ($field(r_$1) == $f_root(t_$21))) && (if $is_primitive(t_$21) then (($mutable(S_$33,$emb0(r_$1)) && (r_$1 == $dot($emb0(r_$1),$field(r_$1)))) && ($timestamp(S_$33,$emb0(r_$1)) == $current_timestamp(S_$33))) else (($extent_mutable(S_$33,r_$1) && $extent_is_fresh(S0_$6,S_$33,r_$1)) && $all_first_option_typed(S_$33,r_$1)))) == ((((((((((true && $is(r_$1,t_$21)) && $is_proper(r_$1)) && $modifies(S0_$6,S_$33,$set_empty())) && ($heap(S_$33) == $heap(S0_$6))) && (($current_timestamp(S0_$6) < $current_timestamp(S_$33)) && $call_transition(S0_$6,S_$33))) && (!$closed(S0_$6,r_$1))) && (!($owner(S0_$6,r_$1) == $me()))) && $is_object_root_ptr(r_$1)) && ($field(r_$1) == $f_root(t_$21))) && (if $is_primitive(t_$21) then (($mutable(S_$33,$emb0(r_$1)) && (r_$1 == $dot($emb0(r_$1),$field(r_$1)))) && ($timestamp(S_$33,$emb0(r_$1)) == $current_timestamp(S_$33))) else (($extent_mutable(S_$33,r_$1) && $extent_is_fresh(S0_$6,S_$33,r_$1)) && $all_first_option_typed(S_$33,r_$1)))) ));
	assume (forall  p_$51 : $ptr, S_$34 : $state :: ( $is_object_root_ptr(p_$51) == $is_object_root_ptr(p_$51) ));
	assume (forall  p_$52 : $ptr, S_$35 : $state :: ( $is_object_root_ptr(p_$52) == $is_object_root_ptr(p_$52) ));
	assume (forall  S0_$17 : $state, S_$80 : $state, o_$1 : $ptr :: {$is_unwrapped_dynamic(S0_$17,S_$80,o_$1)} ( $is_unwrapped_dynamic(S0_$17,S_$80,o_$1) <==> ((($is_unwrapped(S0_$17,S_$80,o_$1) && ($f_timestamp(S_$80) == lambda#3(S0_$17,S_$80,o_$1))) && ((forall  r_$5 : $ptr :: {$owner(S_$80,r_$5)} {$closed(S_$80,r_$5)} ( $owns(S0_$17,o_$1)[r_$5] ==> (($owner(S0_$17,r_$5) == o_$1) && (((($is(r_$5,$field_type($field(r_$5))) && $is_proper(r_$5)) && ($owner(S_$80,r_$5) == $me())) && $closed(S_$80,r_$5)) && (!$is_primitive($field_type($field(r_$5)))))) )))) && ($f_owner(S_$80) == lambda#4(S0_$17,o_$1))) ));
	assume (forall  S0_$18 : $state, S_$81 : $state, o_$2 : $ptr :: {$is_unwrapped(S0_$18,S_$81,o_$2)} ( $is_unwrapped(S0_$18,S_$81,o_$2) <==> ((((((((true && $mutable(S_$81,o_$2)) && ($heap(S_$81) == $heap(S0_$18))) && ($owns(S0_$18,o_$2) == $owns(S_$81,o_$2))) && ((forall  p_$136 : $ptr :: {$roots(S_$81)[p_$136]} ( ((!($roots(S0_$18)[p_$136] == o_$2)) && ($roots(S0_$18)[p_$136] == $roots(S_$81)[p_$136])) || ((($roots(S0_$18)[p_$136] == o_$2) && (($roots(S_$81)[p_$136] == p_$136) || (!($owner(S0_$18,p_$136) == o_$2)))) && ($owner(S_$81,$roots(S_$81)[p_$136]) == $me())) )))) && ($f_closed(S_$81) == $f_closed(S0_$18)[o_$2 := false])) && (($current_timestamp(S0_$18) < $current_timestamp(S_$81)) && $call_transition(S0_$18,S_$81))) && $post_unwrap(S0_$18,S_$81)) && ($typemap($f_owner(S0_$18)) == $typemap($f_owner(S_$81)))) ));
	assume (forall  S0_$19 : $state, S_$82 : $state, o_$3 : $ptr :: {$is_wrapped_dynamic(S0_$19,S_$82,o_$3)} ( $is_wrapped_dynamic(S0_$19,S_$82,o_$3) <==> ((($is_wrapped(S0_$19,S_$82,o_$3,$owns(S0_$19,o_$3)) && ($heap(S_$82) == $heap(S0_$19))) && ($owns(S0_$19,o_$3) == $owns(S_$82,o_$3))) && ($f_owner(S_$82) == lambda#5(o_$3,S0_$19))) ));
	assume (forall  S0_$20 : $state, S_$83 : $state, o_$4 : $ptr, owns_$1 : $ptrset :: {$is_wrapped(S0_$20,S_$83,o_$4,owns_$1)} ( $is_wrapped(S0_$20,S_$83,o_$4,owns_$1) <==> (((((((true && ($f_closed(S_$83) == $f_closed(S0_$20)[o_$4 := true])) && ($f_timestamp(S_$83) == $f_timestamp(S0_$20)[o_$4 := $current_timestamp(S_$83)])) && ((forall  p_$137 : $ptr :: {$roots(S_$83)[p_$137]} ( ($roots(S_$83)[p_$137] == $roots(S0_$20)[p_$137]) || (($roots(S_$83)[p_$137] == o_$4) && ((p_$137 == o_$4) || owns_$1[$roots(S0_$20)[p_$137]])) )))) && (((($is(o_$4,$field_type($field(o_$4))) && $is_proper(o_$4)) && ($owner(S_$83,o_$4) == $me())) && $closed(S_$83,o_$4)) && (!$is_primitive($field_type($field(o_$4)))))) && ($is_claimable($field_type($field(o_$4))) ==> (($ref_cnt(S0_$20,o_$4) == 0) && ($ref_cnt(S_$83,o_$4) == 0)))) && (($current_timestamp(S0_$20) < $current_timestamp(S_$83)) && $call_transition(S0_$20,S_$83))) && ($typemap($f_owner(S0_$20)) == $typemap($f_owner(S_$83)))) ));
	assume (forall  S0_$21 : $state, S_$85 : $state, l_$0 : $ptr, p_$139 : $ptr :: {$release(S0_$21,S_$85,l_$0,p_$139)} ( ($f_owner($release(S0_$21,S_$85,l_$0,p_$139)) == $f_owner(S_$85)[p_$139 := $me()]) && ($f_timestamp($release(S0_$21,S_$85,l_$0,p_$139)) == $f_timestamp(S_$85)[p_$139 := $current_timestamp(S0_$21)]) ));
	assume (forall  S1_$12 : $state, S2_$4 : $state, p_$140 : $ptr, t_$43 : $ctype :: {$spans_the_same(S1_$12,S2_$4,p_$140,t_$43)} ( $spans_the_same(S1_$12,S2_$4,p_$140,t_$43) <==> (($owns(S1_$12,p_$140) == $owns(S2_$4,p_$140)) && ((forall  f_$43 : $field :: {$heap(S2_$4)[f_$43][p_$140]} ( ($is_proper($dot(p_$140,f_$43)) && (!(f_$43 == $f_ref_cnt(t_$43)))) ==> ($heap(S1_$12)[f_$43][p_$140] == $heap(S2_$4)[f_$43][p_$140]) )))) ));
	assume (forall  S1_$13 : $state, S2_$5 : $state, p_$141 : $ptr, t_$44 : $ctype :: {$nonvolatile_spans_the_same(S1_$13,S2_$5,p_$141,t_$44)} ( $nonvolatile_spans_the_same(S1_$13,S2_$5,p_$141,t_$44) <==> ((forall  f_$44 : $field :: {$heap(S2_$5)[f_$44][p_$141]} ( ($is_proper($dot(p_$141,f_$44)) && $is_sequential_field(f_$44)) ==> ($heap(S1_$13)[f_$44][p_$141] == $heap(S2_$5)[f_$44][p_$141]) ))) ));
	assume (forall  p_$53 : $ptr, S_$36 : $state :: ( (((forall  q_$3_$1 : $ptr :: {$closed(S_$36,q_$3_$1)} ( $closed(S_$36,q_$3_$1) ==> $inv2(S_$36,S_$36,q_$3_$1,$field_type($field(q_$3_$1))) ))) && $good_for_admissibility(S_$36)) == (((forall  q_$3 : $ptr :: {$closed(S_$36,q_$3)} ( $closed(S_$36,q_$3) ==> $inv2(S_$36,S_$36,q_$3,$field_type($field(q_$3))) ))) && $good_for_admissibility(S_$36)) ));
	assume (forall  p_$54 : $ptr, S_$37 : $state :: ( (($closed(S_$37,p_$54) && $inv2(S_$37,S_$37,p_$54,$field_type($field(p_$54)))) && (((forall  q_$3_$3 : $ptr :: {$closed(S_$37,q_$3_$3)} ( $closed(S_$37,q_$3_$3) ==> $inv2(S_$37,S_$37,q_$3_$3,$field_type($field(q_$3_$3))) ))) && $good_for_admissibility(S_$37))) == (($closed(S_$37,p_$54) && $inv2(S_$37,S_$37,p_$54,$field_type($field(p_$54)))) && (((forall  q_$3_$3 : $ptr :: {$closed(S_$37,q_$3_$3)} ( $closed(S_$37,q_$3_$3) ==> $inv2(S_$37,S_$37,q_$3_$3,$field_type($field(q_$3_$3))) ))) && $good_for_admissibility(S_$37))) ));
	assume ((!$is_stuttering_check()) && (!$is_unwrap_check())) == ((!$is_stuttering_check()) && (!$is_unwrap_check()));
	assume (forall  p_$55 : $ptr, S_$38 : $state :: ( (((((((($is(p_$55,$field_type($field(p_$55))) && $is_proper(p_$55)) && ($owner(S_$38,p_$55) == $me())) && $closed(S_$38,p_$55)) && (!$is_primitive($field_type($field(p_$55))))) && ((!$is_claimable($field_type($field(p_$55)))) || ($ref_cnt(S_$38,p_$55) == 0))) && $inv2(S_$38,S_$38,p_$55,$field_type($field(p_$55)))) && ((forall  q_$4_$1 : $ptr :: {$closed(S_$38,q_$4_$1)} ( $closed(S_$38,q_$4_$1) ==> $inv2(S_$38,S_$38,q_$4_$1,$field_type($field(q_$4_$1))) )))) && $good_for_pre_can_unwrap(S_$38)) == (((((((($is(p_$55,$field_type($field(p_$55))) && $is_proper(p_$55)) && ($owner(S_$38,p_$55) == $me())) && $closed(S_$38,p_$55)) && (!$is_primitive($field_type($field(p_$55))))) && ((!$is_claimable($field_type($field(p_$55)))) || ($ref_cnt(S_$38,p_$55) == 0))) && $inv2(S_$38,S_$38,p_$55,$field_type($field(p_$55)))) && ((forall  q_$4 : $ptr :: {$closed(S_$38,q_$4)} ( $closed(S_$38,q_$4) ==> $inv2(S_$38,S_$38,q_$4,$field_type($field(q_$4))) )))) && $good_for_pre_can_unwrap(S_$38)) ));
	assume (forall  S_$86 : $state, c_$3 : $ptr :: {$full_stop(S_$86),$valid_claim(S_$86,c_$3)} ( ($full_stop(S_$86) && $closed(S_$86,c_$3)) ==> $valid_claim(S_$86,c_$3) ));
	assume (forall  S_$87 : $state, c_$4 : $ptr :: {$valid_claim(S_$87,c_$4)} ( $valid_claim(S_$87,c_$4) ==> ($closed(S_$87,c_$4) && $invok_state(S_$87)) ));
	assume (forall  tok : $token, c_$0 : $ptr, #s1_$0 : $state :: ( (($good_state_ext(tok,#s1_$0) && ((forall  p_$36_$2 : $ptr, q_$2_$2 : $ptr :: {$set_in_pos(p_$36_$2,$owns(#s1_$0,q_$2_$2))} ( (($good_state(#s1_$0) && $int_to_ptrset($heap(#s1_$0)[$f_owns($field_type($field(q_$2_$2)))][q_$2_$2])[p_$36_$2]) && $closed(#s1_$0,q_$2_$2)) ==> (((((!$is_primitive($field_type($field(p_$36_$2)))) && ($owner(#s1_$0,p_$36_$2) == q_$2_$2)) && $closed(#s1_$0,p_$36_$2)) && (!(p_$36_$2 == $phys_ptr_cast($null,$field_type($field(p_$36_$2)))))) && true) )))) && true) == (($good_state_ext(tok,#s1_$0) && ((forall  p_$36_$3 : $ptr, q_$2_$3 : $ptr :: {$set_in_pos(p_$36_$3,$owns(#s1_$0,q_$2_$3))} ( (($good_state(#s1_$0) && $int_to_ptrset($heap(#s1_$0)[$f_owns($field_type($field(q_$2_$3)))][q_$2_$3])[p_$36_$3]) && $closed(#s1_$0,q_$2_$3)) ==> (((((!$is_primitive($field_type($field(p_$36_$3)))) && ($owner(#s1_$0,p_$36_$3) == q_$2_$3)) && $closed(#s1_$0,p_$36_$3)) && (!(p_$36_$3 == $phys_ptr_cast($null,$field_type($field(p_$36_$3)))))) && true) )))) && true) ));
	assume (forall  typ_$0 : $ctype, #p_$5 : $ptr, #s2 : $state, #s1_$1 : $state :: ( (((!$closed(#s1_$1,#p_$5)) && (!$closed(#s2,#p_$5))) || ($inv2(#s1_$1,#s2,#p_$5,typ_$0) && $nonvolatile_spans_the_same(#s1_$1,#s2,#p_$5,typ_$0))) == (((!$closed(#s1_$1,#p_$5)) && (!$closed(#s2,#p_$5))) || ($inv2(#s1_$1,#s2,#p_$5,typ_$0) && $nonvolatile_spans_the_same(#s1_$1,#s2,#p_$5,typ_$0))) ));
	assume (forall  tok_$0 : $token, c_$1 : $ptr, #s2_$0 : $state, #s1_$2 : $state :: ( (((((((($good_state_ext(tok_$0,#s1_$2) && $full_stop(#s1_$2)) && $good_state_ext(tok_$0,#s2_$0)) && ((forall  p_$36_$4 : $ptr, q_$2_$4 : $ptr :: {$set_in_pos(p_$36_$4,$owns(#s1_$2,q_$2_$4))} ( (($good_state(#s1_$2) && $int_to_ptrset($heap(#s1_$2)[$f_owns($field_type($field(q_$2_$4)))][q_$2_$4])[p_$36_$4]) && $closed(#s1_$2,q_$2_$4)) ==> (((((!$is_primitive($field_type($field(p_$36_$4)))) && ($owner(#s1_$2,p_$36_$4) == q_$2_$4)) && $closed(#s1_$2,p_$36_$4)) && (!(p_$36_$4 == $phys_ptr_cast($null,$field_type($field(p_$36_$4)))))) && true) )))) && ((forall  p_$36_$5 : $ptr, q_$2_$5 : $ptr :: {$set_in_pos(p_$36_$5,$owns(#s2_$0,q_$2_$5))} ( (($good_state(#s2_$0) && $int_to_ptrset($heap(#s2_$0)[$f_owns($field_type($field(q_$2_$5)))][q_$2_$5])[p_$36_$5]) && $closed(#s2_$0,q_$2_$5)) ==> (((((!$is_primitive($field_type($field(p_$36_$5)))) && ($owner(#s2_$0,p_$36_$5) == q_$2_$5)) && $closed(#s2_$0,p_$36_$5)) && (!(p_$36_$5 == $phys_ptr_cast($null,$field_type($field(p_$36_$5)))))) && true) )))) && ((forall  #p_$6_$1 : $ptr :: {$closed(#s1_$2,#p_$6_$1)} {$closed(#s2_$0,#p_$6_$1)} ( ((!$closed(#s1_$2,#p_$6_$1)) && (!$closed(#s2_$0,#p_$6_$1))) || ($inv2(#s1_$2,#s2_$0,#p_$6_$1,$field_type($field(#p_$6_$1))) && $nonvolatile_spans_the_same(#s1_$2,#s2_$0,#p_$6_$1,$field_type($field(#p_$6_$1)))) )))) && $valid_claim(#s1_$2,c_$1)) && $closed(#s2_$0,c_$1)) && true) == (((((((($good_state_ext(tok_$0,#s1_$2) && $full_stop(#s1_$2)) && $good_state_ext(tok_$0,#s2_$0)) && ((forall  p_$36_$6 : $ptr, q_$2_$6 : $ptr :: {$set_in_pos(p_$36_$6,$owns(#s1_$2,q_$2_$6))} ( (($good_state(#s1_$2) && $int_to_ptrset($heap(#s1_$2)[$f_owns($field_type($field(q_$2_$6)))][q_$2_$6])[p_$36_$6]) && $closed(#s1_$2,q_$2_$6)) ==> (((((!$is_primitive($field_type($field(p_$36_$6)))) && ($owner(#s1_$2,p_$36_$6) == q_$2_$6)) && $closed(#s1_$2,p_$36_$6)) && (!(p_$36_$6 == $phys_ptr_cast($null,$field_type($field(p_$36_$6)))))) && true) )))) && ((forall  p_$36_$7 : $ptr, q_$2_$7 : $ptr :: {$set_in_pos(p_$36_$7,$owns(#s2_$0,q_$2_$7))} ( (($good_state(#s2_$0) && $int_to_ptrset($heap(#s2_$0)[$f_owns($field_type($field(q_$2_$7)))][q_$2_$7])[p_$36_$7]) && $closed(#s2_$0,q_$2_$7)) ==> (((((!$is_primitive($field_type($field(p_$36_$7)))) && ($owner(#s2_$0,p_$36_$7) == q_$2_$7)) && $closed(#s2_$0,p_$36_$7)) && (!(p_$36_$7 == $phys_ptr_cast($null,$field_type($field(p_$36_$7)))))) && true) )))) && ((forall  #p_$6 : $ptr :: {$closed(#s1_$2,#p_$6)} {$closed(#s2_$0,#p_$6)} ( ((!$closed(#s1_$2,#p_$6)) && (!$closed(#s2_$0,#p_$6))) || ($inv2(#s1_$2,#s2_$0,#p_$6,$field_type($field(#p_$6))) && $nonvolatile_spans_the_same(#s1_$2,#s2_$0,#p_$6,$field_type($field(#p_$6)))) )))) && $valid_claim(#s1_$2,c_$1)) && $closed(#s2_$0,c_$1)) && true) ));
	assume (forall  S1_$2 : $state, S0_$7 : $state :: ( ((forall  r_$2_$0 : $ptr, f_$24_$0 : $field :: {$closed(S1_$2,$ptr($as_field_with_type(f_$24_$0,^^claim),r_$2_$0))} ( $is($ptr(f_$24_$0,r_$2_$0),^^claim) ==> (($closed(S0_$7,$ptr(f_$24_$0,r_$2_$0)) && $closed(S1_$2,$ptr(f_$24_$0,r_$2_$0))) ==> $valid_claim(S1_$2,$ptr(f_$24_$0,r_$2_$0))) ))) == ((forall  r_$2 : $ptr, f_$24 : $field :: {$closed(S1_$2,$ptr($as_field_with_type(f_$24,^^claim),r_$2))} ( $is($ptr(f_$24,r_$2),^^claim) ==> (($closed(S0_$7,$ptr(f_$24,r_$2)) && $closed(S1_$2,$ptr(f_$24,r_$2))) ==> $valid_claim(S1_$2,$ptr(f_$24,r_$2))) ))) ));
	assume (forall  c1 : $ptr, c2 : $ptr :: {$claims_claim(c1,c2)} ( (($is(c1,^^claim) && $is(c2,^^claim)) && ((forall  S_$88 : $state :: ( $valid_claim(S_$88,c1) ==> $closed(S_$88,c2) )))) ==> $claims_claim(c1,c2) ));
	assume (forall  S_$89 : $state, c1_$0 : $ptr, c2_$0 : $ptr :: {$valid_claim(S_$89,c1_$0),$claims_claim(c1_$0,c2_$0)} ( ($valid_claim(S_$89,c1_$0) && $claims_claim(c1_$0,c2_$0)) ==> $valid_claim(S_$89,c2_$0) ));
	assume (forall  S_$90 : $state, c_$5 : $ptr, o_$5 : $ptr :: {$closed(S_$90,c_$5),$claims_obj(c_$5,o_$5)} ( $good_state(S_$90) ==> (($claims_obj(c_$5,o_$5) && $closed(S_$90,c_$5)) ==> (($instantiate_ptrset($owns(S_$90,o_$5)) && $closed(S_$90,o_$5)) && ($ref_cnt(S_$90,o_$5) > 0))) ));
	assume (forall  S_$91 : $state, c_$6 : $ptr, o_$6 : $ptr :: {$valid_claim(S_$91,c_$6),$claims_obj(c_$6,o_$6)} ( ($valid_claim(S_$91,c_$6) && $claims_obj(c_$6,o_$6)) ==> $inv2(S_$91,S_$91,o_$6,$field_type($field(o_$6))) ));
	assume (forall  S_$92 : $state, c_$7 : $ptr, r_$6 : $ptr, f_$45 : $field :: {$valid_claim(S_$92,c_$7),$claims_obj(c_$7,$ptr($as_field_with_type(f_$45,^^claim),r_$6))} ( $is($ptr(f_$45,r_$6),^^claim) ==> (($valid_claim(S_$92,c_$7) && $claims_obj(c_$7,$ptr(f_$45,r_$6))) ==> $valid_claim(S_$92,$ptr(f_$45,r_$6))) ));
	assume (forall  s_$17 : $state, p_$144 : $ptr :: {$claimed_closed(s_$17,p_$144)} ( $claimed_closed(s_$17,p_$144) <==> $closed(s_$17,p_$144) ));
	assume (forall  S_$94 : $state, p_$145 : $ptr :: {$invok_state(S_$94),$claimed_closed(S_$94,p_$145)} ( ($invok_state(S_$94) && $claimed_closed(S_$94,p_$145)) ==> $inv2(S_$94,S_$94,p_$145,$field_type($field(p_$145))) ));
	assume $no_claim == $phys_ptr_cast($null,^^claim);
	assume (forall  c_$2 : $ptr, S_$39 : $state, S0_$8 : $state :: ( (((((($f_closed(S_$39) == $f_closed(S0_$8)[c_$2 := false]) && ($f_timestamp(S_$39) == $f_timestamp(S0_$8))) && ($f_owner(S_$39) == $f_owner(S0_$8))) && ($heap(S_$39) == $heap(S0_$8))) && $good_state(S_$39)) && (($current_timestamp(S0_$8) < $current_timestamp(S_$39)) && $call_transition(S0_$8,S_$39))) == (((((($f_closed(S_$39) == $f_closed(S0_$8)[c_$2 := false]) && ($f_timestamp(S_$39) == $f_timestamp(S0_$8))) && ($f_owner(S_$39) == $f_owner(S0_$8))) && ($heap(S_$39) == $heap(S0_$8))) && $good_state(S_$39)) && (($current_timestamp(S0_$8) < $current_timestamp(S_$39)) && $call_transition(S0_$8,S_$39))) ));
	assume (forall  S_$95 : $state, c_$8 : $ptr, o_$8 : $ptr :: {$account_claim(S_$95,c_$8,o_$8)} ( $account_claim(S_$95,c_$8,o_$8) <==> (($good_state(S_$95) && $closed(S_$95,c_$8)) && $claims_obj(c_$8,o_$8)) ));
	assume (forall  S_$96 : $state, c_$9 : $ptr, o_$9 : $ptr :: {$account_claim(S_$96,c_$9,o_$9)} ( $account_claim(S_$96,c_$9,o_$9) ==> ((($claim_no(S_$96,o_$9,$claim_idx(o_$9,c_$9)) == c_$9) && (0 <= $claim_idx(o_$9,c_$9))) && ($claim_idx(o_$9,c_$9) < $ref_cnt(S_$96,o_$9))) ));
	assume (forall  owns : $ptrset, o : $ptr, S_$40 : $state :: ( $set_difference(owns,$owns(S_$40,o)) == $set_difference(owns,$owns(S_$40,o)) ));
	assume (forall  S_$97 : $state, p_$146 : $ptr, q_$9 : $ptr, l_$1 : $label :: {$in_domain_lab(S_$97,p_$146,q_$9,l_$1)} ( $in_domain_lab(S_$97,p_$146,q_$9,l_$1) <==> $in_domain(S_$97,p_$146,q_$9) ));
	assume (forall  S_$98 : $state, p_$147 : $ptr, q_$10 : $ptr, l_$2 : $label :: {$in_vdomain_lab(S_$98,p_$147,q_$10,l_$2)} ( $in_vdomain_lab(S_$98,p_$147,q_$10,l_$2) <==> $in_vdomain(S_$98,p_$147,q_$10) ));
	assume (forall  S_$99 : $state, p_$148 : $ptr, q_$11 : $ptr, l_$3 : $label :: {$in_domain_lab(S_$99,p_$148,q_$11,l_$3)} ( $in_domain_lab(S_$99,p_$148,q_$11,l_$3) ==> $inv_lab(S_$99,p_$148,l_$3) ));
	assume (forall  S_$100 : $state, p_$149 : $ptr, q_$12 : $ptr, l_$4 : $label :: {$in_vdomain_lab(S_$100,p_$149,q_$12,l_$4)} ( $in_vdomain_lab(S_$100,p_$149,q_$12,l_$4) ==> $inv_lab(S_$100,p_$149,l_$4) ));
	assume (forall  S_$101 : $state, p_$150 : $ptr :: {$in_domain(S_$101,p_$150,$roots(S_$101)[p_$150])} ( ($full_stop(S_$101) && (((($is($roots(S_$101)[p_$150],$field_type($field($roots(S_$101)[p_$150]))) && $is_proper($roots(S_$101)[p_$150])) && ($owner(S_$101,$roots(S_$101)[p_$150]) == $me())) && $closed(S_$101,$roots(S_$101)[p_$150])) && (!$is_primitive($field_type($field($roots(S_$101)[p_$150])))))) ==> $in_domain(S_$101,p_$150,$roots(S_$101)[p_$150]) ));
	assume (forall  S_$102 : $state, p_$151 : $ptr, q_$13 : $ptr :: {$in_domain(S_$102,p_$151,q_$13)} ( $instantiate_ptr($roots(S_$102)[q_$13]) && ($in_domain(S_$102,p_$151,q_$13) ==> (((((($roots(S_$102)[p_$151] == q_$13) && (((($is(q_$13,$field_type($field(q_$13))) && $is_proper(q_$13)) && ($owner(S_$102,q_$13) == $me())) && $closed(S_$102,q_$13)) && (!$is_primitive($field_type($field(q_$13)))))) && $closed(S_$102,p_$151)) && $ver_domain($int_to_version($f_timestamp(S_$102)[q_$13]))[p_$151]) && $inv2(S_$102,S_$102,p_$151,$field_type($field(p_$151)))) && $set_in0(p_$151,$owns(S_$102,$owner(S_$102,p_$151))))) ));
	assume (forall  S_$103 : $state, p_$152 : $ptr, q_$14 : $ptr :: {$in_domain(S_$103,p_$152,q_$14)} ( (($full_stop(S_$103) && $ver_domain($int_to_version($f_timestamp(S_$103)[q_$14]))[p_$152]) && (((($is(q_$14,$field_type($field(q_$14))) && $is_proper(q_$14)) && ($owner(S_$103,q_$14) == $me())) && $closed(S_$103,q_$14)) && (!$is_primitive($field_type($field(q_$14)))))) ==> $in_domain(S_$103,p_$152,q_$14) ));
	assume (forall  S_$104 : $state, q_$15 : $ptr, r_$7 : $ptr :: {$in_domain(S_$104,r_$7,$roots(S_$104)[q_$15])} ( (($in_domain(S_$104,q_$15,$roots(S_$104)[q_$15]) && $is_sequential_field($f_owns($field_type($field(q_$15))))) && $set_in0(r_$7,$owns(S_$104,q_$15))) ==> ((($owner(S_$104,r_$7) == q_$15) && ($roots(S_$104)[r_$7] == $roots(S_$104)[q_$15])) && $in_domain(S_$104,r_$7,$roots(S_$104)[q_$15])) ));
	assume (forall  S_$105 : $state, p_$153 : $ptr :: {$as_deep_domain(S_$105,p_$153)} ( $as_deep_domain(S_$105,p_$153) == p_$153 ));
	assume (forall  S_$107 : $state, p_$155 : $ptr, q_$16 : $ptr, r_$8 : $ptr :: {$in_domain(S_$107,p_$155,$as_deep_domain(S_$107,q_$16)),$owns(S_$107,p_$155)[r_$8]} ( ((($good_state(S_$107) && $is_sequential_field($f_owns($field_type($field(p_$155))))) && $in_domain(S_$107,p_$155,q_$16)) && $owns(S_$107,p_$155)[r_$8]) ==> $in_domain(S_$107,r_$8,q_$16) ));
	assume (forall  p_$56 : $ptr, S_$41 : $state :: ( $int_to_version($f_timestamp(S_$41)[p_$56]) == $int_to_version($f_timestamp(S_$41)[p_$56]) ));
	assume (forall  p_$57 : $ptr, S_$42 : $state :: ( $ver_domain($int_to_version($f_timestamp(S_$42)[p_$57])) == $ver_domain($int_to_version($f_timestamp(S_$42)[p_$57])) ));
	assume (forall  S_$108 : $state, p_$156 : $ptr, q_$17 : $ptr, r_$9 : $ptr :: {$ver_domain($int_to_version($f_timestamp(S_$108)[p_$156]))[q_$17],$in_vdomain(S_$108,r_$9,p_$156)} ( (($is_volatile_field($f_owns($field_type($field(q_$17)))) && $ver_domain($int_to_version($f_timestamp(S_$108)[p_$156]))[q_$17]) && ((forall  S1_$14 : $state :: ( (($inv2(S1_$14,S1_$14,q_$17,$field_type($field(q_$17))) && ($int_to_version($f_timestamp(S1_$14)[p_$156]) == $int_to_version($f_timestamp(S_$108)[p_$156]))) && ($ver_domain($int_to_version($f_timestamp(S1_$14)[p_$156])) == $ver_domain($int_to_version($f_timestamp(S_$108)[p_$156])))) ==> $set_in0(r_$9,$owns(S1_$14,q_$17)) )))) ==> ($in_vdomain(S_$108,r_$9,p_$156) && $set_in0(r_$9,$owns(S_$108,q_$17))) ));
	assume (forall  S_$109 : $state, p_$157 : $ptr, q_$18 : $ptr :: {$in_vdomain(S_$109,p_$157,q_$18)} ( $in_vdomain(S_$109,p_$157,q_$18) ==> $in_domain(S_$109,p_$157,q_$18) ));
	assume (forall  S_$110 : $state, p_$158 : $ptr, d : $ptr, f_$46 : $field :: {$heap(S_$110)[f_$46][p_$158],$ver_domain($int_to_version($f_timestamp(S_$110)[d]))[p_$158],$is_sequential_field(f_$46)} ( ($ver_domain($int_to_version($f_timestamp(S_$110)[d]))[p_$158] && $is_sequential_field(f_$46)) ==> ($heap(S_$110)[f_$46][p_$158] == $fetch_from_domain($int_to_version($f_timestamp(S_$110)[d]),p_$158,f_$46)) ));
	assume (forall  p_$159 : $ptr, c_$10 : $ptr :: {$in_claim_domain(p_$159,c_$10)} ( ((forall  s_$18 : $state :: {$dont_instantiate_state(s_$18)} ( $valid_claim(s_$18,c_$10) ==> $closed(s_$18,p_$159) ))) ==> $in_claim_domain(p_$159,c_$10) ));
	assume (forall  S_$111 : $state, c_$11 : $ptr, obj : $ptr, ptr : $ptr :: {$by_claim(S_$111,c_$11,obj,ptr)} ( $by_claim(S_$111,c_$11,obj,ptr) == ptr ));
	assume (forall  S_$112 : $state, p_$160 : $ptr, c_$12 : $ptr, f_$47 : $field :: {$in_claim_domain(p_$160,c_$12),$heap(S_$112)[f_$47][p_$160]} ( ((($good_state(S_$112) && $closed(S_$112,c_$12)) && $in_claim_domain(p_$160,c_$12)) && $is_sequential_field(f_$47)) ==> ($in_claim_domain(p_$160,c_$12) && ($heap(S_$112)[f_$47][p_$160] == $fetch_from_domain($claim_version(c_$12),p_$160,f_$47))) ));
	assume (forall  S_$113 : $state, p_$161 : $ptr, q_$19 : $ptr, c_$13 : $ptr, f_$48 : $field :: {$by_claim(S_$113,c_$13,q_$19,$dot(p_$161,f_$48))} ( ((($good_state(S_$113) && $closed(S_$113,c_$13)) && $in_claim_domain(p_$161,c_$13)) && $is_sequential_field(f_$48)) ==> ($in_claim_domain(p_$161,c_$13) && ($heap(S_$113)[f_$48][p_$161] == $fetch_from_domain($claim_version(c_$13),p_$161,f_$48))) ));
	assume (forall  p_$58 : $ptr :: ( $dot(p_$58,$f_vol_version($field_type($field(p_$58)))) == $dot(p_$58,$f_vol_version($field_type($field(p_$58)))) ));
	assume (forall  f_$25 : $field, p_$59 : $ptr, S_$43 : $state :: ( $fetch_from_vv($read_vol_version(S_$43,p_$59),p_$59,f_$25) == $fetch_from_vv($read_vol_version(S_$43,p_$59),p_$59,f_$25) ));
	assume (forall  S_$115 : $state, t_$46 : $ctype, p_$163 : $ptr, approver_$1 : $field, subject_$2 : $field :: {$is_approved_by(t_$46,approver_$1,subject_$2),$heap(S_$115)[subject_$2][p_$163]} ( ((($full_stop(S_$115) && $is_approved_by(t_$46,approver_$1,subject_$2)) && $closed(S_$115,p_$163)) && (($int_to_ptr($heap(S_$115)[approver_$1][p_$163]) == $me()) || ($int_to_ptr($fetch_from_vv($read_vol_version(S_$115,p_$163),p_$163,approver_$1)) == $me()))) ==> ($heap(S_$115)[subject_$2][p_$163] == $fetch_from_vv($read_vol_version(S_$115,p_$163),p_$163,subject_$2)) ));
	assume (forall  subject : $field, approver : $ptr, this : $ptr, S2_$0 : $state, S1_$3 : $state :: ( (((($heap(S1_$3)[subject][this] == $heap(S2_$0)[subject][this]) || (approver == $phys_ptr_cast($null,$field_type($field(approver))))) || ((!$is_threadtype($field_type($field(approver)))) && $inv2(S1_$3,S2_$0,approver,$field_type($field(approver))))) || ($is_threadtype($field_type($field(approver))) && (!($read_vol_version(S1_$3,this) == $read_vol_version(S2_$0,this))))) == (((($heap(S1_$3)[subject][this] == $heap(S2_$0)[subject][this]) || (approver == $phys_ptr_cast($null,$field_type($field(approver))))) || ((!$is_threadtype($field_type($field(approver)))) && $inv2(S1_$3,S2_$0,approver,$field_type($field(approver))))) || ($is_threadtype($field_type($field(approver))) && (!($read_vol_version(S1_$3,this) == $read_vol_version(S2_$0,this))))) ));
	assume (forall  subject_$0 : $field, approver_$0 : $field, this_$0 : $ptr, S2_$1 : $state, S1_$4 : $state :: ( (((($heap(S1_$4)[subject_$0][this_$0] == $heap(S2_$1)[subject_$0][this_$0]) || ($int_to_ptr($heap(S1_$4)[approver_$0][this_$0]) == $phys_ptr_cast($null,$field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0])))))) || ((!$is_threadtype($field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0]))))) && $inv2(S1_$4,S2_$1,$int_to_ptr($heap(S1_$4)[approver_$0][this_$0]),$field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0])))))) || ($is_threadtype($field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0])))) && (!($read_vol_version(S1_$4,this_$0) == $read_vol_version(S2_$1,this_$0))))) == (((($heap(S1_$4)[subject_$0][this_$0] == $heap(S2_$1)[subject_$0][this_$0]) || ($int_to_ptr($heap(S1_$4)[approver_$0][this_$0]) == $phys_ptr_cast($null,$field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0])))))) || ((!$is_threadtype($field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0]))))) && $inv2(S1_$4,S2_$1,$int_to_ptr($heap(S1_$4)[approver_$0][this_$0]),$field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0])))))) || ($is_threadtype($field_type($field($int_to_ptr($heap(S1_$4)[approver_$0][this_$0])))) && (!($read_vol_version(S1_$4,this_$0) == $read_vol_version(S2_$1,this_$0))))) ));
	assume (forall  S_$116 : $state, p_$164 : $ptr, t_$47 : $ctype, subject_$3 : $field :: {$is_owner_approved(t_$47,subject_$3),$heap(S_$116)[subject_$3][p_$164]} ( ((($full_stop(S_$116) && $closed(S_$116,p_$164)) && $is_owner_approved(t_$47,subject_$3)) && ($owner(S_$116,p_$164) == $me())) ==> ($heap(S_$116)[subject_$3][p_$164] == $fetch_from_vv($read_vol_version(S_$116,p_$164),p_$164,subject_$3)) ));
	assume (forall  subject_$1 : $field, this_$1 : $ptr, S2_$2 : $state, S1_$5 : $state :: ( (((($heap(S1_$5)[subject_$1][this_$1] == $heap(S2_$2)[subject_$1][this_$1]) || ($owner(S1_$5,this_$1) == $phys_ptr_cast($null,$field_type($field($owner(S1_$5,this_$1)))))) || ((!$is_threadtype($field_type($field($owner(S1_$5,this_$1))))) && $inv2(S1_$5,S2_$2,$owner(S1_$5,this_$1),$field_type($field($owner(S1_$5,this_$1)))))) || ($is_threadtype($field_type($field($owner(S1_$5,this_$1)))) && (!($read_vol_version(S1_$5,this_$1) == $read_vol_version(S2_$2,this_$1))))) == (((($heap(S1_$5)[subject_$1][this_$1] == $heap(S2_$2)[subject_$1][this_$1]) || ($owner(S1_$5,this_$1) == $phys_ptr_cast($null,$field_type($field($owner(S1_$5,this_$1)))))) || ((!$is_threadtype($field_type($field($owner(S1_$5,this_$1))))) && $inv2(S1_$5,S2_$2,$owner(S1_$5,this_$1),$field_type($field($owner(S1_$5,this_$1)))))) || ($is_threadtype($field_type($field($owner(S1_$5,this_$1)))) && (!($read_vol_version(S1_$5,this_$1) == $read_vol_version(S2_$2,this_$1))))) ));
	assume (forall  S_$117 : $state, r_$10 : $ptr :: {$extent(S_$117,r_$10)} ( $extent(S_$117,r_$10) == lambda#10(r_$10,S_$117) ));
	assume (forall  r_$11 : $ptr :: {$full_extent(r_$11)} ( $full_extent(r_$11) == lambda#11(r_$11,$full_extent_state) ));
	assume (forall  S_$118 : $state, p_$165 : $ptr, r_$12 : $ptr :: {$composite_extent(S_$118,r_$12,$field_type($field(r_$12)))[p_$165]} ( $extent_hint(p_$165,r_$12) ));
	assume (forall  o_$10 : $ptr :: {$span(o_$10)} ( $span(o_$10) == lambda#12(o_$10) ));
	assume (forall  #p_$7 : $ptr :: ( $full_extent(#p_$7) == $full_extent(#p_$7) ));
	assume (forall  S_$119 : $state, r_$13 : $ptr :: {$extent_mutable(S_$119,r_$13)} ( $extent_mutable(S_$119,r_$13) <==> ($mutable(S_$119,r_$13) && ((forall  p_$166 : $ptr :: {$extent_hint(p_$166,r_$13)} ( $composite_extent(S_$119,r_$13,$field_type($field(r_$13)))[p_$166] ==> $mutable(S_$119,p_$166) )))) ));
	assume (forall  S_$121 : $state, T_$16 : $ctype, sz_$34 : Integer, p_$168 : $ptr :: {$extent_mutable(S_$121,$ptr($as_field_with_type($field(p_$168),$array(T_$16,sz_$34)),$base(p_$168)))} ( $extent_mutable(S_$121,$ptr($as_field_with_type($field(p_$168),$array(T_$16,sz_$34)),$base(p_$168))) ==> $is_mutable_array(S_$121,$dot(p_$168,$array_emb($element_type($field_type($field(p_$168))),$array_length($field_type($field(p_$168))))),T_$16,sz_$34) ));
	assume (forall  S_$122 : $state, T_$17 : $ctype, sz_$35 : Integer, p_$169 : $ptr :: {$mutable(S_$122,$ptr($as_field_with_type($field(p_$169),$array(T_$17,sz_$35)),$base(p_$169)))} ( $in_range_phys_ptr(p_$169) ==> (($is_primitive(T_$17) && $mutable(S_$122,$ptr($as_field_with_type($field(p_$169),$array(T_$17,sz_$35)),$base(p_$169)))) ==> $is_mutable_array(S_$122,$dot(p_$169,$array_emb($element_type($field_type($field(p_$169))),$array_length($field_type($field(p_$169))))),T_$17,sz_$35)) ));
	assume (forall  S0_$22 : $state, S_$123 : $state, r_$15 : $ptr :: {$extent_is_fresh(S0_$22,S_$123,r_$15)} ( $extent_is_fresh(S0_$22,S_$123,r_$15) <==> (($timestamp(S_$123,r_$15) == $current_timestamp(S_$123)) && ((forall  p_$170 : $ptr :: {$extent_hint(p_$170,r_$15)} ( $composite_extent(S_$123,r_$15,$field_type($field(r_$15)))[p_$170] ==> ($timestamp(S_$123,p_$170) == $current_timestamp(S_$123)) )))) ));
	assume (forall  p_$171 : $ptr, q_$21 : $ptr, r_$16 : $ptr :: {$extent_hint(p_$171,q_$21),$extent_hint(q_$21,r_$16)} ( ($extent_hint(p_$171,q_$21) && $extent_hint(q_$21,r_$16)) ==> $extent_hint(p_$171,r_$16) ));
	assume (forall  p_$172 : $ptr, f_$49 : $field :: {$dot(p_$172,$as_composite_field(f_$49))} ( $extent_hint($dot(p_$172,$as_composite_field(f_$49)),p_$172) ));
	assume (forall  p_$173 : $ptr, i_$15 : Integer :: {$idx(p_$173,i_$15)} ( $extent_hint($idx(p_$173,i_$15),p_$173) ));
	assume (forall  E1 : $ptrset, E0 : $ptrset, S1_$6 : $state, S0_$9 : $state :: ( (((((((forall  p_$60_$1 : $ptr :: {$roots(S1_$6)[p_$60_$1]} ( (E0[p_$60_$1] || E1[p_$60_$1]) || ($roots(S0_$9)[p_$60_$1] == $roots(S1_$6)[p_$60_$1]) ))) && ((forall  p_$61_$1 : $ptr, f_$26_$1 : $field :: {$heap(S1_$6)[f_$26_$1][p_$61_$1]} ( (E0[p_$61_$1] || E1[p_$61_$1]) || ($heap(S0_$9)[f_$26_$1][p_$61_$1] == $heap(S1_$6)[f_$26_$1][p_$61_$1]) )))) && ((forall  p_$62_$1 : $ptr :: {$f_timestamp(S1_$6)[p_$62_$1]} ( ((E0[p_$62_$1] || E1[p_$62_$1]) || ($f_timestamp(S1_$6)[p_$62_$1] == $f_timestamp(S0_$9)[p_$62_$1])) && ($f_timestamp(S1_$6)[p_$62_$1] >= $f_timestamp(S0_$9)[p_$62_$1]) )))) && ($f_closed(S0_$9) == $f_closed(S1_$6))) && ((forall  p_$63_$1 : $ptr :: {$f_owner(S1_$6)[p_$63_$1]} ( (E0[p_$63_$1] || E1[p_$63_$1]) || ($f_owner(S0_$9)[p_$63_$1] == $f_owner(S1_$6)[p_$63_$1]) )))) && (($current_timestamp(S0_$9) <= $current_timestamp(S1_$6)) && $call_transition(S0_$9,S1_$6))) == (((((((forall  p_$60 : $ptr :: {$roots(S1_$6)[p_$60]} ( (E0[p_$60] || E1[p_$60]) || ($roots(S0_$9)[p_$60] == $roots(S1_$6)[p_$60]) ))) && ((forall  p_$61 : $ptr, f_$26 : $field :: {$heap(S1_$6)[f_$26][p_$61]} ( (E0[p_$61] || E1[p_$61]) || ($heap(S0_$9)[f_$26][p_$61] == $heap(S1_$6)[f_$26][p_$61]) )))) && ((forall  p_$62 : $ptr :: {$f_timestamp(S1_$6)[p_$62]} ( ((E0[p_$62] || E1[p_$62]) || ($f_timestamp(S1_$6)[p_$62] == $f_timestamp(S0_$9)[p_$62])) && ($f_timestamp(S1_$6)[p_$62] >= $f_timestamp(S0_$9)[p_$62]) )))) && ($f_closed(S0_$9) == $f_closed(S1_$6))) && ((forall  p_$63 : $ptr :: {$f_owner(S1_$6)[p_$63]} ( (E0[p_$63] || E1[p_$63]) || ($f_owner(S0_$9)[p_$63] == $f_owner(S1_$6)[p_$63]) )))) && (($current_timestamp(S0_$9) <= $current_timestamp(S1_$6)) && $call_transition(S0_$9,S1_$6))) ));
	assume (forall  t_$22 : $ctype, p_$64 : $ptr :: ( $ptr($as_field_with_type($field(p_$64),$as_union_type(t_$22)),$base(p_$64)) == $ptr($as_field_with_type($field(p_$64),$as_union_type(t_$22)),$base(p_$64)) ));
	assume (forall  f_$27 : $field :: ( ($is_union_field(f_$27) && ($first_union_field($field_parent_type(f_$27)) == f_$27)) == ($is_union_field(f_$27) && ($first_union_field($field_parent_type(f_$27)) == f_$27)) ));
	assume (forall  S_$125 : $state, #p_$9 : $ptr :: {$first_option_typed(S_$125,#p_$9)} ( $first_option_typed(S_$125,#p_$9) <==> ($is_union_type($field_type($field(#p_$9))) ==> (!($owner(S_$125,$dot(#p_$9,$first_union_field($field_type($field(#p_$9))))) == $inactive_union_owner()))) ));
	assume (forall  S_$126 : $state, p_$174 : $ptr :: {$all_first_option_typed(S_$126,p_$174)} ( $all_first_option_typed(S_$126,p_$174) <==> ($first_option_typed(S_$126,p_$174) && ((forall  q_$22 : $ptr, t_$48 : $ctype :: {$extent_hint($ptr($as_field_with_type($field(q_$22),$as_union_type(t_$48)),$base(q_$22)),p_$174)} ( $composite_extent(S_$126,p_$174,$field_type($field(p_$174)))[q_$22] ==> $first_option_typed(S_$126,q_$22) )))) ));
	assume (forall  f_$28 : $field, p_$65 : $ptr, s_$8 : $state :: ( (!($owner(s_$8,$dot(p_$65,f_$28)) == $inactive_union_owner())) == (!($owner(s_$8,$dot(p_$65,f_$28)) == $inactive_union_owner())) ));
	assume (forall  S_$127 : $state, p_$175 : $ptr, f_$50 : $field :: {$is_union_field(f_$50),$owner(S_$127,$dot(p_$175,f_$50))} ( (($good_state(S_$127) && $is_union_field(f_$50)) && ((!($owner(S_$127,$dot(p_$175,f_$50)) == $inactive_union_owner())) ==> ($active_option(S_$127,p_$175) == f_$50))) && (($owner(S_$127,$dot(p_$175,f_$50)) == $inactive_union_owner()) ==> ((forall  q_$23 : $ptr :: {$extent_hint(q_$23,p_$175)} ( $composite_extent(S_$127,$dot(p_$175,f_$50),$field_type($field($dot(p_$175,f_$50))))[q_$23] ==> (!((((!$is_primitive($field_type($field(q_$23)))) && $is_proper(q_$23)) && ($owner(S_$127,$roots(S_$127)[q_$23]) == $me())) && (!(q_$23 == $phys_ptr_cast($null,$field_type($field(q_$23))))))) )))) ));
	assume (forall  S_$128 : $state, p_$176 : $ptr, f_$51 : $field :: {$is_union_field(f_$51),$dot(p_$176,f_$51),$active_option(S_$128,p_$176)} ( ($good_state(S_$128) && $is_union_field(f_$51)) ==> ((f_$51 == $active_option(S_$128,p_$176)) || ($owner(S_$128,$dot(p_$176,f_$51)) == $inactive_union_owner())) ));
	assume (forall  A : $state, a_$9 : $ptr, B : $state, b_$5 : $ptr :: {$strong_struct_eq(A,a_$9,B,b_$5)} ( $strong_struct_eq(A,a_$9,B,b_$5) <==> ($strong_shallow_struct_eq(A,a_$9,B,b_$5) && ((forall  f_$52 : $field :: {$dot(a_$9,$as_composite_field(f_$52))} ( $composite_extent(A,a_$9,$field_type($field(a_$9)))[$dot(a_$9,f_$52)] ==> $strong_struct_eq(A,$dot(a_$9,f_$52),B,$dot(b_$5,f_$52)) )))) ));
	assume (forall  A_$0 : $state, a_$10 : $ptr, B_$0 : $state, b_$6 : $ptr :: {$strong_shallow_struct_eq(A_$0,a_$10,B_$0,b_$6)} ( $strong_shallow_struct_eq(A_$0,a_$10,B_$0,b_$6) <==> ((forall  f_$53 : $field :: ( $heap(A_$0)[f_$53][a_$10] == $heap(B_$0)[f_$53][b_$6] ))) ));
	assume $good_state($vs_state($struct_zero));
	assume (forall  t_$23 : $ctype, s_$9 : $struct :: ( $phys_ptr_cast($vs_base_ref(s_$9),t_$23) == $phys_ptr_cast($vs_base_ref(s_$9),t_$23) ));
	assume (forall  s_$19 : $struct :: ( $good_state($vs_state(s_$19)) ));
	assume (forall  S_$129 : $state, p_$177 : $ptr :: {$vs_ctor(S_$129,p_$177)} ( $good_state(S_$129) ==> (($phys_ptr_cast($vs_base_ref($vs_ctor(S_$129,p_$177)),$field_type($field(p_$177))) == p_$177) && ($vs_state($vs_ctor(S_$129,p_$177)) == S_$129)) ));
	assume (forall  f_$54 : $field, t_$51 : $ctype :: {$heap($vs_state($struct_zero))[f_$54][$phys_ptr_cast($vs_base_ref($struct_zero),t_$51)]} ( $heap($vs_state($struct_zero))[f_$54][$phys_ptr_cast($vs_base_ref($struct_zero),t_$51)] == 0 ));
	assume (forall  p_$66 : $ptr, s_$10 : $state :: ( $heap(s_$10)[$field(p_$66)][$base(p_$66)] == $heap(s_$10)[$field(p_$66)][$base(p_$66)] ));
	assume (forall  S_$130 : $state, p_$178 : $ptr, v_$2 : Integer :: {$update_int(S_$130,p_$178,v_$2)} ( (((($f_timestamp(S_$130) == $f_timestamp($update_int(S_$130,p_$178,v_$2))) && ($f_closed(S_$130) == $f_closed($update_int(S_$130,p_$178,v_$2)))) && ($f_owner(S_$130) == $f_owner($update_int(S_$130,p_$178,v_$2)))) && ($roots(S_$130) == $roots($update_int(S_$130,p_$178,v_$2)))) && ($heap($update_int(S_$130,p_$178,v_$2)) == $heap(S_$130)[$field(p_$178) := $heap(S_$130)[$field(p_$178)][$base(p_$178) := v_$2]]) ));
	assume (forall  t_$24 : $ctype, p_$67 : $ptr :: ( (($is(p_$67,t_$24) && $is_object_root_ptr(p_$67)) && true) == (($is(p_$67,t_$24) && $is_object_root_ptr(p_$67)) && true) ));
	assume (forall  t_$25 : $ctype, p_$68 : $ptr :: ( ((forall  S_$44_$0 : $state :: {$program_entry_point(S_$44_$0)} ( $program_entry_point(S_$44_$0) ==> ($extent_mutable(S_$44_$0,p_$68) && ($owns(S_$44_$0,p_$68) == $set_empty())) ))) == ((forall  S_$44 : $state :: {$program_entry_point(S_$44)} ( $program_entry_point(S_$44) ==> ($extent_mutable(S_$44,p_$68) && ($owns(S_$44,p_$68) == $set_empty())) ))) ));
	assume (forall  sz_$17 : Integer, T_$4 : $ctype, p_$69 : $ptr :: ( ((forall  S_$45_$0 : $state :: {$program_entry_point(S_$45_$0)} ( $program_entry_point(S_$45_$0) ==> $is_mutable_array(S_$45_$0,p_$69,T_$4,sz_$17) ))) == ((forall  S_$45 : $state :: {$program_entry_point(S_$45)} ( $program_entry_point(S_$45) ==> $is_mutable_array(S_$45,p_$69,T_$4,sz_$17) ))) ));
	assume (forall  t_$26 : $ctype :: ( ((((($sizeof(t_$26) == 1) && ($type_branch(t_$26) == $ctype_flat)) && $is_primitive(t_$26)) && $is_math_type(t_$26)) && $is_datatype(t_$26)) == ((((($sizeof(t_$26) == 1) && ($type_branch(t_$26) == $ctype_flat)) && $is_primitive(t_$26)) && $is_math_type(t_$26)) && $is_datatype(t_$26)) ));
	assume (forall  s_$11 : $ptrset, p_$70 : $ptr :: ( s_$11[p_$70] == s_$11[p_$70] ));
	assume (forall  s_$12 : $ptrset, p_$71 : $ptr :: ( s_$12[p_$71] == s_$12[p_$71] ));
	assume $set_empty() == lambda#14();
	assume (forall  p_$179 : $ptr :: {$set_singleton(p_$179)} ( $set_singleton(p_$179) == lambda#15(p_$179) ));
	assume (forall  A_$1 : $ptrset, B_$1 : $ptrset :: {$set_union(A_$1,B_$1)} ( $set_union(A_$1,B_$1) == lambda#17(A_$1,B_$1) ));
	assume (forall  A_$2 : $ptrset, B_$2 : $ptrset :: {$set_difference(A_$2,B_$2)} ( $set_difference(A_$2,B_$2) == lambda#18(A_$2,B_$2) ));
	assume (forall  e : $ptr, S_$46 : $ptrset :: ( $set_union(S_$46,$set_singleton(e)) == $set_union(S_$46,$set_singleton(e)) ));
	assume (forall  e_$0 : $ptr, S_$47 : $ptrset :: ( $set_difference(S_$47,$set_singleton(e_$0)) == $set_difference(S_$47,$set_singleton(e_$0)) ));
	assume (forall  #a : $ptrset, #b : $ptrset :: {$set_eq(#a,#b)} ( ((forall  #o_$0 : $ptr :: {$dont_instantiate(#o_$0)} ( #a[#o_$0] <==> #b[#o_$0] ))) ==> $set_eq(#a,#b) ));
	assume (forall  #a_$0 : $ptrset, #b_$0 : $ptrset :: {$set_eq(#a_$0,#b_$0)} ( $set_eq(#a_$0,#b_$0) ==> (#a_$0 == #b_$0) ));
	assume $set_cardinality($set_empty()) == 0;
	assume (forall  p_$181 : $ptr :: {$set_singleton(p_$181)} ( $set_cardinality($set_singleton(p_$181)) == 1 ));
	assume (forall  #o_$1 : $ptr :: {$set_universe()[#o_$1]} ( $set_universe()[#o_$1] ));
	assume (forall  p_$182 : $ptr, s1_$2 : $ptrset, s2_$1 : $ptrset :: {$set_disjoint(s1_$2,s2_$1),s1_$2[p_$182]} ( ($set_disjoint(s1_$2,s2_$1) && s1_$2[p_$182]) ==> ($id_set_disjoint(p_$182,s1_$2,s2_$1) == 1) ));
	assume (forall  p_$183 : $ptr, s1_$3 : $ptrset, s2_$2 : $ptrset :: {$set_disjoint(s1_$3,s2_$2),s2_$2[p_$183]} ( ($set_disjoint(s1_$3,s2_$2) && s2_$2[p_$183]) ==> ($id_set_disjoint(p_$183,s1_$3,s2_$2) == 2) ));
	assume (forall  s1_$4 : $ptrset, s2_$3 : $ptrset :: {$set_disjoint(s1_$4,s2_$3)} ( ((forall  p_$184 : $ptr :: {$dont_instantiate(p_$184)} ( (s1_$4[p_$184] ==> (!s2_$3[p_$184])) && (s2_$3[p_$184] ==> (!s1_$4[p_$184])) ))) ==> $set_disjoint(s1_$4,s2_$3) ));
	assume (forall  p_$185 : $ptr, s_$20 : $ptrset :: {s_$20[p_$185]} ( s_$20[p_$185] ==> $set_in_pos(p_$185,s_$20) ));
	assume (forall  p_$186 : $ptr, s_$21 : $ptrset :: {$set_in0(p_$186,s_$21)} ( $set_in0(p_$186,s_$21) <==> s_$21[p_$186] ));
	assume (forall  no : Integer, t_$52 : $ctype :: {$get_fnptr(no,t_$52)} ( $get_fnptr(no,t_$52) == $ptr($f_root(t_$52),$get_fnptr_ref(no)) ));
	assume (forall  no_$1 : Integer, t_$53 : $ctype :: {$get_fnptr(no_$1,t_$53)} ( $is_fnptr_type(t_$53) ==> ($in_range_phys_ptr($get_fnptr(no_$1,t_$53)) && $valid_fnptr($get_fnptr(no_$1,t_$53))) ));
	assume (forall  max : Integer, val : Integer, min : Integer :: ( ((min <= val) && (val <= max)) == ((min <= val) && (val <= max)) ));
	assume (forall  v_$0 : Boolean :: ( (if v_$0 then 1 else 0) == (if v_$0 then 1 else 0) ));
	assume (forall  x : Integer :: ( (!(x == 0)) == (!(x == 0)) ));
	assume $min.i1 == (0 - 128);
	assume $max.i1 == 127;
	assume $min.i2 == (0 - 32768);
	assume $max.i2 == 32767;
	assume $min.i4 == (0 - (65536 * 32768));
	assume $max.i4 == ((65536 * 32768) - 1);
	assume $min.i8 == (0 - (((65536 * 65536) * 65536) * 32768));
	assume $max.i8 == ((((65536 * 65536) * 65536) * 32768) - 1);
	assume $max.u1 == 255;
	assume $max.u2 == 65535;
	assume $max.u4 == ((65536 * 65536) - 1);
	assume $max.u8 == ((((65536 * 65536) * 65536) * 65536) - 1);
	assume (forall  x_$0 : Integer :: ( (($min.i1 <= x_$0) && (x_$0 <= $max.i1)) == (($min.i1 <= x_$0) && (x_$0 <= $max.i1)) ));
	assume (forall  x_$1 : Integer :: ( (($min.i2 <= x_$1) && (x_$1 <= $max.i2)) == (($min.i2 <= x_$1) && (x_$1 <= $max.i2)) ));
	assume (forall  x_$2 : Integer :: ( (($min.i4 <= x_$2) && (x_$2 <= $max.i4)) == (($min.i4 <= x_$2) && (x_$2 <= $max.i4)) ));
	assume (forall  x_$3 : Integer :: ( (($min.i8 <= x_$3) && (x_$3 <= $max.i8)) == (($min.i8 <= x_$3) && (x_$3 <= $max.i8)) ));
	assume (forall  x_$4 : Integer :: ( ((0 <= x_$4) && (x_$4 <= $max.u1)) == ((0 <= x_$4) && (x_$4 <= $max.u1)) ));
	assume (forall  x_$5 : Integer :: ( ((0 <= x_$5) && (x_$5 <= $max.u2)) == ((0 <= x_$5) && (x_$5 <= $max.u2)) ));
	assume (forall  x_$6 : Integer :: ( ((0 <= x_$6) && (x_$6 <= $max.u4)) == ((0 <= x_$6) && (x_$6 <= $max.u4)) ));
	assume (forall  x_$7 : Integer :: ( ((0 <= x_$7) && (x_$7 <= $max.u8)) == ((0 <= x_$7) && (x_$7 <= $max.u8)) ));
	assume (forall  p_$72 : $ptr :: ( ((0 <= $addr(p_$72)) && ($addr(p_$72) <= $max.u8)) == ((0 <= $addr(p_$72)) && ($addr(p_$72) <= $max.u8)) ));
	assume (forall  y : Integer, x_$8 : Integer :: ( ((!(y == (0 - 1))) || (!(x_$8 == $min.i1))) == ((!(y == (0 - 1))) || (!(x_$8 == $min.i1))) ));
	assume (forall  y_$0 : Integer, x_$9 : Integer :: ( ((!(y_$0 == (0 - 1))) || (!(x_$9 == $min.i2))) == ((!(y_$0 == (0 - 1))) || (!(x_$9 == $min.i2))) ));
	assume (forall  y_$1 : Integer, x_$10 : Integer :: ( ((!(y_$1 == (0 - 1))) || (!(x_$10 == $min.i4))) == ((!(y_$1 == (0 - 1))) || (!(x_$10 == $min.i4))) ));
	assume (forall  y_$2 : Integer, x_$11 : Integer :: ( ((!(y_$2 == (0 - 1))) || (!(x_$11 == $min.i8))) == ((!(y_$2 == (0 - 1))) || (!(x_$11 == $min.i8))) ));
	assume (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((($_pow2(0) == 1) && ($_pow2(1) == 2)) && ($_pow2(2) == 4)) && ($_pow2(3) == 8)) && ($_pow2(4) == 16)) && ($_pow2(5) == 32)) && ($_pow2(6) == 64)) && ($_pow2(7) == 128)) && ($_pow2(8) == 256)) && ($_pow2(9) == 512)) && ($_pow2(10) == 1024)) && ($_pow2(11) == 2048)) && ($_pow2(12) == 4096)) && ($_pow2(13) == 8192)) && ($_pow2(14) == 16384)) && ($_pow2(15) == 32768)) && ($_pow2(16) == 65536)) && ($_pow2(17) == 131072)) && ($_pow2(18) == 262144)) && ($_pow2(19) == 524288)) && ($_pow2(20) == 1048576)) && ($_pow2(21) == 2097152)) && ($_pow2(22) == 4194304)) && ($_pow2(23) == 8388608)) && ($_pow2(24) == 16777216)) && ($_pow2(25) == 33554432)) && ($_pow2(26) == 67108864)) && ($_pow2(27) == 134217728)) && ($_pow2(28) == 268435456)) && ($_pow2(29) == 536870912)) && ($_pow2(30) == 1073741824)) && ($_pow2(31) == 2147483648)) && ($_pow2(32) == 4294967296)) && ($_pow2(33) == 8589934592)) && ($_pow2(34) == 17179869184)) && ($_pow2(35) == 34359738368)) && ($_pow2(36) == 68719476736)) && ($_pow2(37) == 137438953472)) && ($_pow2(38) == 274877906944)) && ($_pow2(39) == 549755813888)) && ($_pow2(40) == 1099511627776)) && ($_pow2(41) == 2199023255552)) && ($_pow2(42) == 4398046511104)) && ($_pow2(43) == 8796093022208)) && ($_pow2(44) == 17592186044416)) && ($_pow2(45) == 35184372088832)) && ($_pow2(46) == 70368744177664)) && ($_pow2(47) == 140737488355328)) && ($_pow2(48) == 281474976710656)) && ($_pow2(49) == 562949953421312)) && ($_pow2(50) == 1125899906842624)) && ($_pow2(51) == 2251799813685248)) && ($_pow2(52) == 4503599627370496)) && ($_pow2(53) == 9007199254740992)) && ($_pow2(54) == 18014398509481984)) && ($_pow2(55) == 36028797018963968)) && ($_pow2(56) == 72057594037927936)) && ($_pow2(57) == 144115188075855872)) && ($_pow2(58) == 288230376151711744)) && ($_pow2(59) == 576460752303423488)) && ($_pow2(60) == 1152921504606846976)) && ($_pow2(61) == 2305843009213693952)) && ($_pow2(62) == 4611686018427387904)) && ($_pow2(63) == 9223372036854775808)) && ($_pow2(64) == 18446744073709551616);
	assume $unchecked(^^u4,0 - 1) == $max.u4;
	assume $unchecked(^^u4,$max.u4 + 1) == 0;
	assume $unchecked(^^u8,0 - 1) == $max.u8;
	assume $unchecked(^^u8,$max.u8 + 1) == 0;
	assume (forall  bits : Integer, v_$3 : Integer :: {$in_range_ubits(bits,v_$3)} ( $in_range_ubits(bits,v_$3) <==> ((0 <= v_$3) && (v_$3 <= ($_pow2(bits) - 1))) ));
	assume (forall  bits_$0 : Integer, v_$4 : Integer :: {$unchecked_sbits(bits_$0,v_$4)} ( $in_range_sbits(bits_$0,$unchecked_sbits(bits_$0,v_$4)) && ($in_range_sbits(bits_$0,v_$4) ==> ($unchecked_sbits(bits_$0,v_$4) == v_$4)) ));
	assume (forall  bits_$1 : Integer, v_$5 : Integer :: {$in_range_sbits(bits_$1,v_$5)} ( $in_range_sbits(bits_$1,v_$5) <==> (((0 - $_pow2(bits_$1 - 1)) <= v_$5) && (v_$5 <= ($_pow2(bits_$1 - 1) - 1))) ));
	assume (forall  bits_$2 : Integer, v_$6 : Integer :: {$unchecked_ubits(bits_$2,v_$6)} ( $in_range_ubits(bits_$2,$unchecked_ubits(bits_$2,v_$6)) && ($in_range_ubits(bits_$2,v_$6) ==> ($unchecked_ubits(bits_$2,v_$6) == v_$6)) ));
	assume (forall  t_$54 : $ctype, x_$14 : Integer, y_$3 : Integer :: {$unchk_add(t_$54,x_$14,y_$3)} ( $unchk_add(t_$54,x_$14,y_$3) == $unchecked(t_$54,x_$14 + y_$3) ));
	assume (forall  x_$19 : Integer, y_$8 : Integer :: {$unchk_add(^^u8,x_$19,y_$8)} ( ((((0 <= x_$19) && (x_$19 <= $max.u8)) && ((0 <= y_$8) && (y_$8 <= $max.u8))) && ((x_$19 + y_$8) > $max.u8)) ==> ($unchk_add(^^u8,x_$19,y_$8) == (((x_$19 + y_$8) - $max.u8) - 1)) ));
	assume (forall  x_$20 : Integer, y_$9 : Integer :: {$unchk_add(^^u4,x_$20,y_$9)} ( ((((0 <= x_$20) && (x_$20 <= $max.u4)) && ((0 <= y_$9) && (y_$9 <= $max.u4))) && ((x_$20 + y_$9) > $max.u8)) ==> ($unchk_add(^^u4,x_$20,y_$9) == (((x_$20 + y_$9) - $max.u4) - 1)) ));
	assume (forall  t_$59 : $ctype, x_$21 : Integer, y_$10 : Integer :: {$_shl(t_$59,x_$21,y_$10)} ( $_shl(t_$59,x_$21,y_$10) == $unchecked(t_$59,x_$21 * $_pow2(y_$10)) ));
	assume (forall  x_$22 : Integer, y_$11 : Integer :: {$_shr(x_$22,y_$11)} ( $_shr(x_$22,y_$11) == (x_$22 div $_pow2(y_$11)) ));
	assume (forall  x_$23 : Integer, from : Integer, to : Integer, xs : Integer, val_$0 : Integer :: {$bv_update(x_$23,xs,from,to,val_$0)} ( (((0 <= from) && (from < to)) && (to <= xs)) ==> (((0 <= val_$0) && (val_$0 < $_pow2(to - from))) ==> ((0 <= $bv_update(x_$23,xs,from,to,val_$0)) && ($bv_update(x_$23,xs,from,to,val_$0) < $_pow2(xs)))) ));
	assume (forall  from_$0 : Integer, to_$0 : Integer, xs_$0 : Integer :: {$bv_update(0,xs_$0,from_$0,to_$0,0)} ( (((0 <= from_$0) && (from_$0 < to_$0)) && (to_$0 <= xs_$0)) ==> ($bv_update(0,xs_$0,from_$0,to_$0,0) == 0) ));
	assume (forall  from_$1 : Integer, to_$1 : Integer, val_$1 : Integer, x_$24 : Integer, xs_$1 : Integer :: {$bv_extract_signed($bv_update(x_$24,xs_$1,from_$1,to_$1,val_$1),xs_$1,from_$1,to_$1)} ( (((0 <= from_$1) && (from_$1 < to_$1)) && (to_$1 <= xs_$1)) ==> ((((0 - $_pow2((to_$1 - from_$1) - 1)) <= val_$1) && (val_$1 < $_pow2((to_$1 - from_$1) - 1))) ==> ($bv_extract_signed($bv_update(x_$24,xs_$1,from_$1,to_$1,val_$1),xs_$1,from_$1,to_$1) == val_$1)) ));
	assume (forall  from_$2 : Integer, to_$2 : Integer, val_$2 : Integer, x_$25 : Integer, xs_$2 : Integer :: {$bv_extract_unsigned($bv_update(x_$25,xs_$2,from_$2,to_$2,val_$2),xs_$2,from_$2,to_$2)} ( (((0 <= from_$2) && (from_$2 < to_$2)) && (to_$2 <= xs_$2)) ==> (((0 <= val_$2) && (val_$2 < $_pow2(to_$2 - from_$2))) ==> ($bv_extract_unsigned($bv_update(x_$25,xs_$2,from_$2,to_$2,val_$2),xs_$2,from_$2,to_$2) == val_$2)) ));
	assume (forall  from_$3 : Integer, to_$3 : Integer, x_$26 : Integer, xs_$3 : Integer :: {$bv_extract_signed(x_$26,xs_$3,from_$3,to_$3)} ( (((0 <= from_$3) && (from_$3 < to_$3)) && (to_$3 <= xs_$3)) ==> (((0 - $_pow2((to_$3 - from_$3) - 1)) <= $bv_extract_signed(x_$26,xs_$3,from_$3,to_$3)) && ($bv_extract_signed(x_$26,xs_$3,from_$3,to_$3) <= ($_pow2((to_$3 - from_$3) - 1) - 1))) ));
	assume (forall  from_$4 : Integer, to_$4 : Integer, x_$27 : Integer, xs_$4 : Integer :: {$bv_extract_unsigned(x_$27,xs_$4,from_$4,to_$4)} ( (((0 <= from_$4) && (from_$4 < to_$4)) && (to_$4 <= xs_$4)) ==> ((0 <= $bv_extract_unsigned(x_$27,xs_$4,from_$4,to_$4)) && ($bv_extract_unsigned(x_$27,xs_$4,from_$4,to_$4) <= ($_pow2(to_$4 - from_$4) - 1))) ));
	assume (forall  from_$5 : Integer, to_$5 : Integer, x_$28 : Integer, y_$12 : Integer :: {$bv_extract_unsigned(x_$28,32,from_$5,to_$5),$_and(^^u4,x_$28,y_$12)} ( (((0 <= from_$5) && (from_$5 < to_$5)) && (to_$5 <= 32)) ==> ($bv_extract_unsigned(x_$28,32,from_$5,to_$5) == $_shr($_and(^^u4,x_$28,$_shl(^^u4,$_shl(^^u4,1,to_$5 - from_$5) - 1,from_$5)),from_$5)) ));
	assume (forall  from_$6 : Integer, to_$6 : Integer, x_$29 : Integer, y_$13 : Integer :: {$bv_extract_unsigned(x_$29,64,from_$6,to_$6),$_and(^^u8,x_$29,y_$13)} ( (((0 <= from_$6) && (from_$6 < to_$6)) && (to_$6 <= 64)) ==> ($bv_extract_unsigned(x_$29,64,from_$6,to_$6) == $_shr($_and(^^u8,x_$29,$_shl(^^u4,$_shl(^^u8,1,to_$6 - from_$6) - 1,from_$6)),from_$6)) ));
	assume (forall  from_$7 : Integer, to_$7 : Integer, val_$3 : Integer, x_$30 : Integer, xs_$5 : Integer, from2 : Integer, to2 : Integer :: {$bv_extract_signed($bv_update(x_$30,xs_$5,from_$7,to_$7,val_$3),xs_$5,from2,to2)} ( (((0 <= from_$7) && (from_$7 < to_$7)) && (to_$7 <= xs_$5)) ==> ((((0 <= from2) && (from2 < to2)) && (to2 <= xs_$5)) ==> (((to2 <= from_$7) || (to_$7 <= from2)) ==> ($bv_extract_signed($bv_update(x_$30,xs_$5,from_$7,to_$7,val_$3),xs_$5,from2,to2) == $bv_extract_signed(x_$30,xs_$5,from2,to2)))) ));
	assume (forall  from_$8 : Integer, to_$8 : Integer, val_$4 : Integer, x_$31 : Integer, xs_$6 : Integer, from2_$0 : Integer, to2_$0 : Integer :: {$bv_extract_unsigned($bv_update(x_$31,xs_$6,from_$8,to_$8,val_$4),xs_$6,from2_$0,to2_$0)} ( (((0 <= from_$8) && (from_$8 < to_$8)) && (to_$8 <= xs_$6)) ==> ((((0 <= from2_$0) && (from2_$0 < to2_$0)) && (to2_$0 <= xs_$6)) ==> (((to2_$0 <= from_$8) || (to_$8 <= from2_$0)) ==> ($bv_extract_unsigned($bv_update(x_$31,xs_$6,from_$8,to_$8,val_$4),xs_$6,from2_$0,to2_$0) == $bv_extract_unsigned(x_$31,xs_$6,from2_$0,to2_$0)))) ));
	assume (forall  from_$9 : Integer, to_$9 : Integer, xs_$7 : Integer :: {$bv_extract_signed(0,xs_$7,from_$9,to_$9)} ( (((0 <= from_$9) && (from_$9 < to_$9)) && (to_$9 <= xs_$7)) ==> ($bv_extract_signed(0,xs_$7,from_$9,to_$9) == 0) ));
	assume (forall  from_$10 : Integer, to_$10 : Integer, xs_$8 : Integer :: {$bv_extract_unsigned(0,xs_$8,from_$10,to_$10)} ( (((0 <= from_$10) && (from_$10 < to_$10)) && (to_$10 <= xs_$8)) ==> ($bv_extract_unsigned(0,xs_$8,from_$10,to_$10) == 0) ));
	assume (forall  from_$11 : Integer, to_$11 : Integer, val_$5 : Integer, xs_$9 : Integer :: {$bv_extract_unsigned(val_$5,xs_$9,from_$11,to_$11)} ( ((((0 <= from_$11) && (from_$11 < to_$11)) && (to_$11 <= xs_$9)) && (0 <= val_$5)) ==> ($bv_extract_unsigned(val_$5,xs_$9,from_$11,to_$11) == ((val_$5 div $_pow2(from_$11)) mod $_pow2(to_$11 - from_$11))) ));
	assume (forall  from_$12 : Integer, to_$12 : Integer, val_$6 : Integer, xs_$10 : Integer :: {$bv_extract_signed(val_$6,xs_$10,from_$12,to_$12)} ( (((((0 <= from_$12) && (from_$12 < to_$12)) && (to_$12 <= xs_$10)) && (0 <= val_$6)) && (((val_$6 div $_pow2(from_$12)) mod $_pow2(to_$12 - from_$12)) < $_pow2((to_$12 - from_$12) - 1))) ==> ($bv_extract_signed(val_$6,xs_$10,from_$12,to_$12) == ((val_$6 div $_pow2(from_$12)) mod $_pow2(to_$12 - from_$12))) ));
	assume (forall  from_$13 : Integer, to_$13 : Integer, val_$7 : Integer, xs_$11 : Integer :: {$bv_extract_signed(val_$7,xs_$11,from_$13,to_$13)} ( (((((0 <= from_$13) && (from_$13 < to_$13)) && (to_$13 <= xs_$11)) && (0 <= val_$7)) && (((val_$7 div $_pow2(from_$13)) mod $_pow2(to_$13 - from_$13)) >= $_pow2((to_$13 - from_$13) - 1))) ==> ($bv_extract_signed(val_$7,xs_$11,from_$13,to_$13) == ($_pow2((to_$13 - from_$13) - 1) - ((val_$7 div $_pow2(from_$13)) mod $_pow2(to_$13 - from_$13)))) ));
	assume (forall  val_$8 : Integer :: {$in_range_t(^^i1,val_$8)} ( $in_range_t(^^i1,val_$8) <==> (($min.i1 <= val_$8) && (val_$8 <= $max.i1)) ));
	assume (forall  val_$9 : Integer :: {$in_range_t(^^i2,val_$9)} ( $in_range_t(^^i2,val_$9) <==> (($min.i2 <= val_$9) && (val_$9 <= $max.i2)) ));
	assume (forall  val_$10 : Integer :: {$in_range_t(^^i4,val_$10)} ( $in_range_t(^^i4,val_$10) <==> (($min.i4 <= val_$10) && (val_$10 <= $max.i4)) ));
	assume (forall  val_$11 : Integer :: {$in_range_t(^^i8,val_$11)} ( $in_range_t(^^i8,val_$11) <==> (($min.i8 <= val_$11) && (val_$11 <= $max.i8)) ));
	assume (forall  val_$12 : Integer :: {$in_range_t(^^u1,val_$12)} ( $in_range_t(^^u1,val_$12) <==> ((0 <= val_$12) && (val_$12 <= $max.u1)) ));
	assume (forall  val_$13 : Integer :: {$in_range_t(^^u2,val_$13)} ( $in_range_t(^^u2,val_$13) <==> ((0 <= val_$13) && (val_$13 <= $max.u2)) ));
	assume (forall  val_$14 : Integer :: {$in_range_t(^^u4,val_$14)} ( $in_range_t(^^u4,val_$14) <==> ((0 <= val_$14) && (val_$14 <= $max.u4)) ));
	assume (forall  val_$15 : Integer :: {$in_range_t(^^u8,val_$15)} ( $in_range_t(^^u8,val_$15) <==> ((0 <= val_$15) && (val_$15 <= $max.u8)) ));
	assume (forall  val_$16 : Integer :: {$in_range_t(^^mathint,val_$16)} ( $in_range_t(^^mathint,val_$16) ));
	assume (forall  t_$60 : $ctype, val_$17 : Integer :: {$unchecked(t_$60,val_$17)} ( $in_range_t(t_$60,val_$17) ==> ($unchecked(t_$60,val_$17) == val_$17) ));
	assume (forall  t_$61 : $ctype, val_$18 : Integer :: {$unchecked(t_$61,val_$18)} ( $in_range_t(t_$61,$unchecked(t_$61,val_$18)) ));
	assume (forall  val_$19 : Integer :: {$unchecked(^^u1,$unchecked(^^i1,val_$19))} ( ((0 <= val_$19) && (val_$19 <= $max.u1)) ==> ($unchecked(^^u1,$unchecked(^^i1,val_$19)) == val_$19) ));
	assume (forall  val_$20 : Integer :: {$unchecked(^^u2,$unchecked(^^i2,val_$20))} ( ((0 <= val_$20) && (val_$20 <= $max.u2)) ==> ($unchecked(^^u2,$unchecked(^^i2,val_$20)) == val_$20) ));
	assume (forall  val_$21 : Integer :: {$unchecked(^^u4,$unchecked(^^i4,val_$21))} ( ((0 <= val_$21) && (val_$21 <= $max.u4)) ==> ($unchecked(^^u4,$unchecked(^^i4,val_$21)) == val_$21) ));
	assume (forall  val_$22 : Integer :: {$unchecked(^^u8,$unchecked(^^i8,val_$22))} ( ((0 <= val_$22) && (val_$22 <= $max.u8)) ==> ($unchecked(^^u8,$unchecked(^^i8,val_$22)) == val_$22) ));
	assume (forall  val_$23 : Integer :: {$unchecked(^^i1,$unchecked(^^u1,val_$23))} ( (($min.i1 <= val_$23) && (val_$23 <= $max.i1)) ==> ($unchecked(^^i1,$unchecked(^^u1,val_$23)) == val_$23) ));
	assume (forall  val_$24 : Integer :: {$unchecked(^^i2,$unchecked(^^u2,val_$24))} ( (($min.i2 <= val_$24) && (val_$24 <= $max.i2)) ==> ($unchecked(^^i2,$unchecked(^^u2,val_$24)) == val_$24) ));
	assume (forall  val_$25 : Integer :: {$unchecked(^^i4,$unchecked(^^u4,val_$25))} ( (($min.i4 <= val_$25) && (val_$25 <= $max.i4)) ==> ($unchecked(^^i4,$unchecked(^^u4,val_$25)) == val_$25) ));
	assume (forall  val_$26 : Integer :: {$unchecked(^^i8,$unchecked(^^u8,val_$26))} ( (($min.i8 <= val_$26) && (val_$26 <= $max.i8)) ==> ($unchecked(^^i8,$unchecked(^^u8,val_$26)) == val_$26) ));
	assume (forall  t_$62 : $ctype, x_$32 : Integer, y_$14 : Integer, z : Integer :: {x_$32 mod $_pow2(y_$14),$_and(t_$62,x_$32,z)} ( (($in_range_t(t_$62,x_$32) && $in_range_t(t_$62,$_pow2(y_$14) - 1)) && (x_$32 >= 0)) ==> ((x_$32 mod $_pow2(y_$14)) == $_and(t_$62,x_$32,$_pow2(y_$14) - 1)) ));
	assume (forall  i_$16 : Integer, j_$1 : Integer :: {i_$16 div j_$1} ( ((0 <= i_$16) && (0 < j_$1)) ==> ((i_$16 div j_$1) <= i_$16) ));
	assume (forall  i_$17 : Integer, j_$2 : Integer :: {i_$17 div j_$2} ( ((i_$17 > 0) && (j_$2 > 0)) ==> (((i_$17 - j_$2) < ((i_$17 div j_$2) * j_$2)) && (((i_$17 div j_$2) * j_$2) <= i_$17)) ));
	assume (forall  i_$18 : Integer :: {i_$18 div i_$18} ( (!(i_$18 == 0)) ==> ((i_$18 div i_$18) == 1) ));
	assume (forall  i_$19 : Integer :: {0 div i_$19} ( (!(i_$19 == 0)) ==> ((0 div i_$19) == 0) ));
	assume (forall  x_$33 : Integer, y_$15 : Integer :: {x_$33 mod y_$15} {x_$33 div y_$15} ( (x_$33 mod y_$15) == (x_$33 - ((x_$33 div y_$15) * y_$15)) ));
	assume (forall  x_$34 : Integer, y_$16 : Integer :: {x_$34 mod y_$16} ( ((0 <= x_$34) && (0 < y_$16)) ==> ((0 <= (x_$34 mod y_$16)) && ((x_$34 mod y_$16) < y_$16)) ));
	assume (forall  x_$35 : Integer, y_$17 : Integer :: {x_$35 mod y_$17} ( ((0 <= x_$35) && (y_$17 < 0)) ==> ((0 <= (x_$35 mod y_$17)) && ((x_$35 mod y_$17) < (0 - y_$17))) ));
	assume (forall  x_$36 : Integer, y_$18 : Integer :: {x_$36 mod y_$18} ( ((x_$36 <= 0) && (0 < y_$18)) ==> (((0 - y_$18) < (x_$36 mod y_$18)) && ((x_$36 mod y_$18) <= 0)) ));
	assume (forall  x_$37 : Integer, y_$19 : Integer :: {x_$37 mod y_$19} ( ((x_$37 <= 0) && (y_$19 < 0)) ==> ((y_$19 < (x_$37 mod y_$19)) && ((x_$37 mod y_$19) <= 0)) ));
	assume (forall  t_$63 : $ctype, x_$38 : Integer, y_$20 : Integer :: {$_and(t_$63,x_$38,y_$20)} ( ((0 <= x_$38) && $in_range_t(t_$63,x_$38)) ==> ((0 <= $_and(t_$63,x_$38,y_$20)) && ($_and(t_$63,x_$38,y_$20) <= x_$38)) ));
	assume (forall  t_$64 : $ctype, x_$39 : Integer, y_$21 : Integer :: {$_and(t_$64,x_$39,y_$21)} ( ((((0 <= x_$39) && (0 <= y_$21)) && $in_range_t(t_$64,x_$39)) && $in_range_t(t_$64,y_$21)) ==> (($_and(t_$64,x_$39,y_$21) <= x_$39) && ($_and(t_$64,x_$39,y_$21) <= y_$21)) ));
	assume (forall  t_$65 : $ctype, x_$40 : Integer, y_$22 : Integer :: {$_or(t_$65,x_$40,y_$22)} ( ((((0 <= x_$40) && (0 <= y_$22)) && $in_range_t(t_$65,x_$40)) && $in_range_t(t_$65,y_$22)) ==> ((0 <= $_or(t_$65,x_$40,y_$22)) && ($_or(t_$65,x_$40,y_$22) <= (x_$40 + y_$22))) ));
	assume (forall  t_$66 : $ctype, x_$41 : Integer, y_$23 : Integer :: {$_or(t_$66,x_$41,y_$23)} ( ((((0 <= x_$41) && (0 <= y_$23)) && $in_range_t(t_$66,x_$41)) && $in_range_t(t_$66,y_$23)) ==> ((x_$41 <= $_or(t_$66,x_$41,y_$23)) && (y_$23 <= $_or(t_$66,x_$41,y_$23))) ));
	assume (forall  t_$67 : $ctype, x_$42 : Integer, y_$24 : Integer, z_$0 : Integer :: {$_or(t_$67,x_$42,y_$24),$_pow2(z_$0)} ( ((((((((0 <= x_$42) && (0 <= y_$24)) && (0 <= z_$0)) && (z_$0 < 64)) && (x_$42 < $_pow2(z_$0))) && (y_$24 < $_pow2(z_$0))) && $in_range_t(t_$67,x_$42)) && $in_range_t(t_$67,y_$24)) ==> ($_or(t_$67,x_$42,y_$24) < $_pow2(z_$0)) ));
	assume (forall  t_$68 : $ctype, x_$43 : Integer, y_$25 : Integer :: {$_or(t_$68,x_$43,y_$25)} ( (((0 <= x_$43) && (x_$43 <= $max.u1)) && ((0 <= y_$25) && (y_$25 <= $max.u1))) ==> ((0 <= $_or(t_$68,x_$43,y_$25)) && ($_or(t_$68,x_$43,y_$25) <= $max.u1)) ));
	assume (forall  t_$69 : $ctype, x_$44 : Integer, y_$26 : Integer :: {$_or(t_$69,x_$44,y_$26)} ( (((0 <= x_$44) && (x_$44 <= $max.u2)) && ((0 <= y_$26) && (y_$26 <= $max.u2))) ==> ((0 <= $_or(t_$69,x_$44,y_$26)) && ($_or(t_$69,x_$44,y_$26) <= $max.u2)) ));
	assume (forall  t_$70 : $ctype, x_$45 : Integer, y_$27 : Integer :: {$_or(t_$70,x_$45,y_$27)} ( (((0 <= x_$45) && (x_$45 <= $max.u4)) && ((0 <= y_$27) && (y_$27 <= $max.u4))) ==> ((0 <= $_or(t_$70,x_$45,y_$27)) && ($_or(t_$70,x_$45,y_$27) <= $max.u4)) ));
	assume (forall  t_$71 : $ctype, x_$46 : Integer, y_$28 : Integer :: {$_or(t_$71,x_$46,y_$28)} ( (((0 <= x_$46) && (x_$46 <= $max.u8)) && ((0 <= y_$28) && (y_$28 <= $max.u8))) ==> ((0 <= $_or(t_$71,x_$46,y_$28)) && ($_or(t_$71,x_$46,y_$28) <= $max.u8)) ));
	assume (forall  t_$72 : $ctype, x_$47 : Integer, y_$29 : Integer :: {$_and(t_$72,x_$47,y_$29)} ( (((0 <= x_$47) && (x_$47 <= $max.u1)) && ((0 <= y_$29) && (y_$29 <= $max.u1))) ==> ((0 <= $_and(t_$72,x_$47,y_$29)) && ($_and(t_$72,x_$47,y_$29) <= $max.u1)) ));
	assume (forall  t_$73 : $ctype, x_$48 : Integer, y_$30 : Integer :: {$_and(t_$73,x_$48,y_$30)} ( (((0 <= x_$48) && (x_$48 <= $max.u2)) && ((0 <= y_$30) && (y_$30 <= $max.u2))) ==> ((0 <= $_and(t_$73,x_$48,y_$30)) && ($_and(t_$73,x_$48,y_$30) <= $max.u2)) ));
	assume (forall  t_$74 : $ctype, x_$49 : Integer, y_$31 : Integer :: {$_and(t_$74,x_$49,y_$31)} ( (((0 <= x_$49) && (x_$49 <= $max.u4)) && ((0 <= y_$31) && (y_$31 <= $max.u4))) ==> ((0 <= $_and(t_$74,x_$49,y_$31)) && ($_and(t_$74,x_$49,y_$31) <= $max.u4)) ));
	assume (forall  t_$75 : $ctype, x_$50 : Integer, y_$32 : Integer :: {$_and(t_$75,x_$50,y_$32)} ( (((0 <= x_$50) && (x_$50 <= $max.u8)) && ((0 <= y_$32) && (y_$32 <= $max.u8))) ==> ((0 <= $_and(t_$75,x_$50,y_$32)) && ($_and(t_$75,x_$50,y_$32) <= $max.u8)) ));
	assume (forall  t_$76 : $ctype, x_$51 : Integer, y_$33 : Integer :: {$_xor(t_$76,x_$51,y_$33)} ( (((0 <= x_$51) && (x_$51 <= $max.u1)) && ((0 <= y_$33) && (y_$33 <= $max.u1))) ==> ((0 <= $_xor(t_$76,x_$51,y_$33)) && ($_xor(t_$76,x_$51,y_$33) <= $max.u1)) ));
	assume (forall  t_$77 : $ctype, x_$52 : Integer, y_$34 : Integer :: {$_xor(t_$77,x_$52,y_$34)} ( (((0 <= x_$52) && (x_$52 <= $max.u2)) && ((0 <= y_$34) && (y_$34 <= $max.u2))) ==> ((0 <= $_xor(t_$77,x_$52,y_$34)) && ($_xor(t_$77,x_$52,y_$34) <= $max.u2)) ));
	assume (forall  t_$78 : $ctype, x_$53 : Integer, y_$35 : Integer :: {$_xor(t_$78,x_$53,y_$35)} ( (((0 <= x_$53) && (x_$53 <= $max.u4)) && ((0 <= y_$35) && (y_$35 <= $max.u4))) ==> ((0 <= $_xor(t_$78,x_$53,y_$35)) && ($_xor(t_$78,x_$53,y_$35) <= $max.u4)) ));
	assume (forall  t_$79 : $ctype, x_$54 : Integer, y_$36 : Integer :: {$_xor(t_$79,x_$54,y_$36)} ( (((0 <= x_$54) && (x_$54 <= $max.u8)) && ((0 <= y_$36) && (y_$36 <= $max.u8))) ==> ((0 <= $_xor(t_$79,x_$54,y_$36)) && ($_xor(t_$79,x_$54,y_$36) <= $max.u8)) ));
	assume (forall  t_$80 : $ctype, x_$55 : Integer :: {$_not(t_$80,x_$55)} ( $in_range_t(t_$80,$_not(t_$80,x_$55)) ));
	assume (forall  t_$81 : $ctype, x_$56 : Integer :: {$_or(t_$81,x_$56,$_not(t_$81,x_$56))} ( $_or(t_$81,x_$56,$_not(t_$81,x_$56)) == $_not(t_$81,0) ));
	assume (forall  t_$82 : $ctype, x_$57 : Integer :: {$_and(t_$82,x_$57,$_not(t_$82,x_$57))} ( $_and(t_$82,x_$57,$_not(t_$82,x_$57)) == 0 ));
	assume (forall  t_$83 : $ctype, x_$58 : Integer :: {$_or(t_$83,x_$58,0)} ( $in_range_t(t_$83,x_$58) ==> ($_or(t_$83,x_$58,0) == x_$58) ));
	assume (forall  t_$84 : $ctype, x_$59 : Integer :: {$_or(t_$84,x_$59,$_not(t_$84,0))} ( $_or(t_$84,x_$59,$_not(t_$84,0)) == $_not(t_$84,0) ));
	assume (forall  t_$85 : $ctype, x_$60 : Integer :: {$_or(t_$85,x_$60,x_$60)} ( $in_range_t(t_$85,x_$60) ==> ($_or(t_$85,x_$60,x_$60) == x_$60) ));
	assume (forall  t_$86 : $ctype, x_$61 : Integer :: {$_and(t_$86,x_$61,0)} ( $_and(t_$86,x_$61,0) == 0 ));
	assume (forall  t_$87 : $ctype, x_$62 : Integer :: {$_and(t_$87,x_$62,$_not(t_$87,0))} ( $in_range_t(t_$87,x_$62) ==> ($_and(t_$87,x_$62,$_not(t_$87,0)) == x_$62) ));
	assume (forall  t_$88 : $ctype, x_$63 : Integer :: {$_and(t_$88,x_$63,x_$63)} ( $in_range_t(t_$88,x_$63) ==> ($_and(t_$88,x_$63,x_$63) == x_$63) ));
	assume (forall  t_$89 : $ctype, x_$64 : Integer, y_$37 : Integer :: {$_and(t_$89,$_or(t_$89,x_$64,y_$37),y_$37)} ( $_and(t_$89,$_or(t_$89,x_$64,y_$37),y_$37) == y_$37 ));
	assume (forall  t_$90 : $ctype, x_$65 : Integer, y_$38 : Integer :: {$_and(t_$90,$_or(t_$90,x_$65,y_$38),x_$65)} ( $_and(t_$90,$_or(t_$90,x_$65,y_$38),x_$65) == x_$65 ));
	assume (forall  t_$91 : $ctype, x_$66 : Integer :: {$_xor(t_$91,x_$66,0)} ( $in_range_t(t_$91,x_$66) ==> ($_xor(t_$91,x_$66,0) == x_$66) ));
	assume (forall  t_$92 : $ctype, x_$67 : Integer :: {$_xor(t_$92,x_$67,x_$67)} ( $_xor(t_$92,x_$67,x_$67) == 0 ));
	assume (forall  t_$93 : $ctype, x_$68 : Integer :: {$_xor(t_$93,x_$68,$_not(t_$93,0))} ( $_xor(t_$93,x_$68,$_not(t_$93,0)) == $_not(t_$93,x_$68) ));
	assume (forall  t_$94 : $ctype, x_$69 : Integer :: {$_not(t_$94,$_not(t_$94,x_$69))} ( $in_range_t(t_$94,x_$69) ==> ($_not(t_$94,$_not(t_$94,x_$69)) == x_$69) ));
	assume (forall  t_$95 : $ctype, x_$70 : Integer, y_$39 : Integer :: {$_or(t_$95,x_$70,y_$39)} ( $_or(t_$95,x_$70,y_$39) == $_or(t_$95,y_$39,x_$70) ));
	assume (forall  t_$96 : $ctype, x_$71 : Integer, y_$40 : Integer :: {$_xor(t_$96,x_$71,y_$40)} ( $_xor(t_$96,x_$71,y_$40) == $_xor(t_$96,y_$40,x_$71) ));
	assume (forall  t_$97 : $ctype, x_$72 : Integer, y_$41 : Integer :: {$_and(t_$97,x_$72,y_$41)} ( $_and(t_$97,x_$72,y_$41) == $_and(t_$97,y_$41,x_$72) ));
	assume (forall  p_$187 : $ptr :: ( $int_to_ptr($ptr_to_int(p_$187)) == p_$187 ));
	assume (forall  p_$189 : $ptrset :: ( $int_to_ptrset($ptrset_to_int(p_$189)) == p_$189 ));
	assume ($arch_ptr_size >= 8) ==> ((forall  k : Integer :: {$u8_to_ptr(k)} ( $addr($u8_to_ptr(k)) == k )));
	assume ($arch_ptr_size >= 8) ==> ((forall  k_$3 : Integer :: {$i8_to_ptr(k_$3)} ( (k_$3 >= 0) ==> ($addr($i8_to_ptr(k_$3)) == k_$3) )));
	assume (forall  k_$4 : Integer :: {$i4_to_ptr(k_$4)} ( (k_$4 >= 0) ==> ($addr($i4_to_ptr(k_$4)) == k_$4) ));
	assume (forall  k_$5 : Integer :: {$i2_to_ptr(k_$5)} ( (k_$5 >= 0) ==> ($addr($i2_to_ptr(k_$5)) == k_$5) ));
	assume (forall  k_$6 : Integer :: {$i1_to_ptr(k_$6)} ( (k_$6 >= 0) ==> ($addr($i1_to_ptr(k_$6)) == k_$6) ));
	assume (forall  p_$190 : $ptr :: {$ptr_to_u8(p_$190)} ( ((0 <= $addr(p_$190)) && ($addr(p_$190) <= $max.u8)) ==> ($ptr_to_u8(p_$190) == $addr(p_$190)) ));
	assume (forall  p_$191 : $ptr :: {$ptr_to_i8(p_$191)} ( (($min.i8 <= $addr(p_$191)) && ($addr(p_$191) <= $max.i8)) ==> ($ptr_to_i8(p_$191) == $addr(p_$191)) ));
	assume (forall  p_$192 : $ptr :: {$ptr_to_u4(p_$192)} ( ((0 <= $addr(p_$192)) && ($addr(p_$192) <= $max.u4)) ==> ($ptr_to_u4(p_$192) == $addr(p_$192)) ));
	assume (forall  p_$193 : $ptr :: {$ptr_to_i4(p_$193)} ( (($min.i4 <= $addr(p_$193)) && ($addr(p_$193) <= $max.i4)) ==> ($ptr_to_i4(p_$193) == $addr(p_$193)) ));
	assume (forall  p_$194 : $ptr :: {$ptr_to_u2(p_$194)} ( ((0 <= $addr(p_$194)) && ($addr(p_$194) <= $max.u2)) ==> ($ptr_to_u2(p_$194) == $addr(p_$194)) ));
	assume (forall  p_$195 : $ptr :: {$ptr_to_i2(p_$195)} ( (($min.i2 <= $addr(p_$195)) && ($addr(p_$195) <= $max.i2)) ==> ($ptr_to_i2(p_$195) == $addr(p_$195)) ));
	assume (forall  p_$196 : $ptr :: {$ptr_to_u1(p_$196)} ( ((0 <= $addr(p_$196)) && ($addr(p_$196) <= $max.u1)) ==> ($ptr_to_u1(p_$196) == $addr(p_$196)) ));
	assume (forall  p_$197 : $ptr :: {$ptr_to_i1(p_$197)} ( (($min.i1 <= $addr(p_$197)) && ($addr(p_$197) <= $max.i1)) ==> ($ptr_to_i1(p_$197) == $addr(p_$197)) ));
	assume (forall  S_$132 : $state, id_$0 : Integer, length : Integer :: {$good_state(S_$132),$get_string_literal(id_$0,length)} ( $good_state(S_$132) ==> ($in_range_phys_ptr($get_string_literal(id_$0,length)) && $is_thread_local_array(S_$132,$get_string_literal(id_$0,length),^^i1,length + 1)) ));
	assume $arch_ptr_size == 8;
	assume $arch_spec_ptr_start == $max.u8;
	assume ((($sizeof(^$#thread_id) == 1) && ($type_branch(^$#thread_id) == $ctype_flat)) && $is_primitive(^$#thread_id)) && $is_math_type(^$#thread_id);
	assume $is_span_sequential(^Node);
	assume (((((($sizeof(^Node) == 40) && ($type_branch(^Node) == $ctype_flat)) && (!$is_primitive(^Node))) && ($is_claimable(^Node) <==> false)) && (if false then $is_volatile_field($f_owns(^Node)) else $is_sequential_field($f_owns(^Node)))) && true) && (!$is_union_type(^Node));
	assume (forall  #s1_$3 : $state, #s2_$1 : $state, #p_$10 : $ptr :: {$inv2(#s1_$3,#s2_$1,#p_$10,^Node)} ( $inv2(#s1_$3,#s2_$1,#p_$10,^Node) <==> $set_eq($owns(#s2_$1,#p_$10),$set_empty()) ));
	assume (forall  p_$198 : $ptr, q_$24 : $ptr, s_$22 : $state :: {$composite_extent(s_$22,p_$198,^Node)[q_$24]} ( $composite_extent(s_$22,p_$198,^Node)[q_$24] <==> (q_$24 == p_$198) ));
	assume (((((((((((((($field_parent_type(Node.red) == ^Node) && ($field_type(Node.red) == ^^bool)) && ($as_field_with_type(Node.red,^^bool) == Node.red)) && ($is_primitive(^^bool) ==> ($as_primitive_field(Node.red) == Node.red))) && ((!$is_primitive(^^bool)) ==> ($as_composite_field(Node.red) == Node.red))) && ($field_arr_root(Node.red) == Node.red)) && true) && ((!false) ==> $is_sequential_field(Node.red))) && (false ==> $is_volatile_field(Node.red))) && true) && ($field_offset(Node.red) == 0)) && $is_phys_field(Node.red)) && ($field_kind(Node.red) == $fk_base)) && ((0 == 0) ==> $has_field_at0(^Node,Node.red))) && true;
	assume (((((((((((((($field_parent_type(Node.key) == ^Node) && ($field_type(Node.key) == ^^i4)) && ($as_field_with_type(Node.key,^^i4) == Node.key)) && ($is_primitive(^^i4) ==> ($as_primitive_field(Node.key) == Node.key))) && ((!$is_primitive(^^i4)) ==> ($as_composite_field(Node.key) == Node.key))) && ($field_arr_root(Node.key) == Node.key)) && true) && ((!false) ==> $is_sequential_field(Node.key))) && (false ==> $is_volatile_field(Node.key))) && true) && ($field_offset(Node.key) == 4)) && $is_phys_field(Node.key)) && ($field_kind(Node.key) == $fk_base)) && ((4 == 0) ==> $has_field_at0(^Node,Node.key))) && true;
	assume (((((((((((((($field_parent_type(Node.value) == ^Node) && ($field_type(Node.value) == ^^i4)) && ($as_field_with_type(Node.value,^^i4) == Node.value)) && ($is_primitive(^^i4) ==> ($as_primitive_field(Node.value) == Node.value))) && ((!$is_primitive(^^i4)) ==> ($as_composite_field(Node.value) == Node.value))) && ($field_arr_root(Node.value) == Node.value)) && true) && ((!false) ==> $is_sequential_field(Node.value))) && (false ==> $is_volatile_field(Node.value))) && true) && ($field_offset(Node.value) == 8)) && $is_phys_field(Node.value)) && ($field_kind(Node.value) == $fk_base)) && ((8 == 0) ==> $has_field_at0(^Node,Node.value))) && true;
	assume (((((((((((((($field_parent_type(Node.left) == ^Node) && ($field_type(Node.left) == $ptr_to(^Node))) && ($as_field_with_type(Node.left,$ptr_to(^Node)) == Node.left)) && ($is_primitive($ptr_to(^Node)) ==> ($as_primitive_field(Node.left) == Node.left))) && ((!$is_primitive($ptr_to(^Node))) ==> ($as_composite_field(Node.left) == Node.left))) && ($field_arr_root(Node.left) == Node.left)) && true) && ((!false) ==> $is_sequential_field(Node.left))) && (false ==> $is_volatile_field(Node.left))) && true) && ($field_offset(Node.left) == 16)) && $is_phys_field(Node.left)) && ($field_kind(Node.left) == $fk_base)) && ((16 == 0) ==> $has_field_at0(^Node,Node.left))) && true;
	assume (((((((((((((($field_parent_type(Node.right) == ^Node) && ($field_type(Node.right) == $ptr_to(^Node))) && ($as_field_with_type(Node.right,$ptr_to(^Node)) == Node.right)) && ($is_primitive($ptr_to(^Node)) ==> ($as_primitive_field(Node.right) == Node.right))) && ((!$is_primitive($ptr_to(^Node))) ==> ($as_composite_field(Node.right) == Node.right))) && ($field_arr_root(Node.right) == Node.right)) && true) && ((!false) ==> $is_sequential_field(Node.right))) && (false ==> $is_volatile_field(Node.right))) && true) && ($field_offset(Node.right) == 24)) && $is_phys_field(Node.right)) && ($field_kind(Node.right) == $fk_base)) && ((24 == 0) ==> $has_field_at0(^Node,Node.right))) && true;
	assume (((((((((((((($field_parent_type(Node.parent) == ^Node) && ($field_type(Node.parent) == $ptr_to(^Node))) && ($as_field_with_type(Node.parent,$ptr_to(^Node)) == Node.parent)) && ($is_primitive($ptr_to(^Node)) ==> ($as_primitive_field(Node.parent) == Node.parent))) && ((!$is_primitive($ptr_to(^Node))) ==> ($as_composite_field(Node.parent) == Node.parent))) && ($field_arr_root(Node.parent) == Node.parent)) && true) && ((!false) ==> $is_sequential_field(Node.parent))) && (false ==> $is_volatile_field(Node.parent))) && true) && ($field_offset(Node.parent) == 32)) && $is_phys_field(Node.parent)) && ($field_kind(Node.parent) == $fk_base)) && ((32 == 0) ==> $has_field_at0(^Node,Node.parent))) && true;
	assume $is_span_sequential(^Tree);
	assume (((((($sizeof(^Tree) == 8) && ($type_branch(^Tree) == $ctype_flat)) && (!$is_primitive(^Tree))) && ($is_claimable(^Tree) <==> false)) && (if false then $is_volatile_field($f_owns(^Tree)) else $is_sequential_field($f_owns(^Tree)))) && true) && (!$is_union_type(^Tree));
	assume (forall  #s1_$4 : $state, #s2_$2 : $state, #p_$11 : $ptr :: {$inv2(#s1_$4,#s2_$2,#p_$11,^Tree)} ( $inv2(#s1_$4,#s2_$2,#p_$11,^Tree) <==> ((((((((((((((((((((!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast($null,^Node))) && ((!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)))) && ((!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)))))) ==> ($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)]),^Node))))))) && ((forall  Q#m$1^82.29#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1,^Node))} {:weight  10}( !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1,^Node)) )))) && ((forall  Q#n$1^82.29#dt1 : $ptr, Q#m$1^82.29#dt1_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$0,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$0,^Node)) ==> ($heap(#s2_$2)[Node.key][$phys_ptr_cast(Q#m$1^82.29#dt1_$0,^Node)] < $heap(#s2_$2)[Node.key][$phys_ptr_cast(Q#n$1^82.29#dt1,^Node)])) )))) && ((forall  Q#n$1^82.29#dt1_$0 : $ptr, Q#m$1^82.29#dt1_$1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$0,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$0,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$0,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$1,^Node)) ==> ($heap(#s2_$2)[Node.key][$phys_ptr_cast(Q#m$1^82.29#dt1_$1,^Node)] > $heap(#s2_$2)[Node.key][$phys_ptr_cast(Q#n$1^82.29#dt1_$0,^Node)])) )))) && ((forall  Q#m$1^82.29#dt1_$2 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$2,^Node))} {F#mark2($phys_ptr_cast(Q#m$1^82.29#dt1_$2,^Node))} {sk_hack(F#mark2($phys_ptr_cast(Q#m$1^82.29#dt1_$2,^Node)))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$2,^Node)) <==> $owns(#s2_$2,#p_$11)[$phys_ptr_cast(Q#m$1^82.29#dt1_$2,^Node)] )))) && ((forall  Q#n$1^82.29#dt1_$1 : $ptr, Q#m$1^82.29#dt1_$3 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(Q#n$1^82.29#dt1_$1,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$3,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(Q#n$1^82.29#dt1_$1,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$3,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$3,^Node)) )))) && ((forall  Q#n$1^82.29#dt1_$2 : $ptr, Q#m$1^82.29#dt1_$4 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(Q#n$1^82.29#dt1_$2,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$4,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(Q#n$1^82.29#dt1_$2,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$4,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$2,^Node)) )))) && ((forall  Q#n$1^82.29#dt1_$3 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$3,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$3,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$3,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$3,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(Q#n$1^82.29#dt1_$3,^Node)),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(Q#n$1^82.29#dt1_$3,^Node)]),^Node)) )))) && ((forall  Q#n$1^82.29#dt1_$4 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$4,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$4,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$4,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$4,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(Q#n$1^82.29#dt1_$4,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$4,^Node)) )))) && ((forall  Q#n$1^82.29#dt1_$5 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$5,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$5,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$5,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$5,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(Q#n$1^82.29#dt1_$5,^Node)),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(Q#n$1^82.29#dt1_$5,^Node)]),^Node)) )))) && ((forall  Q#n$1^82.29#dt1_$6 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$6,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$6,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$6,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$6,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(Q#n$1^82.29#dt1_$6,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$6,^Node)) )))) && ((forall  Q#n$1^82.29#dt1_$7 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$7,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$7,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$7,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$7,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$7,^Node)]),^Node)) )))) && ((forall  Q#n$1^82.29#dt1_$8 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node)),^Node)]),^Node))))))) ==> (($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node)) || ($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$8,^Node))) )))) && ((forall  Q#n$1^82.29#dt1_$9 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$9,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$9,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(Q#n$1^82.29#dt1_$9,^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$9,^Node)) )))) && ((forall  Q#m$1^83.29#dt1 : $ptr :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap(#s2_$2)[Tree.abs][#p_$11]),$heap(#s2_$2)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1,^Node)])} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1,^Node)) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap(#s2_$2)[Tree.abs][#p_$11]),$heap(#s2_$2)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1,^Node)]) == $heap(#s2_$2)[Node.value][$phys_ptr_cast(Q#m$1^83.29#dt1,^Node)]) )))) && ((forall  Q#k$1^83.29#tc2 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap(#s2_$2)[Tree.abs][#p_$11]),Q#k$1^83.29#tc2)} {:weight  10}( (($min.i4 <= Q#k$1^83.29#tc2) && (Q#k$1^83.29#tc2 <= $max.i4)) ==> (((forall  Q#m$1^83.29#dt1_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$0,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$0,^Node)) ==> (!($heap(#s2_$2)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1_$0,^Node)] == Q#k$1^83.29#tc2)) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap(#s2_$2)[Tree.abs][#p_$11]),Q#k$1^83.29#tc2) == 0)) )))) && ((forall  Q#n$1^84.29#dt1 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^84.29#dt1,^Node)) && ($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1,^Node)),^Node)]),^Node)))))) ==> (($phys_ptr_cast(Q#n$1^84.29#dt1,^Node) == $phys_ptr_cast($null,^Node)) || ($phys_ptr_cast(Q#n$1^84.29#dt1,^Node) == $phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node))) )))) && ((forall  Q#n$1^84.29#dt1_$0 : $ptr, Q#m$1^84.29#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$0,^Node)),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$0,^Node)),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1,^Node)) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Tree.root][#p_$11]),^Node)),$phys_ptr_cast(Q#n$1^84.29#dt1_$0,^Node)) && ((((($phys_ptr_cast(Q#n$1^84.29#dt1_$0,^Node) == $phys_ptr_cast($null,^Node)) && ($phys_ptr_cast(Q#m$1^84.29#dt1,^Node) == $phys_ptr_cast($null,^Node))) || ($phys_ptr_cast(Q#m$1^84.29#dt1,^Node) == $phys_ptr_cast(Q#n$1^84.29#dt1_$0,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.left][$phys_ptr_cast(Q#n$1^84.29#dt1_$0,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap(#s2_$2)[Tree.R][#p_$11]),$phys_ptr_cast($int_to_ptr($heap(#s2_$2)[Node.right][$phys_ptr_cast(Q#n$1^84.29#dt1_$0,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1,^Node)))) )))) ));
	assume (forall  p_$199 : $ptr, q_$25 : $ptr, s_$23 : $state :: {$composite_extent(s_$23,p_$199,^Tree)[q_$25]} ( $composite_extent(s_$23,p_$199,^Tree)[q_$25] <==> (q_$25 == p_$199) ));
	assume (((((((((((((($field_parent_type(Tree.root) == ^Tree) && ($field_type(Tree.root) == $ptr_to(^Node))) && ($as_field_with_type(Tree.root,$ptr_to(^Node)) == Tree.root)) && ($is_primitive($ptr_to(^Node)) ==> ($as_primitive_field(Tree.root) == Tree.root))) && ((!$is_primitive($ptr_to(^Node))) ==> ($as_composite_field(Tree.root) == Tree.root))) && ($field_arr_root(Tree.root) == Tree.root)) && true) && ((!false) ==> $is_sequential_field(Tree.root))) && (false ==> $is_volatile_field(Tree.root))) && true) && ($field_offset(Tree.root) == 0)) && $is_phys_field(Tree.root)) && ($field_kind(Tree.root) == $fk_base)) && ((0 == 0) ==> $has_field_at0(^Tree,Tree.root))) && true;
	assume (((((((((((($field_parent_type(Tree.abs) == ^Tree) && ($field_type(Tree.abs) == $map_t(^^i4,^^i4))) && ($as_field_with_type(Tree.abs,$map_t(^^i4,^^i4)) == Tree.abs)) && ($is_primitive($map_t(^^i4,^^i4)) ==> ($as_primitive_field(Tree.abs) == Tree.abs))) && ((!$is_primitive($map_t(^^i4,^^i4))) ==> ($as_composite_field(Tree.abs) == Tree.abs))) && ($field_arr_root(Tree.abs) == Tree.abs)) && true) && ((!false) ==> $is_sequential_field(Tree.abs))) && (false ==> $is_volatile_field(Tree.abs))) && true) && ($field_kind(Tree.abs) == $fk_base)) && $is_ghost_field(Tree.abs)) && true;
	assume (((((((((((($field_parent_type(Tree.R) == ^Tree) && ($field_type(Tree.R) == $map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)))) && ($as_field_with_type(Tree.R,$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool))) == Tree.R)) && ($is_primitive($map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool))) ==> ($as_primitive_field(Tree.R) == Tree.R))) && ((!$is_primitive($map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)))) ==> ($as_composite_field(Tree.R) == Tree.R))) && ($field_arr_root(Tree.R) == Tree.R)) && true) && ((!false) ==> $is_sequential_field(Tree.R))) && (false ==> $is_volatile_field(Tree.R))) && true) && ($field_kind(Tree.R) == $fk_base)) && $is_ghost_field(Tree.R)) && true;
	assume (forall  SP#p : $ptr :: {F#mark(SP#p)} ( $phys_ptr_cast(F#mark(SP#p),^Node) == $phys_ptr_cast(SP#p,^Node) ));
	assume $function_arg_type(cf#mark,0,$ptr_to(^Node));
	assume $function_arg_type(cf#mark,1,$ptr_to(^Node));
	assume (forall  SP#p_$0 : $ptr :: {F#doMark(SP#p_$0)} ( F#doMark(SP#p_$0) <==> ($phys_ptr_cast(F#mark($phys_ptr_cast(SP#p_$0,^Node)),^Node) == $phys_ptr_cast(SP#p_$0,^Node)) ));
	assume $function_arg_type(cf#doMark,0,^^bool);
	assume $function_arg_type(cf#doMark,1,$ptr_to(^Node));
	assume $function_arg_type(cf#mark2,0,^^bool);
	assume $function_arg_type(cf#mark2,1,$ptr_to(^Node));
	assume $function_arg_type(cf#lambda#9,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#9,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#9,2,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#9,3,$ptr_to(^Node));
	assume (forall  Q#m$1^283.15#dt1 : $ptr, #l2 : $map_t..$ptr_to..^Node.^^bool, #l1 : $map_t..$ptr_to..^Node.^^bool, #l0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#9(#l2,#l1,$phys_ptr_cast(#l0,^Node)),$phys_ptr_cast(Q#m$1^283.15#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool(F#lambda#9(#l2,#l1,$phys_ptr_cast(#l0,^Node)),$phys_ptr_cast(Q#m$1^283.15#dt1,^Node)) <==> ((($phys_ptr_cast(Q#m$1^283.15#dt1,^Node) == $phys_ptr_cast(#l0,^Node)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1,$phys_ptr_cast(Q#m$1^283.15#dt1,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool(#l2,$phys_ptr_cast(Q#m$1^283.15#dt1,^Node))) ));
	assume $function_arg_type(cf#lambda#8,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#8,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#8,2,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#8,3,$ptr_to(^Node));
	assume (forall  Q#m$1^240.15#dt1 : $ptr, #l2_$0 : $map_t..$ptr_to..^Node.^^bool, #l1_$0 : $map_t..$ptr_to..^Node.^^bool, #l0_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#8(#l2_$0,#l1_$0,$phys_ptr_cast(#l0_$0,^Node)),$phys_ptr_cast(Q#m$1^240.15#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool(F#lambda#8(#l2_$0,#l1_$0,$phys_ptr_cast(#l0_$0,^Node)),$phys_ptr_cast(Q#m$1^240.15#dt1,^Node)) <==> ((($phys_ptr_cast(Q#m$1^240.15#dt1,^Node) == $phys_ptr_cast(#l0_$0,^Node)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1_$0,$phys_ptr_cast(Q#m$1^240.15#dt1,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool(#l2_$0,$phys_ptr_cast(Q#m$1^240.15#dt1,^Node))) ));
	assume $function_arg_type(cf#lambda#7,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#7,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#7,2,$ptr_to(^Node));
	assume (forall  Q#k$1^194.37#dt1 : $ptr, #l1_$1 : $map_t..$ptr_to..^Node.^^bool, #l0_$1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#7(#l1_$1,$phys_ptr_cast(#l0_$1,^Node)),$phys_ptr_cast(Q#k$1^194.37#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool(F#lambda#7(#l1_$1,$phys_ptr_cast(#l0_$1,^Node)),$phys_ptr_cast(Q#k$1^194.37#dt1,^Node)) <==> (($phys_ptr_cast(Q#k$1^194.37#dt1,^Node) == $phys_ptr_cast(#l0_$1,^Node)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1_$1,$phys_ptr_cast(Q#k$1^194.37#dt1,^Node))) ));
	assume $function_arg_type(cf#lambda#6,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#6,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#6,2,$ptr_to(^Node));
	assume (forall  Q#n$1^163.41#dt1 : $ptr, #l1_$2 : $map_t..$ptr_to..^Node.^^bool, #l0_$2 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#6(#l1_$2,$phys_ptr_cast(#l0_$2,^Node)),$phys_ptr_cast(Q#n$1^163.41#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool(F#lambda#6(#l1_$2,$phys_ptr_cast(#l0_$2,^Node)),$phys_ptr_cast(Q#n$1^163.41#dt1,^Node)) <==> (($phys_ptr_cast(Q#n$1^163.41#dt1,^Node) == $phys_ptr_cast(#l0_$2,^Node)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1_$2,$phys_ptr_cast(Q#n$1^163.41#dt1,^Node))) ));
	assume $function_arg_type(cf#lambda#5,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#5,1,$ptr_to(^Node));
	assume (forall  Q#n$1^153.15#dt1 : $ptr, #l0_$3 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#5($phys_ptr_cast(#l0_$3,^Node)),$phys_ptr_cast(Q#n$1^153.15#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool(F#lambda#5($phys_ptr_cast(#l0_$3,^Node)),$phys_ptr_cast(Q#n$1^153.15#dt1,^Node)) <==> ($phys_ptr_cast(Q#n$1^153.15#dt1,^Node) == $phys_ptr_cast(#l0_$3,^Node)) ));
	assume $function_arg_type(cf#lambda#4,0,$map_t(^^i4,^^i4));
	assume $function_arg_type(cf#lambda#4,1,$map_t(^^i4,^^i4));
	assume $function_arg_type(cf#lambda#4,2,^^i4);
	assume $function_arg_type(cf#lambda#4,3,^^i4);
	assume (forall  Q#k$1^151.14#tc2 : Integer, #l2_$1 : $map_t..^^i4.^^i4, #l1_$3 : Integer, #l0_$4 : Integer :: {$select.$map_t..^^i4.^^i4(F#lambda#4(#l2_$1,#l1_$3,#l0_$4),Q#k$1^151.14#tc2)} {:weight  10}( (((($min.i4 <= Q#k$1^151.14#tc2) && (Q#k$1^151.14#tc2 <= $max.i4)) && (($min.i4 <= #l1_$3) && (#l1_$3 <= $max.i4))) && (($min.i4 <= #l0_$4) && (#l0_$4 <= $max.i4))) ==> ($select.$map_t..^^i4.^^i4(F#lambda#4(#l2_$1,#l1_$3,#l0_$4),Q#k$1^151.14#tc2) == (if (Q#k$1^151.14#tc2 == #l0_$4) then #l1_$3 else $select.$map_t..^^i4.^^i4(#l2_$1,Q#k$1^151.14#tc2))) ));
	assume $function_arg_type(cf#lambda#3,0,$map_t(^^i4,^^i4));
	assume (forall  Q#k$1^94.14#tc2 : Integer :: {$select.$map_t..^^i4.^^i4(F#lambda#3(),Q#k$1^94.14#tc2)} {:weight  10}( (($min.i4 <= Q#k$1^94.14#tc2) && (Q#k$1^94.14#tc2 <= $max.i4)) ==> ($select.$map_t..^^i4.^^i4(F#lambda#3(),Q#k$1^94.14#tc2) == 0) ));
	assume $function_arg_type(cf#lambda#2,0,$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assume $function_arg_type(cf#lambda#2,1,$map_t($ptr_to(^Node),^^bool));
	assume (forall  Q#m$1^93.12#dt1 : $ptr, #l0_$5 : $map_t..$ptr_to..^Node.^^bool :: {$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(F#lambda#2(#l0_$5),$phys_ptr_cast(Q#m$1^93.12#dt1,^Node))} {:weight  10}( $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(F#lambda#2(#l0_$5),$phys_ptr_cast(Q#m$1^93.12#dt1,^Node)),#l0_$5) ));
	assume $function_arg_type(cf#lambda#1,0,$map_t($ptr_to(^Node),^^bool));
	assume (forall  Q#n$1^93.12#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#1(),$phys_ptr_cast(Q#n$1^93.12#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool(F#lambda#1(),$phys_ptr_cast(Q#n$1^93.12#dt1,^Node)) <==> false ));
	assume (forall  M : $map_t..$ptr_to..^Node.^^bool, p_$200 : $ptr, v_$7 : Boolean :: ( true ));
	assume (forall  M_$0 : $map_t..$ptr_to..^Node.^^bool, p_$201 : $ptr, v_$8 : Boolean, q_$26 : $ptr :: ( $select.$map_t..$ptr_to..^Node.^^bool($store.$map_t..$ptr_to..^Node.^^bool(M_$0,q_$26,v_$8),p_$201) <==> (if ($phys_ptr_cast(p_$201,^Node) == $phys_ptr_cast(q_$26,^Node)) then v_$8 else $select.$map_t..$ptr_to..^Node.^^bool(M_$0,p_$201)) ));
	assume (forall  M1_$2 : $map_t..$ptr_to..^Node.^^bool, M2_$2 : $map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.^^bool(M1_$2,M2_$2)} ( ((forall  p_$202 : $ptr :: ( $select.$map_t..$ptr_to..^Node.^^bool(M1_$2,$phys_ptr_cast(p_$202,^Node)) <==> $select.$map_t..$ptr_to..^Node.^^bool(M2_$2,$phys_ptr_cast(p_$202,^Node)) ))) ==> $eq.$map_t..$ptr_to..^Node.^^bool(M1_$2,M2_$2) ));
	assume (forall  M1_$3 : $map_t..$ptr_to..^Node.^^bool, M2_$3 : $map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.^^bool(M1_$3,M2_$3)} ( $eq.$map_t..$ptr_to..^Node.^^bool(M1_$3,M2_$3) ==> (M1_$3 == M2_$3) ));
	assume $int_to_map_t..ptr_to..^Node.^^bool(0) == $zero.$map_t..$ptr_to..^Node.^^bool;
	assume (forall  p_$203 : $ptr :: ( $select.$map_t..$ptr_to..^Node.^^bool($zero.$map_t..$ptr_to..^Node.^^bool,p_$203) <==> false ));
	assume true;
	assume (forall  M_$1 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, p_$204 : $ptr, v_$9 : $map_t..$ptr_to..^Node.^^bool :: ( true ));
	assume (forall  M_$2 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, p_$205 : $ptr, v_$10 : $map_t..$ptr_to..^Node.^^bool, q_$27 : $ptr :: ( $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M_$2,q_$27,v_$10),p_$205) == (if ($phys_ptr_cast(p_$205,^Node) == $phys_ptr_cast(q_$27,^Node)) then v_$10 else $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M_$2,p_$205)) ));
	assume (forall  M1_$4 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, M2_$4 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$4,M2_$4)} ( ((forall  p_$206 : $ptr :: ( $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$4,$phys_ptr_cast(p_$206,^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M2_$4,$phys_ptr_cast(p_$206,^Node))) ))) ==> $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$4,M2_$4) ));
	assume (forall  M1_$5 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, M2_$5 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$5,M2_$5)} ( $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$5,M2_$5) ==> (M1_$5 == M2_$5) ));
	assume $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool(0) == $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
	assume (forall  p_$207 : $ptr :: ( $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,p_$207) == $zero.$map_t..$ptr_to..^Node.^^bool ));
	assume true;
	assume (forall  M_$3 : $map_t..^^i4.^^i4, p_$208 : Integer, v_$11 : Integer :: ( true ));
	assume (forall  M_$4 : $map_t..^^i4.^^i4, p_$209 : Integer, v_$12 : Integer, q_$28 : Integer :: ( $select.$map_t..^^i4.^^i4($store.$map_t..^^i4.^^i4(M_$4,q_$28,v_$12),p_$209) == (if ($unchecked(^^i4,p_$209) == $unchecked(^^i4,q_$28)) then $unchecked(^^i4,v_$12) else $select.$map_t..^^i4.^^i4(M_$4,p_$209)) ));
	assume (forall  M1_$6 : $map_t..^^i4.^^i4, M2_$6 : $map_t..^^i4.^^i4 :: {$eq.$map_t..^^i4.^^i4(M1_$6,M2_$6)} ( ((forall  p_$210 : Integer :: ( $unchecked(^^i4,$select.$map_t..^^i4.^^i4(M1_$6,$unchecked(^^i4,p_$210))) == $unchecked(^^i4,$select.$map_t..^^i4.^^i4(M2_$6,$unchecked(^^i4,p_$210))) ))) ==> $eq.$map_t..^^i4.^^i4(M1_$6,M2_$6) ));
	assume (forall  M1_$7 : $map_t..^^i4.^^i4, M2_$7 : $map_t..^^i4.^^i4 :: {$eq.$map_t..^^i4.^^i4(M1_$7,M2_$7)} ( $eq.$map_t..^^i4.^^i4(M1_$7,M2_$7) ==> (M1_$7 == M2_$7) ));
	assume $int_to_map_t..^^i4.^^i4(0) == $zero.$map_t..^^i4.^^i4;
	assume (forall  p_$211 : Integer :: ( $select.$map_t..^^i4.^^i4($zero.$map_t..^^i4.^^i4,p_$211) == 0 ));
	assume true;
	assume (forall  M_$5 : $map_t..^^i4.^^i4, p_$212 : Integer :: ( $in_range_t(^^i4,$select.$map_t..^^i4.^^i4(M_$5,p_$212)) ));
	assume $type_code_is(3,^^object);
	assume $file_name_is(2,#file^?3Cno?20file?3E);
	assume (forall  #x_$0 : $map_t..$ptr_to..^Node.^^bool :: ( #x_$0 == $int_to_map_t..ptr_to..^Node.^^bool($map_t..ptr_to..^Node.^^bool_to_int(#x_$0)) ));
	assume #distTp5 == $ptr_to(^Tree);
	assume $type_code_is(2,^^i4);
	assume (forall  #x_$1 : $map_t..^^i4.^^i4 :: ( #x_$1 == $int_to_map_t..^^i4.^^i4($map_t..^^i4.^^i4_to_int(#x_$1)) ));
	assume #distTp4 == $map_t(^^i4,^^i4);
	assume $file_name_is(1,#file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c);
	assume (forall  #x_$2 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool :: ( #x_$2 == $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int(#x_$2)) ));
	assume #distTp3 == $map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool));
	assume #distTp2 == $map_t($ptr_to(^Node),^^bool);
	assume #distTp1 == $ptr_to(^Node);
	assume (forall  q_$29 : $ptr, $fk_base_$0 : $field_kind, p_$213 : $ptr, T_$18 : $ctype, sz_$36 : Integer :: {lambda#0($fk_base_$0,p_$213,T_$18,sz_$36)[q_$29]} ( lambda#0($fk_base_$0,p_$213,T_$18,sz_$36)[q_$29] <==> (((((($emb0(q_$29) == $emb0(p_$213)) && ($field_type($field(q_$29)) == T_$18)) && ($field_arr_root($field(q_$29)) == $field_arr_root($field(p_$213)))) && ((0 <= $index_within(q_$29,p_$213)) && ($index_within(q_$29,p_$213) <= (sz_$36 - 1)))) && (q_$29 == $dot($base(p_$213),$field_plus($field(p_$213),$index_within(q_$29,p_$213))))) && (!($field_kind($field(q_$29)) == $fk_base_$0))) ));
	assume (forall  q_$30 : $ptr, sz_$37 : Integer, p_$214 : $ptr :: {lambda#1(sz_$37,p_$214)[q_$30]} ( lambda#1(sz_$37,p_$214)[q_$30] <==> (((0 <= $index_within(q_$30,p_$214)) && ($index_within(q_$30,p_$214) <= (sz_$37 - 1))) && $full_extent($idx(p_$214,$index_within(q_$30,p_$214)))[q_$30]) ));
	assume (forall  q_$31 : $ptr, sz_$38 : Integer, p_$215 : $ptr, T_$19 : $ctype :: {lambda#2(sz_$38,p_$215,T_$19)[q_$31]} ( lambda#2(sz_$38,p_$215,T_$19)[q_$31] <==> (((0 <= $index_within(q_$31,p_$215)) && ($index_within(q_$31,p_$215) <= (sz_$38 - 1))) && (q_$31 == $idx(p_$215,$index_within(q_$31,p_$215)))) ));
	assume (forall  r_$17 : $ptr, S0_$23 : $state, S_$133 : $state, o_$12 : $ptr :: {lambda#3(S0_$23,S_$133,o_$12)[r_$17]} ( lambda#3(S0_$23,S_$133,o_$12)[r_$17] == (if (($owner(S0_$23,r_$17) == o_$12) || (r_$17 == o_$12)) then $current_timestamp(S_$133) else $f_timestamp(S0_$23)[r_$17]) ));
	assume (forall  r_$18 : $ptr, S0_$24 : $state, o_$13 : $ptr :: {lambda#4(S0_$24,o_$13)[r_$18]} ( lambda#4(S0_$24,o_$13)[r_$18] == (if ($owner(S0_$24,r_$18) == o_$13) then $me() else $f_owner(S0_$24)[r_$18]) ));
	assume (forall  r_$19 : $ptr, o_$14 : $ptr, S0_$25 : $state :: {lambda#5(o_$14,S0_$25)[r_$19]} ( lambda#5(o_$14,S0_$25)[r_$19] == (if $owns(S0_$25,o_$14)[r_$19] then o_$14 else $f_owner(S0_$25)[r_$19]) ));
	assume (forall  p_$216 : $ptr, r_$20 : $ptr, S_$134 : $state :: {lambda#10(r_$20,S_$134)[p_$216]} ( lambda#10(r_$20,S_$134)[p_$216] <==> ($is_proper($dot($base(p_$216),$field(p_$216))) && $composite_extent(S_$134,r_$20,$field_type($field(r_$20)))[$emb0(p_$216)]) ));
	assume (forall  p_$217 : $ptr, r_$21 : $ptr, $full_extent_state_$0 : $state :: {lambda#11(r_$21,$full_extent_state_$0)[p_$217]} ( lambda#11(r_$21,$full_extent_state_$0)[p_$217] <==> ($is_proper(p_$217) && $composite_extent($full_extent_state_$0,r_$21,$field_type($field(r_$21)))[$emb0(p_$217)]) ));
	assume (forall  p_$218 : $ptr, o_$15 : $ptr :: {lambda#12(o_$15)[p_$218]} ( lambda#12(o_$15)[p_$218] <==> ($is_proper(p_$218) && ($emb0(p_$218) == o_$15)) ));
	assume (forall  p_$219 : $ptr, q_$36 : $ptr :: {lambda#13(q_$36)[p_$219]} ( lambda#13(q_$36)[p_$219] <==> (($is_proper(p_$219) && $is_volatile_field($field(p_$219))) && ($emb0(p_$219) == q_$36)) ));
	assume (forall  o_$16 : $ptr :: {lambda#14()[o_$16]} ( lambda#14()[o_$16] <==> false ));
	assume (forall  o_$17 : $ptr, p_$220 : $ptr :: {lambda#15(p_$220)[o_$17]} ( lambda#15(p_$220)[o_$17] <==> (o_$17 == p_$220) ));
	assume (forall  o_$18 : $ptr, p_$221 : $ptr :: {lambda#16(p_$221)[o_$18]} ( lambda#16(p_$221)[o_$18] <==> ((!(p_$221 == $phys_ptr_cast($null,$field_type($field(p_$221))))) && (p_$221 == o_$18)) ));
	assume (forall  o_$19 : $ptr, A_$5 : $ptrset, B_$5 : $ptrset :: {lambda#17(A_$5,B_$5)[o_$19]} ( lambda#17(A_$5,B_$5)[o_$19] <==> (A_$5[o_$19] || B_$5[o_$19]) ));
	assume (forall  o_$20 : $ptr, A_$6 : $ptrset, B_$6 : $ptrset :: {lambda#18(A_$6,B_$6)[o_$20]} ( lambda#18(A_$6,B_$6)[o_$20] <==> (A_$6[o_$20] && (!B_$6[o_$20])) ));
	assume (forall  o_$21 : $ptr, A_$7 : $ptrset, B_$7 : $ptrset :: {lambda#19(A_$7,B_$7)[o_$21]} ( lambda#19(A_$7,B_$7)[o_$21] <==> (A_$7[o_$21] && B_$7[o_$21]) ));
	assume (forall  #p_$14 : $ptr, ^Node_$0 : $ctype, P#t_$1 : $ptr, ^Tree_$1 : $ctype, P#x_$0 : $ptr :: {lambda#21(^Node_$0,P#t_$1,^Tree_$1,P#x_$0)[#p_$14]} ( lambda#21(^Node_$0,P#t_$1,^Tree_$1,P#x_$0)[#p_$14] <==> ((#p_$14 == $phys_ptr_cast(P#t_$1,^Tree_$1)) || $span($phys_ptr_cast(P#x_$0,^Node_$0))[#p_$14]) ));
	assume (forall  #p_$15 : $ptr, Tree.R_$0 : $field, $s_$3 : $state, P#t_$2 : $ptr, ^Tree_$2 : $ctype, P#x_$1 : $ptr, ^Node_$1 : $ctype :: {lambda#22(Tree.R_$0,$s_$3,P#t_$2,^Tree_$2,P#x_$1,^Node_$1)[#p_$15]} ( lambda#22(Tree.R_$0,$s_$3,P#t_$2,^Tree_$2,P#x_$1,^Node_$1)[#p_$15] <==> ($set_difference($owns($s_$3,$phys_ptr_cast(P#t_$2,^Tree_$2)),$set_singleton($phys_ptr_cast(P#x_$1,^Node_$1)))[#p_$15] || (#p_$15 == $dot($phys_ptr_cast(P#t_$2,^Tree_$2),Tree.R_$0))) ));
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assume (forall  Q#n$1^138.28#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^138.28#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^138.28#dt1,^Node)) ==> (!($heap($s)[Node.key][$phys_ptr_cast(Q#n$1^138.28#dt1,^Node)] == $heap($s)[Node.key][$phys_ptr_cast(P#x,^Node)])) ));
	assume ((($is($phys_ptr_cast(P#t,^Tree),^Tree) && $is_proper($phys_ptr_cast(P#t,^Tree))) && ($owner($s,$phys_ptr_cast(P#t,^Tree)) == $me())) && $closed($s,$phys_ptr_cast(P#t,^Tree))) && (!$is_primitive(^Tree));
	goto anon36;
anon36:
	assume $function_entry($s);
	assume $good_state_ext(#tok$1^134.1,$s) && $full_stop($s);
	assume (forall  f_$22 : $pure_function :: {$frame_level(f_$22)} ( $frame_level(f_$22) < $current_frame_level ));
	assume $local_value_is($s,#tok$1^134.1,#loc.t,$ptr_to_int(P#t),$ptr_to(^Tree));
	assume $local_value_is($s,#tok$1^134.1,#loc.x,$ptr_to_int(P#x),$ptr_to(^Node));
	assume #wrTime$1^134.1 == $current_timestamp($s);
	assume $writes_at(#wrTime$1^134.1) == lambda#21(^Node,P#t,^Tree,P#x);
	assume $owner($s,$emb0($phys_ptr_cast(P#t,^Tree))) == $me();
	assume $mutable($s,$phys_ptr_cast(P#x,^Node));
	assume true;
	assume true;
	assume 2147483647 == $decreases_level;
	assert  $in_domain_lab($s,$phys_ptr_cast(P#t,^Tree),$phys_ptr_cast(P#t,^Tree),l#public);
	assume $local_value_is($s,#tok$1^142.3,#loc.n,$ptr_to_int(L#n),$ptr_to(^Node));
	assume $local_value_is($s,#tok$1^142.3,#loc.p,$ptr_to_int(L#p),$ptr_to(^Node));
	assume $local_value_is($s,#tok$2^0.0,#loc.prestate#24,$state_to_int(prestate#24),^$#state_t);
	assume prestate#24_$_0 == $s;
	assume $local_value_is($s,#tok$2^0.0,#loc.prestate#24,$state_to_int(prestate#24_$_0),^$#state_t);
	assert  ((($is($phys_ptr_cast(P#t,^Tree),^Tree) && $is_proper($phys_ptr_cast(P#t,^Tree))) && ($owner($s,$phys_ptr_cast(P#t,^Tree)) == $me())) && $closed($s,$phys_ptr_cast(P#t,^Tree))) && (!$is_primitive(^Tree));
	assume $inv2($s,$s,$phys_ptr_cast(P#t,^Tree),^Tree);
	assume $pre_unwrap($s);
	assert  $top_writable($s,#wrTime$1^134.1,$phys_ptr_cast(P#t,^Tree));
	assume call0formal_$_o_$_0 == $phys_ptr_cast(P#t,^Tree);
	assert  (!$is_claimable(^Tree)) || ($ref_cnt($s,call0formal_$_o_$_0) == 0);
	assert  $pre_unwrap($s);
	assume $is_unwrapped_dynamic($s,$s_$_0,call0formal_$_o_$_0);
	assume $good_state_ext(#tok$1^144.19,$s_$_0);
	assume $full_stop($s_$_0);
	assume $local_value_is($s_$_0,#tok$2^0.0,#loc.assign#12,$ptr_to_int(assign#12),$ptr_to(^Node));
	assume $local_value_is($s_$_0,#tok$2^0.0,#loc.assign#13,$ptr_to_int(assign#13),$ptr_to(^Node));
	assume assign#13_$_0 == $phys_ptr_cast($null,^Node);
	assume $local_value_is($s_$_0,#tok$2^0.0,#loc.assign#13,$ptr_to_int(assign#13_$_0),$ptr_to(^Node));
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#x,^Node),Node.parent)))) && $is_proper($dot($phys_ptr_cast(P#x,^Node),Node.parent))) && ($mutable($s_$_0,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.parent))) && (($timestamp($s_$_0,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.parent))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#x,^Node),Node.parent))));
	assume call1formal_$_p_$_0 == $phys_ptr_cast(P#x,^Node);
	assume call2formal_$_v_$_0 == $ptr_to_int($phys_ptr_cast(assign#13_$_0,^Node));
	assume ((($f_timestamp($s_$_0) == $f_timestamp($s_$_1)) && ($f_closed($s_$_0) == $f_closed($s_$_1))) && ($f_owner($s_$_0) == $f_owner($s_$_1))) && ($roots($s_$_0) == $roots($s_$_1));
	assume $heap($s_$_1) == $heap($s_$_0)[Node.parent := $heap($s_$_0)[Node.parent][call1formal_$_p_$_0 := call2formal_$_v_$_0]];
	assume ($current_timestamp($s_$_0) < $current_timestamp($s_$_1)) && $call_transition($s_$_0,$s_$_1);
	assume $good_state_ext(#tok$1^146.24,$s_$_1) && $full_stop($s_$_1);
	assume assign#12_$_0 == $phys_ptr_cast(assign#13_$_0,^Node);
	assume $local_value_is($s_$_1,#tok$2^0.0,#loc.assign#12,$ptr_to_int(assign#12_$_0),$ptr_to(^Node));
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#x,^Node),Node.right)))) && $is_proper($dot($phys_ptr_cast(P#x,^Node),Node.right))) && ($mutable($s_$_1,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.right))) && (($timestamp($s_$_1,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.right))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#x,^Node),Node.right))));
	assume call1formal_$_p_$_0_$1 == $phys_ptr_cast(P#x,^Node);
	assume call2formal_$_v_$_0_$1 == $ptr_to_int($phys_ptr_cast(assign#12_$_0,^Node));
	assume ((($f_timestamp($s_$_1) == $f_timestamp($s_$_2)) && ($f_closed($s_$_1) == $f_closed($s_$_2))) && ($f_owner($s_$_1) == $f_owner($s_$_2))) && ($roots($s_$_1) == $roots($s_$_2));
	assume $heap($s_$_2) == $heap($s_$_1)[Node.right := $heap($s_$_1)[Node.right][call1formal_$_p_$_0_$1 := call2formal_$_v_$_0_$1]];
	assume ($current_timestamp($s_$_1) < $current_timestamp($s_$_2)) && $call_transition($s_$_1,$s_$_2);
	assume $good_state_ext(#tok$1^146.13,$s_$_2) && $full_stop($s_$_2);
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#x,^Node),Node.left)))) && $is_proper($dot($phys_ptr_cast(P#x,^Node),Node.left))) && ($mutable($s_$_2,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.left))) && (($timestamp($s_$_2,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.left))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#x,^Node),Node.left))));
	assume call1formal_$_p_$_0_$2 == $phys_ptr_cast(P#x,^Node);
	assume call2formal_$_v_$_0_$2 == $ptr_to_int($phys_ptr_cast(assign#12_$_0,^Node));
	assume ((($f_timestamp($s_$_2) == $f_timestamp($s_$_3)) && ($f_closed($s_$_2) == $f_closed($s_$_3))) && ($f_owner($s_$_2) == $f_owner($s_$_3))) && ($roots($s_$_2) == $roots($s_$_3));
	assume $heap($s_$_3) == $heap($s_$_2)[Node.left := $heap($s_$_2)[Node.left][call1formal_$_p_$_0_$2 := call2formal_$_v_$_0_$2]];
	assume ($current_timestamp($s_$_2) < $current_timestamp($s_$_3)) && $call_transition($s_$_2,$s_$_3);
	assume $good_state_ext(#tok$1^146.3,$s_$_3) && $full_stop($s_$_3);
	assert  $thread_local($s_$_3,$phys_ptr_cast(P#t,^Tree));
	assume L#p_$_0 == $phys_ptr_cast($int_to_ptr($heap($s_$_3)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node);
	assume $local_value_is($s_$_3,#tok$1^148.3,#loc.p,$ptr_to_int(L#p_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_3,#tok$1^151.14,#loc.res_lambda#4#17,$map_t..^^i4.^^i4_to_int(res_lambda#4#17),$map_t(^^i4,^^i4));
	assert  $thread_local($s_$_3,$phys_ptr_cast(P#t,^Tree));
	assert  $thread_local($s_$_3,$phys_ptr_cast(P#x,^Node));
	assert  $thread_local($s_$_3,$phys_ptr_cast(P#x,^Node));
	assume call0formal_$_#l2_$_0 == $int_to_map_t..^^i4.^^i4($heap($s_$_3)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]);
	assume call1formal_$_#l1_$_0 == $heap($s_$_3)[Node.value][$phys_ptr_cast(P#x,^Node)];
	assume call2formal_$_#l0_$_0 == $heap($s_$_3)[Node.key][$phys_ptr_cast(P#x,^Node)];
	assume call3formal_$_$result_$_0 == F#lambda#4(call0formal_$_#l2_$_0,call1formal_$_#l1_$_0,call2formal_$_#l0_$_0);
	assume $call_transition($s_$_3,$s_$_3);
	assume $good_state_ext(#tok$1^151.14,$s_$_3) && $full_stop($s_$_3);
	assume $local_value_is($s_$_3,#tok$1^151.14,#loc.res_lambda#4#17,$map_t..^^i4.^^i4_to_int(call3formal_$_$result_$_0),$map_t(^^i4,^^i4));
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#t,^Tree),Tree.abs)))) && $is_proper($dot($phys_ptr_cast(P#t,^Tree),Tree.abs))) && ($mutable($s_$_3,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.abs))) && (($timestamp($s_$_3,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.abs))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#t,^Tree),Tree.abs))));
	assume call1formal_$_p_$_0_$3 == $phys_ptr_cast(P#t,^Tree);
	assume call2formal_$_v_$_0_$3 == $map_t..^^i4.^^i4_to_int(call3formal_$_$result_$_0);
	assume ((($f_timestamp($s_$_3) == $f_timestamp($s_$_4)) && ($f_closed($s_$_3) == $f_closed($s_$_4))) && ($f_owner($s_$_3) == $f_owner($s_$_4))) && ($roots($s_$_3) == $roots($s_$_4));
	assume $heap($s_$_4) == $heap($s_$_3)[Tree.abs := $heap($s_$_3)[Tree.abs][call1formal_$_p_$_0_$3 := call2formal_$_v_$_0_$3]];
	assume ($current_timestamp($s_$_3) < $current_timestamp($s_$_4)) && $call_transition($s_$_3,$s_$_4);
	assume $good_state_ext(#tok$1^151.5,$s_$_4) && $full_stop($s_$_4);
	assert  (forall  #writes$1^152.5 : $ptr :: {$dont_instantiate(#writes$1^152.5)} ( $span($phys_ptr_cast(P#t,^Tree))[#writes$1^152.5] ==> $top_writable($s_$_4,#wrTime$1^134.1,#writes$1^152.5) ));
	assume call0formal_$_p_$_0 == $phys_ptr_cast(P#t,^Tree);
	assume call1formal_$_owns_$_0 == $set_union($owns($s_$_4,$phys_ptr_cast(P#t,^Tree)),$set_singleton($phys_ptr_cast(P#x,^Node)));
	assert  !$is_primitive($field_type($field(call0formal_$_p_$_0)));
	assert  $mutable($s_$_4,call0formal_$_p_$_0);
	assume $updated_owns($s_$_4,$s_$_5,call0formal_$_p_$_0,call1formal_$_owns_$_0);
	assume ((($f_timestamp($s_$_4) == $f_timestamp($s_$_5)) && ($f_closed($s_$_4) == $f_closed($s_$_5))) && ($f_owner($s_$_4) == $f_owner($s_$_5))) && ($roots($s_$_4) == $roots($s_$_5));
	assume ($current_timestamp($s_$_4) < $current_timestamp($s_$_5)) && $call_transition($s_$_4,$s_$_5);
	assume $good_state_ext(#tok$1^152.5,$s_$_5) && $full_stop($s_$_5);
	assume $local_value_is($s_$_5,#tok$1^153.15,#loc.res_lambda#5#18,$map_t..ptr_to..^Node.^^bool_to_int(res_lambda#5#18),$map_t($ptr_to(^Node),^^bool));
	assume call0formal_$_#l0_$_0 == $phys_ptr_cast(P#x,^Node);
	assume call1formal_$_$result_$_0 == F#lambda#5(call0formal_$_#l0_$_0);
	assume $call_transition($s_$_5,$s_$_5);
	assume $good_state_ext(#tok$1^153.15,$s_$_5) && $full_stop($s_$_5);
	assume $local_value_is($s_$_5,#tok$1^153.15,#loc.res_lambda#5#18,$map_t..ptr_to..^Node.^^bool_to_int(call1formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#t,^Tree),Tree.R)))) && $is_proper($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) && ($mutable($s_$_5,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) && (($timestamp($s_$_5,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#t,^Tree),Tree.R))));
	assert  $thread_local($s_$_5,$phys_ptr_cast(P#t,^Tree));
	assume call1formal_$_p_$_0_$4 == $phys_ptr_cast(P#t,^Tree);
	assume call2formal_$_v_$_0_$4 == $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_5)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(P#x,^Node),call1formal_$_$result_$_0));
	assume ((($f_timestamp($s_$_5) == $f_timestamp($s_$_6)) && ($f_closed($s_$_5) == $f_closed($s_$_6))) && ($f_owner($s_$_5) == $f_owner($s_$_6))) && ($roots($s_$_5) == $roots($s_$_6));
	assume $heap($s_$_6) == $heap($s_$_5)[Tree.R := $heap($s_$_5)[Tree.R][call1formal_$_p_$_0_$4 := call2formal_$_v_$_0_$4]];
	assume ($current_timestamp($s_$_5) < $current_timestamp($s_$_6)) && $call_transition($s_$_5,$s_$_6);
	assume $good_state_ext(#tok$1^153.5,$s_$_6) && $full_stop($s_$_6);
	assume true;
	if ($_$_condition) { goto anon00_Then; } else { goto anon00_Else; }
anon00_Then:
	assume $_$_condition;
	assume $_$_condition <==> ($phys_ptr_cast(L#p_$_0,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#p_$_0,^Node)))));
	assume $phys_ptr_cast(L#p_$_0,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#p_$_0,^Node))));
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#t,^Tree),Tree.root)))) && $is_proper($dot($phys_ptr_cast(P#t,^Tree),Tree.root))) && ($mutable($s_$_6,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.root))) && (($timestamp($s_$_6,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.root))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#t,^Tree),Tree.root))));
	assume call1formal_$_p_$_0_$10 == $phys_ptr_cast(P#t,^Tree);
	assume call2formal_$_v_$_0_$10 == $ptr_to_int($phys_ptr_cast(P#x,^Node));
	assume ((($f_timestamp($s_$_6) == $f_timestamp($s_$_7)) && ($f_closed($s_$_6) == $f_closed($s_$_7))) && ($f_owner($s_$_6) == $f_owner($s_$_7))) && ($roots($s_$_6) == $roots($s_$_7));
	assume $heap($s_$_7) == $heap($s_$_6)[Tree.root := $heap($s_$_6)[Tree.root][call1formal_$_p_$_0_$10 := call2formal_$_v_$_0_$10]];
	assume ($current_timestamp($s_$_6) < $current_timestamp($s_$_7)) && $call_transition($s_$_6,$s_$_7);
	assume $good_state_ext(#tok$1^157.5,$s_$_7) && $full_stop($s_$_7);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.prestate#27,$state_to_int(prestate#27),^$#state_t);
	assume prestate#27_$_0 == $s_$_7;
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.prestate#27,$state_to_int(prestate#27_$_0),^$#state_t);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.staticWrapState#25,$state_to_int(staticWrapState#25),^$#state_t);
	assume staticWrapState#25_$_0 == $s_$_7;
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.staticWrapState#25,$state_to_int(staticWrapState#25_$_0),^$#state_t);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.owns#26,$ptrset_to_int(owns#26),^$#ptrset);
	assume owns#26_$_0 == $set_empty();
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.owns#26,$ptrset_to_int(owns#26_$_0),^$#ptrset);
	assert  $top_writable($s_$_7,#wrTime$1^134.1,$phys_ptr_cast(P#x,^Node));
	assume $pre_static_wrap($s_$_7);
	assume call0formal_$_o_$_0_$7 == $phys_ptr_cast(P#x,^Node);
	assert  $pre_static_wrap($s_$_7);
	assert  !$is_primitive($field_type($field(call0formal_$_o_$_0_$7)));
	assert  $mutable($s_$_7,call0formal_$_o_$_0_$7);
	assume $is_wrapped($s_$_7,$s_$_8,call0formal_$_o_$_0_$7,owns#26_$_0);
	assume $heap($s_$_8) == $heap($s_$_7)[$f_owns($field_type($field(call0formal_$_o_$_0_$7))) := $heap($s_$_7)[$f_owns($field_type($field(call0formal_$_o_$_0_$7)))][call0formal_$_o_$_0_$7 := $ptrset_to_int(owns#26_$_0)]];
	assume $f_owner($s_$_8) == $f_owner(staticWrapState#25_$_0);
	assume $good_state_ext(#tok$1^158.21,$s_$_8);
	assert  $set_eq($owns($s_$_8,$phys_ptr_cast(P#x,^Node)),$set_empty());
	assume $full_stop($s_$_8);
	assume $local_value_is($s_$_8,#tok$2^0.0,#loc.prestate#28,$state_to_int(prestate#28),^$#state_t);
	assume prestate#28_$_0 == $s_$_8;
	assume $local_value_is($s_$_8,#tok$2^0.0,#loc.prestate#28,$state_to_int(prestate#28_$_0),^$#state_t);
	assume $pre_wrap($s_$_8);
	assert  $top_writable($s_$_8,#wrTime$1^134.1,$phys_ptr_cast(P#t,^Tree));
	assert  (forall  #writes$1^159.21 : $ptr :: {$dont_instantiate(#writes$1^159.21)} ( $owns($s_$_8,$phys_ptr_cast(P#t,^Tree))[#writes$1^159.21] ==> $top_writable($s_$_8,#wrTime$1^134.1,#writes$1^159.21) ));
	assume call0formal_$_o_$_0_$8 == $phys_ptr_cast(P#t,^Tree);
	assert  $pre_wrap($s_$_8);
	assert  !$is_primitive($field_type($field(call0formal_$_o_$_0_$8)));
	assert  $mutable($s_$_8,call0formal_$_o_$_0_$8);
	assert  (forall  p_$222 : $ptr :: {$dont_instantiate(p_$222)} ( $set_in0(p_$222,$owns($s_$_8,call0formal_$_o_$_0_$8)) ==> (((($is(p_$222,$field_type($field(p_$222))) && $is_proper(p_$222)) && ($owner($s_$_8,p_$222) == $me())) && $closed($s_$_8,p_$222)) && (!$is_primitive($field_type($field(p_$222))))) ));
	assume $is_wrapped_dynamic($s_$_8,$s_$_9,call0formal_$_o_$_0_$8);
	assume $good_state_ext(#tok$1^159.21,$s_$_9);
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($null,^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node)))));
	assert  (forall  Q#m$1^82.29#dt1_$5 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$5,^Node))} {:weight  10}( !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$5,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$10 : $ptr, Q#m$1^82.29#dt1_$6 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$10,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$6,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$10,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$10,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$6,^Node)) ==> ($heap($s_$_9)[Node.key][$phys_ptr_cast(Q#m$1^82.29#dt1_$6,^Node)] < $heap($s_$_9)[Node.key][$phys_ptr_cast(Q#n$1^82.29#dt1_$10,^Node)])) ));
	assert  (forall  Q#n$1^82.29#dt1_$11 : $ptr, Q#m$1^82.29#dt1_$7 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$11,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$7,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$11,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$11,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$7,^Node)) ==> ($heap($s_$_9)[Node.key][$phys_ptr_cast(Q#m$1^82.29#dt1_$7,^Node)] > $heap($s_$_9)[Node.key][$phys_ptr_cast(Q#n$1^82.29#dt1_$11,^Node)])) ));
	assert  (forall  Q#m$1^82.29#dt1_$8 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$8,^Node))} {F#mark2($phys_ptr_cast(Q#m$1^82.29#dt1_$8,^Node))} {sk_hack(F#mark2($phys_ptr_cast(Q#m$1^82.29#dt1_$8,^Node)))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$8,^Node)) <==> $owns($s_$_9,$phys_ptr_cast(P#t,^Tree))[$phys_ptr_cast(Q#m$1^82.29#dt1_$8,^Node)] ));
	assert  (forall  Q#n$1^82.29#dt1_$12 : $ptr, Q#m$1^82.29#dt1_$9 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$12,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$9,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$12,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$9,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$9,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$13 : $ptr, Q#m$1^82.29#dt1_$10 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$13,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$10,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$13,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$10,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$13,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$14 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$14,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$14,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$14,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$14,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$14,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(Q#n$1^82.29#dt1_$14,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$15 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$15,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$15,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$15,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$15,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(Q#n$1^82.29#dt1_$15,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$15,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$16 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$16,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$16,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$16,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$16,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$16,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(Q#n$1^82.29#dt1_$16,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$17 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$17,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$17,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$17,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$17,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(Q#n$1^82.29#dt1_$17,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$17,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$18 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$18,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$18,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$18,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$18,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$18,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$19 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node)),^Node)]),^Node))))))) ==> (($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node)) || ($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$19,^Node))) ));
	assert  (forall  Q#n$1^82.29#dt1_$20 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$20,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$20,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$20,^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$20,^Node)) ));
	assert  true;
	assert  (forall  Q#m$1^83.29#dt1_$1 : $ptr :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_9)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_9)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1_$1,^Node)])} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$1,^Node)) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_9)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_9)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1_$1,^Node)]) == $heap($s_$_9)[Node.value][$phys_ptr_cast(Q#m$1^83.29#dt1_$1,^Node)]) ));
	assert  (forall  Q#k$1^83.29#tc2_$0 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_9)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^83.29#tc2_$0)} {:weight  10}( (($min.i4 <= Q#k$1^83.29#tc2_$0) && (Q#k$1^83.29#tc2_$0 <= $max.i4)) ==> (((forall  Q#m$1^83.29#dt1_$2 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$2,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$2,^Node)) ==> (!($heap($s_$_9)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1_$2,^Node)] == Q#k$1^83.29#tc2_$0)) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_9)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^83.29#tc2_$0) == 0)) ));
	assert  (forall  Q#n$1^84.29#dt1_$1 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$1,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^84.29#dt1_$1,^Node)) && ($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$1,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$1,^Node)),^Node)]),^Node)))))) ==> (($phys_ptr_cast(Q#n$1^84.29#dt1_$1,^Node) == $phys_ptr_cast($null,^Node)) || ($phys_ptr_cast(Q#n$1^84.29#dt1_$1,^Node) == $phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node))) ));
	assert  (forall  Q#n$1^84.29#dt1_$2 : $ptr, Q#m$1^84.29#dt1_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$2,^Node)),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$0,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$2,^Node)),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$0,^Node)) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^84.29#dt1_$2,^Node)) && ((((($phys_ptr_cast(Q#n$1^84.29#dt1_$2,^Node) == $phys_ptr_cast($null,^Node)) && ($phys_ptr_cast(Q#m$1^84.29#dt1_$0,^Node) == $phys_ptr_cast($null,^Node))) || ($phys_ptr_cast(Q#m$1^84.29#dt1_$0,^Node) == $phys_ptr_cast(Q#n$1^84.29#dt1_$2,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.left][$phys_ptr_cast(Q#n$1^84.29#dt1_$2,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$0,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_9)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_9)[Node.right][$phys_ptr_cast(Q#n$1^84.29#dt1_$2,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$0,^Node)))) ));
	assume $full_stop($s_$_9);
	assert  $position_marker();
	assume $s_$_23 == $s_$_9;
	goto $#exit;
anon00_Else:
	assume !$_$_condition;
	assume $_$_condition <==> ($phys_ptr_cast(L#p_$_0,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#p_$_0,^Node)))));
	assume !($phys_ptr_cast(L#p_$_0,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#p_$_0,^Node)))));
	assume $local_value_is($s_$_6,#tok$1^163.41,#loc.res_lambda#6#19,$map_t..ptr_to..^Node.^^bool_to_int(res_lambda#6#19),$map_t($ptr_to(^Node),^^bool));
	assert  $thread_local($s_$_6,$phys_ptr_cast(P#t,^Tree));
	assert  $thread_local($s_$_6,$phys_ptr_cast(P#t,^Tree));
	assume call0formal_$_#l1_$_0 == $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assume call1formal_$_#l0_$_0 == $phys_ptr_cast(P#x,^Node);
	assume call2formal_$_$result_$_0 == F#lambda#6(call0formal_$_#l1_$_0,call1formal_$_#l0_$_0);
	assume $call_transition($s_$_6,$s_$_6);
	assume $good_state_ext(#tok$1^163.41,$s_$_6) && $full_stop($s_$_6);
	assume $local_value_is($s_$_6,#tok$1^163.41,#loc.res_lambda#6#19,$map_t..ptr_to..^Node.^^bool_to_int(call2formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#t,^Tree),Tree.R)))) && $is_proper($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) && ($mutable($s_$_6,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) && (($timestamp($s_$_6,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#t,^Tree),Tree.R))));
	assert  $thread_local($s_$_6,$phys_ptr_cast(P#t,^Tree));
	assert  $thread_local($s_$_6,$phys_ptr_cast(P#t,^Tree));
	assume call1formal_$_p_$_0_$5 == $phys_ptr_cast(P#t,^Tree);
	assume call2formal_$_v_$_0_$5 == $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_6)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_6)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node),call2formal_$_$result_$_0));
	assume ((($f_timestamp($s_$_6) == $f_timestamp($s_$_10)) && ($f_closed($s_$_6) == $f_closed($s_$_10))) && ($f_owner($s_$_6) == $f_owner($s_$_10))) && ($roots($s_$_6) == $roots($s_$_10));
	assume $heap($s_$_10) == $heap($s_$_6)[Tree.R := $heap($s_$_6)[Tree.R][call1formal_$_p_$_0_$5 := call2formal_$_v_$_0_$5]];
	assume ($current_timestamp($s_$_6) < $current_timestamp($s_$_10)) && $call_transition($s_$_6,$s_$_10);
	assume $good_state_ext(#tok$1^163.25,$s_$_10) && $full_stop($s_$_10);
	assert  F#doMark($phys_ptr_cast($int_to_ptr($heap($s_$_10)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assume F#doMark($phys_ptr_cast($int_to_ptr($heap($s_$_10)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assert  $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_10)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_10)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assume $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_10)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_10)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assume ((($f_closed($s_$_11) == $f_closed($s_$_10)) && ($f_owner($s_$_11) == $f_owner($s_$_10))) && ($roots($s_$_11) == $roots($s_$_10))) && ($heap($s_$_11) == $heap($s_$_10));
	assume $f_timestamp($s_$_11) == $f_timestamp($s_$_10)[$null := $current_timestamp($s_$_11)];
	assume $current_timestamp($s_$_10) < $current_timestamp($s_$_11);
	assume $good_state_ext(#tok$1^168.28,$s_$_11) && $full_stop($s_$_11);
	assume #wrTime$1^168.28 == $current_timestamp($s_$_11);
	assume $writes_at(#wrTime$1^168.28) == lambda#22(Tree.R,$s_$_11,P#t,^Tree,P#x,^Node);
	assert  (forall  #loopWrites^$1^168.28 : $ptr :: {$dont_instantiate(#loopWrites^$1^168.28)} ( $in_writes_at(#wrTime$1^168.28,#loopWrites^$1^168.28) ==> $top_writable($s_$_11,#wrTime$1^134.1,#loopWrites^$1^168.28) ));
	assert  (forall  Q#p$1^169.32#tc3 : $ptr :: {$owns($s_$_11,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3]} {sk_hack($owns($s_$_11,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3])} {:weight  10}( $owns($s_$_11,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3] ==> ((Q#p$1^169.32#tc3 == $phys_ptr_cast(P#x,^Node)) || (((($is(Q#p$1^169.32#tc3,$field_type($field(Q#p$1^169.32#tc3))) && $is_proper(Q#p$1^169.32#tc3)) && ($owner($s_$_11,Q#p$1^169.32#tc3) == $me())) && $closed($s_$_11,Q#p$1^169.32#tc3)) && (!$is_primitive($field_type($field(Q#p$1^169.32#tc3)))))) ));
	assert  $mutable($s_$_11,$phys_ptr_cast(P#x,^Node));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(P#x,^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(P#x,^Node)));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($null,^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node)))));
	assert  (forall  Q#m$1^171.31#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1,^Node))} {:weight  10}( !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1 : $ptr, Q#m$1^171.31#dt1_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$0,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$0,^Node)) ==> ($heap($s_$_11)[Node.key][$phys_ptr_cast(Q#m$1^171.31#dt1_$0,^Node)] < $heap($s_$_11)[Node.key][$phys_ptr_cast(Q#n$1^171.31#dt1,^Node)])) ));
	assert  (forall  Q#n$1^171.31#dt1_$0 : $ptr, Q#m$1^171.31#dt1_$1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$0,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$0,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$0,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$1,^Node)) ==> ($heap($s_$_11)[Node.key][$phys_ptr_cast(Q#m$1^171.31#dt1_$1,^Node)] > $heap($s_$_11)[Node.key][$phys_ptr_cast(Q#n$1^171.31#dt1_$0,^Node)])) ));
	assert  (forall  Q#m$1^171.31#dt1_$2 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$2,^Node))} {F#mark2($phys_ptr_cast(Q#m$1^171.31#dt1_$2,^Node))} {sk_hack(F#mark2($phys_ptr_cast(Q#m$1^171.31#dt1_$2,^Node)))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$2,^Node)) <==> $owns($s_$_11,$phys_ptr_cast(P#t,^Tree))[$phys_ptr_cast(Q#m$1^171.31#dt1_$2,^Node)] ));
	assert  (forall  Q#n$1^171.31#dt1_$1 : $ptr, Q#m$1^171.31#dt1_$3 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$1,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$3,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$1,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$3,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$3,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$2 : $ptr, Q#m$1^171.31#dt1_$4 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$2,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$4,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$2,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$4,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$2,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$3 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$3,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$3,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$3,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$3,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$3,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(Q#n$1^171.31#dt1_$3,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$4 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$4,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$4,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$4,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$4,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(Q#n$1^171.31#dt1_$4,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$4,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$5 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$5,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$5,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$5,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$5,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$5,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(Q#n$1^171.31#dt1_$5,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$6 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$6,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$6,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$6,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$6,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(Q#n$1^171.31#dt1_$6,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$6,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$7 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$7,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$7,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$7,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$7,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$7,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$8 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node)),^Node)]),^Node))))))) ==> (($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node)) || ($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$8,^Node))) ));
	assert  (forall  Q#n$1^171.31#dt1_$9 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$9,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$9,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$9,^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$9,^Node)) ));
	assert  true;
	assert  (forall  Q#m$1^172.31#dt1 : $ptr :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_11)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_11)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1,^Node)])} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1,^Node)) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_11)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_11)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1,^Node)]) == $heap($s_$_11)[Node.value][$phys_ptr_cast(Q#m$1^172.31#dt1,^Node)]) ));
	assert  (forall  Q#k$1^172.31#tc2 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_11)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^172.31#tc2)} {:weight  10}( (($min.i4 <= Q#k$1^172.31#tc2) && (Q#k$1^172.31#tc2 <= $max.i4)) ==> (((forall  Q#m$1^172.31#dt1_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$0,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$0,^Node)) ==> (!($heap($s_$_11)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1_$0,^Node)] == Q#k$1^172.31#tc2)) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_11)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^172.31#tc2) == 0)) ));
	assert  (forall  Q#n$1^173.31#dt1 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^173.31#dt1,^Node)) && ($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1,^Node)),^Node)]),^Node)))))) ==> (($phys_ptr_cast(Q#n$1^173.31#dt1,^Node) == $phys_ptr_cast(P#x,^Node)) || ($phys_ptr_cast(Q#n$1^173.31#dt1,^Node) == $phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node))) ));
	assert  (forall  Q#n$1^173.31#dt1_$0 : $ptr, Q#m$1^173.31#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$0,^Node)),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$0,^Node)),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1,^Node)) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^173.31#dt1_$0,^Node)) && ((((($phys_ptr_cast(Q#n$1^173.31#dt1_$0,^Node) == $phys_ptr_cast(L#p_$_0,^Node)) && ($phys_ptr_cast(Q#m$1^173.31#dt1,^Node) == $phys_ptr_cast(P#x,^Node))) || ($phys_ptr_cast(Q#m$1^173.31#dt1,^Node) == $phys_ptr_cast(Q#n$1^173.31#dt1_$0,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(Q#n$1^173.31#dt1_$0,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(Q#n$1^173.31#dt1_$0,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1,^Node)))) ));
	assert  $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(L#p_$_0,^Node));
	assert  !($phys_ptr_cast(L#p_$_0,^Node) == $phys_ptr_cast(P#x,^Node));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.left][$phys_ptr_cast(L#p_$_0,^Node)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Node.right][$phys_ptr_cast(L#p_$_0,^Node)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assert  (forall  Q#n$1^176.31#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^176.31#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^176.31#dt1,^Node)) ==> (($phys_ptr_cast(Q#n$1^176.31#dt1,^Node) == $phys_ptr_cast(P#x,^Node)) || (!($heap($s_$_11)[Node.key][$phys_ptr_cast(Q#n$1^176.31#dt1,^Node)] == $heap($s_$_11)[Node.key][$phys_ptr_cast(P#x,^Node)]))) ));
	goto anon01_LoopHead;
$#exit:
	assume $s_$_25 == $s_$_23;
	goto GeneratedUnifiedExit;
anon01_LoopHead:
	assume true;
	assume (forall  Q#p$1^169.32#tc3_$0 : $ptr :: {$owns($s_$_12,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3_$0]} {sk_hack($owns($s_$_12,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3_$0])} {:weight  10}( $owns($s_$_12,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3_$0] ==> ((Q#p$1^169.32#tc3_$0 == $phys_ptr_cast(P#x,^Node)) || (((($is(Q#p$1^169.32#tc3_$0,$field_type($field(Q#p$1^169.32#tc3_$0))) && $is_proper(Q#p$1^169.32#tc3_$0)) && ($owner($s_$_12,Q#p$1^169.32#tc3_$0) == $me())) && $closed($s_$_12,Q#p$1^169.32#tc3_$0)) && (!$is_primitive($field_type($field(Q#p$1^169.32#tc3_$0)))))) ));
	assume $mutable($s_$_12,$phys_ptr_cast(P#x,^Node));
	assume $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)));
	assume $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)));
	assume $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(P#x,^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(P#x,^Node)));
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($null,^Node));
	assume (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assume (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node)))));
	assume (forall  Q#m$1^171.31#dt1_$5 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$5,^Node))} {:weight  10}( !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$5,^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$10 : $ptr, Q#m$1^171.31#dt1_$6 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$10,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$6,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$10,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$10,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$6,^Node)) ==> ($heap($s_$_12)[Node.key][$phys_ptr_cast(Q#m$1^171.31#dt1_$6,^Node)] < $heap($s_$_12)[Node.key][$phys_ptr_cast(Q#n$1^171.31#dt1_$10,^Node)])) ));
	assume (forall  Q#n$1^171.31#dt1_$11 : $ptr, Q#m$1^171.31#dt1_$7 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$11,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$7,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$11,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$11,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$7,^Node)) ==> ($heap($s_$_12)[Node.key][$phys_ptr_cast(Q#m$1^171.31#dt1_$7,^Node)] > $heap($s_$_12)[Node.key][$phys_ptr_cast(Q#n$1^171.31#dt1_$11,^Node)])) ));
	assume (forall  Q#m$1^171.31#dt1_$8 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$8,^Node))} {F#mark2($phys_ptr_cast(Q#m$1^171.31#dt1_$8,^Node))} {sk_hack(F#mark2($phys_ptr_cast(Q#m$1^171.31#dt1_$8,^Node)))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$8,^Node)) <==> $owns($s_$_12,$phys_ptr_cast(P#t,^Tree))[$phys_ptr_cast(Q#m$1^171.31#dt1_$8,^Node)] ));
	assume (forall  Q#n$1^171.31#dt1_$12 : $ptr, Q#m$1^171.31#dt1_$9 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$12,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$9,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$12,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$9,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$9,^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$13 : $ptr, Q#m$1^171.31#dt1_$10 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$13,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$10,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$13,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$10,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$13,^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$14 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$14,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$14,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$14,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$14,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$14,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(Q#n$1^171.31#dt1_$14,^Node)]),^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$15 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$15,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$15,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$15,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$15,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(Q#n$1^171.31#dt1_$15,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$15,^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$16 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$16,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$16,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$16,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$16,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$16,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(Q#n$1^171.31#dt1_$16,^Node)]),^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$17 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$17,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$17,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$17,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$17,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(Q#n$1^171.31#dt1_$17,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$17,^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$18 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$18,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$18,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$18,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$18,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$18,^Node)]),^Node)) ));
	assume (forall  Q#n$1^171.31#dt1_$19 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node)),^Node)]),^Node))))))) ==> (($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node)) || ($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$19,^Node))) ));
	assume (forall  Q#n$1^171.31#dt1_$20 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$20,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$20,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$20,^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$20,^Node)) ));
	assume true;
	assume (forall  Q#m$1^172.31#dt1_$1 : $ptr :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_12)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_12)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1_$1,^Node)])} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$1,^Node)) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_12)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_12)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1_$1,^Node)]) == $heap($s_$_12)[Node.value][$phys_ptr_cast(Q#m$1^172.31#dt1_$1,^Node)]) ));
	assume (forall  Q#k$1^172.31#tc2_$0 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_12)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^172.31#tc2_$0)} {:weight  10}( (($min.i4 <= Q#k$1^172.31#tc2_$0) && (Q#k$1^172.31#tc2_$0 <= $max.i4)) ==> (((forall  Q#m$1^172.31#dt1_$2 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$2,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$2,^Node)) ==> (!($heap($s_$_12)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1_$2,^Node)] == Q#k$1^172.31#tc2_$0)) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_12)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^172.31#tc2_$0) == 0)) ));
	assume (forall  Q#n$1^173.31#dt1_$1 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$1,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^173.31#dt1_$1,^Node)) && ($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$1,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$1,^Node)),^Node)]),^Node)))))) ==> (($phys_ptr_cast(Q#n$1^173.31#dt1_$1,^Node) == $phys_ptr_cast(P#x,^Node)) || ($phys_ptr_cast(Q#n$1^173.31#dt1_$1,^Node) == $phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node))) ));
	assume (forall  Q#n$1^173.31#dt1_$2 : $ptr, Q#m$1^173.31#dt1_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$2,^Node)),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$0,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$2,^Node)),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$0,^Node)) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^173.31#dt1_$2,^Node)) && ((((($phys_ptr_cast(Q#n$1^173.31#dt1_$2,^Node) == $phys_ptr_cast(L#p_$_1,^Node)) && ($phys_ptr_cast(Q#m$1^173.31#dt1_$0,^Node) == $phys_ptr_cast(P#x,^Node))) || ($phys_ptr_cast(Q#m$1^173.31#dt1_$0,^Node) == $phys_ptr_cast(Q#n$1^173.31#dt1_$2,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(Q#n$1^173.31#dt1_$2,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$0,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(Q#n$1^173.31#dt1_$2,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$0,^Node)))) ));
	assume $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(L#p_$_1,^Node));
	assume !($phys_ptr_cast(L#p_$_1,^Node) == $phys_ptr_cast(P#x,^Node));
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(L#p_$_1,^Node)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(L#p_$_1,^Node)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assume (forall  Q#n$1^176.31#dt1_$0 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^176.31#dt1_$0,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_12)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^176.31#dt1_$0,^Node)) ==> (($phys_ptr_cast(Q#n$1^176.31#dt1_$0,^Node) == $phys_ptr_cast(P#x,^Node)) || (!($heap($s_$_12)[Node.key][$phys_ptr_cast(Q#n$1^176.31#dt1_$0,^Node)] == $heap($s_$_12)[Node.key][$phys_ptr_cast(P#x,^Node)]))) ));
	if ($_$_condition_$0) { goto anon01_LoopDone; } else { goto anon01_LoopBody; }
anon01_LoopDone:
	assume $_$_condition_$0;
	assume $_$_condition_$0 <==> (!true);
	assume !true;
	assume $good_state_ext(#tok$1^167.3,$s_$_12) && $full_stop($s_$_12);
	assume $s_$_19 == $s_$_12;
	goto $#break_11;
anon01_LoopBody:
	assume !$_$_condition_$0;
	assume $_$_condition_$0 <==> (!true);
	assume true;
	assume $modifies($s_$_11,$s_$_12,lambda#22(Tree.R,$s_$_11,P#t,^Tree,P#x,^Node));
	assume ($current_timestamp($s_$_11) <= $current_timestamp($s_$_12)) && $call_transition($s_$_11,$s_$_12);
	assume $good_state_ext(#tok$1^167.3,$s_$_12) && $full_stop($s_$_12);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.res_lambda#6#19,$map_t..ptr_to..^Node.^^bool_to_int(call2formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.prestate#28,$state_to_int(prestate#28),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.owns#26,$ptrset_to_int(owns#26),^$#ptrset);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.staticWrapState#25,$state_to_int(staticWrapState#25),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.prestate#27,$state_to_int(prestate#27),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.res_lambda#5#18,$map_t..ptr_to..^Node.^^bool_to_int(call1formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.res_lambda#4#17,$map_t..^^i4.^^i4_to_int(call3formal_$_$result_$_0),$map_t(^^i4,^^i4));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.assign#13,$ptr_to_int(assign#13_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.assign#12,$ptr_to_int(assign#12_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.prestate#24,$state_to_int(prestate#24_$_0),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.n,$ptr_to_int(L#n_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.x,$ptr_to_int(P#x),$ptr_to(^Node));
	assume true;
	if ($_$_condition_$1) { goto anon02_Then; } else { goto anon02_Else; }
$#break_11:
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#x,^Node),Node.parent)))) && $is_proper($dot($phys_ptr_cast(P#x,^Node),Node.parent))) && ($mutable($s_$_19,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.parent))) && (($timestamp($s_$_19,$emb0($dot($phys_ptr_cast(P#x,^Node),Node.parent))) >= #wrTime$1^134.1) || $in_writes_at(#wrTime$1^134.1,$dot($phys_ptr_cast(P#x,^Node),Node.parent))));
	assume call1formal_$_p_$_0_$6 == $phys_ptr_cast(P#x,^Node);
	assume call2formal_$_v_$_0_$6 == $ptr_to_int($phys_ptr_cast(L#p_$_1,^Node));
	assume ((($f_timestamp($s_$_19) == $f_timestamp($s_$_20)) && ($f_closed($s_$_19) == $f_closed($s_$_20))) && ($f_owner($s_$_19) == $f_owner($s_$_20))) && ($roots($s_$_19) == $roots($s_$_20));
	assume $heap($s_$_20) == $heap($s_$_19)[Node.parent := $heap($s_$_19)[Node.parent][call1formal_$_p_$_0_$6 := call2formal_$_v_$_0_$6]];
	assume ($current_timestamp($s_$_19) < $current_timestamp($s_$_20)) && $call_transition($s_$_19,$s_$_20);
	assume $good_state_ext(#tok$1^198.3,$s_$_20) && $full_stop($s_$_20);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.prestate#43,$state_to_int(prestate#43),^$#state_t);
	assume prestate#43_$_0 == $s_$_20;
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.prestate#43,$state_to_int(prestate#43_$_0),^$#state_t);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.staticWrapState#41,$state_to_int(staticWrapState#41),^$#state_t);
	assume staticWrapState#41_$_0 == $s_$_20;
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.staticWrapState#41,$state_to_int(staticWrapState#41_$_0),^$#state_t);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.owns#42,$ptrset_to_int(owns#42),^$#ptrset);
	assume owns#42_$_0 == $set_empty();
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.owns#42,$ptrset_to_int(owns#42_$_0),^$#ptrset);
	assert  $top_writable($s_$_20,#wrTime$1^134.1,$phys_ptr_cast(P#x,^Node));
	assume $pre_static_wrap($s_$_20);
	assume call0formal_$_o_$_0_$1 == $phys_ptr_cast(P#x,^Node);
	assert  $pre_static_wrap($s_$_20);
	assert  !$is_primitive($field_type($field(call0formal_$_o_$_0_$1)));
	assert  $mutable($s_$_20,call0formal_$_o_$_0_$1);
	assume $is_wrapped($s_$_20,$s_$_21,call0formal_$_o_$_0_$1,owns#42_$_0);
	assume $heap($s_$_21) == $heap($s_$_20)[$f_owns($field_type($field(call0formal_$_o_$_0_$1))) := $heap($s_$_20)[$f_owns($field_type($field(call0formal_$_o_$_0_$1)))][call0formal_$_o_$_0_$1 := $ptrset_to_int(owns#42_$_0)]];
	assume $f_owner($s_$_21) == $f_owner(staticWrapState#41_$_0);
	assume $good_state_ext(#tok$1^199.19,$s_$_21);
	assert  $set_eq($owns($s_$_21,$phys_ptr_cast(P#x,^Node)),$set_empty());
	assume $full_stop($s_$_21);
	assume $local_value_is($s_$_21,#tok$2^0.0,#loc.prestate#44,$state_to_int(prestate#44),^$#state_t);
	assume prestate#44_$_0 == $s_$_21;
	assume $local_value_is($s_$_21,#tok$2^0.0,#loc.prestate#44,$state_to_int(prestate#44_$_0),^$#state_t);
	assume $pre_wrap($s_$_21);
	assert  $top_writable($s_$_21,#wrTime$1^134.1,$phys_ptr_cast(P#t,^Tree));
	assert  (forall  #writes$1^200.19 : $ptr :: {$dont_instantiate(#writes$1^200.19)} ( $owns($s_$_21,$phys_ptr_cast(P#t,^Tree))[#writes$1^200.19] ==> $top_writable($s_$_21,#wrTime$1^134.1,#writes$1^200.19) ));
	assume call0formal_$_o_$_0_$2 == $phys_ptr_cast(P#t,^Tree);
	assert  $pre_wrap($s_$_21);
	assert  !$is_primitive($field_type($field(call0formal_$_o_$_0_$2)));
	assert  $mutable($s_$_21,call0formal_$_o_$_0_$2);
	assert  (forall  p_$223 : $ptr :: {$dont_instantiate(p_$223)} ( $set_in0(p_$223,$owns($s_$_21,call0formal_$_o_$_0_$2)) ==> (((($is(p_$223,$field_type($field(p_$223))) && $is_proper(p_$223)) && ($owner($s_$_21,p_$223) == $me())) && $closed($s_$_21,p_$223)) && (!$is_primitive($field_type($field(p_$223))))) ));
	assume $is_wrapped_dynamic($s_$_21,$s_$_22,call0formal_$_o_$_0_$2);
	assume $good_state_ext(#tok$1^200.19,$s_$_22);
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($null,^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node)))));
	assert  (forall  Q#m$1^82.29#dt1_$11 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$11,^Node))} {:weight  10}( !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$11,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$21 : $ptr, Q#m$1^82.29#dt1_$12 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$21,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$12,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$21,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$21,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$12,^Node)) ==> ($heap($s_$_22)[Node.key][$phys_ptr_cast(Q#m$1^82.29#dt1_$12,^Node)] < $heap($s_$_22)[Node.key][$phys_ptr_cast(Q#n$1^82.29#dt1_$21,^Node)])) ));
	assert  (forall  Q#n$1^82.29#dt1_$22 : $ptr, Q#m$1^82.29#dt1_$13 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$22,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$13,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$22,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$22,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$13,^Node)) ==> ($heap($s_$_22)[Node.key][$phys_ptr_cast(Q#m$1^82.29#dt1_$13,^Node)] > $heap($s_$_22)[Node.key][$phys_ptr_cast(Q#n$1^82.29#dt1_$22,^Node)])) ));
	assert  (forall  Q#m$1^82.29#dt1_$14 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$14,^Node))} {F#mark2($phys_ptr_cast(Q#m$1^82.29#dt1_$14,^Node))} {sk_hack(F#mark2($phys_ptr_cast(Q#m$1^82.29#dt1_$14,^Node)))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$14,^Node)) <==> $owns($s_$_22,$phys_ptr_cast(P#t,^Tree))[$phys_ptr_cast(Q#m$1^82.29#dt1_$14,^Node)] ));
	assert  (forall  Q#n$1^82.29#dt1_$23 : $ptr, Q#m$1^82.29#dt1_$15 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$23,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$15,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$23,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$15,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$15,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$24 : $ptr, Q#m$1^82.29#dt1_$16 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$24,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$16,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$24,^Node)),$phys_ptr_cast(Q#m$1^82.29#dt1_$16,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$24,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$25 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$25,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$25,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$25,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$25,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$25,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(Q#n$1^82.29#dt1_$25,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$26 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$26,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$26,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$26,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$26,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(Q#n$1^82.29#dt1_$26,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$26,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$27 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$27,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$27,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$27,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$27,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$27,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(Q#n$1^82.29#dt1_$27,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$28 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$28,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$28,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$28,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$28,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(Q#n$1^82.29#dt1_$28,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$28,^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$29 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$29,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$29,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$29,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$29,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$29,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^82.29#dt1_$30 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node)),^Node)]),^Node))))))) ==> (($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node)) || ($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^82.29#dt1_$30,^Node))) ));
	assert  (forall  Q#n$1^82.29#dt1_$31 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$31,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$31,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^82.29#dt1_$31,^Node)),$phys_ptr_cast(Q#n$1^82.29#dt1_$31,^Node)) ));
	assert  true;
	assert  (forall  Q#m$1^83.29#dt1_$3 : $ptr :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_22)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_22)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1_$3,^Node)])} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$3,^Node)) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_22)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_22)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1_$3,^Node)]) == $heap($s_$_22)[Node.value][$phys_ptr_cast(Q#m$1^83.29#dt1_$3,^Node)]) ));
	assert  (forall  Q#k$1^83.29#tc2_$1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_22)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^83.29#tc2_$1)} {:weight  10}( (($min.i4 <= Q#k$1^83.29#tc2_$1) && (Q#k$1^83.29#tc2_$1 <= $max.i4)) ==> (((forall  Q#m$1^83.29#dt1_$4 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$4,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^83.29#dt1_$4,^Node)) ==> (!($heap($s_$_22)[Node.key][$phys_ptr_cast(Q#m$1^83.29#dt1_$4,^Node)] == Q#k$1^83.29#tc2_$1)) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_22)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^83.29#tc2_$1) == 0)) ));
	assert  (forall  Q#n$1^84.29#dt1_$3 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$3,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^84.29#dt1_$3,^Node)) && ($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$3,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$3,^Node)),^Node)]),^Node)))))) ==> (($phys_ptr_cast(Q#n$1^84.29#dt1_$3,^Node) == $phys_ptr_cast($null,^Node)) || ($phys_ptr_cast(Q#n$1^84.29#dt1_$3,^Node) == $phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node))) ));
	assert  (forall  Q#n$1^84.29#dt1_$4 : $ptr, Q#m$1^84.29#dt1_$1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$4,^Node)),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^84.29#dt1_$4,^Node)),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$1,^Node)) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^84.29#dt1_$4,^Node)) && ((((($phys_ptr_cast(Q#n$1^84.29#dt1_$4,^Node) == $phys_ptr_cast($null,^Node)) && ($phys_ptr_cast(Q#m$1^84.29#dt1_$1,^Node) == $phys_ptr_cast($null,^Node))) || ($phys_ptr_cast(Q#m$1^84.29#dt1_$1,^Node) == $phys_ptr_cast(Q#n$1^84.29#dt1_$4,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.left][$phys_ptr_cast(Q#n$1^84.29#dt1_$4,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$1,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_22)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_22)[Node.right][$phys_ptr_cast(Q#n$1^84.29#dt1_$4,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^84.29#dt1_$1,^Node)))) ));
	assume $full_stop($s_$_22);
	assert  $position_marker();
	assume $s_$_23 == $s_$_22;
	goto $#exit;
anon02_Then:
	assume $_$_condition_$1;
	assume $_$_condition_$1 <==> true;
	assume true;
	assert  $thread_local($s_$_12,$phys_ptr_cast(P#x,^Node));
	assert  $thread_local($s_$_12,$phys_ptr_cast(L#p_$_1,^Node));
	assume true;
	if ($_$_condition_$2) { goto anon03_Then; } else { goto anon03_Else; }
anon02_Else:
	assume !$_$_condition_$1;
	assume $_$_condition_$1 <==> true;
	assume !true;
	assume $s_$_19 == $s_$_12;
	goto $#break_11;
anon03_Then:
	assume $_$_condition_$2;
	assume $heap($s_$_12)[Node.key][$phys_ptr_cast(P#x,^Node)] < $heap($s_$_12)[Node.key][$phys_ptr_cast(L#p_$_1,^Node)];
	assert  $thread_local($s_$_12,$phys_ptr_cast(L#p_$_1,^Node));
	assume L#n_$_1 == $phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.left][$phys_ptr_cast(L#p_$_1,^Node)]),^Node);
	assume $local_value_is($s_$_12,#tok$1^179.7,#loc.n,$ptr_to_int(L#n_$_1),$ptr_to(^Node));
	assume true;
	if ($_$_condition_$3) { goto anon04_Then; } else { goto anon04_Else; }
anon03_Else:
	assume !$_$_condition_$2;
	assume $heap($s_$_12)[Node.key][$phys_ptr_cast(L#p_$_1,^Node)] <= $heap($s_$_12)[Node.key][$phys_ptr_cast(P#x,^Node)];
	assert  $thread_local($s_$_12,$phys_ptr_cast(P#x,^Node));
	assert  $thread_local($s_$_12,$phys_ptr_cast(L#p_$_1,^Node));
	assume true;
	if ($_$_condition_$4) { goto anon05_Then; } else { goto anon05_Else; }
anon04_Then:
	assume $_$_condition_$3;
	assume $_$_condition_$3 <==> ($phys_ptr_cast(L#n_$_1,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_1,^Node)))));
	assume $phys_ptr_cast(L#n_$_1,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_1,^Node))));
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#30,$ptrset_to_int(owns#30),^$#ptrset);
	assume owns#30_$_0 == $set_empty();
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#30,$ptrset_to_int(owns#30_$_0),^$#ptrset);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#29,$state_to_int(prestate#29),^$#state_t);
	assume prestate#29_$_0 == $s_$_12;
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#29,$state_to_int(prestate#29_$_0),^$#state_t);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#31,$state_to_int(prestate#31),^$#state_t);
	assume prestate#31_$_0 == $s_$_12;
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#31,$state_to_int(prestate#31_$_0),^$#state_t);
	assert  ((($is($phys_ptr_cast(L#p_$_1,^Node),^Node) && $is_proper($phys_ptr_cast(L#p_$_1,^Node))) && ($owner($s_$_12,$phys_ptr_cast(L#p_$_1,^Node)) == $me())) && $closed($s_$_12,$phys_ptr_cast(L#p_$_1,^Node))) && (!$is_primitive(^Node));
	assert  $top_writable($s_$_12,#wrTime$1^168.28,$phys_ptr_cast(L#p_$_1,^Node));
	assume $inv2($s_$_12,$s_$_12,$phys_ptr_cast(L#p_$_1,^Node),^Node);
	assume owns#30_$_0 == $owns($s_$_12,$phys_ptr_cast(L#p_$_1,^Node));
	assume $pre_static_unwrap($s_$_12);
	assume call0formal_$_o_$_0_$5 == $phys_ptr_cast(L#p_$_1,^Node);
	assert  (!$is_claimable($field_type($field(call0formal_$_o_$_0_$5)))) || ($ref_cnt($s_$_12,call0formal_$_o_$_0_$5) == 0);
	assert  $pre_static_unwrap($s_$_12);
	assume $is_unwrapped($s_$_12,$s_$_16,call0formal_$_o_$_0_$5);
	assume $f_owner($s_$_16) == $f_owner(prestate#31_$_0);
	assume $f_timestamp($s_$_16) == $f_timestamp(prestate#31_$_0)[call0formal_$_o_$_0_$5 := $current_timestamp($s_$_12)];
	assume $good_state_ext(#tok$1^181.36,$s_$_16);
	assume $full_stop($s_$_16);
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(L#p_$_1,^Node),Node.left)))) && $is_proper($dot($phys_ptr_cast(L#p_$_1,^Node),Node.left))) && ($mutable($s_$_16,$emb0($dot($phys_ptr_cast(L#p_$_1,^Node),Node.left))) && (($timestamp($s_$_16,$emb0($dot($phys_ptr_cast(L#p_$_1,^Node),Node.left))) >= #wrTime$1^168.28) || $in_writes_at(#wrTime$1^168.28,$dot($phys_ptr_cast(L#p_$_1,^Node),Node.left))));
	assume call1formal_$_p_$_0_$9 == $phys_ptr_cast(L#p_$_1,^Node);
	assume call2formal_$_v_$_0_$9 == $ptr_to_int($phys_ptr_cast(P#x,^Node));
	assume ((($f_timestamp($s_$_16) == $f_timestamp($s_$_17)) && ($f_closed($s_$_16) == $f_closed($s_$_17))) && ($f_owner($s_$_16) == $f_owner($s_$_17))) && ($roots($s_$_16) == $roots($s_$_17));
	assume $heap($s_$_17) == $heap($s_$_16)[Node.left := $heap($s_$_16)[Node.left][call1formal_$_p_$_0_$9 := call2formal_$_v_$_0_$9]];
	assume ($current_timestamp($s_$_16) < $current_timestamp($s_$_17)) && $call_transition($s_$_16,$s_$_17);
	assume $good_state_ext(#tok$1^181.41,$s_$_17) && $full_stop($s_$_17);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.prestate#34,$state_to_int(prestate#34),^$#state_t);
	assume prestate#34_$_0 == $s_$_17;
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.prestate#34,$state_to_int(prestate#34_$_0),^$#state_t);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.staticWrapState#32,$state_to_int(staticWrapState#32),^$#state_t);
	assume staticWrapState#32_$_0 == $s_$_17;
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.staticWrapState#32,$state_to_int(staticWrapState#32_$_0),^$#state_t);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.owns#33,$ptrset_to_int(owns#33),^$#ptrset);
	assume owns#33_$_0 == $set_empty();
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.owns#33,$ptrset_to_int(owns#33_$_0),^$#ptrset);
	assert  $top_writable($s_$_17,#wrTime$1^168.28,$phys_ptr_cast(L#p_$_1,^Node));
	assume $pre_static_wrap($s_$_17);
	assume call0formal_$_o_$_0_$6 == $phys_ptr_cast(L#p_$_1,^Node);
	assert  $pre_static_wrap($s_$_17);
	assert  !$is_primitive($field_type($field(call0formal_$_o_$_0_$6)));
	assert  $mutable($s_$_17,call0formal_$_o_$_0_$6);
	assume $is_wrapped($s_$_17,$s_$_18,call0formal_$_o_$_0_$6,owns#33_$_0);
	assume $heap($s_$_18) == $heap($s_$_17)[$f_owns($field_type($field(call0formal_$_o_$_0_$6))) := $heap($s_$_17)[$f_owns($field_type($field(call0formal_$_o_$_0_$6)))][call0formal_$_o_$_0_$6 := $ptrset_to_int(owns#33_$_0)]];
	assume $f_owner($s_$_18) == $f_owner(staticWrapState#32_$_0);
	assume $good_state_ext(#tok$1^181.36,$s_$_18);
	assert  $set_eq($owns($s_$_18,$phys_ptr_cast(L#p_$_1,^Node)),$set_empty());
	assume $full_stop($s_$_18);
	assume $s_$_19 == $s_$_18;
	goto $#break_11;
anon04_Else:
	assume !$_$_condition_$3;
	assume $_$_condition_$3 <==> ($phys_ptr_cast(L#n_$_1,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_1,^Node)))));
	assume !($phys_ptr_cast(L#n_$_1,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_1,^Node)))));
	assume L#n_$_3 == L#n_$_1;
	goto anon33;
anon05_Then:
	assume $_$_condition_$4;
	assume $heap($s_$_12)[Node.key][$phys_ptr_cast(P#x,^Node)] > $heap($s_$_12)[Node.key][$phys_ptr_cast(L#p_$_1,^Node)];
	assert  $thread_local($s_$_12,$phys_ptr_cast(L#p_$_1,^Node));
	assume L#n_$_2 == $phys_ptr_cast($int_to_ptr($heap($s_$_12)[Node.right][$phys_ptr_cast(L#p_$_1,^Node)]),^Node);
	assume $local_value_is($s_$_12,#tok$1^185.7,#loc.n,$ptr_to_int(L#n_$_2),$ptr_to(^Node));
	assume true;
	if ($_$_condition_$5) { goto anon06_Then; } else { goto anon06_Else; }
anon05_Else:
	assume !$_$_condition_$4;
	assume $heap($s_$_12)[Node.key][$phys_ptr_cast(L#p_$_1,^Node)] >= $heap($s_$_12)[Node.key][$phys_ptr_cast(P#x,^Node)];
	assert  false;
	assume false;
	assume $s_$_25 == $s_$_12;
	goto $exit;
anon33:
	assert  F#doMark($phys_ptr_cast(L#p_$_1,^Node));
	assert  F#doMark($phys_ptr_cast(L#n_$_3,^Node));
	assume F#doMark($phys_ptr_cast(L#p_$_1,^Node)) && F#doMark($phys_ptr_cast(L#n_$_3,^Node));
	assume $local_value_is($s_$_12,#tok$1^194.37,#loc.res_lambda#7#20,$map_t..ptr_to..^Node.^^bool_to_int(res_lambda#7#20_$_0),$map_t($ptr_to(^Node),^^bool));
	assert  $thread_local($s_$_12,$phys_ptr_cast(P#t,^Tree));
	assume call0formal_$_#l1_$_0_$1 == $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(L#n_$_3,^Node));
	assume call1formal_$_#l0_$_0_$1 == $phys_ptr_cast(P#x,^Node);
	assume call2formal_$_$result_$_0_$1 == F#lambda#7(call0formal_$_#l1_$_0_$1,call1formal_$_#l0_$_0_$1);
	assume $call_transition($s_$_12,$s_$_12);
	assume $good_state_ext(#tok$1^194.37,$s_$_12) && $full_stop($s_$_12);
	assume $local_value_is($s_$_12,#tok$1^194.37,#loc.res_lambda#7#20,$map_t..ptr_to..^Node.^^bool_to_int(call2formal_$_$result_$_0_$1),$map_t($ptr_to(^Node),^^bool));
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(P#t,^Tree),Tree.R)))) && $is_proper($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) && ($mutable($s_$_12,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) && (($timestamp($s_$_12,$emb0($dot($phys_ptr_cast(P#t,^Tree),Tree.R))) >= #wrTime$1^168.28) || $in_writes_at(#wrTime$1^168.28,$dot($phys_ptr_cast(P#t,^Tree),Tree.R))));
	assert  $thread_local($s_$_12,$phys_ptr_cast(P#t,^Tree));
	assume call1formal_$_p_$_0_$7 == $phys_ptr_cast(P#t,^Tree);
	assume call2formal_$_v_$_0_$7 == $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_12)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(L#n_$_3,^Node),call2formal_$_$result_$_0_$1));
	assume ((($f_timestamp($s_$_12) == $f_timestamp($s_$_24)) && ($f_closed($s_$_12) == $f_closed($s_$_24))) && ($f_owner($s_$_12) == $f_owner($s_$_24))) && ($roots($s_$_12) == $roots($s_$_24));
	assume $heap($s_$_24) == $heap($s_$_12)[Tree.R := $heap($s_$_12)[Tree.R][call1formal_$_p_$_0_$7 := call2formal_$_v_$_0_$7]];
	assume ($current_timestamp($s_$_12) < $current_timestamp($s_$_24)) && $call_transition($s_$_12,$s_$_24);
	assume $good_state_ext(#tok$1^194.27,$s_$_24) && $full_stop($s_$_24);
	assume L#p_$_2 == $phys_ptr_cast(L#n_$_3,^Node);
	assume $local_value_is($s_$_24,#tok$1^195.5,#loc.p,$ptr_to_int(L#p_$_2),$ptr_to(^Node));
	assume true;
	assert  (forall  Q#p$1^169.32#tc3_$1 : $ptr :: {$owns($s_$_24,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3_$1]} {sk_hack($owns($s_$_24,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3_$1])} {:weight  10}( $owns($s_$_24,$phys_ptr_cast(P#t,^Tree))[Q#p$1^169.32#tc3_$1] ==> ((Q#p$1^169.32#tc3_$1 == $phys_ptr_cast(P#x,^Node)) || (((($is(Q#p$1^169.32#tc3_$1,$field_type($field(Q#p$1^169.32#tc3_$1))) && $is_proper(Q#p$1^169.32#tc3_$1)) && ($owner($s_$_24,Q#p$1^169.32#tc3_$1) == $me())) && $closed($s_$_24,Q#p$1^169.32#tc3_$1)) && (!$is_primitive($field_type($field(Q#p$1^169.32#tc3_$1)))))) ));
	assert  $mutable($s_$_24,$phys_ptr_cast(P#x,^Node));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_11)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_11)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(P#x,^Node)),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(P#x,^Node)));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($null,^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node));
	assert  (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)]),^Node)))));
	assert  (forall  Q#m$1^171.31#dt1_$11 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$11,^Node))} {:weight  10}( !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($null,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$11,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$21 : $ptr, Q#m$1^171.31#dt1_$12 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$21,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$12,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$21,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$21,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$12,^Node)) ==> ($heap($s_$_24)[Node.key][$phys_ptr_cast(Q#m$1^171.31#dt1_$12,^Node)] < $heap($s_$_24)[Node.key][$phys_ptr_cast(Q#n$1^171.31#dt1_$21,^Node)])) ));
	assert  (forall  Q#n$1^171.31#dt1_$22 : $ptr, Q#m$1^171.31#dt1_$13 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$22,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$13,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$22,^Node)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$22,^Node)),^Node)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$13,^Node)) ==> ($heap($s_$_24)[Node.key][$phys_ptr_cast(Q#m$1^171.31#dt1_$13,^Node)] > $heap($s_$_24)[Node.key][$phys_ptr_cast(Q#n$1^171.31#dt1_$22,^Node)])) ));
	assert  (forall  Q#m$1^171.31#dt1_$14 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$14,^Node))} {F#mark2($phys_ptr_cast(Q#m$1^171.31#dt1_$14,^Node))} {sk_hack(F#mark2($phys_ptr_cast(Q#m$1^171.31#dt1_$14,^Node)))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$14,^Node)) <==> $owns($s_$_24,$phys_ptr_cast(P#t,^Tree))[$phys_ptr_cast(Q#m$1^171.31#dt1_$14,^Node)] ));
	assert  (forall  Q#n$1^171.31#dt1_$23 : $ptr, Q#m$1^171.31#dt1_$15 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$23,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$15,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$23,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$15,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$15,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$24 : $ptr, Q#m$1^171.31#dt1_$16 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$24,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$16,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$24,^Node)),$phys_ptr_cast(Q#m$1^171.31#dt1_$16,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$24,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$25 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$25,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$25,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$25,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$25,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$25,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(Q#n$1^171.31#dt1_$25,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$26 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$26,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$26,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$26,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$26,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(Q#n$1^171.31#dt1_$26,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$26,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$27 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$27,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$27,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$27,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$27,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$27,^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(Q#n$1^171.31#dt1_$27,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$28 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$28,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$28,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$28,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$28,^Node)),^Node)]),^Node))))))) ==> ($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(Q#n$1^171.31#dt1_$28,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$28,^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$29 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$29,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$29,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$29,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$29,^Node)),^Node)]),^Node))))))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$29,^Node)]),^Node)) ));
	assert  (forall  Q#n$1^171.31#dt1_$30 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node)) && (!($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node)),^Node)]),^Node))))))) ==> (($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node)) || ($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node)]),^Node)]),^Node) == $phys_ptr_cast(Q#n$1^171.31#dt1_$30,^Node))) ));
	assert  (forall  Q#n$1^171.31#dt1_$31 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$31,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$31,^Node)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(Q#n$1^171.31#dt1_$31,^Node)),$phys_ptr_cast(Q#n$1^171.31#dt1_$31,^Node)) ));
	assert  true;
	assert  (forall  Q#m$1^172.31#dt1_$3 : $ptr :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_24)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_24)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1_$3,^Node)])} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$3,^Node)) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_24)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),$heap($s_$_24)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1_$3,^Node)]) == $heap($s_$_24)[Node.value][$phys_ptr_cast(Q#m$1^172.31#dt1_$3,^Node)]) ));
	assert  (forall  Q#k$1^172.31#tc2_$1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_24)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^172.31#tc2_$1)} {:weight  10}( (($min.i4 <= Q#k$1^172.31#tc2_$1) && (Q#k$1^172.31#tc2_$1 <= $max.i4)) ==> (((forall  Q#m$1^172.31#dt1_$4 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$4,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#m$1^172.31#dt1_$4,^Node)) ==> (!($heap($s_$_24)[Node.key][$phys_ptr_cast(Q#m$1^172.31#dt1_$4,^Node)] == Q#k$1^172.31#tc2_$1)) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($heap($s_$_24)[Tree.abs][$phys_ptr_cast(P#t,^Tree)]),Q#k$1^172.31#tc2_$1) == 0)) ));
	assert  (forall  Q#n$1^173.31#dt1_$3 : $ptr :: {$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$3,^Node)),^Node)} {:weight  10}( ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^173.31#dt1_$3,^Node)) && ($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$3,^Node)),^Node)]),^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.parent][$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$3,^Node)),^Node)]),^Node)))))) ==> (($phys_ptr_cast(Q#n$1^173.31#dt1_$3,^Node) == $phys_ptr_cast(P#x,^Node)) || ($phys_ptr_cast(Q#n$1^173.31#dt1_$3,^Node) == $phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node))) ));
	assert  (forall  Q#n$1^173.31#dt1_$4 : $ptr, Q#m$1^173.31#dt1_$1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$4,^Node)),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast(F#mark($phys_ptr_cast(Q#n$1^173.31#dt1_$4,^Node)),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$1,^Node)) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^173.31#dt1_$4,^Node)) && ((((($phys_ptr_cast(Q#n$1^173.31#dt1_$4,^Node) == $phys_ptr_cast(L#p_$_2,^Node)) && ($phys_ptr_cast(Q#m$1^173.31#dt1_$1,^Node) == $phys_ptr_cast(P#x,^Node))) || ($phys_ptr_cast(Q#m$1^173.31#dt1_$1,^Node) == $phys_ptr_cast(Q#n$1^173.31#dt1_$4,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(Q#n$1^173.31#dt1_$4,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$1,^Node))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(Q#n$1^173.31#dt1_$4,^Node)]),^Node)),$phys_ptr_cast(Q#m$1^173.31#dt1_$1,^Node)))) ));
	assert  $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(L#p_$_2,^Node));
	assert  !($phys_ptr_cast(L#p_$_2,^Node) == $phys_ptr_cast(P#x,^Node));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.left][$phys_ptr_cast(L#p_$_2,^Node)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Node.right][$phys_ptr_cast(L#p_$_2,^Node)]),^Node)),$phys_ptr_cast(P#x,^Node));
	assert  (forall  Q#n$1^176.31#dt1_$1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^176.31#dt1_$1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_24)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_24)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^176.31#dt1_$1,^Node)) ==> (($phys_ptr_cast(Q#n$1^176.31#dt1_$1,^Node) == $phys_ptr_cast(P#x,^Node)) || (!($heap($s_$_24)[Node.key][$phys_ptr_cast(Q#n$1^176.31#dt1_$1,^Node)] == $heap($s_$_24)[Node.key][$phys_ptr_cast(P#x,^Node)]))) ));
	assume false;
	assume $s_$_25 == $s_$_24;
	goto $exit;
anon06_Then:
	assume $_$_condition_$5;
	assume $_$_condition_$5 <==> ($phys_ptr_cast(L#n_$_2,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_2,^Node)))));
	assume $phys_ptr_cast(L#n_$_2,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_2,^Node))));
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#36,$ptrset_to_int(owns#36),^$#ptrset);
	assume owns#36_$_0 == $set_empty();
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#36,$ptrset_to_int(owns#36_$_0),^$#ptrset);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#35,$state_to_int(prestate#35),^$#state_t);
	assume prestate#35_$_0 == $s_$_12;
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#35,$state_to_int(prestate#35_$_0),^$#state_t);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#37,$state_to_int(prestate#37),^$#state_t);
	assume prestate#37_$_0 == $s_$_12;
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#37,$state_to_int(prestate#37_$_0),^$#state_t);
	assert  ((($is($phys_ptr_cast(L#p_$_1,^Node),^Node) && $is_proper($phys_ptr_cast(L#p_$_1,^Node))) && ($owner($s_$_12,$phys_ptr_cast(L#p_$_1,^Node)) == $me())) && $closed($s_$_12,$phys_ptr_cast(L#p_$_1,^Node))) && (!$is_primitive(^Node));
	assert  $top_writable($s_$_12,#wrTime$1^168.28,$phys_ptr_cast(L#p_$_1,^Node));
	assume $inv2($s_$_12,$s_$_12,$phys_ptr_cast(L#p_$_1,^Node),^Node);
	assume owns#36_$_0 == $owns($s_$_12,$phys_ptr_cast(L#p_$_1,^Node));
	assume $pre_static_unwrap($s_$_12);
	assume call0formal_$_o_$_0_$3 == $phys_ptr_cast(L#p_$_1,^Node);
	assert  (!$is_claimable($field_type($field(call0formal_$_o_$_0_$3)))) || ($ref_cnt($s_$_12,call0formal_$_o_$_0_$3) == 0);
	assert  $pre_static_unwrap($s_$_12);
	assume $is_unwrapped($s_$_12,$s_$_13,call0formal_$_o_$_0_$3);
	assume $f_owner($s_$_13) == $f_owner(prestate#37_$_0);
	assume $f_timestamp($s_$_13) == $f_timestamp(prestate#37_$_0)[call0formal_$_o_$_0_$3 := $current_timestamp($s_$_12)];
	assume $good_state_ext(#tok$1^187.36,$s_$_13);
	assume $full_stop($s_$_13);
	assert  ($is_primitive($field_type($field($dot($phys_ptr_cast(L#p_$_1,^Node),Node.right)))) && $is_proper($dot($phys_ptr_cast(L#p_$_1,^Node),Node.right))) && ($mutable($s_$_13,$emb0($dot($phys_ptr_cast(L#p_$_1,^Node),Node.right))) && (($timestamp($s_$_13,$emb0($dot($phys_ptr_cast(L#p_$_1,^Node),Node.right))) >= #wrTime$1^168.28) || $in_writes_at(#wrTime$1^168.28,$dot($phys_ptr_cast(L#p_$_1,^Node),Node.right))));
	assume call1formal_$_p_$_0_$8 == $phys_ptr_cast(L#p_$_1,^Node);
	assume call2formal_$_v_$_0_$8 == $ptr_to_int($phys_ptr_cast(P#x,^Node));
	assume ((($f_timestamp($s_$_13) == $f_timestamp($s_$_14)) && ($f_closed($s_$_13) == $f_closed($s_$_14))) && ($f_owner($s_$_13) == $f_owner($s_$_14))) && ($roots($s_$_13) == $roots($s_$_14));
	assume $heap($s_$_14) == $heap($s_$_13)[Node.right := $heap($s_$_13)[Node.right][call1formal_$_p_$_0_$8 := call2formal_$_v_$_0_$8]];
	assume ($current_timestamp($s_$_13) < $current_timestamp($s_$_14)) && $call_transition($s_$_13,$s_$_14);
	assume $good_state_ext(#tok$1^187.41,$s_$_14) && $full_stop($s_$_14);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.prestate#40,$state_to_int(prestate#40),^$#state_t);
	assume prestate#40_$_0 == $s_$_14;
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.prestate#40,$state_to_int(prestate#40_$_0),^$#state_t);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.staticWrapState#38,$state_to_int(staticWrapState#38),^$#state_t);
	assume staticWrapState#38_$_0 == $s_$_14;
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.staticWrapState#38,$state_to_int(staticWrapState#38_$_0),^$#state_t);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.owns#39,$ptrset_to_int(owns#39),^$#ptrset);
	assume owns#39_$_0 == $set_empty();
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.owns#39,$ptrset_to_int(owns#39_$_0),^$#ptrset);
	assert  $top_writable($s_$_14,#wrTime$1^168.28,$phys_ptr_cast(L#p_$_1,^Node));
	assume $pre_static_wrap($s_$_14);
	assume call0formal_$_o_$_0_$4 == $phys_ptr_cast(L#p_$_1,^Node);
	assert  $pre_static_wrap($s_$_14);
	assert  !$is_primitive($field_type($field(call0formal_$_o_$_0_$4)));
	assert  $mutable($s_$_14,call0formal_$_o_$_0_$4);
	assume $is_wrapped($s_$_14,$s_$_15,call0formal_$_o_$_0_$4,owns#39_$_0);
	assume $heap($s_$_15) == $heap($s_$_14)[$f_owns($field_type($field(call0formal_$_o_$_0_$4))) := $heap($s_$_14)[$f_owns($field_type($field(call0formal_$_o_$_0_$4)))][call0formal_$_o_$_0_$4 := $ptrset_to_int(owns#39_$_0)]];
	assume $f_owner($s_$_15) == $f_owner(staticWrapState#38_$_0);
	assume $good_state_ext(#tok$1^187.36,$s_$_15);
	assert  $set_eq($owns($s_$_15,$phys_ptr_cast(L#p_$_1,^Node)),$set_empty());
	assume $full_stop($s_$_15);
	assume $s_$_19 == $s_$_15;
	goto $#break_11;
anon06_Else:
	assume !$_$_condition_$5;
	assume $_$_condition_$5 <==> ($phys_ptr_cast(L#n_$_2,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_2,^Node)))));
	assume !($phys_ptr_cast(L#n_$_2,^Node) == $phys_ptr_cast($null,$field_type($field($phys_ptr_cast(L#n_$_2,^Node)))));
	assume L#n_$_3 == L#n_$_2;
	goto anon33;
GeneratedUnifiedExit:
	assert  (forall  Q#n$1^139.27#dt1 : $ptr :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_25)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_25)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^139.27#dt1,^Node))} {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^139.27#dt1,^Node))} {:weight  10}( $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s_$_25)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s_$_25)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^139.27#dt1,^Node)) <==> (($phys_ptr_cast(Q#n$1^139.27#dt1,^Node) == $phys_ptr_cast(P#x,^Node)) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($heap($s)[Tree.R][$phys_ptr_cast(P#t,^Tree)]),$phys_ptr_cast($int_to_ptr($heap($s)[Tree.root][$phys_ptr_cast(P#t,^Tree)]),^Node)),$phys_ptr_cast(Q#n$1^139.27#dt1,^Node))) ));
	assert  ($heap($s)[Node.key][$phys_ptr_cast(P#x,^Node)] == $heap($s_$_25)[Node.key][$phys_ptr_cast(P#x,^Node)]) && ($heap($s)[Node.value][$phys_ptr_cast(P#x,^Node)] == $heap($s_$_25)[Node.value][$phys_ptr_cast(P#x,^Node)]);
	assert  ((($is($phys_ptr_cast(P#t,^Tree),^Tree) && $is_proper($phys_ptr_cast(P#t,^Tree))) && ($owner($s_$_25,$phys_ptr_cast(P#t,^Tree)) == $me())) && $closed($s_$_25,$phys_ptr_cast(P#t,^Tree))) && (!$is_primitive(^Tree));
	goto $exit;
}
