;Analysis time until now:    67s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$ptr@To@Bool@@ 0)
(declare-sort $ctype 0)
(declare-sort $field 0)
(declare-sort $flowdata 0)
(declare-sort $kind 0)
(declare-sort $label 0)
(declare-sort $map_t..$ptr_to..^^void.^^bool 0)
(declare-sort $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool 0)
(declare-sort $map_t..$ptr_to..^Node.^^bool 0)
(declare-sort $map_t..^^i4.^^i4 0)
(declare-sort $memory_t 0)
(declare-sort $ptr 0)
(declare-sort $ptrclub 0)
(declare-sort $ptrset 0)
(declare-sort $pure_function 0)
(declare-sort $record 0)
(declare-sort $state 0)
(declare-sort $status 0)
(declare-sort $statusmap_t 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $type_state 0)
(declare-sort $typemap_t 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)

;Functions
(declare-fun $@bf_122 ( $ptrset $ptrset ) Bool)
(declare-fun $@bf_193 ( $state Int ) Bool)
(declare-fun $@bf_196 ( Int ) Bool)
(declare-fun $@bf_27 ( $state $ptr ) Bool)
(declare-fun $@bf_43 ( $state ) Bool)
(declare-fun $@bf_44 ( $state ) Bool)
(declare-fun $@bf_50 ( ) Bool)
(declare-fun $@bf_51 ( ) Bool)
(declare-fun $@bf_52 ( ) Bool)
(declare-fun $@bf_53 ( ) Bool)
(declare-fun $@bf_92 ( $state $ptr $ptr $label ) Bool)
(declare-fun $@classifier@default ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@distTp3 ( ) $ctype)
(declare-fun $@distTp4 ( ) $ctype)
(declare-fun $@distTp5 ( ) $ctype)
(declare-fun $@distTp6 ( ) $ctype)
(declare-fun $@file^?3Cno?20file?3E ( ) $token)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c ( ) $token)
(declare-fun $@loc.owns@47 ( ) $token)
(declare-fun $@loc.owns@50 ( ) $token)
(declare-fun $@loc.owns@53 ( ) $token)
(declare-fun $@loc.owns@56 ( ) $token)
(declare-fun $@loc.owns@59 ( ) $token)
(declare-fun $@loc.owns@62 ( ) $token)
(declare-fun $@loc.owns@65 ( ) $token)
(declare-fun $@loc.owns@68 ( ) $token)
(declare-fun $@loc.prestate@45 ( ) $token)
(declare-fun $@loc.prestate@46 ( ) $token)
(declare-fun $@loc.prestate@48 ( ) $token)
(declare-fun $@loc.prestate@49 ( ) $token)
(declare-fun $@loc.prestate@51 ( ) $token)
(declare-fun $@loc.prestate@52 ( ) $token)
(declare-fun $@loc.prestate@54 ( ) $token)
(declare-fun $@loc.prestate@57 ( ) $token)
(declare-fun $@loc.prestate@58 ( ) $token)
(declare-fun $@loc.prestate@60 ( ) $token)
(declare-fun $@loc.prestate@63 ( ) $token)
(declare-fun $@loc.prestate@66 ( ) $token)
(declare-fun $@loc.prestate@69 ( ) $token)
(declare-fun $@loc.prestate@70 ( ) $token)
(declare-fun $@loc.res_lambda@8@21 ( ) $token)
(declare-fun $@loc.staticWrapState@55 ( ) $token)
(declare-fun $@loc.staticWrapState@61 ( ) $token)
(declare-fun $@loc.staticWrapState@64 ( ) $token)
(declare-fun $@loc.staticWrapState@67 ( ) $token)
(declare-fun $@loc.t ( ) $token)
(declare-fun $@loc.x ( ) $token)
(declare-fun $@loc.y ( ) $token)
(declare-fun $@sk_125 ( $state ) $ptr)
(declare-fun $@sk_126 ( $state ) $ptr)
(declare-fun $@sk_127 ( $state ) $ptr)
(declare-fun $@sk_128 ( $state ) $ptr)
(declare-fun $@sk_142 ( ) $pure_function)
(declare-fun $@sk_143 ( ) $pure_function)
(declare-fun $@sk_144 ( ) $pure_function)
(declare-fun $@sk_145 ( ) $pure_function)
(declare-fun $@sk_198 ( ) Int)
(declare-fun $@sk_199 ( ) Int)
(declare-fun $@sk_200 ( ) Int)
(declare-fun $@sk_201 ( ) Int)
(declare-fun $@sk_202 ( ) $status)
(declare-fun $@sk_203 ( ) Int)
(declare-fun $@sk_204 ( ) Int)
(declare-fun $@sk_205 ( ) $status)
(declare-fun $@sk_206 ( ) Int)
(declare-fun $@sk_207 ( ) $status)
(declare-fun $@sk_208 ( ) Int)
(declare-fun $@sk_209 ( ) Int)
(declare-fun $@sk_210 ( ) $status)
(declare-fun $@sk_211 ( ) Int)
(declare-fun $@sk_212 ( ) Int)
(declare-fun $@sk_213 ( ) $ptr)
(declare-fun $@sk_214 ( ) $ptr)
(declare-fun $@sk_215 ( ) Int)
(declare-fun $@sk_216 ( ) Int)
(declare-fun $@sk_217 ( ) Int)
(declare-fun $@sk_218 ( ) Int)
(declare-fun $@sk_219 ( ) Int)
(declare-fun $@sk_220 ( ) Int)
(declare-fun $@sk_221 ( ) Int)
(declare-fun $@sk_222 ( ) Int)
(declare-fun $@sk_223 ( ) Int)
(declare-fun $@sk_224 ( ) Int)
(declare-fun $@sk_225 ( ) Int)
(declare-fun $@sk_226 ( ) Int)
(declare-fun $@sk_227 ( ) Int)
(declare-fun $@sk_228 ( ) Int)
(declare-fun $@sk_229 ( ) Int)
(declare-fun $@sk_230 ( ) Int)
(declare-fun $@sk_231 ( ) Int)
(declare-fun $@sk_232 ( ) Int)
(declare-fun $@sk_233 ( ) Int)
(declare-fun $@sk_234 ( ) Int)
(declare-fun $@sk_235 ( ) Int)
(declare-fun $@sk_236 ( ) Int)
(declare-fun $@tok$1^203.1 ( ) $token)
(declare-fun $@tok$1^209.3 ( ) $token)
(declare-fun $@tok$1^211.19 ( ) $token)
(declare-fun $@tok$1^212.53 ( ) $token)
(declare-fun $@tok$1^213.3 ( ) $token)
(declare-fun $@tok$1^214.53 ( ) $token)
(declare-fun $@tok$1^216.3 ( ) $token)
(declare-fun $@tok$1^218.34 ( ) $token)
(declare-fun $@tok$1^218.43 ( ) $token)
(declare-fun $@tok$1^219.3 ( ) $token)
(declare-fun $@tok$1^221.5 ( ) $token)
(declare-fun $@tok$1^224.32 ( ) $token)
(declare-fun $@tok$1^226.9 ( ) $token)
(declare-fun $@tok$1^228.9 ( ) $token)
(declare-fun $@tok$1^231.3 ( ) $token)
(declare-fun $@tok$1^232.3 ( ) $token)
(declare-fun $@tok$1^233.19 ( ) $token)
(declare-fun $@tok$1^233.43 ( ) $token)
(declare-fun $@tok$1^239.5 ( ) $token)
(declare-fun $@tok$1^240.15 ( ) $token)
(declare-fun $@tok$1^240.5 ( ) $token)
(declare-fun $@tok$1^243.19 ( ) $token)
(declare-fun $@tok$2^0.0 ( ) $token)
(declare-fun $@wrTime$1^203.1 ( ) Int)
(declare-fun $_and ( $ctype Int Int ) Int)
(declare-fun $_not ( $ctype Int ) Int)
(declare-fun $_or ( $ctype Int Int ) Int)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $_xor ( $ctype Int Int ) Int)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $array_members ( $ptr $ctype Int ) $ptrset)
(declare-fun $array_path ( $field Int ) $field)
(declare-fun $array_path_1 ( $field ) $field)
(declare-fun $array_path_2 ( $field ) Int)
(declare-fun $array_range ( $state $ptr $ctype Int ) $ptrset)
(declare-fun $array_range_no_state ( $ptr $ctype Int ) $ptrset)
(declare-fun $as_in_range_t ( $ctype ) $ctype)
(declare-fun $as_record_record_field ( $field ) $field)
(declare-fun $bv_extract_signed ( Int Int Int Int ) Int)
(declare-fun $bv_extract_unsigned ( Int Int Int Int ) Int)
(declare-fun $bv_update ( Int Int Int Int Int ) Int)
(declare-fun $by_claim ( $state $ptr $ptr $ptr ) $ptr)
(declare-fun $claim_idx ( $ptr $ptr ) Int)
(declare-fun $claim_no ( $state $ptr Int ) $ptr)
(declare-fun $claim_version ( $ptr ) $version)
(declare-fun $current_frame_level ( ) Int)
(declare-fun $current_pure_post_level ( ) Int)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $domain ( $state $ptr ) $ptrset)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $emb ( $state $ptr ) $ptr)
(declare-fun $embedded_array_size ( $field $ctype ) Int)
(declare-fun $extent ( $state $ptr ) $ptrset)
(declare-fun $fetch_from_domain ( $version $ptr ) Int)
(declare-fun $fetch_from_vv ( $vol_version $ptr ) Int)
(declare-fun $field_offset ( $field ) Int)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $frame_level ( $pure_function ) Int)
(declare-fun $full_extent ( $ptr ) $ptrset)
(declare-fun $get_fnptr ( Int $ctype ) $ptr)
(declare-fun $get_fnptr_ref ( Int ) Int)
(declare-fun $get_string_literal ( Int Int ) $ptr)
(declare-fun $ghost_emb ( Int ) $ptr)
(declare-fun $ghost_path ( Int ) $field)
(declare-fun $ghost_ref ( $ptr $field ) Int)
(declare-fun $id_set_disjoint ( $ptr $ptrset $ptrset ) Int)
(declare-fun $idx ( $ptr Int $ctype ) $ptr)
(declare-fun $index_within ( $ptr $ptr ) Int)
(declare-fun $int_to_map_t..^^i4.^^i4 ( Int ) $map_t..^^i4.^^i4)
(declare-fun $int_to_map_t..ptr_to..^^void.^^bool ( Int ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $int_to_map_t..ptr_to..^Node.^^bool ( Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ( Int ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun $int_to_ptr ( Int ) $ptr)
(declare-fun $int_to_ptrset ( Int ) $ptrset)
(declare-fun $int_to_record ( Int ) $record)
(declare-fun $kind_array ( ) $kind)
(declare-fun $kind_composite ( ) $kind)
(declare-fun $kind_of ( $ctype ) $kind)
(declare-fun $kind_primitive ( ) $kind)
(declare-fun $kind_thread ( ) $kind)
(declare-fun $lblset.bot ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $lblset.top ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $map_t..ptr_to..^Node.^^bool_to_int ( $map_t..$ptr_to..^Node.^^bool ) Int)
(declare-fun $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ) Int)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $me_ref ( ) Int)
(declare-fun $mem ( $state $ptr ) Int)
(declare-fun $memory ( $state ) $memory_t)
(declare-fun $memory_allocator_type ( ) $ctype)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $no_claim ( ) $ptr)
(declare-fun $non_null_array_range ( $ptr $ctype Int ) $ptrset)
(declare-fun $non_null_extent ( $state $ptr ) $ptrset)
(declare-fun $non_null_set_singleton ( $ptr ) $ptrset)
(declare-fun $null ( ) $ptr)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $ptrset)
(declare-fun $owns_set_field ( $ctype ) $field)
(declare-fun $ptr ( $ctype Int ) $ptr)
(declare-fun $ptr_level ( $ctype ) Int)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_int ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $ptrclub.addMember ( $ptr $ptrclub ) $ptrclub)
(declare-fun $ptrclub.bound ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.compare ( $ptr $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.construct ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $ptrclub)
(declare-fun $ptrclub.empty ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.members ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrset_to_int ( $ptrset ) Int)
(declare-fun $pure_post_level ( $pure_function ) Int)
(declare-fun $read_ptr_m ( $state $ptr $ctype ) $ptr)
(declare-fun $read_version ( $state $ptr ) $version)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $rec_fetch ( $record $field ) Int)
(declare-fun $rec_update ( $record $field Int ) $record)
(declare-fun $rec_zero ( ) $record)
(declare-fun $record_field_int_kind ( $field ) $ctype)
(declare-fun $ref ( $ptr ) Int)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $release ( $state $state $ptr $ptr ) $state)
(declare-fun $released ( $state $ptr $ptr ) $status)
(declare-fun $s ( ) $state)
(declare-fun $s_$_0 ( ) $state)
(declare-fun $s_$_1 ( ) $state)
(declare-fun $s_$_10 ( ) $state)
(declare-fun $s_$_11 ( ) $state)
(declare-fun $s_$_12 ( ) $state)
(declare-fun $s_$_13 ( ) $state)
(declare-fun $s_$_14 ( ) $state)
(declare-fun $s_$_15 ( ) $state)
(declare-fun $s_$_16 ( ) $state)
(declare-fun $s_$_17 ( ) $state)
(declare-fun $s_$_18 ( ) $state)
(declare-fun $s_$_19 ( ) $state)
(declare-fun $s_$_2 ( ) $state)
(declare-fun $s_$_20 ( ) $state)
(declare-fun $s_$_21 ( ) $state)
(declare-fun $s_$_22 ( ) $state)
(declare-fun $s_$_3 ( ) $state)
(declare-fun $s_$_4 ( ) $state)
(declare-fun $s_$_5 ( ) $state)
(declare-fun $s_$_6 ( ) $state)
(declare-fun $s_$_7 ( ) $state)
(declare-fun $s_$_8 ( ) $state)
(declare-fun $s_$_9 ( ) $state)
(declare-fun $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $select.$map_t..^^i4.^^i4 ( $map_t..^^i4.^^i4 Int ) Int)
(declare-fun $select.flow.data ( $memory_t $ptr ) $flowdata)
(declare-fun $select.flow.label ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.flow.meta ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.mem ( $memory_t $ptr ) Int)
(declare-fun $select.sec.pc ( $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.sm ( $statusmap_t $ptr ) $status)
(declare-fun $select.tm ( $typemap_t $ptr ) $type_state)
(declare-fun $select_range.mem ( $memory_t $ptr Int ) Int)
(declare-fun $set_cardinality ( $ptrset ) Int)
(declare-fun $set_difference ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_empty ( ) $ptrset)
(declare-fun $set_intersection ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_singleton ( $ptr ) $ptrset)
(declare-fun $set_union ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_universe ( ) $ptrset)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $span ( $ptr ) $ptrset)
(declare-fun $spec_ptr_to ( $ctype ) $ctype)
(declare-fun $st ( $state $ptr ) $status)
(declare-fun $st_owner ( $status ) $ptr)
(declare-fun $st_timestamp ( $status ) Int)
(declare-fun $state_to_int ( $state ) Int)
(declare-fun $statusmap ( $state ) $statusmap_t)
(declare-fun $store.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr Bool ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool Int $map_t..$ptr_to..^Node.^^bool ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun $store.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.^^bool Int Bool ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $store.$map_t..^^i4.^^i4 ( $map_t..^^i4.^^i4 Int Int ) $map_t..^^i4.^^i4)
(declare-fun $store.flow.data ( $memory_t $ptr $flowdata ) $memory_t)
(declare-fun $store.flow.label ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.flow.meta ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.mem ( $memory_t $ptr Int ) $memory_t)
(declare-fun $store.sm ( $statusmap_t $ptr $status ) $statusmap_t)
(declare-fun $store.tm ( $typemap_t $ptr $type_state ) $typemap_t)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $take_over ( $state $ptr $ptr ) $state)
(declare-fun $taken_over ( $state $ptr $ptr ) $status)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $ts ( $state $ptr ) $type_state)
(declare-fun $ts_active_option ( $type_state ) $field)
(declare-fun $ts_emb ( $type_state ) $ptr)
(declare-fun $ts_path ( $type_state ) $field)
(declare-fun $typ ( $ptr ) $ctype)
(declare-fun $typemap ( $state ) $typemap_t)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $unchecked_sbits ( Int Int ) Int)
(declare-fun $unchecked_ubits ( Int Int ) Int)
(declare-fun $unchk_add ( $ctype Int Int ) Int)
(declare-fun $unptr_to ( $ctype ) $ctype)
(declare-fun $update_int ( $state $ptr Int ) $state)
(declare-fun $ver_domain ( $version ) $ptrset)
(declare-fun $volatile_span ( $state $ptr ) $ptrset)
(declare-fun $vs_base_ref ( $struct ) Int)
(declare-fun $vs_ctor ( $state $ptr ) $struct)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun $zero.$map_t..$ptr_to..^^void.^^bool ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun $zero.$map_t..$ptr_to..^Node.^^bool ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $zero.$map_t..^^i4.^^i4 ( ) $map_t..^^i4.^^i4)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@state_t ( ) $ctype)
(declare-fun ^$@struct ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^$@thread_id_t ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^f4 ( ) $ctype)
(declare-fun ^^f8 ( ) $ctype)
(declare-fun ^^i1 ( ) $ctype)
(declare-fun ^^i2 ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^i8 ( ) $ctype)
(declare-fun ^^mathint ( ) $ctype)
(declare-fun ^^root_emb ( ) $ctype)
(declare-fun ^^u1 ( ) $ctype)
(declare-fun ^^u2 ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun ^Node ( ) $ctype)
(declare-fun ^Tree ( ) $ctype)
(declare-fun call0formal_$_@l_$_0 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$1 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$2 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$3 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$4 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$5 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$6 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$7 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$8 ( ) $ptr)
(declare-fun call0formal_$_@l_$_0_$9 ( ) $ptr)
(declare-fun call0formal_$_@l2_$_0 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun call0formal_$_p_$_0 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$1 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$2 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$3 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$4 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$5 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$6 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$7 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$8 ( ) $ptr)
(declare-fun call0formal_$_p_$_0_$9 ( ) $ptr)
(declare-fun call1formal_$_@l1_$_0 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun call1formal_$_v_$_0 ( ) Int)
(declare-fun call1formal_$_v_$_0_$1 ( ) Int)
(declare-fun call1formal_$_v_$_0_$2 ( ) Int)
(declare-fun call1formal_$_v_$_0_$3 ( ) Int)
(declare-fun call1formal_$_v_$_0_$4 ( ) Int)
(declare-fun call1formal_$_v_$_0_$5 ( ) Int)
(declare-fun call1formal_$_v_$_0_$6 ( ) Int)
(declare-fun call1formal_$_v_$_0_$7 ( ) Int)
(declare-fun call1formal_$_v_$_0_$8 ( ) Int)
(declare-fun call1formal_$_v_$_0_$9 ( ) Int)
(declare-fun call2formal_$_@l0_$_0 ( ) Int)
(declare-fun call3formal_$_$result_$_0 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun cf@classifier@default ( ) $pure_function)
(declare-fun cf@doMark ( ) $pure_function)
(declare-fun cf@lambda@1 ( ) $pure_function)
(declare-fun cf@lambda@2 ( ) $pure_function)
(declare-fun cf@lambda@3 ( ) $pure_function)
(declare-fun cf@lambda@4 ( ) $pure_function)
(declare-fun cf@lambda@5 ( ) $pure_function)
(declare-fun cf@lambda@6 ( ) $pure_function)
(declare-fun cf@lambda@7 ( ) $pure_function)
(declare-fun cf@lambda@8 ( ) $pure_function)
(declare-fun cf@lambda@9 ( ) $pure_function)
(declare-fun cf@mark ( ) $pure_function)
(declare-fun cf@mark2 ( ) $pure_function)
(declare-fun F@lambda@1 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@2 ( $map_t..$ptr_to..^Node.^^bool ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@3 ( ) $map_t..^^i4.^^i4)
(declare-fun F@lambda@4 ( $map_t..^^i4.^^i4 Int Int ) $map_t..^^i4.^^i4)
(declare-fun F@lambda@5 ( Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@6 ( $map_t..$ptr_to..^Node.^^bool Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@7 ( $map_t..$ptr_to..^Node.^^bool Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@8 ( $map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.^^bool Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@9 ( $map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.^^bool Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@mark ( Int ) Int)
(declare-fun l@public ( ) $label)
(declare-fun L@y ( ) Int)
(declare-fun L@y_$_0 ( ) Int)
(declare-fun MapRead$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr ) Bool)
(declare-fun MapWrite$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr Bool ) $@Map@@$ptr@To@Bool@@)
(declare-fun Node.$owns ( ) $field)
(declare-fun Node.key ( ) $field)
(declare-fun Node.left ( ) $field)
(declare-fun Node.parent ( ) $field)
(declare-fun Node.red ( ) $field)
(declare-fun Node.right ( ) $field)
(declare-fun Node.value ( ) $field)
(declare-fun owns@47 ( ) $ptrset)
(declare-fun owns@47_$_0 ( ) $ptrset)
(declare-fun owns@50 ( ) $ptrset)
(declare-fun owns@50_$_0 ( ) $ptrset)
(declare-fun owns@53 ( ) $ptrset)
(declare-fun owns@53_$_0 ( ) $ptrset)
(declare-fun owns@56 ( ) $ptrset)
(declare-fun owns@56_$_0 ( ) $ptrset)
(declare-fun owns@59 ( ) $ptrset)
(declare-fun owns@59_$_0 ( ) $ptrset)
(declare-fun owns@62 ( ) $ptrset)
(declare-fun owns@62_$_0 ( ) $ptrset)
(declare-fun owns@65 ( ) $ptrset)
(declare-fun owns@65_$_0 ( ) $ptrset)
(declare-fun owns@68 ( ) $ptrset)
(declare-fun owns@68_$_0 ( ) $ptrset)
(declare-fun P@t ( ) Int)
(declare-fun P@x ( ) Int)
(declare-fun prestate@45 ( ) $state)
(declare-fun prestate@45_$_0 ( ) $state)
(declare-fun prestate@46 ( ) $state)
(declare-fun prestate@46_$_0 ( ) $state)
(declare-fun prestate@48 ( ) $state)
(declare-fun prestate@48_$_0 ( ) $state)
(declare-fun prestate@49 ( ) $state)
(declare-fun prestate@49_$_0 ( ) $state)
(declare-fun prestate@51 ( ) $state)
(declare-fun prestate@51_$_0 ( ) $state)
(declare-fun prestate@52 ( ) $state)
(declare-fun prestate@52_$_0 ( ) $state)
(declare-fun prestate@54 ( ) $state)
(declare-fun prestate@54_$_0 ( ) $state)
(declare-fun prestate@57 ( ) $state)
(declare-fun prestate@57_$_0 ( ) $state)
(declare-fun prestate@58 ( ) $state)
(declare-fun prestate@58_$_0 ( ) $state)
(declare-fun prestate@60 ( ) $state)
(declare-fun prestate@60_$_0 ( ) $state)
(declare-fun prestate@63 ( ) $state)
(declare-fun prestate@63_$_0 ( ) $state)
(declare-fun prestate@66 ( ) $state)
(declare-fun prestate@66_$_0 ( ) $state)
(declare-fun prestate@69 ( ) $state)
(declare-fun prestate@69_$_0 ( ) $state)
(declare-fun prestate@70 ( ) $state)
(declare-fun prestate@70_$_0 ( ) $state)
(declare-fun res_lambda@8@21 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun staticWrapState@55 ( ) $state)
(declare-fun staticWrapState@55_$_0 ( ) $state)
(declare-fun staticWrapState@61 ( ) $state)
(declare-fun staticWrapState@61_$_0 ( ) $state)
(declare-fun staticWrapState@64 ( ) $state)
(declare-fun staticWrapState@64_$_0 ( ) $state)
(declare-fun staticWrapState@67 ( ) $state)
(declare-fun staticWrapState@67_$_0 ( ) $state)
(declare-fun Tree.$owns ( ) $field)
(declare-fun Tree.abs ( ) $field)
(declare-fun Tree.R ( ) $field)
(declare-fun Tree.root ( ) $field)

;Predicates
(declare-fun $@condition ( ) Bool)
(declare-fun $@condition_$0 ( ) Bool)
(declare-fun $@condition_$1 ( ) Bool)
(declare-fun $_$_condition ( ) Bool)
(declare-fun $_$_condition_$0 ( ) Bool)
(declare-fun $_$_condition_$1 ( ) Bool)
(declare-fun $account_claim ( $state $ptr $ptr ) Bool)
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $claimed_closed ( $state $ptr ) Bool)
(declare-fun $claims_claim ( $ptr $ptr ) Bool)
(declare-fun $claims_obj ( $ptr $ptr ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $dont_instantiate_state ( $state ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $map_t..$ptr_to..^^void.^^bool ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.^^bool ) Bool)
(declare-fun $eq.$map_t..^^i4.^^i4 ( $map_t..^^i4.^^i4 $map_t..^^i4.^^i4 ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_is_fresh ( $state $state $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $extent_zero ( $state $ptr ) Bool)
(declare-fun $file_name_is ( Int $token ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $function_arg_type ( $pure_function Int $ctype ) Bool)
(declare-fun $function_entry ( $state ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_volatile_owns_set ( $ctype ) Bool)
(declare-fun $in_claim_domain ( $ptr $ptr ) Bool)
(declare-fun $in_domain ( $state $ptr $ptr ) Bool)
(declare-fun $in_domain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_range_phys_ptr ( Int ) Bool)
(declare-fun $in_range_sbits ( Int Int ) Bool)
(declare-fun $in_range_spec_ptr ( Int ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $in_range_ubits ( Int Int ) Bool)
(declare-fun $in_some_owns ( $ptr ) Bool)
(declare-fun $in_vdomain ( $state $ptr $ptr ) Bool)
(declare-fun $in_vdomain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_wrapped_domain ( $state $ptr ) Bool)
(declare-fun $in_writes_at ( Int $ptr ) Bool)
(declare-fun $instantiate_bool ( Bool ) Bool)
(declare-fun $instantiate_int ( Int ) Bool)
(declare-fun $instantiate_ptr ( $ptr ) Bool)
(declare-fun $instantiate_ptrset ( $ptrset ) Bool)
(declare-fun $inv ( $state $ptr $ctype ) Bool)
(declare-fun $inv_lab ( $state $ptr $label ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2_when_closed ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2nt ( $state $state $ptr ) Bool)
(declare-fun $invok_state ( $state ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_approved_by ( $ctype $field $field ) Bool)
(declare-fun $is_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_array_vol_or_nonvol ( $state $ptr $ctype Int Bool ) Bool)
(declare-fun $is_arraytype ( $ctype ) Bool)
(declare-fun $is_base_field ( $field ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_composite ( $ctype ) Bool)
(declare-fun $is_domain_root ( $state $ptr ) Bool)
(declare-fun $is_fnptr_type ( $ctype ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_non_primitive ( $ctype ) Bool)
(declare-fun $is_owner_approved ( $ctype $field ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_primitive_ch ( $ctype ) Bool)
(declare-fun $is_primitive_embedded_array ( $field Int ) Bool)
(declare-fun $is_primitive_embedded_volatile_array ( $field Int $ctype ) Bool)
(declare-fun $is_primitive_non_volatile_field ( $field ) Bool)
(declare-fun $is_record_field ( $ctype $field $ctype ) Bool)
(declare-fun $is_record_type ( $ctype ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $local_value_is ( $state $token $token Int $ctype ) Bool)
(declare-fun $local_value_is_ptr ( $state $token $token $ptr $ctype ) Bool)
(declare-fun $mem_eq ( $state $state $ptr ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $nested_in ( $state $ptr $ptr ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $position_marker ( ) Bool)
(declare-fun $post_unwrap ( $state $state ) Bool)
(declare-fun $pre_static_unwrap ( $state ) Bool)
(declare-fun $pre_static_wrap ( $state ) Bool)
(declare-fun $pre_unwrap ( $state ) Bool)
(declare-fun $pre_wrap ( $state ) Bool)
(declare-fun $program_entry_point ( $state ) Bool)
(declare-fun $program_entry_point_ch ( $state ) Bool)
(declare-fun $rec_base_eq ( Int Int ) Bool)
(declare-fun $rec_eq ( $record $record ) Bool)
(declare-fun $seclbl.bot ( ) Bool)
(declare-fun $seclbl.top ( ) Bool)
(declare-fun $select.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr ) Bool)
(declare-fun $select.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.^^bool Int ) Bool)
(declare-fun $sequential ( $state $state $ptr $ctype ) Bool)
(declare-fun $set_disjoint ( $ptrset $ptrset ) Bool)
(declare-fun $set_eq ( $ptrset $ptrset ) Bool)
(declare-fun $set_in ( $ptr $ptrset ) Bool)
(declare-fun $set_in0 ( $ptr $ptrset ) Bool)
(declare-fun $set_in2 ( $ptr $ptrset ) Bool)
(declare-fun $simple_index ( $ptr $ptr ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $st_closed ( $status ) Bool)
(declare-fun $state_nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $state_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $timestamp_is_now ( $state $ptr ) Bool)
(declare-fun $ts_is_volatile ( $type_state ) Bool)
(declare-fun $ts_typed ( $type_state ) Bool)
(declare-fun $type_code_is ( Int $ctype ) Bool)
(declare-fun $typed ( $state $ptr ) Bool)
(declare-fun $typed2 ( $state $ptr $ctype ) Bool)
(declare-fun $valid_claim ( $state $ptr ) Bool)
(declare-fun $wrapped ( $state $ptr $ctype ) Bool)
(declare-fun F@doMark ( Int ) Bool)
(declare-fun F@mark2 ( Int ) Bool)
(declare-fun is_active_ptrclub ( $ptrclub ) Bool)
(declare-fun sk_hack ( Bool ) Bool)

;Axioms
   (assert (! $position_marker :named ax_0))
   (assert (! ($closed $s ($ptr ^Tree P@t)) :named ax_1))
   (assert (! ($file_name_is 1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c) :named ax_2))
   (assert (! ($file_name_is 2 $@file^?3Cno?20file?3E) :named ax_3))
   (assert (! ($full_stop $s) :named ax_4))
   (assert (! ($function_arg_type cf@classifier@default 0 ($map_t ($ptr_to ^^void) ^^bool)) :named ax_5))
   (assert (! ($function_arg_type cf@doMark 0 ^^bool) :named ax_6))
   (assert (! ($function_arg_type cf@doMark 1 ($ptr_to ^Node)) :named ax_7))
   (assert (! ($function_arg_type cf@lambda@1 0 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_8))
   (assert (! ($function_arg_type cf@lambda@2 0 ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool))) :named ax_9))
   (assert (! ($function_arg_type cf@lambda@2 1 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_10))
   (assert (! ($function_arg_type cf@lambda@3 0 ($map_t ^^i4 ^^i4)) :named ax_11))
   (assert (! ($function_arg_type cf@lambda@4 0 ($map_t ^^i4 ^^i4)) :named ax_12))
   (assert (! ($function_arg_type cf@lambda@4 1 ($map_t ^^i4 ^^i4)) :named ax_13))
   (assert (! ($function_arg_type cf@lambda@4 2 ^^i4) :named ax_14))
   (assert (! ($function_arg_type cf@lambda@4 3 ^^i4) :named ax_15))
   (assert (! ($function_arg_type cf@lambda@5 0 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_16))
   (assert (! ($function_arg_type cf@lambda@5 1 ($ptr_to ^Node)) :named ax_17))
   (assert (! ($function_arg_type cf@lambda@6 0 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_18))
   (assert (! ($function_arg_type cf@lambda@6 1 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_19))
   (assert (! ($function_arg_type cf@lambda@6 2 ($ptr_to ^Node)) :named ax_20))
   (assert (! ($function_arg_type cf@lambda@7 0 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_21))
   (assert (! ($function_arg_type cf@lambda@7 1 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_22))
   (assert (! ($function_arg_type cf@lambda@7 2 ($ptr_to ^Node)) :named ax_23))
   (assert (! ($function_arg_type cf@lambda@8 0 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_24))
   (assert (! ($function_arg_type cf@lambda@8 1 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_25))
   (assert (! ($function_arg_type cf@lambda@8 2 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_26))
   (assert (! ($function_arg_type cf@lambda@8 3 ($ptr_to ^Node)) :named ax_27))
   (assert (! ($function_arg_type cf@lambda@9 0 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_28))
   (assert (! ($function_arg_type cf@lambda@9 1 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_29))
   (assert (! ($function_arg_type cf@lambda@9 2 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_30))
   (assert (! ($function_arg_type cf@lambda@9 3 ($ptr_to ^Node)) :named ax_31))
   (assert (! ($function_arg_type cf@mark 0 ($ptr_to ^Node)) :named ax_32))
   (assert (! ($function_arg_type cf@mark 1 ($ptr_to ^Node)) :named ax_33))
   (assert (! ($function_arg_type cf@mark2 0 ^^bool) :named ax_34))
   (assert (! ($function_arg_type cf@mark2 1 ($ptr_to ^Node)) :named ax_35))
   (assert (! ($function_entry $s) :named ax_36))
   (assert (! ($good_state ($vs_state $struct_zero)) :named ax_37))
   (assert (! ($good_state_ext $@tok$1^203.1 $s) :named ax_38))
   (assert (! ($has_volatile_owns_set ^^claim) :named ax_39))
   (assert (! ($in_range_phys_ptr ($ref ($ptr ^Node P@x))) :named ax_40))
   (assert (! ($in_range_phys_ptr ($ref ($ptr ^Tree P@t))) :named ax_41))
   (assert (! ($in_range_phys_ptr L@y) :named ax_42))
   (assert (! ($in_range_spec_ptr $me_ref) :named ax_43))
   (assert (! ($is ($ptr ^Tree P@t) ^Tree) :named ax_44))
   (assert (! ($is_base_field Node.$owns) :named ax_45))
   (assert (! ($is_base_field Node.key) :named ax_46))
   (assert (! ($is_base_field Node.left) :named ax_47))
   (assert (! ($is_base_field Node.parent) :named ax_48))
   (assert (! ($is_base_field Node.red) :named ax_49))
   (assert (! ($is_base_field Node.right) :named ax_50))
   (assert (! ($is_base_field Node.value) :named ax_51))
   (assert (! ($is_base_field Tree.$owns) :named ax_52))
   (assert (! ($is_base_field Tree.abs) :named ax_53))
   (assert (! ($is_base_field Tree.R) :named ax_54))
   (assert (! ($is_base_field Tree.root) :named ax_55))
   (assert (! ($is_claimable ^^claim) :named ax_56))
   (assert (! ($is_composite ^^claim) :named ax_57))
   (assert (! ($is_composite ^^root_emb) :named ax_58))
   (assert (! ($is_composite ^Node) :named ax_59))
   (assert (! ($is_composite ^Tree) :named ax_60))
   (assert (! ($is_math_type ^$@thread_id) :named ax_61))
   (assert (! ($is_non_primitive ^Tree) :named ax_62))
   (assert (! ($is_primitive ^$@ptrset) :named ax_63))
   (assert (! ($is_primitive ^$@state_t) :named ax_64))
   (assert (! ($is_primitive ^^bool) :named ax_65))
   (assert (! ($is_primitive ^^f4) :named ax_66))
   (assert (! ($is_primitive ^^f8) :named ax_67))
   (assert (! ($is_primitive ^^i1) :named ax_68))
   (assert (! ($is_primitive ^^i2) :named ax_69))
   (assert (! ($is_primitive ^^i4) :named ax_70))
   (assert (! ($is_primitive ^^i8) :named ax_71))
   (assert (! ($is_primitive ^^mathint) :named ax_72))
   (assert (! ($is_primitive ^^u1) :named ax_73))
   (assert (! ($is_primitive ^^u2) :named ax_74))
   (assert (! ($is_primitive ^^u4) :named ax_75))
   (assert (! ($is_primitive ^^u8) :named ax_76))
   (assert (! ($is_primitive ^^void) :named ax_77))
   (assert (! ($is_primitive_non_volatile_field Node.$owns) :named ax_78))
   (assert (! ($is_primitive_non_volatile_field Node.key) :named ax_79))
   (assert (! ($is_primitive_non_volatile_field Node.left) :named ax_80))
   (assert (! ($is_primitive_non_volatile_field Node.parent) :named ax_81))
   (assert (! ($is_primitive_non_volatile_field Node.red) :named ax_82))
   (assert (! ($is_primitive_non_volatile_field Node.right) :named ax_83))
   (assert (! ($is_primitive_non_volatile_field Node.value) :named ax_84))
   (assert (! ($is_primitive_non_volatile_field Tree.$owns) :named ax_85))
   (assert (! ($is_primitive_non_volatile_field Tree.abs) :named ax_86))
   (assert (! ($is_primitive_non_volatile_field Tree.R) :named ax_87))
   (assert (! ($is_primitive_non_volatile_field Tree.root) :named ax_88))
   (assert (! ($is_threadtype ^$@thread_id_t) :named ax_89))
   (assert (! ($local_value_is $s $@tok$1^203.1 $@loc.t ($ptr_to_int ($ptr ^Tree P@t)) ($ptr_to ^Tree)) :named ax_90))
   (assert (! ($local_value_is $s $@tok$1^203.1 $@loc.x ($ptr_to_int ($ptr ^Node P@x)) ($ptr_to ^Node)) :named ax_91))
   (assert (! ($local_value_is_ptr $s $@tok$1^203.1 $@loc.t ($ptr ^Tree P@t) ($ptr_to ^Tree)) :named ax_92))
   (assert (! ($local_value_is_ptr $s $@tok$1^203.1 $@loc.x ($ptr ^Node P@x) ($ptr_to ^Node)) :named ax_93))
   (assert (! ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node P@x))) :named ax_94))
   (assert (! ($type_code_is 2 ^^i4) :named ax_95))
   (assert (! ($type_code_is 3 ($ptr_to ^^void)) :named ax_96))
   (assert (! ($typed $s ($ptr ^Tree P@t)) :named ax_97))
   (assert (! ($typed $s ($ptr ^Tree P@t)) :named ax_98))
   (assert (! (= $@distTp1 ($ptr_to ^Node)) :named ax_99))
   (assert (! (= $@distTp2 ($map_t ($ptr_to ^Node) ^^bool)) :named ax_100))
   (assert (! (= $@distTp3 ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool))) :named ax_101))
   (assert (! (= $@distTp4 ($map_t ^^i4 ^^i4)) :named ax_102))
   (assert (! (= $@distTp5 ($ptr_to ^Tree)) :named ax_103))
   (assert (! (= $@distTp6 ($ptr_to ^^void)) :named ax_104))
   (assert (! (= $@wrTime$1^203.1 ($current_timestamp $s)) :named ax_105))
   (assert (! (= $arch_ptr_size 8) :named ax_106))
   (assert (! (= $arch_spec_ptr_start $max.u8) :named ax_107))
   (assert (! (= $max.i1 127) :named ax_108))
   (assert (! (= $max.i2 32767) :named ax_109))
   (assert (! (= $max.i4 (- (* 65536 32768) 1)) :named ax_110))
   (assert (! (= $max.i8 (- (* (* (* 65536 65536) 65536) 32768) 1)) :named ax_111))
   (assert (! (= $max.u1 255) :named ax_112))
   (assert (! (= $max.u2 65535) :named ax_113))
   (assert (! (= $max.u4 (- (* 65536 65536) 1)) :named ax_114))
   (assert (! (= $max.u8 (- (* (* (* 65536 65536) 65536) 65536) 1)) :named ax_115))
   (assert (! (= $me ($ptr ^$@thread_id_t $me_ref)) :named ax_116))
   (assert (! (= $min.i1 (- 0 128)) :named ax_117))
   (assert (! (= $min.i2 (- 0 32768)) :named ax_118))
   (assert (! (= $min.i4 (- 0 (* 65536 32768))) :named ax_119))
   (assert (! (= $min.i8 (- 0 (* (* (* 65536 65536) 65536) 32768))) :named ax_120))
   (assert (! (= $no_claim ($ptr ^^claim 0)) :named ax_121))
   (assert (! (= $null ($ptr ^^void 0)) :named ax_122))
   (assert (! (= $seclbl.bot false) :named ax_123))
   (assert (! (= $seclbl.top true) :named ax_124))
   (assert (! (= ($_pow2 0) 1) :named ax_125))
   (assert (! (= ($_pow2 1) 2) :named ax_126))
   (assert (! (= ($_pow2 10) 1024) :named ax_127))
   (assert (! (= ($_pow2 11) 2048) :named ax_128))
   (assert (! (= ($_pow2 12) 4096) :named ax_129))
   (assert (! (= ($_pow2 13) 8192) :named ax_130))
   (assert (! (= ($_pow2 14) 16384) :named ax_131))
   (assert (! (= ($_pow2 15) 32768) :named ax_132))
   (assert (! (= ($_pow2 16) 65536) :named ax_133))
   (assert (! (= ($_pow2 17) 131072) :named ax_134))
   (assert (! (= ($_pow2 18) 262144) :named ax_135))
   (assert (! (= ($_pow2 19) 524288) :named ax_136))
   (assert (! (= ($_pow2 2) 4) :named ax_137))
   (assert (! (= ($_pow2 20) 1048576) :named ax_138))
   (assert (! (= ($_pow2 21) 2097152) :named ax_139))
   (assert (! (= ($_pow2 22) 4194304) :named ax_140))
   (assert (! (= ($_pow2 23) 8388608) :named ax_141))
   (assert (! (= ($_pow2 24) 16777216) :named ax_142))
   (assert (! (= ($_pow2 25) 33554432) :named ax_143))
   (assert (! (= ($_pow2 26) 67108864) :named ax_144))
   (assert (! (= ($_pow2 27) 134217728) :named ax_145))
   (assert (! (= ($_pow2 28) 268435456) :named ax_146))
   (assert (! (= ($_pow2 29) 536870912) :named ax_147))
   (assert (! (= ($_pow2 3) 8) :named ax_148))
   (assert (! (= ($_pow2 30) 1073741824) :named ax_149))
   (assert (! (= ($_pow2 31) 2147483648) :named ax_150))
   (assert (! (= ($_pow2 32) 4294967296) :named ax_151))
   (assert (! (= ($_pow2 33) 8589934592) :named ax_152))
   (assert (! (= ($_pow2 34) 17179869184) :named ax_153))
   (assert (! (= ($_pow2 35) 34359738368) :named ax_154))
   (assert (! (= ($_pow2 36) 68719476736) :named ax_155))
   (assert (! (= ($_pow2 37) 137438953472) :named ax_156))
   (assert (! (= ($_pow2 38) 274877906944) :named ax_157))
   (assert (! (= ($_pow2 39) 549755813888) :named ax_158))
   (assert (! (= ($_pow2 4) 16) :named ax_159))
   (assert (! (= ($_pow2 40) 1099511627776) :named ax_160))
   (assert (! (= ($_pow2 41) 2199023255552) :named ax_161))
   (assert (! (= ($_pow2 42) 4398046511104) :named ax_162))
   (assert (! (= ($_pow2 43) 8796093022208) :named ax_163))
   (assert (! (= ($_pow2 44) 17592186044416) :named ax_164))
   (assert (! (= ($_pow2 45) 35184372088832) :named ax_165))
   (assert (! (= ($_pow2 46) 70368744177664) :named ax_166))
   (assert (! (= ($_pow2 47) 140737488355328) :named ax_167))
   (assert (! (= ($_pow2 48) 281474976710656) :named ax_168))
   (assert (! (= ($_pow2 49) 562949953421312) :named ax_169))
   (assert (! (= ($_pow2 5) 32) :named ax_170))
   (assert (! (= ($_pow2 50) 1125899906842624) :named ax_171))
   (assert (! (= ($_pow2 51) 2251799813685248) :named ax_172))
   (assert (! (= ($_pow2 52) 4503599627370496) :named ax_173))
   (assert (! (= ($_pow2 53) 9007199254740992) :named ax_174))
   (assert (! (= ($_pow2 54) 18014398509481984) :named ax_175))
   (assert (! (= ($_pow2 55) 36028797018963968) :named ax_176))
   (assert (! (= ($_pow2 56) 72057594037927936) :named ax_177))
   (assert (! (= ($_pow2 57) 144115188075855872) :named ax_178))
   (assert (! (= ($_pow2 58) 288230376151711744) :named ax_179))
   (assert (! (= ($_pow2 59) 576460752303423488) :named ax_180))
   (assert (! (= ($_pow2 6) 64) :named ax_181))
   (assert (! (= ($_pow2 60) 1152921504606846976) :named ax_182))
   (assert (! (= ($_pow2 61) 2305843009213693952) :named ax_183))
   (assert (! (= ($_pow2 62) 4611686018427387904) :named ax_184))
   (assert (! (= ($_pow2 63) 9223372036854775808) :named ax_185))
   (assert (! (= ($_pow2 7) 128) :named ax_186))
   (assert (! (= ($_pow2 8) 256) :named ax_187))
   (assert (! (= ($_pow2 9) 512) :named ax_188))
   (assert (! (= ($as_in_range_t ^^f4) ^^f4) :named ax_189))
   (assert (! (= ($as_in_range_t ^^f8) ^^f8) :named ax_190))
   (assert (! (= ($as_in_range_t ^^i1) ^^i1) :named ax_191))
   (assert (! (= ($as_in_range_t ^^i2) ^^i2) :named ax_192))
   (assert (! (= ($as_in_range_t ^^i4) ^^i4) :named ax_193))
   (assert (! (= ($as_in_range_t ^^i8) ^^i8) :named ax_194))
   (assert (! (= ($as_in_range_t ^^u1) ^^u1) :named ax_195))
   (assert (! (= ($as_in_range_t ^^u2) ^^u2) :named ax_196))
   (assert (! (= ($as_in_range_t ^^u4) ^^u4) :named ax_197))
   (assert (! (= ($as_in_range_t ^^u8) ^^u8) :named ax_198))
   (assert (! (= ($field_offset Node.key) 4) :named ax_199))
   (assert (! (= ($field_offset Node.left) 16) :named ax_200))
   (assert (! (= ($field_offset Node.parent) 32) :named ax_201))
   (assert (! (= ($field_offset Node.red) 0) :named ax_202))
   (assert (! (= ($field_offset Node.right) 24) :named ax_203))
   (assert (! (= ($field_offset Node.value) 8) :named ax_204))
   (assert (! (= ($field_offset Tree.root) 0) :named ax_205))
   (assert (! (= ($field_parent_type Node.$owns) ^Node) :named ax_206))
   (assert (! (= ($field_parent_type Node.key) ^Node) :named ax_207))
   (assert (! (= ($field_parent_type Node.left) ^Node) :named ax_208))
   (assert (! (= ($field_parent_type Node.parent) ^Node) :named ax_209))
   (assert (! (= ($field_parent_type Node.red) ^Node) :named ax_210))
   (assert (! (= ($field_parent_type Node.right) ^Node) :named ax_211))
   (assert (! (= ($field_parent_type Node.value) ^Node) :named ax_212))
   (assert (! (= ($field_parent_type Tree.$owns) ^Tree) :named ax_213))
   (assert (! (= ($field_parent_type Tree.abs) ^Tree) :named ax_214))
   (assert (! (= ($field_parent_type Tree.R) ^Tree) :named ax_215))
   (assert (! (= ($field_parent_type Tree.root) ^Tree) :named ax_216))
   (assert (! (= ($has_volatile_owns_set ^Node) false) :named ax_217))
   (assert (! (= ($has_volatile_owns_set ^Tree) false) :named ax_218))
   (assert (! (= ($int_to_map_t..^^i4.^^i4 0) $zero.$map_t..^^i4.^^i4) :named ax_219))
   (assert (! (= ($int_to_map_t..ptr_to..^^void.^^bool 0) $zero.$map_t..$ptr_to..^^void.^^bool) :named ax_220))
   (assert (! (= ($int_to_map_t..ptr_to..^Node.^^bool 0) $zero.$map_t..$ptr_to..^Node.^^bool) :named ax_221))
   (assert (! (= ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool 0) $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) :named ax_222))
   (assert (! (= ($is_claimable ^Node) false) :named ax_223))
   (assert (! (= ($is_claimable ^Tree) false) :named ax_224))
   (assert (! (= ($owner $s ($ptr ^Tree P@t)) $me) :named ax_225))
   (assert (! (= ($owner $s ($ptr ^Tree P@t)) $me) :named ax_226))
   (assert (! (= ($owns_set_field ^Node) Node.$owns) :named ax_227))
   (assert (! (= ($owns_set_field ^Tree) Tree.$owns) :named ax_228))
   (assert (! (= ($ptr_level $memory_allocator_type) 0) :named ax_229))
   (assert (! (= ($ptr_level ^$@ptrset) 0) :named ax_230))
   (assert (! (= ($ptr_level ^$@state_t) 0) :named ax_231))
   (assert (! (= ($ptr_level ^$@struct) 0) :named ax_232))
   (assert (! (= ($ptr_level ^$@thread_id_t) 0) :named ax_233))
   (assert (! (= ($ptr_level ^^bool) 0) :named ax_234))
   (assert (! (= ($ptr_level ^^claim) 0) :named ax_235))
   (assert (! (= ($ptr_level ^^f4) 0) :named ax_236))
   (assert (! (= ($ptr_level ^^f8) 0) :named ax_237))
   (assert (! (= ($ptr_level ^^i1) 0) :named ax_238))
   (assert (! (= ($ptr_level ^^i2) 0) :named ax_239))
   (assert (! (= ($ptr_level ^^i4) 0) :named ax_240))
   (assert (! (= ($ptr_level ^^i8) 0) :named ax_241))
   (assert (! (= ($ptr_level ^^mathint) 0) :named ax_242))
   (assert (! (= ($ptr_level ^^root_emb) 0) :named ax_243))
   (assert (! (= ($ptr_level ^^u1) 0) :named ax_244))
   (assert (! (= ($ptr_level ^^u2) 0) :named ax_245))
   (assert (! (= ($ptr_level ^^u4) 0) :named ax_246))
   (assert (! (= ($ptr_level ^^u8) 0) :named ax_247))
   (assert (! (= ($ptr_level ^^void) 0) :named ax_248))
   (assert (! (= ($ptr_level ^Node) 0) :named ax_249))
   (assert (! (= ($ptr_level ^Tree) 0) :named ax_250))
   (assert (! (= ($ptr_to_i1 $null) 0) :named ax_251))
   (assert (! (= ($ptr_to_i2 $null) 0) :named ax_252))
   (assert (! (= ($ptr_to_i4 $null) 0) :named ax_253))
   (assert (! (= ($ptr_to_i8 $null) 0) :named ax_254))
   (assert (! (= ($ptr_to_u1 $null) 0) :named ax_255))
   (assert (! (= ($ptr_to_u2 $null) 0) :named ax_256))
   (assert (! (= ($ptr_to_u4 $null) 0) :named ax_257))
   (assert (! (= ($ptr_to_u8 $null) 0) :named ax_258))
   (assert (! (= ($set_cardinality $set_empty) 0) :named ax_259))
   (assert (! (= ($sizeof ^$@ptrset) 1) :named ax_260))
   (assert (! (= ($sizeof ^$@thread_id_t) 1) :named ax_261))
   (assert (! (= ($sizeof ^^f4) 4) :named ax_262))
   (assert (! (= ($sizeof ^^f8) 8) :named ax_263))
   (assert (! (= ($sizeof ^^i1) 1) :named ax_264))
   (assert (! (= ($sizeof ^^i2) 2) :named ax_265))
   (assert (! (= ($sizeof ^^i4) 4) :named ax_266))
   (assert (! (= ($sizeof ^^i8) 8) :named ax_267))
   (assert (! (= ($sizeof ^^u1) 1) :named ax_268))
   (assert (! (= ($sizeof ^^u2) 2) :named ax_269))
   (assert (! (= ($sizeof ^^u4) 4) :named ax_270))
   (assert (! (= ($sizeof ^^u8) 8) :named ax_271))
   (assert (! (= ($sizeof ^Node) 40) :named ax_272))
   (assert (! (= ($sizeof ^Tree) 8) :named ax_273))
   (assert (! (= ($unchecked ^^u4 (- 0 1)) $max.u4) :named ax_274))
   (assert (! (= ($unchecked ^^u4 (+ $max.u4 1)) 0) :named ax_275))
   (assert (! (= ($unchecked ^^u8 (- 0 1)) $max.u8) :named ax_276))
   (assert (! (= ($unchecked ^^u8 (+ $max.u8 1)) 0) :named ax_277))
   (assert (! (= (and (not $is_stuttering_check) (not $is_unwrap_check)) (and (not $is_stuttering_check) (not $is_unwrap_check))) :named ax_278))
   (assert (! (= true $@bf_50) :named ax_279))
   (assert (! (= true $@bf_50) :named ax_280))
   (assert (! (= true $@bf_51) :named ax_281))
   (assert (! (= true $@bf_51) :named ax_282))
   (assert (! (= true $@bf_53) :named ax_283))
   (assert (! (= true $@bf_53) :named ax_284))
   (assert (! (forall ((|i_1| $ptr)(|m| $@Map@@$ptr@To@Bool@@)(|v| Bool))(!(= v (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i_1 v) i_1)):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i_1 v) i_1)) :qid map_1_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_285))
   (assert (! (forall ((|v_1| Bool)(|m_1| $@Map@@$ptr@To@Bool@@)(|i_2| $ptr)(|j_1| $ptr))(!(=> (not (= j_1 i_2)) (= (MapRead$$@Map@@$ptr@To@Bool@@$ m_1 j_1) (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_2 v_1) j_1))):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_2 v_1) j_1)) :qid map_2_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_286))
   (assert (! (forall( (|#a_$0| $ptrset) (|#b_$2| $ptrset) (|#o_$4| $ptr))(!(= ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|)) (and ($set_in |#o_$4| |#a_$0|) (not ($set_in |#o_$4| |#b_$2|))))  :weight  0 :pattern ( ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|))))) :named ax_287))
   (assert (! (forall( (|#a_$1| $ptrset) (|#b_$3| $ptrset) (|#o_$5| $ptr))(!(= ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|)) (and ($set_in |#o_$5| |#a_$1|) ($set_in |#o_$5| |#b_$3|)))  :weight  0 :pattern ( ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|))))) :named ax_288))
   (assert (! (forall( (|#a_$3| $ptrset) (|#b_$5| $ptrset))(!(=> (forall( (|#o_$7| $ptr))(!(= ($set_in |#o_$7| |#a_$3|) ($set_in |#o_$7| |#b_$5|))  :weight  0 :pattern ( ($dont_instantiate |#o_$7|)))) ($set_eq |#a_$3| |#b_$5|))  :weight  0 :pattern ( ($set_eq |#a_$3| |#b_$5|)))) :named ax_289))
   (assert (! (forall( (|#a_$4| $ptrset) (|#b_$6| $ptrset))(!(=> ($set_eq |#a_$4| |#b_$6|) (= |#a_$4| |#b_$6|))  :weight  0 :pattern ( ($set_eq |#a_$4| |#b_$6|)))) :named ax_290))
   (assert (! (forall( (|#a| $ptrset) (|#b_$1| $ptrset) (|#o_$3| $ptr))(!(= ($set_in |#o_$3| ($set_union |#a| |#b_$1|)) (or ($set_in |#o_$3| |#a|) ($set_in |#o_$3| |#b_$1|)))  :weight  0 :pattern ( ($set_in |#o_$3| ($set_union |#a| |#b_$1|))))) :named ax_291))
   (assert (! (forall( (|#l_$2| $ptr) (|#p_$16| $ptr))(= ($set_in |#p_$16| ($span |#l_$2|)) ($set_in |#p_$16| ($span |#l_$2|)))) :named ax_292))
   (assert (! (forall( (|#l_$3| $ptr) (|#p_$18| $ptr))(= ($set_in |#p_$18| ($full_extent |#l_$3|)) ($set_in |#p_$18| ($full_extent |#l_$3|)))) :named ax_293))
   (assert (! (forall( (|#n_$0| $ctype))(!(= ($unptr_to ($spec_ptr_to |#n_$0|)) |#n_$0|)  :pattern ( ($spec_ptr_to |#n_$0|)))) :named ax_294))
   (assert (! (forall( (|#n_$1| $ctype))(!(= ($sizeof ($ptr_to |#n_$1|)) $arch_ptr_size)  :pattern ( ($ptr_to |#n_$1|)))) :named ax_295))
   (assert (! (forall( (|#n_$2| $ctype))(!(= ($sizeof ($ptr_to |#n_$2|)) $arch_ptr_size)  :pattern ( ($spec_ptr_to |#n_$2|)))) :named ax_296))
   (assert (! (forall( (|#n_$3| $ctype))(!(= ($ptr_level ($ptr_to |#n_$3|)) (+ ($ptr_level |#n_$3|) 17))  :pattern ( ($ptr_to |#n_$3|)))) :named ax_297))
   (assert (! (forall( (|#n_$4| $ctype))(!(= ($ptr_level ($spec_ptr_to |#n_$4|)) (+ ($ptr_level |#n_$4|) 31))  :pattern ( ($spec_ptr_to |#n_$4|)))) :named ax_298))
   (assert (! (forall( (|#n_$5| $ctype))(!($is_primitive ($ptr_to |#n_$5|))  :pattern ( ($ptr_to |#n_$5|)))) :named ax_299))
   (assert (! (forall( (|#n_$6| $ctype))(!($is_primitive ($spec_ptr_to |#n_$6|))  :pattern ( ($spec_ptr_to |#n_$6|)))) :named ax_300))
   (assert (! (forall( (|#n_$7| $ctype))(!(=> ($is_primitive |#n_$7|) (not ($is_claimable |#n_$7|)))  :pattern ( ($is_primitive |#n_$7|)))) :named ax_301))
   (assert (! (forall( (|#n_$8| $ctype))(!(=> ($is_claimable |#n_$8|) ($is_composite |#n_$8|))  :pattern ( ($is_claimable |#n_$8|)))) :named ax_302))
   (assert (! (forall( (|#n| $ctype))(!(= ($unptr_to ($ptr_to |#n|)) |#n|)  :pattern ( ($ptr_to |#n|)))) :named ax_303))
   (assert (! (forall( (|#o_$0| $ptr))(!(not ($set_in |#o_$0| $set_empty))  :weight  0 :pattern ( ($set_in |#o_$0| $set_empty)))) :named ax_304))
   (assert (! (forall( (|#o_$8| $ptr))(!($set_in |#o_$8| $set_universe)  :weight  0 :pattern ( ($set_in |#o_$8| $set_universe)))) :named ax_305))
   (assert (! (forall( (|#o| $ptr) (|#f| $ptr) (|S_$19| $state))(= (and (= ($kind_of ($typ |#f|)) $kind_primitive) (= ($ts_emb ($ts |S_$19| |#f|)) |#o|)) (and (= ($kind_of ($typ |#f|)) $kind_primitive) (= ($ts_emb ($select.tm ($typemap |S_$19|) |#f|)) |#o|)))) :named ax_306))
   (assert (! (forall( (|#p_$0_$0| $ptr) (|S_$0_$0| $state))(= ($ts_emb ($select.tm ($typemap |S_$0_$0|) |#p_$0_$0|)) ($ts_emb ($select.tm ($typemap |S_$0_$0|) |#p_$0_$0|)))) :named ax_307))
   (assert (! (forall( (|#p_$0| $ptr) (|S_$0| $state))(= ($ts_emb ($ts |S_$0| |#p_$0|)) ($ts_emb ($select.tm ($typemap |S_$0|) |#p_$0|)))) :named ax_308))
   (assert (! (forall( (|#p_$1_$0| $ptr) (|S_$1_$0| $state))(= ($ts_path ($select.tm ($typemap |S_$1_$0|) |#p_$1_$0|)) ($ts_path ($select.tm ($typemap |S_$1_$0|) |#p_$1_$0|)))) :named ax_309))
   (assert (! (forall( (|#p_$1| $ptr) (|S_$1| $state))(= ($ts_path ($ts |S_$1| |#p_$1|)) ($ts_path ($select.tm ($typemap |S_$1|) |#p_$1|)))) :named ax_310))
   (assert (! (forall( (|#p_$11| $ptr) (|S_$25| $state))(= (and ($typed |S_$25| |#p_$11|) (not ($ts_is_volatile ($ts |S_$25| |#p_$11|)))) (and ($typed |S_$25| |#p_$11|) (not ($ts_is_volatile ($select.tm ($typemap |S_$25|) |#p_$11|)))))) :named ax_311))
   (assert (! (forall( (|#p_$12_$0| $ptr) (|#l_$0| $ptr) (|S_$32_$0| $state) (|S0_$0| $state))(= (and (and (and (and (and ($typed |S0_$0| |#p_$12_$0|) (and (and (and (and ($closed |S_$32_$0| |#p_$12_$0|) (= ($owner |S_$32_$0| |#p_$12_$0|) $me)) ($typed2 |S_$32_$0| |#p_$12_$0| ($typ |#p_$12_$0|))) (not (= ($kind_of ($typ |#p_$12_$0|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$12_$0|)))) (= ($timestamp |S_$32_$0| |#p_$12_$0|) ($current_timestamp |S_$32_$0|))) ($is_non_primitive ($typ |#p_$12_$0|))) ($set_in |#p_$12_$0| ($owns |S0_$0| |#l_$0|))) (and (= ($owner |S0_$0| |#p_$12_$0|) |#l_$0|) ($closed |S0_$0| |#p_$12_$0|))) (and (and (and (and (and ($typed |S0_$0| |#p_$12_$0|) (and (and (and (and ($closed |S_$32_$0| |#p_$12_$0|) (= ($owner |S_$32_$0| |#p_$12_$0|) $me)) (and ($is |#p_$12_$0| ($typ |#p_$12_$0|)) ($typed |S_$32_$0| |#p_$12_$0|))) (not (= ($kind_of ($typ |#p_$12_$0|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$12_$0|)))) (= ($timestamp |S_$32_$0| |#p_$12_$0|) ($current_timestamp |S_$32_$0|))) ($is_non_primitive ($typ |#p_$12_$0|))) ($set_in |#p_$12_$0| ($owns |S0_$0| |#l_$0|))) (and (= ($owner |S0_$0| |#p_$12_$0|) |#l_$0|) ($closed |S0_$0| |#p_$12_$0|))))) :named ax_312))
   (assert (! (forall( (|#p_$12| $ptr) (|#l| $ptr) (|S_$32| $state) (|S0| $state))(= (and (and (and (and (and ($typed |S0| |#p_$12|) ($wrapped |S_$32| |#p_$12| ($typ |#p_$12|))) ($timestamp_is_now |S_$32| |#p_$12|)) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) ($nested_in |S0| |#p_$12| |#l|)) (and (and (and (and (and ($typed |S0| |#p_$12|) (and (and (and (and ($closed |S_$32| |#p_$12|) (= ($owner |S_$32| |#p_$12|) $me)) ($typed2 |S_$32| |#p_$12| ($typ |#p_$12|))) (not (= ($kind_of ($typ |#p_$12|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$12|)))) (= ($timestamp |S_$32| |#p_$12|) ($current_timestamp |S_$32|))) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) (and (= ($owner |S0| |#p_$12|) |#l|) ($closed |S0| |#p_$12|))))) :named ax_313))
   (assert (! (forall( (|#p_$13| $ptr) (|#l_$0_$0| $ptr) (|S_$33| $state) (|S0_$0_$0| $state))(= (and (and (and (and (and (and ($typed |S0_$0_$0| |#p_$13|) ($wrapped |S_$33| |#p_$13| ($typ |#p_$13|))) ($timestamp_is_now |S_$33| |#p_$13|)) ($is_non_primitive ($typ |#p_$13|))) ($set_in |#p_$13| ($owns |S0_$0_$0| |#l_$0_$0|))) ($nested_in |S0_$0_$0| |#p_$13| |#l_$0_$0|)) (=> ($is_claimable ($typ |#p_$13|)) (= ($ref_cnt |S0_$0_$0| |#p_$13|) ($ref_cnt |S_$33| |#p_$13|)))) (and (and (and (and (and (and ($typed |S0_$0_$0| |#p_$13|) (and (and (and (and ($closed |S_$33| |#p_$13|) (= ($owner |S_$33| |#p_$13|) $me)) ($typed2 |S_$33| |#p_$13| ($typ |#p_$13|))) (not (= ($kind_of ($typ |#p_$13|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$13|)))) (= ($timestamp |S_$33| |#p_$13|) ($current_timestamp |S_$33|))) ($is_non_primitive ($typ |#p_$13|))) ($set_in |#p_$13| ($owns |S0_$0_$0| |#l_$0_$0|))) (and (= ($owner |S0_$0_$0| |#p_$13|) |#l_$0_$0|) ($closed |S0_$0_$0| |#p_$13|))) (=> ($is_claimable ($typ |#p_$13|)) (= ($ref_cnt |S0_$0_$0| |#p_$13|) ($ref_cnt |S_$33| |#p_$13|)))))) :named ax_314))
   (assert (! (forall( (|#p_$14| $ptr) (|#l_$1| $ptr) (|S_$34| $state))(= ($set_in |#p_$14| ($owns |S_$34| |#l_$1|)) ($set_in |#p_$14| ($owns |S_$34| |#l_$1|)))) :named ax_315))
   (assert (! (forall( (|#p_$17_$0| $ptr))(= ($full_extent |#p_$17_$0|) ($full_extent |#p_$17_$0|))) :named ax_316))
   (assert (! (forall( (|#p_$17| $ptr))(= ($full_extent |#p_$17|) ($full_extent |#p_$17|))) :named ax_317))
   (assert (! (forall( (|#p_$19| $ptr) (|#t_$7| $ctype))(!(= ($is |#p_$19| |#t_$7|) (= ($typ |#p_$19|) |#t_$7|))  :weight  0)) :named ax_318))
   (assert (! (forall( (|#p_$20| $ptr) (|#t_$8| $ctype))(!(=> ($is |#p_$20| |#t_$8|) (= |#p_$20| ($ptr |#t_$8| ($ref |#p_$20|))))  :pattern ( ($is |#p_$20| |#t_$8|)))) :named ax_319))
   (assert (! (forall( (|#p_$21| $ptr) (|t_$20| $ctype))(!(= ($dot |#p_$21| ($owns_set_field |t_$20|)) ($ptr ^$@ptrset ($ghost_ref |#p_$21| ($owns_set_field |t_$20|))))  :pattern ( ($dot |#p_$21| ($owns_set_field |t_$20|))))) :named ax_320))
   (assert (! (forall( (|#p_$32| $ptr) (|#i_$0| Int) (|#t_$16| $ctype))(!(and ($extent_hint ($idx |#p_$32| |#i_$0| |#t_$16|) |#p_$32|) (= ($idx |#p_$32| |#i_$0| |#t_$16|) ($ptr |#t_$16| (+ ($ref |#p_$32|) (* |#i_$0| ($sizeof |#t_$16|))))))  :pattern ( ($idx |#p_$32| |#i_$0| |#t_$16|)))) :named ax_321))
   (assert (! (forall( (|#p_$34| $ptr) (|#s1_$12| $state) (|#s2_$10| $state))(!(= ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^Node) (and (and (and (and (and (and (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.$owns)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.$owns))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.red)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.red)))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.key)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.key)))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.value)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.value)))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.left)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.left)))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.right)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.right)))) (= ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| Node.parent)) ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| Node.parent)))))  :pattern ( ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^Node)))) :named ax_322))
   (assert (! (forall( (|#p_$35| $ptr) (|#s1_$13| $state) (|#s2_$11| $state))(!(= ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^Node) (and (and (and (and (and (and (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.$owns)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.$owns))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.red)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.red)))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.key)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.key)))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.value)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.value)))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.left)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.left)))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.right)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.right)))) (= ($select.mem ($memory |#s1_$13|) ($dot |#p_$35| Node.parent)) ($select.mem ($memory |#s2_$11|) ($dot |#p_$35| Node.parent)))))  :pattern ( ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^Node)))) :named ax_323))
   (assert (! (forall( (|#p_$36| $ptr))(!(=> ($is |#p_$36| ^Node) (and (= ($dot |#p_$36| Node.$owns) ($ptr ^$@ptrset ($ghost_ref |#p_$36| Node.$owns))) ($extent_hint ($dot |#p_$36| Node.$owns) |#p_$36|)))  :pattern ( ($dot |#p_$36| Node.$owns)))) :named ax_324))
   (assert (! (forall( (|#p_$37| $ptr) (|#s_$1| $state))(!(=> (and ($is |#p_$37| ^Node) ($typed |#s_$1| |#p_$37|)) (and (and (and (and ($is ($dot |#p_$37| Node.$owns) ^$@ptrset) ($typed |#s_$1| ($dot |#p_$37| Node.$owns))) (= ($ts_emb ($ts |#s_$1| ($dot |#p_$37| Node.$owns))) |#p_$37|)) (= ($ts_path ($ts |#s_$1| ($dot |#p_$37| Node.$owns))) Node.$owns)) (= ($ts_is_volatile ($ts |#s_$1| ($dot |#p_$37| Node.$owns))) false)))  :pattern ( ($select.tm ($typemap |#s_$1|) ($dot |#p_$37| Node.$owns))) :pattern ( ($select.sm ($statusmap |#s_$1|) ($dot |#p_$37| Node.$owns))))) :named ax_325))
   (assert (! (forall( (|#p_$38| $ptr))(!(=> ($is |#p_$38| ^Node) (and (= ($dot |#p_$38| Node.red) ($ptr ^^bool (+ ($ref |#p_$38|) 0))) ($extent_hint ($dot |#p_$38| Node.red) |#p_$38|)))  :pattern ( ($dot |#p_$38| Node.red)))) :named ax_326))
   (assert (! (forall( (|#p_$39| $ptr) (|#s_$2| $state))(!(=> (and ($is |#p_$39| ^Node) ($typed |#s_$2| |#p_$39|)) (and (and (and (and ($is ($dot |#p_$39| Node.red) ^^bool) ($typed |#s_$2| ($dot |#p_$39| Node.red))) (= ($ts_emb ($ts |#s_$2| ($dot |#p_$39| Node.red))) |#p_$39|)) (= ($ts_path ($ts |#s_$2| ($dot |#p_$39| Node.red))) Node.red)) (= ($ts_is_volatile ($ts |#s_$2| ($dot |#p_$39| Node.red))) false)))  :pattern ( ($select.tm ($typemap |#s_$2|) ($dot |#p_$39| Node.red))) :pattern ( ($select.sm ($statusmap |#s_$2|) ($dot |#p_$39| Node.red))))) :named ax_327))
   (assert (! (forall( (|#p_$40| $ptr))(!(=> ($is |#p_$40| ^Node) (and (= ($dot |#p_$40| Node.key) ($ptr ^^i4 (+ ($ref |#p_$40|) 4))) ($extent_hint ($dot |#p_$40| Node.key) |#p_$40|)))  :pattern ( ($dot |#p_$40| Node.key)))) :named ax_328))
   (assert (! (forall( (|#p_$41| $ptr) (|#s_$3| $state))(!(=> (and ($is |#p_$41| ^Node) ($typed |#s_$3| |#p_$41|)) (and (and (and (and ($is ($dot |#p_$41| Node.key) ^^i4) ($typed |#s_$3| ($dot |#p_$41| Node.key))) (= ($ts_emb ($ts |#s_$3| ($dot |#p_$41| Node.key))) |#p_$41|)) (= ($ts_path ($ts |#s_$3| ($dot |#p_$41| Node.key))) Node.key)) (= ($ts_is_volatile ($ts |#s_$3| ($dot |#p_$41| Node.key))) false)))  :pattern ( ($select.tm ($typemap |#s_$3|) ($dot |#p_$41| Node.key))) :pattern ( ($select.sm ($statusmap |#s_$3|) ($dot |#p_$41| Node.key))))) :named ax_329))
   (assert (! (forall( (|#p_$42| $ptr))(!(=> ($is |#p_$42| ^Node) (and (= ($dot |#p_$42| Node.value) ($ptr ^^i4 (+ ($ref |#p_$42|) 8))) ($extent_hint ($dot |#p_$42| Node.value) |#p_$42|)))  :pattern ( ($dot |#p_$42| Node.value)))) :named ax_330))
   (assert (! (forall( (|#p_$43| $ptr) (|#s_$4| $state))(!(=> (and ($is |#p_$43| ^Node) ($typed |#s_$4| |#p_$43|)) (and (and (and (and ($is ($dot |#p_$43| Node.value) ^^i4) ($typed |#s_$4| ($dot |#p_$43| Node.value))) (= ($ts_emb ($ts |#s_$4| ($dot |#p_$43| Node.value))) |#p_$43|)) (= ($ts_path ($ts |#s_$4| ($dot |#p_$43| Node.value))) Node.value)) (= ($ts_is_volatile ($ts |#s_$4| ($dot |#p_$43| Node.value))) false)))  :pattern ( ($select.tm ($typemap |#s_$4|) ($dot |#p_$43| Node.value))) :pattern ( ($select.sm ($statusmap |#s_$4|) ($dot |#p_$43| Node.value))))) :named ax_331))
   (assert (! (forall( (|#p_$44| $ptr))(!(=> ($is |#p_$44| ^Node) (and (= ($dot |#p_$44| Node.left) ($ptr ($ptr_to ^Node) (+ ($ref |#p_$44|) 16))) ($extent_hint ($dot |#p_$44| Node.left) |#p_$44|)))  :pattern ( ($dot |#p_$44| Node.left)))) :named ax_332))
   (assert (! (forall( (|#p_$45| $ptr) (|#s_$5| $state))(!(=> (and ($is |#p_$45| ^Node) ($typed |#s_$5| |#p_$45|)) (and (and (and (and ($is ($dot |#p_$45| Node.left) ($ptr_to ^Node)) ($typed |#s_$5| ($dot |#p_$45| Node.left))) (= ($ts_emb ($ts |#s_$5| ($dot |#p_$45| Node.left))) |#p_$45|)) (= ($ts_path ($ts |#s_$5| ($dot |#p_$45| Node.left))) Node.left)) (= ($ts_is_volatile ($ts |#s_$5| ($dot |#p_$45| Node.left))) false)))  :pattern ( ($select.tm ($typemap |#s_$5|) ($dot |#p_$45| Node.left))) :pattern ( ($select.sm ($statusmap |#s_$5|) ($dot |#p_$45| Node.left))))) :named ax_333))
   (assert (! (forall( (|#p_$46| $ptr))(!(=> ($is |#p_$46| ^Node) (and (= ($dot |#p_$46| Node.right) ($ptr ($ptr_to ^Node) (+ ($ref |#p_$46|) 24))) ($extent_hint ($dot |#p_$46| Node.right) |#p_$46|)))  :pattern ( ($dot |#p_$46| Node.right)))) :named ax_334))
   (assert (! (forall( (|#p_$47| $ptr) (|#s_$6| $state))(!(=> (and ($is |#p_$47| ^Node) ($typed |#s_$6| |#p_$47|)) (and (and (and (and ($is ($dot |#p_$47| Node.right) ($ptr_to ^Node)) ($typed |#s_$6| ($dot |#p_$47| Node.right))) (= ($ts_emb ($ts |#s_$6| ($dot |#p_$47| Node.right))) |#p_$47|)) (= ($ts_path ($ts |#s_$6| ($dot |#p_$47| Node.right))) Node.right)) (= ($ts_is_volatile ($ts |#s_$6| ($dot |#p_$47| Node.right))) false)))  :pattern ( ($select.tm ($typemap |#s_$6|) ($dot |#p_$47| Node.right))) :pattern ( ($select.sm ($statusmap |#s_$6|) ($dot |#p_$47| Node.right))))) :named ax_335))
   (assert (! (forall( (|#p_$48| $ptr))(!(=> ($is |#p_$48| ^Node) (and (= ($dot |#p_$48| Node.parent) ($ptr ($ptr_to ^Node) (+ ($ref |#p_$48|) 32))) ($extent_hint ($dot |#p_$48| Node.parent) |#p_$48|)))  :pattern ( ($dot |#p_$48| Node.parent)))) :named ax_336))
   (assert (! (forall( (|#p_$49| $ptr) (|#s_$7| $state))(!(=> (and ($is |#p_$49| ^Node) ($typed |#s_$7| |#p_$49|)) (and (and (and (and ($is ($dot |#p_$49| Node.parent) ($ptr_to ^Node)) ($typed |#s_$7| ($dot |#p_$49| Node.parent))) (= ($ts_emb ($ts |#s_$7| ($dot |#p_$49| Node.parent))) |#p_$49|)) (= ($ts_path ($ts |#s_$7| ($dot |#p_$49| Node.parent))) Node.parent)) (= ($ts_is_volatile ($ts |#s_$7| ($dot |#p_$49| Node.parent))) false)))  :pattern ( ($select.tm ($typemap |#s_$7|) ($dot |#p_$49| Node.parent))) :pattern ( ($select.sm ($statusmap |#s_$7|) ($dot |#p_$49| Node.parent))))) :named ax_337))
   (assert (! (forall( (|#p_$51| $ptr) (|#s1_$18| $state) (|#s2_$15| $state))(!(= ($state_spans_the_same |#s1_$18| |#s2_$15| |#p_$51| ^Tree) (and (and (and (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$51| Tree.$owns)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$51| Tree.$owns))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$51| Tree.root)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$51| Tree.root)))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$51| Tree.abs)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$51| Tree.abs)))) (= ($select.mem ($memory |#s1_$18|) ($dot |#p_$51| Tree.R)) ($select.mem ($memory |#s2_$15|) ($dot |#p_$51| Tree.R)))))  :pattern ( ($state_spans_the_same |#s1_$18| |#s2_$15| |#p_$51| ^Tree)))) :named ax_338))
   (assert (! (forall( (|#p_$52| $ptr) (|#s1_$19| $state) (|#s2_$16| $state))(!(= ($state_nonvolatile_spans_the_same |#s1_$19| |#s2_$16| |#p_$52| ^Tree) (and (and (and (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$52| Tree.$owns)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$52| Tree.$owns))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$52| Tree.root)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$52| Tree.root)))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$52| Tree.abs)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$52| Tree.abs)))) (= ($select.mem ($memory |#s1_$19|) ($dot |#p_$52| Tree.R)) ($select.mem ($memory |#s2_$16|) ($dot |#p_$52| Tree.R)))))  :pattern ( ($state_nonvolatile_spans_the_same |#s1_$19| |#s2_$16| |#p_$52| ^Tree)))) :named ax_339))
   (assert (! (forall( (|#p_$53| $ptr))(!(=> ($is |#p_$53| ^Tree) (and (= ($dot |#p_$53| Tree.$owns) ($ptr ^$@ptrset ($ghost_ref |#p_$53| Tree.$owns))) ($extent_hint ($dot |#p_$53| Tree.$owns) |#p_$53|)))  :pattern ( ($dot |#p_$53| Tree.$owns)))) :named ax_340))
   (assert (! (forall( (|#p_$54| $ptr) (|#s_$10| $state))(!(=> (and ($is |#p_$54| ^Tree) ($typed |#s_$10| |#p_$54|)) (and (and (and (and ($is ($dot |#p_$54| Tree.$owns) ^$@ptrset) ($typed |#s_$10| ($dot |#p_$54| Tree.$owns))) (= ($ts_emb ($ts |#s_$10| ($dot |#p_$54| Tree.$owns))) |#p_$54|)) (= ($ts_path ($ts |#s_$10| ($dot |#p_$54| Tree.$owns))) Tree.$owns)) (= ($ts_is_volatile ($ts |#s_$10| ($dot |#p_$54| Tree.$owns))) false)))  :pattern ( ($select.tm ($typemap |#s_$10|) ($dot |#p_$54| Tree.$owns))) :pattern ( ($select.sm ($statusmap |#s_$10|) ($dot |#p_$54| Tree.$owns))))) :named ax_341))
   (assert (! (forall( (|#p_$55| $ptr))(!(=> ($is |#p_$55| ^Tree) (and (= ($dot |#p_$55| Tree.root) ($ptr ($ptr_to ^Node) (+ ($ref |#p_$55|) 0))) ($extent_hint ($dot |#p_$55| Tree.root) |#p_$55|)))  :pattern ( ($dot |#p_$55| Tree.root)))) :named ax_342))
   (assert (! (forall( (|#p_$56| $ptr) (|#s_$11| $state))(!(=> (and ($is |#p_$56| ^Tree) ($typed |#s_$11| |#p_$56|)) (and (and (and (and ($is ($dot |#p_$56| Tree.root) ($ptr_to ^Node)) ($typed |#s_$11| ($dot |#p_$56| Tree.root))) (= ($ts_emb ($ts |#s_$11| ($dot |#p_$56| Tree.root))) |#p_$56|)) (= ($ts_path ($ts |#s_$11| ($dot |#p_$56| Tree.root))) Tree.root)) (= ($ts_is_volatile ($ts |#s_$11| ($dot |#p_$56| Tree.root))) false)))  :pattern ( ($select.tm ($typemap |#s_$11|) ($dot |#p_$56| Tree.root))) :pattern ( ($select.sm ($statusmap |#s_$11|) ($dot |#p_$56| Tree.root))))) :named ax_343))
   (assert (! (forall( (|#p_$57| $ptr))(!(=> ($is |#p_$57| ^Tree) (and (= ($dot |#p_$57| Tree.abs) ($ptr ($map_t ^^i4 ^^i4) ($ghost_ref |#p_$57| Tree.abs))) ($extent_hint ($dot |#p_$57| Tree.abs) |#p_$57|)))  :pattern ( ($dot |#p_$57| Tree.abs)))) :named ax_344))
   (assert (! (forall( (|#p_$58| $ptr) (|#s_$12| $state))(!(=> (and ($is |#p_$58| ^Tree) ($typed |#s_$12| |#p_$58|)) (and (and (and (and ($is ($dot |#p_$58| Tree.abs) ($map_t ^^i4 ^^i4)) ($typed |#s_$12| ($dot |#p_$58| Tree.abs))) (= ($ts_emb ($ts |#s_$12| ($dot |#p_$58| Tree.abs))) |#p_$58|)) (= ($ts_path ($ts |#s_$12| ($dot |#p_$58| Tree.abs))) Tree.abs)) (= ($ts_is_volatile ($ts |#s_$12| ($dot |#p_$58| Tree.abs))) false)))  :pattern ( ($select.tm ($typemap |#s_$12|) ($dot |#p_$58| Tree.abs))) :pattern ( ($select.sm ($statusmap |#s_$12|) ($dot |#p_$58| Tree.abs))))) :named ax_345))
   (assert (! (forall( (|#p_$59| $ptr))(!(=> ($is |#p_$59| ^Tree) (and (= ($dot |#p_$59| Tree.R) ($ptr ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)) ($ghost_ref |#p_$59| Tree.R))) ($extent_hint ($dot |#p_$59| Tree.R) |#p_$59|)))  :pattern ( ($dot |#p_$59| Tree.R)))) :named ax_346))
   (assert (! (forall( (|#p_$60| $ptr) (|#s_$13| $state))(!(=> (and ($is |#p_$60| ^Tree) ($typed |#s_$13| |#p_$60|)) (and (and (and (and ($is ($dot |#p_$60| Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool))) ($typed |#s_$13| ($dot |#p_$60| Tree.R))) (= ($ts_emb ($ts |#s_$13| ($dot |#p_$60| Tree.R))) |#p_$60|)) (= ($ts_path ($ts |#s_$13| ($dot |#p_$60| Tree.R))) Tree.R)) (= ($ts_is_volatile ($ts |#s_$13| ($dot |#p_$60| Tree.R))) false)))  :pattern ( ($select.tm ($typemap |#s_$13|) ($dot |#p_$60| Tree.R))) :pattern ( ($select.sm ($statusmap |#s_$13|) ($dot |#p_$60| Tree.R))))) :named ax_347))
   (assert (! (forall( (|#p_$61| $ptr))(!(= ($in_writes_at $@wrTime$1^203.1 |#p_$61|) (= |#p_$61| ($ptr ^Tree P@t)))  :pattern ( ($in_writes_at $@wrTime$1^203.1 |#p_$61|)))) :named ax_348))
   (assert (! (forall( (|#p2_$0_$0| $ptr) (|#p1_$0_$0| $ptr))(= ($set_in |#p1_$0_$0| ($full_extent |#p2_$0_$0|)) ($set_in |#p1_$0_$0| ($full_extent |#p2_$0_$0|)))) :named ax_349))
   (assert (! (forall( (|#p2_$0| $ptr) (|#p1_$0| $ptr))(= ($set_in |#p1_$0| ($full_extent |#p2_$0|)) ($set_in |#p1_$0| ($full_extent |#p2_$0|)))) :named ax_350))
   (assert (! (forall( (|#p2_$1| $ptr) (|#p1_$1| $ptr) (|S_$22_$0| $state))(= ($set_in |#p1_$1| ($extent |S_$22_$0| |#p2_$1|)) ($set_in |#p1_$1| ($extent |S_$22_$0| |#p2_$1|)))) :named ax_351))
   (assert (! (forall( (|#p2| $ptr) (|#p1| $ptr) (|S_$22| $state))(= ($set_in |#p1| ($extent |S_$22| |#p2|)) ($set_in |#p1| ($extent |S_$22| |#p2|)))) :named ax_352))
   (assert (! (forall( (|#q_$2| $ptr) (|#r_$16| Int))(!(= ($set_in |#q_$2| ($full_extent ($ptr ^Node |#r_$16|))) (or (or (or (or (or (or (or (= |#q_$2| ($ptr ^Node |#r_$16|)) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.$owns))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.red))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.key))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.value))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.left))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.right))) (= |#q_$2| ($dot ($ptr ^Node |#r_$16|) Node.parent))))  :pattern ( ($set_in |#q_$2| ($full_extent ($ptr ^Node |#r_$16|)))))) :named ax_353))
   (assert (! (forall( (|#q_$5| $ptr) (|#r_$19| Int))(!(= ($set_in |#q_$5| ($span ($ptr ^Node |#r_$19|))) (or (or (or (or (or (or (or (= |#q_$5| ($ptr ^Node |#r_$19|)) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.$owns))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.red))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.key))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.value))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.left))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.right))) (= |#q_$5| ($dot ($ptr ^Node |#r_$19|) Node.parent))))  :pattern ( ($set_in |#q_$5| ($span ($ptr ^Node |#r_$19|)))))) :named ax_354))
   (assert (! (forall( (|#q_$6| $ptr) (|#r_$24| Int))(!(= ($set_in |#q_$6| ($full_extent ($ptr ^Tree |#r_$24|))) (or (or (or (or (= |#q_$6| ($ptr ^Tree |#r_$24|)) (= |#q_$6| ($dot ($ptr ^Tree |#r_$24|) Tree.$owns))) (= |#q_$6| ($dot ($ptr ^Tree |#r_$24|) Tree.root))) (= |#q_$6| ($dot ($ptr ^Tree |#r_$24|) Tree.abs))) (= |#q_$6| ($dot ($ptr ^Tree |#r_$24|) Tree.R))))  :pattern ( ($set_in |#q_$6| ($full_extent ($ptr ^Tree |#r_$24|)))))) :named ax_355))
   (assert (! (forall( (|#q_$9| $ptr) (|#r_$27| Int))(!(= ($set_in |#q_$9| ($span ($ptr ^Tree |#r_$27|))) (or (or (or (or (= |#q_$9| ($ptr ^Tree |#r_$27|)) (= |#q_$9| ($dot ($ptr ^Tree |#r_$27|) Tree.$owns))) (= |#q_$9| ($dot ($ptr ^Tree |#r_$27|) Tree.root))) (= |#q_$9| ($dot ($ptr ^Tree |#r_$27|) Tree.abs))) (= |#q_$9| ($dot ($ptr ^Tree |#r_$27|) Tree.R))))  :pattern ( ($set_in |#q_$9| ($span ($ptr ^Tree |#r_$27|)))))) :named ax_356))
   (assert (! (forall( (|#r_$1| $ctype) (|#d_$1| $ctype))(!(= ($ptr_level ($map_t |#r_$1| |#d_$1|)) (+ ($ptr_level |#r_$1|) 23))  :pattern ( ($map_t |#r_$1| |#d_$1|)))) :named ax_357))
   (assert (! (forall( (|#r_$2| $ctype) (|#d_$2| $ctype))(!($is_primitive ($map_t |#r_$2| |#d_$2|))  :pattern ( ($map_t |#r_$2| |#d_$2|)))) :named ax_358))
   (assert (! (forall( (|#r_$3| Int))(!(= ($in_range_phys_ptr |#r_$3|) (and (<= 0 |#r_$3|) (<= |#r_$3| $arch_spec_ptr_start)))  :pattern ( ($in_range_phys_ptr |#r_$3|)))) :named ax_359))
   (assert (! (forall( (|#r_$4| Int))(!(= ($in_range_spec_ptr |#r_$4|) (or (= 0 |#r_$4|) (> |#r_$4| $arch_spec_ptr_start)))  :pattern ( ($in_range_spec_ptr |#r_$4|)))) :named ax_360))
   (assert (! (forall( (|#r_$7| $ptr) (|#o_$1| $ptr))(!(= ($set_in |#o_$1| ($set_singleton |#r_$7|)) (= |#r_$7| |#o_$1|))  :weight  0 :pattern ( ($set_in |#o_$1| ($set_singleton |#r_$7|))))) :named ax_361))
   (assert (! (forall( (|#r_$8| $ptr) (|#o_$2| $ptr))(!(= ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|)) (and (= |#r_$8| |#o_$2|) (not (= ($ref |#r_$8|) ($ref $null)))))  :weight  0 :pattern ( ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|))))) :named ax_362))
   (assert (! (forall( (|#s_$0| $state) (|#q_$4| $ptr) (|#r_$18| Int))(!(=> ($typed |#s_$0| ($ptr ^Node |#r_$18|)) (= ($set_in |#q_$4| ($extent |#s_$0| ($ptr ^Node |#r_$18|))) (or (= |#q_$4| ($ptr ^Node |#r_$18|)) (= ($ts_emb ($select.tm ($typemap |#s_$0|) |#q_$4|)) ($ptr ^Node |#r_$18|)))))  :pattern ( ($set_in |#q_$4| ($extent |#s_$0| ($ptr ^Node |#r_$18|)))))) :named ax_363))
   (assert (! (forall( (|#s_$8| $state) (|#q_$7| $ptr) (|#r_$25| Int))(!(= ($set_in |#q_$7| ($extent |#s_$8| ($ptr ^Tree |#r_$25|))) ($set_in |#q_$7| ($full_extent ($ptr ^Tree |#r_$25|))))  :pattern ( ($set_in |#q_$7| ($extent |#s_$8| ($ptr ^Tree |#r_$25|)))))) :named ax_364))
   (assert (! (forall( (|#s_$9| $state) (|#q_$8| $ptr) (|#r_$26| Int))(!(=> ($typed |#s_$9| ($ptr ^Tree |#r_$26|)) (= ($set_in |#q_$8| ($extent |#s_$9| ($ptr ^Tree |#r_$26|))) (or (= |#q_$8| ($ptr ^Tree |#r_$26|)) (= ($ts_emb ($select.tm ($typemap |#s_$9|) |#q_$8|)) ($ptr ^Tree |#r_$26|)))))  :pattern ( ($set_in |#q_$8| ($extent |#s_$9| ($ptr ^Tree |#r_$26|)))))) :named ax_365))
   (assert (! (forall( (|#s| $state) (|#q_$3| $ptr) (|#r_$17| Int))(!(= ($set_in |#q_$3| ($extent |#s| ($ptr ^Node |#r_$17|))) ($set_in |#q_$3| ($full_extent ($ptr ^Node |#r_$17|))))  :pattern ( ($set_in |#q_$3| ($extent |#s| ($ptr ^Node |#r_$17|)))))) :named ax_366))
   (assert (! (forall( (|#s1_$10| $state) (|#s2_$7| $state) (|#p_$29| $ptr) (|#t_$13| $ctype))(!(=> (and ($is_arraytype |#t_$13|) (= ($typ |#p_$29|) |#t_$13|)) (and (= ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|) ($typed |#s2_$7| |#p_$29|)) ($sequential |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)))  :pattern ( ($is_arraytype |#t_$13|) ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)))) :named ax_367))
   (assert (! (forall( (|#s1_$11| $state) (|#s2_$8| $state) (|#p_$33| $ptr))(!(= ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^Node) (and ($typed |#s2_$8| |#p_$33|) ($set_eq ($owns |#s2_$8| |#p_$33|) $set_empty)))  :pattern ( ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^Node)))) :named ax_368))
   (assert (! (forall( (|#s1_$14| $state) (|#r_$20| Int))(!(= ($extent_mutable |#s1_$14| ($ptr ^Node |#r_$20|)) ($mutable |#s1_$14| ($ptr ^Node |#r_$20|)))  :pattern ( ($extent_mutable |#s1_$14| ($ptr ^Node |#r_$20|))))) :named ax_369))
   (assert (! (forall( (|#s1_$15| $state) (|#s2_$12| $state) (|#r_$21| Int))(!(= ($extent_is_fresh |#s1_$15| |#s2_$12| ($ptr ^Node |#r_$21|)) (and (< ($current_timestamp |#s1_$15|) ($timestamp |#s2_$12| ($ptr ^Node |#r_$21|))) (<= ($timestamp |#s2_$12| ($ptr ^Node |#r_$21|)) ($current_timestamp |#s2_$12|))))  :pattern ( ($extent_is_fresh |#s1_$15| |#s2_$12| ($ptr ^Node |#r_$21|))))) :named ax_370))
   (assert (! (forall( (|#s1_$16| $state) (|#r_$22| Int))(!(= ($extent_zero |#s1_$16| ($ptr ^Node |#r_$22|)) (and (and (and (and (and (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.red)) 0) (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.key)) 0)) (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.value)) 0)) (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.left)) 0)) (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.right)) 0)) (= ($select.mem ($memory |#s1_$16|) ($dot ($ptr ^Node |#r_$22|) Node.parent)) 0)))  :pattern ( ($extent_zero |#s1_$16| ($ptr ^Node |#r_$22|))))) :named ax_371))
   (assert (! (forall( (|#s1_$17| $state) (|#s2_$13| $state) (|#p_$50| $ptr))(!(= ($inv2 |#s1_$17| |#s2_$13| |#p_$50| ^Tree) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ($typed |#s2_$13| |#p_$50|) (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node ($ref $null)))))) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root)))) ($ref $null))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))))) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root)))) ($ref $null))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))) Node.parent)))) ($ref $null)))) (forall( (|Q#m$1^82.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1|))) (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($ref $null)))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1|))))))) (forall( (|Q#n$1^82.29#dt1| Int) (|Q#m$1^82.29#dt1_$0| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$0|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$0|))) (< ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$0|) Node.key)) ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$0|))))))) (forall( (|Q#n$1^82.29#dt1_$0| Int) (|Q#m$1^82.29#dt1_$1| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$0|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$1|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$0|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$0|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$1|))) (> ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$1|) Node.key)) ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$0|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$0|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$1|))))))) (forall( (|Q#m$1^82.29#dt1_$2| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$2|))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$2|))) ($set_in ($ptr ^Node |Q#m$1^82.29#dt1_$2|) ($owns |#s2_$13| |#p_$50|))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$2|)))) :pattern ( (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$2|)))) :pattern ( (sk_hack (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$2|)))))))) (forall( (|Q#n$1^82.29#dt1_$1| Int) (|Q#m$1^82.29#dt1_$3| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$1|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$3|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$1|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$3|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$3|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$1|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$3|))))))) (forall( (|Q#n$1^82.29#dt1_$2| Int) (|Q#m$1^82.29#dt1_$4| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$2|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$4|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$2|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$4|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$2|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$2|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$4|))))))) (forall( (|Q#n$1^82.29#dt1_$3| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$3|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$3|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$3|)))) Node.left)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$3|))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$3|) Node.left)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$3|)))))))) (forall( (|Q#n$1^82.29#dt1_$4| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$4|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$4|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$4|)))) Node.left)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$4|) Node.left))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$4|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$4|)))))))) (forall( (|Q#n$1^82.29#dt1_$5| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$5|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$5|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$5|)))) Node.right)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$5|))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$5|) Node.right)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$5|)))))))) (forall( (|Q#n$1^82.29#dt1_$6| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$6|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$6|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$6|)))) Node.right)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$6|) Node.right))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$6|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$6|)))))))) (forall( (|Q#n$1^82.29#dt1_$7| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$7|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$7|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$7|)))) Node.parent)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$7|) Node.parent)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$7|)))))))) (forall( (|Q#n$1^82.29#dt1_$8| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$8|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$8|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$8|)))) Node.parent)))) ($ref $null)))) (or (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$8|) Node.parent))) Node.left)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$8|))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$8|) Node.parent))) Node.right)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$8|))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$8|)))))))) (forall( (|Q#n$1^82.29#dt1_$9| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$9|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$9|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$9|))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$9|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$9|))))))) (forall( (|Q#m$1^83.29#dt1| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1|))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.abs))) ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1|) Node.key))) ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1|) Node.value)))))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.abs))) ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1|) Node.key))))))) (forall( (|Q#k$1^83.29#tc2| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2|) (<= |Q#k$1^83.29#tc2| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$0|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$0|))) (not (= ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$0|) Node.key)) |Q#k$1^83.29#tc2|))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.abs))) |Q#k$1^83.29#tc2|) 0)))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.abs))) |Q#k$1^83.29#tc2|))))) (forall( (|Q#n$1^84.29#dt1| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1|))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1|)))) Node.parent)))) ($ref $null))) (or (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1|)) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1|)))))))) (forall( (|Q#n$1^84.29#dt1_$0| Int) (|Q#m$1^84.29#dt1| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$0|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^84.29#dt1|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$0|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1|))) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$0|))) (or (or (or (and (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$0|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1|)) ($ref ($ptr ^Node ($ref $null))))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1|)) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$0|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$0|) Node.left))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$13|) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$0|) Node.right))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1|)))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$13|) ($dot |#p_$50| Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$0|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1|))))))))  :pattern ( ($inv2 |#s1_$17| |#s2_$13| |#p_$50| ^Tree)))) :named ax_372))
   (assert (! (forall( (|#s1_$20| $state) (|#r_$28| Int))(!(= ($extent_mutable |#s1_$20| ($ptr ^Tree |#r_$28|)) ($mutable |#s1_$20| ($ptr ^Tree |#r_$28|)))  :pattern ( ($extent_mutable |#s1_$20| ($ptr ^Tree |#r_$28|))))) :named ax_373))
   (assert (! (forall( (|#s1_$21| $state) (|#s2_$17| $state) (|#r_$29| Int))(!(= ($extent_is_fresh |#s1_$21| |#s2_$17| ($ptr ^Tree |#r_$29|)) (and (< ($current_timestamp |#s1_$21|) ($timestamp |#s2_$17| ($ptr ^Tree |#r_$29|))) (<= ($timestamp |#s2_$17| ($ptr ^Tree |#r_$29|)) ($current_timestamp |#s2_$17|))))  :pattern ( ($extent_is_fresh |#s1_$21| |#s2_$17| ($ptr ^Tree |#r_$29|))))) :named ax_374))
   (assert (! (forall( (|#s1_$22| $state) (|#r_$30| Int))(!(= ($extent_zero |#s1_$22| ($ptr ^Tree |#r_$30|)) (and (and (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^Tree |#r_$30|) Tree.root)) 0) (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^Tree |#r_$30|) Tree.abs)) 0)) (= ($select.mem ($memory |#s1_$22|) ($dot ($ptr ^Tree |#r_$30|) Tree.R)) 0)))  :pattern ( ($extent_zero |#s1_$22| ($ptr ^Tree |#r_$30|))))) :named ax_375))
   (assert (! (forall( (|#s1_$6| $state) (|#s2_$3| $state) (|#p_$26| $ptr) (|#t_$10| $ctype))(!(= ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|) (=> (and ($closed |#s1_$6| |#p_$26|) ($closed |#s2_$3| |#p_$26|)) ($spans_the_same |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|)))  :weight  0 :pattern ( ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|)))) :named ax_376))
   (assert (! (forall( (|#s1_$8| $state) (|#s2_$5| $state) (|#p_$27| $ptr) (|#t_$11| $ctype))(!(= ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|) (and (and (and (= ($read_version |#s1_$8| |#p_$27|) ($read_version |#s2_$5| |#p_$27|)) (= ($owns |#s1_$8| |#p_$27|) ($owns |#s2_$5| |#p_$27|))) (= ($select.tm ($typemap |#s1_$8|) |#p_$27|) ($select.tm ($typemap |#s2_$5|) |#p_$27|))) ($state_spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))  :weight  0 :pattern ( ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))) :named ax_377))
   (assert (! (forall( (|#s1_$9| $state) (|#s2_$6| $state) (|#p_$28| $ptr) (|#t_$12| $ctype))(!(= ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|) (and (and (= ($read_version |#s1_$9| |#p_$28|) ($read_version |#s2_$6| |#p_$28|)) (= ($select.tm ($typemap |#s1_$9|) |#p_$28|) ($select.tm ($typemap |#s2_$6|) |#p_$28|))) ($state_nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|)))  :weight  0 :pattern ( ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|)))) :named ax_378))
   (assert (! (forall( (|#s2_$0_$0| $state) (|#s1_$1_$0| $state))(= (forall( (|#p_$9_$0| $ptr))(!(or (and (not ($closed |#s1_$1_$0| |#p_$9_$0|)) (not ($closed |#s2_$0_$0| |#p_$9_$0|))) (and ($inv2 |#s1_$1_$0| |#s2_$0_$0| |#p_$9_$0| ($typ |#p_$9_$0|)) ($nonvolatile_spans_the_same |#s1_$1_$0| |#s2_$0_$0| |#p_$9_$0| ($typ |#p_$9_$0|))))  :pattern ( ($closed |#s1_$1_$0| |#p_$9_$0|)) :pattern ( ($closed |#s2_$0_$0| |#p_$9_$0|)))) (forall( (|#p_$9_$1| $ptr))(!(or (and (not ($closed |#s1_$1_$0| |#p_$9_$1|)) (not ($closed |#s2_$0_$0| |#p_$9_$1|))) (and ($inv2 |#s1_$1_$0| |#s2_$0_$0| |#p_$9_$1| ($typ |#p_$9_$1|)) ($nonvolatile_spans_the_same |#s1_$1_$0| |#s2_$0_$0| |#p_$9_$1| ($typ |#p_$9_$1|))))  :pattern ( ($closed |#s1_$1_$0| |#p_$9_$1|)) :pattern ( ($closed |#s2_$0_$0| |#p_$9_$1|)))))) :named ax_379))
   (assert (! (forall( (|#s2_$0| $state) (|#s1_$1| $state))(= (forall( (|#p_$9_$2| $ptr))(!($inv2_when_closed |#s1_$1| |#s2_$0| |#p_$9_$2| ($typ |#p_$9_$2|))  :pattern ( ($closed |#s1_$1| |#p_$9_$2|)) :pattern ( ($closed |#s2_$0| |#p_$9_$2|)))) (forall( (|#p_$9| $ptr))(!(or (and (not ($closed |#s1_$1| |#p_$9|)) (not ($closed |#s2_$0| |#p_$9|))) (and ($inv2 |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|)) ($nonvolatile_spans_the_same |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|))))  :pattern ( ($closed |#s1_$1| |#p_$9|)) :pattern ( ($closed |#s2_$0| |#p_$9|)))))) :named ax_380))
   (assert (! (forall( (|#s2_$14| $state) (|#r_$23| Int))(!(= ($inv_lab |#s2_$14| ($ptr ^Tree |#r_$23|) l@public) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ($typed |#s2_$14| ($ptr ^Tree |#r_$23|)) (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node ($ref $null)))))) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root)))) ($ref $null))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))))) (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root)))) ($ref $null))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))) Node.parent)))) ($ref $null)))) (forall( (|Q#m$1^82.29#dt1_$5| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$5|))) (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($ref $null)))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$5|))))))) (forall( (|Q#n$1^82.29#dt1_$10| Int) (|Q#m$1^82.29#dt1_$6| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$10|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$6|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$10|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$10|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$6|))) (< ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$6|) Node.key)) ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$10|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$10|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$6|))))))) (forall( (|Q#n$1^82.29#dt1_$11| Int) (|Q#m$1^82.29#dt1_$7| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$11|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$7|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$11|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$11|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$7|))) (> ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$7|) Node.key)) ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$11|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$11|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$7|))))))) (forall( (|Q#m$1^82.29#dt1_$8| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$8|))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$8|))) ($set_in ($ptr ^Node |Q#m$1^82.29#dt1_$8|) ($owns |#s2_$14| ($ptr ^Tree |#r_$23|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$8|)))) :pattern ( (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$8|)))) :pattern ( (sk_hack (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$8|)))))))) (forall( (|Q#n$1^82.29#dt1_$12| Int) (|Q#m$1^82.29#dt1_$9| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$12|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$9|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$12|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$9|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$9|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$12|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$9|))))))) (forall( (|Q#n$1^82.29#dt1_$13| Int) (|Q#m$1^82.29#dt1_$10| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$13|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$10|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$13|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$10|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$13|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$13|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$10|))))))) (forall( (|Q#n$1^82.29#dt1_$14| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$14|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$14|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$14|)))) Node.left)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$14|))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$14|) Node.left)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$14|)))))))) (forall( (|Q#n$1^82.29#dt1_$15| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$15|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$15|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$15|)))) Node.left)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$15|) Node.left))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$15|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$15|)))))))) (forall( (|Q#n$1^82.29#dt1_$16| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$16|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$16|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$16|)))) Node.right)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$16|))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$16|) Node.right)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$16|)))))))) (forall( (|Q#n$1^82.29#dt1_$17| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$17|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$17|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$17|)))) Node.right)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$17|) Node.right))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$17|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$17|)))))))) (forall( (|Q#n$1^82.29#dt1_$18| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$18|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$18|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$18|)))) Node.parent)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$18|) Node.parent)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$18|)))))))) (forall( (|Q#n$1^82.29#dt1_$19| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$19|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$19|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$19|)))) Node.parent)))) ($ref $null)))) (or (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$19|) Node.parent))) Node.left)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$19|))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$19|) Node.parent))) Node.right)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$19|))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$19|)))))))) (forall( (|Q#n$1^82.29#dt1_$20| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$20|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$20|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$20|))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$20|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$20|))))))) (forall( (|Q#m$1^83.29#dt1_$1| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$1|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$1|))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.abs))) ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$1|) Node.key))) ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$1|) Node.value)))))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.abs))) ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$1|) Node.key))))))) (forall( (|Q#k$1^83.29#tc2_$0| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2_$0|) (<= |Q#k$1^83.29#tc2_$0| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$2| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$2|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$2|))) (not (= ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$2|) Node.key)) |Q#k$1^83.29#tc2_$0|))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.abs))) |Q#k$1^83.29#tc2_$0|) 0)))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.abs))) |Q#k$1^83.29#tc2_$0|))))) (forall( (|Q#n$1^84.29#dt1_$1| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$1|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$1|))) (= ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$1|)))) Node.parent)))) ($ref $null))) (or (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$1|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$1|)) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$1|)))))))) (forall( (|Q#n$1^84.29#dt1_$2| Int) (|Q#m$1^84.29#dt1_$0| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$2|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$0|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$2|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$0|))) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$2|))) (or (or (or (and (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$2|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$0|)) ($ref ($ptr ^Node ($ref $null))))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$0|)) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$2|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$2|) Node.left))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$0|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$2|) Node.right))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$0|)))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory |#s2_$14|) ($dot ($ptr ^Tree |#r_$23|) Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$2|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$0|))))))))  :pattern ( ($inv_lab |#s2_$14| ($ptr ^Tree |#r_$23|) l@public)))) :named ax_381))
   (assert (! (forall( (|#s2_$9| $state) (|#r_$15| Int))(!(= ($inv_lab |#s2_$9| ($ptr ^Node |#r_$15|) l@public) (and ($typed |#s2_$9| ($ptr ^Node |#r_$15|)) ($set_eq ($owns |#s2_$9| ($ptr ^Node |#r_$15|)) $set_empty)))  :pattern ( ($inv_lab |#s2_$9| ($ptr ^Node |#r_$15|) l@public)))) :named ax_382))
   (assert (! (forall( (|#t_$0_$0| $ctype) (|#p_$2_$0| $ptr) (|S_$12_$0| $state))(= (and (and (and (and ($closed |S_$12_$0| |#p_$2_$0|) (= ($owner |S_$12_$0| |#p_$2_$0|) $me)) (and ($is |#p_$2_$0| |#t_$0_$0|) ($typed |S_$12_$0| |#p_$2_$0|))) (not (= ($kind_of |#t_$0_$0|) $kind_primitive))) ($is_non_primitive |#t_$0_$0|)) (and (and (and (and ($closed |S_$12_$0| |#p_$2_$0|) (= ($owner |S_$12_$0| |#p_$2_$0|) $me)) (and ($is |#p_$2_$0| |#t_$0_$0|) ($typed |S_$12_$0| |#p_$2_$0|))) (not (= ($kind_of |#t_$0_$0|) $kind_primitive))) ($is_non_primitive |#t_$0_$0|)))) :named ax_383))
   (assert (! (forall( (|#t_$0| $ctype) (|#p_$2| $ptr) (|S_$12| $state))(= (and (and (and (and ($closed |S_$12| |#p_$2|) (= ($owner |S_$12| |#p_$2|) $me)) ($typed2 |S_$12| |#p_$2| |#t_$0|)) (not (= ($kind_of |#t_$0|) $kind_primitive))) ($is_non_primitive |#t_$0|)) (and (and (and (and ($closed |S_$12| |#p_$2|) (= ($owner |S_$12| |#p_$2|) $me)) (and ($is |#p_$2| |#t_$0|) ($typed |S_$12| |#p_$2|))) (not (= ($kind_of |#t_$0|) $kind_primitive))) ($is_non_primitive |#t_$0|)))) :named ax_384))
   (assert (! (forall( (|#t_$1_$0| $ctype) (|#p_$3_$0| $ptr) (|S_$16_$0| $state))(= (and ($is |#p_$3_$0| |#t_$1_$0|) ($typed |S_$16_$0| |#p_$3_$0|)) (and ($is |#p_$3_$0| |#t_$1_$0|) ($typed |S_$16_$0| |#p_$3_$0|)))) :named ax_385))
   (assert (! (forall( (|#t_$1| $ctype) (|#p_$3| $ptr) (|S_$16| $state))(= (and ($is |#p_$3| |#t_$1|) ($typed |S_$16| |#p_$3|)) (and ($is |#p_$3| |#t_$1|) ($typed |S_$16| |#p_$3|)))) :named ax_386))
   (assert (! (forall( (|#t_$2| $ctype) (|#p_$4| $ptr) (|S_$17| $state))(= (and (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) (=> (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) ($in_range_phys_ptr ($ref |#p_$4|)))) (and (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) (=> (and ($is |#p_$4| |#t_$2|) ($typed |S_$17| |#p_$4|)) ($in_range_phys_ptr ($ref |#p_$4|)))))) :named ax_387))
   (assert (! (forall( (|#t_$3| $ctype) (|#p_$5| $ptr) (|S_$18| $state))(= (and (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) (=> (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) ($in_range_spec_ptr ($ref |#p_$5|)))) (and (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) (=> (and ($is |#p_$5| |#t_$3|) ($typed |S_$18| |#p_$5|)) ($in_range_spec_ptr ($ref |#p_$5|)))))) :named ax_388))
   (assert (! (forall( (|#t_$4_$0| $ctype) (|#p_$6_$0| $ptr) (|S_$21_$0| $state))(= (and ($is |#p_$6_$0| |#t_$4_$0|) ($thread_local |S_$21_$0| |#p_$6_$0|)) (and ($is |#p_$6_$0| |#t_$4_$0|) ($thread_local |S_$21_$0| |#p_$6_$0|)))) :named ax_389))
   (assert (! (forall( (|#t_$4| $ctype) (|#p_$6| $ptr) (|S_$21| $state))(= (and ($is |#p_$6| |#t_$4|) ($thread_local |S_$21| |#p_$6|)) (and ($is |#p_$6| |#t_$4|) ($thread_local |S_$21| |#p_$6|)))) :named ax_390))
   (assert (! (forall( (|#t_$5| $ctype) (|#b| Int))(!(= ($typ ($ptr |#t_$5| |#b|)) |#t_$5|)  :weight  0)) :named ax_391))
   (assert (! (forall( (|#t_$6| $ctype) (|#b_$0| Int))(!(= ($ref ($ptr |#t_$6| |#b_$0|)) |#b_$0|)  :weight  0)) :named ax_392))
   (assert (! (forall( (|#t| $ctype) (|#p| $ptr))(= ($ptr |#t| ($ref |#p|)) ($ptr |#t| ($ref |#p|)))) :named ax_393))
   (assert (! (forall( (|#x_$2| $map_t..$ptr_to..^Node.^^bool))(= |#x_$2| ($int_to_map_t..ptr_to..^Node.^^bool ($map_t..ptr_to..^Node.^^bool_to_int |#x_$2|)))) :named ax_394))
   (assert (! (forall( (|#x_$4| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool))(= |#x_$4| ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int |#x_$4|)))) :named ax_395))
   (assert (! (forall( (|#x| $ptr) (|#s2_$1_$0| $state) (|#s1_$2_$0| $state))(= (forall( (|#p_$15_$0| $ptr))(!(or (or (= |#p_$15_$0| |#x|) (and ($set_in |#p_$15_$0| ($full_extent |#x|)) (or (not ($typed |#s1_$2_$0| |#p_$15_$0|)) (not ($typed |#s2_$1_$0| |#p_$15_$0|))))) (= ($mem |#s1_$2_$0| |#p_$15_$0|) ($mem |#s2_$1_$0| |#p_$15_$0|)))  :pattern ( ($select.mem ($memory |#s2_$1_$0|) |#p_$15_$0|)))) (forall( (|#p_$15| $ptr))(!(or (or (= |#p_$15| |#x|) (and ($set_in |#p_$15| ($full_extent |#x|)) (or (not ($typed |#s1_$2_$0| |#p_$15|)) (not ($typed |#s2_$1_$0| |#p_$15|))))) (= ($select.mem ($memory |#s1_$2_$0|) |#p_$15|) ($select.mem ($memory |#s2_$1_$0|) |#p_$15|)))  :pattern ( ($select.mem ($memory |#s2_$1_$0|) |#p_$15|)))))) :named ax_396))
   (assert (! (forall( (|bits_$0| Int) (|v_$11| Int))(!(and ($in_range_sbits |bits_$0| ($unchecked_sbits |bits_$0| |v_$11|)) (=> ($in_range_sbits |bits_$0| |v_$11|) (= ($unchecked_sbits |bits_$0| |v_$11|) |v_$11|)))  :pattern ( ($unchecked_sbits |bits_$0| |v_$11|)))) :named ax_397))
   (assert (! (forall( (|bits_$1| Int) (|v_$12| Int))(!(= ($in_range_sbits |bits_$1| |v_$12|) (and (<= (- 0 ($_pow2 (- |bits_$1| 1))) |v_$12|) (<= |v_$12| (- ($_pow2 (- |bits_$1| 1)) 1))))  :pattern ( ($in_range_sbits |bits_$1| |v_$12|)))) :named ax_398))
   (assert (! (forall( (|bits_$2| Int) (|v_$13| Int))(!(and ($in_range_ubits |bits_$2| ($unchecked_ubits |bits_$2| |v_$13|)) (=> ($in_range_ubits |bits_$2| |v_$13|) (= ($unchecked_ubits |bits_$2| |v_$13|) |v_$13|)))  :pattern ( ($unchecked_ubits |bits_$2| |v_$13|)))) :named ax_399))
   (assert (! (forall( (|bits| Int) (|v_$10| Int))(!(= ($in_range_ubits |bits| |v_$10|) (and (<= 0 |v_$10|) (<= |v_$10| (- ($_pow2 |bits|) 1))))  :pattern ( ($in_range_ubits |bits| |v_$10|)))) :named ax_400))
   (assert (! (forall( (|c_$1| $ptrclub) (|p_$53| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$1|) |p_$53|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$1|) |p_$53|))) :named ax_401))
   (assert (! (forall( (|c_$14| $@Map@@$ptr@To@Bool@@) (|l_$9| $@Map@@$ptr@To@Bool@@))(!(= ($ptrclub.members ($ptrclub.construct |c_$14| |l_$9|)) |c_$14|)  :weight  0)) :named ax_402))
   (assert (! (forall( (|c_$15| $@Map@@$ptr@To@Bool@@) (|l_$10| $@Map@@$ptr@To@Bool@@))(!(= ($ptrclub.bound ($ptrclub.construct |c_$15| |l_$10|)) |l_$10|)  :weight  0)) :named ax_403))
   (assert (! (forall( (|c_$16| $ptrclub) (|p_$174| $ptr))(!(= ($ptrclub.members ($ptrclub.addMember |p_$174| |c_$16|)) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$16|) |p_$174| true))  :weight  0)) :named ax_404))
   (assert (! (forall( (|c_$17| $ptrclub) (|p_$175| $ptr))(!(= ($ptrclub.bound ($ptrclub.addMember |p_$175| |c_$17|)) ($ptrclub.bound |c_$17|))  :weight  0)) :named ax_405))
   (assert (! (forall( (|c1| $ptr) (|c2| $ptr))(!(=> (and (and ($is |c1| ^^claim) ($is |c2| ^^claim)) (forall( (|S_$137| $state))(=> ($valid_claim |S_$137| |c1|) ($closed |S_$137| |c2|)))) ($claims_claim |c1| |c2|))  :pattern ( ($claims_claim |c1| |c2|)))) :named ax_406))
   (assert (! (forall( (|e_$0| $ptr) (|S_$45| $ptrset))(= ($set_difference |S_$45| ($set_singleton |e_$0|)) ($set_difference |S_$45| ($set_singleton |e_$0|)))) :named ax_407))
   (assert (! (forall( (|e| $ptr) (|S_$44| $ptrset))(= ($set_union |S_$44| ($set_singleton |e|)) ($set_union |S_$44| ($set_singleton |e|)))) :named ax_408))
   (assert (! (forall( (|emb_$1| $ptr) (|p_$48| $ptr) (|S_$52| $state))(= (and (and (= ($ts_emb ($ts |S_$52| |p_$48|)) |emb_$1|) (not ($ts_is_volatile ($ts |S_$52| |p_$48|)))) ($typed |S_$52| |p_$48|)) (and (and (= ($ts_emb ($select.tm ($typemap |S_$52|) |p_$48|)) |emb_$1|) (not ($ts_is_volatile ($select.tm ($typemap |S_$52|) |p_$48|)))) ($typed |S_$52| |p_$48|)))) :named ax_409))
   (assert (! (forall( (|emb| $ptr) (|sz_$3| Int) (|T_$2| $ctype) (|p_$43| $ptr) (|S_$48| $state))(= (and ($is_array_vol_or_nonvol |S_$48| |p_$43| |T_$2| |sz_$3| false) (forall( (|i_$3_$1| Int))(!(=> (and (<= 0 |i_$3_$1|) (< |i_$3_$1| |sz_$3|)) (= ($ts_emb ($ts |S_$48| ($idx |p_$43| |i_$3_$1| |T_$2|))) |emb|))  :pattern ( ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3_$1| |T_$2|)))))) (and ($is_array_vol_or_nonvol |S_$48| |p_$43| |T_$2| |sz_$3| false) (forall( (|i_$3| Int))(!(=> (and (<= 0 |i_$3|) (< |i_$3| |sz_$3|)) (= ($ts_emb ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3| |T_$2|))) |emb|))  :pattern ( ($select.tm ($typemap |S_$48|) ($idx |p_$43| |i_$3| |T_$2|)))))))) :named ax_410))
   (assert (! (forall( (|f_$1| $field) (|p_$25| $ptr) (|S_$26| $state))(= ($fetch_from_vv ($read_vol_version |S_$26| |p_$25|) ($dot |p_$25| |f_$1|)) ($fetch_from_vv ($read_vol_version |S_$26| |p_$25|) ($dot |p_$25| |f_$1|)))) :named ax_411))
   (assert (! (forall( (|f_$11| $pure_function))(= (< ($pure_post_level |f_$11|) $current_pure_post_level) (< ($pure_post_level |f_$11|) $current_pure_post_level))) :named ax_412))
   (assert (! (forall( (|f_$15| $field) (|t_$18| $ctype))(!(= ($select.mem ($memory ($vs_state $struct_zero)) ($dot ($ptr |t_$18| ($vs_base_ref $struct_zero)) |f_$15|)) 0)  :pattern ( ($select.mem ($memory ($vs_state $struct_zero)) ($dot ($ptr |t_$18| ($vs_base_ref $struct_zero)) |f_$15|))))) :named ax_413))
   (assert (! (forall( (|f_$17| $field))(= ($rec_fetch $rec_zero |f_$17|) 0)) :named ax_414))
   (assert (! (forall( (|f_$4| $field) (|u_$0_$0| $ptr) (|S_$42| $state))(= (= ($ts_active_option ($ts |S_$42| |u_$0_$0|)) |f_$4|) (= ($ts_active_option ($select.tm ($typemap |S_$42|) |u_$0_$0|)) |f_$4|))) :named ax_415))
   (assert (! (forall( (|f_$8_$1| $pure_function))(!(< ($frame_level |f_$8_$1|) $current_frame_level)  :pattern ( ($frame_level |f_$8_$1|)))) :named ax_416))
   (assert (! (forall( (|f_$9| $pure_function))(= (< ($frame_level |f_$9|) $current_frame_level) (< ($frame_level |f_$9|) $current_frame_level))) :named ax_417))
   (assert (! (forall( (|fd_$0| $flowdata) (|l_$6| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.meta ($store.flow.meta |fd_$0| |l_$6|)) |l_$6|)  :weight  0)) :named ax_418))
   (assert (! (forall( (|fd_$1| $flowdata) (|l_$7| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.label ($store.flow.meta |fd_$1| |l_$7|)) ($select.flow.label |fd_$1|))  :weight  0)) :named ax_419))
   (assert (! (forall( (|fd_$2| $flowdata) (|l_$8| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.meta ($store.flow.label |fd_$2| |l_$8|)) ($select.flow.meta |fd_$2|))  :weight  0)) :named ax_420))
   (assert (! (forall( (|fd| $flowdata) (|l_$5| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.label ($store.flow.label |fd| |l_$5|)) |l_$5|)  :weight  0)) :named ax_421))
   (assert (! (forall( (|fld| $field) (|off| Int))(!(and (and (not ($is_base_field ($array_path |fld| |off|))) (= ($array_path_1 ($array_path |fld| |off|)) |fld|)) (= ($array_path_2 ($array_path |fld| |off|)) |off|))  :weight  0 :pattern ( ($array_path |fld| |off|)))) :named ax_422))
   (assert (! (forall( (|from_$1| Int) (|to_$1| Int) (|xs_$0| Int))(!(=> (and (and (<= 0 |from_$1|) (< |from_$1| |to_$1|)) (<= |to_$1| |xs_$0|)) (= ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0) 0))  :pattern ( ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0)))) :named ax_423))
   (assert (! (forall( (|from_$10| Int) (|to_$10| Int) (|val_$5| Int) (|xs_$9| Int))(!(=> (and (and (and (<= 0 |from_$10|) (< |from_$10| |to_$10|)) (<= |to_$10| |xs_$9|)) (<= 0 |val_$5|)) (= ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|) (mod (div |val_$5| ($_pow2 |from_$10|)) ($_pow2 (- |to_$10| |from_$10|)))))  :pattern ( ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|)))) :named ax_424))
   (assert (! (forall( (|from_$11| Int) (|to_$11| Int) (|val_$6| Int) (|xs_$10| Int))(!(=> (and (and (and (and (<= 0 |from_$11|) (< |from_$11| |to_$11|)) (<= |to_$11| |xs_$10|)) (<= 0 |val_$6|)) (< (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|))) ($_pow2 (- (- |to_$11| |from_$11|) 1)))) (= ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|) (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|)))))  :pattern ( ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|)))) :named ax_425))
   (assert (! (forall( (|from_$12| Int) (|to_$12| Int) (|val_$7| Int) (|xs_$11| Int))(!(=> (and (and (and (and (<= 0 |from_$12|) (< |from_$12| |to_$12|)) (<= |to_$12| |xs_$11|)) (<= 0 |val_$7|)) (>= (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))) ($_pow2 (- (- |to_$12| |from_$12|) 1)))) (= ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|) (- ($_pow2 (- (- |to_$12| |from_$12|) 1)) (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))))))  :pattern ( ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|)))) :named ax_426))
   (assert (! (forall( (|from_$2| Int) (|to_$2| Int) (|val_$1| Int) (|x_$34| Int) (|xs_$1| Int))(!(=> (and (and (<= 0 |from_$2|) (< |from_$2| |to_$2|)) (<= |to_$2| |xs_$1|)) (=> (and (<= (- 0 ($_pow2 (- (- |to_$2| |from_$2|) 1))) |val_$1|) (< |val_$1| ($_pow2 (- (- |to_$2| |from_$2|) 1)))) (= ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|) |val_$1|)))  :pattern ( ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|)))) :named ax_427))
   (assert (! (forall( (|from_$3| Int) (|to_$3| Int) (|val_$2| Int) (|x_$35| Int) (|xs_$2| Int))(!(=> (and (and (<= 0 |from_$3|) (< |from_$3| |to_$3|)) (<= |to_$3| |xs_$2|)) (=> (and (<= 0 |val_$2|) (< |val_$2| ($_pow2 (- |to_$3| |from_$3|)))) (= ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|) |val_$2|)))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|)))) :named ax_428))
   (assert (! (forall( (|from_$4| Int) (|to_$4| Int) (|x_$36| Int) (|xs_$3| Int))(!(=> (and (and (<= 0 |from_$4|) (< |from_$4| |to_$4|)) (<= |to_$4| |xs_$3|)) (and (<= (- 0 ($_pow2 (- (- |to_$4| |from_$4|) 1))) ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|)) (<= ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|) (- ($_pow2 (- (- |to_$4| |from_$4|) 1)) 1))))  :pattern ( ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|)))) :named ax_429))
   (assert (! (forall( (|from_$5| Int) (|to_$5| Int) (|x_$37| Int) (|xs_$4| Int))(!(=> (and (and (<= 0 |from_$5|) (< |from_$5| |to_$5|)) (<= |to_$5| |xs_$4|)) (and (<= 0 ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|)) (<= ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|) (- ($_pow2 (- |to_$5| |from_$5|)) 1))))  :pattern ( ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|)))) :named ax_430))
   (assert (! (forall( (|from_$6| Int) (|to_$6| Int) (|val_$3| Int) (|x_$38| Int) (|xs_$5| Int) (|from2| Int) (|to2| Int))(!(=> (and (and (<= 0 |from_$6|) (< |from_$6| |to_$6|)) (<= |to_$6| |xs_$5|)) (=> (and (and (<= 0 |from2|) (< |from2| |to2|)) (<= |to2| |xs_$5|)) (=> (or (<= |to2| |from_$6|) (<= |to_$6| |from2|)) (= ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|) ($bv_extract_signed |x_$38| |xs_$5| |from2| |to2|)))))  :pattern ( ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|)))) :named ax_431))
   (assert (! (forall( (|from_$7| Int) (|to_$7| Int) (|val_$4| Int) (|x_$39| Int) (|xs_$6| Int) (|from2_$0| Int) (|to2_$0| Int))(!(=> (and (and (<= 0 |from_$7|) (< |from_$7| |to_$7|)) (<= |to_$7| |xs_$6|)) (=> (and (and (<= 0 |from2_$0|) (< |from2_$0| |to2_$0|)) (<= |to2_$0| |xs_$6|)) (=> (or (<= |to2_$0| |from_$7|) (<= |to_$7| |from2_$0|)) (= ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|) ($bv_extract_unsigned |x_$39| |xs_$6| |from2_$0| |to2_$0|)))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|)))) :named ax_432))
   (assert (! (forall( (|from_$8| Int) (|to_$8| Int) (|xs_$7| Int))(!(=> (and (and (<= 0 |from_$8|) (< |from_$8| |to_$8|)) (<= |to_$8| |xs_$7|)) (= ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|) 0))  :pattern ( ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|)))) :named ax_433))
   (assert (! (forall( (|from_$9| Int) (|to_$9| Int) (|xs_$8| Int))(!(=> (and (and (<= 0 |from_$9|) (< |from_$9| |to_$9|)) (<= |to_$9| |xs_$8|)) (= ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|) 0))  :pattern ( ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|)))) :named ax_434))
   (assert (! (forall( (|i_$25| Int) (|j_$0| Int))(!(=> (and (<= 0 |i_$25|) (< 0 |j_$0|)) (<= (div |i_$25| |j_$0|) |i_$25|))  :pattern ( (div |i_$25| |j_$0|)))) :named ax_435))
   (assert (! (forall( (|i_$26| Int) (|j_$1| Int))(!(=> (and (> |i_$26| 0) (> |j_$1| 0)) (and (< (- |i_$26| |j_$1|) (* (div |i_$26| |j_$1|) |j_$1|)) (<= (* (div |i_$26| |j_$1|) |j_$1|) |i_$26|)))  :pattern ( (div |i_$26| |j_$1|)))) :named ax_436))
   (assert (! (forall( (|i_$27| Int))(!(=> (not (= |i_$27| 0)) (= (div |i_$27| |i_$27|) 1))  :pattern ( (div |i_$27| |i_$27|)))) :named ax_437))
   (assert (! (forall( (|i_$28| Int))(!(=> (not (= |i_$28| 0)) (= (div 0 |i_$28|) 0))  :pattern ( (div 0 |i_$28|)))) :named ax_438))
   (assert (! (forall( (|id_$0| Int) (|length| Int))(!($is ($get_string_literal |id_$0| |length|) ^^u1)  :pattern ( ($get_string_literal |id_$0| |length|)))) :named ax_439))
   (assert (! (forall( (|id_$1| Int) (|length_$0| Int) (|S_$133| $state))(!(=> ($good_state |S_$133|) (and ($typed |S_$133| ($get_string_literal |id_$1| |length_$0|)) (forall( (|i_$1_$1| Int))(!(=> (and (<= 0 |i_$1_$1|) (< |i_$1_$1| |length_$0|)) (and ($is ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1) ^^u1) ($thread_local |S_$133| ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1))))  :pattern ( ($select.sm ($statusmap |S_$133|) ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1))) :pattern ( ($select.tm ($typemap |S_$133|) ($idx ($get_string_literal |id_$1| |length_$0|) |i_$1_$1| ^^u1)))))))  :pattern ( ($typed |S_$133| ($get_string_literal |id_$1| |length_$0|))) :pattern ( ($is_array |S_$133| ($get_string_literal |id_$1| |length_$0|) ^^u1 |length_$0|)))) :named ax_440))
   (assert (! (forall( (|id| $token) (|S_$81| $state))(!(=> ($good_state_ext |id| |S_$81|) ($good_state |S_$81|))  :pattern ( ($good_state_ext |id| |S_$81|)))) :named ax_441))
   (assert (! (forall( (|isvol| Bool) (|f_$5| $field) (|emb_$0| $ptr) (|sz_$4| Int) (|T_$3| $ctype) (|p_$44| $ptr) (|S_$49| $state))(= (and ($is_array_vol_or_nonvol |S_$49| |p_$44| |T_$3| |sz_$4| |isvol|) (forall( (|i_$4_$1| Int))(!(=> (and (<= 0 |i_$4_$1|) (< |i_$4_$1| |sz_$4|)) (and (= ($ts_emb ($ts |S_$49| ($idx |p_$44| |i_$4_$1| |T_$3|))) |emb_$0|) (= ($ts_path ($ts |S_$49| ($idx |p_$44| |i_$4_$1| |T_$3|))) ($array_path |f_$5| |i_$4_$1|))))  :pattern ( ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4_$1| |T_$3|))) :pattern ( ($select.mem ($memory |S_$49|) ($idx |p_$44| |i_$4_$1| |T_$3|)))))) (and ($is_array_vol_or_nonvol |S_$49| |p_$44| |T_$3| |sz_$4| |isvol|) (forall( (|i_$4| Int))(!(=> (and (<= 0 |i_$4|) (< |i_$4| |sz_$4|)) (and (= ($ts_emb ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))) |emb_$0|) (= ($ts_path ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))) ($array_path |f_$5| |i_$4|))))  :pattern ( ($select.tm ($typemap |S_$49|) ($idx |p_$44| |i_$4| |T_$3|))) :pattern ( ($select.mem ($memory |S_$49|) ($idx |p_$44| |i_$4| |T_$3|)))))))) :named ax_442))
   (assert (! (forall( (|isvolatile| Bool) (|tp| $ctype) (|f_$0| $field) (|p_$8| $ptr) (|S_$2| $state))(= (and (and (and (and ($is ($dot |p_$8| |f_$0|) |tp|) ($typed |S_$2| ($dot |p_$8| |f_$0|))) (= ($ts_emb ($ts |S_$2| ($dot |p_$8| |f_$0|))) |p_$8|)) (= ($ts_path ($ts |S_$2| ($dot |p_$8| |f_$0|))) |f_$0|)) (= ($ts_is_volatile ($ts |S_$2| ($dot |p_$8| |f_$0|))) |isvolatile|)) (and (and (and (and ($is ($dot |p_$8| |f_$0|) |tp|) ($typed |S_$2| ($dot |p_$8| |f_$0|))) (= ($ts_emb ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |p_$8|)) (= ($ts_path ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |f_$0|)) (= ($ts_is_volatile ($select.tm ($typemap |S_$2|) ($dot |p_$8| |f_$0|))) |isvolatile|)))) :named ax_443))
   (assert (! (forall( (|l2_$0_$0| Bool) (|l1_$0_$0| Bool))(= (and |l1_$0_$0| |l2_$0_$0|) (and |l1_$0_$0| |l2_$0_$0|))) :named ax_444))
   (assert (! (forall( (|l2_$0| Bool) (|l1_$0| Bool))(= (=> |l1_$0| |l2_$0|) (=> |l1_$0| |l2_$0|))) :named ax_445))
   (assert (! (forall( (|l2_$1| Bool) (|l1_$1| Bool))(= (or |l1_$1| |l2_$1|) (or |l1_$1| |l2_$1|))) :named ax_446))
   (assert (! (forall( (|l2_$2| $@Map@@$ptr@To@Bool@@) (|l1_$2| $@Map@@$ptr@To@Bool@@))(= (forall( (|p_$52_$0| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$2| |p_$52_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$2| |p_$52_$0|))) (forall( (|p_$52| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$2| |p_$52|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$2| |p_$52|))))) :named ax_447))
   (assert (! (forall( (|l2| Bool) (|l1| Bool))(= (=> |l1| |l2|) (=> |l1| |l2|))) :named ax_448))
   (assert (! (forall( (|M_$0| $memory_t) (|p_$55| $ptr) (|q_$2| $ptr) (|v_$1| Int))(!(or (= |p_$55| |q_$2|) (= ($select.mem ($store.mem |M_$0| |p_$55| |v_$1|) |q_$2|) ($select.mem |M_$0| |q_$2|)))  :weight  0)) :named ax_449))
   (assert (! (forall( (|M_$1| $memory_t) (|p_$56| $ptr) (|q_$3| $ptr) (|sz_$12| Int) (|v_$2| Int))(!(or (and (and (= ($typ |p_$56|) ($typ |q_$3|)) (<= ($ref |q_$3|) ($ref |p_$56|))) (< ($ref |p_$56|) ($ref ($idx |q_$3| |sz_$12| ($typ |q_$3|))))) (= ($select_range.mem ($store.mem |M_$1| |p_$56| |v_$2|) |q_$3| |sz_$12|) ($select_range.mem |M_$1| |q_$3| |sz_$12|)))  :weight  0)) :named ax_450))
   (assert (! (forall( (|M_$10| $memory_t) (|p_$176| $ptr) (|q_$28| $ptr) (|v_$16| Int))(!(= ($select.flow.data ($store.mem |M_$10| |q_$28| |v_$16|) |p_$176|) ($select.flow.data |M_$10| |p_$176|))  :weight  0)) :named ax_451))
   (assert (! (forall( (|M_$11| $memory_t) (|p_$177| $ptr) (|q_$29| $ptr) (|fd_$5| $flowdata))(!(= ($select.mem ($store.flow.data |M_$11| |q_$29| |fd_$5|) |p_$177|) ($select.mem |M_$11| |p_$177|))  :weight  0)) :named ax_452))
   (assert (! (forall( (|M_$12| $map_t..$ptr_to..^Node.^^bool) (|p_$178| Int) (|v_$17| Bool))(= ($select.$map_t..$ptr_to..^Node.^^bool ($store.$map_t..$ptr_to..^Node.^^bool |M_$12| |p_$178| |v_$17|) |p_$178|) |v_$17|)) :named ax_453))
   (assert (! (forall( (|M_$13| $map_t..$ptr_to..^Node.^^bool) (|p_$179| Int) (|v_$18| Bool) (|q_$30| Int))(=> (not (= |p_$179| |q_$30|)) (= ($select.$map_t..$ptr_to..^Node.^^bool ($store.$map_t..$ptr_to..^Node.^^bool |M_$13| |q_$30| |v_$18|) |p_$179|) ($select.$map_t..$ptr_to..^Node.^^bool |M_$13| |p_$179|)))) :named ax_454))
   (assert (! (forall( (|M_$14| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|p_$182| Int) (|v_$19| $map_t..$ptr_to..^Node.^^bool))(= ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M_$14| |p_$182| |v_$19|) |p_$182|) |v_$19|)) :named ax_455))
   (assert (! (forall( (|M_$15| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|p_$183| Int) (|v_$20| $map_t..$ptr_to..^Node.^^bool) (|q_$31| Int))(=> (not (= |p_$183| |q_$31|)) (= ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M_$15| |q_$31| |v_$20|) |p_$183|) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M_$15| |p_$183|)))) :named ax_456))
   (assert (! (forall( (|M_$16| $map_t..^^i4.^^i4) (|p_$186| Int) (|v_$21| Int))(=> ($in_range_t ^^i4 |p_$186|) (= ($select.$map_t..^^i4.^^i4 ($store.$map_t..^^i4.^^i4 |M_$16| |p_$186| |v_$21|) |p_$186|) ($unchecked ^^i4 |v_$21|)))) :named ax_457))
   (assert (! (forall( (|M_$17| $map_t..^^i4.^^i4) (|p_$187| Int) (|v_$22| Int) (|q_$32| Int))(=> (not (= |p_$187| |q_$32|)) (= ($select.$map_t..^^i4.^^i4 ($store.$map_t..^^i4.^^i4 |M_$17| |q_$32| |v_$22|) |p_$187|) ($select.$map_t..^^i4.^^i4 |M_$17| |p_$187|)))) :named ax_458))
   (assert (! (forall( (|M_$18| $map_t..^^i4.^^i4) (|p_$190| Int))($in_range_t ^^i4 ($select.$map_t..^^i4.^^i4 |M_$18| |p_$190|))) :named ax_459))
   (assert (! (forall( (|M_$2| $typemap_t) (|p_$57| $ptr) (|v_$3| $type_state))(!(= ($select.tm ($store.tm |M_$2| |p_$57| |v_$3|) |p_$57|) |v_$3|)  :weight  0)) :named ax_460))
   (assert (! (forall( (|M_$3| $typemap_t) (|p_$58| $ptr) (|q_$4| $ptr) (|v_$4| $type_state))(!(or (= |p_$58| |q_$4|) (= ($select.tm ($store.tm |M_$3| |p_$58| |v_$4|) |q_$4|) ($select.tm |M_$3| |q_$4|)))  :weight  0)) :named ax_461))
   (assert (! (forall( (|M_$4| $statusmap_t) (|p_$59| $ptr) (|v_$5| $status))(!(= ($select.sm ($store.sm |M_$4| |p_$59| |v_$5|) |p_$59|) |v_$5|)  :weight  0)) :named ax_462))
   (assert (! (forall( (|M_$5| $statusmap_t) (|p_$60| $ptr) (|q_$5| $ptr) (|v_$6| $status))(!(or (= |p_$60| |q_$5|) (= ($select.sm ($store.sm |M_$5| |p_$60| |v_$6|) |q_$5|) ($select.sm |M_$5| |q_$5|)))  :weight  0)) :named ax_463))
   (assert (! (forall( (|M_$6| $memory_t) (|p_$166| $ptr) (|q_$25| $ptr) (|fd_$3| $flowdata))(!(=> ($set_in |q_$25| ($full_extent |p_$166|)) (= ($select.flow.data ($store.flow.data |M_$6| |p_$166| |fd_$3|) |q_$25|) |fd_$3|))  :weight  0)) :named ax_464))
   (assert (! (forall( (|M_$7| $memory_t) (|p_$167| $ptr) (|q_$26| $ptr) (|fd_$4| $flowdata))(!(or ($set_in |q_$26| ($full_extent |p_$167|)) (= ($select.flow.data ($store.flow.data |M_$7| |p_$167| |fd_$4|) |q_$26|) ($select.flow.data |M_$7| |q_$26|)))  :weight  0)) :named ax_465))
   (assert (! (forall( (|M_$8| $map_t..$ptr_to..^^void.^^bool) (|p_$168| $ptr) (|v_$14| Bool))(!(= ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$8| |p_$168| |v_$14|) |p_$168|) |v_$14|)  :weight  0)) :named ax_466))
   (assert (! (forall( (|M_$9| $map_t..$ptr_to..^^void.^^bool) (|p_$169| $ptr) (|v_$15| Bool) (|q_$27| $ptr))(!(=> (not (= |p_$169| |q_$27|)) (= ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$9| |q_$27| |v_$15|) |p_$169|) ($select.$map_t..$ptr_to..^^void.^^bool |M_$9| |p_$169|)))  :weight  0)) :named ax_467))
   (assert (! (forall( (|M| $memory_t) (|p_$54| $ptr) (|v_$0| Int))(!(= ($select.mem ($store.mem |M| |p_$54| |v_$0|) |p_$54|) |v_$0|)  :weight  0)) :named ax_468))
   (assert (! (forall( (|M1_$2| $map_t..$ptr_to..^^void.^^bool) (|M2_$2| $map_t..$ptr_to..^^void.^^bool))(!(=> (forall( (|p_$170| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool |M1_$2| |p_$170|) ($select.$map_t..$ptr_to..^^void.^^bool |M2_$2| |p_$170|))  :weight  0)) ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|)))) :named ax_469))
   (assert (! (forall( (|M1_$3| $map_t..$ptr_to..^^void.^^bool) (|M2_$3| $map_t..$ptr_to..^^void.^^bool))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|) (= |M1_$3| |M2_$3|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|)))) :named ax_470))
   (assert (! (forall( (|M1_$4| $map_t..$ptr_to..^Node.^^bool) (|M2_$4| $map_t..$ptr_to..^Node.^^bool))(!(=> (forall( (|p_$180| Int))(= ($select.$map_t..$ptr_to..^Node.^^bool |M1_$4| |p_$180|) ($select.$map_t..$ptr_to..^Node.^^bool |M2_$4| |p_$180|))) ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$4| |M2_$4|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$4| |M2_$4|)))) :named ax_471))
   (assert (! (forall( (|M1_$5| $map_t..$ptr_to..^Node.^^bool) (|M2_$5| $map_t..$ptr_to..^Node.^^bool))(!(=> ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$5| |M2_$5|) (= |M1_$5| |M2_$5|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$5| |M2_$5|)))) :named ax_472))
   (assert (! (forall( (|M1_$6| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|M2_$6| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool))(!(=> (forall( (|p_$184| Int))($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$6| |p_$184|) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M2_$6| |p_$184|))) ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$6| |M2_$6|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$6| |M2_$6|)))) :named ax_473))
   (assert (! (forall( (|M1_$7| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|M2_$7| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool))(!(=> ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$7| |M2_$7|) (= |M1_$7| |M2_$7|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$7| |M2_$7|)))) :named ax_474))
   (assert (! (forall( (|M1_$8| $map_t..^^i4.^^i4) (|M2_$8| $map_t..^^i4.^^i4))(!(=> (forall( (|p_$188| Int))(=> ($in_range_t ^^i4 |p_$188|) (= ($unchecked ^^i4 ($select.$map_t..^^i4.^^i4 |M1_$8| |p_$188|)) ($unchecked ^^i4 ($select.$map_t..^^i4.^^i4 |M2_$8| |p_$188|))))) ($eq.$map_t..^^i4.^^i4 |M1_$8| |M2_$8|))  :pattern ( ($eq.$map_t..^^i4.^^i4 |M1_$8| |M2_$8|)))) :named ax_475))
   (assert (! (forall( (|M1_$9| $map_t..^^i4.^^i4) (|M2_$9| $map_t..^^i4.^^i4))(!(=> ($eq.$map_t..^^i4.^^i4 |M1_$9| |M2_$9|) (= |M1_$9| |M2_$9|))  :pattern ( ($eq.$map_t..^^i4.^^i4 |M1_$9| |M2_$9|)))) :named ax_476))
   (assert (! (forall( (|M2_$0_$0| $state) (|M1_$0_$0| $state))(= (and (and (<= ($current_timestamp |M1_$0_$0|) ($current_timestamp |M2_$0_$0|)) (forall( (|p_$32_$1| $ptr))(!(<= ($timestamp |M1_$0_$0| |p_$32_$1|) ($timestamp |M2_$0_$0| |p_$32_$1|))  :weight  0 :pattern ( ($timestamp |M2_$0_$0| |p_$32_$1|))))) ($call_transition |M1_$0_$0| |M2_$0_$0|)) (and (and (<= ($current_timestamp |M1_$0_$0|) ($current_timestamp |M2_$0_$0|)) (forall( (|p_$32_$0| $ptr))(!(<= ($timestamp |M1_$0_$0| |p_$32_$0|) ($timestamp |M2_$0_$0| |p_$32_$0|))  :weight  0 :pattern ( ($timestamp |M2_$0_$0| |p_$32_$0|))))) ($call_transition |M1_$0_$0| |M2_$0_$0|)))) :named ax_477))
   (assert (! (forall( (|M2_$0| $state) (|M1_$0| $state))(= (and (and (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) (forall( (|p_$32_$4| $ptr))(!(<= ($timestamp |M1_$0| |p_$32_$4|) ($timestamp |M2_$0| |p_$32_$4|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32_$4|))))) ($call_transition |M1_$0| |M2_$0|)) (and (and (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) (forall( (|p_$32| $ptr))(!(<= ($timestamp |M1_$0| |p_$32|) ($timestamp |M2_$0| |p_$32|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32|))))) ($call_transition |M1_$0| |M2_$0|)))) :named ax_478))
   (assert (! (forall( (|M2_$1| $state) (|M1_$1| $state))(= (and (and (< ($current_timestamp |M1_$1|) ($current_timestamp |M2_$1|)) (forall( (|p_$33_$3| $ptr))(!(<= ($timestamp |M1_$1| |p_$33_$3|) ($timestamp |M2_$1| |p_$33_$3|))  :weight  0 :pattern ( ($timestamp |M2_$1| |p_$33_$3|))))) ($call_transition |M1_$1| |M2_$1|)) (and (and (< ($current_timestamp |M1_$1|) ($current_timestamp |M2_$1|)) (forall( (|p_$33| $ptr))(!(<= ($timestamp |M1_$1| |p_$33|) ($timestamp |M2_$1| |p_$33|))  :weight  0 :pattern ( ($timestamp |M2_$1| |p_$33|))))) ($call_transition |M1_$1| |M2_$1|)))) :named ax_479))
   (assert (! (forall( (|max_$0| Int) (|val_$0| Int) (|min_$0| Int))(= (and (<= |min_$0| |val_$0|) (<= |val_$0| |max_$0|)) (and (<= |min_$0| |val_$0|) (<= |val_$0| |max_$0|)))) :named ax_480))
   (assert (! (forall( (|max| Int) (|val| Int) (|min| Int))(= (and (<= |min| |val|) (<= |val| |max|)) (and (<= |min| |val|) (<= |val| |max|)))) :named ax_481))
   (assert (! (forall( (|no| Int) (|t_$87| $ctype))(!(= ($get_fnptr |no| |t_$87|) ($ptr |t_$87| ($get_fnptr_ref |no|)))  :pattern ( ($get_fnptr |no| |t_$87|)))) :named ax_482))
   (assert (! (forall( (|owner_$0| $ptr) (|p_$18_$0| $ptr) (|S_$11_$0| $state))(= (and (= ($owner |S_$11_$0| |p_$18_$0|) |owner_$0|) ($closed |S_$11_$0| |p_$18_$0|)) (and (= ($owner |S_$11_$0| |p_$18_$0|) |owner_$0|) ($closed |S_$11_$0| |p_$18_$0|)))) :named ax_483))
   (assert (! (forall( (|owner| $ptr) (|p_$18| $ptr) (|S_$11| $state))(= (and (= ($owner |S_$11| |p_$18|) |owner|) ($closed |S_$11| |p_$18|)) (and (= ($owner |S_$11| |p_$18|) |owner|) ($closed |S_$11| |p_$18|)))) :named ax_484))
   (assert (! (forall( (|owns| $ptrset) (|o| $ptr) (|S_$35| $state))(= ($set_difference |owns| ($owns |S_$35| |o|)) ($set_difference |owns| ($owns |S_$35| |o|)))) :named ax_485))
   (assert (! (forall( (|p_$0| $ptr))(= (= ($kind_of ($typ |p_$0|)) $kind_composite) (= ($kind_of ($typ |p_$0|)) $kind_composite))) :named ax_486))
   (assert (! (forall( (|p_$1| $ptr))(= ($is_non_primitive ($typ |p_$1|)) ($is_non_primitive ($typ |p_$1|)))) :named ax_487))
   (assert (! (forall( (|p_$10_$0| $ptr) (|S_$4_$0| $state))(= ($ts_is_volatile ($select.tm ($typemap |S_$4_$0|) |p_$10_$0|)) ($ts_is_volatile ($select.tm ($typemap |S_$4_$0|) |p_$10_$0|)))) :named ax_488))
   (assert (! (forall( (|p_$10| $ptr) (|S_$4| $state))(= ($ts_is_volatile ($ts |S_$4| |p_$10|)) ($ts_is_volatile ($select.tm ($typemap |S_$4|) |p_$10|)))) :named ax_489))
   (assert (! (forall( (|p_$104| $ptr) (|S1_$9| $state) (|S2_$7| $state) (|q_$17| $ptr))(!($instantiate_bool ($set_in |q_$17| ($domain |S2_$7| |p_$104|)))  :weight  0 :pattern ( ($set_in |q_$17| ($domain |S1_$9| |p_$104|)) ($call_transition |S1_$9| |S2_$7|)))) :named ax_490))
   (assert (! (forall( (|p_$105| $ptr) (|S1_$10| $state) (|S2_$8| $state) (|q_$18| $ptr))(!($instantiate_bool ($set_in |q_$18| ($ver_domain ($read_version |S2_$8| |p_$105|))))  :weight  0 :pattern ( ($set_in |q_$18| ($ver_domain ($read_version |S1_$10| |p_$105|))) ($call_transition |S1_$10| |S2_$8|)))) :named ax_491))
   (assert (! (forall( (|p_$106| $ptr) (|c_$2| $ptr))(!(=> (forall( (|s_$8| $state))(!(=> ($valid_claim |s_$8| |c_$2|) ($closed |s_$8| |p_$106|))  :pattern ( ($dont_instantiate_state |s_$8|)))) ($in_claim_domain |p_$106| |c_$2|))  :pattern ( ($in_claim_domain |p_$106| |c_$2|)))) :named ax_492))
   (assert (! (forall( (|p_$11| $ptr) (|S_$5| $state))(= (= ($emb |S_$5| |p_$11|) ($ptr ^^root_emb ($ref |p_$11|))) (= ($ts_emb ($ts |S_$5| |p_$11|)) ($ptr ^^root_emb ($ref |p_$11|))))) :named ax_493))
   (assert (! (forall( (|p_$116| $ptr))(!(= ($set_cardinality ($set_singleton |p_$116|)) 1)  :weight  0)) :named ax_494))
   (assert (! (forall( (|p_$117| $ptr) (|s1_$5| $ptrset) (|s2_$5| $ptrset))(!(=> (and ($set_disjoint |s1_$5| |s2_$5|) ($set_in |p_$117| |s1_$5|)) (= ($id_set_disjoint |p_$117| |s1_$5| |s2_$5|) 1))  :weight  0 :pattern ( ($set_disjoint |s1_$5| |s2_$5|) ($set_in |p_$117| |s1_$5|)))) :named ax_495))
   (assert (! (forall( (|p_$118| $ptr) (|s1_$6| $ptrset) (|s2_$6| $ptrset))(!(=> (and ($set_disjoint |s1_$6| |s2_$6|) ($set_in |p_$118| |s2_$6|)) (= ($id_set_disjoint |p_$118| |s1_$6| |s2_$6|) 2))  :weight  0 :pattern ( ($set_disjoint |s1_$6| |s2_$6|) ($set_in |p_$118| |s2_$6|)))) :named ax_496))
   (assert (! (forall( (|p_$12| $ptr) (|M2| $state) (|M1| $state))(= (and (< ($current_timestamp |M1|) ($timestamp |M2| |p_$12|)) (<= ($timestamp |M2| |p_$12|) ($current_timestamp |M2|))) (and (< ($current_timestamp |M1|) ($timestamp |M2| |p_$12|)) (<= ($timestamp |M2| |p_$12|) ($current_timestamp |M2|))))) :named ax_497))
   (assert (! (forall( (|p_$120| $ptr) (|S1_$12| $state) (|p1_$1| $ptr))(!(=> ($set_in |p_$120| ($owns |S1_$12| |p1_$1|)) ($in_some_owns |p_$120|))  :weight  0 :pattern ( ($set_in |p_$120| ($owns |S1_$12| |p1_$1|))))) :named ax_498))
   (assert (! (forall( (|p_$121| $ptr) (|S1_$13| $state) (|p1_$2| $ptr))(!(= ($set_in |p_$121| ($owns |S1_$13| |p1_$2|)) ($set_in2 |p_$121| ($owns |S1_$13| |p1_$2|)))  :weight  0 :pattern ( ($set_in2 |p_$121| ($owns |S1_$13| |p1_$2|)) ($in_some_owns |p_$121|)))) :named ax_499))
   (assert (! (forall( (|p_$122| $ptr) (|s_$9| $ptrset))(!(= ($set_in |p_$122| |s_$9|) ($set_in2 |p_$122| |s_$9|))  :weight  0 :pattern ( ($set_in |p_$122| |s_$9|)))) :named ax_500))
   (assert (! (forall( (|p_$124| $ptr) (|s_$11| $ptrset))(!(= ($set_in |p_$124| |s_$11|) ($set_in0 |p_$124| |s_$11|))  :weight  0 :pattern ( ($set_in0 |p_$124| |s_$11|)))) :named ax_501))
   (assert (! (forall( (|p_$126| $ptr) (|i_$19| Int) (|j| Int) (|T_$23| $ctype))(!(=> (and (not (= |i_$19| 0)) (not (= |j| 0))) (= ($idx ($idx |p_$126| |i_$19| |T_$23|) |j| |T_$23|) ($idx |p_$126| (+ |i_$19| |j|) |T_$23|)))  :pattern ( ($idx ($idx |p_$126| |i_$19| |T_$23|) |j| |T_$23|)))) :named ax_502))
   (assert (! (forall( (|p_$129| $ptr) (|#r_$9| Int) (|T_$26| $ctype) (|sz_$25| Int))(!(= ($set_in |p_$129| ($full_extent ($ptr ($array |T_$26| |sz_$25|) |#r_$9|))) (or (= |p_$129| ($ptr ($array |T_$26| |sz_$25|) |#r_$9|)) (and (and (<= 0 ($index_within |p_$129| ($ptr |T_$26| |#r_$9|))) (<= ($index_within |p_$129| ($ptr |T_$26| |#r_$9|)) (- |sz_$25| 1))) ($set_in |p_$129| ($full_extent ($idx ($ptr |T_$26| |#r_$9|) ($index_within |p_$129| ($ptr |T_$26| |#r_$9|)) |T_$26|))))))  :pattern ( ($set_in |p_$129| ($full_extent ($ptr ($array |T_$26| |sz_$25|) |#r_$9|)))))) :named ax_503))
   (assert (! (forall( (|p_$13| $ptr) (|begin_time| Int) (|S_$6| $state))(= (and (or ($in_writes_at |begin_time| |p_$13|) (>= ($timestamp |S_$6| |p_$13|) |begin_time|)) ($mutable |S_$6| |p_$13|)) (and (or ($in_writes_at |begin_time| |p_$13|) (>= ($timestamp |S_$6| |p_$13|) |begin_time|)) ($mutable |S_$6| |p_$13|)))) :named ax_504))
   (assert (! (forall( (|p_$131| $ptr) (|#r_$11| Int) (|T_$28| $ctype) (|sz_$27| Int))(!(=> ($is_primitive |T_$28|) (= ($set_in |p_$131| ($span ($ptr ($array |T_$28| |sz_$27|) |#r_$11|))) (and (and (<= 0 ($index_within |p_$131| ($ptr |T_$28| |#r_$11|))) (<= ($index_within |p_$131| ($ptr |T_$28| |#r_$11|)) (- |sz_$27| 1))) (= |p_$131| ($idx ($ptr |T_$28| |#r_$11|) ($index_within |p_$131| ($ptr |T_$28| |#r_$11|)) |T_$28|)))))  :pattern ( ($set_in |p_$131| ($span ($ptr ($array |T_$28| |sz_$27|) |#r_$11|))) ($is_primitive |T_$28|)))) :named ax_505))
   (assert (! (forall( (|p_$132| $ptr) (|T_$30| $ctype) (|sz_$29| Int) (|elem| $ptr))(!(= ($set_in |elem| ($array_members |p_$132| |T_$30| |sz_$29|)) (and (and (<= 0 ($index_within |elem| |p_$132|)) (<= ($index_within |elem| |p_$132|) (- |sz_$29| 1))) (= |elem| ($idx |p_$132| ($index_within |elem| |p_$132|) |T_$30|))))  :pattern ( ($set_in |elem| ($array_members |p_$132| |T_$30| |sz_$29|))))) :named ax_506))
   (assert (! (forall( (|p_$135| $ptr) (|T_$33| $ctype) (|sz_$32| Int) (|idx| Int) (|S_$127| $ptrset))(!(=> ($set_disjoint ($array_range_no_state |p_$135| |T_$33| |sz_$32|) |S_$127|) (=> (and (<= 0 |idx|) (< |idx| |sz_$32|)) (= ($id_set_disjoint ($idx |p_$135| |idx| |T_$33|) ($array_range_no_state |p_$135| |T_$33| |sz_$32|) |S_$127|) 1)))  :pattern ( ($idx |p_$135| |idx| |T_$33|) ($set_disjoint ($array_range_no_state |p_$135| |T_$33| |sz_$32|) |S_$127|)))) :named ax_507))
   (assert (! (forall( (|p_$136| $ptr) (|T_$34| $ctype) (|sz_$33| Int) (|idx_$0| Int) (|S_$128| $ptrset))(!(=> ($set_disjoint |S_$128| ($array_range_no_state |p_$136| |T_$34| |sz_$33|)) (=> (and (<= 0 |idx_$0|) (< |idx_$0| |sz_$33|)) (= ($id_set_disjoint ($idx |p_$136| |idx_$0| |T_$34|) |S_$128| ($array_range_no_state |p_$136| |T_$34| |sz_$33|)) 2)))  :pattern ( ($idx |p_$136| |idx_$0| |T_$34|) ($set_disjoint |S_$128| ($array_range_no_state |p_$136| |T_$34| |sz_$33|))))) :named ax_508))
   (assert (! (forall( (|p_$137| $ptr) (|#r_$14| Int) (|T_$35| $ctype) (|sz_$34| Int))(!(= ($set_in |p_$137| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|)) (and (not (= |#r_$14| 0)) (and (and (<= 0 ($index_within |p_$137| ($ptr |T_$35| |#r_$14|))) (<= ($index_within |p_$137| ($ptr |T_$35| |#r_$14|)) (- |sz_$34| 1))) ($set_in |p_$137| ($full_extent ($idx ($ptr |T_$35| |#r_$14|) ($index_within |p_$137| ($ptr |T_$35| |#r_$14|)) |T_$35|))))))  :pattern ( ($set_in |p_$137| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|))))) :named ax_509))
   (assert (! (forall( (|p_$139| $ptr) (|k| Int))(!(and (= ($index_within ($idx |p_$139| |k| ($typ |p_$139|)) |p_$139|) |k|) ($simple_index ($idx |p_$139| |k| ($typ |p_$139|)) |p_$139|))  :pattern ( ($idx |p_$139| |k| ($typ |p_$139|))))) :named ax_510))
   (assert (! (forall( (|p_$14| $ptr) (|begin_time_$0| Int) (|S_$7| $state))(= (and (or ($in_writes_at |begin_time_$0| |p_$14|) (>= ($timestamp |S_$7| |p_$14|) |begin_time_$0|)) (and (and ($typed |S_$7| |p_$14|) (= ($owner |S_$7| |p_$14|) $me)) (=> ($is_primitive_ch ($typ |p_$14|)) (not ($closed |S_$7| |p_$14|))))) (and (or ($in_writes_at |begin_time_$0| |p_$14|) (>= ($timestamp |S_$7| |p_$14|) |begin_time_$0|)) (and (and ($typed |S_$7| |p_$14|) (= ($owner |S_$7| |p_$14|) $me)) (=> (= ($kind_of ($typ |p_$14|)) $kind_primitive) (not ($closed |S_$7| |p_$14|))))))) :named ax_511))
   (assert (! (forall( (|p_$140| $ptr) (|q_$22| $ptr) (|f_$30| $field))(!(=> ($simple_index |p_$140| |q_$22|) (and ($simple_index ($dot |p_$140| |f_$30|) |q_$22|) (= ($index_within ($dot |p_$140| |f_$30|) |q_$22|) ($index_within |p_$140| |q_$22|))))  :pattern ( ($simple_index ($dot |p_$140| |f_$30|) |q_$22|)) :pattern ( ($index_within ($dot |p_$140| |f_$30|) |q_$22|)))) :named ax_512))
   (assert (! (forall( (|p_$141| $ptr) (|q_$23| $ptr) (|f_$31| $field) (|i_$23| Int) (|t_$33| $ctype))(!(=> (and (and (<= 0 |i_$23|) (< |i_$23| ($embedded_array_size |f_$31| |t_$33|))) ($simple_index |p_$141| |q_$23|)) (and ($simple_index ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|) (= ($index_within ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|) ($index_within |p_$141| |q_$23|))))  :pattern ( ($simple_index ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|)) :pattern ( ($index_within ($idx ($dot |p_$141| |f_$31|) |i_$23| |t_$33|) |q_$23|)))) :named ax_513))
   (assert (! (forall( (|p_$143| $ptr))(!(=> (and (<= 0 ($ref |p_$143|)) (<= ($ref |p_$143|) $max.u8)) (= ($ptr_to_u8 |p_$143|) ($ref |p_$143|)))  :pattern ( ($ptr_to_u8 |p_$143|)))) :named ax_514))
   (assert (! (forall( (|p_$144| $ptr))(!(=> (and (<= $min.i8 ($ref |p_$144|)) (<= ($ref |p_$144|) $max.i8)) (= ($ptr_to_i8 |p_$144|) ($ref |p_$144|)))  :pattern ( ($ptr_to_i8 |p_$144|)))) :named ax_515))
   (assert (! (forall( (|p_$145| $ptr))(!(=> (and (<= 0 ($ref |p_$145|)) (<= ($ref |p_$145|) $max.u4)) (= ($ptr_to_u4 |p_$145|) ($ref |p_$145|)))  :pattern ( ($ptr_to_u4 |p_$145|)))) :named ax_516))
   (assert (! (forall( (|p_$146| $ptr))(!(=> (and (<= $min.i4 ($ref |p_$146|)) (<= ($ref |p_$146|) $max.i4)) (= ($ptr_to_i4 |p_$146|) ($ref |p_$146|)))  :pattern ( ($ptr_to_i4 |p_$146|)))) :named ax_517))
   (assert (! (forall( (|p_$147| $ptr))(!(=> (and (<= 0 ($ref |p_$147|)) (<= ($ref |p_$147|) $max.u2)) (= ($ptr_to_u2 |p_$147|) ($ref |p_$147|)))  :pattern ( ($ptr_to_u2 |p_$147|)))) :named ax_518))
   (assert (! (forall( (|p_$148| $ptr))(!(=> (and (<= $min.i2 ($ref |p_$148|)) (<= ($ref |p_$148|) $max.i2)) (= ($ptr_to_i2 |p_$148|) ($ref |p_$148|)))  :pattern ( ($ptr_to_i2 |p_$148|)))) :named ax_519))
   (assert (! (forall( (|p_$149| $ptr))(!(=> (and (<= 0 ($ref |p_$149|)) (<= ($ref |p_$149|) $max.u1)) (= ($ptr_to_u1 |p_$149|) ($ref |p_$149|)))  :pattern ( ($ptr_to_u1 |p_$149|)))) :named ax_520))
   (assert (! (forall( (|p_$15_$0| $ptr) (|S_$8_$0| $state))(= ($select.sm ($statusmap |S_$8_$0|) |p_$15_$0|) ($select.sm ($statusmap |S_$8_$0|) |p_$15_$0|))) :named ax_521))
   (assert (! (forall( (|p_$15| $ptr) (|S_$8| $state))(= ($select.sm ($statusmap |S_$8|) |p_$15|) ($select.sm ($statusmap |S_$8|) |p_$15|))) :named ax_522))
   (assert (! (forall( (|p_$150| $ptr))(!(=> (and (<= $min.i1 ($ref |p_$150|)) (<= ($ref |p_$150|) $max.i1)) (= ($ptr_to_i1 |p_$150|) ($ref |p_$150|)))  :pattern ( ($ptr_to_i1 |p_$150|)))) :named ax_523))
   (assert (! (forall( (|p_$155| $ptrset))(= ($int_to_ptrset ($ptrset_to_int |p_$155|)) |p_$155|)) :named ax_524))
   (assert (! (forall( (|p_$158| $ptr))(= ($int_to_ptr ($ptr_to_int |p_$158|)) |p_$158|)) :named ax_525))
   (assert (! (forall( (|p_$16_$0| $ptr) (|S_$9_$0| $state))(= ($select.tm ($typemap |S_$9_$0|) |p_$16_$0|) ($select.tm ($typemap |S_$9_$0|) |p_$16_$0|))) :named ax_526))
   (assert (! (forall( (|p_$16| $ptr) (|S_$9| $state))(= ($select.tm ($typemap |S_$9|) |p_$16|) ($select.tm ($typemap |S_$9|) |p_$16|))) :named ax_527))
   (assert (! (forall( (|p_$162| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.top |p_$162|) $seclbl.top)) :named ax_528))
   (assert (! (forall( (|p_$163| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.bot |p_$163|) $seclbl.bot)) :named ax_529))
   (assert (! (forall( (|p_$17_$0| $ptr) (|S_$10_$0| $state))(= (not (= ($kind_of ($typ ($owner |S_$10_$0| |p_$17_$0|))) $kind_thread)) (not (= ($kind_of ($typ ($owner |S_$10_$0| |p_$17_$0|))) $kind_thread)))) :named ax_530))
   (assert (! (forall( (|p_$17| $ptr) (|S_$10| $state))(= (not (= ($kind_of ($typ ($owner |S_$10| |p_$17|))) $kind_thread)) (not (= ($kind_of ($typ ($owner |S_$10| |p_$17|))) $kind_thread)))) :named ax_531))
   (assert (! (forall( (|p_$171| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool $zero.$map_t..$ptr_to..^^void.^^bool |p_$171|) false)  :weight  0)) :named ax_532))
   (assert (! (forall( (|p_$172| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$172|) false)  :pattern ( ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$172|)))) :named ax_533))
   (assert (! (forall( (|p_$173| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ $ptrclub.empty |p_$173|) false)) :named ax_534))
   (assert (! (forall( (|p_$181| Int))(= ($select.$map_t..$ptr_to..^Node.^^bool $zero.$map_t..$ptr_to..^Node.^^bool |p_$181|) false)) :named ax_535))
   (assert (! (forall( (|p_$185| Int))(= ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |p_$185|) $zero.$map_t..$ptr_to..^Node.^^bool)) :named ax_536))
   (assert (! (forall( (|p_$189| Int))(= ($select.$map_t..^^i4.^^i4 $zero.$map_t..^^i4.^^i4 |p_$189|) 0)) :named ax_537))
   (assert (! (forall( (|p_$19| $ptr) (|S_$13| $state))(= (or (not (= ($owner |S_$13| |p_$19|) $me)) (and (= ($kind_of ($typ |p_$19|)) $kind_primitive) ($closed |S_$13| |p_$19|))) (or (not (= ($owner |S_$13| |p_$19|) $me)) (and (= ($kind_of ($typ |p_$19|)) $kind_primitive) ($closed |S_$13| |p_$19|))))) :named ax_538))
   (assert (! (forall( (|p_$2_$0| $ptr) (|s_$0_$0| $state))(= ($select.mem ($memory |s_$0_$0|) |p_$2_$0|) ($select.mem ($memory |s_$0_$0|) |p_$2_$0|))) :named ax_539))
   (assert (! (forall( (|p_$2| $ptr) (|s_$0| $state))(= ($select.mem ($memory |s_$0|) |p_$2|) ($select.mem ($memory |s_$0|) |p_$2|))) :named ax_540))
   (assert (! (forall( (|p_$20| $ptr) (|S_$14| $state))(= (and ($typed |S_$14| |p_$20|) (= ($owner |S_$14| |p_$20|) $me)) (and ($typed |S_$14| |p_$20|) (= ($owner |S_$14| |p_$20|) $me)))) :named ax_541))
   (assert (! (forall( (|p_$21_$0| $ptr) (|S_$15_$0| $state))(= (and (and ($typed |S_$15_$0| |p_$21_$0|) (= ($owner |S_$15_$0| |p_$21_$0|) $me)) (=> (= ($kind_of ($typ |p_$21_$0|)) $kind_primitive) (not ($closed |S_$15_$0| |p_$21_$0|)))) (and (and ($typed |S_$15_$0| |p_$21_$0|) (= ($owner |S_$15_$0| |p_$21_$0|) $me)) (=> (= ($kind_of ($typ |p_$21_$0|)) $kind_primitive) (not ($closed |S_$15_$0| |p_$21_$0|)))))) :named ax_542))
   (assert (! (forall( (|p_$21| $ptr) (|S_$15| $state))(= (and (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me)) (=> ($is_primitive_ch ($typ |p_$21|)) (not ($closed |S_$15| |p_$21|)))) (and (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me)) (=> (= ($kind_of ($typ |p_$21|)) $kind_primitive) (not ($closed |S_$15| |p_$21|)))))) :named ax_543))
   (assert (! (forall( (|p_$23| $ptr) (|S_$20| $state))(= (and (not (= ($kind_of ($typ |p_$23|)) $kind_primitive)) (or (= ($owner |S_$20| |p_$23|) $me) ($in_wrapped_domain |S_$20| |p_$23|))) (and (not (= ($kind_of ($typ |p_$23|)) $kind_primitive)) (or (= ($owner |S_$20| |p_$23|) $me) ($in_wrapped_domain |S_$20| |p_$23|))))) :named ax_544))
   (assert (! (forall( (|p_$24_$0| $ptr) (|S2_$1| $state) (|S1_$1| $state))(= ($inv2 |S1_$1| |S2_$1| |p_$24_$0| ($typ |p_$24_$0|)) ($inv2 |S1_$1| |S2_$1| |p_$24_$0| ($typ |p_$24_$0|)))) :named ax_545))
   (assert (! (forall( (|p_$24| $ptr) (|S2| $state) (|S1| $state))(= ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)) ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)))) :named ax_546))
   (assert (! (forall( (|p_$26_$0| $ptr) (|S_$27_$0| $state))(= (and (forall( (|#q_$0_$1| $ptr))(!(=> ($closed |S_$27_$0| |#q_$0_$1|) ($inv2 |S_$27_$0| |S_$27_$0| |#q_$0_$1| ($typ |#q_$0_$1|)))  :pattern ( ($select.sm ($statusmap |S_$27_$0|) |#q_$0_$1|)))) ($good_for_admissibility |S_$27_$0|)) (and (forall( (|#q_$0_$0| $ptr))(!(=> ($closed |S_$27_$0| |#q_$0_$0|) ($inv2 |S_$27_$0| |S_$27_$0| |#q_$0_$0| ($typ |#q_$0_$0|)))  :pattern ( ($select.sm ($statusmap |S_$27_$0|) |#q_$0_$0|)))) ($good_for_admissibility |S_$27_$0|)))) :named ax_547))
   (assert (! (forall( (|p_$26| $ptr) (|S_$27| $state))(= (and (forall( (|#q_$0_$4| $ptr))(!(=> ($closed |S_$27| |#q_$0_$4|) ($inv |S_$27| |#q_$0_$4| ($typ |#q_$0_$4|)))  :pattern ( ($st |S_$27| |#q_$0_$4|)))) ($good_for_admissibility |S_$27|)) (and (forall( (|#q_$0| $ptr))(!(=> ($closed |S_$27| |#q_$0|) ($inv2 |S_$27| |S_$27| |#q_$0| ($typ |#q_$0|)))  :pattern ( ($select.sm ($statusmap |S_$27|) |#q_$0|)))) ($good_for_admissibility |S_$27|)))) :named ax_548))
   (assert (! (forall( (|p_$27| $ptr) (|S_$28| $state))(= (and (and ($closed |S_$28| |p_$27|) ($inv2 |S_$28| |S_$28| |p_$27| ($typ |p_$27|))) (and (forall( (|#q_$0_$6| $ptr))(!(=> ($closed |S_$28| |#q_$0_$6|) ($inv |S_$28| |#q_$0_$6| ($typ |#q_$0_$6|)))  :pattern ( ($st |S_$28| |#q_$0_$6|)))) ($good_for_admissibility |S_$28|))) (and (and ($closed |S_$28| |p_$27|) ($inv2 |S_$28| |S_$28| |p_$27| ($typ |p_$27|))) (and (forall( (|#q_$0_$3| $ptr))(!(=> ($closed |S_$28| |#q_$0_$3|) ($inv2 |S_$28| |S_$28| |#q_$0_$3| ($typ |#q_$0_$3|)))  :pattern ( ($select.sm ($statusmap |S_$28|) |#q_$0_$3|)))) ($good_for_admissibility |S_$28|))))) :named ax_549))
   (assert (! (forall( (|p_$29| $ptr) (|S_$29| $state))(= (and (and (and (and (and (and (and (and ($closed |S_$29| |p_$29|) (= ($owner |S_$29| |p_$29|) $me)) ($typed2 |S_$29| |p_$29| ($typ |p_$29|))) (not (= ($kind_of ($typ |p_$29|)) $kind_primitive))) ($is_non_primitive ($typ |p_$29|))) (or (not ($is_claimable ($typ |p_$29|))) (= ($ref_cnt |S_$29| |p_$29|) 0))) ($inv2 |S_$29| |S_$29| |p_$29| ($typ |p_$29|))) (forall( (|#q_$1_$1| $ptr))(!(=> ($closed |S_$29| |#q_$1_$1|) ($inv2 |S_$29| |S_$29| |#q_$1_$1| ($typ |#q_$1_$1|)))  :pattern ( ($select.sm ($statusmap |S_$29|) |#q_$1_$1|))))) ($good_for_pre_can_unwrap |S_$29|)) (and (and (and (and (and (and (and (and ($closed |S_$29| |p_$29|) (= ($owner |S_$29| |p_$29|) $me)) (and ($is |p_$29| ($typ |p_$29|)) ($typed |S_$29| |p_$29|))) (not (= ($kind_of ($typ |p_$29|)) $kind_primitive))) ($is_non_primitive ($typ |p_$29|))) (or (not ($is_claimable ($typ |p_$29|))) (= ($ref_cnt |S_$29| |p_$29|) 0))) ($inv2 |S_$29| |S_$29| |p_$29| ($typ |p_$29|))) (forall( (|#q_$1_$0| $ptr))(!(=> ($closed |S_$29| |#q_$1_$0|) ($inv2 |S_$29| |S_$29| |#q_$1_$0| ($typ |#q_$1_$0|)))  :pattern ( ($select.sm ($statusmap |S_$29|) |#q_$1_$0|))))) ($good_for_pre_can_unwrap |S_$29|)))) :named ax_550))
   (assert (! (forall( (|p_$30_$0| $ptr) (|S_$30_$0| $state))(= (= ($timestamp |S_$30_$0| |p_$30_$0|) ($current_timestamp |S_$30_$0|)) (= ($timestamp |S_$30_$0| |p_$30_$0|) ($current_timestamp |S_$30_$0|)))) :named ax_551))
   (assert (! (forall( (|p_$30| $ptr) (|S_$30| $state))(= (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)) (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)))) :named ax_552))
   (assert (! (forall( (|p_$31| $ptr) (|S_$31| $state))(= (and (= ($timestamp |S_$31| |p_$31|) ($current_timestamp |S_$31|)) ($mutable |S_$31| |p_$31|)) (and (= ($timestamp |S_$31| |p_$31|) ($current_timestamp |S_$31|)) ($mutable |S_$31| |p_$31|)))) :named ax_553))
   (assert (! (forall( (|p_$36| $ptr) (|S_$43| $state))(= (and (and ($extent_mutable |S_$43| |p_$36|) (= ($emb |S_$43| |p_$36|) ($ptr ^^root_emb ($ref |p_$36|)))) (= ($timestamp |S_$43| |p_$36|) ($current_timestamp |S_$43|))) (and (and ($extent_mutable |S_$43| |p_$36|) (= ($ts_emb ($ts |S_$43| |p_$36|)) ($ptr ^^root_emb ($ref |p_$36|)))) (= ($timestamp |S_$43| |p_$36|) ($current_timestamp |S_$43|))))) :named ax_554))
   (assert (! (forall( (|p_$4_$0| $ptr) (|s2_$2| $state) (|s1_$2| $state))(= (= ($select.mem ($memory |s1_$2|) |p_$4_$0|) ($select.mem ($memory |s2_$2|) |p_$4_$0|)) (= ($select.mem ($memory |s1_$2|) |p_$4_$0|) ($select.mem ($memory |s2_$2|) |p_$4_$0|)))) :named ax_555))
   (assert (! (forall( (|p_$4| $ptr) (|s2| $state) (|s1| $state))(= (= ($mem |s1| |p_$4|) ($mem |s2| |p_$4|)) (= ($select.mem ($memory |s1|) |p_$4|) ($select.mem ($memory |s2|) |p_$4|)))) :named ax_556))
   (assert (! (forall( (|p_$5_$0| $ptr) (|s2_$0_$0| $state) (|s1_$0_$0| $state))(= (= ($select.sm ($statusmap |s1_$0_$0|) |p_$5_$0|) ($select.sm ($statusmap |s2_$0_$0|) |p_$5_$0|)) (= ($select.sm ($statusmap |s1_$0_$0|) |p_$5_$0|) ($select.sm ($statusmap |s2_$0_$0|) |p_$5_$0|)))) :named ax_557))
   (assert (! (forall( (|p_$5| $ptr) (|s2_$0| $state) (|s1_$0| $state))(= (= ($st |s1_$0| |p_$5|) ($st |s2_$0| |p_$5|)) (= ($select.sm ($statusmap |s1_$0|) |p_$5|) ($select.sm ($statusmap |s2_$0|) |p_$5|)))) :named ax_558))
   (assert (! (forall( (|p_$6_$0| $ptr) (|s2_$1_$0| $state) (|s1_$1_$0| $state))(= (= ($select.tm ($typemap |s1_$1_$0|) |p_$6_$0|) ($select.tm ($typemap |s2_$1_$0|) |p_$6_$0|)) (= ($select.tm ($typemap |s1_$1_$0|) |p_$6_$0|) ($select.tm ($typemap |s2_$1_$0|) |p_$6_$0|)))) :named ax_559))
   (assert (! (forall( (|p_$6| $ptr) (|s2_$1| $state) (|s1_$1| $state))(= (= ($ts |s1_$1| |p_$6|) ($ts |s2_$1| |p_$6|)) (= ($select.tm ($typemap |s1_$1|) |p_$6|) ($select.tm ($typemap |s2_$1|) |p_$6|)))) :named ax_560))
   (assert (! (forall( (|p_$62| $ptr) (|q_$6| $ptr) (|r_$0| $ptr))(!(=> (and ($extent_hint |p_$62| |q_$6|) ($extent_hint |q_$6| |r_$0|)) ($extent_hint |p_$62| |r_$0|))  :pattern ( ($extent_hint |p_$62| |q_$6|) ($extent_hint |q_$6| |r_$0|)))) :named ax_561))
   (assert (! (forall( (|p_$63| $ptr))(!($extent_hint |p_$63| |p_$63|)  :pattern ( ($typ |p_$63|)))) :named ax_562))
   (assert (! (forall( (|p_$64| $ptr) (|f_$12| $field))(!(and (= ($ghost_emb ($ghost_ref |p_$64| |f_$12|)) |p_$64|) (= ($ghost_path ($ghost_ref |p_$64| |f_$12|)) |f_$12|))  :weight  0 :pattern ( ($ghost_ref |p_$64| |f_$12|)))) :named ax_563))
   (assert (! (forall( (|p_$65| $ptr) (|f_$13| $field))(!($in_range_spec_ptr ($ghost_ref |p_$65| |f_$13|))  :pattern ( ($ghost_ref |p_$65| |f_$13|)))) :named ax_564))
   (assert (! (forall( (|p_$71| $ctype) (|f_$20| $field) (|ft| $ctype))(!(=> (and ($is_record_field |p_$71| |f_$20| |ft|) ($is_record_type |ft|)) (= ($as_record_record_field |f_$20|) |f_$20|))  :pattern ( ($is_record_field |p_$71| |f_$20| |ft|) ($is_record_type |ft|)))) :named ax_565))
   (assert (! (forall( (|p_$9_$0| $ptr) (|S_$3_$0| $state))(= (= ($ts_emb ($ts |S_$3_$0| |p_$9_$0|)) ($ptr ^^root_emb ($ref |p_$9_$0|))) (= ($ts_emb ($select.tm ($typemap |S_$3_$0|) |p_$9_$0|)) ($ptr ^^root_emb ($ref |p_$9_$0|))))) :named ax_566))
   (assert (! (forall( (|p_$9| $ptr) (|S_$3| $state))(= (= ($emb |S_$3| |p_$9|) ($ptr ^^root_emb ($ref |p_$9|))) (= ($ts_emb ($ts |S_$3| |p_$9|)) ($ptr ^^root_emb ($ref |p_$9|))))) :named ax_567))
   (assert (! (forall( (|p| $ptr))(= ($is_threadtype ($typ |p|)) ($is_threadtype ($typ |p|)))) :named ax_568))
   (assert (! (forall( (|p1_$4| $ptr) (|p2_$2| $ptr))(=> (= ($ref |p1_$4|) ($ref |p2_$2|)) (forall( (|p_$52_$1| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.compare |p1_$4| |p2_$2|) |p_$52_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.bot |p_$52_$1|))))) :named ax_569))
   (assert (! (forall( (|p1_$5| $ptr) (|p2_$3| $ptr) (|c_$18| $ptrclub))(=> (and (and (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$18|) |p1_$5|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$18|) |p2_$3|)) (is_active_ptrclub |c_$18|)) (forall( (|p_$52_$2| $ptr))(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.compare |p1_$5| |p2_$3|) |p_$52_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.bound |c_$18|) |p_$52_$2|))))) :named ax_570))
   (assert (! (forall( (|p2_$0| $ptr) (|p1_$0| $ptr))(= (not (= ($ref |p1_$0|) ($ref |p2_$0|))) (not (= ($ref |p1_$0|) ($ref |p2_$0|))))) :named ax_571))
   (assert (! (forall( (|p2| $ptr) (|p1| $ptr))(= (= ($ref |p1|) ($ref |p2|)) (= ($ref |p1|) ($ref |p2|)))) :named ax_572))
   (assert (! (forall( (|Q#k$1^151.14#tc2| Int) (|#l2_$1| $map_t..^^i4.^^i4) (|#l1_$3| Int) (|#l0_$4| Int))(!(=> (and (and (and (<= $min.i4 |Q#k$1^151.14#tc2|) (<= |Q#k$1^151.14#tc2| $max.i4)) (and (<= $min.i4 |#l1_$3|) (<= |#l1_$3| $max.i4))) (and (<= $min.i4 |#l0_$4|) (<= |#l0_$4| $max.i4))) (= ($select.$map_t..^^i4.^^i4 (F@lambda@4 |#l2_$1| |#l1_$3| |#l0_$4|) |Q#k$1^151.14#tc2|) (ite (= |Q#k$1^151.14#tc2| |#l0_$4|) |#l1_$3| ($select.$map_t..^^i4.^^i4 |#l2_$1| |Q#k$1^151.14#tc2|))))  :pattern ( ($select.$map_t..^^i4.^^i4 (F@lambda@4 |#l2_$1| |#l1_$3| |#l0_$4|) |Q#k$1^151.14#tc2|)))) :named ax_573))
   (assert (! (forall( (|Q#k$1^194.37#dt1| Int) (|#l1_$1| $map_t..$ptr_to..^Node.^^bool) (|#l0_$1| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#k$1^194.37#dt1|))) ($in_range_phys_ptr ($ref ($ptr ^Node |#l0_$1|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@7 |#l1_$1| ($ref ($ptr ^Node |#l0_$1|))) ($ref ($ptr ^Node |Q#k$1^194.37#dt1|))) (or (= ($ref ($ptr ^Node |Q#k$1^194.37#dt1|)) ($ref ($ptr ^Node |#l0_$1|))) ($select.$map_t..$ptr_to..^Node.^^bool |#l1_$1| ($ref ($ptr ^Node |Q#k$1^194.37#dt1|))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@7 |#l1_$1| ($ref ($ptr ^Node |#l0_$1|))) ($ref ($ptr ^Node |Q#k$1^194.37#dt1|)))))) :named ax_574))
   (assert (! (forall( (|Q#k$1^94.14#tc2| Int))(!(=> (and (<= $min.i4 |Q#k$1^94.14#tc2|) (<= |Q#k$1^94.14#tc2| $max.i4)) (= ($select.$map_t..^^i4.^^i4 F@lambda@3 |Q#k$1^94.14#tc2|) 0))  :pattern ( ($select.$map_t..^^i4.^^i4 F@lambda@3 |Q#k$1^94.14#tc2|)))) :named ax_575))
   (assert (! (forall( (|Q#m$1^240.15#dt1| Int) (|#l2_$0| $map_t..$ptr_to..^Node.^^bool) (|#l1_$0| $map_t..$ptr_to..^Node.^^bool) (|#l0_$0| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^240.15#dt1|))) ($in_range_phys_ptr ($ref ($ptr ^Node |#l0_$0|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@8 |#l2_$0| |#l1_$0| ($ref ($ptr ^Node |#l0_$0|))) ($ref ($ptr ^Node |Q#m$1^240.15#dt1|))) (or (or (= ($ref ($ptr ^Node |Q#m$1^240.15#dt1|)) ($ref ($ptr ^Node |#l0_$0|))) ($select.$map_t..$ptr_to..^Node.^^bool |#l1_$0| ($ref ($ptr ^Node |Q#m$1^240.15#dt1|)))) ($select.$map_t..$ptr_to..^Node.^^bool |#l2_$0| ($ref ($ptr ^Node |Q#m$1^240.15#dt1|))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@8 |#l2_$0| |#l1_$0| ($ref ($ptr ^Node |#l0_$0|))) ($ref ($ptr ^Node |Q#m$1^240.15#dt1|)))))) :named ax_576))
   (assert (! (forall( (|Q#m$1^283.15#dt1| Int) (|#l2| $map_t..$ptr_to..^Node.^^bool) (|#l1| $map_t..$ptr_to..^Node.^^bool) (|#l0| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^283.15#dt1|))) ($in_range_phys_ptr ($ref ($ptr ^Node |#l0|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@9 |#l2| |#l1| ($ref ($ptr ^Node |#l0|))) ($ref ($ptr ^Node |Q#m$1^283.15#dt1|))) (or (or (= ($ref ($ptr ^Node |Q#m$1^283.15#dt1|)) ($ref ($ptr ^Node |#l0|))) ($select.$map_t..$ptr_to..^Node.^^bool |#l1| ($ref ($ptr ^Node |Q#m$1^283.15#dt1|)))) ($select.$map_t..$ptr_to..^Node.^^bool |#l2| ($ref ($ptr ^Node |Q#m$1^283.15#dt1|))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@9 |#l2| |#l1| ($ref ($ptr ^Node |#l0|))) ($ref ($ptr ^Node |Q#m$1^283.15#dt1|)))))) :named ax_577))
   (assert (! (forall( (|Q#m$1^93.12#dt1| Int) (|#l0_$5| $map_t..$ptr_to..^Node.^^bool))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^93.12#dt1|))) ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool (F@lambda@2 |#l0_$5|) ($ref ($ptr ^Node |Q#m$1^93.12#dt1|))) |#l0_$5|))  :pattern ( ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool (F@lambda@2 |#l0_$5|) ($ref ($ptr ^Node |Q#m$1^93.12#dt1|)))))) :named ax_578))
   (assert (! (forall( (|Q#n$1^153.15#dt1| Int) (|#l0_$3| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^153.15#dt1|))) ($in_range_phys_ptr ($ref ($ptr ^Node |#l0_$3|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@5 ($ref ($ptr ^Node |#l0_$3|))) ($ref ($ptr ^Node |Q#n$1^153.15#dt1|))) (= ($ref ($ptr ^Node |Q#n$1^153.15#dt1|)) ($ref ($ptr ^Node |#l0_$3|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@5 ($ref ($ptr ^Node |#l0_$3|))) ($ref ($ptr ^Node |Q#n$1^153.15#dt1|)))))) :named ax_579))
   (assert (! (forall( (|Q#n$1^163.41#dt1| Int) (|#l1_$2| $map_t..$ptr_to..^Node.^^bool) (|#l0_$2| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^163.41#dt1|))) ($in_range_phys_ptr ($ref ($ptr ^Node |#l0_$2|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@6 |#l1_$2| ($ref ($ptr ^Node |#l0_$2|))) ($ref ($ptr ^Node |Q#n$1^163.41#dt1|))) (or (= ($ref ($ptr ^Node |Q#n$1^163.41#dt1|)) ($ref ($ptr ^Node |#l0_$2|))) ($select.$map_t..$ptr_to..^Node.^^bool |#l1_$2| ($ref ($ptr ^Node |Q#n$1^163.41#dt1|))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@6 |#l1_$2| ($ref ($ptr ^Node |#l0_$2|))) ($ref ($ptr ^Node |Q#n$1^163.41#dt1|)))))) :named ax_580))
   (assert (! (forall( (|Q#n$1^93.12#dt1| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^93.12#dt1|))) (= ($select.$map_t..$ptr_to..^Node.^^bool F@lambda@1 ($ref ($ptr ^Node |Q#n$1^93.12#dt1|))) false))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool F@lambda@1 ($ref ($ptr ^Node |Q#n$1^93.12#dt1|)))))) :named ax_581))
   (assert (! (forall( (|q_$21| $ptr) (|S_$129| $state) (|p_$138| $ptr))(!(= ($set_in |q_$21| ($non_null_extent |S_$129| |p_$138|)) (and (not (= ($ref |p_$138|) ($ref $null))) ($set_in |q_$21| ($extent |S_$129| |p_$138|))))  :pattern ( ($set_in |q_$21| ($non_null_extent |S_$129| |p_$138|))))) :named ax_582))
   (assert (! (forall( (|r_$2| $record) (|f_$18| $field) (|v_$7| Int))(!(= ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|) ($unchecked ($record_field_int_kind |f_$18|) |v_$7|))  :pattern ( ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|)))) :named ax_583))
   (assert (! (forall( (|r_$3| $record) (|f_$19| $field))(!($in_range_t ($record_field_int_kind |f_$19|) ($rec_fetch |r_$3| |f_$19|))  :pattern ( ($rec_fetch |r_$3| |f_$19|)))) :named ax_584))
   (assert (! (forall( (|r_$4| $record) (|f1| $field) (|f2| $field) (|v_$8| Int))(!(or (= ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|) ($rec_fetch |r_$4| |f2|)) (= |f1| |f2|))  :pattern ( ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|)))) :named ax_585))
   (assert (! (forall( (|r1_$0| $record) (|r2_$0| $record))(!(=> (forall( (|f_$21| $field))($rec_base_eq ($rec_fetch |r1_$0| |f_$21|) ($rec_fetch |r2_$0| |f_$21|))) ($rec_eq |r1_$0| |r2_$0|))  :pattern ( ($rec_eq |r1_$0| |r2_$0|)))) :named ax_586))
   (assert (! (forall( (|r1_$1| $record) (|r2_$1| $record) (|f_$22| $field))(!(=> ($rec_eq ($int_to_record ($rec_fetch |r1_$1| |f_$22|)) ($int_to_record ($rec_fetch |r2_$1| |f_$22|))) ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| |f_$22|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| ($as_record_record_field |f_$22|)))))) :named ax_587))
   (assert (! (forall( (|r1_$2| $record) (|r2_$2| $record) (|f_$32| $field) (|R| $ctype))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r1_$2| |f_$32|)) ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r2_$2| |f_$32|))) ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)))  :weight  0 :pattern ( ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)) ($is_record_field |R| |f_$32| ($map_t ($ptr_to ^^void) ^^bool))))) :named ax_588))
   (assert (! (forall( (|r1_$3| $record) (|r2_$3| $record) (|f_$33| $field) (|R_$0| $ctype))(!(=> ($eq.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.^^bool ($rec_fetch |r1_$3| |f_$33|)) ($int_to_map_t..ptr_to..^Node.^^bool ($rec_fetch |r2_$3| |f_$33|))) ($rec_base_eq ($rec_fetch |r1_$3| |f_$33|) ($rec_fetch |r2_$3| |f_$33|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$3| |f_$33|) ($rec_fetch |r2_$3| |f_$33|)) ($is_record_field |R_$0| |f_$33| ($map_t ($ptr_to ^Node) ^^bool))))) :named ax_589))
   (assert (! (forall( (|r1_$4| $record) (|r2_$4| $record) (|f_$34| $field) (|R_$1| $ctype))(!(=> ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($rec_fetch |r1_$4| |f_$34|)) ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($rec_fetch |r2_$4| |f_$34|))) ($rec_base_eq ($rec_fetch |r1_$4| |f_$34|) ($rec_fetch |r2_$4| |f_$34|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$4| |f_$34|) ($rec_fetch |r2_$4| |f_$34|)) ($is_record_field |R_$1| |f_$34| ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))))) :named ax_590))
   (assert (! (forall( (|r1_$5| $record) (|r2_$5| $record) (|f_$35| $field) (|R_$2| $ctype))(!(=> ($eq.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($rec_fetch |r1_$5| |f_$35|)) ($int_to_map_t..^^i4.^^i4 ($rec_fetch |r2_$5| |f_$35|))) ($rec_base_eq ($rec_fetch |r1_$5| |f_$35|) ($rec_fetch |r2_$5| |f_$35|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$5| |f_$35|) ($rec_fetch |r2_$5| |f_$35|)) ($is_record_field |R_$2| |f_$35| ($map_t ^^i4 ^^i4))))) :named ax_591))
   (assert (! (forall( (|r1| $record) (|r2| $record))(!(= ($rec_eq |r1| |r2|) (= |r1| |r2|))  :pattern ( ($rec_eq |r1| |r2|)))) :named ax_592))
   (assert (! (forall( (|S_$100| $state) (|p_$102| $ptr) (|d_$3| $ptr) (|f_$26| $field) (|sz_$17| Int) (|i_$11| Int) (|t_$24| $ctype))(!(=> (and (and (and (and ($full_stop |S_$100|) ($set_in |p_$102| ($domain |S_$100| |d_$3|))) ($is_primitive_embedded_array |f_$26| |sz_$17|)) (<= 0 |i_$11|)) (< |i_$11| |sz_$17|)) (and ($typed |S_$100| ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|)) (not ($ts_is_volatile ($ts |S_$100| ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|))))))  :pattern ( ($set_in |p_$102| ($domain |S_$100| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($select.tm ($typemap |S_$100|) ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|))) :pattern ( ($set_in |p_$102| ($domain |S_$100| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($owner |S_$100| ($idx ($dot |p_$102| |f_$26|) |i_$11| |t_$24|))))) :named ax_593))
   (assert (! (forall( (|S_$101| $state) (|r_$17| Int) (|d_$4| $ptr) (|sz_$18| Int) (|i_$12| Int) (|t_$25| $ctype))(!(=> (and (and (and (and ($full_stop |S_$101|) ($is_primitive |t_$25|)) ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$17|) ($domain |S_$101| |d_$4|))) (<= 0 |i_$12|)) (< |i_$12| |sz_$18|)) (and ($typed |S_$101| ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|)) (not ($ts_is_volatile ($ts |S_$101| ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|))))))  :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$17|) ($domain |S_$101| |d_$4|)) ($select.tm ($typemap |S_$101|) ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|)) ($is_primitive |t_$25|)) :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$17|) ($domain |S_$101| |d_$4|)) ($owner |S_$101| ($idx ($ptr |t_$25| |r_$17|) |i_$12| |t_$25|)) ($is_primitive |t_$25|)))) :named ax_594))
   (assert (! (forall( (|S_$102| $state) (|r_$18| Int) (|d_$5| $ptr) (|sz_$19| Int) (|i_$13| Int) (|t_$26| $ctype))(!(=> (and (and (and (and ($full_stop |S_$102|) ($is_primitive |t_$26|)) ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$18|) ($domain |S_$102| |d_$5|))) (<= 0 |i_$13|)) (< |i_$13| |sz_$19|)) (= ($select.mem ($memory |S_$102|) ($idx ($ptr |t_$26| |r_$18|) |i_$13| |t_$26|)) ($fetch_from_domain ($read_version |S_$102| |d_$5|) ($idx ($ptr |t_$26| |r_$18|) |i_$13| |t_$26|))))  :pattern ( ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$18|) ($domain |S_$102| |d_$5|)) ($select.mem ($memory |S_$102|) ($idx ($ptr |t_$26| |r_$18|) |i_$13| |t_$26|)) ($is_primitive |t_$26|)))) :named ax_595))
   (assert (! (forall( (|S_$103| $state) (|p_$103| $ptr) (|f_$27| $field) (|sz_$20| Int) (|i_$14| Int) (|t_$27| $ctype))(!(=> (and (and (and ($good_state |S_$103|) ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|)) (<= 0 |i_$14|)) (< |i_$14| |sz_$20|)) ($ts_is_volatile ($select.tm ($typemap |S_$103|) ($idx ($dot |p_$103| |f_$27|) |i_$14| |t_$27|))))  :pattern ( ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|) ($ts_is_volatile ($select.tm ($typemap |S_$103|) ($idx ($dot |p_$103| |f_$27|) |i_$14| |t_$27|)))))) :named ax_596))
   (assert (! (forall( (|S_$104| $state) (|c_$3| $ptr) (|obj| $ptr) (|ptr| $ptr))(!(= ($by_claim |S_$104| |c_$3| |obj| |ptr|) |ptr|)  :weight  0 :pattern ( ($by_claim |S_$104| |c_$3| |obj| |ptr|)))) :named ax_597))
   (assert (! (forall( (|S_$105| $state) (|p_$107| $ptr) (|c_$4| $ptr) (|f_$28| $field))(!(=> (and (and (and ($good_state |S_$105|) ($closed |S_$105| |c_$4|)) ($in_claim_domain |p_$107| |c_$4|)) ($is_primitive_non_volatile_field |f_$28|)) (and ($in_claim_domain |p_$107| |c_$4|) (= ($select.mem ($memory |S_$105|) ($dot |p_$107| |f_$28|)) ($fetch_from_domain ($claim_version |c_$4|) ($dot |p_$107| |f_$28|)))))  :pattern ( ($in_claim_domain |p_$107| |c_$4|) ($select.mem ($memory |S_$105|) ($dot |p_$107| |f_$28|))) :pattern ( ($by_claim |S_$105| |c_$4| |p_$107| ($dot |p_$107| |f_$28|))))) :named ax_598))
   (assert (! (forall( (|S_$106| $state) (|p_$108| $ptr) (|c_$5| $ptr) (|f_$29| $field) (|i_$15| Int) (|sz_$21| Int) (|t_$28| $ctype))(!(=> (and (and (and (and (and ($good_state |S_$106|) ($closed |S_$106| |c_$5|)) ($in_claim_domain |p_$108| |c_$5|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)) (<= 0 |i_$15|)) (< |i_$15| |sz_$21|)) (= ($select.mem ($memory |S_$106|) ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|)) ($fetch_from_domain ($claim_version |c_$5|) ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|))))  :pattern ( ($valid_claim |S_$106| |c_$5|) ($in_claim_domain |p_$108| |c_$5|) ($select.mem ($memory |S_$106|) ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)) :pattern ( ($by_claim |S_$106| |c_$5| |p_$108| ($idx ($dot |p_$108| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)))) :named ax_599))
   (assert (! (forall( (|S_$107| $state) (|p_$109| $ptr) (|c_$6| $ptr) (|i_$16| Int) (|sz_$22| Int) (|t_$29| $ctype))(!(=> (and (and (and (and (and ($good_state |S_$107|) ($closed |S_$107| |c_$6|)) ($in_claim_domain ($ptr ($array |t_$29| |sz_$22|) ($ref |p_$109|)) |c_$6|)) ($is_primitive |t_$29|)) (<= 0 |i_$16|)) (< |i_$16| |sz_$22|)) (= ($select.mem ($memory |S_$107|) ($idx |p_$109| |i_$16| |t_$29|)) ($fetch_from_domain ($claim_version |c_$6|) ($idx |p_$109| |i_$16| |t_$29|))))  :pattern ( ($valid_claim |S_$107| |c_$6|) ($in_claim_domain ($ptr ($array |t_$29| |sz_$22|) ($ref |p_$109|)) |c_$6|) ($select.mem ($memory |S_$107|) ($idx |p_$109| |i_$16| |t_$29|)) ($is_primitive |t_$29|)) :pattern ( ($by_claim |S_$107| |c_$6| |p_$109| ($idx |p_$109| |i_$16| |t_$29|)) ($is_primitive |t_$29|) ($is_array |S_$107| |p_$109| |t_$29| |sz_$22|)))) :named ax_600))
   (assert (! (forall( (|S_$109| $state) (|r_$19| Int) (|t_$30| $ctype) (|approver_$1| $field) (|subject_$2| $field))(!(=> (and (and (and ($full_stop |S_$109|) ($is_approved_by |t_$30| |approver_$1| |subject_$2|)) ($closed |S_$109| ($ptr |t_$30| |r_$19|))) (or (= ($int_to_ptr ($select.mem ($memory |S_$109|) ($dot ($ptr |t_$30| |r_$19|) |approver_$1|))) $me) (= ($int_to_ptr ($fetch_from_vv ($read_vol_version |S_$109| ($ptr |t_$30| |r_$19|)) ($dot ($ptr |t_$30| |r_$19|) |approver_$1|))) $me))) (= ($select.mem ($memory |S_$109|) ($dot ($ptr |t_$30| |r_$19|) |subject_$2|)) ($fetch_from_vv ($read_vol_version |S_$109| ($ptr |t_$30| |r_$19|)) ($dot ($ptr |t_$30| |r_$19|) |subject_$2|))))  :pattern ( ($is_approved_by |t_$30| |approver_$1| |subject_$2|) ($select.mem ($memory |S_$109|) ($dot ($ptr |t_$30| |r_$19|) |subject_$2|))))) :named ax_601))
   (assert (! (forall( (|S_$110| $state) (|r_$20| Int) (|t_$31| $ctype) (|subject_$3| $field))(!(=> (and (and (and ($full_stop |S_$110|) ($closed |S_$110| ($ptr |t_$31| |r_$20|))) ($is_owner_approved |t_$31| |subject_$3|)) (= ($owner |S_$110| ($ptr |t_$31| |r_$20|)) $me)) (= ($select.mem ($memory |S_$110|) ($dot ($ptr |t_$31| |r_$20|) |subject_$3|)) ($fetch_from_vv ($read_vol_version |S_$110| ($ptr |t_$31| |r_$20|)) ($dot ($ptr |t_$31| |r_$20|) |subject_$3|))))  :pattern ( ($is_owner_approved |t_$31| |subject_$3|) ($select.mem ($memory |S_$110|) ($dot ($ptr |t_$31| |r_$20|) |subject_$3|))))) :named ax_602))
   (assert (! (forall( (|S_$111| $state) (|p_$111| $ptr) (|q_$19| $ptr))(!(=> (and (and ($good_state |S_$111|) ($closed |S_$111| |q_$19|)) ($is_non_primitive ($typ |p_$111|))) (= ($set_in |p_$111| ($owns |S_$111| |q_$19|)) (= ($owner |S_$111| |p_$111|) |q_$19|)))  :pattern ( ($set_in |p_$111| ($owns |S_$111| |q_$19|)) ($is_non_primitive ($typ |p_$111|))))) :named ax_603))
   (assert (! (forall( (|S_$112| $state) (|#r_$6| Int) (|#t_$14| $ctype))(!(=> ($good_state |S_$112|) (=> ($is_arraytype |#t_$14|) (= ($owns |S_$112| ($ptr |#t_$14| |#r_$6|)) $set_empty)))  :pattern ( ($owns |S_$112| ($ptr |#t_$14| |#r_$6|)) ($is_arraytype |#t_$14|)))) :named ax_604))
   (assert (! (forall( (|S_$113| $state) (|#p_$30| $ptr) (|#t_$15| $ctype))(!(=> (and ($invok_state |S_$113|) ($closed |S_$113| |#p_$30|)) ($inv2 |S_$113| |S_$113| |#p_$30| |#t_$15|))  :pattern ( ($inv2 |S_$113| |S_$113| |#p_$30| |#t_$15|)))) :named ax_605))
   (assert (! (forall( (|S_$114| $state))(!(=> ($good_state |S_$114|) (forall( (|#p_$10_$1_$0| $ptr) (|#q_$11| $ptr))(!(=> (and (and ($good_state |S_$114|) ($set_in |#p_$10_$1_$0| ($owns |S_$114| |#q_$11|))) ($closed |S_$114| |#q_$11|)) (and ($closed |S_$114| |#p_$10_$1_$0|) (not (= ($ref |#p_$10_$1_$0|) 0))))  :pattern ( ($set_in |#p_$10_$1_$0| ($owns |S_$114| |#q_$11|))))))  :pattern ( ($good_state |S_$114|)))) :named ax_606))
   (assert (! (forall( (|S_$115| $state) (|#p_$31| $ptr))(!(=> ($closed |S_$115| |#p_$31|) ($typed |S_$115| |#p_$31|))  :pattern ( ($closed |S_$115| |#p_$31|)))) :named ax_607))
   (assert (! (forall( (|S_$116| $state) (|p_$112| $ptr) (|v_$9| Int))(!(and (and (and (= ($typemap ($update_int |S_$116| |p_$112| |v_$9|)) ($typemap |S_$116|)) (= ($statusmap ($update_int |S_$116| |p_$112| |v_$9|)) ($statusmap |S_$116|))) (= ($memory ($update_int |S_$116| |p_$112| |v_$9|)) ($store.mem ($memory |S_$116|) |p_$112| |v_$9|))) (and (and (< ($current_timestamp |S_$116|) ($current_timestamp ($update_int |S_$116| |p_$112| |v_$9|))) (forall( (|p_$33_$1| $ptr))(!(<= ($timestamp |S_$116| |p_$33_$1|) ($timestamp ($update_int |S_$116| |p_$112| |v_$9|) |p_$33_$1|))  :weight  0 :pattern ( ($timestamp ($update_int |S_$116| |p_$112| |v_$9|) |p_$33_$1|))))) ($call_transition |S_$116| ($update_int |S_$116| |p_$112| |v_$9|))))  :pattern ( ($update_int |S_$116| |p_$112| |v_$9|)))) :named ax_608))
   (assert (! (forall( (|S_$117| $state) (|l_$3| $ptr) (|p_$113| $ptr))(!(=> (not (= ($kind_of ($typ |l_$3|)) $kind_primitive)) (and (and (and (and (= ($statusmap ($take_over |S_$117| |l_$3| |p_$113|)) ($store.sm ($statusmap |S_$117|) |p_$113| ($taken_over |S_$117| |l_$3| |p_$113|))) ($closed ($take_over |S_$117| |l_$3| |p_$113|) |p_$113|)) (= ($owner ($take_over |S_$117| |l_$3| |p_$113|) |p_$113|) |l_$3|)) (= ($ref_cnt ($take_over |S_$117| |l_$3| |p_$113|) |p_$113|) ($ref_cnt |S_$117| |p_$113|))) true))  :pattern ( ($take_over |S_$117| |l_$3| |p_$113|)))) :named ax_609))
   (assert (! (forall( (|S_$119| $state))(!(=> ($program_entry_point |S_$119|) ($program_entry_point_ch |S_$119|))  :pattern ( ($program_entry_point |S_$119|)))) :named ax_610))
   (assert (! (forall( (|S_$120| $state) (|p_$115| $ptr) (|q_$20| $ptr))(!(= ($set_in |p_$115| ($volatile_span |S_$120| |q_$20|)) (or (= |p_$115| |q_$20|) (and ($ts_is_volatile ($select.tm ($typemap |S_$120|) |p_$115|)) ($set_in |p_$115| ($span |q_$20|)))))  :pattern ( ($set_in |p_$115| ($volatile_span |S_$120| |q_$20|))))) :named ax_611))
   (assert (! (forall( (|S_$121| $state) (|p_$127| $ptr) (|T_$24| $ctype) (|sz_$23| Int) (|vol_$1| Bool))(!(= ($is_array_vol_or_nonvol |S_$121| |p_$127| |T_$24| |sz_$23| |vol_$1|) (and ($is |p_$127| |T_$24|) (forall( (|i_$20| Int))(!(=> (and (<= 0 |i_$20|) (< |i_$20| |sz_$23|)) (and (= ($ts_is_volatile ($select.tm ($typemap |S_$121|) ($idx |p_$127| |i_$20| |T_$24|))) |vol_$1|) ($typed |S_$121| ($idx |p_$127| |i_$20| |T_$24|))))  :pattern ( ($select.sm ($statusmap |S_$121|) ($idx |p_$127| |i_$20| |T_$24|))) :pattern ( ($select.tm ($typemap |S_$121|) ($idx |p_$127| |i_$20| |T_$24|))) :pattern ( ($select.mem ($memory |S_$121|) ($idx |p_$127| |i_$20| |T_$24|)))))))  :weight  0 :pattern ( ($is_array_vol_or_nonvol |S_$121| |p_$127| |T_$24| |sz_$23| |vol_$1|)))) :named ax_612))
   (assert (! (forall( (|S_$122| $state) (|p_$128| $ptr) (|T_$25| $ctype) (|sz_$24| Int))(!(= ($is_array |S_$122| |p_$128| |T_$25| |sz_$24|) (and ($is |p_$128| |T_$25|) (forall( (|i_$21| Int))(!(=> (and (<= 0 |i_$21|) (< |i_$21| |sz_$24|)) ($typed |S_$122| ($idx |p_$128| |i_$21| |T_$25|)))  :pattern ( ($select.sm ($statusmap |S_$122|) ($idx |p_$128| |i_$21| |T_$25|))) :pattern ( ($select.tm ($typemap |S_$122|) ($idx |p_$128| |i_$21| |T_$25|))) :pattern ( ($select.mem ($memory |S_$122|) ($idx |p_$128| |i_$21| |T_$25|)))))))  :weight  0 :pattern ( ($is_array |S_$122| |p_$128| |T_$25| |sz_$24|)))) :named ax_613))
   (assert (! (forall( (|S_$123| $state) (|p_$130| $ptr) (|#r_$10| Int) (|T_$27| $ctype) (|sz_$26| Int))(!(= ($set_in |p_$130| ($extent |S_$123| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|))) (or (= |p_$130| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|)) (and (and (<= 0 ($index_within |p_$130| ($ptr |T_$27| |#r_$10|))) (<= ($index_within |p_$130| ($ptr |T_$27| |#r_$10|)) (- |sz_$26| 1))) ($set_in |p_$130| ($extent |S_$123| ($idx ($ptr |T_$27| |#r_$10|) ($index_within |p_$130| ($ptr |T_$27| |#r_$10|)) |T_$27|))))))  :pattern ( ($set_in |p_$130| ($extent |S_$123| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|)))))) :named ax_614))
   (assert (! (forall( (|S_$124| $state) (|#r_$12| Int) (|T_$29| $ctype) (|sz_$28| Int) (|i_$22| Int))(!(=> ($typed |S_$124| ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) (=> (and (<= 0 |i_$22|) (< |i_$22| |sz_$28|)) (and (and (= ($ts_emb ($ts |S_$124| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|))) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) (not ($ts_is_volatile ($ts |S_$124| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|))))) ($typed |S_$124| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|)))))  :pattern ( ($select.sm ($statusmap |S_$124|) ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) :pattern ( ($select.tm ($typemap |S_$124|) ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)))) :named ax_615))
   (assert (! (forall( (|S_$125| $state) (|p_$133| $ptr) (|T_$31| $ctype) (|sz_$30| Int))(!(= ($array_range |S_$125| |p_$133| |T_$31| |sz_$30|) ($array_range_no_state |p_$133| |T_$31| |sz_$30|))  :pattern ( ($array_range |S_$125| |p_$133| |T_$31| |sz_$30|)))) :named ax_616))
   (assert (! (forall( (|S_$126| $state) (|p_$134| $ptr) (|#r_$13| Int) (|T_$32| $ctype) (|sz_$31| Int))(!(and ($instantiate_bool ($typed |S_$126| |p_$134|)) (= ($set_in |p_$134| ($array_range |S_$126| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|)) (and (and (<= 0 ($index_within |p_$134| ($ptr |T_$32| |#r_$13|))) (<= ($index_within |p_$134| ($ptr |T_$32| |#r_$13|)) (- |sz_$31| 1))) ($set_in |p_$134| ($full_extent ($idx ($ptr |T_$32| |#r_$13|) ($index_within |p_$134| ($ptr |T_$32| |#r_$13|)) |T_$32|))))))  :pattern ( ($set_in |p_$134| ($array_range |S_$126| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|))))) :named ax_617))
   (assert (! (forall( (|S_$130| $state) (|r_$22| Int) (|t_$35| $ctype))(!(=> ($good_state |S_$130|) ($in_range_t |t_$35| ($select.mem ($memory |S_$130|) ($ptr ($as_in_range_t |t_$35|) |r_$22|))))  :pattern ( ($select.mem ($memory |S_$130|) ($ptr ($as_in_range_t |t_$35|) |r_$22|))))) :named ax_618))
   (assert (! (forall( (|S_$131| $state) (|r_$23| Int) (|t_$36| $ctype))(!(=> ($good_state |S_$131|) ($in_range_phys_ptr ($select.mem ($memory |S_$131|) ($ptr ($ptr_to |t_$36|) |r_$23|))))  :pattern ( ($select.mem ($memory |S_$131|) ($ptr ($ptr_to |t_$36|) |r_$23|))))) :named ax_619))
   (assert (! (forall( (|S_$132| $state) (|r_$24| Int) (|t_$37| $ctype))(!(=> ($good_state |S_$132|) ($in_range_spec_ptr ($select.mem ($memory |S_$132|) ($ptr ($spec_ptr_to |t_$37|) |r_$24|))))  :pattern ( ($select.mem ($memory |S_$132|) ($ptr ($spec_ptr_to |t_$37|) |r_$24|))))) :named ax_620))
   (assert (! (forall( (|S_$134| $state) (|no_$1| Int) (|t_$88| $ctype))(!(=> (and ($is_fnptr_type |t_$88|) ($good_state |S_$134|)) ($mutable |S_$134| ($get_fnptr |no_$1| |t_$88|)))  :pattern ( ($select.tm ($typemap |S_$134|) ($get_fnptr |no_$1| |t_$88|))) :pattern ( ($select.sm ($statusmap |S_$134|) ($get_fnptr |no_$1| |t_$88|))))) :named ax_621))
   (assert (! (forall( (|S_$135| $state) (|c_$7| $ptr))(!(=> (and ($full_stop |S_$135|) ($closed |S_$135| |c_$7|)) ($valid_claim |S_$135| |c_$7|))  :pattern ( ($full_stop |S_$135|) ($valid_claim |S_$135| |c_$7|)))) :named ax_622))
   (assert (! (forall( (|S_$136| $state) (|c_$8| $ptr))(!(=> ($valid_claim |S_$136| |c_$8|) (and ($closed |S_$136| |c_$8|) ($invok_state |S_$136|)))  :pattern ( ($valid_claim |S_$136| |c_$8|)))) :named ax_623))
   (assert (! (forall( (|S_$138| $state) (|c1_$0| $ptr) (|c2_$0| $ptr))(!(=> (and ($valid_claim |S_$138| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)) ($valid_claim |S_$138| |c2_$0|))  :pattern ( ($valid_claim |S_$138| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)))) :named ax_624))
   (assert (! (forall( (|S_$139| $state) (|c_$9| $ptr) (|o_$0| $ptr))(!(=> ($good_state |S_$139|) (=> (and ($claims_obj |c_$9| |o_$0|) ($closed |S_$139| |c_$9|)) (and (and ($instantiate_ptrset ($owns |S_$139| |o_$0|)) ($closed |S_$139| |o_$0|)) (> ($ref_cnt |S_$139| |o_$0|) 0))))  :pattern ( ($closed |S_$139| |c_$9|) ($claims_obj |c_$9| |o_$0|)))) :named ax_625))
   (assert (! (forall( (|S_$140| $state) (|c_$10| $ptr) (|o_$1| $ptr))(!(=> (and ($valid_claim |S_$140| |c_$10|) ($claims_obj |c_$10| |o_$1|)) ($inv2 |S_$140| |S_$140| |o_$1| ($typ |o_$1|)))  :pattern ( ($valid_claim |S_$140| |c_$10|) ($claims_obj |c_$10| |o_$1|)))) :named ax_626))
   (assert (! (forall( (|S_$141| $state) (|c_$11| $ptr) (|r_$25| Int))(!(=> (and ($valid_claim |S_$141| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$25|))) ($valid_claim |S_$141| ($ptr ^^claim |r_$25|)))  :pattern ( ($valid_claim |S_$141| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$25|))))) :named ax_627))
   (assert (! (forall( (|S_$143| $state) (|p_$153| $ptr))(!(=> (and ($invok_state |S_$143|) ($claimed_closed |S_$143| |p_$153|)) ($inv2 |S_$143| |S_$143| |p_$153| ($typ |p_$153|)))  :pattern ( ($invok_state |S_$143|) ($claimed_closed |S_$143| |p_$153|)))) :named ax_628))
   (assert (! (forall( (|S_$145| $state) (|c_$12| $ptr) (|o_$3| $ptr))(!(= ($account_claim |S_$145| |c_$12| |o_$3|) (and (and ($good_state |S_$145|) ($closed |S_$145| |c_$12|)) ($claims_obj |c_$12| |o_$3|)))  :pattern ( ($account_claim |S_$145| |c_$12| |o_$3|)))) :named ax_629))
   (assert (! (forall( (|S_$146| $state) (|c_$13| $ptr) (|o_$4| $ptr))(!(=> ($account_claim |S_$146| |c_$13| |o_$4|) (and (and (= ($claim_no |S_$146| |o_$4| ($claim_idx |o_$4| |c_$13|)) |c_$13|) (<= 0 ($claim_idx |o_$4| |c_$13|))) (< ($claim_idx |o_$4| |c_$13|) ($ref_cnt |S_$146| |o_$4|))))  :pattern ( ($account_claim |S_$146| |c_$13| |o_$4|)))) :named ax_630))
   (assert (! (forall( (|s_$18| $state) (|p_$152| $ptr))(!(= ($claimed_closed |s_$18| |p_$152|) ($closed |s_$18| |p_$152|))  :weight  0 :pattern ( ($claimed_closed |s_$18| |p_$152|)))) :named ax_631))
   (assert (! (forall( (|S_$23_$0| $state) (|t_$6_$0| $token))(= (and ($good_state_ext |t_$6_$0| |S_$23_$0|) ($full_stop |S_$23_$0|)) (and ($good_state_ext |t_$6_$0| |S_$23_$0|) ($full_stop |S_$23_$0|)))) :named ax_632))
   (assert (! (forall( (|S_$23| $state) (|t_$6| $token))(= (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)) (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)))) :named ax_633))
   (assert (! (forall( (|S_$24_$0| $state))(= (forall( (|#p_$10_$0| $ptr) (|#q_$10| $ptr))(!(=> (and (and ($good_state |S_$24_$0|) ($set_in |#p_$10_$0| ($owns |S_$24_$0| |#q_$10|))) ($closed |S_$24_$0| |#q_$10|)) (and ($closed |S_$24_$0| |#p_$10_$0|) (not (= ($ref |#p_$10_$0|) 0))))  :pattern ( ($set_in |#p_$10_$0| ($owns |S_$24_$0| |#q_$10|))))) (forall( (|#p_$10_$1| $ptr) (|#q_$1| $ptr))(!(=> (and (and ($good_state |S_$24_$0|) ($set_in |#p_$10_$1| ($owns |S_$24_$0| |#q_$1|))) ($closed |S_$24_$0| |#q_$1|)) (and ($closed |S_$24_$0| |#p_$10_$1|) (not (= ($ref |#p_$10_$1|) 0))))  :pattern ( ($set_in |#p_$10_$1| ($owns |S_$24_$0| |#q_$1|))))))) :named ax_634))
   (assert (! (forall( (|S_$24| $state))(= (forall( (|#p_$10_$5| $ptr) (|#q_$15| $ptr))(!(=> (and (and ($good_state |S_$24|) ($set_in |#p_$10_$5| ($owns |S_$24| |#q_$15|))) ($closed |S_$24| |#q_$15|)) (and ($closed |S_$24| |#p_$10_$5|) (not (= ($ref |#p_$10_$5|) 0))))  :pattern ( ($set_in |#p_$10_$5| ($owns |S_$24| |#q_$15|))))) (forall( (|#p_$10| $ptr) (|#q| $ptr))(!(=> (and (and ($good_state |S_$24|) ($set_in |#p_$10| ($owns |S_$24| |#q|))) ($closed |S_$24| |#q|)) (and ($closed |S_$24| |#p_$10|) (not (= ($ref |#p_$10|) 0))))  :pattern ( ($set_in |#p_$10| ($owns |S_$24| |#q|))))))) :named ax_635))
   (assert (! (forall( (|s_$3| $state))(= (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|)))) (forall( (|f_$8_$0| $pure_function))(!(< ($frame_level |f_$8_$0|) $current_frame_level)  :pattern ( ($frame_level |f_$8_$0|)))))) :named ax_636))
   (assert (! (forall( (|s_$4| $state))(= (forall( (|f_$10| $pure_function))(!(< ($pure_post_level |f_$10|) $current_frame_level)  :pattern ( ($frame_level |f_$10|)))) (forall( (|f_$10_$0| $pure_function))(!(< ($pure_post_level |f_$10_$0|) $current_frame_level)  :pattern ( ($frame_level |f_$10_$0|)))))) :named ax_637))
   (assert (! (forall( (|S_$55| $state) (|p_$67| $ptr))(!(=> ($typed |S_$55| |p_$67|) ($typed |S_$55| ($ts_emb ($select.tm ($typemap |S_$55|) |p_$67|))))  :pattern ( ($typed |S_$55| |p_$67|) ($select.tm ($typemap |S_$55|) ($ts_emb ($select.tm ($typemap |S_$55|) |p_$67|)))))) :named ax_638))
   (assert (! (forall( (|S_$56| $state) (|p_$68| $ptr))(!(=> (and ($good_state |S_$56|) ($ts_is_volatile ($select.tm ($typemap |S_$56|) |p_$68|))) (= ($kind_of ($typ |p_$68|)) $kind_primitive))  :pattern ( ($ts_is_volatile ($select.tm ($typemap |S_$56|) |p_$68|))))) :named ax_639))
   (assert (! (forall( (|S_$57| $state) (|p_$69| $ptr))(!(or (<= ($timestamp |S_$57| |p_$69|) ($current_timestamp |S_$57|)) (not ($ts_typed ($select.tm ($typemap |S_$57|) |p_$69|))))  :weight  0 :pattern ( ($select.sm ($statusmap |S_$57|) |p_$69|)))) :named ax_640))
   (assert (! (forall( (|S_$58| $state) (|p_$70| $ptr))(!(=> ($good_state |S_$58|) (and (= ($vs_base_ref ($vs_ctor |S_$58| |p_$70|)) ($ref |p_$70|)) (= ($vs_state ($vs_ctor |S_$58| |p_$70|)) |S_$58|)))  :pattern ( ($vs_ctor |S_$58| |p_$70|)))) :named ax_641))
   (assert (! (forall( (|S_$59| $state) (|p_$72| $ptr))(!(=> ($is_primitive ($typ |p_$72|)) (= ($owner |S_$59| |p_$72|) ($owner |S_$59| ($ts_emb ($select.tm ($typemap |S_$59|) |p_$72|)))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$72|)) ($owner |S_$59| |p_$72|)))) :named ax_642))
   (assert (! (forall( (|s_$6| $struct))($good_state ($vs_state |s_$6|))) :named ax_643))
   (assert (! (forall( (|S_$60| $state) (|p_$73| $ptr))(!(=> ($is_non_primitive ($typ |p_$73|)) (= ($owner |S_$60| |p_$73|) ($st_owner ($select.sm ($statusmap |S_$60|) |p_$73|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$73|)) ($owner |S_$60| |p_$73|)))) :named ax_644))
   (assert (! (forall( (|S_$61| $state) (|p_$74| $ptr))(!(=> ($is_primitive ($typ |p_$74|)) (= ($closed |S_$61| |p_$74|) ($st_closed ($select.sm ($statusmap |S_$61|) ($ts_emb ($select.tm ($typemap |S_$61|) |p_$74|))))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$74|)) ($closed |S_$61| |p_$74|)))) :named ax_645))
   (assert (! (forall( (|S_$62| $state) (|p_$75| $ptr))(!(=> ($is_non_primitive ($typ |p_$75|)) (= ($closed |S_$62| |p_$75|) ($st_closed ($select.sm ($statusmap |S_$62|) |p_$75|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$75|)) ($closed |S_$62| |p_$75|)))) :named ax_646))
   (assert (! (forall( (|S_$63| $state) (|p_$76| $ptr))(!(=> ($is_primitive ($typ |p_$76|)) (= ($timestamp |S_$63| |p_$76|) ($st_timestamp ($select.sm ($statusmap |S_$63|) ($ts_emb ($select.tm ($typemap |S_$63|) |p_$76|))))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$76|)) ($timestamp |S_$63| |p_$76|)))) :named ax_647))
   (assert (! (forall( (|S_$64| $state) (|p_$77| $ptr))(!(=> ($is_non_primitive ($typ |p_$77|)) (= ($timestamp |S_$64| |p_$77|) ($st_timestamp ($select.sm ($statusmap |S_$64|) |p_$77|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$77|)) ($timestamp |S_$64| |p_$77|)))) :named ax_648))
   (assert (! (forall( (|S_$65| $state) (|#p_$22| $ptr))(!(= ($owns |S_$65| |#p_$22|) ($int_to_ptrset ($select.mem ($memory |S_$65|) ($dot |#p_$22| ($owns_set_field ($typ |#p_$22|))))))  :weight  0 :pattern ( ($owns |S_$65| |#p_$22|)))) :named ax_649))
   (assert (! (forall( (|S_$66| $state) (|p_$78| $ptr))(!(= ($mutable |S_$66| |p_$78|) (and (and ($typed |S_$66| |p_$78|) (= ($owner |S_$66| |p_$78|) $me)) (not ($closed |S_$66| |p_$78|))))  :weight  0 :pattern ( ($mutable |S_$66| |p_$78|)))) :named ax_650))
   (assert (! (forall( (|S_$67| $state) (|#p_$23| $ptr))(!(=> ($good_state |S_$67|) (= ($typed |S_$67| |#p_$23|) ($ts_typed ($select.tm ($typemap |S_$67|) |#p_$23|))))  :weight  0 :pattern ( ($typed |S_$67| |#p_$23|)))) :named ax_651))
   (assert (! (forall( (|S_$68| $state) (|#p_$24| $ptr))(!(=> (and ($good_state |S_$68|) ($typed |S_$68| |#p_$24|)) (> ($ref |#p_$24|) 0))  :pattern ( ($typed |S_$68| |#p_$24|)))) :named ax_652))
   (assert (! (forall( (|S_$69| $state) (|#r_$5| Int) (|#t_$9| $ctype))(!(=> (and ($typed |S_$69| ($ptr |#t_$9| |#r_$5|)) ($in_range_phys_ptr |#r_$5|)) ($in_range_phys_ptr (- (+ |#r_$5| ($sizeof |#t_$9|)) 1)))  :pattern ( ($typed |S_$69| ($ptr |#t_$9| |#r_$5|))))) :named ax_653))
   (assert (! (forall( (|s_$7| $status))(!(and (not (= ($kind_of ($typ ($st_owner |s_$7|))) $kind_primitive)) ($is_non_primitive ($typ ($st_owner |s_$7|))))  :pattern ( ($st_owner |s_$7|)))) :named ax_654))
   (assert (! (forall( (|S_$70| $state) (|p_$81| $ptr))(!(= ($is_domain_root |S_$70| |p_$81|) true)  :pattern ( ($is_domain_root |S_$70| |p_$81|)))) :named ax_655))
   (assert (! (forall( (|S_$71| $state) (|p_$82| $ptr))(!(= ($in_wrapped_domain |S_$71| |p_$82|) (exists( (|q_$7| $ptr))(!(and (and ($set_in |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|))) (and (and (and (and ($closed |S_$71| |q_$7|) (= ($owner |S_$71| |q_$7|) $me)) (and ($is |q_$7| ($typ |q_$7|)) ($typed |S_$71| |q_$7|))) (not (= ($kind_of ($typ |q_$7|)) $kind_primitive))) ($is_non_primitive ($typ |q_$7|)))) ($is_domain_root |S_$71| |q_$7|))  :pattern ( ($set_in2 |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|)))))))  :pattern ( ($in_wrapped_domain |S_$71| |p_$82|)))) :named ax_656))
   (assert (! (forall( (|S_$72| $state) (|p_$83| $ptr))(!(= ($thread_local |S_$72| |p_$83|) (and ($typed |S_$72| |p_$83|) (or (and (and (= ($kind_of ($typ |p_$83|)) $kind_primitive) (or (not ($ts_is_volatile ($select.tm ($typemap |S_$72|) |p_$83|))) (not ($closed |S_$72| ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|)))))) (and (not (= ($kind_of ($typ ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|)))) $kind_primitive)) (or (= ($owner |S_$72| ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|))) $me) ($in_wrapped_domain |S_$72| ($ts_emb ($select.tm ($typemap |S_$72|) |p_$83|)))))) (and (not (= ($kind_of ($typ |p_$83|)) $kind_primitive)) (or (= ($owner |S_$72| |p_$83|) $me) ($in_wrapped_domain |S_$72| |p_$83|))))))  :pattern ( ($thread_local |S_$72| |p_$83|)))) :named ax_657))
   (assert (! (forall( (|S_$75| $state) (|T_$13| $ctype) (|sz_$14| Int) (|r_$9| Int))(!(= ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|)) (and ($mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|)) (forall( (|i_$8| Int))(!(=> (and (<= 0 |i_$8|) (< |i_$8| |sz_$14|)) ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|)))  :pattern ( ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|)))))))  :pattern ( ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|))))) :named ax_658))
   (assert (! (forall( (|S_$77| $state) (|T_$15| $ctype) (|sz_$15| Int) (|r_$11| Int))(!(= ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|)) (forall( (|i_$9| Int))(!(=> (and (<= 0 |i_$9|) (< |i_$9| |sz_$15|)) ($extent_zero |S_$77| ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))  :pattern ( ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))))  :pattern ( ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|))))) :named ax_659))
   (assert (! (forall( (|S_$78| $state))(!(=> ($function_entry |S_$78|) (and ($full_stop |S_$78|) (>= ($current_timestamp |S_$78|) 0)))  :pattern ( ($function_entry |S_$78|)))) :named ax_660))
   (assert (! (forall( (|S_$79| $state))(!(=> ($full_stop |S_$79|) (and ($good_state |S_$79|) ($invok_state |S_$79|)))  :pattern ( ($full_stop |S_$79|)))) :named ax_661))
   (assert (! (forall( (|S_$80| $state))(!(=> ($invok_state |S_$80|) ($good_state |S_$80|))  :pattern ( ($invok_state |S_$80|)))) :named ax_662))
   (assert (! (forall( (|S_$82| $state) (|r_$12| Int) (|t_$21| $ctype))(!(= ($ptr |t_$21| ($select.mem ($memory |S_$82|) ($ptr ($ptr_to |t_$21|) |r_$12|))) ($read_ptr_m |S_$82| ($ptr ($ptr_to |t_$21|) |r_$12|) |t_$21|))  :pattern ( ($ptr |t_$21| ($select.mem ($memory |S_$82|) ($ptr ($ptr_to |t_$21|) |r_$12|)))))) :named ax_663))
   (assert (! (forall( (|S_$83| $state) (|r_$13| Int) (|t_$22| $ctype))(!(= ($ptr |t_$22| ($select.mem ($memory |S_$83|) ($ptr ($spec_ptr_to |t_$22|) |r_$13|))) ($read_ptr_m |S_$83| ($ptr ($spec_ptr_to |t_$22|) |r_$13|) |t_$22|))  :pattern ( ($ptr |t_$22| ($select.mem ($memory |S_$83|) ($ptr ($spec_ptr_to |t_$22|) |r_$13|)))))) :named ax_664))
   (assert (! (forall( (|S_$85| $state) (|p_$87| $ptr))(!(= ($domain |S_$85| |p_$87|) ($ver_domain ($read_version |S_$85| |p_$87|)))  :weight  0 :pattern ( ($domain |S_$85| |p_$87|)))) :named ax_665))
   (assert (! (forall( (|S_$86| $state) (|p_$88| $ptr) (|q_$8| $ptr) (|l| $label))(!(=> ($in_domain_lab |S_$86| |p_$88| |q_$8| |l|) ($inv_lab |S_$86| |p_$88| |l|))  :weight  0 :pattern ( ($in_domain_lab |S_$86| |p_$88| |q_$8| |l|)))) :named ax_666))
   (assert (! (forall( (|S_$87| $state) (|p_$89| $ptr) (|q_$9| $ptr) (|l_$0| $label))(!(= ($in_domain_lab |S_$87| |p_$89| |q_$9| |l_$0|) ($in_domain |S_$87| |p_$89| |q_$9|))  :weight  0 :pattern ( ($in_domain_lab |S_$87| |p_$89| |q_$9| |l_$0|)))) :named ax_667))
   (assert (! (forall( (|S_$88| $state) (|p_$90| $ptr) (|q_$10| $ptr) (|l_$1| $label))(!(=> ($in_vdomain_lab |S_$88| |p_$90| |q_$10| |l_$1|) ($inv_lab |S_$88| |p_$90| |l_$1|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$88| |p_$90| |q_$10| |l_$1|)))) :named ax_668))
   (assert (! (forall( (|S_$89| $state) (|p_$91| $ptr) (|q_$11| $ptr) (|l_$2| $label))(!(= ($in_vdomain_lab |S_$89| |p_$91| |q_$11| |l_$2|) ($in_vdomain |S_$89| |p_$91| |q_$11|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$89| |p_$91| |q_$11| |l_$2|)))) :named ax_669))
   (assert (! (forall( (|S_$90| $state) (|p_$92| $ptr) (|q_$12| $ptr))(!(=> ($in_domain |S_$90| |p_$92| |q_$12|) (and (and ($set_in |p_$92| ($domain |S_$90| |q_$12|)) ($closed |S_$90| |p_$92|)) (forall( (|r_$14| $ptr))(!(=> (and (not ($has_volatile_owns_set ($typ |p_$92|))) ($set_in |r_$14| ($owns |S_$90| |p_$92|))) ($set_in2 |r_$14| ($ver_domain ($read_version |S_$90| |q_$12|))))  :pattern ( ($set_in |r_$14| ($owns |S_$90| |p_$92|)))))))  :weight  0 :pattern ( ($in_domain |S_$90| |p_$92| |q_$12|)))) :named ax_670))
   (assert (! (forall( (|S_$91| $state) (|p_$93| $ptr))(!(=> (and ($full_stop |S_$91|) (and (and (and (and ($closed |S_$91| |p_$93|) (= ($owner |S_$91| |p_$93|) $me)) (and ($is |p_$93| ($typ |p_$93|)) ($typed |S_$91| |p_$93|))) (not (= ($kind_of ($typ |p_$93|)) $kind_primitive))) ($is_non_primitive ($typ |p_$93|)))) ($in_domain |S_$91| |p_$93| |p_$93|))  :pattern ( ($in_domain |S_$91| |p_$93| |p_$93|)))) :named ax_671))
   (assert (! (forall( (|S_$92| $state) (|p_$94| $ptr) (|q_$13| $ptr))(!(=> (and ($full_stop |S_$92|) ($set_in |q_$13| ($domain |S_$92| |p_$94|))) ($in_domain |S_$92| |q_$13| |p_$94|))  :weight  0 :pattern ( ($in_domain |S_$92| |q_$13| |p_$94|)))) :named ax_672))
   (assert (! (forall( (|S_$93| $state) (|p_$95| $ptr) (|q_$14| $ptr) (|r_$15| $ptr))(!(=> (and (and (not ($has_volatile_owns_set ($typ |q_$14|))) ($set_in |q_$14| ($domain |S_$93| |p_$95|))) ($set_in0 |r_$15| ($owns |S_$93| |q_$14|))) (and ($in_domain |S_$93| |r_$15| |p_$95|) ($set_in0 |r_$15| ($owns |S_$93| |q_$14|))))  :weight  0 :pattern ( ($set_in |q_$14| ($domain |S_$93| |p_$95|)) ($in_domain |S_$93| |r_$15| |p_$95|)))) :named ax_673))
   (assert (! (forall( (|S_$94| $state) (|p_$96| $ptr) (|q_$15| $ptr) (|r_$16| $ptr))(!(=> (and (and ($has_volatile_owns_set ($typ |q_$15|)) ($set_in |q_$15| ($domain |S_$94| |p_$96|))) (forall( (|S1_$8| $state))(=> (and (and ($inv2 |S1_$8| |S1_$8| |q_$15| ($typ |q_$15|)) (= ($read_version |S1_$8| |p_$96|) ($read_version |S_$94| |p_$96|))) (= ($domain |S1_$8| |p_$96|) ($domain |S_$94| |p_$96|))) ($set_in0 |r_$16| ($owns |S1_$8| |q_$15|))))) (and ($in_vdomain |S_$94| |r_$16| |p_$96|) ($set_in0 |r_$16| ($owns |S_$94| |q_$15|))))  :weight  0 :pattern ( ($set_in |q_$15| ($domain |S_$94| |p_$96|)) ($in_vdomain |S_$94| |r_$16| |p_$96|)))) :named ax_674))
   (assert (! (forall( (|S_$95| $state) (|p_$97| $ptr) (|q_$16| $ptr))(!(=> ($in_vdomain |S_$95| |p_$97| |q_$16|) ($in_domain |S_$95| |p_$97| |q_$16|))  :weight  0 :pattern ( ($in_vdomain |S_$95| |p_$97| |q_$16|)))) :named ax_675))
   (assert (! (forall( (|S_$96| $state) (|p_$98| $ptr) (|d| $ptr) (|f_$23| $field))(!(=> (and ($set_in |p_$98| ($domain |S_$96| |d|)) ($is_primitive_non_volatile_field |f_$23|)) (= ($select.mem ($memory |S_$96|) ($dot |p_$98| |f_$23|)) ($fetch_from_domain ($read_version |S_$96| |d|) ($dot |p_$98| |f_$23|))))  :pattern ( ($set_in |p_$98| ($domain |S_$96| |d|)) ($is_primitive_non_volatile_field |f_$23|) ($select.mem ($memory |S_$96|) ($dot |p_$98| |f_$23|))))) :named ax_676))
   (assert (! (forall( (|S_$97| $state) (|p_$99| $ptr) (|d_$0| $ptr))(!(=> (and ($full_stop |S_$97|) ($set_in |p_$99| ($domain |S_$97| |d_$0|))) (and ($typed |S_$97| |p_$99|) (not ($ts_is_volatile ($ts |S_$97| |p_$99|)))))  :pattern ( ($full_stop |S_$97|) ($set_in |p_$99| ($domain |S_$97| |d_$0|)) ($select.sm ($statusmap |S_$97|) |p_$99|)) :pattern ( ($full_stop |S_$97|) ($set_in |p_$99| ($domain |S_$97| |d_$0|)) ($select.tm ($typemap |S_$97|) |p_$99|)))) :named ax_677))
   (assert (! (forall( (|S_$98| $state) (|p_$100| $ptr) (|d_$1| $ptr) (|f_$24| $field))(!(=> (and (and ($full_stop |S_$98|) ($set_in |p_$100| ($domain |S_$98| |d_$1|))) ($is_primitive_non_volatile_field |f_$24|)) (and ($typed |S_$98| ($dot |p_$100| |f_$24|)) (not ($ts_is_volatile ($ts |S_$98| ($dot |p_$100| |f_$24|))))))  :pattern ( ($set_in |p_$100| ($domain |S_$98| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($owner |S_$98| ($dot |p_$100| |f_$24|))) :pattern ( ($set_in |p_$100| ($domain |S_$98| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($select.tm ($typemap |S_$98|) ($dot |p_$100| |f_$24|))))) :named ax_678))
   (assert (! (forall( (|S_$99| $state) (|p_$101| $ptr) (|d_$2| $ptr) (|f_$25| $field) (|sz_$16| Int) (|i_$10| Int) (|t_$23| $ctype))(!(=> (and (and (and (and ($full_stop |S_$99|) ($set_in |p_$101| ($domain |S_$99| |d_$2|))) ($is_primitive_embedded_array |f_$25| |sz_$16|)) (<= 0 |i_$10|)) (< |i_$10| |sz_$16|)) (= ($select.mem ($memory |S_$99|) ($idx ($dot |p_$101| |f_$25|) |i_$10| |t_$23|)) ($fetch_from_domain ($read_version |S_$99| |d_$2|) ($idx ($dot |p_$101| |f_$25|) |i_$10| |t_$23|))))  :pattern ( ($set_in |p_$101| ($domain |S_$99| |d_$2|)) ($is_primitive_embedded_array |f_$25| |sz_$16|) ($select.mem ($memory |S_$99|) ($idx ($dot |p_$101| |f_$25|) |i_$10| |t_$23|))))) :named ax_679))
   (assert (! (forall( (|s| $state))(= |s| |s|)) :named ax_680))
   (assert (! (forall( (|S0_$2| $state) (|S_$118| $state) (|l_$4| $ptr) (|p_$114| $ptr))(!(and (and (and (and (and (= ($statusmap ($release |S0_$2| |S_$118| |l_$4| |p_$114|)) ($store.sm ($statusmap |S_$118|) |p_$114| ($released |S_$118| |l_$4| |p_$114|))) ($closed ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|)) (= ($owner ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|) $me)) (= ($ref_cnt ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|) ($ref_cnt |S_$118| |p_$114|))) (= ($timestamp ($release |S0_$2| |S_$118| |l_$4| |p_$114|) |p_$114|) ($current_timestamp |S0_$2|))) true)  :pattern ( ($release |S0_$2| |S_$118| |l_$4| |p_$114|)))) :named ax_681))
   (assert (! (forall( (|S1_$11| $state) (|S2_$9| $state) (|r_$21| Int) (|t_$32| $ctype) (|subject_$4| $field))(!($instantiate_int ($select.mem ($memory |S2_$9|) ($dot ($ptr |t_$32| |r_$21|) |subject_$4|)))  :pattern ( ($is_owner_approved |t_$32| |subject_$4|) ($post_unwrap |S1_$11| |S2_$9|) ($select.mem ($memory |S1_$11|) ($dot ($ptr |t_$32| |r_$21|) |subject_$4|))))) :named ax_682))
   (assert (! (forall( (|S1_$4| $state) (|S0_$1| $state))(= (forall( (|r_$26| Int))(!(=> (and ($closed |S0_$1| ($ptr ^^claim |r_$26|)) ($closed |S1_$4| ($ptr ^^claim |r_$26|))) ($valid_claim |S1_$4| ($ptr ^^claim |r_$26|)))  :pattern ( ($closed |S1_$4| ($ptr ^^claim |r_$26|))))) (forall( (|r| Int))(!(=> (and ($closed |S0_$1| ($ptr ^^claim |r|)) ($closed |S1_$4| ($ptr ^^claim |r|))) ($valid_claim |S1_$4| ($ptr ^^claim |r|)))  :pattern ( ($closed |S1_$4| ($ptr ^^claim |r|))))))) :named ax_683))
   (assert (! (forall( (|S1_$5| $state) (|S2_$4| $state) (|p_$61| $ptr) (|sz_$13| Int))(!(=> (forall( (|i_$7| Int))(=> (and (<= 0 |i_$7|) (< |i_$7| |sz_$13|)) (= ($select.mem ($memory |S1_$5|) ($idx |p_$61| |i_$7| ($typ |p_$61|))) ($select.mem ($memory |S2_$4|) ($idx |p_$61| |i_$7| ($typ |p_$61|)))))) (= ($select_range.mem ($memory |S1_$5|) |p_$61| |sz_$13|) ($select_range.mem ($memory |S2_$4|) |p_$61| |sz_$13|)))  :pattern ( ($call_transition |S1_$5| |S2_$4|) ($select_range.mem ($memory |S2_$4|) |p_$61| |sz_$13|)))) :named ax_684))
   (assert (! (forall( (|s1_$7| $ptrset) (|s2_$7| $ptrset))(!(=> (forall( (|p_$119| $ptr))(!(and (=> ($set_in |p_$119| |s1_$7|) (not ($set_in |p_$119| |s2_$7|))) (=> ($set_in |p_$119| |s2_$7|) (not ($set_in |p_$119| |s1_$7|))))  :pattern ( ($dont_instantiate |p_$119|)))) ($set_disjoint |s1_$7| |s2_$7|))  :weight  0 :pattern ( ($set_disjoint |s1_$7| |s2_$7|)))) :named ax_685))
   (assert (! (forall( (|S1_$7| $state) (|S2_$6| $state) (|p_$80| $ptr))(!(=> ($call_transition |S1_$7| |S2_$6|) ($instantiate_int ($select.mem ($memory |S1_$7|) |p_$80|)))  :pattern ( ($select.mem ($memory |S2_$6|) |p_$80|) ($call_transition |S1_$7| |S2_$6|)))) :named ax_686))
   (assert (! (forall( (|s1_$8| $state) (|s2_$8| $state) (|p_$142| $ptr) (|t_$34| $ctype) (|sz_$35| Int))(!(=> ($is_primitive |t_$34|) (=> ($state_spans_the_same |s1_$8| |s2_$8| |p_$142| ($array |t_$34| |sz_$35|)) (forall( (|i_$24| Int))(!(=> (and (<= 0 |i_$24|) (< |i_$24| |sz_$35|)) (= ($select.mem ($memory |s1_$8|) ($idx ($ptr |t_$34| ($ref |p_$142|)) |i_$24| |t_$34|)) ($select.mem ($memory |s2_$8|) ($idx ($ptr |t_$34| ($ref |p_$142|)) |i_$24| |t_$34|))))  :pattern ( ($select.mem ($memory |s2_$8|) ($idx ($ptr |t_$34| ($ref |p_$142|)) |i_$24| |t_$34|)))))))  :pattern ( ($state_spans_the_same |s1_$8| |s2_$8| |p_$142| ($array |t_$34| |sz_$35|)) ($is_primitive |t_$34|)))) :named ax_687))
   (assert (! (forall( (|s2_$2_$0| $state) (|s1_$2_$0| $state))(= (forall( (|p_$28_$0| $ptr))(!(=> ($mutable |s1_$2_$0| |p_$28_$0|) ($mutable |s2_$2_$0| |p_$28_$0|))  :pattern ( ($select.sm ($statusmap |s2_$2_$0|) |p_$28_$0|)) :pattern ( ($select.tm ($typemap |s2_$2_$0|) |p_$28_$0|)))) (forall( (|p_$28| $ptr))(!(=> ($mutable |s1_$2_$0| |p_$28|) ($mutable |s2_$2_$0| |p_$28|))  :pattern ( ($select.sm ($statusmap |s2_$2_$0|) |p_$28|)) :pattern ( ($select.tm ($typemap |s2_$2_$0|) |p_$28|)))))) :named ax_688))
   (assert (! (forall( (|s2_$3| $state) (|s1_$3| $state))(= (and (= ($typemap |s1_$3|) ($typemap |s2_$3|)) (= ($statusmap |s1_$3|) ($statusmap |s2_$3|))) (and (= ($typemap |s1_$3|) ($typemap |s2_$3|)) (= ($statusmap |s1_$3|) ($statusmap |s2_$3|))))) :named ax_689))
   (assert (! (forall( (|S2_$3| $state) (|S1_$3| $state))(= (and (and (and (and (forall( (|p_$37_$1| $ptr))(!(=> (not (= ($kind_of ($typ ($owner |S2_$3| |p_$37_$1|))) $kind_thread)) (not (= ($kind_of ($typ ($owner |S1_$3| |p_$37_$1|))) $kind_thread)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$37_$1|)))) (forall( (|p_$38_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$38_$1|) (and (= ($mem |S1_$3| |p_$38_$1|) ($mem |S2_$3| |p_$38_$1|)) ($thread_local |S2_$3| |p_$38_$1|)))  :pattern ( ($select.mem ($memory |S2_$3|) |p_$38_$1|))))) (forall( (|p_$39_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$39_$1|) (and (= ($st |S1_$3| |p_$39_$1|) ($st |S2_$3| |p_$39_$1|)) ($thread_local |S2_$3| |p_$39_$1|)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$39_$1|))))) (forall( (|p_$40_$1| $ptr))(!(=> ($thread_local |S1_$3| |p_$40_$1|) (and (= ($ts |S1_$3| |p_$40_$1|) ($ts |S2_$3| |p_$40_$1|)) ($thread_local |S2_$3| |p_$40_$1|)))  :pattern ( ($select.tm ($typemap |S2_$3|) |p_$40_$1|))))) (and (and (<= ($current_timestamp |S1_$3|) ($current_timestamp |S2_$3|)) (forall( (|p_$32_$6| $ptr))(!(<= ($timestamp |S1_$3| |p_$32_$6|) ($timestamp |S2_$3| |p_$32_$6|))  :weight  0 :pattern ( ($timestamp |S2_$3| |p_$32_$6|))))) ($call_transition |S1_$3| |S2_$3|))) (and (and (and (and (forall( (|p_$37| $ptr))(!(=> (not (= ($kind_of ($typ ($owner |S2_$3| |p_$37|))) $kind_thread)) (not (= ($kind_of ($typ ($owner |S1_$3| |p_$37|))) $kind_thread)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$37|)))) (forall( (|p_$38| $ptr))(!(=> ($thread_local |S1_$3| |p_$38|) (and (= ($select.mem ($memory |S1_$3|) |p_$38|) ($select.mem ($memory |S2_$3|) |p_$38|)) ($thread_local |S2_$3| |p_$38|)))  :pattern ( ($select.mem ($memory |S2_$3|) |p_$38|))))) (forall( (|p_$39| $ptr))(!(=> ($thread_local |S1_$3| |p_$39|) (and (= ($select.sm ($statusmap |S1_$3|) |p_$39|) ($select.sm ($statusmap |S2_$3|) |p_$39|)) ($thread_local |S2_$3| |p_$39|)))  :pattern ( ($select.sm ($statusmap |S2_$3|) |p_$39|))))) (forall( (|p_$40| $ptr))(!(=> ($thread_local |S1_$3| |p_$40|) (and (= ($select.tm ($typemap |S1_$3|) |p_$40|) ($select.tm ($typemap |S2_$3|) |p_$40|)) ($thread_local |S2_$3| |p_$40|)))  :pattern ( ($select.tm ($typemap |S2_$3|) |p_$40|))))) (and (and (<= ($current_timestamp |S1_$3|) ($current_timestamp |S2_$3|)) (forall( (|p_$32_$3| $ptr))(!(<= ($timestamp |S1_$3| |p_$32_$3|) ($timestamp |S2_$3| |p_$32_$3|))  :weight  0 :pattern ( ($timestamp |S2_$3| |p_$32_$3|))))) ($call_transition |S1_$3| |S2_$3|))))) :named ax_690))
   (assert (! (forall( (|SP#p_$0| Int))(!(= (F@doMark |SP#p_$0|) (= ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |SP#p_$0|))))) ($ref ($ptr ^Node |SP#p_$0|))))  :pattern ( (F@doMark |SP#p_$0|)))) :named ax_691))
   (assert (! (forall( (|SP#p| Int))(!(= ($ref ($ptr ^Node (F@mark |SP#p|))) ($ref ($ptr ^Node |SP#p|)))  :pattern ( (F@mark |SP#p|)))) :named ax_692))
   (assert (! (forall( (|subject_$0_$0| $field) (|approver_$0_$0| $field) (|this_$0_$0| $ptr) (|S2_$1_$0| $state) (|S1_$1_$0| $state))(= (or (or (or ($mem_eq |S1_$1_$0| |S2_$1_$0| ($dot |this_$0_$0| |subject_$0_$0|)) (= ($ref ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|)))) 0)) (and (not ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|)))))) ($inv2nt |S1_$1_$0| |S2_$1_$0| ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|)))))) (and ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|))))) (not (= ($read_vol_version |S1_$1_$0| |this_$0_$0|) ($read_vol_version |S2_$1_$0| |this_$0_$0|))))) (or (or (or (= ($mem |S1_$1_$0| ($dot |this_$0_$0| |subject_$0_$0|)) ($mem |S2_$1_$0| ($dot |this_$0_$0| |subject_$0_$0|))) (= ($ref ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|)))) 0)) (and (not ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|)))))) ($inv2 |S1_$1_$0| |S2_$1_$0| ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|))) ($typ ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|))))))) (and ($is_threadtype ($typ ($int_to_ptr ($select.mem ($memory |S1_$1_$0|) ($dot |this_$0_$0| |approver_$0_$0|))))) (not (= ($read_vol_version |S1_$1_$0| |this_$0_$0|) ($read_vol_version |S2_$1_$0| |this_$0_$0|))))))) :named ax_693))
   (assert (! (forall( (|subject_$0| $field) (|approver_$0| $ptr) (|this_$0| $ptr) (|S2_$0_$0| $state) (|S1_$0_$0| $state))(= (or (or (or (= ($mem |S1_$0_$0| ($dot |this_$0| |subject_$0|)) ($mem |S2_$0_$0| ($dot |this_$0| |subject_$0|))) (= ($ref |approver_$0|) 0)) (and (not ($is_threadtype ($typ |approver_$0|))) ($inv2 |S1_$0_$0| |S2_$0_$0| |approver_$0| ($typ |approver_$0|)))) (and ($is_threadtype ($typ |approver_$0|)) (not (= ($read_vol_version |S1_$0_$0| |this_$0|) ($read_vol_version |S2_$0_$0| |this_$0|))))) (or (or (or (= ($select.mem ($memory |S1_$0_$0|) ($dot |this_$0| |subject_$0|)) ($select.mem ($memory |S2_$0_$0|) ($dot |this_$0| |subject_$0|))) (= ($ref |approver_$0|) 0)) (and (not ($is_threadtype ($typ |approver_$0|))) ($inv2 |S1_$0_$0| |S2_$0_$0| |approver_$0| ($typ |approver_$0|)))) (and ($is_threadtype ($typ |approver_$0|)) (not (= ($read_vol_version |S1_$0_$0| |this_$0|) ($read_vol_version |S2_$0_$0| |this_$0|))))))) :named ax_694))
   (assert (! (forall( (|subject_$1| $field) (|this_$1| $ptr) (|S2_$2| $state) (|S1_$2| $state))(= (or (or (or ($mem_eq |S1_$2| |S2_$2| ($dot |this_$1| |subject_$1|)) (= ($ref ($owner |S1_$2| |this_$1|)) 0)) (and (not ($is_threadtype ($typ ($owner |S1_$2| |this_$1|)))) ($inv2nt |S1_$2| |S2_$2| ($owner |S1_$2| |this_$1|)))) (and ($is_threadtype ($typ ($owner |S1_$2| |this_$1|))) (not (= ($read_vol_version |S1_$2| |this_$1|) ($read_vol_version |S2_$2| |this_$1|))))) (or (or (or (= ($mem |S1_$2| ($dot |this_$1| |subject_$1|)) ($mem |S2_$2| ($dot |this_$1| |subject_$1|))) (= ($ref ($owner |S1_$2| |this_$1|)) 0)) (and (not ($is_threadtype ($typ ($owner |S1_$2| |this_$1|)))) ($inv2 |S1_$2| |S2_$2| ($owner |S1_$2| |this_$1|) ($typ ($owner |S1_$2| |this_$1|))))) (and ($is_threadtype ($typ ($owner |S1_$2| |this_$1|))) (not (= ($read_vol_version |S1_$2| |this_$1|) ($read_vol_version |S2_$2| |this_$1|))))))) :named ax_695))
   (assert (! (forall( (|subject| $field) (|approver| $ptr) (|this| $ptr) (|S2_$0| $state) (|S1_$0| $state))(= (or (or (or ($mem_eq |S1_$0| |S2_$0| ($dot |this| |subject|)) (= ($ref |approver|) 0)) (and (not ($is_threadtype ($typ |approver|))) ($inv2nt |S1_$0| |S2_$0| |approver|))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S1_$0| |this|) ($read_vol_version |S2_$0| |this|))))) (or (or (or (= ($mem |S1_$0| ($dot |this| |subject|)) ($mem |S2_$0| ($dot |this| |subject|))) (= ($ref |approver|) 0)) (and (not ($is_threadtype ($typ |approver|))) ($inv2 |S1_$0| |S2_$0| |approver| ($typ |approver|)))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S1_$0| |this|) ($read_vol_version |S2_$0| |this|))))))) :named ax_696))
   (assert (! (forall( (|sz_$0| Int) (|T| $ctype) (|p_$35| $ptr))(= (and ($is |p_$35| |T|) (forall( (|S_$40_$1| $state) (|i_$0_$1| Int))(!(=> ($good_state |S_$40_$1|) (=> (and (<= 0 |i_$0_$1|) (< |i_$0_$1| |sz_$0|)) (and (and (not ($ts_is_volatile ($ts |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|)))) ($typed |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|))) (=> ($program_entry_point_ch |S_$40_$1|) ($mutable |S_$40_$1| ($idx |p_$35| |i_$0_$1| |T|))))))  :pattern ( ($select.sm ($statusmap |S_$40_$1|) ($idx |p_$35| |i_$0_$1| |T|))) :pattern ( ($select.tm ($typemap |S_$40_$1|) ($idx |p_$35| |i_$0_$1| |T|)))))) (and ($is |p_$35| |T|) (forall( (|S_$40| $state) (|i_$0| Int))(!(=> ($good_state |S_$40|) (=> (and (<= 0 |i_$0|) (< |i_$0| |sz_$0|)) (and (and (not ($ts_is_volatile ($select.tm ($typemap |S_$40|) ($idx |p_$35| |i_$0| |T|)))) ($typed |S_$40| ($idx |p_$35| |i_$0| |T|))) (=> ($program_entry_point_ch |S_$40|) ($mutable |S_$40| ($idx |p_$35| |i_$0| |T|))))))  :pattern ( ($select.sm ($statusmap |S_$40|) ($idx |p_$35| |i_$0| |T|))) :pattern ( ($select.tm ($typemap |S_$40|) ($idx |p_$35| |i_$0| |T|)))))))) :named ax_697))
   (assert (! (forall( (|sz_$1| Int) (|T_$0| $ctype) (|p_$41| $ptr) (|S_$46| $state))(= (forall( (|i_$1_$0| Int))(!(=> (and (<= 0 |i_$1_$0|) (< |i_$1_$0| |sz_$1|)) (and ($is ($idx |p_$41| |i_$1_$0| |T_$0|) |T_$0|) ($thread_local |S_$46| ($idx |p_$41| |i_$1_$0| |T_$0|))))  :pattern ( ($select.sm ($statusmap |S_$46|) ($idx |p_$41| |i_$1_$0| |T_$0|))) :pattern ( ($select.tm ($typemap |S_$46|) ($idx |p_$41| |i_$1_$0| |T_$0|))))) (forall( (|i_$1| Int))(!(=> (and (<= 0 |i_$1|) (< |i_$1| |sz_$1|)) (and ($is ($idx |p_$41| |i_$1| |T_$0|) |T_$0|) ($thread_local |S_$46| ($idx |p_$41| |i_$1| |T_$0|))))  :pattern ( ($select.sm ($statusmap |S_$46|) ($idx |p_$41| |i_$1| |T_$0|))) :pattern ( ($select.tm ($typemap |S_$46|) ($idx |p_$41| |i_$1| |T_$0|))))))) :named ax_698))
   (assert (! (forall( (|sz_$10| Int) (|T_$9| $ctype) (|arr_$1| $ptr) (|q_$0| $ptr))(= (and (and (<= 0 ($index_within |q_$0| |arr_$1|)) (<= ($index_within |q_$0| |arr_$1|) (- |sz_$10| 1))) ($set_in |q_$0| ($full_extent ($idx |arr_$1| ($index_within |q_$0| |arr_$1|) |T_$9|)))) (and (and (<= 0 ($index_within |q_$0| |arr_$1|)) (<= ($index_within |q_$0| |arr_$1|) (- |sz_$10| 1))) ($set_in |q_$0| ($full_extent ($idx |arr_$1| ($index_within |q_$0| |arr_$1|) |T_$9|)))))) :named ax_699))
   (assert (! (forall( (|sz_$11| Int) (|T_$10| $ctype) (|arr_$2| $ptr) (|q_$1| $ptr) (|S_$53| $state))(= (and (and (<= 0 ($index_within |q_$1| |arr_$2|)) (<= ($index_within |q_$1| |arr_$2|) (- |sz_$11| 1))) ($set_in |q_$1| ($extent |S_$53| ($idx |arr_$2| ($index_within |q_$1| |arr_$2|) |T_$10|)))) (and (and (<= 0 ($index_within |q_$1| |arr_$2|)) (<= ($index_within |q_$1| |arr_$2|) (- |sz_$11| 1))) ($set_in |q_$1| ($extent |S_$53| ($idx |arr_$2| ($index_within |q_$1| |arr_$2|) |T_$10|)))))) :named ax_700))
   (assert (! (forall( (|sz_$2| Int) (|T_$1| $ctype) (|p_$42| $ptr) (|S_$47| $state))(= (and ($is_array |S_$47| |p_$42| |T_$1| |sz_$2|) (forall( (|i_$2_$1| Int))(!(=> (and (<= 0 |i_$2_$1|) (< |i_$2_$1| |sz_$2|)) ($mutable |S_$47| ($idx |p_$42| |i_$2_$1| |T_$1|)))  :pattern ( ($select.sm ($statusmap |S_$47|) ($idx |p_$42| |i_$2_$1| |T_$1|))) :pattern ( ($select.tm ($typemap |S_$47|) ($idx |p_$42| |i_$2_$1| |T_$1|)))))) (and ($is_array |S_$47| |p_$42| |T_$1| |sz_$2|) (forall( (|i_$2| Int))(!(=> (and (<= 0 |i_$2|) (< |i_$2| |sz_$2|)) ($mutable |S_$47| ($idx |p_$42| |i_$2| |T_$1|)))  :pattern ( ($select.sm ($statusmap |S_$47|) ($idx |p_$42| |i_$2| |T_$1|))) :pattern ( ($select.tm ($typemap |S_$47|) ($idx |p_$42| |i_$2| |T_$1|)))))))) :named ax_701))
   (assert (! (forall( (|sz_$7_$0| Int) (|T_$6_$0| $ctype) (|p_$49_$0| $ptr))(= ($ptr ($array |T_$6_$0| |sz_$7_$0|) ($ref |p_$49_$0|)) ($ptr ($array |T_$6_$0| |sz_$7_$0|) ($ref |p_$49_$0|)))) :named ax_702))
   (assert (! (forall( (|sz_$7| Int) (|T_$6| $ctype) (|p_$49| $ptr))(= ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)) ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)))) :named ax_703))
   (assert (! (forall( (|sz_$8| Int) (|T_$7| $ctype) (|arr| $ptr) (|s2_$4| $state) (|s1_$4| $state))(= (forall( (|#i_$1| Int))(!(=> (and (<= 0 |#i_$1|) (< |#i_$1| |sz_$8|)) (= ($mem |s1_$4| ($idx |arr| |#i_$1| |T_$7|)) ($mem |s2_$4| ($idx |arr| |#i_$1| |T_$7|))))  :pattern ( ($idx |arr| |#i_$1| |T_$7|)))) (forall( (|#i| Int))(!(=> (and (<= 0 |#i|) (< |#i| |sz_$8|)) (= ($select.mem ($memory |s1_$4|) ($idx |arr| |#i| |T_$7|)) ($select.mem ($memory |s2_$4|) ($idx |arr| |#i| |T_$7|))))  :pattern ( ($idx |arr| |#i| |T_$7|)))))) :named ax_704))
   (assert (! (forall( (|sz_$9| Int) (|T_$8| $ctype) (|arr_$0| $ptr) (|q| $ptr))(= (and (and (<= 0 ($index_within |q| |arr_$0|)) (<= ($index_within |q| |arr_$0|) (- |sz_$9| 1))) (= |q| ($idx |arr_$0| ($index_within |q| |arr_$0|) |T_$8|))) (and (and (<= 0 ($index_within |q| |arr_$0|)) (<= ($index_within |q| |arr_$0|) (- |sz_$9| 1))) (= |q| ($idx |arr_$0| ($index_within |q| |arr_$0|) |T_$8|))))) :named ax_705))
   (assert (! (forall( (|sz| Int) (|p_$3| $ptr) (|s_$1| $state))(= ($select_range.mem ($memory |s_$1|) |p_$3| |sz|) ($select_range.mem ($memory |s_$1|) |p_$3| |sz|))) :named ax_706))
   (assert (! (forall( (|t_$0_$0| $ctype))(= (= ($kind_of |t_$0_$0|) $kind_composite) (= ($kind_of |t_$0_$0|) $kind_composite))) :named ax_707))
   (assert (! (forall( (|t_$0| $ctype))(= (= ($kind_of |t_$0|) $kind_primitive) (= ($kind_of |t_$0|) $kind_primitive))) :named ax_708))
   (assert (! (forall( (|t_$1| $ctype))(= (= ($kind_of |t_$1|) $kind_array) (= ($kind_of |t_$1|) $kind_array))) :named ax_709))
   (assert (! (forall( (|t_$10| $ctype))(!(= ($is_primitive |t_$10|) (= ($kind_of |t_$10|) $kind_primitive))  :weight  0 :pattern ( ($is_primitive |t_$10|)))) :named ax_710))
   (assert (! (forall( (|t_$11| $ctype))(!(= ($is_composite |t_$11|) (= ($kind_of |t_$11|) $kind_composite))  :weight  0 :pattern ( ($is_composite |t_$11|)))) :named ax_711))
   (assert (! (forall( (|T_$11| $ctype))(!(=> ($is_primitive |T_$11|) (and (forall( (|r_$6| Int) (|p_$84| $ptr))(!(= ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|))) (= |p_$84| ($ptr |T_$11| |r_$6|)))  :pattern ( ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|)))))) (forall( (|r_$7| Int) (|S_$73| $state))(!(= ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|)) ($mutable |S_$73| ($ptr |T_$11| |r_$7|)))  :pattern ( ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|)))))))  :pattern ( ($is_primitive |T_$11|)))) :named ax_712))
   (assert (! (forall( (|t_$12| $ctype))(!(= ($is_arraytype |t_$12|) (= ($kind_of |t_$12|) $kind_array))  :weight  0 :pattern ( ($is_arraytype |t_$12|)))) :named ax_713))
   (assert (! (forall( (|T_$12| $ctype))(!(=> ($is_primitive |T_$12|) (forall( (|S_$74| $state) (|r_$8| Int) (|p_$85| $ptr))(!(= ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|))) (= |p_$85| ($ptr |T_$12| |r_$8|)))  :pattern ( ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|)))))))  :pattern ( ($is_primitive |T_$12|)))) :named ax_714))
   (assert (! (forall( (|t_$13| $ctype))(!(= ($is_threadtype |t_$13|) (= ($kind_of |t_$13|) $kind_thread))  :weight  0 :pattern ( ($is_threadtype |t_$13|)))) :named ax_715))
   (assert (! (forall( (|t_$14| $ctype))(!(=> ($is_composite |t_$14|) ($is_non_primitive |t_$14|))  :weight  0 :pattern ( ($is_composite |t_$14|)))) :named ax_716))
   (assert (! (forall( (|T_$14| $ctype))(!(=> ($is_primitive |T_$14|) (forall( (|S_$76| $state) (|r_$10| Int))(!(= ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|)) (= ($select.mem ($memory |S_$76|) ($ptr |T_$14| |r_$10|)) 0))  :pattern ( ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|))))))  :pattern ( ($is_primitive |T_$14|)))) :named ax_717))
   (assert (! (forall( (|t_$15| $ctype))(!(=> ($is_arraytype |t_$15|) ($is_non_primitive |t_$15|))  :weight  0 :pattern ( ($is_arraytype |t_$15|)))) :named ax_718))
   (assert (! (forall( (|t_$16| $ctype))(!(=> ($is_threadtype |t_$16|) ($is_non_primitive |t_$16|))  :weight  0 :pattern ( ($is_threadtype |t_$16|)))) :named ax_719))
   (assert (! (forall( (|T_$18| $ctype) (|s_$14| Int))(!(= ($ptr_level ($array |T_$18| |s_$14|)) 0)  :pattern ( ($array |T_$18| |s_$14|)))) :named ax_720))
   (assert (! (forall( (|T_$19| $ctype) (|s_$15| Int))(!($is_arraytype ($array |T_$19| |s_$15|))  :pattern ( ($array |T_$19| |s_$15|)))) :named ax_721))
   (assert (! (forall( (|t_$19| $ctype))(!(=> ($is_record_type |t_$19|) ($is_primitive |t_$19|))  :pattern ( ($is_record_type |t_$19|)))) :named ax_722))
   (assert (! (forall( (|t_$2| $ctype))(= (not (= ($kind_of |t_$2|) $kind_primitive)) (not (= ($kind_of |t_$2|) $kind_primitive)))) :named ax_723))
   (assert (! (forall( (|T_$20| $ctype) (|s_$16| Int))(!(not ($is_claimable ($array |T_$20| |s_$16|)))  :pattern ( ($array |T_$20| |s_$16|)))) :named ax_724))
   (assert (! (forall( (|T_$21| $ctype) (|s_$17| Int))(!(= ($sizeof ($array |T_$21| |s_$17|)) (* ($sizeof |T_$21|) |s_$17|))  :pattern ( ($sizeof ($array |T_$21| |s_$17|))))) :named ax_725))
   (assert (! (forall( (|t_$3| $ctype) (|p_$7| $ptr) (|S| $state))(= ($ptr |t_$3| ($select.mem ($memory |S|) |p_$7|)) ($ptr |t_$3| ($select.mem ($memory |S|) |p_$7|)))) :named ax_726))
   (assert (! (forall( (|t_$38| $ctype) (|x_$26| Int) (|y_$8| Int))(!(= ($unchk_add |t_$38| |x_$26| |y_$8|) ($unchecked |t_$38| (+ |x_$26| |y_$8|)))  :weight  0 :pattern ( ($unchk_add |t_$38| |x_$26| |y_$8|)))) :named ax_727))
   (assert (! (forall( (|t_$4| $ctype) (|f| $field))(= (and ($is_base_field |f|) (= ($field_parent_type |f|) |t_$4|)) (and ($is_base_field |f|) (= ($field_parent_type |f|) |t_$4|)))) :named ax_728))
   (assert (! (forall( (|t_$42| $ctype) (|val_$17| Int))(!(=> ($in_range_t |t_$42| |val_$17|) (= ($unchecked |t_$42| |val_$17|) |val_$17|))  :pattern ( ($unchecked |t_$42| |val_$17|)))) :named ax_729))
   (assert (! (forall( (|t_$43| $ctype) (|val_$18| Int))(!($in_range_t |t_$43| ($unchecked |t_$43| |val_$18|))  :pattern ( ($unchecked |t_$43| |val_$18|)))) :named ax_730))
   (assert (! (forall( (|t_$44| $ctype) (|x_$40| Int) (|y_$15| Int) (|z_$0| Int))(!(=> (and (and ($in_range_t |t_$44| |x_$40|) ($in_range_t |t_$44| (- ($_pow2 |y_$15|) 1))) (>= |x_$40| 0)) (= (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| (- ($_pow2 |y_$15|) 1))))  :pattern ( (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| |z_$0|)))) :named ax_731))
   (assert (! (forall( (|t_$45| $ctype) (|x_$46| Int) (|y_$21| Int))(!(=> (and (<= 0 |x_$46|) ($in_range_t |t_$45| |x_$46|)) (and (<= 0 ($_and |t_$45| |x_$46| |y_$21|)) (<= ($_and |t_$45| |x_$46| |y_$21|) |x_$46|)))  :pattern ( ($_and |t_$45| |x_$46| |y_$21|)))) :named ax_732))
   (assert (! (forall( (|t_$46| $ctype) (|x_$47| Int) (|y_$22| Int))(!(=> (and (and (and (<= 0 |x_$47|) (<= 0 |y_$22|)) ($in_range_t |t_$46| |x_$47|)) ($in_range_t |t_$46| |y_$22|)) (and (<= ($_and |t_$46| |x_$47| |y_$22|) |x_$47|) (<= ($_and |t_$46| |x_$47| |y_$22|) |y_$22|)))  :pattern ( ($_and |t_$46| |x_$47| |y_$22|)))) :named ax_733))
   (assert (! (forall( (|t_$47| $ctype) (|x_$48| Int) (|y_$23| Int))(!(=> (and (and (and (<= 0 |x_$48|) (<= 0 |y_$23|)) ($in_range_t |t_$47| |x_$48|)) ($in_range_t |t_$47| |y_$23|)) (and (<= 0 ($_or |t_$47| |x_$48| |y_$23|)) (<= ($_or |t_$47| |x_$48| |y_$23|) (+ |x_$48| |y_$23|))))  :pattern ( ($_or |t_$47| |x_$48| |y_$23|)))) :named ax_734))
   (assert (! (forall( (|t_$48| $ctype) (|x_$49| Int) (|y_$24| Int))(!(=> (and (and (and (<= 0 |x_$49|) (<= 0 |y_$24|)) ($in_range_t |t_$48| |x_$49|)) ($in_range_t |t_$48| |y_$24|)) (and (<= |x_$49| ($_or |t_$48| |x_$49| |y_$24|)) (<= |y_$24| ($_or |t_$48| |x_$49| |y_$24|))))  :pattern ( ($_or |t_$48| |x_$49| |y_$24|)))) :named ax_735))
   (assert (! (forall( (|t_$49| $ctype) (|x_$50| Int) (|y_$25| Int) (|z_$1| Int))(!(=> (and (and (and (and (and (and (and (<= 0 |x_$50|) (<= 0 |y_$25|)) (<= 0 |z_$1|)) (< |z_$1| 64)) (< |x_$50| ($_pow2 |z_$1|))) (< |y_$25| ($_pow2 |z_$1|))) ($in_range_t |t_$49| |x_$50|)) ($in_range_t |t_$49| |y_$25|)) (< ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|)))  :pattern ( ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|)))) :named ax_736))
   (assert (! (forall( (|t_$5| $ctype) (|s_$2| $struct))(= ($ptr |t_$5| ($vs_base_ref |s_$2|)) ($ptr |t_$5| ($vs_base_ref |s_$2|)))) :named ax_737))
   (assert (! (forall( (|t_$50| $ctype) (|x_$51| Int) (|y_$26| Int))(!(=> (and (and (<= 0 |x_$51|) (<= |x_$51| $max.u1)) (and (<= 0 |y_$26|) (<= |y_$26| $max.u1))) (and (<= 0 ($_or |t_$50| |x_$51| |y_$26|)) (<= ($_or |t_$50| |x_$51| |y_$26|) $max.u1)))  :pattern ( ($_or |t_$50| |x_$51| |y_$26|)))) :named ax_738))
   (assert (! (forall( (|t_$51| $ctype) (|x_$52| Int) (|y_$27| Int))(!(=> (and (and (<= 0 |x_$52|) (<= |x_$52| $max.u2)) (and (<= 0 |y_$27|) (<= |y_$27| $max.u2))) (and (<= 0 ($_or |t_$51| |x_$52| |y_$27|)) (<= ($_or |t_$51| |x_$52| |y_$27|) $max.u2)))  :pattern ( ($_or |t_$51| |x_$52| |y_$27|)))) :named ax_739))
   (assert (! (forall( (|t_$52| $ctype) (|x_$53| Int) (|y_$28| Int))(!(=> (and (and (<= 0 |x_$53|) (<= |x_$53| $max.u4)) (and (<= 0 |y_$28|) (<= |y_$28| $max.u4))) (and (<= 0 ($_or |t_$52| |x_$53| |y_$28|)) (<= ($_or |t_$52| |x_$53| |y_$28|) $max.u4)))  :pattern ( ($_or |t_$52| |x_$53| |y_$28|)))) :named ax_740))
   (assert (! (forall( (|t_$53| $ctype) (|x_$54| Int) (|y_$29| Int))(!(=> (and (and (<= 0 |x_$54|) (<= |x_$54| $max.u8)) (and (<= 0 |y_$29|) (<= |y_$29| $max.u8))) (and (<= 0 ($_or |t_$53| |x_$54| |y_$29|)) (<= ($_or |t_$53| |x_$54| |y_$29|) $max.u8)))  :pattern ( ($_or |t_$53| |x_$54| |y_$29|)))) :named ax_741))
   (assert (! (forall( (|t_$54| $ctype) (|x_$55| Int) (|y_$30| Int))(!(=> (and (and (<= 0 |x_$55|) (<= |x_$55| $max.u1)) (and (<= 0 |y_$30|) (<= |y_$30| $max.u1))) (and (<= 0 ($_and |t_$54| |x_$55| |y_$30|)) (<= ($_and |t_$54| |x_$55| |y_$30|) $max.u1)))  :pattern ( ($_and |t_$54| |x_$55| |y_$30|)))) :named ax_742))
   (assert (! (forall( (|t_$55| $ctype) (|x_$56| Int) (|y_$31| Int))(!(=> (and (and (<= 0 |x_$56|) (<= |x_$56| $max.u2)) (and (<= 0 |y_$31|) (<= |y_$31| $max.u2))) (and (<= 0 ($_and |t_$55| |x_$56| |y_$31|)) (<= ($_and |t_$55| |x_$56| |y_$31|) $max.u2)))  :pattern ( ($_and |t_$55| |x_$56| |y_$31|)))) :named ax_743))
   (assert (! (forall( (|t_$56| $ctype) (|x_$57| Int) (|y_$32| Int))(!(=> (and (and (<= 0 |x_$57|) (<= |x_$57| $max.u4)) (and (<= 0 |y_$32|) (<= |y_$32| $max.u4))) (and (<= 0 ($_and |t_$56| |x_$57| |y_$32|)) (<= ($_and |t_$56| |x_$57| |y_$32|) $max.u4)))  :pattern ( ($_and |t_$56| |x_$57| |y_$32|)))) :named ax_744))
   (assert (! (forall( (|t_$57| $ctype) (|x_$58| Int) (|y_$33| Int))(!(=> (and (and (<= 0 |x_$58|) (<= |x_$58| $max.u8)) (and (<= 0 |y_$33|) (<= |y_$33| $max.u8))) (and (<= 0 ($_and |t_$57| |x_$58| |y_$33|)) (<= ($_and |t_$57| |x_$58| |y_$33|) $max.u8)))  :pattern ( ($_and |t_$57| |x_$58| |y_$33|)))) :named ax_745))
   (assert (! (forall( (|t_$58| $ctype) (|x_$59| Int) (|y_$34| Int))(!(=> (and (and (<= 0 |x_$59|) (<= |x_$59| $max.u1)) (and (<= 0 |y_$34|) (<= |y_$34| $max.u1))) (and (<= 0 ($_xor |t_$58| |x_$59| |y_$34|)) (<= ($_xor |t_$58| |x_$59| |y_$34|) $max.u1)))  :pattern ( ($_xor |t_$58| |x_$59| |y_$34|)))) :named ax_746))
   (assert (! (forall( (|t_$59| $ctype) (|x_$60| Int) (|y_$35| Int))(!(=> (and (and (<= 0 |x_$60|) (<= |x_$60| $max.u2)) (and (<= 0 |y_$35|) (<= |y_$35| $max.u2))) (and (<= 0 ($_xor |t_$59| |x_$60| |y_$35|)) (<= ($_xor |t_$59| |x_$60| |y_$35|) $max.u2)))  :pattern ( ($_xor |t_$59| |x_$60| |y_$35|)))) :named ax_747))
   (assert (! (forall( (|t_$60| $ctype) (|x_$61| Int) (|y_$36| Int))(!(=> (and (and (<= 0 |x_$61|) (<= |x_$61| $max.u4)) (and (<= 0 |y_$36|) (<= |y_$36| $max.u4))) (and (<= 0 ($_xor |t_$60| |x_$61| |y_$36|)) (<= ($_xor |t_$60| |x_$61| |y_$36|) $max.u4)))  :pattern ( ($_xor |t_$60| |x_$61| |y_$36|)))) :named ax_748))
   (assert (! (forall( (|t_$61| $ctype) (|x_$62| Int) (|y_$37| Int))(!(=> (and (and (<= 0 |x_$62|) (<= |x_$62| $max.u8)) (and (<= 0 |y_$37|) (<= |y_$37| $max.u8))) (and (<= 0 ($_xor |t_$61| |x_$62| |y_$37|)) (<= ($_xor |t_$61| |x_$62| |y_$37|) $max.u8)))  :pattern ( ($_xor |t_$61| |x_$62| |y_$37|)))) :named ax_749))
   (assert (! (forall( (|t_$62| $ctype) (|x_$63| Int))(!($in_range_t |t_$62| ($_not |t_$62| |x_$63|))  :pattern ( ($_not |t_$62| |x_$63|)))) :named ax_750))
   (assert (! (forall( (|t_$63| $ctype) (|x_$64| Int))(!(= ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|)) ($_not |t_$63| 0))  :pattern ( ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|))))) :named ax_751))
   (assert (! (forall( (|t_$64| $ctype) (|x_$65| Int))(!(= ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|)) 0)  :pattern ( ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|))))) :named ax_752))
   (assert (! (forall( (|t_$65| $ctype) (|x_$66| Int))(!(=> ($in_range_t |t_$65| |x_$66|) (= ($_or |t_$65| |x_$66| 0) |x_$66|))  :pattern ( ($_or |t_$65| |x_$66| 0)))) :named ax_753))
   (assert (! (forall( (|t_$66| $ctype) (|x_$67| Int))(!(= ($_or |t_$66| |x_$67| ($_not |t_$66| 0)) ($_not |t_$66| 0))  :pattern ( ($_or |t_$66| |x_$67| ($_not |t_$66| 0))))) :named ax_754))
   (assert (! (forall( (|t_$67| $ctype) (|x_$68| Int))(!(=> ($in_range_t |t_$67| |x_$68|) (= ($_or |t_$67| |x_$68| |x_$68|) |x_$68|))  :pattern ( ($_or |t_$67| |x_$68| |x_$68|)))) :named ax_755))
   (assert (! (forall( (|t_$68| $ctype) (|x_$69| Int))(!(= ($_and |t_$68| |x_$69| 0) 0)  :pattern ( ($_and |t_$68| |x_$69| 0)))) :named ax_756))
   (assert (! (forall( (|t_$69| $ctype) (|x_$70| Int))(!(=> ($in_range_t |t_$69| |x_$70|) (= ($_and |t_$69| |x_$70| ($_not |t_$69| 0)) |x_$70|))  :pattern ( ($_and |t_$69| |x_$70| ($_not |t_$69| 0))))) :named ax_757))
   (assert (! (forall( (|t_$7| $ctype) (|p_$34| $ptr))(= (and (and (and (forall( (|S_$36_$1| $state))(!(=> ($good_state |S_$36_$1|) (and ($typed |S_$36_$1| |p_$34|) (= ($emb |S_$36_$1| |p_$34|) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$36_$1|) |p_$34|)))) (forall( (|S_$37_$1| $state) (|f_$2_$1| $field))(!(=> ($good_state |S_$37_$1|) (and ($typed |S_$37_$1| |p_$34|) (= ($emb |S_$37_$1| |p_$34|) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$37_$1|) ($dot |p_$34| |f_$2_$1|)))))) (forall( (|S_$38_$1| $state) (|f_$3_$1| $field) (|i_$30| Int) (|tt_$1| $ctype))(!(=> ($good_state |S_$38_$1|) (and ($typed |S_$38_$1| |p_$34|) (= ($emb |S_$38_$1| |p_$34|) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$38_$1|) ($idx ($dot |p_$34| |f_$3_$1|) |i_$30| |tt_$1|)))))) (forall( (|S_$39_$1| $state))(!(=> ($program_entry_point |S_$39_$1|) (and ($extent_mutable |S_$39_$1| |p_$34|) (= ($owns |S_$39_$1| |p_$34|) $set_empty)))  :pattern ( ($program_entry_point |S_$39_$1|))))) (and (and (and (forall( (|S_$36| $state))(!(=> ($good_state |S_$36|) (and ($typed |S_$36| |p_$34|) (= ($ts_emb ($ts |S_$36| |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$36|) |p_$34|)))) (forall( (|S_$37| $state) (|f_$2| $field))(!(=> ($good_state |S_$37|) (and ($typed |S_$37| |p_$34|) (= ($ts_emb ($ts |S_$37| |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$37|) ($dot |p_$34| |f_$2|)))))) (forall( (|S_$38| $state) (|f_$3| $field) (|i| Int) (|tt| $ctype))(!(=> ($good_state |S_$38|) (and ($typed |S_$38| |p_$34|) (= ($ts_emb ($ts |S_$38| |p_$34|)) ($ptr ^^root_emb ($ref |p_$34|)))))  :pattern ( ($select.tm ($typemap |S_$38|) ($idx ($dot |p_$34| |f_$3|) |i| |tt|)))))) (forall( (|S_$39| $state))(!(=> ($program_entry_point |S_$39|) (and ($extent_mutable |S_$39| |p_$34|) (= ($owns |S_$39| |p_$34|) $set_empty)))  :pattern ( ($program_entry_point |S_$39|))))))) :named ax_758))
   (assert (! (forall( (|t_$70| $ctype) (|x_$71| Int))(!(=> ($in_range_t |t_$70| |x_$71|) (= ($_and |t_$70| |x_$71| |x_$71|) |x_$71|))  :pattern ( ($_and |t_$70| |x_$71| |x_$71|)))) :named ax_759))
   (assert (! (forall( (|t_$71| $ctype) (|x_$72| Int) (|y_$38| Int))(!(= ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|) |y_$38|)  :pattern ( ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|)))) :named ax_760))
   (assert (! (forall( (|t_$72| $ctype) (|x_$73| Int) (|y_$39| Int))(!(= ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|) |x_$73|)  :pattern ( ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|)))) :named ax_761))
   (assert (! (forall( (|t_$73| $ctype) (|x_$74| Int))(!(=> ($in_range_t |t_$73| |x_$74|) (= ($_xor |t_$73| |x_$74| 0) |x_$74|))  :pattern ( ($_xor |t_$73| |x_$74| 0)))) :named ax_762))
   (assert (! (forall( (|t_$74| $ctype) (|x_$75| Int))(!(= ($_xor |t_$74| |x_$75| |x_$75|) 0)  :pattern ( ($_xor |t_$74| |x_$75| |x_$75|)))) :named ax_763))
   (assert (! (forall( (|t_$75| $ctype) (|x_$76| Int))(!(= ($_xor |t_$75| |x_$76| ($_not |t_$75| 0)) ($_not |t_$75| |x_$76|))  :pattern ( ($_xor |t_$75| |x_$76| ($_not |t_$75| 0))))) :named ax_764))
   (assert (! (forall( (|t_$76| $ctype) (|x_$77| Int))(!(=> ($in_range_t |t_$76| |x_$77|) (= ($_not |t_$76| ($_not |t_$76| |x_$77|)) |x_$77|))  :pattern ( ($_not |t_$76| ($_not |t_$76| |x_$77|))))) :named ax_765))
   (assert (! (forall( (|t_$77| $ctype) (|x_$78| Int) (|y_$40| Int))(!(= ($_or |t_$77| |x_$78| |y_$40|) ($_or |t_$77| |y_$40| |x_$78|))  :pattern ( ($_or |t_$77| |x_$78| |y_$40|)))) :named ax_766))
   (assert (! (forall( (|t_$78| $ctype) (|x_$79| Int) (|y_$41| Int))(!(= ($_xor |t_$78| |x_$79| |y_$41|) ($_xor |t_$78| |y_$41| |x_$79|))  :pattern ( ($_xor |t_$78| |x_$79| |y_$41|)))) :named ax_767))
   (assert (! (forall( (|t_$79| $ctype) (|x_$80| Int) (|y_$42| Int))(!(= ($_and |t_$79| |x_$80| |y_$42|) ($_and |t_$79| |y_$42| |x_$80|))  :pattern ( ($_and |t_$79| |x_$80| |y_$42|)))) :named ax_768))
   (assert (! (forall( (|t_$89| $ctype))(!(=> ($is_math_type |t_$89|) ($is_primitive |t_$89|))  :pattern ( ($is_math_type |t_$89|)))) :named ax_769))
   (assert (! (forall( (|t_$90| $ctype))(!(=> ($is_fnptr_type |t_$90|) ($is_primitive |t_$90|))  :pattern ( ($is_fnptr_type |t_$90|)))) :named ax_770))
   (assert (! (forall( (|t| $ctype))(= (= ($kind_of |t|) $kind_primitive) (= ($kind_of |t|) $kind_primitive))) :named ax_771))
   (assert (! (forall( (|tok_$0| $token) (|c_$0| $ptr) (|#s2_$2| $state) (|#s1_$4| $state))(= (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$4|) ($full_stop |#s1_$4|)) ($good_state_ext |tok_$0| |#s2_$2|)) (forall( (|#p_$10_$7| $ptr) (|#q_$17| $ptr))(!(=> (and (and ($good_state |#s1_$4|) ($set_in |#p_$10_$7| ($owns |#s1_$4| |#q_$17|))) ($closed |#s1_$4| |#q_$17|)) (and ($closed |#s1_$4| |#p_$10_$7|) (not (= ($ref |#p_$10_$7|) 0))))  :pattern ( ($set_in |#p_$10_$7| ($owns |#s1_$4| |#q_$17|)))))) (forall( (|#p_$10_$8| $ptr) (|#q_$18| $ptr))(!(=> (and (and ($good_state |#s2_$2|) ($set_in |#p_$10_$8| ($owns |#s2_$2| |#q_$18|))) ($closed |#s2_$2| |#q_$18|)) (and ($closed |#s2_$2| |#p_$10_$8|) (not (= ($ref |#p_$10_$8|) 0))))  :pattern ( ($set_in |#p_$10_$8| ($owns |#s2_$2| |#q_$18|)))))) (forall( (|#p_$9_$3| $ptr))(!($inv2_when_closed |#s1_$4| |#s2_$2| |#p_$9_$3| ($typ |#p_$9_$3|))  :pattern ( ($closed |#s1_$4| |#p_$9_$3|)) :pattern ( ($closed |#s2_$2| |#p_$9_$3|))))) ($valid_claim |#s1_$4| |c_$0|)) ($closed |#s2_$2| |c_$0|)) true) (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$4|) ($full_stop |#s1_$4|)) ($good_state_ext |tok_$0| |#s2_$2|)) (forall( (|#p_$10_$3| $ptr) (|#q_$13| $ptr))(!(=> (and (and ($good_state |#s1_$4|) ($set_in |#p_$10_$3| ($owns |#s1_$4| |#q_$13|))) ($closed |#s1_$4| |#q_$13|)) (and ($closed |#s1_$4| |#p_$10_$3|) (not (= ($ref |#p_$10_$3|) 0))))  :pattern ( ($set_in |#p_$10_$3| ($owns |#s1_$4| |#q_$13|)))))) (forall( (|#p_$10_$4| $ptr) (|#q_$14| $ptr))(!(=> (and (and ($good_state |#s2_$2|) ($set_in |#p_$10_$4| ($owns |#s2_$2| |#q_$14|))) ($closed |#s2_$2| |#q_$14|)) (and ($closed |#s2_$2| |#p_$10_$4|) (not (= ($ref |#p_$10_$4|) 0))))  :pattern ( ($set_in |#p_$10_$4| ($owns |#s2_$2| |#q_$14|)))))) (forall( (|#p_$9_$1_$0| $ptr))(!(or (and (not ($closed |#s1_$4| |#p_$9_$1_$0|)) (not ($closed |#s2_$2| |#p_$9_$1_$0|))) (and ($inv2 |#s1_$4| |#s2_$2| |#p_$9_$1_$0| ($typ |#p_$9_$1_$0|)) ($nonvolatile_spans_the_same |#s1_$4| |#s2_$2| |#p_$9_$1_$0| ($typ |#p_$9_$1_$0|))))  :pattern ( ($closed |#s1_$4| |#p_$9_$1_$0|)) :pattern ( ($closed |#s2_$2| |#p_$9_$1_$0|))))) ($valid_claim |#s1_$4| |c_$0|)) ($closed |#s2_$2| |c_$0|)) true))) :named ax_772))
   (assert (! (forall( (|tok| $token) (|c| $ptr) (|#s1_$3| $state))(= (and (and ($good_state_ext |tok| |#s1_$3|) (forall( (|#p_$10_$6| $ptr) (|#q_$16| $ptr))(!(=> (and (and ($good_state |#s1_$3|) ($set_in |#p_$10_$6| ($owns |#s1_$3| |#q_$16|))) ($closed |#s1_$3| |#q_$16|)) (and ($closed |#s1_$3| |#p_$10_$6|) (not (= ($ref |#p_$10_$6|) 0))))  :pattern ( ($set_in |#p_$10_$6| ($owns |#s1_$3| |#q_$16|)))))) true) (and (and ($good_state_ext |tok| |#s1_$3|) (forall( (|#p_$10_$2| $ptr) (|#q_$12| $ptr))(!(=> (and (and ($good_state |#s1_$3|) ($set_in |#p_$10_$2| ($owns |#s1_$3| |#q_$12|))) ($closed |#s1_$3| |#q_$12|)) (and ($closed |#s1_$3| |#p_$10_$2|) (not (= ($ref |#p_$10_$2|) 0))))  :pattern ( ($set_in |#p_$10_$2| ($owns |#s1_$3| |#q_$12|)))))) true))) :named ax_773))
   (assert (! (forall( (|ts| $type_state))(!(and (not (= ($kind_of ($typ ($ts_emb |ts|))) $kind_primitive)) ($is_non_primitive ($typ ($ts_emb |ts|))))  :pattern ( ($ts_emb |ts|)))) :named ax_774))
   (assert (! (forall( (|typ_$0_$0| $ctype) (|#p_$8_$0| $ptr) (|#s2_$1| $state) (|#s1_$0_$0| $state))(= (or (and (not ($closed |#s1_$0_$0| |#p_$8_$0|)) (not ($closed |#s2_$1| |#p_$8_$0|))) (and ($inv2 |#s1_$0_$0| |#s2_$1| |#p_$8_$0| |typ_$0_$0|) ($nonvolatile_spans_the_same |#s1_$0_$0| |#s2_$1| |#p_$8_$0| |typ_$0_$0|))) (or (and (not ($closed |#s1_$0_$0| |#p_$8_$0|)) (not ($closed |#s2_$1| |#p_$8_$0|))) (and ($inv2 |#s1_$0_$0| |#s2_$1| |#p_$8_$0| |typ_$0_$0|) ($nonvolatile_spans_the_same |#s1_$0_$0| |#s2_$1| |#p_$8_$0| |typ_$0_$0|))))) :named ax_775))
   (assert (! (forall( (|typ_$0| $ctype) (|#p_$8| $ptr) (|#s2| $state) (|#s1_$0| $state))(= (or (and (not ($closed |#s1_$0| |#p_$8|)) (not ($closed |#s2| |#p_$8|))) (and ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|))) (or (and (not ($closed |#s1_$0| |#p_$8|)) (not ($closed |#s2| |#p_$8|))) (and ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|))))) :named ax_776))
   (assert (! (forall( (|typ_$1| $ctype) (|#p_$7_$0| $ptr) (|#s1_$2| $state))(= ($inv2 |#s1_$2| |#s1_$2| |#p_$7_$0| |typ_$1|) ($inv2 |#s1_$2| |#s1_$2| |#p_$7_$0| |typ_$1|))) :named ax_777))
   (assert (! (forall( (|typ| $ctype) (|#p_$7| $ptr) (|#s1| $state))(= ($inv2 |#s1| |#s1| |#p_$7| |typ|) ($inv2 |#s1| |#s1| |#p_$7| |typ|))) :named ax_778))
   (assert (! (forall( (|u_$0| $ptr) (|S_$41_$0| $state))(= ($ts_active_option ($select.tm ($typemap |S_$41_$0|) |u_$0|)) ($ts_active_option ($select.tm ($typemap |S_$41_$0|) |u_$0|)))) :named ax_779))
   (assert (! (forall( (|u| $ptr) (|S_$41| $state))(= ($ts_active_option ($ts |S_$41| |u|)) ($ts_active_option ($select.tm ($typemap |S_$41|) |u|)))) :named ax_780))
   (assert (! (forall( (|v| Bool))(= (ite |v| 1 0) (ite |v| 1 0))) :named ax_781))
   (assert (! (forall( (|val_$10| Int))(!(= ($in_range_t ^^i4 |val_$10|) (and (<= $min.i4 |val_$10|) (<= |val_$10| $max.i4)))  :pattern ( ($in_range_t ^^i4 |val_$10|)))) :named ax_782))
   (assert (! (forall( (|val_$11| Int))(!(= ($in_range_t ^^i8 |val_$11|) (and (<= $min.i8 |val_$11|) (<= |val_$11| $max.i8)))  :pattern ( ($in_range_t ^^i8 |val_$11|)))) :named ax_783))
   (assert (! (forall( (|val_$12| Int))(!(= ($in_range_t ^^u1 |val_$12|) (and (<= 0 |val_$12|) (<= |val_$12| $max.u1)))  :pattern ( ($in_range_t ^^u1 |val_$12|)))) :named ax_784))
   (assert (! (forall( (|val_$13| Int))(!(= ($in_range_t ^^u2 |val_$13|) (and (<= 0 |val_$13|) (<= |val_$13| $max.u2)))  :pattern ( ($in_range_t ^^u2 |val_$13|)))) :named ax_785))
   (assert (! (forall( (|val_$14| Int))(!(= ($in_range_t ^^u4 |val_$14|) (and (<= 0 |val_$14|) (<= |val_$14| $max.u4)))  :pattern ( ($in_range_t ^^u4 |val_$14|)))) :named ax_786))
   (assert (! (forall( (|val_$15| Int))(!(= ($in_range_t ^^u8 |val_$15|) (and (<= 0 |val_$15|) (<= |val_$15| $max.u8)))  :pattern ( ($in_range_t ^^u8 |val_$15|)))) :named ax_787))
   (assert (! (forall( (|val_$16| Int))(!($in_range_t ^^mathint |val_$16|)  :pattern ( ($in_range_t ^^mathint |val_$16|)))) :named ax_788))
   (assert (! (forall( (|val_$19| Int))(!(=> (and (<= 0 |val_$19|) (<= |val_$19| $max.u1)) (= ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|)) |val_$19|))  :pattern ( ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|))))) :named ax_789))
   (assert (! (forall( (|val_$20| Int))(!(=> (and (<= 0 |val_$20|) (<= |val_$20| $max.u2)) (= ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|)) |val_$20|))  :pattern ( ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|))))) :named ax_790))
   (assert (! (forall( (|val_$21| Int))(!(=> (and (<= 0 |val_$21|) (<= |val_$21| $max.u4)) (= ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|)) |val_$21|))  :pattern ( ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|))))) :named ax_791))
   (assert (! (forall( (|val_$22| Int))(!(=> (and (<= 0 |val_$22|) (<= |val_$22| $max.u8)) (= ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|)) |val_$22|))  :pattern ( ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|))))) :named ax_792))
   (assert (! (forall( (|val_$23| Int))(!(=> (and (<= $min.i1 |val_$23|) (<= |val_$23| $max.i1)) (= ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|)) |val_$23|))  :pattern ( ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|))))) :named ax_793))
   (assert (! (forall( (|val_$24| Int))(!(=> (and (<= $min.i2 |val_$24|) (<= |val_$24| $max.i2)) (= ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|)) |val_$24|))  :pattern ( ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|))))) :named ax_794))
   (assert (! (forall( (|val_$25| Int))(!(=> (and (<= $min.i4 |val_$25|) (<= |val_$25| $max.i4)) (= ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|)) |val_$25|))  :pattern ( ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|))))) :named ax_795))
   (assert (! (forall( (|val_$26| Int))(!(=> (and (<= $min.i8 |val_$26|) (<= |val_$26| $max.i8)) (= ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|)) |val_$26|))  :pattern ( ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|))))) :named ax_796))
   (assert (! (forall( (|val_$8| Int))(!(= ($in_range_t ^^i1 |val_$8|) (and (<= $min.i1 |val_$8|) (<= |val_$8| $max.i1)))  :pattern ( ($in_range_t ^^i1 |val_$8|)))) :named ax_797))
   (assert (! (forall( (|val_$9| Int))(!(= ($in_range_t ^^i2 |val_$9|) (and (<= $min.i2 |val_$9|) (<= |val_$9| $max.i2)))  :pattern ( ($in_range_t ^^i2 |val_$9|)))) :named ax_798))
   (assert (! (forall( (|vol_$0| Bool) (|union_$0| Bool) (|sz_$6| Int) (|T_$5| $ctype) (|f_$7| $field))(= (and (forall( (|S_$51_$1| $state) (|p_$46_$1| $ptr))(!(=> (and (or (not |union_$0|) (= ($ts_active_option ($ts |S_$51_$1| |p_$46_$1|)) |f_$7|)) (and ($is |p_$46_$1| ($field_parent_type |f_$7|)) ($typed |S_$51_$1| |p_$46_$1|))) (and (and (and ($extent_hint ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))) |p_$46_$1|) ($typed |S_$51_$1| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) (= ($ts_emb ($ts |S_$51_$1| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) |p_$46_$1|)) (= ($ts_path ($ts |S_$51_$1| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) |f_$7|)))  :pattern ( ($select.tm ($typemap |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) :pattern ( ($select.sm ($statusmap |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))) :pattern ( ($select.mem ($memory |S_$51_$1|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46_$1| |f_$7|))))))) (forall( (|p_$47_$1| $ptr) (|i_$6_$1| Int))(!($instantiate_ptr ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$47_$1| |f_$7|))))  :pattern ( ($idx ($dot |p_$47_$1| |f_$7|) |i_$6_$1| |T_$5|))))) (and (forall( (|S_$51| $state) (|p_$46| $ptr))(!(=> (and (or (not |union_$0|) (= ($ts_active_option ($select.tm ($typemap |S_$51|) |p_$46|)) |f_$7|)) (and ($is |p_$46| ($field_parent_type |f_$7|)) ($typed |S_$51| |p_$46|))) (and (and (and ($extent_hint ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))) |p_$46|) ($typed |S_$51| ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) (= ($ts_emb ($select.tm ($typemap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) |p_$46|)) (= ($ts_path ($select.tm ($typemap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) |f_$7|)))  :pattern ( ($select.tm ($typemap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) :pattern ( ($select.sm ($statusmap |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))) :pattern ( ($select.mem ($memory |S_$51|) ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$46| |f_$7|))))))) (forall( (|p_$47| $ptr) (|i_$6| Int))(!($instantiate_ptr ($ptr ($array |T_$5| |sz_$6|) ($ref ($dot |p_$47| |f_$7|))))  :pattern ( ($idx ($dot |p_$47| |f_$7|) |i_$6| |T_$5|))))))) :named ax_799))
   (assert (! (forall( (|vol| Bool) (|union| Bool) (|sz_$5| Int) (|T_$4| $ctype) (|f_$6| $field))(= (forall( (|S_$50_$0| $state) (|p_$45_$0| $ptr) (|i_$5_$0| Int))(!(=> (and (and (and (<= 0 |i_$5_$0|) (< |i_$5_$0| |sz_$5|)) (or (not |union|) (= ($ts_active_option ($ts |S_$50_$0| |p_$45_$0|)) |f_$6|))) (and ($is |p_$45_$0| ($field_parent_type |f_$6|)) ($typed |S_$50_$0| |p_$45_$0|))) (and (and (and (= ($ts_is_volatile ($ts |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) |vol|) ($typed |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) (= ($ts_emb ($ts |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) |p_$45_$0|)) (= ($ts_path ($ts |S_$50_$0| ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) ($array_path |f_$6| |i_$5_$0|))))  :pattern ( ($select.tm ($typemap |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) :pattern ( ($select.sm ($statusmap |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))) :pattern ( ($select.mem ($memory |S_$50_$0|) ($idx ($dot |p_$45_$0| |f_$6|) |i_$5_$0| |T_$4|))))) (forall( (|S_$50| $state) (|p_$45| $ptr) (|i_$5| Int))(!(=> (and (and (and (<= 0 |i_$5|) (< |i_$5| |sz_$5|)) (or (not |union|) (= ($ts_active_option ($select.tm ($typemap |S_$50|) |p_$45|)) |f_$6|))) (and ($is |p_$45| ($field_parent_type |f_$6|)) ($typed |S_$50| |p_$45|))) (and (and (and (= ($ts_is_volatile ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) |vol|) ($typed |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) (= ($ts_emb ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) |p_$45|)) (= ($ts_path ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) ($array_path |f_$6| |i_$5|))))  :pattern ( ($select.tm ($typemap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($select.sm ($statusmap |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($select.mem ($memory |S_$50|) ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))))))) :named ax_800))
   (assert (! (forall( (|x_$1| Int))(= (not (= |x_$1| 0)) (not (= |x_$1| 0)))) :named ax_801))
   (assert (! (forall( (|x_$14| Int))(= ($ptr ^^void |x_$14|) ($ptr ^^void |x_$14|))) :named ax_802))
   (assert (! (forall( (|x_$15| Int))(= ($ptr ^^void |x_$15|) ($ptr ^^void |x_$15|))) :named ax_803))
   (assert (! (forall( (|x_$16| Int))(= ($ptr ^^void |x_$16|) ($ptr ^^void |x_$16|))) :named ax_804))
   (assert (! (forall( (|x_$17| Int))(= ($ptr ^^void |x_$17|) ($ptr ^^void |x_$17|))) :named ax_805))
   (assert (! (forall( (|x_$18| Int))(= ($ptr ^^void |x_$18|) ($ptr ^^void |x_$18|))) :named ax_806))
   (assert (! (forall( (|x_$19| Int))(= ($ptr ^^void |x_$19|) ($ptr ^^void |x_$19|))) :named ax_807))
   (assert (! (forall( (|x_$2| Int))(= (and (<= $min.i1 |x_$2|) (<= |x_$2| $max.i1)) (and (<= $min.i1 |x_$2|) (<= |x_$2| $max.i1)))) :named ax_808))
   (assert (! (forall( (|x_$20| Int))(= ($ptr ^^void |x_$20|) ($ptr ^^void |x_$20|))) :named ax_809))
   (assert (! (forall( (|x_$21| Int))(= ($ptr ^^void |x_$21|) ($ptr ^^void |x_$21|))) :named ax_810))
   (assert (! (forall( (|x_$24| Int) (|y_$7| Int))(!(= ($rec_base_eq |x_$24| |y_$7|) (= |x_$24| |y_$7|))  :pattern ( ($rec_base_eq |x_$24| |y_$7|)))) :named ax_811))
   (assert (! (forall( (|x_$29| Int) (|y_$11| Int))(!(=> (and (and (and (<= 0 |x_$29|) (<= |x_$29| $max.u8)) (and (<= 0 |y_$11|) (<= |y_$11| $max.u8))) (> (+ |x_$29| |y_$11|) $max.u8)) (= ($unchk_add ^^u8 |x_$29| |y_$11|) (- (- (+ |x_$29| |y_$11|) $max.u8) 1)))  :pattern ( ($unchk_add ^^u8 |x_$29| |y_$11|)))) :named ax_812))
   (assert (! (forall( (|x_$3| Int))(= (and (<= $min.i2 |x_$3|) (<= |x_$3| $max.i2)) (and (<= $min.i2 |x_$3|) (<= |x_$3| $max.i2)))) :named ax_813))
   (assert (! (forall( (|x_$30| Int) (|y_$12| Int))(!(=> (and (and (and (<= 0 |x_$30|) (<= |x_$30| $max.u4)) (and (<= 0 |y_$12|) (<= |y_$12| $max.u4))) (> (+ |x_$30| |y_$12|) $max.u8)) (= ($unchk_add ^^u4 |x_$30| |y_$12|) (- (- (+ |x_$30| |y_$12|) $max.u4) 1)))  :pattern ( ($unchk_add ^^u4 |x_$30| |y_$12|)))) :named ax_814))
   (assert (! (forall( (|x_$33| Int) (|from_$0| Int) (|to_$0| Int) (|xs| Int) (|val_$0_$0| Int))(!(=> (and (and (<= 0 |from_$0|) (< |from_$0| |to_$0|)) (<= |to_$0| |xs|)) (=> (and (<= 0 |val_$0_$0|) (< |val_$0_$0| ($_pow2 (- |to_$0| |from_$0|)))) (and (<= 0 ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0_$0|)) (< ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0_$0|) ($_pow2 |xs|)))))  :pattern ( ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0_$0|)))) :named ax_815))
   (assert (! (forall( (|x_$4| Int))(= (and (<= $min.i4 |x_$4|) (<= |x_$4| $max.i4)) (and (<= $min.i4 |x_$4|) (<= |x_$4| $max.i4)))) :named ax_816))
   (assert (! (forall( (|x_$41| Int) (|y_$16| Int))(!(= (mod |x_$41| |y_$16|) (- |x_$41| (* (div |x_$41| |y_$16|) |y_$16|)))  :pattern ( (mod |x_$41| |y_$16|)) :pattern ( (div |x_$41| |y_$16|)))) :named ax_817))
   (assert (! (forall( (|x_$42| Int) (|y_$17| Int))(!(=> (and (<= 0 |x_$42|) (< 0 |y_$17|)) (and (<= 0 (mod |x_$42| |y_$17|)) (< (mod |x_$42| |y_$17|) |y_$17|)))  :pattern ( (mod |x_$42| |y_$17|)))) :named ax_818))
   (assert (! (forall( (|x_$43| Int) (|y_$18| Int))(!(=> (and (<= 0 |x_$43|) (< |y_$18| 0)) (and (<= 0 (mod |x_$43| |y_$18|)) (< (mod |x_$43| |y_$18|) (- 0 |y_$18|))))  :pattern ( (mod |x_$43| |y_$18|)))) :named ax_819))
   (assert (! (forall( (|x_$44| Int) (|y_$19| Int))(!(=> (and (<= |x_$44| 0) (< 0 |y_$19|)) (and (< (- 0 |y_$19|) (mod |x_$44| |y_$19|)) (<= (mod |x_$44| |y_$19|) 0)))  :pattern ( (mod |x_$44| |y_$19|)))) :named ax_820))
   (assert (! (forall( (|x_$45| Int) (|y_$20| Int))(!(=> (and (<= |x_$45| 0) (< |y_$20| 0)) (and (< |y_$20| (mod |x_$45| |y_$20|)) (<= (mod |x_$45| |y_$20|) 0)))  :pattern ( (mod |x_$45| |y_$20|)))) :named ax_821))
   (assert (! (forall( (|x_$5| Int))(= (and (<= $min.i8 |x_$5|) (<= |x_$5| $max.i8)) (and (<= $min.i8 |x_$5|) (<= |x_$5| $max.i8)))) :named ax_822))
   (assert (! (forall( (|x_$6| Int))(= (and (<= 0 |x_$6|) (<= |x_$6| $max.u1)) (and (<= 0 |x_$6|) (<= |x_$6| $max.u1)))) :named ax_823))
   (assert (! (forall( (|x_$7| Int))(= (and (<= 0 |x_$7|) (<= |x_$7| $max.u2)) (and (<= 0 |x_$7|) (<= |x_$7| $max.u2)))) :named ax_824))
   (assert (! (forall( (|x_$8| Int))(= (and (<= 0 |x_$8|) (<= |x_$8| $max.u4)) (and (<= 0 |x_$8|) (<= |x_$8| $max.u4)))) :named ax_825))
   (assert (! (forall( (|x_$9| Int))(= (and (<= 0 |x_$9|) (<= |x_$9| $max.u8)) (and (<= 0 |x_$9|) (<= |x_$9| $max.u8)))) :named ax_826))
   (assert (! (forall( (|y_$0| Int) (|x_$0| Int))(= (+ |x_$0| |y_$0|) (+ |x_$0| |y_$0|))) :named ax_827))
   (assert (! (forall( (|y_$1| Int) (|x_$10| Int))(= (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i1))) (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i1))))) :named ax_828))
   (assert (! (forall( (|y_$2| Int) (|x_$11| Int))(= (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i2))) (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i2))))) :named ax_829))
   (assert (! (forall( (|y_$3| Int) (|x_$12| Int))(= (or (not (= |y_$3| (- 0 1))) (not (= |x_$12| $min.i4))) (or (not (= |y_$3| (- 0 1))) (not (= |x_$12| $min.i4))))) :named ax_830))
   (assert (! (forall( (|y_$4| Int) (|x_$13| Int))(= (or (not (= |y_$4| (- 0 1))) (not (= |x_$13| $min.i8))) (or (not (= |y_$4| (- 0 1))) (not (= |x_$13| $min.i8))))) :named ax_831))
   (assert (! (forall( (|y_$5| Int) (|x_$22| Int) (|t_$8| $ctype))(= ($unchecked |t_$8| (div |x_$22| |y_$5|)) ($unchecked |t_$8| (div |x_$22| |y_$5|)))) :named ax_832))
   (assert (! (forall( (|y_$6| Int) (|x_$23| Int) (|t_$9| $ctype))(= ($unchecked |t_$9| (mod |x_$23| |y_$6|)) ($unchecked |t_$9| (mod |x_$23| |y_$6|)))) :named ax_833))
   (assert (! (forall( (|z| Int) (|y| Int) (|x| Int))(= (+ |x| (* |y| |z|)) (+ |x| (* |y| |z|)))) :named ax_834))
   (assert (! (not (= $@distTp1 $memory_allocator_type)) :named ax_835))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_836))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_837))
   (assert (! (not (= $@distTp2 $memory_allocator_type)) :named ax_838))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_839))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_840))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_841))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_842))
   (assert (! (not (= $@distTp3 $memory_allocator_type)) :named ax_843))
   (assert (! (not (= $@distTp4 $@distTp1)) :named ax_844))
   (assert (! (not (= $@distTp4 $@distTp1)) :named ax_845))
   (assert (! (not (= $@distTp4 $@distTp2)) :named ax_846))
   (assert (! (not (= $@distTp4 $@distTp2)) :named ax_847))
   (assert (! (not (= $@distTp4 $@distTp3)) :named ax_848))
   (assert (! (not (= $@distTp4 $@distTp3)) :named ax_849))
   (assert (! (not (= $@distTp4 $memory_allocator_type)) :named ax_850))
   (assert (! (not (= $@distTp5 $@distTp1)) :named ax_851))
   (assert (! (not (= $@distTp5 $@distTp1)) :named ax_852))
   (assert (! (not (= $@distTp5 $@distTp2)) :named ax_853))
   (assert (! (not (= $@distTp5 $@distTp2)) :named ax_854))
   (assert (! (not (= $@distTp5 $@distTp3)) :named ax_855))
   (assert (! (not (= $@distTp5 $@distTp3)) :named ax_856))
   (assert (! (not (= $@distTp5 $@distTp4)) :named ax_857))
   (assert (! (not (= $@distTp5 $@distTp4)) :named ax_858))
   (assert (! (not (= $@distTp5 $memory_allocator_type)) :named ax_859))
   (assert (! (not (= $@distTp6 $@distTp1)) :named ax_860))
   (assert (! (not (= $@distTp6 $@distTp1)) :named ax_861))
   (assert (! (not (= $@distTp6 $@distTp2)) :named ax_862))
   (assert (! (not (= $@distTp6 $@distTp2)) :named ax_863))
   (assert (! (not (= $@distTp6 $@distTp3)) :named ax_864))
   (assert (! (not (= $@distTp6 $@distTp3)) :named ax_865))
   (assert (! (not (= $@distTp6 $@distTp4)) :named ax_866))
   (assert (! (not (= $@distTp6 $@distTp4)) :named ax_867))
   (assert (! (not (= $@distTp6 $@distTp5)) :named ax_868))
   (assert (! (not (= $@distTp6 $@distTp5)) :named ax_869))
   (assert (! (not (= $@distTp6 $memory_allocator_type)) :named ax_870))
   (assert (! (not (= $@file^?3Cno?20file?3E $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_871))
   (assert (! (not (= $@file^?3Cno?20file?3E $@loc.t)) :named ax_872))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c $@file^?3Cno?20file?3E)) :named ax_873))
   (assert (! (not (= $@loc.owns@47 $@file^?3Cno?20file?3E)) :named ax_874))
   (assert (! (not (= $@loc.owns@47 $@file^?3Cno?20file?3E)) :named ax_875))
   (assert (! (not (= $@loc.owns@47 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_876))
   (assert (! (not (= $@loc.owns@47 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_877))
   (assert (! (not (= $@loc.owns@47 $@loc.prestate@45)) :named ax_878))
   (assert (! (not (= $@loc.owns@47 $@loc.t)) :named ax_879))
   (assert (! (not (= $@loc.owns@47 $@loc.x)) :named ax_880))
   (assert (! (not (= $@loc.owns@47 $@loc.y)) :named ax_881))
   (assert (! (not (= $@loc.owns@47 $@tok$1^203.1)) :named ax_882))
   (assert (! (not (= $@loc.owns@47 $@tok$1^209.3)) :named ax_883))
   (assert (! (not (= $@loc.owns@47 $@tok$1^211.19)) :named ax_884))
   (assert (! (not (= $@loc.owns@47 $@tok$2^0.0)) :named ax_885))
   (assert (! (not (= $@loc.owns@50 $@file^?3Cno?20file?3E)) :named ax_886))
   (assert (! (not (= $@loc.owns@50 $@file^?3Cno?20file?3E)) :named ax_887))
   (assert (! (not (= $@loc.owns@50 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_888))
   (assert (! (not (= $@loc.owns@50 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_889))
   (assert (! (not (= $@loc.owns@50 $@loc.owns@47)) :named ax_890))
   (assert (! (not (= $@loc.owns@50 $@loc.owns@47)) :named ax_891))
   (assert (! (not (= $@loc.owns@50 $@loc.prestate@45)) :named ax_892))
   (assert (! (not (= $@loc.owns@50 $@loc.prestate@46)) :named ax_893))
   (assert (! (not (= $@loc.owns@50 $@loc.prestate@48)) :named ax_894))
   (assert (! (not (= $@loc.owns@50 $@loc.t)) :named ax_895))
   (assert (! (not (= $@loc.owns@50 $@loc.x)) :named ax_896))
   (assert (! (not (= $@loc.owns@50 $@loc.y)) :named ax_897))
   (assert (! (not (= $@loc.owns@50 $@tok$1^203.1)) :named ax_898))
   (assert (! (not (= $@loc.owns@50 $@tok$1^209.3)) :named ax_899))
   (assert (! (not (= $@loc.owns@50 $@tok$1^211.19)) :named ax_900))
   (assert (! (not (= $@loc.owns@50 $@tok$1^212.53)) :named ax_901))
   (assert (! (not (= $@loc.owns@50 $@tok$1^213.3)) :named ax_902))
   (assert (! (not (= $@loc.owns@50 $@tok$2^0.0)) :named ax_903))
   (assert (! (not (= $@loc.owns@53 $@file^?3Cno?20file?3E)) :named ax_904))
   (assert (! (not (= $@loc.owns@53 $@file^?3Cno?20file?3E)) :named ax_905))
   (assert (! (not (= $@loc.owns@53 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_906))
   (assert (! (not (= $@loc.owns@53 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_907))
   (assert (! (not (= $@loc.owns@53 $@loc.owns@47)) :named ax_908))
   (assert (! (not (= $@loc.owns@53 $@loc.owns@47)) :named ax_909))
   (assert (! (not (= $@loc.owns@53 $@loc.owns@50)) :named ax_910))
   (assert (! (not (= $@loc.owns@53 $@loc.owns@50)) :named ax_911))
   (assert (! (not (= $@loc.owns@53 $@loc.prestate@45)) :named ax_912))
   (assert (! (not (= $@loc.owns@53 $@loc.prestate@46)) :named ax_913))
   (assert (! (not (= $@loc.owns@53 $@loc.prestate@48)) :named ax_914))
   (assert (! (not (= $@loc.owns@53 $@loc.prestate@49)) :named ax_915))
   (assert (! (not (= $@loc.owns@53 $@loc.prestate@51)) :named ax_916))
   (assert (! (not (= $@loc.owns@53 $@loc.t)) :named ax_917))
   (assert (! (not (= $@loc.owns@53 $@loc.x)) :named ax_918))
   (assert (! (not (= $@loc.owns@53 $@loc.y)) :named ax_919))
   (assert (! (not (= $@loc.owns@53 $@tok$1^203.1)) :named ax_920))
   (assert (! (not (= $@loc.owns@53 $@tok$1^209.3)) :named ax_921))
   (assert (! (not (= $@loc.owns@53 $@tok$1^211.19)) :named ax_922))
   (assert (! (not (= $@loc.owns@53 $@tok$1^212.53)) :named ax_923))
   (assert (! (not (= $@loc.owns@53 $@tok$1^213.3)) :named ax_924))
   (assert (! (not (= $@loc.owns@53 $@tok$1^214.53)) :named ax_925))
   (assert (! (not (= $@loc.owns@53 $@tok$1^216.3)) :named ax_926))
   (assert (! (not (= $@loc.owns@53 $@tok$2^0.0)) :named ax_927))
   (assert (! (not (= $@loc.owns@56 $@file^?3Cno?20file?3E)) :named ax_928))
   (assert (! (not (= $@loc.owns@56 $@file^?3Cno?20file?3E)) :named ax_929))
   (assert (! (not (= $@loc.owns@56 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_930))
   (assert (! (not (= $@loc.owns@56 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_931))
   (assert (! (not (= $@loc.owns@56 $@loc.owns@47)) :named ax_932))
   (assert (! (not (= $@loc.owns@56 $@loc.owns@47)) :named ax_933))
   (assert (! (not (= $@loc.owns@56 $@loc.owns@50)) :named ax_934))
   (assert (! (not (= $@loc.owns@56 $@loc.owns@50)) :named ax_935))
   (assert (! (not (= $@loc.owns@56 $@loc.owns@53)) :named ax_936))
   (assert (! (not (= $@loc.owns@56 $@loc.owns@53)) :named ax_937))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@45)) :named ax_938))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@46)) :named ax_939))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@48)) :named ax_940))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@49)) :named ax_941))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@51)) :named ax_942))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@52)) :named ax_943))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@54)) :named ax_944))
   (assert (! (not (= $@loc.owns@56 $@loc.prestate@57)) :named ax_945))
   (assert (! (not (= $@loc.owns@56 $@loc.staticWrapState@55)) :named ax_946))
   (assert (! (not (= $@loc.owns@56 $@loc.t)) :named ax_947))
   (assert (! (not (= $@loc.owns@56 $@loc.x)) :named ax_948))
   (assert (! (not (= $@loc.owns@56 $@loc.y)) :named ax_949))
   (assert (! (not (= $@loc.owns@56 $@tok$1^203.1)) :named ax_950))
   (assert (! (not (= $@loc.owns@56 $@tok$1^209.3)) :named ax_951))
   (assert (! (not (= $@loc.owns@56 $@tok$1^211.19)) :named ax_952))
   (assert (! (not (= $@loc.owns@56 $@tok$1^212.53)) :named ax_953))
   (assert (! (not (= $@loc.owns@56 $@tok$1^213.3)) :named ax_954))
   (assert (! (not (= $@loc.owns@56 $@tok$1^214.53)) :named ax_955))
   (assert (! (not (= $@loc.owns@56 $@tok$1^216.3)) :named ax_956))
   (assert (! (not (= $@loc.owns@56 $@tok$1^218.34)) :named ax_957))
   (assert (! (not (= $@loc.owns@56 $@tok$1^218.43)) :named ax_958))
   (assert (! (not (= $@loc.owns@56 $@tok$2^0.0)) :named ax_959))
   (assert (! (not (= $@loc.owns@59 $@file^?3Cno?20file?3E)) :named ax_960))
   (assert (! (not (= $@loc.owns@59 $@file^?3Cno?20file?3E)) :named ax_961))
   (assert (! (not (= $@loc.owns@59 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_962))
   (assert (! (not (= $@loc.owns@59 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_963))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@47)) :named ax_964))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@47)) :named ax_965))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@50)) :named ax_966))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@50)) :named ax_967))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@53)) :named ax_968))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@53)) :named ax_969))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@56)) :named ax_970))
   (assert (! (not (= $@loc.owns@59 $@loc.owns@56)) :named ax_971))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@45)) :named ax_972))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@46)) :named ax_973))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@48)) :named ax_974))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@49)) :named ax_975))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@51)) :named ax_976))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@52)) :named ax_977))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@54)) :named ax_978))
   (assert (! (not (= $@loc.owns@59 $@loc.prestate@57)) :named ax_979))
   (assert (! (not (= $@loc.owns@59 $@loc.staticWrapState@55)) :named ax_980))
   (assert (! (not (= $@loc.owns@59 $@loc.t)) :named ax_981))
   (assert (! (not (= $@loc.owns@59 $@loc.x)) :named ax_982))
   (assert (! (not (= $@loc.owns@59 $@loc.y)) :named ax_983))
   (assert (! (not (= $@loc.owns@59 $@tok$1^203.1)) :named ax_984))
   (assert (! (not (= $@loc.owns@59 $@tok$1^209.3)) :named ax_985))
   (assert (! (not (= $@loc.owns@59 $@tok$1^211.19)) :named ax_986))
   (assert (! (not (= $@loc.owns@59 $@tok$1^212.53)) :named ax_987))
   (assert (! (not (= $@loc.owns@59 $@tok$1^213.3)) :named ax_988))
   (assert (! (not (= $@loc.owns@59 $@tok$1^214.53)) :named ax_989))
   (assert (! (not (= $@loc.owns@59 $@tok$1^216.3)) :named ax_990))
   (assert (! (not (= $@loc.owns@59 $@tok$1^218.34)) :named ax_991))
   (assert (! (not (= $@loc.owns@59 $@tok$1^218.43)) :named ax_992))
   (assert (! (not (= $@loc.owns@59 $@tok$1^219.3)) :named ax_993))
   (assert (! (not (= $@loc.owns@59 $@tok$1^221.5)) :named ax_994))
   (assert (! (not (= $@loc.owns@59 $@tok$2^0.0)) :named ax_995))
   (assert (! (not (= $@loc.owns@62 $@file^?3Cno?20file?3E)) :named ax_996))
   (assert (! (not (= $@loc.owns@62 $@file^?3Cno?20file?3E)) :named ax_997))
   (assert (! (not (= $@loc.owns@62 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_998))
   (assert (! (not (= $@loc.owns@62 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_999))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@47)) :named ax_1000))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@47)) :named ax_1001))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@50)) :named ax_1002))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@50)) :named ax_1003))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@53)) :named ax_1004))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@53)) :named ax_1005))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@56)) :named ax_1006))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@56)) :named ax_1007))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@59)) :named ax_1008))
   (assert (! (not (= $@loc.owns@62 $@loc.owns@59)) :named ax_1009))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@45)) :named ax_1010))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@46)) :named ax_1011))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@48)) :named ax_1012))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@49)) :named ax_1013))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@51)) :named ax_1014))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@52)) :named ax_1015))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@54)) :named ax_1016))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@57)) :named ax_1017))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@58)) :named ax_1018))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@60)) :named ax_1019))
   (assert (! (not (= $@loc.owns@62 $@loc.prestate@63)) :named ax_1020))
   (assert (! (not (= $@loc.owns@62 $@loc.staticWrapState@55)) :named ax_1021))
   (assert (! (not (= $@loc.owns@62 $@loc.staticWrapState@61)) :named ax_1022))
   (assert (! (not (= $@loc.owns@62 $@loc.t)) :named ax_1023))
   (assert (! (not (= $@loc.owns@62 $@loc.x)) :named ax_1024))
   (assert (! (not (= $@loc.owns@62 $@loc.y)) :named ax_1025))
   (assert (! (not (= $@loc.owns@62 $@tok$1^203.1)) :named ax_1026))
   (assert (! (not (= $@loc.owns@62 $@tok$1^209.3)) :named ax_1027))
   (assert (! (not (= $@loc.owns@62 $@tok$1^211.19)) :named ax_1028))
   (assert (! (not (= $@loc.owns@62 $@tok$1^212.53)) :named ax_1029))
   (assert (! (not (= $@loc.owns@62 $@tok$1^213.3)) :named ax_1030))
   (assert (! (not (= $@loc.owns@62 $@tok$1^214.53)) :named ax_1031))
   (assert (! (not (= $@loc.owns@62 $@tok$1^216.3)) :named ax_1032))
   (assert (! (not (= $@loc.owns@62 $@tok$1^218.34)) :named ax_1033))
   (assert (! (not (= $@loc.owns@62 $@tok$1^218.43)) :named ax_1034))
   (assert (! (not (= $@loc.owns@62 $@tok$1^219.3)) :named ax_1035))
   (assert (! (not (= $@loc.owns@62 $@tok$1^221.5)) :named ax_1036))
   (assert (! (not (= $@loc.owns@62 $@tok$1^224.32)) :named ax_1037))
   (assert (! (not (= $@loc.owns@62 $@tok$1^226.9)) :named ax_1038))
   (assert (! (not (= $@loc.owns@62 $@tok$1^228.9)) :named ax_1039))
   (assert (! (not (= $@loc.owns@62 $@tok$2^0.0)) :named ax_1040))
   (assert (! (not (= $@loc.owns@65 $@file^?3Cno?20file?3E)) :named ax_1041))
   (assert (! (not (= $@loc.owns@65 $@file^?3Cno?20file?3E)) :named ax_1042))
   (assert (! (not (= $@loc.owns@65 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1043))
   (assert (! (not (= $@loc.owns@65 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1044))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@47)) :named ax_1045))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@47)) :named ax_1046))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@50)) :named ax_1047))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@50)) :named ax_1048))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@53)) :named ax_1049))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@53)) :named ax_1050))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@56)) :named ax_1051))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@56)) :named ax_1052))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@59)) :named ax_1053))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@59)) :named ax_1054))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@62)) :named ax_1055))
   (assert (! (not (= $@loc.owns@65 $@loc.owns@62)) :named ax_1056))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@45)) :named ax_1057))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@46)) :named ax_1058))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@48)) :named ax_1059))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@49)) :named ax_1060))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@51)) :named ax_1061))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@52)) :named ax_1062))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@54)) :named ax_1063))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@57)) :named ax_1064))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@58)) :named ax_1065))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@60)) :named ax_1066))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@63)) :named ax_1067))
   (assert (! (not (= $@loc.owns@65 $@loc.prestate@66)) :named ax_1068))
   (assert (! (not (= $@loc.owns@65 $@loc.staticWrapState@55)) :named ax_1069))
   (assert (! (not (= $@loc.owns@65 $@loc.staticWrapState@61)) :named ax_1070))
   (assert (! (not (= $@loc.owns@65 $@loc.staticWrapState@64)) :named ax_1071))
   (assert (! (not (= $@loc.owns@65 $@loc.t)) :named ax_1072))
   (assert (! (not (= $@loc.owns@65 $@loc.x)) :named ax_1073))
   (assert (! (not (= $@loc.owns@65 $@loc.y)) :named ax_1074))
   (assert (! (not (= $@loc.owns@65 $@tok$1^203.1)) :named ax_1075))
   (assert (! (not (= $@loc.owns@65 $@tok$1^209.3)) :named ax_1076))
   (assert (! (not (= $@loc.owns@65 $@tok$1^211.19)) :named ax_1077))
   (assert (! (not (= $@loc.owns@65 $@tok$1^212.53)) :named ax_1078))
   (assert (! (not (= $@loc.owns@65 $@tok$1^213.3)) :named ax_1079))
   (assert (! (not (= $@loc.owns@65 $@tok$1^214.53)) :named ax_1080))
   (assert (! (not (= $@loc.owns@65 $@tok$1^216.3)) :named ax_1081))
   (assert (! (not (= $@loc.owns@65 $@tok$1^218.34)) :named ax_1082))
   (assert (! (not (= $@loc.owns@65 $@tok$1^218.43)) :named ax_1083))
   (assert (! (not (= $@loc.owns@65 $@tok$1^219.3)) :named ax_1084))
   (assert (! (not (= $@loc.owns@65 $@tok$1^221.5)) :named ax_1085))
   (assert (! (not (= $@loc.owns@65 $@tok$1^224.32)) :named ax_1086))
   (assert (! (not (= $@loc.owns@65 $@tok$1^226.9)) :named ax_1087))
   (assert (! (not (= $@loc.owns@65 $@tok$1^228.9)) :named ax_1088))
   (assert (! (not (= $@loc.owns@65 $@tok$1^231.3)) :named ax_1089))
   (assert (! (not (= $@loc.owns@65 $@tok$1^232.3)) :named ax_1090))
   (assert (! (not (= $@loc.owns@65 $@tok$2^0.0)) :named ax_1091))
   (assert (! (not (= $@loc.owns@68 $@file^?3Cno?20file?3E)) :named ax_1092))
   (assert (! (not (= $@loc.owns@68 $@file^?3Cno?20file?3E)) :named ax_1093))
   (assert (! (not (= $@loc.owns@68 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1094))
   (assert (! (not (= $@loc.owns@68 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1095))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@47)) :named ax_1096))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@47)) :named ax_1097))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@50)) :named ax_1098))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@50)) :named ax_1099))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@53)) :named ax_1100))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@53)) :named ax_1101))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@56)) :named ax_1102))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@56)) :named ax_1103))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@59)) :named ax_1104))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@59)) :named ax_1105))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@62)) :named ax_1106))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@62)) :named ax_1107))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@65)) :named ax_1108))
   (assert (! (not (= $@loc.owns@68 $@loc.owns@65)) :named ax_1109))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@45)) :named ax_1110))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@46)) :named ax_1111))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@48)) :named ax_1112))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@49)) :named ax_1113))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@51)) :named ax_1114))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@52)) :named ax_1115))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@54)) :named ax_1116))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@57)) :named ax_1117))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@58)) :named ax_1118))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@60)) :named ax_1119))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@63)) :named ax_1120))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@66)) :named ax_1121))
   (assert (! (not (= $@loc.owns@68 $@loc.prestate@69)) :named ax_1122))
   (assert (! (not (= $@loc.owns@68 $@loc.staticWrapState@55)) :named ax_1123))
   (assert (! (not (= $@loc.owns@68 $@loc.staticWrapState@61)) :named ax_1124))
   (assert (! (not (= $@loc.owns@68 $@loc.staticWrapState@64)) :named ax_1125))
   (assert (! (not (= $@loc.owns@68 $@loc.staticWrapState@67)) :named ax_1126))
   (assert (! (not (= $@loc.owns@68 $@loc.t)) :named ax_1127))
   (assert (! (not (= $@loc.owns@68 $@loc.x)) :named ax_1128))
   (assert (! (not (= $@loc.owns@68 $@loc.y)) :named ax_1129))
   (assert (! (not (= $@loc.owns@68 $@tok$1^203.1)) :named ax_1130))
   (assert (! (not (= $@loc.owns@68 $@tok$1^209.3)) :named ax_1131))
   (assert (! (not (= $@loc.owns@68 $@tok$1^211.19)) :named ax_1132))
   (assert (! (not (= $@loc.owns@68 $@tok$1^212.53)) :named ax_1133))
   (assert (! (not (= $@loc.owns@68 $@tok$1^213.3)) :named ax_1134))
   (assert (! (not (= $@loc.owns@68 $@tok$1^214.53)) :named ax_1135))
   (assert (! (not (= $@loc.owns@68 $@tok$1^216.3)) :named ax_1136))
   (assert (! (not (= $@loc.owns@68 $@tok$1^218.34)) :named ax_1137))
   (assert (! (not (= $@loc.owns@68 $@tok$1^218.43)) :named ax_1138))
   (assert (! (not (= $@loc.owns@68 $@tok$1^219.3)) :named ax_1139))
   (assert (! (not (= $@loc.owns@68 $@tok$1^221.5)) :named ax_1140))
   (assert (! (not (= $@loc.owns@68 $@tok$1^224.32)) :named ax_1141))
   (assert (! (not (= $@loc.owns@68 $@tok$1^226.9)) :named ax_1142))
   (assert (! (not (= $@loc.owns@68 $@tok$1^228.9)) :named ax_1143))
   (assert (! (not (= $@loc.owns@68 $@tok$1^231.3)) :named ax_1144))
   (assert (! (not (= $@loc.owns@68 $@tok$1^232.3)) :named ax_1145))
   (assert (! (not (= $@loc.owns@68 $@tok$1^233.19)) :named ax_1146))
   (assert (! (not (= $@loc.owns@68 $@tok$2^0.0)) :named ax_1147))
   (assert (! (not (= $@loc.prestate@45 $@file^?3Cno?20file?3E)) :named ax_1148))
   (assert (! (not (= $@loc.prestate@45 $@file^?3Cno?20file?3E)) :named ax_1149))
   (assert (! (not (= $@loc.prestate@45 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1150))
   (assert (! (not (= $@loc.prestate@45 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1151))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@47)) :named ax_1152))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@50)) :named ax_1153))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@53)) :named ax_1154))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@56)) :named ax_1155))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@59)) :named ax_1156))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@62)) :named ax_1157))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@65)) :named ax_1158))
   (assert (! (not (= $@loc.prestate@45 $@loc.owns@68)) :named ax_1159))
   (assert (! (not (= $@loc.prestate@45 $@loc.t)) :named ax_1160))
   (assert (! (not (= $@loc.prestate@45 $@loc.x)) :named ax_1161))
   (assert (! (not (= $@loc.prestate@45 $@loc.y)) :named ax_1162))
   (assert (! (not (= $@loc.prestate@45 $@tok$1^203.1)) :named ax_1163))
   (assert (! (not (= $@loc.prestate@45 $@tok$1^209.3)) :named ax_1164))
   (assert (! (not (= $@loc.prestate@45 $@tok$2^0.0)) :named ax_1165))
   (assert (! (not (= $@loc.prestate@46 $@file^?3Cno?20file?3E)) :named ax_1166))
   (assert (! (not (= $@loc.prestate@46 $@file^?3Cno?20file?3E)) :named ax_1167))
   (assert (! (not (= $@loc.prestate@46 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1168))
   (assert (! (not (= $@loc.prestate@46 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1169))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@47)) :named ax_1170))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@47)) :named ax_1171))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@50)) :named ax_1172))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@53)) :named ax_1173))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@56)) :named ax_1174))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@59)) :named ax_1175))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@62)) :named ax_1176))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@65)) :named ax_1177))
   (assert (! (not (= $@loc.prestate@46 $@loc.owns@68)) :named ax_1178))
   (assert (! (not (= $@loc.prestate@46 $@loc.prestate@45)) :named ax_1179))
   (assert (! (not (= $@loc.prestate@46 $@loc.prestate@45)) :named ax_1180))
   (assert (! (not (= $@loc.prestate@46 $@loc.t)) :named ax_1181))
   (assert (! (not (= $@loc.prestate@46 $@loc.x)) :named ax_1182))
   (assert (! (not (= $@loc.prestate@46 $@loc.y)) :named ax_1183))
   (assert (! (not (= $@loc.prestate@46 $@tok$1^203.1)) :named ax_1184))
   (assert (! (not (= $@loc.prestate@46 $@tok$1^209.3)) :named ax_1185))
   (assert (! (not (= $@loc.prestate@46 $@tok$1^211.19)) :named ax_1186))
   (assert (! (not (= $@loc.prestate@46 $@tok$2^0.0)) :named ax_1187))
   (assert (! (not (= $@loc.prestate@48 $@file^?3Cno?20file?3E)) :named ax_1188))
   (assert (! (not (= $@loc.prestate@48 $@file^?3Cno?20file?3E)) :named ax_1189))
   (assert (! (not (= $@loc.prestate@48 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1190))
   (assert (! (not (= $@loc.prestate@48 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1191))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@47)) :named ax_1192))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@47)) :named ax_1193))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@50)) :named ax_1194))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@53)) :named ax_1195))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@56)) :named ax_1196))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@59)) :named ax_1197))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@62)) :named ax_1198))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@65)) :named ax_1199))
   (assert (! (not (= $@loc.prestate@48 $@loc.owns@68)) :named ax_1200))
   (assert (! (not (= $@loc.prestate@48 $@loc.prestate@45)) :named ax_1201))
   (assert (! (not (= $@loc.prestate@48 $@loc.prestate@45)) :named ax_1202))
   (assert (! (not (= $@loc.prestate@48 $@loc.prestate@46)) :named ax_1203))
   (assert (! (not (= $@loc.prestate@48 $@loc.prestate@46)) :named ax_1204))
   (assert (! (not (= $@loc.prestate@48 $@loc.t)) :named ax_1205))
   (assert (! (not (= $@loc.prestate@48 $@loc.x)) :named ax_1206))
   (assert (! (not (= $@loc.prestate@48 $@loc.y)) :named ax_1207))
   (assert (! (not (= $@loc.prestate@48 $@tok$1^203.1)) :named ax_1208))
   (assert (! (not (= $@loc.prestate@48 $@tok$1^209.3)) :named ax_1209))
   (assert (! (not (= $@loc.prestate@48 $@tok$1^211.19)) :named ax_1210))
   (assert (! (not (= $@loc.prestate@48 $@tok$2^0.0)) :named ax_1211))
   (assert (! (not (= $@loc.prestate@49 $@file^?3Cno?20file?3E)) :named ax_1212))
   (assert (! (not (= $@loc.prestate@49 $@file^?3Cno?20file?3E)) :named ax_1213))
   (assert (! (not (= $@loc.prestate@49 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1214))
   (assert (! (not (= $@loc.prestate@49 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1215))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@47)) :named ax_1216))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@47)) :named ax_1217))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@50)) :named ax_1218))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@50)) :named ax_1219))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@53)) :named ax_1220))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@56)) :named ax_1221))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@59)) :named ax_1222))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@62)) :named ax_1223))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@65)) :named ax_1224))
   (assert (! (not (= $@loc.prestate@49 $@loc.owns@68)) :named ax_1225))
   (assert (! (not (= $@loc.prestate@49 $@loc.prestate@45)) :named ax_1226))
   (assert (! (not (= $@loc.prestate@49 $@loc.prestate@45)) :named ax_1227))
   (assert (! (not (= $@loc.prestate@49 $@loc.prestate@46)) :named ax_1228))
   (assert (! (not (= $@loc.prestate@49 $@loc.prestate@46)) :named ax_1229))
   (assert (! (not (= $@loc.prestate@49 $@loc.prestate@48)) :named ax_1230))
   (assert (! (not (= $@loc.prestate@49 $@loc.prestate@48)) :named ax_1231))
   (assert (! (not (= $@loc.prestate@49 $@loc.t)) :named ax_1232))
   (assert (! (not (= $@loc.prestate@49 $@loc.x)) :named ax_1233))
   (assert (! (not (= $@loc.prestate@49 $@loc.y)) :named ax_1234))
   (assert (! (not (= $@loc.prestate@49 $@tok$1^203.1)) :named ax_1235))
   (assert (! (not (= $@loc.prestate@49 $@tok$1^209.3)) :named ax_1236))
   (assert (! (not (= $@loc.prestate@49 $@tok$1^211.19)) :named ax_1237))
   (assert (! (not (= $@loc.prestate@49 $@tok$1^212.53)) :named ax_1238))
   (assert (! (not (= $@loc.prestate@49 $@tok$1^213.3)) :named ax_1239))
   (assert (! (not (= $@loc.prestate@49 $@tok$2^0.0)) :named ax_1240))
   (assert (! (not (= $@loc.prestate@51 $@file^?3Cno?20file?3E)) :named ax_1241))
   (assert (! (not (= $@loc.prestate@51 $@file^?3Cno?20file?3E)) :named ax_1242))
   (assert (! (not (= $@loc.prestate@51 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1243))
   (assert (! (not (= $@loc.prestate@51 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1244))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@47)) :named ax_1245))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@47)) :named ax_1246))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@50)) :named ax_1247))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@50)) :named ax_1248))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@53)) :named ax_1249))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@56)) :named ax_1250))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@59)) :named ax_1251))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@62)) :named ax_1252))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@65)) :named ax_1253))
   (assert (! (not (= $@loc.prestate@51 $@loc.owns@68)) :named ax_1254))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@45)) :named ax_1255))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@45)) :named ax_1256))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@46)) :named ax_1257))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@46)) :named ax_1258))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@48)) :named ax_1259))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@48)) :named ax_1260))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@49)) :named ax_1261))
   (assert (! (not (= $@loc.prestate@51 $@loc.prestate@49)) :named ax_1262))
   (assert (! (not (= $@loc.prestate@51 $@loc.t)) :named ax_1263))
   (assert (! (not (= $@loc.prestate@51 $@loc.x)) :named ax_1264))
   (assert (! (not (= $@loc.prestate@51 $@loc.y)) :named ax_1265))
   (assert (! (not (= $@loc.prestate@51 $@tok$1^203.1)) :named ax_1266))
   (assert (! (not (= $@loc.prestate@51 $@tok$1^209.3)) :named ax_1267))
   (assert (! (not (= $@loc.prestate@51 $@tok$1^211.19)) :named ax_1268))
   (assert (! (not (= $@loc.prestate@51 $@tok$1^212.53)) :named ax_1269))
   (assert (! (not (= $@loc.prestate@51 $@tok$1^213.3)) :named ax_1270))
   (assert (! (not (= $@loc.prestate@51 $@tok$2^0.0)) :named ax_1271))
   (assert (! (not (= $@loc.prestate@52 $@file^?3Cno?20file?3E)) :named ax_1272))
   (assert (! (not (= $@loc.prestate@52 $@file^?3Cno?20file?3E)) :named ax_1273))
   (assert (! (not (= $@loc.prestate@52 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1274))
   (assert (! (not (= $@loc.prestate@52 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1275))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@47)) :named ax_1276))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@47)) :named ax_1277))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@50)) :named ax_1278))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@50)) :named ax_1279))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@53)) :named ax_1280))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@53)) :named ax_1281))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@56)) :named ax_1282))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@59)) :named ax_1283))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@62)) :named ax_1284))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@65)) :named ax_1285))
   (assert (! (not (= $@loc.prestate@52 $@loc.owns@68)) :named ax_1286))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@45)) :named ax_1287))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@45)) :named ax_1288))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@46)) :named ax_1289))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@46)) :named ax_1290))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@48)) :named ax_1291))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@48)) :named ax_1292))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@49)) :named ax_1293))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@49)) :named ax_1294))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@51)) :named ax_1295))
   (assert (! (not (= $@loc.prestate@52 $@loc.prestate@51)) :named ax_1296))
   (assert (! (not (= $@loc.prestate@52 $@loc.t)) :named ax_1297))
   (assert (! (not (= $@loc.prestate@52 $@loc.x)) :named ax_1298))
   (assert (! (not (= $@loc.prestate@52 $@loc.y)) :named ax_1299))
   (assert (! (not (= $@loc.prestate@52 $@tok$1^203.1)) :named ax_1300))
   (assert (! (not (= $@loc.prestate@52 $@tok$1^209.3)) :named ax_1301))
   (assert (! (not (= $@loc.prestate@52 $@tok$1^211.19)) :named ax_1302))
   (assert (! (not (= $@loc.prestate@52 $@tok$1^212.53)) :named ax_1303))
   (assert (! (not (= $@loc.prestate@52 $@tok$1^213.3)) :named ax_1304))
   (assert (! (not (= $@loc.prestate@52 $@tok$1^214.53)) :named ax_1305))
   (assert (! (not (= $@loc.prestate@52 $@tok$1^216.3)) :named ax_1306))
   (assert (! (not (= $@loc.prestate@52 $@tok$2^0.0)) :named ax_1307))
   (assert (! (not (= $@loc.prestate@54 $@file^?3Cno?20file?3E)) :named ax_1308))
   (assert (! (not (= $@loc.prestate@54 $@file^?3Cno?20file?3E)) :named ax_1309))
   (assert (! (not (= $@loc.prestate@54 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1310))
   (assert (! (not (= $@loc.prestate@54 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1311))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@47)) :named ax_1312))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@47)) :named ax_1313))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@50)) :named ax_1314))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@50)) :named ax_1315))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@53)) :named ax_1316))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@53)) :named ax_1317))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@56)) :named ax_1318))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@59)) :named ax_1319))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@62)) :named ax_1320))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@65)) :named ax_1321))
   (assert (! (not (= $@loc.prestate@54 $@loc.owns@68)) :named ax_1322))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@45)) :named ax_1323))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@45)) :named ax_1324))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@46)) :named ax_1325))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@46)) :named ax_1326))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@48)) :named ax_1327))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@48)) :named ax_1328))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@49)) :named ax_1329))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@49)) :named ax_1330))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@51)) :named ax_1331))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@51)) :named ax_1332))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@52)) :named ax_1333))
   (assert (! (not (= $@loc.prestate@54 $@loc.prestate@52)) :named ax_1334))
   (assert (! (not (= $@loc.prestate@54 $@loc.t)) :named ax_1335))
   (assert (! (not (= $@loc.prestate@54 $@loc.x)) :named ax_1336))
   (assert (! (not (= $@loc.prestate@54 $@loc.y)) :named ax_1337))
   (assert (! (not (= $@loc.prestate@54 $@tok$1^203.1)) :named ax_1338))
   (assert (! (not (= $@loc.prestate@54 $@tok$1^209.3)) :named ax_1339))
   (assert (! (not (= $@loc.prestate@54 $@tok$1^211.19)) :named ax_1340))
   (assert (! (not (= $@loc.prestate@54 $@tok$1^212.53)) :named ax_1341))
   (assert (! (not (= $@loc.prestate@54 $@tok$1^213.3)) :named ax_1342))
   (assert (! (not (= $@loc.prestate@54 $@tok$1^214.53)) :named ax_1343))
   (assert (! (not (= $@loc.prestate@54 $@tok$1^216.3)) :named ax_1344))
   (assert (! (not (= $@loc.prestate@54 $@tok$2^0.0)) :named ax_1345))
   (assert (! (not (= $@loc.prestate@57 $@file^?3Cno?20file?3E)) :named ax_1346))
   (assert (! (not (= $@loc.prestate@57 $@file^?3Cno?20file?3E)) :named ax_1347))
   (assert (! (not (= $@loc.prestate@57 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1348))
   (assert (! (not (= $@loc.prestate@57 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1349))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@47)) :named ax_1350))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@47)) :named ax_1351))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@50)) :named ax_1352))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@50)) :named ax_1353))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@53)) :named ax_1354))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@53)) :named ax_1355))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@56)) :named ax_1356))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@59)) :named ax_1357))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@62)) :named ax_1358))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@65)) :named ax_1359))
   (assert (! (not (= $@loc.prestate@57 $@loc.owns@68)) :named ax_1360))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@45)) :named ax_1361))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@45)) :named ax_1362))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@46)) :named ax_1363))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@46)) :named ax_1364))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@48)) :named ax_1365))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@48)) :named ax_1366))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@49)) :named ax_1367))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@49)) :named ax_1368))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@51)) :named ax_1369))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@51)) :named ax_1370))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@52)) :named ax_1371))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@52)) :named ax_1372))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@54)) :named ax_1373))
   (assert (! (not (= $@loc.prestate@57 $@loc.prestate@54)) :named ax_1374))
   (assert (! (not (= $@loc.prestate@57 $@loc.t)) :named ax_1375))
   (assert (! (not (= $@loc.prestate@57 $@loc.x)) :named ax_1376))
   (assert (! (not (= $@loc.prestate@57 $@loc.y)) :named ax_1377))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^203.1)) :named ax_1378))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^209.3)) :named ax_1379))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^211.19)) :named ax_1380))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^212.53)) :named ax_1381))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^213.3)) :named ax_1382))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^214.53)) :named ax_1383))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^216.3)) :named ax_1384))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^218.34)) :named ax_1385))
   (assert (! (not (= $@loc.prestate@57 $@tok$1^218.43)) :named ax_1386))
   (assert (! (not (= $@loc.prestate@57 $@tok$2^0.0)) :named ax_1387))
   (assert (! (not (= $@loc.prestate@58 $@file^?3Cno?20file?3E)) :named ax_1388))
   (assert (! (not (= $@loc.prestate@58 $@file^?3Cno?20file?3E)) :named ax_1389))
   (assert (! (not (= $@loc.prestate@58 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1390))
   (assert (! (not (= $@loc.prestate@58 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1391))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@47)) :named ax_1392))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@47)) :named ax_1393))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@50)) :named ax_1394))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@50)) :named ax_1395))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@53)) :named ax_1396))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@53)) :named ax_1397))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@56)) :named ax_1398))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@56)) :named ax_1399))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@59)) :named ax_1400))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@59)) :named ax_1401))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@62)) :named ax_1402))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@65)) :named ax_1403))
   (assert (! (not (= $@loc.prestate@58 $@loc.owns@68)) :named ax_1404))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@45)) :named ax_1405))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@45)) :named ax_1406))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@46)) :named ax_1407))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@46)) :named ax_1408))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@48)) :named ax_1409))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@48)) :named ax_1410))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@49)) :named ax_1411))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@49)) :named ax_1412))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@51)) :named ax_1413))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@51)) :named ax_1414))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@52)) :named ax_1415))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@52)) :named ax_1416))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@54)) :named ax_1417))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@54)) :named ax_1418))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@57)) :named ax_1419))
   (assert (! (not (= $@loc.prestate@58 $@loc.prestate@57)) :named ax_1420))
   (assert (! (not (= $@loc.prestate@58 $@loc.staticWrapState@55)) :named ax_1421))
   (assert (! (not (= $@loc.prestate@58 $@loc.t)) :named ax_1422))
   (assert (! (not (= $@loc.prestate@58 $@loc.x)) :named ax_1423))
   (assert (! (not (= $@loc.prestate@58 $@loc.y)) :named ax_1424))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^203.1)) :named ax_1425))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^209.3)) :named ax_1426))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^211.19)) :named ax_1427))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^212.53)) :named ax_1428))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^213.3)) :named ax_1429))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^214.53)) :named ax_1430))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^216.3)) :named ax_1431))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^218.34)) :named ax_1432))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^218.43)) :named ax_1433))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^219.3)) :named ax_1434))
   (assert (! (not (= $@loc.prestate@58 $@tok$1^221.5)) :named ax_1435))
   (assert (! (not (= $@loc.prestate@58 $@tok$2^0.0)) :named ax_1436))
   (assert (! (not (= $@loc.prestate@60 $@file^?3Cno?20file?3E)) :named ax_1437))
   (assert (! (not (= $@loc.prestate@60 $@file^?3Cno?20file?3E)) :named ax_1438))
   (assert (! (not (= $@loc.prestate@60 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1439))
   (assert (! (not (= $@loc.prestate@60 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1440))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@47)) :named ax_1441))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@47)) :named ax_1442))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@50)) :named ax_1443))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@50)) :named ax_1444))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@53)) :named ax_1445))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@53)) :named ax_1446))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@56)) :named ax_1447))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@56)) :named ax_1448))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@59)) :named ax_1449))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@59)) :named ax_1450))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@62)) :named ax_1451))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@65)) :named ax_1452))
   (assert (! (not (= $@loc.prestate@60 $@loc.owns@68)) :named ax_1453))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@45)) :named ax_1454))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@45)) :named ax_1455))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@46)) :named ax_1456))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@46)) :named ax_1457))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@48)) :named ax_1458))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@48)) :named ax_1459))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@49)) :named ax_1460))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@49)) :named ax_1461))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@51)) :named ax_1462))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@51)) :named ax_1463))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@52)) :named ax_1464))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@52)) :named ax_1465))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@54)) :named ax_1466))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@54)) :named ax_1467))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@57)) :named ax_1468))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@57)) :named ax_1469))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@58)) :named ax_1470))
   (assert (! (not (= $@loc.prestate@60 $@loc.prestate@58)) :named ax_1471))
   (assert (! (not (= $@loc.prestate@60 $@loc.staticWrapState@55)) :named ax_1472))
   (assert (! (not (= $@loc.prestate@60 $@loc.t)) :named ax_1473))
   (assert (! (not (= $@loc.prestate@60 $@loc.x)) :named ax_1474))
   (assert (! (not (= $@loc.prestate@60 $@loc.y)) :named ax_1475))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^203.1)) :named ax_1476))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^209.3)) :named ax_1477))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^211.19)) :named ax_1478))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^212.53)) :named ax_1479))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^213.3)) :named ax_1480))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^214.53)) :named ax_1481))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^216.3)) :named ax_1482))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^218.34)) :named ax_1483))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^218.43)) :named ax_1484))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^219.3)) :named ax_1485))
   (assert (! (not (= $@loc.prestate@60 $@tok$1^221.5)) :named ax_1486))
   (assert (! (not (= $@loc.prestate@60 $@tok$2^0.0)) :named ax_1487))
   (assert (! (not (= $@loc.prestate@63 $@file^?3Cno?20file?3E)) :named ax_1488))
   (assert (! (not (= $@loc.prestate@63 $@file^?3Cno?20file?3E)) :named ax_1489))
   (assert (! (not (= $@loc.prestate@63 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1490))
   (assert (! (not (= $@loc.prestate@63 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1491))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@47)) :named ax_1492))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@47)) :named ax_1493))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@50)) :named ax_1494))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@50)) :named ax_1495))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@53)) :named ax_1496))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@53)) :named ax_1497))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@56)) :named ax_1498))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@56)) :named ax_1499))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@59)) :named ax_1500))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@59)) :named ax_1501))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@62)) :named ax_1502))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@65)) :named ax_1503))
   (assert (! (not (= $@loc.prestate@63 $@loc.owns@68)) :named ax_1504))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@45)) :named ax_1505))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@45)) :named ax_1506))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@46)) :named ax_1507))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@46)) :named ax_1508))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@48)) :named ax_1509))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@48)) :named ax_1510))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@49)) :named ax_1511))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@49)) :named ax_1512))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@51)) :named ax_1513))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@51)) :named ax_1514))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@52)) :named ax_1515))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@52)) :named ax_1516))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@54)) :named ax_1517))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@54)) :named ax_1518))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@57)) :named ax_1519))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@57)) :named ax_1520))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@58)) :named ax_1521))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@58)) :named ax_1522))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@60)) :named ax_1523))
   (assert (! (not (= $@loc.prestate@63 $@loc.prestate@60)) :named ax_1524))
   (assert (! (not (= $@loc.prestate@63 $@loc.staticWrapState@55)) :named ax_1525))
   (assert (! (not (= $@loc.prestate@63 $@loc.t)) :named ax_1526))
   (assert (! (not (= $@loc.prestate@63 $@loc.x)) :named ax_1527))
   (assert (! (not (= $@loc.prestate@63 $@loc.y)) :named ax_1528))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^203.1)) :named ax_1529))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^209.3)) :named ax_1530))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^211.19)) :named ax_1531))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^212.53)) :named ax_1532))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^213.3)) :named ax_1533))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^214.53)) :named ax_1534))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^216.3)) :named ax_1535))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^218.34)) :named ax_1536))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^218.43)) :named ax_1537))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^219.3)) :named ax_1538))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^221.5)) :named ax_1539))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^224.32)) :named ax_1540))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^226.9)) :named ax_1541))
   (assert (! (not (= $@loc.prestate@63 $@tok$1^228.9)) :named ax_1542))
   (assert (! (not (= $@loc.prestate@63 $@tok$2^0.0)) :named ax_1543))
   (assert (! (not (= $@loc.prestate@66 $@file^?3Cno?20file?3E)) :named ax_1544))
   (assert (! (not (= $@loc.prestate@66 $@file^?3Cno?20file?3E)) :named ax_1545))
   (assert (! (not (= $@loc.prestate@66 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1546))
   (assert (! (not (= $@loc.prestate@66 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1547))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@47)) :named ax_1548))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@47)) :named ax_1549))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@50)) :named ax_1550))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@50)) :named ax_1551))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@53)) :named ax_1552))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@53)) :named ax_1553))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@56)) :named ax_1554))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@56)) :named ax_1555))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@59)) :named ax_1556))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@59)) :named ax_1557))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@62)) :named ax_1558))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@62)) :named ax_1559))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@65)) :named ax_1560))
   (assert (! (not (= $@loc.prestate@66 $@loc.owns@68)) :named ax_1561))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@45)) :named ax_1562))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@45)) :named ax_1563))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@46)) :named ax_1564))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@46)) :named ax_1565))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@48)) :named ax_1566))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@48)) :named ax_1567))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@49)) :named ax_1568))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@49)) :named ax_1569))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@51)) :named ax_1570))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@51)) :named ax_1571))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@52)) :named ax_1572))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@52)) :named ax_1573))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@54)) :named ax_1574))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@54)) :named ax_1575))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@57)) :named ax_1576))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@57)) :named ax_1577))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@58)) :named ax_1578))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@58)) :named ax_1579))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@60)) :named ax_1580))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@60)) :named ax_1581))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@63)) :named ax_1582))
   (assert (! (not (= $@loc.prestate@66 $@loc.prestate@63)) :named ax_1583))
   (assert (! (not (= $@loc.prestate@66 $@loc.staticWrapState@55)) :named ax_1584))
   (assert (! (not (= $@loc.prestate@66 $@loc.staticWrapState@61)) :named ax_1585))
   (assert (! (not (= $@loc.prestate@66 $@loc.t)) :named ax_1586))
   (assert (! (not (= $@loc.prestate@66 $@loc.x)) :named ax_1587))
   (assert (! (not (= $@loc.prestate@66 $@loc.y)) :named ax_1588))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^203.1)) :named ax_1589))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^209.3)) :named ax_1590))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^211.19)) :named ax_1591))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^212.53)) :named ax_1592))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^213.3)) :named ax_1593))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^214.53)) :named ax_1594))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^216.3)) :named ax_1595))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^218.34)) :named ax_1596))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^218.43)) :named ax_1597))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^219.3)) :named ax_1598))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^221.5)) :named ax_1599))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^224.32)) :named ax_1600))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^226.9)) :named ax_1601))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^228.9)) :named ax_1602))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^231.3)) :named ax_1603))
   (assert (! (not (= $@loc.prestate@66 $@tok$1^232.3)) :named ax_1604))
   (assert (! (not (= $@loc.prestate@66 $@tok$2^0.0)) :named ax_1605))
   (assert (! (not (= $@loc.prestate@69 $@file^?3Cno?20file?3E)) :named ax_1606))
   (assert (! (not (= $@loc.prestate@69 $@file^?3Cno?20file?3E)) :named ax_1607))
   (assert (! (not (= $@loc.prestate@69 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1608))
   (assert (! (not (= $@loc.prestate@69 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1609))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@47)) :named ax_1610))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@47)) :named ax_1611))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@50)) :named ax_1612))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@50)) :named ax_1613))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@53)) :named ax_1614))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@53)) :named ax_1615))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@56)) :named ax_1616))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@56)) :named ax_1617))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@59)) :named ax_1618))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@59)) :named ax_1619))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@62)) :named ax_1620))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@62)) :named ax_1621))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@65)) :named ax_1622))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@65)) :named ax_1623))
   (assert (! (not (= $@loc.prestate@69 $@loc.owns@68)) :named ax_1624))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@45)) :named ax_1625))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@45)) :named ax_1626))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@46)) :named ax_1627))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@46)) :named ax_1628))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@48)) :named ax_1629))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@48)) :named ax_1630))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@49)) :named ax_1631))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@49)) :named ax_1632))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@51)) :named ax_1633))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@51)) :named ax_1634))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@52)) :named ax_1635))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@52)) :named ax_1636))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@54)) :named ax_1637))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@54)) :named ax_1638))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@57)) :named ax_1639))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@57)) :named ax_1640))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@58)) :named ax_1641))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@58)) :named ax_1642))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@60)) :named ax_1643))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@60)) :named ax_1644))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@63)) :named ax_1645))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@63)) :named ax_1646))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@66)) :named ax_1647))
   (assert (! (not (= $@loc.prestate@69 $@loc.prestate@66)) :named ax_1648))
   (assert (! (not (= $@loc.prestate@69 $@loc.staticWrapState@55)) :named ax_1649))
   (assert (! (not (= $@loc.prestate@69 $@loc.staticWrapState@61)) :named ax_1650))
   (assert (! (not (= $@loc.prestate@69 $@loc.staticWrapState@64)) :named ax_1651))
   (assert (! (not (= $@loc.prestate@69 $@loc.t)) :named ax_1652))
   (assert (! (not (= $@loc.prestate@69 $@loc.x)) :named ax_1653))
   (assert (! (not (= $@loc.prestate@69 $@loc.y)) :named ax_1654))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^203.1)) :named ax_1655))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^209.3)) :named ax_1656))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^211.19)) :named ax_1657))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^212.53)) :named ax_1658))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^213.3)) :named ax_1659))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^214.53)) :named ax_1660))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^216.3)) :named ax_1661))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^218.34)) :named ax_1662))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^218.43)) :named ax_1663))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^219.3)) :named ax_1664))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^221.5)) :named ax_1665))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^224.32)) :named ax_1666))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^226.9)) :named ax_1667))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^228.9)) :named ax_1668))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^231.3)) :named ax_1669))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^232.3)) :named ax_1670))
   (assert (! (not (= $@loc.prestate@69 $@tok$1^233.19)) :named ax_1671))
   (assert (! (not (= $@loc.prestate@69 $@tok$2^0.0)) :named ax_1672))
   (assert (! (not (= $@loc.prestate@70 $@file^?3Cno?20file?3E)) :named ax_1673))
   (assert (! (not (= $@loc.prestate@70 $@file^?3Cno?20file?3E)) :named ax_1674))
   (assert (! (not (= $@loc.prestate@70 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1675))
   (assert (! (not (= $@loc.prestate@70 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1676))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@47)) :named ax_1677))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@47)) :named ax_1678))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@50)) :named ax_1679))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@50)) :named ax_1680))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@53)) :named ax_1681))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@53)) :named ax_1682))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@56)) :named ax_1683))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@56)) :named ax_1684))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@59)) :named ax_1685))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@59)) :named ax_1686))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@62)) :named ax_1687))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@62)) :named ax_1688))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@65)) :named ax_1689))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@65)) :named ax_1690))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@68)) :named ax_1691))
   (assert (! (not (= $@loc.prestate@70 $@loc.owns@68)) :named ax_1692))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@45)) :named ax_1693))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@45)) :named ax_1694))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@46)) :named ax_1695))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@46)) :named ax_1696))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@48)) :named ax_1697))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@48)) :named ax_1698))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@49)) :named ax_1699))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@49)) :named ax_1700))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@51)) :named ax_1701))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@51)) :named ax_1702))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@52)) :named ax_1703))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@52)) :named ax_1704))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@54)) :named ax_1705))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@54)) :named ax_1706))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@57)) :named ax_1707))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@57)) :named ax_1708))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@58)) :named ax_1709))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@58)) :named ax_1710))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@60)) :named ax_1711))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@60)) :named ax_1712))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@63)) :named ax_1713))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@63)) :named ax_1714))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@66)) :named ax_1715))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@66)) :named ax_1716))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@69)) :named ax_1717))
   (assert (! (not (= $@loc.prestate@70 $@loc.prestate@69)) :named ax_1718))
   (assert (! (not (= $@loc.prestate@70 $@loc.res_lambda@8@21)) :named ax_1719))
   (assert (! (not (= $@loc.prestate@70 $@loc.staticWrapState@55)) :named ax_1720))
   (assert (! (not (= $@loc.prestate@70 $@loc.staticWrapState@61)) :named ax_1721))
   (assert (! (not (= $@loc.prestate@70 $@loc.staticWrapState@64)) :named ax_1722))
   (assert (! (not (= $@loc.prestate@70 $@loc.staticWrapState@67)) :named ax_1723))
   (assert (! (not (= $@loc.prestate@70 $@loc.t)) :named ax_1724))
   (assert (! (not (= $@loc.prestate@70 $@loc.x)) :named ax_1725))
   (assert (! (not (= $@loc.prestate@70 $@loc.y)) :named ax_1726))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^203.1)) :named ax_1727))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^209.3)) :named ax_1728))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^211.19)) :named ax_1729))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^212.53)) :named ax_1730))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^213.3)) :named ax_1731))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^214.53)) :named ax_1732))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^216.3)) :named ax_1733))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^218.34)) :named ax_1734))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^218.43)) :named ax_1735))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^219.3)) :named ax_1736))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^221.5)) :named ax_1737))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^224.32)) :named ax_1738))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^226.9)) :named ax_1739))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^228.9)) :named ax_1740))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^231.3)) :named ax_1741))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^232.3)) :named ax_1742))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^233.19)) :named ax_1743))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^233.43)) :named ax_1744))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^239.5)) :named ax_1745))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^240.15)) :named ax_1746))
   (assert (! (not (= $@loc.prestate@70 $@tok$1^240.5)) :named ax_1747))
   (assert (! (not (= $@loc.prestate@70 $@tok$2^0.0)) :named ax_1748))
   (assert (! (not (= $@loc.res_lambda@8@21 $@file^?3Cno?20file?3E)) :named ax_1749))
   (assert (! (not (= $@loc.res_lambda@8@21 $@file^?3Cno?20file?3E)) :named ax_1750))
   (assert (! (not (= $@loc.res_lambda@8@21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1751))
   (assert (! (not (= $@loc.res_lambda@8@21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1752))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@47)) :named ax_1753))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@47)) :named ax_1754))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@50)) :named ax_1755))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@50)) :named ax_1756))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@53)) :named ax_1757))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@53)) :named ax_1758))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@56)) :named ax_1759))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@56)) :named ax_1760))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@59)) :named ax_1761))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@59)) :named ax_1762))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@62)) :named ax_1763))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@62)) :named ax_1764))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@65)) :named ax_1765))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@65)) :named ax_1766))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@68)) :named ax_1767))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.owns@68)) :named ax_1768))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@45)) :named ax_1769))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@45)) :named ax_1770))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@46)) :named ax_1771))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@46)) :named ax_1772))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@48)) :named ax_1773))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@48)) :named ax_1774))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@49)) :named ax_1775))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@49)) :named ax_1776))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@51)) :named ax_1777))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@51)) :named ax_1778))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@52)) :named ax_1779))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@52)) :named ax_1780))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@54)) :named ax_1781))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@54)) :named ax_1782))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@57)) :named ax_1783))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@57)) :named ax_1784))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@58)) :named ax_1785))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@58)) :named ax_1786))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@60)) :named ax_1787))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@60)) :named ax_1788))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@63)) :named ax_1789))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@63)) :named ax_1790))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@66)) :named ax_1791))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@66)) :named ax_1792))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@69)) :named ax_1793))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@69)) :named ax_1794))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.prestate@70)) :named ax_1795))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.staticWrapState@55)) :named ax_1796))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.staticWrapState@61)) :named ax_1797))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.staticWrapState@64)) :named ax_1798))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.staticWrapState@67)) :named ax_1799))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.t)) :named ax_1800))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.x)) :named ax_1801))
   (assert (! (not (= $@loc.res_lambda@8@21 $@loc.y)) :named ax_1802))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^203.1)) :named ax_1803))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^209.3)) :named ax_1804))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^211.19)) :named ax_1805))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^212.53)) :named ax_1806))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^213.3)) :named ax_1807))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^214.53)) :named ax_1808))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^216.3)) :named ax_1809))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^218.34)) :named ax_1810))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^218.43)) :named ax_1811))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^219.3)) :named ax_1812))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^221.5)) :named ax_1813))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^224.32)) :named ax_1814))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^226.9)) :named ax_1815))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^228.9)) :named ax_1816))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^231.3)) :named ax_1817))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^232.3)) :named ax_1818))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^233.19)) :named ax_1819))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^233.43)) :named ax_1820))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^239.5)) :named ax_1821))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$1^240.15)) :named ax_1822))
   (assert (! (not (= $@loc.res_lambda@8@21 $@tok$2^0.0)) :named ax_1823))
   (assert (! (not (= $@loc.staticWrapState@55 $@file^?3Cno?20file?3E)) :named ax_1824))
   (assert (! (not (= $@loc.staticWrapState@55 $@file^?3Cno?20file?3E)) :named ax_1825))
   (assert (! (not (= $@loc.staticWrapState@55 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1826))
   (assert (! (not (= $@loc.staticWrapState@55 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1827))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@47)) :named ax_1828))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@47)) :named ax_1829))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@50)) :named ax_1830))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@50)) :named ax_1831))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@53)) :named ax_1832))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@53)) :named ax_1833))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@56)) :named ax_1834))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@59)) :named ax_1835))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@62)) :named ax_1836))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@65)) :named ax_1837))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.owns@68)) :named ax_1838))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@45)) :named ax_1839))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@45)) :named ax_1840))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@46)) :named ax_1841))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@46)) :named ax_1842))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@48)) :named ax_1843))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@48)) :named ax_1844))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@49)) :named ax_1845))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@49)) :named ax_1846))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@51)) :named ax_1847))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@51)) :named ax_1848))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@52)) :named ax_1849))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@52)) :named ax_1850))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@54)) :named ax_1851))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@54)) :named ax_1852))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@57)) :named ax_1853))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@57)) :named ax_1854))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@58)) :named ax_1855))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@60)) :named ax_1856))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@63)) :named ax_1857))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@66)) :named ax_1858))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@69)) :named ax_1859))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.prestate@70)) :named ax_1860))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.res_lambda@8@21)) :named ax_1861))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.t)) :named ax_1862))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.x)) :named ax_1863))
   (assert (! (not (= $@loc.staticWrapState@55 $@loc.y)) :named ax_1864))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^203.1)) :named ax_1865))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^209.3)) :named ax_1866))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^211.19)) :named ax_1867))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^212.53)) :named ax_1868))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^213.3)) :named ax_1869))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^214.53)) :named ax_1870))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^216.3)) :named ax_1871))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^218.34)) :named ax_1872))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$1^218.43)) :named ax_1873))
   (assert (! (not (= $@loc.staticWrapState@55 $@tok$2^0.0)) :named ax_1874))
   (assert (! (not (= $@loc.staticWrapState@61 $@file^?3Cno?20file?3E)) :named ax_1875))
   (assert (! (not (= $@loc.staticWrapState@61 $@file^?3Cno?20file?3E)) :named ax_1876))
   (assert (! (not (= $@loc.staticWrapState@61 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1877))
   (assert (! (not (= $@loc.staticWrapState@61 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1878))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@47)) :named ax_1879))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@47)) :named ax_1880))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@50)) :named ax_1881))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@50)) :named ax_1882))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@53)) :named ax_1883))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@53)) :named ax_1884))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@56)) :named ax_1885))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@56)) :named ax_1886))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@59)) :named ax_1887))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@59)) :named ax_1888))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@62)) :named ax_1889))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@65)) :named ax_1890))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.owns@68)) :named ax_1891))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@45)) :named ax_1892))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@45)) :named ax_1893))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@46)) :named ax_1894))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@46)) :named ax_1895))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@48)) :named ax_1896))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@48)) :named ax_1897))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@49)) :named ax_1898))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@49)) :named ax_1899))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@51)) :named ax_1900))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@51)) :named ax_1901))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@52)) :named ax_1902))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@52)) :named ax_1903))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@54)) :named ax_1904))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@54)) :named ax_1905))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@57)) :named ax_1906))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@57)) :named ax_1907))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@58)) :named ax_1908))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@58)) :named ax_1909))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@60)) :named ax_1910))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@60)) :named ax_1911))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@63)) :named ax_1912))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@63)) :named ax_1913))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@66)) :named ax_1914))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@69)) :named ax_1915))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.prestate@70)) :named ax_1916))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.res_lambda@8@21)) :named ax_1917))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.staticWrapState@55)) :named ax_1918))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.staticWrapState@55)) :named ax_1919))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.t)) :named ax_1920))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.x)) :named ax_1921))
   (assert (! (not (= $@loc.staticWrapState@61 $@loc.y)) :named ax_1922))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^203.1)) :named ax_1923))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^209.3)) :named ax_1924))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^211.19)) :named ax_1925))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^212.53)) :named ax_1926))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^213.3)) :named ax_1927))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^214.53)) :named ax_1928))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^216.3)) :named ax_1929))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^218.34)) :named ax_1930))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^218.43)) :named ax_1931))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^219.3)) :named ax_1932))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^221.5)) :named ax_1933))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^224.32)) :named ax_1934))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^226.9)) :named ax_1935))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$1^228.9)) :named ax_1936))
   (assert (! (not (= $@loc.staticWrapState@61 $@tok$2^0.0)) :named ax_1937))
   (assert (! (not (= $@loc.staticWrapState@64 $@file^?3Cno?20file?3E)) :named ax_1938))
   (assert (! (not (= $@loc.staticWrapState@64 $@file^?3Cno?20file?3E)) :named ax_1939))
   (assert (! (not (= $@loc.staticWrapState@64 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1940))
   (assert (! (not (= $@loc.staticWrapState@64 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1941))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@47)) :named ax_1942))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@47)) :named ax_1943))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@50)) :named ax_1944))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@50)) :named ax_1945))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@53)) :named ax_1946))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@53)) :named ax_1947))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@56)) :named ax_1948))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@56)) :named ax_1949))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@59)) :named ax_1950))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@59)) :named ax_1951))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@62)) :named ax_1952))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@62)) :named ax_1953))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@65)) :named ax_1954))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.owns@68)) :named ax_1955))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@45)) :named ax_1956))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@45)) :named ax_1957))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@46)) :named ax_1958))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@46)) :named ax_1959))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@48)) :named ax_1960))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@48)) :named ax_1961))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@49)) :named ax_1962))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@49)) :named ax_1963))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@51)) :named ax_1964))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@51)) :named ax_1965))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@52)) :named ax_1966))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@52)) :named ax_1967))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@54)) :named ax_1968))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@54)) :named ax_1969))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@57)) :named ax_1970))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@57)) :named ax_1971))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@58)) :named ax_1972))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@58)) :named ax_1973))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@60)) :named ax_1974))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@60)) :named ax_1975))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@63)) :named ax_1976))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@63)) :named ax_1977))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@66)) :named ax_1978))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@66)) :named ax_1979))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@69)) :named ax_1980))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.prestate@70)) :named ax_1981))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.res_lambda@8@21)) :named ax_1982))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.staticWrapState@55)) :named ax_1983))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.staticWrapState@55)) :named ax_1984))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.staticWrapState@61)) :named ax_1985))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.staticWrapState@61)) :named ax_1986))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.t)) :named ax_1987))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.x)) :named ax_1988))
   (assert (! (not (= $@loc.staticWrapState@64 $@loc.y)) :named ax_1989))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^203.1)) :named ax_1990))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^209.3)) :named ax_1991))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^211.19)) :named ax_1992))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^212.53)) :named ax_1993))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^213.3)) :named ax_1994))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^214.53)) :named ax_1995))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^216.3)) :named ax_1996))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^218.34)) :named ax_1997))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^218.43)) :named ax_1998))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^219.3)) :named ax_1999))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^221.5)) :named ax_2000))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^224.32)) :named ax_2001))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^226.9)) :named ax_2002))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^228.9)) :named ax_2003))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^231.3)) :named ax_2004))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$1^232.3)) :named ax_2005))
   (assert (! (not (= $@loc.staticWrapState@64 $@tok$2^0.0)) :named ax_2006))
   (assert (! (not (= $@loc.staticWrapState@67 $@file^?3Cno?20file?3E)) :named ax_2007))
   (assert (! (not (= $@loc.staticWrapState@67 $@file^?3Cno?20file?3E)) :named ax_2008))
   (assert (! (not (= $@loc.staticWrapState@67 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2009))
   (assert (! (not (= $@loc.staticWrapState@67 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2010))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@47)) :named ax_2011))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@47)) :named ax_2012))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@50)) :named ax_2013))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@50)) :named ax_2014))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@53)) :named ax_2015))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@53)) :named ax_2016))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@56)) :named ax_2017))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@56)) :named ax_2018))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@59)) :named ax_2019))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@59)) :named ax_2020))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@62)) :named ax_2021))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@62)) :named ax_2022))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@65)) :named ax_2023))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@65)) :named ax_2024))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.owns@68)) :named ax_2025))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@45)) :named ax_2026))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@45)) :named ax_2027))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@46)) :named ax_2028))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@46)) :named ax_2029))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@48)) :named ax_2030))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@48)) :named ax_2031))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@49)) :named ax_2032))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@49)) :named ax_2033))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@51)) :named ax_2034))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@51)) :named ax_2035))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@52)) :named ax_2036))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@52)) :named ax_2037))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@54)) :named ax_2038))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@54)) :named ax_2039))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@57)) :named ax_2040))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@57)) :named ax_2041))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@58)) :named ax_2042))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@58)) :named ax_2043))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@60)) :named ax_2044))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@60)) :named ax_2045))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@63)) :named ax_2046))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@63)) :named ax_2047))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@66)) :named ax_2048))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@66)) :named ax_2049))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@69)) :named ax_2050))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@69)) :named ax_2051))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.prestate@70)) :named ax_2052))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.res_lambda@8@21)) :named ax_2053))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.staticWrapState@55)) :named ax_2054))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.staticWrapState@55)) :named ax_2055))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.staticWrapState@61)) :named ax_2056))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.staticWrapState@61)) :named ax_2057))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.staticWrapState@64)) :named ax_2058))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.staticWrapState@64)) :named ax_2059))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.t)) :named ax_2060))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.x)) :named ax_2061))
   (assert (! (not (= $@loc.staticWrapState@67 $@loc.y)) :named ax_2062))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^203.1)) :named ax_2063))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^209.3)) :named ax_2064))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^211.19)) :named ax_2065))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^212.53)) :named ax_2066))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^213.3)) :named ax_2067))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^214.53)) :named ax_2068))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^216.3)) :named ax_2069))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^218.34)) :named ax_2070))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^218.43)) :named ax_2071))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^219.3)) :named ax_2072))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^221.5)) :named ax_2073))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^224.32)) :named ax_2074))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^226.9)) :named ax_2075))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^228.9)) :named ax_2076))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^231.3)) :named ax_2077))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^232.3)) :named ax_2078))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$1^233.19)) :named ax_2079))
   (assert (! (not (= $@loc.staticWrapState@67 $@tok$2^0.0)) :named ax_2080))
   (assert (! (not (= $@loc.t $@file^?3Cno?20file?3E)) :named ax_2081))
   (assert (! (not (= $@loc.t $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2082))
   (assert (! (not (= $@loc.t $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2083))
   (assert (! (not (= $@loc.t $@loc.owns@47)) :named ax_2084))
   (assert (! (not (= $@loc.t $@loc.owns@50)) :named ax_2085))
   (assert (! (not (= $@loc.t $@loc.owns@53)) :named ax_2086))
   (assert (! (not (= $@loc.t $@loc.owns@56)) :named ax_2087))
   (assert (! (not (= $@loc.t $@loc.owns@59)) :named ax_2088))
   (assert (! (not (= $@loc.t $@loc.owns@62)) :named ax_2089))
   (assert (! (not (= $@loc.t $@loc.owns@65)) :named ax_2090))
   (assert (! (not (= $@loc.t $@loc.owns@68)) :named ax_2091))
   (assert (! (not (= $@loc.t $@loc.prestate@45)) :named ax_2092))
   (assert (! (not (= $@loc.t $@loc.prestate@46)) :named ax_2093))
   (assert (! (not (= $@loc.t $@loc.prestate@48)) :named ax_2094))
   (assert (! (not (= $@loc.t $@loc.prestate@49)) :named ax_2095))
   (assert (! (not (= $@loc.t $@loc.prestate@51)) :named ax_2096))
   (assert (! (not (= $@loc.t $@loc.prestate@52)) :named ax_2097))
   (assert (! (not (= $@loc.t $@loc.prestate@54)) :named ax_2098))
   (assert (! (not (= $@loc.t $@loc.prestate@57)) :named ax_2099))
   (assert (! (not (= $@loc.t $@loc.prestate@58)) :named ax_2100))
   (assert (! (not (= $@loc.t $@loc.prestate@60)) :named ax_2101))
   (assert (! (not (= $@loc.t $@loc.prestate@63)) :named ax_2102))
   (assert (! (not (= $@loc.t $@loc.prestate@66)) :named ax_2103))
   (assert (! (not (= $@loc.t $@loc.prestate@69)) :named ax_2104))
   (assert (! (not (= $@loc.t $@loc.prestate@70)) :named ax_2105))
   (assert (! (not (= $@loc.t $@loc.res_lambda@8@21)) :named ax_2106))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@55)) :named ax_2107))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@61)) :named ax_2108))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@64)) :named ax_2109))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@67)) :named ax_2110))
   (assert (! (not (= $@loc.x $@file^?3Cno?20file?3E)) :named ax_2111))
   (assert (! (not (= $@loc.x $@file^?3Cno?20file?3E)) :named ax_2112))
   (assert (! (not (= $@loc.x $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2113))
   (assert (! (not (= $@loc.x $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2114))
   (assert (! (not (= $@loc.x $@loc.owns@47)) :named ax_2115))
   (assert (! (not (= $@loc.x $@loc.owns@50)) :named ax_2116))
   (assert (! (not (= $@loc.x $@loc.owns@53)) :named ax_2117))
   (assert (! (not (= $@loc.x $@loc.owns@56)) :named ax_2118))
   (assert (! (not (= $@loc.x $@loc.owns@59)) :named ax_2119))
   (assert (! (not (= $@loc.x $@loc.owns@62)) :named ax_2120))
   (assert (! (not (= $@loc.x $@loc.owns@65)) :named ax_2121))
   (assert (! (not (= $@loc.x $@loc.owns@68)) :named ax_2122))
   (assert (! (not (= $@loc.x $@loc.prestate@45)) :named ax_2123))
   (assert (! (not (= $@loc.x $@loc.prestate@46)) :named ax_2124))
   (assert (! (not (= $@loc.x $@loc.prestate@48)) :named ax_2125))
   (assert (! (not (= $@loc.x $@loc.prestate@49)) :named ax_2126))
   (assert (! (not (= $@loc.x $@loc.prestate@51)) :named ax_2127))
   (assert (! (not (= $@loc.x $@loc.prestate@52)) :named ax_2128))
   (assert (! (not (= $@loc.x $@loc.prestate@54)) :named ax_2129))
   (assert (! (not (= $@loc.x $@loc.prestate@57)) :named ax_2130))
   (assert (! (not (= $@loc.x $@loc.prestate@58)) :named ax_2131))
   (assert (! (not (= $@loc.x $@loc.prestate@60)) :named ax_2132))
   (assert (! (not (= $@loc.x $@loc.prestate@63)) :named ax_2133))
   (assert (! (not (= $@loc.x $@loc.prestate@66)) :named ax_2134))
   (assert (! (not (= $@loc.x $@loc.prestate@69)) :named ax_2135))
   (assert (! (not (= $@loc.x $@loc.prestate@70)) :named ax_2136))
   (assert (! (not (= $@loc.x $@loc.res_lambda@8@21)) :named ax_2137))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@55)) :named ax_2138))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@61)) :named ax_2139))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@64)) :named ax_2140))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@67)) :named ax_2141))
   (assert (! (not (= $@loc.x $@loc.t)) :named ax_2142))
   (assert (! (not (= $@loc.x $@loc.t)) :named ax_2143))
   (assert (! (not (= $@loc.x $@tok$2^0.0)) :named ax_2144))
   (assert (! (not (= $@loc.y $@file^?3Cno?20file?3E)) :named ax_2145))
   (assert (! (not (= $@loc.y $@file^?3Cno?20file?3E)) :named ax_2146))
   (assert (! (not (= $@loc.y $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2147))
   (assert (! (not (= $@loc.y $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2148))
   (assert (! (not (= $@loc.y $@loc.owns@47)) :named ax_2149))
   (assert (! (not (= $@loc.y $@loc.owns@50)) :named ax_2150))
   (assert (! (not (= $@loc.y $@loc.owns@53)) :named ax_2151))
   (assert (! (not (= $@loc.y $@loc.owns@56)) :named ax_2152))
   (assert (! (not (= $@loc.y $@loc.owns@59)) :named ax_2153))
   (assert (! (not (= $@loc.y $@loc.owns@62)) :named ax_2154))
   (assert (! (not (= $@loc.y $@loc.owns@65)) :named ax_2155))
   (assert (! (not (= $@loc.y $@loc.owns@68)) :named ax_2156))
   (assert (! (not (= $@loc.y $@loc.prestate@45)) :named ax_2157))
   (assert (! (not (= $@loc.y $@loc.prestate@46)) :named ax_2158))
   (assert (! (not (= $@loc.y $@loc.prestate@48)) :named ax_2159))
   (assert (! (not (= $@loc.y $@loc.prestate@49)) :named ax_2160))
   (assert (! (not (= $@loc.y $@loc.prestate@51)) :named ax_2161))
   (assert (! (not (= $@loc.y $@loc.prestate@52)) :named ax_2162))
   (assert (! (not (= $@loc.y $@loc.prestate@54)) :named ax_2163))
   (assert (! (not (= $@loc.y $@loc.prestate@57)) :named ax_2164))
   (assert (! (not (= $@loc.y $@loc.prestate@58)) :named ax_2165))
   (assert (! (not (= $@loc.y $@loc.prestate@60)) :named ax_2166))
   (assert (! (not (= $@loc.y $@loc.prestate@63)) :named ax_2167))
   (assert (! (not (= $@loc.y $@loc.prestate@66)) :named ax_2168))
   (assert (! (not (= $@loc.y $@loc.prestate@69)) :named ax_2169))
   (assert (! (not (= $@loc.y $@loc.prestate@70)) :named ax_2170))
   (assert (! (not (= $@loc.y $@loc.res_lambda@8@21)) :named ax_2171))
   (assert (! (not (= $@loc.y $@loc.staticWrapState@55)) :named ax_2172))
   (assert (! (not (= $@loc.y $@loc.staticWrapState@61)) :named ax_2173))
   (assert (! (not (= $@loc.y $@loc.staticWrapState@64)) :named ax_2174))
   (assert (! (not (= $@loc.y $@loc.staticWrapState@67)) :named ax_2175))
   (assert (! (not (= $@loc.y $@loc.t)) :named ax_2176))
   (assert (! (not (= $@loc.y $@loc.t)) :named ax_2177))
   (assert (! (not (= $@loc.y $@loc.x)) :named ax_2178))
   (assert (! (not (= $@loc.y $@loc.x)) :named ax_2179))
   (assert (! (not (= $@loc.y $@tok$1^203.1)) :named ax_2180))
   (assert (! (not (= $@loc.y $@tok$1^209.3)) :named ax_2181))
   (assert (! (not (= $@loc.y $@tok$2^0.0)) :named ax_2182))
   (assert (! (not (= $@tok$1^203.1 $@file^?3Cno?20file?3E)) :named ax_2183))
   (assert (! (not (= $@tok$1^203.1 $@file^?3Cno?20file?3E)) :named ax_2184))
   (assert (! (not (= $@tok$1^203.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2185))
   (assert (! (not (= $@tok$1^203.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2186))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@47)) :named ax_2187))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@50)) :named ax_2188))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@53)) :named ax_2189))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@56)) :named ax_2190))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@59)) :named ax_2191))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@62)) :named ax_2192))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@65)) :named ax_2193))
   (assert (! (not (= $@tok$1^203.1 $@loc.owns@68)) :named ax_2194))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@45)) :named ax_2195))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@46)) :named ax_2196))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@48)) :named ax_2197))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@49)) :named ax_2198))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@51)) :named ax_2199))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@52)) :named ax_2200))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@54)) :named ax_2201))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@57)) :named ax_2202))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@58)) :named ax_2203))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@60)) :named ax_2204))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@63)) :named ax_2205))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@66)) :named ax_2206))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@69)) :named ax_2207))
   (assert (! (not (= $@tok$1^203.1 $@loc.prestate@70)) :named ax_2208))
   (assert (! (not (= $@tok$1^203.1 $@loc.res_lambda@8@21)) :named ax_2209))
   (assert (! (not (= $@tok$1^203.1 $@loc.staticWrapState@55)) :named ax_2210))
   (assert (! (not (= $@tok$1^203.1 $@loc.staticWrapState@61)) :named ax_2211))
   (assert (! (not (= $@tok$1^203.1 $@loc.staticWrapState@64)) :named ax_2212))
   (assert (! (not (= $@tok$1^203.1 $@loc.staticWrapState@67)) :named ax_2213))
   (assert (! (not (= $@tok$1^203.1 $@loc.t)) :named ax_2214))
   (assert (! (not (= $@tok$1^203.1 $@loc.t)) :named ax_2215))
   (assert (! (not (= $@tok$1^203.1 $@loc.x)) :named ax_2216))
   (assert (! (not (= $@tok$1^203.1 $@loc.x)) :named ax_2217))
   (assert (! (not (= $@tok$1^203.1 $@loc.y)) :named ax_2218))
   (assert (! (not (= $@tok$1^203.1 $@tok$2^0.0)) :named ax_2219))
   (assert (! (not (= $@tok$1^209.3 $@file^?3Cno?20file?3E)) :named ax_2220))
   (assert (! (not (= $@tok$1^209.3 $@file^?3Cno?20file?3E)) :named ax_2221))
   (assert (! (not (= $@tok$1^209.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2222))
   (assert (! (not (= $@tok$1^209.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2223))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@47)) :named ax_2224))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@50)) :named ax_2225))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@53)) :named ax_2226))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@56)) :named ax_2227))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@59)) :named ax_2228))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@62)) :named ax_2229))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@65)) :named ax_2230))
   (assert (! (not (= $@tok$1^209.3 $@loc.owns@68)) :named ax_2231))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@45)) :named ax_2232))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@46)) :named ax_2233))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@48)) :named ax_2234))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@49)) :named ax_2235))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@51)) :named ax_2236))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@52)) :named ax_2237))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@54)) :named ax_2238))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@57)) :named ax_2239))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@58)) :named ax_2240))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@60)) :named ax_2241))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@63)) :named ax_2242))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@66)) :named ax_2243))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@69)) :named ax_2244))
   (assert (! (not (= $@tok$1^209.3 $@loc.prestate@70)) :named ax_2245))
   (assert (! (not (= $@tok$1^209.3 $@loc.res_lambda@8@21)) :named ax_2246))
   (assert (! (not (= $@tok$1^209.3 $@loc.staticWrapState@55)) :named ax_2247))
   (assert (! (not (= $@tok$1^209.3 $@loc.staticWrapState@61)) :named ax_2248))
   (assert (! (not (= $@tok$1^209.3 $@loc.staticWrapState@64)) :named ax_2249))
   (assert (! (not (= $@tok$1^209.3 $@loc.staticWrapState@67)) :named ax_2250))
   (assert (! (not (= $@tok$1^209.3 $@loc.t)) :named ax_2251))
   (assert (! (not (= $@tok$1^209.3 $@loc.t)) :named ax_2252))
   (assert (! (not (= $@tok$1^209.3 $@loc.x)) :named ax_2253))
   (assert (! (not (= $@tok$1^209.3 $@loc.x)) :named ax_2254))
   (assert (! (not (= $@tok$1^209.3 $@loc.y)) :named ax_2255))
   (assert (! (not (= $@tok$1^209.3 $@tok$1^203.1)) :named ax_2256))
   (assert (! (not (= $@tok$1^209.3 $@tok$1^203.1)) :named ax_2257))
   (assert (! (not (= $@tok$1^209.3 $@tok$2^0.0)) :named ax_2258))
   (assert (! (not (= $@tok$1^211.19 $@file^?3Cno?20file?3E)) :named ax_2259))
   (assert (! (not (= $@tok$1^211.19 $@file^?3Cno?20file?3E)) :named ax_2260))
   (assert (! (not (= $@tok$1^211.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2261))
   (assert (! (not (= $@tok$1^211.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2262))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@47)) :named ax_2263))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@50)) :named ax_2264))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@53)) :named ax_2265))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@56)) :named ax_2266))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@59)) :named ax_2267))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@62)) :named ax_2268))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@65)) :named ax_2269))
   (assert (! (not (= $@tok$1^211.19 $@loc.owns@68)) :named ax_2270))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@45)) :named ax_2271))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@45)) :named ax_2272))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@46)) :named ax_2273))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@48)) :named ax_2274))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@49)) :named ax_2275))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@51)) :named ax_2276))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@52)) :named ax_2277))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@54)) :named ax_2278))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@57)) :named ax_2279))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@58)) :named ax_2280))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@60)) :named ax_2281))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@63)) :named ax_2282))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@66)) :named ax_2283))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@69)) :named ax_2284))
   (assert (! (not (= $@tok$1^211.19 $@loc.prestate@70)) :named ax_2285))
   (assert (! (not (= $@tok$1^211.19 $@loc.res_lambda@8@21)) :named ax_2286))
   (assert (! (not (= $@tok$1^211.19 $@loc.staticWrapState@55)) :named ax_2287))
   (assert (! (not (= $@tok$1^211.19 $@loc.staticWrapState@61)) :named ax_2288))
   (assert (! (not (= $@tok$1^211.19 $@loc.staticWrapState@64)) :named ax_2289))
   (assert (! (not (= $@tok$1^211.19 $@loc.staticWrapState@67)) :named ax_2290))
   (assert (! (not (= $@tok$1^211.19 $@loc.t)) :named ax_2291))
   (assert (! (not (= $@tok$1^211.19 $@loc.t)) :named ax_2292))
   (assert (! (not (= $@tok$1^211.19 $@loc.x)) :named ax_2293))
   (assert (! (not (= $@tok$1^211.19 $@loc.x)) :named ax_2294))
   (assert (! (not (= $@tok$1^211.19 $@loc.y)) :named ax_2295))
   (assert (! (not (= $@tok$1^211.19 $@loc.y)) :named ax_2296))
   (assert (! (not (= $@tok$1^211.19 $@tok$1^203.1)) :named ax_2297))
   (assert (! (not (= $@tok$1^211.19 $@tok$1^203.1)) :named ax_2298))
   (assert (! (not (= $@tok$1^211.19 $@tok$1^209.3)) :named ax_2299))
   (assert (! (not (= $@tok$1^211.19 $@tok$1^209.3)) :named ax_2300))
   (assert (! (not (= $@tok$1^211.19 $@tok$2^0.0)) :named ax_2301))
   (assert (! (not (= $@tok$1^212.53 $@file^?3Cno?20file?3E)) :named ax_2302))
   (assert (! (not (= $@tok$1^212.53 $@file^?3Cno?20file?3E)) :named ax_2303))
   (assert (! (not (= $@tok$1^212.53 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2304))
   (assert (! (not (= $@tok$1^212.53 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2305))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@47)) :named ax_2306))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@47)) :named ax_2307))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@50)) :named ax_2308))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@53)) :named ax_2309))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@56)) :named ax_2310))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@59)) :named ax_2311))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@62)) :named ax_2312))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@65)) :named ax_2313))
   (assert (! (not (= $@tok$1^212.53 $@loc.owns@68)) :named ax_2314))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@45)) :named ax_2315))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@45)) :named ax_2316))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@46)) :named ax_2317))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@46)) :named ax_2318))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@48)) :named ax_2319))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@48)) :named ax_2320))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@49)) :named ax_2321))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@51)) :named ax_2322))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@52)) :named ax_2323))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@54)) :named ax_2324))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@57)) :named ax_2325))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@58)) :named ax_2326))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@60)) :named ax_2327))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@63)) :named ax_2328))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@66)) :named ax_2329))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@69)) :named ax_2330))
   (assert (! (not (= $@tok$1^212.53 $@loc.prestate@70)) :named ax_2331))
   (assert (! (not (= $@tok$1^212.53 $@loc.res_lambda@8@21)) :named ax_2332))
   (assert (! (not (= $@tok$1^212.53 $@loc.staticWrapState@55)) :named ax_2333))
   (assert (! (not (= $@tok$1^212.53 $@loc.staticWrapState@61)) :named ax_2334))
   (assert (! (not (= $@tok$1^212.53 $@loc.staticWrapState@64)) :named ax_2335))
   (assert (! (not (= $@tok$1^212.53 $@loc.staticWrapState@67)) :named ax_2336))
   (assert (! (not (= $@tok$1^212.53 $@loc.t)) :named ax_2337))
   (assert (! (not (= $@tok$1^212.53 $@loc.t)) :named ax_2338))
   (assert (! (not (= $@tok$1^212.53 $@loc.x)) :named ax_2339))
   (assert (! (not (= $@tok$1^212.53 $@loc.x)) :named ax_2340))
   (assert (! (not (= $@tok$1^212.53 $@loc.y)) :named ax_2341))
   (assert (! (not (= $@tok$1^212.53 $@loc.y)) :named ax_2342))
   (assert (! (not (= $@tok$1^212.53 $@tok$1^203.1)) :named ax_2343))
   (assert (! (not (= $@tok$1^212.53 $@tok$1^203.1)) :named ax_2344))
   (assert (! (not (= $@tok$1^212.53 $@tok$1^209.3)) :named ax_2345))
   (assert (! (not (= $@tok$1^212.53 $@tok$1^209.3)) :named ax_2346))
   (assert (! (not (= $@tok$1^212.53 $@tok$1^211.19)) :named ax_2347))
   (assert (! (not (= $@tok$1^212.53 $@tok$1^211.19)) :named ax_2348))
   (assert (! (not (= $@tok$1^212.53 $@tok$2^0.0)) :named ax_2349))
   (assert (! (not (= $@tok$1^213.3 $@file^?3Cno?20file?3E)) :named ax_2350))
   (assert (! (not (= $@tok$1^213.3 $@file^?3Cno?20file?3E)) :named ax_2351))
   (assert (! (not (= $@tok$1^213.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2352))
   (assert (! (not (= $@tok$1^213.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2353))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@47)) :named ax_2354))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@47)) :named ax_2355))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@50)) :named ax_2356))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@53)) :named ax_2357))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@56)) :named ax_2358))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@59)) :named ax_2359))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@62)) :named ax_2360))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@65)) :named ax_2361))
   (assert (! (not (= $@tok$1^213.3 $@loc.owns@68)) :named ax_2362))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@45)) :named ax_2363))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@45)) :named ax_2364))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@46)) :named ax_2365))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@46)) :named ax_2366))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@48)) :named ax_2367))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@48)) :named ax_2368))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@49)) :named ax_2369))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@51)) :named ax_2370))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@52)) :named ax_2371))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@54)) :named ax_2372))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@57)) :named ax_2373))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@58)) :named ax_2374))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@60)) :named ax_2375))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@63)) :named ax_2376))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@66)) :named ax_2377))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@69)) :named ax_2378))
   (assert (! (not (= $@tok$1^213.3 $@loc.prestate@70)) :named ax_2379))
   (assert (! (not (= $@tok$1^213.3 $@loc.res_lambda@8@21)) :named ax_2380))
   (assert (! (not (= $@tok$1^213.3 $@loc.staticWrapState@55)) :named ax_2381))
   (assert (! (not (= $@tok$1^213.3 $@loc.staticWrapState@61)) :named ax_2382))
   (assert (! (not (= $@tok$1^213.3 $@loc.staticWrapState@64)) :named ax_2383))
   (assert (! (not (= $@tok$1^213.3 $@loc.staticWrapState@67)) :named ax_2384))
   (assert (! (not (= $@tok$1^213.3 $@loc.t)) :named ax_2385))
   (assert (! (not (= $@tok$1^213.3 $@loc.t)) :named ax_2386))
   (assert (! (not (= $@tok$1^213.3 $@loc.x)) :named ax_2387))
   (assert (! (not (= $@tok$1^213.3 $@loc.x)) :named ax_2388))
   (assert (! (not (= $@tok$1^213.3 $@loc.y)) :named ax_2389))
   (assert (! (not (= $@tok$1^213.3 $@loc.y)) :named ax_2390))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^203.1)) :named ax_2391))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^203.1)) :named ax_2392))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^209.3)) :named ax_2393))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^209.3)) :named ax_2394))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^211.19)) :named ax_2395))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^211.19)) :named ax_2396))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^212.53)) :named ax_2397))
   (assert (! (not (= $@tok$1^213.3 $@tok$1^212.53)) :named ax_2398))
   (assert (! (not (= $@tok$1^213.3 $@tok$2^0.0)) :named ax_2399))
   (assert (! (not (= $@tok$1^214.53 $@file^?3Cno?20file?3E)) :named ax_2400))
   (assert (! (not (= $@tok$1^214.53 $@file^?3Cno?20file?3E)) :named ax_2401))
   (assert (! (not (= $@tok$1^214.53 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2402))
   (assert (! (not (= $@tok$1^214.53 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2403))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@47)) :named ax_2404))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@47)) :named ax_2405))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@50)) :named ax_2406))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@50)) :named ax_2407))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@53)) :named ax_2408))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@56)) :named ax_2409))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@59)) :named ax_2410))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@62)) :named ax_2411))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@65)) :named ax_2412))
   (assert (! (not (= $@tok$1^214.53 $@loc.owns@68)) :named ax_2413))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@45)) :named ax_2414))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@45)) :named ax_2415))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@46)) :named ax_2416))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@46)) :named ax_2417))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@48)) :named ax_2418))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@48)) :named ax_2419))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@49)) :named ax_2420))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@49)) :named ax_2421))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@51)) :named ax_2422))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@51)) :named ax_2423))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@52)) :named ax_2424))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@54)) :named ax_2425))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@57)) :named ax_2426))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@58)) :named ax_2427))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@60)) :named ax_2428))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@63)) :named ax_2429))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@66)) :named ax_2430))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@69)) :named ax_2431))
   (assert (! (not (= $@tok$1^214.53 $@loc.prestate@70)) :named ax_2432))
   (assert (! (not (= $@tok$1^214.53 $@loc.res_lambda@8@21)) :named ax_2433))
   (assert (! (not (= $@tok$1^214.53 $@loc.staticWrapState@55)) :named ax_2434))
   (assert (! (not (= $@tok$1^214.53 $@loc.staticWrapState@61)) :named ax_2435))
   (assert (! (not (= $@tok$1^214.53 $@loc.staticWrapState@64)) :named ax_2436))
   (assert (! (not (= $@tok$1^214.53 $@loc.staticWrapState@67)) :named ax_2437))
   (assert (! (not (= $@tok$1^214.53 $@loc.t)) :named ax_2438))
   (assert (! (not (= $@tok$1^214.53 $@loc.t)) :named ax_2439))
   (assert (! (not (= $@tok$1^214.53 $@loc.x)) :named ax_2440))
   (assert (! (not (= $@tok$1^214.53 $@loc.x)) :named ax_2441))
   (assert (! (not (= $@tok$1^214.53 $@loc.y)) :named ax_2442))
   (assert (! (not (= $@tok$1^214.53 $@loc.y)) :named ax_2443))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^203.1)) :named ax_2444))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^203.1)) :named ax_2445))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^209.3)) :named ax_2446))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^209.3)) :named ax_2447))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^211.19)) :named ax_2448))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^211.19)) :named ax_2449))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^212.53)) :named ax_2450))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^212.53)) :named ax_2451))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^213.3)) :named ax_2452))
   (assert (! (not (= $@tok$1^214.53 $@tok$1^213.3)) :named ax_2453))
   (assert (! (not (= $@tok$1^214.53 $@tok$2^0.0)) :named ax_2454))
   (assert (! (not (= $@tok$1^216.3 $@file^?3Cno?20file?3E)) :named ax_2455))
   (assert (! (not (= $@tok$1^216.3 $@file^?3Cno?20file?3E)) :named ax_2456))
   (assert (! (not (= $@tok$1^216.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2457))
   (assert (! (not (= $@tok$1^216.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2458))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@47)) :named ax_2459))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@47)) :named ax_2460))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@50)) :named ax_2461))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@50)) :named ax_2462))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@53)) :named ax_2463))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@56)) :named ax_2464))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@59)) :named ax_2465))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@62)) :named ax_2466))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@65)) :named ax_2467))
   (assert (! (not (= $@tok$1^216.3 $@loc.owns@68)) :named ax_2468))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@45)) :named ax_2469))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@45)) :named ax_2470))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@46)) :named ax_2471))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@46)) :named ax_2472))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@48)) :named ax_2473))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@48)) :named ax_2474))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@49)) :named ax_2475))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@49)) :named ax_2476))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@51)) :named ax_2477))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@51)) :named ax_2478))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@52)) :named ax_2479))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@54)) :named ax_2480))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@57)) :named ax_2481))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@58)) :named ax_2482))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@60)) :named ax_2483))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@63)) :named ax_2484))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@66)) :named ax_2485))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@69)) :named ax_2486))
   (assert (! (not (= $@tok$1^216.3 $@loc.prestate@70)) :named ax_2487))
   (assert (! (not (= $@tok$1^216.3 $@loc.res_lambda@8@21)) :named ax_2488))
   (assert (! (not (= $@tok$1^216.3 $@loc.staticWrapState@55)) :named ax_2489))
   (assert (! (not (= $@tok$1^216.3 $@loc.staticWrapState@61)) :named ax_2490))
   (assert (! (not (= $@tok$1^216.3 $@loc.staticWrapState@64)) :named ax_2491))
   (assert (! (not (= $@tok$1^216.3 $@loc.staticWrapState@67)) :named ax_2492))
   (assert (! (not (= $@tok$1^216.3 $@loc.t)) :named ax_2493))
   (assert (! (not (= $@tok$1^216.3 $@loc.t)) :named ax_2494))
   (assert (! (not (= $@tok$1^216.3 $@loc.x)) :named ax_2495))
   (assert (! (not (= $@tok$1^216.3 $@loc.x)) :named ax_2496))
   (assert (! (not (= $@tok$1^216.3 $@loc.y)) :named ax_2497))
   (assert (! (not (= $@tok$1^216.3 $@loc.y)) :named ax_2498))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^203.1)) :named ax_2499))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^203.1)) :named ax_2500))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^209.3)) :named ax_2501))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^209.3)) :named ax_2502))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^211.19)) :named ax_2503))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^211.19)) :named ax_2504))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^212.53)) :named ax_2505))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^212.53)) :named ax_2506))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^213.3)) :named ax_2507))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^213.3)) :named ax_2508))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^214.53)) :named ax_2509))
   (assert (! (not (= $@tok$1^216.3 $@tok$1^214.53)) :named ax_2510))
   (assert (! (not (= $@tok$1^216.3 $@tok$2^0.0)) :named ax_2511))
   (assert (! (not (= $@tok$1^218.34 $@file^?3Cno?20file?3E)) :named ax_2512))
   (assert (! (not (= $@tok$1^218.34 $@file^?3Cno?20file?3E)) :named ax_2513))
   (assert (! (not (= $@tok$1^218.34 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2514))
   (assert (! (not (= $@tok$1^218.34 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2515))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@47)) :named ax_2516))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@47)) :named ax_2517))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@50)) :named ax_2518))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@50)) :named ax_2519))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@53)) :named ax_2520))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@53)) :named ax_2521))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@56)) :named ax_2522))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@59)) :named ax_2523))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@62)) :named ax_2524))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@65)) :named ax_2525))
   (assert (! (not (= $@tok$1^218.34 $@loc.owns@68)) :named ax_2526))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@45)) :named ax_2527))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@45)) :named ax_2528))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@46)) :named ax_2529))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@46)) :named ax_2530))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@48)) :named ax_2531))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@48)) :named ax_2532))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@49)) :named ax_2533))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@49)) :named ax_2534))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@51)) :named ax_2535))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@51)) :named ax_2536))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@52)) :named ax_2537))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@52)) :named ax_2538))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@54)) :named ax_2539))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@54)) :named ax_2540))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@57)) :named ax_2541))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@58)) :named ax_2542))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@60)) :named ax_2543))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@63)) :named ax_2544))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@66)) :named ax_2545))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@69)) :named ax_2546))
   (assert (! (not (= $@tok$1^218.34 $@loc.prestate@70)) :named ax_2547))
   (assert (! (not (= $@tok$1^218.34 $@loc.res_lambda@8@21)) :named ax_2548))
   (assert (! (not (= $@tok$1^218.34 $@loc.staticWrapState@55)) :named ax_2549))
   (assert (! (not (= $@tok$1^218.34 $@loc.staticWrapState@61)) :named ax_2550))
   (assert (! (not (= $@tok$1^218.34 $@loc.staticWrapState@64)) :named ax_2551))
   (assert (! (not (= $@tok$1^218.34 $@loc.staticWrapState@67)) :named ax_2552))
   (assert (! (not (= $@tok$1^218.34 $@loc.t)) :named ax_2553))
   (assert (! (not (= $@tok$1^218.34 $@loc.t)) :named ax_2554))
   (assert (! (not (= $@tok$1^218.34 $@loc.x)) :named ax_2555))
   (assert (! (not (= $@tok$1^218.34 $@loc.x)) :named ax_2556))
   (assert (! (not (= $@tok$1^218.34 $@loc.y)) :named ax_2557))
   (assert (! (not (= $@tok$1^218.34 $@loc.y)) :named ax_2558))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^203.1)) :named ax_2559))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^203.1)) :named ax_2560))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^209.3)) :named ax_2561))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^209.3)) :named ax_2562))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^211.19)) :named ax_2563))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^211.19)) :named ax_2564))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^212.53)) :named ax_2565))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^212.53)) :named ax_2566))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^213.3)) :named ax_2567))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^213.3)) :named ax_2568))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^214.53)) :named ax_2569))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^214.53)) :named ax_2570))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^216.3)) :named ax_2571))
   (assert (! (not (= $@tok$1^218.34 $@tok$1^216.3)) :named ax_2572))
   (assert (! (not (= $@tok$1^218.34 $@tok$2^0.0)) :named ax_2573))
   (assert (! (not (= $@tok$1^218.43 $@file^?3Cno?20file?3E)) :named ax_2574))
   (assert (! (not (= $@tok$1^218.43 $@file^?3Cno?20file?3E)) :named ax_2575))
   (assert (! (not (= $@tok$1^218.43 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2576))
   (assert (! (not (= $@tok$1^218.43 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2577))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@47)) :named ax_2578))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@47)) :named ax_2579))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@50)) :named ax_2580))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@50)) :named ax_2581))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@53)) :named ax_2582))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@53)) :named ax_2583))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@56)) :named ax_2584))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@59)) :named ax_2585))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@62)) :named ax_2586))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@65)) :named ax_2587))
   (assert (! (not (= $@tok$1^218.43 $@loc.owns@68)) :named ax_2588))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@45)) :named ax_2589))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@45)) :named ax_2590))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@46)) :named ax_2591))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@46)) :named ax_2592))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@48)) :named ax_2593))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@48)) :named ax_2594))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@49)) :named ax_2595))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@49)) :named ax_2596))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@51)) :named ax_2597))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@51)) :named ax_2598))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@52)) :named ax_2599))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@52)) :named ax_2600))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@54)) :named ax_2601))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@54)) :named ax_2602))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@57)) :named ax_2603))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@58)) :named ax_2604))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@60)) :named ax_2605))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@63)) :named ax_2606))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@66)) :named ax_2607))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@69)) :named ax_2608))
   (assert (! (not (= $@tok$1^218.43 $@loc.prestate@70)) :named ax_2609))
   (assert (! (not (= $@tok$1^218.43 $@loc.res_lambda@8@21)) :named ax_2610))
   (assert (! (not (= $@tok$1^218.43 $@loc.staticWrapState@55)) :named ax_2611))
   (assert (! (not (= $@tok$1^218.43 $@loc.staticWrapState@61)) :named ax_2612))
   (assert (! (not (= $@tok$1^218.43 $@loc.staticWrapState@64)) :named ax_2613))
   (assert (! (not (= $@tok$1^218.43 $@loc.staticWrapState@67)) :named ax_2614))
   (assert (! (not (= $@tok$1^218.43 $@loc.t)) :named ax_2615))
   (assert (! (not (= $@tok$1^218.43 $@loc.t)) :named ax_2616))
   (assert (! (not (= $@tok$1^218.43 $@loc.x)) :named ax_2617))
   (assert (! (not (= $@tok$1^218.43 $@loc.x)) :named ax_2618))
   (assert (! (not (= $@tok$1^218.43 $@loc.y)) :named ax_2619))
   (assert (! (not (= $@tok$1^218.43 $@loc.y)) :named ax_2620))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^203.1)) :named ax_2621))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^203.1)) :named ax_2622))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^209.3)) :named ax_2623))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^209.3)) :named ax_2624))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^211.19)) :named ax_2625))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^211.19)) :named ax_2626))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^212.53)) :named ax_2627))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^212.53)) :named ax_2628))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^213.3)) :named ax_2629))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^213.3)) :named ax_2630))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^214.53)) :named ax_2631))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^214.53)) :named ax_2632))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^216.3)) :named ax_2633))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^216.3)) :named ax_2634))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^218.34)) :named ax_2635))
   (assert (! (not (= $@tok$1^218.43 $@tok$1^218.34)) :named ax_2636))
   (assert (! (not (= $@tok$1^218.43 $@tok$2^0.0)) :named ax_2637))
   (assert (! (not (= $@tok$1^219.3 $@file^?3Cno?20file?3E)) :named ax_2638))
   (assert (! (not (= $@tok$1^219.3 $@file^?3Cno?20file?3E)) :named ax_2639))
   (assert (! (not (= $@tok$1^219.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2640))
   (assert (! (not (= $@tok$1^219.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2641))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@47)) :named ax_2642))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@47)) :named ax_2643))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@50)) :named ax_2644))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@50)) :named ax_2645))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@53)) :named ax_2646))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@53)) :named ax_2647))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@56)) :named ax_2648))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@56)) :named ax_2649))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@59)) :named ax_2650))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@62)) :named ax_2651))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@65)) :named ax_2652))
   (assert (! (not (= $@tok$1^219.3 $@loc.owns@68)) :named ax_2653))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@45)) :named ax_2654))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@45)) :named ax_2655))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@46)) :named ax_2656))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@46)) :named ax_2657))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@48)) :named ax_2658))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@48)) :named ax_2659))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@49)) :named ax_2660))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@49)) :named ax_2661))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@51)) :named ax_2662))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@51)) :named ax_2663))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@52)) :named ax_2664))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@52)) :named ax_2665))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@54)) :named ax_2666))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@54)) :named ax_2667))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@57)) :named ax_2668))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@57)) :named ax_2669))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@58)) :named ax_2670))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@60)) :named ax_2671))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@63)) :named ax_2672))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@66)) :named ax_2673))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@69)) :named ax_2674))
   (assert (! (not (= $@tok$1^219.3 $@loc.prestate@70)) :named ax_2675))
   (assert (! (not (= $@tok$1^219.3 $@loc.res_lambda@8@21)) :named ax_2676))
   (assert (! (not (= $@tok$1^219.3 $@loc.staticWrapState@55)) :named ax_2677))
   (assert (! (not (= $@tok$1^219.3 $@loc.staticWrapState@55)) :named ax_2678))
   (assert (! (not (= $@tok$1^219.3 $@loc.staticWrapState@61)) :named ax_2679))
   (assert (! (not (= $@tok$1^219.3 $@loc.staticWrapState@64)) :named ax_2680))
   (assert (! (not (= $@tok$1^219.3 $@loc.staticWrapState@67)) :named ax_2681))
   (assert (! (not (= $@tok$1^219.3 $@loc.t)) :named ax_2682))
   (assert (! (not (= $@tok$1^219.3 $@loc.t)) :named ax_2683))
   (assert (! (not (= $@tok$1^219.3 $@loc.x)) :named ax_2684))
   (assert (! (not (= $@tok$1^219.3 $@loc.x)) :named ax_2685))
   (assert (! (not (= $@tok$1^219.3 $@loc.y)) :named ax_2686))
   (assert (! (not (= $@tok$1^219.3 $@loc.y)) :named ax_2687))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^203.1)) :named ax_2688))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^203.1)) :named ax_2689))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^209.3)) :named ax_2690))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^209.3)) :named ax_2691))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^211.19)) :named ax_2692))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^211.19)) :named ax_2693))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^212.53)) :named ax_2694))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^212.53)) :named ax_2695))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^213.3)) :named ax_2696))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^213.3)) :named ax_2697))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^214.53)) :named ax_2698))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^214.53)) :named ax_2699))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^216.3)) :named ax_2700))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^216.3)) :named ax_2701))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^218.34)) :named ax_2702))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^218.34)) :named ax_2703))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^218.43)) :named ax_2704))
   (assert (! (not (= $@tok$1^219.3 $@tok$1^218.43)) :named ax_2705))
   (assert (! (not (= $@tok$1^219.3 $@tok$2^0.0)) :named ax_2706))
   (assert (! (not (= $@tok$1^221.5 $@file^?3Cno?20file?3E)) :named ax_2707))
   (assert (! (not (= $@tok$1^221.5 $@file^?3Cno?20file?3E)) :named ax_2708))
   (assert (! (not (= $@tok$1^221.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2709))
   (assert (! (not (= $@tok$1^221.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2710))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@47)) :named ax_2711))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@47)) :named ax_2712))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@50)) :named ax_2713))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@50)) :named ax_2714))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@53)) :named ax_2715))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@53)) :named ax_2716))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@56)) :named ax_2717))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@56)) :named ax_2718))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@59)) :named ax_2719))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@62)) :named ax_2720))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@65)) :named ax_2721))
   (assert (! (not (= $@tok$1^221.5 $@loc.owns@68)) :named ax_2722))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@45)) :named ax_2723))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@45)) :named ax_2724))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@46)) :named ax_2725))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@46)) :named ax_2726))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@48)) :named ax_2727))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@48)) :named ax_2728))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@49)) :named ax_2729))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@49)) :named ax_2730))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@51)) :named ax_2731))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@51)) :named ax_2732))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@52)) :named ax_2733))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@52)) :named ax_2734))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@54)) :named ax_2735))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@54)) :named ax_2736))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@57)) :named ax_2737))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@57)) :named ax_2738))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@58)) :named ax_2739))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@60)) :named ax_2740))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@63)) :named ax_2741))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@66)) :named ax_2742))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@69)) :named ax_2743))
   (assert (! (not (= $@tok$1^221.5 $@loc.prestate@70)) :named ax_2744))
   (assert (! (not (= $@tok$1^221.5 $@loc.res_lambda@8@21)) :named ax_2745))
   (assert (! (not (= $@tok$1^221.5 $@loc.staticWrapState@55)) :named ax_2746))
   (assert (! (not (= $@tok$1^221.5 $@loc.staticWrapState@55)) :named ax_2747))
   (assert (! (not (= $@tok$1^221.5 $@loc.staticWrapState@61)) :named ax_2748))
   (assert (! (not (= $@tok$1^221.5 $@loc.staticWrapState@64)) :named ax_2749))
   (assert (! (not (= $@tok$1^221.5 $@loc.staticWrapState@67)) :named ax_2750))
   (assert (! (not (= $@tok$1^221.5 $@loc.t)) :named ax_2751))
   (assert (! (not (= $@tok$1^221.5 $@loc.t)) :named ax_2752))
   (assert (! (not (= $@tok$1^221.5 $@loc.x)) :named ax_2753))
   (assert (! (not (= $@tok$1^221.5 $@loc.x)) :named ax_2754))
   (assert (! (not (= $@tok$1^221.5 $@loc.y)) :named ax_2755))
   (assert (! (not (= $@tok$1^221.5 $@loc.y)) :named ax_2756))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^203.1)) :named ax_2757))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^203.1)) :named ax_2758))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^209.3)) :named ax_2759))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^209.3)) :named ax_2760))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^211.19)) :named ax_2761))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^211.19)) :named ax_2762))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^212.53)) :named ax_2763))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^212.53)) :named ax_2764))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^213.3)) :named ax_2765))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^213.3)) :named ax_2766))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^214.53)) :named ax_2767))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^214.53)) :named ax_2768))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^216.3)) :named ax_2769))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^216.3)) :named ax_2770))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^218.34)) :named ax_2771))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^218.34)) :named ax_2772))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^218.43)) :named ax_2773))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^218.43)) :named ax_2774))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^219.3)) :named ax_2775))
   (assert (! (not (= $@tok$1^221.5 $@tok$1^219.3)) :named ax_2776))
   (assert (! (not (= $@tok$1^221.5 $@tok$2^0.0)) :named ax_2777))
   (assert (! (not (= $@tok$1^224.32 $@file^?3Cno?20file?3E)) :named ax_2778))
   (assert (! (not (= $@tok$1^224.32 $@file^?3Cno?20file?3E)) :named ax_2779))
   (assert (! (not (= $@tok$1^224.32 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2780))
   (assert (! (not (= $@tok$1^224.32 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2781))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@47)) :named ax_2782))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@47)) :named ax_2783))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@50)) :named ax_2784))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@50)) :named ax_2785))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@53)) :named ax_2786))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@53)) :named ax_2787))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@56)) :named ax_2788))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@56)) :named ax_2789))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@59)) :named ax_2790))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@59)) :named ax_2791))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@62)) :named ax_2792))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@65)) :named ax_2793))
   (assert (! (not (= $@tok$1^224.32 $@loc.owns@68)) :named ax_2794))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@45)) :named ax_2795))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@45)) :named ax_2796))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@46)) :named ax_2797))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@46)) :named ax_2798))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@48)) :named ax_2799))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@48)) :named ax_2800))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@49)) :named ax_2801))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@49)) :named ax_2802))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@51)) :named ax_2803))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@51)) :named ax_2804))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@52)) :named ax_2805))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@52)) :named ax_2806))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@54)) :named ax_2807))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@54)) :named ax_2808))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@57)) :named ax_2809))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@57)) :named ax_2810))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@58)) :named ax_2811))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@58)) :named ax_2812))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@60)) :named ax_2813))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@60)) :named ax_2814))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@63)) :named ax_2815))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@66)) :named ax_2816))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@69)) :named ax_2817))
   (assert (! (not (= $@tok$1^224.32 $@loc.prestate@70)) :named ax_2818))
   (assert (! (not (= $@tok$1^224.32 $@loc.res_lambda@8@21)) :named ax_2819))
   (assert (! (not (= $@tok$1^224.32 $@loc.staticWrapState@55)) :named ax_2820))
   (assert (! (not (= $@tok$1^224.32 $@loc.staticWrapState@55)) :named ax_2821))
   (assert (! (not (= $@tok$1^224.32 $@loc.staticWrapState@61)) :named ax_2822))
   (assert (! (not (= $@tok$1^224.32 $@loc.staticWrapState@64)) :named ax_2823))
   (assert (! (not (= $@tok$1^224.32 $@loc.staticWrapState@67)) :named ax_2824))
   (assert (! (not (= $@tok$1^224.32 $@loc.t)) :named ax_2825))
   (assert (! (not (= $@tok$1^224.32 $@loc.t)) :named ax_2826))
   (assert (! (not (= $@tok$1^224.32 $@loc.x)) :named ax_2827))
   (assert (! (not (= $@tok$1^224.32 $@loc.x)) :named ax_2828))
   (assert (! (not (= $@tok$1^224.32 $@loc.y)) :named ax_2829))
   (assert (! (not (= $@tok$1^224.32 $@loc.y)) :named ax_2830))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^203.1)) :named ax_2831))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^203.1)) :named ax_2832))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^209.3)) :named ax_2833))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^209.3)) :named ax_2834))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^211.19)) :named ax_2835))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^211.19)) :named ax_2836))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^212.53)) :named ax_2837))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^212.53)) :named ax_2838))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^213.3)) :named ax_2839))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^213.3)) :named ax_2840))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^214.53)) :named ax_2841))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^214.53)) :named ax_2842))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^216.3)) :named ax_2843))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^216.3)) :named ax_2844))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^218.34)) :named ax_2845))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^218.34)) :named ax_2846))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^218.43)) :named ax_2847))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^218.43)) :named ax_2848))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^219.3)) :named ax_2849))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^219.3)) :named ax_2850))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^221.5)) :named ax_2851))
   (assert (! (not (= $@tok$1^224.32 $@tok$1^221.5)) :named ax_2852))
   (assert (! (not (= $@tok$1^224.32 $@tok$2^0.0)) :named ax_2853))
   (assert (! (not (= $@tok$1^226.9 $@file^?3Cno?20file?3E)) :named ax_2854))
   (assert (! (not (= $@tok$1^226.9 $@file^?3Cno?20file?3E)) :named ax_2855))
   (assert (! (not (= $@tok$1^226.9 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2856))
   (assert (! (not (= $@tok$1^226.9 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2857))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@47)) :named ax_2858))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@47)) :named ax_2859))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@50)) :named ax_2860))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@50)) :named ax_2861))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@53)) :named ax_2862))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@53)) :named ax_2863))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@56)) :named ax_2864))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@56)) :named ax_2865))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@59)) :named ax_2866))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@59)) :named ax_2867))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@62)) :named ax_2868))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@65)) :named ax_2869))
   (assert (! (not (= $@tok$1^226.9 $@loc.owns@68)) :named ax_2870))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@45)) :named ax_2871))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@45)) :named ax_2872))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@46)) :named ax_2873))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@46)) :named ax_2874))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@48)) :named ax_2875))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@48)) :named ax_2876))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@49)) :named ax_2877))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@49)) :named ax_2878))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@51)) :named ax_2879))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@51)) :named ax_2880))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@52)) :named ax_2881))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@52)) :named ax_2882))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@54)) :named ax_2883))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@54)) :named ax_2884))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@57)) :named ax_2885))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@57)) :named ax_2886))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@58)) :named ax_2887))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@58)) :named ax_2888))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@60)) :named ax_2889))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@60)) :named ax_2890))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@63)) :named ax_2891))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@66)) :named ax_2892))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@69)) :named ax_2893))
   (assert (! (not (= $@tok$1^226.9 $@loc.prestate@70)) :named ax_2894))
   (assert (! (not (= $@tok$1^226.9 $@loc.res_lambda@8@21)) :named ax_2895))
   (assert (! (not (= $@tok$1^226.9 $@loc.staticWrapState@55)) :named ax_2896))
   (assert (! (not (= $@tok$1^226.9 $@loc.staticWrapState@55)) :named ax_2897))
   (assert (! (not (= $@tok$1^226.9 $@loc.staticWrapState@61)) :named ax_2898))
   (assert (! (not (= $@tok$1^226.9 $@loc.staticWrapState@64)) :named ax_2899))
   (assert (! (not (= $@tok$1^226.9 $@loc.staticWrapState@67)) :named ax_2900))
   (assert (! (not (= $@tok$1^226.9 $@loc.t)) :named ax_2901))
   (assert (! (not (= $@tok$1^226.9 $@loc.t)) :named ax_2902))
   (assert (! (not (= $@tok$1^226.9 $@loc.x)) :named ax_2903))
   (assert (! (not (= $@tok$1^226.9 $@loc.x)) :named ax_2904))
   (assert (! (not (= $@tok$1^226.9 $@loc.y)) :named ax_2905))
   (assert (! (not (= $@tok$1^226.9 $@loc.y)) :named ax_2906))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^203.1)) :named ax_2907))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^203.1)) :named ax_2908))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^209.3)) :named ax_2909))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^209.3)) :named ax_2910))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^211.19)) :named ax_2911))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^211.19)) :named ax_2912))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^212.53)) :named ax_2913))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^212.53)) :named ax_2914))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^213.3)) :named ax_2915))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^213.3)) :named ax_2916))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^214.53)) :named ax_2917))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^214.53)) :named ax_2918))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^216.3)) :named ax_2919))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^216.3)) :named ax_2920))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^218.34)) :named ax_2921))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^218.34)) :named ax_2922))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^218.43)) :named ax_2923))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^218.43)) :named ax_2924))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^219.3)) :named ax_2925))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^219.3)) :named ax_2926))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^221.5)) :named ax_2927))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^221.5)) :named ax_2928))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^224.32)) :named ax_2929))
   (assert (! (not (= $@tok$1^226.9 $@tok$1^224.32)) :named ax_2930))
   (assert (! (not (= $@tok$1^226.9 $@tok$2^0.0)) :named ax_2931))
   (assert (! (not (= $@tok$1^228.9 $@file^?3Cno?20file?3E)) :named ax_2932))
   (assert (! (not (= $@tok$1^228.9 $@file^?3Cno?20file?3E)) :named ax_2933))
   (assert (! (not (= $@tok$1^228.9 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2934))
   (assert (! (not (= $@tok$1^228.9 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2935))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@47)) :named ax_2936))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@47)) :named ax_2937))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@50)) :named ax_2938))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@50)) :named ax_2939))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@53)) :named ax_2940))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@53)) :named ax_2941))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@56)) :named ax_2942))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@56)) :named ax_2943))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@59)) :named ax_2944))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@59)) :named ax_2945))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@62)) :named ax_2946))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@65)) :named ax_2947))
   (assert (! (not (= $@tok$1^228.9 $@loc.owns@68)) :named ax_2948))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@45)) :named ax_2949))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@45)) :named ax_2950))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@46)) :named ax_2951))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@46)) :named ax_2952))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@48)) :named ax_2953))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@48)) :named ax_2954))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@49)) :named ax_2955))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@49)) :named ax_2956))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@51)) :named ax_2957))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@51)) :named ax_2958))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@52)) :named ax_2959))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@52)) :named ax_2960))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@54)) :named ax_2961))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@54)) :named ax_2962))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@57)) :named ax_2963))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@57)) :named ax_2964))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@58)) :named ax_2965))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@58)) :named ax_2966))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@60)) :named ax_2967))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@60)) :named ax_2968))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@63)) :named ax_2969))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@66)) :named ax_2970))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@69)) :named ax_2971))
   (assert (! (not (= $@tok$1^228.9 $@loc.prestate@70)) :named ax_2972))
   (assert (! (not (= $@tok$1^228.9 $@loc.res_lambda@8@21)) :named ax_2973))
   (assert (! (not (= $@tok$1^228.9 $@loc.staticWrapState@55)) :named ax_2974))
   (assert (! (not (= $@tok$1^228.9 $@loc.staticWrapState@55)) :named ax_2975))
   (assert (! (not (= $@tok$1^228.9 $@loc.staticWrapState@61)) :named ax_2976))
   (assert (! (not (= $@tok$1^228.9 $@loc.staticWrapState@64)) :named ax_2977))
   (assert (! (not (= $@tok$1^228.9 $@loc.staticWrapState@67)) :named ax_2978))
   (assert (! (not (= $@tok$1^228.9 $@loc.t)) :named ax_2979))
   (assert (! (not (= $@tok$1^228.9 $@loc.t)) :named ax_2980))
   (assert (! (not (= $@tok$1^228.9 $@loc.x)) :named ax_2981))
   (assert (! (not (= $@tok$1^228.9 $@loc.x)) :named ax_2982))
   (assert (! (not (= $@tok$1^228.9 $@loc.y)) :named ax_2983))
   (assert (! (not (= $@tok$1^228.9 $@loc.y)) :named ax_2984))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^203.1)) :named ax_2985))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^203.1)) :named ax_2986))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^209.3)) :named ax_2987))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^209.3)) :named ax_2988))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^211.19)) :named ax_2989))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^211.19)) :named ax_2990))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^212.53)) :named ax_2991))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^212.53)) :named ax_2992))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^213.3)) :named ax_2993))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^213.3)) :named ax_2994))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^214.53)) :named ax_2995))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^214.53)) :named ax_2996))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^216.3)) :named ax_2997))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^216.3)) :named ax_2998))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^218.34)) :named ax_2999))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^218.34)) :named ax_3000))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^218.43)) :named ax_3001))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^218.43)) :named ax_3002))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^219.3)) :named ax_3003))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^219.3)) :named ax_3004))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^221.5)) :named ax_3005))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^221.5)) :named ax_3006))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^224.32)) :named ax_3007))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^224.32)) :named ax_3008))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^226.9)) :named ax_3009))
   (assert (! (not (= $@tok$1^228.9 $@tok$1^226.9)) :named ax_3010))
   (assert (! (not (= $@tok$1^228.9 $@tok$2^0.0)) :named ax_3011))
   (assert (! (not (= $@tok$1^231.3 $@file^?3Cno?20file?3E)) :named ax_3012))
   (assert (! (not (= $@tok$1^231.3 $@file^?3Cno?20file?3E)) :named ax_3013))
   (assert (! (not (= $@tok$1^231.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3014))
   (assert (! (not (= $@tok$1^231.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3015))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@47)) :named ax_3016))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@47)) :named ax_3017))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@50)) :named ax_3018))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@50)) :named ax_3019))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@53)) :named ax_3020))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@53)) :named ax_3021))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@56)) :named ax_3022))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@56)) :named ax_3023))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@59)) :named ax_3024))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@59)) :named ax_3025))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@62)) :named ax_3026))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@62)) :named ax_3027))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@65)) :named ax_3028))
   (assert (! (not (= $@tok$1^231.3 $@loc.owns@68)) :named ax_3029))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@45)) :named ax_3030))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@45)) :named ax_3031))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@46)) :named ax_3032))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@46)) :named ax_3033))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@48)) :named ax_3034))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@48)) :named ax_3035))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@49)) :named ax_3036))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@49)) :named ax_3037))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@51)) :named ax_3038))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@51)) :named ax_3039))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@52)) :named ax_3040))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@52)) :named ax_3041))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@54)) :named ax_3042))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@54)) :named ax_3043))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@57)) :named ax_3044))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@57)) :named ax_3045))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@58)) :named ax_3046))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@58)) :named ax_3047))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@60)) :named ax_3048))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@60)) :named ax_3049))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@63)) :named ax_3050))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@63)) :named ax_3051))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@66)) :named ax_3052))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@69)) :named ax_3053))
   (assert (! (not (= $@tok$1^231.3 $@loc.prestate@70)) :named ax_3054))
   (assert (! (not (= $@tok$1^231.3 $@loc.res_lambda@8@21)) :named ax_3055))
   (assert (! (not (= $@tok$1^231.3 $@loc.staticWrapState@55)) :named ax_3056))
   (assert (! (not (= $@tok$1^231.3 $@loc.staticWrapState@55)) :named ax_3057))
   (assert (! (not (= $@tok$1^231.3 $@loc.staticWrapState@61)) :named ax_3058))
   (assert (! (not (= $@tok$1^231.3 $@loc.staticWrapState@61)) :named ax_3059))
   (assert (! (not (= $@tok$1^231.3 $@loc.staticWrapState@64)) :named ax_3060))
   (assert (! (not (= $@tok$1^231.3 $@loc.staticWrapState@67)) :named ax_3061))
   (assert (! (not (= $@tok$1^231.3 $@loc.t)) :named ax_3062))
   (assert (! (not (= $@tok$1^231.3 $@loc.t)) :named ax_3063))
   (assert (! (not (= $@tok$1^231.3 $@loc.x)) :named ax_3064))
   (assert (! (not (= $@tok$1^231.3 $@loc.x)) :named ax_3065))
   (assert (! (not (= $@tok$1^231.3 $@loc.y)) :named ax_3066))
   (assert (! (not (= $@tok$1^231.3 $@loc.y)) :named ax_3067))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^203.1)) :named ax_3068))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^203.1)) :named ax_3069))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^209.3)) :named ax_3070))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^209.3)) :named ax_3071))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^211.19)) :named ax_3072))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^211.19)) :named ax_3073))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^212.53)) :named ax_3074))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^212.53)) :named ax_3075))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^213.3)) :named ax_3076))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^213.3)) :named ax_3077))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^214.53)) :named ax_3078))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^214.53)) :named ax_3079))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^216.3)) :named ax_3080))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^216.3)) :named ax_3081))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^218.34)) :named ax_3082))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^218.34)) :named ax_3083))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^218.43)) :named ax_3084))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^218.43)) :named ax_3085))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^219.3)) :named ax_3086))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^219.3)) :named ax_3087))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^221.5)) :named ax_3088))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^221.5)) :named ax_3089))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^224.32)) :named ax_3090))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^224.32)) :named ax_3091))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^226.9)) :named ax_3092))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^226.9)) :named ax_3093))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^228.9)) :named ax_3094))
   (assert (! (not (= $@tok$1^231.3 $@tok$1^228.9)) :named ax_3095))
   (assert (! (not (= $@tok$1^231.3 $@tok$2^0.0)) :named ax_3096))
   (assert (! (not (= $@tok$1^232.3 $@file^?3Cno?20file?3E)) :named ax_3097))
   (assert (! (not (= $@tok$1^232.3 $@file^?3Cno?20file?3E)) :named ax_3098))
   (assert (! (not (= $@tok$1^232.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3099))
   (assert (! (not (= $@tok$1^232.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3100))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@47)) :named ax_3101))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@47)) :named ax_3102))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@50)) :named ax_3103))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@50)) :named ax_3104))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@53)) :named ax_3105))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@53)) :named ax_3106))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@56)) :named ax_3107))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@56)) :named ax_3108))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@59)) :named ax_3109))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@59)) :named ax_3110))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@62)) :named ax_3111))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@62)) :named ax_3112))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@65)) :named ax_3113))
   (assert (! (not (= $@tok$1^232.3 $@loc.owns@68)) :named ax_3114))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@45)) :named ax_3115))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@45)) :named ax_3116))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@46)) :named ax_3117))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@46)) :named ax_3118))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@48)) :named ax_3119))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@48)) :named ax_3120))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@49)) :named ax_3121))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@49)) :named ax_3122))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@51)) :named ax_3123))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@51)) :named ax_3124))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@52)) :named ax_3125))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@52)) :named ax_3126))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@54)) :named ax_3127))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@54)) :named ax_3128))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@57)) :named ax_3129))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@57)) :named ax_3130))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@58)) :named ax_3131))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@58)) :named ax_3132))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@60)) :named ax_3133))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@60)) :named ax_3134))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@63)) :named ax_3135))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@63)) :named ax_3136))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@66)) :named ax_3137))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@69)) :named ax_3138))
   (assert (! (not (= $@tok$1^232.3 $@loc.prestate@70)) :named ax_3139))
   (assert (! (not (= $@tok$1^232.3 $@loc.res_lambda@8@21)) :named ax_3140))
   (assert (! (not (= $@tok$1^232.3 $@loc.staticWrapState@55)) :named ax_3141))
   (assert (! (not (= $@tok$1^232.3 $@loc.staticWrapState@55)) :named ax_3142))
   (assert (! (not (= $@tok$1^232.3 $@loc.staticWrapState@61)) :named ax_3143))
   (assert (! (not (= $@tok$1^232.3 $@loc.staticWrapState@61)) :named ax_3144))
   (assert (! (not (= $@tok$1^232.3 $@loc.staticWrapState@64)) :named ax_3145))
   (assert (! (not (= $@tok$1^232.3 $@loc.staticWrapState@67)) :named ax_3146))
   (assert (! (not (= $@tok$1^232.3 $@loc.t)) :named ax_3147))
   (assert (! (not (= $@tok$1^232.3 $@loc.t)) :named ax_3148))
   (assert (! (not (= $@tok$1^232.3 $@loc.x)) :named ax_3149))
   (assert (! (not (= $@tok$1^232.3 $@loc.x)) :named ax_3150))
   (assert (! (not (= $@tok$1^232.3 $@loc.y)) :named ax_3151))
   (assert (! (not (= $@tok$1^232.3 $@loc.y)) :named ax_3152))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^203.1)) :named ax_3153))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^203.1)) :named ax_3154))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^209.3)) :named ax_3155))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^209.3)) :named ax_3156))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^211.19)) :named ax_3157))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^211.19)) :named ax_3158))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^212.53)) :named ax_3159))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^212.53)) :named ax_3160))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^213.3)) :named ax_3161))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^213.3)) :named ax_3162))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^214.53)) :named ax_3163))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^214.53)) :named ax_3164))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^216.3)) :named ax_3165))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^216.3)) :named ax_3166))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^218.34)) :named ax_3167))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^218.34)) :named ax_3168))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^218.43)) :named ax_3169))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^218.43)) :named ax_3170))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^219.3)) :named ax_3171))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^219.3)) :named ax_3172))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^221.5)) :named ax_3173))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^221.5)) :named ax_3174))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^224.32)) :named ax_3175))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^224.32)) :named ax_3176))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^226.9)) :named ax_3177))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^226.9)) :named ax_3178))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^228.9)) :named ax_3179))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^228.9)) :named ax_3180))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^231.3)) :named ax_3181))
   (assert (! (not (= $@tok$1^232.3 $@tok$1^231.3)) :named ax_3182))
   (assert (! (not (= $@tok$1^232.3 $@tok$2^0.0)) :named ax_3183))
   (assert (! (not (= $@tok$1^233.19 $@file^?3Cno?20file?3E)) :named ax_3184))
   (assert (! (not (= $@tok$1^233.19 $@file^?3Cno?20file?3E)) :named ax_3185))
   (assert (! (not (= $@tok$1^233.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3186))
   (assert (! (not (= $@tok$1^233.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3187))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@47)) :named ax_3188))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@47)) :named ax_3189))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@50)) :named ax_3190))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@50)) :named ax_3191))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@53)) :named ax_3192))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@53)) :named ax_3193))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@56)) :named ax_3194))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@56)) :named ax_3195))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@59)) :named ax_3196))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@59)) :named ax_3197))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@62)) :named ax_3198))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@62)) :named ax_3199))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@65)) :named ax_3200))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@65)) :named ax_3201))
   (assert (! (not (= $@tok$1^233.19 $@loc.owns@68)) :named ax_3202))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@45)) :named ax_3203))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@45)) :named ax_3204))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@46)) :named ax_3205))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@46)) :named ax_3206))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@48)) :named ax_3207))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@48)) :named ax_3208))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@49)) :named ax_3209))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@49)) :named ax_3210))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@51)) :named ax_3211))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@51)) :named ax_3212))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@52)) :named ax_3213))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@52)) :named ax_3214))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@54)) :named ax_3215))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@54)) :named ax_3216))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@57)) :named ax_3217))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@57)) :named ax_3218))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@58)) :named ax_3219))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@58)) :named ax_3220))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@60)) :named ax_3221))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@60)) :named ax_3222))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@63)) :named ax_3223))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@63)) :named ax_3224))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@66)) :named ax_3225))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@66)) :named ax_3226))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@69)) :named ax_3227))
   (assert (! (not (= $@tok$1^233.19 $@loc.prestate@70)) :named ax_3228))
   (assert (! (not (= $@tok$1^233.19 $@loc.res_lambda@8@21)) :named ax_3229))
   (assert (! (not (= $@tok$1^233.19 $@loc.staticWrapState@55)) :named ax_3230))
   (assert (! (not (= $@tok$1^233.19 $@loc.staticWrapState@55)) :named ax_3231))
   (assert (! (not (= $@tok$1^233.19 $@loc.staticWrapState@61)) :named ax_3232))
   (assert (! (not (= $@tok$1^233.19 $@loc.staticWrapState@61)) :named ax_3233))
   (assert (! (not (= $@tok$1^233.19 $@loc.staticWrapState@64)) :named ax_3234))
   (assert (! (not (= $@tok$1^233.19 $@loc.staticWrapState@64)) :named ax_3235))
   (assert (! (not (= $@tok$1^233.19 $@loc.staticWrapState@67)) :named ax_3236))
   (assert (! (not (= $@tok$1^233.19 $@loc.t)) :named ax_3237))
   (assert (! (not (= $@tok$1^233.19 $@loc.t)) :named ax_3238))
   (assert (! (not (= $@tok$1^233.19 $@loc.x)) :named ax_3239))
   (assert (! (not (= $@tok$1^233.19 $@loc.x)) :named ax_3240))
   (assert (! (not (= $@tok$1^233.19 $@loc.y)) :named ax_3241))
   (assert (! (not (= $@tok$1^233.19 $@loc.y)) :named ax_3242))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^203.1)) :named ax_3243))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^203.1)) :named ax_3244))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^209.3)) :named ax_3245))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^209.3)) :named ax_3246))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^211.19)) :named ax_3247))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^211.19)) :named ax_3248))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^212.53)) :named ax_3249))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^212.53)) :named ax_3250))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^213.3)) :named ax_3251))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^213.3)) :named ax_3252))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^214.53)) :named ax_3253))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^214.53)) :named ax_3254))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^216.3)) :named ax_3255))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^216.3)) :named ax_3256))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^218.34)) :named ax_3257))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^218.34)) :named ax_3258))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^218.43)) :named ax_3259))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^218.43)) :named ax_3260))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^219.3)) :named ax_3261))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^219.3)) :named ax_3262))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^221.5)) :named ax_3263))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^221.5)) :named ax_3264))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^224.32)) :named ax_3265))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^224.32)) :named ax_3266))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^226.9)) :named ax_3267))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^226.9)) :named ax_3268))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^228.9)) :named ax_3269))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^228.9)) :named ax_3270))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^231.3)) :named ax_3271))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^231.3)) :named ax_3272))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^232.3)) :named ax_3273))
   (assert (! (not (= $@tok$1^233.19 $@tok$1^232.3)) :named ax_3274))
   (assert (! (not (= $@tok$1^233.19 $@tok$2^0.0)) :named ax_3275))
   (assert (! (not (= $@tok$1^233.43 $@file^?3Cno?20file?3E)) :named ax_3276))
   (assert (! (not (= $@tok$1^233.43 $@file^?3Cno?20file?3E)) :named ax_3277))
   (assert (! (not (= $@tok$1^233.43 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3278))
   (assert (! (not (= $@tok$1^233.43 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3279))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@47)) :named ax_3280))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@47)) :named ax_3281))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@50)) :named ax_3282))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@50)) :named ax_3283))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@53)) :named ax_3284))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@53)) :named ax_3285))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@56)) :named ax_3286))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@56)) :named ax_3287))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@59)) :named ax_3288))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@59)) :named ax_3289))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@62)) :named ax_3290))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@62)) :named ax_3291))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@65)) :named ax_3292))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@65)) :named ax_3293))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@68)) :named ax_3294))
   (assert (! (not (= $@tok$1^233.43 $@loc.owns@68)) :named ax_3295))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@45)) :named ax_3296))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@45)) :named ax_3297))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@46)) :named ax_3298))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@46)) :named ax_3299))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@48)) :named ax_3300))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@48)) :named ax_3301))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@49)) :named ax_3302))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@49)) :named ax_3303))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@51)) :named ax_3304))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@51)) :named ax_3305))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@52)) :named ax_3306))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@52)) :named ax_3307))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@54)) :named ax_3308))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@54)) :named ax_3309))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@57)) :named ax_3310))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@57)) :named ax_3311))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@58)) :named ax_3312))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@58)) :named ax_3313))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@60)) :named ax_3314))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@60)) :named ax_3315))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@63)) :named ax_3316))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@63)) :named ax_3317))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@66)) :named ax_3318))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@66)) :named ax_3319))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@69)) :named ax_3320))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@69)) :named ax_3321))
   (assert (! (not (= $@tok$1^233.43 $@loc.prestate@70)) :named ax_3322))
   (assert (! (not (= $@tok$1^233.43 $@loc.res_lambda@8@21)) :named ax_3323))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@55)) :named ax_3324))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@55)) :named ax_3325))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@61)) :named ax_3326))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@61)) :named ax_3327))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@64)) :named ax_3328))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@64)) :named ax_3329))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@67)) :named ax_3330))
   (assert (! (not (= $@tok$1^233.43 $@loc.staticWrapState@67)) :named ax_3331))
   (assert (! (not (= $@tok$1^233.43 $@loc.t)) :named ax_3332))
   (assert (! (not (= $@tok$1^233.43 $@loc.t)) :named ax_3333))
   (assert (! (not (= $@tok$1^233.43 $@loc.x)) :named ax_3334))
   (assert (! (not (= $@tok$1^233.43 $@loc.x)) :named ax_3335))
   (assert (! (not (= $@tok$1^233.43 $@loc.y)) :named ax_3336))
   (assert (! (not (= $@tok$1^233.43 $@loc.y)) :named ax_3337))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^203.1)) :named ax_3338))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^203.1)) :named ax_3339))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^209.3)) :named ax_3340))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^209.3)) :named ax_3341))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^211.19)) :named ax_3342))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^211.19)) :named ax_3343))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^212.53)) :named ax_3344))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^212.53)) :named ax_3345))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^213.3)) :named ax_3346))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^213.3)) :named ax_3347))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^214.53)) :named ax_3348))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^214.53)) :named ax_3349))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^216.3)) :named ax_3350))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^216.3)) :named ax_3351))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^218.34)) :named ax_3352))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^218.34)) :named ax_3353))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^218.43)) :named ax_3354))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^218.43)) :named ax_3355))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^219.3)) :named ax_3356))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^219.3)) :named ax_3357))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^221.5)) :named ax_3358))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^221.5)) :named ax_3359))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^224.32)) :named ax_3360))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^224.32)) :named ax_3361))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^226.9)) :named ax_3362))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^226.9)) :named ax_3363))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^228.9)) :named ax_3364))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^228.9)) :named ax_3365))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^231.3)) :named ax_3366))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^231.3)) :named ax_3367))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^232.3)) :named ax_3368))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^232.3)) :named ax_3369))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^233.19)) :named ax_3370))
   (assert (! (not (= $@tok$1^233.43 $@tok$1^233.19)) :named ax_3371))
   (assert (! (not (= $@tok$1^233.43 $@tok$2^0.0)) :named ax_3372))
   (assert (! (not (= $@tok$1^239.5 $@file^?3Cno?20file?3E)) :named ax_3373))
   (assert (! (not (= $@tok$1^239.5 $@file^?3Cno?20file?3E)) :named ax_3374))
   (assert (! (not (= $@tok$1^239.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3375))
   (assert (! (not (= $@tok$1^239.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3376))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@47)) :named ax_3377))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@47)) :named ax_3378))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@50)) :named ax_3379))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@50)) :named ax_3380))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@53)) :named ax_3381))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@53)) :named ax_3382))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@56)) :named ax_3383))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@56)) :named ax_3384))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@59)) :named ax_3385))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@59)) :named ax_3386))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@62)) :named ax_3387))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@62)) :named ax_3388))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@65)) :named ax_3389))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@65)) :named ax_3390))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@68)) :named ax_3391))
   (assert (! (not (= $@tok$1^239.5 $@loc.owns@68)) :named ax_3392))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@45)) :named ax_3393))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@45)) :named ax_3394))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@46)) :named ax_3395))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@46)) :named ax_3396))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@48)) :named ax_3397))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@48)) :named ax_3398))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@49)) :named ax_3399))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@49)) :named ax_3400))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@51)) :named ax_3401))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@51)) :named ax_3402))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@52)) :named ax_3403))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@52)) :named ax_3404))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@54)) :named ax_3405))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@54)) :named ax_3406))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@57)) :named ax_3407))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@57)) :named ax_3408))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@58)) :named ax_3409))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@58)) :named ax_3410))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@60)) :named ax_3411))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@60)) :named ax_3412))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@63)) :named ax_3413))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@63)) :named ax_3414))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@66)) :named ax_3415))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@66)) :named ax_3416))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@69)) :named ax_3417))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@69)) :named ax_3418))
   (assert (! (not (= $@tok$1^239.5 $@loc.prestate@70)) :named ax_3419))
   (assert (! (not (= $@tok$1^239.5 $@loc.res_lambda@8@21)) :named ax_3420))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@55)) :named ax_3421))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@55)) :named ax_3422))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@61)) :named ax_3423))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@61)) :named ax_3424))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@64)) :named ax_3425))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@64)) :named ax_3426))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@67)) :named ax_3427))
   (assert (! (not (= $@tok$1^239.5 $@loc.staticWrapState@67)) :named ax_3428))
   (assert (! (not (= $@tok$1^239.5 $@loc.t)) :named ax_3429))
   (assert (! (not (= $@tok$1^239.5 $@loc.t)) :named ax_3430))
   (assert (! (not (= $@tok$1^239.5 $@loc.x)) :named ax_3431))
   (assert (! (not (= $@tok$1^239.5 $@loc.x)) :named ax_3432))
   (assert (! (not (= $@tok$1^239.5 $@loc.y)) :named ax_3433))
   (assert (! (not (= $@tok$1^239.5 $@loc.y)) :named ax_3434))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^203.1)) :named ax_3435))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^203.1)) :named ax_3436))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^209.3)) :named ax_3437))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^209.3)) :named ax_3438))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^211.19)) :named ax_3439))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^211.19)) :named ax_3440))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^212.53)) :named ax_3441))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^212.53)) :named ax_3442))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^213.3)) :named ax_3443))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^213.3)) :named ax_3444))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^214.53)) :named ax_3445))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^214.53)) :named ax_3446))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^216.3)) :named ax_3447))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^216.3)) :named ax_3448))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^218.34)) :named ax_3449))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^218.34)) :named ax_3450))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^218.43)) :named ax_3451))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^218.43)) :named ax_3452))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^219.3)) :named ax_3453))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^219.3)) :named ax_3454))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^221.5)) :named ax_3455))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^221.5)) :named ax_3456))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^224.32)) :named ax_3457))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^224.32)) :named ax_3458))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^226.9)) :named ax_3459))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^226.9)) :named ax_3460))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^228.9)) :named ax_3461))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^228.9)) :named ax_3462))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^231.3)) :named ax_3463))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^231.3)) :named ax_3464))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^232.3)) :named ax_3465))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^232.3)) :named ax_3466))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^233.19)) :named ax_3467))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^233.19)) :named ax_3468))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^233.43)) :named ax_3469))
   (assert (! (not (= $@tok$1^239.5 $@tok$1^233.43)) :named ax_3470))
   (assert (! (not (= $@tok$1^239.5 $@tok$2^0.0)) :named ax_3471))
   (assert (! (not (= $@tok$1^240.15 $@file^?3Cno?20file?3E)) :named ax_3472))
   (assert (! (not (= $@tok$1^240.15 $@file^?3Cno?20file?3E)) :named ax_3473))
   (assert (! (not (= $@tok$1^240.15 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3474))
   (assert (! (not (= $@tok$1^240.15 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3475))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@47)) :named ax_3476))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@47)) :named ax_3477))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@50)) :named ax_3478))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@50)) :named ax_3479))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@53)) :named ax_3480))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@53)) :named ax_3481))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@56)) :named ax_3482))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@56)) :named ax_3483))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@59)) :named ax_3484))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@59)) :named ax_3485))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@62)) :named ax_3486))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@62)) :named ax_3487))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@65)) :named ax_3488))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@65)) :named ax_3489))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@68)) :named ax_3490))
   (assert (! (not (= $@tok$1^240.15 $@loc.owns@68)) :named ax_3491))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@45)) :named ax_3492))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@45)) :named ax_3493))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@46)) :named ax_3494))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@46)) :named ax_3495))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@48)) :named ax_3496))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@48)) :named ax_3497))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@49)) :named ax_3498))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@49)) :named ax_3499))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@51)) :named ax_3500))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@51)) :named ax_3501))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@52)) :named ax_3502))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@52)) :named ax_3503))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@54)) :named ax_3504))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@54)) :named ax_3505))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@57)) :named ax_3506))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@57)) :named ax_3507))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@58)) :named ax_3508))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@58)) :named ax_3509))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@60)) :named ax_3510))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@60)) :named ax_3511))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@63)) :named ax_3512))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@63)) :named ax_3513))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@66)) :named ax_3514))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@66)) :named ax_3515))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@69)) :named ax_3516))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@69)) :named ax_3517))
   (assert (! (not (= $@tok$1^240.15 $@loc.prestate@70)) :named ax_3518))
   (assert (! (not (= $@tok$1^240.15 $@loc.res_lambda@8@21)) :named ax_3519))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@55)) :named ax_3520))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@55)) :named ax_3521))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@61)) :named ax_3522))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@61)) :named ax_3523))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@64)) :named ax_3524))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@64)) :named ax_3525))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@67)) :named ax_3526))
   (assert (! (not (= $@tok$1^240.15 $@loc.staticWrapState@67)) :named ax_3527))
   (assert (! (not (= $@tok$1^240.15 $@loc.t)) :named ax_3528))
   (assert (! (not (= $@tok$1^240.15 $@loc.t)) :named ax_3529))
   (assert (! (not (= $@tok$1^240.15 $@loc.x)) :named ax_3530))
   (assert (! (not (= $@tok$1^240.15 $@loc.x)) :named ax_3531))
   (assert (! (not (= $@tok$1^240.15 $@loc.y)) :named ax_3532))
   (assert (! (not (= $@tok$1^240.15 $@loc.y)) :named ax_3533))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^203.1)) :named ax_3534))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^203.1)) :named ax_3535))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^209.3)) :named ax_3536))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^209.3)) :named ax_3537))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^211.19)) :named ax_3538))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^211.19)) :named ax_3539))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^212.53)) :named ax_3540))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^212.53)) :named ax_3541))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^213.3)) :named ax_3542))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^213.3)) :named ax_3543))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^214.53)) :named ax_3544))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^214.53)) :named ax_3545))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^216.3)) :named ax_3546))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^216.3)) :named ax_3547))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^218.34)) :named ax_3548))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^218.34)) :named ax_3549))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^218.43)) :named ax_3550))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^218.43)) :named ax_3551))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^219.3)) :named ax_3552))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^219.3)) :named ax_3553))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^221.5)) :named ax_3554))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^221.5)) :named ax_3555))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^224.32)) :named ax_3556))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^224.32)) :named ax_3557))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^226.9)) :named ax_3558))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^226.9)) :named ax_3559))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^228.9)) :named ax_3560))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^228.9)) :named ax_3561))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^231.3)) :named ax_3562))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^231.3)) :named ax_3563))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^232.3)) :named ax_3564))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^232.3)) :named ax_3565))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^233.19)) :named ax_3566))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^233.19)) :named ax_3567))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^233.43)) :named ax_3568))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^233.43)) :named ax_3569))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^239.5)) :named ax_3570))
   (assert (! (not (= $@tok$1^240.15 $@tok$1^239.5)) :named ax_3571))
   (assert (! (not (= $@tok$1^240.15 $@tok$2^0.0)) :named ax_3572))
   (assert (! (not (= $@tok$1^240.5 $@file^?3Cno?20file?3E)) :named ax_3573))
   (assert (! (not (= $@tok$1^240.5 $@file^?3Cno?20file?3E)) :named ax_3574))
   (assert (! (not (= $@tok$1^240.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3575))
   (assert (! (not (= $@tok$1^240.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3576))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@47)) :named ax_3577))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@47)) :named ax_3578))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@50)) :named ax_3579))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@50)) :named ax_3580))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@53)) :named ax_3581))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@53)) :named ax_3582))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@56)) :named ax_3583))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@56)) :named ax_3584))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@59)) :named ax_3585))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@59)) :named ax_3586))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@62)) :named ax_3587))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@62)) :named ax_3588))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@65)) :named ax_3589))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@65)) :named ax_3590))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@68)) :named ax_3591))
   (assert (! (not (= $@tok$1^240.5 $@loc.owns@68)) :named ax_3592))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@45)) :named ax_3593))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@45)) :named ax_3594))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@46)) :named ax_3595))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@46)) :named ax_3596))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@48)) :named ax_3597))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@48)) :named ax_3598))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@49)) :named ax_3599))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@49)) :named ax_3600))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@51)) :named ax_3601))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@51)) :named ax_3602))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@52)) :named ax_3603))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@52)) :named ax_3604))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@54)) :named ax_3605))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@54)) :named ax_3606))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@57)) :named ax_3607))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@57)) :named ax_3608))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@58)) :named ax_3609))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@58)) :named ax_3610))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@60)) :named ax_3611))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@60)) :named ax_3612))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@63)) :named ax_3613))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@63)) :named ax_3614))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@66)) :named ax_3615))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@66)) :named ax_3616))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@69)) :named ax_3617))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@69)) :named ax_3618))
   (assert (! (not (= $@tok$1^240.5 $@loc.prestate@70)) :named ax_3619))
   (assert (! (not (= $@tok$1^240.5 $@loc.res_lambda@8@21)) :named ax_3620))
   (assert (! (not (= $@tok$1^240.5 $@loc.res_lambda@8@21)) :named ax_3621))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@55)) :named ax_3622))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@55)) :named ax_3623))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@61)) :named ax_3624))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@61)) :named ax_3625))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@64)) :named ax_3626))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@64)) :named ax_3627))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@67)) :named ax_3628))
   (assert (! (not (= $@tok$1^240.5 $@loc.staticWrapState@67)) :named ax_3629))
   (assert (! (not (= $@tok$1^240.5 $@loc.t)) :named ax_3630))
   (assert (! (not (= $@tok$1^240.5 $@loc.t)) :named ax_3631))
   (assert (! (not (= $@tok$1^240.5 $@loc.x)) :named ax_3632))
   (assert (! (not (= $@tok$1^240.5 $@loc.x)) :named ax_3633))
   (assert (! (not (= $@tok$1^240.5 $@loc.y)) :named ax_3634))
   (assert (! (not (= $@tok$1^240.5 $@loc.y)) :named ax_3635))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^203.1)) :named ax_3636))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^203.1)) :named ax_3637))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^209.3)) :named ax_3638))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^209.3)) :named ax_3639))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^211.19)) :named ax_3640))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^211.19)) :named ax_3641))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^212.53)) :named ax_3642))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^212.53)) :named ax_3643))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^213.3)) :named ax_3644))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^213.3)) :named ax_3645))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^214.53)) :named ax_3646))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^214.53)) :named ax_3647))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^216.3)) :named ax_3648))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^216.3)) :named ax_3649))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^218.34)) :named ax_3650))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^218.34)) :named ax_3651))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^218.43)) :named ax_3652))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^218.43)) :named ax_3653))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^219.3)) :named ax_3654))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^219.3)) :named ax_3655))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^221.5)) :named ax_3656))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^221.5)) :named ax_3657))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^224.32)) :named ax_3658))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^224.32)) :named ax_3659))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^226.9)) :named ax_3660))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^226.9)) :named ax_3661))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^228.9)) :named ax_3662))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^228.9)) :named ax_3663))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^231.3)) :named ax_3664))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^231.3)) :named ax_3665))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^232.3)) :named ax_3666))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^232.3)) :named ax_3667))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^233.19)) :named ax_3668))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^233.19)) :named ax_3669))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^233.43)) :named ax_3670))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^233.43)) :named ax_3671))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^239.5)) :named ax_3672))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^239.5)) :named ax_3673))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^240.15)) :named ax_3674))
   (assert (! (not (= $@tok$1^240.5 $@tok$1^240.15)) :named ax_3675))
   (assert (! (not (= $@tok$1^240.5 $@tok$2^0.0)) :named ax_3676))
   (assert (! (not (= $@tok$1^243.19 $@file^?3Cno?20file?3E)) :named ax_3677))
   (assert (! (not (= $@tok$1^243.19 $@file^?3Cno?20file?3E)) :named ax_3678))
   (assert (! (not (= $@tok$1^243.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3679))
   (assert (! (not (= $@tok$1^243.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3680))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@47)) :named ax_3681))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@47)) :named ax_3682))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@50)) :named ax_3683))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@50)) :named ax_3684))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@53)) :named ax_3685))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@53)) :named ax_3686))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@56)) :named ax_3687))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@56)) :named ax_3688))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@59)) :named ax_3689))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@59)) :named ax_3690))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@62)) :named ax_3691))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@62)) :named ax_3692))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@65)) :named ax_3693))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@65)) :named ax_3694))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@68)) :named ax_3695))
   (assert (! (not (= $@tok$1^243.19 $@loc.owns@68)) :named ax_3696))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@45)) :named ax_3697))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@45)) :named ax_3698))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@46)) :named ax_3699))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@46)) :named ax_3700))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@48)) :named ax_3701))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@48)) :named ax_3702))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@49)) :named ax_3703))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@49)) :named ax_3704))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@51)) :named ax_3705))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@51)) :named ax_3706))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@52)) :named ax_3707))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@52)) :named ax_3708))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@54)) :named ax_3709))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@54)) :named ax_3710))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@57)) :named ax_3711))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@57)) :named ax_3712))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@58)) :named ax_3713))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@58)) :named ax_3714))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@60)) :named ax_3715))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@60)) :named ax_3716))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@63)) :named ax_3717))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@63)) :named ax_3718))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@66)) :named ax_3719))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@66)) :named ax_3720))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@69)) :named ax_3721))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@69)) :named ax_3722))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@70)) :named ax_3723))
   (assert (! (not (= $@tok$1^243.19 $@loc.prestate@70)) :named ax_3724))
   (assert (! (not (= $@tok$1^243.19 $@loc.res_lambda@8@21)) :named ax_3725))
   (assert (! (not (= $@tok$1^243.19 $@loc.res_lambda@8@21)) :named ax_3726))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@55)) :named ax_3727))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@55)) :named ax_3728))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@61)) :named ax_3729))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@61)) :named ax_3730))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@64)) :named ax_3731))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@64)) :named ax_3732))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@67)) :named ax_3733))
   (assert (! (not (= $@tok$1^243.19 $@loc.staticWrapState@67)) :named ax_3734))
   (assert (! (not (= $@tok$1^243.19 $@loc.t)) :named ax_3735))
   (assert (! (not (= $@tok$1^243.19 $@loc.t)) :named ax_3736))
   (assert (! (not (= $@tok$1^243.19 $@loc.x)) :named ax_3737))
   (assert (! (not (= $@tok$1^243.19 $@loc.x)) :named ax_3738))
   (assert (! (not (= $@tok$1^243.19 $@loc.y)) :named ax_3739))
   (assert (! (not (= $@tok$1^243.19 $@loc.y)) :named ax_3740))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^203.1)) :named ax_3741))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^203.1)) :named ax_3742))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^209.3)) :named ax_3743))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^209.3)) :named ax_3744))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^211.19)) :named ax_3745))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^211.19)) :named ax_3746))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^212.53)) :named ax_3747))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^212.53)) :named ax_3748))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^213.3)) :named ax_3749))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^213.3)) :named ax_3750))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^214.53)) :named ax_3751))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^214.53)) :named ax_3752))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^216.3)) :named ax_3753))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^216.3)) :named ax_3754))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^218.34)) :named ax_3755))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^218.34)) :named ax_3756))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^218.43)) :named ax_3757))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^218.43)) :named ax_3758))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^219.3)) :named ax_3759))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^219.3)) :named ax_3760))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^221.5)) :named ax_3761))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^221.5)) :named ax_3762))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^224.32)) :named ax_3763))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^224.32)) :named ax_3764))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^226.9)) :named ax_3765))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^226.9)) :named ax_3766))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^228.9)) :named ax_3767))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^228.9)) :named ax_3768))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^231.3)) :named ax_3769))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^231.3)) :named ax_3770))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^232.3)) :named ax_3771))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^232.3)) :named ax_3772))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^233.19)) :named ax_3773))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^233.19)) :named ax_3774))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^233.43)) :named ax_3775))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^233.43)) :named ax_3776))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^239.5)) :named ax_3777))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^239.5)) :named ax_3778))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^240.15)) :named ax_3779))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^240.15)) :named ax_3780))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^240.5)) :named ax_3781))
   (assert (! (not (= $@tok$1^243.19 $@tok$1^240.5)) :named ax_3782))
   (assert (! (not (= $@tok$1^243.19 $@tok$2^0.0)) :named ax_3783))
   (assert (! (not (= $@tok$2^0.0 $@file^?3Cno?20file?3E)) :named ax_3784))
   (assert (! (not (= $@tok$2^0.0 $@file^?3Cno?20file?3E)) :named ax_3785))
   (assert (! (not (= $@tok$2^0.0 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3786))
   (assert (! (not (= $@tok$2^0.0 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3787))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@47)) :named ax_3788))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@50)) :named ax_3789))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@53)) :named ax_3790))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@56)) :named ax_3791))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@59)) :named ax_3792))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@62)) :named ax_3793))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@65)) :named ax_3794))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@68)) :named ax_3795))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@45)) :named ax_3796))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@46)) :named ax_3797))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@48)) :named ax_3798))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@49)) :named ax_3799))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@51)) :named ax_3800))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@52)) :named ax_3801))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@54)) :named ax_3802))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@57)) :named ax_3803))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@58)) :named ax_3804))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@60)) :named ax_3805))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@63)) :named ax_3806))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@66)) :named ax_3807))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@69)) :named ax_3808))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@70)) :named ax_3809))
   (assert (! (not (= $@tok$2^0.0 $@loc.res_lambda@8@21)) :named ax_3810))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@55)) :named ax_3811))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@61)) :named ax_3812))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@64)) :named ax_3813))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@67)) :named ax_3814))
   (assert (! (not (= $@tok$2^0.0 $@loc.t)) :named ax_3815))
   (assert (! (not (= $@tok$2^0.0 $@loc.t)) :named ax_3816))
   (assert (! (not (= $@tok$2^0.0 $@loc.x)) :named ax_3817))
   (assert (! (not (= $@tok$2^0.0 $@loc.y)) :named ax_3818))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^203.1)) :named ax_3819))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^209.3)) :named ax_3820))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^211.19)) :named ax_3821))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^212.53)) :named ax_3822))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^213.3)) :named ax_3823))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^214.53)) :named ax_3824))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^216.3)) :named ax_3825))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^218.34)) :named ax_3826))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^218.43)) :named ax_3827))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^219.3)) :named ax_3828))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^221.5)) :named ax_3829))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^224.32)) :named ax_3830))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^226.9)) :named ax_3831))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^228.9)) :named ax_3832))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^231.3)) :named ax_3833))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^232.3)) :named ax_3834))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^233.19)) :named ax_3835))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^233.43)) :named ax_3836))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^239.5)) :named ax_3837))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^240.15)) :named ax_3838))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^240.5)) :named ax_3839))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^243.19)) :named ax_3840))
   (assert (! (not (= $kind_array $kind_thread)) :named ax_3841))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_3842))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_3843))
   (assert (! (not (= $kind_composite $kind_primitive)) :named ax_3844))
   (assert (! (not (= $kind_composite $kind_thread)) :named ax_3845))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_3846))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_3847))
   (assert (! (not (= $kind_primitive $kind_composite)) :named ax_3848))
   (assert (! (not (= $kind_primitive $kind_thread)) :named ax_3849))
   (assert (! (not (= $kind_thread $kind_array)) :named ax_3850))
   (assert (! (not (= $kind_thread $kind_composite)) :named ax_3851))
   (assert (! (not (= $kind_thread $kind_primitive)) :named ax_3852))
   (assert (! (not (= $me_ref 0)) :named ax_3853))
   (assert (! (not (= $memory_allocator_type $@distTp1)) :named ax_3854))
   (assert (! (not (= $memory_allocator_type $@distTp2)) :named ax_3855))
   (assert (! (not (= $memory_allocator_type $@distTp3)) :named ax_3856))
   (assert (! (not (= $memory_allocator_type $@distTp4)) :named ax_3857))
   (assert (! (not (= $memory_allocator_type $@distTp5)) :named ax_3858))
   (assert (! (not (= $memory_allocator_type $@distTp6)) :named ax_3859))
   (assert (! (not (= $memory_allocator_type ^$@thread_id)) :named ax_3860))
   (assert (! (not (= $memory_allocator_type ^Node)) :named ax_3861))
   (assert (! (not (= $memory_allocator_type ^Tree)) :named ax_3862))
   (assert (! (not (= ($kind_of ^Tree) $kind_primitive)) :named ax_3863))
   (assert (! (not (= ($ref ($ptr ^Node ($select.mem ($memory $s) ($dot ($ptr ^Node P@x) Node.right)))) ($ref $null))) :named ax_3864))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_3865))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_3866))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_3867))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_3868))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_3869))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_3870))
   (assert (! (not (= ^$@ptrset $@distTp4)) :named ax_3871))
   (assert (! (not (= ^$@ptrset $@distTp4)) :named ax_3872))
   (assert (! (not (= ^$@ptrset $@distTp5)) :named ax_3873))
   (assert (! (not (= ^$@ptrset $@distTp5)) :named ax_3874))
   (assert (! (not (= ^$@ptrset $@distTp6)) :named ax_3875))
   (assert (! (not (= ^$@ptrset $@distTp6)) :named ax_3876))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_3877))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_3878))
   (assert (! (not (= ^$@ptrset ^$@state_t)) :named ax_3879))
   (assert (! (not (= ^$@ptrset ^$@struct)) :named ax_3880))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_3881))
   (assert (! (not (= ^$@ptrset ^Node)) :named ax_3882))
   (assert (! (not (= ^$@ptrset ^Tree)) :named ax_3883))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_3884))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_3885))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_3886))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_3887))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_3888))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_3889))
   (assert (! (not (= ^$@state_t $@distTp4)) :named ax_3890))
   (assert (! (not (= ^$@state_t $@distTp4)) :named ax_3891))
   (assert (! (not (= ^$@state_t $@distTp5)) :named ax_3892))
   (assert (! (not (= ^$@state_t $@distTp5)) :named ax_3893))
   (assert (! (not (= ^$@state_t $@distTp6)) :named ax_3894))
   (assert (! (not (= ^$@state_t $@distTp6)) :named ax_3895))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_3896))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_3897))
   (assert (! (not (= ^$@state_t ^$@ptrset)) :named ax_3898))
   (assert (! (not (= ^$@state_t ^$@struct)) :named ax_3899))
   (assert (! (not (= ^$@state_t ^$@thread_id)) :named ax_3900))
   (assert (! (not (= ^$@state_t ^Node)) :named ax_3901))
   (assert (! (not (= ^$@state_t ^Tree)) :named ax_3902))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_3903))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_3904))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_3905))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_3906))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_3907))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_3908))
   (assert (! (not (= ^$@struct $@distTp4)) :named ax_3909))
   (assert (! (not (= ^$@struct $@distTp4)) :named ax_3910))
   (assert (! (not (= ^$@struct $@distTp5)) :named ax_3911))
   (assert (! (not (= ^$@struct $@distTp5)) :named ax_3912))
   (assert (! (not (= ^$@struct $@distTp6)) :named ax_3913))
   (assert (! (not (= ^$@struct $@distTp6)) :named ax_3914))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_3915))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_3916))
   (assert (! (not (= ^$@struct ^$@ptrset)) :named ax_3917))
   (assert (! (not (= ^$@struct ^$@state_t)) :named ax_3918))
   (assert (! (not (= ^$@struct ^$@thread_id)) :named ax_3919))
   (assert (! (not (= ^$@struct ^Node)) :named ax_3920))
   (assert (! (not (= ^$@struct ^Tree)) :named ax_3921))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_3922))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_3923))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_3924))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_3925))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_3926))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_3927))
   (assert (! (not (= ^$@thread_id $@distTp4)) :named ax_3928))
   (assert (! (not (= ^$@thread_id $@distTp4)) :named ax_3929))
   (assert (! (not (= ^$@thread_id $@distTp5)) :named ax_3930))
   (assert (! (not (= ^$@thread_id $@distTp5)) :named ax_3931))
   (assert (! (not (= ^$@thread_id $@distTp6)) :named ax_3932))
   (assert (! (not (= ^$@thread_id $@distTp6)) :named ax_3933))
   (assert (! (not (= ^$@thread_id $memory_allocator_type)) :named ax_3934))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_3935))
   (assert (! (not (= ^$@thread_id ^$@state_t)) :named ax_3936))
   (assert (! (not (= ^$@thread_id ^$@struct)) :named ax_3937))
   (assert (! (not (= ^$@thread_id ^Node)) :named ax_3938))
   (assert (! (not (= ^$@thread_id ^Tree)) :named ax_3939))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_3940))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_3941))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_3942))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_3943))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_3944))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_3945))
   (assert (! (not (= ^$@thread_id_t $@distTp4)) :named ax_3946))
   (assert (! (not (= ^$@thread_id_t $@distTp4)) :named ax_3947))
   (assert (! (not (= ^$@thread_id_t $@distTp5)) :named ax_3948))
   (assert (! (not (= ^$@thread_id_t $@distTp5)) :named ax_3949))
   (assert (! (not (= ^$@thread_id_t $@distTp6)) :named ax_3950))
   (assert (! (not (= ^$@thread_id_t $@distTp6)) :named ax_3951))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_3952))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_3953))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_3954))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_3955))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_3956))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_3957))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_3958))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_3959))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_3960))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_3961))
   (assert (! (not (= ^$@thread_id_t ^Node)) :named ax_3962))
   (assert (! (not (= ^$@thread_id_t ^Tree)) :named ax_3963))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_3964))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_3965))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_3966))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_3967))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_3968))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_3969))
   (assert (! (not (= ^^bool $@distTp4)) :named ax_3970))
   (assert (! (not (= ^^bool $@distTp4)) :named ax_3971))
   (assert (! (not (= ^^bool $@distTp5)) :named ax_3972))
   (assert (! (not (= ^^bool $@distTp5)) :named ax_3973))
   (assert (! (not (= ^^bool $@distTp6)) :named ax_3974))
   (assert (! (not (= ^^bool $@distTp6)) :named ax_3975))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_3976))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_3977))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_3978))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_3979))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_3980))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_3981))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_3982))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_3983))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_3984))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_3985))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_3986))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_3987))
   (assert (! (not (= ^^bool ^^claim)) :named ax_3988))
   (assert (! (not (= ^^bool ^^f4)) :named ax_3989))
   (assert (! (not (= ^^bool ^^f8)) :named ax_3990))
   (assert (! (not (= ^^bool ^^mathint)) :named ax_3991))
   (assert (! (not (= ^^bool ^^root_emb)) :named ax_3992))
   (assert (! (not (= ^^bool ^Node)) :named ax_3993))
   (assert (! (not (= ^^bool ^Tree)) :named ax_3994))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_3995))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_3996))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_3997))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_3998))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_3999))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_4000))
   (assert (! (not (= ^^claim $@distTp4)) :named ax_4001))
   (assert (! (not (= ^^claim $@distTp4)) :named ax_4002))
   (assert (! (not (= ^^claim $@distTp5)) :named ax_4003))
   (assert (! (not (= ^^claim $@distTp5)) :named ax_4004))
   (assert (! (not (= ^^claim $@distTp6)) :named ax_4005))
   (assert (! (not (= ^^claim $@distTp6)) :named ax_4006))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_4007))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_4008))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_4009))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_4010))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_4011))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_4012))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_4013))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_4014))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_4015))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_4016))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_4017))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_4018))
   (assert (! (not (= ^^claim ^^bool)) :named ax_4019))
   (assert (! (not (= ^^claim ^^mathint)) :named ax_4020))
   (assert (! (not (= ^^claim ^^root_emb)) :named ax_4021))
   (assert (! (not (= ^^claim ^Node)) :named ax_4022))
   (assert (! (not (= ^^claim ^Tree)) :named ax_4023))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_4024))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_4025))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_4026))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_4027))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_4028))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_4029))
   (assert (! (not (= ^^f4 $@distTp4)) :named ax_4030))
   (assert (! (not (= ^^f4 $@distTp4)) :named ax_4031))
   (assert (! (not (= ^^f4 $@distTp5)) :named ax_4032))
   (assert (! (not (= ^^f4 $@distTp5)) :named ax_4033))
   (assert (! (not (= ^^f4 $@distTp6)) :named ax_4034))
   (assert (! (not (= ^^f4 $@distTp6)) :named ax_4035))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_4036))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_4037))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_4038))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_4039))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_4040))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_4041))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_4042))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_4043))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_4044))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_4045))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_4046))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_4047))
   (assert (! (not (= ^^f4 ^^bool)) :named ax_4048))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_4049))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_4050))
   (assert (! (not (= ^^f4 ^^f8)) :named ax_4051))
   (assert (! (not (= ^^f4 ^^mathint)) :named ax_4052))
   (assert (! (not (= ^^f4 ^^root_emb)) :named ax_4053))
   (assert (! (not (= ^^f4 ^Node)) :named ax_4054))
   (assert (! (not (= ^^f4 ^Tree)) :named ax_4055))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_4056))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_4057))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_4058))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_4059))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_4060))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_4061))
   (assert (! (not (= ^^f8 $@distTp4)) :named ax_4062))
   (assert (! (not (= ^^f8 $@distTp4)) :named ax_4063))
   (assert (! (not (= ^^f8 $@distTp5)) :named ax_4064))
   (assert (! (not (= ^^f8 $@distTp5)) :named ax_4065))
   (assert (! (not (= ^^f8 $@distTp6)) :named ax_4066))
   (assert (! (not (= ^^f8 $@distTp6)) :named ax_4067))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_4068))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_4069))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_4070))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_4071))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_4072))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_4073))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_4074))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_4075))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_4076))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_4077))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_4078))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_4079))
   (assert (! (not (= ^^f8 ^^bool)) :named ax_4080))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_4081))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_4082))
   (assert (! (not (= ^^f8 ^^f4)) :named ax_4083))
   (assert (! (not (= ^^f8 ^^mathint)) :named ax_4084))
   (assert (! (not (= ^^f8 ^^root_emb)) :named ax_4085))
   (assert (! (not (= ^^f8 ^Node)) :named ax_4086))
   (assert (! (not (= ^^f8 ^Tree)) :named ax_4087))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_4088))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_4089))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_4090))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_4091))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_4092))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_4093))
   (assert (! (not (= ^^i1 $@distTp4)) :named ax_4094))
   (assert (! (not (= ^^i1 $@distTp4)) :named ax_4095))
   (assert (! (not (= ^^i1 $@distTp5)) :named ax_4096))
   (assert (! (not (= ^^i1 $@distTp5)) :named ax_4097))
   (assert (! (not (= ^^i1 $@distTp6)) :named ax_4098))
   (assert (! (not (= ^^i1 $@distTp6)) :named ax_4099))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_4100))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_4101))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_4102))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_4103))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_4104))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_4105))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_4106))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_4107))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_4108))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_4109))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_4110))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_4111))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_4112))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_4113))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_4114))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_4115))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_4116))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_4117))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_4118))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_4119))
   (assert (! (not (= ^^i1 ^^i2)) :named ax_4120))
   (assert (! (not (= ^^i1 ^^i4)) :named ax_4121))
   (assert (! (not (= ^^i1 ^^i8)) :named ax_4122))
   (assert (! (not (= ^^i1 ^^mathint)) :named ax_4123))
   (assert (! (not (= ^^i1 ^^root_emb)) :named ax_4124))
   (assert (! (not (= ^^i1 ^^u1)) :named ax_4125))
   (assert (! (not (= ^^i1 ^^u2)) :named ax_4126))
   (assert (! (not (= ^^i1 ^^u4)) :named ax_4127))
   (assert (! (not (= ^^i1 ^^u8)) :named ax_4128))
   (assert (! (not (= ^^i1 ^^void)) :named ax_4129))
   (assert (! (not (= ^^i1 ^Node)) :named ax_4130))
   (assert (! (not (= ^^i1 ^Tree)) :named ax_4131))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_4132))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_4133))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_4134))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_4135))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_4136))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_4137))
   (assert (! (not (= ^^i2 $@distTp4)) :named ax_4138))
   (assert (! (not (= ^^i2 $@distTp4)) :named ax_4139))
   (assert (! (not (= ^^i2 $@distTp5)) :named ax_4140))
   (assert (! (not (= ^^i2 $@distTp5)) :named ax_4141))
   (assert (! (not (= ^^i2 $@distTp6)) :named ax_4142))
   (assert (! (not (= ^^i2 $@distTp6)) :named ax_4143))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_4144))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_4145))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_4146))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_4147))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_4148))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_4149))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_4150))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_4151))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_4152))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_4153))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_4154))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_4155))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_4156))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_4157))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_4158))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_4159))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_4160))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_4161))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_4162))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_4163))
   (assert (! (not (= ^^i2 ^^i1)) :named ax_4164))
   (assert (! (not (= ^^i2 ^^i4)) :named ax_4165))
   (assert (! (not (= ^^i2 ^^i8)) :named ax_4166))
   (assert (! (not (= ^^i2 ^^mathint)) :named ax_4167))
   (assert (! (not (= ^^i2 ^^root_emb)) :named ax_4168))
   (assert (! (not (= ^^i2 ^^u1)) :named ax_4169))
   (assert (! (not (= ^^i2 ^^u2)) :named ax_4170))
   (assert (! (not (= ^^i2 ^^u4)) :named ax_4171))
   (assert (! (not (= ^^i2 ^^u8)) :named ax_4172))
   (assert (! (not (= ^^i2 ^^void)) :named ax_4173))
   (assert (! (not (= ^^i2 ^Node)) :named ax_4174))
   (assert (! (not (= ^^i2 ^Tree)) :named ax_4175))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_4176))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_4177))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_4178))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_4179))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_4180))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_4181))
   (assert (! (not (= ^^i4 $@distTp4)) :named ax_4182))
   (assert (! (not (= ^^i4 $@distTp4)) :named ax_4183))
   (assert (! (not (= ^^i4 $@distTp5)) :named ax_4184))
   (assert (! (not (= ^^i4 $@distTp5)) :named ax_4185))
   (assert (! (not (= ^^i4 $@distTp6)) :named ax_4186))
   (assert (! (not (= ^^i4 $@distTp6)) :named ax_4187))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_4188))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_4189))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_4190))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_4191))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_4192))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_4193))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_4194))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_4195))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_4196))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_4197))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_4198))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_4199))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_4200))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_4201))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_4202))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_4203))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_4204))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_4205))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_4206))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_4207))
   (assert (! (not (= ^^i4 ^^i1)) :named ax_4208))
   (assert (! (not (= ^^i4 ^^i2)) :named ax_4209))
   (assert (! (not (= ^^i4 ^^i8)) :named ax_4210))
   (assert (! (not (= ^^i4 ^^mathint)) :named ax_4211))
   (assert (! (not (= ^^i4 ^^root_emb)) :named ax_4212))
   (assert (! (not (= ^^i4 ^^u1)) :named ax_4213))
   (assert (! (not (= ^^i4 ^^u2)) :named ax_4214))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_4215))
   (assert (! (not (= ^^i4 ^^u8)) :named ax_4216))
   (assert (! (not (= ^^i4 ^^void)) :named ax_4217))
   (assert (! (not (= ^^i4 ^Node)) :named ax_4218))
   (assert (! (not (= ^^i4 ^Tree)) :named ax_4219))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_4220))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_4221))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_4222))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_4223))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_4224))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_4225))
   (assert (! (not (= ^^i8 $@distTp4)) :named ax_4226))
   (assert (! (not (= ^^i8 $@distTp4)) :named ax_4227))
   (assert (! (not (= ^^i8 $@distTp5)) :named ax_4228))
   (assert (! (not (= ^^i8 $@distTp5)) :named ax_4229))
   (assert (! (not (= ^^i8 $@distTp6)) :named ax_4230))
   (assert (! (not (= ^^i8 $@distTp6)) :named ax_4231))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_4232))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_4233))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_4234))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_4235))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_4236))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_4237))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_4238))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_4239))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_4240))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_4241))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_4242))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_4243))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_4244))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_4245))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_4246))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_4247))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_4248))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_4249))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_4250))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_4251))
   (assert (! (not (= ^^i8 ^^i1)) :named ax_4252))
   (assert (! (not (= ^^i8 ^^i2)) :named ax_4253))
   (assert (! (not (= ^^i8 ^^i4)) :named ax_4254))
   (assert (! (not (= ^^i8 ^^mathint)) :named ax_4255))
   (assert (! (not (= ^^i8 ^^root_emb)) :named ax_4256))
   (assert (! (not (= ^^i8 ^^u1)) :named ax_4257))
   (assert (! (not (= ^^i8 ^^u2)) :named ax_4258))
   (assert (! (not (= ^^i8 ^^u4)) :named ax_4259))
   (assert (! (not (= ^^i8 ^^u8)) :named ax_4260))
   (assert (! (not (= ^^i8 ^^void)) :named ax_4261))
   (assert (! (not (= ^^i8 ^Node)) :named ax_4262))
   (assert (! (not (= ^^i8 ^Tree)) :named ax_4263))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_4264))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_4265))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_4266))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_4267))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_4268))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_4269))
   (assert (! (not (= ^^mathint $@distTp4)) :named ax_4270))
   (assert (! (not (= ^^mathint $@distTp4)) :named ax_4271))
   (assert (! (not (= ^^mathint $@distTp5)) :named ax_4272))
   (assert (! (not (= ^^mathint $@distTp5)) :named ax_4273))
   (assert (! (not (= ^^mathint $@distTp6)) :named ax_4274))
   (assert (! (not (= ^^mathint $@distTp6)) :named ax_4275))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_4276))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_4277))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_4278))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_4279))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_4280))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_4281))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_4282))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_4283))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_4284))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_4285))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_4286))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_4287))
   (assert (! (not (= ^^mathint ^^bool)) :named ax_4288))
   (assert (! (not (= ^^mathint ^^claim)) :named ax_4289))
   (assert (! (not (= ^^mathint ^^f4)) :named ax_4290))
   (assert (! (not (= ^^mathint ^^f8)) :named ax_4291))
   (assert (! (not (= ^^mathint ^^i1)) :named ax_4292))
   (assert (! (not (= ^^mathint ^^i2)) :named ax_4293))
   (assert (! (not (= ^^mathint ^^i4)) :named ax_4294))
   (assert (! (not (= ^^mathint ^^i8)) :named ax_4295))
   (assert (! (not (= ^^mathint ^Node)) :named ax_4296))
   (assert (! (not (= ^^mathint ^Tree)) :named ax_4297))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_4298))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_4299))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_4300))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_4301))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_4302))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_4303))
   (assert (! (not (= ^^root_emb $@distTp4)) :named ax_4304))
   (assert (! (not (= ^^root_emb $@distTp4)) :named ax_4305))
   (assert (! (not (= ^^root_emb $@distTp5)) :named ax_4306))
   (assert (! (not (= ^^root_emb $@distTp5)) :named ax_4307))
   (assert (! (not (= ^^root_emb $@distTp6)) :named ax_4308))
   (assert (! (not (= ^^root_emb $@distTp6)) :named ax_4309))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_4310))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_4311))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_4312))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_4313))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_4314))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_4315))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_4316))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_4317))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_4318))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_4319))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_4320))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_4321))
   (assert (! (not (= ^^root_emb ^^bool)) :named ax_4322))
   (assert (! (not (= ^^root_emb ^^claim)) :named ax_4323))
   (assert (! (not (= ^^root_emb ^^f4)) :named ax_4324))
   (assert (! (not (= ^^root_emb ^^f8)) :named ax_4325))
   (assert (! (not (= ^^root_emb ^^i1)) :named ax_4326))
   (assert (! (not (= ^^root_emb ^^i2)) :named ax_4327))
   (assert (! (not (= ^^root_emb ^^i4)) :named ax_4328))
   (assert (! (not (= ^^root_emb ^^i8)) :named ax_4329))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_4330))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_4331))
   (assert (! (not (= ^^root_emb ^Node)) :named ax_4332))
   (assert (! (not (= ^^root_emb ^Tree)) :named ax_4333))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_4334))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_4335))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_4336))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_4337))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_4338))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_4339))
   (assert (! (not (= ^^u1 $@distTp4)) :named ax_4340))
   (assert (! (not (= ^^u1 $@distTp4)) :named ax_4341))
   (assert (! (not (= ^^u1 $@distTp5)) :named ax_4342))
   (assert (! (not (= ^^u1 $@distTp5)) :named ax_4343))
   (assert (! (not (= ^^u1 $@distTp6)) :named ax_4344))
   (assert (! (not (= ^^u1 $@distTp6)) :named ax_4345))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_4346))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_4347))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_4348))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_4349))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_4350))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_4351))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_4352))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_4353))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_4354))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_4355))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_4356))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_4357))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_4358))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_4359))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_4360))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_4361))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_4362))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_4363))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_4364))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_4365))
   (assert (! (not (= ^^u1 ^^i1)) :named ax_4366))
   (assert (! (not (= ^^u1 ^^i2)) :named ax_4367))
   (assert (! (not (= ^^u1 ^^i4)) :named ax_4368))
   (assert (! (not (= ^^u1 ^^i8)) :named ax_4369))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_4370))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_4371))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_4372))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_4373))
   (assert (! (not (= ^^u1 ^^u2)) :named ax_4374))
   (assert (! (not (= ^^u1 ^^u4)) :named ax_4375))
   (assert (! (not (= ^^u1 ^^u8)) :named ax_4376))
   (assert (! (not (= ^^u1 ^^void)) :named ax_4377))
   (assert (! (not (= ^^u1 ^Node)) :named ax_4378))
   (assert (! (not (= ^^u1 ^Tree)) :named ax_4379))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_4380))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_4381))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_4382))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_4383))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_4384))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_4385))
   (assert (! (not (= ^^u2 $@distTp4)) :named ax_4386))
   (assert (! (not (= ^^u2 $@distTp4)) :named ax_4387))
   (assert (! (not (= ^^u2 $@distTp5)) :named ax_4388))
   (assert (! (not (= ^^u2 $@distTp5)) :named ax_4389))
   (assert (! (not (= ^^u2 $@distTp6)) :named ax_4390))
   (assert (! (not (= ^^u2 $@distTp6)) :named ax_4391))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_4392))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_4393))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_4394))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_4395))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_4396))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_4397))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_4398))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_4399))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_4400))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_4401))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_4402))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_4403))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_4404))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_4405))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_4406))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_4407))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_4408))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_4409))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_4410))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_4411))
   (assert (! (not (= ^^u2 ^^i1)) :named ax_4412))
   (assert (! (not (= ^^u2 ^^i2)) :named ax_4413))
   (assert (! (not (= ^^u2 ^^i4)) :named ax_4414))
   (assert (! (not (= ^^u2 ^^i8)) :named ax_4415))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_4416))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_4417))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_4418))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_4419))
   (assert (! (not (= ^^u2 ^^u1)) :named ax_4420))
   (assert (! (not (= ^^u2 ^^u4)) :named ax_4421))
   (assert (! (not (= ^^u2 ^^u8)) :named ax_4422))
   (assert (! (not (= ^^u2 ^^void)) :named ax_4423))
   (assert (! (not (= ^^u2 ^Node)) :named ax_4424))
   (assert (! (not (= ^^u2 ^Tree)) :named ax_4425))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_4426))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_4427))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_4428))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_4429))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_4430))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_4431))
   (assert (! (not (= ^^u4 $@distTp4)) :named ax_4432))
   (assert (! (not (= ^^u4 $@distTp4)) :named ax_4433))
   (assert (! (not (= ^^u4 $@distTp5)) :named ax_4434))
   (assert (! (not (= ^^u4 $@distTp5)) :named ax_4435))
   (assert (! (not (= ^^u4 $@distTp6)) :named ax_4436))
   (assert (! (not (= ^^u4 $@distTp6)) :named ax_4437))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_4438))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_4439))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_4440))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_4441))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_4442))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_4443))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_4444))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_4445))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_4446))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_4447))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_4448))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_4449))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_4450))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_4451))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_4452))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_4453))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_4454))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_4455))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_4456))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_4457))
   (assert (! (not (= ^^u4 ^^i1)) :named ax_4458))
   (assert (! (not (= ^^u4 ^^i2)) :named ax_4459))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_4460))
   (assert (! (not (= ^^u4 ^^i8)) :named ax_4461))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_4462))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_4463))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_4464))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_4465))
   (assert (! (not (= ^^u4 ^^u1)) :named ax_4466))
   (assert (! (not (= ^^u4 ^^u2)) :named ax_4467))
   (assert (! (not (= ^^u4 ^^u8)) :named ax_4468))
   (assert (! (not (= ^^u4 ^^void)) :named ax_4469))
   (assert (! (not (= ^^u4 ^Node)) :named ax_4470))
   (assert (! (not (= ^^u4 ^Tree)) :named ax_4471))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_4472))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_4473))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_4474))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_4475))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_4476))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_4477))
   (assert (! (not (= ^^u8 $@distTp4)) :named ax_4478))
   (assert (! (not (= ^^u8 $@distTp4)) :named ax_4479))
   (assert (! (not (= ^^u8 $@distTp5)) :named ax_4480))
   (assert (! (not (= ^^u8 $@distTp5)) :named ax_4481))
   (assert (! (not (= ^^u8 $@distTp6)) :named ax_4482))
   (assert (! (not (= ^^u8 $@distTp6)) :named ax_4483))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_4484))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_4485))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_4486))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_4487))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_4488))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_4489))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_4490))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_4491))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_4492))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_4493))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_4494))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_4495))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_4496))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_4497))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_4498))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_4499))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_4500))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_4501))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_4502))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_4503))
   (assert (! (not (= ^^u8 ^^i1)) :named ax_4504))
   (assert (! (not (= ^^u8 ^^i2)) :named ax_4505))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_4506))
   (assert (! (not (= ^^u8 ^^i8)) :named ax_4507))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_4508))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_4509))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_4510))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_4511))
   (assert (! (not (= ^^u8 ^^u1)) :named ax_4512))
   (assert (! (not (= ^^u8 ^^u2)) :named ax_4513))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_4514))
   (assert (! (not (= ^^u8 ^^void)) :named ax_4515))
   (assert (! (not (= ^^u8 ^Node)) :named ax_4516))
   (assert (! (not (= ^^u8 ^Tree)) :named ax_4517))
   (assert (! (not (= ^^void $@distTp1)) :named ax_4518))
   (assert (! (not (= ^^void $@distTp1)) :named ax_4519))
   (assert (! (not (= ^^void $@distTp2)) :named ax_4520))
   (assert (! (not (= ^^void $@distTp2)) :named ax_4521))
   (assert (! (not (= ^^void $@distTp3)) :named ax_4522))
   (assert (! (not (= ^^void $@distTp3)) :named ax_4523))
   (assert (! (not (= ^^void $@distTp4)) :named ax_4524))
   (assert (! (not (= ^^void $@distTp4)) :named ax_4525))
   (assert (! (not (= ^^void $@distTp5)) :named ax_4526))
   (assert (! (not (= ^^void $@distTp5)) :named ax_4527))
   (assert (! (not (= ^^void $@distTp6)) :named ax_4528))
   (assert (! (not (= ^^void $@distTp6)) :named ax_4529))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_4530))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_4531))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_4532))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_4533))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_4534))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_4535))
   (assert (! (not (= ^^void ^$@struct)) :named ax_4536))
   (assert (! (not (= ^^void ^$@struct)) :named ax_4537))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_4538))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_4539))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_4540))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_4541))
   (assert (! (not (= ^^void ^^bool)) :named ax_4542))
   (assert (! (not (= ^^void ^^bool)) :named ax_4543))
   (assert (! (not (= ^^void ^^claim)) :named ax_4544))
   (assert (! (not (= ^^void ^^claim)) :named ax_4545))
   (assert (! (not (= ^^void ^^f4)) :named ax_4546))
   (assert (! (not (= ^^void ^^f4)) :named ax_4547))
   (assert (! (not (= ^^void ^^f8)) :named ax_4548))
   (assert (! (not (= ^^void ^^f8)) :named ax_4549))
   (assert (! (not (= ^^void ^^i1)) :named ax_4550))
   (assert (! (not (= ^^void ^^i2)) :named ax_4551))
   (assert (! (not (= ^^void ^^i4)) :named ax_4552))
   (assert (! (not (= ^^void ^^i8)) :named ax_4553))
   (assert (! (not (= ^^void ^^mathint)) :named ax_4554))
   (assert (! (not (= ^^void ^^mathint)) :named ax_4555))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_4556))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_4557))
   (assert (! (not (= ^^void ^^u1)) :named ax_4558))
   (assert (! (not (= ^^void ^^u2)) :named ax_4559))
   (assert (! (not (= ^^void ^^u4)) :named ax_4560))
   (assert (! (not (= ^^void ^^u8)) :named ax_4561))
   (assert (! (not (= ^^void ^Node)) :named ax_4562))
   (assert (! (not (= ^^void ^Tree)) :named ax_4563))
   (assert (! (not (= ^Node $@distTp1)) :named ax_4564))
   (assert (! (not (= ^Node $@distTp1)) :named ax_4565))
   (assert (! (not (= ^Node $@distTp2)) :named ax_4566))
   (assert (! (not (= ^Node $@distTp2)) :named ax_4567))
   (assert (! (not (= ^Node $@distTp3)) :named ax_4568))
   (assert (! (not (= ^Node $@distTp3)) :named ax_4569))
   (assert (! (not (= ^Node $@distTp4)) :named ax_4570))
   (assert (! (not (= ^Node $@distTp4)) :named ax_4571))
   (assert (! (not (= ^Node $@distTp5)) :named ax_4572))
   (assert (! (not (= ^Node $@distTp5)) :named ax_4573))
   (assert (! (not (= ^Node $@distTp6)) :named ax_4574))
   (assert (! (not (= ^Node $@distTp6)) :named ax_4575))
   (assert (! (not (= ^Node $memory_allocator_type)) :named ax_4576))
   (assert (! (not (= ^Node ^$@ptrset)) :named ax_4577))
   (assert (! (not (= ^Node ^$@state_t)) :named ax_4578))
   (assert (! (not (= ^Node ^$@struct)) :named ax_4579))
   (assert (! (not (= ^Node ^$@thread_id)) :named ax_4580))
   (assert (! (not (= ^Node ^$@thread_id_t)) :named ax_4581))
   (assert (! (not (= ^Node ^^bool)) :named ax_4582))
   (assert (! (not (= ^Node ^^claim)) :named ax_4583))
   (assert (! (not (= ^Node ^^f4)) :named ax_4584))
   (assert (! (not (= ^Node ^^f8)) :named ax_4585))
   (assert (! (not (= ^Node ^^i1)) :named ax_4586))
   (assert (! (not (= ^Node ^^i2)) :named ax_4587))
   (assert (! (not (= ^Node ^^i4)) :named ax_4588))
   (assert (! (not (= ^Node ^^i8)) :named ax_4589))
   (assert (! (not (= ^Node ^^mathint)) :named ax_4590))
   (assert (! (not (= ^Node ^^root_emb)) :named ax_4591))
   (assert (! (not (= ^Node ^^u1)) :named ax_4592))
   (assert (! (not (= ^Node ^^u2)) :named ax_4593))
   (assert (! (not (= ^Node ^^u4)) :named ax_4594))
   (assert (! (not (= ^Node ^^u8)) :named ax_4595))
   (assert (! (not (= ^Node ^^void)) :named ax_4596))
   (assert (! (not (= ^Node ^Tree)) :named ax_4597))
   (assert (! (not (= ^Tree $@distTp1)) :named ax_4598))
   (assert (! (not (= ^Tree $@distTp1)) :named ax_4599))
   (assert (! (not (= ^Tree $@distTp2)) :named ax_4600))
   (assert (! (not (= ^Tree $@distTp2)) :named ax_4601))
   (assert (! (not (= ^Tree $@distTp3)) :named ax_4602))
   (assert (! (not (= ^Tree $@distTp3)) :named ax_4603))
   (assert (! (not (= ^Tree $@distTp4)) :named ax_4604))
   (assert (! (not (= ^Tree $@distTp4)) :named ax_4605))
   (assert (! (not (= ^Tree $@distTp5)) :named ax_4606))
   (assert (! (not (= ^Tree $@distTp5)) :named ax_4607))
   (assert (! (not (= ^Tree $@distTp6)) :named ax_4608))
   (assert (! (not (= ^Tree $@distTp6)) :named ax_4609))
   (assert (! (not (= ^Tree $memory_allocator_type)) :named ax_4610))
   (assert (! (not (= ^Tree ^$@ptrset)) :named ax_4611))
   (assert (! (not (= ^Tree ^$@state_t)) :named ax_4612))
   (assert (! (not (= ^Tree ^$@struct)) :named ax_4613))
   (assert (! (not (= ^Tree ^$@thread_id)) :named ax_4614))
   (assert (! (not (= ^Tree ^$@thread_id_t)) :named ax_4615))
   (assert (! (not (= ^Tree ^^bool)) :named ax_4616))
   (assert (! (not (= ^Tree ^^claim)) :named ax_4617))
   (assert (! (not (= ^Tree ^^f4)) :named ax_4618))
   (assert (! (not (= ^Tree ^^f8)) :named ax_4619))
   (assert (! (not (= ^Tree ^^i1)) :named ax_4620))
   (assert (! (not (= ^Tree ^^i2)) :named ax_4621))
   (assert (! (not (= ^Tree ^^i4)) :named ax_4622))
   (assert (! (not (= ^Tree ^^i8)) :named ax_4623))
   (assert (! (not (= ^Tree ^^mathint)) :named ax_4624))
   (assert (! (not (= ^Tree ^^root_emb)) :named ax_4625))
   (assert (! (not (= ^Tree ^^u1)) :named ax_4626))
   (assert (! (not (= ^Tree ^^u2)) :named ax_4627))
   (assert (! (not (= ^Tree ^^u4)) :named ax_4628))
   (assert (! (not (= ^Tree ^^u8)) :named ax_4629))
   (assert (! (not (= ^Tree ^^void)) :named ax_4630))
   (assert (! (not (= ^Tree ^Node)) :named ax_4631))
   (assert (! (not (= cf@classifier@default cf@doMark)) :named ax_4632))
   (assert (! (not (= cf@classifier@default cf@lambda@1)) :named ax_4633))
   (assert (! (not (= cf@classifier@default cf@lambda@2)) :named ax_4634))
   (assert (! (not (= cf@classifier@default cf@lambda@3)) :named ax_4635))
   (assert (! (not (= cf@classifier@default cf@lambda@4)) :named ax_4636))
   (assert (! (not (= cf@classifier@default cf@lambda@5)) :named ax_4637))
   (assert (! (not (= cf@classifier@default cf@lambda@6)) :named ax_4638))
   (assert (! (not (= cf@classifier@default cf@lambda@7)) :named ax_4639))
   (assert (! (not (= cf@classifier@default cf@lambda@8)) :named ax_4640))
   (assert (! (not (= cf@classifier@default cf@lambda@9)) :named ax_4641))
   (assert (! (not (= cf@classifier@default cf@mark)) :named ax_4642))
   (assert (! (not (= cf@classifier@default cf@mark2)) :named ax_4643))
   (assert (! (not (= cf@doMark cf@classifier@default)) :named ax_4644))
   (assert (! (not (= cf@doMark cf@lambda@1)) :named ax_4645))
   (assert (! (not (= cf@doMark cf@lambda@2)) :named ax_4646))
   (assert (! (not (= cf@doMark cf@lambda@3)) :named ax_4647))
   (assert (! (not (= cf@doMark cf@lambda@4)) :named ax_4648))
   (assert (! (not (= cf@doMark cf@lambda@5)) :named ax_4649))
   (assert (! (not (= cf@doMark cf@lambda@6)) :named ax_4650))
   (assert (! (not (= cf@doMark cf@lambda@7)) :named ax_4651))
   (assert (! (not (= cf@doMark cf@lambda@8)) :named ax_4652))
   (assert (! (not (= cf@doMark cf@lambda@9)) :named ax_4653))
   (assert (! (not (= cf@doMark cf@mark2)) :named ax_4654))
   (assert (! (not (= cf@lambda@1 cf@classifier@default)) :named ax_4655))
   (assert (! (not (= cf@lambda@1 cf@doMark)) :named ax_4656))
   (assert (! (not (= cf@lambda@2 cf@classifier@default)) :named ax_4657))
   (assert (! (not (= cf@lambda@2 cf@doMark)) :named ax_4658))
   (assert (! (not (= cf@lambda@2 cf@lambda@1)) :named ax_4659))
   (assert (! (not (= cf@lambda@2 cf@lambda@1)) :named ax_4660))
   (assert (! (not (= cf@lambda@3 cf@classifier@default)) :named ax_4661))
   (assert (! (not (= cf@lambda@3 cf@doMark)) :named ax_4662))
   (assert (! (not (= cf@lambda@3 cf@lambda@1)) :named ax_4663))
   (assert (! (not (= cf@lambda@3 cf@lambda@1)) :named ax_4664))
   (assert (! (not (= cf@lambda@3 cf@lambda@2)) :named ax_4665))
   (assert (! (not (= cf@lambda@3 cf@lambda@2)) :named ax_4666))
   (assert (! (not (= cf@lambda@4 cf@classifier@default)) :named ax_4667))
   (assert (! (not (= cf@lambda@4 cf@doMark)) :named ax_4668))
   (assert (! (not (= cf@lambda@4 cf@lambda@1)) :named ax_4669))
   (assert (! (not (= cf@lambda@4 cf@lambda@1)) :named ax_4670))
   (assert (! (not (= cf@lambda@4 cf@lambda@2)) :named ax_4671))
   (assert (! (not (= cf@lambda@4 cf@lambda@2)) :named ax_4672))
   (assert (! (not (= cf@lambda@4 cf@lambda@3)) :named ax_4673))
   (assert (! (not (= cf@lambda@4 cf@lambda@3)) :named ax_4674))
   (assert (! (not (= cf@lambda@5 cf@classifier@default)) :named ax_4675))
   (assert (! (not (= cf@lambda@5 cf@doMark)) :named ax_4676))
   (assert (! (not (= cf@lambda@5 cf@lambda@1)) :named ax_4677))
   (assert (! (not (= cf@lambda@5 cf@lambda@1)) :named ax_4678))
   (assert (! (not (= cf@lambda@5 cf@lambda@2)) :named ax_4679))
   (assert (! (not (= cf@lambda@5 cf@lambda@2)) :named ax_4680))
   (assert (! (not (= cf@lambda@5 cf@lambda@3)) :named ax_4681))
   (assert (! (not (= cf@lambda@5 cf@lambda@3)) :named ax_4682))
   (assert (! (not (= cf@lambda@5 cf@lambda@4)) :named ax_4683))
   (assert (! (not (= cf@lambda@5 cf@lambda@4)) :named ax_4684))
   (assert (! (not (= cf@lambda@6 cf@classifier@default)) :named ax_4685))
   (assert (! (not (= cf@lambda@6 cf@doMark)) :named ax_4686))
   (assert (! (not (= cf@lambda@6 cf@lambda@1)) :named ax_4687))
   (assert (! (not (= cf@lambda@6 cf@lambda@1)) :named ax_4688))
   (assert (! (not (= cf@lambda@6 cf@lambda@2)) :named ax_4689))
   (assert (! (not (= cf@lambda@6 cf@lambda@2)) :named ax_4690))
   (assert (! (not (= cf@lambda@6 cf@lambda@3)) :named ax_4691))
   (assert (! (not (= cf@lambda@6 cf@lambda@3)) :named ax_4692))
   (assert (! (not (= cf@lambda@6 cf@lambda@4)) :named ax_4693))
   (assert (! (not (= cf@lambda@6 cf@lambda@4)) :named ax_4694))
   (assert (! (not (= cf@lambda@6 cf@lambda@5)) :named ax_4695))
   (assert (! (not (= cf@lambda@6 cf@lambda@5)) :named ax_4696))
   (assert (! (not (= cf@lambda@7 cf@classifier@default)) :named ax_4697))
   (assert (! (not (= cf@lambda@7 cf@doMark)) :named ax_4698))
   (assert (! (not (= cf@lambda@7 cf@lambda@1)) :named ax_4699))
   (assert (! (not (= cf@lambda@7 cf@lambda@1)) :named ax_4700))
   (assert (! (not (= cf@lambda@7 cf@lambda@2)) :named ax_4701))
   (assert (! (not (= cf@lambda@7 cf@lambda@2)) :named ax_4702))
   (assert (! (not (= cf@lambda@7 cf@lambda@3)) :named ax_4703))
   (assert (! (not (= cf@lambda@7 cf@lambda@3)) :named ax_4704))
   (assert (! (not (= cf@lambda@7 cf@lambda@4)) :named ax_4705))
   (assert (! (not (= cf@lambda@7 cf@lambda@4)) :named ax_4706))
   (assert (! (not (= cf@lambda@7 cf@lambda@5)) :named ax_4707))
   (assert (! (not (= cf@lambda@7 cf@lambda@5)) :named ax_4708))
   (assert (! (not (= cf@lambda@7 cf@lambda@6)) :named ax_4709))
   (assert (! (not (= cf@lambda@7 cf@lambda@6)) :named ax_4710))
   (assert (! (not (= cf@lambda@8 cf@classifier@default)) :named ax_4711))
   (assert (! (not (= cf@lambda@8 cf@doMark)) :named ax_4712))
   (assert (! (not (= cf@lambda@8 cf@lambda@1)) :named ax_4713))
   (assert (! (not (= cf@lambda@8 cf@lambda@1)) :named ax_4714))
   (assert (! (not (= cf@lambda@8 cf@lambda@2)) :named ax_4715))
   (assert (! (not (= cf@lambda@8 cf@lambda@2)) :named ax_4716))
   (assert (! (not (= cf@lambda@8 cf@lambda@3)) :named ax_4717))
   (assert (! (not (= cf@lambda@8 cf@lambda@3)) :named ax_4718))
   (assert (! (not (= cf@lambda@8 cf@lambda@4)) :named ax_4719))
   (assert (! (not (= cf@lambda@8 cf@lambda@4)) :named ax_4720))
   (assert (! (not (= cf@lambda@8 cf@lambda@5)) :named ax_4721))
   (assert (! (not (= cf@lambda@8 cf@lambda@5)) :named ax_4722))
   (assert (! (not (= cf@lambda@8 cf@lambda@6)) :named ax_4723))
   (assert (! (not (= cf@lambda@8 cf@lambda@6)) :named ax_4724))
   (assert (! (not (= cf@lambda@8 cf@lambda@7)) :named ax_4725))
   (assert (! (not (= cf@lambda@8 cf@lambda@7)) :named ax_4726))
   (assert (! (not (= cf@lambda@9 cf@classifier@default)) :named ax_4727))
   (assert (! (not (= cf@lambda@9 cf@doMark)) :named ax_4728))
   (assert (! (not (= cf@lambda@9 cf@lambda@1)) :named ax_4729))
   (assert (! (not (= cf@lambda@9 cf@lambda@1)) :named ax_4730))
   (assert (! (not (= cf@lambda@9 cf@lambda@2)) :named ax_4731))
   (assert (! (not (= cf@lambda@9 cf@lambda@2)) :named ax_4732))
   (assert (! (not (= cf@lambda@9 cf@lambda@3)) :named ax_4733))
   (assert (! (not (= cf@lambda@9 cf@lambda@3)) :named ax_4734))
   (assert (! (not (= cf@lambda@9 cf@lambda@4)) :named ax_4735))
   (assert (! (not (= cf@lambda@9 cf@lambda@4)) :named ax_4736))
   (assert (! (not (= cf@lambda@9 cf@lambda@5)) :named ax_4737))
   (assert (! (not (= cf@lambda@9 cf@lambda@5)) :named ax_4738))
   (assert (! (not (= cf@lambda@9 cf@lambda@6)) :named ax_4739))
   (assert (! (not (= cf@lambda@9 cf@lambda@6)) :named ax_4740))
   (assert (! (not (= cf@lambda@9 cf@lambda@7)) :named ax_4741))
   (assert (! (not (= cf@lambda@9 cf@lambda@7)) :named ax_4742))
   (assert (! (not (= cf@lambda@9 cf@lambda@8)) :named ax_4743))
   (assert (! (not (= cf@lambda@9 cf@lambda@8)) :named ax_4744))
   (assert (! (not (= cf@mark cf@classifier@default)) :named ax_4745))
   (assert (! (not (= cf@mark cf@doMark)) :named ax_4746))
   (assert (! (not (= cf@mark cf@doMark)) :named ax_4747))
   (assert (! (not (= cf@mark cf@lambda@1)) :named ax_4748))
   (assert (! (not (= cf@mark cf@lambda@1)) :named ax_4749))
   (assert (! (not (= cf@mark cf@lambda@2)) :named ax_4750))
   (assert (! (not (= cf@mark cf@lambda@2)) :named ax_4751))
   (assert (! (not (= cf@mark cf@lambda@3)) :named ax_4752))
   (assert (! (not (= cf@mark cf@lambda@3)) :named ax_4753))
   (assert (! (not (= cf@mark cf@lambda@4)) :named ax_4754))
   (assert (! (not (= cf@mark cf@lambda@4)) :named ax_4755))
   (assert (! (not (= cf@mark cf@lambda@5)) :named ax_4756))
   (assert (! (not (= cf@mark cf@lambda@5)) :named ax_4757))
   (assert (! (not (= cf@mark cf@lambda@6)) :named ax_4758))
   (assert (! (not (= cf@mark cf@lambda@6)) :named ax_4759))
   (assert (! (not (= cf@mark cf@lambda@7)) :named ax_4760))
   (assert (! (not (= cf@mark cf@lambda@7)) :named ax_4761))
   (assert (! (not (= cf@mark cf@lambda@8)) :named ax_4762))
   (assert (! (not (= cf@mark cf@lambda@8)) :named ax_4763))
   (assert (! (not (= cf@mark cf@lambda@9)) :named ax_4764))
   (assert (! (not (= cf@mark cf@lambda@9)) :named ax_4765))
   (assert (! (not (= cf@mark cf@mark2)) :named ax_4766))
   (assert (! (not (= cf@mark2 cf@classifier@default)) :named ax_4767))
   (assert (! (not (= cf@mark2 cf@doMark)) :named ax_4768))
   (assert (! (not (= cf@mark2 cf@lambda@1)) :named ax_4769))
   (assert (! (not (= cf@mark2 cf@lambda@1)) :named ax_4770))
   (assert (! (not (= cf@mark2 cf@lambda@2)) :named ax_4771))
   (assert (! (not (= cf@mark2 cf@lambda@2)) :named ax_4772))
   (assert (! (not (= cf@mark2 cf@lambda@3)) :named ax_4773))
   (assert (! (not (= cf@mark2 cf@lambda@3)) :named ax_4774))
   (assert (! (not (= cf@mark2 cf@lambda@4)) :named ax_4775))
   (assert (! (not (= cf@mark2 cf@lambda@4)) :named ax_4776))
   (assert (! (not (= cf@mark2 cf@lambda@5)) :named ax_4777))
   (assert (! (not (= cf@mark2 cf@lambda@5)) :named ax_4778))
   (assert (! (not (= cf@mark2 cf@lambda@6)) :named ax_4779))
   (assert (! (not (= cf@mark2 cf@lambda@6)) :named ax_4780))
   (assert (! (not (= cf@mark2 cf@lambda@7)) :named ax_4781))
   (assert (! (not (= cf@mark2 cf@lambda@7)) :named ax_4782))
   (assert (! (not (= cf@mark2 cf@lambda@8)) :named ax_4783))
   (assert (! (not (= cf@mark2 cf@lambda@8)) :named ax_4784))
   (assert (! (not (= cf@mark2 cf@lambda@9)) :named ax_4785))
   (assert (! (not (= cf@mark2 cf@lambda@9)) :named ax_4786))
   (assert (! (not (= cf@mark2 cf@mark)) :named ax_4787))
   (assert (! (not (= Node.$owns Node.key)) :named ax_4788))
   (assert (! (not (= Node.$owns Node.left)) :named ax_4789))
   (assert (! (not (= Node.$owns Node.parent)) :named ax_4790))
   (assert (! (not (= Node.$owns Node.red)) :named ax_4791))
   (assert (! (not (= Node.$owns Node.right)) :named ax_4792))
   (assert (! (not (= Node.$owns Node.value)) :named ax_4793))
   (assert (! (not (= Node.$owns Tree.$owns)) :named ax_4794))
   (assert (! (not (= Node.$owns Tree.abs)) :named ax_4795))
   (assert (! (not (= Node.$owns Tree.R)) :named ax_4796))
   (assert (! (not (= Node.$owns Tree.root)) :named ax_4797))
   (assert (! (not (= Node.key Node.$owns)) :named ax_4798))
   (assert (! (not (= Node.key Node.left)) :named ax_4799))
   (assert (! (not (= Node.key Node.parent)) :named ax_4800))
   (assert (! (not (= Node.key Node.right)) :named ax_4801))
   (assert (! (not (= Node.key Node.value)) :named ax_4802))
   (assert (! (not (= Node.key Tree.$owns)) :named ax_4803))
   (assert (! (not (= Node.key Tree.abs)) :named ax_4804))
   (assert (! (not (= Node.key Tree.R)) :named ax_4805))
   (assert (! (not (= Node.key Tree.root)) :named ax_4806))
   (assert (! (not (= Node.left Node.$owns)) :named ax_4807))
   (assert (! (not (= Node.left Node.key)) :named ax_4808))
   (assert (! (not (= Node.left Node.parent)) :named ax_4809))
   (assert (! (not (= Node.left Node.right)) :named ax_4810))
   (assert (! (not (= Node.left Tree.$owns)) :named ax_4811))
   (assert (! (not (= Node.left Tree.abs)) :named ax_4812))
   (assert (! (not (= Node.left Tree.R)) :named ax_4813))
   (assert (! (not (= Node.left Tree.root)) :named ax_4814))
   (assert (! (not (= Node.parent Node.$owns)) :named ax_4815))
   (assert (! (not (= Node.parent Node.key)) :named ax_4816))
   (assert (! (not (= Node.parent Node.left)) :named ax_4817))
   (assert (! (not (= Node.parent Tree.$owns)) :named ax_4818))
   (assert (! (not (= Node.parent Tree.abs)) :named ax_4819))
   (assert (! (not (= Node.parent Tree.R)) :named ax_4820))
   (assert (! (not (= Node.parent Tree.root)) :named ax_4821))
   (assert (! (not (= Node.red Node.$owns)) :named ax_4822))
   (assert (! (not (= Node.red Node.key)) :named ax_4823))
   (assert (! (not (= Node.red Node.key)) :named ax_4824))
   (assert (! (not (= Node.red Node.left)) :named ax_4825))
   (assert (! (not (= Node.red Node.left)) :named ax_4826))
   (assert (! (not (= Node.red Node.parent)) :named ax_4827))
   (assert (! (not (= Node.red Node.parent)) :named ax_4828))
   (assert (! (not (= Node.red Node.right)) :named ax_4829))
   (assert (! (not (= Node.red Node.value)) :named ax_4830))
   (assert (! (not (= Node.red Tree.$owns)) :named ax_4831))
   (assert (! (not (= Node.red Tree.abs)) :named ax_4832))
   (assert (! (not (= Node.red Tree.R)) :named ax_4833))
   (assert (! (not (= Node.red Tree.root)) :named ax_4834))
   (assert (! (not (= Node.right Node.$owns)) :named ax_4835))
   (assert (! (not (= Node.right Node.key)) :named ax_4836))
   (assert (! (not (= Node.right Node.left)) :named ax_4837))
   (assert (! (not (= Node.right Node.parent)) :named ax_4838))
   (assert (! (not (= Node.right Node.parent)) :named ax_4839))
   (assert (! (not (= Node.right Node.red)) :named ax_4840))
   (assert (! (not (= Node.right Tree.$owns)) :named ax_4841))
   (assert (! (not (= Node.right Tree.abs)) :named ax_4842))
   (assert (! (not (= Node.right Tree.R)) :named ax_4843))
   (assert (! (not (= Node.right Tree.root)) :named ax_4844))
   (assert (! (not (= Node.value Node.$owns)) :named ax_4845))
   (assert (! (not (= Node.value Node.key)) :named ax_4846))
   (assert (! (not (= Node.value Node.left)) :named ax_4847))
   (assert (! (not (= Node.value Node.left)) :named ax_4848))
   (assert (! (not (= Node.value Node.parent)) :named ax_4849))
   (assert (! (not (= Node.value Node.parent)) :named ax_4850))
   (assert (! (not (= Node.value Node.red)) :named ax_4851))
   (assert (! (not (= Node.value Node.right)) :named ax_4852))
   (assert (! (not (= Node.value Node.right)) :named ax_4853))
   (assert (! (not (= Node.value Tree.$owns)) :named ax_4854))
   (assert (! (not (= Node.value Tree.abs)) :named ax_4855))
   (assert (! (not (= Node.value Tree.R)) :named ax_4856))
   (assert (! (not (= Node.value Tree.root)) :named ax_4857))
   (assert (! (not (= Tree.$owns Node.$owns)) :named ax_4858))
   (assert (! (not (= Tree.$owns Node.key)) :named ax_4859))
   (assert (! (not (= Tree.$owns Node.left)) :named ax_4860))
   (assert (! (not (= Tree.$owns Node.parent)) :named ax_4861))
   (assert (! (not (= Tree.$owns Node.red)) :named ax_4862))
   (assert (! (not (= Tree.$owns Node.right)) :named ax_4863))
   (assert (! (not (= Tree.$owns Node.value)) :named ax_4864))
   (assert (! (not (= Tree.$owns Tree.abs)) :named ax_4865))
   (assert (! (not (= Tree.$owns Tree.R)) :named ax_4866))
   (assert (! (not (= Tree.$owns Tree.root)) :named ax_4867))
   (assert (! (not (= Tree.abs Node.$owns)) :named ax_4868))
   (assert (! (not (= Tree.abs Node.key)) :named ax_4869))
   (assert (! (not (= Tree.abs Node.left)) :named ax_4870))
   (assert (! (not (= Tree.abs Node.parent)) :named ax_4871))
   (assert (! (not (= Tree.abs Node.red)) :named ax_4872))
   (assert (! (not (= Tree.abs Node.right)) :named ax_4873))
   (assert (! (not (= Tree.abs Node.value)) :named ax_4874))
   (assert (! (not (= Tree.abs Tree.$owns)) :named ax_4875))
   (assert (! (not (= Tree.abs Tree.R)) :named ax_4876))
   (assert (! (not (= Tree.R Node.$owns)) :named ax_4877))
   (assert (! (not (= Tree.R Node.key)) :named ax_4878))
   (assert (! (not (= Tree.R Node.left)) :named ax_4879))
   (assert (! (not (= Tree.R Node.parent)) :named ax_4880))
   (assert (! (not (= Tree.R Node.red)) :named ax_4881))
   (assert (! (not (= Tree.R Node.right)) :named ax_4882))
   (assert (! (not (= Tree.R Node.value)) :named ax_4883))
   (assert (! (not (= Tree.R Tree.$owns)) :named ax_4884))
   (assert (! (not (= Tree.R Tree.abs)) :named ax_4885))
   (assert (! (not (= Tree.root Node.$owns)) :named ax_4886))
   (assert (! (not (= Tree.root Node.key)) :named ax_4887))
   (assert (! (not (= Tree.root Node.left)) :named ax_4888))
   (assert (! (not (= Tree.root Node.parent)) :named ax_4889))
   (assert (! (not (= Tree.root Node.red)) :named ax_4890))
   (assert (! (not (= Tree.root Node.right)) :named ax_4891))
   (assert (! (not (= Tree.root Node.value)) :named ax_4892))
   (assert (! (not (= Tree.root Tree.$owns)) :named ax_4893))
   (assert (! (not (= Tree.root Tree.abs)) :named ax_4894))
   (assert (! (not (= Tree.root Tree.abs)) :named ax_4895))
   (assert (! (not (= Tree.root Tree.R)) :named ax_4896))
   (assert (! (not (= Tree.root Tree.R)) :named ax_4897))
   (assert (! (not (= true $@bf_52)) :named ax_4898))
   (assert (! (not (= true $@bf_52)) :named ax_4899))

;Program
(assert (not
(let (($$start@12_assertion (and
    (F@doMark ($ref ($ptr ^Node L@y_$_0)))
)))
(let (($$start@14_assertion (and
    ($typed $s_$_1 ($ptr ^Node L@y_$_0))
    (= ($owner $s_$_1 ($ptr ^Node L@y_$_0)) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node L@y_$_0))) (not ($closed $s_$_1 ($ptr ^Node L@y_$_0))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node L@y_$_0)) (>= ($timestamp $s_$_1 ($ptr ^Node L@y_$_0)) $@wrTime$1^203.1))
)))
(let (($$start@18_assertion (and
    ($mutable $s_$_2 ($dot ($ptr ^Node P@x) Node.right))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node P@x) Node.right)) (>= ($timestamp $s_$_2 ($dot ($ptr ^Node P@x) Node.right)) $@wrTime$1^203.1))
)))
(let (($$start@5_assertion (and
    (F@doMark ($ref ($ptr ^Node P@x)))
)))
(let (($$start@7_assertion (and
    ($typed $s_$_0 ($ptr ^Node P@x))
    (= ($owner $s_$_0 ($ptr ^Node P@x)) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node P@x))) (not ($closed $s_$_0 ($ptr ^Node P@x))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node P@x)) (>= ($timestamp $s_$_0 ($ptr ^Node P@x)) $@wrTime$1^203.1))
)))
(let (($$start_assertion (and
    ($in_domain_lab $s ($ptr ^Tree P@t) ($ptr ^Tree P@t) l@public)
)))
(let ((anon48@68_assertion (and
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s) ($dot ($ptr ^Tree P@t) Tree.root))))) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))))
    ($eq.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s) ($dot ($ptr ^Tree P@t) Tree.abs))) ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))))
)))
(let ((anon48@64_assertion (and
    (forall( (|Q#k$1^83.29#tc2_$1| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2_$1|) (<= |Q#k$1^83.29#tc2_$1| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$4| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$4|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$4|))) (not (= ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$4|) Node.key)) |Q#k$1^83.29#tc2_$1|))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) |Q#k$1^83.29#tc2_$1|) 0)))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) |Q#k$1^83.29#tc2_$1|))))
)))
(let ((anon0108_Then@1_assertion (and
    ($mutable $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)) (>= ($timestamp $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)) $@wrTime$1^203.1))
)))
(let ((anon0108_Else@1_assertion (and
    ($mutable $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right)) (>= ($timestamp $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right)) $@wrTime$1^203.1))
)))
(let ((anon0106_Then@5_assertion (and
    ($mutable $s_$_4 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent)) (>= ($timestamp $s_$_4 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent)) $@wrTime$1^203.1))
)))
(let ((anon48@1_assertion (and
    ($mutable $s_$_15 ($dot ($ptr ^Node L@y_$_0) Node.left))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node L@y_$_0) Node.left)) (>= ($timestamp $s_$_15 ($dot ($ptr ^Node L@y_$_0) Node.left)) $@wrTime$1^203.1))
)))
(let ((anon47@1_assertion (and
    ($mutable $s_$_7 ($dot ($ptr ^Node L@y_$_0) Node.parent))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node L@y_$_0) Node.parent)) (>= ($timestamp $s_$_7 ($dot ($ptr ^Node L@y_$_0) Node.parent)) $@wrTime$1^203.1))
)))
(let ((anon48@3_assertion (and
    ($mutable $s_$_16 ($dot ($ptr ^Node P@x) Node.parent))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node P@x) Node.parent)) (>= ($timestamp $s_$_16 ($dot ($ptr ^Node P@x) Node.parent)) $@wrTime$1^203.1))
)))
(let ((anon48@21_assertion (and
    ($mutable $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Tree P@t) Tree.R)) (>= ($timestamp $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R)) $@wrTime$1^203.1))
)))
(let ((anon48@35_assertion (and
    ($mutable $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Tree P@t) Tree.R)) (>= ($timestamp $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R)) $@wrTime$1^203.1))
)))
(let ((anon0107_Then@1_assertion (and
    ($mutable $s_$_8 ($dot ($ptr ^Tree P@t) Tree.root))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Tree P@t) Tree.root)) (>= ($timestamp $s_$_8 ($dot ($ptr ^Tree P@t) Tree.root)) $@wrTime$1^203.1))
)))
(let ((anon45_assertion (and
    ($typed $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent))))
    (= ($owner $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent)))) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent))))) (not ($closed $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent)))) (>= ($timestamp $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent)))) $@wrTime$1^203.1))
)))
(let ((anon0106_Then@1_assertion (and
    ($typed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (= ($owner $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))) (not ($closed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) (>= ($timestamp $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $@wrTime$1^203.1))
)))
(let ((anon0106_Then@8_assertion (and
    ($typed $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (= ($owner $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left))))) (not ($closed $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left)))) (>= ($timestamp $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $@wrTime$1^203.1))
)))
(let ((anon0107_Else@2_assertion (and
    ($typed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))
    (= ($owner $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))) (not ($closed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) (>= ($timestamp $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) $@wrTime$1^203.1))
)))
(let ((anon48@11_assertion (and
    ($typed $s_$_18 ($ptr ^Node L@y_$_0))
    (= ($owner $s_$_18 ($ptr ^Node L@y_$_0)) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node L@y_$_0))) (not ($closed $s_$_18 ($ptr ^Node L@y_$_0))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node L@y_$_0)) (>= ($timestamp $s_$_18 ($ptr ^Node L@y_$_0)) $@wrTime$1^203.1))
)))
(let ((anon48@4_assertion (and
    ($typed $s_$_17 ($ptr ^Node P@x))
    (= ($owner $s_$_17 ($ptr ^Node P@x)) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Node P@x))) (not ($closed $s_$_17 ($ptr ^Node P@x))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node P@x)) (>= ($timestamp $s_$_17 ($ptr ^Node P@x)) $@wrTime$1^203.1))
)))
(let ((anon48@38_assertion (and
    ($typed $s_$_21 ($ptr ^Tree P@t))
    (= ($owner $s_$_21 ($ptr ^Tree P@t)) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Tree P@t))) (not ($closed $s_$_21 ($ptr ^Tree P@t))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Tree P@t)) (>= ($timestamp $s_$_21 ($ptr ^Tree P@t)) $@wrTime$1^203.1))
)))
(let ((anon48@39_assertion (and
    (forall( (|#writes$1^243.19| $ptr))(!(=> ($set_in |#writes$1^243.19| ($owns $s_$_21 ($ptr ^Tree P@t))) (and (or ($in_writes_at $@wrTime$1^203.1 |#writes$1^243.19|) (>= ($timestamp $s_$_21 |#writes$1^243.19|) $@wrTime$1^203.1)) (and (and ($typed $s_$_21 |#writes$1^243.19|) (= ($owner $s_$_21 |#writes$1^243.19|) $me)) (=> ($is_primitive_ch ($typ |#writes$1^243.19|)) (not ($closed $s_$_21 |#writes$1^243.19|))))))  :pattern ( ($dont_instantiate |#writes$1^243.19|))))
)))
(let ((anon0107_Else@6_assertion (and
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left) ($ptr_to ^Node))
    ($thread_local $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
)))
(let ((anon0107_Else@5_assertion (and
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left) ($ptr_to ^Node))
    ($typed $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
)))
(let ((anon0108_Else_assertion (and
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right) ($ptr_to ^Node))
    ($typed $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right))
)))
(let ((anon0106_Then@4_assertion (and
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent) ($ptr_to ^Node))
    ($typed $s_$_4 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent))
)))
(let ((anon0106_Then@7_assertion (and
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($thread_local $s_$_4 ($dot ($ptr ^Node L@y_$_0) Node.left))
)))
(let ((anon0106_Then@6_assertion (and
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($typed $s_$_4 ($dot ($ptr ^Node L@y_$_0) Node.left))
)))
(let ((anon0107_Else@8_assertion (and
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($thread_local $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
)))
(let ((anon0107_Else@7_assertion (and
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($typed $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
)))
(let ((anon48@20_assertion (and
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($typed $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
)))
(let ((anon48@52_assertion (and
    (forall( (|Q#m$1^82.29#dt1_$14| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|))) ($set_in ($ptr ^Node |Q#m$1^82.29#dt1_$14|) ($owns $s_$_22 ($ptr ^Tree P@t)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|)))) :pattern ( (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|)))) :pattern ( (sk_hack (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|)))))))
)))
(let ((anon48@66_assertion (and
    (forall( (|Q#n$1^84.29#dt1_$4| Int) (|Q#m$1^84.29#dt1_$1| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|))) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|))) (or (or (or (and (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)) ($ref ($ptr ^Node ($ref $null))))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$4|) Node.left))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$4|) Node.right))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|))))))
)))
(let ((anon48@59_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$29| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|)))) Node.parent)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$29|) Node.parent)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|)))))))
)))
(let ((anon48@47_assertion (and
    (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root)))) ($ref $null))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))))
)))
(let ((anon48@53_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$23| Int) (|Q#m$1^82.29#dt1_$15| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$23|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$23|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$23|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|))))))
)))
(let ((anon48@54_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$24| Int) (|Q#m$1^82.29#dt1_$16| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$16|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$16|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$16|))))))
)))
(let ((anon48@55_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$25| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|)))) Node.left)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$25|) Node.left)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|)))))))
)))
(let ((anon48@57_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$27| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|)))) Node.right)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$27|) Node.right)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|)))))))
)))
(let ((anon48@61_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$31| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))))))
)))
(let ((anon45@6_assertion (and
    ($set_eq ($owns $s_$_14 ($ptr ^Node ($select.mem ($memory $s_$_14) ($dot ($ptr ^Node P@x) Node.parent)))) $set_empty)
)))
(let ((anon48@10_assertion (and
    ($set_eq ($owns $s_$_18 ($ptr ^Node P@x)) $set_empty)
)))
(let ((anon48@17_assertion (and
    ($set_eq ($owns $s_$_19 ($ptr ^Node L@y_$_0)) $set_empty)
)))
(let ((anon0106_Then@14_assertion (and
    ($set_eq ($owns $s_$_6 ($ptr ^Node ($select.mem ($memory $s_$_6) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $set_empty)
)))
(let ((anon48@19_assertion (and
    (forall( (|Q#m$1^236.26#dt1| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right))))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))) (> ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node |Q#m$1^236.26#dt1|) Node.key)) ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.key)))))  :pattern ( (sk_hack ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node L@y_$_0))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))))) :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right))))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))))))
)))
(let ((anon48@50_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$21| Int) (|Q#m$1^82.29#dt1_$12| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$12|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$12|))) (< ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$12|) Node.key)) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$21|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$12|))))))
)))
(let ((anon48@51_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$22| Int) (|Q#m$1^82.29#dt1_$13| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$13|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$13|))) (> ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$13|) Node.key)) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$22|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$13|))))))
)))
(let ((anon0107_Else_assertion (and
    (F@doMark ($ref ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))))
)))
(let ((anon48@18_assertion (and
    (F@doMark ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right)))))
)))
(let ((anon48@48_assertion (and
    (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root)))) ($ref $null))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))) Node.parent)))) ($ref $null)))
)))
(let ((anon48@56_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$26| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|)))) Node.left)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$26|) Node.left))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|)))))))
)))
(let ((anon48@58_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$28| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|)))) Node.right)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$28|) Node.right))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|)))))))
)))
(let ((anon48@60_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$30| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|)))) Node.parent)))) ($ref $null)))) (or (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$30|) Node.parent))) Node.left)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$30|) Node.parent))) Node.right)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|)))))))
)))
(let ((anon48@63_assertion (and
    (forall( (|Q#m$1^83.29#dt1_$3| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$3|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$3|))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$3|) Node.key))) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$3|) Node.value)))))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$3|) Node.key))))))
)))
(let ((anon48@65_assertion (and
    (forall( (|Q#n$1^84.29#dt1_$3| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)))) Node.parent)))) ($ref $null))) (or (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)))))))
)))
(let (($$start@13_assertion (and
    ($closed $s_$_1 ($ptr ^Node L@y_$_0))
    ($is ($ptr ^Node L@y_$_0) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_1 ($ptr ^Node L@y_$_0))
    (= ($owner $s_$_1 ($ptr ^Node L@y_$_0)) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
)))
(let (($$start@6_assertion (and
    ($closed $s_$_0 ($ptr ^Node P@x))
    ($is ($ptr ^Node P@x) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_0 ($ptr ^Node P@x))
    (= ($owner $s_$_0 ($ptr ^Node P@x)) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
)))
(let ((anon45@4_assertion (and
    (not ($closed $s_$_13 call0formal_$_@l_$_0_$4))
)))
(let ((anon48@8_assertion (and
    (not ($closed $s_$_17 call0formal_$_@l_$_0_$5))
)))
(let ((anon48@15_assertion (and
    (not ($closed $s_$_18 call0formal_$_@l_$_0_$6))
)))
(let ((anon48@43_assertion (and
    (not ($closed $s_$_21 call0formal_$_@l_$_0_$7))
)))
(let ((anon0106_Then@12_assertion (and
    (not ($closed $s_$_5 call0formal_$_@l_$_0_$9))
)))
(let ((anon48@49_assertion (and
    (forall( (|Q#m$1^82.29#dt1_$11| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$11|))) (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($ref $null)))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$11|))))))
)))
(let ((anon48@45_assertion (and
    (forall( (|#p_$82| $ptr))(!(=> ($set_in0 |#p_$82| ($owns $s_$_21 call0formal_$_@l_$_0_$7)) (and (and (and (and ($closed $s_$_21 |#p_$82|) (= ($owner $s_$_21 |#p_$82|) $me)) (and ($is |#p_$82| ($typ |#p_$82|)) ($typed $s_$_21 |#p_$82|))) (not (= ($kind_of ($typ |#p_$82|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$82|))))  :pattern ( ($dont_instantiate |#p_$82|))))
)))
(let ((anon0106_Then_assertion (and
    ($closed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    ($is ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (= ($owner $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
)))
(let ((anon0107_Else@1_assertion (and
    ($closed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))
    ($is ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))
    (= ($owner $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
)))
(let ((anon48@46_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node ($ref $null)))))
)))
(let ((anon48@67 (=> (and true
    $position_marker
    ($full_stop $s_$_22)
    (forall( (|Q#n$1^84.29#dt1_$4| Int) (|Q#m$1^84.29#dt1_$1| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|))) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|))) (or (or (or (and (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)) ($ref ($ptr ^Node ($ref $null))))) (= ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$4|) Node.left))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^84.29#dt1_$4|) Node.right))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|)))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$4|)))))) ($ref ($ptr ^Node |Q#m$1^84.29#dt1_$1|))))))
  )
    anon48@68_assertion
)))
(let ((anon48@66 (=> (and true
    (forall( (|Q#n$1^84.29#dt1_$3| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)))) Node.parent)))) ($ref $null))) (or (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)) ($ref ($ptr ^Node ($ref $null)))) (= ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^84.29#dt1_$3|)))))))
  )(and 
    anon48@66_assertion
    anon48@67
))))
(let ((anon48@65 (=> (and true
    (forall( (|Q#k$1^83.29#tc2_$1| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2_$1|) (<= |Q#k$1^83.29#tc2_$1| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$4| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$4|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$4|))) (not (= ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$4|) Node.key)) |Q#k$1^83.29#tc2_$1|))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) |Q#k$1^83.29#tc2_$1|) 0)))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) |Q#k$1^83.29#tc2_$1|))))
  )(and 
    anon48@65_assertion
    anon48@66
))))
(let ((anon48@64 (=> (and true
    (forall( (|Q#m$1^83.29#dt1_$3| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$3|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^83.29#dt1_$3|))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$3|) Node.key))) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$3|) Node.value)))))  :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.abs))) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^83.29#dt1_$3|) Node.key))))))
  )(and 
    anon48@64_assertion
    anon48@65
))))
(let ((anon48@62 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$31| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$31|))))))
  )(and 
    anon48@63_assertion
    anon48@64
))))
(let ((anon48@61 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$30| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|)))) Node.parent)))) ($ref $null)))) (or (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$30|) Node.parent))) Node.left)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$30|) Node.parent))) Node.right)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$30|)))))))
  )(and 
    anon48@61_assertion
    anon48@62
))))
(let ((anon48@60 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$29| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|)))) Node.parent)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$29|) Node.parent)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$29|)))))))
  )(and 
    anon48@60_assertion
    anon48@61
))))
(let ((anon48@59 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$28| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|)))) Node.right)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$28|) Node.right))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$28|)))))))
  )(and 
    anon48@59_assertion
    anon48@60
))))
(let ((anon48@58 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$27| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|)))) Node.right)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$27|) Node.right)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$27|)))))))
  )(and 
    anon48@58_assertion
    anon48@59
))))
(let ((anon48@57 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$26| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|)))) Node.left)))) ($ref $null)))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$26|) Node.left))) Node.parent)))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|)))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$26|)))))))
  )(and 
    anon48@57_assertion
    anon48@58
))))
(let ((anon48@56 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$25| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|))) (=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|))) (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|)))) Node.left)))) ($ref $null)))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$25|) Node.left)))))))  :pattern ( ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$25|)))))))
  )(and 
    anon48@56_assertion
    anon48@57
))))
(let ((anon48@55 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$24| Int) (|Q#m$1^82.29#dt1_$16| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$16|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$16|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$24|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$16|))))))
  )(and 
    anon48@55_assertion
    anon48@56
))))
(let ((anon48@54 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$23| Int) (|Q#m$1^82.29#dt1_$15| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$23|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$23|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$23|))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$15|))))))
  )(and 
    anon48@54_assertion
    anon48@55
))))
(let ((anon48@53 (=> (and true
    (forall( (|Q#m$1^82.29#dt1_$14| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|))) (= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|))) ($set_in ($ptr ^Node |Q#m$1^82.29#dt1_$14|) ($owns $s_$_22 ($ptr ^Tree P@t)))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|)))) :pattern ( (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|)))) :pattern ( (sk_hack (F@mark2 ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$14|)))))))
  )(and 
    anon48@53_assertion
    anon48@54
))))
(let ((anon48@52 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$22| Int) (|Q#m$1^82.29#dt1_$13| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$13|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$13|))) (> ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$13|) Node.key)) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$22|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$22|)))) Node.right))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$13|))))))
  )(and 
    anon48@52_assertion
    anon48@53
))))
(let ((anon48@51 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$21| Int) (|Q#m$1^82.29#dt1_$12| Int))(!(=> (and ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|))) ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$12|)))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$12|))) (< ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#m$1^82.29#dt1_$12|) Node.key)) ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node |Q#n$1^82.29#dt1_$21|) Node.key))))))  :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node (F@mark ($ref ($ptr ^Node |Q#n$1^82.29#dt1_$21|)))) Node.left))))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$12|))))))
  )(and 
    anon48@51_assertion
    anon48@52
))))
(let ((anon48@50 (=> (and true
    (forall( (|Q#m$1^82.29#dt1_$11| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$11|))) (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($ref $null)))) ($ref ($ptr ^Node |Q#m$1^82.29#dt1_$11|))))))
  )(and 
    anon48@50_assertion
    anon48@51
))))
(let ((anon48@49 (=> (and true
    (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root)))) ($ref $null))) (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))) Node.parent)))) ($ref $null)))
  )(and 
    anon48@49_assertion
    anon48@50
))))
(let ((anon48@48 (=> (and true
    (=> (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root)))) ($ref $null))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))))
  )(and 
    anon48@48_assertion
    anon48@49
))))
(let ((anon48@47 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_22) ($dot ($ptr ^Tree P@t) Tree.root))))) ($ref ($ptr ^Node ($ref $null)))))
  )(and 
    anon48@47_assertion
    anon48@48
))))
(let ((anon48@46 (=> (and true
    ($call_transition $s_$_21 $s_$_22)
    ($closed $s_$_22 call0formal_$_@l_$_0_$7)
    ($good_state_ext $@tok$1^243.19 $s_$_22)
    ($is call0formal_$_@l_$_0_$7 ($typ call0formal_$_@l_$_0_$7))
    ($is_non_primitive ($typ call0formal_$_@l_$_0_$7))
    ($typed $s_$_22 call0formal_$_@l_$_0_$7)
    (< ($current_timestamp $s_$_21) ($current_timestamp $s_$_22))
    (= ($owner $s_$_22 call0formal_$_@l_$_0_$7) $me)
    (= ($owns $s_$_21 call0formal_$_@l_$_0_$7) ($owns $s_$_22 call0formal_$_@l_$_0_$7))
    (= ($select.sec.pc $s_$_22) ($select.sec.pc $s_$_21))
    (= ($typemap $s_$_21) ($typemap $s_$_22))
    (=> ($is_claimable ^Tree) (and (= ($ref_cnt $s_$_21 call0formal_$_@l_$_0_$7) 0) (= ($ref_cnt $s_$_22 call0formal_$_@l_$_0_$7) 0)))
    (exists( (|#x_$14| Int))(= ($memory $s_$_22) ($store.mem ($memory $s_$_21) call0formal_$_@l_$_0_$7 |#x_$14|)))
    (forall( (|#p_$82| $ptr))(!(=> ($set_in0 |#p_$82| ($owns $s_$_21 call0formal_$_@l_$_0_$7)) (and (and (and (and ($closed $s_$_21 |#p_$82|) (= ($owner $s_$_21 |#p_$82|) $me)) (and ($is |#p_$82| ($typ |#p_$82|)) ($typed $s_$_21 |#p_$82|))) (not (= ($kind_of ($typ |#p_$82|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$82|))))  :pattern ( ($dont_instantiate |#p_$82|))))
    (forall( (|#p_$83| $ptr))(!(=> ($set_in |#p_$83| ($owns $s_$_22 call0formal_$_@l_$_0_$7)) (and ($is_non_primitive ($typ |#p_$83|)) (and (= ($owner $s_$_22 |#p_$83|) call0formal_$_@l_$_0_$7) ($closed $s_$_22 |#p_$83|))))  :pattern ( ($set_in |#p_$83| ($owns $s_$_22 call0formal_$_@l_$_0_$7)))))
    (forall( (|#p_$84| $ptr))(!(=> ($set_in |#p_$84| ($owns $s_$_21 call0formal_$_@l_$_0_$7)) (=> ($is_claimable ($typ |#p_$84|)) (= ($ref_cnt $s_$_21 |#p_$84|) ($ref_cnt $s_$_22 |#p_$84|))))  :pattern ( ($set_in |#p_$84| ($owns $s_$_21 call0formal_$_@l_$_0_$7)) ($is_claimable ($typ |#p_$84|)))))
    (forall( (|#p_$85| $ptr))(!(or (or (= ($select.sm ($statusmap $s_$_22) |#p_$85|) ($select.sm ($statusmap $s_$_21) |#p_$85|)) (and (and (and (and (and ($closed $s_$_21 |#p_$85|) (= ($owner $s_$_21 |#p_$85|) $me)) (and ($is |#p_$85| ($typ |#p_$85|)) ($typed $s_$_21 |#p_$85|))) (not (= ($kind_of ($typ |#p_$85|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$85|))) ($set_in |#p_$85| ($owns $s_$_21 call0formal_$_@l_$_0_$7)))) (= |#p_$85| call0formal_$_@l_$_0_$7))  :weight  0 :pattern ( ($select.sm ($statusmap $s_$_22) |#p_$85|))))
    (forall( (|p_$33_$43| $ptr))(!(<= ($timestamp $s_$_21 |p_$33_$43|) ($timestamp $s_$_22 |p_$33_$43|))  :weight  0 :pattern ( ($timestamp $s_$_22 |p_$33_$43|))))
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$7)) $kind_primitive))
  )(and 
    anon48@46_assertion
    anon48@47
))))
(let ((anon48@44 (=> (and true
    (= ($owner $s_$_21 call0formal_$_@l_$_0_$7) $me)
    (not ($closed $s_$_21 call0formal_$_@l_$_0_$7))
  )(and 
    anon48@45_assertion
    anon48@46
))))
(let ((anon48@42 (=> (and true
    ($is call0formal_$_@l_$_0_$7 ^Tree)
    ($typed $s_$_21 call0formal_$_@l_$_0_$7)
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$7)) $kind_primitive))
  )(and 
    anon48@43_assertion
    anon48@44
))))
(let ((anon48@40 (=> (and true
    ($pre_wrap $s_$_21)
    (= call0formal_$_@l_$_0_$7 ($ptr ^Tree P@t))
    (forall( (|#writes$1^243.19| $ptr))(!(=> ($set_in |#writes$1^243.19| ($owns $s_$_21 ($ptr ^Tree P@t))) (and (or ($in_writes_at $@wrTime$1^203.1 |#writes$1^243.19|) (>= ($timestamp $s_$_21 |#writes$1^243.19|) $@wrTime$1^203.1)) (and (and ($typed $s_$_21 |#writes$1^243.19|) (= ($owner $s_$_21 |#writes$1^243.19|) $me)) (=> ($is_primitive_ch ($typ |#writes$1^243.19|)) (not ($closed $s_$_21 |#writes$1^243.19|))))))  :pattern ( ($dont_instantiate |#writes$1^243.19|))))
  )
    anon48@42
)))
(let ((anon48@39 (=> (and true
    ($typed $s_$_21 ($ptr ^Tree P@t))
    (= ($owner $s_$_21 ($ptr ^Tree P@t)) $me)
    (=> ($is_primitive_ch ($typ ($ptr ^Tree P@t))) (not ($closed $s_$_21 ($ptr ^Tree P@t))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Tree P@t)) (>= ($timestamp $s_$_21 ($ptr ^Tree P@t)) $@wrTime$1^203.1))
  )(and 
    anon48@39_assertion
    anon48@40
))))
(let ((anon48@36 (=> (and true
    ($call_transition $s_$_20 $s_$_21)
    ($full_stop $s_$_21)
    ($good_state_ext $@tok$1^240.5 $s_$_21)
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($local_value_is $s_$_21 $@tok$2^0.0 $@loc.prestate@70 ($state_to_int prestate@70) ^$@state_t)
    ($local_value_is $s_$_21 $@tok$2^0.0 $@loc.prestate@70 ($state_to_int prestate@70_$_0) ^$@state_t)
    ($mutable $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    ($pre_wrap $s_$_21)
    ($thread_local $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    ($typed $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    (< ($current_timestamp $s_$_20) ($current_timestamp $s_$_21))
    (= ($memory $s_$_21) ($store.mem ($memory $s_$_20) call0formal_$_p_$_0_$6 call1formal_$_v_$_0_$6))
    (= ($select.sec.pc $s_$_21) ($select.sec.pc $s_$_20))
    (= ($statusmap $s_$_21) ($statusmap $s_$_20))
    (= ($typemap $s_$_21) ($typemap $s_$_20))
    (= call0formal_$_p_$_0_$6 ($dot ($ptr ^Tree P@t) Tree.R))
    (= call1formal_$_v_$_0_$6 ($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_20) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node P@x)) call3formal_$_$result_$_0)))
    (= prestate@70_$_0 $s_$_21)
    (forall( (|p_$33_$41| $ptr))(!(<= ($timestamp $s_$_20 |p_$33_$41|) ($timestamp $s_$_21 |p_$33_$41|))  :weight  0 :pattern ( ($timestamp $s_$_21 |p_$33_$41|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Tree P@t) Tree.R)) (>= ($timestamp $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R)) $@wrTime$1^203.1))
  )(and 
    anon48@38_assertion
    anon48@39
))))
(let ((anon48@22 (=> (and true
    ($call_transition $s_$_19 $s_$_20)
    ($call_transition $s_$_20 $s_$_20)
    ($full_stop $s_$_20)
    ($full_stop $s_$_20)
    ($good_state_ext $@tok$1^239.5 $s_$_20)
    ($good_state_ext $@tok$1^240.15 $s_$_20)
    ($is ($dot ($ptr ^Node P@x) Node.left) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.left) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.right) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.right) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($local_value_is $s_$_20 $@tok$1^240.15 $@loc.res_lambda@8@21 ($map_t..ptr_to..^Node.^^bool_to_int call3formal_$_$result_$_0) ($map_t ($ptr_to ^Node) ^^bool))
    ($local_value_is $s_$_20 $@tok$1^240.15 $@loc.res_lambda@8@21 ($map_t..ptr_to..^Node.^^bool_to_int res_lambda@8@21) ($map_t ($ptr_to ^Node) ^^bool))
    ($mutable $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
    ($thread_local $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
    ($thread_local $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
    ($thread_local $s_$_20 ($dot ($ptr ^Node P@x) Node.left))
    ($thread_local $s_$_20 ($dot ($ptr ^Node P@x) Node.right))
    ($thread_local $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    ($thread_local $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    ($typed $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
    ($typed $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
    ($typed $s_$_20 ($dot ($ptr ^Node P@x) Node.left))
    ($typed $s_$_20 ($dot ($ptr ^Node P@x) Node.right))
    ($typed $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    ($typed $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    ($typed $s_$_20 ($dot ($ptr ^Tree P@t) Tree.R))
    (< ($current_timestamp $s_$_19) ($current_timestamp $s_$_20))
    (= ($memory $s_$_20) ($store.mem ($memory $s_$_19) call0formal_$_p_$_0_$5 call1formal_$_v_$_0_$5))
    (= ($select.sec.pc $s_$_20) ($select.sec.pc $s_$_19))
    (= ($statusmap $s_$_20) ($statusmap $s_$_19))
    (= ($typemap $s_$_20) ($typemap $s_$_19))
    (= call0formal_$_@l2_$_0 ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_20) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_20) ($dot ($ptr ^Node P@x) Node.right))))))
    (= call0formal_$_p_$_0_$5 ($dot ($ptr ^Tree P@t) Tree.R))
    (= call1formal_$_@l1_$_0 ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_20) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_20) ($dot ($ptr ^Node P@x) Node.left))))))
    (= call1formal_$_v_$_0_$5 ($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node L@y_$_0)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node P@x))))))
    (= call2formal_$_@l0_$_0 ($ref ($ptr ^Node P@x)))
    (= call3formal_$_$result_$_0 (F@lambda@8 call0formal_$_@l2_$_0 call1formal_$_@l1_$_0 call2formal_$_@l0_$_0))
    (forall( (|p_$33_$39| $ptr))(!(<= ($timestamp $s_$_19 |p_$33_$39|) ($timestamp $s_$_20 |p_$33_$39|))  :weight  0 :pattern ( ($timestamp $s_$_20 |p_$33_$39|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Tree P@t) Tree.R)) (>= ($timestamp $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R)) $@wrTime$1^203.1))
  )(and 
    anon48@35_assertion
    anon48@36
))))
(let ((anon48@21 (=> (and true
    ($is ($dot ($ptr ^Tree P@t) Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($typed $s_$_19 ($dot ($ptr ^Tree P@t) Tree.R))
  )(and 
    anon48@21_assertion
    anon48@22
))))
(let ((anon48@20 (=> (and true
    (forall( (|Q#m$1^236.26#dt1_$0| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^236.26#dt1_$0|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right))))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1_$0|))) (> ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node |Q#m$1^236.26#dt1_$0|) Node.key)) ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.key)))))  :pattern ( (sk_hack ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node L@y_$_0))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1_$0|))))) :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right))))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1_$0|))))))
    (forall( (|Q#m$1^236.26#dt1| Int))(!(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right))))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))) (> ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node |Q#m$1^236.26#dt1|) Node.key)) ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.key)))))  :pattern ( (sk_hack ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node L@y_$_0))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))))) :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($select.mem ($memory $s_$_19) ($dot ($ptr ^Tree P@t) Tree.R))) ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right))))) ($ref ($ptr ^Node |Q#m$1^236.26#dt1|))))))
  )(and 
    anon48@20_assertion
    anon48@21
))))
(let ((anon48@19 (=> (and true
    (F@doMark ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right)))))
    (F@doMark ($ref ($ptr ^Node ($select.mem ($memory $s_$_19) ($dot ($ptr ^Node P@x) Node.right)))))
  )(and 
    anon48@19_assertion
    anon48@20
))))
(let ((anon48@18 (=> (and true
    ($full_stop $s_$_19)
    ($set_eq ($owns $s_$_19 ($ptr ^Node L@y_$_0)) $set_empty)
  )(and 
    anon48@18_assertion
    anon48@19
))))
(let ((anon48@16 (=> (and true
    ($call_transition $s_$_18 $s_$_19)
    ($closed $s_$_19 call0formal_$_@l_$_0_$6)
    ($good_state_ext $@tok$1^233.43 $s_$_19)
    ($is call0formal_$_@l_$_0_$6 ($typ call0formal_$_@l_$_0_$6))
    ($is_non_primitive ($typ call0formal_$_@l_$_0_$6))
    ($typed $s_$_19 call0formal_$_@l_$_0_$6)
    (< ($current_timestamp $s_$_18) ($current_timestamp $s_$_19))
    (= ($owner $s_$_18 call0formal_$_@l_$_0_$6) $me)
    (= ($owner $s_$_19 call0formal_$_@l_$_0_$6) $me)
    (= ($select.sec.pc $s_$_19) ($select.sec.pc $s_$_18))
    (= ($typemap $s_$_18) ($typemap $s_$_19))
    (=> ($is_claimable ($typ call0formal_$_@l_$_0_$6)) (and (= ($ref_cnt $s_$_18 call0formal_$_@l_$_0_$6) 0) (= ($ref_cnt $s_$_19 call0formal_$_@l_$_0_$6) 0)))
    (exists( (|#st_$2| $status))(= ($statusmap $s_$_19) ($store.sm ($statusmap staticWrapState@67_$_0) call0formal_$_@l_$_0_$6 |#st_$2|)))
    (exists( (|#x_$13| Int))(= ($memory $s_$_19) ($store.mem ($store.mem ($memory $s_$_18) call0formal_$_@l_$_0_$6 |#x_$13|) ($dot call0formal_$_@l_$_0_$6 ($owns_set_field ($typ call0formal_$_@l_$_0_$6))) ($ptrset_to_int owns@68_$_0))))
    (forall( (|p_$33_$37| $ptr))(!(<= ($timestamp $s_$_18 |p_$33_$37|) ($timestamp $s_$_19 |p_$33_$37|))  :weight  0 :pattern ( ($timestamp $s_$_19 |p_$33_$37|))))
    (not ($closed $s_$_18 call0formal_$_@l_$_0_$6))
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$6)) $kind_primitive))
  )(and 
    anon48@17_assertion
    anon48@18
))))
(let ((anon48@14 (=> (and true
    ($typed $s_$_18 call0formal_$_@l_$_0_$6)
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$6)) $kind_primitive))
  )(and 
    anon48@15_assertion
    anon48@16
))))
(let ((anon48@12 (=> (and true
    ($pre_static_wrap $s_$_18)
    ($pre_static_wrap $s_$_18)
    ($typed $s_$_18 ($ptr ^Node L@y_$_0))
    (= ($owner $s_$_18 ($ptr ^Node L@y_$_0)) $me)
    (= call0formal_$_@l_$_0_$6 ($ptr ^Node L@y_$_0))
    (=> ($is_primitive_ch ($typ ($ptr ^Node L@y_$_0))) (not ($closed $s_$_18 ($ptr ^Node L@y_$_0))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node L@y_$_0)) (>= ($timestamp $s_$_18 ($ptr ^Node L@y_$_0)) $@wrTime$1^203.1))
  )
    anon48@14
)))
(let ((anon48@11 (=> (and true
    ($full_stop $s_$_18)
    ($local_value_is $s_$_18 $@tok$2^0.0 $@loc.owns@68 ($ptrset_to_int owns@68) ^$@ptrset)
    ($local_value_is $s_$_18 $@tok$2^0.0 $@loc.owns@68 ($ptrset_to_int owns@68_$_0) ^$@ptrset)
    ($local_value_is $s_$_18 $@tok$2^0.0 $@loc.prestate@69 ($state_to_int prestate@69) ^$@state_t)
    ($local_value_is $s_$_18 $@tok$2^0.0 $@loc.prestate@69 ($state_to_int prestate@69_$_0) ^$@state_t)
    ($local_value_is $s_$_18 $@tok$2^0.0 $@loc.staticWrapState@67 ($state_to_int staticWrapState@67) ^$@state_t)
    ($local_value_is $s_$_18 $@tok$2^0.0 $@loc.staticWrapState@67 ($state_to_int staticWrapState@67_$_0) ^$@state_t)
    ($set_eq ($owns $s_$_18 ($ptr ^Node P@x)) $set_empty)
    (= owns@68_$_0 $set_empty)
    (= prestate@69_$_0 $s_$_18)
    (= staticWrapState@67_$_0 $s_$_18)
  )(and 
    anon48@11_assertion
    anon48@12
))))
(let ((anon48@9 (=> (and true
    ($call_transition $s_$_17 $s_$_18)
    ($closed $s_$_18 call0formal_$_@l_$_0_$5)
    ($good_state_ext $@tok$1^233.19 $s_$_18)
    ($is call0formal_$_@l_$_0_$5 ($typ call0formal_$_@l_$_0_$5))
    ($is_non_primitive ($typ call0formal_$_@l_$_0_$5))
    ($typed $s_$_18 call0formal_$_@l_$_0_$5)
    (< ($current_timestamp $s_$_17) ($current_timestamp $s_$_18))
    (= ($owner $s_$_17 call0formal_$_@l_$_0_$5) $me)
    (= ($owner $s_$_18 call0formal_$_@l_$_0_$5) $me)
    (= ($select.sec.pc $s_$_18) ($select.sec.pc $s_$_17))
    (= ($typemap $s_$_17) ($typemap $s_$_18))
    (=> ($is_claimable ($typ call0formal_$_@l_$_0_$5)) (and (= ($ref_cnt $s_$_17 call0formal_$_@l_$_0_$5) 0) (= ($ref_cnt $s_$_18 call0formal_$_@l_$_0_$5) 0)))
    (exists( (|#st_$1| $status))(= ($statusmap $s_$_18) ($store.sm ($statusmap staticWrapState@64_$_0) call0formal_$_@l_$_0_$5 |#st_$1|)))
    (exists( (|#x_$12| Int))(= ($memory $s_$_18) ($store.mem ($store.mem ($memory $s_$_17) call0formal_$_@l_$_0_$5 |#x_$12|) ($dot call0formal_$_@l_$_0_$5 ($owns_set_field ($typ call0formal_$_@l_$_0_$5))) ($ptrset_to_int owns@65_$_0))))
    (forall( (|p_$33_$35| $ptr))(!(<= ($timestamp $s_$_17 |p_$33_$35|) ($timestamp $s_$_18 |p_$33_$35|))  :weight  0 :pattern ( ($timestamp $s_$_18 |p_$33_$35|))))
    (not ($closed $s_$_17 call0formal_$_@l_$_0_$5))
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$5)) $kind_primitive))
  )(and 
    anon48@10_assertion
    anon48@11
))))
(let ((anon48@7 (=> (and true
    ($typed $s_$_17 call0formal_$_@l_$_0_$5)
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$5)) $kind_primitive))
  )(and 
    anon48@8_assertion
    anon48@9
))))
(let ((anon48@5 (=> (and true
    ($pre_static_wrap $s_$_17)
    ($pre_static_wrap $s_$_17)
    ($typed $s_$_17 ($ptr ^Node P@x))
    (= ($owner $s_$_17 ($ptr ^Node P@x)) $me)
    (= call0formal_$_@l_$_0_$5 ($ptr ^Node P@x))
    (=> ($is_primitive_ch ($typ ($ptr ^Node P@x))) (not ($closed $s_$_17 ($ptr ^Node P@x))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node P@x)) (>= ($timestamp $s_$_17 ($ptr ^Node P@x)) $@wrTime$1^203.1))
  )
    anon48@7
)))
(let ((anon48@4 (=> (and true
    ($call_transition $s_$_16 $s_$_17)
    ($full_stop $s_$_17)
    ($good_state_ext $@tok$1^232.3 $s_$_17)
    ($local_value_is $s_$_17 $@tok$2^0.0 $@loc.owns@65 ($ptrset_to_int owns@65) ^$@ptrset)
    ($local_value_is $s_$_17 $@tok$2^0.0 $@loc.owns@65 ($ptrset_to_int owns@65_$_0) ^$@ptrset)
    ($local_value_is $s_$_17 $@tok$2^0.0 $@loc.prestate@66 ($state_to_int prestate@66) ^$@state_t)
    ($local_value_is $s_$_17 $@tok$2^0.0 $@loc.prestate@66 ($state_to_int prestate@66_$_0) ^$@state_t)
    ($local_value_is $s_$_17 $@tok$2^0.0 $@loc.staticWrapState@64 ($state_to_int staticWrapState@64) ^$@state_t)
    ($local_value_is $s_$_17 $@tok$2^0.0 $@loc.staticWrapState@64 ($state_to_int staticWrapState@64_$_0) ^$@state_t)
    ($mutable $s_$_16 ($dot ($ptr ^Node P@x) Node.parent))
    (< ($current_timestamp $s_$_16) ($current_timestamp $s_$_17))
    (= ($memory $s_$_17) ($store.mem ($memory $s_$_16) call0formal_$_p_$_0_$4 call1formal_$_v_$_0_$4))
    (= ($select.sec.pc $s_$_17) ($select.sec.pc $s_$_16))
    (= ($statusmap $s_$_17) ($statusmap $s_$_16))
    (= ($typemap $s_$_17) ($typemap $s_$_16))
    (= call0formal_$_p_$_0_$4 ($dot ($ptr ^Node P@x) Node.parent))
    (= call1formal_$_v_$_0_$4 ($ref ($ptr ^Node L@y_$_0)))
    (= owns@65_$_0 $set_empty)
    (= prestate@66_$_0 $s_$_17)
    (= staticWrapState@64_$_0 $s_$_17)
    (forall( (|p_$33_$33| $ptr))(!(<= ($timestamp $s_$_16 |p_$33_$33|) ($timestamp $s_$_17 |p_$33_$33|))  :weight  0 :pattern ( ($timestamp $s_$_17 |p_$33_$33|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node P@x) Node.parent)) (>= ($timestamp $s_$_16 ($dot ($ptr ^Node P@x) Node.parent)) $@wrTime$1^203.1))
  )(and 
    anon48@4_assertion
    anon48@5
))))
(let ((anon48@2 (=> (and true
    ($call_transition $s_$_15 $s_$_16)
    ($full_stop $s_$_16)
    ($good_state_ext $@tok$1^231.3 $s_$_16)
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($mutable $s_$_15 ($dot ($ptr ^Node L@y_$_0) Node.left))
    ($typed $s_$_16 ($dot ($ptr ^Node P@x) Node.parent))
    (< ($current_timestamp $s_$_15) ($current_timestamp $s_$_16))
    (= ($memory $s_$_16) ($store.mem ($memory $s_$_15) call0formal_$_p_$_0_$3 call1formal_$_v_$_0_$3))
    (= ($select.sec.pc $s_$_16) ($select.sec.pc $s_$_15))
    (= ($statusmap $s_$_16) ($statusmap $s_$_15))
    (= ($typemap $s_$_16) ($typemap $s_$_15))
    (= call0formal_$_p_$_0_$3 ($dot ($ptr ^Node L@y_$_0) Node.left))
    (= call1formal_$_v_$_0_$3 ($ref ($ptr ^Node P@x)))
    (forall( (|p_$33_$31| $ptr))(!(<= ($timestamp $s_$_15 |p_$33_$31|) ($timestamp $s_$_16 |p_$33_$31|))  :weight  0 :pattern ( ($timestamp $s_$_16 |p_$33_$31|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node L@y_$_0) Node.left)) (>= ($timestamp $s_$_15 ($dot ($ptr ^Node L@y_$_0) Node.left)) $@wrTime$1^203.1))
  )(and 
    anon48@3_assertion
    anon48@4
))))
(let ((anon48 (=> (and true
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($typed $s_$_15 ($dot ($ptr ^Node L@y_$_0) Node.left))
  )(and 
    anon48@1_assertion
    anon48@2
))))
(let ((anon0107_Then@2 (=> (and true
    ($call_transition $s_$_8 $s_$_9)
    ($full_stop $s_$_9)
    ($good_state_ext $@tok$1^221.5 $s_$_9)
    ($mutable $s_$_8 ($dot ($ptr ^Tree P@t) Tree.root))
    (< ($current_timestamp $s_$_8) ($current_timestamp $s_$_9))
    (= $s_$_15 $s_$_9)
    (= ($memory $s_$_9) ($store.mem ($memory $s_$_8) call0formal_$_p_$_0_$8 call1formal_$_v_$_0_$8))
    (= ($select.sec.pc $s_$_9) ($select.sec.pc $s_$_8))
    (= ($statusmap $s_$_9) ($statusmap $s_$_8))
    (= ($typemap $s_$_9) ($typemap $s_$_8))
    (= call0formal_$_p_$_0_$8 ($dot ($ptr ^Tree P@t) Tree.root))
    (= call1formal_$_v_$_0_$8 ($ref ($ptr ^Node L@y_$_0)))
    (forall( (|p_$33_$21| $ptr))(!(<= ($timestamp $s_$_8 |p_$33_$21|) ($timestamp $s_$_9 |p_$33_$21|))  :weight  0 :pattern ( ($timestamp $s_$_9 |p_$33_$21|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Tree P@t) Tree.root)) (>= ($timestamp $s_$_8 ($dot ($ptr ^Tree P@t) Tree.root)) $@wrTime$1^203.1))
  )
    anon48
)))
(let ((anon45@7 (=> (and true
    ($full_stop $s_$_14)
    ($set_eq ($owns $s_$_14 ($ptr ^Node ($select.mem ($memory $s_$_14) ($dot ($ptr ^Node P@x) Node.parent)))) $set_empty)
    (= $s_$_15 $s_$_14)
  )
    anon48
)))
(let ((anon0107_Then (=> (and true
    $_$_condition_$0
    $_$_condition_$0
    ($is ($dot ($ptr ^Tree P@t) Tree.root) ($ptr_to ^Node))
    ($typed $s_$_8 ($dot ($ptr ^Tree P@t) Tree.root))
    (= $_$_condition_$0 (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) ($ref $null)))
    (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) ($ref $null))
  )(and 
    anon0107_Then@1_assertion
    anon0107_Then@2
))))
(let ((anon45@5 (=> (and true
    ($call_transition $s_$_13 $s_$_14)
    ($closed $s_$_14 call0formal_$_@l_$_0_$4)
    ($good_state_ext $@tok$1^224.32 $s_$_14)
    ($is call0formal_$_@l_$_0_$4 ($typ call0formal_$_@l_$_0_$4))
    ($is_non_primitive ($typ call0formal_$_@l_$_0_$4))
    ($typed $s_$_14 call0formal_$_@l_$_0_$4)
    (< ($current_timestamp $s_$_13) ($current_timestamp $s_$_14))
    (= ($owner $s_$_13 call0formal_$_@l_$_0_$4) $me)
    (= ($owner $s_$_14 call0formal_$_@l_$_0_$4) $me)
    (= ($select.sec.pc $s_$_14) ($select.sec.pc $s_$_13))
    (= ($typemap $s_$_13) ($typemap $s_$_14))
    (=> ($is_claimable ($typ call0formal_$_@l_$_0_$4)) (and (= ($ref_cnt $s_$_13 call0formal_$_@l_$_0_$4) 0) (= ($ref_cnt $s_$_14 call0formal_$_@l_$_0_$4) 0)))
    (exists( (|#st_$0| $status))(= ($statusmap $s_$_14) ($store.sm ($statusmap staticWrapState@61_$_0) call0formal_$_@l_$_0_$4 |#st_$0|)))
    (exists( (|#x_$11| Int))(= ($memory $s_$_14) ($store.mem ($store.mem ($memory $s_$_13) call0formal_$_@l_$_0_$4 |#x_$11|) ($dot call0formal_$_@l_$_0_$4 ($owns_set_field ($typ call0formal_$_@l_$_0_$4))) ($ptrset_to_int owns@62_$_0))))
    (forall( (|p_$33_$29| $ptr))(!(<= ($timestamp $s_$_13 |p_$33_$29|) ($timestamp $s_$_14 |p_$33_$29|))  :weight  0 :pattern ( ($timestamp $s_$_14 |p_$33_$29|))))
    (not ($closed $s_$_13 call0formal_$_@l_$_0_$4))
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$4)) $kind_primitive))
  )(and 
    anon45@6_assertion
    anon45@7
))))
(let ((anon45@3 (=> (and true
    ($typed $s_$_13 call0formal_$_@l_$_0_$4)
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$4)) $kind_primitive))
  )(and 
    anon45@4_assertion
    anon45@5
))))
(let ((anon45@1 (=> (and true
    ($pre_static_wrap $s_$_13)
    ($pre_static_wrap $s_$_13)
    ($typed $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent))))
    (= ($owner $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent)))) $me)
    (= call0formal_$_@l_$_0_$4 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent))))
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent))))) (not ($closed $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent)))) (>= ($timestamp $s_$_13 ($ptr ^Node ($select.mem ($memory $s_$_13) ($dot ($ptr ^Node P@x) Node.parent)))) $@wrTime$1^203.1))
  )
    anon45@3
)))
(let ((anon45 (=> (and true
    ($local_value_is $s_$_13 $@tok$2^0.0 $@loc.owns@62 ($ptrset_to_int owns@62) ^$@ptrset)
    ($local_value_is $s_$_13 $@tok$2^0.0 $@loc.owns@62 ($ptrset_to_int owns@62_$_0) ^$@ptrset)
    ($local_value_is $s_$_13 $@tok$2^0.0 $@loc.prestate@63 ($state_to_int prestate@63) ^$@state_t)
    ($local_value_is $s_$_13 $@tok$2^0.0 $@loc.prestate@63 ($state_to_int prestate@63_$_0) ^$@state_t)
    ($local_value_is $s_$_13 $@tok$2^0.0 $@loc.staticWrapState@61 ($state_to_int staticWrapState@61) ^$@state_t)
    ($local_value_is $s_$_13 $@tok$2^0.0 $@loc.staticWrapState@61 ($state_to_int staticWrapState@61_$_0) ^$@state_t)
    (= owns@62_$_0 $set_empty)
    (= prestate@63_$_0 $s_$_13)
    (= staticWrapState@61_$_0 $s_$_13)
  )(and 
    anon45_assertion
    anon45@1
))))
(let ((anon0108_Else@2 (=> (and true
    ($call_transition $s_$_10 $s_$_12)
    ($full_stop $s_$_12)
    ($good_state_ext $@tok$1^228.9 $s_$_12)
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($mutable $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right))
    ($thread_local $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
    ($typed $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
    (< ($current_timestamp $s_$_10) ($current_timestamp $s_$_12))
    (= $s_$_13 $s_$_12)
    (= ($memory $s_$_12) ($store.mem ($memory $s_$_10) call0formal_$_p_$_0_$2 call1formal_$_v_$_0_$2))
    (= ($select.sec.pc $s_$_12) ($select.sec.pc $s_$_10))
    (= ($statusmap $s_$_12) ($statusmap $s_$_10))
    (= ($typemap $s_$_12) ($typemap $s_$_10))
    (= call0formal_$_p_$_0_$2 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right))
    (= call1formal_$_v_$_0_$2 ($ref ($ptr ^Node L@y_$_0)))
    (forall( (|p_$33_$27| $ptr))(!(<= ($timestamp $s_$_10 |p_$33_$27|) ($timestamp $s_$_12 |p_$33_$27|))  :weight  0 :pattern ( ($timestamp $s_$_12 |p_$33_$27|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right)) (>= ($timestamp $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right)) $@wrTime$1^203.1))
  )
    anon45
)))
(let ((anon0108_Then@2 (=> (and true
    ($call_transition $s_$_10 $s_$_11)
    ($full_stop $s_$_11)
    ($good_state_ext $@tok$1^226.9 $s_$_11)
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($mutable $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
    ($thread_local $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
    ($typed $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
    (< ($current_timestamp $s_$_10) ($current_timestamp $s_$_11))
    (= $s_$_13 $s_$_11)
    (= ($memory $s_$_11) ($store.mem ($memory $s_$_10) call0formal_$_p_$_0_$7 call1formal_$_v_$_0_$7))
    (= ($select.sec.pc $s_$_11) ($select.sec.pc $s_$_10))
    (= ($statusmap $s_$_11) ($statusmap $s_$_10))
    (= ($typemap $s_$_11) ($typemap $s_$_10))
    (= call0formal_$_p_$_0_$7 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
    (= call1formal_$_v_$_0_$7 ($ref ($ptr ^Node L@y_$_0)))
    (forall( (|p_$33_$25| $ptr))(!(<= ($timestamp $s_$_10 |p_$33_$25|) ($timestamp $s_$_11 |p_$33_$25|))  :weight  0 :pattern ( ($timestamp $s_$_11 |p_$33_$25|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)) (>= ($timestamp $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)) $@wrTime$1^203.1))
  )
    anon45
)))
(let ((anon0108_Else@1 (=> (and true
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right) ($ptr_to ^Node))
    ($typed $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.right))
  )(and 
    anon0108_Else@1_assertion
    anon0108_Else@2
))))
(let ((anon0108_Then (=> (and true
    $_$_condition_$1
    $_$_condition_$1
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left) ($ptr_to ^Node))
    ($typed $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
    (= $_$_condition_$1 (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)))) ($ref ($ptr ^Node P@x))))
    (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)))) ($ref ($ptr ^Node P@x)))
  )(and 
    anon0108_Then@1_assertion
    anon0108_Then@2
))))
(let ((anon0108_Else (=> (and true
    (= $_$_condition_$1 (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)))) ($ref ($ptr ^Node P@x))))
    (not $_$_condition_$1)
    (not $_$_condition_$1)
    (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left)))) ($ref ($ptr ^Node P@x))))
  )(and 
    anon0108_Else_assertion
    anon0108_Else@1
))))
(let ((anon0107_Else@9 (=> (and true
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($thread_local $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
  )
    (and anon0108_Else anon0108_Then)
)))
(let ((anon0107_Else@8 (=> (and true
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($typed $s_$_10 ($dot ($ptr ^Node P@x) Node.parent))
  )(and 
    anon0107_Else@8_assertion
    anon0107_Else@9
))))
(let ((anon0107_Else@7 (=> (and true
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left) ($ptr_to ^Node))
    ($thread_local $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
  )(and 
    anon0107_Else@7_assertion
    anon0107_Else@8
))))
(let ((anon0107_Else@6 (=> (and true
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left) ($ptr_to ^Node))
    ($typed $s_$_10 ($dot ($ptr ^Node ($select.mem ($memory $s_$_10) ($dot ($ptr ^Node P@x) Node.parent))) Node.left))
  )(and 
    anon0107_Else@6_assertion
    anon0107_Else@7
))))
(let ((anon0107_Else@4 (=> (and true
    ($call_transition $s_$_8 $s_$_10)
    ($full_stop $s_$_10)
    ($good_state_ext $@tok$1^224.32 $s_$_10)
    ($mutable $s_$_10 call0formal_$_@l_$_0_$3)
    ($post_unwrap $s_$_8 $s_$_10)
    ($pre_static_unwrap $s_$_8)
    (< ($current_timestamp $s_$_8) ($current_timestamp $s_$_10))
    (= ($owns $s_$_8 call0formal_$_@l_$_0_$3) ($owns $s_$_10 call0formal_$_@l_$_0_$3))
    (= ($select.sec.pc $s_$_10) ($select.sec.pc $s_$_8))
    (= ($timestamp $s_$_10 call0formal_$_@l_$_0_$3) ($current_timestamp $s_$_10))
    (= ($typemap $s_$_8) ($typemap $s_$_10))
    (exists( (|#x_$10| Int))(= ($memory $s_$_10) ($store.mem ($memory $s_$_8) call0formal_$_@l_$_0_$3 |#x_$10|)))
    (forall( (|#p_$78| $ptr))(!(=> ($set_in |#p_$78| ($owns $s_$_8 call0formal_$_@l_$_0_$3)) (and (and (and ($typed $s_$_8 |#p_$78|) (and (and (and (and ($closed $s_$_10 |#p_$78|) (= ($owner $s_$_10 |#p_$78|) $me)) (and ($is |#p_$78| ($typ |#p_$78|)) ($typed $s_$_10 |#p_$78|))) (not (= ($kind_of ($typ |#p_$78|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$78|)))) (= ($timestamp $s_$_10 |#p_$78|) ($current_timestamp $s_$_10))) ($is_non_primitive ($typ |#p_$78|))))  :pattern ( ($select.sm ($statusmap $s_$_10) |#p_$78|)) :pattern ( ($select.tm ($typemap $s_$_10) |#p_$78|)) :pattern ( ($set_in |#p_$78| ($owns $s_$_8 call0formal_$_@l_$_0_$3)))))
    (forall( (|#p_$79| $ptr))(!(=> ($set_in |#p_$79| ($owns $s_$_8 call0formal_$_@l_$_0_$3)) (=> ($is_claimable ($typ |#p_$79|)) (= ($ref_cnt $s_$_8 |#p_$79|) ($ref_cnt $s_$_10 |#p_$79|))))  :pattern ( ($set_in |#p_$79| ($owns $s_$_8 call0formal_$_@l_$_0_$3)) ($is_claimable ($typ |#p_$79|)))))
    (forall( (|#p_$80| $ptr))(!(=> ($thread_local $s_$_8 |#p_$80|) ($thread_local $s_$_10 |#p_$80|))  :pattern ( ($thread_local $s_$_10 |#p_$80|))))
    (forall( (|#p_$81| $ptr))(!(or (or (= ($select.sm ($statusmap $s_$_10) |#p_$81|) ($select.sm ($statusmap $s_$_8) |#p_$81|)) (and (not (= ($kind_of ($typ ($owner $s_$_8 |#p_$81|))) $kind_thread)) ($set_in |#p_$81| ($owns $s_$_8 call0formal_$_@l_$_0_$3)))) (= |#p_$81| call0formal_$_@l_$_0_$3))  :weight  0 :pattern ( ($select.sm ($statusmap $s_$_10) |#p_$81|))))
    (forall( (|p_$33_$23| $ptr))(!(<= ($timestamp $s_$_8 |p_$33_$23|) ($timestamp $s_$_10 |p_$33_$23|))  :weight  0 :pattern ( ($timestamp $s_$_10 |p_$33_$23|))))
    (or (not ($is_claimable ($typ call0formal_$_@l_$_0_$3))) (= ($ref_cnt $s_$_8 call0formal_$_@l_$_0_$3) 0))
  )(and 
    anon0107_Else@5_assertion
    anon0107_Else@6
))))
(let ((anon0107_Else@3 (=> (and true
    ($inv2 $s_$_8 $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))) ^Node)
    ($pre_static_unwrap $s_$_8)
    ($typed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))
    (= ($owner $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) $me)
    (= call0formal_$_@l_$_0_$3 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))
    (= owns@59_$_0 ($owns $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))))
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))) (not ($closed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) (>= ($timestamp $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) $@wrTime$1^203.1))
  )
    anon0107_Else@4
)))
(let ((anon0107_Else@2 (=> (and true
    ($closed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))
    ($is ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent))))
    (= ($owner $s_$_8 ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
  )(and 
    anon0107_Else@2_assertion
    anon0107_Else@3
))))
(let ((anon0107_Else@1 (=> (and true
    ($local_value_is $s_$_8 $@tok$2^0.0 $@loc.owns@59 ($ptrset_to_int owns@59) ^$@ptrset)
    ($local_value_is $s_$_8 $@tok$2^0.0 $@loc.owns@59 ($ptrset_to_int owns@59_$_0) ^$@ptrset)
    ($local_value_is $s_$_8 $@tok$2^0.0 $@loc.prestate@58 ($state_to_int prestate@58) ^$@state_t)
    ($local_value_is $s_$_8 $@tok$2^0.0 $@loc.prestate@58 ($state_to_int prestate@58_$_0) ^$@state_t)
    ($local_value_is $s_$_8 $@tok$2^0.0 $@loc.prestate@60 ($state_to_int prestate@60) ^$@state_t)
    ($local_value_is $s_$_8 $@tok$2^0.0 $@loc.prestate@60 ($state_to_int prestate@60_$_0) ^$@state_t)
    (= owns@59_$_0 $set_empty)
    (= prestate@58_$_0 $s_$_8)
    (= prestate@60_$_0 $s_$_8)
    (F@doMark ($ref ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))))
    (F@doMark ($ref ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))))
  )(and 
    anon0107_Else@1_assertion
    anon0107_Else@2
))))
(let ((anon0107_Else (=> (and true
    (= $_$_condition_$0 (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) ($ref $null)))
    (not $_$_condition_$0)
    (not $_$_condition_$0)
    (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_8) ($dot ($ptr ^Node P@x) Node.parent)))) ($ref $null)))
  )(and 
    anon0107_Else_assertion
    anon0107_Else@1
))))
(let ((anon47@2 (=> (and true
    ($call_transition $s_$_7 $s_$_8)
    ($full_stop $s_$_8)
    ($good_state_ext $@tok$1^219.3 $s_$_8)
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.parent) ($ptr_to ^Node))
    ($mutable $s_$_7 ($dot ($ptr ^Node L@y_$_0) Node.parent))
    ($thread_local $s_$_7 ($dot ($ptr ^Node P@x) Node.parent))
    ($thread_local $s_$_8 ($dot ($ptr ^Node P@x) Node.parent))
    ($typed $s_$_7 ($dot ($ptr ^Node P@x) Node.parent))
    ($typed $s_$_8 ($dot ($ptr ^Node P@x) Node.parent))
    (< ($current_timestamp $s_$_7) ($current_timestamp $s_$_8))
    (= ($memory $s_$_8) ($store.mem ($memory $s_$_7) call0formal_$_p_$_0_$1 call1formal_$_v_$_0_$1))
    (= ($select.sec.pc $s_$_8) ($select.sec.pc $s_$_7))
    (= ($statusmap $s_$_8) ($statusmap $s_$_7))
    (= ($typemap $s_$_8) ($typemap $s_$_7))
    (= call0formal_$_p_$_0_$1 ($dot ($ptr ^Node L@y_$_0) Node.parent))
    (= call1formal_$_v_$_0_$1 ($ref ($ptr ^Node ($select.mem ($memory $s_$_7) ($dot ($ptr ^Node P@x) Node.parent)))))
    (forall( (|p_$33_$19| $ptr))(!(<= ($timestamp $s_$_7 |p_$33_$19|) ($timestamp $s_$_8 |p_$33_$19|))  :weight  0 :pattern ( ($timestamp $s_$_8 |p_$33_$19|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node L@y_$_0) Node.parent)) (>= ($timestamp $s_$_7 ($dot ($ptr ^Node L@y_$_0) Node.parent)) $@wrTime$1^203.1))
  )
    (and anon0107_Else anon0107_Then)
)))
(let ((anon47 (=> (and true
    ($is ($dot ($ptr ^Node L@y_$_0) Node.parent) ($ptr_to ^Node))
    ($typed $s_$_7 ($dot ($ptr ^Node L@y_$_0) Node.parent))
  )(and 
    anon47@1_assertion
    anon47@2
))))
(let ((anon0106_Else (=> (and true
    (= $_$_condition (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) ($ref $null))))
    (= $s_$_7 $s_$_3)
    (not $_$_condition)
    (not $_$_condition)
    (not (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) ($ref $null))))
  )
    anon47
)))
(let ((anon0106_Then@15 (=> (and true
    ($full_stop $s_$_6)
    ($set_eq ($owns $s_$_6 ($ptr ^Node ($select.mem ($memory $s_$_6) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $set_empty)
    (= $s_$_7 $s_$_6)
  )
    anon47
)))
(let ((anon0106_Then@13 (=> (and true
    ($call_transition $s_$_5 $s_$_6)
    ($closed $s_$_6 call0formal_$_@l_$_0_$9)
    ($good_state_ext $@tok$1^218.34 $s_$_6)
    ($is call0formal_$_@l_$_0_$9 ($typ call0formal_$_@l_$_0_$9))
    ($is_non_primitive ($typ call0formal_$_@l_$_0_$9))
    ($typed $s_$_6 call0formal_$_@l_$_0_$9)
    (< ($current_timestamp $s_$_5) ($current_timestamp $s_$_6))
    (= ($owner $s_$_5 call0formal_$_@l_$_0_$9) $me)
    (= ($owner $s_$_6 call0formal_$_@l_$_0_$9) $me)
    (= ($select.sec.pc $s_$_6) ($select.sec.pc $s_$_5))
    (= ($typemap $s_$_5) ($typemap $s_$_6))
    (=> ($is_claimable ($typ call0formal_$_@l_$_0_$9)) (and (= ($ref_cnt $s_$_5 call0formal_$_@l_$_0_$9) 0) (= ($ref_cnt $s_$_6 call0formal_$_@l_$_0_$9) 0)))
    (exists( (|#st| $status))(= ($statusmap $s_$_6) ($store.sm ($statusmap staticWrapState@55_$_0) call0formal_$_@l_$_0_$9 |#st|)))
    (exists( (|#x_$9| Int))(= ($memory $s_$_6) ($store.mem ($store.mem ($memory $s_$_5) call0formal_$_@l_$_0_$9 |#x_$9|) ($dot call0formal_$_@l_$_0_$9 ($owns_set_field ($typ call0formal_$_@l_$_0_$9))) ($ptrset_to_int owns@56_$_0))))
    (forall( (|p_$33_$17| $ptr))(!(<= ($timestamp $s_$_5 |p_$33_$17|) ($timestamp $s_$_6 |p_$33_$17|))  :weight  0 :pattern ( ($timestamp $s_$_6 |p_$33_$17|))))
    (not ($closed $s_$_5 call0formal_$_@l_$_0_$9))
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$9)) $kind_primitive))
  )(and 
    anon0106_Then@14_assertion
    anon0106_Then@15
))))
(let ((anon0106_Then@11 (=> (and true
    ($typed $s_$_5 call0formal_$_@l_$_0_$9)
    (not (= ($kind_of ($typ call0formal_$_@l_$_0_$9)) $kind_primitive))
  )(and 
    anon0106_Then@12_assertion
    anon0106_Then@13
))))
(let ((anon0106_Then@9 (=> (and true
    ($pre_static_wrap $s_$_5)
    ($pre_static_wrap $s_$_5)
    ($typed $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (= ($owner $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $me)
    (= call0formal_$_@l_$_0_$9 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left))))) (not ($closed $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left)))) (>= ($timestamp $s_$_5 ($ptr ^Node ($select.mem ($memory $s_$_5) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $@wrTime$1^203.1))
  )
    anon0106_Then@11
)))
(let ((anon0106_Then@8 (=> (and true
    ($call_transition $s_$_4 $s_$_5)
    ($full_stop $s_$_5)
    ($good_state_ext $@tok$1^218.43 $s_$_5)
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($local_value_is $s_$_5 $@tok$2^0.0 $@loc.owns@56 ($ptrset_to_int owns@56) ^$@ptrset)
    ($local_value_is $s_$_5 $@tok$2^0.0 $@loc.owns@56 ($ptrset_to_int owns@56_$_0) ^$@ptrset)
    ($local_value_is $s_$_5 $@tok$2^0.0 $@loc.prestate@57 ($state_to_int prestate@57) ^$@state_t)
    ($local_value_is $s_$_5 $@tok$2^0.0 $@loc.prestate@57 ($state_to_int prestate@57_$_0) ^$@state_t)
    ($local_value_is $s_$_5 $@tok$2^0.0 $@loc.staticWrapState@55 ($state_to_int staticWrapState@55) ^$@state_t)
    ($local_value_is $s_$_5 $@tok$2^0.0 $@loc.staticWrapState@55 ($state_to_int staticWrapState@55_$_0) ^$@state_t)
    ($thread_local $s_$_4 ($dot ($ptr ^Node L@y_$_0) Node.left))
    (< ($current_timestamp $s_$_4) ($current_timestamp $s_$_5))
    (= ($memory $s_$_5) ($store.mem ($memory $s_$_4) call0formal_$_p_$_0_$9 call1formal_$_v_$_0_$9))
    (= ($select.sec.pc $s_$_5) ($select.sec.pc $s_$_4))
    (= ($statusmap $s_$_5) ($statusmap $s_$_4))
    (= ($typemap $s_$_5) ($typemap $s_$_4))
    (= call0formal_$_p_$_0_$9 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent))
    (= call1formal_$_v_$_0_$9 ($ref ($ptr ^Node P@x)))
    (= owns@56_$_0 $set_empty)
    (= prestate@57_$_0 $s_$_5)
    (= staticWrapState@55_$_0 $s_$_5)
    (forall( (|p_$33_$15| $ptr))(!(<= ($timestamp $s_$_4 |p_$33_$15|) ($timestamp $s_$_5 |p_$33_$15|))  :weight  0 :pattern ( ($timestamp $s_$_5 |p_$33_$15|))))
  )(and 
    anon0106_Then@8_assertion
    anon0106_Then@9
))))
(let ((anon0106_Then@7 (=> (and true
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($typed $s_$_4 ($dot ($ptr ^Node L@y_$_0) Node.left))
  )(and 
    anon0106_Then@7_assertion
    anon0106_Then@8
))))
(let ((anon0106_Then@6 (=> (and true
    ($mutable $s_$_4 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent)) (>= ($timestamp $s_$_4 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent)) $@wrTime$1^203.1))
  )(and 
    anon0106_Then@6_assertion
    anon0106_Then@7
))))
(let ((anon0106_Then@5 (=> (and true
    ($is ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent) ($ptr_to ^Node))
    ($typed $s_$_4 ($dot ($ptr ^Node ($select.mem ($memory $s_$_4) ($dot ($ptr ^Node L@y_$_0) Node.left))) Node.parent))
  )(and 
    anon0106_Then@5_assertion
    anon0106_Then@6
))))
(let ((anon0106_Then@3 (=> (and true
    ($call_transition $s_$_3 $s_$_4)
    ($full_stop $s_$_4)
    ($good_state_ext $@tok$1^218.34 $s_$_4)
    ($mutable $s_$_4 call0formal_$_@l_$_0_$8)
    ($post_unwrap $s_$_3 $s_$_4)
    ($pre_static_unwrap $s_$_3)
    (< ($current_timestamp $s_$_3) ($current_timestamp $s_$_4))
    (= ($owns $s_$_3 call0formal_$_@l_$_0_$8) ($owns $s_$_4 call0formal_$_@l_$_0_$8))
    (= ($select.sec.pc $s_$_4) ($select.sec.pc $s_$_3))
    (= ($timestamp $s_$_4 call0formal_$_@l_$_0_$8) ($current_timestamp $s_$_4))
    (= ($typemap $s_$_3) ($typemap $s_$_4))
    (exists( (|#x_$8| Int))(= ($memory $s_$_4) ($store.mem ($memory $s_$_3) call0formal_$_@l_$_0_$8 |#x_$8|)))
    (forall( (|#p_$74| $ptr))(!(=> ($set_in |#p_$74| ($owns $s_$_3 call0formal_$_@l_$_0_$8)) (and (and (and ($typed $s_$_3 |#p_$74|) (and (and (and (and ($closed $s_$_4 |#p_$74|) (= ($owner $s_$_4 |#p_$74|) $me)) (and ($is |#p_$74| ($typ |#p_$74|)) ($typed $s_$_4 |#p_$74|))) (not (= ($kind_of ($typ |#p_$74|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$74|)))) (= ($timestamp $s_$_4 |#p_$74|) ($current_timestamp $s_$_4))) ($is_non_primitive ($typ |#p_$74|))))  :pattern ( ($select.sm ($statusmap $s_$_4) |#p_$74|)) :pattern ( ($select.tm ($typemap $s_$_4) |#p_$74|)) :pattern ( ($set_in |#p_$74| ($owns $s_$_3 call0formal_$_@l_$_0_$8)))))
    (forall( (|#p_$75| $ptr))(!(=> ($set_in |#p_$75| ($owns $s_$_3 call0formal_$_@l_$_0_$8)) (=> ($is_claimable ($typ |#p_$75|)) (= ($ref_cnt $s_$_3 |#p_$75|) ($ref_cnt $s_$_4 |#p_$75|))))  :pattern ( ($set_in |#p_$75| ($owns $s_$_3 call0formal_$_@l_$_0_$8)) ($is_claimable ($typ |#p_$75|)))))
    (forall( (|#p_$76| $ptr))(!(=> ($thread_local $s_$_3 |#p_$76|) ($thread_local $s_$_4 |#p_$76|))  :pattern ( ($thread_local $s_$_4 |#p_$76|))))
    (forall( (|#p_$77| $ptr))(!(or (or (= ($select.sm ($statusmap $s_$_4) |#p_$77|) ($select.sm ($statusmap $s_$_3) |#p_$77|)) (and (not (= ($kind_of ($typ ($owner $s_$_3 |#p_$77|))) $kind_thread)) ($set_in |#p_$77| ($owns $s_$_3 call0formal_$_@l_$_0_$8)))) (= |#p_$77| call0formal_$_@l_$_0_$8))  :weight  0 :pattern ( ($select.sm ($statusmap $s_$_4) |#p_$77|))))
    (forall( (|p_$33_$13| $ptr))(!(<= ($timestamp $s_$_3 |p_$33_$13|) ($timestamp $s_$_4 |p_$33_$13|))  :weight  0 :pattern ( ($timestamp $s_$_4 |p_$33_$13|))))
    (or (not ($is_claimable ($typ call0formal_$_@l_$_0_$8))) (= ($ref_cnt $s_$_3 call0formal_$_@l_$_0_$8) 0))
  )(and 
    anon0106_Then@4_assertion
    anon0106_Then@5
))))
(let ((anon0106_Then@2 (=> (and true
    ($inv2 $s_$_3 $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))) ^Node)
    ($pre_static_unwrap $s_$_3)
    ($typed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (= ($owner $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $me)
    (= call0formal_$_@l_$_0_$8 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (= owns@53_$_0 ($owns $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))))
    (=> ($is_primitive_ch ($typ ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))) (not ($closed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) (>= ($timestamp $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $@wrTime$1^203.1))
  )
    anon0106_Then@3
)))
(let ((anon0106_Then@1 (=> (and true
    ($closed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    ($is ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left))))
    (= ($owner $s_$_3 ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
  )(and 
    anon0106_Then@1_assertion
    anon0106_Then@2
))))
(let ((anon0106_Then (=> (and true
    $_$_condition
    $_$_condition
    ($local_value_is $s_$_3 $@tok$2^0.0 $@loc.owns@53 ($ptrset_to_int owns@53) ^$@ptrset)
    ($local_value_is $s_$_3 $@tok$2^0.0 $@loc.owns@53 ($ptrset_to_int owns@53_$_0) ^$@ptrset)
    ($local_value_is $s_$_3 $@tok$2^0.0 $@loc.prestate@52 ($state_to_int prestate@52) ^$@state_t)
    ($local_value_is $s_$_3 $@tok$2^0.0 $@loc.prestate@52 ($state_to_int prestate@52_$_0) ^$@state_t)
    ($local_value_is $s_$_3 $@tok$2^0.0 $@loc.prestate@54 ($state_to_int prestate@54) ^$@state_t)
    ($local_value_is $s_$_3 $@tok$2^0.0 $@loc.prestate@54 ($state_to_int prestate@54_$_0) ^$@state_t)
    (= $_$_condition (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) ($ref $null))))
    (= owns@53_$_0 $set_empty)
    (= prestate@52_$_0 $s_$_3)
    (= prestate@54_$_0 $s_$_3)
    (not (= ($ref ($ptr ^Node ($select.mem ($memory $s_$_3) ($dot ($ptr ^Node L@y_$_0) Node.left)))) ($ref $null)))
  )(and 
    anon0106_Then_assertion
    anon0106_Then@1
))))
(let (($$start@19 (=> (and true
    ($call_transition $s_$_2 $s_$_3)
    ($full_stop $s_$_3)
    ($good_state_ext $@tok$1^216.3 $s_$_3)
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node L@y_$_0) Node.left) ($ptr_to ^Node))
    ($mutable $s_$_2 ($dot ($ptr ^Node P@x) Node.right))
    ($thread_local $s_$_2 ($dot ($ptr ^Node L@y_$_0) Node.left))
    ($thread_local $s_$_3 ($dot ($ptr ^Node L@y_$_0) Node.left))
    ($typed $s_$_2 ($dot ($ptr ^Node L@y_$_0) Node.left))
    ($typed $s_$_3 ($dot ($ptr ^Node L@y_$_0) Node.left))
    (< ($current_timestamp $s_$_2) ($current_timestamp $s_$_3))
    (= ($memory $s_$_3) ($store.mem ($memory $s_$_2) call0formal_$_p_$_0 call1formal_$_v_$_0))
    (= ($select.sec.pc $s_$_3) ($select.sec.pc $s_$_2))
    (= ($statusmap $s_$_3) ($statusmap $s_$_2))
    (= ($typemap $s_$_3) ($typemap $s_$_2))
    (= call0formal_$_p_$_0 ($dot ($ptr ^Node P@x) Node.right))
    (= call1formal_$_v_$_0 ($ref ($ptr ^Node ($select.mem ($memory $s_$_2) ($dot ($ptr ^Node L@y_$_0) Node.left)))))
    (forall( (|p_$33_$11| $ptr))(!(<= ($timestamp $s_$_2 |p_$33_$11|) ($timestamp $s_$_3 |p_$33_$11|))  :weight  0 :pattern ( ($timestamp $s_$_3 |p_$33_$11|))))
    (or ($in_writes_at $@wrTime$1^203.1 ($dot ($ptr ^Node P@x) Node.right)) (>= ($timestamp $s_$_2 ($dot ($ptr ^Node P@x) Node.right)) $@wrTime$1^203.1))
  )
    (and anon0106_Else anon0106_Then)
)))
(let (($$start@16 (=> (and true
    ($call_transition $s_$_1 $s_$_2)
    ($full_stop $s_$_2)
    ($good_state_ext $@tok$1^214.53 $s_$_2)
    ($is ($dot ($ptr ^Node P@x) Node.right) ($ptr_to ^Node))
    ($mutable $s_$_2 call0formal_$_@l_$_0_$2)
    ($post_unwrap $s_$_1 $s_$_2)
    ($pre_static_unwrap $s_$_1)
    ($typed $s_$_2 ($dot ($ptr ^Node P@x) Node.right))
    (< ($current_timestamp $s_$_1) ($current_timestamp $s_$_2))
    (= ($owns $s_$_1 call0formal_$_@l_$_0_$2) ($owns $s_$_2 call0formal_$_@l_$_0_$2))
    (= ($select.sec.pc $s_$_2) ($select.sec.pc $s_$_1))
    (= ($timestamp $s_$_2 call0formal_$_@l_$_0_$2) ($current_timestamp $s_$_2))
    (= ($typemap $s_$_1) ($typemap $s_$_2))
    (exists( (|#x_$7| Int))(= ($memory $s_$_2) ($store.mem ($memory $s_$_1) call0formal_$_@l_$_0_$2 |#x_$7|)))
    (forall( (|#p_$70| $ptr))(!(=> ($set_in |#p_$70| ($owns $s_$_1 call0formal_$_@l_$_0_$2)) (and (and (and ($typed $s_$_1 |#p_$70|) (and (and (and (and ($closed $s_$_2 |#p_$70|) (= ($owner $s_$_2 |#p_$70|) $me)) (and ($is |#p_$70| ($typ |#p_$70|)) ($typed $s_$_2 |#p_$70|))) (not (= ($kind_of ($typ |#p_$70|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$70|)))) (= ($timestamp $s_$_2 |#p_$70|) ($current_timestamp $s_$_2))) ($is_non_primitive ($typ |#p_$70|))))  :pattern ( ($select.sm ($statusmap $s_$_2) |#p_$70|)) :pattern ( ($select.tm ($typemap $s_$_2) |#p_$70|)) :pattern ( ($set_in |#p_$70| ($owns $s_$_1 call0formal_$_@l_$_0_$2)))))
    (forall( (|#p_$71| $ptr))(!(=> ($set_in |#p_$71| ($owns $s_$_1 call0formal_$_@l_$_0_$2)) (=> ($is_claimable ($typ |#p_$71|)) (= ($ref_cnt $s_$_1 |#p_$71|) ($ref_cnt $s_$_2 |#p_$71|))))  :pattern ( ($set_in |#p_$71| ($owns $s_$_1 call0formal_$_@l_$_0_$2)) ($is_claimable ($typ |#p_$71|)))))
    (forall( (|#p_$72| $ptr))(!(=> ($thread_local $s_$_1 |#p_$72|) ($thread_local $s_$_2 |#p_$72|))  :pattern ( ($thread_local $s_$_2 |#p_$72|))))
    (forall( (|#p_$73| $ptr))(!(or (or (= ($select.sm ($statusmap $s_$_2) |#p_$73|) ($select.sm ($statusmap $s_$_1) |#p_$73|)) (and (not (= ($kind_of ($typ ($owner $s_$_1 |#p_$73|))) $kind_thread)) ($set_in |#p_$73| ($owns $s_$_1 call0formal_$_@l_$_0_$2)))) (= |#p_$73| call0formal_$_@l_$_0_$2))  :weight  0 :pattern ( ($select.sm ($statusmap $s_$_2) |#p_$73|))))
    (forall( (|p_$33_$9| $ptr))(!(<= ($timestamp $s_$_1 |p_$33_$9|) ($timestamp $s_$_2 |p_$33_$9|))  :weight  0 :pattern ( ($timestamp $s_$_2 |p_$33_$9|))))
    (or (not ($is_claimable ($typ call0formal_$_@l_$_0_$2))) (= ($ref_cnt $s_$_1 call0formal_$_@l_$_0_$2) 0))
  )(and 
    $$start@18_assertion
    $$start@19
))))
(let (($$start@15 (=> (and true
    ($inv2 $s_$_1 $s_$_1 ($ptr ^Node L@y_$_0) ^Node)
    ($pre_static_unwrap $s_$_1)
    ($typed $s_$_1 ($ptr ^Node L@y_$_0))
    (= ($owner $s_$_1 ($ptr ^Node L@y_$_0)) $me)
    (= call0formal_$_@l_$_0_$2 ($ptr ^Node L@y_$_0))
    (= owns@50_$_0 ($owns $s_$_1 ($ptr ^Node L@y_$_0)))
    (=> ($is_primitive_ch ($typ ($ptr ^Node L@y_$_0))) (not ($closed $s_$_1 ($ptr ^Node L@y_$_0))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node L@y_$_0)) (>= ($timestamp $s_$_1 ($ptr ^Node L@y_$_0)) $@wrTime$1^203.1))
  )
    $$start@16
)))
(let (($$start@14 (=> (and true
    ($closed $s_$_1 ($ptr ^Node L@y_$_0))
    ($is ($ptr ^Node L@y_$_0) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_1 ($ptr ^Node L@y_$_0))
    (= ($owner $s_$_1 ($ptr ^Node L@y_$_0)) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
  )(and 
    $$start@14_assertion
    $$start@15
))))
(let (($$start@13 (=> (and true
    ($local_value_is $s_$_1 $@tok$2^0.0 $@loc.owns@50 ($ptrset_to_int owns@50) ^$@ptrset)
    ($local_value_is $s_$_1 $@tok$2^0.0 $@loc.owns@50 ($ptrset_to_int owns@50_$_0) ^$@ptrset)
    ($local_value_is $s_$_1 $@tok$2^0.0 $@loc.prestate@49 ($state_to_int prestate@49) ^$@state_t)
    ($local_value_is $s_$_1 $@tok$2^0.0 $@loc.prestate@49 ($state_to_int prestate@49_$_0) ^$@state_t)
    ($local_value_is $s_$_1 $@tok$2^0.0 $@loc.prestate@51 ($state_to_int prestate@51) ^$@state_t)
    ($local_value_is $s_$_1 $@tok$2^0.0 $@loc.prestate@51 ($state_to_int prestate@51_$_0) ^$@state_t)
    (= owns@50_$_0 $set_empty)
    (= prestate@49_$_0 $s_$_1)
    (= prestate@51_$_0 $s_$_1)
    (F@doMark ($ref ($ptr ^Node L@y_$_0)))
    (F@doMark ($ref ($ptr ^Node L@y_$_0)))
  )(and 
    $$start@13_assertion
    $$start@14
))))
(let (($$start@9 (=> (and true
    ($call_transition $s_$_0 $s_$_1)
    ($full_stop $s_$_1)
    ($good_state_ext $@tok$1^212.53 $s_$_1)
    ($is ($dot ($ptr ^Node P@x) Node.right) ($ptr_to ^Node))
    ($is ($dot ($ptr ^Node P@x) Node.right) ($ptr_to ^Node))
    ($local_value_is $s_$_1 $@tok$1^213.3 $@loc.y ($ptr_to_int ($ptr ^Node L@y_$_0)) ($ptr_to ^Node))
    ($local_value_is_ptr $s_$_1 $@tok$1^213.3 $@loc.y ($ptr ^Node L@y_$_0) ($ptr_to ^Node))
    ($mutable $s_$_1 call0formal_$_@l_$_0_$1)
    ($post_unwrap $s_$_0 $s_$_1)
    ($pre_static_unwrap $s_$_0)
    ($thread_local $s_$_1 ($dot ($ptr ^Node P@x) Node.right))
    ($typed $s_$_1 ($dot ($ptr ^Node P@x) Node.right))
    (< ($current_timestamp $s_$_0) ($current_timestamp $s_$_1))
    (= ($owns $s_$_0 call0formal_$_@l_$_0_$1) ($owns $s_$_1 call0formal_$_@l_$_0_$1))
    (= ($select.sec.pc $s_$_1) ($select.sec.pc $s_$_0))
    (= ($timestamp $s_$_1 call0formal_$_@l_$_0_$1) ($current_timestamp $s_$_1))
    (= ($typemap $s_$_0) ($typemap $s_$_1))
    (= L@y_$_0 ($ref ($ptr ^Node ($select.mem ($memory $s_$_1) ($dot ($ptr ^Node P@x) Node.right)))))
    (exists( (|#x_$6| Int))(= ($memory $s_$_1) ($store.mem ($memory $s_$_0) call0formal_$_@l_$_0_$1 |#x_$6|)))
    (forall( (|#p_$66| $ptr))(!(=> ($set_in |#p_$66| ($owns $s_$_0 call0formal_$_@l_$_0_$1)) (and (and (and ($typed $s_$_0 |#p_$66|) (and (and (and (and ($closed $s_$_1 |#p_$66|) (= ($owner $s_$_1 |#p_$66|) $me)) (and ($is |#p_$66| ($typ |#p_$66|)) ($typed $s_$_1 |#p_$66|))) (not (= ($kind_of ($typ |#p_$66|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$66|)))) (= ($timestamp $s_$_1 |#p_$66|) ($current_timestamp $s_$_1))) ($is_non_primitive ($typ |#p_$66|))))  :pattern ( ($select.sm ($statusmap $s_$_1) |#p_$66|)) :pattern ( ($select.tm ($typemap $s_$_1) |#p_$66|)) :pattern ( ($set_in |#p_$66| ($owns $s_$_0 call0formal_$_@l_$_0_$1)))))
    (forall( (|#p_$67| $ptr))(!(=> ($set_in |#p_$67| ($owns $s_$_0 call0formal_$_@l_$_0_$1)) (=> ($is_claimable ($typ |#p_$67|)) (= ($ref_cnt $s_$_0 |#p_$67|) ($ref_cnt $s_$_1 |#p_$67|))))  :pattern ( ($set_in |#p_$67| ($owns $s_$_0 call0formal_$_@l_$_0_$1)) ($is_claimable ($typ |#p_$67|)))))
    (forall( (|#p_$68| $ptr))(!(=> ($thread_local $s_$_0 |#p_$68|) ($thread_local $s_$_1 |#p_$68|))  :pattern ( ($thread_local $s_$_1 |#p_$68|))))
    (forall( (|#p_$69| $ptr))(!(or (or (= ($select.sm ($statusmap $s_$_1) |#p_$69|) ($select.sm ($statusmap $s_$_0) |#p_$69|)) (and (not (= ($kind_of ($typ ($owner $s_$_0 |#p_$69|))) $kind_thread)) ($set_in |#p_$69| ($owns $s_$_0 call0formal_$_@l_$_0_$1)))) (= |#p_$69| call0formal_$_@l_$_0_$1))  :weight  0 :pattern ( ($select.sm ($statusmap $s_$_1) |#p_$69|))))
    (forall( (|p_$33_$7| $ptr))(!(<= ($timestamp $s_$_0 |p_$33_$7|) ($timestamp $s_$_1 |p_$33_$7|))  :weight  0 :pattern ( ($timestamp $s_$_1 |p_$33_$7|))))
    (or (not ($is_claimable ($typ call0formal_$_@l_$_0_$1))) (= ($ref_cnt $s_$_0 call0formal_$_@l_$_0_$1) 0))
  )(and 
    $$start@12_assertion
    $$start@13
))))
(let (($$start@8 (=> (and true
    ($inv2 $s_$_0 $s_$_0 ($ptr ^Node P@x) ^Node)
    ($pre_static_unwrap $s_$_0)
    ($typed $s_$_0 ($ptr ^Node P@x))
    (= ($owner $s_$_0 ($ptr ^Node P@x)) $me)
    (= call0formal_$_@l_$_0_$1 ($ptr ^Node P@x))
    (= owns@47_$_0 ($owns $s_$_0 ($ptr ^Node P@x)))
    (=> ($is_primitive_ch ($typ ($ptr ^Node P@x))) (not ($closed $s_$_0 ($ptr ^Node P@x))))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Node P@x)) (>= ($timestamp $s_$_0 ($ptr ^Node P@x)) $@wrTime$1^203.1))
  )
    $$start@9
)))
(let (($$start@7 (=> (and true
    ($closed $s_$_0 ($ptr ^Node P@x))
    ($is ($ptr ^Node P@x) ^Node)
    ($is_non_primitive ^Node)
    ($typed $s_$_0 ($ptr ^Node P@x))
    (= ($owner $s_$_0 ($ptr ^Node P@x)) $me)
    (not (= ($kind_of ^Node) $kind_primitive))
  )(and 
    $$start@7_assertion
    $$start@8
))))
(let (($$start@6 (=> (and true
    ($local_value_is $s_$_0 $@tok$2^0.0 $@loc.owns@47 ($ptrset_to_int owns@47) ^$@ptrset)
    ($local_value_is $s_$_0 $@tok$2^0.0 $@loc.owns@47 ($ptrset_to_int owns@47_$_0) ^$@ptrset)
    ($local_value_is $s_$_0 $@tok$2^0.0 $@loc.prestate@46 ($state_to_int prestate@46) ^$@state_t)
    ($local_value_is $s_$_0 $@tok$2^0.0 $@loc.prestate@46 ($state_to_int prestate@46_$_0) ^$@state_t)
    ($local_value_is $s_$_0 $@tok$2^0.0 $@loc.prestate@48 ($state_to_int prestate@48) ^$@state_t)
    ($local_value_is $s_$_0 $@tok$2^0.0 $@loc.prestate@48 ($state_to_int prestate@48_$_0) ^$@state_t)
    (= owns@47_$_0 $set_empty)
    (= prestate@46_$_0 $s_$_0)
    (= prestate@48_$_0 $s_$_0)
    (F@doMark ($ref ($ptr ^Node P@x)))
    (F@doMark ($ref ($ptr ^Node P@x)))
  )(and 
    $$start@6_assertion
    $$start@7
))))
(let (($$start@1 (=> (and true
    ($call_transition $s $s_$_0)
    ($closed $s ($ptr ^Tree P@t))
    ($full_stop $s_$_0)
    ($good_state_ext $@tok$1^211.19 $s_$_0)
    ($in_domain_lab $s ($ptr ^Tree P@t) ($ptr ^Tree P@t) l@public)
    ($inv2 $s $s ($ptr ^Tree P@t) ^Tree)
    ($is ($ptr ^Tree P@t) ^Tree)
    ($is_non_primitive ^Tree)
    ($local_value_is $s $@tok$1^209.3 $@loc.y ($ptr_to_int ($ptr ^Node L@y)) ($ptr_to ^Node))
    ($local_value_is $s $@tok$2^0.0 $@loc.prestate@45 ($state_to_int prestate@45) ^$@state_t)
    ($local_value_is $s $@tok$2^0.0 $@loc.prestate@45 ($state_to_int prestate@45_$_0) ^$@state_t)
    ($local_value_is_ptr $s $@tok$1^209.3 $@loc.y ($ptr ^Node L@y) ($ptr_to ^Node))
    ($mutable $s_$_0 call0formal_$_@l_$_0)
    ($post_unwrap $s $s_$_0)
    ($pre_unwrap $s)
    ($pre_unwrap $s)
    ($typed $s ($ptr ^Tree P@t))
    ($typed $s ($ptr ^Tree P@t))
    (< ($current_timestamp $s) ($current_timestamp $s_$_0))
    (= ($owner $s ($ptr ^Tree P@t)) $me)
    (= ($owner $s ($ptr ^Tree P@t)) $me)
    (= ($owns $s call0formal_$_@l_$_0) ($owns $s_$_0 call0formal_$_@l_$_0))
    (= ($select.sec.pc $s_$_0) ($select.sec.pc $s))
    (= ($timestamp $s_$_0 call0formal_$_@l_$_0) ($current_timestamp $s_$_0))
    (= ($typemap $s) ($typemap $s_$_0))
    (= call0formal_$_@l_$_0 ($ptr ^Tree P@t))
    (= prestate@45_$_0 $s)
    (=> ($is_primitive_ch ($typ ($ptr ^Tree P@t))) (not ($closed $s ($ptr ^Tree P@t))))
    (exists( (|#x_$5| Int))(= ($memory $s_$_0) ($store.mem ($memory $s) call0formal_$_@l_$_0 |#x_$5|)))
    (forall( (|#p_$62| $ptr))(!(=> ($set_in |#p_$62| ($owns $s call0formal_$_@l_$_0)) (and (and (and ($typed $s |#p_$62|) (and (and (and (and ($closed $s_$_0 |#p_$62|) (= ($owner $s_$_0 |#p_$62|) $me)) (and ($is |#p_$62| ($typ |#p_$62|)) ($typed $s_$_0 |#p_$62|))) (not (= ($kind_of ($typ |#p_$62|)) $kind_primitive))) ($is_non_primitive ($typ |#p_$62|)))) (= ($timestamp $s_$_0 |#p_$62|) ($current_timestamp $s_$_0))) ($is_non_primitive ($typ |#p_$62|))))  :pattern ( ($select.sm ($statusmap $s_$_0) |#p_$62|)) :pattern ( ($select.tm ($typemap $s_$_0) |#p_$62|)) :pattern ( ($set_in |#p_$62| ($owns $s call0formal_$_@l_$_0)))))
    (forall( (|#p_$63| $ptr))(!(=> ($set_in |#p_$63| ($owns $s call0formal_$_@l_$_0)) (=> ($is_claimable ($typ |#p_$63|)) (= ($ref_cnt $s |#p_$63|) ($ref_cnt $s_$_0 |#p_$63|))))  :pattern ( ($set_in |#p_$63| ($owns $s call0formal_$_@l_$_0)) ($is_claimable ($typ |#p_$63|)))))
    (forall( (|#p_$64| $ptr))(!(=> ($thread_local $s |#p_$64|) ($thread_local $s_$_0 |#p_$64|))  :pattern ( ($thread_local $s_$_0 |#p_$64|))))
    (forall( (|#p_$65| $ptr))(!(or (or (= ($select.sm ($statusmap $s_$_0) |#p_$65|) ($select.sm ($statusmap $s) |#p_$65|)) (and (not (= ($kind_of ($typ ($owner $s |#p_$65|))) $kind_thread)) ($set_in |#p_$65| ($owns $s call0formal_$_@l_$_0)))) (= |#p_$65| call0formal_$_@l_$_0))  :weight  0 :pattern ( ($select.sm ($statusmap $s_$_0) |#p_$65|))))
    (forall( (|p_$33_$5| $ptr))(!(<= ($timestamp $s |p_$33_$5|) ($timestamp $s_$_0 |p_$33_$5|))  :weight  0 :pattern ( ($timestamp $s_$_0 |p_$33_$5|))))
    (not (= ($kind_of ^Tree) $kind_primitive))
    (or ($in_writes_at $@wrTime$1^203.1 ($ptr ^Tree P@t)) (>= ($timestamp $s ($ptr ^Tree P@t)) $@wrTime$1^203.1))
    (or (not ($is_claimable ^Tree)) (= ($ref_cnt $s call0formal_$_@l_$_0) 0))
  )(and 
    $$start@5_assertion
    $$start@6
))))
(let (($root (=> (and true
  )(and 
    $$start_assertion
    $$start@1
))))
   $root
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))

;Commands
   (check-sat)
   ;(get-unsat-core)
