;Analysis time until now:     2s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $ctype 0)
(declare-sort $field 0)
(declare-sort $kind 0)
(declare-sort $memory_t 0)
(declare-sort $ptr 0)
(declare-sort $ptrset 0)
(declare-sort $pure_function 0)
(declare-sort $state 0)
(declare-sort $status 0)
(declare-sort $statusmap_t 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $type_state 0)
(declare-sort $typemap_t 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)

;Functions
(declare-fun $@bf_39 ( ) Bool)
(declare-fun $@bf_40 ( ) Bool)
(declare-fun $@bf_41 ( ) Bool)
(declare-fun $@bf_42 ( ) Bool)
(declare-fun $@bf_53 ( $ptrset $ptrset ) Bool)
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@distTp3 ( ) $ctype)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c ( ) $token)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $emb ( $state $ptr ) $ptr)
(declare-fun $extent ( $state $ptr ) $ptrset)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $full_extent ( $ptr ) $ptrset)
(declare-fun $ghost_emb ( Int ) $ptr)
(declare-fun $ghost_path ( Int ) $field)
(declare-fun $ghost_ref ( $ptr $field ) Int)
(declare-fun $kind_of ( $ctype ) $kind)
(declare-fun $kind_primitive ( ) $kind)
(declare-fun $kind_thread ( ) $kind)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $mem ( $state $ptr ) Int)
(declare-fun $memory ( $state ) $memory_t)
(declare-fun $memory_allocator_type ( ) $ctype)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $no_claim ( ) $ptr)
(declare-fun $null ( ) $ptr)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $ptrset)
(declare-fun $owns_set_field ( $ctype ) $field)
(declare-fun $ptr ( $ctype Int ) $ptr)
(declare-fun $ptr_level ( $ctype ) Int)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $read_version ( $state $ptr ) $version)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $ref ( $ptr ) Int)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $s ( ) $state)
(declare-fun $s_$_0 ( ) $state)
(declare-fun $s_$_2 ( ) $state)
(declare-fun $select.mem ( $memory_t $ptr ) Int)
(declare-fun $select.sm ( $statusmap_t $ptr ) $status)
(declare-fun $select.tm ( $typemap_t $ptr ) $type_state)
(declare-fun $set_empty ( ) $ptrset)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $st ( $state $ptr ) $status)
(declare-fun $st_owner ( $status ) $ptr)
(declare-fun $statusmap ( $state ) $statusmap_t)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $ts ( $state $ptr ) $type_state)
(declare-fun $ts_active_option ( $type_state ) $field)
(declare-fun $ts_emb ( $type_state ) $ptr)
(declare-fun $ts_path ( $type_state ) $field)
(declare-fun $typ ( $ptr ) $ctype)
(declare-fun $typemap ( $state ) $typemap_t)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^root_emb ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun ^A ( ) $ctype)
(declare-fun A.$owns ( ) $field)
(declare-fun A.x ( ) $field)
(declare-fun call0formal_$_@l_$_0 ( ) $ptr)
(declare-fun cf@classifier@default ( ) $pure_function)
(declare-fun P@_this_ ( ) Int)

;Predicates
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $extent_zero ( $state $ptr ) Bool)
(declare-fun $file_name_is ( Int $token ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $function_arg_type ( $pure_function Int $ctype ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_volatile_owns_set ( $ctype ) Bool)
(declare-fun $in_range_spec_ptr ( Int ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $inv ( $state $ptr $ctype ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2_when_closed ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2nt ( $state $state $ptr ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_base_field ( $field ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_composite ( $ctype ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_non_primitive ( $ctype ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_primitive_ch ( $ctype ) Bool)
(declare-fun $is_primitive_non_volatile_field ( $field ) Bool)
(declare-fun $is_primitive_volatile_field ( $field ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $mem_eq ( $state $state $ptr ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $nested_in ( $state $ptr $ptr ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $position_marker ( ) Bool)
(declare-fun $seclbl.bot ( ) Bool)
(declare-fun $seclbl.top ( ) Bool)
(declare-fun $set_eq ( $ptrset $ptrset ) Bool)
(declare-fun $set_in ( $ptr $ptrset ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $st_closed ( $status ) Bool)
(declare-fun $state_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $timestamp_is_now ( $state $ptr ) Bool)
(declare-fun $ts_is_volatile ( $type_state ) Bool)
(declare-fun $ts_typed ( $type_state ) Bool)
(declare-fun $typed ( $state $ptr ) Bool)
(declare-fun $typed2 ( $state $ptr $ctype ) Bool)
(declare-fun $wrapped ( $state $ptr $ctype ) Bool)

;Axioms
   (assert (! $is_unwrap_check :named ax_0))
   (assert (! $position_marker :named ax_1))
   (assert (! $seclbl.top :named ax_2))
   (assert (! ($closed $s call0formal_$_@l_$_0) :named ax_3))
   (assert (! ($file_name_is 1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c) :named ax_4))
   (assert (! ($function_arg_type cf@classifier@default 0 ($map_t ($ptr_to ^^void) ^^bool)) :named ax_5))
   (assert (! ($good_for_pre_can_unwrap $s) :named ax_6))
   (assert (! ($good_state ($vs_state $struct_zero)) :named ax_7))
   (assert (! ($has_volatile_owns_set ^^claim) :named ax_8))
   (assert (! ($inv2 $s $s call0formal_$_@l_$_0 ($typ call0formal_$_@l_$_0)) :named ax_9))
   (assert (! ($is_base_field A.$owns) :named ax_10))
   (assert (! ($is_base_field A.x) :named ax_11))
   (assert (! ($is_claimable ^^claim) :named ax_12))
   (assert (! ($is_composite ^A) :named ax_13))
   (assert (! ($is_math_type ^$@thread_id) :named ax_14))
   (assert (! ($is_non_primitive ($typ call0formal_$_@l_$_0)) :named ax_15))
   (assert (! ($is_primitive_non_volatile_field A.$owns) :named ax_16))
   (assert (! ($is_primitive_volatile_field A.x) :named ax_17))
   (assert (! ($spans_the_same $s $s_$_0 call0formal_$_@l_$_0 ($typ call0formal_$_@l_$_0)) :named ax_18))
   (assert (! ($typed2 $s call0formal_$_@l_$_0 ($typ call0formal_$_@l_$_0)) :named ax_19))
   (assert (! (= $@distTp1 ($ptr_to ^A)) :named ax_20))
   (assert (! (= $@distTp3 ($ptr_to ^^i4)) :named ax_21))
   (assert (! (= $max.u8 $arch_spec_ptr_start) :named ax_22))
   (assert (! (= $me ($owner $s call0formal_$_@l_$_0)) :named ax_23))
   (assert (! (= $null ($ptr ^^void 0)) :named ax_24))
   (assert (! (= $s_$_0 $s_$_2) :named ax_25))
   (assert (! (= (- 1) (* (- 1) 1)) :named ax_26))
   (assert (! (= (- 128) $min.i1) :named ax_27))
   (assert (! (= (- 2147483648) $min.i4) :named ax_28))
   (assert (! (= (- 2147483648) (* (- 1) 2147483648)) :named ax_29))
   (assert (! (= (- 2147483648) (+ 0 (- 2147483648))) :named ax_30))
   (assert (! (= (- 32768) $min.i2) :named ax_31))
   (assert (! (= (- 9223372036854775808) $min.i8) :named ax_32))
   (assert (! (= (- 9223372036854775808) (* (- 1) 9223372036854775808)) :named ax_33))
   (assert (! (= (- 9223372036854775808) (+ 0 (- 9223372036854775808))) :named ax_34))
   (assert (! (= ($ptr ^^claim 0) $no_claim) :named ax_35))
   (assert (! (= ^A ($field_parent_type A.$owns)) :named ax_36))
   (assert (! (= ^A ($field_parent_type A.x)) :named ax_37))
   (assert (! (= 0 ($ptr_level $memory_allocator_type)) :named ax_38))
   (assert (! (= 0 ($ptr_level ^A)) :named ax_39))
   (assert (! (= 0 ($ptr_to_i1 $null)) :named ax_40))
   (assert (! (= 0 ($ptr_to_i2 $null)) :named ax_41))
   (assert (! (= 0 ($ptr_to_i4 $null)) :named ax_42))
   (assert (! (= 0 ($ptr_to_i8 $null)) :named ax_43))
   (assert (! (= 0 ($ptr_to_u1 $null)) :named ax_44))
   (assert (! (= 0 ($ptr_to_u2 $null)) :named ax_45))
   (assert (! (= 0 ($ptr_to_u4 $null)) :named ax_46))
   (assert (! (= 0 ($ptr_to_u8 $null)) :named ax_47))
   (assert (! (= 0 ($unchecked ^^u4 4294967296)) :named ax_48))
   (assert (! (= 0 ($unchecked ^^u8 18446744073709551616)) :named ax_49))
   (assert (! (= 1 ($_pow2 0)) :named ax_50))
   (assert (! (= 1024 ($_pow2 10)) :named ax_51))
   (assert (! (= 1048576 ($_pow2 20)) :named ax_52))
   (assert (! (= 1073741824 ($_pow2 30)) :named ax_53))
   (assert (! (= 1099511627776 ($_pow2 40)) :named ax_54))
   (assert (! (= 1125899906842624 ($_pow2 50)) :named ax_55))
   (assert (! (= 1152921504606846976 ($_pow2 60)) :named ax_56))
   (assert (! (= 127 $max.i1) :named ax_57))
   (assert (! (= 128 ($_pow2 7)) :named ax_58))
   (assert (! (= 131072 ($_pow2 17)) :named ax_59))
   (assert (! (= 134217728 ($_pow2 27)) :named ax_60))
   (assert (! (= 137438953472 ($_pow2 37)) :named ax_61))
   (assert (! (= 140737488355328 ($_pow2 47)) :named ax_62))
   (assert (! (= 144115188075855872 ($_pow2 57)) :named ax_63))
   (assert (! (= 16 ($_pow2 4)) :named ax_64))
   (assert (! (= 16384 ($_pow2 14)) :named ax_65))
   (assert (! (= 16777216 ($_pow2 24)) :named ax_66))
   (assert (! (= 17179869184 ($_pow2 34)) :named ax_67))
   (assert (! (= 17592186044416 ($_pow2 44)) :named ax_68))
   (assert (! (= 18014398509481984 ($_pow2 54)) :named ax_69))
   (assert (! (= 18446744073709551615 $max.u8) :named ax_70))
   (assert (! (= 18446744073709551615 ($unchecked ^^u8 (- 1))) :named ax_71))
   (assert (! (= 18446744073709551615 (+ 18446744073709551616 (- 1))) :named ax_72))
   (assert (! (= 18446744073709551616 (* 281474976710656 65536)) :named ax_73))
   (assert (! (= 18446744073709551616 (+ 18446744073709551615 1)) :named ax_74))
   (assert (! (= 2 ($_pow2 1)) :named ax_75))
   (assert (! (= 2048 ($_pow2 11)) :named ax_76))
   (assert (! (= 2097152 ($_pow2 21)) :named ax_77))
   (assert (! (= 2147483647 $max.i4) :named ax_78))
   (assert (! (= 2147483647 (+ 2147483648 (- 1))) :named ax_79))
   (assert (! (= 2147483648 ($_pow2 31)) :named ax_80))
   (assert (! (= 2199023255552 ($_pow2 41)) :named ax_81))
   (assert (! (= 2251799813685248 ($_pow2 51)) :named ax_82))
   (assert (! (= 2305843009213693952 ($_pow2 61)) :named ax_83))
   (assert (! (= 255 $max.u1) :named ax_84))
   (assert (! (= 256 ($_pow2 8)) :named ax_85))
   (assert (! (= 262144 ($_pow2 18)) :named ax_86))
   (assert (! (= 268435456 ($_pow2 28)) :named ax_87))
   (assert (! (= 274877906944 ($_pow2 38)) :named ax_88))
   (assert (! (= 281474976710656 ($_pow2 48)) :named ax_89))
   (assert (! (= 281474976710656 (* 4294967296 65536)) :named ax_90))
   (assert (! (= 288230376151711744 ($_pow2 58)) :named ax_91))
   (assert (! (= 32 ($_pow2 5)) :named ax_92))
   (assert (! (= 32767 $max.i2) :named ax_93))
   (assert (! (= 32768 ($_pow2 15)) :named ax_94))
   (assert (! (= 33554432 ($_pow2 25)) :named ax_95))
   (assert (! (= 34359738368 ($_pow2 35)) :named ax_96))
   (assert (! (= 35184372088832 ($_pow2 45)) :named ax_97))
   (assert (! (= 36028797018963968 ($_pow2 55)) :named ax_98))
   (assert (! (= 4 ($_pow2 2)) :named ax_99))
   (assert (! (= 4 ($sizeof ^A)) :named ax_100))
   (assert (! (= 4096 ($_pow2 12)) :named ax_101))
   (assert (! (= 4194304 ($_pow2 22)) :named ax_102))
   (assert (! (= 4294967295 $max.u4) :named ax_103))
   (assert (! (= 4294967295 ($unchecked ^^u4 (- 1))) :named ax_104))
   (assert (! (= 4294967295 (+ 4294967296 (- 1))) :named ax_105))
   (assert (! (= 4294967296 ($_pow2 32)) :named ax_106))
   (assert (! (= 4294967296 (+ 4294967295 1)) :named ax_107))
   (assert (! (= 4398046511104 ($_pow2 42)) :named ax_108))
   (assert (! (= 4503599627370496 ($_pow2 52)) :named ax_109))
   (assert (! (= 4611686018427387904 ($_pow2 62)) :named ax_110))
   (assert (! (= 512 ($_pow2 9)) :named ax_111))
   (assert (! (= 524288 ($_pow2 19)) :named ax_112))
   (assert (! (= 536870912 ($_pow2 29)) :named ax_113))
   (assert (! (= 549755813888 ($_pow2 39)) :named ax_114))
   (assert (! (= 562949953421312 ($_pow2 49)) :named ax_115))
   (assert (! (= 576460752303423488 ($_pow2 59)) :named ax_116))
   (assert (! (= 64 ($_pow2 6)) :named ax_117))
   (assert (! (= 65535 $max.u2) :named ax_118))
   (assert (! (= 65536 ($_pow2 16)) :named ax_119))
   (assert (! (= 67108864 ($_pow2 26)) :named ax_120))
   (assert (! (= 68719476736 ($_pow2 36)) :named ax_121))
   (assert (! (= 70368744177664 ($_pow2 46)) :named ax_122))
   (assert (! (= 72057594037927936 ($_pow2 56)) :named ax_123))
   (assert (! (= 8 $arch_ptr_size) :named ax_124))
   (assert (! (= 8 ($_pow2 3)) :named ax_125))
   (assert (! (= 8192 ($_pow2 13)) :named ax_126))
   (assert (! (= 8388608 ($_pow2 23)) :named ax_127))
   (assert (! (= 8589934592 ($_pow2 33)) :named ax_128))
   (assert (! (= 8796093022208 ($_pow2 43)) :named ax_129))
   (assert (! (= 9007199254740992 ($_pow2 53)) :named ax_130))
   (assert (! (= 9223372036854775807 $max.i8) :named ax_131))
   (assert (! (= 9223372036854775807 (+ 9223372036854775808 (- 1))) :named ax_132))
   (assert (! (= 9223372036854775808 ($_pow2 63)) :named ax_133))
   (assert (! (= 9223372036854775808 (* 281474976710656 32768)) :named ax_134))
   (assert (! (= A.$owns ($owns_set_field ^A)) :named ax_135))
   (assert (! (= call0formal_$_@l_$_0 ($ptr ^A P@_this_)) :named ax_136))
   (assert (! (= true $@bf_39) :named ax_137))
   (assert (! (= true $@bf_40) :named ax_138))
   (assert (! (= true $@bf_42) :named ax_139))
   (assert (! (forall( (|#a_$3| $ptrset) (|#b_$5| $ptrset))(!(=> (forall( (|#o_$7| $ptr))(!(= ($set_in |#o_$7| |#b_$5|) ($set_in |#o_$7| |#a_$3|))  :weight  0 :pattern ( ($dont_instantiate |#o_$7|)))) ($set_eq |#a_$3| |#b_$5|))  :weight  0 :pattern ( ($set_eq |#a_$3| |#b_$5|)))) :named ax_140))
   (assert (! (forall( (|#p_$0| $ptr) (|S_$0| $state))(= ($ts_emb ($ts |S_$0| |#p_$0|)) ($ts_emb ($select.tm ($typemap |S_$0|) |#p_$0|)))) :named ax_141))
   (assert (! (forall( (|#p_$1| $ptr) (|S_$1| $state))(= ($ts_path ($ts |S_$1| |#p_$1|)) ($ts_path ($select.tm ($typemap |S_$1|) |#p_$1|)))) :named ax_142))
   (assert (! (forall( (|#p_$12| $ptr) (|#l| $ptr) (|S_$32| $state) (|S0| $state))(= (and (and (and (and (and (and (and (and (and (= ($owner |S_$32| |#p_$12|) $me) ($closed |S_$32| |#p_$12|)) ($typed2 |S_$32| |#p_$12| ($typ |#p_$12|))) (not (= $kind_primitive ($kind_of ($typ |#p_$12|))))) ($is_non_primitive ($typ |#p_$12|))) ($typed |S0| |#p_$12|)) (= ($timestamp |S_$32| |#p_$12|) ($current_timestamp |S_$32|))) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) (and (= ($owner |S0| |#p_$12|) |#l|) ($closed |S0| |#p_$12|))) (and (and (and (and (and ($wrapped |S_$32| |#p_$12| ($typ |#p_$12|)) ($typed |S0| |#p_$12|)) ($timestamp_is_now |S_$32| |#p_$12|)) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) ($nested_in |S0| |#p_$12| |#l|)))) :named ax_143))
   (assert (! (forall( (|#p_$17| $ptr))(= ($full_extent |#p_$17|) ($full_extent |#p_$17|))) :named ax_144))
   (assert (! (forall( (|#p_$20| $ptr) (|#t_$8| $ctype))(!(=> ($is |#p_$20| |#t_$8|) (= ($ptr |#t_$8| ($ref |#p_$20|)) |#p_$20|))  :pattern ( ($is |#p_$20| |#t_$8|)))) :named ax_145))
   (assert (! (forall( (|#p_$21| $ptr) (|t_$20| $ctype))(!(= ($ptr ^$@ptrset ($ghost_ref |#p_$21| ($owns_set_field |t_$20|))) ($dot |#p_$21| ($owns_set_field |t_$20|)))  :pattern ( ($dot |#p_$21| ($owns_set_field |t_$20|))))) :named ax_146))
   (assert (! (forall( (|#p_$34| $ptr) (|#s1_$12| $state) (|#s2_$10| $state))(!(= (and (= ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| A.x)) ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| A.x))) (= ($select.mem ($memory |#s2_$10|) ($dot |#p_$34| A.$owns)) ($select.mem ($memory |#s1_$12|) ($dot |#p_$34| A.$owns)))) ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^A))  :pattern ( ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^A)))) :named ax_147))
   (assert (! (forall( (|#p2_$0| $ptr) (|#p1_$0| $ptr))(= ($set_in |#p1_$0| ($full_extent |#p2_$0|)) ($set_in |#p1_$0| ($full_extent |#p2_$0|)))) :named ax_148))
   (assert (! (forall( (|#p2| $ptr) (|#p1| $ptr) (|S_$22| $state))(= ($set_in |#p1| ($extent |S_$22| |#p2|)) ($set_in |#p1| ($extent |S_$22| |#p2|)))) :named ax_149))
   (assert (! (forall( (|#q_$1_$3| $ptr))(!(=> ($closed $s |#q_$1_$3|) ($inv2 $s $s |#q_$1_$3| ($typ |#q_$1_$3|)))  :pattern ( ($select.sm ($statusmap $s) |#q_$1_$3|)))) :named ax_150))
   (assert (! (forall( (|#s1_$11| $state) (|#s2_$8| $state) (|#p_$33| $ptr))(!(= (and (or (= ($select.mem ($memory |#s2_$8|) ($dot |#p_$33| A.x)) (+ ($select.mem ($memory |#s1_$11|) ($dot |#p_$33| A.x)) 1)) (= ($select.mem ($memory |#s2_$8|) ($dot |#p_$33| A.x)) ($select.mem ($memory |#s1_$11|) ($dot |#p_$33| A.x)))) (and ($typed |#s2_$8| |#p_$33|) ($set_eq ($owns |#s2_$8| |#p_$33|) $set_empty))) ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^A))  :pattern ( ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^A)))) :named ax_151))
   (assert (! (forall( (|#s1_$8| $state) (|#s2_$5| $state) (|#p_$27| $ptr) (|#t_$11| $ctype))(!(= (and (and (and (= ($read_version |#s2_$5| |#p_$27|) ($read_version |#s1_$8| |#p_$27|)) (= ($owns |#s2_$5| |#p_$27|) ($owns |#s1_$8| |#p_$27|))) (= ($select.tm ($typemap |#s2_$5|) |#p_$27|) ($select.tm ($typemap |#s1_$8|) |#p_$27|))) ($state_spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)) ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|))  :weight  0 :pattern ( ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))) :named ax_152))
   (assert (! (forall( (|#s2_$0| $state) (|#s1_$1| $state))(= (forall( (|#p_$9_$0| $ptr))(!($inv2_when_closed |#s1_$1| |#s2_$0| |#p_$9_$0| ($typ |#p_$9_$0|))  :pattern ( ($closed |#s1_$1| |#p_$9_$0|)) :pattern ( ($closed |#s2_$0| |#p_$9_$0|)))) (forall( (|#p_$9| $ptr))(!(or (and (not ($closed |#s2_$0| |#p_$9|)) (not ($closed |#s1_$1| |#p_$9|))) (and ($nonvolatile_spans_the_same |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|)) ($inv2 |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|))))  :pattern ( ($closed |#s1_$1| |#p_$9|)) :pattern ( ($closed |#s2_$0| |#p_$9|)))))) :named ax_153))
   (assert (! (forall( (|#t_$0| $ctype) (|#p_$2| $ptr) (|S_$12| $state))(= (and (and (and (and (= ($owner |S_$12| |#p_$2|) $me) ($closed |S_$12| |#p_$2|)) (and ($typed |S_$12| |#p_$2|) ($is |#p_$2| |#t_$0|))) (not (= $kind_primitive ($kind_of |#t_$0|)))) ($is_non_primitive |#t_$0|)) (and (and (and (and (= ($owner |S_$12| |#p_$2|) $me) ($closed |S_$12| |#p_$2|)) ($typed2 |S_$12| |#p_$2| |#t_$0|)) (not (= $kind_primitive ($kind_of |#t_$0|)))) ($is_non_primitive |#t_$0|)))) :named ax_154))
   (assert (! (forall( (|#t_$1| $ctype) (|#p_$3| $ptr) (|S_$16| $state))(= (and ($typed |S_$16| |#p_$3|) ($is |#p_$3| |#t_$1|)) (and ($typed |S_$16| |#p_$3|) ($is |#p_$3| |#t_$1|)))) :named ax_155))
   (assert (! (forall( (|#t_$4| $ctype) (|#p_$6| $ptr) (|S_$21| $state))(= (and ($thread_local |S_$21| |#p_$6|) ($is |#p_$6| |#t_$4|)) (and ($thread_local |S_$21| |#p_$6|) ($is |#p_$6| |#t_$4|)))) :named ax_156))
   (assert (! (forall( (|#t_$5| $ctype) (|#b| Int))(!(= ($typ ($ptr |#t_$5| |#b|)) |#t_$5|)  :weight  0)) :named ax_157))
   (assert (! (forall( (|#t_$6| $ctype) (|#b_$0| Int))(!(= ($ref ($ptr |#t_$6| |#b_$0|)) |#b_$0|)  :weight  0)) :named ax_158))
   (assert (! (forall( (|l2| Bool) (|l1| Bool))(= (=> |l1| |l2|) (=> |l1| |l2|))) :named ax_159))
   (assert (! (forall( (|M2_$0| $state) (|M1_$0| $state))(= (and (and (forall( (|p_$32_$1| $ptr))(!(<= ($timestamp |M1_$0| |p_$32_$1|) ($timestamp |M2_$0| |p_$32_$1|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32_$1|)))) (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|))) ($call_transition |M1_$0| |M2_$0|)) (and (and (forall( (|p_$32| $ptr))(!(<= ($timestamp |M1_$0| |p_$32|) ($timestamp |M2_$0| |p_$32|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32|)))) (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|))) ($call_transition |M1_$0| |M2_$0|)))) :named ax_160))
   (assert (! (forall( (|max| Int) (|val| Int) (|min| Int))(= (and (<= |val| |max|) (<= |min| |val|)) (and (<= |val| |max|) (<= |min| |val|)))) :named ax_161))
   (assert (! (forall( (|owner| $ptr) (|p_$18| $ptr) (|S_$11| $state))(= (and (= |owner| ($owner |S_$11| |p_$18|)) ($closed |S_$11| |p_$18|)) (and (= |owner| ($owner |S_$11| |p_$18|)) ($closed |S_$11| |p_$18|)))) :named ax_162))
   (assert (! (forall( (|p_$10| $ptr) (|S_$4| $state))(= ($ts_is_volatile ($ts |S_$4| |p_$10|)) ($ts_is_volatile ($select.tm ($typemap |S_$4|) |p_$10|)))) :named ax_163))
   (assert (! (forall( (|p_$143| $ptr))(!(=> (and (<= 0 ($ref |p_$143|)) (<= ($ref |p_$143|) $max.u8)) (= ($ref |p_$143|) ($ptr_to_u8 |p_$143|)))  :pattern ( ($ptr_to_u8 |p_$143|)))) :named ax_164))
   (assert (! (forall( (|p_$144| $ptr))(!(=> (and (<= ($ref |p_$144|) $max.i8) (<= $min.i8 ($ref |p_$144|))) (= ($ref |p_$144|) ($ptr_to_i8 |p_$144|)))  :pattern ( ($ptr_to_i8 |p_$144|)))) :named ax_165))
   (assert (! (forall( (|p_$145| $ptr))(!(=> (and (<= 0 ($ref |p_$145|)) (<= ($ref |p_$145|) $max.u4)) (= ($ref |p_$145|) ($ptr_to_u4 |p_$145|)))  :pattern ( ($ptr_to_u4 |p_$145|)))) :named ax_166))
   (assert (! (forall( (|p_$146| $ptr))(!(=> (and (<= ($ref |p_$146|) $max.i4) (<= $min.i4 ($ref |p_$146|))) (= ($ref |p_$146|) ($ptr_to_i4 |p_$146|)))  :pattern ( ($ptr_to_i4 |p_$146|)))) :named ax_167))
   (assert (! (forall( (|p_$147| $ptr))(!(=> (and (<= 0 ($ref |p_$147|)) (<= ($ref |p_$147|) $max.u2)) (= ($ref |p_$147|) ($ptr_to_u2 |p_$147|)))  :pattern ( ($ptr_to_u2 |p_$147|)))) :named ax_168))
   (assert (! (forall( (|p_$148| $ptr))(!(=> (and (<= ($ref |p_$148|) $max.i2) (<= $min.i2 ($ref |p_$148|))) (= ($ref |p_$148|) ($ptr_to_i2 |p_$148|)))  :pattern ( ($ptr_to_i2 |p_$148|)))) :named ax_169))
   (assert (! (forall( (|p_$149| $ptr))(!(=> (and (<= 0 ($ref |p_$149|)) (<= ($ref |p_$149|) $max.u1)) (= ($ref |p_$149|) ($ptr_to_u1 |p_$149|)))  :pattern ( ($ptr_to_u1 |p_$149|)))) :named ax_170))
   (assert (! (forall( (|p_$15| $ptr) (|S_$8| $state))(= ($select.sm ($statusmap |S_$8|) |p_$15|) ($select.sm ($statusmap |S_$8|) |p_$15|))) :named ax_171))
   (assert (! (forall( (|p_$150| $ptr))(!(=> (and (<= ($ref |p_$150|) $max.i1) (<= $min.i1 ($ref |p_$150|))) (= ($ref |p_$150|) ($ptr_to_i1 |p_$150|)))  :pattern ( ($ptr_to_i1 |p_$150|)))) :named ax_172))
   (assert (! (forall( (|p_$16| $ptr) (|S_$9| $state))(= ($select.tm ($typemap |S_$9|) |p_$16|) ($select.tm ($typemap |S_$9|) |p_$16|))) :named ax_173))
   (assert (! (forall( (|p_$17| $ptr) (|S_$10| $state))(= (not (= $kind_thread ($kind_of ($typ ($owner |S_$10| |p_$17|))))) (not (= $kind_thread ($kind_of ($typ ($owner |S_$10| |p_$17|))))))) :named ax_174))
   (assert (! (forall( (|p_$2| $ptr) (|s_$0| $state))(= ($select.mem ($memory |s_$0|) |p_$2|) ($select.mem ($memory |s_$0|) |p_$2|))) :named ax_175))
   (assert (! (forall( (|p_$21| $ptr) (|S_$15| $state))(= (and (=> (= $kind_primitive ($kind_of ($typ |p_$21|))) (not ($closed |S_$15| |p_$21|))) (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me))) (and (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me)) (=> ($is_primitive_ch ($typ |p_$21|)) (not ($closed |S_$15| |p_$21|)))))) :named ax_176))
   (assert (! (forall( (|p_$24| $ptr) (|S2| $state) (|S1| $state))(= ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)) ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)))) :named ax_177))
   (assert (! (forall( (|p_$26| $ptr) (|S_$27| $state))(= (and (forall( (|#q_$0_$1| $ptr))(!(=> ($closed |S_$27| |#q_$0_$1|) ($inv |S_$27| |#q_$0_$1| ($typ |#q_$0_$1|)))  :pattern ( ($st |S_$27| |#q_$0_$1|)))) ($good_for_admissibility |S_$27|)) (and (forall( (|#q_$0| $ptr))(!(=> ($closed |S_$27| |#q_$0|) ($inv2 |S_$27| |S_$27| |#q_$0| ($typ |#q_$0|)))  :pattern ( ($select.sm ($statusmap |S_$27|) |#q_$0|)))) ($good_for_admissibility |S_$27|)))) :named ax_178))
   (assert (! (forall( (|p_$30| $ptr) (|S_$30| $state))(= (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)) (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)))) :named ax_179))
   (assert (! (forall( (|p_$4| $ptr) (|s2| $state) (|s1| $state))(= (= ($select.mem ($memory |s2|) |p_$4|) ($select.mem ($memory |s1|) |p_$4|)) (= ($mem |s2| |p_$4|) ($mem |s1| |p_$4|)))) :named ax_180))
   (assert (! (forall( (|p_$5| $ptr) (|s2_$0| $state) (|s1_$0| $state))(= (= ($st |s2_$0| |p_$5|) ($st |s1_$0| |p_$5|)) (= ($select.sm ($statusmap |s2_$0|) |p_$5|) ($select.sm ($statusmap |s1_$0|) |p_$5|)))) :named ax_181))
   (assert (! (forall( (|p_$6| $ptr) (|s2_$1| $state) (|s1_$1| $state))(= (= ($ts |s2_$1| |p_$6|) ($ts |s1_$1| |p_$6|)) (= ($select.tm ($typemap |s2_$1|) |p_$6|) ($select.tm ($typemap |s1_$1|) |p_$6|)))) :named ax_182))
   (assert (! (forall( (|p_$63| $ptr))(!($extent_hint |p_$63| |p_$63|)  :pattern ( ($typ |p_$63|)))) :named ax_183))
   (assert (! (forall( (|p_$64| $ptr) (|f_$12| $field))(!(and (= |p_$64| ($ghost_emb ($ghost_ref |p_$64| |f_$12|))) (= |f_$12| ($ghost_path ($ghost_ref |p_$64| |f_$12|))))  :weight  0 :pattern ( ($ghost_ref |p_$64| |f_$12|)))) :named ax_184))
   (assert (! (forall( (|p_$65| $ptr) (|f_$13| $field))(!($in_range_spec_ptr ($ghost_ref |p_$65| |f_$13|))  :pattern ( ($ghost_ref |p_$65| |f_$13|)))) :named ax_185))
   (assert (! (forall( (|p_$9| $ptr) (|S_$3| $state))(= (= ($ts_emb ($ts |S_$3| |p_$9|)) ($ptr ^^root_emb ($ref |p_$9|))) (= ($ptr ^^root_emb ($ref |p_$9|)) ($emb |S_$3| |p_$9|)))) :named ax_186))
   (assert (! (forall( (|S_$114| $state))(!(=> ($good_state |S_$114|) (forall( (|#p_$10_$1| $ptr) (|#q_$9| $ptr))(!(=> (and (and ($set_in |#p_$10_$1| ($owns |S_$114| |#q_$9|)) ($good_state |S_$114|)) ($closed |S_$114| |#q_$9|)) (and ($closed |S_$114| |#p_$10_$1|) (not (= 0 ($ref |#p_$10_$1|)))))  :pattern ( ($set_in |#p_$10_$1| ($owns |S_$114| |#q_$9|))))))  :pattern ( ($good_state |S_$114|)))) :named ax_187))
   (assert (! (forall( (|S_$23| $state) (|t_$6| $token))(= (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)) (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)))) :named ax_188))
   (assert (! (forall( (|S_$24| $state))(= (forall( (|#p_$10_$0| $ptr) (|#q_$1| $ptr))(!(=> (and (and ($set_in |#p_$10_$0| ($owns |S_$24| |#q_$1|)) ($good_state |S_$24|)) ($closed |S_$24| |#q_$1|)) (and ($closed |S_$24| |#p_$10_$0|) (not (= 0 ($ref |#p_$10_$0|)))))  :pattern ( ($set_in |#p_$10_$0| ($owns |S_$24| |#q_$1|))))) (forall( (|#p_$10| $ptr) (|#q| $ptr))(!(=> (and (and ($set_in |#p_$10| ($owns |S_$24| |#q|)) ($good_state |S_$24|)) ($closed |S_$24| |#q|)) (and ($closed |S_$24| |#p_$10|) (not (= 0 ($ref |#p_$10|)))))  :pattern ( ($set_in |#p_$10| ($owns |S_$24| |#q|))))))) :named ax_189))
   (assert (! (forall( (|S_$57| $state) (|p_$69| $ptr))(!(or (<= ($timestamp |S_$57| |p_$69|) ($current_timestamp |S_$57|)) (not ($ts_typed ($select.tm ($typemap |S_$57|) |p_$69|))))  :weight  0 :pattern ( ($select.sm ($statusmap |S_$57|) |p_$69|)))) :named ax_190))
   (assert (! (forall( (|S_$60| $state) (|p_$73| $ptr))(!(=> ($is_non_primitive ($typ |p_$73|)) (= ($st_owner ($select.sm ($statusmap |S_$60|) |p_$73|)) ($owner |S_$60| |p_$73|)))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$73|)) ($owner |S_$60| |p_$73|)))) :named ax_191))
   (assert (! (forall( (|S_$62| $state) (|p_$75| $ptr))(!(=> ($is_non_primitive ($typ |p_$75|)) (= ($st_closed ($select.sm ($statusmap |S_$62|) |p_$75|)) ($closed |S_$62| |p_$75|)))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$75|)) ($closed |S_$62| |p_$75|)))) :named ax_192))
   (assert (! (forall( (|S_$67| $state) (|#p_$23| $ptr))(!(=> ($good_state |S_$67|) (= ($typed |S_$67| |#p_$23|) ($ts_typed ($select.tm ($typemap |S_$67|) |#p_$23|))))  :weight  0 :pattern ( ($typed |S_$67| |#p_$23|)))) :named ax_193))
   (assert (! (forall( (|s_$7| $status))(!(and ($is_non_primitive ($typ ($st_owner |s_$7|))) (not (= $kind_primitive ($kind_of ($typ ($st_owner |s_$7|))))))  :pattern ( ($st_owner |s_$7|)))) :named ax_194))
   (assert (! (forall( (|subject| $field) (|approver| $ptr) (|this| $ptr) (|S2_$0| $state) (|S1_$0| $state))(= (or (or (or (= 0 ($ref |approver|)) (= ($mem |S2_$0| ($dot |this| |subject|)) ($mem |S1_$0| ($dot |this| |subject|)))) (and ($inv2 |S1_$0| |S2_$0| |approver| ($typ |approver|)) (not ($is_threadtype ($typ |approver|))))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S2_$0| |this|) ($read_vol_version |S1_$0| |this|))))) (or (or (or (= 0 ($ref |approver|)) ($mem_eq |S1_$0| |S2_$0| ($dot |this| |subject|))) (and ($inv2nt |S1_$0| |S2_$0| |approver|) (not ($is_threadtype ($typ |approver|))))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S2_$0| |this|) ($read_vol_version |S1_$0| |this|))))))) :named ax_195))
   (assert (! (forall( (|sz_$7| Int) (|T_$6| $ctype) (|p_$49| $ptr))(= ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)) ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)))) :named ax_196))
   (assert (! (forall( (|T_$11| $ctype))(!(=> ($is_primitive |T_$11|) (and (forall( (|r_$7| Int) (|S_$73| $state))(!(= ($mutable |S_$73| ($ptr |T_$11| |r_$7|)) ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|)))  :pattern ( ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|))))) (forall( (|r_$6| Int) (|p_$84| $ptr))(!(= (= |p_$84| ($ptr |T_$11| |r_$6|)) ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|))))  :pattern ( ($set_in |p_$84| ($full_extent ($ptr |T_$11| |r_$6|))))))))  :pattern ( ($is_primitive |T_$11|)))) :named ax_197))
   (assert (! (forall( (|T_$12| $ctype))(!(=> ($is_primitive |T_$12|) (forall( (|S_$74| $state) (|r_$8| Int) (|p_$85| $ptr))(!(= (= |p_$85| ($ptr |T_$12| |r_$8|)) ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|))))  :pattern ( ($set_in |p_$85| ($extent |S_$74| ($ptr |T_$12| |r_$8|)))))))  :pattern ( ($is_primitive |T_$12|)))) :named ax_198))
   (assert (! (forall( (|T_$14| $ctype))(!(=> ($is_primitive |T_$14|) (forall( (|S_$76| $state) (|r_$10| Int))(!(= (= 0 ($select.mem ($memory |S_$76|) ($ptr |T_$14| |r_$10|))) ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|)))  :pattern ( ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|))))))  :pattern ( ($is_primitive |T_$14|)))) :named ax_199))
   (assert (! (forall( (|t_$42| $ctype) (|val_$17| Int))(!(=> ($in_range_t |t_$42| |val_$17|) (= |val_$17| ($unchecked |t_$42| |val_$17|)))  :pattern ( ($unchecked |t_$42| |val_$17|)))) :named ax_200))
   (assert (! (forall( (|t_$43| $ctype) (|val_$18| Int))(!($in_range_t |t_$43| ($unchecked |t_$43| |val_$18|))  :pattern ( ($unchecked |t_$43| |val_$18|)))) :named ax_201))
   (assert (! (forall( (|t_$89| $ctype))(!(=> ($is_math_type |t_$89|) ($is_primitive |t_$89|))  :pattern ( ($is_math_type |t_$89|)))) :named ax_202))
   (assert (! (forall( (|t| $ctype))(= (= $kind_primitive ($kind_of |t|)) (= $kind_primitive ($kind_of |t|)))) :named ax_203))
   (assert (! (forall( (|typ_$0| $ctype) (|#p_$8| $ptr) (|#s2| $state) (|#s1_$0| $state))(= (or (and (not ($closed |#s2| |#p_$8|)) (not ($closed |#s1_$0| |#p_$8|))) (and ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|))) (or (and (not ($closed |#s2| |#p_$8|)) (not ($closed |#s1_$0| |#p_$8|))) (and ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|))))) :named ax_204))
   (assert (! (forall( (|typ| $ctype) (|#p_$7| $ptr) (|#s1| $state))(= ($inv2 |#s1| |#s1| |#p_$7| |typ|) ($inv2 |#s1| |#s1| |#p_$7| |typ|))) :named ax_205))
   (assert (! (forall( (|u| $ptr) (|S_$41| $state))(= ($ts_active_option ($ts |S_$41| |u|)) ($ts_active_option ($select.tm ($typemap |S_$41|) |u|)))) :named ax_206))
   (assert (! (forall( (|val_$14| Int))(!(= (and (<= |val_$14| $max.u4) (<= 0 |val_$14|)) ($in_range_t ^^u4 |val_$14|))  :pattern ( ($in_range_t ^^u4 |val_$14|)))) :named ax_207))
   (assert (! (forall( (|val_$15| Int))(!(= (and (<= |val_$15| $max.u8) (<= 0 |val_$15|)) ($in_range_t ^^u8 |val_$15|))  :pattern ( ($in_range_t ^^u8 |val_$15|)))) :named ax_208))
   (assert (! (not $is_stuttering_check) :named ax_209))
   (assert (! (not $seclbl.bot) :named ax_210))
   (assert (! (not ($has_volatile_owns_set ^A)) :named ax_211))
   (assert (! (not ($is_claimable ^A)) :named ax_212))
   (assert (! (not (= $@distTp1 $@distTp3)) :named ax_213))
   (assert (! (not (= $@distTp1 $memory_allocator_type)) :named ax_214))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_215))
   (assert (! (not (= $@distTp2 $@distTp3)) :named ax_216))
   (assert (! (not (= $@distTp2 $memory_allocator_type)) :named ax_217))
   (assert (! (not (= $@distTp2 ^$@ptrset)) :named ax_218))
   (assert (! (not (= $@distTp2 ^$@thread_id)) :named ax_219))
   (assert (! (not (= $@distTp2 ^^bool)) :named ax_220))
   (assert (! (not (= $@distTp2 ^^claim)) :named ax_221))
   (assert (! (not (= $@distTp2 ^^i4)) :named ax_222))
   (assert (! (not (= $@distTp2 ^^root_emb)) :named ax_223))
   (assert (! (not (= $@distTp2 ^^u4)) :named ax_224))
   (assert (! (not (= $@distTp2 ^^u8)) :named ax_225))
   (assert (! (not (= $@distTp2 ^^void)) :named ax_226))
   (assert (! (not (= $@distTp2 ^A)) :named ax_227))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_228))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_229))
   (assert (! (not (= $@distTp3 $memory_allocator_type)) :named ax_230))
   (assert (! (not (= $kind_primitive $kind_thread)) :named ax_231))
   (assert (! (not (= $kind_primitive ($kind_of ($typ call0formal_$_@l_$_0)))) :named ax_232))
   (assert (! (not (= $kind_thread $kind_primitive)) :named ax_233))
   (assert (! (not (= $memory_allocator_type $@distTp1)) :named ax_234))
   (assert (! (not (= $memory_allocator_type $@distTp2)) :named ax_235))
   (assert (! (not (= $memory_allocator_type $@distTp3)) :named ax_236))
   (assert (! (not (= $memory_allocator_type ^$@ptrset)) :named ax_237))
   (assert (! (not (= $memory_allocator_type ^$@thread_id)) :named ax_238))
   (assert (! (not (= $memory_allocator_type ^^bool)) :named ax_239))
   (assert (! (not (= $memory_allocator_type ^^claim)) :named ax_240))
   (assert (! (not (= $memory_allocator_type ^^i4)) :named ax_241))
   (assert (! (not (= $memory_allocator_type ^^root_emb)) :named ax_242))
   (assert (! (not (= $memory_allocator_type ^^u4)) :named ax_243))
   (assert (! (not (= $memory_allocator_type ^^u8)) :named ax_244))
   (assert (! (not (= $memory_allocator_type ^^void)) :named ax_245))
   (assert (! (not (= $memory_allocator_type ^A)) :named ax_246))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_247))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_248))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_249))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_250))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_251))
   (assert (! (not (= ^$@ptrset ^^bool)) :named ax_252))
   (assert (! (not (= ^$@ptrset ^^claim)) :named ax_253))
   (assert (! (not (= ^$@ptrset ^^i4)) :named ax_254))
   (assert (! (not (= ^$@ptrset ^^root_emb)) :named ax_255))
   (assert (! (not (= ^$@ptrset ^^u4)) :named ax_256))
   (assert (! (not (= ^$@ptrset ^^u8)) :named ax_257))
   (assert (! (not (= ^$@ptrset ^^void)) :named ax_258))
   (assert (! (not (= ^$@ptrset ^A)) :named ax_259))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_260))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_261))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_262))
   (assert (! (not (= ^$@thread_id $memory_allocator_type)) :named ax_263))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_264))
   (assert (! (not (= ^$@thread_id ^^bool)) :named ax_265))
   (assert (! (not (= ^$@thread_id ^^claim)) :named ax_266))
   (assert (! (not (= ^$@thread_id ^^i4)) :named ax_267))
   (assert (! (not (= ^$@thread_id ^^root_emb)) :named ax_268))
   (assert (! (not (= ^$@thread_id ^^u4)) :named ax_269))
   (assert (! (not (= ^$@thread_id ^^u8)) :named ax_270))
   (assert (! (not (= ^$@thread_id ^^void)) :named ax_271))
   (assert (! (not (= ^$@thread_id ^A)) :named ax_272))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_273))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_274))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_275))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_276))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_277))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_278))
   (assert (! (not (= ^^bool ^^claim)) :named ax_279))
   (assert (! (not (= ^^bool ^^i4)) :named ax_280))
   (assert (! (not (= ^^bool ^^root_emb)) :named ax_281))
   (assert (! (not (= ^^bool ^^u4)) :named ax_282))
   (assert (! (not (= ^^bool ^^u8)) :named ax_283))
   (assert (! (not (= ^^bool ^^void)) :named ax_284))
   (assert (! (not (= ^^bool ^A)) :named ax_285))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_286))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_287))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_288))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_289))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_290))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_291))
   (assert (! (not (= ^^claim ^^bool)) :named ax_292))
   (assert (! (not (= ^^claim ^^i4)) :named ax_293))
   (assert (! (not (= ^^claim ^^root_emb)) :named ax_294))
   (assert (! (not (= ^^claim ^^u4)) :named ax_295))
   (assert (! (not (= ^^claim ^^u8)) :named ax_296))
   (assert (! (not (= ^^claim ^^void)) :named ax_297))
   (assert (! (not (= ^^claim ^A)) :named ax_298))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_299))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_300))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_301))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_302))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_303))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_304))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_305))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_306))
   (assert (! (not (= ^^i4 ^^root_emb)) :named ax_307))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_308))
   (assert (! (not (= ^^i4 ^^u8)) :named ax_309))
   (assert (! (not (= ^^i4 ^^void)) :named ax_310))
   (assert (! (not (= ^^i4 ^A)) :named ax_311))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_312))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_313))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_314))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_315))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_316))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_317))
   (assert (! (not (= ^^root_emb ^^bool)) :named ax_318))
   (assert (! (not (= ^^root_emb ^^claim)) :named ax_319))
   (assert (! (not (= ^^root_emb ^^i4)) :named ax_320))
   (assert (! (not (= ^^root_emb ^^u4)) :named ax_321))
   (assert (! (not (= ^^root_emb ^^u8)) :named ax_322))
   (assert (! (not (= ^^root_emb ^^void)) :named ax_323))
   (assert (! (not (= ^^root_emb ^A)) :named ax_324))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_325))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_326))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_327))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_328))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_329))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_330))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_331))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_332))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_333))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_334))
   (assert (! (not (= ^^u4 ^^u8)) :named ax_335))
   (assert (! (not (= ^^u4 ^^void)) :named ax_336))
   (assert (! (not (= ^^u4 ^A)) :named ax_337))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_338))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_339))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_340))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_341))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_342))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_343))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_344))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_345))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_346))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_347))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_348))
   (assert (! (not (= ^^u8 ^^void)) :named ax_349))
   (assert (! (not (= ^^u8 ^A)) :named ax_350))
   (assert (! (not (= ^^void $@distTp1)) :named ax_351))
   (assert (! (not (= ^^void $@distTp2)) :named ax_352))
   (assert (! (not (= ^^void $@distTp3)) :named ax_353))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_354))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_355))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_356))
   (assert (! (not (= ^^void ^^bool)) :named ax_357))
   (assert (! (not (= ^^void ^^claim)) :named ax_358))
   (assert (! (not (= ^^void ^^i4)) :named ax_359))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_360))
   (assert (! (not (= ^^void ^^u4)) :named ax_361))
   (assert (! (not (= ^^void ^^u8)) :named ax_362))
   (assert (! (not (= ^^void ^A)) :named ax_363))
   (assert (! (not (= ^A $@distTp1)) :named ax_364))
   (assert (! (not (= ^A $@distTp2)) :named ax_365))
   (assert (! (not (= ^A $@distTp3)) :named ax_366))
   (assert (! (not (= ^A $memory_allocator_type)) :named ax_367))
   (assert (! (not (= ^A ^$@ptrset)) :named ax_368))
   (assert (! (not (= ^A ^$@thread_id)) :named ax_369))
   (assert (! (not (= ^A ^^bool)) :named ax_370))
   (assert (! (not (= ^A ^^claim)) :named ax_371))
   (assert (! (not (= ^A ^^i4)) :named ax_372))
   (assert (! (not (= ^A ^^root_emb)) :named ax_373))
   (assert (! (not (= ^A ^^u4)) :named ax_374))
   (assert (! (not (= ^A ^^u8)) :named ax_375))
   (assert (! (not (= ^A ^^void)) :named ax_376))
   (assert (! (not (= A.x A.$owns)) :named ax_377))
   (assert (! (not (= true $@bf_41)) :named ax_378))
   (assert (! (not (= true false)) :named ax_379))
   (assert (! (or (= ($ref_cnt $s call0formal_$_@l_$_0) 0) (not ($is_claimable ($typ call0formal_$_@l_$_0)))) :named ax_380))
   (assert (! true :named ax_381))

;Program
(assert (not
(let ((L3_assertion (and
    (=> $is_unwrap_check ($set_eq ($owns $s_$_2 ($ptr ^A P@_this_)) $set_empty))
)))
(let (($root (=> (and true
  )
    L3_assertion
)))
   $root
))
))

;Commands
   (check-sat)
   ;(get-unsat-core)
