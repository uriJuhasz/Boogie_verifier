;Analysis time until now:     7s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ 0)
(declare-sort $@Map@@$ptr@To@$ptr@@ 0)
(declare-sort $@Map@@$ptr@To@Bool@@ 0)
(declare-sort $@Map@@$ptr@To@Int@@ 0)
(declare-sort $@Map@@Int@$ctype@To@$ptr@@ 0)
(declare-sort $ctype 0)
(declare-sort $ctype_branch 0)
(declare-sort $field 0)
(declare-sort $field_kind 0)
(declare-sort $label 0)
(declare-sort $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool 0)
(declare-sort $map_t..$ptr_to..^Node.^^bool 0)
(declare-sort $map_t..^^i4.^^i4 0)
(declare-sort $ptr 0)
(declare-sort $pure_function 0)
(declare-sort $state 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)

;Functions
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@distTp3 ( ) $ctype)
(declare-fun $@distTp4 ( ) $ctype)
(declare-fun $@distTp5 ( ) $ctype)
(declare-fun $@file^?3Cno?20file?3E ( ) $token)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c ( ) $token)
(declare-fun $@loc.assign@12 ( ) $token)
(declare-fun $@loc.assign@13 ( ) $token)
(declare-fun $@loc.n ( ) $token)
(declare-fun $@loc.owns@26 ( ) $token)
(declare-fun $@loc.owns@30 ( ) $token)
(declare-fun $@loc.owns@33 ( ) $token)
(declare-fun $@loc.owns@36 ( ) $token)
(declare-fun $@loc.owns@39 ( ) $token)
(declare-fun $@loc.owns@42 ( ) $token)
(declare-fun $@loc.p ( ) $token)
(declare-fun $@loc.prestate@24 ( ) $token)
(declare-fun $@loc.prestate@27 ( ) $token)
(declare-fun $@loc.prestate@28 ( ) $token)
(declare-fun $@loc.prestate@29 ( ) $token)
(declare-fun $@loc.prestate@31 ( ) $token)
(declare-fun $@loc.prestate@34 ( ) $token)
(declare-fun $@loc.prestate@35 ( ) $token)
(declare-fun $@loc.prestate@37 ( ) $token)
(declare-fun $@loc.prestate@40 ( ) $token)
(declare-fun $@loc.prestate@43 ( ) $token)
(declare-fun $@loc.prestate@44 ( ) $token)
(declare-fun $@loc.res_lambda@4@17 ( ) $token)
(declare-fun $@loc.res_lambda@5@18 ( ) $token)
(declare-fun $@loc.res_lambda@6@19 ( ) $token)
(declare-fun $@loc.res_lambda@7@20 ( ) $token)
(declare-fun $@loc.staticWrapState@25 ( ) $token)
(declare-fun $@loc.staticWrapState@32 ( ) $token)
(declare-fun $@loc.staticWrapState@38 ( ) $token)
(declare-fun $@loc.staticWrapState@41 ( ) $token)
(declare-fun $@loc.t ( ) $token)
(declare-fun $@loc.x ( ) $token)
(declare-fun $@tok$1^134.1 ( ) $token)
(declare-fun $@tok$1^142.3 ( ) $token)
(declare-fun $@tok$1^144.19 ( ) $token)
(declare-fun $@tok$1^146.13 ( ) $token)
(declare-fun $@tok$1^146.24 ( ) $token)
(declare-fun $@tok$1^146.3 ( ) $token)
(declare-fun $@tok$1^148.3 ( ) $token)
(declare-fun $@tok$1^151.14 ( ) $token)
(declare-fun $@tok$1^151.5 ( ) $token)
(declare-fun $@tok$1^152.5 ( ) $token)
(declare-fun $@tok$1^153.15 ( ) $token)
(declare-fun $@tok$1^153.5 ( ) $token)
(declare-fun $@tok$1^157.5 ( ) $token)
(declare-fun $@tok$1^158.21 ( ) $token)
(declare-fun $@tok$1^159.21 ( ) $token)
(declare-fun $@tok$1^163.25 ( ) $token)
(declare-fun $@tok$1^163.41 ( ) $token)
(declare-fun $@tok$1^167.3 ( ) $token)
(declare-fun $@tok$1^168.28 ( ) $token)
(declare-fun $@tok$1^179.7 ( ) $token)
(declare-fun $@tok$1^181.36 ( ) $token)
(declare-fun $@tok$1^181.41 ( ) $token)
(declare-fun $@tok$1^185.7 ( ) $token)
(declare-fun $@tok$1^187.36 ( ) $token)
(declare-fun $@tok$1^187.41 ( ) $token)
(declare-fun $@tok$1^194.27 ( ) $token)
(declare-fun $@tok$1^194.37 ( ) $token)
(declare-fun $@tok$1^195.5 ( ) $token)
(declare-fun $@tok$1^198.3 ( ) $token)
(declare-fun $@tok$1^199.19 ( ) $token)
(declare-fun $@tok$1^200.19 ( ) $token)
(declare-fun $@tok$2^0.0 ( ) $token)
(declare-fun $@wrTime$1^134.1 ( ) Int)
(declare-fun $@wrTime$1^168.28 ( ) Int)
(declare-fun $_and ( $ctype Int Int ) Int)
(declare-fun $_not ( $ctype Int ) Int)
(declare-fun $_or ( $ctype Int Int ) Int)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $_shl ( $ctype Int Int ) Int)
(declare-fun $_shr ( Int Int ) Int)
(declare-fun $_xor ( $ctype Int Int ) Int)
(declare-fun $active_option ( $state $ptr ) $field)
(declare-fun $addr ( $ptr ) Int)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_ptr_type ( ) $ctype)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $array_emb ( $ctype Int ) $field)
(declare-fun $array_length ( $ctype ) Int)
(declare-fun $array_range_no_state ( $ptr $ctype Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun $arrays_disjoint_id ( $ptr Int $ptr Int $ptr ) Int)
(declare-fun $as_addr ( $ptr $ctype Int ) $ptr)
(declare-fun $as_composite_field ( $field ) $field)
(declare-fun $as_deep_domain ( $state $ptr ) $ptr)
(declare-fun $as_field_with_type ( $field $ctype ) $field)
(declare-fun $as_in_range_t ( $ctype ) $ctype)
(declare-fun $as_primitive_field ( $field ) $field)
(declare-fun $as_union_type ( $ctype ) $ctype)
(declare-fun $base ( $ptr ) $ptr)
(declare-fun $bv_extract_signed ( Int Int Int Int ) Int)
(declare-fun $bv_extract_unsigned ( Int Int Int Int ) Int)
(declare-fun $bv_update ( Int Int Int Int Int ) Int)
(declare-fun $by_claim ( $state $ptr $ptr $ptr ) $ptr)
(declare-fun $claim_idx ( $ptr $ptr ) Int)
(declare-fun $claim_no ( $state $ptr Int ) $ptr)
(declare-fun $claim_version ( $ptr ) $version)
(declare-fun $composite_extent ( $state $ptr $ctype ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ctype_array ( ) $ctype_branch)
(declare-fun $ctype_flat ( ) $ctype_branch)
(declare-fun $ctype_map ( ) $ctype_branch)
(declare-fun $ctype_ptr ( ) $ctype_branch)
(declare-fun $ctype_spec_ptr ( ) $ctype_branch)
(declare-fun $current_frame_level ( ) Int)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $decreases_level ( ) Int)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $element_type ( $ctype ) $ctype)
(declare-fun $emb0 ( $ptr ) $ptr)
(declare-fun $extent ( $state $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $f_closed ( $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun $f_group_root ( $ctype ) $field)
(declare-fun $f_owner ( $state ) $@Map@@$ptr@To@$ptr@@)
(declare-fun $f_owns ( $ctype ) $field)
(declare-fun $f_ref_cnt ( $ctype ) $field)
(declare-fun $f_root ( $ctype ) $field)
(declare-fun $f_timestamp ( $state ) $@Map@@$ptr@To@Int@@)
(declare-fun $f_vol_version ( $ctype ) $field)
(declare-fun $fetch_from_domain ( $version $ptr $field ) Int)
(declare-fun $fetch_from_vv ( $vol_version $ptr $field ) Int)
(declare-fun $field ( $ptr ) $field)
(declare-fun $field_arr_ctor ( $field Int ) $field)
(declare-fun $field_arr_index ( $field ) Int)
(declare-fun $field_arr_root ( $field ) $field)
(declare-fun $field_arr_size ( $field ) Int)
(declare-fun $field_kind ( $field ) $field_kind)
(declare-fun $field_offset ( $field ) Int)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $field_plus ( $field Int ) $field)
(declare-fun $field_type ( $field ) $ctype)
(declare-fun $first_union_field ( $ctype ) $field)
(declare-fun $fk_allocation_root ( ) $field_kind)
(declare-fun $fk_as_array_first ( ) $field_kind)
(declare-fun $fk_base ( ) $field_kind)
(declare-fun $fk_emb_array ( ) $field_kind)
(declare-fun $fk_owns ( ) $field_kind)
(declare-fun $fk_ref_cnt ( ) $field_kind)
(declare-fun $fk_vol_version ( ) $field_kind)
(declare-fun $frame_level ( $pure_function ) Int)
(declare-fun $full_extent ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $full_extent_state ( ) $state)
(declare-fun $get_fnptr ( Int $ctype ) $ptr)
(declare-fun $get_fnptr_ref ( Int ) $ptr)
(declare-fun $get_string_literal ( Int Int ) $ptr)
(declare-fun $heap ( $state ) $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)
(declare-fun $i1_to_ptr ( Int ) $ptr)
(declare-fun $i2_to_ptr ( Int ) $ptr)
(declare-fun $i4_to_ptr ( Int ) $ptr)
(declare-fun $i8_to_ptr ( Int ) $ptr)
(declare-fun $id_set_disjoint ( $ptr $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) Int)
(declare-fun $idx ( $ptr Int ) $ptr)
(declare-fun $inactive_union_owner ( ) $ptr)
(declare-fun $inactive_union_owner_type ( ) $ctype)
(declare-fun $index_within ( $ptr $ptr ) Int)
(declare-fun $int_to_map_t..^^i4.^^i4 ( Int ) $map_t..^^i4.^^i4)
(declare-fun $int_to_map_t..ptr_to..^Node.^^bool ( Int ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ( Int ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun $int_to_ptr ( Int ) $ptr)
(declare-fun $int_to_ptrset ( Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun $int_to_version ( Int ) $version)
(declare-fun $map_domain ( $ctype ) $ctype)
(declare-fun $map_range ( $ctype ) $ctype)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $map_t..^^i4.^^i4_to_int ( $map_t..^^i4.^^i4 ) Int)
(declare-fun $map_t..ptr_to..^Node.^^bool_to_int ( $map_t..$ptr_to..^Node.^^bool ) Int)
(declare-fun $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ) Int)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $mem_range_heap ( $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ $ptr Int ) Int)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $no_claim ( ) $ptr)
(declare-fun $null ( ) $ptr)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $phys_ptr_cast ( $ptr $ctype ) $ptr)
(declare-fun $primitive_emb_type ( ) $ctype)
(declare-fun $ptr ( $field $ptr ) $ptr)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_int ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $ptrset_to_int ( $@Map@@$ptr@To@Bool@@ ) Int)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $release ( $state $state $ptr $ptr ) $state)
(declare-fun $retype ( $state $ptr ) $ptr)
(declare-fun $roots ( $state ) $@Map@@$ptr@To@$ptr@@)
(declare-fun $s ( ) $state)
(declare-fun $s@0 ( ) $state)
(declare-fun $s@1 ( ) $state)
(declare-fun $s@10 ( ) $state)
(declare-fun $s@11 ( ) $state)
(declare-fun $s@12 ( ) $state)
(declare-fun $s@13 ( ) $state)
(declare-fun $s@14 ( ) $state)
(declare-fun $s@15 ( ) $state)
(declare-fun $s@16 ( ) $state)
(declare-fun $s@17 ( ) $state)
(declare-fun $s@18 ( ) $state)
(declare-fun $s@19 ( ) $state)
(declare-fun $s@2 ( ) $state)
(declare-fun $s@20 ( ) $state)
(declare-fun $s@21 ( ) $state)
(declare-fun $s@22 ( ) $state)
(declare-fun $s@23 ( ) $state)
(declare-fun $s@24 ( ) $state)
(declare-fun $s@25 ( ) $state)
(declare-fun $s@3 ( ) $state)
(declare-fun $s@4 ( ) $state)
(declare-fun $s@5 ( ) $state)
(declare-fun $s@6 ( ) $state)
(declare-fun $s@7 ( ) $state)
(declare-fun $s@8 ( ) $state)
(declare-fun $s@9 ( ) $state)
(declare-fun $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool $ptr ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $select.$map_t..^^i4.^^i4 ( $map_t..^^i4.^^i4 Int ) Int)
(declare-fun $set_cardinality ( $@Map@@$ptr@To@Bool@@ ) Int)
(declare-fun $set_difference ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_empty ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_singleton ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_union ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun $set_universe ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $span ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $spec_ptr_cast ( $ptr $ctype ) $ptr)
(declare-fun $spec_ptr_to ( $ctype ) $ctype)
(declare-fun $state_to_int ( $state ) Int)
(declare-fun $store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool $ptr $map_t..$ptr_to..^Node.^^bool ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun $store.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.^^bool $ptr Bool ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $store.$map_t..^^i4.^^i4 ( $map_t..^^i4.^^i4 Int Int ) $map_t..^^i4.^^i4)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $type_branch ( $ctype ) $ctype_branch)
(declare-fun $type_project_0 ( $ctype ) $ctype)
(declare-fun $typemap ( $@Map@@$ptr@To@$ptr@@ ) $@Map@@Int@$ctype@To@$ptr@@)
(declare-fun $u8_to_ptr ( Int ) $ptr)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $unchecked_sbits ( Int Int ) Int)
(declare-fun $unchecked_ubits ( Int Int ) Int)
(declare-fun $unchk_add ( $ctype Int Int ) Int)
(declare-fun $update_int ( $state $ptr Int ) $state)
(declare-fun $ver_domain ( $version ) $@Map@@$ptr@To@Bool@@)
(declare-fun $vs_base_ref ( $struct ) $ptr)
(declare-fun $vs_ctor ( $state $ptr ) $struct)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun $writes_at ( Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun $zero.$map_t..$ptr_to..^Node.^^bool ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun $zero.$map_t..^^i4.^^i4 ( ) $map_t..^^i4.^^i4)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@state_t ( ) $ctype)
(declare-fun ^$@struct ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^$@thread_id_t ( ) $ctype)
(declare-fun ^$@volatile_version_t ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^f4 ( ) $ctype)
(declare-fun ^^f8 ( ) $ctype)
(declare-fun ^^field ( ) $ctype)
(declare-fun ^^i1 ( ) $ctype)
(declare-fun ^^i2 ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^i8 ( ) $ctype)
(declare-fun ^^mathint ( ) $ctype)
(declare-fun ^^null_type ( ) $ctype)
(declare-fun ^^object ( ) $ctype)
(declare-fun ^^u1 ( ) $ctype)
(declare-fun ^^u2 ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun ^Node ( ) $ctype)
(declare-fun ^Tree ( ) $ctype)
(declare-fun assign@12 ( ) $ptr)
(declare-fun assign@12@0 ( ) $ptr)
(declare-fun assign@13 ( ) $ptr)
(declare-fun assign@13@0 ( ) $ptr)
(declare-fun call0formal@@l0@0 ( ) $ptr)
(declare-fun call0formal@@l1@0 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun call0formal@@l1@0_$1 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun call0formal@@l2@0 ( ) $map_t..^^i4.^^i4)
(declare-fun call0formal@o@0 ( ) $ptr)
(declare-fun call0formal@o@0_$1 ( ) $ptr)
(declare-fun call0formal@o@0_$2 ( ) $ptr)
(declare-fun call0formal@o@0_$3 ( ) $ptr)
(declare-fun call0formal@o@0_$4 ( ) $ptr)
(declare-fun call0formal@o@0_$5 ( ) $ptr)
(declare-fun call0formal@o@0_$6 ( ) $ptr)
(declare-fun call0formal@o@0_$7 ( ) $ptr)
(declare-fun call0formal@o@0_$8 ( ) $ptr)
(declare-fun call0formal@p@0 ( ) $ptr)
(declare-fun call1formal@$result@0 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun call1formal@@l0@0 ( ) $ptr)
(declare-fun call1formal@@l0@0_$1 ( ) $ptr)
(declare-fun call1formal@@l1@0 ( ) Int)
(declare-fun call1formal@owns@0 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun call1formal@p@0 ( ) $ptr)
(declare-fun call1formal@p@0_$1 ( ) $ptr)
(declare-fun call1formal@p@0_$10 ( ) $ptr)
(declare-fun call1formal@p@0_$2 ( ) $ptr)
(declare-fun call1formal@p@0_$3 ( ) $ptr)
(declare-fun call1formal@p@0_$4 ( ) $ptr)
(declare-fun call1formal@p@0_$5 ( ) $ptr)
(declare-fun call1formal@p@0_$6 ( ) $ptr)
(declare-fun call1formal@p@0_$7 ( ) $ptr)
(declare-fun call1formal@p@0_$8 ( ) $ptr)
(declare-fun call1formal@p@0_$9 ( ) $ptr)
(declare-fun call2formal@$result@0 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun call2formal@$result@0_$1 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun call2formal@@l0@0 ( ) Int)
(declare-fun call2formal@v@0 ( ) Int)
(declare-fun call2formal@v@0_$1 ( ) Int)
(declare-fun call2formal@v@0_$10 ( ) Int)
(declare-fun call2formal@v@0_$2 ( ) Int)
(declare-fun call2formal@v@0_$3 ( ) Int)
(declare-fun call2formal@v@0_$4 ( ) Int)
(declare-fun call2formal@v@0_$5 ( ) Int)
(declare-fun call2formal@v@0_$6 ( ) Int)
(declare-fun call2formal@v@0_$7 ( ) Int)
(declare-fun call2formal@v@0_$8 ( ) Int)
(declare-fun call2formal@v@0_$9 ( ) Int)
(declare-fun call3formal@$result@0 ( ) $map_t..^^i4.^^i4)
(declare-fun cf@doMark ( ) $pure_function)
(declare-fun cf@lambda@1 ( ) $pure_function)
(declare-fun cf@lambda@2 ( ) $pure_function)
(declare-fun cf@lambda@3 ( ) $pure_function)
(declare-fun cf@lambda@4 ( ) $pure_function)
(declare-fun cf@lambda@5 ( ) $pure_function)
(declare-fun cf@lambda@6 ( ) $pure_function)
(declare-fun cf@lambda@7 ( ) $pure_function)
(declare-fun cf@lambda@8 ( ) $pure_function)
(declare-fun cf@lambda@9 ( ) $pure_function)
(declare-fun cf@mark ( ) $pure_function)
(declare-fun cf@mark2 ( ) $pure_function)
(declare-fun F@lambda@1 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@2 ( $map_t..$ptr_to..^Node.^^bool ) $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@3 ( ) $map_t..^^i4.^^i4)
(declare-fun F@lambda@4 ( $map_t..^^i4.^^i4 Int Int ) $map_t..^^i4.^^i4)
(declare-fun F@lambda@5 ( $ptr ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@6 ( $map_t..$ptr_to..^Node.^^bool $ptr ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@7 ( $map_t..$ptr_to..^Node.^^bool $ptr ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@8 ( $map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.^^bool $ptr ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@lambda@9 ( $map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.^^bool $ptr ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun F@mark ( $ptr ) $ptr)
(declare-fun L@n ( ) $ptr)
(declare-fun L@n@0 ( ) $ptr)
(declare-fun L@n@1 ( ) $ptr)
(declare-fun L@n@2 ( ) $ptr)
(declare-fun L@n@3 ( ) $ptr)
(declare-fun L@p ( ) $ptr)
(declare-fun L@p@0 ( ) $ptr)
(declare-fun L@p@1 ( ) $ptr)
(declare-fun L@p@2 ( ) $ptr)
(declare-fun l@public ( ) $label)
(declare-fun lambda@0 ( $field_kind $ptr $ctype Int ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@1 ( Int $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@10 ( $ptr $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@11 ( $ptr $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@12 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@13 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@14 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@15 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@16 ( $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@17 ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@18 ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@19 ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@2 ( Int $ptr $ctype ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@21 ( $ctype $ptr $ctype $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@22 ( $field $state $ptr $ctype $ptr $ctype ) $@Map@@$ptr@To@Bool@@)
(declare-fun lambda@3 ( $state $state $ptr ) $@Map@@$ptr@To@Int@@)
(declare-fun lambda@4 ( $state $ptr ) $@Map@@$ptr@To@$ptr@@)
(declare-fun lambda@5 ( $ptr $state ) $@Map@@$ptr@To@$ptr@@)
(declare-fun MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ( $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ $field ) $@Map@@$ptr@To@Int@@)
(declare-fun MapRead$$@Map@@$ptr@To@$ptr@@$ ( $@Map@@$ptr@To@$ptr@@ $ptr ) $ptr)
(declare-fun MapRead$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr ) Bool)
(declare-fun MapRead$$@Map@@$ptr@To@Int@@$ ( $@Map@@$ptr@To@Int@@ $ptr ) Int)
(declare-fun MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ( $@Map@@Int@$ctype@To@$ptr@@ Int $ctype ) $ptr)
(declare-fun MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ( $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ $field $@Map@@$ptr@To@Int@@ ) $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)
(declare-fun MapWrite$$@Map@@$ptr@To@$ptr@@$ ( $@Map@@$ptr@To@$ptr@@ $ptr $ptr ) $@Map@@$ptr@To@$ptr@@)
(declare-fun MapWrite$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr Bool ) $@Map@@$ptr@To@Bool@@)
(declare-fun MapWrite$$@Map@@$ptr@To@Int@@$ ( $@Map@@$ptr@To@Int@@ $ptr Int ) $@Map@@$ptr@To@Int@@)
(declare-fun Node.key ( ) $field)
(declare-fun Node.left ( ) $field)
(declare-fun Node.parent ( ) $field)
(declare-fun Node.red ( ) $field)
(declare-fun Node.right ( ) $field)
(declare-fun Node.value ( ) $field)
(declare-fun owns@26 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@26@0 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@30 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@30@0 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@33 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@33@0 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@36 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@36@0 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@39 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@39@0 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@42 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun owns@42@0 ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun P@t ( ) $ptr)
(declare-fun P@x ( ) $ptr)
(declare-fun prestate@24 ( ) $state)
(declare-fun prestate@24@0 ( ) $state)
(declare-fun prestate@27 ( ) $state)
(declare-fun prestate@27@0 ( ) $state)
(declare-fun prestate@28 ( ) $state)
(declare-fun prestate@28@0 ( ) $state)
(declare-fun prestate@29 ( ) $state)
(declare-fun prestate@29@0 ( ) $state)
(declare-fun prestate@31 ( ) $state)
(declare-fun prestate@31@0 ( ) $state)
(declare-fun prestate@34 ( ) $state)
(declare-fun prestate@34@0 ( ) $state)
(declare-fun prestate@35 ( ) $state)
(declare-fun prestate@35@0 ( ) $state)
(declare-fun prestate@37 ( ) $state)
(declare-fun prestate@37@0 ( ) $state)
(declare-fun prestate@40 ( ) $state)
(declare-fun prestate@40@0 ( ) $state)
(declare-fun prestate@43 ( ) $state)
(declare-fun prestate@43@0 ( ) $state)
(declare-fun prestate@44 ( ) $state)
(declare-fun prestate@44@0 ( ) $state)
(declare-fun res_lambda@4@17 ( ) $map_t..^^i4.^^i4)
(declare-fun res_lambda@5@18 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun res_lambda@6@19 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun res_lambda@7@20@0 ( ) $map_t..$ptr_to..^Node.^^bool)
(declare-fun staticWrapState@25 ( ) $state)
(declare-fun staticWrapState@25@0 ( ) $state)
(declare-fun staticWrapState@32 ( ) $state)
(declare-fun staticWrapState@32@0 ( ) $state)
(declare-fun staticWrapState@38 ( ) $state)
(declare-fun staticWrapState@38@0 ( ) $state)
(declare-fun staticWrapState@41 ( ) $state)
(declare-fun staticWrapState@41@0 ( ) $state)
(declare-fun Tree.abs ( ) $field)
(declare-fun Tree.R ( ) $field)
(declare-fun Tree.root ( ) $field)

;Predicates
(declare-fun $account_claim ( $state $ptr $ptr ) Bool)
(declare-fun $all_first_option_typed ( $state $ptr ) Bool)
(declare-fun $arrays_disjoint ( $ptr Int $ptr Int ) Bool)
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $claimed_closed ( $state $ptr ) Bool)
(declare-fun $claims_claim ( $ptr $ptr ) Bool)
(declare-fun $claims_obj ( $ptr $ptr ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $dont_instantiate_int ( Int ) Bool)
(declare-fun $dont_instantiate_state ( $state ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.^^bool $map_t..$ptr_to..^Node.^^bool ) Bool)
(declare-fun $eq.$map_t..^^i4.^^i4 ( $map_t..^^i4.^^i4 $map_t..^^i4.^^i4 ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_is_fresh ( $state $state $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $file_name_is ( Int $token ) Bool)
(declare-fun $first_option_typed ( $state $ptr ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $function_arg_type ( $pure_function Int $ctype ) Bool)
(declare-fun $function_entry ( $state ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_field_at0 ( $ctype $field ) Bool)
(declare-fun $in_claim_domain ( $ptr $ptr ) Bool)
(declare-fun $in_composite_array_lev2 ( $state $ptr $ptr Int ) Bool)
(declare-fun $in_domain ( $state $ptr $ptr ) Bool)
(declare-fun $in_domain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_range_phys_ptr ( $ptr ) Bool)
(declare-fun $in_range_sbits ( Int Int ) Bool)
(declare-fun $in_range_spec_ptr ( $ptr ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $in_range_ubits ( Int Int ) Bool)
(declare-fun $in_vdomain ( $state $ptr $ptr ) Bool)
(declare-fun $in_vdomain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_writes_at ( Int $ptr ) Bool)
(declare-fun $instantiate_int ( Int ) Bool)
(declare-fun $instantiate_ptr ( $ptr ) Bool)
(declare-fun $instantiate_ptrset ( $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $inv_lab ( $state $ptr $label ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $invok_state ( $state ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_approved_by ( $ctype $field $field ) Bool)
(declare-fun $is_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_datatype ( $ctype ) Bool)
(declare-fun $is_fnptr_type ( $ctype ) Bool)
(declare-fun $is_ghost_field ( $field ) Bool)
(declare-fun $is_group_type ( $ctype ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_mutable_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_object_root_ptr ( $ptr ) Bool)
(declare-fun $is_owner_approved ( $ctype $field ) Bool)
(declare-fun $is_phys_field ( $field ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_proper ( $ptr ) Bool)
(declare-fun $is_record_type ( $ctype ) Bool)
(declare-fun $is_semi_sequential_field ( $field ) Bool)
(declare-fun $is_sequential_field ( $field ) Bool)
(declare-fun $is_span_sequential ( $ctype ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_thread_local_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_union_field ( $field ) Bool)
(declare-fun $is_union_type ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $is_unwrapped ( $state $state $ptr ) Bool)
(declare-fun $is_unwrapped_dynamic ( $state $state $ptr ) Bool)
(declare-fun $is_volatile_field ( $field ) Bool)
(declare-fun $is_wrapped ( $state $state $ptr $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $is_wrapped_dynamic ( $state $state $ptr ) Bool)
(declare-fun $local_value_is ( $state $token $token Int $ctype ) Bool)
(declare-fun $modifies ( $state $state $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $position_marker ( ) Bool)
(declare-fun $post_unwrap ( $state $state ) Bool)
(declare-fun $pre_static_unwrap ( $state ) Bool)
(declare-fun $pre_static_wrap ( $state ) Bool)
(declare-fun $pre_unwrap ( $state ) Bool)
(declare-fun $pre_wrap ( $state ) Bool)
(declare-fun $program_entry_point ( $state ) Bool)
(declare-fun $ptr_eq ( $ptr $ptr ) Bool)
(declare-fun $select.$map_t..$ptr_to..^Node.^^bool ( $map_t..$ptr_to..^Node.^^bool $ptr ) Bool)
(declare-fun $set_disjoint ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $set_eq ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $set_in_pos ( $ptr $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $set_in0 ( $ptr $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $strong_shallow_struct_eq ( $state $ptr $state $ptr ) Bool)
(declare-fun $strong_struct_eq ( $state $ptr $state $ptr ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $top_writable ( $state Int $ptr ) Bool)
(declare-fun $trans_call_transition ( $state $state ) Bool)
(declare-fun $type_code_is ( Int $ctype ) Bool)
(declare-fun $updated_owns ( $state $state $ptr $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $valid_claim ( $state $ptr ) Bool)
(declare-fun $valid_fnptr ( $ptr ) Bool)
(declare-fun F@doMark ( $ptr ) Bool)
(declare-fun F@mark2 ( $ptr ) Bool)
(declare-fun sk_hack ( Bool ) Bool)

;Axioms
   (assert (! (forall ((|i_1| $field)(|m| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)(|v| $@Map@@$ptr@To@Int@@))(!(= v (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m i_1 v) i_1)):pattern ( (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m i_1 v) i_1)) :qid map_1_$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ :weight 0 )) :named ax_0))
   (assert (! (forall ((|i_3| $ptr)(|m_2| $@Map@@$ptr@To@Int@@)(|v_2| Int))(!(= v_2 (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_2 i_3 v_2) i_3)):pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_2 i_3 v_2) i_3)) :qid map_1_$@Map@@$ptr@To@Int@@ :weight 0 )) :named ax_1))
   (assert (! (forall ((|i_5| $ptr)(|m_4| $@Map@@$ptr@To@Bool@@)(|v_5| Bool))(!(= v_5 (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_4 i_5 v_5) i_5)):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_4 i_5 v_5) i_5)) :qid map_1_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_2))
   (assert (! (forall ((|i_7| $ptr)(|m_6| $@Map@@$ptr@To@$ptr@@)(|v_7| $ptr))(!(= v_7 (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_6 i_7 v_7) i_7)):pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_6 i_7 v_7) i_7)) :qid map_1_$@Map@@$ptr@To@$ptr@@ :weight 0 )) :named ax_3))
   (assert (! (forall ((|v_1| $@Map@@$ptr@To@Int@@)(|m_1| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@)(|i_2| $field)(|j_1| $field))(!(=> (not (= j_1 i_2)) (= (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m_1 j_1) (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m_1 i_2 v_1) j_1))):pattern ( (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ m_1 i_2 v_1) j_1)) :qid map_2_$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@ :weight 0 )) :named ax_4))
   (assert (! (forall ((|v_3| Int)(|m_3| $@Map@@$ptr@To@Int@@)(|i_4| $ptr)(|j_2| $ptr))(!(=> (not (= j_2 i_4)) (= (MapRead$$@Map@@$ptr@To@Int@@$ m_3 j_2) (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_3 i_4 v_3) j_2))):pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapWrite$$@Map@@$ptr@To@Int@@$ m_3 i_4 v_3) j_2)) :qid map_2_$@Map@@$ptr@To@Int@@ :weight 0 )) :named ax_5))
   (assert (! (forall ((|v_6| Bool)(|m_5| $@Map@@$ptr@To@Bool@@)(|i_6| $ptr)(|j_3| $ptr))(!(=> (not (= j_3 i_6)) (= (MapRead$$@Map@@$ptr@To@Bool@@$ m_5 j_3) (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_5 i_6 v_6) j_3))):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_5 i_6 v_6) j_3)) :qid map_2_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_6))
   (assert (! (forall ((|v_8| $ptr)(|m_7| $@Map@@$ptr@To@$ptr@@)(|i_8| $ptr)(|j_4| $ptr))(!(=> (not (= j_4 i_8)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ m_7 j_4) (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_7 i_8 v_8) j_4))):pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (MapWrite$$@Map@@$ptr@To@$ptr@@$ m_7 i_8 v_8) j_4)) :qid map_2_$@Map@@$ptr@To@$ptr@@ :weight 0 )) :named ax_7))
   (assert (! (not (= $@distTp1 $inactive_union_owner_type)) :named ax_8))
   (assert (! (not (= $@distTp1 $primitive_emb_type)) :named ax_9))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_10))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_11))
   (assert (! (not (= $@distTp2 $inactive_union_owner_type)) :named ax_12))
   (assert (! (not (= $@distTp2 $primitive_emb_type)) :named ax_13))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_14))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_15))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_16))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_17))
   (assert (! (not (= $@distTp3 $inactive_union_owner_type)) :named ax_18))
   (assert (! (not (= $@distTp3 $primitive_emb_type)) :named ax_19))
   (assert (! (not (= $@distTp4 $@distTp1)) :named ax_20))
   (assert (! (not (= $@distTp4 $@distTp1)) :named ax_21))
   (assert (! (not (= $@distTp4 $@distTp2)) :named ax_22))
   (assert (! (not (= $@distTp4 $@distTp2)) :named ax_23))
   (assert (! (not (= $@distTp4 $@distTp3)) :named ax_24))
   (assert (! (not (= $@distTp4 $@distTp3)) :named ax_25))
   (assert (! (not (= $@distTp4 $inactive_union_owner_type)) :named ax_26))
   (assert (! (not (= $@distTp4 $primitive_emb_type)) :named ax_27))
   (assert (! (not (= $@distTp5 $@distTp1)) :named ax_28))
   (assert (! (not (= $@distTp5 $@distTp1)) :named ax_29))
   (assert (! (not (= $@distTp5 $@distTp2)) :named ax_30))
   (assert (! (not (= $@distTp5 $@distTp2)) :named ax_31))
   (assert (! (not (= $@distTp5 $@distTp3)) :named ax_32))
   (assert (! (not (= $@distTp5 $@distTp3)) :named ax_33))
   (assert (! (not (= $@distTp5 $@distTp4)) :named ax_34))
   (assert (! (not (= $@distTp5 $@distTp4)) :named ax_35))
   (assert (! (not (= $@distTp5 $inactive_union_owner_type)) :named ax_36))
   (assert (! (not (= $@distTp5 $primitive_emb_type)) :named ax_37))
   (assert (! (not (= $@file^?3Cno?20file?3E $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_38))
   (assert (! (not (= $@file^?3Cno?20file?3E $@loc.p)) :named ax_39))
   (assert (! (not (= $@file^?3Cno?20file?3E $@loc.t)) :named ax_40))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c $@file^?3Cno?20file?3E)) :named ax_41))
   (assert (! (not (= $@loc.assign@12 $@file^?3Cno?20file?3E)) :named ax_42))
   (assert (! (not (= $@loc.assign@12 $@file^?3Cno?20file?3E)) :named ax_43))
   (assert (! (not (= $@loc.assign@12 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_44))
   (assert (! (not (= $@loc.assign@12 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_45))
   (assert (! (not (= $@loc.assign@12 $@loc.n)) :named ax_46))
   (assert (! (not (= $@loc.assign@12 $@loc.p)) :named ax_47))
   (assert (! (not (= $@loc.assign@12 $@loc.prestate@24)) :named ax_48))
   (assert (! (not (= $@loc.assign@12 $@loc.t)) :named ax_49))
   (assert (! (not (= $@loc.assign@12 $@loc.x)) :named ax_50))
   (assert (! (not (= $@loc.assign@12 $@tok$1^134.1)) :named ax_51))
   (assert (! (not (= $@loc.assign@12 $@tok$1^142.3)) :named ax_52))
   (assert (! (not (= $@loc.assign@12 $@tok$1^144.19)) :named ax_53))
   (assert (! (not (= $@loc.assign@12 $@tok$2^0.0)) :named ax_54))
   (assert (! (not (= $@loc.assign@13 $@file^?3Cno?20file?3E)) :named ax_55))
   (assert (! (not (= $@loc.assign@13 $@file^?3Cno?20file?3E)) :named ax_56))
   (assert (! (not (= $@loc.assign@13 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_57))
   (assert (! (not (= $@loc.assign@13 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_58))
   (assert (! (not (= $@loc.assign@13 $@loc.assign@12)) :named ax_59))
   (assert (! (not (= $@loc.assign@13 $@loc.assign@12)) :named ax_60))
   (assert (! (not (= $@loc.assign@13 $@loc.n)) :named ax_61))
   (assert (! (not (= $@loc.assign@13 $@loc.p)) :named ax_62))
   (assert (! (not (= $@loc.assign@13 $@loc.prestate@24)) :named ax_63))
   (assert (! (not (= $@loc.assign@13 $@loc.t)) :named ax_64))
   (assert (! (not (= $@loc.assign@13 $@loc.x)) :named ax_65))
   (assert (! (not (= $@loc.assign@13 $@tok$1^134.1)) :named ax_66))
   (assert (! (not (= $@loc.assign@13 $@tok$1^142.3)) :named ax_67))
   (assert (! (not (= $@loc.assign@13 $@tok$1^144.19)) :named ax_68))
   (assert (! (not (= $@loc.assign@13 $@tok$2^0.0)) :named ax_69))
   (assert (! (not (= $@loc.n $@file^?3Cno?20file?3E)) :named ax_70))
   (assert (! (not (= $@loc.n $@file^?3Cno?20file?3E)) :named ax_71))
   (assert (! (not (= $@loc.n $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_72))
   (assert (! (not (= $@loc.n $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_73))
   (assert (! (not (= $@loc.n $@loc.assign@12)) :named ax_74))
   (assert (! (not (= $@loc.n $@loc.assign@13)) :named ax_75))
   (assert (! (not (= $@loc.n $@loc.p)) :named ax_76))
   (assert (! (not (= $@loc.n $@loc.t)) :named ax_77))
   (assert (! (not (= $@loc.n $@loc.x)) :named ax_78))
   (assert (! (not (= $@loc.n $@tok$1^134.1)) :named ax_79))
   (assert (! (not (= $@loc.n $@tok$1^142.3)) :named ax_80))
   (assert (! (not (= $@loc.n $@tok$2^0.0)) :named ax_81))
   (assert (! (not (= $@loc.owns@26 $@file^?3Cno?20file?3E)) :named ax_82))
   (assert (! (not (= $@loc.owns@26 $@file^?3Cno?20file?3E)) :named ax_83))
   (assert (! (not (= $@loc.owns@26 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_84))
   (assert (! (not (= $@loc.owns@26 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_85))
   (assert (! (not (= $@loc.owns@26 $@loc.assign@12)) :named ax_86))
   (assert (! (not (= $@loc.owns@26 $@loc.assign@12)) :named ax_87))
   (assert (! (not (= $@loc.owns@26 $@loc.assign@13)) :named ax_88))
   (assert (! (not (= $@loc.owns@26 $@loc.assign@13)) :named ax_89))
   (assert (! (not (= $@loc.owns@26 $@loc.n)) :named ax_90))
   (assert (! (not (= $@loc.owns@26 $@loc.n)) :named ax_91))
   (assert (! (not (= $@loc.owns@26 $@loc.p)) :named ax_92))
   (assert (! (not (= $@loc.owns@26 $@loc.prestate@24)) :named ax_93))
   (assert (! (not (= $@loc.owns@26 $@loc.prestate@27)) :named ax_94))
   (assert (! (not (= $@loc.owns@26 $@loc.res_lambda@4@17)) :named ax_95))
   (assert (! (not (= $@loc.owns@26 $@loc.res_lambda@5@18)) :named ax_96))
   (assert (! (not (= $@loc.owns@26 $@loc.staticWrapState@25)) :named ax_97))
   (assert (! (not (= $@loc.owns@26 $@loc.t)) :named ax_98))
   (assert (! (not (= $@loc.owns@26 $@loc.x)) :named ax_99))
   (assert (! (not (= $@loc.owns@26 $@tok$1^134.1)) :named ax_100))
   (assert (! (not (= $@loc.owns@26 $@tok$1^142.3)) :named ax_101))
   (assert (! (not (= $@loc.owns@26 $@tok$1^144.19)) :named ax_102))
   (assert (! (not (= $@loc.owns@26 $@tok$1^146.13)) :named ax_103))
   (assert (! (not (= $@loc.owns@26 $@tok$1^146.24)) :named ax_104))
   (assert (! (not (= $@loc.owns@26 $@tok$1^146.3)) :named ax_105))
   (assert (! (not (= $@loc.owns@26 $@tok$1^148.3)) :named ax_106))
   (assert (! (not (= $@loc.owns@26 $@tok$1^151.14)) :named ax_107))
   (assert (! (not (= $@loc.owns@26 $@tok$1^151.5)) :named ax_108))
   (assert (! (not (= $@loc.owns@26 $@tok$1^152.5)) :named ax_109))
   (assert (! (not (= $@loc.owns@26 $@tok$1^153.15)) :named ax_110))
   (assert (! (not (= $@loc.owns@26 $@tok$1^153.5)) :named ax_111))
   (assert (! (not (= $@loc.owns@26 $@tok$1^157.5)) :named ax_112))
   (assert (! (not (= $@loc.owns@26 $@tok$2^0.0)) :named ax_113))
   (assert (! (not (= $@loc.owns@30 $@file^?3Cno?20file?3E)) :named ax_114))
   (assert (! (not (= $@loc.owns@30 $@file^?3Cno?20file?3E)) :named ax_115))
   (assert (! (not (= $@loc.owns@30 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_116))
   (assert (! (not (= $@loc.owns@30 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_117))
   (assert (! (not (= $@loc.owns@30 $@loc.assign@12)) :named ax_118))
   (assert (! (not (= $@loc.owns@30 $@loc.assign@12)) :named ax_119))
   (assert (! (not (= $@loc.owns@30 $@loc.assign@13)) :named ax_120))
   (assert (! (not (= $@loc.owns@30 $@loc.assign@13)) :named ax_121))
   (assert (! (not (= $@loc.owns@30 $@loc.n)) :named ax_122))
   (assert (! (not (= $@loc.owns@30 $@loc.n)) :named ax_123))
   (assert (! (not (= $@loc.owns@30 $@loc.owns@26)) :named ax_124))
   (assert (! (not (= $@loc.owns@30 $@loc.owns@26)) :named ax_125))
   (assert (! (not (= $@loc.owns@30 $@loc.p)) :named ax_126))
   (assert (! (not (= $@loc.owns@30 $@loc.prestate@24)) :named ax_127))
   (assert (! (not (= $@loc.owns@30 $@loc.prestate@27)) :named ax_128))
   (assert (! (not (= $@loc.owns@30 $@loc.prestate@28)) :named ax_129))
   (assert (! (not (= $@loc.owns@30 $@loc.res_lambda@4@17)) :named ax_130))
   (assert (! (not (= $@loc.owns@30 $@loc.res_lambda@5@18)) :named ax_131))
   (assert (! (not (= $@loc.owns@30 $@loc.res_lambda@6@19)) :named ax_132))
   (assert (! (not (= $@loc.owns@30 $@loc.staticWrapState@25)) :named ax_133))
   (assert (! (not (= $@loc.owns@30 $@loc.t)) :named ax_134))
   (assert (! (not (= $@loc.owns@30 $@loc.x)) :named ax_135))
   (assert (! (not (= $@loc.owns@30 $@tok$1^134.1)) :named ax_136))
   (assert (! (not (= $@loc.owns@30 $@tok$1^142.3)) :named ax_137))
   (assert (! (not (= $@loc.owns@30 $@tok$1^144.19)) :named ax_138))
   (assert (! (not (= $@loc.owns@30 $@tok$1^146.13)) :named ax_139))
   (assert (! (not (= $@loc.owns@30 $@tok$1^146.24)) :named ax_140))
   (assert (! (not (= $@loc.owns@30 $@tok$1^146.3)) :named ax_141))
   (assert (! (not (= $@loc.owns@30 $@tok$1^148.3)) :named ax_142))
   (assert (! (not (= $@loc.owns@30 $@tok$1^151.14)) :named ax_143))
   (assert (! (not (= $@loc.owns@30 $@tok$1^151.5)) :named ax_144))
   (assert (! (not (= $@loc.owns@30 $@tok$1^152.5)) :named ax_145))
   (assert (! (not (= $@loc.owns@30 $@tok$1^153.15)) :named ax_146))
   (assert (! (not (= $@loc.owns@30 $@tok$1^153.5)) :named ax_147))
   (assert (! (not (= $@loc.owns@30 $@tok$1^157.5)) :named ax_148))
   (assert (! (not (= $@loc.owns@30 $@tok$1^158.21)) :named ax_149))
   (assert (! (not (= $@loc.owns@30 $@tok$1^159.21)) :named ax_150))
   (assert (! (not (= $@loc.owns@30 $@tok$1^163.25)) :named ax_151))
   (assert (! (not (= $@loc.owns@30 $@tok$1^163.41)) :named ax_152))
   (assert (! (not (= $@loc.owns@30 $@tok$1^167.3)) :named ax_153))
   (assert (! (not (= $@loc.owns@30 $@tok$1^168.28)) :named ax_154))
   (assert (! (not (= $@loc.owns@30 $@tok$1^179.7)) :named ax_155))
   (assert (! (not (= $@loc.owns@30 $@tok$2^0.0)) :named ax_156))
   (assert (! (not (= $@loc.owns@33 $@file^?3Cno?20file?3E)) :named ax_157))
   (assert (! (not (= $@loc.owns@33 $@file^?3Cno?20file?3E)) :named ax_158))
   (assert (! (not (= $@loc.owns@33 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_159))
   (assert (! (not (= $@loc.owns@33 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_160))
   (assert (! (not (= $@loc.owns@33 $@loc.assign@12)) :named ax_161))
   (assert (! (not (= $@loc.owns@33 $@loc.assign@12)) :named ax_162))
   (assert (! (not (= $@loc.owns@33 $@loc.assign@13)) :named ax_163))
   (assert (! (not (= $@loc.owns@33 $@loc.assign@13)) :named ax_164))
   (assert (! (not (= $@loc.owns@33 $@loc.n)) :named ax_165))
   (assert (! (not (= $@loc.owns@33 $@loc.n)) :named ax_166))
   (assert (! (not (= $@loc.owns@33 $@loc.owns@26)) :named ax_167))
   (assert (! (not (= $@loc.owns@33 $@loc.owns@26)) :named ax_168))
   (assert (! (not (= $@loc.owns@33 $@loc.owns@30)) :named ax_169))
   (assert (! (not (= $@loc.owns@33 $@loc.owns@30)) :named ax_170))
   (assert (! (not (= $@loc.owns@33 $@loc.p)) :named ax_171))
   (assert (! (not (= $@loc.owns@33 $@loc.prestate@24)) :named ax_172))
   (assert (! (not (= $@loc.owns@33 $@loc.prestate@27)) :named ax_173))
   (assert (! (not (= $@loc.owns@33 $@loc.prestate@28)) :named ax_174))
   (assert (! (not (= $@loc.owns@33 $@loc.prestate@29)) :named ax_175))
   (assert (! (not (= $@loc.owns@33 $@loc.prestate@31)) :named ax_176))
   (assert (! (not (= $@loc.owns@33 $@loc.prestate@34)) :named ax_177))
   (assert (! (not (= $@loc.owns@33 $@loc.res_lambda@4@17)) :named ax_178))
   (assert (! (not (= $@loc.owns@33 $@loc.res_lambda@5@18)) :named ax_179))
   (assert (! (not (= $@loc.owns@33 $@loc.res_lambda@6@19)) :named ax_180))
   (assert (! (not (= $@loc.owns@33 $@loc.staticWrapState@25)) :named ax_181))
   (assert (! (not (= $@loc.owns@33 $@loc.staticWrapState@32)) :named ax_182))
   (assert (! (not (= $@loc.owns@33 $@loc.t)) :named ax_183))
   (assert (! (not (= $@loc.owns@33 $@loc.x)) :named ax_184))
   (assert (! (not (= $@loc.owns@33 $@tok$1^134.1)) :named ax_185))
   (assert (! (not (= $@loc.owns@33 $@tok$1^142.3)) :named ax_186))
   (assert (! (not (= $@loc.owns@33 $@tok$1^144.19)) :named ax_187))
   (assert (! (not (= $@loc.owns@33 $@tok$1^146.13)) :named ax_188))
   (assert (! (not (= $@loc.owns@33 $@tok$1^146.24)) :named ax_189))
   (assert (! (not (= $@loc.owns@33 $@tok$1^146.3)) :named ax_190))
   (assert (! (not (= $@loc.owns@33 $@tok$1^148.3)) :named ax_191))
   (assert (! (not (= $@loc.owns@33 $@tok$1^151.14)) :named ax_192))
   (assert (! (not (= $@loc.owns@33 $@tok$1^151.5)) :named ax_193))
   (assert (! (not (= $@loc.owns@33 $@tok$1^152.5)) :named ax_194))
   (assert (! (not (= $@loc.owns@33 $@tok$1^153.15)) :named ax_195))
   (assert (! (not (= $@loc.owns@33 $@tok$1^153.5)) :named ax_196))
   (assert (! (not (= $@loc.owns@33 $@tok$1^157.5)) :named ax_197))
   (assert (! (not (= $@loc.owns@33 $@tok$1^158.21)) :named ax_198))
   (assert (! (not (= $@loc.owns@33 $@tok$1^159.21)) :named ax_199))
   (assert (! (not (= $@loc.owns@33 $@tok$1^163.25)) :named ax_200))
   (assert (! (not (= $@loc.owns@33 $@tok$1^163.41)) :named ax_201))
   (assert (! (not (= $@loc.owns@33 $@tok$1^167.3)) :named ax_202))
   (assert (! (not (= $@loc.owns@33 $@tok$1^168.28)) :named ax_203))
   (assert (! (not (= $@loc.owns@33 $@tok$1^179.7)) :named ax_204))
   (assert (! (not (= $@loc.owns@33 $@tok$1^181.36)) :named ax_205))
   (assert (! (not (= $@loc.owns@33 $@tok$1^181.41)) :named ax_206))
   (assert (! (not (= $@loc.owns@33 $@tok$2^0.0)) :named ax_207))
   (assert (! (not (= $@loc.owns@36 $@file^?3Cno?20file?3E)) :named ax_208))
   (assert (! (not (= $@loc.owns@36 $@file^?3Cno?20file?3E)) :named ax_209))
   (assert (! (not (= $@loc.owns@36 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_210))
   (assert (! (not (= $@loc.owns@36 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_211))
   (assert (! (not (= $@loc.owns@36 $@loc.assign@12)) :named ax_212))
   (assert (! (not (= $@loc.owns@36 $@loc.assign@12)) :named ax_213))
   (assert (! (not (= $@loc.owns@36 $@loc.assign@13)) :named ax_214))
   (assert (! (not (= $@loc.owns@36 $@loc.assign@13)) :named ax_215))
   (assert (! (not (= $@loc.owns@36 $@loc.n)) :named ax_216))
   (assert (! (not (= $@loc.owns@36 $@loc.n)) :named ax_217))
   (assert (! (not (= $@loc.owns@36 $@loc.owns@26)) :named ax_218))
   (assert (! (not (= $@loc.owns@36 $@loc.owns@26)) :named ax_219))
   (assert (! (not (= $@loc.owns@36 $@loc.owns@30)) :named ax_220))
   (assert (! (not (= $@loc.owns@36 $@loc.owns@30)) :named ax_221))
   (assert (! (not (= $@loc.owns@36 $@loc.owns@33)) :named ax_222))
   (assert (! (not (= $@loc.owns@36 $@loc.owns@33)) :named ax_223))
   (assert (! (not (= $@loc.owns@36 $@loc.p)) :named ax_224))
   (assert (! (not (= $@loc.owns@36 $@loc.prestate@24)) :named ax_225))
   (assert (! (not (= $@loc.owns@36 $@loc.prestate@27)) :named ax_226))
   (assert (! (not (= $@loc.owns@36 $@loc.prestate@28)) :named ax_227))
   (assert (! (not (= $@loc.owns@36 $@loc.prestate@29)) :named ax_228))
   (assert (! (not (= $@loc.owns@36 $@loc.prestate@31)) :named ax_229))
   (assert (! (not (= $@loc.owns@36 $@loc.prestate@34)) :named ax_230))
   (assert (! (not (= $@loc.owns@36 $@loc.res_lambda@4@17)) :named ax_231))
   (assert (! (not (= $@loc.owns@36 $@loc.res_lambda@5@18)) :named ax_232))
   (assert (! (not (= $@loc.owns@36 $@loc.res_lambda@6@19)) :named ax_233))
   (assert (! (not (= $@loc.owns@36 $@loc.staticWrapState@25)) :named ax_234))
   (assert (! (not (= $@loc.owns@36 $@loc.staticWrapState@32)) :named ax_235))
   (assert (! (not (= $@loc.owns@36 $@loc.t)) :named ax_236))
   (assert (! (not (= $@loc.owns@36 $@loc.x)) :named ax_237))
   (assert (! (not (= $@loc.owns@36 $@tok$1^134.1)) :named ax_238))
   (assert (! (not (= $@loc.owns@36 $@tok$1^142.3)) :named ax_239))
   (assert (! (not (= $@loc.owns@36 $@tok$1^144.19)) :named ax_240))
   (assert (! (not (= $@loc.owns@36 $@tok$1^146.13)) :named ax_241))
   (assert (! (not (= $@loc.owns@36 $@tok$1^146.24)) :named ax_242))
   (assert (! (not (= $@loc.owns@36 $@tok$1^146.3)) :named ax_243))
   (assert (! (not (= $@loc.owns@36 $@tok$1^148.3)) :named ax_244))
   (assert (! (not (= $@loc.owns@36 $@tok$1^151.14)) :named ax_245))
   (assert (! (not (= $@loc.owns@36 $@tok$1^151.5)) :named ax_246))
   (assert (! (not (= $@loc.owns@36 $@tok$1^152.5)) :named ax_247))
   (assert (! (not (= $@loc.owns@36 $@tok$1^153.15)) :named ax_248))
   (assert (! (not (= $@loc.owns@36 $@tok$1^153.5)) :named ax_249))
   (assert (! (not (= $@loc.owns@36 $@tok$1^157.5)) :named ax_250))
   (assert (! (not (= $@loc.owns@36 $@tok$1^158.21)) :named ax_251))
   (assert (! (not (= $@loc.owns@36 $@tok$1^159.21)) :named ax_252))
   (assert (! (not (= $@loc.owns@36 $@tok$1^163.25)) :named ax_253))
   (assert (! (not (= $@loc.owns@36 $@tok$1^163.41)) :named ax_254))
   (assert (! (not (= $@loc.owns@36 $@tok$1^167.3)) :named ax_255))
   (assert (! (not (= $@loc.owns@36 $@tok$1^168.28)) :named ax_256))
   (assert (! (not (= $@loc.owns@36 $@tok$1^179.7)) :named ax_257))
   (assert (! (not (= $@loc.owns@36 $@tok$1^181.36)) :named ax_258))
   (assert (! (not (= $@loc.owns@36 $@tok$1^181.41)) :named ax_259))
   (assert (! (not (= $@loc.owns@36 $@tok$1^185.7)) :named ax_260))
   (assert (! (not (= $@loc.owns@36 $@tok$2^0.0)) :named ax_261))
   (assert (! (not (= $@loc.owns@39 $@file^?3Cno?20file?3E)) :named ax_262))
   (assert (! (not (= $@loc.owns@39 $@file^?3Cno?20file?3E)) :named ax_263))
   (assert (! (not (= $@loc.owns@39 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_264))
   (assert (! (not (= $@loc.owns@39 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_265))
   (assert (! (not (= $@loc.owns@39 $@loc.assign@12)) :named ax_266))
   (assert (! (not (= $@loc.owns@39 $@loc.assign@12)) :named ax_267))
   (assert (! (not (= $@loc.owns@39 $@loc.assign@13)) :named ax_268))
   (assert (! (not (= $@loc.owns@39 $@loc.assign@13)) :named ax_269))
   (assert (! (not (= $@loc.owns@39 $@loc.n)) :named ax_270))
   (assert (! (not (= $@loc.owns@39 $@loc.n)) :named ax_271))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@26)) :named ax_272))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@26)) :named ax_273))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@30)) :named ax_274))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@30)) :named ax_275))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@33)) :named ax_276))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@33)) :named ax_277))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@36)) :named ax_278))
   (assert (! (not (= $@loc.owns@39 $@loc.owns@36)) :named ax_279))
   (assert (! (not (= $@loc.owns@39 $@loc.p)) :named ax_280))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@24)) :named ax_281))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@27)) :named ax_282))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@28)) :named ax_283))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@29)) :named ax_284))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@31)) :named ax_285))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@34)) :named ax_286))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@35)) :named ax_287))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@37)) :named ax_288))
   (assert (! (not (= $@loc.owns@39 $@loc.prestate@40)) :named ax_289))
   (assert (! (not (= $@loc.owns@39 $@loc.res_lambda@4@17)) :named ax_290))
   (assert (! (not (= $@loc.owns@39 $@loc.res_lambda@5@18)) :named ax_291))
   (assert (! (not (= $@loc.owns@39 $@loc.res_lambda@6@19)) :named ax_292))
   (assert (! (not (= $@loc.owns@39 $@loc.staticWrapState@25)) :named ax_293))
   (assert (! (not (= $@loc.owns@39 $@loc.staticWrapState@32)) :named ax_294))
   (assert (! (not (= $@loc.owns@39 $@loc.staticWrapState@38)) :named ax_295))
   (assert (! (not (= $@loc.owns@39 $@loc.t)) :named ax_296))
   (assert (! (not (= $@loc.owns@39 $@loc.x)) :named ax_297))
   (assert (! (not (= $@loc.owns@39 $@tok$1^134.1)) :named ax_298))
   (assert (! (not (= $@loc.owns@39 $@tok$1^142.3)) :named ax_299))
   (assert (! (not (= $@loc.owns@39 $@tok$1^144.19)) :named ax_300))
   (assert (! (not (= $@loc.owns@39 $@tok$1^146.13)) :named ax_301))
   (assert (! (not (= $@loc.owns@39 $@tok$1^146.24)) :named ax_302))
   (assert (! (not (= $@loc.owns@39 $@tok$1^146.3)) :named ax_303))
   (assert (! (not (= $@loc.owns@39 $@tok$1^148.3)) :named ax_304))
   (assert (! (not (= $@loc.owns@39 $@tok$1^151.14)) :named ax_305))
   (assert (! (not (= $@loc.owns@39 $@tok$1^151.5)) :named ax_306))
   (assert (! (not (= $@loc.owns@39 $@tok$1^152.5)) :named ax_307))
   (assert (! (not (= $@loc.owns@39 $@tok$1^153.15)) :named ax_308))
   (assert (! (not (= $@loc.owns@39 $@tok$1^153.5)) :named ax_309))
   (assert (! (not (= $@loc.owns@39 $@tok$1^157.5)) :named ax_310))
   (assert (! (not (= $@loc.owns@39 $@tok$1^158.21)) :named ax_311))
   (assert (! (not (= $@loc.owns@39 $@tok$1^159.21)) :named ax_312))
   (assert (! (not (= $@loc.owns@39 $@tok$1^163.25)) :named ax_313))
   (assert (! (not (= $@loc.owns@39 $@tok$1^163.41)) :named ax_314))
   (assert (! (not (= $@loc.owns@39 $@tok$1^167.3)) :named ax_315))
   (assert (! (not (= $@loc.owns@39 $@tok$1^168.28)) :named ax_316))
   (assert (! (not (= $@loc.owns@39 $@tok$1^179.7)) :named ax_317))
   (assert (! (not (= $@loc.owns@39 $@tok$1^181.36)) :named ax_318))
   (assert (! (not (= $@loc.owns@39 $@tok$1^181.41)) :named ax_319))
   (assert (! (not (= $@loc.owns@39 $@tok$1^185.7)) :named ax_320))
   (assert (! (not (= $@loc.owns@39 $@tok$1^187.36)) :named ax_321))
   (assert (! (not (= $@loc.owns@39 $@tok$1^187.41)) :named ax_322))
   (assert (! (not (= $@loc.owns@39 $@tok$2^0.0)) :named ax_323))
   (assert (! (not (= $@loc.owns@42 $@file^?3Cno?20file?3E)) :named ax_324))
   (assert (! (not (= $@loc.owns@42 $@file^?3Cno?20file?3E)) :named ax_325))
   (assert (! (not (= $@loc.owns@42 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_326))
   (assert (! (not (= $@loc.owns@42 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_327))
   (assert (! (not (= $@loc.owns@42 $@loc.assign@12)) :named ax_328))
   (assert (! (not (= $@loc.owns@42 $@loc.assign@12)) :named ax_329))
   (assert (! (not (= $@loc.owns@42 $@loc.assign@13)) :named ax_330))
   (assert (! (not (= $@loc.owns@42 $@loc.assign@13)) :named ax_331))
   (assert (! (not (= $@loc.owns@42 $@loc.n)) :named ax_332))
   (assert (! (not (= $@loc.owns@42 $@loc.n)) :named ax_333))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@26)) :named ax_334))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@26)) :named ax_335))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@30)) :named ax_336))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@30)) :named ax_337))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@33)) :named ax_338))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@33)) :named ax_339))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@36)) :named ax_340))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@36)) :named ax_341))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@39)) :named ax_342))
   (assert (! (not (= $@loc.owns@42 $@loc.owns@39)) :named ax_343))
   (assert (! (not (= $@loc.owns@42 $@loc.p)) :named ax_344))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@24)) :named ax_345))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@27)) :named ax_346))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@28)) :named ax_347))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@29)) :named ax_348))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@31)) :named ax_349))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@34)) :named ax_350))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@35)) :named ax_351))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@37)) :named ax_352))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@40)) :named ax_353))
   (assert (! (not (= $@loc.owns@42 $@loc.prestate@43)) :named ax_354))
   (assert (! (not (= $@loc.owns@42 $@loc.res_lambda@4@17)) :named ax_355))
   (assert (! (not (= $@loc.owns@42 $@loc.res_lambda@5@18)) :named ax_356))
   (assert (! (not (= $@loc.owns@42 $@loc.res_lambda@6@19)) :named ax_357))
   (assert (! (not (= $@loc.owns@42 $@loc.res_lambda@7@20)) :named ax_358))
   (assert (! (not (= $@loc.owns@42 $@loc.staticWrapState@25)) :named ax_359))
   (assert (! (not (= $@loc.owns@42 $@loc.staticWrapState@32)) :named ax_360))
   (assert (! (not (= $@loc.owns@42 $@loc.staticWrapState@38)) :named ax_361))
   (assert (! (not (= $@loc.owns@42 $@loc.staticWrapState@41)) :named ax_362))
   (assert (! (not (= $@loc.owns@42 $@loc.t)) :named ax_363))
   (assert (! (not (= $@loc.owns@42 $@loc.x)) :named ax_364))
   (assert (! (not (= $@loc.owns@42 $@tok$1^134.1)) :named ax_365))
   (assert (! (not (= $@loc.owns@42 $@tok$1^142.3)) :named ax_366))
   (assert (! (not (= $@loc.owns@42 $@tok$1^144.19)) :named ax_367))
   (assert (! (not (= $@loc.owns@42 $@tok$1^146.13)) :named ax_368))
   (assert (! (not (= $@loc.owns@42 $@tok$1^146.24)) :named ax_369))
   (assert (! (not (= $@loc.owns@42 $@tok$1^146.3)) :named ax_370))
   (assert (! (not (= $@loc.owns@42 $@tok$1^148.3)) :named ax_371))
   (assert (! (not (= $@loc.owns@42 $@tok$1^151.14)) :named ax_372))
   (assert (! (not (= $@loc.owns@42 $@tok$1^151.5)) :named ax_373))
   (assert (! (not (= $@loc.owns@42 $@tok$1^152.5)) :named ax_374))
   (assert (! (not (= $@loc.owns@42 $@tok$1^153.15)) :named ax_375))
   (assert (! (not (= $@loc.owns@42 $@tok$1^153.5)) :named ax_376))
   (assert (! (not (= $@loc.owns@42 $@tok$1^157.5)) :named ax_377))
   (assert (! (not (= $@loc.owns@42 $@tok$1^158.21)) :named ax_378))
   (assert (! (not (= $@loc.owns@42 $@tok$1^159.21)) :named ax_379))
   (assert (! (not (= $@loc.owns@42 $@tok$1^163.25)) :named ax_380))
   (assert (! (not (= $@loc.owns@42 $@tok$1^163.41)) :named ax_381))
   (assert (! (not (= $@loc.owns@42 $@tok$1^167.3)) :named ax_382))
   (assert (! (not (= $@loc.owns@42 $@tok$1^168.28)) :named ax_383))
   (assert (! (not (= $@loc.owns@42 $@tok$1^179.7)) :named ax_384))
   (assert (! (not (= $@loc.owns@42 $@tok$1^181.36)) :named ax_385))
   (assert (! (not (= $@loc.owns@42 $@tok$1^181.41)) :named ax_386))
   (assert (! (not (= $@loc.owns@42 $@tok$1^185.7)) :named ax_387))
   (assert (! (not (= $@loc.owns@42 $@tok$1^187.36)) :named ax_388))
   (assert (! (not (= $@loc.owns@42 $@tok$1^187.41)) :named ax_389))
   (assert (! (not (= $@loc.owns@42 $@tok$1^194.27)) :named ax_390))
   (assert (! (not (= $@loc.owns@42 $@tok$1^194.37)) :named ax_391))
   (assert (! (not (= $@loc.owns@42 $@tok$1^195.5)) :named ax_392))
   (assert (! (not (= $@loc.owns@42 $@tok$1^198.3)) :named ax_393))
   (assert (! (not (= $@loc.owns@42 $@tok$2^0.0)) :named ax_394))
   (assert (! (not (= $@loc.p $@file^?3Cno?20file?3E)) :named ax_395))
   (assert (! (not (= $@loc.p $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_396))
   (assert (! (not (= $@loc.p $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_397))
   (assert (! (not (= $@loc.p $@loc.assign@12)) :named ax_398))
   (assert (! (not (= $@loc.p $@loc.assign@13)) :named ax_399))
   (assert (! (not (= $@loc.p $@loc.n)) :named ax_400))
   (assert (! (not (= $@loc.p $@loc.owns@26)) :named ax_401))
   (assert (! (not (= $@loc.p $@loc.owns@30)) :named ax_402))
   (assert (! (not (= $@loc.p $@loc.owns@33)) :named ax_403))
   (assert (! (not (= $@loc.p $@loc.owns@36)) :named ax_404))
   (assert (! (not (= $@loc.p $@loc.owns@39)) :named ax_405))
   (assert (! (not (= $@loc.p $@loc.owns@42)) :named ax_406))
   (assert (! (not (= $@loc.prestate@24 $@file^?3Cno?20file?3E)) :named ax_407))
   (assert (! (not (= $@loc.prestate@24 $@file^?3Cno?20file?3E)) :named ax_408))
   (assert (! (not (= $@loc.prestate@24 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_409))
   (assert (! (not (= $@loc.prestate@24 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_410))
   (assert (! (not (= $@loc.prestate@24 $@loc.assign@12)) :named ax_411))
   (assert (! (not (= $@loc.prestate@24 $@loc.assign@13)) :named ax_412))
   (assert (! (not (= $@loc.prestate@24 $@loc.n)) :named ax_413))
   (assert (! (not (= $@loc.prestate@24 $@loc.n)) :named ax_414))
   (assert (! (not (= $@loc.prestate@24 $@loc.owns@26)) :named ax_415))
   (assert (! (not (= $@loc.prestate@24 $@loc.owns@30)) :named ax_416))
   (assert (! (not (= $@loc.prestate@24 $@loc.owns@33)) :named ax_417))
   (assert (! (not (= $@loc.prestate@24 $@loc.owns@36)) :named ax_418))
   (assert (! (not (= $@loc.prestate@24 $@loc.owns@39)) :named ax_419))
   (assert (! (not (= $@loc.prestate@24 $@loc.owns@42)) :named ax_420))
   (assert (! (not (= $@loc.prestate@24 $@loc.p)) :named ax_421))
   (assert (! (not (= $@loc.prestate@24 $@loc.p)) :named ax_422))
   (assert (! (not (= $@loc.prestate@24 $@loc.t)) :named ax_423))
   (assert (! (not (= $@loc.prestate@24 $@loc.x)) :named ax_424))
   (assert (! (not (= $@loc.prestate@24 $@tok$1^134.1)) :named ax_425))
   (assert (! (not (= $@loc.prestate@24 $@tok$1^142.3)) :named ax_426))
   (assert (! (not (= $@loc.prestate@24 $@tok$2^0.0)) :named ax_427))
   (assert (! (not (= $@loc.prestate@27 $@file^?3Cno?20file?3E)) :named ax_428))
   (assert (! (not (= $@loc.prestate@27 $@file^?3Cno?20file?3E)) :named ax_429))
   (assert (! (not (= $@loc.prestate@27 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_430))
   (assert (! (not (= $@loc.prestate@27 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_431))
   (assert (! (not (= $@loc.prestate@27 $@loc.assign@12)) :named ax_432))
   (assert (! (not (= $@loc.prestate@27 $@loc.assign@12)) :named ax_433))
   (assert (! (not (= $@loc.prestate@27 $@loc.assign@13)) :named ax_434))
   (assert (! (not (= $@loc.prestate@27 $@loc.assign@13)) :named ax_435))
   (assert (! (not (= $@loc.prestate@27 $@loc.n)) :named ax_436))
   (assert (! (not (= $@loc.prestate@27 $@loc.n)) :named ax_437))
   (assert (! (not (= $@loc.prestate@27 $@loc.owns@26)) :named ax_438))
   (assert (! (not (= $@loc.prestate@27 $@loc.owns@30)) :named ax_439))
   (assert (! (not (= $@loc.prestate@27 $@loc.owns@33)) :named ax_440))
   (assert (! (not (= $@loc.prestate@27 $@loc.owns@36)) :named ax_441))
   (assert (! (not (= $@loc.prestate@27 $@loc.owns@39)) :named ax_442))
   (assert (! (not (= $@loc.prestate@27 $@loc.owns@42)) :named ax_443))
   (assert (! (not (= $@loc.prestate@27 $@loc.p)) :named ax_444))
   (assert (! (not (= $@loc.prestate@27 $@loc.p)) :named ax_445))
   (assert (! (not (= $@loc.prestate@27 $@loc.prestate@24)) :named ax_446))
   (assert (! (not (= $@loc.prestate@27 $@loc.prestate@24)) :named ax_447))
   (assert (! (not (= $@loc.prestate@27 $@loc.res_lambda@4@17)) :named ax_448))
   (assert (! (not (= $@loc.prestate@27 $@loc.res_lambda@5@18)) :named ax_449))
   (assert (! (not (= $@loc.prestate@27 $@loc.t)) :named ax_450))
   (assert (! (not (= $@loc.prestate@27 $@loc.x)) :named ax_451))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^134.1)) :named ax_452))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^142.3)) :named ax_453))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^144.19)) :named ax_454))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^146.13)) :named ax_455))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^146.24)) :named ax_456))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^146.3)) :named ax_457))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^148.3)) :named ax_458))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^151.14)) :named ax_459))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^151.5)) :named ax_460))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^152.5)) :named ax_461))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^153.15)) :named ax_462))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^153.5)) :named ax_463))
   (assert (! (not (= $@loc.prestate@27 $@tok$1^157.5)) :named ax_464))
   (assert (! (not (= $@loc.prestate@27 $@tok$2^0.0)) :named ax_465))
   (assert (! (not (= $@loc.prestate@28 $@file^?3Cno?20file?3E)) :named ax_466))
   (assert (! (not (= $@loc.prestate@28 $@file^?3Cno?20file?3E)) :named ax_467))
   (assert (! (not (= $@loc.prestate@28 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_468))
   (assert (! (not (= $@loc.prestate@28 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_469))
   (assert (! (not (= $@loc.prestate@28 $@loc.assign@12)) :named ax_470))
   (assert (! (not (= $@loc.prestate@28 $@loc.assign@12)) :named ax_471))
   (assert (! (not (= $@loc.prestate@28 $@loc.assign@13)) :named ax_472))
   (assert (! (not (= $@loc.prestate@28 $@loc.assign@13)) :named ax_473))
   (assert (! (not (= $@loc.prestate@28 $@loc.n)) :named ax_474))
   (assert (! (not (= $@loc.prestate@28 $@loc.n)) :named ax_475))
   (assert (! (not (= $@loc.prestate@28 $@loc.owns@26)) :named ax_476))
   (assert (! (not (= $@loc.prestate@28 $@loc.owns@26)) :named ax_477))
   (assert (! (not (= $@loc.prestate@28 $@loc.owns@30)) :named ax_478))
   (assert (! (not (= $@loc.prestate@28 $@loc.owns@33)) :named ax_479))
   (assert (! (not (= $@loc.prestate@28 $@loc.owns@36)) :named ax_480))
   (assert (! (not (= $@loc.prestate@28 $@loc.owns@39)) :named ax_481))
   (assert (! (not (= $@loc.prestate@28 $@loc.owns@42)) :named ax_482))
   (assert (! (not (= $@loc.prestate@28 $@loc.p)) :named ax_483))
   (assert (! (not (= $@loc.prestate@28 $@loc.p)) :named ax_484))
   (assert (! (not (= $@loc.prestate@28 $@loc.prestate@24)) :named ax_485))
   (assert (! (not (= $@loc.prestate@28 $@loc.prestate@24)) :named ax_486))
   (assert (! (not (= $@loc.prestate@28 $@loc.prestate@27)) :named ax_487))
   (assert (! (not (= $@loc.prestate@28 $@loc.prestate@27)) :named ax_488))
   (assert (! (not (= $@loc.prestate@28 $@loc.res_lambda@4@17)) :named ax_489))
   (assert (! (not (= $@loc.prestate@28 $@loc.res_lambda@5@18)) :named ax_490))
   (assert (! (not (= $@loc.prestate@28 $@loc.staticWrapState@25)) :named ax_491))
   (assert (! (not (= $@loc.prestate@28 $@loc.t)) :named ax_492))
   (assert (! (not (= $@loc.prestate@28 $@loc.x)) :named ax_493))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^134.1)) :named ax_494))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^142.3)) :named ax_495))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^144.19)) :named ax_496))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^146.13)) :named ax_497))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^146.24)) :named ax_498))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^146.3)) :named ax_499))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^148.3)) :named ax_500))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^151.14)) :named ax_501))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^151.5)) :named ax_502))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^152.5)) :named ax_503))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^153.15)) :named ax_504))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^153.5)) :named ax_505))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^157.5)) :named ax_506))
   (assert (! (not (= $@loc.prestate@28 $@tok$1^158.21)) :named ax_507))
   (assert (! (not (= $@loc.prestate@28 $@tok$2^0.0)) :named ax_508))
   (assert (! (not (= $@loc.prestate@29 $@file^?3Cno?20file?3E)) :named ax_509))
   (assert (! (not (= $@loc.prestate@29 $@file^?3Cno?20file?3E)) :named ax_510))
   (assert (! (not (= $@loc.prestate@29 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_511))
   (assert (! (not (= $@loc.prestate@29 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_512))
   (assert (! (not (= $@loc.prestate@29 $@loc.assign@12)) :named ax_513))
   (assert (! (not (= $@loc.prestate@29 $@loc.assign@12)) :named ax_514))
   (assert (! (not (= $@loc.prestate@29 $@loc.assign@13)) :named ax_515))
   (assert (! (not (= $@loc.prestate@29 $@loc.assign@13)) :named ax_516))
   (assert (! (not (= $@loc.prestate@29 $@loc.n)) :named ax_517))
   (assert (! (not (= $@loc.prestate@29 $@loc.n)) :named ax_518))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@26)) :named ax_519))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@26)) :named ax_520))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@30)) :named ax_521))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@30)) :named ax_522))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@33)) :named ax_523))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@36)) :named ax_524))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@39)) :named ax_525))
   (assert (! (not (= $@loc.prestate@29 $@loc.owns@42)) :named ax_526))
   (assert (! (not (= $@loc.prestate@29 $@loc.p)) :named ax_527))
   (assert (! (not (= $@loc.prestate@29 $@loc.p)) :named ax_528))
   (assert (! (not (= $@loc.prestate@29 $@loc.prestate@24)) :named ax_529))
   (assert (! (not (= $@loc.prestate@29 $@loc.prestate@24)) :named ax_530))
   (assert (! (not (= $@loc.prestate@29 $@loc.prestate@27)) :named ax_531))
   (assert (! (not (= $@loc.prestate@29 $@loc.prestate@27)) :named ax_532))
   (assert (! (not (= $@loc.prestate@29 $@loc.prestate@28)) :named ax_533))
   (assert (! (not (= $@loc.prestate@29 $@loc.prestate@28)) :named ax_534))
   (assert (! (not (= $@loc.prestate@29 $@loc.res_lambda@4@17)) :named ax_535))
   (assert (! (not (= $@loc.prestate@29 $@loc.res_lambda@5@18)) :named ax_536))
   (assert (! (not (= $@loc.prestate@29 $@loc.res_lambda@6@19)) :named ax_537))
   (assert (! (not (= $@loc.prestate@29 $@loc.staticWrapState@25)) :named ax_538))
   (assert (! (not (= $@loc.prestate@29 $@loc.t)) :named ax_539))
   (assert (! (not (= $@loc.prestate@29 $@loc.x)) :named ax_540))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^134.1)) :named ax_541))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^142.3)) :named ax_542))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^144.19)) :named ax_543))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^146.13)) :named ax_544))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^146.24)) :named ax_545))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^146.3)) :named ax_546))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^148.3)) :named ax_547))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^151.14)) :named ax_548))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^151.5)) :named ax_549))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^152.5)) :named ax_550))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^153.15)) :named ax_551))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^153.5)) :named ax_552))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^157.5)) :named ax_553))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^158.21)) :named ax_554))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^159.21)) :named ax_555))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^163.25)) :named ax_556))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^163.41)) :named ax_557))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^167.3)) :named ax_558))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^168.28)) :named ax_559))
   (assert (! (not (= $@loc.prestate@29 $@tok$1^179.7)) :named ax_560))
   (assert (! (not (= $@loc.prestate@29 $@tok$2^0.0)) :named ax_561))
   (assert (! (not (= $@loc.prestate@31 $@file^?3Cno?20file?3E)) :named ax_562))
   (assert (! (not (= $@loc.prestate@31 $@file^?3Cno?20file?3E)) :named ax_563))
   (assert (! (not (= $@loc.prestate@31 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_564))
   (assert (! (not (= $@loc.prestate@31 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_565))
   (assert (! (not (= $@loc.prestate@31 $@loc.assign@12)) :named ax_566))
   (assert (! (not (= $@loc.prestate@31 $@loc.assign@12)) :named ax_567))
   (assert (! (not (= $@loc.prestate@31 $@loc.assign@13)) :named ax_568))
   (assert (! (not (= $@loc.prestate@31 $@loc.assign@13)) :named ax_569))
   (assert (! (not (= $@loc.prestate@31 $@loc.n)) :named ax_570))
   (assert (! (not (= $@loc.prestate@31 $@loc.n)) :named ax_571))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@26)) :named ax_572))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@26)) :named ax_573))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@30)) :named ax_574))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@30)) :named ax_575))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@33)) :named ax_576))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@36)) :named ax_577))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@39)) :named ax_578))
   (assert (! (not (= $@loc.prestate@31 $@loc.owns@42)) :named ax_579))
   (assert (! (not (= $@loc.prestate@31 $@loc.p)) :named ax_580))
   (assert (! (not (= $@loc.prestate@31 $@loc.p)) :named ax_581))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@24)) :named ax_582))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@24)) :named ax_583))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@27)) :named ax_584))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@27)) :named ax_585))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@28)) :named ax_586))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@28)) :named ax_587))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@29)) :named ax_588))
   (assert (! (not (= $@loc.prestate@31 $@loc.prestate@29)) :named ax_589))
   (assert (! (not (= $@loc.prestate@31 $@loc.res_lambda@4@17)) :named ax_590))
   (assert (! (not (= $@loc.prestate@31 $@loc.res_lambda@5@18)) :named ax_591))
   (assert (! (not (= $@loc.prestate@31 $@loc.res_lambda@6@19)) :named ax_592))
   (assert (! (not (= $@loc.prestate@31 $@loc.staticWrapState@25)) :named ax_593))
   (assert (! (not (= $@loc.prestate@31 $@loc.t)) :named ax_594))
   (assert (! (not (= $@loc.prestate@31 $@loc.x)) :named ax_595))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^134.1)) :named ax_596))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^142.3)) :named ax_597))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^144.19)) :named ax_598))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^146.13)) :named ax_599))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^146.24)) :named ax_600))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^146.3)) :named ax_601))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^148.3)) :named ax_602))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^151.14)) :named ax_603))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^151.5)) :named ax_604))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^152.5)) :named ax_605))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^153.15)) :named ax_606))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^153.5)) :named ax_607))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^157.5)) :named ax_608))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^158.21)) :named ax_609))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^159.21)) :named ax_610))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^163.25)) :named ax_611))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^163.41)) :named ax_612))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^167.3)) :named ax_613))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^168.28)) :named ax_614))
   (assert (! (not (= $@loc.prestate@31 $@tok$1^179.7)) :named ax_615))
   (assert (! (not (= $@loc.prestate@31 $@tok$2^0.0)) :named ax_616))
   (assert (! (not (= $@loc.prestate@34 $@file^?3Cno?20file?3E)) :named ax_617))
   (assert (! (not (= $@loc.prestate@34 $@file^?3Cno?20file?3E)) :named ax_618))
   (assert (! (not (= $@loc.prestate@34 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_619))
   (assert (! (not (= $@loc.prestate@34 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_620))
   (assert (! (not (= $@loc.prestate@34 $@loc.assign@12)) :named ax_621))
   (assert (! (not (= $@loc.prestate@34 $@loc.assign@12)) :named ax_622))
   (assert (! (not (= $@loc.prestate@34 $@loc.assign@13)) :named ax_623))
   (assert (! (not (= $@loc.prestate@34 $@loc.assign@13)) :named ax_624))
   (assert (! (not (= $@loc.prestate@34 $@loc.n)) :named ax_625))
   (assert (! (not (= $@loc.prestate@34 $@loc.n)) :named ax_626))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@26)) :named ax_627))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@26)) :named ax_628))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@30)) :named ax_629))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@30)) :named ax_630))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@33)) :named ax_631))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@36)) :named ax_632))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@39)) :named ax_633))
   (assert (! (not (= $@loc.prestate@34 $@loc.owns@42)) :named ax_634))
   (assert (! (not (= $@loc.prestate@34 $@loc.p)) :named ax_635))
   (assert (! (not (= $@loc.prestate@34 $@loc.p)) :named ax_636))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@24)) :named ax_637))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@24)) :named ax_638))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@27)) :named ax_639))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@27)) :named ax_640))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@28)) :named ax_641))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@28)) :named ax_642))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@29)) :named ax_643))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@29)) :named ax_644))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@31)) :named ax_645))
   (assert (! (not (= $@loc.prestate@34 $@loc.prestate@31)) :named ax_646))
   (assert (! (not (= $@loc.prestate@34 $@loc.res_lambda@4@17)) :named ax_647))
   (assert (! (not (= $@loc.prestate@34 $@loc.res_lambda@5@18)) :named ax_648))
   (assert (! (not (= $@loc.prestate@34 $@loc.res_lambda@6@19)) :named ax_649))
   (assert (! (not (= $@loc.prestate@34 $@loc.staticWrapState@25)) :named ax_650))
   (assert (! (not (= $@loc.prestate@34 $@loc.t)) :named ax_651))
   (assert (! (not (= $@loc.prestate@34 $@loc.x)) :named ax_652))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^134.1)) :named ax_653))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^142.3)) :named ax_654))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^144.19)) :named ax_655))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^146.13)) :named ax_656))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^146.24)) :named ax_657))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^146.3)) :named ax_658))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^148.3)) :named ax_659))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^151.14)) :named ax_660))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^151.5)) :named ax_661))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^152.5)) :named ax_662))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^153.15)) :named ax_663))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^153.5)) :named ax_664))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^157.5)) :named ax_665))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^158.21)) :named ax_666))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^159.21)) :named ax_667))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^163.25)) :named ax_668))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^163.41)) :named ax_669))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^167.3)) :named ax_670))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^168.28)) :named ax_671))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^179.7)) :named ax_672))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^181.36)) :named ax_673))
   (assert (! (not (= $@loc.prestate@34 $@tok$1^181.41)) :named ax_674))
   (assert (! (not (= $@loc.prestate@34 $@tok$2^0.0)) :named ax_675))
   (assert (! (not (= $@loc.prestate@35 $@file^?3Cno?20file?3E)) :named ax_676))
   (assert (! (not (= $@loc.prestate@35 $@file^?3Cno?20file?3E)) :named ax_677))
   (assert (! (not (= $@loc.prestate@35 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_678))
   (assert (! (not (= $@loc.prestate@35 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_679))
   (assert (! (not (= $@loc.prestate@35 $@loc.assign@12)) :named ax_680))
   (assert (! (not (= $@loc.prestate@35 $@loc.assign@12)) :named ax_681))
   (assert (! (not (= $@loc.prestate@35 $@loc.assign@13)) :named ax_682))
   (assert (! (not (= $@loc.prestate@35 $@loc.assign@13)) :named ax_683))
   (assert (! (not (= $@loc.prestate@35 $@loc.n)) :named ax_684))
   (assert (! (not (= $@loc.prestate@35 $@loc.n)) :named ax_685))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@26)) :named ax_686))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@26)) :named ax_687))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@30)) :named ax_688))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@30)) :named ax_689))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@33)) :named ax_690))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@33)) :named ax_691))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@36)) :named ax_692))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@36)) :named ax_693))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@39)) :named ax_694))
   (assert (! (not (= $@loc.prestate@35 $@loc.owns@42)) :named ax_695))
   (assert (! (not (= $@loc.prestate@35 $@loc.p)) :named ax_696))
   (assert (! (not (= $@loc.prestate@35 $@loc.p)) :named ax_697))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@24)) :named ax_698))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@24)) :named ax_699))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@27)) :named ax_700))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@27)) :named ax_701))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@28)) :named ax_702))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@28)) :named ax_703))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@29)) :named ax_704))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@29)) :named ax_705))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@31)) :named ax_706))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@31)) :named ax_707))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@34)) :named ax_708))
   (assert (! (not (= $@loc.prestate@35 $@loc.prestate@34)) :named ax_709))
   (assert (! (not (= $@loc.prestate@35 $@loc.res_lambda@4@17)) :named ax_710))
   (assert (! (not (= $@loc.prestate@35 $@loc.res_lambda@5@18)) :named ax_711))
   (assert (! (not (= $@loc.prestate@35 $@loc.res_lambda@6@19)) :named ax_712))
   (assert (! (not (= $@loc.prestate@35 $@loc.staticWrapState@25)) :named ax_713))
   (assert (! (not (= $@loc.prestate@35 $@loc.staticWrapState@32)) :named ax_714))
   (assert (! (not (= $@loc.prestate@35 $@loc.t)) :named ax_715))
   (assert (! (not (= $@loc.prestate@35 $@loc.x)) :named ax_716))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^134.1)) :named ax_717))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^142.3)) :named ax_718))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^144.19)) :named ax_719))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^146.13)) :named ax_720))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^146.24)) :named ax_721))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^146.3)) :named ax_722))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^148.3)) :named ax_723))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^151.14)) :named ax_724))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^151.5)) :named ax_725))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^152.5)) :named ax_726))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^153.15)) :named ax_727))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^153.5)) :named ax_728))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^157.5)) :named ax_729))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^158.21)) :named ax_730))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^159.21)) :named ax_731))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^163.25)) :named ax_732))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^163.41)) :named ax_733))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^167.3)) :named ax_734))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^168.28)) :named ax_735))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^179.7)) :named ax_736))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^181.36)) :named ax_737))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^181.41)) :named ax_738))
   (assert (! (not (= $@loc.prestate@35 $@tok$1^185.7)) :named ax_739))
   (assert (! (not (= $@loc.prestate@35 $@tok$2^0.0)) :named ax_740))
   (assert (! (not (= $@loc.prestate@37 $@file^?3Cno?20file?3E)) :named ax_741))
   (assert (! (not (= $@loc.prestate@37 $@file^?3Cno?20file?3E)) :named ax_742))
   (assert (! (not (= $@loc.prestate@37 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_743))
   (assert (! (not (= $@loc.prestate@37 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_744))
   (assert (! (not (= $@loc.prestate@37 $@loc.assign@12)) :named ax_745))
   (assert (! (not (= $@loc.prestate@37 $@loc.assign@12)) :named ax_746))
   (assert (! (not (= $@loc.prestate@37 $@loc.assign@13)) :named ax_747))
   (assert (! (not (= $@loc.prestate@37 $@loc.assign@13)) :named ax_748))
   (assert (! (not (= $@loc.prestate@37 $@loc.n)) :named ax_749))
   (assert (! (not (= $@loc.prestate@37 $@loc.n)) :named ax_750))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@26)) :named ax_751))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@26)) :named ax_752))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@30)) :named ax_753))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@30)) :named ax_754))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@33)) :named ax_755))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@33)) :named ax_756))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@36)) :named ax_757))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@36)) :named ax_758))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@39)) :named ax_759))
   (assert (! (not (= $@loc.prestate@37 $@loc.owns@42)) :named ax_760))
   (assert (! (not (= $@loc.prestate@37 $@loc.p)) :named ax_761))
   (assert (! (not (= $@loc.prestate@37 $@loc.p)) :named ax_762))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@24)) :named ax_763))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@24)) :named ax_764))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@27)) :named ax_765))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@27)) :named ax_766))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@28)) :named ax_767))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@28)) :named ax_768))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@29)) :named ax_769))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@29)) :named ax_770))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@31)) :named ax_771))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@31)) :named ax_772))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@34)) :named ax_773))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@34)) :named ax_774))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@35)) :named ax_775))
   (assert (! (not (= $@loc.prestate@37 $@loc.prestate@35)) :named ax_776))
   (assert (! (not (= $@loc.prestate@37 $@loc.res_lambda@4@17)) :named ax_777))
   (assert (! (not (= $@loc.prestate@37 $@loc.res_lambda@5@18)) :named ax_778))
   (assert (! (not (= $@loc.prestate@37 $@loc.res_lambda@6@19)) :named ax_779))
   (assert (! (not (= $@loc.prestate@37 $@loc.staticWrapState@25)) :named ax_780))
   (assert (! (not (= $@loc.prestate@37 $@loc.staticWrapState@32)) :named ax_781))
   (assert (! (not (= $@loc.prestate@37 $@loc.t)) :named ax_782))
   (assert (! (not (= $@loc.prestate@37 $@loc.x)) :named ax_783))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^134.1)) :named ax_784))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^142.3)) :named ax_785))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^144.19)) :named ax_786))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^146.13)) :named ax_787))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^146.24)) :named ax_788))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^146.3)) :named ax_789))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^148.3)) :named ax_790))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^151.14)) :named ax_791))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^151.5)) :named ax_792))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^152.5)) :named ax_793))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^153.15)) :named ax_794))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^153.5)) :named ax_795))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^157.5)) :named ax_796))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^158.21)) :named ax_797))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^159.21)) :named ax_798))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^163.25)) :named ax_799))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^163.41)) :named ax_800))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^167.3)) :named ax_801))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^168.28)) :named ax_802))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^179.7)) :named ax_803))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^181.36)) :named ax_804))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^181.41)) :named ax_805))
   (assert (! (not (= $@loc.prestate@37 $@tok$1^185.7)) :named ax_806))
   (assert (! (not (= $@loc.prestate@37 $@tok$2^0.0)) :named ax_807))
   (assert (! (not (= $@loc.prestate@40 $@file^?3Cno?20file?3E)) :named ax_808))
   (assert (! (not (= $@loc.prestate@40 $@file^?3Cno?20file?3E)) :named ax_809))
   (assert (! (not (= $@loc.prestate@40 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_810))
   (assert (! (not (= $@loc.prestate@40 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_811))
   (assert (! (not (= $@loc.prestate@40 $@loc.assign@12)) :named ax_812))
   (assert (! (not (= $@loc.prestate@40 $@loc.assign@12)) :named ax_813))
   (assert (! (not (= $@loc.prestate@40 $@loc.assign@13)) :named ax_814))
   (assert (! (not (= $@loc.prestate@40 $@loc.assign@13)) :named ax_815))
   (assert (! (not (= $@loc.prestate@40 $@loc.n)) :named ax_816))
   (assert (! (not (= $@loc.prestate@40 $@loc.n)) :named ax_817))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@26)) :named ax_818))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@26)) :named ax_819))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@30)) :named ax_820))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@30)) :named ax_821))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@33)) :named ax_822))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@33)) :named ax_823))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@36)) :named ax_824))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@36)) :named ax_825))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@39)) :named ax_826))
   (assert (! (not (= $@loc.prestate@40 $@loc.owns@42)) :named ax_827))
   (assert (! (not (= $@loc.prestate@40 $@loc.p)) :named ax_828))
   (assert (! (not (= $@loc.prestate@40 $@loc.p)) :named ax_829))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@24)) :named ax_830))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@24)) :named ax_831))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@27)) :named ax_832))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@27)) :named ax_833))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@28)) :named ax_834))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@28)) :named ax_835))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@29)) :named ax_836))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@29)) :named ax_837))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@31)) :named ax_838))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@31)) :named ax_839))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@34)) :named ax_840))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@34)) :named ax_841))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@35)) :named ax_842))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@35)) :named ax_843))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@37)) :named ax_844))
   (assert (! (not (= $@loc.prestate@40 $@loc.prestate@37)) :named ax_845))
   (assert (! (not (= $@loc.prestate@40 $@loc.res_lambda@4@17)) :named ax_846))
   (assert (! (not (= $@loc.prestate@40 $@loc.res_lambda@5@18)) :named ax_847))
   (assert (! (not (= $@loc.prestate@40 $@loc.res_lambda@6@19)) :named ax_848))
   (assert (! (not (= $@loc.prestate@40 $@loc.staticWrapState@25)) :named ax_849))
   (assert (! (not (= $@loc.prestate@40 $@loc.staticWrapState@32)) :named ax_850))
   (assert (! (not (= $@loc.prestate@40 $@loc.t)) :named ax_851))
   (assert (! (not (= $@loc.prestate@40 $@loc.x)) :named ax_852))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^134.1)) :named ax_853))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^142.3)) :named ax_854))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^144.19)) :named ax_855))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^146.13)) :named ax_856))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^146.24)) :named ax_857))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^146.3)) :named ax_858))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^148.3)) :named ax_859))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^151.14)) :named ax_860))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^151.5)) :named ax_861))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^152.5)) :named ax_862))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^153.15)) :named ax_863))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^153.5)) :named ax_864))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^157.5)) :named ax_865))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^158.21)) :named ax_866))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^159.21)) :named ax_867))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^163.25)) :named ax_868))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^163.41)) :named ax_869))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^167.3)) :named ax_870))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^168.28)) :named ax_871))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^179.7)) :named ax_872))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^181.36)) :named ax_873))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^181.41)) :named ax_874))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^185.7)) :named ax_875))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^187.36)) :named ax_876))
   (assert (! (not (= $@loc.prestate@40 $@tok$1^187.41)) :named ax_877))
   (assert (! (not (= $@loc.prestate@40 $@tok$2^0.0)) :named ax_878))
   (assert (! (not (= $@loc.prestate@43 $@file^?3Cno?20file?3E)) :named ax_879))
   (assert (! (not (= $@loc.prestate@43 $@file^?3Cno?20file?3E)) :named ax_880))
   (assert (! (not (= $@loc.prestate@43 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_881))
   (assert (! (not (= $@loc.prestate@43 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_882))
   (assert (! (not (= $@loc.prestate@43 $@loc.assign@12)) :named ax_883))
   (assert (! (not (= $@loc.prestate@43 $@loc.assign@12)) :named ax_884))
   (assert (! (not (= $@loc.prestate@43 $@loc.assign@13)) :named ax_885))
   (assert (! (not (= $@loc.prestate@43 $@loc.assign@13)) :named ax_886))
   (assert (! (not (= $@loc.prestate@43 $@loc.n)) :named ax_887))
   (assert (! (not (= $@loc.prestate@43 $@loc.n)) :named ax_888))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@26)) :named ax_889))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@26)) :named ax_890))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@30)) :named ax_891))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@30)) :named ax_892))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@33)) :named ax_893))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@33)) :named ax_894))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@36)) :named ax_895))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@36)) :named ax_896))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@39)) :named ax_897))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@39)) :named ax_898))
   (assert (! (not (= $@loc.prestate@43 $@loc.owns@42)) :named ax_899))
   (assert (! (not (= $@loc.prestate@43 $@loc.p)) :named ax_900))
   (assert (! (not (= $@loc.prestate@43 $@loc.p)) :named ax_901))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@24)) :named ax_902))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@24)) :named ax_903))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@27)) :named ax_904))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@27)) :named ax_905))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@28)) :named ax_906))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@28)) :named ax_907))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@29)) :named ax_908))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@29)) :named ax_909))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@31)) :named ax_910))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@31)) :named ax_911))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@34)) :named ax_912))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@34)) :named ax_913))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@35)) :named ax_914))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@35)) :named ax_915))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@37)) :named ax_916))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@37)) :named ax_917))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@40)) :named ax_918))
   (assert (! (not (= $@loc.prestate@43 $@loc.prestate@40)) :named ax_919))
   (assert (! (not (= $@loc.prestate@43 $@loc.res_lambda@4@17)) :named ax_920))
   (assert (! (not (= $@loc.prestate@43 $@loc.res_lambda@5@18)) :named ax_921))
   (assert (! (not (= $@loc.prestate@43 $@loc.res_lambda@6@19)) :named ax_922))
   (assert (! (not (= $@loc.prestate@43 $@loc.res_lambda@7@20)) :named ax_923))
   (assert (! (not (= $@loc.prestate@43 $@loc.staticWrapState@25)) :named ax_924))
   (assert (! (not (= $@loc.prestate@43 $@loc.staticWrapState@32)) :named ax_925))
   (assert (! (not (= $@loc.prestate@43 $@loc.staticWrapState@38)) :named ax_926))
   (assert (! (not (= $@loc.prestate@43 $@loc.t)) :named ax_927))
   (assert (! (not (= $@loc.prestate@43 $@loc.x)) :named ax_928))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^134.1)) :named ax_929))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^142.3)) :named ax_930))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^144.19)) :named ax_931))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^146.13)) :named ax_932))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^146.24)) :named ax_933))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^146.3)) :named ax_934))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^148.3)) :named ax_935))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^151.14)) :named ax_936))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^151.5)) :named ax_937))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^152.5)) :named ax_938))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^153.15)) :named ax_939))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^153.5)) :named ax_940))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^157.5)) :named ax_941))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^158.21)) :named ax_942))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^159.21)) :named ax_943))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^163.25)) :named ax_944))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^163.41)) :named ax_945))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^167.3)) :named ax_946))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^168.28)) :named ax_947))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^179.7)) :named ax_948))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^181.36)) :named ax_949))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^181.41)) :named ax_950))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^185.7)) :named ax_951))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^187.36)) :named ax_952))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^187.41)) :named ax_953))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^194.27)) :named ax_954))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^194.37)) :named ax_955))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^195.5)) :named ax_956))
   (assert (! (not (= $@loc.prestate@43 $@tok$1^198.3)) :named ax_957))
   (assert (! (not (= $@loc.prestate@43 $@tok$2^0.0)) :named ax_958))
   (assert (! (not (= $@loc.prestate@44 $@file^?3Cno?20file?3E)) :named ax_959))
   (assert (! (not (= $@loc.prestate@44 $@file^?3Cno?20file?3E)) :named ax_960))
   (assert (! (not (= $@loc.prestate@44 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_961))
   (assert (! (not (= $@loc.prestate@44 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_962))
   (assert (! (not (= $@loc.prestate@44 $@loc.assign@12)) :named ax_963))
   (assert (! (not (= $@loc.prestate@44 $@loc.assign@12)) :named ax_964))
   (assert (! (not (= $@loc.prestate@44 $@loc.assign@13)) :named ax_965))
   (assert (! (not (= $@loc.prestate@44 $@loc.assign@13)) :named ax_966))
   (assert (! (not (= $@loc.prestate@44 $@loc.n)) :named ax_967))
   (assert (! (not (= $@loc.prestate@44 $@loc.n)) :named ax_968))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@26)) :named ax_969))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@26)) :named ax_970))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@30)) :named ax_971))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@30)) :named ax_972))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@33)) :named ax_973))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@33)) :named ax_974))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@36)) :named ax_975))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@36)) :named ax_976))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@39)) :named ax_977))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@39)) :named ax_978))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@42)) :named ax_979))
   (assert (! (not (= $@loc.prestate@44 $@loc.owns@42)) :named ax_980))
   (assert (! (not (= $@loc.prestate@44 $@loc.p)) :named ax_981))
   (assert (! (not (= $@loc.prestate@44 $@loc.p)) :named ax_982))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@24)) :named ax_983))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@24)) :named ax_984))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@27)) :named ax_985))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@27)) :named ax_986))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@28)) :named ax_987))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@28)) :named ax_988))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@29)) :named ax_989))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@29)) :named ax_990))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@31)) :named ax_991))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@31)) :named ax_992))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@34)) :named ax_993))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@34)) :named ax_994))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@35)) :named ax_995))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@35)) :named ax_996))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@37)) :named ax_997))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@37)) :named ax_998))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@40)) :named ax_999))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@40)) :named ax_1000))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@43)) :named ax_1001))
   (assert (! (not (= $@loc.prestate@44 $@loc.prestate@43)) :named ax_1002))
   (assert (! (not (= $@loc.prestate@44 $@loc.res_lambda@4@17)) :named ax_1003))
   (assert (! (not (= $@loc.prestate@44 $@loc.res_lambda@5@18)) :named ax_1004))
   (assert (! (not (= $@loc.prestate@44 $@loc.res_lambda@6@19)) :named ax_1005))
   (assert (! (not (= $@loc.prestate@44 $@loc.res_lambda@7@20)) :named ax_1006))
   (assert (! (not (= $@loc.prestate@44 $@loc.staticWrapState@25)) :named ax_1007))
   (assert (! (not (= $@loc.prestate@44 $@loc.staticWrapState@32)) :named ax_1008))
   (assert (! (not (= $@loc.prestate@44 $@loc.staticWrapState@38)) :named ax_1009))
   (assert (! (not (= $@loc.prestate@44 $@loc.staticWrapState@41)) :named ax_1010))
   (assert (! (not (= $@loc.prestate@44 $@loc.t)) :named ax_1011))
   (assert (! (not (= $@loc.prestate@44 $@loc.x)) :named ax_1012))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^134.1)) :named ax_1013))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^142.3)) :named ax_1014))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^144.19)) :named ax_1015))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^146.13)) :named ax_1016))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^146.24)) :named ax_1017))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^146.3)) :named ax_1018))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^148.3)) :named ax_1019))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^151.14)) :named ax_1020))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^151.5)) :named ax_1021))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^152.5)) :named ax_1022))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^153.15)) :named ax_1023))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^153.5)) :named ax_1024))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^157.5)) :named ax_1025))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^158.21)) :named ax_1026))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^159.21)) :named ax_1027))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^163.25)) :named ax_1028))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^163.41)) :named ax_1029))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^167.3)) :named ax_1030))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^168.28)) :named ax_1031))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^179.7)) :named ax_1032))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^181.36)) :named ax_1033))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^181.41)) :named ax_1034))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^185.7)) :named ax_1035))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^187.36)) :named ax_1036))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^187.41)) :named ax_1037))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^194.27)) :named ax_1038))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^194.37)) :named ax_1039))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^195.5)) :named ax_1040))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^198.3)) :named ax_1041))
   (assert (! (not (= $@loc.prestate@44 $@tok$1^199.19)) :named ax_1042))
   (assert (! (not (= $@loc.prestate@44 $@tok$2^0.0)) :named ax_1043))
   (assert (! (not (= $@loc.res_lambda@4@17 $@file^?3Cno?20file?3E)) :named ax_1044))
   (assert (! (not (= $@loc.res_lambda@4@17 $@file^?3Cno?20file?3E)) :named ax_1045))
   (assert (! (not (= $@loc.res_lambda@4@17 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1046))
   (assert (! (not (= $@loc.res_lambda@4@17 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1047))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.assign@12)) :named ax_1048))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.assign@12)) :named ax_1049))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.assign@13)) :named ax_1050))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.assign@13)) :named ax_1051))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.n)) :named ax_1052))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.n)) :named ax_1053))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.owns@26)) :named ax_1054))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.owns@30)) :named ax_1055))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.owns@33)) :named ax_1056))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.owns@36)) :named ax_1057))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.owns@39)) :named ax_1058))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.owns@42)) :named ax_1059))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.p)) :named ax_1060))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.p)) :named ax_1061))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@24)) :named ax_1062))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@24)) :named ax_1063))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@27)) :named ax_1064))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@28)) :named ax_1065))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@29)) :named ax_1066))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@31)) :named ax_1067))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@34)) :named ax_1068))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@35)) :named ax_1069))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@37)) :named ax_1070))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@40)) :named ax_1071))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@43)) :named ax_1072))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.prestate@44)) :named ax_1073))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.t)) :named ax_1074))
   (assert (! (not (= $@loc.res_lambda@4@17 $@loc.x)) :named ax_1075))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^134.1)) :named ax_1076))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^142.3)) :named ax_1077))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^144.19)) :named ax_1078))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^146.13)) :named ax_1079))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^146.24)) :named ax_1080))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^146.3)) :named ax_1081))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^148.3)) :named ax_1082))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$1^151.14)) :named ax_1083))
   (assert (! (not (= $@loc.res_lambda@4@17 $@tok$2^0.0)) :named ax_1084))
   (assert (! (not (= $@loc.res_lambda@5@18 $@file^?3Cno?20file?3E)) :named ax_1085))
   (assert (! (not (= $@loc.res_lambda@5@18 $@file^?3Cno?20file?3E)) :named ax_1086))
   (assert (! (not (= $@loc.res_lambda@5@18 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1087))
   (assert (! (not (= $@loc.res_lambda@5@18 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1088))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.assign@12)) :named ax_1089))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.assign@12)) :named ax_1090))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.assign@13)) :named ax_1091))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.assign@13)) :named ax_1092))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.n)) :named ax_1093))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.n)) :named ax_1094))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.owns@26)) :named ax_1095))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.owns@30)) :named ax_1096))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.owns@33)) :named ax_1097))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.owns@36)) :named ax_1098))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.owns@39)) :named ax_1099))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.owns@42)) :named ax_1100))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.p)) :named ax_1101))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.p)) :named ax_1102))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@24)) :named ax_1103))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@24)) :named ax_1104))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@27)) :named ax_1105))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@28)) :named ax_1106))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@29)) :named ax_1107))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@31)) :named ax_1108))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@34)) :named ax_1109))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@35)) :named ax_1110))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@37)) :named ax_1111))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@40)) :named ax_1112))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@43)) :named ax_1113))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.prestate@44)) :named ax_1114))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.res_lambda@4@17)) :named ax_1115))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.res_lambda@4@17)) :named ax_1116))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.t)) :named ax_1117))
   (assert (! (not (= $@loc.res_lambda@5@18 $@loc.x)) :named ax_1118))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^134.1)) :named ax_1119))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^142.3)) :named ax_1120))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^144.19)) :named ax_1121))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^146.13)) :named ax_1122))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^146.24)) :named ax_1123))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^146.3)) :named ax_1124))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^148.3)) :named ax_1125))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^151.14)) :named ax_1126))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^151.5)) :named ax_1127))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^152.5)) :named ax_1128))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$1^153.15)) :named ax_1129))
   (assert (! (not (= $@loc.res_lambda@5@18 $@tok$2^0.0)) :named ax_1130))
   (assert (! (not (= $@loc.res_lambda@6@19 $@file^?3Cno?20file?3E)) :named ax_1131))
   (assert (! (not (= $@loc.res_lambda@6@19 $@file^?3Cno?20file?3E)) :named ax_1132))
   (assert (! (not (= $@loc.res_lambda@6@19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1133))
   (assert (! (not (= $@loc.res_lambda@6@19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1134))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.assign@12)) :named ax_1135))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.assign@12)) :named ax_1136))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.assign@13)) :named ax_1137))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.assign@13)) :named ax_1138))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.n)) :named ax_1139))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.n)) :named ax_1140))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.owns@26)) :named ax_1141))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.owns@26)) :named ax_1142))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.owns@30)) :named ax_1143))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.owns@33)) :named ax_1144))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.owns@36)) :named ax_1145))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.owns@39)) :named ax_1146))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.owns@42)) :named ax_1147))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.p)) :named ax_1148))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.p)) :named ax_1149))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@24)) :named ax_1150))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@24)) :named ax_1151))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@27)) :named ax_1152))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@27)) :named ax_1153))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@28)) :named ax_1154))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@28)) :named ax_1155))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@29)) :named ax_1156))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@31)) :named ax_1157))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@34)) :named ax_1158))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@35)) :named ax_1159))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@37)) :named ax_1160))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@40)) :named ax_1161))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@43)) :named ax_1162))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.prestate@44)) :named ax_1163))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.res_lambda@4@17)) :named ax_1164))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.res_lambda@4@17)) :named ax_1165))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.res_lambda@5@18)) :named ax_1166))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.res_lambda@5@18)) :named ax_1167))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.staticWrapState@25)) :named ax_1168))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.t)) :named ax_1169))
   (assert (! (not (= $@loc.res_lambda@6@19 $@loc.x)) :named ax_1170))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^134.1)) :named ax_1171))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^142.3)) :named ax_1172))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^144.19)) :named ax_1173))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^146.13)) :named ax_1174))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^146.24)) :named ax_1175))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^146.3)) :named ax_1176))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^148.3)) :named ax_1177))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^151.14)) :named ax_1178))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^151.5)) :named ax_1179))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^152.5)) :named ax_1180))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^153.15)) :named ax_1181))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^153.5)) :named ax_1182))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^157.5)) :named ax_1183))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^158.21)) :named ax_1184))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^159.21)) :named ax_1185))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$1^163.41)) :named ax_1186))
   (assert (! (not (= $@loc.res_lambda@6@19 $@tok$2^0.0)) :named ax_1187))
   (assert (! (not (= $@loc.res_lambda@7@20 $@file^?3Cno?20file?3E)) :named ax_1188))
   (assert (! (not (= $@loc.res_lambda@7@20 $@file^?3Cno?20file?3E)) :named ax_1189))
   (assert (! (not (= $@loc.res_lambda@7@20 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1190))
   (assert (! (not (= $@loc.res_lambda@7@20 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1191))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.assign@12)) :named ax_1192))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.assign@12)) :named ax_1193))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.assign@13)) :named ax_1194))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.assign@13)) :named ax_1195))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.n)) :named ax_1196))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.n)) :named ax_1197))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@26)) :named ax_1198))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@26)) :named ax_1199))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@30)) :named ax_1200))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@30)) :named ax_1201))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@33)) :named ax_1202))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@33)) :named ax_1203))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@36)) :named ax_1204))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@36)) :named ax_1205))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@39)) :named ax_1206))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@39)) :named ax_1207))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.owns@42)) :named ax_1208))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.p)) :named ax_1209))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.p)) :named ax_1210))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@24)) :named ax_1211))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@24)) :named ax_1212))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@27)) :named ax_1213))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@27)) :named ax_1214))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@28)) :named ax_1215))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@28)) :named ax_1216))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@29)) :named ax_1217))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@29)) :named ax_1218))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@31)) :named ax_1219))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@31)) :named ax_1220))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@34)) :named ax_1221))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@34)) :named ax_1222))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@35)) :named ax_1223))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@35)) :named ax_1224))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@37)) :named ax_1225))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@37)) :named ax_1226))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@40)) :named ax_1227))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@40)) :named ax_1228))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@43)) :named ax_1229))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.prestate@44)) :named ax_1230))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.res_lambda@4@17)) :named ax_1231))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.res_lambda@4@17)) :named ax_1232))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.res_lambda@5@18)) :named ax_1233))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.res_lambda@5@18)) :named ax_1234))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.res_lambda@6@19)) :named ax_1235))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.res_lambda@6@19)) :named ax_1236))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.staticWrapState@25)) :named ax_1237))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.staticWrapState@32)) :named ax_1238))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.staticWrapState@38)) :named ax_1239))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.t)) :named ax_1240))
   (assert (! (not (= $@loc.res_lambda@7@20 $@loc.x)) :named ax_1241))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^134.1)) :named ax_1242))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^142.3)) :named ax_1243))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^144.19)) :named ax_1244))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^146.13)) :named ax_1245))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^146.24)) :named ax_1246))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^146.3)) :named ax_1247))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^148.3)) :named ax_1248))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^151.14)) :named ax_1249))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^151.5)) :named ax_1250))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^152.5)) :named ax_1251))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^153.15)) :named ax_1252))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^153.5)) :named ax_1253))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^157.5)) :named ax_1254))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^158.21)) :named ax_1255))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^159.21)) :named ax_1256))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^163.25)) :named ax_1257))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^163.41)) :named ax_1258))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^167.3)) :named ax_1259))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^168.28)) :named ax_1260))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^179.7)) :named ax_1261))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^181.36)) :named ax_1262))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^181.41)) :named ax_1263))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^185.7)) :named ax_1264))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^187.36)) :named ax_1265))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^187.41)) :named ax_1266))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$1^194.37)) :named ax_1267))
   (assert (! (not (= $@loc.res_lambda@7@20 $@tok$2^0.0)) :named ax_1268))
   (assert (! (not (= $@loc.staticWrapState@25 $@file^?3Cno?20file?3E)) :named ax_1269))
   (assert (! (not (= $@loc.staticWrapState@25 $@file^?3Cno?20file?3E)) :named ax_1270))
   (assert (! (not (= $@loc.staticWrapState@25 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1271))
   (assert (! (not (= $@loc.staticWrapState@25 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1272))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.assign@12)) :named ax_1273))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.assign@12)) :named ax_1274))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.assign@13)) :named ax_1275))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.assign@13)) :named ax_1276))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.n)) :named ax_1277))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.n)) :named ax_1278))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.owns@26)) :named ax_1279))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.owns@30)) :named ax_1280))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.owns@33)) :named ax_1281))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.owns@36)) :named ax_1282))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.owns@39)) :named ax_1283))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.owns@42)) :named ax_1284))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.p)) :named ax_1285))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.p)) :named ax_1286))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@24)) :named ax_1287))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@24)) :named ax_1288))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@27)) :named ax_1289))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@27)) :named ax_1290))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@28)) :named ax_1291))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@29)) :named ax_1292))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@31)) :named ax_1293))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@34)) :named ax_1294))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@35)) :named ax_1295))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@37)) :named ax_1296))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@40)) :named ax_1297))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@43)) :named ax_1298))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.prestate@44)) :named ax_1299))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.res_lambda@4@17)) :named ax_1300))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.res_lambda@4@17)) :named ax_1301))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.res_lambda@5@18)) :named ax_1302))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.res_lambda@5@18)) :named ax_1303))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.res_lambda@6@19)) :named ax_1304))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.res_lambda@7@20)) :named ax_1305))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.t)) :named ax_1306))
   (assert (! (not (= $@loc.staticWrapState@25 $@loc.x)) :named ax_1307))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^134.1)) :named ax_1308))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^142.3)) :named ax_1309))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^144.19)) :named ax_1310))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^146.13)) :named ax_1311))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^146.24)) :named ax_1312))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^146.3)) :named ax_1313))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^148.3)) :named ax_1314))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^151.14)) :named ax_1315))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^151.5)) :named ax_1316))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^152.5)) :named ax_1317))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^153.15)) :named ax_1318))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^153.5)) :named ax_1319))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$1^157.5)) :named ax_1320))
   (assert (! (not (= $@loc.staticWrapState@25 $@tok$2^0.0)) :named ax_1321))
   (assert (! (not (= $@loc.staticWrapState@32 $@file^?3Cno?20file?3E)) :named ax_1322))
   (assert (! (not (= $@loc.staticWrapState@32 $@file^?3Cno?20file?3E)) :named ax_1323))
   (assert (! (not (= $@loc.staticWrapState@32 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1324))
   (assert (! (not (= $@loc.staticWrapState@32 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1325))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.assign@12)) :named ax_1326))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.assign@12)) :named ax_1327))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.assign@13)) :named ax_1328))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.assign@13)) :named ax_1329))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.n)) :named ax_1330))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.n)) :named ax_1331))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@26)) :named ax_1332))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@26)) :named ax_1333))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@30)) :named ax_1334))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@30)) :named ax_1335))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@33)) :named ax_1336))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@36)) :named ax_1337))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@39)) :named ax_1338))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.owns@42)) :named ax_1339))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.p)) :named ax_1340))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.p)) :named ax_1341))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@24)) :named ax_1342))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@24)) :named ax_1343))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@27)) :named ax_1344))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@27)) :named ax_1345))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@28)) :named ax_1346))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@28)) :named ax_1347))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@29)) :named ax_1348))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@29)) :named ax_1349))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@31)) :named ax_1350))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@31)) :named ax_1351))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@34)) :named ax_1352))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@34)) :named ax_1353))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@35)) :named ax_1354))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@37)) :named ax_1355))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@40)) :named ax_1356))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@43)) :named ax_1357))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.prestate@44)) :named ax_1358))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.res_lambda@4@17)) :named ax_1359))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.res_lambda@4@17)) :named ax_1360))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.res_lambda@5@18)) :named ax_1361))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.res_lambda@5@18)) :named ax_1362))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.res_lambda@6@19)) :named ax_1363))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.res_lambda@6@19)) :named ax_1364))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.res_lambda@7@20)) :named ax_1365))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.staticWrapState@25)) :named ax_1366))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.staticWrapState@25)) :named ax_1367))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.t)) :named ax_1368))
   (assert (! (not (= $@loc.staticWrapState@32 $@loc.x)) :named ax_1369))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^134.1)) :named ax_1370))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^142.3)) :named ax_1371))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^144.19)) :named ax_1372))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^146.13)) :named ax_1373))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^146.24)) :named ax_1374))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^146.3)) :named ax_1375))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^148.3)) :named ax_1376))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^151.14)) :named ax_1377))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^151.5)) :named ax_1378))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^152.5)) :named ax_1379))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^153.15)) :named ax_1380))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^153.5)) :named ax_1381))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^157.5)) :named ax_1382))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^158.21)) :named ax_1383))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^159.21)) :named ax_1384))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^163.25)) :named ax_1385))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^163.41)) :named ax_1386))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^167.3)) :named ax_1387))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^168.28)) :named ax_1388))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^179.7)) :named ax_1389))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^181.36)) :named ax_1390))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$1^181.41)) :named ax_1391))
   (assert (! (not (= $@loc.staticWrapState@32 $@tok$2^0.0)) :named ax_1392))
   (assert (! (not (= $@loc.staticWrapState@38 $@file^?3Cno?20file?3E)) :named ax_1393))
   (assert (! (not (= $@loc.staticWrapState@38 $@file^?3Cno?20file?3E)) :named ax_1394))
   (assert (! (not (= $@loc.staticWrapState@38 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1395))
   (assert (! (not (= $@loc.staticWrapState@38 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1396))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.assign@12)) :named ax_1397))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.assign@12)) :named ax_1398))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.assign@13)) :named ax_1399))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.assign@13)) :named ax_1400))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.n)) :named ax_1401))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.n)) :named ax_1402))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@26)) :named ax_1403))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@26)) :named ax_1404))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@30)) :named ax_1405))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@30)) :named ax_1406))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@33)) :named ax_1407))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@33)) :named ax_1408))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@36)) :named ax_1409))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@36)) :named ax_1410))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@39)) :named ax_1411))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.owns@42)) :named ax_1412))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.p)) :named ax_1413))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.p)) :named ax_1414))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@24)) :named ax_1415))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@24)) :named ax_1416))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@27)) :named ax_1417))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@27)) :named ax_1418))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@28)) :named ax_1419))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@28)) :named ax_1420))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@29)) :named ax_1421))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@29)) :named ax_1422))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@31)) :named ax_1423))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@31)) :named ax_1424))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@34)) :named ax_1425))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@34)) :named ax_1426))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@35)) :named ax_1427))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@35)) :named ax_1428))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@37)) :named ax_1429))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@37)) :named ax_1430))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@40)) :named ax_1431))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@40)) :named ax_1432))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@43)) :named ax_1433))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.prestate@44)) :named ax_1434))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.res_lambda@4@17)) :named ax_1435))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.res_lambda@4@17)) :named ax_1436))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.res_lambda@5@18)) :named ax_1437))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.res_lambda@5@18)) :named ax_1438))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.res_lambda@6@19)) :named ax_1439))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.res_lambda@6@19)) :named ax_1440))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.res_lambda@7@20)) :named ax_1441))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.staticWrapState@25)) :named ax_1442))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.staticWrapState@25)) :named ax_1443))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.staticWrapState@32)) :named ax_1444))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.staticWrapState@32)) :named ax_1445))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.t)) :named ax_1446))
   (assert (! (not (= $@loc.staticWrapState@38 $@loc.x)) :named ax_1447))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^134.1)) :named ax_1448))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^142.3)) :named ax_1449))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^144.19)) :named ax_1450))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^146.13)) :named ax_1451))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^146.24)) :named ax_1452))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^146.3)) :named ax_1453))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^148.3)) :named ax_1454))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^151.14)) :named ax_1455))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^151.5)) :named ax_1456))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^152.5)) :named ax_1457))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^153.15)) :named ax_1458))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^153.5)) :named ax_1459))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^157.5)) :named ax_1460))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^158.21)) :named ax_1461))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^159.21)) :named ax_1462))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^163.25)) :named ax_1463))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^163.41)) :named ax_1464))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^167.3)) :named ax_1465))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^168.28)) :named ax_1466))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^179.7)) :named ax_1467))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^181.36)) :named ax_1468))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^181.41)) :named ax_1469))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^185.7)) :named ax_1470))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^187.36)) :named ax_1471))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$1^187.41)) :named ax_1472))
   (assert (! (not (= $@loc.staticWrapState@38 $@tok$2^0.0)) :named ax_1473))
   (assert (! (not (= $@loc.staticWrapState@41 $@file^?3Cno?20file?3E)) :named ax_1474))
   (assert (! (not (= $@loc.staticWrapState@41 $@file^?3Cno?20file?3E)) :named ax_1475))
   (assert (! (not (= $@loc.staticWrapState@41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1476))
   (assert (! (not (= $@loc.staticWrapState@41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1477))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.assign@12)) :named ax_1478))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.assign@12)) :named ax_1479))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.assign@13)) :named ax_1480))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.assign@13)) :named ax_1481))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.n)) :named ax_1482))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.n)) :named ax_1483))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@26)) :named ax_1484))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@26)) :named ax_1485))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@30)) :named ax_1486))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@30)) :named ax_1487))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@33)) :named ax_1488))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@33)) :named ax_1489))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@36)) :named ax_1490))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@36)) :named ax_1491))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@39)) :named ax_1492))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@39)) :named ax_1493))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.owns@42)) :named ax_1494))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.p)) :named ax_1495))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.p)) :named ax_1496))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@24)) :named ax_1497))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@24)) :named ax_1498))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@27)) :named ax_1499))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@27)) :named ax_1500))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@28)) :named ax_1501))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@28)) :named ax_1502))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@29)) :named ax_1503))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@29)) :named ax_1504))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@31)) :named ax_1505))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@31)) :named ax_1506))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@34)) :named ax_1507))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@34)) :named ax_1508))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@35)) :named ax_1509))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@35)) :named ax_1510))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@37)) :named ax_1511))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@37)) :named ax_1512))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@40)) :named ax_1513))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@40)) :named ax_1514))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@43)) :named ax_1515))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@43)) :named ax_1516))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.prestate@44)) :named ax_1517))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@4@17)) :named ax_1518))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@4@17)) :named ax_1519))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@5@18)) :named ax_1520))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@5@18)) :named ax_1521))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@6@19)) :named ax_1522))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@6@19)) :named ax_1523))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@7@20)) :named ax_1524))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.res_lambda@7@20)) :named ax_1525))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.staticWrapState@25)) :named ax_1526))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.staticWrapState@25)) :named ax_1527))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.staticWrapState@32)) :named ax_1528))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.staticWrapState@32)) :named ax_1529))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.staticWrapState@38)) :named ax_1530))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.staticWrapState@38)) :named ax_1531))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.t)) :named ax_1532))
   (assert (! (not (= $@loc.staticWrapState@41 $@loc.x)) :named ax_1533))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^134.1)) :named ax_1534))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^142.3)) :named ax_1535))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^144.19)) :named ax_1536))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^146.13)) :named ax_1537))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^146.24)) :named ax_1538))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^146.3)) :named ax_1539))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^148.3)) :named ax_1540))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^151.14)) :named ax_1541))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^151.5)) :named ax_1542))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^152.5)) :named ax_1543))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^153.15)) :named ax_1544))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^153.5)) :named ax_1545))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^157.5)) :named ax_1546))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^158.21)) :named ax_1547))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^159.21)) :named ax_1548))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^163.25)) :named ax_1549))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^163.41)) :named ax_1550))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^167.3)) :named ax_1551))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^168.28)) :named ax_1552))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^179.7)) :named ax_1553))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^181.36)) :named ax_1554))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^181.41)) :named ax_1555))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^185.7)) :named ax_1556))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^187.36)) :named ax_1557))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^187.41)) :named ax_1558))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^194.27)) :named ax_1559))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^194.37)) :named ax_1560))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^195.5)) :named ax_1561))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$1^198.3)) :named ax_1562))
   (assert (! (not (= $@loc.staticWrapState@41 $@tok$2^0.0)) :named ax_1563))
   (assert (! (not (= $@loc.t $@file^?3Cno?20file?3E)) :named ax_1564))
   (assert (! (not (= $@loc.t $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1565))
   (assert (! (not (= $@loc.t $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1566))
   (assert (! (not (= $@loc.t $@loc.assign@12)) :named ax_1567))
   (assert (! (not (= $@loc.t $@loc.assign@13)) :named ax_1568))
   (assert (! (not (= $@loc.t $@loc.n)) :named ax_1569))
   (assert (! (not (= $@loc.t $@loc.owns@26)) :named ax_1570))
   (assert (! (not (= $@loc.t $@loc.owns@30)) :named ax_1571))
   (assert (! (not (= $@loc.t $@loc.owns@33)) :named ax_1572))
   (assert (! (not (= $@loc.t $@loc.owns@36)) :named ax_1573))
   (assert (! (not (= $@loc.t $@loc.owns@39)) :named ax_1574))
   (assert (! (not (= $@loc.t $@loc.owns@42)) :named ax_1575))
   (assert (! (not (= $@loc.t $@loc.p)) :named ax_1576))
   (assert (! (not (= $@loc.t $@loc.p)) :named ax_1577))
   (assert (! (not (= $@loc.t $@loc.prestate@24)) :named ax_1578))
   (assert (! (not (= $@loc.t $@loc.prestate@27)) :named ax_1579))
   (assert (! (not (= $@loc.t $@loc.prestate@28)) :named ax_1580))
   (assert (! (not (= $@loc.t $@loc.prestate@29)) :named ax_1581))
   (assert (! (not (= $@loc.t $@loc.prestate@31)) :named ax_1582))
   (assert (! (not (= $@loc.t $@loc.prestate@34)) :named ax_1583))
   (assert (! (not (= $@loc.t $@loc.prestate@35)) :named ax_1584))
   (assert (! (not (= $@loc.t $@loc.prestate@37)) :named ax_1585))
   (assert (! (not (= $@loc.t $@loc.prestate@40)) :named ax_1586))
   (assert (! (not (= $@loc.t $@loc.prestate@43)) :named ax_1587))
   (assert (! (not (= $@loc.t $@loc.prestate@44)) :named ax_1588))
   (assert (! (not (= $@loc.t $@loc.res_lambda@4@17)) :named ax_1589))
   (assert (! (not (= $@loc.t $@loc.res_lambda@5@18)) :named ax_1590))
   (assert (! (not (= $@loc.t $@loc.res_lambda@6@19)) :named ax_1591))
   (assert (! (not (= $@loc.t $@loc.res_lambda@7@20)) :named ax_1592))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@25)) :named ax_1593))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@32)) :named ax_1594))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@38)) :named ax_1595))
   (assert (! (not (= $@loc.t $@loc.staticWrapState@41)) :named ax_1596))
   (assert (! (not (= $@loc.x $@file^?3Cno?20file?3E)) :named ax_1597))
   (assert (! (not (= $@loc.x $@file^?3Cno?20file?3E)) :named ax_1598))
   (assert (! (not (= $@loc.x $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1599))
   (assert (! (not (= $@loc.x $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1600))
   (assert (! (not (= $@loc.x $@loc.assign@12)) :named ax_1601))
   (assert (! (not (= $@loc.x $@loc.assign@13)) :named ax_1602))
   (assert (! (not (= $@loc.x $@loc.n)) :named ax_1603))
   (assert (! (not (= $@loc.x $@loc.owns@26)) :named ax_1604))
   (assert (! (not (= $@loc.x $@loc.owns@30)) :named ax_1605))
   (assert (! (not (= $@loc.x $@loc.owns@33)) :named ax_1606))
   (assert (! (not (= $@loc.x $@loc.owns@36)) :named ax_1607))
   (assert (! (not (= $@loc.x $@loc.owns@39)) :named ax_1608))
   (assert (! (not (= $@loc.x $@loc.owns@42)) :named ax_1609))
   (assert (! (not (= $@loc.x $@loc.p)) :named ax_1610))
   (assert (! (not (= $@loc.x $@loc.p)) :named ax_1611))
   (assert (! (not (= $@loc.x $@loc.prestate@24)) :named ax_1612))
   (assert (! (not (= $@loc.x $@loc.prestate@27)) :named ax_1613))
   (assert (! (not (= $@loc.x $@loc.prestate@28)) :named ax_1614))
   (assert (! (not (= $@loc.x $@loc.prestate@29)) :named ax_1615))
   (assert (! (not (= $@loc.x $@loc.prestate@31)) :named ax_1616))
   (assert (! (not (= $@loc.x $@loc.prestate@34)) :named ax_1617))
   (assert (! (not (= $@loc.x $@loc.prestate@35)) :named ax_1618))
   (assert (! (not (= $@loc.x $@loc.prestate@37)) :named ax_1619))
   (assert (! (not (= $@loc.x $@loc.prestate@40)) :named ax_1620))
   (assert (! (not (= $@loc.x $@loc.prestate@43)) :named ax_1621))
   (assert (! (not (= $@loc.x $@loc.prestate@44)) :named ax_1622))
   (assert (! (not (= $@loc.x $@loc.res_lambda@4@17)) :named ax_1623))
   (assert (! (not (= $@loc.x $@loc.res_lambda@5@18)) :named ax_1624))
   (assert (! (not (= $@loc.x $@loc.res_lambda@6@19)) :named ax_1625))
   (assert (! (not (= $@loc.x $@loc.res_lambda@7@20)) :named ax_1626))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@25)) :named ax_1627))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@32)) :named ax_1628))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@38)) :named ax_1629))
   (assert (! (not (= $@loc.x $@loc.staticWrapState@41)) :named ax_1630))
   (assert (! (not (= $@loc.x $@loc.t)) :named ax_1631))
   (assert (! (not (= $@loc.x $@loc.t)) :named ax_1632))
   (assert (! (not (= $@loc.x $@tok$1^134.1)) :named ax_1633))
   (assert (! (not (= $@loc.x $@tok$2^0.0)) :named ax_1634))
   (assert (! (not (= $@tok$1^134.1 $@file^?3Cno?20file?3E)) :named ax_1635))
   (assert (! (not (= $@tok$1^134.1 $@file^?3Cno?20file?3E)) :named ax_1636))
   (assert (! (not (= $@tok$1^134.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1637))
   (assert (! (not (= $@tok$1^134.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1638))
   (assert (! (not (= $@tok$1^134.1 $@loc.assign@12)) :named ax_1639))
   (assert (! (not (= $@tok$1^134.1 $@loc.assign@13)) :named ax_1640))
   (assert (! (not (= $@tok$1^134.1 $@loc.n)) :named ax_1641))
   (assert (! (not (= $@tok$1^134.1 $@loc.owns@26)) :named ax_1642))
   (assert (! (not (= $@tok$1^134.1 $@loc.owns@30)) :named ax_1643))
   (assert (! (not (= $@tok$1^134.1 $@loc.owns@33)) :named ax_1644))
   (assert (! (not (= $@tok$1^134.1 $@loc.owns@36)) :named ax_1645))
   (assert (! (not (= $@tok$1^134.1 $@loc.owns@39)) :named ax_1646))
   (assert (! (not (= $@tok$1^134.1 $@loc.owns@42)) :named ax_1647))
   (assert (! (not (= $@tok$1^134.1 $@loc.p)) :named ax_1648))
   (assert (! (not (= $@tok$1^134.1 $@loc.p)) :named ax_1649))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@24)) :named ax_1650))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@27)) :named ax_1651))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@28)) :named ax_1652))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@29)) :named ax_1653))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@31)) :named ax_1654))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@34)) :named ax_1655))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@35)) :named ax_1656))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@37)) :named ax_1657))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@40)) :named ax_1658))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@43)) :named ax_1659))
   (assert (! (not (= $@tok$1^134.1 $@loc.prestate@44)) :named ax_1660))
   (assert (! (not (= $@tok$1^134.1 $@loc.res_lambda@4@17)) :named ax_1661))
   (assert (! (not (= $@tok$1^134.1 $@loc.res_lambda@5@18)) :named ax_1662))
   (assert (! (not (= $@tok$1^134.1 $@loc.res_lambda@6@19)) :named ax_1663))
   (assert (! (not (= $@tok$1^134.1 $@loc.res_lambda@7@20)) :named ax_1664))
   (assert (! (not (= $@tok$1^134.1 $@loc.staticWrapState@25)) :named ax_1665))
   (assert (! (not (= $@tok$1^134.1 $@loc.staticWrapState@32)) :named ax_1666))
   (assert (! (not (= $@tok$1^134.1 $@loc.staticWrapState@38)) :named ax_1667))
   (assert (! (not (= $@tok$1^134.1 $@loc.staticWrapState@41)) :named ax_1668))
   (assert (! (not (= $@tok$1^134.1 $@loc.t)) :named ax_1669))
   (assert (! (not (= $@tok$1^134.1 $@loc.t)) :named ax_1670))
   (assert (! (not (= $@tok$1^134.1 $@loc.x)) :named ax_1671))
   (assert (! (not (= $@tok$1^134.1 $@tok$2^0.0)) :named ax_1672))
   (assert (! (not (= $@tok$1^142.3 $@file^?3Cno?20file?3E)) :named ax_1673))
   (assert (! (not (= $@tok$1^142.3 $@file^?3Cno?20file?3E)) :named ax_1674))
   (assert (! (not (= $@tok$1^142.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1675))
   (assert (! (not (= $@tok$1^142.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1676))
   (assert (! (not (= $@tok$1^142.3 $@loc.assign@12)) :named ax_1677))
   (assert (! (not (= $@tok$1^142.3 $@loc.assign@13)) :named ax_1678))
   (assert (! (not (= $@tok$1^142.3 $@loc.n)) :named ax_1679))
   (assert (! (not (= $@tok$1^142.3 $@loc.owns@26)) :named ax_1680))
   (assert (! (not (= $@tok$1^142.3 $@loc.owns@30)) :named ax_1681))
   (assert (! (not (= $@tok$1^142.3 $@loc.owns@33)) :named ax_1682))
   (assert (! (not (= $@tok$1^142.3 $@loc.owns@36)) :named ax_1683))
   (assert (! (not (= $@tok$1^142.3 $@loc.owns@39)) :named ax_1684))
   (assert (! (not (= $@tok$1^142.3 $@loc.owns@42)) :named ax_1685))
   (assert (! (not (= $@tok$1^142.3 $@loc.p)) :named ax_1686))
   (assert (! (not (= $@tok$1^142.3 $@loc.p)) :named ax_1687))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@24)) :named ax_1688))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@27)) :named ax_1689))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@28)) :named ax_1690))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@29)) :named ax_1691))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@31)) :named ax_1692))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@34)) :named ax_1693))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@35)) :named ax_1694))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@37)) :named ax_1695))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@40)) :named ax_1696))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@43)) :named ax_1697))
   (assert (! (not (= $@tok$1^142.3 $@loc.prestate@44)) :named ax_1698))
   (assert (! (not (= $@tok$1^142.3 $@loc.res_lambda@4@17)) :named ax_1699))
   (assert (! (not (= $@tok$1^142.3 $@loc.res_lambda@5@18)) :named ax_1700))
   (assert (! (not (= $@tok$1^142.3 $@loc.res_lambda@6@19)) :named ax_1701))
   (assert (! (not (= $@tok$1^142.3 $@loc.res_lambda@7@20)) :named ax_1702))
   (assert (! (not (= $@tok$1^142.3 $@loc.staticWrapState@25)) :named ax_1703))
   (assert (! (not (= $@tok$1^142.3 $@loc.staticWrapState@32)) :named ax_1704))
   (assert (! (not (= $@tok$1^142.3 $@loc.staticWrapState@38)) :named ax_1705))
   (assert (! (not (= $@tok$1^142.3 $@loc.staticWrapState@41)) :named ax_1706))
   (assert (! (not (= $@tok$1^142.3 $@loc.t)) :named ax_1707))
   (assert (! (not (= $@tok$1^142.3 $@loc.t)) :named ax_1708))
   (assert (! (not (= $@tok$1^142.3 $@loc.x)) :named ax_1709))
   (assert (! (not (= $@tok$1^142.3 $@loc.x)) :named ax_1710))
   (assert (! (not (= $@tok$1^142.3 $@tok$1^134.1)) :named ax_1711))
   (assert (! (not (= $@tok$1^142.3 $@tok$1^134.1)) :named ax_1712))
   (assert (! (not (= $@tok$1^142.3 $@tok$2^0.0)) :named ax_1713))
   (assert (! (not (= $@tok$1^144.19 $@file^?3Cno?20file?3E)) :named ax_1714))
   (assert (! (not (= $@tok$1^144.19 $@file^?3Cno?20file?3E)) :named ax_1715))
   (assert (! (not (= $@tok$1^144.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1716))
   (assert (! (not (= $@tok$1^144.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1717))
   (assert (! (not (= $@tok$1^144.19 $@loc.assign@12)) :named ax_1718))
   (assert (! (not (= $@tok$1^144.19 $@loc.assign@13)) :named ax_1719))
   (assert (! (not (= $@tok$1^144.19 $@loc.n)) :named ax_1720))
   (assert (! (not (= $@tok$1^144.19 $@loc.n)) :named ax_1721))
   (assert (! (not (= $@tok$1^144.19 $@loc.owns@26)) :named ax_1722))
   (assert (! (not (= $@tok$1^144.19 $@loc.owns@30)) :named ax_1723))
   (assert (! (not (= $@tok$1^144.19 $@loc.owns@33)) :named ax_1724))
   (assert (! (not (= $@tok$1^144.19 $@loc.owns@36)) :named ax_1725))
   (assert (! (not (= $@tok$1^144.19 $@loc.owns@39)) :named ax_1726))
   (assert (! (not (= $@tok$1^144.19 $@loc.owns@42)) :named ax_1727))
   (assert (! (not (= $@tok$1^144.19 $@loc.p)) :named ax_1728))
   (assert (! (not (= $@tok$1^144.19 $@loc.p)) :named ax_1729))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@24)) :named ax_1730))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@24)) :named ax_1731))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@27)) :named ax_1732))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@28)) :named ax_1733))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@29)) :named ax_1734))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@31)) :named ax_1735))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@34)) :named ax_1736))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@35)) :named ax_1737))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@37)) :named ax_1738))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@40)) :named ax_1739))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@43)) :named ax_1740))
   (assert (! (not (= $@tok$1^144.19 $@loc.prestate@44)) :named ax_1741))
   (assert (! (not (= $@tok$1^144.19 $@loc.res_lambda@4@17)) :named ax_1742))
   (assert (! (not (= $@tok$1^144.19 $@loc.res_lambda@5@18)) :named ax_1743))
   (assert (! (not (= $@tok$1^144.19 $@loc.res_lambda@6@19)) :named ax_1744))
   (assert (! (not (= $@tok$1^144.19 $@loc.res_lambda@7@20)) :named ax_1745))
   (assert (! (not (= $@tok$1^144.19 $@loc.staticWrapState@25)) :named ax_1746))
   (assert (! (not (= $@tok$1^144.19 $@loc.staticWrapState@32)) :named ax_1747))
   (assert (! (not (= $@tok$1^144.19 $@loc.staticWrapState@38)) :named ax_1748))
   (assert (! (not (= $@tok$1^144.19 $@loc.staticWrapState@41)) :named ax_1749))
   (assert (! (not (= $@tok$1^144.19 $@loc.t)) :named ax_1750))
   (assert (! (not (= $@tok$1^144.19 $@loc.t)) :named ax_1751))
   (assert (! (not (= $@tok$1^144.19 $@loc.x)) :named ax_1752))
   (assert (! (not (= $@tok$1^144.19 $@loc.x)) :named ax_1753))
   (assert (! (not (= $@tok$1^144.19 $@tok$1^134.1)) :named ax_1754))
   (assert (! (not (= $@tok$1^144.19 $@tok$1^134.1)) :named ax_1755))
   (assert (! (not (= $@tok$1^144.19 $@tok$1^142.3)) :named ax_1756))
   (assert (! (not (= $@tok$1^144.19 $@tok$1^142.3)) :named ax_1757))
   (assert (! (not (= $@tok$1^144.19 $@tok$2^0.0)) :named ax_1758))
   (assert (! (not (= $@tok$1^146.13 $@file^?3Cno?20file?3E)) :named ax_1759))
   (assert (! (not (= $@tok$1^146.13 $@file^?3Cno?20file?3E)) :named ax_1760))
   (assert (! (not (= $@tok$1^146.13 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1761))
   (assert (! (not (= $@tok$1^146.13 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1762))
   (assert (! (not (= $@tok$1^146.13 $@loc.assign@12)) :named ax_1763))
   (assert (! (not (= $@tok$1^146.13 $@loc.assign@12)) :named ax_1764))
   (assert (! (not (= $@tok$1^146.13 $@loc.assign@13)) :named ax_1765))
   (assert (! (not (= $@tok$1^146.13 $@loc.assign@13)) :named ax_1766))
   (assert (! (not (= $@tok$1^146.13 $@loc.n)) :named ax_1767))
   (assert (! (not (= $@tok$1^146.13 $@loc.n)) :named ax_1768))
   (assert (! (not (= $@tok$1^146.13 $@loc.owns@26)) :named ax_1769))
   (assert (! (not (= $@tok$1^146.13 $@loc.owns@30)) :named ax_1770))
   (assert (! (not (= $@tok$1^146.13 $@loc.owns@33)) :named ax_1771))
   (assert (! (not (= $@tok$1^146.13 $@loc.owns@36)) :named ax_1772))
   (assert (! (not (= $@tok$1^146.13 $@loc.owns@39)) :named ax_1773))
   (assert (! (not (= $@tok$1^146.13 $@loc.owns@42)) :named ax_1774))
   (assert (! (not (= $@tok$1^146.13 $@loc.p)) :named ax_1775))
   (assert (! (not (= $@tok$1^146.13 $@loc.p)) :named ax_1776))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@24)) :named ax_1777))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@24)) :named ax_1778))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@27)) :named ax_1779))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@28)) :named ax_1780))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@29)) :named ax_1781))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@31)) :named ax_1782))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@34)) :named ax_1783))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@35)) :named ax_1784))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@37)) :named ax_1785))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@40)) :named ax_1786))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@43)) :named ax_1787))
   (assert (! (not (= $@tok$1^146.13 $@loc.prestate@44)) :named ax_1788))
   (assert (! (not (= $@tok$1^146.13 $@loc.res_lambda@4@17)) :named ax_1789))
   (assert (! (not (= $@tok$1^146.13 $@loc.res_lambda@5@18)) :named ax_1790))
   (assert (! (not (= $@tok$1^146.13 $@loc.res_lambda@6@19)) :named ax_1791))
   (assert (! (not (= $@tok$1^146.13 $@loc.res_lambda@7@20)) :named ax_1792))
   (assert (! (not (= $@tok$1^146.13 $@loc.staticWrapState@25)) :named ax_1793))
   (assert (! (not (= $@tok$1^146.13 $@loc.staticWrapState@32)) :named ax_1794))
   (assert (! (not (= $@tok$1^146.13 $@loc.staticWrapState@38)) :named ax_1795))
   (assert (! (not (= $@tok$1^146.13 $@loc.staticWrapState@41)) :named ax_1796))
   (assert (! (not (= $@tok$1^146.13 $@loc.t)) :named ax_1797))
   (assert (! (not (= $@tok$1^146.13 $@loc.t)) :named ax_1798))
   (assert (! (not (= $@tok$1^146.13 $@loc.x)) :named ax_1799))
   (assert (! (not (= $@tok$1^146.13 $@loc.x)) :named ax_1800))
   (assert (! (not (= $@tok$1^146.13 $@tok$1^134.1)) :named ax_1801))
   (assert (! (not (= $@tok$1^146.13 $@tok$1^134.1)) :named ax_1802))
   (assert (! (not (= $@tok$1^146.13 $@tok$1^142.3)) :named ax_1803))
   (assert (! (not (= $@tok$1^146.13 $@tok$1^142.3)) :named ax_1804))
   (assert (! (not (= $@tok$1^146.13 $@tok$1^144.19)) :named ax_1805))
   (assert (! (not (= $@tok$1^146.13 $@tok$1^144.19)) :named ax_1806))
   (assert (! (not (= $@tok$1^146.13 $@tok$1^146.24)) :named ax_1807))
   (assert (! (not (= $@tok$1^146.13 $@tok$2^0.0)) :named ax_1808))
   (assert (! (not (= $@tok$1^146.24 $@file^?3Cno?20file?3E)) :named ax_1809))
   (assert (! (not (= $@tok$1^146.24 $@file^?3Cno?20file?3E)) :named ax_1810))
   (assert (! (not (= $@tok$1^146.24 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1811))
   (assert (! (not (= $@tok$1^146.24 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1812))
   (assert (! (not (= $@tok$1^146.24 $@loc.assign@12)) :named ax_1813))
   (assert (! (not (= $@tok$1^146.24 $@loc.assign@12)) :named ax_1814))
   (assert (! (not (= $@tok$1^146.24 $@loc.assign@13)) :named ax_1815))
   (assert (! (not (= $@tok$1^146.24 $@loc.assign@13)) :named ax_1816))
   (assert (! (not (= $@tok$1^146.24 $@loc.n)) :named ax_1817))
   (assert (! (not (= $@tok$1^146.24 $@loc.n)) :named ax_1818))
   (assert (! (not (= $@tok$1^146.24 $@loc.owns@26)) :named ax_1819))
   (assert (! (not (= $@tok$1^146.24 $@loc.owns@30)) :named ax_1820))
   (assert (! (not (= $@tok$1^146.24 $@loc.owns@33)) :named ax_1821))
   (assert (! (not (= $@tok$1^146.24 $@loc.owns@36)) :named ax_1822))
   (assert (! (not (= $@tok$1^146.24 $@loc.owns@39)) :named ax_1823))
   (assert (! (not (= $@tok$1^146.24 $@loc.owns@42)) :named ax_1824))
   (assert (! (not (= $@tok$1^146.24 $@loc.p)) :named ax_1825))
   (assert (! (not (= $@tok$1^146.24 $@loc.p)) :named ax_1826))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@24)) :named ax_1827))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@24)) :named ax_1828))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@27)) :named ax_1829))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@28)) :named ax_1830))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@29)) :named ax_1831))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@31)) :named ax_1832))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@34)) :named ax_1833))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@35)) :named ax_1834))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@37)) :named ax_1835))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@40)) :named ax_1836))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@43)) :named ax_1837))
   (assert (! (not (= $@tok$1^146.24 $@loc.prestate@44)) :named ax_1838))
   (assert (! (not (= $@tok$1^146.24 $@loc.res_lambda@4@17)) :named ax_1839))
   (assert (! (not (= $@tok$1^146.24 $@loc.res_lambda@5@18)) :named ax_1840))
   (assert (! (not (= $@tok$1^146.24 $@loc.res_lambda@6@19)) :named ax_1841))
   (assert (! (not (= $@tok$1^146.24 $@loc.res_lambda@7@20)) :named ax_1842))
   (assert (! (not (= $@tok$1^146.24 $@loc.staticWrapState@25)) :named ax_1843))
   (assert (! (not (= $@tok$1^146.24 $@loc.staticWrapState@32)) :named ax_1844))
   (assert (! (not (= $@tok$1^146.24 $@loc.staticWrapState@38)) :named ax_1845))
   (assert (! (not (= $@tok$1^146.24 $@loc.staticWrapState@41)) :named ax_1846))
   (assert (! (not (= $@tok$1^146.24 $@loc.t)) :named ax_1847))
   (assert (! (not (= $@tok$1^146.24 $@loc.t)) :named ax_1848))
   (assert (! (not (= $@tok$1^146.24 $@loc.x)) :named ax_1849))
   (assert (! (not (= $@tok$1^146.24 $@loc.x)) :named ax_1850))
   (assert (! (not (= $@tok$1^146.24 $@tok$1^134.1)) :named ax_1851))
   (assert (! (not (= $@tok$1^146.24 $@tok$1^134.1)) :named ax_1852))
   (assert (! (not (= $@tok$1^146.24 $@tok$1^142.3)) :named ax_1853))
   (assert (! (not (= $@tok$1^146.24 $@tok$1^142.3)) :named ax_1854))
   (assert (! (not (= $@tok$1^146.24 $@tok$1^144.19)) :named ax_1855))
   (assert (! (not (= $@tok$1^146.24 $@tok$1^144.19)) :named ax_1856))
   (assert (! (not (= $@tok$1^146.24 $@tok$1^146.13)) :named ax_1857))
   (assert (! (not (= $@tok$1^146.24 $@tok$2^0.0)) :named ax_1858))
   (assert (! (not (= $@tok$1^146.3 $@file^?3Cno?20file?3E)) :named ax_1859))
   (assert (! (not (= $@tok$1^146.3 $@file^?3Cno?20file?3E)) :named ax_1860))
   (assert (! (not (= $@tok$1^146.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1861))
   (assert (! (not (= $@tok$1^146.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1862))
   (assert (! (not (= $@tok$1^146.3 $@loc.assign@12)) :named ax_1863))
   (assert (! (not (= $@tok$1^146.3 $@loc.assign@12)) :named ax_1864))
   (assert (! (not (= $@tok$1^146.3 $@loc.assign@13)) :named ax_1865))
   (assert (! (not (= $@tok$1^146.3 $@loc.assign@13)) :named ax_1866))
   (assert (! (not (= $@tok$1^146.3 $@loc.n)) :named ax_1867))
   (assert (! (not (= $@tok$1^146.3 $@loc.n)) :named ax_1868))
   (assert (! (not (= $@tok$1^146.3 $@loc.owns@26)) :named ax_1869))
   (assert (! (not (= $@tok$1^146.3 $@loc.owns@30)) :named ax_1870))
   (assert (! (not (= $@tok$1^146.3 $@loc.owns@33)) :named ax_1871))
   (assert (! (not (= $@tok$1^146.3 $@loc.owns@36)) :named ax_1872))
   (assert (! (not (= $@tok$1^146.3 $@loc.owns@39)) :named ax_1873))
   (assert (! (not (= $@tok$1^146.3 $@loc.owns@42)) :named ax_1874))
   (assert (! (not (= $@tok$1^146.3 $@loc.p)) :named ax_1875))
   (assert (! (not (= $@tok$1^146.3 $@loc.p)) :named ax_1876))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@24)) :named ax_1877))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@24)) :named ax_1878))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@27)) :named ax_1879))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@28)) :named ax_1880))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@29)) :named ax_1881))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@31)) :named ax_1882))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@34)) :named ax_1883))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@35)) :named ax_1884))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@37)) :named ax_1885))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@40)) :named ax_1886))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@43)) :named ax_1887))
   (assert (! (not (= $@tok$1^146.3 $@loc.prestate@44)) :named ax_1888))
   (assert (! (not (= $@tok$1^146.3 $@loc.res_lambda@4@17)) :named ax_1889))
   (assert (! (not (= $@tok$1^146.3 $@loc.res_lambda@5@18)) :named ax_1890))
   (assert (! (not (= $@tok$1^146.3 $@loc.res_lambda@6@19)) :named ax_1891))
   (assert (! (not (= $@tok$1^146.3 $@loc.res_lambda@7@20)) :named ax_1892))
   (assert (! (not (= $@tok$1^146.3 $@loc.staticWrapState@25)) :named ax_1893))
   (assert (! (not (= $@tok$1^146.3 $@loc.staticWrapState@32)) :named ax_1894))
   (assert (! (not (= $@tok$1^146.3 $@loc.staticWrapState@38)) :named ax_1895))
   (assert (! (not (= $@tok$1^146.3 $@loc.staticWrapState@41)) :named ax_1896))
   (assert (! (not (= $@tok$1^146.3 $@loc.t)) :named ax_1897))
   (assert (! (not (= $@tok$1^146.3 $@loc.t)) :named ax_1898))
   (assert (! (not (= $@tok$1^146.3 $@loc.x)) :named ax_1899))
   (assert (! (not (= $@tok$1^146.3 $@loc.x)) :named ax_1900))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^134.1)) :named ax_1901))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^134.1)) :named ax_1902))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^142.3)) :named ax_1903))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^142.3)) :named ax_1904))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^144.19)) :named ax_1905))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^144.19)) :named ax_1906))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^146.13)) :named ax_1907))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^146.13)) :named ax_1908))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^146.24)) :named ax_1909))
   (assert (! (not (= $@tok$1^146.3 $@tok$1^146.24)) :named ax_1910))
   (assert (! (not (= $@tok$1^146.3 $@tok$2^0.0)) :named ax_1911))
   (assert (! (not (= $@tok$1^148.3 $@file^?3Cno?20file?3E)) :named ax_1912))
   (assert (! (not (= $@tok$1^148.3 $@file^?3Cno?20file?3E)) :named ax_1913))
   (assert (! (not (= $@tok$1^148.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1914))
   (assert (! (not (= $@tok$1^148.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1915))
   (assert (! (not (= $@tok$1^148.3 $@loc.assign@12)) :named ax_1916))
   (assert (! (not (= $@tok$1^148.3 $@loc.assign@12)) :named ax_1917))
   (assert (! (not (= $@tok$1^148.3 $@loc.assign@13)) :named ax_1918))
   (assert (! (not (= $@tok$1^148.3 $@loc.assign@13)) :named ax_1919))
   (assert (! (not (= $@tok$1^148.3 $@loc.n)) :named ax_1920))
   (assert (! (not (= $@tok$1^148.3 $@loc.n)) :named ax_1921))
   (assert (! (not (= $@tok$1^148.3 $@loc.owns@26)) :named ax_1922))
   (assert (! (not (= $@tok$1^148.3 $@loc.owns@30)) :named ax_1923))
   (assert (! (not (= $@tok$1^148.3 $@loc.owns@33)) :named ax_1924))
   (assert (! (not (= $@tok$1^148.3 $@loc.owns@36)) :named ax_1925))
   (assert (! (not (= $@tok$1^148.3 $@loc.owns@39)) :named ax_1926))
   (assert (! (not (= $@tok$1^148.3 $@loc.owns@42)) :named ax_1927))
   (assert (! (not (= $@tok$1^148.3 $@loc.p)) :named ax_1928))
   (assert (! (not (= $@tok$1^148.3 $@loc.p)) :named ax_1929))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@24)) :named ax_1930))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@24)) :named ax_1931))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@27)) :named ax_1932))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@28)) :named ax_1933))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@29)) :named ax_1934))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@31)) :named ax_1935))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@34)) :named ax_1936))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@35)) :named ax_1937))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@37)) :named ax_1938))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@40)) :named ax_1939))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@43)) :named ax_1940))
   (assert (! (not (= $@tok$1^148.3 $@loc.prestate@44)) :named ax_1941))
   (assert (! (not (= $@tok$1^148.3 $@loc.res_lambda@4@17)) :named ax_1942))
   (assert (! (not (= $@tok$1^148.3 $@loc.res_lambda@5@18)) :named ax_1943))
   (assert (! (not (= $@tok$1^148.3 $@loc.res_lambda@6@19)) :named ax_1944))
   (assert (! (not (= $@tok$1^148.3 $@loc.res_lambda@7@20)) :named ax_1945))
   (assert (! (not (= $@tok$1^148.3 $@loc.staticWrapState@25)) :named ax_1946))
   (assert (! (not (= $@tok$1^148.3 $@loc.staticWrapState@32)) :named ax_1947))
   (assert (! (not (= $@tok$1^148.3 $@loc.staticWrapState@38)) :named ax_1948))
   (assert (! (not (= $@tok$1^148.3 $@loc.staticWrapState@41)) :named ax_1949))
   (assert (! (not (= $@tok$1^148.3 $@loc.t)) :named ax_1950))
   (assert (! (not (= $@tok$1^148.3 $@loc.t)) :named ax_1951))
   (assert (! (not (= $@tok$1^148.3 $@loc.x)) :named ax_1952))
   (assert (! (not (= $@tok$1^148.3 $@loc.x)) :named ax_1953))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^134.1)) :named ax_1954))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^134.1)) :named ax_1955))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^142.3)) :named ax_1956))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^142.3)) :named ax_1957))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^144.19)) :named ax_1958))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^144.19)) :named ax_1959))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^146.13)) :named ax_1960))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^146.13)) :named ax_1961))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^146.24)) :named ax_1962))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^146.24)) :named ax_1963))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^146.3)) :named ax_1964))
   (assert (! (not (= $@tok$1^148.3 $@tok$1^146.3)) :named ax_1965))
   (assert (! (not (= $@tok$1^148.3 $@tok$2^0.0)) :named ax_1966))
   (assert (! (not (= $@tok$1^151.14 $@file^?3Cno?20file?3E)) :named ax_1967))
   (assert (! (not (= $@tok$1^151.14 $@file^?3Cno?20file?3E)) :named ax_1968))
   (assert (! (not (= $@tok$1^151.14 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1969))
   (assert (! (not (= $@tok$1^151.14 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_1970))
   (assert (! (not (= $@tok$1^151.14 $@loc.assign@12)) :named ax_1971))
   (assert (! (not (= $@tok$1^151.14 $@loc.assign@12)) :named ax_1972))
   (assert (! (not (= $@tok$1^151.14 $@loc.assign@13)) :named ax_1973))
   (assert (! (not (= $@tok$1^151.14 $@loc.assign@13)) :named ax_1974))
   (assert (! (not (= $@tok$1^151.14 $@loc.n)) :named ax_1975))
   (assert (! (not (= $@tok$1^151.14 $@loc.n)) :named ax_1976))
   (assert (! (not (= $@tok$1^151.14 $@loc.owns@26)) :named ax_1977))
   (assert (! (not (= $@tok$1^151.14 $@loc.owns@30)) :named ax_1978))
   (assert (! (not (= $@tok$1^151.14 $@loc.owns@33)) :named ax_1979))
   (assert (! (not (= $@tok$1^151.14 $@loc.owns@36)) :named ax_1980))
   (assert (! (not (= $@tok$1^151.14 $@loc.owns@39)) :named ax_1981))
   (assert (! (not (= $@tok$1^151.14 $@loc.owns@42)) :named ax_1982))
   (assert (! (not (= $@tok$1^151.14 $@loc.p)) :named ax_1983))
   (assert (! (not (= $@tok$1^151.14 $@loc.p)) :named ax_1984))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@24)) :named ax_1985))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@24)) :named ax_1986))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@27)) :named ax_1987))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@28)) :named ax_1988))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@29)) :named ax_1989))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@31)) :named ax_1990))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@34)) :named ax_1991))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@35)) :named ax_1992))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@37)) :named ax_1993))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@40)) :named ax_1994))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@43)) :named ax_1995))
   (assert (! (not (= $@tok$1^151.14 $@loc.prestate@44)) :named ax_1996))
   (assert (! (not (= $@tok$1^151.14 $@loc.res_lambda@4@17)) :named ax_1997))
   (assert (! (not (= $@tok$1^151.14 $@loc.res_lambda@5@18)) :named ax_1998))
   (assert (! (not (= $@tok$1^151.14 $@loc.res_lambda@6@19)) :named ax_1999))
   (assert (! (not (= $@tok$1^151.14 $@loc.res_lambda@7@20)) :named ax_2000))
   (assert (! (not (= $@tok$1^151.14 $@loc.staticWrapState@25)) :named ax_2001))
   (assert (! (not (= $@tok$1^151.14 $@loc.staticWrapState@32)) :named ax_2002))
   (assert (! (not (= $@tok$1^151.14 $@loc.staticWrapState@38)) :named ax_2003))
   (assert (! (not (= $@tok$1^151.14 $@loc.staticWrapState@41)) :named ax_2004))
   (assert (! (not (= $@tok$1^151.14 $@loc.t)) :named ax_2005))
   (assert (! (not (= $@tok$1^151.14 $@loc.t)) :named ax_2006))
   (assert (! (not (= $@tok$1^151.14 $@loc.x)) :named ax_2007))
   (assert (! (not (= $@tok$1^151.14 $@loc.x)) :named ax_2008))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^134.1)) :named ax_2009))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^134.1)) :named ax_2010))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^142.3)) :named ax_2011))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^142.3)) :named ax_2012))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^144.19)) :named ax_2013))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^144.19)) :named ax_2014))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^146.13)) :named ax_2015))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^146.13)) :named ax_2016))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^146.24)) :named ax_2017))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^146.24)) :named ax_2018))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^146.3)) :named ax_2019))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^146.3)) :named ax_2020))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^148.3)) :named ax_2021))
   (assert (! (not (= $@tok$1^151.14 $@tok$1^148.3)) :named ax_2022))
   (assert (! (not (= $@tok$1^151.14 $@tok$2^0.0)) :named ax_2023))
   (assert (! (not (= $@tok$1^151.5 $@file^?3Cno?20file?3E)) :named ax_2024))
   (assert (! (not (= $@tok$1^151.5 $@file^?3Cno?20file?3E)) :named ax_2025))
   (assert (! (not (= $@tok$1^151.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2026))
   (assert (! (not (= $@tok$1^151.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2027))
   (assert (! (not (= $@tok$1^151.5 $@loc.assign@12)) :named ax_2028))
   (assert (! (not (= $@tok$1^151.5 $@loc.assign@12)) :named ax_2029))
   (assert (! (not (= $@tok$1^151.5 $@loc.assign@13)) :named ax_2030))
   (assert (! (not (= $@tok$1^151.5 $@loc.assign@13)) :named ax_2031))
   (assert (! (not (= $@tok$1^151.5 $@loc.n)) :named ax_2032))
   (assert (! (not (= $@tok$1^151.5 $@loc.n)) :named ax_2033))
   (assert (! (not (= $@tok$1^151.5 $@loc.owns@26)) :named ax_2034))
   (assert (! (not (= $@tok$1^151.5 $@loc.owns@30)) :named ax_2035))
   (assert (! (not (= $@tok$1^151.5 $@loc.owns@33)) :named ax_2036))
   (assert (! (not (= $@tok$1^151.5 $@loc.owns@36)) :named ax_2037))
   (assert (! (not (= $@tok$1^151.5 $@loc.owns@39)) :named ax_2038))
   (assert (! (not (= $@tok$1^151.5 $@loc.owns@42)) :named ax_2039))
   (assert (! (not (= $@tok$1^151.5 $@loc.p)) :named ax_2040))
   (assert (! (not (= $@tok$1^151.5 $@loc.p)) :named ax_2041))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@24)) :named ax_2042))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@24)) :named ax_2043))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@27)) :named ax_2044))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@28)) :named ax_2045))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@29)) :named ax_2046))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@31)) :named ax_2047))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@34)) :named ax_2048))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@35)) :named ax_2049))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@37)) :named ax_2050))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@40)) :named ax_2051))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@43)) :named ax_2052))
   (assert (! (not (= $@tok$1^151.5 $@loc.prestate@44)) :named ax_2053))
   (assert (! (not (= $@tok$1^151.5 $@loc.res_lambda@4@17)) :named ax_2054))
   (assert (! (not (= $@tok$1^151.5 $@loc.res_lambda@4@17)) :named ax_2055))
   (assert (! (not (= $@tok$1^151.5 $@loc.res_lambda@5@18)) :named ax_2056))
   (assert (! (not (= $@tok$1^151.5 $@loc.res_lambda@6@19)) :named ax_2057))
   (assert (! (not (= $@tok$1^151.5 $@loc.res_lambda@7@20)) :named ax_2058))
   (assert (! (not (= $@tok$1^151.5 $@loc.staticWrapState@25)) :named ax_2059))
   (assert (! (not (= $@tok$1^151.5 $@loc.staticWrapState@32)) :named ax_2060))
   (assert (! (not (= $@tok$1^151.5 $@loc.staticWrapState@38)) :named ax_2061))
   (assert (! (not (= $@tok$1^151.5 $@loc.staticWrapState@41)) :named ax_2062))
   (assert (! (not (= $@tok$1^151.5 $@loc.t)) :named ax_2063))
   (assert (! (not (= $@tok$1^151.5 $@loc.t)) :named ax_2064))
   (assert (! (not (= $@tok$1^151.5 $@loc.x)) :named ax_2065))
   (assert (! (not (= $@tok$1^151.5 $@loc.x)) :named ax_2066))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^134.1)) :named ax_2067))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^134.1)) :named ax_2068))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^142.3)) :named ax_2069))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^142.3)) :named ax_2070))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^144.19)) :named ax_2071))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^144.19)) :named ax_2072))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^146.13)) :named ax_2073))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^146.13)) :named ax_2074))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^146.24)) :named ax_2075))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^146.24)) :named ax_2076))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^146.3)) :named ax_2077))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^146.3)) :named ax_2078))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^148.3)) :named ax_2079))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^148.3)) :named ax_2080))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^151.14)) :named ax_2081))
   (assert (! (not (= $@tok$1^151.5 $@tok$1^151.14)) :named ax_2082))
   (assert (! (not (= $@tok$1^151.5 $@tok$2^0.0)) :named ax_2083))
   (assert (! (not (= $@tok$1^152.5 $@file^?3Cno?20file?3E)) :named ax_2084))
   (assert (! (not (= $@tok$1^152.5 $@file^?3Cno?20file?3E)) :named ax_2085))
   (assert (! (not (= $@tok$1^152.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2086))
   (assert (! (not (= $@tok$1^152.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2087))
   (assert (! (not (= $@tok$1^152.5 $@loc.assign@12)) :named ax_2088))
   (assert (! (not (= $@tok$1^152.5 $@loc.assign@12)) :named ax_2089))
   (assert (! (not (= $@tok$1^152.5 $@loc.assign@13)) :named ax_2090))
   (assert (! (not (= $@tok$1^152.5 $@loc.assign@13)) :named ax_2091))
   (assert (! (not (= $@tok$1^152.5 $@loc.n)) :named ax_2092))
   (assert (! (not (= $@tok$1^152.5 $@loc.n)) :named ax_2093))
   (assert (! (not (= $@tok$1^152.5 $@loc.owns@26)) :named ax_2094))
   (assert (! (not (= $@tok$1^152.5 $@loc.owns@30)) :named ax_2095))
   (assert (! (not (= $@tok$1^152.5 $@loc.owns@33)) :named ax_2096))
   (assert (! (not (= $@tok$1^152.5 $@loc.owns@36)) :named ax_2097))
   (assert (! (not (= $@tok$1^152.5 $@loc.owns@39)) :named ax_2098))
   (assert (! (not (= $@tok$1^152.5 $@loc.owns@42)) :named ax_2099))
   (assert (! (not (= $@tok$1^152.5 $@loc.p)) :named ax_2100))
   (assert (! (not (= $@tok$1^152.5 $@loc.p)) :named ax_2101))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@24)) :named ax_2102))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@24)) :named ax_2103))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@27)) :named ax_2104))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@28)) :named ax_2105))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@29)) :named ax_2106))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@31)) :named ax_2107))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@34)) :named ax_2108))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@35)) :named ax_2109))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@37)) :named ax_2110))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@40)) :named ax_2111))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@43)) :named ax_2112))
   (assert (! (not (= $@tok$1^152.5 $@loc.prestate@44)) :named ax_2113))
   (assert (! (not (= $@tok$1^152.5 $@loc.res_lambda@4@17)) :named ax_2114))
   (assert (! (not (= $@tok$1^152.5 $@loc.res_lambda@4@17)) :named ax_2115))
   (assert (! (not (= $@tok$1^152.5 $@loc.res_lambda@5@18)) :named ax_2116))
   (assert (! (not (= $@tok$1^152.5 $@loc.res_lambda@6@19)) :named ax_2117))
   (assert (! (not (= $@tok$1^152.5 $@loc.res_lambda@7@20)) :named ax_2118))
   (assert (! (not (= $@tok$1^152.5 $@loc.staticWrapState@25)) :named ax_2119))
   (assert (! (not (= $@tok$1^152.5 $@loc.staticWrapState@32)) :named ax_2120))
   (assert (! (not (= $@tok$1^152.5 $@loc.staticWrapState@38)) :named ax_2121))
   (assert (! (not (= $@tok$1^152.5 $@loc.staticWrapState@41)) :named ax_2122))
   (assert (! (not (= $@tok$1^152.5 $@loc.t)) :named ax_2123))
   (assert (! (not (= $@tok$1^152.5 $@loc.t)) :named ax_2124))
   (assert (! (not (= $@tok$1^152.5 $@loc.x)) :named ax_2125))
   (assert (! (not (= $@tok$1^152.5 $@loc.x)) :named ax_2126))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^134.1)) :named ax_2127))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^134.1)) :named ax_2128))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^142.3)) :named ax_2129))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^142.3)) :named ax_2130))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^144.19)) :named ax_2131))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^144.19)) :named ax_2132))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^146.13)) :named ax_2133))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^146.13)) :named ax_2134))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^146.24)) :named ax_2135))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^146.24)) :named ax_2136))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^146.3)) :named ax_2137))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^146.3)) :named ax_2138))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^148.3)) :named ax_2139))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^148.3)) :named ax_2140))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^151.14)) :named ax_2141))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^151.14)) :named ax_2142))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^151.5)) :named ax_2143))
   (assert (! (not (= $@tok$1^152.5 $@tok$1^151.5)) :named ax_2144))
   (assert (! (not (= $@tok$1^152.5 $@tok$2^0.0)) :named ax_2145))
   (assert (! (not (= $@tok$1^153.15 $@file^?3Cno?20file?3E)) :named ax_2146))
   (assert (! (not (= $@tok$1^153.15 $@file^?3Cno?20file?3E)) :named ax_2147))
   (assert (! (not (= $@tok$1^153.15 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2148))
   (assert (! (not (= $@tok$1^153.15 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2149))
   (assert (! (not (= $@tok$1^153.15 $@loc.assign@12)) :named ax_2150))
   (assert (! (not (= $@tok$1^153.15 $@loc.assign@12)) :named ax_2151))
   (assert (! (not (= $@tok$1^153.15 $@loc.assign@13)) :named ax_2152))
   (assert (! (not (= $@tok$1^153.15 $@loc.assign@13)) :named ax_2153))
   (assert (! (not (= $@tok$1^153.15 $@loc.n)) :named ax_2154))
   (assert (! (not (= $@tok$1^153.15 $@loc.n)) :named ax_2155))
   (assert (! (not (= $@tok$1^153.15 $@loc.owns@26)) :named ax_2156))
   (assert (! (not (= $@tok$1^153.15 $@loc.owns@30)) :named ax_2157))
   (assert (! (not (= $@tok$1^153.15 $@loc.owns@33)) :named ax_2158))
   (assert (! (not (= $@tok$1^153.15 $@loc.owns@36)) :named ax_2159))
   (assert (! (not (= $@tok$1^153.15 $@loc.owns@39)) :named ax_2160))
   (assert (! (not (= $@tok$1^153.15 $@loc.owns@42)) :named ax_2161))
   (assert (! (not (= $@tok$1^153.15 $@loc.p)) :named ax_2162))
   (assert (! (not (= $@tok$1^153.15 $@loc.p)) :named ax_2163))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@24)) :named ax_2164))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@24)) :named ax_2165))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@27)) :named ax_2166))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@28)) :named ax_2167))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@29)) :named ax_2168))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@31)) :named ax_2169))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@34)) :named ax_2170))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@35)) :named ax_2171))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@37)) :named ax_2172))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@40)) :named ax_2173))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@43)) :named ax_2174))
   (assert (! (not (= $@tok$1^153.15 $@loc.prestate@44)) :named ax_2175))
   (assert (! (not (= $@tok$1^153.15 $@loc.res_lambda@4@17)) :named ax_2176))
   (assert (! (not (= $@tok$1^153.15 $@loc.res_lambda@4@17)) :named ax_2177))
   (assert (! (not (= $@tok$1^153.15 $@loc.res_lambda@5@18)) :named ax_2178))
   (assert (! (not (= $@tok$1^153.15 $@loc.res_lambda@6@19)) :named ax_2179))
   (assert (! (not (= $@tok$1^153.15 $@loc.res_lambda@7@20)) :named ax_2180))
   (assert (! (not (= $@tok$1^153.15 $@loc.staticWrapState@25)) :named ax_2181))
   (assert (! (not (= $@tok$1^153.15 $@loc.staticWrapState@32)) :named ax_2182))
   (assert (! (not (= $@tok$1^153.15 $@loc.staticWrapState@38)) :named ax_2183))
   (assert (! (not (= $@tok$1^153.15 $@loc.staticWrapState@41)) :named ax_2184))
   (assert (! (not (= $@tok$1^153.15 $@loc.t)) :named ax_2185))
   (assert (! (not (= $@tok$1^153.15 $@loc.t)) :named ax_2186))
   (assert (! (not (= $@tok$1^153.15 $@loc.x)) :named ax_2187))
   (assert (! (not (= $@tok$1^153.15 $@loc.x)) :named ax_2188))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^134.1)) :named ax_2189))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^134.1)) :named ax_2190))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^142.3)) :named ax_2191))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^142.3)) :named ax_2192))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^144.19)) :named ax_2193))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^144.19)) :named ax_2194))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^146.13)) :named ax_2195))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^146.13)) :named ax_2196))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^146.24)) :named ax_2197))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^146.24)) :named ax_2198))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^146.3)) :named ax_2199))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^146.3)) :named ax_2200))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^148.3)) :named ax_2201))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^148.3)) :named ax_2202))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^151.14)) :named ax_2203))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^151.14)) :named ax_2204))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^151.5)) :named ax_2205))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^151.5)) :named ax_2206))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^152.5)) :named ax_2207))
   (assert (! (not (= $@tok$1^153.15 $@tok$1^152.5)) :named ax_2208))
   (assert (! (not (= $@tok$1^153.15 $@tok$2^0.0)) :named ax_2209))
   (assert (! (not (= $@tok$1^153.5 $@file^?3Cno?20file?3E)) :named ax_2210))
   (assert (! (not (= $@tok$1^153.5 $@file^?3Cno?20file?3E)) :named ax_2211))
   (assert (! (not (= $@tok$1^153.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2212))
   (assert (! (not (= $@tok$1^153.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2213))
   (assert (! (not (= $@tok$1^153.5 $@loc.assign@12)) :named ax_2214))
   (assert (! (not (= $@tok$1^153.5 $@loc.assign@12)) :named ax_2215))
   (assert (! (not (= $@tok$1^153.5 $@loc.assign@13)) :named ax_2216))
   (assert (! (not (= $@tok$1^153.5 $@loc.assign@13)) :named ax_2217))
   (assert (! (not (= $@tok$1^153.5 $@loc.n)) :named ax_2218))
   (assert (! (not (= $@tok$1^153.5 $@loc.n)) :named ax_2219))
   (assert (! (not (= $@tok$1^153.5 $@loc.owns@26)) :named ax_2220))
   (assert (! (not (= $@tok$1^153.5 $@loc.owns@30)) :named ax_2221))
   (assert (! (not (= $@tok$1^153.5 $@loc.owns@33)) :named ax_2222))
   (assert (! (not (= $@tok$1^153.5 $@loc.owns@36)) :named ax_2223))
   (assert (! (not (= $@tok$1^153.5 $@loc.owns@39)) :named ax_2224))
   (assert (! (not (= $@tok$1^153.5 $@loc.owns@42)) :named ax_2225))
   (assert (! (not (= $@tok$1^153.5 $@loc.p)) :named ax_2226))
   (assert (! (not (= $@tok$1^153.5 $@loc.p)) :named ax_2227))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@24)) :named ax_2228))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@24)) :named ax_2229))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@27)) :named ax_2230))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@28)) :named ax_2231))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@29)) :named ax_2232))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@31)) :named ax_2233))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@34)) :named ax_2234))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@35)) :named ax_2235))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@37)) :named ax_2236))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@40)) :named ax_2237))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@43)) :named ax_2238))
   (assert (! (not (= $@tok$1^153.5 $@loc.prestate@44)) :named ax_2239))
   (assert (! (not (= $@tok$1^153.5 $@loc.res_lambda@4@17)) :named ax_2240))
   (assert (! (not (= $@tok$1^153.5 $@loc.res_lambda@4@17)) :named ax_2241))
   (assert (! (not (= $@tok$1^153.5 $@loc.res_lambda@5@18)) :named ax_2242))
   (assert (! (not (= $@tok$1^153.5 $@loc.res_lambda@5@18)) :named ax_2243))
   (assert (! (not (= $@tok$1^153.5 $@loc.res_lambda@6@19)) :named ax_2244))
   (assert (! (not (= $@tok$1^153.5 $@loc.res_lambda@7@20)) :named ax_2245))
   (assert (! (not (= $@tok$1^153.5 $@loc.staticWrapState@25)) :named ax_2246))
   (assert (! (not (= $@tok$1^153.5 $@loc.staticWrapState@32)) :named ax_2247))
   (assert (! (not (= $@tok$1^153.5 $@loc.staticWrapState@38)) :named ax_2248))
   (assert (! (not (= $@tok$1^153.5 $@loc.staticWrapState@41)) :named ax_2249))
   (assert (! (not (= $@tok$1^153.5 $@loc.t)) :named ax_2250))
   (assert (! (not (= $@tok$1^153.5 $@loc.t)) :named ax_2251))
   (assert (! (not (= $@tok$1^153.5 $@loc.x)) :named ax_2252))
   (assert (! (not (= $@tok$1^153.5 $@loc.x)) :named ax_2253))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^134.1)) :named ax_2254))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^134.1)) :named ax_2255))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^142.3)) :named ax_2256))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^142.3)) :named ax_2257))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^144.19)) :named ax_2258))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^144.19)) :named ax_2259))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^146.13)) :named ax_2260))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^146.13)) :named ax_2261))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^146.24)) :named ax_2262))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^146.24)) :named ax_2263))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^146.3)) :named ax_2264))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^146.3)) :named ax_2265))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^148.3)) :named ax_2266))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^148.3)) :named ax_2267))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^151.14)) :named ax_2268))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^151.14)) :named ax_2269))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^151.5)) :named ax_2270))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^151.5)) :named ax_2271))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^152.5)) :named ax_2272))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^152.5)) :named ax_2273))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^153.15)) :named ax_2274))
   (assert (! (not (= $@tok$1^153.5 $@tok$1^153.15)) :named ax_2275))
   (assert (! (not (= $@tok$1^153.5 $@tok$2^0.0)) :named ax_2276))
   (assert (! (not (= $@tok$1^157.5 $@file^?3Cno?20file?3E)) :named ax_2277))
   (assert (! (not (= $@tok$1^157.5 $@file^?3Cno?20file?3E)) :named ax_2278))
   (assert (! (not (= $@tok$1^157.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2279))
   (assert (! (not (= $@tok$1^157.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2280))
   (assert (! (not (= $@tok$1^157.5 $@loc.assign@12)) :named ax_2281))
   (assert (! (not (= $@tok$1^157.5 $@loc.assign@12)) :named ax_2282))
   (assert (! (not (= $@tok$1^157.5 $@loc.assign@13)) :named ax_2283))
   (assert (! (not (= $@tok$1^157.5 $@loc.assign@13)) :named ax_2284))
   (assert (! (not (= $@tok$1^157.5 $@loc.n)) :named ax_2285))
   (assert (! (not (= $@tok$1^157.5 $@loc.n)) :named ax_2286))
   (assert (! (not (= $@tok$1^157.5 $@loc.owns@26)) :named ax_2287))
   (assert (! (not (= $@tok$1^157.5 $@loc.owns@30)) :named ax_2288))
   (assert (! (not (= $@tok$1^157.5 $@loc.owns@33)) :named ax_2289))
   (assert (! (not (= $@tok$1^157.5 $@loc.owns@36)) :named ax_2290))
   (assert (! (not (= $@tok$1^157.5 $@loc.owns@39)) :named ax_2291))
   (assert (! (not (= $@tok$1^157.5 $@loc.owns@42)) :named ax_2292))
   (assert (! (not (= $@tok$1^157.5 $@loc.p)) :named ax_2293))
   (assert (! (not (= $@tok$1^157.5 $@loc.p)) :named ax_2294))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@24)) :named ax_2295))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@24)) :named ax_2296))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@27)) :named ax_2297))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@28)) :named ax_2298))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@29)) :named ax_2299))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@31)) :named ax_2300))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@34)) :named ax_2301))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@35)) :named ax_2302))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@37)) :named ax_2303))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@40)) :named ax_2304))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@43)) :named ax_2305))
   (assert (! (not (= $@tok$1^157.5 $@loc.prestate@44)) :named ax_2306))
   (assert (! (not (= $@tok$1^157.5 $@loc.res_lambda@4@17)) :named ax_2307))
   (assert (! (not (= $@tok$1^157.5 $@loc.res_lambda@4@17)) :named ax_2308))
   (assert (! (not (= $@tok$1^157.5 $@loc.res_lambda@5@18)) :named ax_2309))
   (assert (! (not (= $@tok$1^157.5 $@loc.res_lambda@5@18)) :named ax_2310))
   (assert (! (not (= $@tok$1^157.5 $@loc.res_lambda@6@19)) :named ax_2311))
   (assert (! (not (= $@tok$1^157.5 $@loc.res_lambda@7@20)) :named ax_2312))
   (assert (! (not (= $@tok$1^157.5 $@loc.staticWrapState@25)) :named ax_2313))
   (assert (! (not (= $@tok$1^157.5 $@loc.staticWrapState@32)) :named ax_2314))
   (assert (! (not (= $@tok$1^157.5 $@loc.staticWrapState@38)) :named ax_2315))
   (assert (! (not (= $@tok$1^157.5 $@loc.staticWrapState@41)) :named ax_2316))
   (assert (! (not (= $@tok$1^157.5 $@loc.t)) :named ax_2317))
   (assert (! (not (= $@tok$1^157.5 $@loc.t)) :named ax_2318))
   (assert (! (not (= $@tok$1^157.5 $@loc.x)) :named ax_2319))
   (assert (! (not (= $@tok$1^157.5 $@loc.x)) :named ax_2320))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^134.1)) :named ax_2321))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^134.1)) :named ax_2322))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^142.3)) :named ax_2323))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^142.3)) :named ax_2324))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^144.19)) :named ax_2325))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^144.19)) :named ax_2326))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^146.13)) :named ax_2327))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^146.13)) :named ax_2328))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^146.24)) :named ax_2329))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^146.24)) :named ax_2330))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^146.3)) :named ax_2331))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^146.3)) :named ax_2332))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^148.3)) :named ax_2333))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^148.3)) :named ax_2334))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^151.14)) :named ax_2335))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^151.14)) :named ax_2336))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^151.5)) :named ax_2337))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^151.5)) :named ax_2338))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^152.5)) :named ax_2339))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^152.5)) :named ax_2340))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^153.15)) :named ax_2341))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^153.15)) :named ax_2342))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^153.5)) :named ax_2343))
   (assert (! (not (= $@tok$1^157.5 $@tok$1^153.5)) :named ax_2344))
   (assert (! (not (= $@tok$1^157.5 $@tok$2^0.0)) :named ax_2345))
   (assert (! (not (= $@tok$1^158.21 $@file^?3Cno?20file?3E)) :named ax_2346))
   (assert (! (not (= $@tok$1^158.21 $@file^?3Cno?20file?3E)) :named ax_2347))
   (assert (! (not (= $@tok$1^158.21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2348))
   (assert (! (not (= $@tok$1^158.21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2349))
   (assert (! (not (= $@tok$1^158.21 $@loc.assign@12)) :named ax_2350))
   (assert (! (not (= $@tok$1^158.21 $@loc.assign@12)) :named ax_2351))
   (assert (! (not (= $@tok$1^158.21 $@loc.assign@13)) :named ax_2352))
   (assert (! (not (= $@tok$1^158.21 $@loc.assign@13)) :named ax_2353))
   (assert (! (not (= $@tok$1^158.21 $@loc.n)) :named ax_2354))
   (assert (! (not (= $@tok$1^158.21 $@loc.n)) :named ax_2355))
   (assert (! (not (= $@tok$1^158.21 $@loc.owns@26)) :named ax_2356))
   (assert (! (not (= $@tok$1^158.21 $@loc.owns@26)) :named ax_2357))
   (assert (! (not (= $@tok$1^158.21 $@loc.owns@30)) :named ax_2358))
   (assert (! (not (= $@tok$1^158.21 $@loc.owns@33)) :named ax_2359))
   (assert (! (not (= $@tok$1^158.21 $@loc.owns@36)) :named ax_2360))
   (assert (! (not (= $@tok$1^158.21 $@loc.owns@39)) :named ax_2361))
   (assert (! (not (= $@tok$1^158.21 $@loc.owns@42)) :named ax_2362))
   (assert (! (not (= $@tok$1^158.21 $@loc.p)) :named ax_2363))
   (assert (! (not (= $@tok$1^158.21 $@loc.p)) :named ax_2364))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@24)) :named ax_2365))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@24)) :named ax_2366))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@27)) :named ax_2367))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@27)) :named ax_2368))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@28)) :named ax_2369))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@29)) :named ax_2370))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@31)) :named ax_2371))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@34)) :named ax_2372))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@35)) :named ax_2373))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@37)) :named ax_2374))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@40)) :named ax_2375))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@43)) :named ax_2376))
   (assert (! (not (= $@tok$1^158.21 $@loc.prestate@44)) :named ax_2377))
   (assert (! (not (= $@tok$1^158.21 $@loc.res_lambda@4@17)) :named ax_2378))
   (assert (! (not (= $@tok$1^158.21 $@loc.res_lambda@4@17)) :named ax_2379))
   (assert (! (not (= $@tok$1^158.21 $@loc.res_lambda@5@18)) :named ax_2380))
   (assert (! (not (= $@tok$1^158.21 $@loc.res_lambda@5@18)) :named ax_2381))
   (assert (! (not (= $@tok$1^158.21 $@loc.res_lambda@6@19)) :named ax_2382))
   (assert (! (not (= $@tok$1^158.21 $@loc.res_lambda@7@20)) :named ax_2383))
   (assert (! (not (= $@tok$1^158.21 $@loc.staticWrapState@25)) :named ax_2384))
   (assert (! (not (= $@tok$1^158.21 $@loc.staticWrapState@25)) :named ax_2385))
   (assert (! (not (= $@tok$1^158.21 $@loc.staticWrapState@32)) :named ax_2386))
   (assert (! (not (= $@tok$1^158.21 $@loc.staticWrapState@38)) :named ax_2387))
   (assert (! (not (= $@tok$1^158.21 $@loc.staticWrapState@41)) :named ax_2388))
   (assert (! (not (= $@tok$1^158.21 $@loc.t)) :named ax_2389))
   (assert (! (not (= $@tok$1^158.21 $@loc.t)) :named ax_2390))
   (assert (! (not (= $@tok$1^158.21 $@loc.x)) :named ax_2391))
   (assert (! (not (= $@tok$1^158.21 $@loc.x)) :named ax_2392))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^134.1)) :named ax_2393))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^134.1)) :named ax_2394))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^142.3)) :named ax_2395))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^142.3)) :named ax_2396))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^144.19)) :named ax_2397))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^144.19)) :named ax_2398))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^146.13)) :named ax_2399))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^146.13)) :named ax_2400))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^146.24)) :named ax_2401))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^146.24)) :named ax_2402))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^146.3)) :named ax_2403))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^146.3)) :named ax_2404))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^148.3)) :named ax_2405))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^148.3)) :named ax_2406))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^151.14)) :named ax_2407))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^151.14)) :named ax_2408))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^151.5)) :named ax_2409))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^151.5)) :named ax_2410))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^152.5)) :named ax_2411))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^152.5)) :named ax_2412))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^153.15)) :named ax_2413))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^153.15)) :named ax_2414))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^153.5)) :named ax_2415))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^153.5)) :named ax_2416))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^157.5)) :named ax_2417))
   (assert (! (not (= $@tok$1^158.21 $@tok$1^157.5)) :named ax_2418))
   (assert (! (not (= $@tok$1^158.21 $@tok$2^0.0)) :named ax_2419))
   (assert (! (not (= $@tok$1^159.21 $@file^?3Cno?20file?3E)) :named ax_2420))
   (assert (! (not (= $@tok$1^159.21 $@file^?3Cno?20file?3E)) :named ax_2421))
   (assert (! (not (= $@tok$1^159.21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2422))
   (assert (! (not (= $@tok$1^159.21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2423))
   (assert (! (not (= $@tok$1^159.21 $@loc.assign@12)) :named ax_2424))
   (assert (! (not (= $@tok$1^159.21 $@loc.assign@12)) :named ax_2425))
   (assert (! (not (= $@tok$1^159.21 $@loc.assign@13)) :named ax_2426))
   (assert (! (not (= $@tok$1^159.21 $@loc.assign@13)) :named ax_2427))
   (assert (! (not (= $@tok$1^159.21 $@loc.n)) :named ax_2428))
   (assert (! (not (= $@tok$1^159.21 $@loc.n)) :named ax_2429))
   (assert (! (not (= $@tok$1^159.21 $@loc.owns@26)) :named ax_2430))
   (assert (! (not (= $@tok$1^159.21 $@loc.owns@26)) :named ax_2431))
   (assert (! (not (= $@tok$1^159.21 $@loc.owns@30)) :named ax_2432))
   (assert (! (not (= $@tok$1^159.21 $@loc.owns@33)) :named ax_2433))
   (assert (! (not (= $@tok$1^159.21 $@loc.owns@36)) :named ax_2434))
   (assert (! (not (= $@tok$1^159.21 $@loc.owns@39)) :named ax_2435))
   (assert (! (not (= $@tok$1^159.21 $@loc.owns@42)) :named ax_2436))
   (assert (! (not (= $@tok$1^159.21 $@loc.p)) :named ax_2437))
   (assert (! (not (= $@tok$1^159.21 $@loc.p)) :named ax_2438))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@24)) :named ax_2439))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@24)) :named ax_2440))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@27)) :named ax_2441))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@27)) :named ax_2442))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@28)) :named ax_2443))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@28)) :named ax_2444))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@29)) :named ax_2445))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@31)) :named ax_2446))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@34)) :named ax_2447))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@35)) :named ax_2448))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@37)) :named ax_2449))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@40)) :named ax_2450))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@43)) :named ax_2451))
   (assert (! (not (= $@tok$1^159.21 $@loc.prestate@44)) :named ax_2452))
   (assert (! (not (= $@tok$1^159.21 $@loc.res_lambda@4@17)) :named ax_2453))
   (assert (! (not (= $@tok$1^159.21 $@loc.res_lambda@4@17)) :named ax_2454))
   (assert (! (not (= $@tok$1^159.21 $@loc.res_lambda@5@18)) :named ax_2455))
   (assert (! (not (= $@tok$1^159.21 $@loc.res_lambda@5@18)) :named ax_2456))
   (assert (! (not (= $@tok$1^159.21 $@loc.res_lambda@6@19)) :named ax_2457))
   (assert (! (not (= $@tok$1^159.21 $@loc.res_lambda@7@20)) :named ax_2458))
   (assert (! (not (= $@tok$1^159.21 $@loc.staticWrapState@25)) :named ax_2459))
   (assert (! (not (= $@tok$1^159.21 $@loc.staticWrapState@25)) :named ax_2460))
   (assert (! (not (= $@tok$1^159.21 $@loc.staticWrapState@32)) :named ax_2461))
   (assert (! (not (= $@tok$1^159.21 $@loc.staticWrapState@38)) :named ax_2462))
   (assert (! (not (= $@tok$1^159.21 $@loc.staticWrapState@41)) :named ax_2463))
   (assert (! (not (= $@tok$1^159.21 $@loc.t)) :named ax_2464))
   (assert (! (not (= $@tok$1^159.21 $@loc.t)) :named ax_2465))
   (assert (! (not (= $@tok$1^159.21 $@loc.x)) :named ax_2466))
   (assert (! (not (= $@tok$1^159.21 $@loc.x)) :named ax_2467))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^134.1)) :named ax_2468))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^134.1)) :named ax_2469))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^142.3)) :named ax_2470))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^142.3)) :named ax_2471))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^144.19)) :named ax_2472))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^144.19)) :named ax_2473))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^146.13)) :named ax_2474))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^146.13)) :named ax_2475))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^146.24)) :named ax_2476))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^146.24)) :named ax_2477))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^146.3)) :named ax_2478))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^146.3)) :named ax_2479))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^148.3)) :named ax_2480))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^148.3)) :named ax_2481))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^151.14)) :named ax_2482))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^151.14)) :named ax_2483))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^151.5)) :named ax_2484))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^151.5)) :named ax_2485))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^152.5)) :named ax_2486))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^152.5)) :named ax_2487))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^153.15)) :named ax_2488))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^153.15)) :named ax_2489))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^153.5)) :named ax_2490))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^153.5)) :named ax_2491))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^157.5)) :named ax_2492))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^157.5)) :named ax_2493))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^158.21)) :named ax_2494))
   (assert (! (not (= $@tok$1^159.21 $@tok$1^158.21)) :named ax_2495))
   (assert (! (not (= $@tok$1^159.21 $@tok$2^0.0)) :named ax_2496))
   (assert (! (not (= $@tok$1^163.25 $@file^?3Cno?20file?3E)) :named ax_2497))
   (assert (! (not (= $@tok$1^163.25 $@file^?3Cno?20file?3E)) :named ax_2498))
   (assert (! (not (= $@tok$1^163.25 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2499))
   (assert (! (not (= $@tok$1^163.25 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2500))
   (assert (! (not (= $@tok$1^163.25 $@loc.assign@12)) :named ax_2501))
   (assert (! (not (= $@tok$1^163.25 $@loc.assign@12)) :named ax_2502))
   (assert (! (not (= $@tok$1^163.25 $@loc.assign@13)) :named ax_2503))
   (assert (! (not (= $@tok$1^163.25 $@loc.assign@13)) :named ax_2504))
   (assert (! (not (= $@tok$1^163.25 $@loc.n)) :named ax_2505))
   (assert (! (not (= $@tok$1^163.25 $@loc.n)) :named ax_2506))
   (assert (! (not (= $@tok$1^163.25 $@loc.owns@26)) :named ax_2507))
   (assert (! (not (= $@tok$1^163.25 $@loc.owns@26)) :named ax_2508))
   (assert (! (not (= $@tok$1^163.25 $@loc.owns@30)) :named ax_2509))
   (assert (! (not (= $@tok$1^163.25 $@loc.owns@33)) :named ax_2510))
   (assert (! (not (= $@tok$1^163.25 $@loc.owns@36)) :named ax_2511))
   (assert (! (not (= $@tok$1^163.25 $@loc.owns@39)) :named ax_2512))
   (assert (! (not (= $@tok$1^163.25 $@loc.owns@42)) :named ax_2513))
   (assert (! (not (= $@tok$1^163.25 $@loc.p)) :named ax_2514))
   (assert (! (not (= $@tok$1^163.25 $@loc.p)) :named ax_2515))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@24)) :named ax_2516))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@24)) :named ax_2517))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@27)) :named ax_2518))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@27)) :named ax_2519))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@28)) :named ax_2520))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@28)) :named ax_2521))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@29)) :named ax_2522))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@31)) :named ax_2523))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@34)) :named ax_2524))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@35)) :named ax_2525))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@37)) :named ax_2526))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@40)) :named ax_2527))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@43)) :named ax_2528))
   (assert (! (not (= $@tok$1^163.25 $@loc.prestate@44)) :named ax_2529))
   (assert (! (not (= $@tok$1^163.25 $@loc.res_lambda@4@17)) :named ax_2530))
   (assert (! (not (= $@tok$1^163.25 $@loc.res_lambda@4@17)) :named ax_2531))
   (assert (! (not (= $@tok$1^163.25 $@loc.res_lambda@5@18)) :named ax_2532))
   (assert (! (not (= $@tok$1^163.25 $@loc.res_lambda@5@18)) :named ax_2533))
   (assert (! (not (= $@tok$1^163.25 $@loc.res_lambda@6@19)) :named ax_2534))
   (assert (! (not (= $@tok$1^163.25 $@loc.res_lambda@6@19)) :named ax_2535))
   (assert (! (not (= $@tok$1^163.25 $@loc.res_lambda@7@20)) :named ax_2536))
   (assert (! (not (= $@tok$1^163.25 $@loc.staticWrapState@25)) :named ax_2537))
   (assert (! (not (= $@tok$1^163.25 $@loc.staticWrapState@25)) :named ax_2538))
   (assert (! (not (= $@tok$1^163.25 $@loc.staticWrapState@32)) :named ax_2539))
   (assert (! (not (= $@tok$1^163.25 $@loc.staticWrapState@38)) :named ax_2540))
   (assert (! (not (= $@tok$1^163.25 $@loc.staticWrapState@41)) :named ax_2541))
   (assert (! (not (= $@tok$1^163.25 $@loc.t)) :named ax_2542))
   (assert (! (not (= $@tok$1^163.25 $@loc.t)) :named ax_2543))
   (assert (! (not (= $@tok$1^163.25 $@loc.x)) :named ax_2544))
   (assert (! (not (= $@tok$1^163.25 $@loc.x)) :named ax_2545))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^134.1)) :named ax_2546))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^134.1)) :named ax_2547))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^142.3)) :named ax_2548))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^142.3)) :named ax_2549))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^144.19)) :named ax_2550))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^144.19)) :named ax_2551))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^146.13)) :named ax_2552))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^146.13)) :named ax_2553))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^146.24)) :named ax_2554))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^146.24)) :named ax_2555))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^146.3)) :named ax_2556))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^146.3)) :named ax_2557))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^148.3)) :named ax_2558))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^148.3)) :named ax_2559))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^151.14)) :named ax_2560))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^151.14)) :named ax_2561))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^151.5)) :named ax_2562))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^151.5)) :named ax_2563))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^152.5)) :named ax_2564))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^152.5)) :named ax_2565))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^153.15)) :named ax_2566))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^153.15)) :named ax_2567))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^153.5)) :named ax_2568))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^153.5)) :named ax_2569))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^157.5)) :named ax_2570))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^157.5)) :named ax_2571))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^158.21)) :named ax_2572))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^158.21)) :named ax_2573))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^159.21)) :named ax_2574))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^159.21)) :named ax_2575))
   (assert (! (not (= $@tok$1^163.25 $@tok$1^163.41)) :named ax_2576))
   (assert (! (not (= $@tok$1^163.25 $@tok$2^0.0)) :named ax_2577))
   (assert (! (not (= $@tok$1^163.41 $@file^?3Cno?20file?3E)) :named ax_2578))
   (assert (! (not (= $@tok$1^163.41 $@file^?3Cno?20file?3E)) :named ax_2579))
   (assert (! (not (= $@tok$1^163.41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2580))
   (assert (! (not (= $@tok$1^163.41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2581))
   (assert (! (not (= $@tok$1^163.41 $@loc.assign@12)) :named ax_2582))
   (assert (! (not (= $@tok$1^163.41 $@loc.assign@12)) :named ax_2583))
   (assert (! (not (= $@tok$1^163.41 $@loc.assign@13)) :named ax_2584))
   (assert (! (not (= $@tok$1^163.41 $@loc.assign@13)) :named ax_2585))
   (assert (! (not (= $@tok$1^163.41 $@loc.n)) :named ax_2586))
   (assert (! (not (= $@tok$1^163.41 $@loc.n)) :named ax_2587))
   (assert (! (not (= $@tok$1^163.41 $@loc.owns@26)) :named ax_2588))
   (assert (! (not (= $@tok$1^163.41 $@loc.owns@26)) :named ax_2589))
   (assert (! (not (= $@tok$1^163.41 $@loc.owns@30)) :named ax_2590))
   (assert (! (not (= $@tok$1^163.41 $@loc.owns@33)) :named ax_2591))
   (assert (! (not (= $@tok$1^163.41 $@loc.owns@36)) :named ax_2592))
   (assert (! (not (= $@tok$1^163.41 $@loc.owns@39)) :named ax_2593))
   (assert (! (not (= $@tok$1^163.41 $@loc.owns@42)) :named ax_2594))
   (assert (! (not (= $@tok$1^163.41 $@loc.p)) :named ax_2595))
   (assert (! (not (= $@tok$1^163.41 $@loc.p)) :named ax_2596))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@24)) :named ax_2597))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@24)) :named ax_2598))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@27)) :named ax_2599))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@27)) :named ax_2600))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@28)) :named ax_2601))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@28)) :named ax_2602))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@29)) :named ax_2603))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@31)) :named ax_2604))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@34)) :named ax_2605))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@35)) :named ax_2606))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@37)) :named ax_2607))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@40)) :named ax_2608))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@43)) :named ax_2609))
   (assert (! (not (= $@tok$1^163.41 $@loc.prestate@44)) :named ax_2610))
   (assert (! (not (= $@tok$1^163.41 $@loc.res_lambda@4@17)) :named ax_2611))
   (assert (! (not (= $@tok$1^163.41 $@loc.res_lambda@4@17)) :named ax_2612))
   (assert (! (not (= $@tok$1^163.41 $@loc.res_lambda@5@18)) :named ax_2613))
   (assert (! (not (= $@tok$1^163.41 $@loc.res_lambda@5@18)) :named ax_2614))
   (assert (! (not (= $@tok$1^163.41 $@loc.res_lambda@6@19)) :named ax_2615))
   (assert (! (not (= $@tok$1^163.41 $@loc.res_lambda@7@20)) :named ax_2616))
   (assert (! (not (= $@tok$1^163.41 $@loc.staticWrapState@25)) :named ax_2617))
   (assert (! (not (= $@tok$1^163.41 $@loc.staticWrapState@25)) :named ax_2618))
   (assert (! (not (= $@tok$1^163.41 $@loc.staticWrapState@32)) :named ax_2619))
   (assert (! (not (= $@tok$1^163.41 $@loc.staticWrapState@38)) :named ax_2620))
   (assert (! (not (= $@tok$1^163.41 $@loc.staticWrapState@41)) :named ax_2621))
   (assert (! (not (= $@tok$1^163.41 $@loc.t)) :named ax_2622))
   (assert (! (not (= $@tok$1^163.41 $@loc.t)) :named ax_2623))
   (assert (! (not (= $@tok$1^163.41 $@loc.x)) :named ax_2624))
   (assert (! (not (= $@tok$1^163.41 $@loc.x)) :named ax_2625))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^134.1)) :named ax_2626))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^134.1)) :named ax_2627))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^142.3)) :named ax_2628))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^142.3)) :named ax_2629))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^144.19)) :named ax_2630))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^144.19)) :named ax_2631))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^146.13)) :named ax_2632))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^146.13)) :named ax_2633))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^146.24)) :named ax_2634))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^146.24)) :named ax_2635))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^146.3)) :named ax_2636))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^146.3)) :named ax_2637))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^148.3)) :named ax_2638))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^148.3)) :named ax_2639))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^151.14)) :named ax_2640))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^151.14)) :named ax_2641))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^151.5)) :named ax_2642))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^151.5)) :named ax_2643))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^152.5)) :named ax_2644))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^152.5)) :named ax_2645))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^153.15)) :named ax_2646))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^153.15)) :named ax_2647))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^153.5)) :named ax_2648))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^153.5)) :named ax_2649))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^157.5)) :named ax_2650))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^157.5)) :named ax_2651))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^158.21)) :named ax_2652))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^158.21)) :named ax_2653))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^159.21)) :named ax_2654))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^159.21)) :named ax_2655))
   (assert (! (not (= $@tok$1^163.41 $@tok$1^163.25)) :named ax_2656))
   (assert (! (not (= $@tok$1^163.41 $@tok$2^0.0)) :named ax_2657))
   (assert (! (not (= $@tok$1^167.3 $@file^?3Cno?20file?3E)) :named ax_2658))
   (assert (! (not (= $@tok$1^167.3 $@file^?3Cno?20file?3E)) :named ax_2659))
   (assert (! (not (= $@tok$1^167.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2660))
   (assert (! (not (= $@tok$1^167.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2661))
   (assert (! (not (= $@tok$1^167.3 $@loc.assign@12)) :named ax_2662))
   (assert (! (not (= $@tok$1^167.3 $@loc.assign@12)) :named ax_2663))
   (assert (! (not (= $@tok$1^167.3 $@loc.assign@13)) :named ax_2664))
   (assert (! (not (= $@tok$1^167.3 $@loc.assign@13)) :named ax_2665))
   (assert (! (not (= $@tok$1^167.3 $@loc.n)) :named ax_2666))
   (assert (! (not (= $@tok$1^167.3 $@loc.n)) :named ax_2667))
   (assert (! (not (= $@tok$1^167.3 $@loc.owns@26)) :named ax_2668))
   (assert (! (not (= $@tok$1^167.3 $@loc.owns@26)) :named ax_2669))
   (assert (! (not (= $@tok$1^167.3 $@loc.owns@30)) :named ax_2670))
   (assert (! (not (= $@tok$1^167.3 $@loc.owns@33)) :named ax_2671))
   (assert (! (not (= $@tok$1^167.3 $@loc.owns@36)) :named ax_2672))
   (assert (! (not (= $@tok$1^167.3 $@loc.owns@39)) :named ax_2673))
   (assert (! (not (= $@tok$1^167.3 $@loc.owns@42)) :named ax_2674))
   (assert (! (not (= $@tok$1^167.3 $@loc.p)) :named ax_2675))
   (assert (! (not (= $@tok$1^167.3 $@loc.p)) :named ax_2676))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@24)) :named ax_2677))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@24)) :named ax_2678))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@27)) :named ax_2679))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@27)) :named ax_2680))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@28)) :named ax_2681))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@28)) :named ax_2682))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@29)) :named ax_2683))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@31)) :named ax_2684))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@34)) :named ax_2685))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@35)) :named ax_2686))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@37)) :named ax_2687))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@40)) :named ax_2688))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@43)) :named ax_2689))
   (assert (! (not (= $@tok$1^167.3 $@loc.prestate@44)) :named ax_2690))
   (assert (! (not (= $@tok$1^167.3 $@loc.res_lambda@4@17)) :named ax_2691))
   (assert (! (not (= $@tok$1^167.3 $@loc.res_lambda@4@17)) :named ax_2692))
   (assert (! (not (= $@tok$1^167.3 $@loc.res_lambda@5@18)) :named ax_2693))
   (assert (! (not (= $@tok$1^167.3 $@loc.res_lambda@5@18)) :named ax_2694))
   (assert (! (not (= $@tok$1^167.3 $@loc.res_lambda@6@19)) :named ax_2695))
   (assert (! (not (= $@tok$1^167.3 $@loc.res_lambda@6@19)) :named ax_2696))
   (assert (! (not (= $@tok$1^167.3 $@loc.res_lambda@7@20)) :named ax_2697))
   (assert (! (not (= $@tok$1^167.3 $@loc.staticWrapState@25)) :named ax_2698))
   (assert (! (not (= $@tok$1^167.3 $@loc.staticWrapState@25)) :named ax_2699))
   (assert (! (not (= $@tok$1^167.3 $@loc.staticWrapState@32)) :named ax_2700))
   (assert (! (not (= $@tok$1^167.3 $@loc.staticWrapState@38)) :named ax_2701))
   (assert (! (not (= $@tok$1^167.3 $@loc.staticWrapState@41)) :named ax_2702))
   (assert (! (not (= $@tok$1^167.3 $@loc.t)) :named ax_2703))
   (assert (! (not (= $@tok$1^167.3 $@loc.t)) :named ax_2704))
   (assert (! (not (= $@tok$1^167.3 $@loc.x)) :named ax_2705))
   (assert (! (not (= $@tok$1^167.3 $@loc.x)) :named ax_2706))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^134.1)) :named ax_2707))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^134.1)) :named ax_2708))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^142.3)) :named ax_2709))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^142.3)) :named ax_2710))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^144.19)) :named ax_2711))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^144.19)) :named ax_2712))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^146.13)) :named ax_2713))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^146.13)) :named ax_2714))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^146.24)) :named ax_2715))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^146.24)) :named ax_2716))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^146.3)) :named ax_2717))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^146.3)) :named ax_2718))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^148.3)) :named ax_2719))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^148.3)) :named ax_2720))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^151.14)) :named ax_2721))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^151.14)) :named ax_2722))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^151.5)) :named ax_2723))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^151.5)) :named ax_2724))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^152.5)) :named ax_2725))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^152.5)) :named ax_2726))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^153.15)) :named ax_2727))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^153.15)) :named ax_2728))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^153.5)) :named ax_2729))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^153.5)) :named ax_2730))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^157.5)) :named ax_2731))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^157.5)) :named ax_2732))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^158.21)) :named ax_2733))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^158.21)) :named ax_2734))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^159.21)) :named ax_2735))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^159.21)) :named ax_2736))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^163.25)) :named ax_2737))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^163.25)) :named ax_2738))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^163.41)) :named ax_2739))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^163.41)) :named ax_2740))
   (assert (! (not (= $@tok$1^167.3 $@tok$1^168.28)) :named ax_2741))
   (assert (! (not (= $@tok$1^167.3 $@tok$2^0.0)) :named ax_2742))
   (assert (! (not (= $@tok$1^168.28 $@file^?3Cno?20file?3E)) :named ax_2743))
   (assert (! (not (= $@tok$1^168.28 $@file^?3Cno?20file?3E)) :named ax_2744))
   (assert (! (not (= $@tok$1^168.28 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2745))
   (assert (! (not (= $@tok$1^168.28 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2746))
   (assert (! (not (= $@tok$1^168.28 $@loc.assign@12)) :named ax_2747))
   (assert (! (not (= $@tok$1^168.28 $@loc.assign@12)) :named ax_2748))
   (assert (! (not (= $@tok$1^168.28 $@loc.assign@13)) :named ax_2749))
   (assert (! (not (= $@tok$1^168.28 $@loc.assign@13)) :named ax_2750))
   (assert (! (not (= $@tok$1^168.28 $@loc.n)) :named ax_2751))
   (assert (! (not (= $@tok$1^168.28 $@loc.n)) :named ax_2752))
   (assert (! (not (= $@tok$1^168.28 $@loc.owns@26)) :named ax_2753))
   (assert (! (not (= $@tok$1^168.28 $@loc.owns@26)) :named ax_2754))
   (assert (! (not (= $@tok$1^168.28 $@loc.owns@30)) :named ax_2755))
   (assert (! (not (= $@tok$1^168.28 $@loc.owns@33)) :named ax_2756))
   (assert (! (not (= $@tok$1^168.28 $@loc.owns@36)) :named ax_2757))
   (assert (! (not (= $@tok$1^168.28 $@loc.owns@39)) :named ax_2758))
   (assert (! (not (= $@tok$1^168.28 $@loc.owns@42)) :named ax_2759))
   (assert (! (not (= $@tok$1^168.28 $@loc.p)) :named ax_2760))
   (assert (! (not (= $@tok$1^168.28 $@loc.p)) :named ax_2761))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@24)) :named ax_2762))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@24)) :named ax_2763))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@27)) :named ax_2764))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@27)) :named ax_2765))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@28)) :named ax_2766))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@28)) :named ax_2767))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@29)) :named ax_2768))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@31)) :named ax_2769))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@34)) :named ax_2770))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@35)) :named ax_2771))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@37)) :named ax_2772))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@40)) :named ax_2773))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@43)) :named ax_2774))
   (assert (! (not (= $@tok$1^168.28 $@loc.prestate@44)) :named ax_2775))
   (assert (! (not (= $@tok$1^168.28 $@loc.res_lambda@4@17)) :named ax_2776))
   (assert (! (not (= $@tok$1^168.28 $@loc.res_lambda@4@17)) :named ax_2777))
   (assert (! (not (= $@tok$1^168.28 $@loc.res_lambda@5@18)) :named ax_2778))
   (assert (! (not (= $@tok$1^168.28 $@loc.res_lambda@5@18)) :named ax_2779))
   (assert (! (not (= $@tok$1^168.28 $@loc.res_lambda@6@19)) :named ax_2780))
   (assert (! (not (= $@tok$1^168.28 $@loc.res_lambda@6@19)) :named ax_2781))
   (assert (! (not (= $@tok$1^168.28 $@loc.res_lambda@7@20)) :named ax_2782))
   (assert (! (not (= $@tok$1^168.28 $@loc.staticWrapState@25)) :named ax_2783))
   (assert (! (not (= $@tok$1^168.28 $@loc.staticWrapState@25)) :named ax_2784))
   (assert (! (not (= $@tok$1^168.28 $@loc.staticWrapState@32)) :named ax_2785))
   (assert (! (not (= $@tok$1^168.28 $@loc.staticWrapState@38)) :named ax_2786))
   (assert (! (not (= $@tok$1^168.28 $@loc.staticWrapState@41)) :named ax_2787))
   (assert (! (not (= $@tok$1^168.28 $@loc.t)) :named ax_2788))
   (assert (! (not (= $@tok$1^168.28 $@loc.t)) :named ax_2789))
   (assert (! (not (= $@tok$1^168.28 $@loc.x)) :named ax_2790))
   (assert (! (not (= $@tok$1^168.28 $@loc.x)) :named ax_2791))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^134.1)) :named ax_2792))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^134.1)) :named ax_2793))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^142.3)) :named ax_2794))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^142.3)) :named ax_2795))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^144.19)) :named ax_2796))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^144.19)) :named ax_2797))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^146.13)) :named ax_2798))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^146.13)) :named ax_2799))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^146.24)) :named ax_2800))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^146.24)) :named ax_2801))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^146.3)) :named ax_2802))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^146.3)) :named ax_2803))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^148.3)) :named ax_2804))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^148.3)) :named ax_2805))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^151.14)) :named ax_2806))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^151.14)) :named ax_2807))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^151.5)) :named ax_2808))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^151.5)) :named ax_2809))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^152.5)) :named ax_2810))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^152.5)) :named ax_2811))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^153.15)) :named ax_2812))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^153.15)) :named ax_2813))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^153.5)) :named ax_2814))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^153.5)) :named ax_2815))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^157.5)) :named ax_2816))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^157.5)) :named ax_2817))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^158.21)) :named ax_2818))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^158.21)) :named ax_2819))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^159.21)) :named ax_2820))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^159.21)) :named ax_2821))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^163.25)) :named ax_2822))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^163.25)) :named ax_2823))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^163.41)) :named ax_2824))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^163.41)) :named ax_2825))
   (assert (! (not (= $@tok$1^168.28 $@tok$1^167.3)) :named ax_2826))
   (assert (! (not (= $@tok$1^168.28 $@tok$2^0.0)) :named ax_2827))
   (assert (! (not (= $@tok$1^179.7 $@file^?3Cno?20file?3E)) :named ax_2828))
   (assert (! (not (= $@tok$1^179.7 $@file^?3Cno?20file?3E)) :named ax_2829))
   (assert (! (not (= $@tok$1^179.7 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2830))
   (assert (! (not (= $@tok$1^179.7 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2831))
   (assert (! (not (= $@tok$1^179.7 $@loc.assign@12)) :named ax_2832))
   (assert (! (not (= $@tok$1^179.7 $@loc.assign@12)) :named ax_2833))
   (assert (! (not (= $@tok$1^179.7 $@loc.assign@13)) :named ax_2834))
   (assert (! (not (= $@tok$1^179.7 $@loc.assign@13)) :named ax_2835))
   (assert (! (not (= $@tok$1^179.7 $@loc.n)) :named ax_2836))
   (assert (! (not (= $@tok$1^179.7 $@loc.n)) :named ax_2837))
   (assert (! (not (= $@tok$1^179.7 $@loc.owns@26)) :named ax_2838))
   (assert (! (not (= $@tok$1^179.7 $@loc.owns@26)) :named ax_2839))
   (assert (! (not (= $@tok$1^179.7 $@loc.owns@30)) :named ax_2840))
   (assert (! (not (= $@tok$1^179.7 $@loc.owns@33)) :named ax_2841))
   (assert (! (not (= $@tok$1^179.7 $@loc.owns@36)) :named ax_2842))
   (assert (! (not (= $@tok$1^179.7 $@loc.owns@39)) :named ax_2843))
   (assert (! (not (= $@tok$1^179.7 $@loc.owns@42)) :named ax_2844))
   (assert (! (not (= $@tok$1^179.7 $@loc.p)) :named ax_2845))
   (assert (! (not (= $@tok$1^179.7 $@loc.p)) :named ax_2846))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@24)) :named ax_2847))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@24)) :named ax_2848))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@27)) :named ax_2849))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@27)) :named ax_2850))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@28)) :named ax_2851))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@28)) :named ax_2852))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@29)) :named ax_2853))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@31)) :named ax_2854))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@34)) :named ax_2855))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@35)) :named ax_2856))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@37)) :named ax_2857))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@40)) :named ax_2858))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@43)) :named ax_2859))
   (assert (! (not (= $@tok$1^179.7 $@loc.prestate@44)) :named ax_2860))
   (assert (! (not (= $@tok$1^179.7 $@loc.res_lambda@4@17)) :named ax_2861))
   (assert (! (not (= $@tok$1^179.7 $@loc.res_lambda@4@17)) :named ax_2862))
   (assert (! (not (= $@tok$1^179.7 $@loc.res_lambda@5@18)) :named ax_2863))
   (assert (! (not (= $@tok$1^179.7 $@loc.res_lambda@5@18)) :named ax_2864))
   (assert (! (not (= $@tok$1^179.7 $@loc.res_lambda@6@19)) :named ax_2865))
   (assert (! (not (= $@tok$1^179.7 $@loc.res_lambda@6@19)) :named ax_2866))
   (assert (! (not (= $@tok$1^179.7 $@loc.res_lambda@7@20)) :named ax_2867))
   (assert (! (not (= $@tok$1^179.7 $@loc.staticWrapState@25)) :named ax_2868))
   (assert (! (not (= $@tok$1^179.7 $@loc.staticWrapState@25)) :named ax_2869))
   (assert (! (not (= $@tok$1^179.7 $@loc.staticWrapState@32)) :named ax_2870))
   (assert (! (not (= $@tok$1^179.7 $@loc.staticWrapState@38)) :named ax_2871))
   (assert (! (not (= $@tok$1^179.7 $@loc.staticWrapState@41)) :named ax_2872))
   (assert (! (not (= $@tok$1^179.7 $@loc.t)) :named ax_2873))
   (assert (! (not (= $@tok$1^179.7 $@loc.t)) :named ax_2874))
   (assert (! (not (= $@tok$1^179.7 $@loc.x)) :named ax_2875))
   (assert (! (not (= $@tok$1^179.7 $@loc.x)) :named ax_2876))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^134.1)) :named ax_2877))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^134.1)) :named ax_2878))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^142.3)) :named ax_2879))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^142.3)) :named ax_2880))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^144.19)) :named ax_2881))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^144.19)) :named ax_2882))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^146.13)) :named ax_2883))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^146.13)) :named ax_2884))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^146.24)) :named ax_2885))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^146.24)) :named ax_2886))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^146.3)) :named ax_2887))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^146.3)) :named ax_2888))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^148.3)) :named ax_2889))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^148.3)) :named ax_2890))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^151.14)) :named ax_2891))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^151.14)) :named ax_2892))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^151.5)) :named ax_2893))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^151.5)) :named ax_2894))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^152.5)) :named ax_2895))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^152.5)) :named ax_2896))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^153.15)) :named ax_2897))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^153.15)) :named ax_2898))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^153.5)) :named ax_2899))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^153.5)) :named ax_2900))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^157.5)) :named ax_2901))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^157.5)) :named ax_2902))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^158.21)) :named ax_2903))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^158.21)) :named ax_2904))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^159.21)) :named ax_2905))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^159.21)) :named ax_2906))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^163.25)) :named ax_2907))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^163.25)) :named ax_2908))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^163.41)) :named ax_2909))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^163.41)) :named ax_2910))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^167.3)) :named ax_2911))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^167.3)) :named ax_2912))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^168.28)) :named ax_2913))
   (assert (! (not (= $@tok$1^179.7 $@tok$1^168.28)) :named ax_2914))
   (assert (! (not (= $@tok$1^179.7 $@tok$2^0.0)) :named ax_2915))
   (assert (! (not (= $@tok$1^181.36 $@file^?3Cno?20file?3E)) :named ax_2916))
   (assert (! (not (= $@tok$1^181.36 $@file^?3Cno?20file?3E)) :named ax_2917))
   (assert (! (not (= $@tok$1^181.36 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2918))
   (assert (! (not (= $@tok$1^181.36 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_2919))
   (assert (! (not (= $@tok$1^181.36 $@loc.assign@12)) :named ax_2920))
   (assert (! (not (= $@tok$1^181.36 $@loc.assign@12)) :named ax_2921))
   (assert (! (not (= $@tok$1^181.36 $@loc.assign@13)) :named ax_2922))
   (assert (! (not (= $@tok$1^181.36 $@loc.assign@13)) :named ax_2923))
   (assert (! (not (= $@tok$1^181.36 $@loc.n)) :named ax_2924))
   (assert (! (not (= $@tok$1^181.36 $@loc.n)) :named ax_2925))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@26)) :named ax_2926))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@26)) :named ax_2927))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@30)) :named ax_2928))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@30)) :named ax_2929))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@33)) :named ax_2930))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@36)) :named ax_2931))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@39)) :named ax_2932))
   (assert (! (not (= $@tok$1^181.36 $@loc.owns@42)) :named ax_2933))
   (assert (! (not (= $@tok$1^181.36 $@loc.p)) :named ax_2934))
   (assert (! (not (= $@tok$1^181.36 $@loc.p)) :named ax_2935))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@24)) :named ax_2936))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@24)) :named ax_2937))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@27)) :named ax_2938))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@27)) :named ax_2939))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@28)) :named ax_2940))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@28)) :named ax_2941))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@29)) :named ax_2942))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@29)) :named ax_2943))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@31)) :named ax_2944))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@31)) :named ax_2945))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@34)) :named ax_2946))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@35)) :named ax_2947))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@37)) :named ax_2948))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@40)) :named ax_2949))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@43)) :named ax_2950))
   (assert (! (not (= $@tok$1^181.36 $@loc.prestate@44)) :named ax_2951))
   (assert (! (not (= $@tok$1^181.36 $@loc.res_lambda@4@17)) :named ax_2952))
   (assert (! (not (= $@tok$1^181.36 $@loc.res_lambda@4@17)) :named ax_2953))
   (assert (! (not (= $@tok$1^181.36 $@loc.res_lambda@5@18)) :named ax_2954))
   (assert (! (not (= $@tok$1^181.36 $@loc.res_lambda@5@18)) :named ax_2955))
   (assert (! (not (= $@tok$1^181.36 $@loc.res_lambda@6@19)) :named ax_2956))
   (assert (! (not (= $@tok$1^181.36 $@loc.res_lambda@6@19)) :named ax_2957))
   (assert (! (not (= $@tok$1^181.36 $@loc.res_lambda@7@20)) :named ax_2958))
   (assert (! (not (= $@tok$1^181.36 $@loc.staticWrapState@25)) :named ax_2959))
   (assert (! (not (= $@tok$1^181.36 $@loc.staticWrapState@25)) :named ax_2960))
   (assert (! (not (= $@tok$1^181.36 $@loc.staticWrapState@32)) :named ax_2961))
   (assert (! (not (= $@tok$1^181.36 $@loc.staticWrapState@38)) :named ax_2962))
   (assert (! (not (= $@tok$1^181.36 $@loc.staticWrapState@41)) :named ax_2963))
   (assert (! (not (= $@tok$1^181.36 $@loc.t)) :named ax_2964))
   (assert (! (not (= $@tok$1^181.36 $@loc.t)) :named ax_2965))
   (assert (! (not (= $@tok$1^181.36 $@loc.x)) :named ax_2966))
   (assert (! (not (= $@tok$1^181.36 $@loc.x)) :named ax_2967))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^134.1)) :named ax_2968))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^134.1)) :named ax_2969))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^142.3)) :named ax_2970))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^142.3)) :named ax_2971))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^144.19)) :named ax_2972))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^144.19)) :named ax_2973))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^146.13)) :named ax_2974))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^146.13)) :named ax_2975))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^146.24)) :named ax_2976))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^146.24)) :named ax_2977))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^146.3)) :named ax_2978))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^146.3)) :named ax_2979))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^148.3)) :named ax_2980))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^148.3)) :named ax_2981))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^151.14)) :named ax_2982))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^151.14)) :named ax_2983))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^151.5)) :named ax_2984))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^151.5)) :named ax_2985))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^152.5)) :named ax_2986))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^152.5)) :named ax_2987))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^153.15)) :named ax_2988))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^153.15)) :named ax_2989))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^153.5)) :named ax_2990))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^153.5)) :named ax_2991))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^157.5)) :named ax_2992))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^157.5)) :named ax_2993))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^158.21)) :named ax_2994))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^158.21)) :named ax_2995))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^159.21)) :named ax_2996))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^159.21)) :named ax_2997))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^163.25)) :named ax_2998))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^163.25)) :named ax_2999))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^163.41)) :named ax_3000))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^163.41)) :named ax_3001))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^167.3)) :named ax_3002))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^167.3)) :named ax_3003))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^168.28)) :named ax_3004))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^168.28)) :named ax_3005))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^179.7)) :named ax_3006))
   (assert (! (not (= $@tok$1^181.36 $@tok$1^179.7)) :named ax_3007))
   (assert (! (not (= $@tok$1^181.36 $@tok$2^0.0)) :named ax_3008))
   (assert (! (not (= $@tok$1^181.41 $@file^?3Cno?20file?3E)) :named ax_3009))
   (assert (! (not (= $@tok$1^181.41 $@file^?3Cno?20file?3E)) :named ax_3010))
   (assert (! (not (= $@tok$1^181.41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3011))
   (assert (! (not (= $@tok$1^181.41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3012))
   (assert (! (not (= $@tok$1^181.41 $@loc.assign@12)) :named ax_3013))
   (assert (! (not (= $@tok$1^181.41 $@loc.assign@12)) :named ax_3014))
   (assert (! (not (= $@tok$1^181.41 $@loc.assign@13)) :named ax_3015))
   (assert (! (not (= $@tok$1^181.41 $@loc.assign@13)) :named ax_3016))
   (assert (! (not (= $@tok$1^181.41 $@loc.n)) :named ax_3017))
   (assert (! (not (= $@tok$1^181.41 $@loc.n)) :named ax_3018))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@26)) :named ax_3019))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@26)) :named ax_3020))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@30)) :named ax_3021))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@30)) :named ax_3022))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@33)) :named ax_3023))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@36)) :named ax_3024))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@39)) :named ax_3025))
   (assert (! (not (= $@tok$1^181.41 $@loc.owns@42)) :named ax_3026))
   (assert (! (not (= $@tok$1^181.41 $@loc.p)) :named ax_3027))
   (assert (! (not (= $@tok$1^181.41 $@loc.p)) :named ax_3028))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@24)) :named ax_3029))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@24)) :named ax_3030))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@27)) :named ax_3031))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@27)) :named ax_3032))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@28)) :named ax_3033))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@28)) :named ax_3034))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@29)) :named ax_3035))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@29)) :named ax_3036))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@31)) :named ax_3037))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@31)) :named ax_3038))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@34)) :named ax_3039))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@35)) :named ax_3040))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@37)) :named ax_3041))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@40)) :named ax_3042))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@43)) :named ax_3043))
   (assert (! (not (= $@tok$1^181.41 $@loc.prestate@44)) :named ax_3044))
   (assert (! (not (= $@tok$1^181.41 $@loc.res_lambda@4@17)) :named ax_3045))
   (assert (! (not (= $@tok$1^181.41 $@loc.res_lambda@4@17)) :named ax_3046))
   (assert (! (not (= $@tok$1^181.41 $@loc.res_lambda@5@18)) :named ax_3047))
   (assert (! (not (= $@tok$1^181.41 $@loc.res_lambda@5@18)) :named ax_3048))
   (assert (! (not (= $@tok$1^181.41 $@loc.res_lambda@6@19)) :named ax_3049))
   (assert (! (not (= $@tok$1^181.41 $@loc.res_lambda@6@19)) :named ax_3050))
   (assert (! (not (= $@tok$1^181.41 $@loc.res_lambda@7@20)) :named ax_3051))
   (assert (! (not (= $@tok$1^181.41 $@loc.staticWrapState@25)) :named ax_3052))
   (assert (! (not (= $@tok$1^181.41 $@loc.staticWrapState@25)) :named ax_3053))
   (assert (! (not (= $@tok$1^181.41 $@loc.staticWrapState@32)) :named ax_3054))
   (assert (! (not (= $@tok$1^181.41 $@loc.staticWrapState@38)) :named ax_3055))
   (assert (! (not (= $@tok$1^181.41 $@loc.staticWrapState@41)) :named ax_3056))
   (assert (! (not (= $@tok$1^181.41 $@loc.t)) :named ax_3057))
   (assert (! (not (= $@tok$1^181.41 $@loc.t)) :named ax_3058))
   (assert (! (not (= $@tok$1^181.41 $@loc.x)) :named ax_3059))
   (assert (! (not (= $@tok$1^181.41 $@loc.x)) :named ax_3060))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^134.1)) :named ax_3061))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^134.1)) :named ax_3062))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^142.3)) :named ax_3063))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^142.3)) :named ax_3064))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^144.19)) :named ax_3065))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^144.19)) :named ax_3066))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^146.13)) :named ax_3067))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^146.13)) :named ax_3068))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^146.24)) :named ax_3069))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^146.24)) :named ax_3070))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^146.3)) :named ax_3071))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^146.3)) :named ax_3072))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^148.3)) :named ax_3073))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^148.3)) :named ax_3074))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^151.14)) :named ax_3075))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^151.14)) :named ax_3076))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^151.5)) :named ax_3077))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^151.5)) :named ax_3078))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^152.5)) :named ax_3079))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^152.5)) :named ax_3080))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^153.15)) :named ax_3081))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^153.15)) :named ax_3082))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^153.5)) :named ax_3083))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^153.5)) :named ax_3084))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^157.5)) :named ax_3085))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^157.5)) :named ax_3086))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^158.21)) :named ax_3087))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^158.21)) :named ax_3088))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^159.21)) :named ax_3089))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^159.21)) :named ax_3090))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^163.25)) :named ax_3091))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^163.25)) :named ax_3092))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^163.41)) :named ax_3093))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^163.41)) :named ax_3094))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^167.3)) :named ax_3095))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^167.3)) :named ax_3096))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^168.28)) :named ax_3097))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^168.28)) :named ax_3098))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^179.7)) :named ax_3099))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^179.7)) :named ax_3100))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^181.36)) :named ax_3101))
   (assert (! (not (= $@tok$1^181.41 $@tok$1^181.36)) :named ax_3102))
   (assert (! (not (= $@tok$1^181.41 $@tok$2^0.0)) :named ax_3103))
   (assert (! (not (= $@tok$1^185.7 $@file^?3Cno?20file?3E)) :named ax_3104))
   (assert (! (not (= $@tok$1^185.7 $@file^?3Cno?20file?3E)) :named ax_3105))
   (assert (! (not (= $@tok$1^185.7 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3106))
   (assert (! (not (= $@tok$1^185.7 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3107))
   (assert (! (not (= $@tok$1^185.7 $@loc.assign@12)) :named ax_3108))
   (assert (! (not (= $@tok$1^185.7 $@loc.assign@12)) :named ax_3109))
   (assert (! (not (= $@tok$1^185.7 $@loc.assign@13)) :named ax_3110))
   (assert (! (not (= $@tok$1^185.7 $@loc.assign@13)) :named ax_3111))
   (assert (! (not (= $@tok$1^185.7 $@loc.n)) :named ax_3112))
   (assert (! (not (= $@tok$1^185.7 $@loc.n)) :named ax_3113))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@26)) :named ax_3114))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@26)) :named ax_3115))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@30)) :named ax_3116))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@30)) :named ax_3117))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@33)) :named ax_3118))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@33)) :named ax_3119))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@36)) :named ax_3120))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@39)) :named ax_3121))
   (assert (! (not (= $@tok$1^185.7 $@loc.owns@42)) :named ax_3122))
   (assert (! (not (= $@tok$1^185.7 $@loc.p)) :named ax_3123))
   (assert (! (not (= $@tok$1^185.7 $@loc.p)) :named ax_3124))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@24)) :named ax_3125))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@24)) :named ax_3126))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@27)) :named ax_3127))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@27)) :named ax_3128))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@28)) :named ax_3129))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@28)) :named ax_3130))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@29)) :named ax_3131))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@29)) :named ax_3132))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@31)) :named ax_3133))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@31)) :named ax_3134))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@34)) :named ax_3135))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@34)) :named ax_3136))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@35)) :named ax_3137))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@37)) :named ax_3138))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@40)) :named ax_3139))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@43)) :named ax_3140))
   (assert (! (not (= $@tok$1^185.7 $@loc.prestate@44)) :named ax_3141))
   (assert (! (not (= $@tok$1^185.7 $@loc.res_lambda@4@17)) :named ax_3142))
   (assert (! (not (= $@tok$1^185.7 $@loc.res_lambda@4@17)) :named ax_3143))
   (assert (! (not (= $@tok$1^185.7 $@loc.res_lambda@5@18)) :named ax_3144))
   (assert (! (not (= $@tok$1^185.7 $@loc.res_lambda@5@18)) :named ax_3145))
   (assert (! (not (= $@tok$1^185.7 $@loc.res_lambda@6@19)) :named ax_3146))
   (assert (! (not (= $@tok$1^185.7 $@loc.res_lambda@6@19)) :named ax_3147))
   (assert (! (not (= $@tok$1^185.7 $@loc.res_lambda@7@20)) :named ax_3148))
   (assert (! (not (= $@tok$1^185.7 $@loc.staticWrapState@25)) :named ax_3149))
   (assert (! (not (= $@tok$1^185.7 $@loc.staticWrapState@25)) :named ax_3150))
   (assert (! (not (= $@tok$1^185.7 $@loc.staticWrapState@32)) :named ax_3151))
   (assert (! (not (= $@tok$1^185.7 $@loc.staticWrapState@32)) :named ax_3152))
   (assert (! (not (= $@tok$1^185.7 $@loc.staticWrapState@38)) :named ax_3153))
   (assert (! (not (= $@tok$1^185.7 $@loc.staticWrapState@41)) :named ax_3154))
   (assert (! (not (= $@tok$1^185.7 $@loc.t)) :named ax_3155))
   (assert (! (not (= $@tok$1^185.7 $@loc.t)) :named ax_3156))
   (assert (! (not (= $@tok$1^185.7 $@loc.x)) :named ax_3157))
   (assert (! (not (= $@tok$1^185.7 $@loc.x)) :named ax_3158))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^134.1)) :named ax_3159))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^134.1)) :named ax_3160))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^142.3)) :named ax_3161))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^142.3)) :named ax_3162))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^144.19)) :named ax_3163))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^144.19)) :named ax_3164))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^146.13)) :named ax_3165))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^146.13)) :named ax_3166))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^146.24)) :named ax_3167))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^146.24)) :named ax_3168))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^146.3)) :named ax_3169))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^146.3)) :named ax_3170))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^148.3)) :named ax_3171))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^148.3)) :named ax_3172))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^151.14)) :named ax_3173))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^151.14)) :named ax_3174))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^151.5)) :named ax_3175))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^151.5)) :named ax_3176))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^152.5)) :named ax_3177))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^152.5)) :named ax_3178))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^153.15)) :named ax_3179))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^153.15)) :named ax_3180))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^153.5)) :named ax_3181))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^153.5)) :named ax_3182))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^157.5)) :named ax_3183))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^157.5)) :named ax_3184))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^158.21)) :named ax_3185))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^158.21)) :named ax_3186))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^159.21)) :named ax_3187))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^159.21)) :named ax_3188))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^163.25)) :named ax_3189))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^163.25)) :named ax_3190))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^163.41)) :named ax_3191))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^163.41)) :named ax_3192))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^167.3)) :named ax_3193))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^167.3)) :named ax_3194))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^168.28)) :named ax_3195))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^168.28)) :named ax_3196))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^179.7)) :named ax_3197))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^179.7)) :named ax_3198))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^181.36)) :named ax_3199))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^181.36)) :named ax_3200))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^181.41)) :named ax_3201))
   (assert (! (not (= $@tok$1^185.7 $@tok$1^181.41)) :named ax_3202))
   (assert (! (not (= $@tok$1^185.7 $@tok$2^0.0)) :named ax_3203))
   (assert (! (not (= $@tok$1^187.36 $@file^?3Cno?20file?3E)) :named ax_3204))
   (assert (! (not (= $@tok$1^187.36 $@file^?3Cno?20file?3E)) :named ax_3205))
   (assert (! (not (= $@tok$1^187.36 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3206))
   (assert (! (not (= $@tok$1^187.36 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3207))
   (assert (! (not (= $@tok$1^187.36 $@loc.assign@12)) :named ax_3208))
   (assert (! (not (= $@tok$1^187.36 $@loc.assign@12)) :named ax_3209))
   (assert (! (not (= $@tok$1^187.36 $@loc.assign@13)) :named ax_3210))
   (assert (! (not (= $@tok$1^187.36 $@loc.assign@13)) :named ax_3211))
   (assert (! (not (= $@tok$1^187.36 $@loc.n)) :named ax_3212))
   (assert (! (not (= $@tok$1^187.36 $@loc.n)) :named ax_3213))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@26)) :named ax_3214))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@26)) :named ax_3215))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@30)) :named ax_3216))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@30)) :named ax_3217))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@33)) :named ax_3218))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@33)) :named ax_3219))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@36)) :named ax_3220))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@36)) :named ax_3221))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@39)) :named ax_3222))
   (assert (! (not (= $@tok$1^187.36 $@loc.owns@42)) :named ax_3223))
   (assert (! (not (= $@tok$1^187.36 $@loc.p)) :named ax_3224))
   (assert (! (not (= $@tok$1^187.36 $@loc.p)) :named ax_3225))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@24)) :named ax_3226))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@24)) :named ax_3227))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@27)) :named ax_3228))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@27)) :named ax_3229))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@28)) :named ax_3230))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@28)) :named ax_3231))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@29)) :named ax_3232))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@29)) :named ax_3233))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@31)) :named ax_3234))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@31)) :named ax_3235))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@34)) :named ax_3236))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@34)) :named ax_3237))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@35)) :named ax_3238))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@35)) :named ax_3239))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@37)) :named ax_3240))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@37)) :named ax_3241))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@40)) :named ax_3242))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@43)) :named ax_3243))
   (assert (! (not (= $@tok$1^187.36 $@loc.prestate@44)) :named ax_3244))
   (assert (! (not (= $@tok$1^187.36 $@loc.res_lambda@4@17)) :named ax_3245))
   (assert (! (not (= $@tok$1^187.36 $@loc.res_lambda@4@17)) :named ax_3246))
   (assert (! (not (= $@tok$1^187.36 $@loc.res_lambda@5@18)) :named ax_3247))
   (assert (! (not (= $@tok$1^187.36 $@loc.res_lambda@5@18)) :named ax_3248))
   (assert (! (not (= $@tok$1^187.36 $@loc.res_lambda@6@19)) :named ax_3249))
   (assert (! (not (= $@tok$1^187.36 $@loc.res_lambda@6@19)) :named ax_3250))
   (assert (! (not (= $@tok$1^187.36 $@loc.res_lambda@7@20)) :named ax_3251))
   (assert (! (not (= $@tok$1^187.36 $@loc.staticWrapState@25)) :named ax_3252))
   (assert (! (not (= $@tok$1^187.36 $@loc.staticWrapState@25)) :named ax_3253))
   (assert (! (not (= $@tok$1^187.36 $@loc.staticWrapState@32)) :named ax_3254))
   (assert (! (not (= $@tok$1^187.36 $@loc.staticWrapState@32)) :named ax_3255))
   (assert (! (not (= $@tok$1^187.36 $@loc.staticWrapState@38)) :named ax_3256))
   (assert (! (not (= $@tok$1^187.36 $@loc.staticWrapState@41)) :named ax_3257))
   (assert (! (not (= $@tok$1^187.36 $@loc.t)) :named ax_3258))
   (assert (! (not (= $@tok$1^187.36 $@loc.t)) :named ax_3259))
   (assert (! (not (= $@tok$1^187.36 $@loc.x)) :named ax_3260))
   (assert (! (not (= $@tok$1^187.36 $@loc.x)) :named ax_3261))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^134.1)) :named ax_3262))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^134.1)) :named ax_3263))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^142.3)) :named ax_3264))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^142.3)) :named ax_3265))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^144.19)) :named ax_3266))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^144.19)) :named ax_3267))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^146.13)) :named ax_3268))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^146.13)) :named ax_3269))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^146.24)) :named ax_3270))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^146.24)) :named ax_3271))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^146.3)) :named ax_3272))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^146.3)) :named ax_3273))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^148.3)) :named ax_3274))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^148.3)) :named ax_3275))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^151.14)) :named ax_3276))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^151.14)) :named ax_3277))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^151.5)) :named ax_3278))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^151.5)) :named ax_3279))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^152.5)) :named ax_3280))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^152.5)) :named ax_3281))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^153.15)) :named ax_3282))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^153.15)) :named ax_3283))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^153.5)) :named ax_3284))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^153.5)) :named ax_3285))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^157.5)) :named ax_3286))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^157.5)) :named ax_3287))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^158.21)) :named ax_3288))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^158.21)) :named ax_3289))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^159.21)) :named ax_3290))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^159.21)) :named ax_3291))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^163.25)) :named ax_3292))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^163.25)) :named ax_3293))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^163.41)) :named ax_3294))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^163.41)) :named ax_3295))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^167.3)) :named ax_3296))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^167.3)) :named ax_3297))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^168.28)) :named ax_3298))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^168.28)) :named ax_3299))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^179.7)) :named ax_3300))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^179.7)) :named ax_3301))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^181.36)) :named ax_3302))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^181.36)) :named ax_3303))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^181.41)) :named ax_3304))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^181.41)) :named ax_3305))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^185.7)) :named ax_3306))
   (assert (! (not (= $@tok$1^187.36 $@tok$1^185.7)) :named ax_3307))
   (assert (! (not (= $@tok$1^187.36 $@tok$2^0.0)) :named ax_3308))
   (assert (! (not (= $@tok$1^187.41 $@file^?3Cno?20file?3E)) :named ax_3309))
   (assert (! (not (= $@tok$1^187.41 $@file^?3Cno?20file?3E)) :named ax_3310))
   (assert (! (not (= $@tok$1^187.41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3311))
   (assert (! (not (= $@tok$1^187.41 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3312))
   (assert (! (not (= $@tok$1^187.41 $@loc.assign@12)) :named ax_3313))
   (assert (! (not (= $@tok$1^187.41 $@loc.assign@12)) :named ax_3314))
   (assert (! (not (= $@tok$1^187.41 $@loc.assign@13)) :named ax_3315))
   (assert (! (not (= $@tok$1^187.41 $@loc.assign@13)) :named ax_3316))
   (assert (! (not (= $@tok$1^187.41 $@loc.n)) :named ax_3317))
   (assert (! (not (= $@tok$1^187.41 $@loc.n)) :named ax_3318))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@26)) :named ax_3319))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@26)) :named ax_3320))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@30)) :named ax_3321))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@30)) :named ax_3322))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@33)) :named ax_3323))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@33)) :named ax_3324))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@36)) :named ax_3325))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@36)) :named ax_3326))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@39)) :named ax_3327))
   (assert (! (not (= $@tok$1^187.41 $@loc.owns@42)) :named ax_3328))
   (assert (! (not (= $@tok$1^187.41 $@loc.p)) :named ax_3329))
   (assert (! (not (= $@tok$1^187.41 $@loc.p)) :named ax_3330))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@24)) :named ax_3331))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@24)) :named ax_3332))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@27)) :named ax_3333))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@27)) :named ax_3334))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@28)) :named ax_3335))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@28)) :named ax_3336))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@29)) :named ax_3337))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@29)) :named ax_3338))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@31)) :named ax_3339))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@31)) :named ax_3340))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@34)) :named ax_3341))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@34)) :named ax_3342))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@35)) :named ax_3343))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@35)) :named ax_3344))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@37)) :named ax_3345))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@37)) :named ax_3346))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@40)) :named ax_3347))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@43)) :named ax_3348))
   (assert (! (not (= $@tok$1^187.41 $@loc.prestate@44)) :named ax_3349))
   (assert (! (not (= $@tok$1^187.41 $@loc.res_lambda@4@17)) :named ax_3350))
   (assert (! (not (= $@tok$1^187.41 $@loc.res_lambda@4@17)) :named ax_3351))
   (assert (! (not (= $@tok$1^187.41 $@loc.res_lambda@5@18)) :named ax_3352))
   (assert (! (not (= $@tok$1^187.41 $@loc.res_lambda@5@18)) :named ax_3353))
   (assert (! (not (= $@tok$1^187.41 $@loc.res_lambda@6@19)) :named ax_3354))
   (assert (! (not (= $@tok$1^187.41 $@loc.res_lambda@6@19)) :named ax_3355))
   (assert (! (not (= $@tok$1^187.41 $@loc.res_lambda@7@20)) :named ax_3356))
   (assert (! (not (= $@tok$1^187.41 $@loc.staticWrapState@25)) :named ax_3357))
   (assert (! (not (= $@tok$1^187.41 $@loc.staticWrapState@25)) :named ax_3358))
   (assert (! (not (= $@tok$1^187.41 $@loc.staticWrapState@32)) :named ax_3359))
   (assert (! (not (= $@tok$1^187.41 $@loc.staticWrapState@32)) :named ax_3360))
   (assert (! (not (= $@tok$1^187.41 $@loc.staticWrapState@38)) :named ax_3361))
   (assert (! (not (= $@tok$1^187.41 $@loc.staticWrapState@41)) :named ax_3362))
   (assert (! (not (= $@tok$1^187.41 $@loc.t)) :named ax_3363))
   (assert (! (not (= $@tok$1^187.41 $@loc.t)) :named ax_3364))
   (assert (! (not (= $@tok$1^187.41 $@loc.x)) :named ax_3365))
   (assert (! (not (= $@tok$1^187.41 $@loc.x)) :named ax_3366))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^134.1)) :named ax_3367))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^134.1)) :named ax_3368))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^142.3)) :named ax_3369))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^142.3)) :named ax_3370))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^144.19)) :named ax_3371))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^144.19)) :named ax_3372))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^146.13)) :named ax_3373))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^146.13)) :named ax_3374))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^146.24)) :named ax_3375))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^146.24)) :named ax_3376))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^146.3)) :named ax_3377))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^146.3)) :named ax_3378))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^148.3)) :named ax_3379))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^148.3)) :named ax_3380))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^151.14)) :named ax_3381))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^151.14)) :named ax_3382))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^151.5)) :named ax_3383))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^151.5)) :named ax_3384))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^152.5)) :named ax_3385))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^152.5)) :named ax_3386))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^153.15)) :named ax_3387))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^153.15)) :named ax_3388))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^153.5)) :named ax_3389))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^153.5)) :named ax_3390))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^157.5)) :named ax_3391))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^157.5)) :named ax_3392))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^158.21)) :named ax_3393))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^158.21)) :named ax_3394))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^159.21)) :named ax_3395))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^159.21)) :named ax_3396))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^163.25)) :named ax_3397))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^163.25)) :named ax_3398))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^163.41)) :named ax_3399))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^163.41)) :named ax_3400))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^167.3)) :named ax_3401))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^167.3)) :named ax_3402))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^168.28)) :named ax_3403))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^168.28)) :named ax_3404))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^179.7)) :named ax_3405))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^179.7)) :named ax_3406))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^181.36)) :named ax_3407))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^181.36)) :named ax_3408))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^181.41)) :named ax_3409))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^181.41)) :named ax_3410))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^185.7)) :named ax_3411))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^185.7)) :named ax_3412))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^187.36)) :named ax_3413))
   (assert (! (not (= $@tok$1^187.41 $@tok$1^187.36)) :named ax_3414))
   (assert (! (not (= $@tok$1^187.41 $@tok$2^0.0)) :named ax_3415))
   (assert (! (not (= $@tok$1^194.27 $@file^?3Cno?20file?3E)) :named ax_3416))
   (assert (! (not (= $@tok$1^194.27 $@file^?3Cno?20file?3E)) :named ax_3417))
   (assert (! (not (= $@tok$1^194.27 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3418))
   (assert (! (not (= $@tok$1^194.27 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3419))
   (assert (! (not (= $@tok$1^194.27 $@loc.assign@12)) :named ax_3420))
   (assert (! (not (= $@tok$1^194.27 $@loc.assign@12)) :named ax_3421))
   (assert (! (not (= $@tok$1^194.27 $@loc.assign@13)) :named ax_3422))
   (assert (! (not (= $@tok$1^194.27 $@loc.assign@13)) :named ax_3423))
   (assert (! (not (= $@tok$1^194.27 $@loc.n)) :named ax_3424))
   (assert (! (not (= $@tok$1^194.27 $@loc.n)) :named ax_3425))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@26)) :named ax_3426))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@26)) :named ax_3427))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@30)) :named ax_3428))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@30)) :named ax_3429))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@33)) :named ax_3430))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@33)) :named ax_3431))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@36)) :named ax_3432))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@36)) :named ax_3433))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@39)) :named ax_3434))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@39)) :named ax_3435))
   (assert (! (not (= $@tok$1^194.27 $@loc.owns@42)) :named ax_3436))
   (assert (! (not (= $@tok$1^194.27 $@loc.p)) :named ax_3437))
   (assert (! (not (= $@tok$1^194.27 $@loc.p)) :named ax_3438))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@24)) :named ax_3439))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@24)) :named ax_3440))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@27)) :named ax_3441))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@27)) :named ax_3442))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@28)) :named ax_3443))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@28)) :named ax_3444))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@29)) :named ax_3445))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@29)) :named ax_3446))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@31)) :named ax_3447))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@31)) :named ax_3448))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@34)) :named ax_3449))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@34)) :named ax_3450))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@35)) :named ax_3451))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@35)) :named ax_3452))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@37)) :named ax_3453))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@37)) :named ax_3454))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@40)) :named ax_3455))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@40)) :named ax_3456))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@43)) :named ax_3457))
   (assert (! (not (= $@tok$1^194.27 $@loc.prestate@44)) :named ax_3458))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@4@17)) :named ax_3459))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@4@17)) :named ax_3460))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@5@18)) :named ax_3461))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@5@18)) :named ax_3462))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@6@19)) :named ax_3463))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@6@19)) :named ax_3464))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@7@20)) :named ax_3465))
   (assert (! (not (= $@tok$1^194.27 $@loc.res_lambda@7@20)) :named ax_3466))
   (assert (! (not (= $@tok$1^194.27 $@loc.staticWrapState@25)) :named ax_3467))
   (assert (! (not (= $@tok$1^194.27 $@loc.staticWrapState@25)) :named ax_3468))
   (assert (! (not (= $@tok$1^194.27 $@loc.staticWrapState@32)) :named ax_3469))
   (assert (! (not (= $@tok$1^194.27 $@loc.staticWrapState@32)) :named ax_3470))
   (assert (! (not (= $@tok$1^194.27 $@loc.staticWrapState@38)) :named ax_3471))
   (assert (! (not (= $@tok$1^194.27 $@loc.staticWrapState@38)) :named ax_3472))
   (assert (! (not (= $@tok$1^194.27 $@loc.staticWrapState@41)) :named ax_3473))
   (assert (! (not (= $@tok$1^194.27 $@loc.t)) :named ax_3474))
   (assert (! (not (= $@tok$1^194.27 $@loc.t)) :named ax_3475))
   (assert (! (not (= $@tok$1^194.27 $@loc.x)) :named ax_3476))
   (assert (! (not (= $@tok$1^194.27 $@loc.x)) :named ax_3477))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^134.1)) :named ax_3478))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^134.1)) :named ax_3479))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^142.3)) :named ax_3480))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^142.3)) :named ax_3481))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^144.19)) :named ax_3482))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^144.19)) :named ax_3483))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^146.13)) :named ax_3484))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^146.13)) :named ax_3485))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^146.24)) :named ax_3486))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^146.24)) :named ax_3487))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^146.3)) :named ax_3488))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^146.3)) :named ax_3489))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^148.3)) :named ax_3490))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^148.3)) :named ax_3491))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^151.14)) :named ax_3492))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^151.14)) :named ax_3493))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^151.5)) :named ax_3494))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^151.5)) :named ax_3495))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^152.5)) :named ax_3496))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^152.5)) :named ax_3497))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^153.15)) :named ax_3498))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^153.15)) :named ax_3499))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^153.5)) :named ax_3500))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^153.5)) :named ax_3501))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^157.5)) :named ax_3502))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^157.5)) :named ax_3503))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^158.21)) :named ax_3504))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^158.21)) :named ax_3505))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^159.21)) :named ax_3506))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^159.21)) :named ax_3507))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^163.25)) :named ax_3508))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^163.25)) :named ax_3509))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^163.41)) :named ax_3510))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^163.41)) :named ax_3511))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^167.3)) :named ax_3512))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^167.3)) :named ax_3513))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^168.28)) :named ax_3514))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^168.28)) :named ax_3515))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^179.7)) :named ax_3516))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^179.7)) :named ax_3517))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^181.36)) :named ax_3518))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^181.36)) :named ax_3519))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^181.41)) :named ax_3520))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^181.41)) :named ax_3521))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^185.7)) :named ax_3522))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^185.7)) :named ax_3523))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^187.36)) :named ax_3524))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^187.36)) :named ax_3525))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^187.41)) :named ax_3526))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^187.41)) :named ax_3527))
   (assert (! (not (= $@tok$1^194.27 $@tok$1^194.37)) :named ax_3528))
   (assert (! (not (= $@tok$1^194.27 $@tok$2^0.0)) :named ax_3529))
   (assert (! (not (= $@tok$1^194.37 $@file^?3Cno?20file?3E)) :named ax_3530))
   (assert (! (not (= $@tok$1^194.37 $@file^?3Cno?20file?3E)) :named ax_3531))
   (assert (! (not (= $@tok$1^194.37 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3532))
   (assert (! (not (= $@tok$1^194.37 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3533))
   (assert (! (not (= $@tok$1^194.37 $@loc.assign@12)) :named ax_3534))
   (assert (! (not (= $@tok$1^194.37 $@loc.assign@12)) :named ax_3535))
   (assert (! (not (= $@tok$1^194.37 $@loc.assign@13)) :named ax_3536))
   (assert (! (not (= $@tok$1^194.37 $@loc.assign@13)) :named ax_3537))
   (assert (! (not (= $@tok$1^194.37 $@loc.n)) :named ax_3538))
   (assert (! (not (= $@tok$1^194.37 $@loc.n)) :named ax_3539))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@26)) :named ax_3540))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@26)) :named ax_3541))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@30)) :named ax_3542))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@30)) :named ax_3543))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@33)) :named ax_3544))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@33)) :named ax_3545))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@36)) :named ax_3546))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@36)) :named ax_3547))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@39)) :named ax_3548))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@39)) :named ax_3549))
   (assert (! (not (= $@tok$1^194.37 $@loc.owns@42)) :named ax_3550))
   (assert (! (not (= $@tok$1^194.37 $@loc.p)) :named ax_3551))
   (assert (! (not (= $@tok$1^194.37 $@loc.p)) :named ax_3552))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@24)) :named ax_3553))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@24)) :named ax_3554))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@27)) :named ax_3555))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@27)) :named ax_3556))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@28)) :named ax_3557))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@28)) :named ax_3558))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@29)) :named ax_3559))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@29)) :named ax_3560))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@31)) :named ax_3561))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@31)) :named ax_3562))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@34)) :named ax_3563))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@34)) :named ax_3564))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@35)) :named ax_3565))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@35)) :named ax_3566))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@37)) :named ax_3567))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@37)) :named ax_3568))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@40)) :named ax_3569))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@40)) :named ax_3570))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@43)) :named ax_3571))
   (assert (! (not (= $@tok$1^194.37 $@loc.prestate@44)) :named ax_3572))
   (assert (! (not (= $@tok$1^194.37 $@loc.res_lambda@4@17)) :named ax_3573))
   (assert (! (not (= $@tok$1^194.37 $@loc.res_lambda@4@17)) :named ax_3574))
   (assert (! (not (= $@tok$1^194.37 $@loc.res_lambda@5@18)) :named ax_3575))
   (assert (! (not (= $@tok$1^194.37 $@loc.res_lambda@5@18)) :named ax_3576))
   (assert (! (not (= $@tok$1^194.37 $@loc.res_lambda@6@19)) :named ax_3577))
   (assert (! (not (= $@tok$1^194.37 $@loc.res_lambda@6@19)) :named ax_3578))
   (assert (! (not (= $@tok$1^194.37 $@loc.res_lambda@7@20)) :named ax_3579))
   (assert (! (not (= $@tok$1^194.37 $@loc.staticWrapState@25)) :named ax_3580))
   (assert (! (not (= $@tok$1^194.37 $@loc.staticWrapState@25)) :named ax_3581))
   (assert (! (not (= $@tok$1^194.37 $@loc.staticWrapState@32)) :named ax_3582))
   (assert (! (not (= $@tok$1^194.37 $@loc.staticWrapState@32)) :named ax_3583))
   (assert (! (not (= $@tok$1^194.37 $@loc.staticWrapState@38)) :named ax_3584))
   (assert (! (not (= $@tok$1^194.37 $@loc.staticWrapState@38)) :named ax_3585))
   (assert (! (not (= $@tok$1^194.37 $@loc.staticWrapState@41)) :named ax_3586))
   (assert (! (not (= $@tok$1^194.37 $@loc.t)) :named ax_3587))
   (assert (! (not (= $@tok$1^194.37 $@loc.t)) :named ax_3588))
   (assert (! (not (= $@tok$1^194.37 $@loc.x)) :named ax_3589))
   (assert (! (not (= $@tok$1^194.37 $@loc.x)) :named ax_3590))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^134.1)) :named ax_3591))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^134.1)) :named ax_3592))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^142.3)) :named ax_3593))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^142.3)) :named ax_3594))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^144.19)) :named ax_3595))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^144.19)) :named ax_3596))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^146.13)) :named ax_3597))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^146.13)) :named ax_3598))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^146.24)) :named ax_3599))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^146.24)) :named ax_3600))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^146.3)) :named ax_3601))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^146.3)) :named ax_3602))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^148.3)) :named ax_3603))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^148.3)) :named ax_3604))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^151.14)) :named ax_3605))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^151.14)) :named ax_3606))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^151.5)) :named ax_3607))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^151.5)) :named ax_3608))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^152.5)) :named ax_3609))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^152.5)) :named ax_3610))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^153.15)) :named ax_3611))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^153.15)) :named ax_3612))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^153.5)) :named ax_3613))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^153.5)) :named ax_3614))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^157.5)) :named ax_3615))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^157.5)) :named ax_3616))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^158.21)) :named ax_3617))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^158.21)) :named ax_3618))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^159.21)) :named ax_3619))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^159.21)) :named ax_3620))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^163.25)) :named ax_3621))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^163.25)) :named ax_3622))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^163.41)) :named ax_3623))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^163.41)) :named ax_3624))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^167.3)) :named ax_3625))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^167.3)) :named ax_3626))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^168.28)) :named ax_3627))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^168.28)) :named ax_3628))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^179.7)) :named ax_3629))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^179.7)) :named ax_3630))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^181.36)) :named ax_3631))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^181.36)) :named ax_3632))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^181.41)) :named ax_3633))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^181.41)) :named ax_3634))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^185.7)) :named ax_3635))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^185.7)) :named ax_3636))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^187.36)) :named ax_3637))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^187.36)) :named ax_3638))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^187.41)) :named ax_3639))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^187.41)) :named ax_3640))
   (assert (! (not (= $@tok$1^194.37 $@tok$1^194.27)) :named ax_3641))
   (assert (! (not (= $@tok$1^194.37 $@tok$2^0.0)) :named ax_3642))
   (assert (! (not (= $@tok$1^195.5 $@file^?3Cno?20file?3E)) :named ax_3643))
   (assert (! (not (= $@tok$1^195.5 $@file^?3Cno?20file?3E)) :named ax_3644))
   (assert (! (not (= $@tok$1^195.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3645))
   (assert (! (not (= $@tok$1^195.5 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3646))
   (assert (! (not (= $@tok$1^195.5 $@loc.assign@12)) :named ax_3647))
   (assert (! (not (= $@tok$1^195.5 $@loc.assign@12)) :named ax_3648))
   (assert (! (not (= $@tok$1^195.5 $@loc.assign@13)) :named ax_3649))
   (assert (! (not (= $@tok$1^195.5 $@loc.assign@13)) :named ax_3650))
   (assert (! (not (= $@tok$1^195.5 $@loc.n)) :named ax_3651))
   (assert (! (not (= $@tok$1^195.5 $@loc.n)) :named ax_3652))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@26)) :named ax_3653))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@26)) :named ax_3654))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@30)) :named ax_3655))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@30)) :named ax_3656))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@33)) :named ax_3657))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@33)) :named ax_3658))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@36)) :named ax_3659))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@36)) :named ax_3660))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@39)) :named ax_3661))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@39)) :named ax_3662))
   (assert (! (not (= $@tok$1^195.5 $@loc.owns@42)) :named ax_3663))
   (assert (! (not (= $@tok$1^195.5 $@loc.p)) :named ax_3664))
   (assert (! (not (= $@tok$1^195.5 $@loc.p)) :named ax_3665))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@24)) :named ax_3666))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@24)) :named ax_3667))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@27)) :named ax_3668))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@27)) :named ax_3669))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@28)) :named ax_3670))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@28)) :named ax_3671))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@29)) :named ax_3672))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@29)) :named ax_3673))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@31)) :named ax_3674))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@31)) :named ax_3675))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@34)) :named ax_3676))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@34)) :named ax_3677))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@35)) :named ax_3678))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@35)) :named ax_3679))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@37)) :named ax_3680))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@37)) :named ax_3681))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@40)) :named ax_3682))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@40)) :named ax_3683))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@43)) :named ax_3684))
   (assert (! (not (= $@tok$1^195.5 $@loc.prestate@44)) :named ax_3685))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@4@17)) :named ax_3686))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@4@17)) :named ax_3687))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@5@18)) :named ax_3688))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@5@18)) :named ax_3689))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@6@19)) :named ax_3690))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@6@19)) :named ax_3691))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@7@20)) :named ax_3692))
   (assert (! (not (= $@tok$1^195.5 $@loc.res_lambda@7@20)) :named ax_3693))
   (assert (! (not (= $@tok$1^195.5 $@loc.staticWrapState@25)) :named ax_3694))
   (assert (! (not (= $@tok$1^195.5 $@loc.staticWrapState@25)) :named ax_3695))
   (assert (! (not (= $@tok$1^195.5 $@loc.staticWrapState@32)) :named ax_3696))
   (assert (! (not (= $@tok$1^195.5 $@loc.staticWrapState@32)) :named ax_3697))
   (assert (! (not (= $@tok$1^195.5 $@loc.staticWrapState@38)) :named ax_3698))
   (assert (! (not (= $@tok$1^195.5 $@loc.staticWrapState@38)) :named ax_3699))
   (assert (! (not (= $@tok$1^195.5 $@loc.staticWrapState@41)) :named ax_3700))
   (assert (! (not (= $@tok$1^195.5 $@loc.t)) :named ax_3701))
   (assert (! (not (= $@tok$1^195.5 $@loc.t)) :named ax_3702))
   (assert (! (not (= $@tok$1^195.5 $@loc.x)) :named ax_3703))
   (assert (! (not (= $@tok$1^195.5 $@loc.x)) :named ax_3704))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^134.1)) :named ax_3705))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^134.1)) :named ax_3706))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^142.3)) :named ax_3707))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^142.3)) :named ax_3708))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^144.19)) :named ax_3709))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^144.19)) :named ax_3710))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^146.13)) :named ax_3711))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^146.13)) :named ax_3712))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^146.24)) :named ax_3713))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^146.24)) :named ax_3714))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^146.3)) :named ax_3715))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^146.3)) :named ax_3716))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^148.3)) :named ax_3717))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^148.3)) :named ax_3718))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^151.14)) :named ax_3719))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^151.14)) :named ax_3720))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^151.5)) :named ax_3721))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^151.5)) :named ax_3722))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^152.5)) :named ax_3723))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^152.5)) :named ax_3724))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^153.15)) :named ax_3725))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^153.15)) :named ax_3726))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^153.5)) :named ax_3727))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^153.5)) :named ax_3728))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^157.5)) :named ax_3729))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^157.5)) :named ax_3730))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^158.21)) :named ax_3731))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^158.21)) :named ax_3732))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^159.21)) :named ax_3733))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^159.21)) :named ax_3734))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^163.25)) :named ax_3735))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^163.25)) :named ax_3736))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^163.41)) :named ax_3737))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^163.41)) :named ax_3738))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^167.3)) :named ax_3739))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^167.3)) :named ax_3740))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^168.28)) :named ax_3741))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^168.28)) :named ax_3742))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^179.7)) :named ax_3743))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^179.7)) :named ax_3744))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^181.36)) :named ax_3745))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^181.36)) :named ax_3746))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^181.41)) :named ax_3747))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^181.41)) :named ax_3748))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^185.7)) :named ax_3749))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^185.7)) :named ax_3750))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^187.36)) :named ax_3751))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^187.36)) :named ax_3752))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^187.41)) :named ax_3753))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^187.41)) :named ax_3754))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^194.27)) :named ax_3755))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^194.27)) :named ax_3756))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^194.37)) :named ax_3757))
   (assert (! (not (= $@tok$1^195.5 $@tok$1^194.37)) :named ax_3758))
   (assert (! (not (= $@tok$1^195.5 $@tok$2^0.0)) :named ax_3759))
   (assert (! (not (= $@tok$1^198.3 $@file^?3Cno?20file?3E)) :named ax_3760))
   (assert (! (not (= $@tok$1^198.3 $@file^?3Cno?20file?3E)) :named ax_3761))
   (assert (! (not (= $@tok$1^198.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3762))
   (assert (! (not (= $@tok$1^198.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3763))
   (assert (! (not (= $@tok$1^198.3 $@loc.assign@12)) :named ax_3764))
   (assert (! (not (= $@tok$1^198.3 $@loc.assign@12)) :named ax_3765))
   (assert (! (not (= $@tok$1^198.3 $@loc.assign@13)) :named ax_3766))
   (assert (! (not (= $@tok$1^198.3 $@loc.assign@13)) :named ax_3767))
   (assert (! (not (= $@tok$1^198.3 $@loc.n)) :named ax_3768))
   (assert (! (not (= $@tok$1^198.3 $@loc.n)) :named ax_3769))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@26)) :named ax_3770))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@26)) :named ax_3771))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@30)) :named ax_3772))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@30)) :named ax_3773))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@33)) :named ax_3774))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@33)) :named ax_3775))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@36)) :named ax_3776))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@36)) :named ax_3777))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@39)) :named ax_3778))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@39)) :named ax_3779))
   (assert (! (not (= $@tok$1^198.3 $@loc.owns@42)) :named ax_3780))
   (assert (! (not (= $@tok$1^198.3 $@loc.p)) :named ax_3781))
   (assert (! (not (= $@tok$1^198.3 $@loc.p)) :named ax_3782))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@24)) :named ax_3783))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@24)) :named ax_3784))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@27)) :named ax_3785))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@27)) :named ax_3786))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@28)) :named ax_3787))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@28)) :named ax_3788))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@29)) :named ax_3789))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@29)) :named ax_3790))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@31)) :named ax_3791))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@31)) :named ax_3792))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@34)) :named ax_3793))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@34)) :named ax_3794))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@35)) :named ax_3795))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@35)) :named ax_3796))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@37)) :named ax_3797))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@37)) :named ax_3798))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@40)) :named ax_3799))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@40)) :named ax_3800))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@43)) :named ax_3801))
   (assert (! (not (= $@tok$1^198.3 $@loc.prestate@44)) :named ax_3802))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@4@17)) :named ax_3803))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@4@17)) :named ax_3804))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@5@18)) :named ax_3805))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@5@18)) :named ax_3806))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@6@19)) :named ax_3807))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@6@19)) :named ax_3808))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@7@20)) :named ax_3809))
   (assert (! (not (= $@tok$1^198.3 $@loc.res_lambda@7@20)) :named ax_3810))
   (assert (! (not (= $@tok$1^198.3 $@loc.staticWrapState@25)) :named ax_3811))
   (assert (! (not (= $@tok$1^198.3 $@loc.staticWrapState@25)) :named ax_3812))
   (assert (! (not (= $@tok$1^198.3 $@loc.staticWrapState@32)) :named ax_3813))
   (assert (! (not (= $@tok$1^198.3 $@loc.staticWrapState@32)) :named ax_3814))
   (assert (! (not (= $@tok$1^198.3 $@loc.staticWrapState@38)) :named ax_3815))
   (assert (! (not (= $@tok$1^198.3 $@loc.staticWrapState@38)) :named ax_3816))
   (assert (! (not (= $@tok$1^198.3 $@loc.staticWrapState@41)) :named ax_3817))
   (assert (! (not (= $@tok$1^198.3 $@loc.t)) :named ax_3818))
   (assert (! (not (= $@tok$1^198.3 $@loc.t)) :named ax_3819))
   (assert (! (not (= $@tok$1^198.3 $@loc.x)) :named ax_3820))
   (assert (! (not (= $@tok$1^198.3 $@loc.x)) :named ax_3821))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^134.1)) :named ax_3822))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^134.1)) :named ax_3823))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^142.3)) :named ax_3824))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^142.3)) :named ax_3825))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^144.19)) :named ax_3826))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^144.19)) :named ax_3827))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^146.13)) :named ax_3828))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^146.13)) :named ax_3829))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^146.24)) :named ax_3830))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^146.24)) :named ax_3831))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^146.3)) :named ax_3832))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^146.3)) :named ax_3833))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^148.3)) :named ax_3834))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^148.3)) :named ax_3835))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^151.14)) :named ax_3836))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^151.14)) :named ax_3837))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^151.5)) :named ax_3838))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^151.5)) :named ax_3839))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^152.5)) :named ax_3840))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^152.5)) :named ax_3841))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^153.15)) :named ax_3842))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^153.15)) :named ax_3843))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^153.5)) :named ax_3844))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^153.5)) :named ax_3845))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^157.5)) :named ax_3846))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^157.5)) :named ax_3847))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^158.21)) :named ax_3848))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^158.21)) :named ax_3849))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^159.21)) :named ax_3850))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^159.21)) :named ax_3851))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^163.25)) :named ax_3852))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^163.25)) :named ax_3853))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^163.41)) :named ax_3854))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^163.41)) :named ax_3855))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^167.3)) :named ax_3856))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^167.3)) :named ax_3857))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^168.28)) :named ax_3858))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^168.28)) :named ax_3859))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^179.7)) :named ax_3860))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^179.7)) :named ax_3861))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^181.36)) :named ax_3862))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^181.36)) :named ax_3863))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^181.41)) :named ax_3864))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^181.41)) :named ax_3865))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^185.7)) :named ax_3866))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^185.7)) :named ax_3867))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^187.36)) :named ax_3868))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^187.36)) :named ax_3869))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^187.41)) :named ax_3870))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^187.41)) :named ax_3871))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^194.27)) :named ax_3872))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^194.27)) :named ax_3873))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^194.37)) :named ax_3874))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^194.37)) :named ax_3875))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^195.5)) :named ax_3876))
   (assert (! (not (= $@tok$1^198.3 $@tok$1^195.5)) :named ax_3877))
   (assert (! (not (= $@tok$1^198.3 $@tok$2^0.0)) :named ax_3878))
   (assert (! (not (= $@tok$1^199.19 $@file^?3Cno?20file?3E)) :named ax_3879))
   (assert (! (not (= $@tok$1^199.19 $@file^?3Cno?20file?3E)) :named ax_3880))
   (assert (! (not (= $@tok$1^199.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3881))
   (assert (! (not (= $@tok$1^199.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_3882))
   (assert (! (not (= $@tok$1^199.19 $@loc.assign@12)) :named ax_3883))
   (assert (! (not (= $@tok$1^199.19 $@loc.assign@12)) :named ax_3884))
   (assert (! (not (= $@tok$1^199.19 $@loc.assign@13)) :named ax_3885))
   (assert (! (not (= $@tok$1^199.19 $@loc.assign@13)) :named ax_3886))
   (assert (! (not (= $@tok$1^199.19 $@loc.n)) :named ax_3887))
   (assert (! (not (= $@tok$1^199.19 $@loc.n)) :named ax_3888))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@26)) :named ax_3889))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@26)) :named ax_3890))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@30)) :named ax_3891))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@30)) :named ax_3892))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@33)) :named ax_3893))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@33)) :named ax_3894))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@36)) :named ax_3895))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@36)) :named ax_3896))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@39)) :named ax_3897))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@39)) :named ax_3898))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@42)) :named ax_3899))
   (assert (! (not (= $@tok$1^199.19 $@loc.owns@42)) :named ax_3900))
   (assert (! (not (= $@tok$1^199.19 $@loc.p)) :named ax_3901))
   (assert (! (not (= $@tok$1^199.19 $@loc.p)) :named ax_3902))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@24)) :named ax_3903))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@24)) :named ax_3904))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@27)) :named ax_3905))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@27)) :named ax_3906))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@28)) :named ax_3907))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@28)) :named ax_3908))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@29)) :named ax_3909))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@29)) :named ax_3910))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@31)) :named ax_3911))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@31)) :named ax_3912))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@34)) :named ax_3913))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@34)) :named ax_3914))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@35)) :named ax_3915))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@35)) :named ax_3916))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@37)) :named ax_3917))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@37)) :named ax_3918))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@40)) :named ax_3919))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@40)) :named ax_3920))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@43)) :named ax_3921))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@43)) :named ax_3922))
   (assert (! (not (= $@tok$1^199.19 $@loc.prestate@44)) :named ax_3923))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@4@17)) :named ax_3924))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@4@17)) :named ax_3925))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@5@18)) :named ax_3926))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@5@18)) :named ax_3927))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@6@19)) :named ax_3928))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@6@19)) :named ax_3929))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@7@20)) :named ax_3930))
   (assert (! (not (= $@tok$1^199.19 $@loc.res_lambda@7@20)) :named ax_3931))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@25)) :named ax_3932))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@25)) :named ax_3933))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@32)) :named ax_3934))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@32)) :named ax_3935))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@38)) :named ax_3936))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@38)) :named ax_3937))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@41)) :named ax_3938))
   (assert (! (not (= $@tok$1^199.19 $@loc.staticWrapState@41)) :named ax_3939))
   (assert (! (not (= $@tok$1^199.19 $@loc.t)) :named ax_3940))
   (assert (! (not (= $@tok$1^199.19 $@loc.t)) :named ax_3941))
   (assert (! (not (= $@tok$1^199.19 $@loc.x)) :named ax_3942))
   (assert (! (not (= $@tok$1^199.19 $@loc.x)) :named ax_3943))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^134.1)) :named ax_3944))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^134.1)) :named ax_3945))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^142.3)) :named ax_3946))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^142.3)) :named ax_3947))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^144.19)) :named ax_3948))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^144.19)) :named ax_3949))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^146.13)) :named ax_3950))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^146.13)) :named ax_3951))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^146.24)) :named ax_3952))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^146.24)) :named ax_3953))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^146.3)) :named ax_3954))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^146.3)) :named ax_3955))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^148.3)) :named ax_3956))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^148.3)) :named ax_3957))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^151.14)) :named ax_3958))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^151.14)) :named ax_3959))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^151.5)) :named ax_3960))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^151.5)) :named ax_3961))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^152.5)) :named ax_3962))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^152.5)) :named ax_3963))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^153.15)) :named ax_3964))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^153.15)) :named ax_3965))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^153.5)) :named ax_3966))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^153.5)) :named ax_3967))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^157.5)) :named ax_3968))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^157.5)) :named ax_3969))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^158.21)) :named ax_3970))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^158.21)) :named ax_3971))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^159.21)) :named ax_3972))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^159.21)) :named ax_3973))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^163.25)) :named ax_3974))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^163.25)) :named ax_3975))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^163.41)) :named ax_3976))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^163.41)) :named ax_3977))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^167.3)) :named ax_3978))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^167.3)) :named ax_3979))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^168.28)) :named ax_3980))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^168.28)) :named ax_3981))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^179.7)) :named ax_3982))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^179.7)) :named ax_3983))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^181.36)) :named ax_3984))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^181.36)) :named ax_3985))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^181.41)) :named ax_3986))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^181.41)) :named ax_3987))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^185.7)) :named ax_3988))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^185.7)) :named ax_3989))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^187.36)) :named ax_3990))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^187.36)) :named ax_3991))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^187.41)) :named ax_3992))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^187.41)) :named ax_3993))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^194.27)) :named ax_3994))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^194.27)) :named ax_3995))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^194.37)) :named ax_3996))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^194.37)) :named ax_3997))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^195.5)) :named ax_3998))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^195.5)) :named ax_3999))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^198.3)) :named ax_4000))
   (assert (! (not (= $@tok$1^199.19 $@tok$1^198.3)) :named ax_4001))
   (assert (! (not (= $@tok$1^199.19 $@tok$2^0.0)) :named ax_4002))
   (assert (! (not (= $@tok$1^200.19 $@file^?3Cno?20file?3E)) :named ax_4003))
   (assert (! (not (= $@tok$1^200.19 $@file^?3Cno?20file?3E)) :named ax_4004))
   (assert (! (not (= $@tok$1^200.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_4005))
   (assert (! (not (= $@tok$1^200.19 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_4006))
   (assert (! (not (= $@tok$1^200.19 $@loc.assign@12)) :named ax_4007))
   (assert (! (not (= $@tok$1^200.19 $@loc.assign@12)) :named ax_4008))
   (assert (! (not (= $@tok$1^200.19 $@loc.assign@13)) :named ax_4009))
   (assert (! (not (= $@tok$1^200.19 $@loc.assign@13)) :named ax_4010))
   (assert (! (not (= $@tok$1^200.19 $@loc.n)) :named ax_4011))
   (assert (! (not (= $@tok$1^200.19 $@loc.n)) :named ax_4012))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@26)) :named ax_4013))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@26)) :named ax_4014))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@30)) :named ax_4015))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@30)) :named ax_4016))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@33)) :named ax_4017))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@33)) :named ax_4018))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@36)) :named ax_4019))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@36)) :named ax_4020))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@39)) :named ax_4021))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@39)) :named ax_4022))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@42)) :named ax_4023))
   (assert (! (not (= $@tok$1^200.19 $@loc.owns@42)) :named ax_4024))
   (assert (! (not (= $@tok$1^200.19 $@loc.p)) :named ax_4025))
   (assert (! (not (= $@tok$1^200.19 $@loc.p)) :named ax_4026))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@24)) :named ax_4027))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@24)) :named ax_4028))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@27)) :named ax_4029))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@27)) :named ax_4030))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@28)) :named ax_4031))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@28)) :named ax_4032))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@29)) :named ax_4033))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@29)) :named ax_4034))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@31)) :named ax_4035))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@31)) :named ax_4036))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@34)) :named ax_4037))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@34)) :named ax_4038))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@35)) :named ax_4039))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@35)) :named ax_4040))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@37)) :named ax_4041))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@37)) :named ax_4042))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@40)) :named ax_4043))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@40)) :named ax_4044))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@43)) :named ax_4045))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@43)) :named ax_4046))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@44)) :named ax_4047))
   (assert (! (not (= $@tok$1^200.19 $@loc.prestate@44)) :named ax_4048))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@4@17)) :named ax_4049))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@4@17)) :named ax_4050))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@5@18)) :named ax_4051))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@5@18)) :named ax_4052))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@6@19)) :named ax_4053))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@6@19)) :named ax_4054))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@7@20)) :named ax_4055))
   (assert (! (not (= $@tok$1^200.19 $@loc.res_lambda@7@20)) :named ax_4056))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@25)) :named ax_4057))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@25)) :named ax_4058))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@32)) :named ax_4059))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@32)) :named ax_4060))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@38)) :named ax_4061))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@38)) :named ax_4062))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@41)) :named ax_4063))
   (assert (! (not (= $@tok$1^200.19 $@loc.staticWrapState@41)) :named ax_4064))
   (assert (! (not (= $@tok$1^200.19 $@loc.t)) :named ax_4065))
   (assert (! (not (= $@tok$1^200.19 $@loc.t)) :named ax_4066))
   (assert (! (not (= $@tok$1^200.19 $@loc.x)) :named ax_4067))
   (assert (! (not (= $@tok$1^200.19 $@loc.x)) :named ax_4068))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^134.1)) :named ax_4069))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^134.1)) :named ax_4070))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^142.3)) :named ax_4071))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^142.3)) :named ax_4072))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^144.19)) :named ax_4073))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^144.19)) :named ax_4074))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^146.13)) :named ax_4075))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^146.13)) :named ax_4076))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^146.24)) :named ax_4077))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^146.24)) :named ax_4078))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^146.3)) :named ax_4079))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^146.3)) :named ax_4080))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^148.3)) :named ax_4081))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^148.3)) :named ax_4082))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^151.14)) :named ax_4083))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^151.14)) :named ax_4084))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^151.5)) :named ax_4085))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^151.5)) :named ax_4086))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^152.5)) :named ax_4087))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^152.5)) :named ax_4088))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^153.15)) :named ax_4089))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^153.15)) :named ax_4090))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^153.5)) :named ax_4091))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^153.5)) :named ax_4092))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^157.5)) :named ax_4093))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^157.5)) :named ax_4094))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^158.21)) :named ax_4095))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^158.21)) :named ax_4096))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^159.21)) :named ax_4097))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^159.21)) :named ax_4098))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^163.25)) :named ax_4099))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^163.25)) :named ax_4100))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^163.41)) :named ax_4101))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^163.41)) :named ax_4102))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^167.3)) :named ax_4103))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^167.3)) :named ax_4104))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^168.28)) :named ax_4105))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^168.28)) :named ax_4106))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^179.7)) :named ax_4107))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^179.7)) :named ax_4108))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^181.36)) :named ax_4109))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^181.36)) :named ax_4110))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^181.41)) :named ax_4111))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^181.41)) :named ax_4112))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^185.7)) :named ax_4113))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^185.7)) :named ax_4114))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^187.36)) :named ax_4115))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^187.36)) :named ax_4116))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^187.41)) :named ax_4117))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^187.41)) :named ax_4118))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^194.27)) :named ax_4119))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^194.27)) :named ax_4120))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^194.37)) :named ax_4121))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^194.37)) :named ax_4122))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^195.5)) :named ax_4123))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^195.5)) :named ax_4124))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^198.3)) :named ax_4125))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^198.3)) :named ax_4126))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^199.19)) :named ax_4127))
   (assert (! (not (= $@tok$1^200.19 $@tok$1^199.19)) :named ax_4128))
   (assert (! (not (= $@tok$1^200.19 $@tok$2^0.0)) :named ax_4129))
   (assert (! (not (= $@tok$2^0.0 $@file^?3Cno?20file?3E)) :named ax_4130))
   (assert (! (not (= $@tok$2^0.0 $@file^?3Cno?20file?3E)) :named ax_4131))
   (assert (! (not (= $@tok$2^0.0 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_4132))
   (assert (! (not (= $@tok$2^0.0 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)) :named ax_4133))
   (assert (! (not (= $@tok$2^0.0 $@loc.assign@12)) :named ax_4134))
   (assert (! (not (= $@tok$2^0.0 $@loc.assign@13)) :named ax_4135))
   (assert (! (not (= $@tok$2^0.0 $@loc.n)) :named ax_4136))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@26)) :named ax_4137))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@30)) :named ax_4138))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@33)) :named ax_4139))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@36)) :named ax_4140))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@39)) :named ax_4141))
   (assert (! (not (= $@tok$2^0.0 $@loc.owns@42)) :named ax_4142))
   (assert (! (not (= $@tok$2^0.0 $@loc.p)) :named ax_4143))
   (assert (! (not (= $@tok$2^0.0 $@loc.p)) :named ax_4144))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@24)) :named ax_4145))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@27)) :named ax_4146))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@28)) :named ax_4147))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@29)) :named ax_4148))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@31)) :named ax_4149))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@34)) :named ax_4150))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@35)) :named ax_4151))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@37)) :named ax_4152))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@40)) :named ax_4153))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@43)) :named ax_4154))
   (assert (! (not (= $@tok$2^0.0 $@loc.prestate@44)) :named ax_4155))
   (assert (! (not (= $@tok$2^0.0 $@loc.res_lambda@4@17)) :named ax_4156))
   (assert (! (not (= $@tok$2^0.0 $@loc.res_lambda@5@18)) :named ax_4157))
   (assert (! (not (= $@tok$2^0.0 $@loc.res_lambda@6@19)) :named ax_4158))
   (assert (! (not (= $@tok$2^0.0 $@loc.res_lambda@7@20)) :named ax_4159))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@25)) :named ax_4160))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@32)) :named ax_4161))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@38)) :named ax_4162))
   (assert (! (not (= $@tok$2^0.0 $@loc.staticWrapState@41)) :named ax_4163))
   (assert (! (not (= $@tok$2^0.0 $@loc.t)) :named ax_4164))
   (assert (! (not (= $@tok$2^0.0 $@loc.t)) :named ax_4165))
   (assert (! (not (= $@tok$2^0.0 $@loc.x)) :named ax_4166))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^134.1)) :named ax_4167))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^142.3)) :named ax_4168))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^144.19)) :named ax_4169))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^146.13)) :named ax_4170))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^146.24)) :named ax_4171))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^146.3)) :named ax_4172))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^148.3)) :named ax_4173))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^151.14)) :named ax_4174))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^151.5)) :named ax_4175))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^152.5)) :named ax_4176))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^153.15)) :named ax_4177))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^153.5)) :named ax_4178))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^157.5)) :named ax_4179))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^158.21)) :named ax_4180))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^159.21)) :named ax_4181))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^163.25)) :named ax_4182))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^163.41)) :named ax_4183))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^167.3)) :named ax_4184))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^168.28)) :named ax_4185))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^179.7)) :named ax_4186))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^181.36)) :named ax_4187))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^181.41)) :named ax_4188))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^185.7)) :named ax_4189))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^187.36)) :named ax_4190))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^187.41)) :named ax_4191))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^194.27)) :named ax_4192))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^194.37)) :named ax_4193))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^195.5)) :named ax_4194))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^198.3)) :named ax_4195))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^199.19)) :named ax_4196))
   (assert (! (not (= $@tok$2^0.0 $@tok$1^200.19)) :named ax_4197))
   (assert (! (not (= $ctype_flat $ctype_array)) :named ax_4198))
   (assert (! (not (= $ctype_flat $ctype_array)) :named ax_4199))
   (assert (! (not (= $ctype_flat $ctype_map)) :named ax_4200))
   (assert (! (not (= $ctype_flat $ctype_ptr)) :named ax_4201))
   (assert (! (not (= $ctype_flat $ctype_spec_ptr)) :named ax_4202))
   (assert (! (not (= $ctype_map $ctype_array)) :named ax_4203))
   (assert (! (not (= $ctype_map $ctype_array)) :named ax_4204))
   (assert (! (not (= $ctype_map $ctype_flat)) :named ax_4205))
   (assert (! (not (= $ctype_ptr $ctype_array)) :named ax_4206))
   (assert (! (not (= $ctype_ptr $ctype_array)) :named ax_4207))
   (assert (! (not (= $ctype_ptr $ctype_flat)) :named ax_4208))
   (assert (! (not (= $ctype_ptr $ctype_map)) :named ax_4209))
   (assert (! (not (= $ctype_ptr $ctype_map)) :named ax_4210))
   (assert (! (not (= $ctype_ptr $ctype_spec_ptr)) :named ax_4211))
   (assert (! (not (= $ctype_spec_ptr $ctype_array)) :named ax_4212))
   (assert (! (not (= $ctype_spec_ptr $ctype_array)) :named ax_4213))
   (assert (! (not (= $ctype_spec_ptr $ctype_flat)) :named ax_4214))
   (assert (! (not (= $ctype_spec_ptr $ctype_map)) :named ax_4215))
   (assert (! (not (= $ctype_spec_ptr $ctype_map)) :named ax_4216))
   (assert (! (not (= $ctype_spec_ptr $ctype_ptr)) :named ax_4217))
   (assert (! (not (= $fk_allocation_root $fk_as_array_first)) :named ax_4218))
   (assert (! (not (= $fk_allocation_root $fk_emb_array)) :named ax_4219))
   (assert (! (not (= $fk_as_array_first $fk_allocation_root)) :named ax_4220))
   (assert (! (not (= $fk_as_array_first $fk_emb_array)) :named ax_4221))
   (assert (! (not (= $fk_base $fk_allocation_root)) :named ax_4222))
   (assert (! (not (= $fk_base $fk_allocation_root)) :named ax_4223))
   (assert (! (not (= $fk_base $fk_as_array_first)) :named ax_4224))
   (assert (! (not (= $fk_base $fk_as_array_first)) :named ax_4225))
   (assert (! (not (= $fk_base $fk_emb_array)) :named ax_4226))
   (assert (! (not (= $fk_base $fk_owns)) :named ax_4227))
   (assert (! (not (= $fk_base $fk_ref_cnt)) :named ax_4228))
   (assert (! (not (= $fk_base $fk_vol_version)) :named ax_4229))
   (assert (! (not (= $fk_emb_array $fk_allocation_root)) :named ax_4230))
   (assert (! (not (= $fk_emb_array $fk_as_array_first)) :named ax_4231))
   (assert (! (not (= $fk_emb_array $fk_base)) :named ax_4232))
   (assert (! (not (= $fk_owns $fk_allocation_root)) :named ax_4233))
   (assert (! (not (= $fk_owns $fk_allocation_root)) :named ax_4234))
   (assert (! (not (= $fk_owns $fk_as_array_first)) :named ax_4235))
   (assert (! (not (= $fk_owns $fk_as_array_first)) :named ax_4236))
   (assert (! (not (= $fk_owns $fk_base)) :named ax_4237))
   (assert (! (not (= $fk_owns $fk_emb_array)) :named ax_4238))
   (assert (! (not (= $fk_owns $fk_emb_array)) :named ax_4239))
   (assert (! (not (= $fk_owns $fk_ref_cnt)) :named ax_4240))
   (assert (! (not (= $fk_owns $fk_vol_version)) :named ax_4241))
   (assert (! (not (= $fk_ref_cnt $fk_allocation_root)) :named ax_4242))
   (assert (! (not (= $fk_ref_cnt $fk_allocation_root)) :named ax_4243))
   (assert (! (not (= $fk_ref_cnt $fk_as_array_first)) :named ax_4244))
   (assert (! (not (= $fk_ref_cnt $fk_as_array_first)) :named ax_4245))
   (assert (! (not (= $fk_ref_cnt $fk_base)) :named ax_4246))
   (assert (! (not (= $fk_ref_cnt $fk_emb_array)) :named ax_4247))
   (assert (! (not (= $fk_ref_cnt $fk_emb_array)) :named ax_4248))
   (assert (! (not (= $fk_ref_cnt $fk_owns)) :named ax_4249))
   (assert (! (not (= $fk_ref_cnt $fk_vol_version)) :named ax_4250))
   (assert (! (not (= $fk_vol_version $fk_allocation_root)) :named ax_4251))
   (assert (! (not (= $fk_vol_version $fk_allocation_root)) :named ax_4252))
   (assert (! (not (= $fk_vol_version $fk_as_array_first)) :named ax_4253))
   (assert (! (not (= $fk_vol_version $fk_as_array_first)) :named ax_4254))
   (assert (! (not (= $fk_vol_version $fk_base)) :named ax_4255))
   (assert (! (not (= $fk_vol_version $fk_emb_array)) :named ax_4256))
   (assert (! (not (= $fk_vol_version $fk_emb_array)) :named ax_4257))
   (assert (! (not (= $fk_vol_version $fk_owns)) :named ax_4258))
   (assert (! (not (= $fk_vol_version $fk_ref_cnt)) :named ax_4259))
   (assert (! (not (= $inactive_union_owner_type $@distTp1)) :named ax_4260))
   (assert (! (not (= $inactive_union_owner_type $@distTp2)) :named ax_4261))
   (assert (! (not (= $inactive_union_owner_type $@distTp3)) :named ax_4262))
   (assert (! (not (= $inactive_union_owner_type $@distTp4)) :named ax_4263))
   (assert (! (not (= $inactive_union_owner_type $@distTp5)) :named ax_4264))
   (assert (! (not (= $inactive_union_owner_type ^$@thread_id)) :named ax_4265))
   (assert (! (not (= $inactive_union_owner_type ^Node)) :named ax_4266))
   (assert (! (not (= $inactive_union_owner_type ^Tree)) :named ax_4267))
   (assert (! (not (= $primitive_emb_type $@distTp1)) :named ax_4268))
   (assert (! (not (= $primitive_emb_type $@distTp2)) :named ax_4269))
   (assert (! (not (= $primitive_emb_type $@distTp3)) :named ax_4270))
   (assert (! (not (= $primitive_emb_type $@distTp4)) :named ax_4271))
   (assert (! (not (= $primitive_emb_type $@distTp5)) :named ax_4272))
   (assert (! (not (= $primitive_emb_type $inactive_union_owner_type)) :named ax_4273))
   (assert (! (not (= $primitive_emb_type $inactive_union_owner_type)) :named ax_4274))
   (assert (! (not (= $primitive_emb_type ^$@ptrset)) :named ax_4275))
   (assert (! (not (= $primitive_emb_type ^$@state_t)) :named ax_4276))
   (assert (! (not (= $primitive_emb_type ^$@struct)) :named ax_4277))
   (assert (! (not (= $primitive_emb_type ^$@thread_id)) :named ax_4278))
   (assert (! (not (= $primitive_emb_type ^$@thread_id_t)) :named ax_4279))
   (assert (! (not (= $primitive_emb_type ^$@volatile_version_t)) :named ax_4280))
   (assert (! (not (= $primitive_emb_type ^^bool)) :named ax_4281))
   (assert (! (not (= $primitive_emb_type ^^claim)) :named ax_4282))
   (assert (! (not (= $primitive_emb_type ^^f4)) :named ax_4283))
   (assert (! (not (= $primitive_emb_type ^^f8)) :named ax_4284))
   (assert (! (not (= $primitive_emb_type ^^field)) :named ax_4285))
   (assert (! (not (= $primitive_emb_type ^^i1)) :named ax_4286))
   (assert (! (not (= $primitive_emb_type ^^i2)) :named ax_4287))
   (assert (! (not (= $primitive_emb_type ^^i4)) :named ax_4288))
   (assert (! (not (= $primitive_emb_type ^^i8)) :named ax_4289))
   (assert (! (not (= $primitive_emb_type ^^mathint)) :named ax_4290))
   (assert (! (not (= $primitive_emb_type ^^null_type)) :named ax_4291))
   (assert (! (not (= $primitive_emb_type ^^object)) :named ax_4292))
   (assert (! (not (= $primitive_emb_type ^^u1)) :named ax_4293))
   (assert (! (not (= $primitive_emb_type ^^u2)) :named ax_4294))
   (assert (! (not (= $primitive_emb_type ^^u4)) :named ax_4295))
   (assert (! (not (= $primitive_emb_type ^^u8)) :named ax_4296))
   (assert (! (not (= $primitive_emb_type ^^void)) :named ax_4297))
   (assert (! (not (= $primitive_emb_type ^Node)) :named ax_4298))
   (assert (! (not (= $primitive_emb_type ^Tree)) :named ax_4299))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_4300))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_4301))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_4302))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_4303))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_4304))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_4305))
   (assert (! (not (= ^$@ptrset $@distTp4)) :named ax_4306))
   (assert (! (not (= ^$@ptrset $@distTp4)) :named ax_4307))
   (assert (! (not (= ^$@ptrset $@distTp5)) :named ax_4308))
   (assert (! (not (= ^$@ptrset $@distTp5)) :named ax_4309))
   (assert (! (not (= ^$@ptrset $inactive_union_owner_type)) :named ax_4310))
   (assert (! (not (= ^$@ptrset $inactive_union_owner_type)) :named ax_4311))
   (assert (! (not (= ^$@ptrset $primitive_emb_type)) :named ax_4312))
   (assert (! (not (= ^$@ptrset ^$@state_t)) :named ax_4313))
   (assert (! (not (= ^$@ptrset ^$@struct)) :named ax_4314))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_4315))
   (assert (! (not (= ^$@ptrset ^$@thread_id_t)) :named ax_4316))
   (assert (! (not (= ^$@ptrset ^$@volatile_version_t)) :named ax_4317))
   (assert (! (not (= ^$@ptrset ^Node)) :named ax_4318))
   (assert (! (not (= ^$@ptrset ^Tree)) :named ax_4319))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_4320))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_4321))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_4322))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_4323))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_4324))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_4325))
   (assert (! (not (= ^$@state_t $@distTp4)) :named ax_4326))
   (assert (! (not (= ^$@state_t $@distTp4)) :named ax_4327))
   (assert (! (not (= ^$@state_t $@distTp5)) :named ax_4328))
   (assert (! (not (= ^$@state_t $@distTp5)) :named ax_4329))
   (assert (! (not (= ^$@state_t $inactive_union_owner_type)) :named ax_4330))
   (assert (! (not (= ^$@state_t $inactive_union_owner_type)) :named ax_4331))
   (assert (! (not (= ^$@state_t $primitive_emb_type)) :named ax_4332))
   (assert (! (not (= ^$@state_t ^$@ptrset)) :named ax_4333))
   (assert (! (not (= ^$@state_t ^$@struct)) :named ax_4334))
   (assert (! (not (= ^$@state_t ^$@thread_id)) :named ax_4335))
   (assert (! (not (= ^$@state_t ^$@thread_id_t)) :named ax_4336))
   (assert (! (not (= ^$@state_t ^$@volatile_version_t)) :named ax_4337))
   (assert (! (not (= ^$@state_t ^Node)) :named ax_4338))
   (assert (! (not (= ^$@state_t ^Tree)) :named ax_4339))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_4340))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_4341))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_4342))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_4343))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_4344))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_4345))
   (assert (! (not (= ^$@struct $@distTp4)) :named ax_4346))
   (assert (! (not (= ^$@struct $@distTp4)) :named ax_4347))
   (assert (! (not (= ^$@struct $@distTp5)) :named ax_4348))
   (assert (! (not (= ^$@struct $@distTp5)) :named ax_4349))
   (assert (! (not (= ^$@struct $inactive_union_owner_type)) :named ax_4350))
   (assert (! (not (= ^$@struct $inactive_union_owner_type)) :named ax_4351))
   (assert (! (not (= ^$@struct $primitive_emb_type)) :named ax_4352))
   (assert (! (not (= ^$@struct ^$@ptrset)) :named ax_4353))
   (assert (! (not (= ^$@struct ^$@state_t)) :named ax_4354))
   (assert (! (not (= ^$@struct ^$@thread_id)) :named ax_4355))
   (assert (! (not (= ^$@struct ^$@thread_id_t)) :named ax_4356))
   (assert (! (not (= ^$@struct ^Node)) :named ax_4357))
   (assert (! (not (= ^$@struct ^Tree)) :named ax_4358))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_4359))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_4360))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_4361))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_4362))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_4363))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_4364))
   (assert (! (not (= ^$@thread_id $@distTp4)) :named ax_4365))
   (assert (! (not (= ^$@thread_id $@distTp4)) :named ax_4366))
   (assert (! (not (= ^$@thread_id $@distTp5)) :named ax_4367))
   (assert (! (not (= ^$@thread_id $@distTp5)) :named ax_4368))
   (assert (! (not (= ^$@thread_id $inactive_union_owner_type)) :named ax_4369))
   (assert (! (not (= ^$@thread_id $primitive_emb_type)) :named ax_4370))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_4371))
   (assert (! (not (= ^$@thread_id ^$@state_t)) :named ax_4372))
   (assert (! (not (= ^$@thread_id ^$@struct)) :named ax_4373))
   (assert (! (not (= ^$@thread_id ^Node)) :named ax_4374))
   (assert (! (not (= ^$@thread_id ^Tree)) :named ax_4375))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_4376))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_4377))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_4378))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_4379))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_4380))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_4381))
   (assert (! (not (= ^$@thread_id_t $@distTp4)) :named ax_4382))
   (assert (! (not (= ^$@thread_id_t $@distTp4)) :named ax_4383))
   (assert (! (not (= ^$@thread_id_t $@distTp5)) :named ax_4384))
   (assert (! (not (= ^$@thread_id_t $@distTp5)) :named ax_4385))
   (assert (! (not (= ^$@thread_id_t $inactive_union_owner_type)) :named ax_4386))
   (assert (! (not (= ^$@thread_id_t $inactive_union_owner_type)) :named ax_4387))
   (assert (! (not (= ^$@thread_id_t $primitive_emb_type)) :named ax_4388))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_4389))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_4390))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_4391))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_4392))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_4393))
   (assert (! (not (= ^$@thread_id_t ^Node)) :named ax_4394))
   (assert (! (not (= ^$@thread_id_t ^Tree)) :named ax_4395))
   (assert (! (not (= ^$@volatile_version_t $@distTp1)) :named ax_4396))
   (assert (! (not (= ^$@volatile_version_t $@distTp1)) :named ax_4397))
   (assert (! (not (= ^$@volatile_version_t $@distTp2)) :named ax_4398))
   (assert (! (not (= ^$@volatile_version_t $@distTp2)) :named ax_4399))
   (assert (! (not (= ^$@volatile_version_t $@distTp3)) :named ax_4400))
   (assert (! (not (= ^$@volatile_version_t $@distTp3)) :named ax_4401))
   (assert (! (not (= ^$@volatile_version_t $@distTp4)) :named ax_4402))
   (assert (! (not (= ^$@volatile_version_t $@distTp4)) :named ax_4403))
   (assert (! (not (= ^$@volatile_version_t $@distTp5)) :named ax_4404))
   (assert (! (not (= ^$@volatile_version_t $@distTp5)) :named ax_4405))
   (assert (! (not (= ^$@volatile_version_t $inactive_union_owner_type)) :named ax_4406))
   (assert (! (not (= ^$@volatile_version_t $inactive_union_owner_type)) :named ax_4407))
   (assert (! (not (= ^$@volatile_version_t $primitive_emb_type)) :named ax_4408))
   (assert (! (not (= ^$@volatile_version_t ^$@ptrset)) :named ax_4409))
   (assert (! (not (= ^$@volatile_version_t ^$@state_t)) :named ax_4410))
   (assert (! (not (= ^$@volatile_version_t ^$@struct)) :named ax_4411))
   (assert (! (not (= ^$@volatile_version_t ^$@struct)) :named ax_4412))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id)) :named ax_4413))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id)) :named ax_4414))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id_t)) :named ax_4415))
   (assert (! (not (= ^$@volatile_version_t ^$@thread_id_t)) :named ax_4416))
   (assert (! (not (= ^$@volatile_version_t ^Node)) :named ax_4417))
   (assert (! (not (= ^$@volatile_version_t ^Tree)) :named ax_4418))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_4419))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_4420))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_4421))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_4422))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_4423))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_4424))
   (assert (! (not (= ^^bool $@distTp4)) :named ax_4425))
   (assert (! (not (= ^^bool $@distTp4)) :named ax_4426))
   (assert (! (not (= ^^bool $@distTp5)) :named ax_4427))
   (assert (! (not (= ^^bool $@distTp5)) :named ax_4428))
   (assert (! (not (= ^^bool $inactive_union_owner_type)) :named ax_4429))
   (assert (! (not (= ^^bool $inactive_union_owner_type)) :named ax_4430))
   (assert (! (not (= ^^bool $primitive_emb_type)) :named ax_4431))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_4432))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_4433))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_4434))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_4435))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_4436))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_4437))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_4438))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_4439))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_4440))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_4441))
   (assert (! (not (= ^^bool ^$@volatile_version_t)) :named ax_4442))
   (assert (! (not (= ^^bool ^$@volatile_version_t)) :named ax_4443))
   (assert (! (not (= ^^bool ^^claim)) :named ax_4444))
   (assert (! (not (= ^^bool ^^f4)) :named ax_4445))
   (assert (! (not (= ^^bool ^^f8)) :named ax_4446))
   (assert (! (not (= ^^bool ^^field)) :named ax_4447))
   (assert (! (not (= ^^bool ^^mathint)) :named ax_4448))
   (assert (! (not (= ^^bool ^^null_type)) :named ax_4449))
   (assert (! (not (= ^^bool ^^object)) :named ax_4450))
   (assert (! (not (= ^^bool ^Node)) :named ax_4451))
   (assert (! (not (= ^^bool ^Tree)) :named ax_4452))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_4453))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_4454))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_4455))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_4456))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_4457))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_4458))
   (assert (! (not (= ^^claim $@distTp4)) :named ax_4459))
   (assert (! (not (= ^^claim $@distTp4)) :named ax_4460))
   (assert (! (not (= ^^claim $@distTp5)) :named ax_4461))
   (assert (! (not (= ^^claim $@distTp5)) :named ax_4462))
   (assert (! (not (= ^^claim $inactive_union_owner_type)) :named ax_4463))
   (assert (! (not (= ^^claim $inactive_union_owner_type)) :named ax_4464))
   (assert (! (not (= ^^claim $primitive_emb_type)) :named ax_4465))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_4466))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_4467))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_4468))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_4469))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_4470))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_4471))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_4472))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_4473))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_4474))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_4475))
   (assert (! (not (= ^^claim ^$@volatile_version_t)) :named ax_4476))
   (assert (! (not (= ^^claim ^$@volatile_version_t)) :named ax_4477))
   (assert (! (not (= ^^claim ^^bool)) :named ax_4478))
   (assert (! (not (= ^^claim ^^mathint)) :named ax_4479))
   (assert (! (not (= ^^claim ^Node)) :named ax_4480))
   (assert (! (not (= ^^claim ^Tree)) :named ax_4481))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_4482))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_4483))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_4484))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_4485))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_4486))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_4487))
   (assert (! (not (= ^^f4 $@distTp4)) :named ax_4488))
   (assert (! (not (= ^^f4 $@distTp4)) :named ax_4489))
   (assert (! (not (= ^^f4 $@distTp5)) :named ax_4490))
   (assert (! (not (= ^^f4 $@distTp5)) :named ax_4491))
   (assert (! (not (= ^^f4 $inactive_union_owner_type)) :named ax_4492))
   (assert (! (not (= ^^f4 $inactive_union_owner_type)) :named ax_4493))
   (assert (! (not (= ^^f4 $primitive_emb_type)) :named ax_4494))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_4495))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_4496))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_4497))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_4498))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_4499))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_4500))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_4501))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_4502))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_4503))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_4504))
   (assert (! (not (= ^^f4 ^$@volatile_version_t)) :named ax_4505))
   (assert (! (not (= ^^f4 ^$@volatile_version_t)) :named ax_4506))
   (assert (! (not (= ^^f4 ^^bool)) :named ax_4507))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_4508))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_4509))
   (assert (! (not (= ^^f4 ^^f8)) :named ax_4510))
   (assert (! (not (= ^^f4 ^^field)) :named ax_4511))
   (assert (! (not (= ^^f4 ^^mathint)) :named ax_4512))
   (assert (! (not (= ^^f4 ^^null_type)) :named ax_4513))
   (assert (! (not (= ^^f4 ^^object)) :named ax_4514))
   (assert (! (not (= ^^f4 ^Node)) :named ax_4515))
   (assert (! (not (= ^^f4 ^Tree)) :named ax_4516))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_4517))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_4518))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_4519))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_4520))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_4521))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_4522))
   (assert (! (not (= ^^f8 $@distTp4)) :named ax_4523))
   (assert (! (not (= ^^f8 $@distTp4)) :named ax_4524))
   (assert (! (not (= ^^f8 $@distTp5)) :named ax_4525))
   (assert (! (not (= ^^f8 $@distTp5)) :named ax_4526))
   (assert (! (not (= ^^f8 $inactive_union_owner_type)) :named ax_4527))
   (assert (! (not (= ^^f8 $inactive_union_owner_type)) :named ax_4528))
   (assert (! (not (= ^^f8 $primitive_emb_type)) :named ax_4529))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_4530))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_4531))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_4532))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_4533))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_4534))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_4535))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_4536))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_4537))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_4538))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_4539))
   (assert (! (not (= ^^f8 ^$@volatile_version_t)) :named ax_4540))
   (assert (! (not (= ^^f8 ^$@volatile_version_t)) :named ax_4541))
   (assert (! (not (= ^^f8 ^^bool)) :named ax_4542))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_4543))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_4544))
   (assert (! (not (= ^^f8 ^^f4)) :named ax_4545))
   (assert (! (not (= ^^f8 ^^field)) :named ax_4546))
   (assert (! (not (= ^^f8 ^^mathint)) :named ax_4547))
   (assert (! (not (= ^^f8 ^^null_type)) :named ax_4548))
   (assert (! (not (= ^^f8 ^^object)) :named ax_4549))
   (assert (! (not (= ^^f8 ^Node)) :named ax_4550))
   (assert (! (not (= ^^f8 ^Tree)) :named ax_4551))
   (assert (! (not (= ^^field $@distTp1)) :named ax_4552))
   (assert (! (not (= ^^field $@distTp1)) :named ax_4553))
   (assert (! (not (= ^^field $@distTp2)) :named ax_4554))
   (assert (! (not (= ^^field $@distTp2)) :named ax_4555))
   (assert (! (not (= ^^field $@distTp3)) :named ax_4556))
   (assert (! (not (= ^^field $@distTp3)) :named ax_4557))
   (assert (! (not (= ^^field $@distTp4)) :named ax_4558))
   (assert (! (not (= ^^field $@distTp4)) :named ax_4559))
   (assert (! (not (= ^^field $@distTp5)) :named ax_4560))
   (assert (! (not (= ^^field $@distTp5)) :named ax_4561))
   (assert (! (not (= ^^field $inactive_union_owner_type)) :named ax_4562))
   (assert (! (not (= ^^field $inactive_union_owner_type)) :named ax_4563))
   (assert (! (not (= ^^field $primitive_emb_type)) :named ax_4564))
   (assert (! (not (= ^^field ^$@ptrset)) :named ax_4565))
   (assert (! (not (= ^^field ^$@ptrset)) :named ax_4566))
   (assert (! (not (= ^^field ^$@state_t)) :named ax_4567))
   (assert (! (not (= ^^field ^$@state_t)) :named ax_4568))
   (assert (! (not (= ^^field ^$@struct)) :named ax_4569))
   (assert (! (not (= ^^field ^$@struct)) :named ax_4570))
   (assert (! (not (= ^^field ^$@thread_id)) :named ax_4571))
   (assert (! (not (= ^^field ^$@thread_id)) :named ax_4572))
   (assert (! (not (= ^^field ^$@thread_id_t)) :named ax_4573))
   (assert (! (not (= ^^field ^$@thread_id_t)) :named ax_4574))
   (assert (! (not (= ^^field ^$@volatile_version_t)) :named ax_4575))
   (assert (! (not (= ^^field ^$@volatile_version_t)) :named ax_4576))
   (assert (! (not (= ^^field ^^bool)) :named ax_4577))
   (assert (! (not (= ^^field ^^claim)) :named ax_4578))
   (assert (! (not (= ^^field ^^claim)) :named ax_4579))
   (assert (! (not (= ^^field ^^f4)) :named ax_4580))
   (assert (! (not (= ^^field ^^f8)) :named ax_4581))
   (assert (! (not (= ^^field ^^mathint)) :named ax_4582))
   (assert (! (not (= ^^field ^^null_type)) :named ax_4583))
   (assert (! (not (= ^^field ^Node)) :named ax_4584))
   (assert (! (not (= ^^field ^Tree)) :named ax_4585))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_4586))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_4587))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_4588))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_4589))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_4590))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_4591))
   (assert (! (not (= ^^i1 $@distTp4)) :named ax_4592))
   (assert (! (not (= ^^i1 $@distTp4)) :named ax_4593))
   (assert (! (not (= ^^i1 $@distTp5)) :named ax_4594))
   (assert (! (not (= ^^i1 $@distTp5)) :named ax_4595))
   (assert (! (not (= ^^i1 $inactive_union_owner_type)) :named ax_4596))
   (assert (! (not (= ^^i1 $inactive_union_owner_type)) :named ax_4597))
   (assert (! (not (= ^^i1 $primitive_emb_type)) :named ax_4598))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_4599))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_4600))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_4601))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_4602))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_4603))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_4604))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_4605))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_4606))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_4607))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_4608))
   (assert (! (not (= ^^i1 ^$@volatile_version_t)) :named ax_4609))
   (assert (! (not (= ^^i1 ^$@volatile_version_t)) :named ax_4610))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_4611))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_4612))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_4613))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_4614))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_4615))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_4616))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_4617))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_4618))
   (assert (! (not (= ^^i1 ^^field)) :named ax_4619))
   (assert (! (not (= ^^i1 ^^field)) :named ax_4620))
   (assert (! (not (= ^^i1 ^^i2)) :named ax_4621))
   (assert (! (not (= ^^i1 ^^i4)) :named ax_4622))
   (assert (! (not (= ^^i1 ^^i8)) :named ax_4623))
   (assert (! (not (= ^^i1 ^^mathint)) :named ax_4624))
   (assert (! (not (= ^^i1 ^^null_type)) :named ax_4625))
   (assert (! (not (= ^^i1 ^^object)) :named ax_4626))
   (assert (! (not (= ^^i1 ^^u1)) :named ax_4627))
   (assert (! (not (= ^^i1 ^^u2)) :named ax_4628))
   (assert (! (not (= ^^i1 ^^u4)) :named ax_4629))
   (assert (! (not (= ^^i1 ^^u8)) :named ax_4630))
   (assert (! (not (= ^^i1 ^^void)) :named ax_4631))
   (assert (! (not (= ^^i1 ^Node)) :named ax_4632))
   (assert (! (not (= ^^i1 ^Tree)) :named ax_4633))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_4634))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_4635))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_4636))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_4637))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_4638))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_4639))
   (assert (! (not (= ^^i2 $@distTp4)) :named ax_4640))
   (assert (! (not (= ^^i2 $@distTp4)) :named ax_4641))
   (assert (! (not (= ^^i2 $@distTp5)) :named ax_4642))
   (assert (! (not (= ^^i2 $@distTp5)) :named ax_4643))
   (assert (! (not (= ^^i2 $inactive_union_owner_type)) :named ax_4644))
   (assert (! (not (= ^^i2 $inactive_union_owner_type)) :named ax_4645))
   (assert (! (not (= ^^i2 $primitive_emb_type)) :named ax_4646))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_4647))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_4648))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_4649))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_4650))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_4651))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_4652))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_4653))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_4654))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_4655))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_4656))
   (assert (! (not (= ^^i2 ^$@volatile_version_t)) :named ax_4657))
   (assert (! (not (= ^^i2 ^$@volatile_version_t)) :named ax_4658))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_4659))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_4660))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_4661))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_4662))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_4663))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_4664))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_4665))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_4666))
   (assert (! (not (= ^^i2 ^^field)) :named ax_4667))
   (assert (! (not (= ^^i2 ^^field)) :named ax_4668))
   (assert (! (not (= ^^i2 ^^i1)) :named ax_4669))
   (assert (! (not (= ^^i2 ^^i4)) :named ax_4670))
   (assert (! (not (= ^^i2 ^^i8)) :named ax_4671))
   (assert (! (not (= ^^i2 ^^mathint)) :named ax_4672))
   (assert (! (not (= ^^i2 ^^null_type)) :named ax_4673))
   (assert (! (not (= ^^i2 ^^object)) :named ax_4674))
   (assert (! (not (= ^^i2 ^^u1)) :named ax_4675))
   (assert (! (not (= ^^i2 ^^u2)) :named ax_4676))
   (assert (! (not (= ^^i2 ^^u4)) :named ax_4677))
   (assert (! (not (= ^^i2 ^^u8)) :named ax_4678))
   (assert (! (not (= ^^i2 ^^void)) :named ax_4679))
   (assert (! (not (= ^^i2 ^Node)) :named ax_4680))
   (assert (! (not (= ^^i2 ^Tree)) :named ax_4681))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_4682))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_4683))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_4684))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_4685))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_4686))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_4687))
   (assert (! (not (= ^^i4 $@distTp4)) :named ax_4688))
   (assert (! (not (= ^^i4 $@distTp4)) :named ax_4689))
   (assert (! (not (= ^^i4 $@distTp5)) :named ax_4690))
   (assert (! (not (= ^^i4 $@distTp5)) :named ax_4691))
   (assert (! (not (= ^^i4 $inactive_union_owner_type)) :named ax_4692))
   (assert (! (not (= ^^i4 $inactive_union_owner_type)) :named ax_4693))
   (assert (! (not (= ^^i4 $primitive_emb_type)) :named ax_4694))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_4695))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_4696))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_4697))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_4698))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_4699))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_4700))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_4701))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_4702))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_4703))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_4704))
   (assert (! (not (= ^^i4 ^$@volatile_version_t)) :named ax_4705))
   (assert (! (not (= ^^i4 ^$@volatile_version_t)) :named ax_4706))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_4707))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_4708))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_4709))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_4710))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_4711))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_4712))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_4713))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_4714))
   (assert (! (not (= ^^i4 ^^field)) :named ax_4715))
   (assert (! (not (= ^^i4 ^^field)) :named ax_4716))
   (assert (! (not (= ^^i4 ^^i1)) :named ax_4717))
   (assert (! (not (= ^^i4 ^^i2)) :named ax_4718))
   (assert (! (not (= ^^i4 ^^i8)) :named ax_4719))
   (assert (! (not (= ^^i4 ^^mathint)) :named ax_4720))
   (assert (! (not (= ^^i4 ^^null_type)) :named ax_4721))
   (assert (! (not (= ^^i4 ^^object)) :named ax_4722))
   (assert (! (not (= ^^i4 ^^u1)) :named ax_4723))
   (assert (! (not (= ^^i4 ^^u2)) :named ax_4724))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_4725))
   (assert (! (not (= ^^i4 ^^u8)) :named ax_4726))
   (assert (! (not (= ^^i4 ^^void)) :named ax_4727))
   (assert (! (not (= ^^i4 ^Node)) :named ax_4728))
   (assert (! (not (= ^^i4 ^Tree)) :named ax_4729))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_4730))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_4731))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_4732))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_4733))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_4734))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_4735))
   (assert (! (not (= ^^i8 $@distTp4)) :named ax_4736))
   (assert (! (not (= ^^i8 $@distTp4)) :named ax_4737))
   (assert (! (not (= ^^i8 $@distTp5)) :named ax_4738))
   (assert (! (not (= ^^i8 $@distTp5)) :named ax_4739))
   (assert (! (not (= ^^i8 $inactive_union_owner_type)) :named ax_4740))
   (assert (! (not (= ^^i8 $inactive_union_owner_type)) :named ax_4741))
   (assert (! (not (= ^^i8 $primitive_emb_type)) :named ax_4742))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_4743))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_4744))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_4745))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_4746))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_4747))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_4748))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_4749))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_4750))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_4751))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_4752))
   (assert (! (not (= ^^i8 ^$@volatile_version_t)) :named ax_4753))
   (assert (! (not (= ^^i8 ^$@volatile_version_t)) :named ax_4754))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_4755))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_4756))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_4757))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_4758))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_4759))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_4760))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_4761))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_4762))
   (assert (! (not (= ^^i8 ^^field)) :named ax_4763))
   (assert (! (not (= ^^i8 ^^field)) :named ax_4764))
   (assert (! (not (= ^^i8 ^^i1)) :named ax_4765))
   (assert (! (not (= ^^i8 ^^i2)) :named ax_4766))
   (assert (! (not (= ^^i8 ^^i4)) :named ax_4767))
   (assert (! (not (= ^^i8 ^^mathint)) :named ax_4768))
   (assert (! (not (= ^^i8 ^^null_type)) :named ax_4769))
   (assert (! (not (= ^^i8 ^^object)) :named ax_4770))
   (assert (! (not (= ^^i8 ^^u1)) :named ax_4771))
   (assert (! (not (= ^^i8 ^^u2)) :named ax_4772))
   (assert (! (not (= ^^i8 ^^u4)) :named ax_4773))
   (assert (! (not (= ^^i8 ^^u8)) :named ax_4774))
   (assert (! (not (= ^^i8 ^^void)) :named ax_4775))
   (assert (! (not (= ^^i8 ^Node)) :named ax_4776))
   (assert (! (not (= ^^i8 ^Tree)) :named ax_4777))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_4778))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_4779))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_4780))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_4781))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_4782))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_4783))
   (assert (! (not (= ^^mathint $@distTp4)) :named ax_4784))
   (assert (! (not (= ^^mathint $@distTp4)) :named ax_4785))
   (assert (! (not (= ^^mathint $@distTp5)) :named ax_4786))
   (assert (! (not (= ^^mathint $@distTp5)) :named ax_4787))
   (assert (! (not (= ^^mathint $inactive_union_owner_type)) :named ax_4788))
   (assert (! (not (= ^^mathint $inactive_union_owner_type)) :named ax_4789))
   (assert (! (not (= ^^mathint $primitive_emb_type)) :named ax_4790))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_4791))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_4792))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_4793))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_4794))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_4795))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_4796))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_4797))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_4798))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_4799))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_4800))
   (assert (! (not (= ^^mathint ^$@volatile_version_t)) :named ax_4801))
   (assert (! (not (= ^^mathint ^$@volatile_version_t)) :named ax_4802))
   (assert (! (not (= ^^mathint ^^bool)) :named ax_4803))
   (assert (! (not (= ^^mathint ^^claim)) :named ax_4804))
   (assert (! (not (= ^^mathint ^^f4)) :named ax_4805))
   (assert (! (not (= ^^mathint ^^f8)) :named ax_4806))
   (assert (! (not (= ^^mathint ^^field)) :named ax_4807))
   (assert (! (not (= ^^mathint ^^i1)) :named ax_4808))
   (assert (! (not (= ^^mathint ^^i2)) :named ax_4809))
   (assert (! (not (= ^^mathint ^^i4)) :named ax_4810))
   (assert (! (not (= ^^mathint ^^i8)) :named ax_4811))
   (assert (! (not (= ^^mathint ^Node)) :named ax_4812))
   (assert (! (not (= ^^mathint ^Tree)) :named ax_4813))
   (assert (! (not (= ^^null_type $@distTp1)) :named ax_4814))
   (assert (! (not (= ^^null_type $@distTp1)) :named ax_4815))
   (assert (! (not (= ^^null_type $@distTp2)) :named ax_4816))
   (assert (! (not (= ^^null_type $@distTp2)) :named ax_4817))
   (assert (! (not (= ^^null_type $@distTp3)) :named ax_4818))
   (assert (! (not (= ^^null_type $@distTp3)) :named ax_4819))
   (assert (! (not (= ^^null_type $@distTp4)) :named ax_4820))
   (assert (! (not (= ^^null_type $@distTp4)) :named ax_4821))
   (assert (! (not (= ^^null_type $@distTp5)) :named ax_4822))
   (assert (! (not (= ^^null_type $@distTp5)) :named ax_4823))
   (assert (! (not (= ^^null_type $inactive_union_owner_type)) :named ax_4824))
   (assert (! (not (= ^^null_type $inactive_union_owner_type)) :named ax_4825))
   (assert (! (not (= ^^null_type $primitive_emb_type)) :named ax_4826))
   (assert (! (not (= ^^null_type ^$@ptrset)) :named ax_4827))
   (assert (! (not (= ^^null_type ^$@ptrset)) :named ax_4828))
   (assert (! (not (= ^^null_type ^$@state_t)) :named ax_4829))
   (assert (! (not (= ^^null_type ^$@state_t)) :named ax_4830))
   (assert (! (not (= ^^null_type ^$@struct)) :named ax_4831))
   (assert (! (not (= ^^null_type ^$@struct)) :named ax_4832))
   (assert (! (not (= ^^null_type ^$@thread_id)) :named ax_4833))
   (assert (! (not (= ^^null_type ^$@thread_id)) :named ax_4834))
   (assert (! (not (= ^^null_type ^$@thread_id_t)) :named ax_4835))
   (assert (! (not (= ^^null_type ^$@thread_id_t)) :named ax_4836))
   (assert (! (not (= ^^null_type ^$@volatile_version_t)) :named ax_4837))
   (assert (! (not (= ^^null_type ^$@volatile_version_t)) :named ax_4838))
   (assert (! (not (= ^^null_type ^^bool)) :named ax_4839))
   (assert (! (not (= ^^null_type ^^claim)) :named ax_4840))
   (assert (! (not (= ^^null_type ^^claim)) :named ax_4841))
   (assert (! (not (= ^^null_type ^^f4)) :named ax_4842))
   (assert (! (not (= ^^null_type ^^f8)) :named ax_4843))
   (assert (! (not (= ^^null_type ^^field)) :named ax_4844))
   (assert (! (not (= ^^null_type ^^i1)) :named ax_4845))
   (assert (! (not (= ^^null_type ^^i2)) :named ax_4846))
   (assert (! (not (= ^^null_type ^^i4)) :named ax_4847))
   (assert (! (not (= ^^null_type ^^i8)) :named ax_4848))
   (assert (! (not (= ^^null_type ^^mathint)) :named ax_4849))
   (assert (! (not (= ^^null_type ^^mathint)) :named ax_4850))
   (assert (! (not (= ^^null_type ^Node)) :named ax_4851))
   (assert (! (not (= ^^null_type ^Tree)) :named ax_4852))
   (assert (! (not (= ^^object $@distTp1)) :named ax_4853))
   (assert (! (not (= ^^object $@distTp1)) :named ax_4854))
   (assert (! (not (= ^^object $@distTp2)) :named ax_4855))
   (assert (! (not (= ^^object $@distTp2)) :named ax_4856))
   (assert (! (not (= ^^object $@distTp3)) :named ax_4857))
   (assert (! (not (= ^^object $@distTp3)) :named ax_4858))
   (assert (! (not (= ^^object $@distTp4)) :named ax_4859))
   (assert (! (not (= ^^object $@distTp4)) :named ax_4860))
   (assert (! (not (= ^^object $@distTp5)) :named ax_4861))
   (assert (! (not (= ^^object $@distTp5)) :named ax_4862))
   (assert (! (not (= ^^object $inactive_union_owner_type)) :named ax_4863))
   (assert (! (not (= ^^object $inactive_union_owner_type)) :named ax_4864))
   (assert (! (not (= ^^object $primitive_emb_type)) :named ax_4865))
   (assert (! (not (= ^^object ^$@ptrset)) :named ax_4866))
   (assert (! (not (= ^^object ^$@ptrset)) :named ax_4867))
   (assert (! (not (= ^^object ^$@state_t)) :named ax_4868))
   (assert (! (not (= ^^object ^$@state_t)) :named ax_4869))
   (assert (! (not (= ^^object ^$@struct)) :named ax_4870))
   (assert (! (not (= ^^object ^$@struct)) :named ax_4871))
   (assert (! (not (= ^^object ^$@thread_id)) :named ax_4872))
   (assert (! (not (= ^^object ^$@thread_id)) :named ax_4873))
   (assert (! (not (= ^^object ^$@thread_id_t)) :named ax_4874))
   (assert (! (not (= ^^object ^$@thread_id_t)) :named ax_4875))
   (assert (! (not (= ^^object ^$@volatile_version_t)) :named ax_4876))
   (assert (! (not (= ^^object ^$@volatile_version_t)) :named ax_4877))
   (assert (! (not (= ^^object ^^bool)) :named ax_4878))
   (assert (! (not (= ^^object ^^claim)) :named ax_4879))
   (assert (! (not (= ^^object ^^claim)) :named ax_4880))
   (assert (! (not (= ^^object ^^f4)) :named ax_4881))
   (assert (! (not (= ^^object ^^f8)) :named ax_4882))
   (assert (! (not (= ^^object ^^field)) :named ax_4883))
   (assert (! (not (= ^^object ^^field)) :named ax_4884))
   (assert (! (not (= ^^object ^^i1)) :named ax_4885))
   (assert (! (not (= ^^object ^^i2)) :named ax_4886))
   (assert (! (not (= ^^object ^^i4)) :named ax_4887))
   (assert (! (not (= ^^object ^^i8)) :named ax_4888))
   (assert (! (not (= ^^object ^^mathint)) :named ax_4889))
   (assert (! (not (= ^^object ^^mathint)) :named ax_4890))
   (assert (! (not (= ^^object ^^null_type)) :named ax_4891))
   (assert (! (not (= ^^object ^^null_type)) :named ax_4892))
   (assert (! (not (= ^^object ^Node)) :named ax_4893))
   (assert (! (not (= ^^object ^Tree)) :named ax_4894))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_4895))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_4896))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_4897))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_4898))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_4899))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_4900))
   (assert (! (not (= ^^u1 $@distTp4)) :named ax_4901))
   (assert (! (not (= ^^u1 $@distTp4)) :named ax_4902))
   (assert (! (not (= ^^u1 $@distTp5)) :named ax_4903))
   (assert (! (not (= ^^u1 $@distTp5)) :named ax_4904))
   (assert (! (not (= ^^u1 $inactive_union_owner_type)) :named ax_4905))
   (assert (! (not (= ^^u1 $inactive_union_owner_type)) :named ax_4906))
   (assert (! (not (= ^^u1 $primitive_emb_type)) :named ax_4907))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_4908))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_4909))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_4910))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_4911))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_4912))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_4913))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_4914))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_4915))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_4916))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_4917))
   (assert (! (not (= ^^u1 ^$@volatile_version_t)) :named ax_4918))
   (assert (! (not (= ^^u1 ^$@volatile_version_t)) :named ax_4919))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_4920))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_4921))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_4922))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_4923))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_4924))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_4925))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_4926))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_4927))
   (assert (! (not (= ^^u1 ^^field)) :named ax_4928))
   (assert (! (not (= ^^u1 ^^field)) :named ax_4929))
   (assert (! (not (= ^^u1 ^^i1)) :named ax_4930))
   (assert (! (not (= ^^u1 ^^i2)) :named ax_4931))
   (assert (! (not (= ^^u1 ^^i4)) :named ax_4932))
   (assert (! (not (= ^^u1 ^^i8)) :named ax_4933))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_4934))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_4935))
   (assert (! (not (= ^^u1 ^^null_type)) :named ax_4936))
   (assert (! (not (= ^^u1 ^^null_type)) :named ax_4937))
   (assert (! (not (= ^^u1 ^^object)) :named ax_4938))
   (assert (! (not (= ^^u1 ^^object)) :named ax_4939))
   (assert (! (not (= ^^u1 ^^u2)) :named ax_4940))
   (assert (! (not (= ^^u1 ^^u4)) :named ax_4941))
   (assert (! (not (= ^^u1 ^^u8)) :named ax_4942))
   (assert (! (not (= ^^u1 ^^void)) :named ax_4943))
   (assert (! (not (= ^^u1 ^Node)) :named ax_4944))
   (assert (! (not (= ^^u1 ^Tree)) :named ax_4945))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_4946))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_4947))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_4948))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_4949))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_4950))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_4951))
   (assert (! (not (= ^^u2 $@distTp4)) :named ax_4952))
   (assert (! (not (= ^^u2 $@distTp4)) :named ax_4953))
   (assert (! (not (= ^^u2 $@distTp5)) :named ax_4954))
   (assert (! (not (= ^^u2 $@distTp5)) :named ax_4955))
   (assert (! (not (= ^^u2 $inactive_union_owner_type)) :named ax_4956))
   (assert (! (not (= ^^u2 $inactive_union_owner_type)) :named ax_4957))
   (assert (! (not (= ^^u2 $primitive_emb_type)) :named ax_4958))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_4959))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_4960))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_4961))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_4962))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_4963))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_4964))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_4965))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_4966))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_4967))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_4968))
   (assert (! (not (= ^^u2 ^$@volatile_version_t)) :named ax_4969))
   (assert (! (not (= ^^u2 ^$@volatile_version_t)) :named ax_4970))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_4971))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_4972))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_4973))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_4974))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_4975))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_4976))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_4977))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_4978))
   (assert (! (not (= ^^u2 ^^field)) :named ax_4979))
   (assert (! (not (= ^^u2 ^^field)) :named ax_4980))
   (assert (! (not (= ^^u2 ^^i1)) :named ax_4981))
   (assert (! (not (= ^^u2 ^^i2)) :named ax_4982))
   (assert (! (not (= ^^u2 ^^i4)) :named ax_4983))
   (assert (! (not (= ^^u2 ^^i8)) :named ax_4984))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_4985))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_4986))
   (assert (! (not (= ^^u2 ^^null_type)) :named ax_4987))
   (assert (! (not (= ^^u2 ^^null_type)) :named ax_4988))
   (assert (! (not (= ^^u2 ^^object)) :named ax_4989))
   (assert (! (not (= ^^u2 ^^object)) :named ax_4990))
   (assert (! (not (= ^^u2 ^^u1)) :named ax_4991))
   (assert (! (not (= ^^u2 ^^u4)) :named ax_4992))
   (assert (! (not (= ^^u2 ^^u8)) :named ax_4993))
   (assert (! (not (= ^^u2 ^^void)) :named ax_4994))
   (assert (! (not (= ^^u2 ^Node)) :named ax_4995))
   (assert (! (not (= ^^u2 ^Tree)) :named ax_4996))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_4997))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_4998))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_4999))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_5000))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_5001))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_5002))
   (assert (! (not (= ^^u4 $@distTp4)) :named ax_5003))
   (assert (! (not (= ^^u4 $@distTp4)) :named ax_5004))
   (assert (! (not (= ^^u4 $@distTp5)) :named ax_5005))
   (assert (! (not (= ^^u4 $@distTp5)) :named ax_5006))
   (assert (! (not (= ^^u4 $inactive_union_owner_type)) :named ax_5007))
   (assert (! (not (= ^^u4 $inactive_union_owner_type)) :named ax_5008))
   (assert (! (not (= ^^u4 $primitive_emb_type)) :named ax_5009))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_5010))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_5011))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_5012))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_5013))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_5014))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_5015))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_5016))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_5017))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_5018))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_5019))
   (assert (! (not (= ^^u4 ^$@volatile_version_t)) :named ax_5020))
   (assert (! (not (= ^^u4 ^$@volatile_version_t)) :named ax_5021))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_5022))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_5023))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_5024))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_5025))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_5026))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_5027))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_5028))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_5029))
   (assert (! (not (= ^^u4 ^^field)) :named ax_5030))
   (assert (! (not (= ^^u4 ^^field)) :named ax_5031))
   (assert (! (not (= ^^u4 ^^i1)) :named ax_5032))
   (assert (! (not (= ^^u4 ^^i2)) :named ax_5033))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_5034))
   (assert (! (not (= ^^u4 ^^i8)) :named ax_5035))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_5036))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_5037))
   (assert (! (not (= ^^u4 ^^null_type)) :named ax_5038))
   (assert (! (not (= ^^u4 ^^null_type)) :named ax_5039))
   (assert (! (not (= ^^u4 ^^object)) :named ax_5040))
   (assert (! (not (= ^^u4 ^^object)) :named ax_5041))
   (assert (! (not (= ^^u4 ^^u1)) :named ax_5042))
   (assert (! (not (= ^^u4 ^^u2)) :named ax_5043))
   (assert (! (not (= ^^u4 ^^u8)) :named ax_5044))
   (assert (! (not (= ^^u4 ^^void)) :named ax_5045))
   (assert (! (not (= ^^u4 ^Node)) :named ax_5046))
   (assert (! (not (= ^^u4 ^Tree)) :named ax_5047))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_5048))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_5049))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_5050))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_5051))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_5052))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_5053))
   (assert (! (not (= ^^u8 $@distTp4)) :named ax_5054))
   (assert (! (not (= ^^u8 $@distTp4)) :named ax_5055))
   (assert (! (not (= ^^u8 $@distTp5)) :named ax_5056))
   (assert (! (not (= ^^u8 $@distTp5)) :named ax_5057))
   (assert (! (not (= ^^u8 $inactive_union_owner_type)) :named ax_5058))
   (assert (! (not (= ^^u8 $inactive_union_owner_type)) :named ax_5059))
   (assert (! (not (= ^^u8 $primitive_emb_type)) :named ax_5060))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_5061))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_5062))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_5063))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_5064))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_5065))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_5066))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_5067))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_5068))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_5069))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_5070))
   (assert (! (not (= ^^u8 ^$@volatile_version_t)) :named ax_5071))
   (assert (! (not (= ^^u8 ^$@volatile_version_t)) :named ax_5072))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_5073))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_5074))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_5075))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_5076))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_5077))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_5078))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_5079))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_5080))
   (assert (! (not (= ^^u8 ^^field)) :named ax_5081))
   (assert (! (not (= ^^u8 ^^field)) :named ax_5082))
   (assert (! (not (= ^^u8 ^^i1)) :named ax_5083))
   (assert (! (not (= ^^u8 ^^i2)) :named ax_5084))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_5085))
   (assert (! (not (= ^^u8 ^^i8)) :named ax_5086))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_5087))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_5088))
   (assert (! (not (= ^^u8 ^^null_type)) :named ax_5089))
   (assert (! (not (= ^^u8 ^^null_type)) :named ax_5090))
   (assert (! (not (= ^^u8 ^^object)) :named ax_5091))
   (assert (! (not (= ^^u8 ^^object)) :named ax_5092))
   (assert (! (not (= ^^u8 ^^u1)) :named ax_5093))
   (assert (! (not (= ^^u8 ^^u2)) :named ax_5094))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_5095))
   (assert (! (not (= ^^u8 ^^void)) :named ax_5096))
   (assert (! (not (= ^^u8 ^Node)) :named ax_5097))
   (assert (! (not (= ^^u8 ^Tree)) :named ax_5098))
   (assert (! (not (= ^^void $@distTp1)) :named ax_5099))
   (assert (! (not (= ^^void $@distTp1)) :named ax_5100))
   (assert (! (not (= ^^void $@distTp2)) :named ax_5101))
   (assert (! (not (= ^^void $@distTp2)) :named ax_5102))
   (assert (! (not (= ^^void $@distTp3)) :named ax_5103))
   (assert (! (not (= ^^void $@distTp3)) :named ax_5104))
   (assert (! (not (= ^^void $@distTp4)) :named ax_5105))
   (assert (! (not (= ^^void $@distTp4)) :named ax_5106))
   (assert (! (not (= ^^void $@distTp5)) :named ax_5107))
   (assert (! (not (= ^^void $@distTp5)) :named ax_5108))
   (assert (! (not (= ^^void $inactive_union_owner_type)) :named ax_5109))
   (assert (! (not (= ^^void $inactive_union_owner_type)) :named ax_5110))
   (assert (! (not (= ^^void $primitive_emb_type)) :named ax_5111))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_5112))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_5113))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_5114))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_5115))
   (assert (! (not (= ^^void ^$@struct)) :named ax_5116))
   (assert (! (not (= ^^void ^$@struct)) :named ax_5117))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_5118))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_5119))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_5120))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_5121))
   (assert (! (not (= ^^void ^$@volatile_version_t)) :named ax_5122))
   (assert (! (not (= ^^void ^$@volatile_version_t)) :named ax_5123))
   (assert (! (not (= ^^void ^^bool)) :named ax_5124))
   (assert (! (not (= ^^void ^^bool)) :named ax_5125))
   (assert (! (not (= ^^void ^^claim)) :named ax_5126))
   (assert (! (not (= ^^void ^^claim)) :named ax_5127))
   (assert (! (not (= ^^void ^^f4)) :named ax_5128))
   (assert (! (not (= ^^void ^^f4)) :named ax_5129))
   (assert (! (not (= ^^void ^^f8)) :named ax_5130))
   (assert (! (not (= ^^void ^^f8)) :named ax_5131))
   (assert (! (not (= ^^void ^^field)) :named ax_5132))
   (assert (! (not (= ^^void ^^field)) :named ax_5133))
   (assert (! (not (= ^^void ^^i1)) :named ax_5134))
   (assert (! (not (= ^^void ^^i2)) :named ax_5135))
   (assert (! (not (= ^^void ^^i4)) :named ax_5136))
   (assert (! (not (= ^^void ^^i8)) :named ax_5137))
   (assert (! (not (= ^^void ^^mathint)) :named ax_5138))
   (assert (! (not (= ^^void ^^mathint)) :named ax_5139))
   (assert (! (not (= ^^void ^^null_type)) :named ax_5140))
   (assert (! (not (= ^^void ^^null_type)) :named ax_5141))
   (assert (! (not (= ^^void ^^object)) :named ax_5142))
   (assert (! (not (= ^^void ^^object)) :named ax_5143))
   (assert (! (not (= ^^void ^^u1)) :named ax_5144))
   (assert (! (not (= ^^void ^^u2)) :named ax_5145))
   (assert (! (not (= ^^void ^^u4)) :named ax_5146))
   (assert (! (not (= ^^void ^^u8)) :named ax_5147))
   (assert (! (not (= ^^void ^Node)) :named ax_5148))
   (assert (! (not (= ^^void ^Tree)) :named ax_5149))
   (assert (! (not (= ^Node $@distTp1)) :named ax_5150))
   (assert (! (not (= ^Node $@distTp1)) :named ax_5151))
   (assert (! (not (= ^Node $@distTp2)) :named ax_5152))
   (assert (! (not (= ^Node $@distTp2)) :named ax_5153))
   (assert (! (not (= ^Node $@distTp3)) :named ax_5154))
   (assert (! (not (= ^Node $@distTp3)) :named ax_5155))
   (assert (! (not (= ^Node $@distTp4)) :named ax_5156))
   (assert (! (not (= ^Node $@distTp4)) :named ax_5157))
   (assert (! (not (= ^Node $@distTp5)) :named ax_5158))
   (assert (! (not (= ^Node $@distTp5)) :named ax_5159))
   (assert (! (not (= ^Node $inactive_union_owner_type)) :named ax_5160))
   (assert (! (not (= ^Node $primitive_emb_type)) :named ax_5161))
   (assert (! (not (= ^Node ^$@ptrset)) :named ax_5162))
   (assert (! (not (= ^Node ^$@state_t)) :named ax_5163))
   (assert (! (not (= ^Node ^$@struct)) :named ax_5164))
   (assert (! (not (= ^Node ^$@thread_id)) :named ax_5165))
   (assert (! (not (= ^Node ^$@thread_id_t)) :named ax_5166))
   (assert (! (not (= ^Node ^$@volatile_version_t)) :named ax_5167))
   (assert (! (not (= ^Node ^^bool)) :named ax_5168))
   (assert (! (not (= ^Node ^^claim)) :named ax_5169))
   (assert (! (not (= ^Node ^^f4)) :named ax_5170))
   (assert (! (not (= ^Node ^^f8)) :named ax_5171))
   (assert (! (not (= ^Node ^^field)) :named ax_5172))
   (assert (! (not (= ^Node ^^i1)) :named ax_5173))
   (assert (! (not (= ^Node ^^i2)) :named ax_5174))
   (assert (! (not (= ^Node ^^i4)) :named ax_5175))
   (assert (! (not (= ^Node ^^i8)) :named ax_5176))
   (assert (! (not (= ^Node ^^mathint)) :named ax_5177))
   (assert (! (not (= ^Node ^^null_type)) :named ax_5178))
   (assert (! (not (= ^Node ^^object)) :named ax_5179))
   (assert (! (not (= ^Node ^^u1)) :named ax_5180))
   (assert (! (not (= ^Node ^^u2)) :named ax_5181))
   (assert (! (not (= ^Node ^^u4)) :named ax_5182))
   (assert (! (not (= ^Node ^^u8)) :named ax_5183))
   (assert (! (not (= ^Node ^^void)) :named ax_5184))
   (assert (! (not (= ^Node ^Tree)) :named ax_5185))
   (assert (! (not (= ^Tree $@distTp1)) :named ax_5186))
   (assert (! (not (= ^Tree $@distTp1)) :named ax_5187))
   (assert (! (not (= ^Tree $@distTp2)) :named ax_5188))
   (assert (! (not (= ^Tree $@distTp2)) :named ax_5189))
   (assert (! (not (= ^Tree $@distTp3)) :named ax_5190))
   (assert (! (not (= ^Tree $@distTp3)) :named ax_5191))
   (assert (! (not (= ^Tree $@distTp4)) :named ax_5192))
   (assert (! (not (= ^Tree $@distTp4)) :named ax_5193))
   (assert (! (not (= ^Tree $@distTp5)) :named ax_5194))
   (assert (! (not (= ^Tree $@distTp5)) :named ax_5195))
   (assert (! (not (= ^Tree $inactive_union_owner_type)) :named ax_5196))
   (assert (! (not (= ^Tree $primitive_emb_type)) :named ax_5197))
   (assert (! (not (= ^Tree ^$@ptrset)) :named ax_5198))
   (assert (! (not (= ^Tree ^$@state_t)) :named ax_5199))
   (assert (! (not (= ^Tree ^$@struct)) :named ax_5200))
   (assert (! (not (= ^Tree ^$@thread_id)) :named ax_5201))
   (assert (! (not (= ^Tree ^$@thread_id_t)) :named ax_5202))
   (assert (! (not (= ^Tree ^$@volatile_version_t)) :named ax_5203))
   (assert (! (not (= ^Tree ^^bool)) :named ax_5204))
   (assert (! (not (= ^Tree ^^claim)) :named ax_5205))
   (assert (! (not (= ^Tree ^^f4)) :named ax_5206))
   (assert (! (not (= ^Tree ^^f8)) :named ax_5207))
   (assert (! (not (= ^Tree ^^field)) :named ax_5208))
   (assert (! (not (= ^Tree ^^i1)) :named ax_5209))
   (assert (! (not (= ^Tree ^^i2)) :named ax_5210))
   (assert (! (not (= ^Tree ^^i4)) :named ax_5211))
   (assert (! (not (= ^Tree ^^i8)) :named ax_5212))
   (assert (! (not (= ^Tree ^^mathint)) :named ax_5213))
   (assert (! (not (= ^Tree ^^null_type)) :named ax_5214))
   (assert (! (not (= ^Tree ^^object)) :named ax_5215))
   (assert (! (not (= ^Tree ^^u1)) :named ax_5216))
   (assert (! (not (= ^Tree ^^u2)) :named ax_5217))
   (assert (! (not (= ^Tree ^^u4)) :named ax_5218))
   (assert (! (not (= ^Tree ^^u8)) :named ax_5219))
   (assert (! (not (= ^Tree ^^void)) :named ax_5220))
   (assert (! (not (= ^Tree ^Node)) :named ax_5221))
   (assert (! (not (= cf@doMark cf@lambda@1)) :named ax_5222))
   (assert (! (not (= cf@doMark cf@lambda@2)) :named ax_5223))
   (assert (! (not (= cf@doMark cf@lambda@3)) :named ax_5224))
   (assert (! (not (= cf@doMark cf@lambda@4)) :named ax_5225))
   (assert (! (not (= cf@doMark cf@lambda@5)) :named ax_5226))
   (assert (! (not (= cf@doMark cf@lambda@6)) :named ax_5227))
   (assert (! (not (= cf@doMark cf@lambda@7)) :named ax_5228))
   (assert (! (not (= cf@doMark cf@lambda@8)) :named ax_5229))
   (assert (! (not (= cf@doMark cf@lambda@9)) :named ax_5230))
   (assert (! (not (= cf@doMark cf@mark2)) :named ax_5231))
   (assert (! (not (= cf@lambda@1 cf@doMark)) :named ax_5232))
   (assert (! (not (= cf@lambda@2 cf@doMark)) :named ax_5233))
   (assert (! (not (= cf@lambda@2 cf@lambda@1)) :named ax_5234))
   (assert (! (not (= cf@lambda@2 cf@lambda@1)) :named ax_5235))
   (assert (! (not (= cf@lambda@3 cf@doMark)) :named ax_5236))
   (assert (! (not (= cf@lambda@3 cf@lambda@1)) :named ax_5237))
   (assert (! (not (= cf@lambda@3 cf@lambda@1)) :named ax_5238))
   (assert (! (not (= cf@lambda@3 cf@lambda@2)) :named ax_5239))
   (assert (! (not (= cf@lambda@3 cf@lambda@2)) :named ax_5240))
   (assert (! (not (= cf@lambda@4 cf@doMark)) :named ax_5241))
   (assert (! (not (= cf@lambda@4 cf@lambda@1)) :named ax_5242))
   (assert (! (not (= cf@lambda@4 cf@lambda@1)) :named ax_5243))
   (assert (! (not (= cf@lambda@4 cf@lambda@2)) :named ax_5244))
   (assert (! (not (= cf@lambda@4 cf@lambda@2)) :named ax_5245))
   (assert (! (not (= cf@lambda@4 cf@lambda@3)) :named ax_5246))
   (assert (! (not (= cf@lambda@4 cf@lambda@3)) :named ax_5247))
   (assert (! (not (= cf@lambda@5 cf@doMark)) :named ax_5248))
   (assert (! (not (= cf@lambda@5 cf@lambda@1)) :named ax_5249))
   (assert (! (not (= cf@lambda@5 cf@lambda@1)) :named ax_5250))
   (assert (! (not (= cf@lambda@5 cf@lambda@2)) :named ax_5251))
   (assert (! (not (= cf@lambda@5 cf@lambda@2)) :named ax_5252))
   (assert (! (not (= cf@lambda@5 cf@lambda@3)) :named ax_5253))
   (assert (! (not (= cf@lambda@5 cf@lambda@3)) :named ax_5254))
   (assert (! (not (= cf@lambda@5 cf@lambda@4)) :named ax_5255))
   (assert (! (not (= cf@lambda@5 cf@lambda@4)) :named ax_5256))
   (assert (! (not (= cf@lambda@6 cf@doMark)) :named ax_5257))
   (assert (! (not (= cf@lambda@6 cf@lambda@1)) :named ax_5258))
   (assert (! (not (= cf@lambda@6 cf@lambda@1)) :named ax_5259))
   (assert (! (not (= cf@lambda@6 cf@lambda@2)) :named ax_5260))
   (assert (! (not (= cf@lambda@6 cf@lambda@2)) :named ax_5261))
   (assert (! (not (= cf@lambda@6 cf@lambda@3)) :named ax_5262))
   (assert (! (not (= cf@lambda@6 cf@lambda@3)) :named ax_5263))
   (assert (! (not (= cf@lambda@6 cf@lambda@4)) :named ax_5264))
   (assert (! (not (= cf@lambda@6 cf@lambda@4)) :named ax_5265))
   (assert (! (not (= cf@lambda@6 cf@lambda@5)) :named ax_5266))
   (assert (! (not (= cf@lambda@6 cf@lambda@5)) :named ax_5267))
   (assert (! (not (= cf@lambda@7 cf@doMark)) :named ax_5268))
   (assert (! (not (= cf@lambda@7 cf@lambda@1)) :named ax_5269))
   (assert (! (not (= cf@lambda@7 cf@lambda@1)) :named ax_5270))
   (assert (! (not (= cf@lambda@7 cf@lambda@2)) :named ax_5271))
   (assert (! (not (= cf@lambda@7 cf@lambda@2)) :named ax_5272))
   (assert (! (not (= cf@lambda@7 cf@lambda@3)) :named ax_5273))
   (assert (! (not (= cf@lambda@7 cf@lambda@3)) :named ax_5274))
   (assert (! (not (= cf@lambda@7 cf@lambda@4)) :named ax_5275))
   (assert (! (not (= cf@lambda@7 cf@lambda@4)) :named ax_5276))
   (assert (! (not (= cf@lambda@7 cf@lambda@5)) :named ax_5277))
   (assert (! (not (= cf@lambda@7 cf@lambda@5)) :named ax_5278))
   (assert (! (not (= cf@lambda@7 cf@lambda@6)) :named ax_5279))
   (assert (! (not (= cf@lambda@7 cf@lambda@6)) :named ax_5280))
   (assert (! (not (= cf@lambda@8 cf@doMark)) :named ax_5281))
   (assert (! (not (= cf@lambda@8 cf@lambda@1)) :named ax_5282))
   (assert (! (not (= cf@lambda@8 cf@lambda@1)) :named ax_5283))
   (assert (! (not (= cf@lambda@8 cf@lambda@2)) :named ax_5284))
   (assert (! (not (= cf@lambda@8 cf@lambda@2)) :named ax_5285))
   (assert (! (not (= cf@lambda@8 cf@lambda@3)) :named ax_5286))
   (assert (! (not (= cf@lambda@8 cf@lambda@3)) :named ax_5287))
   (assert (! (not (= cf@lambda@8 cf@lambda@4)) :named ax_5288))
   (assert (! (not (= cf@lambda@8 cf@lambda@4)) :named ax_5289))
   (assert (! (not (= cf@lambda@8 cf@lambda@5)) :named ax_5290))
   (assert (! (not (= cf@lambda@8 cf@lambda@5)) :named ax_5291))
   (assert (! (not (= cf@lambda@8 cf@lambda@6)) :named ax_5292))
   (assert (! (not (= cf@lambda@8 cf@lambda@6)) :named ax_5293))
   (assert (! (not (= cf@lambda@8 cf@lambda@7)) :named ax_5294))
   (assert (! (not (= cf@lambda@8 cf@lambda@7)) :named ax_5295))
   (assert (! (not (= cf@lambda@9 cf@doMark)) :named ax_5296))
   (assert (! (not (= cf@lambda@9 cf@lambda@1)) :named ax_5297))
   (assert (! (not (= cf@lambda@9 cf@lambda@1)) :named ax_5298))
   (assert (! (not (= cf@lambda@9 cf@lambda@2)) :named ax_5299))
   (assert (! (not (= cf@lambda@9 cf@lambda@2)) :named ax_5300))
   (assert (! (not (= cf@lambda@9 cf@lambda@3)) :named ax_5301))
   (assert (! (not (= cf@lambda@9 cf@lambda@3)) :named ax_5302))
   (assert (! (not (= cf@lambda@9 cf@lambda@4)) :named ax_5303))
   (assert (! (not (= cf@lambda@9 cf@lambda@4)) :named ax_5304))
   (assert (! (not (= cf@lambda@9 cf@lambda@5)) :named ax_5305))
   (assert (! (not (= cf@lambda@9 cf@lambda@5)) :named ax_5306))
   (assert (! (not (= cf@lambda@9 cf@lambda@6)) :named ax_5307))
   (assert (! (not (= cf@lambda@9 cf@lambda@6)) :named ax_5308))
   (assert (! (not (= cf@lambda@9 cf@lambda@7)) :named ax_5309))
   (assert (! (not (= cf@lambda@9 cf@lambda@7)) :named ax_5310))
   (assert (! (not (= cf@lambda@9 cf@lambda@8)) :named ax_5311))
   (assert (! (not (= cf@lambda@9 cf@lambda@8)) :named ax_5312))
   (assert (! (not (= cf@mark cf@doMark)) :named ax_5313))
   (assert (! (not (= cf@mark cf@doMark)) :named ax_5314))
   (assert (! (not (= cf@mark cf@lambda@1)) :named ax_5315))
   (assert (! (not (= cf@mark cf@lambda@1)) :named ax_5316))
   (assert (! (not (= cf@mark cf@lambda@2)) :named ax_5317))
   (assert (! (not (= cf@mark cf@lambda@2)) :named ax_5318))
   (assert (! (not (= cf@mark cf@lambda@3)) :named ax_5319))
   (assert (! (not (= cf@mark cf@lambda@3)) :named ax_5320))
   (assert (! (not (= cf@mark cf@lambda@4)) :named ax_5321))
   (assert (! (not (= cf@mark cf@lambda@4)) :named ax_5322))
   (assert (! (not (= cf@mark cf@lambda@5)) :named ax_5323))
   (assert (! (not (= cf@mark cf@lambda@5)) :named ax_5324))
   (assert (! (not (= cf@mark cf@lambda@6)) :named ax_5325))
   (assert (! (not (= cf@mark cf@lambda@6)) :named ax_5326))
   (assert (! (not (= cf@mark cf@lambda@7)) :named ax_5327))
   (assert (! (not (= cf@mark cf@lambda@7)) :named ax_5328))
   (assert (! (not (= cf@mark cf@lambda@8)) :named ax_5329))
   (assert (! (not (= cf@mark cf@lambda@8)) :named ax_5330))
   (assert (! (not (= cf@mark cf@lambda@9)) :named ax_5331))
   (assert (! (not (= cf@mark cf@lambda@9)) :named ax_5332))
   (assert (! (not (= cf@mark cf@mark2)) :named ax_5333))
   (assert (! (not (= cf@mark2 cf@doMark)) :named ax_5334))
   (assert (! (not (= cf@mark2 cf@lambda@1)) :named ax_5335))
   (assert (! (not (= cf@mark2 cf@lambda@1)) :named ax_5336))
   (assert (! (not (= cf@mark2 cf@lambda@2)) :named ax_5337))
   (assert (! (not (= cf@mark2 cf@lambda@2)) :named ax_5338))
   (assert (! (not (= cf@mark2 cf@lambda@3)) :named ax_5339))
   (assert (! (not (= cf@mark2 cf@lambda@3)) :named ax_5340))
   (assert (! (not (= cf@mark2 cf@lambda@4)) :named ax_5341))
   (assert (! (not (= cf@mark2 cf@lambda@4)) :named ax_5342))
   (assert (! (not (= cf@mark2 cf@lambda@5)) :named ax_5343))
   (assert (! (not (= cf@mark2 cf@lambda@5)) :named ax_5344))
   (assert (! (not (= cf@mark2 cf@lambda@6)) :named ax_5345))
   (assert (! (not (= cf@mark2 cf@lambda@6)) :named ax_5346))
   (assert (! (not (= cf@mark2 cf@lambda@7)) :named ax_5347))
   (assert (! (not (= cf@mark2 cf@lambda@7)) :named ax_5348))
   (assert (! (not (= cf@mark2 cf@lambda@8)) :named ax_5349))
   (assert (! (not (= cf@mark2 cf@lambda@8)) :named ax_5350))
   (assert (! (not (= cf@mark2 cf@lambda@9)) :named ax_5351))
   (assert (! (not (= cf@mark2 cf@lambda@9)) :named ax_5352))
   (assert (! (not (= cf@mark2 cf@mark)) :named ax_5353))
   (assert (! (not (= Node.key Node.left)) :named ax_5354))
   (assert (! (not (= Node.key Node.parent)) :named ax_5355))
   (assert (! (not (= Node.key Node.right)) :named ax_5356))
   (assert (! (not (= Node.key Node.value)) :named ax_5357))
   (assert (! (not (= Node.key Tree.abs)) :named ax_5358))
   (assert (! (not (= Node.key Tree.R)) :named ax_5359))
   (assert (! (not (= Node.key Tree.root)) :named ax_5360))
   (assert (! (not (= Node.left Node.key)) :named ax_5361))
   (assert (! (not (= Node.left Node.parent)) :named ax_5362))
   (assert (! (not (= Node.left Node.right)) :named ax_5363))
   (assert (! (not (= Node.left Tree.abs)) :named ax_5364))
   (assert (! (not (= Node.left Tree.R)) :named ax_5365))
   (assert (! (not (= Node.left Tree.root)) :named ax_5366))
   (assert (! (not (= Node.parent Node.key)) :named ax_5367))
   (assert (! (not (= Node.parent Node.left)) :named ax_5368))
   (assert (! (not (= Node.parent Tree.abs)) :named ax_5369))
   (assert (! (not (= Node.parent Tree.R)) :named ax_5370))
   (assert (! (not (= Node.parent Tree.root)) :named ax_5371))
   (assert (! (not (= Node.red Node.key)) :named ax_5372))
   (assert (! (not (= Node.red Node.key)) :named ax_5373))
   (assert (! (not (= Node.red Node.left)) :named ax_5374))
   (assert (! (not (= Node.red Node.left)) :named ax_5375))
   (assert (! (not (= Node.red Node.parent)) :named ax_5376))
   (assert (! (not (= Node.red Node.parent)) :named ax_5377))
   (assert (! (not (= Node.red Node.right)) :named ax_5378))
   (assert (! (not (= Node.red Node.value)) :named ax_5379))
   (assert (! (not (= Node.red Tree.abs)) :named ax_5380))
   (assert (! (not (= Node.red Tree.R)) :named ax_5381))
   (assert (! (not (= Node.red Tree.root)) :named ax_5382))
   (assert (! (not (= Node.right Node.key)) :named ax_5383))
   (assert (! (not (= Node.right Node.left)) :named ax_5384))
   (assert (! (not (= Node.right Node.parent)) :named ax_5385))
   (assert (! (not (= Node.right Node.parent)) :named ax_5386))
   (assert (! (not (= Node.right Node.red)) :named ax_5387))
   (assert (! (not (= Node.right Tree.abs)) :named ax_5388))
   (assert (! (not (= Node.right Tree.R)) :named ax_5389))
   (assert (! (not (= Node.right Tree.root)) :named ax_5390))
   (assert (! (not (= Node.value Node.key)) :named ax_5391))
   (assert (! (not (= Node.value Node.left)) :named ax_5392))
   (assert (! (not (= Node.value Node.left)) :named ax_5393))
   (assert (! (not (= Node.value Node.parent)) :named ax_5394))
   (assert (! (not (= Node.value Node.parent)) :named ax_5395))
   (assert (! (not (= Node.value Node.red)) :named ax_5396))
   (assert (! (not (= Node.value Node.right)) :named ax_5397))
   (assert (! (not (= Node.value Node.right)) :named ax_5398))
   (assert (! (not (= Node.value Tree.abs)) :named ax_5399))
   (assert (! (not (= Node.value Tree.R)) :named ax_5400))
   (assert (! (not (= Node.value Tree.root)) :named ax_5401))
   (assert (! (not (= Tree.abs Node.key)) :named ax_5402))
   (assert (! (not (= Tree.abs Node.left)) :named ax_5403))
   (assert (! (not (= Tree.abs Node.parent)) :named ax_5404))
   (assert (! (not (= Tree.abs Node.red)) :named ax_5405))
   (assert (! (not (= Tree.abs Node.right)) :named ax_5406))
   (assert (! (not (= Tree.abs Node.value)) :named ax_5407))
   (assert (! (not (= Tree.abs Tree.R)) :named ax_5408))
   (assert (! (not (= Tree.R Node.key)) :named ax_5409))
   (assert (! (not (= Tree.R Node.left)) :named ax_5410))
   (assert (! (not (= Tree.R Node.parent)) :named ax_5411))
   (assert (! (not (= Tree.R Node.red)) :named ax_5412))
   (assert (! (not (= Tree.R Node.right)) :named ax_5413))
   (assert (! (not (= Tree.R Node.value)) :named ax_5414))
   (assert (! (not (= Tree.R Tree.abs)) :named ax_5415))
   (assert (! (not (= Tree.root Node.key)) :named ax_5416))
   (assert (! (not (= Tree.root Node.left)) :named ax_5417))
   (assert (! (not (= Tree.root Node.parent)) :named ax_5418))
   (assert (! (not (= Tree.root Node.red)) :named ax_5419))
   (assert (! (not (= Tree.root Node.right)) :named ax_5420))
   (assert (! (not (= Tree.root Node.value)) :named ax_5421))
   (assert (! (not (= Tree.root Tree.abs)) :named ax_5422))
   (assert (! (not (= Tree.root Tree.abs)) :named ax_5423))
   (assert (! (not (= Tree.root Tree.R)) :named ax_5424))
   (assert (! (not (= Tree.root Tree.R)) :named ax_5425))

;Program
(assert (not
(let (($@hash@break_11@1_assertion (and
    ($top_writable $s@20 $@wrTime$1^134.1 ($phys_ptr_cast P@x ^Node))
)))
(let (($@hash@break_11@10_assertion (and
    ($mutable $s@21 call0formal@o@0_$2)
)))
(let (($@hash@break_11@13_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
)))
(let (($@hash@break_11@14_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
)))
(let (($@hash@break_11@16_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$21| $ptr) (|Q#m$1^82.29#dt1_$12| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$12| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$12| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$12| ^Node)))))
)))
(let (($@hash@break_11@17_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$22| $ptr) (|Q#m$1^82.29#dt1_$13| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$13| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$13| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$13| ^Node)))))
)))
(let (($@hash@break_11@18_assertion (and
    (forall( (|Q#m$1^82.29#dt1_$14| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@22 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node))))))
)))
(let (($@hash@break_11@19_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$23| $ptr) (|Q#m$1^82.29#dt1_$15| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$15| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$15| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$15| ^Node)))))
)))
(let (($@hash@break_11@2_assertion (and
    ($pre_static_wrap $s@20)
)))
(let (($@hash@break_11@20_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$24| $ptr) (|Q#m$1^82.29#dt1_$16| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$16| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$24| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$16| ^Node)))))
)))
(let (($@hash@break_11@21_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$25| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ^Node))))
)))
(let (($@hash@break_11@22_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$26| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) ^Node))))
)))
(let (($@hash@break_11@23_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$27| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ^Node))))
)))
(let (($@hash@break_11@24_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$28| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) ^Node))))
)))
(let (($@hash@break_11@25_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$29| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) ^Node))))
)))
(let (($@hash@break_11@26_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$30| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) ^Node))))
)))
(let (($@hash@break_11@27_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$31| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)))))
)))
(let (($@hash@break_11@29_assertion (and
    (forall( (|Q#m$1^83.29#dt1_$3| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.value) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node))))))
)))
(let (($@hash@break_11@30_assertion (and
    (forall( (|Q#k$1^83.29#tc2_$1| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2_$1|) (<= |Q#k$1^83.29#tc2_$1| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$4| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$4| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$4| ^Node)) |Q#k$1^83.29#tc2_$1|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$4| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$1|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$1|))))
)))
(let (($@hash@break_11@31_assertion (and
    (forall( (|Q#n$1^84.29#dt1_$3| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) ^Node))))
)))
(let (($@hash@break_11@32_assertion (and
    (forall( (|Q#n$1^84.29#dt1_$4| $ptr) (|Q#m$1^84.29#dt1_$1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast $null ^Node))) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node)))))
)))
(let (($@hash@break_11@4_assertion (and
    ($mutable $s@20 call0formal@o@0_$1)
)))
(let (($@hash@break_11@5_assertion (and
    ($set_eq ($owns $s@21 ($phys_ptr_cast P@x ^Node)) $set_empty)
)))
(let (($@hash@break_11@6_assertion (and
    ($top_writable $s@21 $@wrTime$1^134.1 ($phys_ptr_cast P@t ^Tree))
)))
(let (($@hash@break_11@7_assertion (and
    (forall( (|#writes$1^200.19| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@21 ($phys_ptr_cast P@t ^Tree)) |#writes$1^200.19|) ($top_writable $s@21 $@wrTime$1^134.1 |#writes$1^200.19|))  :pattern ( ($dont_instantiate |#writes$1^200.19|))))
)))
(let (($@hash@break_11@8_assertion (and
    ($pre_wrap $s@21)
)))
(let (($@hash@break_11_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.parent))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.parent))
    ($mutable $s@19 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
    (or (>= ($timestamp $s@19 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
)))
(let ((anon00_Else@10_assertion (and
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
)))
(let ((anon33@7_assertion (and
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
)))
(let ((anon00_Else@11_assertion (and
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)))
)))
(let ((anon33@8_assertion (and
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)))
)))
(let ((anon00_Else@12_assertion (and
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon33@9_assertion (and
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon36_assertion (and
    ($in_domain_lab $s ($phys_ptr_cast P@t ^Tree) ($phys_ptr_cast P@t ^Tree) l@public)
)))
(let ((anon36@12_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs))
    ($mutable $s@3 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs)))
    (or (>= ($timestamp $s@3 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs)))
)))
(let ((anon36@16_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))
    ($mutable $s@5 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
    (or (>= ($timestamp $s@5 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
)))
(let ((anon00_Else@2_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))
    ($mutable $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
    (or (>= ($timestamp $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
)))
(let ((anon00_Then_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.root))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.root))
    ($mutable $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.root)))
    (or (>= ($timestamp $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.root))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.root)))
)))
(let ((anon36@7_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.left))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.left))
    ($mutable $s@2 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.left)))
    (or (>= ($timestamp $s@2 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.left))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.left)))
)))
(let ((anon36@5_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.parent))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.parent))
    ($mutable $s@0 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
    (or (>= ($timestamp $s@0 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
)))
(let ((anon36@6_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.right))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.right))
    ($mutable $s@1 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.right)))
    (or (>= ($timestamp $s@1 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.right))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.right)))
)))
(let ((anon04_Then@4_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left))))
    ($is_proper ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left))
    ($mutable $s@16 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left)))
    (or (>= ($timestamp $s@16 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left))) $@wrTime$1^168.28) ($in_writes_at $@wrTime$1^168.28 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left)))
)))
(let ((anon06_Then@4_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right))))
    ($is_proper ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right))
    ($mutable $s@13 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right)))
    (or (>= ($timestamp $s@13 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right))) $@wrTime$1^168.28) ($in_writes_at $@wrTime$1^168.28 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right)))
)))
(let ((anon33@3_assertion (and
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))
    ($mutable $s@12 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
    (or (>= ($timestamp $s@12 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))) $@wrTime$1^168.28) ($in_writes_at $@wrTime$1^168.28 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
)))
(let ((anon00_Else@9_assertion (and
    ($mutable $s@11 ($phys_ptr_cast P@x ^Node))
)))
(let ((anon06_Then@8_assertion (and
    ($mutable $s@14 call0formal@o@0_$4)
)))
(let ((anon04_Then@8_assertion (and
    ($mutable $s@17 call0formal@o@0_$6)
)))
(let ((anon33@6_assertion (and
    ($mutable $s@24 ($phys_ptr_cast P@x ^Node))
)))
(let ((anon36@15_assertion (and
    ($mutable $s@4 call0formal@p@0)
)))
(let ((anon00_Then@4_assertion (and
    ($mutable $s@7 call0formal@o@0_$7)
)))
(let ((anon00_Then@10_assertion (and
    ($mutable $s@8 call0formal@o@0_$8)
)))
(let ((anon00_Then@18_assertion (and
    (forall( (|Q#m$1^82.29#dt1_$8| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@9 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node))))))
)))
(let ((anon00_Then@32_assertion (and
    (forall( (|Q#n$1^84.29#dt1_$2| $ptr) (|Q#m$1^84.29#dt1_$0| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node) ($phys_ptr_cast $null ^Node))) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node)))))
)))
(let ((anon00_Else@19_assertion (and
    (forall( (|Q#m$1^171.31#dt1_$2| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node))))))
)))
(let ((anon00_Else@33_assertion (and
    (forall( (|Q#n$1^173.31#dt1_$0| $ptr) (|Q#m$1^173.31#dt1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node) ($phys_ptr_cast L@p@0 ^Node)) (= ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node) ($phys_ptr_cast P@x ^Node))) (= ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node)))))
)))
(let ((anon33@16_assertion (and
    (forall( (|Q#m$1^171.31#dt1_$14| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node))))))
)))
(let ((anon33@30_assertion (and
    (forall( (|Q#n$1^173.31#dt1_$4| $ptr) (|Q#m$1^173.31#dt1_$1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node) ($phys_ptr_cast L@p@2 ^Node)) (= ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node) ($phys_ptr_cast P@x ^Node))) (= ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node)))))
)))
(let ((GeneratedUnifiedExit_assertion (and
    (forall( (|Q#n$1^139.27#dt1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node)) (or (= ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node) ($phys_ptr_cast P@x ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node))) :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node)))))
)))
(let ((anon04_Then@3_assertion (and
    ($pre_static_unwrap $s@12)
)))
(let ((anon06_Then@3_assertion (and
    ($pre_static_unwrap $s@12)
)))
(let ((anon06_Then@6_assertion (and
    ($pre_static_wrap $s@14)
)))
(let ((anon04_Then@6_assertion (and
    ($pre_static_wrap $s@17)
)))
(let ((anon00_Then@2_assertion (and
    ($pre_static_wrap $s@7)
)))
(let ((anon36@4_assertion (and
    ($pre_unwrap $s)
)))
(let ((anon00_Then@8_assertion (and
    ($pre_wrap $s@8)
)))
(let ((anon00_Else@6_assertion (and
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast P@x ^Node))
)))
(let ((anon00_Else@26_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$7| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) ^Node))))
)))
(let ((anon00_Else@14_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
)))
(let ((anon00_Else@20_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$1| $ptr) (|Q#m$1^171.31#dt1_$3| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$1| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$3| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$3| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$1| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$3| ^Node)))))
)))
(let ((anon00_Else@21_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$2| $ptr) (|Q#m$1^171.31#dt1_$4| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$2| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$4| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$2| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$2| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$4| ^Node)))))
)))
(let ((anon00_Else@34_assertion (and
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast L@p@0 ^Node))
)))
(let ((anon00_Else@31_assertion (and
    (forall( (|Q#k$1^172.31#tc2| Int))(!(=> (and (<= $min.i4 |Q#k$1^172.31#tc2|) (<= |Q#k$1^172.31#tc2| $max.i4)) (=> (forall( (|Q#m$1^172.31#dt1_$0| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$0| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$0| ^Node)) |Q#k$1^172.31#tc2|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$0| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2|))))
)))
(let ((anon00_Else@22_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$3| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ^Node))))
)))
(let ((anon00_Else@24_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$5| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ^Node))))
)))
(let ((anon00_Else@28_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$9| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)))))
)))
(let ((anon33@23_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$29| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) ^Node))))
)))
(let ((anon33@11_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
)))
(let ((anon33@17_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$23| $ptr) (|Q#m$1^171.31#dt1_$15| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$15| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$15| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$15| ^Node)))))
)))
(let ((anon33@18_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$24| $ptr) (|Q#m$1^171.31#dt1_$16| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$16| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$24| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$16| ^Node)))))
)))
(let ((anon33@31_assertion (and
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast L@p@2 ^Node))
)))
(let ((anon33@28_assertion (and
    (forall( (|Q#k$1^172.31#tc2_$1| Int))(!(=> (and (<= $min.i4 |Q#k$1^172.31#tc2_$1|) (<= |Q#k$1^172.31#tc2_$1| $max.i4)) (=> (forall( (|Q#m$1^172.31#dt1_$4| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$4| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$4| ^Node)) |Q#k$1^172.31#tc2_$1|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$4| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2_$1|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2_$1|))))
)))
(let ((anon33@19_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$25| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ^Node))))
)))
(let ((anon33@21_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$27| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ^Node))))
)))
(let ((anon33@25_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$31| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)))))
)))
(let ((anon00_Then@25_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$18| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) ^Node))))
)))
(let ((anon00_Then@13_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
)))
(let ((anon00_Then@19_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$12| $ptr) (|Q#m$1^82.29#dt1_$9| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$12| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$9| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$9| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$12| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$9| ^Node)))))
)))
(let ((anon00_Then@20_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$13| $ptr) (|Q#m$1^82.29#dt1_$10| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$13| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$10| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$13| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$13| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$10| ^Node)))))
)))
(let ((anon00_Then@30_assertion (and
    (forall( (|Q#k$1^83.29#tc2_$0| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2_$0|) (<= |Q#k$1^83.29#tc2_$0| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$2| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$2| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$2| ^Node)) |Q#k$1^83.29#tc2_$0|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$2| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$0|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$0|))))
)))
(let ((anon00_Then@21_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$14| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ^Node))))
)))
(let ((anon00_Then@23_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$16| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ^Node))))
)))
(let ((anon00_Then@27_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$20| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)))))
)))
(let ((anon06_Then@9_assertion (and
    ($set_eq ($owns $s@15 ($phys_ptr_cast L@p@1 ^Node)) $set_empty)
)))
(let ((anon04_Then@9_assertion (and
    ($set_eq ($owns $s@18 ($phys_ptr_cast L@p@1 ^Node)) $set_empty)
)))
(let ((anon00_Then@5_assertion (and
    ($set_eq ($owns $s@8 ($phys_ptr_cast P@x ^Node)) $set_empty)
)))
(let ((anon02_Then@1_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon03_Else@1_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon03_Then_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon05_Then_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon33@2_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon33@4_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon02_Then_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast P@x ^Node))
)))
(let ((anon03_Else_assertion (and
    ($thread_local $s@12 ($phys_ptr_cast P@x ^Node))
)))
(let ((anon36@8_assertion (and
    ($thread_local $s@3 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon36@9_assertion (and
    ($thread_local $s@3 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon36@10_assertion (and
    ($thread_local $s@3 ($phys_ptr_cast P@x ^Node))
)))
(let ((anon36@11_assertion (and
    ($thread_local $s@3 ($phys_ptr_cast P@x ^Node))
)))
(let ((anon36@17_assertion (and
    ($thread_local $s@5 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon00_Else@1_assertion (and
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon00_Else@3_assertion (and
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon00_Else@4_assertion (and
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon00_Else_assertion (and
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon36@2_assertion (and
    ($top_writable $s $@wrTime$1^134.1 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon00_Else@7_assertion (and
    (forall( (|#loopWrites^$1^168.28| $ptr))(!(=> ($in_writes_at $@wrTime$1^168.28 |#loopWrites^$1^168.28|) ($top_writable $s@11 $@wrTime$1^134.1 |#loopWrites^$1^168.28|))  :pattern ( ($dont_instantiate |#loopWrites^$1^168.28|))))
)))
(let ((anon04_Then@1_assertion (and
    ($top_writable $s@12 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon06_Then@1_assertion (and
    ($top_writable $s@12 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon06_Then@5_assertion (and
    ($top_writable $s@14 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon04_Then@5_assertion (and
    ($top_writable $s@17 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon36@13_assertion (and
    (forall( (|#writes$1^152.5| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($span ($phys_ptr_cast P@t ^Tree)) |#writes$1^152.5|) ($top_writable $s@4 $@wrTime$1^134.1 |#writes$1^152.5|))  :pattern ( ($dont_instantiate |#writes$1^152.5|))))
)))
(let ((anon00_Then@1_assertion (and
    ($top_writable $s@7 $@wrTime$1^134.1 ($phys_ptr_cast P@x ^Node))
)))
(let ((anon00_Then@6_assertion (and
    ($top_writable $s@8 $@wrTime$1^134.1 ($phys_ptr_cast P@t ^Tree))
)))
(let ((anon00_Then@7_assertion (and
    (forall( (|#writes$1^159.21| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@8 ($phys_ptr_cast P@t ^Tree)) |#writes$1^159.21|) ($top_writable $s@8 $@wrTime$1^134.1 |#writes$1^159.21|))  :pattern ( ($dont_instantiate |#writes$1^159.21|))))
)))
(let ((anon00_Else@17_assertion (and
    (forall( (|Q#n$1^171.31#dt1| $ptr) (|Q#m$1^171.31#dt1_$0| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$0| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$0| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$0| ^Node)))))
)))
(let ((anon00_Else@18_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$0| $ptr) (|Q#m$1^171.31#dt1_$1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$1| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$1| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$1| ^Node)))))
)))
(let ((anon33@14_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$21| $ptr) (|Q#m$1^171.31#dt1_$12| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$12| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$12| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$12| ^Node)))))
)))
(let ((anon33@15_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$22| $ptr) (|Q#m$1^171.31#dt1_$13| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$13| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$13| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$13| ^Node)))))
)))
(let ((anon00_Then@16_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$10| $ptr) (|Q#m$1^82.29#dt1_$6| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$6| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$6| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$6| ^Node)))))
)))
(let ((anon00_Then@17_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$11| $ptr) (|Q#m$1^82.29#dt1_$7| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$7| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$7| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$7| ^Node)))))
)))
(let ((anon00_Else@15_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
)))
(let ((anon00_Else@23_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$4| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) ^Node))))
)))
(let ((anon00_Else@25_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$6| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) ^Node))))
)))
(let ((anon00_Else@27_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$8| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) ^Node))))
)))
(let ((anon00_Else@30_assertion (and
    (forall( (|Q#m$1^172.31#dt1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.value) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node))))))
)))
(let ((anon00_Else@32_assertion (and
    (forall( (|Q#n$1^173.31#dt1| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node) ($phys_ptr_cast P@x ^Node)) (= ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) ^Node))))
)))
(let ((anon00_Else@38_assertion (and
    (forall( (|Q#n$1^176.31#dt1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node)) (or (= ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node) ($phys_ptr_cast P@x ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast P@x ^Node))))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node)))))
)))
(let ((anon00_Else@5_assertion (and
    (F@doMark ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))
)))
(let ((anon00_Else@8_assertion (and
    (forall( (|Q#p$1^169.32#tc3| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3|) (or (= |Q#p$1^169.32#tc3| ($phys_ptr_cast P@x ^Node)) (and (and (and (and ($is |Q#p$1^169.32#tc3| ($field_type ($field |Q#p$1^169.32#tc3|))) ($is_proper |Q#p$1^169.32#tc3|)) (= ($owner $s@11 |Q#p$1^169.32#tc3|) $me)) ($closed $s@11 |Q#p$1^169.32#tc3|)) (not ($is_primitive ($field_type ($field |Q#p$1^169.32#tc3|)))))))  :weight  10 :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3|)) :pattern ( (sk_hack (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3|)))))
)))
(let ((anon00_Then@14_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
)))
(let ((anon00_Then@22_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$15| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) ^Node))))
)))
(let ((anon00_Then@24_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$17| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) ^Node))))
)))
(let ((anon00_Then@26_assertion (and
    (forall( (|Q#n$1^82.29#dt1_$19| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) ^Node))))
)))
(let ((anon00_Then@29_assertion (and
    (forall( (|Q#m$1^83.29#dt1_$1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.value) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node))))))
)))
(let ((anon00_Then@31_assertion (and
    (forall( (|Q#n$1^84.29#dt1_$1| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) ^Node))))
)))
(let ((anon04_Then@2_assertion (and
    (or (not ($is_claimable ($field_type ($field call0formal@o@0_$5)))) (= ($ref_cnt $s@12 call0formal@o@0_$5) 0))
)))
(let ((anon06_Then@2_assertion (and
    (or (not ($is_claimable ($field_type ($field call0formal@o@0_$3)))) (= ($ref_cnt $s@12 call0formal@o@0_$3) 0))
)))
(let ((anon33@1_assertion (and
    (F@doMark ($phys_ptr_cast L@n@3 ^Node))
)))
(let ((anon33@12_assertion (and
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
)))
(let ((anon33@20_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$26| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) ^Node))))
)))
(let ((anon33@22_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$28| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) ^Node))))
)))
(let ((anon33@24_assertion (and
    (forall( (|Q#n$1^171.31#dt1_$30| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) ^Node))))
)))
(let ((anon33@27_assertion (and
    (forall( (|Q#m$1^172.31#dt1_$3| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.value) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node))))))
)))
(let ((anon33@29_assertion (and
    (forall( (|Q#n$1^173.31#dt1_$3| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node) ($phys_ptr_cast P@x ^Node)) (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) ^Node))))
)))
(let ((anon33@35_assertion (and
    (forall( (|Q#n$1^176.31#dt1_$1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1_$1| ^Node)) (or (= ($phys_ptr_cast |Q#n$1^176.31#dt1_$1| ^Node) ($phys_ptr_cast P@x ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#n$1^176.31#dt1_$1| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast P@x ^Node))))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1_$1| ^Node)))))
)))
(let ((anon33@5_assertion (and
    (forall( (|Q#p$1^169.32#tc3_$1| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$1|) (or (= |Q#p$1^169.32#tc3_$1| ($phys_ptr_cast P@x ^Node)) (and (and (and (and ($is |Q#p$1^169.32#tc3_$1| ($field_type ($field |Q#p$1^169.32#tc3_$1|))) ($is_proper |Q#p$1^169.32#tc3_$1|)) (= ($owner $s@24 |Q#p$1^169.32#tc3_$1|) $me)) ($closed $s@24 |Q#p$1^169.32#tc3_$1|)) (not ($is_primitive ($field_type ($field |Q#p$1^169.32#tc3_$1|)))))))  :weight  10 :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$1|)) :pattern ( (sk_hack (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$1|)))))
)))
(let ((anon33_assertion (and
    (F@doMark ($phys_ptr_cast L@p@1 ^Node))
)))
(let ((anon36@3_assertion (and
    (or (not ($is_claimable ^Tree)) (= ($ref_cnt $s call0formal@o@0) 0))
)))
(let ((GeneratedUnifiedExit@1_assertion (and
    (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Node.key) ($phys_ptr_cast P@x ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Node.key) ($phys_ptr_cast P@x ^Node)))
    (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Node.value) ($phys_ptr_cast P@x ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Node.value) ($phys_ptr_cast P@x ^Node)))
)))
(let (($@hash@break_11@11_assertion (and
    (forall( (|p_$223| $ptr))(!(=> ($set_in0 |p_$223| ($owns $s@21 call0formal@o@0_$2)) (and (and (and (and ($is |p_$223| ($field_type ($field |p_$223|))) ($is_proper |p_$223|)) (= ($owner $s@21 |p_$223|) $me)) ($closed $s@21 |p_$223|)) (not ($is_primitive ($field_type ($field |p_$223|))))))  :pattern ( ($dont_instantiate |p_$223|))))
)))
(let (($@hash@break_11@12_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
)))
(let (($@hash@break_11@15_assertion (and
    (forall( (|Q#m$1^82.29#dt1_$11| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$11| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$11| ^Node)))))
)))
(let (($@hash@break_11@3_assertion (and
    (not ($is_primitive ($field_type ($field call0formal@o@0_$1))))
)))
(let (($@hash@break_11@9_assertion (and
    (not ($is_primitive ($field_type ($field call0formal@o@0_$2))))
)))
(let ((anon00_Then@11_assertion (and
    (forall( (|p_$222| $ptr))(!(=> ($set_in0 |p_$222| ($owns $s@8 call0formal@o@0_$8)) (and (and (and (and ($is |p_$222| ($field_type ($field |p_$222|))) ($is_proper |p_$222|)) (= ($owner $s@8 |p_$222|) $me)) ($closed $s@8 |p_$222|)) (not ($is_primitive ($field_type ($field |p_$222|))))))  :pattern ( ($dont_instantiate |p_$222|))))
)))
(let ((anon06_Then@7_assertion (and
    (not ($is_primitive ($field_type ($field call0formal@o@0_$4))))
)))
(let ((anon04_Then@7_assertion (and
    (not ($is_primitive ($field_type ($field call0formal@o@0_$6))))
)))
(let ((anon00_Then@3_assertion (and
    (not ($is_primitive ($field_type ($field call0formal@o@0_$7))))
)))
(let ((anon00_Then@9_assertion (and
    (not ($is_primitive ($field_type ($field call0formal@o@0_$8))))
)))
(let ((anon36@14_assertion (and
    (not ($is_primitive ($field_type ($field call0formal@p@0))))
)))
(let ((anon04_Then_assertion (and
    ($closed $s@12 ($phys_ptr_cast L@p@1 ^Node))
    ($is ($phys_ptr_cast L@p@1 ^Node) ^Node)
    ($is_proper ($phys_ptr_cast L@p@1 ^Node))
    (= ($owner $s@12 ($phys_ptr_cast L@p@1 ^Node)) $me)
    (not ($is_primitive ^Node))
)))
(let ((anon06_Then_assertion (and
    ($closed $s@12 ($phys_ptr_cast L@p@1 ^Node))
    ($is ($phys_ptr_cast L@p@1 ^Node) ^Node)
    ($is_proper ($phys_ptr_cast L@p@1 ^Node))
    (= ($owner $s@12 ($phys_ptr_cast L@p@1 ^Node)) $me)
    (not ($is_primitive ^Node))
)))
(let ((anon36@1_assertion (and
    ($closed $s ($phys_ptr_cast P@t ^Tree))
    ($is ($phys_ptr_cast P@t ^Tree) ^Tree)
    ($is_proper ($phys_ptr_cast P@t ^Tree))
    (= ($owner $s ($phys_ptr_cast P@t ^Tree)) $me)
    (not ($is_primitive ^Tree))
)))
(let ((GeneratedUnifiedExit@2_assertion (and
    ($closed $s@25 ($phys_ptr_cast P@t ^Tree))
    ($is ($phys_ptr_cast P@t ^Tree) ^Tree)
    ($is_proper ($phys_ptr_cast P@t ^Tree))
    (= ($owner $s@25 ($phys_ptr_cast P@t ^Tree)) $me)
    (not ($is_primitive ^Tree))
)))
(let ((anon00_Else@35_assertion (and
    (not (= ($phys_ptr_cast L@p@0 ^Node) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon33@32_assertion (and
    (not (= ($phys_ptr_cast L@p@2 ^Node) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon00_Else@36_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast L@p@0 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon00_Else@37_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast L@p@0 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon00_Else@13_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
)))
(let ((anon00_Else@16_assertion (and
    (forall( (|Q#m$1^171.31#dt1| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1| ^Node)))))
)))
(let ((anon33@33_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast L@p@2 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon33@34_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast L@p@2 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
)))
(let ((anon33@10_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
)))
(let ((anon33@13_assertion (and
    (forall( (|Q#m$1^171.31#dt1_$11| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$11| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$11| ^Node)))))
)))
(let ((anon00_Then@12_assertion (and
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
)))
(let ((anon00_Then@15_assertion (and
    (forall( (|Q#m$1^82.29#dt1_$5| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$5| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$5| ^Node)))))
)))
(let ((anon33@35 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast L@p@2 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
  )
    anon33@35_assertion
)))
(let ((GeneratedUnifiedExit@2 (=> (and true
    (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Node.key) ($phys_ptr_cast P@x ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Node.key) ($phys_ptr_cast P@x ^Node)))
    (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Node.value) ($phys_ptr_cast P@x ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Node.value) ($phys_ptr_cast P@x ^Node)))
  )
    GeneratedUnifiedExit@2_assertion
)))
(let ((anon33@34 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast L@p@2 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon33@34_assertion
    anon33@35
))))
(let ((GeneratedUnifiedExit@1 (=> (and true
    (forall( (|Q#n$1^139.27#dt1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node)) (or (= ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node) ($phys_ptr_cast P@x ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@25) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node))) :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^139.27#dt1| ^Node)))))
  )(and 
    GeneratedUnifiedExit@1_assertion
    GeneratedUnifiedExit@2
))))
(let ((anon33@33 (=> (and true
    (not (= ($phys_ptr_cast L@p@2 ^Node) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon33@33_assertion
    anon33@34
))))
(let ((GeneratedUnifiedExit (=> (and true
  )(and 
    GeneratedUnifiedExit_assertion
    GeneratedUnifiedExit@1
))))
(let ((anon33@32 (=> (and true
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast L@p@2 ^Node))
  )(and 
    anon33@32_assertion
    anon33@33
))))
(let (($@hash@exit (=> (and true
    (= $s@25 $s@23)
  )
    GeneratedUnifiedExit
)))
(let ((anon33@31 (=> (and true
    (forall( (|Q#n$1^173.31#dt1_$4| $ptr) (|Q#m$1^173.31#dt1_$1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node) ($phys_ptr_cast L@p@2 ^Node)) (= ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node) ($phys_ptr_cast P@x ^Node))) (= ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$1| ^Node)))))
  )(and 
    anon33@31_assertion
    anon33@32
))))
(let (($@hash@break_11@34 (=> (and true
    $position_marker
    (= $s@23 $s@22)
  )
    $@hash@exit
)))
(let ((anon00_Then@34 (=> (and true
    $position_marker
    (= $s@23 $s@9)
  )
    $@hash@exit
)))
(let ((anon33@30 (=> (and true
    (forall( (|Q#n$1^173.31#dt1_$3| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node) ($phys_ptr_cast P@x ^Node)) (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$3| ^Node)) ^Node))))
  )(and 
    anon33@30_assertion
    anon33@31
))))
(let (($@hash@break_11@33 (=> (and true
    ($full_stop $s@22)
    (forall( (|Q#n$1^84.29#dt1_$4| $ptr) (|Q#m$1^84.29#dt1_$1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast $null ^Node))) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$4| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$1| ^Node)))))
  )
    $@hash@break_11@34
)))
(let ((anon00_Then@33 (=> (and true
    ($full_stop $s@9)
    (forall( (|Q#n$1^84.29#dt1_$2| $ptr) (|Q#m$1^84.29#dt1_$0| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node) ($phys_ptr_cast $null ^Node))) (= ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$2| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1_$0| ^Node)))))
  )
    anon00_Then@34
)))
(let ((anon33@29 (=> (and true
    (forall( (|Q#k$1^172.31#tc2_$1| Int))(!(=> (and (<= $min.i4 |Q#k$1^172.31#tc2_$1|) (<= |Q#k$1^172.31#tc2_$1| $max.i4)) (=> (forall( (|Q#m$1^172.31#dt1_$4| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$4| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$4| ^Node)) |Q#k$1^172.31#tc2_$1|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$4| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2_$1|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2_$1|))))
  )(and 
    anon33@29_assertion
    anon33@30
))))
(let (($@hash@break_11@32 (=> (and true
    (forall( (|Q#n$1^84.29#dt1_$3| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$3| ^Node)) ^Node))))
  )(and 
    $@hash@break_11@32_assertion
    $@hash@break_11@33
))))
(let ((anon00_Then@32 (=> (and true
    (forall( (|Q#n$1^84.29#dt1_$1| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$1| ^Node)) ^Node))))
  )(and 
    anon00_Then@32_assertion
    anon00_Then@33
))))
(let ((anon33@28 (=> (and true
    (forall( (|Q#m$1^172.31#dt1_$3| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.value) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$3| ^Node))))))
  )(and 
    anon33@28_assertion
    anon33@29
))))
(let (($@hash@break_11@31 (=> (and true
    (forall( (|Q#k$1^83.29#tc2_$1| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2_$1|) (<= |Q#k$1^83.29#tc2_$1| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$4| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$4| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$4| ^Node)) |Q#k$1^83.29#tc2_$1|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$4| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$1|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$1|))))
  )(and 
    $@hash@break_11@31_assertion
    $@hash@break_11@32
))))
(let ((anon00_Then@31 (=> (and true
    (forall( (|Q#k$1^83.29#tc2_$0| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2_$0|) (<= |Q#k$1^83.29#tc2_$0| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$2| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$2| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$2| ^Node)) |Q#k$1^83.29#tc2_$0|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$2| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$0|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^83.29#tc2_$0|))))
  )(and 
    anon00_Then@31_assertion
    anon00_Then@32
))))
(let ((anon33@27 (=> (and true
  )(and 
    anon33@27_assertion
    anon33@28
))))
(let (($@hash@break_11@30 (=> (and true
    (forall( (|Q#m$1^83.29#dt1_$3| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.value) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$3| ^Node))))))
  )(and 
    $@hash@break_11@30_assertion
    $@hash@break_11@31
))))
(let ((anon00_Then@30 (=> (and true
    (forall( (|Q#m$1^83.29#dt1_$1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.value) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$1| ^Node))))))
  )(and 
    anon00_Then@30_assertion
    anon00_Then@31
))))
(let ((anon33@26 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$31| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$31| ^Node)))))
  )
    anon33@27
)))
(let (($@hash@break_11@29 (=> (and true
  )(and 
    $@hash@break_11@29_assertion
    $@hash@break_11@30
))))
(let ((anon00_Then@29 (=> (and true
  )(and 
    anon00_Then@29_assertion
    anon00_Then@30
))))
(let ((anon33@25 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$30| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$30| ^Node)) ^Node))))
  )(and 
    anon33@25_assertion
    anon33@26
))))
(let (($@hash@break_11@28 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$31| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$31| ^Node)))))
  )
    $@hash@break_11@29
)))
(let ((anon00_Then@28 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$20| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$20| ^Node)))))
  )
    anon00_Then@29
)))
(let ((anon33@24 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$29| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$29| ^Node)) ^Node))))
  )(and 
    anon33@24_assertion
    anon33@25
))))
(let (($@hash@break_11@27 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$30| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$30| ^Node)) ^Node))))
  )(and 
    $@hash@break_11@27_assertion
    $@hash@break_11@28
))))
(let ((anon00_Then@27 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$19| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$19| ^Node)) ^Node))))
  )(and 
    anon00_Then@27_assertion
    anon00_Then@28
))))
(let ((anon33@23 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$28| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$28| ^Node)) ^Node))))
  )(and 
    anon33@23_assertion
    anon33@24
))))
(let (($@hash@break_11@26 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$29| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$29| ^Node)) ^Node))))
  )(and 
    $@hash@break_11@26_assertion
    $@hash@break_11@27
))))
(let ((anon00_Then@26 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$18| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$18| ^Node)) ^Node))))
  )(and 
    anon00_Then@26_assertion
    anon00_Then@27
))))
(let ((anon33@22 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$27| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$27| ^Node)) ^Node))))
  )(and 
    anon33@22_assertion
    anon33@23
))))
(let (($@hash@break_11@25 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$28| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$28| ^Node)) ^Node))))
  )(and 
    $@hash@break_11@25_assertion
    $@hash@break_11@26
))))
(let ((anon00_Then@25 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$17| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$17| ^Node)) ^Node))))
  )(and 
    anon00_Then@25_assertion
    anon00_Then@26
))))
(let ((anon33@21 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$26| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$26| ^Node)) ^Node))))
  )(and 
    anon33@21_assertion
    anon33@22
))))
(let (($@hash@break_11@24 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$27| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$27| ^Node)) ^Node))))
  )(and 
    $@hash@break_11@24_assertion
    $@hash@break_11@25
))))
(let ((anon00_Then@24 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$16| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$16| ^Node)) ^Node))))
  )(and 
    anon00_Then@24_assertion
    anon00_Then@25
))))
(let ((anon33@20 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$25| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$25| ^Node)) ^Node))))
  )(and 
    anon33@20_assertion
    anon33@21
))))
(let (($@hash@break_11@23 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$26| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$26| ^Node)) ^Node))))
  )(and 
    $@hash@break_11@23_assertion
    $@hash@break_11@24
))))
(let ((anon00_Then@23 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$15| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$15| ^Node)) ^Node))))
  )(and 
    anon00_Then@23_assertion
    anon00_Then@24
))))
(let ((anon33@19 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$24| $ptr) (|Q#m$1^171.31#dt1_$16| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$16| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$24| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$16| ^Node)))))
  )(and 
    anon33@19_assertion
    anon33@20
))))
(let (($@hash@break_11@22 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$25| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$25| ^Node)) ^Node))))
  )(and 
    $@hash@break_11@22_assertion
    $@hash@break_11@23
))))
(let ((anon00_Then@22 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$14| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$14| ^Node)) ^Node))))
  )(and 
    anon00_Then@22_assertion
    anon00_Then@23
))))
(let ((anon33@18 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$23| $ptr) (|Q#m$1^171.31#dt1_$15| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$15| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$15| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$15| ^Node)))))
  )(and 
    anon33@18_assertion
    anon33@19
))))
(let (($@hash@break_11@21 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$24| $ptr) (|Q#m$1^82.29#dt1_$16| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$16| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$24| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$24| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$16| ^Node)))))
  )(and 
    $@hash@break_11@21_assertion
    $@hash@break_11@22
))))
(let ((anon00_Then@21 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$13| $ptr) (|Q#m$1^82.29#dt1_$10| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$13| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$10| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$13| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$13| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$10| ^Node)))))
  )(and 
    anon00_Then@21_assertion
    anon00_Then@22
))))
(let ((anon33@17 (=> (and true
    (forall( (|Q#m$1^171.31#dt1_$14| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$14| ^Node))))))
  )(and 
    anon33@17_assertion
    anon33@18
))))
(let (($@hash@break_11@20 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$23| $ptr) (|Q#m$1^82.29#dt1_$15| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$15| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$15| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$23| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$15| ^Node)))))
  )(and 
    $@hash@break_11@20_assertion
    $@hash@break_11@21
))))
(let ((anon00_Then@20 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$12| $ptr) (|Q#m$1^82.29#dt1_$9| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$12| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$9| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$9| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^82.29#dt1_$12| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$9| ^Node)))))
  )(and 
    anon00_Then@20_assertion
    anon00_Then@21
))))
(let ((anon33@16 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$22| $ptr) (|Q#m$1^171.31#dt1_$13| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$13| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$13| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$13| ^Node)))))
  )(and 
    anon33@16_assertion
    anon33@17
))))
(let (($@hash@break_11@19 (=> (and true
    (forall( (|Q#m$1^82.29#dt1_$14| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@22 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$14| ^Node))))))
  )(and 
    $@hash@break_11@19_assertion
    $@hash@break_11@20
))))
(let ((anon00_Then@19 (=> (and true
    (forall( (|Q#m$1^82.29#dt1_$8| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@9 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$8| ^Node))))))
  )(and 
    anon00_Then@19_assertion
    anon00_Then@20
))))
(let ((anon33@15 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$21| $ptr) (|Q#m$1^171.31#dt1_$12| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$12| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$12| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$12| ^Node)))))
  )(and 
    anon33@15_assertion
    anon33@16
))))
(let (($@hash@break_11@18 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$22| $ptr) (|Q#m$1^82.29#dt1_$13| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$13| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$13| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$22| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$13| ^Node)))))
  )(and 
    $@hash@break_11@18_assertion
    $@hash@break_11@19
))))
(let ((anon00_Then@18 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$11| $ptr) (|Q#m$1^82.29#dt1_$7| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$7| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$7| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$11| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$7| ^Node)))))
  )(and 
    anon00_Then@18_assertion
    anon00_Then@19
))))
(let ((anon33@14 (=> (and true
    (forall( (|Q#m$1^171.31#dt1_$11| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$11| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$11| ^Node)))))
  )(and 
    anon33@14_assertion
    anon33@15
))))
(let (($@hash@break_11@17 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$21| $ptr) (|Q#m$1^82.29#dt1_$12| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$12| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$12| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$21| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$12| ^Node)))))
  )(and 
    $@hash@break_11@17_assertion
    $@hash@break_11@18
))))
(let ((anon00_Then@17 (=> (and true
    (forall( (|Q#n$1^82.29#dt1_$10| $ptr) (|Q#m$1^82.29#dt1_$6| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$6| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$6| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$10| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$6| ^Node)))))
  )(and 
    anon00_Then@17_assertion
    anon00_Then@18
))))
(let ((anon33@13 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
  )(and 
    anon33@13_assertion
    anon33@14
))))
(let (($@hash@break_11@16 (=> (and true
    (forall( (|Q#m$1^82.29#dt1_$11| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$11| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$11| ^Node)))))
  )(and 
    $@hash@break_11@16_assertion
    $@hash@break_11@17
))))
(let ((anon00_Then@16 (=> (and true
    (forall( (|Q#m$1^82.29#dt1_$5| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$5| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$5| ^Node)))))
  )(and 
    anon00_Then@16_assertion
    anon00_Then@17
))))
(let ((anon33@12 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
  )(and 
    anon33@12_assertion
    anon33@13
))))
(let (($@hash@break_11@15 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
  )(and 
    $@hash@break_11@15_assertion
    $@hash@break_11@16
))))
(let ((anon00_Then@15 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
  )(and 
    anon00_Then@15_assertion
    anon00_Then@16
))))
(let ((anon33@11 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
  )(and 
    anon33@11_assertion
    anon33@12
))))
(let (($@hash@break_11@14 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
  )(and 
    $@hash@break_11@14_assertion
    $@hash@break_11@15
))))
(let ((anon00_Then@14 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
  )(and 
    anon00_Then@14_assertion
    anon00_Then@15
))))
(let ((anon33@10 (=> (and true
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon33@10_assertion
    anon33@11
))))
(let (($@hash@break_11@13 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@22) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
  )(and 
    $@hash@break_11@13_assertion
    $@hash@break_11@14
))))
(let ((anon00_Then@13 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@9) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
  )(and 
    anon00_Then@13_assertion
    anon00_Then@14
))))
(let ((anon33@9 (=> (and true
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)))
  )(and 
    anon33@9_assertion
    anon33@10
))))
(let (($@hash@break_11@12 (=> (and true
    ($good_state_ext $@tok$1^200.19 $s@22)
    ($is_wrapped_dynamic $s@21 $s@22 call0formal@o@0_$2)
    (forall( (|p_$223| $ptr))(!(=> ($set_in0 |p_$223| ($owns $s@21 call0formal@o@0_$2)) (and (and (and (and ($is |p_$223| ($field_type ($field |p_$223|))) ($is_proper |p_$223|)) (= ($owner $s@21 |p_$223|) $me)) ($closed $s@21 |p_$223|)) (not ($is_primitive ($field_type ($field |p_$223|))))))  :pattern ( ($dont_instantiate |p_$223|))))
  )(and 
    $@hash@break_11@12_assertion
    $@hash@break_11@13
))))
(let ((anon00_Then@12 (=> (and true
    ($good_state_ext $@tok$1^159.21 $s@9)
    ($is_wrapped_dynamic $s@8 $s@9 call0formal@o@0_$8)
    (forall( (|p_$222| $ptr))(!(=> ($set_in0 |p_$222| ($owns $s@8 call0formal@o@0_$8)) (and (and (and (and ($is |p_$222| ($field_type ($field |p_$222|))) ($is_proper |p_$222|)) (= ($owner $s@8 |p_$222|) $me)) ($closed $s@8 |p_$222|)) (not ($is_primitive ($field_type ($field |p_$222|))))))  :pattern ( ($dont_instantiate |p_$222|))))
  )(and 
    anon00_Then@12_assertion
    anon00_Then@13
))))
(let ((anon33@8 (=> (and true
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@24) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
  )(and 
    anon33@8_assertion
    anon33@9
))))
(let (($@hash@break_11@11 (=> (and true
    ($mutable $s@21 call0formal@o@0_$2)
  )(and 
    $@hash@break_11@11_assertion
    $@hash@break_11@12
))))
(let ((anon00_Then@11 (=> (and true
    ($mutable $s@8 call0formal@o@0_$8)
  )(and 
    anon00_Then@11_assertion
    anon00_Then@12
))))
(let ((anon33@7 (=> (and true
    ($mutable $s@24 ($phys_ptr_cast P@x ^Node))
  )(and 
    anon33@7_assertion
    anon33@8
))))
(let (($@hash@break_11@10 (=> (and true
    (not ($is_primitive ($field_type ($field call0formal@o@0_$2))))
  )(and 
    $@hash@break_11@10_assertion
    $@hash@break_11@11
))))
(let ((anon00_Then@10 (=> (and true
    (not ($is_primitive ($field_type ($field call0formal@o@0_$8))))
  )(and 
    anon00_Then@10_assertion
    anon00_Then@11
))))
(let ((anon33@6 (=> (and true
    (forall( (|Q#p$1^169.32#tc3_$1| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$1|) (or (= |Q#p$1^169.32#tc3_$1| ($phys_ptr_cast P@x ^Node)) (and (and (and (and ($is |Q#p$1^169.32#tc3_$1| ($field_type ($field |Q#p$1^169.32#tc3_$1|))) ($is_proper |Q#p$1^169.32#tc3_$1|)) (= ($owner $s@24 |Q#p$1^169.32#tc3_$1|) $me)) ($closed $s@24 |Q#p$1^169.32#tc3_$1|)) (not ($is_primitive ($field_type ($field |Q#p$1^169.32#tc3_$1|)))))))  :weight  10 :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$1|)) :pattern ( (sk_hack (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@24 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$1|)))))
  )(and 
    anon33@6_assertion
    anon33@7
))))
(let (($@hash@break_11@9 (=> (and true
    ($pre_wrap $s@21)
  )(and 
    $@hash@break_11@9_assertion
    $@hash@break_11@10
))))
(let ((anon00_Then@9 (=> (and true
    ($pre_wrap $s@8)
  )(and 
    anon00_Then@9_assertion
    anon00_Then@10
))))
(let ((anon33@5 (=> (and true
    ($call_transition $s@12 $s@24)
    ($full_stop $s@24)
    ($good_state_ext $@tok$1^194.27 $s@24)
    ($local_value_is $s@24 $@tok$1^195.5 $@loc.p ($ptr_to_int L@p@2) ($ptr_to ^Node))
    ($thread_local $s@12 ($phys_ptr_cast P@t ^Tree))
    (< ($current_timestamp $s@12) ($current_timestamp $s@24))
    (= ($f_closed $s@12) ($f_closed $s@24))
    (= ($f_owner $s@12) ($f_owner $s@24))
    (= ($f_timestamp $s@12) ($f_timestamp $s@24))
    (= ($heap $s@24) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) call1formal@p@0_$7 call2formal@v@0_$7)))
    (= ($roots $s@12) ($roots $s@24))
    (= call1formal@p@0_$7 ($phys_ptr_cast P@t ^Tree))
    (= call2formal@v@0_$7 ($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast L@n@3 ^Node) call2formal@$result@0_$1)))
    (= L@p@2 ($phys_ptr_cast L@n@3 ^Node))
  )(and 
    anon33@5_assertion
    anon33@6
))))
(let (($@hash@break_11@8 (=> (and true
    (= call0formal@o@0_$2 ($phys_ptr_cast P@t ^Tree))
    (forall( (|#writes$1^200.19| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@21 ($phys_ptr_cast P@t ^Tree)) |#writes$1^200.19|) ($top_writable $s@21 $@wrTime$1^134.1 |#writes$1^200.19|))  :pattern ( ($dont_instantiate |#writes$1^200.19|))))
  )(and 
    $@hash@break_11@8_assertion
    $@hash@break_11@9
))))
(let ((anon00_Then@8 (=> (and true
    (= call0formal@o@0_$8 ($phys_ptr_cast P@t ^Tree))
    (forall( (|#writes$1^159.21| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@8 ($phys_ptr_cast P@t ^Tree)) |#writes$1^159.21|) ($top_writable $s@8 $@wrTime$1^134.1 |#writes$1^159.21|))  :pattern ( ($dont_instantiate |#writes$1^159.21|))))
  )(and 
    anon00_Then@8_assertion
    anon00_Then@9
))))
(let ((anon33@4 (=> (and true
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))
    ($mutable $s@12 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
    (or (>= ($timestamp $s@12 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))) $@wrTime$1^168.28) ($in_writes_at $@wrTime$1^168.28 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
  )(and 
    anon33@4_assertion
    anon33@5
))))
(let (($@hash@break_11@7 (=> (and true
    ($top_writable $s@21 $@wrTime$1^134.1 ($phys_ptr_cast P@t ^Tree))
  )(and 
    $@hash@break_11@7_assertion
    $@hash@break_11@8
))))
(let ((anon00_Then@7 (=> (and true
    ($top_writable $s@8 $@wrTime$1^134.1 ($phys_ptr_cast P@t ^Tree))
  )(and 
    anon00_Then@7_assertion
    anon00_Then@8
))))
(let ((anon33@3 (=> (and true
    ($call_transition $s@12 $s@12)
    ($full_stop $s@12)
    ($good_state_ext $@tok$1^194.37 $s@12)
    ($local_value_is $s@12 $@tok$1^194.37 $@loc.res_lambda@7@20 ($map_t..ptr_to..^Node.^^bool_to_int call2formal@$result@0_$1) ($map_t ($ptr_to ^Node) ^^bool))
    ($thread_local $s@12 ($phys_ptr_cast P@t ^Tree))
    (= call0formal@@l1@0_$1 ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast L@n@3 ^Node)))
    (= call1formal@@l0@0_$1 ($phys_ptr_cast P@x ^Node))
    (= call2formal@$result@0_$1 (F@lambda@7 call0formal@@l1@0_$1 call1formal@@l0@0_$1))
  )(and 
    anon33@3_assertion
    anon33@4
))))
(let (($@hash@break_11@6 (=> (and true
    ($full_stop $s@21)
    ($local_value_is $s@21 $@tok$2^0.0 $@loc.prestate@44 ($state_to_int prestate@44) ^$@state_t)
    ($local_value_is $s@21 $@tok$2^0.0 $@loc.prestate@44 ($state_to_int prestate@44@0) ^$@state_t)
    ($pre_wrap $s@21)
    ($set_eq ($owns $s@21 ($phys_ptr_cast P@x ^Node)) $set_empty)
    (= prestate@44@0 $s@21)
  )(and 
    $@hash@break_11@6_assertion
    $@hash@break_11@7
))))
(let ((anon00_Then@6 (=> (and true
    ($full_stop $s@8)
    ($local_value_is $s@8 $@tok$2^0.0 $@loc.prestate@28 ($state_to_int prestate@28) ^$@state_t)
    ($local_value_is $s@8 $@tok$2^0.0 $@loc.prestate@28 ($state_to_int prestate@28@0) ^$@state_t)
    ($pre_wrap $s@8)
    ($set_eq ($owns $s@8 ($phys_ptr_cast P@x ^Node)) $set_empty)
    (= prestate@28@0 $s@8)
  )(and 
    anon00_Then@6_assertion
    anon00_Then@7
))))
(let ((anon33@2 (=> (and true
    ($local_value_is $s@12 $@tok$1^194.37 $@loc.res_lambda@7@20 ($map_t..ptr_to..^Node.^^bool_to_int res_lambda@7@20@0) ($map_t ($ptr_to ^Node) ^^bool))
    (F@doMark ($phys_ptr_cast L@n@3 ^Node))
    (F@doMark ($phys_ptr_cast L@n@3 ^Node))
    (F@doMark ($phys_ptr_cast L@p@1 ^Node))
  )(and 
    anon33@2_assertion
    anon33@3
))))
(let (($@hash@break_11@5 (=> (and true
    ($good_state_ext $@tok$1^199.19 $s@21)
    ($is_wrapped $s@20 $s@21 call0formal@o@0_$1 owns@42@0)
    ($mutable $s@20 call0formal@o@0_$1)
    (= ($f_owner $s@21) ($f_owner staticWrapState@41@0))
    (= ($heap $s@21) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@20) ($f_owns ($field_type ($field call0formal@o@0_$1))) (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@20) ($f_owns ($field_type ($field call0formal@o@0_$1)))) call0formal@o@0_$1 ($ptrset_to_int owns@42@0))))
  )(and 
    $@hash@break_11@5_assertion
    $@hash@break_11@6
))))
(let ((anon00_Then@5 (=> (and true
    ($good_state_ext $@tok$1^158.21 $s@8)
    ($is_wrapped $s@7 $s@8 call0formal@o@0_$7 owns@26@0)
    ($mutable $s@7 call0formal@o@0_$7)
    (= ($f_owner $s@8) ($f_owner staticWrapState@25@0))
    (= ($heap $s@8) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@7) ($f_owns ($field_type ($field call0formal@o@0_$7))) (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@7) ($f_owns ($field_type ($field call0formal@o@0_$7)))) call0formal@o@0_$7 ($ptrset_to_int owns@26@0))))
  )(and 
    anon00_Then@5_assertion
    anon00_Then@6
))))
(let ((anon33@1 (=> (and true
    (F@doMark ($phys_ptr_cast L@p@1 ^Node))
  )(and 
    anon33@1_assertion
    anon33@2
))))
(let (($@hash@break_11@4 (=> (and true
    (not ($is_primitive ($field_type ($field call0formal@o@0_$1))))
  )(and 
    $@hash@break_11@4_assertion
    $@hash@break_11@5
))))
(let ((anon00_Then@4 (=> (and true
    (not ($is_primitive ($field_type ($field call0formal@o@0_$7))))
  )(and 
    anon00_Then@4_assertion
    anon00_Then@5
))))
(let ((anon33 (=> (and true
  )(and 
    anon33_assertion
    anon33@1
))))
(let (($@hash@break_11@3 (=> (and true
    ($pre_static_wrap $s@20)
  )(and 
    $@hash@break_11@3_assertion
    $@hash@break_11@4
))))
(let ((anon00_Then@3 (=> (and true
    ($pre_static_wrap $s@7)
  )(and 
    anon00_Then@3_assertion
    anon00_Then@4
))))
(let ((anon04_Else (=> (and true
    (= L@n@3 L@n@1)
    (not (= ($phys_ptr_cast L@n@1 ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast L@n@1 ^Node))))))
  )
    anon33
)))
(let ((anon06_Else (=> (and true
    (= L@n@3 L@n@2)
    (not (= ($phys_ptr_cast L@n@2 ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast L@n@2 ^Node))))))
  )
    anon33
)))
(let (($@hash@break_11@2 (=> (and true
    ($pre_static_wrap $s@20)
    ($top_writable $s@20 $@wrTime$1^134.1 ($phys_ptr_cast P@x ^Node))
    (= call0formal@o@0_$1 ($phys_ptr_cast P@x ^Node))
  )(and 
    $@hash@break_11@2_assertion
    $@hash@break_11@3
))))
(let ((anon00_Then@2 (=> (and true
    ($pre_static_wrap $s@7)
    ($top_writable $s@7 $@wrTime$1^134.1 ($phys_ptr_cast P@x ^Node))
    (= call0formal@o@0_$7 ($phys_ptr_cast P@x ^Node))
  )(and 
    anon00_Then@2_assertion
    anon00_Then@3
))))
(let (($@hash@break_11@1 (=> (and true
    ($call_transition $s@19 $s@20)
    ($full_stop $s@20)
    ($good_state_ext $@tok$1^198.3 $s@20)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.parent))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.parent))
    ($local_value_is $s@20 $@tok$2^0.0 $@loc.owns@42 ($ptrset_to_int owns@42) ^$@ptrset)
    ($local_value_is $s@20 $@tok$2^0.0 $@loc.owns@42 ($ptrset_to_int owns@42@0) ^$@ptrset)
    ($local_value_is $s@20 $@tok$2^0.0 $@loc.prestate@43 ($state_to_int prestate@43) ^$@state_t)
    ($local_value_is $s@20 $@tok$2^0.0 $@loc.prestate@43 ($state_to_int prestate@43@0) ^$@state_t)
    ($local_value_is $s@20 $@tok$2^0.0 $@loc.staticWrapState@41 ($state_to_int staticWrapState@41) ^$@state_t)
    ($local_value_is $s@20 $@tok$2^0.0 $@loc.staticWrapState@41 ($state_to_int staticWrapState@41@0) ^$@state_t)
    ($mutable $s@19 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
    (< ($current_timestamp $s@19) ($current_timestamp $s@20))
    (= ($f_closed $s@19) ($f_closed $s@20))
    (= ($f_owner $s@19) ($f_owner $s@20))
    (= ($f_timestamp $s@19) ($f_timestamp $s@20))
    (= ($heap $s@20) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@19) Node.parent (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@19) Node.parent) call1formal@p@0_$6 call2formal@v@0_$6)))
    (= ($roots $s@19) ($roots $s@20))
    (= call1formal@p@0_$6 ($phys_ptr_cast P@x ^Node))
    (= call2formal@v@0_$6 ($ptr_to_int ($phys_ptr_cast L@p@1 ^Node)))
    (= owns@42@0 $set_empty)
    (= prestate@43@0 $s@20)
    (= staticWrapState@41@0 $s@20)
    (or (>= ($timestamp $s@19 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
  )(and 
    $@hash@break_11@1_assertion
    $@hash@break_11@2
))))
(let ((anon00_Then@1 (=> (and true
    ($call_transition $s@6 $s@7)
    ($full_stop $s@7)
    ($good_state_ext $@tok$1^157.5 $s@7)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.root))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.root))
    ($local_value_is $s@7 $@tok$2^0.0 $@loc.owns@26 ($ptrset_to_int owns@26) ^$@ptrset)
    ($local_value_is $s@7 $@tok$2^0.0 $@loc.owns@26 ($ptrset_to_int owns@26@0) ^$@ptrset)
    ($local_value_is $s@7 $@tok$2^0.0 $@loc.prestate@27 ($state_to_int prestate@27) ^$@state_t)
    ($local_value_is $s@7 $@tok$2^0.0 $@loc.prestate@27 ($state_to_int prestate@27@0) ^$@state_t)
    ($local_value_is $s@7 $@tok$2^0.0 $@loc.staticWrapState@25 ($state_to_int staticWrapState@25) ^$@state_t)
    ($local_value_is $s@7 $@tok$2^0.0 $@loc.staticWrapState@25 ($state_to_int staticWrapState@25@0) ^$@state_t)
    ($mutable $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.root)))
    (< ($current_timestamp $s@6) ($current_timestamp $s@7))
    (= ($f_closed $s@6) ($f_closed $s@7))
    (= ($f_owner $s@6) ($f_owner $s@7))
    (= ($f_timestamp $s@6) ($f_timestamp $s@7))
    (= ($heap $s@7) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@6) Tree.root (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@6) Tree.root) call1formal@p@0_$10 call2formal@v@0_$10)))
    (= ($roots $s@6) ($roots $s@7))
    (= call1formal@p@0_$10 ($phys_ptr_cast P@t ^Tree))
    (= call2formal@v@0_$10 ($ptr_to_int ($phys_ptr_cast P@x ^Node)))
    (= owns@26@0 $set_empty)
    (= prestate@27@0 $s@7)
    (= staticWrapState@25@0 $s@7)
    (or (>= ($timestamp $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.root))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.root)))
  )(and 
    anon00_Then@1_assertion
    anon00_Then@2
))))
(let (($@hash@break_11 (=> (and true
  )(and 
    $@hash@break_11_assertion
    $@hash@break_11@1
))))
(let ((anon00_Then (=> (and true
    (= ($phys_ptr_cast L@p@0 ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast L@p@0 ^Node)))))
  )(and 
    anon00_Then_assertion
    anon00_Then@1
))))
(let ((anon04_Then@10 (=> (and true
    ($full_stop $s@18)
    ($set_eq ($owns $s@18 ($phys_ptr_cast L@p@1 ^Node)) $set_empty)
    (= $s@19 $s@18)
  )
    $@hash@break_11
)))
(let ((anon06_Then@10 (=> (and true
    ($full_stop $s@15)
    ($set_eq ($owns $s@15 ($phys_ptr_cast L@p@1 ^Node)) $set_empty)
    (= $s@19 $s@15)
  )
    $@hash@break_11
)))
(let ((anon04_Then@9 (=> (and true
    ($good_state_ext $@tok$1^181.36 $s@18)
    ($is_wrapped $s@17 $s@18 call0formal@o@0_$6 owns@33@0)
    ($mutable $s@17 call0formal@o@0_$6)
    (= ($f_owner $s@18) ($f_owner staticWrapState@32@0))
    (= ($heap $s@18) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@17) ($f_owns ($field_type ($field call0formal@o@0_$6))) (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@17) ($f_owns ($field_type ($field call0formal@o@0_$6)))) call0formal@o@0_$6 ($ptrset_to_int owns@33@0))))
  )(and 
    anon04_Then@9_assertion
    anon04_Then@10
))))
(let ((anon06_Then@9 (=> (and true
    ($good_state_ext $@tok$1^187.36 $s@15)
    ($is_wrapped $s@14 $s@15 call0formal@o@0_$4 owns@39@0)
    ($mutable $s@14 call0formal@o@0_$4)
    (= ($f_owner $s@15) ($f_owner staticWrapState@38@0))
    (= ($heap $s@15) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@14) ($f_owns ($field_type ($field call0formal@o@0_$4))) (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@14) ($f_owns ($field_type ($field call0formal@o@0_$4)))) call0formal@o@0_$4 ($ptrset_to_int owns@39@0))))
  )(and 
    anon06_Then@9_assertion
    anon06_Then@10
))))
(let ((anon04_Then@8 (=> (and true
    (not ($is_primitive ($field_type ($field call0formal@o@0_$6))))
  )(and 
    anon04_Then@8_assertion
    anon04_Then@9
))))
(let ((anon06_Then@8 (=> (and true
    (not ($is_primitive ($field_type ($field call0formal@o@0_$4))))
  )(and 
    anon06_Then@8_assertion
    anon06_Then@9
))))
(let ((anon04_Then@7 (=> (and true
    ($pre_static_wrap $s@17)
  )(and 
    anon04_Then@7_assertion
    anon04_Then@8
))))
(let ((anon06_Then@7 (=> (and true
    ($pre_static_wrap $s@14)
  )(and 
    anon06_Then@7_assertion
    anon06_Then@8
))))
(let ((anon04_Then@6 (=> (and true
    ($pre_static_wrap $s@17)
    ($top_writable $s@17 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
    (= call0formal@o@0_$6 ($phys_ptr_cast L@p@1 ^Node))
  )(and 
    anon04_Then@6_assertion
    anon04_Then@7
))))
(let ((anon06_Then@6 (=> (and true
    ($pre_static_wrap $s@14)
    ($top_writable $s@14 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
    (= call0formal@o@0_$4 ($phys_ptr_cast L@p@1 ^Node))
  )(and 
    anon06_Then@6_assertion
    anon06_Then@7
))))
(let ((anon04_Then@5 (=> (and true
    ($call_transition $s@16 $s@17)
    ($full_stop $s@17)
    ($good_state_ext $@tok$1^181.41 $s@17)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left))))
    ($is_proper ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left))
    ($local_value_is $s@17 $@tok$2^0.0 $@loc.owns@33 ($ptrset_to_int owns@33) ^$@ptrset)
    ($local_value_is $s@17 $@tok$2^0.0 $@loc.owns@33 ($ptrset_to_int owns@33@0) ^$@ptrset)
    ($local_value_is $s@17 $@tok$2^0.0 $@loc.prestate@34 ($state_to_int prestate@34) ^$@state_t)
    ($local_value_is $s@17 $@tok$2^0.0 $@loc.prestate@34 ($state_to_int prestate@34@0) ^$@state_t)
    ($local_value_is $s@17 $@tok$2^0.0 $@loc.staticWrapState@32 ($state_to_int staticWrapState@32) ^$@state_t)
    ($local_value_is $s@17 $@tok$2^0.0 $@loc.staticWrapState@32 ($state_to_int staticWrapState@32@0) ^$@state_t)
    ($mutable $s@16 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left)))
    (< ($current_timestamp $s@16) ($current_timestamp $s@17))
    (= ($f_closed $s@16) ($f_closed $s@17))
    (= ($f_owner $s@16) ($f_owner $s@17))
    (= ($f_timestamp $s@16) ($f_timestamp $s@17))
    (= ($heap $s@17) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@16) Node.left (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@16) Node.left) call1formal@p@0_$9 call2formal@v@0_$9)))
    (= ($roots $s@16) ($roots $s@17))
    (= call1formal@p@0_$9 ($phys_ptr_cast L@p@1 ^Node))
    (= call2formal@v@0_$9 ($ptr_to_int ($phys_ptr_cast P@x ^Node)))
    (= owns@33@0 $set_empty)
    (= prestate@34@0 $s@17)
    (= staticWrapState@32@0 $s@17)
    (or (>= ($timestamp $s@16 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left))) $@wrTime$1^168.28) ($in_writes_at $@wrTime$1^168.28 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.left)))
  )(and 
    anon04_Then@5_assertion
    anon04_Then@6
))))
(let ((anon06_Then@5 (=> (and true
    ($call_transition $s@13 $s@14)
    ($full_stop $s@14)
    ($good_state_ext $@tok$1^187.41 $s@14)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right))))
    ($is_proper ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right))
    ($local_value_is $s@14 $@tok$2^0.0 $@loc.owns@39 ($ptrset_to_int owns@39) ^$@ptrset)
    ($local_value_is $s@14 $@tok$2^0.0 $@loc.owns@39 ($ptrset_to_int owns@39@0) ^$@ptrset)
    ($local_value_is $s@14 $@tok$2^0.0 $@loc.prestate@40 ($state_to_int prestate@40) ^$@state_t)
    ($local_value_is $s@14 $@tok$2^0.0 $@loc.prestate@40 ($state_to_int prestate@40@0) ^$@state_t)
    ($local_value_is $s@14 $@tok$2^0.0 $@loc.staticWrapState@38 ($state_to_int staticWrapState@38) ^$@state_t)
    ($local_value_is $s@14 $@tok$2^0.0 $@loc.staticWrapState@38 ($state_to_int staticWrapState@38@0) ^$@state_t)
    ($mutable $s@13 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right)))
    (< ($current_timestamp $s@13) ($current_timestamp $s@14))
    (= ($f_closed $s@13) ($f_closed $s@14))
    (= ($f_owner $s@13) ($f_owner $s@14))
    (= ($f_timestamp $s@13) ($f_timestamp $s@14))
    (= ($heap $s@14) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@13) Node.right (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@13) Node.right) call1formal@p@0_$8 call2formal@v@0_$8)))
    (= ($roots $s@13) ($roots $s@14))
    (= call1formal@p@0_$8 ($phys_ptr_cast L@p@1 ^Node))
    (= call2formal@v@0_$8 ($ptr_to_int ($phys_ptr_cast P@x ^Node)))
    (= owns@39@0 $set_empty)
    (= prestate@40@0 $s@14)
    (= staticWrapState@38@0 $s@14)
    (or (>= ($timestamp $s@13 ($emb0 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right))) $@wrTime$1^168.28) ($in_writes_at $@wrTime$1^168.28 ($dot ($phys_ptr_cast L@p@1 ^Node) Node.right)))
  )(and 
    anon06_Then@5_assertion
    anon06_Then@6
))))
(let ((anon04_Then@4 (=> (and true
    ($full_stop $s@16)
    ($good_state_ext $@tok$1^181.36 $s@16)
    ($is_unwrapped $s@12 $s@16 call0formal@o@0_$5)
    ($pre_static_unwrap $s@12)
    (= ($f_owner $s@16) ($f_owner prestate@31@0))
    (= ($f_timestamp $s@16) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp prestate@31@0) call0formal@o@0_$5 ($current_timestamp $s@12)))
  )(and 
    anon04_Then@4_assertion
    anon04_Then@5
))))
(let ((anon06_Then@4 (=> (and true
    ($full_stop $s@13)
    ($good_state_ext $@tok$1^187.36 $s@13)
    ($is_unwrapped $s@12 $s@13 call0formal@o@0_$3)
    ($pre_static_unwrap $s@12)
    (= ($f_owner $s@13) ($f_owner prestate@37@0))
    (= ($f_timestamp $s@13) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp prestate@37@0) call0formal@o@0_$3 ($current_timestamp $s@12)))
  )(and 
    anon06_Then@4_assertion
    anon06_Then@5
))))
(let ((anon04_Then@3 (=> (and true
    (or (not ($is_claimable ($field_type ($field call0formal@o@0_$5)))) (= ($ref_cnt $s@12 call0formal@o@0_$5) 0))
  )(and 
    anon04_Then@3_assertion
    anon04_Then@4
))))
(let ((anon06_Then@3 (=> (and true
    (or (not ($is_claimable ($field_type ($field call0formal@o@0_$3)))) (= ($ref_cnt $s@12 call0formal@o@0_$3) 0))
  )(and 
    anon06_Then@3_assertion
    anon06_Then@4
))))
(let ((anon04_Then@2 (=> (and true
    ($inv2 $s@12 $s@12 ($phys_ptr_cast L@p@1 ^Node) ^Node)
    ($pre_static_unwrap $s@12)
    ($top_writable $s@12 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
    (= call0formal@o@0_$5 ($phys_ptr_cast L@p@1 ^Node))
    (= owns@30@0 ($owns $s@12 ($phys_ptr_cast L@p@1 ^Node)))
  )(and 
    anon04_Then@2_assertion
    anon04_Then@3
))))
(let ((anon06_Then@2 (=> (and true
    ($inv2 $s@12 $s@12 ($phys_ptr_cast L@p@1 ^Node) ^Node)
    ($pre_static_unwrap $s@12)
    ($top_writable $s@12 $@wrTime$1^168.28 ($phys_ptr_cast L@p@1 ^Node))
    (= call0formal@o@0_$3 ($phys_ptr_cast L@p@1 ^Node))
    (= owns@36@0 ($owns $s@12 ($phys_ptr_cast L@p@1 ^Node)))
  )(and 
    anon06_Then@2_assertion
    anon06_Then@3
))))
(let ((anon04_Then@1 (=> (and true
    ($closed $s@12 ($phys_ptr_cast L@p@1 ^Node))
    ($is ($phys_ptr_cast L@p@1 ^Node) ^Node)
    ($is_proper ($phys_ptr_cast L@p@1 ^Node))
    (= ($owner $s@12 ($phys_ptr_cast L@p@1 ^Node)) $me)
    (not ($is_primitive ^Node))
  )(and 
    anon04_Then@1_assertion
    anon04_Then@2
))))
(let ((anon06_Then@1 (=> (and true
    ($closed $s@12 ($phys_ptr_cast L@p@1 ^Node))
    ($is ($phys_ptr_cast L@p@1 ^Node) ^Node)
    ($is_proper ($phys_ptr_cast L@p@1 ^Node))
    (= ($owner $s@12 ($phys_ptr_cast L@p@1 ^Node)) $me)
    (not ($is_primitive ^Node))
  )(and 
    anon06_Then@1_assertion
    anon06_Then@2
))))
(let ((anon04_Then (=> (and true
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.owns@30 ($ptrset_to_int owns@30) ^$@ptrset)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.owns@30 ($ptrset_to_int owns@30@0) ^$@ptrset)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@29 ($state_to_int prestate@29) ^$@state_t)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@29 ($state_to_int prestate@29@0) ^$@state_t)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@31 ($state_to_int prestate@31) ^$@state_t)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@31 ($state_to_int prestate@31@0) ^$@state_t)
    (= ($phys_ptr_cast L@n@1 ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast L@n@1 ^Node)))))
    (= owns@30@0 $set_empty)
    (= prestate@29@0 $s@12)
    (= prestate@31@0 $s@12)
  )(and 
    anon04_Then_assertion
    anon04_Then@1
))))
(let ((anon06_Then (=> (and true
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.owns@36 ($ptrset_to_int owns@36) ^$@ptrset)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.owns@36 ($ptrset_to_int owns@36@0) ^$@ptrset)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@35 ($state_to_int prestate@35) ^$@state_t)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@35 ($state_to_int prestate@35@0) ^$@state_t)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@37 ($state_to_int prestate@37) ^$@state_t)
    ($local_value_is $s@12 $@tok$2^0.0 $@loc.prestate@37 ($state_to_int prestate@37@0) ^$@state_t)
    (= ($phys_ptr_cast L@n@2 ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast L@n@2 ^Node)))))
    (= owns@36@0 $set_empty)
    (= prestate@35@0 $s@12)
    (= prestate@37@0 $s@12)
  )(and 
    anon06_Then_assertion
    anon06_Then@1
))))
(let ((anon03_Then@1 (=> (and true
    ($local_value_is $s@12 $@tok$1^179.7 $@loc.n ($ptr_to_int L@n@1) ($ptr_to ^Node))
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
    (= L@n@1 ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast L@p@1 ^Node))) ^Node))
  )
    (and anon04_Else anon04_Then)
)))
(let ((anon05_Then@1 (=> (and true
    ($local_value_is $s@12 $@tok$1^185.7 $@loc.n ($ptr_to_int L@n@2) ($ptr_to ^Node))
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
    (= L@n@2 ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast L@p@1 ^Node))) ^Node))
  )
    (and anon06_Else anon06_Then)
)))
(let ((anon03_Then (=> (and true
    (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast P@x ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast L@p@1 ^Node)))
  )(and 
    anon03_Then_assertion
    anon03_Then@1
))))
(let ((anon05_Then (=> (and true
    (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast P@x ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast L@p@1 ^Node)))
  )(and 
    anon05_Then_assertion
    anon05_Then@1
))))
(let ((anon03_Else@2 (=> (and true
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
  )
    anon05_Then
)))
(let ((anon03_Else@1 (=> (and true
    ($thread_local $s@12 ($phys_ptr_cast P@x ^Node))
  )(and 
    anon03_Else@1_assertion
    anon03_Else@2
))))
(let ((anon03_Else (=> (and true
    (<= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast L@p@1 ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon03_Else_assertion
    anon03_Else@1
))))
(let ((anon02_Then@2 (=> (and true
    ($thread_local $s@12 ($phys_ptr_cast L@p@1 ^Node))
  )
    (and anon03_Else anon03_Then)
)))
(let ((anon02_Then@1 (=> (and true
    ($thread_local $s@12 ($phys_ptr_cast P@x ^Node))
  )(and 
    anon02_Then@1_assertion
    anon02_Then@2
))))
(let ((anon02_Then (=> (and true
  )(and 
    anon02_Then_assertion
    anon02_Then@1
))))
(let ((anon01_LoopBody (=> (and true
    ($call_transition $s@11 $s@12)
    ($full_stop $s@12)
    ($good_state_ext $@tok$1^167.3 $s@12)
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.assign@12 ($ptr_to_int assign@12@0) ($ptr_to ^Node))
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.assign@13 ($ptr_to_int assign@13@0) ($ptr_to ^Node))
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.n ($ptr_to_int L@n@0) ($ptr_to ^Node))
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.owns@26 ($ptrset_to_int owns@26) ^$@ptrset)
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.prestate@24 ($state_to_int prestate@24@0) ^$@state_t)
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.prestate@27 ($state_to_int prestate@27) ^$@state_t)
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.prestate@28 ($state_to_int prestate@28) ^$@state_t)
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.res_lambda@4@17 ($map_t..^^i4.^^i4_to_int call3formal@$result@0) ($map_t ^^i4 ^^i4))
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.res_lambda@5@18 ($map_t..ptr_to..^Node.^^bool_to_int call1formal@$result@0) ($map_t ($ptr_to ^Node) ^^bool))
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.res_lambda@6@19 ($map_t..ptr_to..^Node.^^bool_to_int call2formal@$result@0) ($map_t ($ptr_to ^Node) ^^bool))
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.staticWrapState@25 ($state_to_int staticWrapState@25) ^$@state_t)
    ($local_value_is $s@12 $@tok$1^167.3 $@loc.x ($ptr_to_int P@x) ($ptr_to ^Node))
    ($modifies $s@11 $s@12 (lambda@22 Tree.R $s@11 P@t ^Tree P@x ^Node))
    (<= ($current_timestamp $s@11) ($current_timestamp $s@12))
  )
    anon02_Then
)))
(let ((anon01_LoopHead (=> (and true
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)))
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)))
    ($mutable $s@12 ($phys_ptr_cast P@x ^Node))
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast L@p@1 ^Node))
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
    (forall( (|Q#k$1^172.31#tc2_$0| Int))(!(=> (and (<= $min.i4 |Q#k$1^172.31#tc2_$0|) (<= |Q#k$1^172.31#tc2_$0| $max.i4)) (=> (forall( (|Q#m$1^172.31#dt1_$2| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$2| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$2| ^Node)) |Q#k$1^172.31#tc2_$0|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$2| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2_$0|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2_$0|))))
    (forall( (|Q#m$1^171.31#dt1_$5| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$5| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$5| ^Node)))))
    (forall( (|Q#m$1^171.31#dt1_$8| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$8| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@12 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$8| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$8| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$8| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$8| ^Node))))))
    (forall( (|Q#m$1^172.31#dt1_$1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$1| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$1| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.value) ($phys_ptr_cast |Q#m$1^172.31#dt1_$1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$1| ^Node))))))
    (forall( (|Q#n$1^171.31#dt1_$10| $ptr) (|Q#m$1^171.31#dt1_$6| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$10| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$10| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$6| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$6| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$10| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$10| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$6| ^Node)))))
    (forall( (|Q#n$1^171.31#dt1_$11| $ptr) (|Q#m$1^171.31#dt1_$7| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$11| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$11| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$7| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$7| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$11| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$11| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$7| ^Node)))))
    (forall( (|Q#n$1^171.31#dt1_$12| $ptr) (|Q#m$1^171.31#dt1_$9| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$12| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$9| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$9| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$12| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$9| ^Node)))))
    (forall( (|Q#n$1^171.31#dt1_$13| $ptr) (|Q#m$1^171.31#dt1_$10| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$13| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$10| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$13| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$13| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$10| ^Node)))))
    (forall( (|Q#n$1^171.31#dt1_$14| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$14| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$14| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$14| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$14| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$14| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$14| ^Node)) ^Node))))
    (forall( (|Q#n$1^171.31#dt1_$15| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$15| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$15| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$15| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$15| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$15| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$15| ^Node)) ^Node))))
    (forall( (|Q#n$1^171.31#dt1_$16| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$16| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$16| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$16| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$16| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$16| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$16| ^Node)) ^Node))))
    (forall( (|Q#n$1^171.31#dt1_$17| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$17| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$17| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$17| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$17| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$17| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$17| ^Node)) ^Node))))
    (forall( (|Q#n$1^171.31#dt1_$18| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$18| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$18| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$18| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$18| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$18| ^Node)) ^Node))))
    (forall( (|Q#n$1^171.31#dt1_$19| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$19| ^Node)) ^Node))))
    (forall( (|Q#n$1^171.31#dt1_$20| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$20| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$20| ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$20| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$20| ^Node)))))
    (forall( (|Q#n$1^173.31#dt1_$1| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$1| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$1| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$1| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$1| ^Node) ($phys_ptr_cast P@x ^Node)) (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$1| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$1| ^Node)) ^Node))))
    (forall( (|Q#n$1^173.31#dt1_$2| $ptr) (|Q#m$1^173.31#dt1_$0| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$2| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$0| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$2| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$2| ^Node) ($phys_ptr_cast L@p@1 ^Node)) (= ($phys_ptr_cast |Q#m$1^173.31#dt1_$0| ^Node) ($phys_ptr_cast P@x ^Node))) (= ($phys_ptr_cast |Q#m$1^173.31#dt1_$0| ^Node) ($phys_ptr_cast |Q#n$1^173.31#dt1_$2| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast |Q#n$1^173.31#dt1_$2| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$0| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast |Q#n$1^173.31#dt1_$2| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$0| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$2| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1_$0| ^Node)))))
    (forall( (|Q#n$1^176.31#dt1_$0| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1_$0| ^Node)) (or (= ($phys_ptr_cast |Q#n$1^176.31#dt1_$0| ^Node) ($phys_ptr_cast P@x ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast |Q#n$1^176.31#dt1_$0| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.key) ($phys_ptr_cast P@x ^Node))))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1_$0| ^Node)))))
    (forall( (|Q#p$1^169.32#tc3_$0| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@12 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$0|) (or (= |Q#p$1^169.32#tc3_$0| ($phys_ptr_cast P@x ^Node)) (and (and (and (and ($is |Q#p$1^169.32#tc3_$0| ($field_type ($field |Q#p$1^169.32#tc3_$0|))) ($is_proper |Q#p$1^169.32#tc3_$0|)) (= ($owner $s@12 |Q#p$1^169.32#tc3_$0|) $me)) ($closed $s@12 |Q#p$1^169.32#tc3_$0|)) (not ($is_primitive ($field_type ($field |Q#p$1^169.32#tc3_$0|)))))))  :weight  10 :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@12 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$0|)) :pattern ( (sk_hack (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@12 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3_$0|)))))
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.left) ($phys_ptr_cast L@p@1 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Node.right) ($phys_ptr_cast L@p@1 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@12) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
    (not (= ($phys_ptr_cast L@p@1 ^Node) ($phys_ptr_cast P@x ^Node)))
  )
    anon01_LoopBody
)))
(let ((anon00_Else@39 (=> (and true
    (forall( (|Q#n$1^176.31#dt1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node)) (or (= ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node) ($phys_ptr_cast P@x ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast P@x ^Node))))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^176.31#dt1| ^Node)))))
  )
    anon01_LoopHead
)))
(let ((anon00_Else@38 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast L@p@0 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon00_Else@38_assertion
    anon00_Else@39
))))
(let ((anon00_Else@37 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast L@p@0 ^Node))) ^Node)) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon00_Else@37_assertion
    anon00_Else@38
))))
(let ((anon00_Else@36 (=> (and true
    (not (= ($phys_ptr_cast L@p@0 ^Node) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon00_Else@36_assertion
    anon00_Else@37
))))
(let ((anon00_Else@35 (=> (and true
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast L@p@0 ^Node))
  )(and 
    anon00_Else@35_assertion
    anon00_Else@36
))))
(let ((anon00_Else@34 (=> (and true
    (forall( (|Q#n$1^173.31#dt1_$0| $ptr) (|Q#m$1^173.31#dt1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node) ($phys_ptr_cast L@p@0 ^Node)) (= ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node) ($phys_ptr_cast P@x ^Node))) (= ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1_$0| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^173.31#dt1| ^Node)))))
  )(and 
    anon00_Else@34_assertion
    anon00_Else@35
))))
(let ((anon00_Else@33 (=> (and true
    (forall( (|Q#n$1^173.31#dt1| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node) ($phys_ptr_cast P@x ^Node)) (= ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^173.31#dt1| ^Node)) ^Node))))
  )(and 
    anon00_Else@33_assertion
    anon00_Else@34
))))
(let ((anon00_Else@32 (=> (and true
    (forall( (|Q#k$1^172.31#tc2| Int))(!(=> (and (<= $min.i4 |Q#k$1^172.31#tc2|) (<= |Q#k$1^172.31#tc2| $max.i4)) (=> (forall( (|Q#m$1^172.31#dt1_$0| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$0| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1_$0| ^Node)) |Q#k$1^172.31#tc2|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1_$0| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) |Q#k$1^172.31#tc2|))))
  )(and 
    anon00_Else@32_assertion
    anon00_Else@33
))))
(let ((anon00_Else@31 (=> (and true
    (forall( (|Q#m$1^172.31#dt1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.value) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.abs) ($phys_ptr_cast P@t ^Tree))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^172.31#dt1| ^Node))))))
  )(and 
    anon00_Else@31_assertion
    anon00_Else@32
))))
(let ((anon00_Else@30 (=> (and true
  )(and 
    anon00_Else@30_assertion
    anon00_Else@31
))))
(let ((anon00_Else@29 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$9| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$9| ^Node)))))
  )
    anon00_Else@30
)))
(let ((anon00_Else@28 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$8| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$8| ^Node)) ^Node))))
  )(and 
    anon00_Else@28_assertion
    anon00_Else@29
))))
(let ((anon00_Else@27 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$7| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$7| ^Node)) ^Node))))
  )(and 
    anon00_Else@27_assertion
    anon00_Else@28
))))
(let ((anon00_Else@26 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$6| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$6| ^Node)) ^Node))))
  )(and 
    anon00_Else@26_assertion
    anon00_Else@27
))))
(let ((anon00_Else@25 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$5| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$5| ^Node)) ^Node))))
  )(and 
    anon00_Else@25_assertion
    anon00_Else@26
))))
(let ((anon00_Else@24 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$4| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$4| ^Node)) ^Node))))
  )(and 
    anon00_Else@24_assertion
    anon00_Else@25
))))
(let ((anon00_Else@23 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$3| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$3| ^Node)) ^Node))))
  )(and 
    anon00_Else@23_assertion
    anon00_Else@24
))))
(let ((anon00_Else@22 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$2| $ptr) (|Q#m$1^171.31#dt1_$4| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$2| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$4| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$2| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$2| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$4| ^Node)))))
  )(and 
    anon00_Else@22_assertion
    anon00_Else@23
))))
(let ((anon00_Else@21 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$1| $ptr) (|Q#m$1^171.31#dt1_$3| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$1| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$3| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$3| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast |Q#n$1^171.31#dt1_$1| ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$3| ^Node)))))
  )(and 
    anon00_Else@21_assertion
    anon00_Else@22
))))
(let ((anon00_Else@20 (=> (and true
    (forall( (|Q#m$1^171.31#dt1_$2| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^171.31#dt1_$2| ^Node))))))
  )(and 
    anon00_Else@20_assertion
    anon00_Else@21
))))
(let ((anon00_Else@19 (=> (and true
    (forall( (|Q#n$1^171.31#dt1_$0| $ptr) (|Q#m$1^171.31#dt1_$1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$1| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$1| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1_$0| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$1| ^Node)))))
  )(and 
    anon00_Else@19_assertion
    anon00_Else@20
))))
(let ((anon00_Else@18 (=> (and true
    (forall( (|Q#n$1^171.31#dt1| $ptr) (|Q#m$1^171.31#dt1_$0| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$0| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#m$1^171.31#dt1_$0| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.key) ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^171.31#dt1| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1_$0| ^Node)))))
  )(and 
    anon00_Else@18_assertion
    anon00_Else@19
))))
(let ((anon00_Else@17 (=> (and true
    (forall( (|Q#m$1^171.31#dt1| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^171.31#dt1| ^Node)))))
  )(and 
    anon00_Else@17_assertion
    anon00_Else@18
))))
(let ((anon00_Else@16 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))) ^Node))))))
  )(and 
    anon00_Else@16_assertion
    anon00_Else@17
))))
(let ((anon00_Else@15 (=> (and true
    (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
  )(and 
    anon00_Else@15_assertion
    anon00_Else@16
))))
(let ((anon00_Else@14 (=> (and true
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast $null ^Node)))
  )(and 
    anon00_Else@14_assertion
    anon00_Else@15
))))
(let ((anon00_Else@13 (=> (and true
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node)))
  )(and 
    anon00_Else@13_assertion
    anon00_Else@14
))))
(let ((anon00_Else@12 (=> (and true
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast $null ^Node)))
  )(and 
    anon00_Else@12_assertion
    anon00_Else@13
))))
(let ((anon00_Else@11 (=> (and true
    ($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@11) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
  )(and 
    anon00_Else@11_assertion
    anon00_Else@12
))))
(let ((anon00_Else@10 (=> (and true
    ($mutable $s@11 ($phys_ptr_cast P@x ^Node))
  )(and 
    anon00_Else@10_assertion
    anon00_Else@11
))))
(let ((anon00_Else@9 (=> (and true
    (forall( (|Q#p$1^169.32#tc3| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3|) (or (= |Q#p$1^169.32#tc3| ($phys_ptr_cast P@x ^Node)) (and (and (and (and ($is |Q#p$1^169.32#tc3| ($field_type ($field |Q#p$1^169.32#tc3|))) ($is_proper |Q#p$1^169.32#tc3|)) (= ($owner $s@11 |Q#p$1^169.32#tc3|) $me)) ($closed $s@11 |Q#p$1^169.32#tc3|)) (not ($is_primitive ($field_type ($field |Q#p$1^169.32#tc3|)))))))  :weight  10 :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3|)) :pattern ( (sk_hack (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns $s@11 ($phys_ptr_cast P@t ^Tree)) |Q#p$1^169.32#tc3|)))))
  )(and 
    anon00_Else@9_assertion
    anon00_Else@10
))))
(let ((anon00_Else@8 (=> (and true
    (forall( (|#loopWrites^$1^168.28| $ptr))(!(=> ($in_writes_at $@wrTime$1^168.28 |#loopWrites^$1^168.28|) ($top_writable $s@11 $@wrTime$1^134.1 |#loopWrites^$1^168.28|))  :pattern ( ($dont_instantiate |#loopWrites^$1^168.28|))))
  )(and 
    anon00_Else@8_assertion
    anon00_Else@9
))))
(let ((anon00_Else@7 (=> (and true
    ($full_stop $s@11)
    ($good_state_ext $@tok$1^168.28 $s@11)
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast P@x ^Node))
    ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast P@x ^Node))
    (< ($current_timestamp $s@10) ($current_timestamp $s@11))
    (= $@wrTime$1^168.28 ($current_timestamp $s@11))
    (= ($f_closed $s@11) ($f_closed $s@10))
    (= ($f_owner $s@11) ($f_owner $s@10))
    (= ($f_timestamp $s@11) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp $s@10) $null ($current_timestamp $s@11)))
    (= ($heap $s@11) ($heap $s@10))
    (= ($roots $s@11) ($roots $s@10))
    (= ($writes_at $@wrTime$1^168.28) (lambda@22 Tree.R $s@11 P@t ^Tree P@x ^Node))
  )(and 
    anon00_Else@7_assertion
    anon00_Else@8
))))
(let ((anon00_Else@6 (=> (and true
    (F@doMark ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))
    (F@doMark ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@10) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))
  )(and 
    anon00_Else@6_assertion
    anon00_Else@7
))))
(let ((anon00_Else@5 (=> (and true
    ($call_transition $s@6 $s@10)
    ($full_stop $s@10)
    ($good_state_ext $@tok$1^163.25 $s@10)
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
    (< ($current_timestamp $s@6) ($current_timestamp $s@10))
    (= ($f_closed $s@6) ($f_closed $s@10))
    (= ($f_owner $s@6) ($f_owner $s@10))
    (= ($f_timestamp $s@6) ($f_timestamp $s@10))
    (= ($heap $s@10) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@6) Tree.R (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@6) Tree.R) call1formal@p@0_$5 call2formal@v@0_$5)))
    (= ($roots $s@6) ($roots $s@10))
    (= call1formal@p@0_$5 ($phys_ptr_cast P@t ^Tree))
    (= call2formal@v@0_$5 ($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@6) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@6) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node) call2formal@$result@0)))
  )(and 
    anon00_Else@5_assertion
    anon00_Else@6
))))
(let ((anon00_Else@4 (=> (and true
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
  )(and 
    anon00_Else@4_assertion
    anon00_Else@5
))))
(let ((anon00_Else@3 (=> (and true
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))
    ($mutable $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
    (or (>= ($timestamp $s@6 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
  )(and 
    anon00_Else@3_assertion
    anon00_Else@4
))))
(let ((anon00_Else@2 (=> (and true
    ($call_transition $s@6 $s@6)
    ($full_stop $s@6)
    ($good_state_ext $@tok$1^163.41 $s@6)
    ($local_value_is $s@6 $@tok$1^163.41 $@loc.res_lambda@6@19 ($map_t..ptr_to..^Node.^^bool_to_int call2formal@$result@0) ($map_t ($ptr_to ^Node) ^^bool))
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
    (= call0formal@@l1@0 ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)))
    (= call1formal@@l0@0 ($phys_ptr_cast P@x ^Node))
    (= call2formal@$result@0 (F@lambda@6 call0formal@@l1@0 call1formal@@l0@0))
  )(and 
    anon00_Else@2_assertion
    anon00_Else@3
))))
(let ((anon00_Else@1 (=> (and true
    ($thread_local $s@6 ($phys_ptr_cast P@t ^Tree))
  )(and 
    anon00_Else@1_assertion
    anon00_Else@2
))))
(let ((anon00_Else (=> (and true
    ($local_value_is $s@6 $@tok$1^163.41 $@loc.res_lambda@6@19 ($map_t..ptr_to..^Node.^^bool_to_int res_lambda@6@19) ($map_t ($ptr_to ^Node) ^^bool))
    (not (= ($phys_ptr_cast L@p@0 ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast L@p@0 ^Node))))))
  )(and 
    anon00_Else_assertion
    anon00_Else@1
))))
(let ((anon36@18 (=> (and true
    ($call_transition $s@5 $s@6)
    ($full_stop $s@6)
    ($good_state_ext $@tok$1^153.5 $s@6)
    ($thread_local $s@5 ($phys_ptr_cast P@t ^Tree))
    (< ($current_timestamp $s@5) ($current_timestamp $s@6))
    (= ($f_closed $s@5) ($f_closed $s@6))
    (= ($f_owner $s@5) ($f_owner $s@6))
    (= ($f_timestamp $s@5) ($f_timestamp $s@6))
    (= ($heap $s@6) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@5) Tree.R (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@5) Tree.R) call1formal@p@0_$4 call2formal@v@0_$4)))
    (= ($roots $s@5) ($roots $s@6))
    (= call1formal@p@0_$4 ($phys_ptr_cast P@t ^Tree))
    (= call2formal@v@0_$4 ($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@5) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast P@x ^Node) call1formal@$result@0)))
  )
    (and anon00_Else anon00_Then)
)))
(let ((anon36@17 (=> (and true
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))
    ($mutable $s@5 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
    (or (>= ($timestamp $s@5 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.R)))
  )(and 
    anon36@17_assertion
    anon36@18
))))
(let ((anon36@16 (=> (and true
    ($call_transition $s@4 $s@5)
    ($call_transition $s@5 $s@5)
    ($full_stop $s@5)
    ($full_stop $s@5)
    ($good_state_ext $@tok$1^152.5 $s@5)
    ($good_state_ext $@tok$1^153.15 $s@5)
    ($local_value_is $s@5 $@tok$1^153.15 $@loc.res_lambda@5@18 ($map_t..ptr_to..^Node.^^bool_to_int call1formal@$result@0) ($map_t ($ptr_to ^Node) ^^bool))
    ($local_value_is $s@5 $@tok$1^153.15 $@loc.res_lambda@5@18 ($map_t..ptr_to..^Node.^^bool_to_int res_lambda@5@18) ($map_t ($ptr_to ^Node) ^^bool))
    ($mutable $s@4 call0formal@p@0)
    ($updated_owns $s@4 $s@5 call0formal@p@0 call1formal@owns@0)
    (< ($current_timestamp $s@4) ($current_timestamp $s@5))
    (= ($f_closed $s@4) ($f_closed $s@5))
    (= ($f_owner $s@4) ($f_owner $s@5))
    (= ($f_timestamp $s@4) ($f_timestamp $s@5))
    (= ($roots $s@4) ($roots $s@5))
    (= call0formal@@l0@0 ($phys_ptr_cast P@x ^Node))
    (= call1formal@$result@0 (F@lambda@5 call0formal@@l0@0))
  )(and 
    anon36@16_assertion
    anon36@17
))))
(let ((anon36@15 (=> (and true
    (not ($is_primitive ($field_type ($field call0formal@p@0))))
  )(and 
    anon36@15_assertion
    anon36@16
))))
(let ((anon36@14 (=> (and true
    (= call0formal@p@0 ($phys_ptr_cast P@t ^Tree))
    (= call1formal@owns@0 ($set_union ($owns $s@4 ($phys_ptr_cast P@t ^Tree)) ($set_singleton ($phys_ptr_cast P@x ^Node))))
    (forall( (|#writes$1^152.5| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($span ($phys_ptr_cast P@t ^Tree)) |#writes$1^152.5|) ($top_writable $s@4 $@wrTime$1^134.1 |#writes$1^152.5|))  :pattern ( ($dont_instantiate |#writes$1^152.5|))))
  )(and 
    anon36@14_assertion
    anon36@15
))))
(let ((anon36@13 (=> (and true
    ($call_transition $s@3 $s@4)
    ($full_stop $s@4)
    ($good_state_ext $@tok$1^151.5 $s@4)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs))))
    ($is_proper ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs))
    ($mutable $s@3 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs)))
    (< ($current_timestamp $s@3) ($current_timestamp $s@4))
    (= ($f_closed $s@3) ($f_closed $s@4))
    (= ($f_owner $s@3) ($f_owner $s@4))
    (= ($f_timestamp $s@3) ($f_timestamp $s@4))
    (= ($heap $s@4) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@3) Tree.abs (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@3) Tree.abs) call1formal@p@0_$3 call2formal@v@0_$3)))
    (= ($roots $s@3) ($roots $s@4))
    (= call1formal@p@0_$3 ($phys_ptr_cast P@t ^Tree))
    (= call2formal@v@0_$3 ($map_t..^^i4.^^i4_to_int call3formal@$result@0))
    (or (>= ($timestamp $s@3 ($emb0 ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@t ^Tree) Tree.abs)))
  )(and 
    anon36@13_assertion
    anon36@14
))))
(let ((anon36@12 (=> (and true
    ($call_transition $s@3 $s@3)
    ($full_stop $s@3)
    ($good_state_ext $@tok$1^151.14 $s@3)
    ($local_value_is $s@3 $@tok$1^151.14 $@loc.res_lambda@4@17 ($map_t..^^i4.^^i4_to_int call3formal@$result@0) ($map_t ^^i4 ^^i4))
    ($thread_local $s@3 ($phys_ptr_cast P@x ^Node))
    (= call0formal@@l2@0 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@3) Tree.abs) ($phys_ptr_cast P@t ^Tree))))
    (= call1formal@@l1@0 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@3) Node.value) ($phys_ptr_cast P@x ^Node)))
    (= call2formal@@l0@0 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@3) Node.key) ($phys_ptr_cast P@x ^Node)))
    (= call3formal@$result@0 (F@lambda@4 call0formal@@l2@0 call1formal@@l1@0 call2formal@@l0@0))
  )(and 
    anon36@12_assertion
    anon36@13
))))
(let ((anon36@11 (=> (and true
    ($thread_local $s@3 ($phys_ptr_cast P@x ^Node))
  )(and 
    anon36@11_assertion
    anon36@12
))))
(let ((anon36@10 (=> (and true
    ($thread_local $s@3 ($phys_ptr_cast P@t ^Tree))
  )(and 
    anon36@10_assertion
    anon36@11
))))
(let ((anon36@9 (=> (and true
    ($local_value_is $s@3 $@tok$1^148.3 $@loc.p ($ptr_to_int L@p@0) ($ptr_to ^Node))
    ($local_value_is $s@3 $@tok$1^151.14 $@loc.res_lambda@4@17 ($map_t..^^i4.^^i4_to_int res_lambda@4@17) ($map_t ^^i4 ^^i4))
    ($thread_local $s@3 ($phys_ptr_cast P@t ^Tree))
    (= L@p@0 ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@3) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node))
  )(and 
    anon36@9_assertion
    anon36@10
))))
(let ((anon36@8 (=> (and true
    ($call_transition $s@2 $s@3)
    ($full_stop $s@3)
    ($good_state_ext $@tok$1^146.3 $s@3)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.left))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.left))
    ($mutable $s@2 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.left)))
    (< ($current_timestamp $s@2) ($current_timestamp $s@3))
    (= ($f_closed $s@2) ($f_closed $s@3))
    (= ($f_owner $s@2) ($f_owner $s@3))
    (= ($f_timestamp $s@2) ($f_timestamp $s@3))
    (= ($heap $s@3) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@2) Node.left (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@2) Node.left) call1formal@p@0_$2 call2formal@v@0_$2)))
    (= ($roots $s@2) ($roots $s@3))
    (= call1formal@p@0_$2 ($phys_ptr_cast P@x ^Node))
    (= call2formal@v@0_$2 ($ptr_to_int ($phys_ptr_cast assign@12@0 ^Node)))
    (or (>= ($timestamp $s@2 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.left))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.left)))
  )(and 
    anon36@8_assertion
    anon36@9
))))
(let ((anon36@7 (=> (and true
    ($call_transition $s@1 $s@2)
    ($full_stop $s@2)
    ($good_state_ext $@tok$1^146.13 $s@2)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.right))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.right))
    ($mutable $s@1 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.right)))
    (< ($current_timestamp $s@1) ($current_timestamp $s@2))
    (= ($f_closed $s@1) ($f_closed $s@2))
    (= ($f_owner $s@1) ($f_owner $s@2))
    (= ($f_timestamp $s@1) ($f_timestamp $s@2))
    (= ($heap $s@2) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@1) Node.right (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@1) Node.right) call1formal@p@0_$1 call2formal@v@0_$1)))
    (= ($roots $s@1) ($roots $s@2))
    (= call1formal@p@0_$1 ($phys_ptr_cast P@x ^Node))
    (= call2formal@v@0_$1 ($ptr_to_int ($phys_ptr_cast assign@12@0 ^Node)))
    (or (>= ($timestamp $s@1 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.right))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.right)))
  )(and 
    anon36@7_assertion
    anon36@8
))))
(let ((anon36@6 (=> (and true
    ($call_transition $s@0 $s@1)
    ($full_stop $s@1)
    ($good_state_ext $@tok$1^146.24 $s@1)
    ($is_primitive ($field_type ($field ($dot ($phys_ptr_cast P@x ^Node) Node.parent))))
    ($is_proper ($dot ($phys_ptr_cast P@x ^Node) Node.parent))
    ($local_value_is $s@1 $@tok$2^0.0 $@loc.assign@12 ($ptr_to_int assign@12@0) ($ptr_to ^Node))
    ($mutable $s@0 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
    (< ($current_timestamp $s@0) ($current_timestamp $s@1))
    (= ($f_closed $s@0) ($f_closed $s@1))
    (= ($f_owner $s@0) ($f_owner $s@1))
    (= ($f_timestamp $s@0) ($f_timestamp $s@1))
    (= ($heap $s@1) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@0) Node.parent (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s@0) Node.parent) call1formal@p@0 call2formal@v@0)))
    (= ($roots $s@0) ($roots $s@1))
    (= assign@12@0 ($phys_ptr_cast assign@13@0 ^Node))
    (= call1formal@p@0 ($phys_ptr_cast P@x ^Node))
    (= call2formal@v@0 ($ptr_to_int ($phys_ptr_cast assign@13@0 ^Node)))
    (or (>= ($timestamp $s@0 ($emb0 ($dot ($phys_ptr_cast P@x ^Node) Node.parent))) $@wrTime$1^134.1) ($in_writes_at $@wrTime$1^134.1 ($dot ($phys_ptr_cast P@x ^Node) Node.parent)))
  )(and 
    anon36@6_assertion
    anon36@7
))))
(let ((anon36@5 (=> (and true
    ($full_stop $s@0)
    ($good_state_ext $@tok$1^144.19 $s@0)
    ($is_unwrapped_dynamic $s $s@0 call0formal@o@0)
    ($local_value_is $s@0 $@tok$2^0.0 $@loc.assign@12 ($ptr_to_int assign@12) ($ptr_to ^Node))
    ($local_value_is $s@0 $@tok$2^0.0 $@loc.assign@13 ($ptr_to_int assign@13) ($ptr_to ^Node))
    ($local_value_is $s@0 $@tok$2^0.0 $@loc.assign@13 ($ptr_to_int assign@13@0) ($ptr_to ^Node))
    ($pre_unwrap $s)
    (= assign@13@0 ($phys_ptr_cast $null ^Node))
  )(and 
    anon36@5_assertion
    anon36@6
))))
(let ((anon36@4 (=> (and true
    (or (not ($is_claimable ^Tree)) (= ($ref_cnt $s call0formal@o@0) 0))
  )(and 
    anon36@4_assertion
    anon36@5
))))
(let ((anon36@3 (=> (and true
    ($top_writable $s $@wrTime$1^134.1 ($phys_ptr_cast P@t ^Tree))
    (= call0formal@o@0 ($phys_ptr_cast P@t ^Tree))
  )(and 
    anon36@3_assertion
    anon36@4
))))
(let ((anon36@2 (=> (and true
    ($closed $s ($phys_ptr_cast P@t ^Tree))
    ($inv2 $s $s ($phys_ptr_cast P@t ^Tree) ^Tree)
    ($is ($phys_ptr_cast P@t ^Tree) ^Tree)
    ($is_proper ($phys_ptr_cast P@t ^Tree))
    ($pre_unwrap $s)
    (= ($owner $s ($phys_ptr_cast P@t ^Tree)) $me)
    (not ($is_primitive ^Tree))
  )(and 
    anon36@2_assertion
    anon36@3
))))
(let ((anon36@1 (=> (and true
    ($in_domain_lab $s ($phys_ptr_cast P@t ^Tree) ($phys_ptr_cast P@t ^Tree) l@public)
    ($local_value_is $s $@tok$1^142.3 $@loc.n ($ptr_to_int L@n) ($ptr_to ^Node))
    ($local_value_is $s $@tok$1^142.3 $@loc.p ($ptr_to_int L@p) ($ptr_to ^Node))
    ($local_value_is $s $@tok$2^0.0 $@loc.prestate@24 ($state_to_int prestate@24) ^$@state_t)
    ($local_value_is $s $@tok$2^0.0 $@loc.prestate@24 ($state_to_int prestate@24@0) ^$@state_t)
    (= prestate@24@0 $s)
  )(and 
    anon36@1_assertion
    anon36@2
))))
(let ((anon36 (=> (and true
    ($full_stop $s)
    ($function_entry $s)
    ($good_state_ext $@tok$1^134.1 $s)
    ($local_value_is $s $@tok$1^134.1 $@loc.t ($ptr_to_int P@t) ($ptr_to ^Tree))
    ($local_value_is $s $@tok$1^134.1 $@loc.x ($ptr_to_int P@x) ($ptr_to ^Node))
    ($mutable $s ($phys_ptr_cast P@x ^Node))
    (= $@wrTime$1^134.1 ($current_timestamp $s))
    (= ($owner $s ($emb0 ($phys_ptr_cast P@t ^Tree))) $me)
    (= ($writes_at $@wrTime$1^134.1) (lambda@21 ^Node P@t ^Tree P@x))
    (= 2147483647 $decreases_level)
    (forall( (|f_$22| $pure_function))(!(< ($frame_level |f_$22|) $current_frame_level)  :pattern ( ($frame_level |f_$22|))))
  )(and 
    anon36_assertion
    anon36@1
))))
(let ((PreconditionGeneratedEntry (=> (and true
    ($closed $s ($phys_ptr_cast P@t ^Tree))
    ($is ($phys_ptr_cast P@t ^Tree) ^Tree)
    ($is_proper ($phys_ptr_cast P@t ^Tree))
    (= ($owner $s ($phys_ptr_cast P@t ^Tree)) $me)
    (forall( (|Q#n$1^138.28#dt1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^138.28#dt1| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Node.key) ($phys_ptr_cast |Q#n$1^138.28#dt1| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Node.key) ($phys_ptr_cast P@x ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast |Q#n$1^138.28#dt1| ^Node)))))
    (not ($is_primitive ^Tree))
    (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.R) ($phys_ptr_cast P@t ^Tree))) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap $s) Tree.root) ($phys_ptr_cast P@t ^Tree))) ^Node)) ($phys_ptr_cast P@x ^Node)))
  )
    anon36
)))
(let (($start (=> (and true
    ($file_name_is 1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c)
    ($file_name_is 2 $@file^?3Cno?20file?3E)
    ($function_arg_type cf@doMark 0 ^^bool)
    ($function_arg_type cf@doMark 1 ($ptr_to ^Node))
    ($function_arg_type cf@lambda@1 0 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@2 0 ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    ($function_arg_type cf@lambda@2 1 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@3 0 ($map_t ^^i4 ^^i4))
    ($function_arg_type cf@lambda@4 0 ($map_t ^^i4 ^^i4))
    ($function_arg_type cf@lambda@4 1 ($map_t ^^i4 ^^i4))
    ($function_arg_type cf@lambda@4 2 ^^i4)
    ($function_arg_type cf@lambda@4 3 ^^i4)
    ($function_arg_type cf@lambda@5 0 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@5 1 ($ptr_to ^Node))
    ($function_arg_type cf@lambda@6 0 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@6 1 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@6 2 ($ptr_to ^Node))
    ($function_arg_type cf@lambda@7 0 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@7 1 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@7 2 ($ptr_to ^Node))
    ($function_arg_type cf@lambda@8 0 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@8 1 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@8 2 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@8 3 ($ptr_to ^Node))
    ($function_arg_type cf@lambda@9 0 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@9 1 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@9 2 ($map_t ($ptr_to ^Node) ^^bool))
    ($function_arg_type cf@lambda@9 3 ($ptr_to ^Node))
    ($function_arg_type cf@mark 0 ($ptr_to ^Node))
    ($function_arg_type cf@mark 1 ($ptr_to ^Node))
    ($function_arg_type cf@mark2 0 ^^bool)
    ($function_arg_type cf@mark2 1 ($ptr_to ^Node))
    ($good_state ($vs_state $struct_zero))
    ($in_range_phys_ptr $null)
    ($in_range_spec_ptr $inactive_union_owner)
    ($in_range_spec_ptr $me)
    ($in_range_spec_ptr $null)
    ($is_ghost_field Tree.abs)
    ($is_ghost_field Tree.R)
    ($is_math_type ^$@ptrset)
    ($is_math_type ^$@state_t)
    ($is_math_type ^$@struct)
    ($is_math_type ^$@thread_id)
    ($is_math_type ^^field)
    ($is_math_type ^^mathint)
    ($is_math_type ^^null_type)
    ($is_math_type ^^object)
    ($is_phys_field Node.key)
    ($is_phys_field Node.left)
    ($is_phys_field Node.parent)
    ($is_phys_field Node.red)
    ($is_phys_field Node.right)
    ($is_phys_field Node.value)
    ($is_phys_field Tree.root)
    ($is_primitive ^$@ptrset)
    ($is_primitive ^$@state_t)
    ($is_primitive ^$@struct)
    ($is_primitive ^$@thread_id)
    ($is_primitive ^^bool)
    ($is_primitive ^^f4)
    ($is_primitive ^^f8)
    ($is_primitive ^^field)
    ($is_primitive ^^i1)
    ($is_primitive ^^i2)
    ($is_primitive ^^i4)
    ($is_primitive ^^i8)
    ($is_primitive ^^mathint)
    ($is_primitive ^^null_type)
    ($is_primitive ^^object)
    ($is_primitive ^^u1)
    ($is_primitive ^^u2)
    ($is_primitive ^^u4)
    ($is_primitive ^^u8)
    ($is_primitive ^^void)
    ($is_proper $inactive_union_owner)
    ($is_proper $me)
    ($is_span_sequential ^Node)
    ($is_span_sequential ^Tree)
    ($type_code_is 2 ^^i4)
    ($type_code_is 3 ^^object)
    (= $@distTp1 ($ptr_to ^Node))
    (= $@distTp2 ($map_t ($ptr_to ^Node) ^^bool))
    (= $@distTp3 ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    (= $@distTp4 ($map_t ^^i4 ^^i4))
    (= $@distTp5 ($ptr_to ^Tree))
    (= $arch_ptr_size 8)
    (= $arch_spec_ptr_start $max.u8)
    (= $max.i1 127)
    (= $max.i2 32767)
    (= $max.i4 (- (* 65536 32768) 1))
    (= $max.i8 (- (* (* (* 65536 65536) 65536) 32768) 1))
    (= $max.u1 255)
    (= $max.u2 65535)
    (= $max.u4 (- (* 65536 65536) 1))
    (= $max.u8 (- (* (* (* 65536 65536) 65536) 65536) 1))
    (= $min.i1 (- 0 128))
    (= $min.i2 (- 0 32768))
    (= $min.i4 (- 0 (* 65536 32768)))
    (= $min.i8 (- 0 (* (* (* 65536 65536) 65536) 32768)))
    (= $no_claim ($phys_ptr_cast $null ^^claim))
    (= $position_marker true)
    (= $set_empty lambda@14)
    (= ($_pow2 0) 1)
    (= ($_pow2 1) 2)
    (= ($_pow2 10) 1024)
    (= ($_pow2 11) 2048)
    (= ($_pow2 12) 4096)
    (= ($_pow2 13) 8192)
    (= ($_pow2 14) 16384)
    (= ($_pow2 15) 32768)
    (= ($_pow2 16) 65536)
    (= ($_pow2 17) 131072)
    (= ($_pow2 18) 262144)
    (= ($_pow2 19) 524288)
    (= ($_pow2 2) 4)
    (= ($_pow2 20) 1048576)
    (= ($_pow2 21) 2097152)
    (= ($_pow2 22) 4194304)
    (= ($_pow2 23) 8388608)
    (= ($_pow2 24) 16777216)
    (= ($_pow2 25) 33554432)
    (= ($_pow2 26) 67108864)
    (= ($_pow2 27) 134217728)
    (= ($_pow2 28) 268435456)
    (= ($_pow2 29) 536870912)
    (= ($_pow2 3) 8)
    (= ($_pow2 30) 1073741824)
    (= ($_pow2 31) 2147483648)
    (= ($_pow2 32) 4294967296)
    (= ($_pow2 33) 8589934592)
    (= ($_pow2 34) 17179869184)
    (= ($_pow2 35) 34359738368)
    (= ($_pow2 36) 68719476736)
    (= ($_pow2 37) 137438953472)
    (= ($_pow2 38) 274877906944)
    (= ($_pow2 39) 549755813888)
    (= ($_pow2 4) 16)
    (= ($_pow2 40) 1099511627776)
    (= ($_pow2 41) 2199023255552)
    (= ($_pow2 42) 4398046511104)
    (= ($_pow2 43) 8796093022208)
    (= ($_pow2 44) 17592186044416)
    (= ($_pow2 45) 35184372088832)
    (= ($_pow2 46) 70368744177664)
    (= ($_pow2 47) 140737488355328)
    (= ($_pow2 48) 281474976710656)
    (= ($_pow2 49) 562949953421312)
    (= ($_pow2 5) 32)
    (= ($_pow2 50) 1125899906842624)
    (= ($_pow2 51) 2251799813685248)
    (= ($_pow2 52) 4503599627370496)
    (= ($_pow2 53) 9007199254740992)
    (= ($_pow2 54) 18014398509481984)
    (= ($_pow2 55) 36028797018963968)
    (= ($_pow2 56) 72057594037927936)
    (= ($_pow2 57) 144115188075855872)
    (= ($_pow2 58) 288230376151711744)
    (= ($_pow2 59) 576460752303423488)
    (= ($_pow2 6) 64)
    (= ($_pow2 60) 1152921504606846976)
    (= ($_pow2 61) 2305843009213693952)
    (= ($_pow2 62) 4611686018427387904)
    (= ($_pow2 63) 9223372036854775808)
    (= ($_pow2 64) 18446744073709551616)
    (= ($_pow2 7) 128)
    (= ($_pow2 8) 256)
    (= ($_pow2 9) 512)
    (= ($addr $null) 0)
    (= ($as_field_with_type Node.key ^^i4) Node.key)
    (= ($as_field_with_type Node.left ($ptr_to ^Node)) Node.left)
    (= ($as_field_with_type Node.parent ($ptr_to ^Node)) Node.parent)
    (= ($as_field_with_type Node.red ^^bool) Node.red)
    (= ($as_field_with_type Node.right ($ptr_to ^Node)) Node.right)
    (= ($as_field_with_type Node.value ^^i4) Node.value)
    (= ($as_field_with_type Tree.abs ($map_t ^^i4 ^^i4)) Tree.abs)
    (= ($as_field_with_type Tree.R ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool))) Tree.R)
    (= ($as_field_with_type Tree.root ($ptr_to ^Node)) Tree.root)
    (= ($as_in_range_t ^^i1) ^^i1)
    (= ($as_in_range_t ^^i2) ^^i2)
    (= ($as_in_range_t ^^i4) ^^i4)
    (= ($as_in_range_t ^^i8) ^^i8)
    (= ($as_in_range_t ^^u1) ^^u1)
    (= ($as_in_range_t ^^u2) ^^u2)
    (= ($as_in_range_t ^^u4) ^^u4)
    (= ($as_in_range_t ^^u8) ^^u8)
    (= ($field $inactive_union_owner) ($f_root $inactive_union_owner_type))
    (= ($field $me) ($f_root ^$@thread_id_t))
    (= ($field_arr_root Node.key) Node.key)
    (= ($field_arr_root Node.left) Node.left)
    (= ($field_arr_root Node.parent) Node.parent)
    (= ($field_arr_root Node.red) Node.red)
    (= ($field_arr_root Node.right) Node.right)
    (= ($field_arr_root Node.value) Node.value)
    (= ($field_arr_root Tree.abs) Tree.abs)
    (= ($field_arr_root Tree.R) Tree.R)
    (= ($field_arr_root Tree.root) Tree.root)
    (= ($field_kind Node.key) $fk_base)
    (= ($field_kind Node.left) $fk_base)
    (= ($field_kind Node.parent) $fk_base)
    (= ($field_kind Node.red) $fk_base)
    (= ($field_kind Node.right) $fk_base)
    (= ($field_kind Node.value) $fk_base)
    (= ($field_kind Tree.abs) $fk_base)
    (= ($field_kind Tree.R) $fk_base)
    (= ($field_kind Tree.root) $fk_base)
    (= ($field_offset Node.key) 4)
    (= ($field_offset Node.left) 16)
    (= ($field_offset Node.parent) 32)
    (= ($field_offset Node.red) 0)
    (= ($field_offset Node.right) 24)
    (= ($field_offset Node.value) 8)
    (= ($field_offset Tree.root) 0)
    (= ($field_parent_type Node.key) ^Node)
    (= ($field_parent_type Node.left) ^Node)
    (= ($field_parent_type Node.parent) ^Node)
    (= ($field_parent_type Node.red) ^Node)
    (= ($field_parent_type Node.right) ^Node)
    (= ($field_parent_type Node.value) ^Node)
    (= ($field_parent_type Tree.abs) ^Tree)
    (= ($field_parent_type Tree.R) ^Tree)
    (= ($field_parent_type Tree.root) ^Tree)
    (= ($field_type Node.key) ^^i4)
    (= ($field_type Node.left) ($ptr_to ^Node))
    (= ($field_type Node.parent) ($ptr_to ^Node))
    (= ($field_type Node.red) ^^bool)
    (= ($field_type Node.right) ($ptr_to ^Node))
    (= ($field_type Node.value) ^^i4)
    (= ($field_type Tree.abs) ($map_t ^^i4 ^^i4))
    (= ($field_type Tree.R) ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))
    (= ($field_type Tree.root) ($ptr_to ^Node))
    (= ($int_to_map_t..^^i4.^^i4 0) $zero.$map_t..^^i4.^^i4)
    (= ($int_to_map_t..ptr_to..^Node.^^bool 0) $zero.$map_t..$ptr_to..^Node.^^bool)
    (= ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool 0) $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool)
    (= ($is_claimable $inactive_union_owner_type) false)
    (= ($is_claimable ^$@thread_id_t) false)
    (= ($is_claimable ^$@volatile_version_t) false)
    (= ($is_claimable ^^claim) true)
    (= ($is_claimable ^Node) false)
    (= ($is_claimable ^Tree) false)
    (= ($set_cardinality $set_empty) 0)
    (= ($sizeof $inactive_union_owner_type) 1)
    (= ($sizeof ^$@ptrset) 1)
    (= ($sizeof ^$@state_t) 1)
    (= ($sizeof ^$@struct) 1)
    (= ($sizeof ^$@thread_id) 1)
    (= ($sizeof ^$@thread_id_t) 1)
    (= ($sizeof ^$@volatile_version_t) 1)
    (= ($sizeof ^^bool) 1)
    (= ($sizeof ^^claim) 1)
    (= ($sizeof ^^f4) 4)
    (= ($sizeof ^^f8) 8)
    (= ($sizeof ^^field) 1)
    (= ($sizeof ^^i1) 1)
    (= ($sizeof ^^i2) 2)
    (= ($sizeof ^^i4) 4)
    (= ($sizeof ^^i8) 8)
    (= ($sizeof ^^mathint) 1)
    (= ($sizeof ^^null_type) 1)
    (= ($sizeof ^^object) 1)
    (= ($sizeof ^^u1) 1)
    (= ($sizeof ^^u2) 2)
    (= ($sizeof ^^u4) 4)
    (= ($sizeof ^^u8) 8)
    (= ($sizeof ^^void) 1)
    (= ($sizeof ^Node) 40)
    (= ($sizeof ^Tree) 8)
    (= ($type_branch $inactive_union_owner_type) $ctype_flat)
    (= ($type_branch ^$@ptrset) $ctype_flat)
    (= ($type_branch ^$@state_t) $ctype_flat)
    (= ($type_branch ^$@struct) $ctype_flat)
    (= ($type_branch ^$@thread_id) $ctype_flat)
    (= ($type_branch ^$@thread_id_t) $ctype_flat)
    (= ($type_branch ^$@volatile_version_t) $ctype_flat)
    (= ($type_branch ^^bool) $ctype_flat)
    (= ($type_branch ^^claim) $ctype_flat)
    (= ($type_branch ^^f4) $ctype_flat)
    (= ($type_branch ^^f8) $ctype_flat)
    (= ($type_branch ^^field) $ctype_flat)
    (= ($type_branch ^^i1) $ctype_flat)
    (= ($type_branch ^^i2) $ctype_flat)
    (= ($type_branch ^^i4) $ctype_flat)
    (= ($type_branch ^^i8) $ctype_flat)
    (= ($type_branch ^^mathint) $ctype_flat)
    (= ($type_branch ^^null_type) $ctype_flat)
    (= ($type_branch ^^object) $ctype_flat)
    (= ($type_branch ^^u1) $ctype_flat)
    (= ($type_branch ^^u2) $ctype_flat)
    (= ($type_branch ^^u4) $ctype_flat)
    (= ($type_branch ^^u8) $ctype_flat)
    (= ($type_branch ^^void) $ctype_flat)
    (= ($type_branch ^Node) $ctype_flat)
    (= ($type_branch ^Tree) $ctype_flat)
    (= ($unchecked ^^u4 (- 0 1)) $max.u4)
    (= ($unchecked ^^u4 (+ $max.u4 1)) 0)
    (= ($unchecked ^^u8 (- 0 1)) $max.u8)
    (= ($unchecked ^^u8 (+ $max.u8 1)) 0)
    (= (and (not $is_stuttering_check) (not $is_unwrap_check)) (and (not $is_stuttering_check) (not $is_unwrap_check)))
    (=> ($is_primitive ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool))) (= ($as_primitive_field Tree.R) Tree.R))
    (=> ($is_primitive ($map_t ^^i4 ^^i4)) (= ($as_primitive_field Tree.abs) Tree.abs))
    (=> ($is_primitive ($ptr_to ^Node)) (= ($as_primitive_field Node.left) Node.left))
    (=> ($is_primitive ($ptr_to ^Node)) (= ($as_primitive_field Node.parent) Node.parent))
    (=> ($is_primitive ($ptr_to ^Node)) (= ($as_primitive_field Node.right) Node.right))
    (=> ($is_primitive ($ptr_to ^Node)) (= ($as_primitive_field Tree.root) Tree.root))
    (=> ($is_primitive ^^bool) (= ($as_primitive_field Node.red) Node.red))
    (=> ($is_primitive ^^i4) (= ($as_primitive_field Node.key) Node.key))
    (=> ($is_primitive ^^i4) (= ($as_primitive_field Node.value) Node.value))
    (=> (= $arch_ptr_size 4) (= $arch_ptr_type ^^u4))
    (=> (= $arch_ptr_size 8) (= $arch_ptr_type ^^u8))
    (=> (= 0 0) ($has_field_at0 ^Node Node.red))
    (=> (= 0 0) ($has_field_at0 ^Tree Tree.root))
    (=> (= 16 0) ($has_field_at0 ^Node Node.left))
    (=> (= 24 0) ($has_field_at0 ^Node Node.right))
    (=> (= 32 0) ($has_field_at0 ^Node Node.parent))
    (=> (= 4 0) ($has_field_at0 ^Node Node.key))
    (=> (= 8 0) ($has_field_at0 ^Node Node.value))
    (=> (>= $arch_ptr_size 8) (forall( (|k_$3| Int))(!(=> (>= |k_$3| 0) (= ($addr ($i8_to_ptr |k_$3|)) |k_$3|))  :pattern ( ($i8_to_ptr |k_$3|)))))
    (=> (>= $arch_ptr_size 8) (forall( (|k| Int))(!(= ($addr ($u8_to_ptr |k|)) |k|)  :pattern ( ($u8_to_ptr |k|)))))
    (=> (not ($is_primitive ($map_t ($ptr_to ^Node) ($map_t ($ptr_to ^Node) ^^bool)))) (= ($as_composite_field Tree.R) Tree.R))
    (=> (not ($is_primitive ($map_t ^^i4 ^^i4))) (= ($as_composite_field Tree.abs) Tree.abs))
    (=> (not ($is_primitive ($ptr_to ^Node))) (= ($as_composite_field Node.left) Node.left))
    (=> (not ($is_primitive ($ptr_to ^Node))) (= ($as_composite_field Node.parent) Node.parent))
    (=> (not ($is_primitive ($ptr_to ^Node))) (= ($as_composite_field Node.right) Node.right))
    (=> (not ($is_primitive ($ptr_to ^Node))) (= ($as_composite_field Tree.root) Tree.root))
    (=> (not ($is_primitive ^^bool)) (= ($as_composite_field Node.red) Node.red))
    (=> (not ($is_primitive ^^i4)) (= ($as_composite_field Node.key) Node.key))
    (=> (not ($is_primitive ^^i4)) (= ($as_composite_field Node.value) Node.value))
    (=> (not false) ($is_sequential_field Node.key))
    (=> (not false) ($is_sequential_field Node.left))
    (=> (not false) ($is_sequential_field Node.parent))
    (=> (not false) ($is_sequential_field Node.red))
    (=> (not false) ($is_sequential_field Node.right))
    (=> (not false) ($is_sequential_field Node.value))
    (=> (not false) ($is_sequential_field Tree.abs))
    (=> (not false) ($is_sequential_field Tree.R))
    (=> (not false) ($is_sequential_field Tree.root))
    (=> false ($is_volatile_field Node.key))
    (=> false ($is_volatile_field Node.left))
    (=> false ($is_volatile_field Node.parent))
    (=> false ($is_volatile_field Node.red))
    (=> false ($is_volatile_field Node.right))
    (=> false ($is_volatile_field Node.value))
    (=> false ($is_volatile_field Tree.abs))
    (=> false ($is_volatile_field Tree.R))
    (=> false ($is_volatile_field Tree.root))
    (forall( (|#a_$0| $@Map@@$ptr@To@Bool@@) (|#b_$0| $@Map@@$ptr@To@Bool@@))(!(=> ($set_eq |#a_$0| |#b_$0|) (= |#a_$0| |#b_$0|))  :pattern ( ($set_eq |#a_$0| |#b_$0|))))
    (forall( (|#a| $@Map@@$ptr@To@Bool@@) (|#b| $@Map@@$ptr@To@Bool@@))(!(=> (forall( (|#o_$0| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ |#a| |#o_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ |#b| |#o_$0|))  :pattern ( ($dont_instantiate |#o_$0|)))) ($set_eq |#a| |#b|))  :pattern ( ($set_eq |#a| |#b|))))
    (forall( (|#n_$0| $ctype))(!(and (= ($type_project_0 ($spec_ptr_to |#n_$0|)) |#n_$0|) (= ($type_branch ($spec_ptr_to |#n_$0|)) $ctype_spec_ptr))  :pattern ( ($spec_ptr_to |#n_$0|))))
    (forall( (|#n_$1| $ctype))(!(= ($sizeof ($ptr_to |#n_$1|)) $arch_ptr_size)  :pattern ( ($ptr_to |#n_$1|))))
    (forall( (|#n_$2| $ctype))(!(= ($sizeof ($ptr_to |#n_$2|)) $arch_ptr_size)  :pattern ( ($spec_ptr_to |#n_$2|))))
    (forall( (|#n_$3| $ctype))(!($is_primitive ($ptr_to |#n_$3|))  :pattern ( ($ptr_to |#n_$3|))))
    (forall( (|#n_$4| $ctype))(!($is_primitive ($spec_ptr_to |#n_$4|))  :pattern ( ($spec_ptr_to |#n_$4|))))
    (forall( (|#n_$5| $ctype))(!(=> ($is_primitive |#n_$5|) (not ($is_claimable |#n_$5|)))  :pattern ( ($is_primitive |#n_$5|))))
    (forall( (|#n| $ctype))(!(and (= ($type_project_0 ($ptr_to |#n|)) |#n|) (= ($type_branch ($ptr_to |#n|)) $ctype_ptr))  :pattern ( ($ptr_to |#n|))))
    (forall( (|#o_$1| $ptr))(!(MapRead$$@Map@@$ptr@To@Bool@@$ $set_universe |#o_$1|)  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ $set_universe |#o_$1|))))
    (forall( (|#o| $ptr) (|#f| $ptr) (|S_$14| $state))(= (and ($is_primitive ($field_type ($field |#f|))) (= ($emb0 |#f|) |#o|)) (and ($is_primitive ($field_type ($field |#f|))) (= ($emb0 |#f|) |#o|))))
    (forall( (|#p_$14| $ptr) (|^Node_$0| $ctype) (|P#t_$1| $ptr) (|^Tree_$1| $ctype) (|P#x_$0| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@21 |^Node_$0| |P#t_$1| |^Tree_$1| |P#x_$0|) |#p_$14|) (or (= |#p_$14| ($phys_ptr_cast |P#t_$1| |^Tree_$1|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($span ($phys_ptr_cast |P#x_$0| |^Node_$0|)) |#p_$14|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@21 |^Node_$0| |P#t_$1| |^Tree_$1| |P#x_$0|) |#p_$14|))))
    (forall( (|#p_$15| $ptr) (|Tree.R_$0| $field) (|$s_$3| $state) (|P#t_$2| $ptr) (|^Tree_$2| $ctype) (|P#x_$1| $ptr) (|^Node_$1| $ctype))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@22 |Tree.R_$0| |$s_$3| |P#t_$2| |^Tree_$2| |P#x_$1| |^Node_$1|) |#p_$15|) (or (MapRead$$@Map@@$ptr@To@Bool@@$ ($set_difference ($owns |$s_$3| ($phys_ptr_cast |P#t_$2| |^Tree_$2|)) ($set_singleton ($phys_ptr_cast |P#x_$1| |^Node_$1|))) |#p_$15|) (= |#p_$15| ($dot ($phys_ptr_cast |P#t_$2| |^Tree_$2|) |Tree.R_$0|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@22 |Tree.R_$0| |$s_$3| |P#t_$2| |^Tree_$2| |P#x_$1| |^Node_$1|) |#p_$15|))))
    (forall( (|#p_$7| $ptr))(= ($full_extent |#p_$7|) ($full_extent |#p_$7|)))
    (forall( (|#p| $ptr) (|#l| $ptr) (|S_$3| $state))(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$3| |#l|) |#p|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$3| |#l|) |#p|)))
    (forall( (|#r_$0| $ctype) (|#d_$0| $ctype))(!($is_primitive ($map_t |#r_$0| |#d_$0|))  :pattern ( ($map_t |#r_$0| |#d_$0|))))
    (forall( (|#r| $ctype) (|#d| $ctype))(!(and (and (= ($map_domain ($map_t |#r| |#d|)) |#d|) (= ($map_range ($map_t |#r| |#d|)) |#r|)) (= ($type_branch ($map_t |#r| |#d|)) $ctype_map))  :pattern ( ($map_t |#r| |#d|))))
    (forall( (|#s1_$3| $state) (|#s2_$1| $state) (|#p_$10| $ptr))(!(= ($inv2 |#s1_$3| |#s2_$1| |#p_$10| ^Node) ($set_eq ($owns |#s2_$1| |#p_$10|) $set_empty))  :pattern ( ($inv2 |#s1_$3| |#s2_$1| |#p_$10| ^Node))))
    (forall( (|#s1_$4| $state) (|#s2_$2| $state) (|#p_$11| $ptr))(!(= ($inv2 |#s1_$4| |#s2_$2| |#p_$11| ^Tree) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast $null ^Node))) (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)))) (=> (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node))) ^Node))))))) (forall( (|Q#m$1^82.29#dt1| $ptr))(!(not ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast $null ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1| ^Node)))))) (forall( (|Q#n$1^82.29#dt1| $ptr) (|Q#m$1^82.29#dt1_$0| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$0| ^Node)) (< (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$0| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$0| ^Node)))))) (forall( (|Q#n$1^82.29#dt1_$0| $ptr) (|Q#m$1^82.29#dt1_$1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$0| ^Node)) (=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$0| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$1| ^Node)) (> (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.key) ($phys_ptr_cast |Q#m$1^82.29#dt1_$1| ^Node)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.key) ($phys_ptr_cast |Q#n$1^82.29#dt1_$0| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$0| ^Node)) ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$1| ^Node)))))) (forall( (|Q#m$1^82.29#dt1_$2| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$2| ^Node)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |#s2_$2| |#p_$11|) ($phys_ptr_cast |Q#m$1^82.29#dt1_$2| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$2| ^Node))) :pattern ( (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$2| ^Node))) :pattern ( (sk_hack (F@mark2 ($phys_ptr_cast |Q#m$1^82.29#dt1_$2| ^Node))))))) (forall( (|Q#n$1^82.29#dt1_$1| $ptr) (|Q#m$1^82.29#dt1_$3| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$1| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$3| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$3| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$1| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$3| ^Node)))))) (forall( (|Q#n$1^82.29#dt1_$2| $ptr) (|Q#m$1^82.29#dt1_$4| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$2| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$4| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$2| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$2| ^Node)) ($phys_ptr_cast |Q#m$1^82.29#dt1_$4| ^Node)))))) (forall( (|Q#n$1^82.29#dt1_$3| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$3| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$3| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$3| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$3| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$3| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$3| ^Node)) ^Node))))) (forall( (|Q#n$1^82.29#dt1_$4| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$4| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$4| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$4| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast |Q#n$1^82.29#dt1_$4| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$4| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$4| ^Node)) ^Node))))) (forall( (|Q#n$1^82.29#dt1_$5| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$5| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$5| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$5| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$5| ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$5| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$5| ^Node)) ^Node))))) (forall( (|Q#n$1^82.29#dt1_$6| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$6| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$6| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$6| ^Node)) ^Node))) ^Node))))))) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast |Q#n$1^82.29#dt1_$6| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$6| ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$6| ^Node)) ^Node))))) (forall( (|Q#n$1^82.29#dt1_$7| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$7| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$7| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$7| ^Node)) ^Node))) ^Node))))))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$7| ^Node))) ^Node)))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$7| ^Node)) ^Node))))) (forall( (|Q#n$1^82.29#dt1_$8| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node)) (not (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node)) ^Node))) ^Node))))))) (or (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node))) ^Node))) ^Node) ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^82.29#dt1_$8| ^Node)) ^Node))))) (forall( (|Q#n$1^82.29#dt1_$9| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$9| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$9| ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$9| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^82.29#dt1_$9| ^Node)))))) (forall( (|Q#m$1^83.29#dt1| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1| ^Node)) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.abs) |#p_$11|)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1| ^Node))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.value) ($phys_ptr_cast |Q#m$1^83.29#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.abs) |#p_$11|)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1| ^Node))))))) (forall( (|Q#k$1^83.29#tc2| Int))(!(=> (and (<= $min.i4 |Q#k$1^83.29#tc2|) (<= |Q#k$1^83.29#tc2| $max.i4)) (=> (forall( (|Q#m$1^83.29#dt1_$0| $ptr))(!(=> ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$0| ^Node)) (not (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.key) ($phys_ptr_cast |Q#m$1^83.29#dt1_$0| ^Node)) |Q#k$1^83.29#tc2|)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#m$1^83.29#dt1_$0| ^Node))))) (= ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.abs) |#p_$11|)) |Q#k$1^83.29#tc2|) 0)))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 ($int_to_map_t..^^i4.^^i4 (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.abs) |#p_$11|)) |Q#k$1^83.29#tc2|))))) (forall( (|Q#n$1^84.29#dt1| $ptr))(!(=> (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1| ^Node)) (= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1| ^Node)) ^Node))) ^Node) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.parent) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1| ^Node)) ^Node))) ^Node)))))) (or (= ($phys_ptr_cast |Q#n$1^84.29#dt1| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#n$1^84.29#dt1| ^Node) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node))))  :weight  10 :pattern ( ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1| ^Node)) ^Node))))) (forall( (|Q#n$1^84.29#dt1_$0| $ptr) (|Q#m$1^84.29#dt1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$0| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1| ^Node)) (and ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.root) |#p_$11|)) ^Node)) ($phys_ptr_cast |Q#n$1^84.29#dt1_$0| ^Node)) (or (or (or (and (= ($phys_ptr_cast |Q#n$1^84.29#dt1_$0| ^Node) ($phys_ptr_cast $null ^Node)) (= ($phys_ptr_cast |Q#m$1^84.29#dt1| ^Node) ($phys_ptr_cast $null ^Node))) (= ($phys_ptr_cast |Q#m$1^84.29#dt1| ^Node) ($phys_ptr_cast |Q#n$1^84.29#dt1_$0| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.left) ($phys_ptr_cast |Q#n$1^84.29#dt1_$0| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Node.right) ($phys_ptr_cast |Q#n$1^84.29#dt1_$0| ^Node))) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1| ^Node)))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$2|) Tree.R) |#p_$11|)) ($phys_ptr_cast (F@mark ($phys_ptr_cast |Q#n$1^84.29#dt1_$0| ^Node)) ^Node)) ($phys_ptr_cast |Q#m$1^84.29#dt1| ^Node)))))))  :pattern ( ($inv2 |#s1_$4| |#s2_$2| |#p_$11| ^Tree))))
    (forall( (|#t_$0| $ctype) (|#p_$1| $ptr) (|S_$12| $state))(= ($in_range_phys_ptr |#p_$1|) ($in_range_phys_ptr |#p_$1|)))
    (forall( (|#t_$1| $ctype) (|#p_$2| $ptr) (|S_$13| $state))(= ($in_range_spec_ptr |#p_$2|) ($in_range_spec_ptr |#p_$2|)))
    (forall( (|#t_$2| $ctype) (|#p_$3| $ptr) (|S_$16| $state))(= (and ($is |#p_$3| |#t_$2|) ($thread_local |S_$16| |#p_$3|)) (and ($is |#p_$3| |#t_$2|) ($thread_local |S_$16| |#p_$3|))))
    (forall( (|#t| $ctype) (|#p_$0| $ptr) (|S_$4| $state))(= (and (and (and (and ($is |#p_$0| |#t|) ($is_proper |#p_$0|)) (= ($owner |S_$4| |#p_$0|) $me)) ($closed |S_$4| |#p_$0|)) (not ($is_primitive |#t|))) (and (and (and (and ($is |#p_$0| |#t|) ($is_proper |#p_$0|)) (= ($owner |S_$4| |#p_$0|) $me)) ($closed |S_$4| |#p_$0|)) (not ($is_primitive |#t|)))))
    (forall( (|#x_$0| $map_t..$ptr_to..^Node.^^bool))(= |#x_$0| ($int_to_map_t..ptr_to..^Node.^^bool ($map_t..ptr_to..^Node.^^bool_to_int |#x_$0|))))
    (forall( (|#x_$1| $map_t..^^i4.^^i4))(= |#x_$1| ($int_to_map_t..^^i4.^^i4 ($map_t..^^i4.^^i4_to_int |#x_$1|))))
    (forall( (|#x_$2| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool))(= |#x_$2| ($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool ($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int |#x_$2|))))
    (forall( (|a_$0| $ptr) (|al| Int) (|b_$1| $ptr) (|bl| Int))(!(=> (forall( (|i_$9| Int) (|j_$0| Int))(!(=> (and (and (and (<= 0 |i_$9|) (< |i_$9| |al|)) (<= 0 |j_$0|)) (< |j_$0| |bl|)) (not (= ($idx |a_$0| |i_$9|) ($idx |b_$1| |j_$0|))))  :pattern ( ($dont_instantiate_int |i_$9|) ($dont_instantiate_int |j_$0|)))) ($arrays_disjoint |a_$0| |al| |b_$1| |bl|))  :pattern ( ($arrays_disjoint |a_$0| |al| |b_$1| |bl|))))
    (forall( (|A_$0| $state) (|a_$10| $ptr) (|B_$0| $state) (|b_$6| $ptr))(!(= ($strong_shallow_struct_eq |A_$0| |a_$10| |B_$0| |b_$6|) (forall( (|f_$53| $field))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |A_$0|) |f_$53|) |a_$10|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |B_$0|) |f_$53|) |b_$6|))))  :pattern ( ($strong_shallow_struct_eq |A_$0| |a_$10| |B_$0| |b_$6|))))
    (forall( (|A_$1| $@Map@@$ptr@To@Bool@@) (|B_$1| $@Map@@$ptr@To@Bool@@))(!(= ($set_union |A_$1| |B_$1|) (lambda@17 |A_$1| |B_$1|))  :pattern ( ($set_union |A_$1| |B_$1|))))
    (forall( (|a_$1| $ptr) (|al_$0| Int) (|b_$2| $ptr) (|bl_$0| Int))(!(=> ($set_disjoint ($array_range_no_state |a_$1| ($field_type ($field |a_$1|)) |al_$0|) ($array_range_no_state |b_$2| ($field_type ($field |b_$2|)) |bl_$0|)) ($arrays_disjoint |a_$1| |al_$0| |b_$2| |bl_$0|))  :pattern ( ($set_disjoint ($array_range_no_state |a_$1| ($field_type ($field |a_$1|)) |al_$0|) ($array_range_no_state |b_$2| ($field_type ($field |b_$2|)) |bl_$0|)))))
    (forall( (|A_$2| $@Map@@$ptr@To@Bool@@) (|B_$2| $@Map@@$ptr@To@Bool@@))(!(= ($set_difference |A_$2| |B_$2|) (lambda@18 |A_$2| |B_$2|))  :pattern ( ($set_difference |A_$2| |B_$2|))))
    (forall( (|a_$2| $ptr) (|al_$1| Int) (|b_$3| $ptr) (|bl_$1| Int) (|i_$10| Int))(!(=> (and (and ($arrays_disjoint |a_$2| |al_$1| |b_$3| |bl_$1|) (<= 0 |i_$10|)) (< |i_$10| |al_$1|)) (= ($arrays_disjoint_id |a_$2| |al_$1| |b_$3| |bl_$1| ($dot ($base |a_$2|) ($field_plus ($field |a_$2|) |i_$10|))) 0))  :pattern ( ($arrays_disjoint |a_$2| |al_$1| |b_$3| |bl_$1|) ($dot ($base |a_$2|) ($field_plus ($field |a_$2|) |i_$10|)))))
    (forall( (|a_$3| $ptr) (|al_$2| Int) (|b_$4| $ptr) (|bl_$2| Int) (|i_$11| Int))(!(=> (and (and ($arrays_disjoint |a_$3| |al_$2| |b_$4| |bl_$2|) (<= 0 |i_$11|)) (< |i_$11| |bl_$2|)) (= ($arrays_disjoint_id |a_$3| |al_$2| |b_$4| |bl_$2| ($dot ($base |b_$4|) ($field_plus ($field |b_$4|) |i_$11|))) 1))  :pattern ( ($arrays_disjoint |a_$3| |al_$2| |b_$4| |bl_$2|) ($dot ($base |b_$4|) ($field_plus ($field |b_$4|) |i_$11|)))))
    (forall( (|A| $state) (|a_$9| $ptr) (|B| $state) (|b_$5| $ptr))(!(= ($strong_struct_eq |A| |a_$9| |B| |b_$5|) (and ($strong_shallow_struct_eq |A| |a_$9| |B| |b_$5|) (forall( (|f_$52| $field))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |A| |a_$9| ($field_type ($field |a_$9|))) ($dot |a_$9| |f_$52|)) ($strong_struct_eq |A| ($dot |a_$9| |f_$52|) |B| ($dot |b_$5| |f_$52|)))  :pattern ( ($dot |a_$9| ($as_composite_field |f_$52|)))))))  :pattern ( ($strong_struct_eq |A| |a_$9| |B| |b_$5|))))
    (forall( (|a| Int))(= ($in_range_t $arch_ptr_type |a|) ($in_range_t $arch_ptr_type |a|)))
    (forall( (|bits_$0| Int) (|v_$4| Int))(!(and ($in_range_sbits |bits_$0| ($unchecked_sbits |bits_$0| |v_$4|)) (=> ($in_range_sbits |bits_$0| |v_$4|) (= ($unchecked_sbits |bits_$0| |v_$4|) |v_$4|)))  :pattern ( ($unchecked_sbits |bits_$0| |v_$4|))))
    (forall( (|bits_$1| Int) (|v_$5| Int))(!(= ($in_range_sbits |bits_$1| |v_$5|) (and (<= (- 0 ($_pow2 (- |bits_$1| 1))) |v_$5|) (<= |v_$5| (- ($_pow2 (- |bits_$1| 1)) 1))))  :pattern ( ($in_range_sbits |bits_$1| |v_$5|))))
    (forall( (|bits_$2| Int) (|v_$6| Int))(!(and ($in_range_ubits |bits_$2| ($unchecked_ubits |bits_$2| |v_$6|)) (=> ($in_range_ubits |bits_$2| |v_$6|) (= ($unchecked_ubits |bits_$2| |v_$6|) |v_$6|)))  :pattern ( ($unchecked_ubits |bits_$2| |v_$6|))))
    (forall( (|bits| Int) (|v_$3| Int))(!(= ($in_range_ubits |bits| |v_$3|) (and (<= 0 |v_$3|) (<= |v_$3| (- ($_pow2 |bits|) 1))))  :pattern ( ($in_range_ubits |bits| |v_$3|))))
    (forall( (|c_$2| $ptr) (|S_$39| $state) (|S0_$8| $state))(= (and (and (and (and (and (= ($f_closed |S_$39|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$8|) |c_$2| false)) (= ($f_timestamp |S_$39|) ($f_timestamp |S0_$8|))) (= ($f_owner |S_$39|) ($f_owner |S0_$8|))) (= ($heap |S_$39|) ($heap |S0_$8|))) ($good_state |S_$39|)) (and (< ($current_timestamp |S0_$8|) ($current_timestamp |S_$39|)) ($call_transition |S0_$8| |S_$39|))) (and (and (and (and (and (= ($f_closed |S_$39|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$8|) |c_$2| false)) (= ($f_timestamp |S_$39|) ($f_timestamp |S0_$8|))) (= ($f_owner |S_$39|) ($f_owner |S0_$8|))) (= ($heap |S_$39|) ($heap |S0_$8|))) ($good_state |S_$39|)) (and (< ($current_timestamp |S0_$8|) ($current_timestamp |S_$39|)) ($call_transition |S0_$8| |S_$39|)))))
    (forall( (|c| $ptr) (|t_$9| $ctype) (|p_$3| $ptr))(= (and (and (= ($field_type ($field |c|)) |t_$9|) (= (= |c| ($phys_ptr_cast $null ($field_type ($field |c|)))) (= |p_$3| ($phys_ptr_cast $null ($field_type ($field |p_$3|)))))) (= ($field |c|) ($as_field_with_type ($field |c|) |t_$9|))) (and (and (= ($field_type ($field |c|)) |t_$9|) (= (= |c| ($phys_ptr_cast $null ($field_type ($field |c|)))) (= |p_$3| ($phys_ptr_cast $null ($field_type ($field |p_$3|)))))) (= ($field |c|) ($as_field_with_type ($field |c|) |t_$9|)))))
    (forall( (|c1| $ptr) (|c2| $ptr))(!(=> (and (and ($is |c1| ^^claim) ($is |c2| ^^claim)) (forall( (|S_$88| $state))(=> ($valid_claim |S_$88| |c1|) ($closed |S_$88| |c2|)))) ($claims_claim |c1| |c2|))  :pattern ( ($claims_claim |c1| |c2|))))
    (forall( (|e_$0| $ptr) (|S_$47| $@Map@@$ptr@To@Bool@@))(= ($set_difference |S_$47| ($set_singleton |e_$0|)) ($set_difference |S_$47| ($set_singleton |e_$0|))))
    (forall( (|e| $ptr) (|S_$46| $@Map@@$ptr@To@Bool@@))(= ($set_union |S_$46| ($set_singleton |e|)) ($set_union |S_$46| ($set_singleton |e|))))
    (forall( (|E1| $@Map@@$ptr@To@Bool@@) (|E0| $@Map@@$ptr@To@Bool@@) (|S1_$6| $state) (|S0_$9| $state))(= (and (and (and (and (and (forall( (|p_$60_$1| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$60_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$60_$1|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$9|) |p_$60_$1|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60_$1|)))) (forall( (|p_$61_$1| $ptr) (|f_$26_$1| $field))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$61_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$61_$1|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$9|) |f_$26_$1|) |p_$61_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26_$1|) |p_$61_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26_$1|) |p_$61_$1|))))) (forall( (|p_$62_$1| $ptr))(!(and (or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$62_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$62_$1|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62_$1|))) (>= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62_$1|))))) (= ($f_closed |S0_$9|) ($f_closed |S1_$6|))) (forall( (|p_$63_$1| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$63_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$63_$1|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$9|) |p_$63_$1|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63_$1|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63_$1|))))) (and (<= ($current_timestamp |S0_$9|) ($current_timestamp |S1_$6|)) ($call_transition |S0_$9| |S1_$6|))) (and (and (and (and (and (forall( (|p_$60| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$60|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$60|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$9|) |p_$60|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$6|) |p_$60|)))) (forall( (|p_$61| $ptr) (|f_$26| $field))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$61|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$61|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$9|) |f_$26|) |p_$61|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26|) |p_$61|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$6|) |f_$26|) |p_$61|))))) (forall( (|p_$62| $ptr))(!(and (or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$62|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$62|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62|))) (>= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$9|) |p_$62|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$6|) |p_$62|))))) (= ($f_closed |S0_$9|) ($f_closed |S1_$6|))) (forall( (|p_$63| $ptr))(!(or (or (MapRead$$@Map@@$ptr@To@Bool@@$ |E0| |p_$63|) (MapRead$$@Map@@$ptr@To@Bool@@$ |E1| |p_$63|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$9|) |p_$63|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$6|) |p_$63|))))) (and (<= ($current_timestamp |S0_$9|) ($current_timestamp |S1_$6|)) ($call_transition |S0_$9| |S1_$6|)))))
    (forall( (|f_$13| $field) (|p_$17| $ptr) (|s_$2| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$2|) |f_$13|) |p_$17|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$2|) |f_$13|) |p_$17|)))
    (forall( (|f_$14| $field) (|p_$18| $ptr) (|s_$3| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$3|) |f_$14|) |p_$18|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$3|) |f_$14|) |p_$18|)))
    (forall( (|f_$18| $field) (|p_$37| $ptr) (|S_$23| $state) (|S0| $state))(= (= ($heap |S_$23|) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18|) |p_$37| (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$23|) |f_$18|) |p_$37|)))) (= ($heap |S_$23|) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0|) |f_$18|) |p_$37| (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$23|) |f_$18|) |p_$37|))))))
    (forall( (|f_$23| $pure_function))(= (< ($frame_level |f_$23|) $current_frame_level) (< ($frame_level |f_$23|) $current_frame_level)))
    (forall( (|f_$25| $field) (|p_$59| $ptr) (|S_$43| $state))(= ($fetch_from_vv ($read_vol_version |S_$43| |p_$59|) |p_$59| |f_$25|) ($fetch_from_vv ($read_vol_version |S_$43| |p_$59|) |p_$59| |f_$25|)))
    (forall( (|f_$27| $field))(= (and ($is_union_field |f_$27|) (= ($first_union_field ($field_parent_type |f_$27|)) |f_$27|)) (and ($is_union_field |f_$27|) (= ($first_union_field ($field_parent_type |f_$27|)) |f_$27|))))
    (forall( (|f_$28| $field) (|p_$65| $ptr) (|s_$8| $state))(= (not (= ($owner |s_$8| ($dot |p_$65| |f_$28|)) $inactive_union_owner)) (not (= ($owner |s_$8| ($dot |p_$65| |f_$28|)) $inactive_union_owner))))
    (forall( (|f_$33| $field))(!(not ($is_primitive ($field_parent_type |f_$33|)))  :pattern ( ($field_parent_type |f_$33|))))
    (forall( (|f_$34| $field))(!(= |f_$34| ($field_arr_ctor ($field_arr_root |f_$34|) ($field_arr_index |f_$34|)))  :pattern ( ($field_arr_index |f_$34|))))
    (forall( (|f_$35| $field) (|i_$1| Int))(!(and (= ($field_arr_root ($field_arr_ctor |f_$35| |i_$1|)) |f_$35|) (= ($field_arr_index ($field_arr_ctor |f_$35| |i_$1|)) |i_$1|))  :pattern ( ($field_arr_ctor |f_$35| |i_$1|))))
    (forall( (|f_$36| $field) (|i_$7| Int))(!(and (and (and (and (and (and (and (and (and (and (= ($field_kind ($field_plus |f_$36| |i_$7|)) ($field_kind |f_$36|)) (= ($field_arr_root ($field_plus |f_$36| |i_$7|)) ($field_arr_root |f_$36|))) (= ($field_arr_index ($field_plus |f_$36| |i_$7|)) (+ ($field_arr_index |f_$36|) |i_$7|))) (= ($field_arr_size ($field_plus |f_$36| |i_$7|)) ($field_arr_size |f_$36|))) (= ($field_type ($field_plus |f_$36| |i_$7|)) ($field_type |f_$36|))) (= ($as_field_with_type ($field_plus |f_$36| |i_$7|) ($field_type |f_$36|)) ($field_plus |f_$36| |i_$7|))) (= ($is_sequential_field ($field_plus |f_$36| |i_$7|)) ($is_sequential_field |f_$36|))) (= ($is_volatile_field ($field_plus |f_$36| |i_$7|)) ($is_volatile_field |f_$36|))) (= ($is_phys_field ($field_plus |f_$36| |i_$7|)) ($is_phys_field |f_$36|))) (=> (and (<= 0 (+ ($field_arr_index |f_$36|) |i_$7|)) (<= (+ ($field_arr_index |f_$36|) |i_$7|) (- ($field_arr_size |f_$36|) 1))) (= ($field_parent_type ($field_plus |f_$36| |i_$7|)) ($field_parent_type ($field_arr_root |f_$36|))))) true)  :pattern ( ($field_plus |f_$36| |i_$7|))))
    (forall( (|f_$54| $field) (|t_$51| $ctype))(!(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap ($vs_state $struct_zero)) |f_$54|) ($phys_ptr_cast ($vs_base_ref $struct_zero) |t_$51|)) 0)  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap ($vs_state $struct_zero)) |f_$54|) ($phys_ptr_cast ($vs_base_ref $struct_zero) |t_$51|)))))
    (forall( (|f| $field))(= (= ($field_kind |f|) $fk_base) (= ($field_kind |f|) $fk_base)))
    (forall( (|fk_$0| $field_kind) (|tp_$5| $ctype) (|f_$6| $field) (|partp_$5| $ctype))(= (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$6|) |partp_$5|) (= ($field_type |f_$6|) |tp_$5|)) (= ($as_field_with_type |f_$6| |tp_$5|) |f_$6|)) (=> ($is_primitive |tp_$5|) (= ($as_primitive_field |f_$6|) |f_$6|))) (=> (not ($is_primitive |tp_$5|)) (= ($as_composite_field |f_$6|) |f_$6|))) (= ($field_arr_root |f_$6|) |f_$6|)) true) (= ($field_kind |f_$6|) |fk_$0|)) true) ($is_ghost_field |f_$6|)) (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$6|) |partp_$5|) (= ($field_type |f_$6|) |tp_$5|)) (= ($as_field_with_type |f_$6| |tp_$5|) |f_$6|)) (=> ($is_primitive |tp_$5|) (= ($as_primitive_field |f_$6|) |f_$6|))) (=> (not ($is_primitive |tp_$5|)) (= ($as_composite_field |f_$6|) |f_$6|))) (= ($field_arr_root |f_$6|) |f_$6|)) true) (= ($field_kind |f_$6|) |fk_$0|)) true) ($is_ghost_field |f_$6|))))
    (forall( (|fk| $field_kind) (|tp_$4| $ctype) (|f_$5| $field) (|partp_$4| $ctype))(= (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$5|) |partp_$4|) (= ($field_type |f_$5|) |tp_$4|)) (= ($as_field_with_type |f_$5| |tp_$4|) |f_$5|)) (=> ($is_primitive |tp_$4|) (= ($as_primitive_field |f_$5|) |f_$5|))) (=> (not ($is_primitive |tp_$4|)) (= ($as_composite_field |f_$5|) |f_$5|))) (= ($field_arr_root |f_$5|) |f_$5|)) true) (= ($field_kind |f_$5|) |fk|)) true) (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$5|) |partp_$4|) (= ($field_type |f_$5|) |tp_$4|)) (= ($as_field_with_type |f_$5| |tp_$4|) |f_$5|)) (=> ($is_primitive |tp_$4|) (= ($as_primitive_field |f_$5|) |f_$5|))) (=> (not ($is_primitive |tp_$4|)) (= ($as_composite_field |f_$5|) |f_$5|))) (= ($field_arr_root |f_$5|) |f_$5|)) true) (= ($field_kind |f_$5|) |fk|)) true)))
    (forall( (|from_$0| Int) (|to_$0| Int) (|xs_$0| Int))(!(=> (and (and (<= 0 |from_$0|) (< |from_$0| |to_$0|)) (<= |to_$0| |xs_$0|)) (= ($bv_update 0 |xs_$0| |from_$0| |to_$0| 0) 0))  :pattern ( ($bv_update 0 |xs_$0| |from_$0| |to_$0| 0))))
    (forall( (|from_$1| Int) (|to_$1| Int) (|val_$1| Int) (|x_$24| Int) (|xs_$1| Int))(!(=> (and (and (<= 0 |from_$1|) (< |from_$1| |to_$1|)) (<= |to_$1| |xs_$1|)) (=> (and (<= (- 0 ($_pow2 (- (- |to_$1| |from_$1|) 1))) |val_$1|) (< |val_$1| ($_pow2 (- (- |to_$1| |from_$1|) 1)))) (= ($bv_extract_signed ($bv_update |x_$24| |xs_$1| |from_$1| |to_$1| |val_$1|) |xs_$1| |from_$1| |to_$1|) |val_$1|)))  :pattern ( ($bv_extract_signed ($bv_update |x_$24| |xs_$1| |from_$1| |to_$1| |val_$1|) |xs_$1| |from_$1| |to_$1|))))
    (forall( (|from_$10| Int) (|to_$10| Int) (|xs_$8| Int))(!(=> (and (and (<= 0 |from_$10|) (< |from_$10| |to_$10|)) (<= |to_$10| |xs_$8|)) (= ($bv_extract_unsigned 0 |xs_$8| |from_$10| |to_$10|) 0))  :pattern ( ($bv_extract_unsigned 0 |xs_$8| |from_$10| |to_$10|))))
    (forall( (|from_$11| Int) (|to_$11| Int) (|val_$5| Int) (|xs_$9| Int))(!(=> (and (and (and (<= 0 |from_$11|) (< |from_$11| |to_$11|)) (<= |to_$11| |xs_$9|)) (<= 0 |val_$5|)) (= ($bv_extract_unsigned |val_$5| |xs_$9| |from_$11| |to_$11|) (mod (div |val_$5| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|)))))  :pattern ( ($bv_extract_unsigned |val_$5| |xs_$9| |from_$11| |to_$11|))))
    (forall( (|from_$12| Int) (|to_$12| Int) (|val_$6| Int) (|xs_$10| Int))(!(=> (and (and (and (and (<= 0 |from_$12|) (< |from_$12| |to_$12|)) (<= |to_$12| |xs_$10|)) (<= 0 |val_$6|)) (< (mod (div |val_$6| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))) ($_pow2 (- (- |to_$12| |from_$12|) 1)))) (= ($bv_extract_signed |val_$6| |xs_$10| |from_$12| |to_$12|) (mod (div |val_$6| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|)))))  :pattern ( ($bv_extract_signed |val_$6| |xs_$10| |from_$12| |to_$12|))))
    (forall( (|from_$13| Int) (|to_$13| Int) (|val_$7| Int) (|xs_$11| Int))(!(=> (and (and (and (and (<= 0 |from_$13|) (< |from_$13| |to_$13|)) (<= |to_$13| |xs_$11|)) (<= 0 |val_$7|)) (>= (mod (div |val_$7| ($_pow2 |from_$13|)) ($_pow2 (- |to_$13| |from_$13|))) ($_pow2 (- (- |to_$13| |from_$13|) 1)))) (= ($bv_extract_signed |val_$7| |xs_$11| |from_$13| |to_$13|) (- ($_pow2 (- (- |to_$13| |from_$13|) 1)) (mod (div |val_$7| ($_pow2 |from_$13|)) ($_pow2 (- |to_$13| |from_$13|))))))  :pattern ( ($bv_extract_signed |val_$7| |xs_$11| |from_$13| |to_$13|))))
    (forall( (|from_$2| Int) (|to_$2| Int) (|val_$2| Int) (|x_$25| Int) (|xs_$2| Int))(!(=> (and (and (<= 0 |from_$2|) (< |from_$2| |to_$2|)) (<= |to_$2| |xs_$2|)) (=> (and (<= 0 |val_$2|) (< |val_$2| ($_pow2 (- |to_$2| |from_$2|)))) (= ($bv_extract_unsigned ($bv_update |x_$25| |xs_$2| |from_$2| |to_$2| |val_$2|) |xs_$2| |from_$2| |to_$2|) |val_$2|)))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$25| |xs_$2| |from_$2| |to_$2| |val_$2|) |xs_$2| |from_$2| |to_$2|))))
    (forall( (|from_$3| Int) (|to_$3| Int) (|x_$26| Int) (|xs_$3| Int))(!(=> (and (and (<= 0 |from_$3|) (< |from_$3| |to_$3|)) (<= |to_$3| |xs_$3|)) (and (<= (- 0 ($_pow2 (- (- |to_$3| |from_$3|) 1))) ($bv_extract_signed |x_$26| |xs_$3| |from_$3| |to_$3|)) (<= ($bv_extract_signed |x_$26| |xs_$3| |from_$3| |to_$3|) (- ($_pow2 (- (- |to_$3| |from_$3|) 1)) 1))))  :pattern ( ($bv_extract_signed |x_$26| |xs_$3| |from_$3| |to_$3|))))
    (forall( (|from_$4| Int) (|to_$4| Int) (|x_$27| Int) (|xs_$4| Int))(!(=> (and (and (<= 0 |from_$4|) (< |from_$4| |to_$4|)) (<= |to_$4| |xs_$4|)) (and (<= 0 ($bv_extract_unsigned |x_$27| |xs_$4| |from_$4| |to_$4|)) (<= ($bv_extract_unsigned |x_$27| |xs_$4| |from_$4| |to_$4|) (- ($_pow2 (- |to_$4| |from_$4|)) 1))))  :pattern ( ($bv_extract_unsigned |x_$27| |xs_$4| |from_$4| |to_$4|))))
    (forall( (|from_$5| Int) (|to_$5| Int) (|x_$28| Int) (|y_$12| Int))(!(=> (and (and (<= 0 |from_$5|) (< |from_$5| |to_$5|)) (<= |to_$5| 32)) (= ($bv_extract_unsigned |x_$28| 32 |from_$5| |to_$5|) ($_shr ($_and ^^u4 |x_$28| ($_shl ^^u4 (- ($_shl ^^u4 1 (- |to_$5| |from_$5|)) 1) |from_$5|)) |from_$5|)))  :pattern ( ($bv_extract_unsigned |x_$28| 32 |from_$5| |to_$5|) ($_and ^^u4 |x_$28| |y_$12|))))
    (forall( (|from_$6| Int) (|to_$6| Int) (|x_$29| Int) (|y_$13| Int))(!(=> (and (and (<= 0 |from_$6|) (< |from_$6| |to_$6|)) (<= |to_$6| 64)) (= ($bv_extract_unsigned |x_$29| 64 |from_$6| |to_$6|) ($_shr ($_and ^^u8 |x_$29| ($_shl ^^u4 (- ($_shl ^^u8 1 (- |to_$6| |from_$6|)) 1) |from_$6|)) |from_$6|)))  :pattern ( ($bv_extract_unsigned |x_$29| 64 |from_$6| |to_$6|) ($_and ^^u8 |x_$29| |y_$13|))))
    (forall( (|from_$7| Int) (|to_$7| Int) (|val_$3| Int) (|x_$30| Int) (|xs_$5| Int) (|from2| Int) (|to2| Int))(!(=> (and (and (<= 0 |from_$7|) (< |from_$7| |to_$7|)) (<= |to_$7| |xs_$5|)) (=> (and (and (<= 0 |from2|) (< |from2| |to2|)) (<= |to2| |xs_$5|)) (=> (or (<= |to2| |from_$7|) (<= |to_$7| |from2|)) (= ($bv_extract_signed ($bv_update |x_$30| |xs_$5| |from_$7| |to_$7| |val_$3|) |xs_$5| |from2| |to2|) ($bv_extract_signed |x_$30| |xs_$5| |from2| |to2|)))))  :pattern ( ($bv_extract_signed ($bv_update |x_$30| |xs_$5| |from_$7| |to_$7| |val_$3|) |xs_$5| |from2| |to2|))))
    (forall( (|from_$8| Int) (|to_$8| Int) (|val_$4| Int) (|x_$31| Int) (|xs_$6| Int) (|from2_$0| Int) (|to2_$0| Int))(!(=> (and (and (<= 0 |from_$8|) (< |from_$8| |to_$8|)) (<= |to_$8| |xs_$6|)) (=> (and (and (<= 0 |from2_$0|) (< |from2_$0| |to2_$0|)) (<= |to2_$0| |xs_$6|)) (=> (or (<= |to2_$0| |from_$8|) (<= |to_$8| |from2_$0|)) (= ($bv_extract_unsigned ($bv_update |x_$31| |xs_$6| |from_$8| |to_$8| |val_$4|) |xs_$6| |from2_$0| |to2_$0|) ($bv_extract_unsigned |x_$31| |xs_$6| |from2_$0| |to2_$0|)))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$31| |xs_$6| |from_$8| |to_$8| |val_$4|) |xs_$6| |from2_$0| |to2_$0|))))
    (forall( (|from_$9| Int) (|to_$9| Int) (|xs_$7| Int))(!(=> (and (and (<= 0 |from_$9|) (< |from_$9| |to_$9|)) (<= |to_$9| |xs_$7|)) (= ($bv_extract_signed 0 |xs_$7| |from_$9| |to_$9|) 0))  :pattern ( ($bv_extract_signed 0 |xs_$7| |from_$9| |to_$9|))))
    (forall( (|h_$3| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@) (|r_$3| $ptr) (|f_$37| $field) (|v_$1| Int) (|p_$99| $ptr) (|sz_$22| Int))(=> (or (not (and (<= 0 ($index_within |p_$99| ($ptr |f_$37| |r_$3|))) (<= ($index_within |p_$99| ($ptr |f_$37| |r_$3|)) (- |sz_$22| 1)))) (not (= ($ptr |f_$37| |r_$3|) ($idx |p_$99| ($index_within |p_$99| ($ptr |f_$37| |r_$3|)))))) (= ($mem_range_heap (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h_$3| |f_$37| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h_$3| |f_$37|) |r_$3| |v_$1|)) |p_$99| |sz_$22|) ($mem_range_heap |h_$3| |p_$99| |sz_$22|))))
    (forall( (|has_volatile_owns_$0| Bool) (|claimable_$0| Bool) (|sz_$2| Int) (|t_$5| $ctype))(= (and (and (and (and (and (and (and (= ($sizeof |t_$5|) |sz_$2|) (= ($type_branch |t_$5|) $ctype_flat)) (not ($is_primitive |t_$5|))) (= ($is_claimable |t_$5|) |claimable_$0|)) (ite |has_volatile_owns_$0| ($is_volatile_field ($f_owns |t_$5|)) ($is_sequential_field ($f_owns |t_$5|)))) true) (= ($as_union_type |t_$5|) |t_$5|)) ($is_union_type |t_$5|)) (and (and (and (and (and (and (and (= ($sizeof |t_$5|) |sz_$2|) (= ($type_branch |t_$5|) $ctype_flat)) (not ($is_primitive |t_$5|))) (= ($is_claimable |t_$5|) |claimable_$0|)) (ite |has_volatile_owns_$0| ($is_volatile_field ($f_owns |t_$5|)) ($is_sequential_field ($f_owns |t_$5|)))) true) (= ($as_union_type |t_$5|) |t_$5|)) ($is_union_type |t_$5|))))
    (forall( (|has_volatile_owns_$1| Bool) (|claimable_$1| Bool) (|sz_$3| Int) (|t_$6| $ctype))(= (and (and (and (and (and (and (= ($sizeof |t_$6|) |sz_$3|) (= ($type_branch |t_$6|) $ctype_flat)) (not ($is_primitive |t_$6|))) (= ($is_claimable |t_$6|) |claimable_$1|)) (ite |has_volatile_owns_$1| ($is_volatile_field ($f_owns |t_$6|)) ($is_sequential_field ($f_owns |t_$6|)))) true) (not ($is_union_type |t_$6|))) (and (and (and (and (and (and (= ($sizeof |t_$6|) |sz_$3|) (= ($type_branch |t_$6|) $ctype_flat)) (not ($is_primitive |t_$6|))) (= ($is_claimable |t_$6|) |claimable_$1|)) (ite |has_volatile_owns_$1| ($is_volatile_field ($f_owns |t_$6|)) ($is_sequential_field ($f_owns |t_$6|)))) true) (not ($is_union_type |t_$6|)))))
    (forall( (|has_volatile_owns| Bool) (|claimable| Bool) (|sz_$1| Int) (|t_$4| $ctype))(= (and (and (and (and (and (= ($sizeof |t_$4|) |sz_$1|) (= ($type_branch |t_$4|) $ctype_flat)) (not ($is_primitive |t_$4|))) (= ($is_claimable |t_$4|) |claimable|)) (ite |has_volatile_owns| ($is_volatile_field ($f_owns |t_$4|)) ($is_sequential_field ($f_owns |t_$4|)))) true) (and (and (and (and (and (= ($sizeof |t_$4|) |sz_$1|) (= ($type_branch |t_$4|) $ctype_flat)) (not ($is_primitive |t_$4|))) (= ($is_claimable |t_$4|) |claimable|)) (ite |has_volatile_owns| ($is_volatile_field ($f_owns |t_$4|)) ($is_sequential_field ($f_owns |t_$4|)))) true)))
    (forall( (|i_$13| Int) (|a_$4| $ptr))(!(= ($index_within ($idx |a_$4| |i_$13|) |a_$4|) |i_$13|)  :pattern ( ($index_within ($idx |a_$4| |i_$13|) |a_$4|))))
    (forall( (|i_$16| Int) (|j_$1| Int))(!(=> (and (<= 0 |i_$16|) (< 0 |j_$1|)) (<= (div |i_$16| |j_$1|) |i_$16|))  :pattern ( (div |i_$16| |j_$1|))))
    (forall( (|i_$17| Int) (|j_$2| Int))(!(=> (and (> |i_$17| 0) (> |j_$2| 0)) (and (< (- |i_$17| |j_$2|) (* (div |i_$17| |j_$2|) |j_$2|)) (<= (* (div |i_$17| |j_$2|) |j_$2|) |i_$17|)))  :pattern ( (div |i_$17| |j_$2|))))
    (forall( (|i_$18| Int))(!(=> (not (= |i_$18| 0)) (= (div |i_$18| |i_$18|) 1))  :pattern ( (div |i_$18| |i_$18|))))
    (forall( (|i_$19| Int))(!(=> (not (= |i_$19| 0)) (= (div 0 |i_$19|) 0))  :pattern ( (div 0 |i_$19|))))
    (forall( (|i| Int) (|p_$10| $ptr))(= ($dot ($base |p_$10|) ($field_plus ($field |p_$10|) |i|)) ($dot ($base |p_$10|) ($field_plus ($field |p_$10|) |i|))))
    (forall( (|id| $token) (|S_$69| $state))(!(=> ($good_state_ext |id| |S_$69|) ($good_state |S_$69|))  :pattern ( ($good_state_ext |id| |S_$69|))))
    (forall( (|isvolatile_$1| Bool) (|tp_$2| $ctype) (|f_$3| $field) (|partp_$2| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$3|) |partp_$2|) (= ($field_type |f_$3|) |tp_$2|)) (= ($as_field_with_type |f_$3| |tp_$2|) |f_$3|)) (=> ($is_primitive |tp_$2|) (= ($as_primitive_field |f_$3|) |f_$3|))) (=> (not ($is_primitive |tp_$2|)) (= ($as_composite_field |f_$3|) |f_$3|))) (= ($field_arr_root |f_$3|) |f_$3|)) true) (=> (not |isvolatile_$1|) ($is_sequential_field |f_$3|))) (=> |isvolatile_$1| ($is_volatile_field |f_$3|))) true) (= ($field_kind |f_$3|) $fk_base)) ($is_ghost_field |f_$3|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$3|) |partp_$2|) (= ($field_type |f_$3|) |tp_$2|)) (= ($as_field_with_type |f_$3| |tp_$2|) |f_$3|)) (=> ($is_primitive |tp_$2|) (= ($as_primitive_field |f_$3|) |f_$3|))) (=> (not ($is_primitive |tp_$2|)) (= ($as_composite_field |f_$3|) |f_$3|))) (= ($field_arr_root |f_$3|) |f_$3|)) true) (=> (not |isvolatile_$1|) ($is_sequential_field |f_$3|))) (=> |isvolatile_$1| ($is_volatile_field |f_$3|))) true) (= ($field_kind |f_$3|) $fk_base)) ($is_ghost_field |f_$3|)) true)))
    (forall( (|isvolatile| Bool) (|tp_$0| $ctype) (|f_$1| $field) (|partp_$0| $ctype))(= (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$1|) |partp_$0|) (= ($field_type |f_$1|) |tp_$0|)) (= ($as_field_with_type |f_$1| |tp_$0|) |f_$1|)) (=> ($is_primitive |tp_$0|) (= ($as_primitive_field |f_$1|) |f_$1|))) (=> (not ($is_primitive |tp_$0|)) (= ($as_composite_field |f_$1|) |f_$1|))) (= ($field_arr_root |f_$1|) |f_$1|)) true) (=> (not |isvolatile|) ($is_sequential_field |f_$1|))) (=> |isvolatile| ($is_volatile_field |f_$1|))) true) (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$1|) |partp_$0|) (= ($field_type |f_$1|) |tp_$0|)) (= ($as_field_with_type |f_$1| |tp_$0|) |f_$1|)) (=> ($is_primitive |tp_$0|) (= ($as_primitive_field |f_$1|) |f_$1|))) (=> (not ($is_primitive |tp_$0|)) (= ($as_composite_field |f_$1|) |f_$1|))) (= ($field_arr_root |f_$1|) |f_$1|)) true) (=> (not |isvolatile|) ($is_sequential_field |f_$1|))) (=> |isvolatile| ($is_volatile_field |f_$1|))) true)))
    (forall( (|k_$4| Int))(!(=> (>= |k_$4| 0) (= ($addr ($i4_to_ptr |k_$4|)) |k_$4|))  :pattern ( ($i4_to_ptr |k_$4|))))
    (forall( (|k_$5| Int))(!(=> (>= |k_$5| 0) (= ($addr ($i2_to_ptr |k_$5|)) |k_$5|))  :pattern ( ($i2_to_ptr |k_$5|))))
    (forall( (|k_$6| Int))(!(=> (>= |k_$6| 0) (= ($addr ($i1_to_ptr |k_$6|)) |k_$6|))  :pattern ( ($i1_to_ptr |k_$6|))))
    (forall( (|M_$0| $map_t..$ptr_to..^Node.^^bool) (|p_$201| $ptr) (|v_$8| Bool) (|q_$26| $ptr))(= ($select.$map_t..$ptr_to..^Node.^^bool ($store.$map_t..$ptr_to..^Node.^^bool |M_$0| |q_$26| |v_$8|) |p_$201|) (ite (= ($phys_ptr_cast |p_$201| ^Node) ($phys_ptr_cast |q_$26| ^Node)) |v_$8| ($select.$map_t..$ptr_to..^Node.^^bool |M_$0| |p_$201|))))
    (forall( (|M_$1| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|p_$204| $ptr) (|v_$9| $map_t..$ptr_to..^Node.^^bool))true)
    (forall( (|M_$2| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|p_$205| $ptr) (|v_$10| $map_t..$ptr_to..^Node.^^bool) (|q_$27| $ptr))(= ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool ($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M_$2| |q_$27| |v_$10|) |p_$205|) (ite (= ($phys_ptr_cast |p_$205| ^Node) ($phys_ptr_cast |q_$27| ^Node)) |v_$10| ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M_$2| |p_$205|))))
    (forall( (|M_$3| $map_t..^^i4.^^i4) (|p_$208| Int) (|v_$11| Int))true)
    (forall( (|M_$4| $map_t..^^i4.^^i4) (|p_$209| Int) (|v_$12| Int) (|q_$28| Int))(= ($select.$map_t..^^i4.^^i4 ($store.$map_t..^^i4.^^i4 |M_$4| |q_$28| |v_$12|) |p_$209|) (ite (= ($unchecked ^^i4 |p_$209|) ($unchecked ^^i4 |q_$28|)) ($unchecked ^^i4 |v_$12|) ($select.$map_t..^^i4.^^i4 |M_$4| |p_$209|))))
    (forall( (|M_$5| $map_t..^^i4.^^i4) (|p_$212| Int))($in_range_t ^^i4 ($select.$map_t..^^i4.^^i4 |M_$5| |p_$212|)))
    (forall( (|M| $map_t..$ptr_to..^Node.^^bool) (|p_$200| $ptr) (|v_$7| Bool))true)
    (forall( (|M1_$2| $map_t..$ptr_to..^Node.^^bool) (|M2_$2| $map_t..$ptr_to..^Node.^^bool))(!(=> (forall( (|p_$202| $ptr))(= ($select.$map_t..$ptr_to..^Node.^^bool |M1_$2| ($phys_ptr_cast |p_$202| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool |M2_$2| ($phys_ptr_cast |p_$202| ^Node)))) ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$2| |M2_$2|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$2| |M2_$2|))))
    (forall( (|M1_$3| $map_t..$ptr_to..^Node.^^bool) (|M2_$3| $map_t..$ptr_to..^Node.^^bool))(!(=> ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$3| |M2_$3|) (= |M1_$3| |M2_$3|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^bool |M1_$3| |M2_$3|))))
    (forall( (|M1_$4| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|M2_$4| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool))(!(=> (forall( (|p_$206| $ptr))($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$4| ($phys_ptr_cast |p_$206| ^Node)) ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M2_$4| ($phys_ptr_cast |p_$206| ^Node)))) ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$4| |M2_$4|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$4| |M2_$4|))))
    (forall( (|M1_$5| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) (|M2_$5| $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool))(!(=> ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$5| |M2_$5|) (= |M1_$5| |M2_$5|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |M1_$5| |M2_$5|))))
    (forall( (|M1_$6| $map_t..^^i4.^^i4) (|M2_$6| $map_t..^^i4.^^i4))(!(=> (forall( (|p_$210| Int))(= ($unchecked ^^i4 ($select.$map_t..^^i4.^^i4 |M1_$6| ($unchecked ^^i4 |p_$210|))) ($unchecked ^^i4 ($select.$map_t..^^i4.^^i4 |M2_$6| ($unchecked ^^i4 |p_$210|))))) ($eq.$map_t..^^i4.^^i4 |M1_$6| |M2_$6|))  :pattern ( ($eq.$map_t..^^i4.^^i4 |M1_$6| |M2_$6|))))
    (forall( (|M1_$7| $map_t..^^i4.^^i4) (|M2_$7| $map_t..^^i4.^^i4))(!(=> ($eq.$map_t..^^i4.^^i4 |M1_$7| |M2_$7|) (= |M1_$7| |M2_$7|))  :pattern ( ($eq.$map_t..^^i4.^^i4 |M1_$7| |M2_$7|))))
    (forall( (|M2_$0| $state) (|M1_$0| $state))(= (and (< ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) ($call_transition |M1_$0| |M2_$0|)) (and (< ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|)) ($call_transition |M1_$0| |M2_$0|))))
    (forall( (|M2| $state) (|M1| $state))(= (and (<= ($current_timestamp |M1|) ($current_timestamp |M2|)) ($call_transition |M1| |M2|)) (and (<= ($current_timestamp |M1|) ($current_timestamp |M2|)) ($call_transition |M1| |M2|))))
    (forall( (|max| Int) (|val| Int) (|min| Int))(= (and (<= |min| |val|) (<= |val| |max|)) (and (<= |min| |val|) (<= |val| |max|))))
    (forall( (|no_$1| Int) (|t_$53| $ctype))(!(=> ($is_fnptr_type |t_$53|) (and ($in_range_phys_ptr ($get_fnptr |no_$1| |t_$53|)) ($valid_fnptr ($get_fnptr |no_$1| |t_$53|))))  :pattern ( ($get_fnptr |no_$1| |t_$53|))))
    (forall( (|no| Int) (|t_$52| $ctype))(!(= ($get_fnptr |no| |t_$52|) ($ptr ($f_root |t_$52|) ($get_fnptr_ref |no|)))  :pattern ( ($get_fnptr |no| |t_$52|))))
    (forall( (|o_$10| $ptr))(!(= ($span |o_$10|) (lambda@12 |o_$10|))  :pattern ( ($span |o_$10|))))
    (forall( (|o_$16| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ lambda@14 |o_$16|) false)  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ lambda@14 |o_$16|))))
    (forall( (|o_$17| $ptr) (|p_$220| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@15 |p_$220|) |o_$17|) (= |o_$17| |p_$220|))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@15 |p_$220|) |o_$17|))))
    (forall( (|o_$18| $ptr) (|p_$221| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@16 |p_$221|) |o_$18|) (and (not (= |p_$221| ($phys_ptr_cast $null ($field_type ($field |p_$221|))))) (= |p_$221| |o_$18|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@16 |p_$221|) |o_$18|))))
    (forall( (|o_$19| $ptr) (|A_$5| $@Map@@$ptr@To@Bool@@) (|B_$5| $@Map@@$ptr@To@Bool@@))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@17 |A_$5| |B_$5|) |o_$19|) (or (MapRead$$@Map@@$ptr@To@Bool@@$ |A_$5| |o_$19|) (MapRead$$@Map@@$ptr@To@Bool@@$ |B_$5| |o_$19|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@17 |A_$5| |B_$5|) |o_$19|))))
    (forall( (|o_$20| $ptr) (|A_$6| $@Map@@$ptr@To@Bool@@) (|B_$6| $@Map@@$ptr@To@Bool@@))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@18 |A_$6| |B_$6|) |o_$20|) (and (MapRead$$@Map@@$ptr@To@Bool@@$ |A_$6| |o_$20|) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |B_$6| |o_$20|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@18 |A_$6| |B_$6|) |o_$20|))))
    (forall( (|o_$21| $ptr) (|A_$7| $@Map@@$ptr@To@Bool@@) (|B_$7| $@Map@@$ptr@To@Bool@@))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@19 |A_$7| |B_$7|) |o_$21|) (and (MapRead$$@Map@@$ptr@To@Bool@@$ |A_$7| |o_$21|) (MapRead$$@Map@@$ptr@To@Bool@@$ |B_$7| |o_$21|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@19 |A_$7| |B_$7|) |o_$21|))))
    (forall( (|off_$0| Int) (|p_$8| Int))(= ($unchk_add $arch_ptr_type |p_$8| |off_$0|) ($unchk_add $arch_ptr_type |p_$8| |off_$0|)))
    (forall( (|off| Int) (|isvolatile_$0| Bool) (|tp_$1| $ctype) (|f_$2| $field) (|partp_$1| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$2|) |partp_$1|) (= ($field_type |f_$2|) |tp_$1|)) (= ($as_field_with_type |f_$2| |tp_$1|) |f_$2|)) (=> ($is_primitive |tp_$1|) (= ($as_primitive_field |f_$2|) |f_$2|))) (=> (not ($is_primitive |tp_$1|)) (= ($as_composite_field |f_$2|) |f_$2|))) (= ($field_arr_root |f_$2|) |f_$2|)) true) (=> (not |isvolatile_$0|) ($is_sequential_field |f_$2|))) (=> |isvolatile_$0| ($is_volatile_field |f_$2|))) true) (= ($field_offset |f_$2|) |off|)) ($is_phys_field |f_$2|)) (= ($field_kind |f_$2|) $fk_base)) (=> (= |off| 0) ($has_field_at0 |partp_$1| |f_$2|))) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$2|) |partp_$1|) (= ($field_type |f_$2|) |tp_$1|)) (= ($as_field_with_type |f_$2| |tp_$1|) |f_$2|)) (=> ($is_primitive |tp_$1|) (= ($as_primitive_field |f_$2|) |f_$2|))) (=> (not ($is_primitive |tp_$1|)) (= ($as_composite_field |f_$2|) |f_$2|))) (= ($field_arr_root |f_$2|) |f_$2|)) true) (=> (not |isvolatile_$0|) ($is_sequential_field |f_$2|))) (=> |isvolatile_$0| ($is_volatile_field |f_$2|))) true) (= ($field_offset |f_$2|) |off|)) ($is_phys_field |f_$2|)) (= ($field_kind |f_$2|) $fk_base)) (=> (= |off| 0) ($has_field_at0 |partp_$1| |f_$2|))) true)))
    (forall( (|owns| $@Map@@$ptr@To@Bool@@) (|o| $ptr) (|S_$40| $state))(= ($set_difference |owns| ($owns |S_$40| |o|)) ($set_difference |owns| ($owns |S_$40| |o|))))
    (forall( (|p_$0| $ptr))(= ($field_type ($field |p_$0|)) ($field_type ($field |p_$0|))))
    (forall( (|p_$1| $ptr))(= (not (= |p_$1| ($phys_ptr_cast $null ($field_type ($field |p_$1|))))) (not (= |p_$1| ($phys_ptr_cast $null ($field_type ($field |p_$1|)))))))
    (forall( (|p_$102| $ptr) (|a_$5| $ptr) (|f_$39| $field))(!(=> (and ($is_proper ($dot |p_$102| |f_$39|)) (<= ($sizeof ($field_type ($field |p_$102|))) ($sizeof ($field_type ($field |a_$5|))))) (= ($index_within ($dot |p_$102| |f_$39|) |a_$5|) ($index_within |p_$102| |a_$5|)))  :pattern ( ($index_within ($dot |p_$102| |f_$39|) |a_$5|))))
    (forall( (|p_$103| $ptr) (|q_$5| $ptr) (|t_$38| $ctype))(!(=> (and (= ($field_type ($field |p_$103|)) |t_$38|) (= ($field_type ($field |q_$5|)) |t_$38|)) (= ($index_within |p_$103| |q_$5|) (- ($field_arr_index ($field |p_$103|)) ($field_arr_index ($field |q_$5|)))))  :pattern ( ($index_within ($ptr ($as_field_with_type ($field |p_$103|) |t_$38|) ($base |p_$103|)) ($ptr ($as_field_with_type ($field |q_$5|) |t_$38|) ($base |q_$5|))))))
    (forall( (|p_$104| $ptr) (|T_$9| $ctype) (|sz_$24| Int))(!(= ($array_range_no_state |p_$104| |T_$9| |sz_$24|) (ite ($is_primitive |T_$9|) (lambda@0 $fk_base |p_$104| |T_$9| |sz_$24|) (lambda@1 |sz_$24| |p_$104|)))  :pattern ( ($array_range_no_state |p_$104| |T_$9| |sz_$24|))))
    (forall( (|p_$107| $ptr) (|t_$39| $ctype) (|sz_$28| Int))(!(= ($phys_ptr_cast ($ptr ($as_field_with_type ($field |p_$107|) ($array |t_$39| |sz_$28|)) ($base |p_$107|)) |t_$39|) ($dot |p_$107| ($array_emb ($element_type ($field_type ($field |p_$107|))) ($array_length ($field_type ($field |p_$107|))))))  :pattern ( ($phys_ptr_cast ($ptr ($as_field_with_type ($field |p_$107|) ($array |t_$39| |sz_$28|)) ($base |p_$107|)) |t_$39|))))
    (forall( (|p_$108| $ptr) (|t_$40| $ctype) (|sz_$29| Int))(!(= ($spec_ptr_cast ($ptr ($as_field_with_type ($field |p_$108|) ($array |t_$40| |sz_$29|)) ($base |p_$108|)) |t_$40|) ($dot |p_$108| ($array_emb ($element_type ($field_type ($field |p_$108|))) ($array_length ($field_type ($field |p_$108|))))))  :pattern ( ($spec_ptr_cast ($ptr ($as_field_with_type ($field |p_$108|) ($array |t_$40| |sz_$29|)) ($base |p_$108|)) |t_$40|))))
    (forall( (|p_$120| $ptr))(!(= ($as_addr |p_$120| ($field_type ($field |p_$120|)) ($addr |p_$120|)) |p_$120|)  :pattern ( ($addr |p_$120|))))
    (forall( (|p_$14| $ptr))(= ($dot |p_$14| ($array_emb ($element_type ($field_type ($field |p_$14|))) ($array_length ($field_type ($field |p_$14|))))) ($dot |p_$14| ($array_emb ($element_type ($field_type ($field |p_$14|))) ($array_length ($field_type ($field |p_$14|)))))))
    (forall( (|p_$15| $ptr) (|s_$0| $state))(= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s_$0|) |p_$15|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s_$0|) |p_$15|)))
    (forall( (|p_$159| $ptr) (|c_$10| $ptr))(!(=> (forall( (|s_$18| $state))(!(=> ($valid_claim |s_$18| |c_$10|) ($closed |s_$18| |p_$159|))  :pattern ( ($dont_instantiate_state |s_$18|)))) ($in_claim_domain |p_$159| |c_$10|))  :pattern ( ($in_claim_domain |p_$159| |c_$10|))))
    (forall( (|p_$16| $ptr) (|f_$12| $field) (|s_$1| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$1|) |f_$12|) |p_$16|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$1|) |f_$12|) |p_$16|)))
    (forall( (|p_$171| $ptr) (|q_$21| $ptr) (|r_$16| $ptr))(!(=> (and ($extent_hint |p_$171| |q_$21|) ($extent_hint |q_$21| |r_$16|)) ($extent_hint |p_$171| |r_$16|))  :pattern ( ($extent_hint |p_$171| |q_$21|) ($extent_hint |q_$21| |r_$16|))))
    (forall( (|p_$172| $ptr) (|f_$49| $field))(!($extent_hint ($dot |p_$172| ($as_composite_field |f_$49|)) |p_$172|)  :pattern ( ($dot |p_$172| ($as_composite_field |f_$49|)))))
    (forall( (|p_$173| $ptr) (|i_$15| Int))(!($extent_hint ($idx |p_$173| |i_$15|) |p_$173|)  :pattern ( ($idx |p_$173| |i_$15|))))
    (forall( (|p_$179| $ptr))(!(= ($set_singleton |p_$179|) (lambda@15 |p_$179|))  :pattern ( ($set_singleton |p_$179|))))
    (forall( (|p_$181| $ptr))(!(= ($set_cardinality ($set_singleton |p_$181|)) 1)  :pattern ( ($set_singleton |p_$181|))))
    (forall( (|p_$182| $ptr) (|s1_$2| $@Map@@$ptr@To@Bool@@) (|s2_$1| $@Map@@$ptr@To@Bool@@))(!(=> (and ($set_disjoint |s1_$2| |s2_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$2| |p_$182|)) (= ($id_set_disjoint |p_$182| |s1_$2| |s2_$1|) 1))  :pattern ( ($set_disjoint |s1_$2| |s2_$1|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$2| |p_$182|))))
    (forall( (|p_$183| $ptr) (|s1_$3| $@Map@@$ptr@To@Bool@@) (|s2_$2| $@Map@@$ptr@To@Bool@@))(!(=> (and ($set_disjoint |s1_$3| |s2_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$2| |p_$183|)) (= ($id_set_disjoint |p_$183| |s1_$3| |s2_$2|) 2))  :pattern ( ($set_disjoint |s1_$3| |s2_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$2| |p_$183|))))
    (forall( (|p_$185| $ptr) (|s_$20| $@Map@@$ptr@To@Bool@@))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$20| |p_$185|) ($set_in_pos |p_$185| |s_$20|))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$20| |p_$185|))))
    (forall( (|p_$186| $ptr) (|s_$21| $@Map@@$ptr@To@Bool@@))(!(= ($set_in0 |p_$186| |s_$21|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$21| |p_$186|))  :pattern ( ($set_in0 |p_$186| |s_$21|))))
    (forall( (|p_$187| $ptr))(= ($int_to_ptr ($ptr_to_int |p_$187|)) |p_$187|))
    (forall( (|p_$189| $@Map@@$ptr@To@Bool@@))(= ($int_to_ptrset ($ptrset_to_int |p_$189|)) |p_$189|))
    (forall( (|p_$190| $ptr))(!(=> (and (<= 0 ($addr |p_$190|)) (<= ($addr |p_$190|) $max.u8)) (= ($ptr_to_u8 |p_$190|) ($addr |p_$190|)))  :pattern ( ($ptr_to_u8 |p_$190|))))
    (forall( (|p_$191| $ptr))(!(=> (and (<= $min.i8 ($addr |p_$191|)) (<= ($addr |p_$191|) $max.i8)) (= ($ptr_to_i8 |p_$191|) ($addr |p_$191|)))  :pattern ( ($ptr_to_i8 |p_$191|))))
    (forall( (|p_$192| $ptr))(!(=> (and (<= 0 ($addr |p_$192|)) (<= ($addr |p_$192|) $max.u4)) (= ($ptr_to_u4 |p_$192|) ($addr |p_$192|)))  :pattern ( ($ptr_to_u4 |p_$192|))))
    (forall( (|p_$193| $ptr))(!(=> (and (<= $min.i4 ($addr |p_$193|)) (<= ($addr |p_$193|) $max.i4)) (= ($ptr_to_i4 |p_$193|) ($addr |p_$193|)))  :pattern ( ($ptr_to_i4 |p_$193|))))
    (forall( (|p_$194| $ptr))(!(=> (and (<= 0 ($addr |p_$194|)) (<= ($addr |p_$194|) $max.u2)) (= ($ptr_to_u2 |p_$194|) ($addr |p_$194|)))  :pattern ( ($ptr_to_u2 |p_$194|))))
    (forall( (|p_$195| $ptr))(!(=> (and (<= $min.i2 ($addr |p_$195|)) (<= ($addr |p_$195|) $max.i2)) (= ($ptr_to_i2 |p_$195|) ($addr |p_$195|)))  :pattern ( ($ptr_to_i2 |p_$195|))))
    (forall( (|p_$196| $ptr))(!(=> (and (<= 0 ($addr |p_$196|)) (<= ($addr |p_$196|) $max.u1)) (= ($ptr_to_u1 |p_$196|) ($addr |p_$196|)))  :pattern ( ($ptr_to_u1 |p_$196|))))
    (forall( (|p_$197| $ptr))(!(=> (and (<= $min.i1 ($addr |p_$197|)) (<= ($addr |p_$197|) $max.i1)) (= ($ptr_to_i1 |p_$197|) ($addr |p_$197|)))  :pattern ( ($ptr_to_i1 |p_$197|))))
    (forall( (|p_$198| $ptr) (|q_$24| $ptr) (|s_$22| $state))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |s_$22| |p_$198| ^Node) |q_$24|) (= |q_$24| |p_$198|))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |s_$22| |p_$198| ^Node) |q_$24|))))
    (forall( (|p_$199| $ptr) (|q_$25| $ptr) (|s_$23| $state))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |s_$23| |p_$199| ^Tree) |q_$25|) (= |q_$25| |p_$199|))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |s_$23| |p_$199| ^Tree) |q_$25|))))
    (forall( (|p_$2| $ptr))(= (= |p_$2| ($phys_ptr_cast $null ($field_type ($field |p_$2|)))) (= |p_$2| ($phys_ptr_cast $null ($field_type ($field |p_$2|))))))
    (forall( (|p_$203| $ptr))(= ($select.$map_t..$ptr_to..^Node.^^bool $zero.$map_t..$ptr_to..^Node.^^bool |p_$203|) false))
    (forall( (|p_$207| $ptr))(= ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool |p_$207|) $zero.$map_t..$ptr_to..^Node.^^bool))
    (forall( (|p_$21| $ptr) (|S_$2| $state))(= ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$2|) ($f_owns ($field_type ($field |p_$21|)))) |p_$21|)) ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$2|) ($f_owns ($field_type ($field |p_$21|)))) |p_$21|))))
    (forall( (|p_$211| Int))(= ($select.$map_t..^^i4.^^i4 $zero.$map_t..^^i4.^^i4 |p_$211|) 0))
    (forall( (|p_$216| $ptr) (|r_$20| $ptr) (|S_$134| $state))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@10 |r_$20| |S_$134|) |p_$216|) (and ($is_proper ($dot ($base |p_$216|) ($field |p_$216|))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$134| |r_$20| ($field_type ($field |r_$20|))) ($emb0 |p_$216|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@10 |r_$20| |S_$134|) |p_$216|))))
    (forall( (|p_$217| $ptr) (|r_$21| $ptr) (|$full_extent_state_$0| $state))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@11 |r_$21| |$full_extent_state_$0|) |p_$217|) (and ($is_proper |p_$217|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |$full_extent_state_$0| |r_$21| ($field_type ($field |r_$21|))) ($emb0 |p_$217|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@11 |r_$21| |$full_extent_state_$0|) |p_$217|))))
    (forall( (|p_$218| $ptr) (|o_$15| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@12 |o_$15|) |p_$218|) (and ($is_proper |p_$218|) (= ($emb0 |p_$218|) |o_$15|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@12 |o_$15|) |p_$218|))))
    (forall( (|p_$219| $ptr) (|q_$36| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@13 |q_$36|) |p_$219|) (and (and ($is_proper |p_$219|) ($is_volatile_field ($field |p_$219|))) (= ($emb0 |p_$219|) |q_$36|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@13 |q_$36|) |p_$219|))))
    (forall( (|p_$22| $ptr) (|S_$5| $state))(= (not (= ($field_type ($field ($owner |S_$5| |p_$22|))) ^$@thread_id_t)) (not (= ($field_type ($field ($owner |S_$5| |p_$22|))) ^$@thread_id_t))))
    (forall( (|p_$23| $ptr) (|S_$6| $state))(= (or (not (= ($owner |S_$6| |p_$23|) $me)) (and ($is_primitive ($field_type ($field |p_$23|))) ($closed |S_$6| |p_$23|))) (or (not (= ($owner |S_$6| |p_$23|) $me)) (and ($is_primitive ($field_type ($field |p_$23|))) ($closed |S_$6| |p_$23|)))))
    (forall( (|p_$24| $ptr) (|S_$7| $state))(= (= ($owner |S_$7| ($emb0 |p_$24|)) $me) (= ($owner |S_$7| ($emb0 |p_$24|)) $me)))
    (forall( (|p_$25| $ptr) (|S_$8| $state))(= (ite ($is_primitive ($field_type ($field |p_$25|))) (and (= ($owner |S_$8| ($emb0 |p_$25|)) $me) (not ($closed |S_$8| ($emb0 |p_$25|)))) (= ($owner |S_$8| |p_$25|) $me)) (ite ($is_primitive ($field_type ($field |p_$25|))) (and (= ($owner |S_$8| ($emb0 |p_$25|)) $me) (not ($closed |S_$8| ($emb0 |p_$25|)))) (= ($owner |S_$8| |p_$25|) $me))))
    (forall( (|p_$29| $ptr))(= ($in_range_spec_ptr |p_$29|) ($in_range_spec_ptr |p_$29|)))
    (forall( (|p_$30| $ptr) (|S_$15| $state))(= (and (and (and (not ($is_primitive ($field_type ($field |p_$30|)))) ($is_proper |p_$30|)) (= ($owner |S_$15| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$15|) |p_$30|)) $me)) (not (= |p_$30| ($phys_ptr_cast $null ($field_type ($field |p_$30|)))))) (and (and (and (not ($is_primitive ($field_type ($field |p_$30|)))) ($is_proper |p_$30|)) (= ($owner |S_$15| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$15|) |p_$30|)) $me)) (not (= |p_$30| ($phys_ptr_cast $null ($field_type ($field |p_$30|))))))))
    (forall( (|p_$32| $ptr) (|S_$18| $state))(= ($thread_local |S_$18| |p_$32|) ($thread_local |S_$18| |p_$32|)))
    (forall( (|p_$33| $ptr) (|S_$19| $state))(= (or (and ($is_span_sequential ($field_type ($field |p_$33|))) ($thread_local |S_$19| |p_$33|)) ($mutable |S_$19| |p_$33|)) (or (and ($is_span_sequential ($field_type ($field |p_$33|))) ($thread_local |S_$19| |p_$33|)) ($mutable |S_$19| |p_$33|))))
    (forall( (|p_$34| $ptr) (|S2| $state) (|S1| $state))(= ($inv2 |S1| |S2| |p_$34| ($field_type ($field |p_$34|))) ($inv2 |S1| |S2| |p_$34| ($field_type ($field |p_$34|)))))
    (forall( (|p_$38| $ptr) (|S_$25| $state) (|S0_$1| $state))(= (and (and (and (= ($f_timestamp |S_$25|) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$25|) |p_$38|))) (= ($f_closed |S_$25|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S_$25|) |p_$38|)))) (= ($f_owner |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$25|) |p_$38|)))) (= ($roots |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$25|) |p_$38|)))) (and (and (and (= ($f_timestamp |S_$25|) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$25|) |p_$38|))) (= ($f_closed |S_$25|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S_$25|) |p_$38|)))) (= ($f_owner |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$25|) |p_$38|)))) (= ($roots |S_$25|) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$1|) |p_$38| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$25|) |p_$38|))))))
    (forall( (|p_$4| $ptr))(= ($base |p_$4|) ($base |p_$4|)))
    (forall( (|p_$40| $ptr) (|f_$19| $field) (|h_$0| $@Map@@$ptr@To@Int@@))(= (MapRead$$@Map@@$ptr@To@Int@@$ |h_$0| |p_$40|) (MapRead$$@Map@@$ptr@To@Int@@$ |h_$0| |p_$40|)))
    (forall( (|p_$43| $ptr) (|S_$26| $state))(= (= ($timestamp |S_$26| |p_$43|) ($current_timestamp |S_$26|)) (= ($timestamp |S_$26| |p_$43|) ($current_timestamp |S_$26|))))
    (forall( (|p_$44| $ptr) (|S_$27| $state))(= (and (= ($timestamp |S_$27| |p_$44|) ($current_timestamp |S_$27|)) ($mutable |S_$27| |p_$44|)) (and (= ($timestamp |S_$27| |p_$44|) ($current_timestamp |S_$27|)) ($mutable |S_$27| |p_$44|))))
    (forall( (|p_$45| $ptr) (|M2_$1| $state) (|M1_$1| $state))(= (and (< ($current_timestamp |M1_$1|) ($timestamp |M2_$1| |p_$45|)) (<= ($timestamp |M2_$1| |p_$45|) ($current_timestamp |M2_$1|))) (and (< ($current_timestamp |M1_$1|) ($timestamp |M2_$1| |p_$45|)) (<= ($timestamp |M2_$1| |p_$45|) ($current_timestamp |M2_$1|)))))
    (forall( (|p_$46| $ptr) (|begin_time| Int) (|S_$29| $state))(= (and (and (not ($is_primitive ($field_type ($field |p_$46|)))) ($is_proper |p_$46|)) (and ($mutable |S_$29| |p_$46|) (or (>= ($timestamp |S_$29| |p_$46|) |begin_time|) ($in_writes_at |begin_time| |p_$46|)))) (and (and (not ($is_primitive ($field_type ($field |p_$46|)))) ($is_proper |p_$46|)) (and ($mutable |S_$29| |p_$46|) (or (>= ($timestamp |S_$29| |p_$46|) |begin_time|) ($in_writes_at |begin_time| |p_$46|))))))
    (forall( (|p_$47| $ptr) (|begin_time_$0| Int) (|S_$30| $state))(= (and (and ($is_primitive ($field_type ($field |p_$47|))) ($is_proper |p_$47|)) (and ($mutable |S_$30| ($emb0 |p_$47|)) (or (>= ($timestamp |S_$30| ($emb0 |p_$47|)) |begin_time_$0|) ($in_writes_at |begin_time_$0| |p_$47|)))) (and (and ($is_primitive ($field_type ($field |p_$47|))) ($is_proper |p_$47|)) (and ($mutable |S_$30| ($emb0 |p_$47|)) (or (>= ($timestamp |S_$30| ($emb0 |p_$47|)) |begin_time_$0|) ($in_writes_at |begin_time_$0| |p_$47|))))))
    (forall( (|p_$48| $ptr) (|begin_time_$1| Int) (|S_$31| $state))(= ($in_writes_at |begin_time_$1| |p_$48|) ($in_writes_at |begin_time_$1| |p_$48|)))
    (forall( (|p_$5| $ptr) (|S| $state))(= ($emb0 |p_$5|) ($emb0 |p_$5|)))
    (forall( (|p_$51| $ptr) (|S_$34| $state))(= ($is_object_root_ptr |p_$51|) ($is_object_root_ptr |p_$51|)))
    (forall( (|p_$52| $ptr) (|S_$35| $state))(= ($is_object_root_ptr |p_$52|) ($is_object_root_ptr |p_$52|)))
    (forall( (|p_$53| $ptr) (|S_$36| $state))(= (and (forall( (|q_$3_$1| $ptr))(!(=> ($closed |S_$36| |q_$3_$1|) ($inv2 |S_$36| |S_$36| |q_$3_$1| ($field_type ($field |q_$3_$1|))))  :pattern ( ($closed |S_$36| |q_$3_$1|)))) ($good_for_admissibility |S_$36|)) (and (forall( (|q_$3| $ptr))(!(=> ($closed |S_$36| |q_$3|) ($inv2 |S_$36| |S_$36| |q_$3| ($field_type ($field |q_$3|))))  :pattern ( ($closed |S_$36| |q_$3|)))) ($good_for_admissibility |S_$36|))))
    (forall( (|p_$54| $ptr) (|S_$37| $state))(= (and (and ($closed |S_$37| |p_$54|) ($inv2 |S_$37| |S_$37| |p_$54| ($field_type ($field |p_$54|)))) (and (forall( (|q_$3_$3| $ptr))(!(=> ($closed |S_$37| |q_$3_$3|) ($inv2 |S_$37| |S_$37| |q_$3_$3| ($field_type ($field |q_$3_$3|))))  :pattern ( ($closed |S_$37| |q_$3_$3|)))) ($good_for_admissibility |S_$37|))) (and (and ($closed |S_$37| |p_$54|) ($inv2 |S_$37| |S_$37| |p_$54| ($field_type ($field |p_$54|)))) (and (forall( (|q_$3_$3| $ptr))(!(=> ($closed |S_$37| |q_$3_$3|) ($inv2 |S_$37| |S_$37| |q_$3_$3| ($field_type ($field |q_$3_$3|))))  :pattern ( ($closed |S_$37| |q_$3_$3|)))) ($good_for_admissibility |S_$37|)))))
    (forall( (|p_$55| $ptr) (|S_$38| $state))(= (and (and (and (and (and (and (and (and ($is |p_$55| ($field_type ($field |p_$55|))) ($is_proper |p_$55|)) (= ($owner |S_$38| |p_$55|) $me)) ($closed |S_$38| |p_$55|)) (not ($is_primitive ($field_type ($field |p_$55|))))) (or (not ($is_claimable ($field_type ($field |p_$55|)))) (= ($ref_cnt |S_$38| |p_$55|) 0))) ($inv2 |S_$38| |S_$38| |p_$55| ($field_type ($field |p_$55|)))) (forall( (|q_$4_$1| $ptr))(!(=> ($closed |S_$38| |q_$4_$1|) ($inv2 |S_$38| |S_$38| |q_$4_$1| ($field_type ($field |q_$4_$1|))))  :pattern ( ($closed |S_$38| |q_$4_$1|))))) ($good_for_pre_can_unwrap |S_$38|)) (and (and (and (and (and (and (and (and ($is |p_$55| ($field_type ($field |p_$55|))) ($is_proper |p_$55|)) (= ($owner |S_$38| |p_$55|) $me)) ($closed |S_$38| |p_$55|)) (not ($is_primitive ($field_type ($field |p_$55|))))) (or (not ($is_claimable ($field_type ($field |p_$55|)))) (= ($ref_cnt |S_$38| |p_$55|) 0))) ($inv2 |S_$38| |S_$38| |p_$55| ($field_type ($field |p_$55|)))) (forall( (|q_$4| $ptr))(!(=> ($closed |S_$38| |q_$4|) ($inv2 |S_$38| |S_$38| |q_$4| ($field_type ($field |q_$4|))))  :pattern ( ($closed |S_$38| |q_$4|))))) ($good_for_pre_can_unwrap |S_$38|))))
    (forall( (|p_$56| $ptr) (|S_$41| $state))(= ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$41|) |p_$56|)) ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$41|) |p_$56|))))
    (forall( (|p_$57| $ptr) (|S_$42| $state))(= ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$42|) |p_$57|))) ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$42|) |p_$57|)))))
    (forall( (|p_$58| $ptr))(= ($dot |p_$58| ($f_vol_version ($field_type ($field |p_$58|)))) ($dot |p_$58| ($f_vol_version ($field_type ($field |p_$58|))))))
    (forall( (|p_$6| $ptr))(= ($base |p_$6|) ($base |p_$6|)))
    (forall( (|p_$66| $ptr) (|s_$10| $state))(= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$10|) ($field |p_$66|)) ($base |p_$66|)) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$10|) ($field |p_$66|)) ($base |p_$66|))))
    (forall( (|p_$72| $ptr))(= (and (<= 0 ($addr |p_$72|)) (<= ($addr |p_$72|) $max.u8)) (and (<= 0 ($addr |p_$72|)) (<= ($addr |p_$72|) $max.u8))))
    (forall( (|p_$73| $ptr))(!(= ($ptr ($field |p_$73|) ($base |p_$73|)) |p_$73|)  :pattern ( ($base |p_$73|)) :pattern ( ($field |p_$73|))))
    (forall( (|p_$74| $ptr))(!(and (and (= (= ($addr |p_$74|) 0) (= |p_$74| ($phys_ptr_cast $null ($field_type ($field |p_$74|))))) (=> ($in_range_phys_ptr |p_$74|) ($in_range_t $arch_ptr_type ($addr |p_$74|)))) (=> (and ($in_range_phys_ptr |p_$74|) ($is_proper |p_$74|)) ($in_range_t $arch_ptr_type (+ ($addr |p_$74|) ($sizeof ($field_type ($field |p_$74|)))))))  :pattern ( ($addr |p_$74|))))
    (forall( (|p_$75| $ptr))(!(=> ($is_proper |p_$75|) (= ($field_parent_type ($field |p_$75|)) ($field_type ($field ($base |p_$75|)))))  :pattern ( ($is_proper |p_$75|))))
    (forall( (|p_$76| $ptr) (|t_$29| $ctype))(!(= ($is |p_$76| |t_$29|) (= ($field_type ($field |p_$76|)) |t_$29|))  :pattern ( ($is |p_$76| |t_$29|))))
    (forall( (|p_$77| $ptr))(!(=> ($in_range_spec_ptr |p_$77|) (= ($spec_ptr_cast |p_$77| ($field_type ($field |p_$77|))) |p_$77|))  :pattern ( ($spec_ptr_cast |p_$77| ($field_type ($field |p_$77|)))) :pattern ( ($in_range_spec_ptr |p_$77|))))
    (forall( (|p_$78| $ptr))(!(=> ($in_range_phys_ptr |p_$78|) (and (= ($phys_ptr_cast |p_$78| ($field_type ($field |p_$78|))) |p_$78|) ($is_phys_field ($field |p_$78|))))  :pattern ( ($phys_ptr_cast |p_$78| ($field_type ($field |p_$78|)))) :pattern ( ($in_range_phys_ptr |p_$78|))))
    (forall( (|p_$79| $ptr))(!(=> ($in_range_phys_ptr |p_$79|) ($in_range_phys_ptr ($base |p_$79|)))  :pattern ( ($in_range_phys_ptr ($base |p_$79|)))))
    (forall( (|p_$80| $ptr) (|t_$30| $ctype))(!(= ($addr ($phys_ptr_cast |p_$80| |t_$30|)) ($addr |p_$80|))  :pattern ( ($addr ($phys_ptr_cast |p_$80| |t_$30|)))))
    (forall( (|p_$81| $ptr) (|t_$31| $ctype))(!(and (and (and (= ($field_type ($field ($spec_ptr_cast |p_$81| |t_$31|))) |t_$31|) (= (= ($spec_ptr_cast |p_$81| |t_$31|) ($phys_ptr_cast $null ($field_type ($field ($spec_ptr_cast |p_$81| |t_$31|))))) (= |p_$81| ($phys_ptr_cast $null ($field_type ($field |p_$81|)))))) (= ($field ($spec_ptr_cast |p_$81| |t_$31|)) ($as_field_with_type ($field ($spec_ptr_cast |p_$81| |t_$31|)) |t_$31|))) ($in_range_spec_ptr ($spec_ptr_cast |p_$81| |t_$31|)))  :pattern ( ($spec_ptr_cast |p_$81| |t_$31|))))
    (forall( (|p_$82| $ptr) (|t_$32| $ctype))(!(and (and (and (= ($field_type ($field ($phys_ptr_cast |p_$82| |t_$32|))) |t_$32|) (= (= ($phys_ptr_cast |p_$82| |t_$32|) ($phys_ptr_cast $null ($field_type ($field ($phys_ptr_cast |p_$82| |t_$32|))))) (= |p_$82| ($phys_ptr_cast $null ($field_type ($field |p_$82|)))))) (= ($field ($phys_ptr_cast |p_$82| |t_$32|)) ($as_field_with_type ($field ($phys_ptr_cast |p_$82| |t_$32|)) |t_$32|))) ($in_range_phys_ptr ($phys_ptr_cast |p_$82| |t_$32|)))  :pattern ( ($phys_ptr_cast |p_$82| |t_$32|))))
    (forall( (|p_$83| $ptr))(!(and (=> (not ($in_range_phys_ptr |p_$83|)) ($in_range_spec_ptr |p_$83|)) true)  :pattern ( ($in_range_phys_ptr |p_$83|))))
    (forall( (|p_$84| $ptr) (|f_$29| $field))(!(=> (and (and ($is_proper |p_$84|) ($in_range_phys_ptr |p_$84|)) ($has_field_at0 ($field_type ($field |p_$84|)) |f_$29|)) (= ($phys_ptr_cast |p_$84| ($field_type |f_$29|)) ($dot |p_$84| |f_$29|)))  :pattern ( ($has_field_at0 ($field_type ($field |p_$84|)) |f_$29|) ($phys_ptr_cast |p_$84| ($field_type |f_$29|)))))
    (forall( (|p_$85| $ptr))(!(=> (and (and ($is_proper |p_$85|) ($in_range_phys_ptr |p_$85|)) ($has_field_at0 ($field_parent_type ($field |p_$85|)) ($field |p_$85|))) (= ($phys_ptr_cast |p_$85| ($field_parent_type ($field |p_$85|))) ($base |p_$85|)))  :pattern ( ($phys_ptr_cast |p_$85| ($field_parent_type ($field |p_$85|))) ($has_field_at0 ($field_parent_type ($field |p_$85|)) ($field |p_$85|)))))
    (forall( (|p_$86| $ptr) (|f_$30| $field))(!(= ($dot |p_$86| |f_$30|) ($ptr |f_$30| |p_$86|))  :pattern ( ($dot |p_$86| |f_$30|))))
    (forall( (|p_$87| $ptr) (|f_$31| $field))(!(=> ($is_phys_field |f_$31|) (= ($addr ($dot |p_$87| |f_$31|)) ($unchk_add $arch_ptr_type ($addr |p_$87|) ($field_offset |f_$31|))))  :pattern ( ($addr ($dot |p_$87| |f_$31|)))))
    (forall( (|p_$88| $ptr) (|f_$32| $field))(!(and (and (and (=> (or ($in_range_spec_ptr |p_$88|) ($is_ghost_field |f_$32|)) ($in_range_spec_ptr ($dot |p_$88| |f_$32|))) (=> (and ($in_range_phys_ptr |p_$88|) ($is_phys_field |f_$32|)) ($in_range_phys_ptr ($dot |p_$88| |f_$32|)))) (=> ($is_proper ($dot |p_$88| |f_$32|)) (=> (not (= |p_$88| ($phys_ptr_cast $null ($field_type ($field |p_$88|))))) (not (= ($dot |p_$88| |f_$32|) ($phys_ptr_cast $null ($field_type ($field ($dot |p_$88| |f_$32|))))))))) (=> (and ($is_proper |p_$88|) (= ($field_parent_type |f_$32|) ($field_type ($field |p_$88|)))) ($is_proper ($dot |p_$88| |f_$32|))))  :pattern ( ($dot |p_$88| |f_$32|))))
    (forall( (|p_$89| $ptr))(!(= ($emb0 |p_$89|) (ite ($is_primitive ($field_type ($field |p_$89|))) ($base |p_$89|) |p_$89|))  :pattern ( ($emb0 |p_$89|))))
    (forall( (|p_$90| $ptr) (|i_$2| Int))(!(= ($idx |p_$90| |i_$2|) ($dot ($base |p_$90|) ($field_plus ($field |p_$90|) |i_$2|)))  :pattern ( ($idx |p_$90| |i_$2|))))
    (forall( (|p_$91| $ptr) (|i_$3| Int) (|j| Int))(!(= ($idx ($idx |p_$91| |i_$3|) |j|) ($dot ($base |p_$91|) ($field_plus ($field |p_$91|) (+ |i_$3| |j|))))  :pattern ( ($idx ($idx |p_$91| |i_$3|) |j|))))
    (forall( (|p_$92| $ptr) (|i_$4| Int))(!(= ($addr ($idx |p_$92| |i_$4|)) ($unchk_add $arch_ptr_type ($addr |p_$92|) (* ($sizeof ($field_type ($field |p_$92|))) |i_$4|)))  :pattern ( ($addr ($idx |p_$92| |i_$4|)))))
    (forall( (|p_$93| $ptr) (|i_$5| Int))(!(=> ($is_proper ($idx |p_$93| |i_$5|)) (=> (not (= |p_$93| ($phys_ptr_cast $null ($field_type ($field |p_$93|))))) (not (= ($idx |p_$93| |i_$5|) ($phys_ptr_cast $null ($field_type ($field ($idx |p_$93| |i_$5|))))))))  :pattern ( ($idx |p_$93| |i_$5|))))
    (forall( (|p_$94| $ptr) (|i_$6| Int))(!(=> (and (or ($in_range_phys_ptr |p_$94|) ($in_range_phys_ptr ($base |p_$94|))) ($is_proper ($idx |p_$94| |i_$6|))) ($in_range_phys_ptr ($idx |p_$94| |i_$6|)))  :pattern ( ($idx |p_$94| |i_$6|))))
    (forall( (|p| $ptr))(= (not ($is_primitive ($field_type ($field |p|)))) (not ($is_primitive ($field_type ($field |p|))))))
    (forall( (|p1_$1| $ptr) (|p2_$1| $ptr))(!(= ($ptr_eq |p1_$1| |p2_$1|) (= ($addr |p1_$1|) ($addr |p2_$1|)))  :pattern ( ($ptr_eq |p1_$1| |p2_$1|))))
    (forall( (|p2_$0| $ptr) (|p1_$0| $ptr))(= (not ($ptr_eq |p1_$0| |p2_$0|)) (not ($ptr_eq |p1_$0| |p2_$0|))))
    (forall( (|p2| $ptr) (|p1| $ptr))(= ($ptr_eq |p1| |p2|) ($ptr_eq |p1| |p2|)))
    (forall( (|ptrs| $@Map@@$ptr@To@Bool@@) (|time| Int) (|S_$28| $state))(= (= ($writes_at |time|) |ptrs|) (= ($writes_at |time|) |ptrs|)))
    (forall( (|Q#k$1^151.14#tc2| Int) (|#l2_$1| $map_t..^^i4.^^i4) (|#l1_$3| Int) (|#l0_$4| Int))(!(=> (and (and (and (<= $min.i4 |Q#k$1^151.14#tc2|) (<= |Q#k$1^151.14#tc2| $max.i4)) (and (<= $min.i4 |#l1_$3|) (<= |#l1_$3| $max.i4))) (and (<= $min.i4 |#l0_$4|) (<= |#l0_$4| $max.i4))) (= ($select.$map_t..^^i4.^^i4 (F@lambda@4 |#l2_$1| |#l1_$3| |#l0_$4|) |Q#k$1^151.14#tc2|) (ite (= |Q#k$1^151.14#tc2| |#l0_$4|) |#l1_$3| ($select.$map_t..^^i4.^^i4 |#l2_$1| |Q#k$1^151.14#tc2|))))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 (F@lambda@4 |#l2_$1| |#l1_$3| |#l0_$4|) |Q#k$1^151.14#tc2|))))
    (forall( (|Q#k$1^194.37#dt1| $ptr) (|#l1_$1| $map_t..$ptr_to..^Node.^^bool) (|#l0_$1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@7 |#l1_$1| ($phys_ptr_cast |#l0_$1| ^Node)) ($phys_ptr_cast |Q#k$1^194.37#dt1| ^Node)) (or (= ($phys_ptr_cast |Q#k$1^194.37#dt1| ^Node) ($phys_ptr_cast |#l0_$1| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool |#l1_$1| ($phys_ptr_cast |Q#k$1^194.37#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@7 |#l1_$1| ($phys_ptr_cast |#l0_$1| ^Node)) ($phys_ptr_cast |Q#k$1^194.37#dt1| ^Node)))))
    (forall( (|Q#k$1^94.14#tc2| Int))(!(=> (and (<= $min.i4 |Q#k$1^94.14#tc2|) (<= |Q#k$1^94.14#tc2| $max.i4)) (= ($select.$map_t..^^i4.^^i4 F@lambda@3 |Q#k$1^94.14#tc2|) 0))  :weight  10 :pattern ( ($select.$map_t..^^i4.^^i4 F@lambda@3 |Q#k$1^94.14#tc2|))))
    (forall( (|Q#m$1^240.15#dt1| $ptr) (|#l2_$0| $map_t..$ptr_to..^Node.^^bool) (|#l1_$0| $map_t..$ptr_to..^Node.^^bool) (|#l0_$0| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@8 |#l2_$0| |#l1_$0| ($phys_ptr_cast |#l0_$0| ^Node)) ($phys_ptr_cast |Q#m$1^240.15#dt1| ^Node)) (or (or (= ($phys_ptr_cast |Q#m$1^240.15#dt1| ^Node) ($phys_ptr_cast |#l0_$0| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool |#l1_$0| ($phys_ptr_cast |Q#m$1^240.15#dt1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool |#l2_$0| ($phys_ptr_cast |Q#m$1^240.15#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@8 |#l2_$0| |#l1_$0| ($phys_ptr_cast |#l0_$0| ^Node)) ($phys_ptr_cast |Q#m$1^240.15#dt1| ^Node)))))
    (forall( (|Q#m$1^283.15#dt1| $ptr) (|#l2| $map_t..$ptr_to..^Node.^^bool) (|#l1| $map_t..$ptr_to..^Node.^^bool) (|#l0| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@9 |#l2| |#l1| ($phys_ptr_cast |#l0| ^Node)) ($phys_ptr_cast |Q#m$1^283.15#dt1| ^Node)) (or (or (= ($phys_ptr_cast |Q#m$1^283.15#dt1| ^Node) ($phys_ptr_cast |#l0| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool |#l1| ($phys_ptr_cast |Q#m$1^283.15#dt1| ^Node))) ($select.$map_t..$ptr_to..^Node.^^bool |#l2| ($phys_ptr_cast |Q#m$1^283.15#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@9 |#l2| |#l1| ($phys_ptr_cast |#l0| ^Node)) ($phys_ptr_cast |Q#m$1^283.15#dt1| ^Node)))))
    (forall( (|Q#m$1^93.12#dt1| $ptr) (|#l0_$5| $map_t..$ptr_to..^Node.^^bool))(!($eq.$map_t..$ptr_to..^Node.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool (F@lambda@2 |#l0_$5|) ($phys_ptr_cast |Q#m$1^93.12#dt1| ^Node)) |#l0_$5|)  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool (F@lambda@2 |#l0_$5|) ($phys_ptr_cast |Q#m$1^93.12#dt1| ^Node)))))
    (forall( (|Q#n$1^153.15#dt1| $ptr) (|#l0_$3| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@5 ($phys_ptr_cast |#l0_$3| ^Node)) ($phys_ptr_cast |Q#n$1^153.15#dt1| ^Node)) (= ($phys_ptr_cast |Q#n$1^153.15#dt1| ^Node) ($phys_ptr_cast |#l0_$3| ^Node)))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@5 ($phys_ptr_cast |#l0_$3| ^Node)) ($phys_ptr_cast |Q#n$1^153.15#dt1| ^Node)))))
    (forall( (|Q#n$1^163.41#dt1| $ptr) (|#l1_$2| $map_t..$ptr_to..^Node.^^bool) (|#l0_$2| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@6 |#l1_$2| ($phys_ptr_cast |#l0_$2| ^Node)) ($phys_ptr_cast |Q#n$1^163.41#dt1| ^Node)) (or (= ($phys_ptr_cast |Q#n$1^163.41#dt1| ^Node) ($phys_ptr_cast |#l0_$2| ^Node)) ($select.$map_t..$ptr_to..^Node.^^bool |#l1_$2| ($phys_ptr_cast |Q#n$1^163.41#dt1| ^Node))))  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool (F@lambda@6 |#l1_$2| ($phys_ptr_cast |#l0_$2| ^Node)) ($phys_ptr_cast |Q#n$1^163.41#dt1| ^Node)))))
    (forall( (|Q#n$1^93.12#dt1| $ptr))(!(= ($select.$map_t..$ptr_to..^Node.^^bool F@lambda@1 ($phys_ptr_cast |Q#n$1^93.12#dt1| ^Node)) false)  :weight  10 :pattern ( ($select.$map_t..$ptr_to..^Node.^^bool F@lambda@1 ($phys_ptr_cast |Q#n$1^93.12#dt1| ^Node)))))
    (forall( (|q_$29| $ptr) (|$fk_base_$0| $field_kind) (|p_$213| $ptr) (|T_$18| $ctype) (|sz_$36| Int))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@0 |$fk_base_$0| |p_$213| |T_$18| |sz_$36|) |q_$29|) (and (and (and (and (and (= ($emb0 |q_$29|) ($emb0 |p_$213|)) (= ($field_type ($field |q_$29|)) |T_$18|)) (= ($field_arr_root ($field |q_$29|)) ($field_arr_root ($field |p_$213|)))) (and (<= 0 ($index_within |q_$29| |p_$213|)) (<= ($index_within |q_$29| |p_$213|) (- |sz_$36| 1)))) (= |q_$29| ($dot ($base |p_$213|) ($field_plus ($field |p_$213|) ($index_within |q_$29| |p_$213|))))) (not (= ($field_kind ($field |q_$29|)) |$fk_base_$0|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@0 |$fk_base_$0| |p_$213| |T_$18| |sz_$36|) |q_$29|))))
    (forall( (|q_$30| $ptr) (|sz_$37| Int) (|p_$214| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@1 |sz_$37| |p_$214|) |q_$30|) (and (and (<= 0 ($index_within |q_$30| |p_$214|)) (<= ($index_within |q_$30| |p_$214|) (- |sz_$37| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($full_extent ($idx |p_$214| ($index_within |q_$30| |p_$214|))) |q_$30|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@1 |sz_$37| |p_$214|) |q_$30|))))
    (forall( (|q_$31| $ptr) (|sz_$38| Int) (|p_$215| $ptr) (|T_$19| $ctype))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@2 |sz_$38| |p_$215| |T_$19|) |q_$31|) (and (and (<= 0 ($index_within |q_$31| |p_$215|)) (<= ($index_within |q_$31| |p_$215|) (- |sz_$38| 1))) (= |q_$31| ($idx |p_$215| ($index_within |q_$31| |p_$215|)))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (lambda@2 |sz_$38| |p_$215| |T_$19|) |q_$31|))))
    (forall( (|r_$11| $ptr))(!(= ($full_extent |r_$11|) (lambda@11 |r_$11| $full_extent_state))  :pattern ( ($full_extent |r_$11|))))
    (forall( (|r_$17| $ptr) (|S0_$23| $state) (|S_$133| $state) (|o_$12| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Int@@$ (lambda@3 |S0_$23| |S_$133| |o_$12|) |r_$17|) (ite (or (= ($owner |S0_$23| |r_$17|) |o_$12|) (= |r_$17| |o_$12|)) ($current_timestamp |S_$133|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$23|) |r_$17|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (lambda@3 |S0_$23| |S_$133| |o_$12|) |r_$17|))))
    (forall( (|r_$18| $ptr) (|S0_$24| $state) (|o_$13| $ptr))(!(= (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@4 |S0_$24| |o_$13|) |r_$18|) (ite (= ($owner |S0_$24| |r_$18|) |o_$13|) $me (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$24|) |r_$18|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@4 |S0_$24| |o_$13|) |r_$18|))))
    (forall( (|r_$19| $ptr) (|o_$14| $ptr) (|S0_$25| $state))(!(= (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@5 |o_$14| |S0_$25|) |r_$19|) (ite (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S0_$25| |o_$14|) |r_$19|) |o_$14| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$25|) |r_$19|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ (lambda@5 |o_$14| |S0_$25|) |r_$19|))))
    (forall( (|S_$100| $state) (|p_$149| $ptr) (|q_$12| $ptr) (|l_$4| $label))(!(=> ($in_vdomain_lab |S_$100| |p_$149| |q_$12| |l_$4|) ($inv_lab |S_$100| |p_$149| |l_$4|))  :pattern ( ($in_vdomain_lab |S_$100| |p_$149| |q_$12| |l_$4|))))
    (forall( (|S_$101| $state) (|p_$150| $ptr))(!(=> (and ($full_stop |S_$101|) (and (and (and (and ($is (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|) ($field_type ($field (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)))) ($is_proper (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|))) (= ($owner |S_$101| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)) $me)) ($closed |S_$101| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|))) (not ($is_primitive ($field_type ($field (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|))))))) ($in_domain |S_$101| |p_$150| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)))  :pattern ( ($in_domain |S_$101| |p_$150| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$101|) |p_$150|)))))
    (forall( (|S_$102| $state) (|p_$151| $ptr) (|q_$13| $ptr))(!(and ($instantiate_ptr (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$102|) |q_$13|)) (=> ($in_domain |S_$102| |p_$151| |q_$13|) (and (and (and (and (and (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$102|) |p_$151|) |q_$13|) (and (and (and (and ($is |q_$13| ($field_type ($field |q_$13|))) ($is_proper |q_$13|)) (= ($owner |S_$102| |q_$13|) $me)) ($closed |S_$102| |q_$13|)) (not ($is_primitive ($field_type ($field |q_$13|)))))) ($closed |S_$102| |p_$151|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$102|) |q_$13|))) |p_$151|)) ($inv2 |S_$102| |S_$102| |p_$151| ($field_type ($field |p_$151|)))) ($set_in0 |p_$151| ($owns |S_$102| ($owner |S_$102| |p_$151|))))))  :pattern ( ($in_domain |S_$102| |p_$151| |q_$13|))))
    (forall( (|S_$103| $state) (|p_$152| $ptr) (|q_$14| $ptr))(!(=> (and (and ($full_stop |S_$103|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$103|) |q_$14|))) |p_$152|)) (and (and (and (and ($is |q_$14| ($field_type ($field |q_$14|))) ($is_proper |q_$14|)) (= ($owner |S_$103| |q_$14|) $me)) ($closed |S_$103| |q_$14|)) (not ($is_primitive ($field_type ($field |q_$14|)))))) ($in_domain |S_$103| |p_$152| |q_$14|))  :pattern ( ($in_domain |S_$103| |p_$152| |q_$14|))))
    (forall( (|S_$104| $state) (|q_$15| $ptr) (|r_$7| $ptr))(!(=> (and (and ($in_domain |S_$104| |q_$15| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|)) ($is_sequential_field ($f_owns ($field_type ($field |q_$15|))))) ($set_in0 |r_$7| ($owns |S_$104| |q_$15|))) (and (and (= ($owner |S_$104| |r_$7|) |q_$15|) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |r_$7|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|))) ($in_domain |S_$104| |r_$7| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|))))  :pattern ( ($in_domain |S_$104| |r_$7| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$104|) |q_$15|)))))
    (forall( (|S_$105| $state) (|p_$153| $ptr))(!(= ($as_deep_domain |S_$105| |p_$153|) |p_$153|)  :pattern ( ($as_deep_domain |S_$105| |p_$153|))))
    (forall( (|S_$107| $state) (|p_$155| $ptr) (|q_$16| $ptr) (|r_$8| $ptr))(!(=> (and (and (and ($good_state |S_$107|) ($is_sequential_field ($f_owns ($field_type ($field |p_$155|))))) ($in_domain |S_$107| |p_$155| |q_$16|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$107| |p_$155|) |r_$8|)) ($in_domain |S_$107| |r_$8| |q_$16|))  :pattern ( ($in_domain |S_$107| |p_$155| ($as_deep_domain |S_$107| |q_$16|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S_$107| |p_$155|) |r_$8|))))
    (forall( (|S_$108| $state) (|p_$156| $ptr) (|q_$17| $ptr) (|r_$9| $ptr))(!(=> (and (and ($is_volatile_field ($f_owns ($field_type ($field |q_$17|)))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|))) |q_$17|)) (forall( (|S1_$14| $state))(=> (and (and ($inv2 |S1_$14| |S1_$14| |q_$17| ($field_type ($field |q_$17|))) (= ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$14|) |p_$156|)) ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|)))) (= ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$14|) |p_$156|))) ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|))))) ($set_in0 |r_$9| ($owns |S1_$14| |q_$17|))))) (and ($in_vdomain |S_$108| |r_$9| |p_$156|) ($set_in0 |r_$9| ($owns |S_$108| |q_$17|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$108|) |p_$156|))) |q_$17|) ($in_vdomain |S_$108| |r_$9| |p_$156|))))
    (forall( (|S_$109| $state) (|p_$157| $ptr) (|q_$18| $ptr))(!(=> ($in_vdomain |S_$109| |p_$157| |q_$18|) ($in_domain |S_$109| |p_$157| |q_$18|))  :pattern ( ($in_vdomain |S_$109| |p_$157| |q_$18|))))
    (forall( (|s_$11| $@Map@@$ptr@To@Bool@@) (|p_$70| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$11| |p_$70|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$11| |p_$70|)))
    (forall( (|S_$110| $state) (|p_$158| $ptr) (|d| $ptr) (|f_$46| $field))(!(=> (and (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$110|) |d|))) |p_$158|) ($is_sequential_field |f_$46|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$110|) |f_$46|) |p_$158|) ($fetch_from_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$110|) |d|)) |p_$158| |f_$46|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$110|) |f_$46|) |p_$158|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($ver_domain ($int_to_version (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$110|) |d|))) |p_$158|) ($is_sequential_field |f_$46|))))
    (forall( (|S_$111| $state) (|c_$11| $ptr) (|obj| $ptr) (|ptr| $ptr))(!(= ($by_claim |S_$111| |c_$11| |obj| |ptr|) |ptr|)  :pattern ( ($by_claim |S_$111| |c_$11| |obj| |ptr|))))
    (forall( (|S_$112| $state) (|p_$160| $ptr) (|c_$12| $ptr) (|f_$47| $field))(!(=> (and (and (and ($good_state |S_$112|) ($closed |S_$112| |c_$12|)) ($in_claim_domain |p_$160| |c_$12|)) ($is_sequential_field |f_$47|)) (and ($in_claim_domain |p_$160| |c_$12|) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$112|) |f_$47|) |p_$160|) ($fetch_from_domain ($claim_version |c_$12|) |p_$160| |f_$47|))))  :pattern ( ($in_claim_domain |p_$160| |c_$12|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$112|) |f_$47|) |p_$160|))))
    (forall( (|S_$113| $state) (|p_$161| $ptr) (|q_$19| $ptr) (|c_$13| $ptr) (|f_$48| $field))(!(=> (and (and (and ($good_state |S_$113|) ($closed |S_$113| |c_$13|)) ($in_claim_domain |p_$161| |c_$13|)) ($is_sequential_field |f_$48|)) (and ($in_claim_domain |p_$161| |c_$13|) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$113|) |f_$48|) |p_$161|) ($fetch_from_domain ($claim_version |c_$13|) |p_$161| |f_$48|))))  :pattern ( ($by_claim |S_$113| |c_$13| |q_$19| ($dot |p_$161| |f_$48|)))))
    (forall( (|S_$115| $state) (|t_$46| $ctype) (|p_$163| $ptr) (|approver_$1| $field) (|subject_$2| $field))(!(=> (and (and (and ($full_stop |S_$115|) ($is_approved_by |t_$46| |approver_$1| |subject_$2|)) ($closed |S_$115| |p_$163|)) (or (= ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$115|) |approver_$1|) |p_$163|)) $me) (= ($int_to_ptr ($fetch_from_vv ($read_vol_version |S_$115| |p_$163|) |p_$163| |approver_$1|)) $me))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$115|) |subject_$2|) |p_$163|) ($fetch_from_vv ($read_vol_version |S_$115| |p_$163|) |p_$163| |subject_$2|)))  :pattern ( ($is_approved_by |t_$46| |approver_$1| |subject_$2|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$115|) |subject_$2|) |p_$163|))))
    (forall( (|S_$116| $state) (|p_$164| $ptr) (|t_$47| $ctype) (|subject_$3| $field))(!(=> (and (and (and ($full_stop |S_$116|) ($closed |S_$116| |p_$164|)) ($is_owner_approved |t_$47| |subject_$3|)) (= ($owner |S_$116| |p_$164|) $me)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$116|) |subject_$3|) |p_$164|) ($fetch_from_vv ($read_vol_version |S_$116| |p_$164|) |p_$164| |subject_$3|)))  :pattern ( ($is_owner_approved |t_$47| |subject_$3|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$116|) |subject_$3|) |p_$164|))))
    (forall( (|S_$117| $state) (|r_$10| $ptr))(!(= ($extent |S_$117| |r_$10|) (lambda@10 |r_$10| |S_$117|))  :pattern ( ($extent |S_$117| |r_$10|))))
    (forall( (|S_$118| $state) (|p_$165| $ptr) (|r_$12| $ptr))(!($extent_hint |p_$165| |r_$12|)  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$118| |r_$12| ($field_type ($field |r_$12|))) |p_$165|))))
    (forall( (|S_$119| $state) (|r_$13| $ptr))(!(= ($extent_mutable |S_$119| |r_$13|) (and ($mutable |S_$119| |r_$13|) (forall( (|p_$166| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$119| |r_$13| ($field_type ($field |r_$13|))) |p_$166|) ($mutable |S_$119| |p_$166|))  :pattern ( ($extent_hint |p_$166| |r_$13|))))))  :pattern ( ($extent_mutable |S_$119| |r_$13|))))
    (forall( (|s_$12| $@Map@@$ptr@To@Bool@@) (|p_$71| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$12| |p_$71|) (MapRead$$@Map@@$ptr@To@Bool@@$ |s_$12| |p_$71|)))
    (forall( (|S_$121| $state) (|T_$16| $ctype) (|sz_$34| Int) (|p_$168| $ptr))(!(=> ($extent_mutable |S_$121| ($ptr ($as_field_with_type ($field |p_$168|) ($array |T_$16| |sz_$34|)) ($base |p_$168|))) ($is_mutable_array |S_$121| ($dot |p_$168| ($array_emb ($element_type ($field_type ($field |p_$168|))) ($array_length ($field_type ($field |p_$168|))))) |T_$16| |sz_$34|))  :pattern ( ($extent_mutable |S_$121| ($ptr ($as_field_with_type ($field |p_$168|) ($array |T_$16| |sz_$34|)) ($base |p_$168|))))))
    (forall( (|S_$122| $state) (|T_$17| $ctype) (|sz_$35| Int) (|p_$169| $ptr))(!(=> ($in_range_phys_ptr |p_$169|) (=> (and ($is_primitive |T_$17|) ($mutable |S_$122| ($ptr ($as_field_with_type ($field |p_$169|) ($array |T_$17| |sz_$35|)) ($base |p_$169|)))) ($is_mutable_array |S_$122| ($dot |p_$169| ($array_emb ($element_type ($field_type ($field |p_$169|))) ($array_length ($field_type ($field |p_$169|))))) |T_$17| |sz_$35|)))  :pattern ( ($mutable |S_$122| ($ptr ($as_field_with_type ($field |p_$169|) ($array |T_$17| |sz_$35|)) ($base |p_$169|))))))
    (forall( (|S_$125| $state) (|#p_$9| $ptr))(!(= ($first_option_typed |S_$125| |#p_$9|) (=> ($is_union_type ($field_type ($field |#p_$9|))) (not (= ($owner |S_$125| ($dot |#p_$9| ($first_union_field ($field_type ($field |#p_$9|))))) $inactive_union_owner))))  :pattern ( ($first_option_typed |S_$125| |#p_$9|))))
    (forall( (|S_$126| $state) (|p_$174| $ptr))(!(= ($all_first_option_typed |S_$126| |p_$174|) (and ($first_option_typed |S_$126| |p_$174|) (forall( (|q_$22| $ptr) (|t_$48| $ctype))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$126| |p_$174| ($field_type ($field |p_$174|))) |q_$22|) ($first_option_typed |S_$126| |q_$22|))  :pattern ( ($extent_hint ($ptr ($as_field_with_type ($field |q_$22|) ($as_union_type |t_$48|)) ($base |q_$22|)) |p_$174|))))))  :pattern ( ($all_first_option_typed |S_$126| |p_$174|))))
    (forall( (|S_$127| $state) (|p_$175| $ptr) (|f_$50| $field))(!(and (and (and ($good_state |S_$127|) ($is_union_field |f_$50|)) (=> (not (= ($owner |S_$127| ($dot |p_$175| |f_$50|)) $inactive_union_owner)) (= ($active_option |S_$127| |p_$175|) |f_$50|))) (=> (= ($owner |S_$127| ($dot |p_$175| |f_$50|)) $inactive_union_owner) (forall( (|q_$23| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$127| ($dot |p_$175| |f_$50|) ($field_type ($field ($dot |p_$175| |f_$50|)))) |q_$23|) (not (and (and (and (not ($is_primitive ($field_type ($field |q_$23|)))) ($is_proper |q_$23|)) (= ($owner |S_$127| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$127|) |q_$23|)) $me)) (not (= |q_$23| ($phys_ptr_cast $null ($field_type ($field |q_$23|))))))))  :pattern ( ($extent_hint |q_$23| |p_$175|))))))  :pattern ( ($is_union_field |f_$50|) ($owner |S_$127| ($dot |p_$175| |f_$50|)))))
    (forall( (|S_$128| $state) (|p_$176| $ptr) (|f_$51| $field))(!(=> (and ($good_state |S_$128|) ($is_union_field |f_$51|)) (or (= |f_$51| ($active_option |S_$128| |p_$176|)) (= ($owner |S_$128| ($dot |p_$176| |f_$51|)) $inactive_union_owner)))  :pattern ( ($is_union_field |f_$51|) ($dot |p_$176| |f_$51|) ($active_option |S_$128| |p_$176|))))
    (forall( (|S_$129| $state) (|p_$177| $ptr))(!(=> ($good_state |S_$129|) (and (= ($phys_ptr_cast ($vs_base_ref ($vs_ctor |S_$129| |p_$177|)) ($field_type ($field |p_$177|))) |p_$177|) (= ($vs_state ($vs_ctor |S_$129| |p_$177|)) |S_$129|)))  :pattern ( ($vs_ctor |S_$129| |p_$177|))))
    (forall( (|s_$13| $state) (|q_$7| $ptr) (|a_$7| $ptr) (|sz_$26| Int))(!(= ($in_composite_array_lev2 |s_$13| |q_$7| |a_$7| |sz_$26|) (and (and (<= 0 ($index_within |q_$7| |a_$7|)) (<= ($index_within |q_$7| |a_$7|) (- |sz_$26| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |s_$13| ($idx |a_$7| ($index_within |q_$7| |a_$7|)) ($field_type ($field |a_$7|))) |q_$7|)))  :pattern ( ($in_composite_array_lev2 |s_$13| |q_$7| |a_$7| |sz_$26|))))
    (forall( (|S_$130| $state) (|p_$178| $ptr) (|v_$2| Int))(!(and (and (and (and (= ($f_timestamp |S_$130|) ($f_timestamp ($update_int |S_$130| |p_$178| |v_$2|))) (= ($f_closed |S_$130|) ($f_closed ($update_int |S_$130| |p_$178| |v_$2|)))) (= ($f_owner |S_$130|) ($f_owner ($update_int |S_$130| |p_$178| |v_$2|)))) (= ($roots |S_$130|) ($roots ($update_int |S_$130| |p_$178| |v_$2|)))) (= ($heap ($update_int |S_$130| |p_$178| |v_$2|)) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$130|) ($field |p_$178|) (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$130|) ($field |p_$178|)) ($base |p_$178|) |v_$2|))))  :pattern ( ($update_int |S_$130| |p_$178| |v_$2|))))
    (forall( (|S_$132| $state) (|id_$0| Int) (|length| Int))(!(=> ($good_state |S_$132|) (and ($in_range_phys_ptr ($get_string_literal |id_$0| |length|)) ($is_thread_local_array |S_$132| ($get_string_literal |id_$0| |length|) ^^i1 (+ |length| 1))))  :pattern ( ($good_state |S_$132|) ($get_string_literal |id_$0| |length|))))
    (forall( (|s_$17| $state) (|p_$144| $ptr))(!(= ($claimed_closed |s_$17| |p_$144|) ($closed |s_$17| |p_$144|))  :pattern ( ($claimed_closed |s_$17| |p_$144|))))
    (forall( (|s_$19| $struct))($good_state ($vs_state |s_$19|)))
    (forall( (|S_$20| $state) (|t_$17| $token))(= (and ($good_state_ext |t_$17| |S_$20|) ($full_stop |S_$20|)) (and ($good_state_ext |t_$17| |S_$20|) ($full_stop |S_$20|))))
    (forall( (|S_$21| $state))(= (forall( (|p_$35_$1| $ptr))(!(<= ($timestamp |S_$21| |p_$35_$1|) ($current_timestamp |S_$21|))  :pattern ( ($owner |S_$21| |p_$35_$1|)))) (forall( (|p_$35| $ptr))(!(<= ($timestamp |S_$21| |p_$35|) ($current_timestamp |S_$21|))  :pattern ( ($owner |S_$21| |p_$35|))))))
    (forall( (|S_$22| $state))(= (forall( (|p_$36_$0| $ptr) (|q_$2_$0| $ptr))(!(=> (and (and ($good_state |S_$22|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$22|) ($f_owns ($field_type ($field |q_$2_$0|)))) |q_$2_$0|)) |p_$36_$0|)) ($closed |S_$22| |q_$2_$0|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$0|)))) (= ($owner |S_$22| |p_$36_$0|) |q_$2_$0|)) ($closed |S_$22| |p_$36_$0|)) (not (= |p_$36_$0| ($phys_ptr_cast $null ($field_type ($field |p_$36_$0|)))))) true))  :pattern ( ($set_in_pos |p_$36_$0| ($owns |S_$22| |q_$2_$0|))))) (forall( (|p_$36| $ptr) (|q_$2| $ptr))(!(=> (and (and ($good_state |S_$22|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$22|) ($f_owns ($field_type ($field |q_$2|)))) |q_$2|)) |p_$36|)) ($closed |S_$22| |q_$2|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36|)))) (= ($owner |S_$22| |p_$36|) |q_$2|)) ($closed |S_$22| |p_$36|)) (not (= |p_$36| ($phys_ptr_cast $null ($field_type ($field |p_$36|)))))) true))  :pattern ( ($set_in_pos |p_$36| ($owns |S_$22| |q_$2|)))))))
    (forall( (|S_$24| $state) (|S0_$0| $state))(= (and (and (and (= ($f_timestamp |S0_$0|) ($f_timestamp |S_$24|)) (= ($f_closed |S0_$0|) ($f_closed |S_$24|))) (= ($f_owner |S0_$0|) ($f_owner |S_$24|))) (= ($roots |S0_$0|) ($roots |S_$24|))) (and (and (and (= ($f_timestamp |S0_$0|) ($f_timestamp |S_$24|)) (= ($f_closed |S0_$0|) ($f_closed |S_$24|))) (= ($f_owner |S0_$0|) ($f_owner |S_$24|))) (= ($roots |S0_$0|) ($roots |S_$24|)))))
    (forall( (|S_$48| $state) (|p_$95| $ptr) (|T_$5| $ctype) (|sz_$18| Int))(!(= ($is_array |S_$48| |p_$95| |T_$5| |sz_$18|) (and (and (and (and (and (and ($is |p_$95| |T_$5|) ($is_proper |p_$95|)) (>= ($field_arr_size ($field |p_$95|)) (+ ($field_arr_index ($field |p_$95|)) |sz_$18|))) (= |p_$95| ($idx ($dot ($base |p_$95|) ($field_arr_root ($field |p_$95|))) ($field_arr_index ($field |p_$95|))))) (not (= ($field_kind ($field |p_$95|)) $fk_base))) (>= ($field_arr_index ($field |p_$95|)) 0)) (not ($is_primitive ($field_type ($field ($emb0 |p_$95|)))))))  :pattern ( ($is_array |S_$48| |p_$95| |T_$5| |sz_$18|))))
    (forall( (|S_$49| $state) (|p_$96| $ptr) (|T_$6| $ctype) (|sz_$19| Int))(!(= ($is_thread_local_array |S_$49| |p_$96| |T_$6| |sz_$19|) (and ($is_array |S_$49| |p_$96| |T_$6| |sz_$19|) (ite ($is_primitive |T_$6|) ($thread_local |S_$49| |p_$96|) (forall( (|i_$0_$1| Int))(!(=> (and (<= 0 |i_$0_$1|) (< |i_$0_$1| |sz_$19|)) ($thread_local |S_$49| ($idx |p_$96| |i_$0_$1|)))  :pattern ( ($owner |S_$49| ($idx |p_$96| |i_$0_$1|))))))))  :pattern ( ($is_thread_local_array |S_$49| |p_$96| |T_$6| |sz_$19|))))
    (forall( (|S_$50| $state) (|p_$97| $ptr) (|T_$7| $ctype) (|sz_$20| Int))(!(= ($is_mutable_array |S_$50| |p_$97| |T_$7| |sz_$20|) (and ($is_array |S_$50| |p_$97| |T_$7| |sz_$20|) (ite ($is_primitive |T_$7|) ($mutable |S_$50| ($emb0 |p_$97|)) (forall( (|i_$8| Int))(!(=> (and (<= 0 |i_$8|) (< |i_$8| |sz_$20|)) ($mutable |S_$50| ($idx |p_$97| |i_$8|)))  :pattern ( ($idx |p_$97| |i_$8|)))))))  :pattern ( ($is_mutable_array |S_$50| |p_$97| |T_$7| |sz_$20|))))
    (forall( (|S_$53| $state) (|T_$15| $ctype) (|sz_$32| Int) (|p_$110| $ptr) (|a_$8| $ptr))(!(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$53| |a_$8| ($array |T_$15| |sz_$32|)) |p_$110|) (or (= |p_$110| |a_$8|) (and (not ($is_primitive |T_$15|)) ($in_composite_array_lev2 |S_$53| |p_$110| ($dot |a_$8| ($array_emb ($element_type ($field_type ($field |a_$8|))) ($array_length ($field_type ($field |a_$8|))))) |sz_$32|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$53| |a_$8| ($array |T_$15| |sz_$32|)) |p_$110|))))
    (forall( (|S_$54| $state) (|p_$111| $ptr))(!(= ($owner |S_$54| |p_$111|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$54|) |p_$111|))  :inline  false :pattern ( ($owner |S_$54| |p_$111|))))
    (forall( (|S_$55| $state) (|p_$112| $ptr))(!(= ($closed |S_$55| |p_$112|) (and ($is_proper |p_$112|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S_$55|) |p_$112|)))  :inline  false :pattern ( ($closed |S_$55| |p_$112|))))
    (forall( (|S_$56| $state) (|p_$113| $ptr))(!(= ($timestamp |S_$56| |p_$113|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$56|) |p_$113|))  :inline  false :pattern ( ($timestamp |S_$56| |p_$113|))))
    (forall( (|S_$57| $state) (|p_$114| $ptr))(!(= ($ref_cnt |S_$57| |p_$114|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$57|) ($f_ref_cnt ($field_type ($field |p_$114|)))) |p_$114|))  :inline  false :pattern ( ($ref_cnt |S_$57| |p_$114|))))
    (forall( (|S_$58| $state) (|p_$115| $ptr))(!(= ($owns |S_$58| |p_$115|) ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$58|) ($f_owns ($field_type ($field |p_$115|)))) |p_$115|)))  :pattern ( ($owns |S_$58| |p_$115|))))
    (forall( (|S_$59| $state) (|p_$116| $ptr))(!(= ($mutable |S_$59| |p_$116|) (and (and ($is_proper |p_$116|) (= ($owner |S_$59| ($emb0 |p_$116|)) $me)) (not ($closed |S_$59| ($emb0 |p_$116|)))))  :pattern ( ($mutable |S_$59| |p_$116|))))
    (forall( (|s_$6| $state))(= |s_$6| |s_$6|))
    (forall( (|S_$60| $state) (|p_$117| $ptr))(!(=> ($good_state |S_$60|) (=> (and (and ($is_proper |p_$117|) ($in_range_phys_ptr |p_$117|)) (= ($owner |S_$60| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$60|) ($emb0 |p_$117|))) $me)) (= (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$60|)) ($addr |p_$117|) ($field_type ($field |p_$117|))) |p_$117|)))  :pattern ( ($addr |p_$117|) ($owner |S_$60| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$60|) |p_$117|)))))
    (forall( (|S_$61| $state) (|p_$118| $ptr) (|f_$40| $field))(!(=> ($good_state |S_$61|) (=> (and (and ($is_proper ($dot |p_$118| |f_$40|)) ($in_range_phys_ptr ($dot |p_$118| |f_$40|))) (= ($owner |S_$61| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$61|) |p_$118|)) $me)) (= (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$61|)) ($addr ($dot |p_$118| |f_$40|)) ($field_type |f_$40|)) ($dot |p_$118| |f_$40|))))  :pattern ( ($addr ($dot |p_$118| |f_$40|)) ($owner |S_$61| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$61|) |p_$118|)))))
    (forall( (|S_$62| $state) (|p_$119| $ptr) (|q_$8| $ptr))(!(=> ($good_state |S_$62|) (=> (and (and ($is_proper |p_$119|) ($in_range_phys_ptr |p_$119|)) (= ($owner |S_$62| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$62|) ($emb0 |p_$119|))) $me)) (= (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$62|)) ($addr |p_$119|) ($field_type ($field |p_$119|))) |p_$119|)))  :pattern ( ($retype |S_$62| |q_$8|) ($as_addr |p_$119| ($field_type ($field |q_$8|)) ($addr |q_$8|)))))
    (forall( (|S_$63| $state) (|p_$121| $ptr))(!(= ($retype |S_$63| |p_$121|) (MapRead$$@Map@@Int@$ctype@To@$ptr@@$ ($typemap ($f_owner |S_$63|)) ($addr |p_$121|) ($field_type ($field |p_$121|))))  :pattern ( ($retype |S_$63| |p_$121|))))
    (forall( (|S_$65| $state) (|p_$123| $ptr))(!(= ($thread_local |S_$65| |p_$123|) (and ($is_proper |p_$123|) (ite ($is_primitive ($field_type ($field |p_$123|))) (and (or ($is_sequential_field ($field |p_$123|)) (not ($closed |S_$65| ($emb0 |p_$123|)))) (and (and (and (not ($is_primitive ($field_type ($field ($emb0 |p_$123|))))) ($is_proper ($emb0 |p_$123|))) (= ($owner |S_$65| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$65|) ($emb0 |p_$123|))) $me)) (not (= ($emb0 |p_$123|) ($phys_ptr_cast $null ($field_type ($field ($emb0 |p_$123|)))))))) (and (and (and (not ($is_primitive ($field_type ($field |p_$123|)))) ($is_proper |p_$123|)) (= ($owner |S_$65| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$65|) |p_$123|)) $me)) (not (= |p_$123| ($phys_ptr_cast $null ($field_type ($field |p_$123|)))))))))  :pattern ( ($thread_local |S_$65| |p_$123|))))
    (forall( (|S_$66| $state))(!(=> ($function_entry |S_$66|) (and (and ($full_stop |S_$66|) (>= ($current_timestamp |S_$66|) 0)) (forall( (|p_$35_$0| $ptr))(!(<= ($timestamp |S_$66| |p_$35_$0|) ($current_timestamp |S_$66|))  :pattern ( ($owner |S_$66| |p_$35_$0|))))))  :pattern ( ($function_entry |S_$66|))))
    (forall( (|S_$67| $state))(!(=> ($full_stop |S_$67|) (and ($good_state |S_$67|) ($invok_state |S_$67|)))  :pattern ( ($full_stop |S_$67|))))
    (forall( (|S_$68| $state))(!(=> ($invok_state |S_$68|) ($good_state |S_$68|))  :pattern ( ($invok_state |S_$68|))))
    (forall( (|s_$7| $state))(= (forall( (|f_$22| $pure_function))(!(< ($frame_level |f_$22|) $current_frame_level)  :pattern ( ($frame_level |f_$22|)))) (forall( (|f_$22| $pure_function))(!(< ($frame_level |f_$22|) $current_frame_level)  :pattern ( ($frame_level |f_$22|))))))
    (forall( (|S_$70| $state) (|#r_$1| $ptr) (|#t_$3| $ctype) (|#f_$0| $field) (|#sz| Int))(!(=> ($good_state |S_$70|) (= ($owns |S_$70| ($ptr ($as_field_with_type |#f_$0| ($array |#t_$3| |#sz|)) |#r_$1|)) $set_empty))  :pattern ( ($owns |S_$70| ($ptr ($as_field_with_type |#f_$0| ($array |#t_$3| |#sz|)) |#r_$1|)))))
    (forall( (|S_$71| $state) (|#p_$8| $ptr) (|#t_$4| $ctype))(!(=> (and ($invok_state |S_$71|) ($closed |S_$71| |#p_$8|)) ($inv2 |S_$71| |S_$71| |#p_$8| |#t_$4|))  :pattern ( ($inv2 |S_$71| |S_$71| |#p_$8| |#t_$4|))))
    (forall( (|S_$72| $state))(!(=> ($good_state |S_$72|) (forall( (|p_$36_$1| $ptr) (|q_$2_$1| $ptr))(!(=> (and (and ($good_state |S_$72|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$72|) ($f_owns ($field_type ($field |q_$2_$1|)))) |q_$2_$1|)) |p_$36_$1|)) ($closed |S_$72| |q_$2_$1|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$1|)))) (= ($owner |S_$72| |p_$36_$1|) |q_$2_$1|)) ($closed |S_$72| |p_$36_$1|)) (not (= |p_$36_$1| ($phys_ptr_cast $null ($field_type ($field |p_$36_$1|)))))) true))  :pattern ( ($set_in_pos |p_$36_$1| ($owns |S_$72| |q_$2_$1|))))))  :pattern ( ($good_state |S_$72|))))
    (forall( (|S_$73| $state) (|p_$124| $ptr))(!(=> ($good_state |S_$73|) (=> ($closed |S_$73| |p_$124|) (not (= |p_$124| ($phys_ptr_cast $null ($field_type ($field |p_$124|)))))))  :pattern ( ($closed |S_$73| |p_$124|))))
    (forall( (|S_$74| $state) (|p_$125| $ptr))(!(=> ($good_state |S_$74|) (=> (= ($owner |S_$74| |p_$125|) $me) (and (and (and (and ($is_proper |p_$125|) (not (= |p_$125| ($phys_ptr_cast $null ($field_type ($field |p_$125|)))))) (not ($is_primitive ($field_type ($field |p_$125|))))) ($is_proper |p_$125|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$74|) |p_$125|) |p_$125|))))  :pattern ( ($owner |S_$74| |p_$125|)) :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$74|) |p_$125|))))
    (forall( (|S_$75| $state) (|r_$4| $ptr))(!(=> ($good_state |S_$75|) (and (and (not (= ($owner |S_$75| |r_$4|) ($phys_ptr_cast $null ($field_type ($field ($owner |S_$75| |r_$4|)))))) ($is_proper ($owner |S_$75| |r_$4|))) (=> (not (= ($field_type ($field ($owner |S_$75| |r_$4|))) ^$@thread_id_t)) (and (and (and ($is_proper |r_$4|) (not (= |r_$4| ($phys_ptr_cast $null ($field_type ($field |r_$4|)))))) (not ($is_primitive ($field_type ($field |r_$4|))))) (=> ($is_sequential_field ($f_owns ($field_type ($field ($owner |S_$75| |r_$4|))))) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$75|) |r_$4|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$75|) ($owner |S_$75| |r_$4|))))))))  :pattern ( ($owner |S_$75| |r_$4|))))
    (forall( (|S_$76| $state) (|p_$126| $ptr))(!(=> ($good_state |S_$76|) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) |p_$126|)) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) |p_$126|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$76|) |p_$126|)))))
    (forall( (|S_$77| $state) (|p_$127| $ptr) (|f_$41| $field) (|t_$42| $ctype))(!(=> ($good_state |S_$77|) ($in_range_t |t_$42| (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$77|) ($as_field_with_type |f_$41| ($as_in_range_t |t_$42|))) |p_$127|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S_$77|) ($as_field_with_type |f_$41| ($as_in_range_t |t_$42|))) |p_$127|))))
    (forall( (|S_$79| $state) (|begin_time_$2| Int) (|p_$129| $ptr))(!(= ($top_writable |S_$79| |begin_time_$2| |p_$129|) (ite ($is_primitive ($field_type ($field |p_$129|))) (and (and ($is_primitive ($field_type ($field |p_$129|))) ($is_proper |p_$129|)) (and ($mutable |S_$79| ($emb0 |p_$129|)) (or (>= ($timestamp |S_$79| ($emb0 |p_$129|)) |begin_time_$2|) ($in_writes_at |begin_time_$2| |p_$129|)))) (and (= ($owner |S_$79| |p_$129|) $me) (or (>= ($timestamp |S_$79| |p_$129|) |begin_time_$2|) ($in_writes_at |begin_time_$2| |p_$129|)))))  :inline  false :pattern ( ($top_writable |S_$79| |begin_time_$2| |p_$129|))))
    (forall( (|S_$86| $state) (|c_$3| $ptr))(!(=> (and ($full_stop |S_$86|) ($closed |S_$86| |c_$3|)) ($valid_claim |S_$86| |c_$3|))  :pattern ( ($full_stop |S_$86|) ($valid_claim |S_$86| |c_$3|))))
    (forall( (|S_$87| $state) (|c_$4| $ptr))(!(=> ($valid_claim |S_$87| |c_$4|) (and ($closed |S_$87| |c_$4|) ($invok_state |S_$87|)))  :pattern ( ($valid_claim |S_$87| |c_$4|))))
    (forall( (|S_$89| $state) (|c1_$0| $ptr) (|c2_$0| $ptr))(!(=> (and ($valid_claim |S_$89| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)) ($valid_claim |S_$89| |c2_$0|))  :pattern ( ($valid_claim |S_$89| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|))))
    (forall( (|S_$90| $state) (|c_$5| $ptr) (|o_$5| $ptr))(!(=> ($good_state |S_$90|) (=> (and ($claims_obj |c_$5| |o_$5|) ($closed |S_$90| |c_$5|)) (and (and ($instantiate_ptrset ($owns |S_$90| |o_$5|)) ($closed |S_$90| |o_$5|)) (> ($ref_cnt |S_$90| |o_$5|) 0))))  :pattern ( ($closed |S_$90| |c_$5|) ($claims_obj |c_$5| |o_$5|))))
    (forall( (|S_$91| $state) (|c_$6| $ptr) (|o_$6| $ptr))(!(=> (and ($valid_claim |S_$91| |c_$6|) ($claims_obj |c_$6| |o_$6|)) ($inv2 |S_$91| |S_$91| |o_$6| ($field_type ($field |o_$6|))))  :pattern ( ($valid_claim |S_$91| |c_$6|) ($claims_obj |c_$6| |o_$6|))))
    (forall( (|S_$92| $state) (|c_$7| $ptr) (|r_$6| $ptr) (|f_$45| $field))(!(=> ($is ($ptr |f_$45| |r_$6|) ^^claim) (=> (and ($valid_claim |S_$92| |c_$7|) ($claims_obj |c_$7| ($ptr |f_$45| |r_$6|))) ($valid_claim |S_$92| ($ptr |f_$45| |r_$6|))))  :pattern ( ($valid_claim |S_$92| |c_$7|) ($claims_obj |c_$7| ($ptr ($as_field_with_type |f_$45| ^^claim) |r_$6|)))))
    (forall( (|S_$94| $state) (|p_$145| $ptr))(!(=> (and ($invok_state |S_$94|) ($claimed_closed |S_$94| |p_$145|)) ($inv2 |S_$94| |S_$94| |p_$145| ($field_type ($field |p_$145|))))  :pattern ( ($invok_state |S_$94|) ($claimed_closed |S_$94| |p_$145|))))
    (forall( (|S_$95| $state) (|c_$8| $ptr) (|o_$8| $ptr))(!(= ($account_claim |S_$95| |c_$8| |o_$8|) (and (and ($good_state |S_$95|) ($closed |S_$95| |c_$8|)) ($claims_obj |c_$8| |o_$8|)))  :pattern ( ($account_claim |S_$95| |c_$8| |o_$8|))))
    (forall( (|S_$96| $state) (|c_$9| $ptr) (|o_$9| $ptr))(!(=> ($account_claim |S_$96| |c_$9| |o_$9|) (and (and (= ($claim_no |S_$96| |o_$9| ($claim_idx |o_$9| |c_$9|)) |c_$9|) (<= 0 ($claim_idx |o_$9| |c_$9|))) (< ($claim_idx |o_$9| |c_$9|) ($ref_cnt |S_$96| |o_$9|))))  :pattern ( ($account_claim |S_$96| |c_$9| |o_$9|))))
    (forall( (|S_$97| $state) (|p_$146| $ptr) (|q_$9| $ptr) (|l_$1| $label))(!(= ($in_domain_lab |S_$97| |p_$146| |q_$9| |l_$1|) ($in_domain |S_$97| |p_$146| |q_$9|))  :pattern ( ($in_domain_lab |S_$97| |p_$146| |q_$9| |l_$1|))))
    (forall( (|S_$98| $state) (|p_$147| $ptr) (|q_$10| $ptr) (|l_$2| $label))(!(= ($in_vdomain_lab |S_$98| |p_$147| |q_$10| |l_$2|) ($in_vdomain |S_$98| |p_$147| |q_$10|))  :pattern ( ($in_vdomain_lab |S_$98| |p_$147| |q_$10| |l_$2|))))
    (forall( (|S_$99| $state) (|p_$148| $ptr) (|q_$11| $ptr) (|l_$3| $label))(!(=> ($in_domain_lab |S_$99| |p_$148| |q_$11| |l_$3|) ($inv_lab |S_$99| |p_$148| |l_$3|))  :pattern ( ($in_domain_lab |S_$99| |p_$148| |q_$11| |l_$3|))))
    (forall( (|S0_$10| $state) (|S1_$7| $state) (|p_$100| $ptr) (|sz_$23| Int))(!(=> (and ($call_transition |S0_$10| |S1_$7|) (forall( (|i_$12| Int))(!(=> (and (<= 0 |i_$12|) (<= |i_$12| (- |sz_$23| 1))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$10|) ($field ($idx |p_$100| |i_$12|))) ($base ($idx |p_$100| |i_$12|))) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$7|) ($field ($idx |p_$100| |i_$12|))) ($base ($idx |p_$100| |i_$12|)))))  :pattern ( ($dont_instantiate_int |i_$12|))))) (= ($mem_range_heap ($heap |S0_$10|) |p_$100| |sz_$23|) ($mem_range_heap ($heap |S1_$7|) |p_$100| |sz_$23|)))  :pattern ( ($call_transition |S0_$10| |S1_$7|) ($mem_range_heap ($heap |S1_$7|) |p_$100| |sz_$23|))))
    (forall( (|S0_$11| $state) (|S1_$8| $state) (|p_$101| $ptr) (|f_$38| $field))(!($instantiate_int (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$11|) |f_$38|) |p_$101|))  :pattern ( ($call_transition |S0_$11| |S1_$8|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$8|) |f_$38|) |p_$101|))))
    (forall( (|S0_$12| $state) (|S_$52| $state) (|p_$106| $ptr) (|T_$13| $ctype) (|s_$16| Int))(!(= ($inv2 |S0_$12| |S_$52| |p_$106| ($array |T_$13| |s_$16|)) (= ($owns |S_$52| |p_$106|) $set_empty))  :pattern ( ($inv2 |S0_$12| |S_$52| |p_$106| ($array |T_$13| |s_$16|)))))
    (forall( (|S0_$13| $state) (|S1_$9| $state))(!(=> ($call_transition |S0_$13| |S1_$9|) ($trans_call_transition |S0_$13| |S1_$9|))  :pattern ( ($call_transition |S0_$13| |S1_$9|))))
    (forall( (|S0_$14| $state) (|S1_$10| $state) (|S2_$3| $state))(!(=> (and ($trans_call_transition |S0_$14| |S1_$10|) ($call_transition |S1_$10| |S2_$3|)) ($trans_call_transition |S0_$14| |S2_$3|))  :pattern ( ($trans_call_transition |S0_$14| |S1_$10|) ($call_transition |S1_$10| |S2_$3|))))
    (forall( (|S0_$15| $state) (|S_$78| $state) (|o_$0| $ptr) (|owns_$0| $@Map@@$ptr@To@Bool@@))(!(= ($updated_owns |S0_$15| |S_$78| |o_$0| |owns_$0|) (= ($heap |S_$78|) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$15|) ($f_owns ($field_type ($field |o_$0|))) (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$15|) ($f_owns ($field_type ($field |o_$0|)))) |o_$0| ($ptrset_to_int |owns_$0|)))))  :pattern ( ($updated_owns |S0_$15| |S_$78| |o_$0| |owns_$0|))))
    (forall( (|S0_$16| $state) (|S1_$11| $state) (|W_$2| $@Map@@$ptr@To@Bool@@))(!(= ($modifies |S0_$16| |S1_$11| |W_$2|) (and (and (and (and (and (forall( (|p_$130| $ptr))(!(=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$130|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$130|)))) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$130|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$11|) |p_$130|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S1_$11|) |p_$130|)))) (forall( (|p_$131| $ptr) (|f_$42| $field))(!(=> (and (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$131|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$131|)))) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| ($dot |p_$131| |f_$42|)))) (=> (or (or ($is_sequential_field |f_$42|) ($is_semi_sequential_field |f_$42|)) (not ($closed |S0_$16| |p_$131|))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S0_$16|) |f_$42|) |p_$131|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$11|) |f_$42|) |p_$131|))))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$11|) |f_$42|) |p_$131|))))) (forall( (|p_$132| $ptr))(!(and (=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$132|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$132|)))) (= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$11|) |p_$132|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$16|) |p_$132|))) (>= (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$11|) |p_$132|) (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$16|) |p_$132|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S1_$11|) |p_$132|))))) (forall( (|p_$133| $ptr))(!(=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$133|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$133|)))) (= (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S1_$11|) |p_$133|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$16|) |p_$133|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ ($f_closed |S1_$11|) |p_$133|))))) (forall( (|p_$134| $ptr))(!(=> (and (= ($owner |S0_$16| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$134|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$16|) |p_$134|)))) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S0_$16|) |p_$134|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$11|) |p_$134|)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S1_$11|) |p_$134|))))) (and (<= ($current_timestamp |S0_$16|) ($current_timestamp |S1_$11|)) ($call_transition |S0_$16| |S1_$11|))))  :inline  false :pattern ( ($modifies |S0_$16| |S1_$11| |W_$2|))))
    (forall( (|S0_$17| $state) (|S_$80| $state) (|o_$1| $ptr))(!(= ($is_unwrapped_dynamic |S0_$17| |S_$80| |o_$1|) (and (and (and ($is_unwrapped |S0_$17| |S_$80| |o_$1|) (= ($f_timestamp |S_$80|) (lambda@3 |S0_$17| |S_$80| |o_$1|))) (forall( (|r_$5| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($owns |S0_$17| |o_$1|) |r_$5|) (and (= ($owner |S0_$17| |r_$5|) |o_$1|) (and (and (and (and ($is |r_$5| ($field_type ($field |r_$5|))) ($is_proper |r_$5|)) (= ($owner |S_$80| |r_$5|) $me)) ($closed |S_$80| |r_$5|)) (not ($is_primitive ($field_type ($field |r_$5|)))))))  :pattern ( ($owner |S_$80| |r_$5|)) :pattern ( ($closed |S_$80| |r_$5|))))) (= ($f_owner |S_$80|) (lambda@4 |S0_$17| |o_$1|))))  :pattern ( ($is_unwrapped_dynamic |S0_$17| |S_$80| |o_$1|))))
    (forall( (|S0_$18| $state) (|S_$81| $state) (|o_$2| $ptr))(!(= ($is_unwrapped |S0_$18| |S_$81| |o_$2|) (and (and (and (and (and (and (and (and true ($mutable |S_$81| |o_$2|)) (= ($heap |S_$81|) ($heap |S0_$18|))) (= ($owns |S0_$18| |o_$2|) ($owns |S_$81| |o_$2|))) (forall( (|p_$136| $ptr))(!(or (and (not (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$18|) |p_$136|) |o_$2|)) (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$18|) |p_$136|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|))) (and (and (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$18|) |p_$136|) |o_$2|) (or (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|) |p_$136|) (not (= ($owner |S0_$18| |p_$136|) |o_$2|)))) (= ($owner |S_$81| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|)) $me)))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$81|) |p_$136|))))) (= ($f_closed |S_$81|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$18|) |o_$2| false))) (and (< ($current_timestamp |S0_$18|) ($current_timestamp |S_$81|)) ($call_transition |S0_$18| |S_$81|))) ($post_unwrap |S0_$18| |S_$81|)) (= ($typemap ($f_owner |S0_$18|)) ($typemap ($f_owner |S_$81|)))))  :pattern ( ($is_unwrapped |S0_$18| |S_$81| |o_$2|))))
    (forall( (|S0_$19| $state) (|S_$82| $state) (|o_$3| $ptr))(!(= ($is_wrapped_dynamic |S0_$19| |S_$82| |o_$3|) (and (and (and ($is_wrapped |S0_$19| |S_$82| |o_$3| ($owns |S0_$19| |o_$3|)) (= ($heap |S_$82|) ($heap |S0_$19|))) (= ($owns |S0_$19| |o_$3|) ($owns |S_$82| |o_$3|))) (= ($f_owner |S_$82|) (lambda@5 |o_$3| |S0_$19|))))  :pattern ( ($is_wrapped_dynamic |S0_$19| |S_$82| |o_$3|))))
    (forall( (|S0_$20| $state) (|S_$83| $state) (|o_$4| $ptr) (|owns_$1| $@Map@@$ptr@To@Bool@@))(!(= ($is_wrapped |S0_$20| |S_$83| |o_$4| |owns_$1|) (and (and (and (and (and (and (and true (= ($f_closed |S_$83|) (MapWrite$$@Map@@$ptr@To@Bool@@$ ($f_closed |S0_$20|) |o_$4| true))) (= ($f_timestamp |S_$83|) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S0_$20|) |o_$4| ($current_timestamp |S_$83|)))) (forall( (|p_$137| $ptr))(!(or (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$83|) |p_$137|) (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$20|) |p_$137|)) (and (= (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$83|) |p_$137|) |o_$4|) (or (= |p_$137| |o_$4|) (MapRead$$@Map@@$ptr@To@Bool@@$ |owns_$1| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$20|) |p_$137|)))))  :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S_$83|) |p_$137|))))) (and (and (and (and ($is |o_$4| ($field_type ($field |o_$4|))) ($is_proper |o_$4|)) (= ($owner |S_$83| |o_$4|) $me)) ($closed |S_$83| |o_$4|)) (not ($is_primitive ($field_type ($field |o_$4|)))))) (=> ($is_claimable ($field_type ($field |o_$4|))) (and (= ($ref_cnt |S0_$20| |o_$4|) 0) (= ($ref_cnt |S_$83| |o_$4|) 0)))) (and (< ($current_timestamp |S0_$20|) ($current_timestamp |S_$83|)) ($call_transition |S0_$20| |S_$83|))) (= ($typemap ($f_owner |S0_$20|)) ($typemap ($f_owner |S_$83|)))))  :pattern ( ($is_wrapped |S0_$20| |S_$83| |o_$4| |owns_$1|))))
    (forall( (|S0_$21| $state) (|S_$85| $state) (|l_$0| $ptr) (|p_$139| $ptr))(!(and (= ($f_owner ($release |S0_$21| |S_$85| |l_$0| |p_$139|)) (MapWrite$$@Map@@$ptr@To@$ptr@@$ ($f_owner |S_$85|) |p_$139| $me)) (= ($f_timestamp ($release |S0_$21| |S_$85| |l_$0| |p_$139|)) (MapWrite$$@Map@@$ptr@To@Int@@$ ($f_timestamp |S_$85|) |p_$139| ($current_timestamp |S0_$21|))))  :pattern ( ($release |S0_$21| |S_$85| |l_$0| |p_$139|))))
    (forall( (|S0_$22| $state) (|S_$123| $state) (|r_$15| $ptr))(!(= ($extent_is_fresh |S0_$22| |S_$123| |r_$15|) (and (= ($timestamp |S_$123| |r_$15|) ($current_timestamp |S_$123|)) (forall( (|p_$170| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ ($composite_extent |S_$123| |r_$15| ($field_type ($field |r_$15|))) |p_$170|) (= ($timestamp |S_$123| |p_$170|) ($current_timestamp |S_$123|)))  :pattern ( ($extent_hint |p_$170| |r_$15|))))))  :pattern ( ($extent_is_fresh |S0_$22| |S_$123| |r_$15|))))
    (forall( (|S1_$0| $state) (|S0_$3| $state))(= (forall( (|p_$50_$0| $ptr))(!(=> ($thread_local |S0_$3| |p_$50_$0|) ($thread_local |S1_$0| |p_$50_$0|))  :pattern ( ($thread_local |S1_$0| |p_$50_$0|)))) (forall( (|p_$50| $ptr))(!(=> ($thread_local |S0_$3| |p_$50|) ($thread_local |S1_$0| |p_$50|))  :pattern ( ($thread_local |S1_$0| |p_$50|))))))
    (forall( (|S1_$1| $state) (|S0_$4| $state))(= ($modifies |S0_$4| |S1_$1| $set_empty) ($modifies |S0_$4| |S1_$1| $set_empty)))
    (forall( (|S1_$12| $state) (|S2_$4| $state) (|p_$140| $ptr) (|t_$43| $ctype))(!(= ($spans_the_same |S1_$12| |S2_$4| |p_$140| |t_$43|) (and (= ($owns |S1_$12| |p_$140|) ($owns |S2_$4| |p_$140|)) (forall( (|f_$43| $field))(!(=> (and ($is_proper ($dot |p_$140| |f_$43|)) (not (= |f_$43| ($f_ref_cnt |t_$43|)))) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$12|) |f_$43|) |p_$140|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$4|) |f_$43|) |p_$140|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$4|) |f_$43|) |p_$140|))))))  :pattern ( ($spans_the_same |S1_$12| |S2_$4| |p_$140| |t_$43|))))
    (forall( (|S1_$13| $state) (|S2_$5| $state) (|p_$141| $ptr) (|t_$44| $ctype))(!(= ($nonvolatile_spans_the_same |S1_$13| |S2_$5| |p_$141| |t_$44|) (forall( (|f_$44| $field))(!(=> (and ($is_proper ($dot |p_$141| |f_$44|)) ($is_sequential_field |f_$44|)) (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$13|) |f_$44|) |p_$141|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$5|) |f_$44|) |p_$141|)))  :pattern ( (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$5|) |f_$44|) |p_$141|)))))  :pattern ( ($nonvolatile_spans_the_same |S1_$13| |S2_$5| |p_$141| |t_$44|))))
    (forall( (|S1_$2| $state) (|S0_$7| $state))(= (forall( (|r_$2_$0| $ptr) (|f_$24_$0| $field))(!(=> ($is ($ptr |f_$24_$0| |r_$2_$0|) ^^claim) (=> (and ($closed |S0_$7| ($ptr |f_$24_$0| |r_$2_$0|)) ($closed |S1_$2| ($ptr |f_$24_$0| |r_$2_$0|))) ($valid_claim |S1_$2| ($ptr |f_$24_$0| |r_$2_$0|))))  :pattern ( ($closed |S1_$2| ($ptr ($as_field_with_type |f_$24_$0| ^^claim) |r_$2_$0|))))) (forall( (|r_$2| $ptr) (|f_$24| $field))(!(=> ($is ($ptr |f_$24| |r_$2|) ^^claim) (=> (and ($closed |S0_$7| ($ptr |f_$24| |r_$2|)) ($closed |S1_$2| ($ptr |f_$24| |r_$2|))) ($valid_claim |S1_$2| ($ptr |f_$24| |r_$2|))))  :pattern ( ($closed |S1_$2| ($ptr ($as_field_with_type |f_$24| ^^claim) |r_$2|)))))))
    (forall( (|s1_$4| $@Map@@$ptr@To@Bool@@) (|s2_$3| $@Map@@$ptr@To@Bool@@))(!(=> (forall( (|p_$184| $ptr))(!(and (=> (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$4| |p_$184|) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$3| |p_$184|))) (=> (MapRead$$@Map@@$ptr@To@Bool@@$ |s2_$3| |p_$184|) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |s1_$4| |p_$184|))))  :pattern ( ($dont_instantiate |p_$184|)))) ($set_disjoint |s1_$4| |s2_$3|))  :pattern ( ($set_disjoint |s1_$4| |s2_$3|))))
    (forall( (|s2_$0| $state) (|s1_$0| $state))(= (forall( (|p_$39_$0| $ptr))(!(=> ($mutable |s1_$0| |p_$39_$0|) ($mutable |s2_$0| |p_$39_$0|))  :pattern ( ($owner |s2_$0| |p_$39_$0|)) :pattern ( ($closed |s2_$0| |p_$39_$0|)) :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s2_$0|) |p_$39_$0|)))) (forall( (|p_$39| $ptr))(!(=> ($mutable |s1_$0| |p_$39|) ($mutable |s2_$0| |p_$39|))  :pattern ( ($owner |s2_$0| |p_$39|)) :pattern ( ($closed |s2_$0| |p_$39|)) :pattern ( (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |s2_$0|) |p_$39|))))))
    (forall( (|s2| $state) (|s1| $state))(= (and (and (and (= ($f_timestamp |s1|) ($f_timestamp |s2|)) (= ($f_closed |s1|) ($f_closed |s2|))) (= ($f_owner |s1|) ($f_owner |s2|))) (= ($roots |s1|) ($roots |s2|))) (and (and (and (= ($f_timestamp |s1|) ($f_timestamp |s2|)) (= ($f_closed |s1|) ($f_closed |s2|))) (= ($f_owner |s1|) ($f_owner |s2|))) (= ($roots |s1|) ($roots |s2|)))))
    (forall( (|SP#p_$0| $ptr))(!(= (F@doMark |SP#p_$0|) (= ($phys_ptr_cast (F@mark ($phys_ptr_cast |SP#p_$0| ^Node)) ^Node) ($phys_ptr_cast |SP#p_$0| ^Node)))  :pattern ( (F@doMark |SP#p_$0|))))
    (forall( (|SP#p| $ptr))(!(= ($phys_ptr_cast (F@mark |SP#p|) ^Node) ($phys_ptr_cast |SP#p| ^Node))  :pattern ( (F@mark |SP#p|))))
    (forall( (|subject_$0| $field) (|approver_$0| $field) (|this_$0| $ptr) (|S2_$1| $state) (|S1_$4| $state))(= (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |subject_$0|) |this_$0|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$1|) |subject_$0|) |this_$0|)) (= ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($phys_ptr_cast $null ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and (not ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)))))) ($inv2 |S1_$4| |S2_$1| ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))) (not (= ($read_vol_version |S1_$4| |this_$0|) ($read_vol_version |S2_$1| |this_$0|))))) (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |subject_$0|) |this_$0|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$1|) |subject_$0|) |this_$0|)) (= ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($phys_ptr_cast $null ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and (not ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)))))) ($inv2 |S1_$4| |S2_$1| ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|)) ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))))) (and ($is_threadtype ($field_type ($field ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$4|) |approver_$0|) |this_$0|))))) (not (= ($read_vol_version |S1_$4| |this_$0|) ($read_vol_version |S2_$1| |this_$0|)))))))
    (forall( (|subject_$1| $field) (|this_$1| $ptr) (|S2_$2| $state) (|S1_$5| $state))(= (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$5|) |subject_$1|) |this_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$2|) |subject_$1|) |this_$1|)) (= ($owner |S1_$5| |this_$1|) ($phys_ptr_cast $null ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and (not ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|))))) ($inv2 |S1_$5| |S2_$2| ($owner |S1_$5| |this_$1|) ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|)))) (not (= ($read_vol_version |S1_$5| |this_$1|) ($read_vol_version |S2_$2| |this_$1|))))) (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$5|) |subject_$1|) |this_$1|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$2|) |subject_$1|) |this_$1|)) (= ($owner |S1_$5| |this_$1|) ($phys_ptr_cast $null ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and (not ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|))))) ($inv2 |S1_$5| |S2_$2| ($owner |S1_$5| |this_$1|) ($field_type ($field ($owner |S1_$5| |this_$1|)))))) (and ($is_threadtype ($field_type ($field ($owner |S1_$5| |this_$1|)))) (not (= ($read_vol_version |S1_$5| |this_$1|) ($read_vol_version |S2_$2| |this_$1|)))))))
    (forall( (|subject| $field) (|approver| $ptr) (|this| $ptr) (|S2_$0| $state) (|S1_$3| $state))(= (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$3|) |subject|) |this|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$0|) |subject|) |this|)) (= |approver| ($phys_ptr_cast $null ($field_type ($field |approver|))))) (and (not ($is_threadtype ($field_type ($field |approver|)))) ($inv2 |S1_$3| |S2_$0| |approver| ($field_type ($field |approver|))))) (and ($is_threadtype ($field_type ($field |approver|))) (not (= ($read_vol_version |S1_$3| |this|) ($read_vol_version |S2_$0| |this|))))) (or (or (or (= (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S1_$3|) |subject|) |this|) (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |S2_$0|) |subject|) |this|)) (= |approver| ($phys_ptr_cast $null ($field_type ($field |approver|))))) (and (not ($is_threadtype ($field_type ($field |approver|)))) ($inv2 |S1_$3| |S2_$0| |approver| ($field_type ($field |approver|))))) (and ($is_threadtype ($field_type ($field |approver|))) (not (= ($read_vol_version |S1_$3| |this|) ($read_vol_version |S2_$0| |this|)))))))
    (forall( (|sz_$0| Int) (|t_$0| $ctype))(= (and (and (= ($sizeof |t_$0|) |sz_$0|) (= ($type_branch |t_$0|) $ctype_flat)) ($is_primitive |t_$0|)) (and (and (= ($sizeof |t_$0|) |sz_$0|) (= ($type_branch |t_$0|) $ctype_flat)) ($is_primitive |t_$0|))))
    (forall( (|sz_$10| Int) (|T| $ctype) (|p_$11| $ptr))(= (and (and (and (and (and (and ($is |p_$11| |T|) ($is_proper |p_$11|)) (>= ($field_arr_size ($field |p_$11|)) (+ ($field_arr_index ($field |p_$11|)) |sz_$10|))) (= |p_$11| ($idx ($dot ($base |p_$11|) ($field_arr_root ($field |p_$11|))) ($field_arr_index ($field |p_$11|))))) (not (= ($field_kind ($field |p_$11|)) $fk_base))) (>= ($field_arr_index ($field |p_$11|)) 0)) (not ($is_primitive ($field_type ($field ($emb0 |p_$11|)))))) (and (and (and (and (and (and ($is |p_$11| |T|) ($is_proper |p_$11|)) (>= ($field_arr_size ($field |p_$11|)) (+ ($field_arr_index ($field |p_$11|)) |sz_$10|))) (= |p_$11| ($idx ($dot ($base |p_$11|) ($field_arr_root ($field |p_$11|))) ($field_arr_index ($field |p_$11|))))) (not (= ($field_kind ($field |p_$11|)) $fk_base))) (>= ($field_arr_index ($field |p_$11|)) 0)) (not ($is_primitive ($field_type ($field ($emb0 |p_$11|))))))))
    (forall( (|sz_$11| Int) (|T_$0| $ctype) (|p_$12| $ptr) (|S_$0| $state))(= (and ($is_array |S_$0| |p_$12| |T_$0| |sz_$11|) (ite ($is_primitive |T_$0|) ($thread_local |S_$0| |p_$12|) (forall( (|i_$0_$3| Int))(!(=> (and (<= 0 |i_$0_$3|) (< |i_$0_$3| |sz_$11|)) ($thread_local |S_$0| ($idx |p_$12| |i_$0_$3|)))  :pattern ( ($owner |S_$0| ($idx |p_$12| |i_$0_$3|))))))) (and ($is_array |S_$0| |p_$12| |T_$0| |sz_$11|) (ite ($is_primitive |T_$0|) ($thread_local |S_$0| |p_$12|) (forall( (|i_$0| Int))(!(=> (and (<= 0 |i_$0|) (< |i_$0| |sz_$11|)) ($thread_local |S_$0| ($idx |p_$12| |i_$0|)))  :pattern ( ($owner |S_$0| ($idx |p_$12| |i_$0|)))))))))
    (forall( (|sz_$12| Int) (|p_$13| $ptr) (|s| $state))(= ($mem_range_heap ($heap |s|) |p_$13| |sz_$12|) ($mem_range_heap ($heap |s|) |p_$13| |sz_$12|)))
    (forall( (|sz_$13| Int) (|T_$1| $ctype) (|arr| $ptr) (|q| $ptr))(= (and (and (<= 0 ($index_within |q| |arr|)) (<= ($index_within |q| |arr|) (- |sz_$13| 1))) (= |q| ($idx |arr| ($index_within |q| |arr|)))) (and (and (<= 0 ($index_within |q| |arr|)) (<= ($index_within |q| |arr|) (- |sz_$13| 1))) (= |q| ($idx |arr| ($index_within |q| |arr|))))))
    (forall( (|sz_$14| Int) (|T_$2| $ctype) (|arr_$0| $ptr) (|q_$0| $ptr))(= (and (and (<= 0 ($index_within |q_$0| |arr_$0|)) (<= ($index_within |q_$0| |arr_$0|) (- |sz_$14| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($full_extent ($idx |arr_$0| ($index_within |q_$0| |arr_$0|))) |q_$0|)) (and (and (<= 0 ($index_within |q_$0| |arr_$0|)) (<= ($index_within |q_$0| |arr_$0|) (- |sz_$14| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($full_extent ($idx |arr_$0| ($index_within |q_$0| |arr_$0|))) |q_$0|))))
    (forall( (|sz_$15| Int) (|T_$3| $ctype) (|arr_$1| $ptr) (|q_$1| $ptr) (|S_$1| $state))(= (and (and (<= 0 ($index_within |q_$1| |arr_$1|)) (<= ($index_within |q_$1| |arr_$1|) (- |sz_$15| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($extent |S_$1| ($idx |arr_$1| ($index_within |q_$1| |arr_$1|))) |q_$1|)) (and (and (<= 0 ($index_within |q_$1| |arr_$1|)) (<= ($index_within |q_$1| |arr_$1|) (- |sz_$15| 1))) (MapRead$$@Map@@$ptr@To@Bool@@$ ($extent |S_$1| ($idx |arr_$1| ($index_within |q_$1| |arr_$1|))) |q_$1|))))
    (forall( (|sz_$16| Int) (|t_$15| $ctype) (|p_$27| $ptr) (|S_$10| $state))(= ($is_mutable_array |S_$10| |p_$27| |t_$15| |sz_$16|) ($is_mutable_array |S_$10| |p_$27| |t_$15| |sz_$16|)))
    (forall( (|sz_$17| Int) (|T_$4| $ctype) (|p_$69| $ptr))(= (forall( (|S_$45_$0| $state))(!(=> ($program_entry_point |S_$45_$0|) ($is_mutable_array |S_$45_$0| |p_$69| |T_$4| |sz_$17|))  :pattern ( ($program_entry_point |S_$45_$0|)))) (forall( (|S_$45| $state))(!(=> ($program_entry_point |S_$45|) ($is_mutable_array |S_$45| |p_$69| |T_$4| |sz_$17|))  :pattern ( ($program_entry_point |S_$45|))))))
    (forall( (|sz_$4| Int) (|t_$7| $ctype))(= (and (and (and (= ($sizeof |t_$7|) |sz_$4|) (= ($type_branch |t_$7|) $ctype_flat)) ($is_primitive |t_$7|)) (= ($as_in_range_t |t_$7|) |t_$7|)) (and (and (and (= ($sizeof |t_$7|) |sz_$4|) (= ($type_branch |t_$7|) $ctype_flat)) ($is_primitive |t_$7|)) (= ($as_in_range_t |t_$7|) |t_$7|))))
    (forall( (|sz_$5| Int) (|isvolatile_$2| Bool) (|tp_$6| $ctype) (|f_$7| $field) (|partp_$6| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$7|) |partp_$6|) (= ($field_type |f_$7|) |tp_$6|)) (= ($as_field_with_type |f_$7| |tp_$6|) |f_$7|)) (=> ($is_primitive |tp_$6|) (= ($as_primitive_field |f_$7|) |f_$7|))) (=> (not ($is_primitive |tp_$6|)) (= ($as_composite_field |f_$7|) |f_$7|))) (= ($field_arr_root |f_$7|) |f_$7|)) true) (=> (not |isvolatile_$2|) ($is_sequential_field |f_$7|))) (=> |isvolatile_$2| ($is_volatile_field |f_$7|))) true) (= ($field_arr_size |f_$7|) |sz_$5|)) (= ($field_arr_index |f_$7|) 0)) (= ($field_kind |f_$7|) $fk_emb_array)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$7|) |partp_$6|) (= ($field_type |f_$7|) |tp_$6|)) (= ($as_field_with_type |f_$7| |tp_$6|) |f_$7|)) (=> ($is_primitive |tp_$6|) (= ($as_primitive_field |f_$7|) |f_$7|))) (=> (not ($is_primitive |tp_$6|)) (= ($as_composite_field |f_$7|) |f_$7|))) (= ($field_arr_root |f_$7|) |f_$7|)) true) (=> (not |isvolatile_$2|) ($is_sequential_field |f_$7|))) (=> |isvolatile_$2| ($is_volatile_field |f_$7|))) true) (= ($field_arr_size |f_$7|) |sz_$5|)) (= ($field_arr_index |f_$7|) 0)) (= ($field_kind |f_$7|) $fk_emb_array)) true)))
    (forall( (|sz_$6| Int) (|off_$1| Int) (|isvolatile_$3| Bool) (|tp_$7| $ctype) (|f_$8| $field) (|partp_$7| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$8|) |partp_$7|) (= ($field_type |f_$8|) |tp_$7|)) (= ($as_field_with_type |f_$8| |tp_$7|) |f_$8|)) (=> ($is_primitive |tp_$7|) (= ($as_primitive_field |f_$8|) |f_$8|))) (=> (not ($is_primitive |tp_$7|)) (= ($as_composite_field |f_$8|) |f_$8|))) (= ($field_arr_root |f_$8|) |f_$8|)) true) (=> (not |isvolatile_$3|) ($is_sequential_field |f_$8|))) (=> |isvolatile_$3| ($is_volatile_field |f_$8|))) true) (= ($field_arr_size |f_$8|) |sz_$6|)) (= ($field_arr_index |f_$8|) 0)) (= ($field_kind |f_$8|) $fk_emb_array)) true) (= ($field_offset |f_$8|) |off_$1|)) ($is_phys_field |f_$8|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$8|) |partp_$7|) (= ($field_type |f_$8|) |tp_$7|)) (= ($as_field_with_type |f_$8| |tp_$7|) |f_$8|)) (=> ($is_primitive |tp_$7|) (= ($as_primitive_field |f_$8|) |f_$8|))) (=> (not ($is_primitive |tp_$7|)) (= ($as_composite_field |f_$8|) |f_$8|))) (= ($field_arr_root |f_$8|) |f_$8|)) true) (=> (not |isvolatile_$3|) ($is_sequential_field |f_$8|))) (=> |isvolatile_$3| ($is_volatile_field |f_$8|))) true) (= ($field_arr_size |f_$8|) |sz_$6|)) (= ($field_arr_index |f_$8|) 0)) (= ($field_kind |f_$8|) $fk_emb_array)) true) (= ($field_offset |f_$8|) |off_$1|)) ($is_phys_field |f_$8|)) true)))
    (forall( (|sz_$7| Int) (|isvolatile_$4| Bool) (|tp_$8| $ctype) (|f_$9| $field) (|partp_$8| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$9|) |partp_$8|) (= ($field_type |f_$9|) |tp_$8|)) (= ($as_field_with_type |f_$9| |tp_$8|) |f_$9|)) (=> ($is_primitive |tp_$8|) (= ($as_primitive_field |f_$9|) |f_$9|))) (=> (not ($is_primitive |tp_$8|)) (= ($as_composite_field |f_$9|) |f_$9|))) (= ($field_arr_root |f_$9|) |f_$9|)) true) (=> (not |isvolatile_$4|) ($is_sequential_field |f_$9|))) (=> |isvolatile_$4| ($is_volatile_field |f_$9|))) true) (= ($field_arr_size |f_$9|) |sz_$7|)) (= ($field_arr_index |f_$9|) 0)) (= ($field_kind |f_$9|) $fk_emb_array)) true) ($is_ghost_field |f_$9|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$9|) |partp_$8|) (= ($field_type |f_$9|) |tp_$8|)) (= ($as_field_with_type |f_$9| |tp_$8|) |f_$9|)) (=> ($is_primitive |tp_$8|) (= ($as_primitive_field |f_$9|) |f_$9|))) (=> (not ($is_primitive |tp_$8|)) (= ($as_composite_field |f_$9|) |f_$9|))) (= ($field_arr_root |f_$9|) |f_$9|)) true) (=> (not |isvolatile_$4|) ($is_sequential_field |f_$9|))) (=> |isvolatile_$4| ($is_volatile_field |f_$9|))) true) (= ($field_arr_size |f_$9|) |sz_$7|)) (= ($field_arr_index |f_$9|) 0)) (= ($field_kind |f_$9|) $fk_emb_array)) true) ($is_ghost_field |f_$9|)) true)))
    (forall( (|sz_$8| Int) (|off_$2| Int) (|isvolatile_$5| Bool) (|tp_$9| $ctype) (|f_$10| $field) (|partp_$9| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$10|) |partp_$9|) (= ($field_type |f_$10|) ($array |tp_$9| |sz_$8|))) (= ($as_field_with_type |f_$10| ($array |tp_$9| |sz_$8|)) |f_$10|)) (=> ($is_primitive ($array |tp_$9| |sz_$8|)) (= ($as_primitive_field |f_$10|) |f_$10|))) (=> (not ($is_primitive ($array |tp_$9| |sz_$8|))) (= ($as_composite_field |f_$10|) |f_$10|))) (= ($field_arr_root |f_$10|) |f_$10|)) true) (=> (not |isvolatile_$5|) ($is_sequential_field |f_$10|))) (=> |isvolatile_$5| ($is_volatile_field |f_$10|))) true) (= ($field_offset |f_$10|) |off_$2|)) ($is_phys_field |f_$10|)) (= ($field_kind |f_$10|) $fk_base)) (=> (= |off_$2| 0) ($has_field_at0 |partp_$9| |f_$10|))) true) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$10|) |partp_$9|) (= ($field_type |f_$10|) ($array |tp_$9| |sz_$8|))) (= ($as_field_with_type |f_$10| ($array |tp_$9| |sz_$8|)) |f_$10|)) (=> ($is_primitive ($array |tp_$9| |sz_$8|)) (= ($as_primitive_field |f_$10|) |f_$10|))) (=> (not ($is_primitive ($array |tp_$9| |sz_$8|))) (= ($as_composite_field |f_$10|) |f_$10|))) (= ($field_arr_root |f_$10|) |f_$10|)) true) (=> (not |isvolatile_$5|) ($is_sequential_field |f_$10|))) (=> |isvolatile_$5| ($is_volatile_field |f_$10|))) true) (= ($field_offset |f_$10|) |off_$2|)) ($is_phys_field |f_$10|)) (= ($field_kind |f_$10|) $fk_base)) (=> (= |off_$2| 0) ($has_field_at0 |partp_$9| |f_$10|))) true) true)))
    (forall( (|sz_$9| Int) (|isvolatile_$6| Bool) (|tp_$10| $ctype) (|f_$11| $field) (|partp_$10| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$11|) |partp_$10|) (= ($field_type |f_$11|) ($array |tp_$10| |sz_$9|))) (= ($as_field_with_type |f_$11| ($array |tp_$10| |sz_$9|)) |f_$11|)) (=> ($is_primitive ($array |tp_$10| |sz_$9|)) (= ($as_primitive_field |f_$11|) |f_$11|))) (=> (not ($is_primitive ($array |tp_$10| |sz_$9|))) (= ($as_composite_field |f_$11|) |f_$11|))) (= ($field_arr_root |f_$11|) |f_$11|)) true) (=> (not |isvolatile_$6|) ($is_sequential_field |f_$11|))) (=> |isvolatile_$6| ($is_volatile_field |f_$11|))) true) (= ($field_kind |f_$11|) $fk_base)) ($is_ghost_field |f_$11|)) true) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$11|) |partp_$10|) (= ($field_type |f_$11|) ($array |tp_$10| |sz_$9|))) (= ($as_field_with_type |f_$11| ($array |tp_$10| |sz_$9|)) |f_$11|)) (=> ($is_primitive ($array |tp_$10| |sz_$9|)) (= ($as_primitive_field |f_$11|) |f_$11|))) (=> (not ($is_primitive ($array |tp_$10| |sz_$9|))) (= ($as_composite_field |f_$11|) |f_$11|))) (= ($field_arr_root |f_$11|) |f_$11|)) true) (=> (not |isvolatile_$6|) ($is_sequential_field |f_$11|))) (=> |isvolatile_$6| ($is_volatile_field |f_$11|))) true) (= ($field_kind |f_$11|) $fk_base)) ($is_ghost_field |f_$11|)) true) true)))
    (forall( (|sz| Int) (|t| $ctype))(= (and (= ($sizeof |t|) |sz|) (= ($type_branch |t|) $ctype_flat)) (and (= ($sizeof |t|) |sz|) (= ($type_branch |t|) $ctype_flat))))
    (forall( (|t_$1| $ctype))(= (and (and (and (= ($sizeof |t_$1|) 1) (= ($type_branch |t_$1|) $ctype_flat)) ($is_primitive |t_$1|)) ($is_math_type |t_$1|)) (and (and (and (= ($sizeof |t_$1|) 1) (= ($type_branch |t_$1|) $ctype_flat)) ($is_primitive |t_$1|)) ($is_math_type |t_$1|))))
    (forall( (|t_$10| $ctype) (|p_$7| $ptr))(= ($ptr ($as_field_with_type ($field |p_$7|) |t_$10|) ($base |p_$7|)) ($ptr ($as_field_with_type ($field |p_$7|) |t_$10|) ($base |p_$7|))))
    (forall( (|T_$11| $ctype) (|s_$14| Int))(!(and (and (and (and (and (and true (= ($element_type ($array |T_$11| |s_$14|)) |T_$11|)) (= ($array_length ($array |T_$11| |s_$14|)) |s_$14|)) (not ($is_primitive ($array |T_$11| |s_$14|)))) (not ($is_claimable ($array |T_$11| |s_$14|)))) (= ($type_branch ($array |T_$11| |s_$14|)) $ctype_array)) ($is_sequential_field ($f_owns ($array |T_$11| |s_$14|))))  :pattern ( ($array |T_$11| |s_$14|))))
    (forall( (|t_$11| $ctype))(= ($phys_ptr_cast $null |t_$11|) ($phys_ptr_cast $null |t_$11|)))
    (forall( (|t_$12| $ctype) (|p_$9| $ptr))(= (and (and (and ($in_range_spec_ptr |p_$9|) (not (= |p_$9| ($phys_ptr_cast $null ($field_type ($field |p_$9|)))))) ($is_proper |p_$9|)) (= ($field |p_$9|) ($f_root |t_$12|))) (and (and (and ($in_range_spec_ptr |p_$9|) (not (= |p_$9| ($phys_ptr_cast $null ($field_type ($field |p_$9|)))))) ($is_proper |p_$9|)) (= ($field |p_$9|) ($f_root |t_$12|)))))
    (forall( (|T_$12| $ctype) (|s_$15| Int))(!(= ($sizeof ($array |T_$12| |s_$15|)) (* ($sizeof |T_$12|) |s_$15|))  :pattern ( ($sizeof ($array |T_$12| |s_$15|)))))
    (forall( (|t_$13| $ctype) (|p_$19| $ptr) (|f_$15| $field) (|s_$4| $state))(= ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$4|) |f_$15|) |p_$19|)) |t_$13|) ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$4|) |f_$15|) |p_$19|)) |t_$13|)))
    (forall( (|t_$14| $ctype) (|p_$20| $ptr) (|f_$16| $field) (|s_$5| $state))(= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$5|) |f_$16|) |p_$20|)) |t_$14|) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |s_$5|) |f_$16|) |p_$20|)) |t_$14|)))
    (forall( (|t_$16| $ctype) (|p_$31| $ptr) (|S_$17| $state))(= (and ($is |p_$31| |t_$16|) ($thread_local |S_$17| |p_$31|)) (and ($is |p_$31| |t_$16|) ($thread_local |S_$17| |p_$31|))))
    (forall( (|t_$18| $ctype) (|p_$41| $ptr) (|f_$20| $field) (|h_$1| $@Map@@$ptr@To@Int@@))(= ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$1| |p_$41|)) |t_$18|) ($spec_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$1| |p_$41|)) |t_$18|)))
    (forall( (|t_$19| $ctype) (|p_$42| $ptr) (|f_$21| $field) (|h_$2| $@Map@@$ptr@To@Int@@))(= ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$2| |p_$42|)) |t_$19|) ($phys_ptr_cast ($int_to_ptr (MapRead$$@Map@@$ptr@To@Int@@$ |h_$2| |p_$42|)) |t_$19|)))
    (forall( (|t_$2| $ctype))(= (and (and (and (= ($sizeof |t_$2|) $arch_ptr_size) (= ($type_branch |t_$2|) $ctype_flat)) ($is_primitive |t_$2|)) ($is_fnptr_type |t_$2|)) (and (and (and (= ($sizeof |t_$2|) $arch_ptr_size) (= ($type_branch |t_$2|) $ctype_flat)) ($is_primitive |t_$2|)) ($is_fnptr_type |t_$2|))))
    (forall( (|t_$20| $ctype) (|r_$0| $ptr) (|S_$32| $state) (|S0_$5| $state))(= (and (and (and (and (and (and (and (and (and true ($is |r_$0| |t_$20|)) ($is_proper |r_$0|)) ($modifies |S0_$5| |S_$32| $set_empty)) (= ($heap |S_$32|) ($heap |S0_$5|))) (and (< ($current_timestamp |S0_$5|) ($current_timestamp |S_$32|)) ($call_transition |S0_$5| |S_$32|))) (not ($closed |S0_$5| |r_$0|))) (not (= ($owner |S0_$5| |r_$0|) $me))) ($is_object_root_ptr |r_$0|)) (= ($field |r_$0|) ($f_root |t_$20|))) (and (and (and (and (and (and (and (and (and true ($is |r_$0| |t_$20|)) ($is_proper |r_$0|)) ($modifies |S0_$5| |S_$32| $set_empty)) (= ($heap |S_$32|) ($heap |S0_$5|))) (and (< ($current_timestamp |S0_$5|) ($current_timestamp |S_$32|)) ($call_transition |S0_$5| |S_$32|))) (not ($closed |S0_$5| |r_$0|))) (not (= ($owner |S0_$5| |r_$0|) $me))) ($is_object_root_ptr |r_$0|)) (= ($field |r_$0|) ($f_root |t_$20|)))))
    (forall( (|t_$21| $ctype) (|r_$1| $ptr) (|S_$33| $state) (|S0_$6| $state))(= (and (and (and (and (and (and (and (and (and (and true ($is |r_$1| |t_$21|)) ($is_proper |r_$1|)) ($modifies |S0_$6| |S_$33| $set_empty)) (= ($heap |S_$33|) ($heap |S0_$6|))) (and (< ($current_timestamp |S0_$6|) ($current_timestamp |S_$33|)) ($call_transition |S0_$6| |S_$33|))) (not ($closed |S0_$6| |r_$1|))) (not (= ($owner |S0_$6| |r_$1|) $me))) ($is_object_root_ptr |r_$1|)) (= ($field |r_$1|) ($f_root |t_$21|))) (ite ($is_primitive |t_$21|) (and (and ($mutable |S_$33| ($emb0 |r_$1|)) (= |r_$1| ($dot ($emb0 |r_$1|) ($field |r_$1|)))) (= ($timestamp |S_$33| ($emb0 |r_$1|)) ($current_timestamp |S_$33|))) (and (and ($extent_mutable |S_$33| |r_$1|) ($extent_is_fresh |S0_$6| |S_$33| |r_$1|)) ($all_first_option_typed |S_$33| |r_$1|)))) (and (and (and (and (and (and (and (and (and (and true ($is |r_$1| |t_$21|)) ($is_proper |r_$1|)) ($modifies |S0_$6| |S_$33| $set_empty)) (= ($heap |S_$33|) ($heap |S0_$6|))) (and (< ($current_timestamp |S0_$6|) ($current_timestamp |S_$33|)) ($call_transition |S0_$6| |S_$33|))) (not ($closed |S0_$6| |r_$1|))) (not (= ($owner |S0_$6| |r_$1|) $me))) ($is_object_root_ptr |r_$1|)) (= ($field |r_$1|) ($f_root |t_$21|))) (ite ($is_primitive |t_$21|) (and (and ($mutable |S_$33| ($emb0 |r_$1|)) (= |r_$1| ($dot ($emb0 |r_$1|) ($field |r_$1|)))) (= ($timestamp |S_$33| ($emb0 |r_$1|)) ($current_timestamp |S_$33|))) (and (and ($extent_mutable |S_$33| |r_$1|) ($extent_is_fresh |S0_$6| |S_$33| |r_$1|)) ($all_first_option_typed |S_$33| |r_$1|))))))
    (forall( (|t_$22| $ctype) (|p_$64| $ptr))(= ($ptr ($as_field_with_type ($field |p_$64|) ($as_union_type |t_$22|)) ($base |p_$64|)) ($ptr ($as_field_with_type ($field |p_$64|) ($as_union_type |t_$22|)) ($base |p_$64|))))
    (forall( (|t_$23| $ctype) (|s_$9| $struct))(= ($phys_ptr_cast ($vs_base_ref |s_$9|) |t_$23|) ($phys_ptr_cast ($vs_base_ref |s_$9|) |t_$23|)))
    (forall( (|t_$24| $ctype) (|p_$67| $ptr))(= (and (and ($is |p_$67| |t_$24|) ($is_object_root_ptr |p_$67|)) true) (and (and ($is |p_$67| |t_$24|) ($is_object_root_ptr |p_$67|)) true)))
    (forall( (|t_$25| $ctype) (|p_$68| $ptr))(= (forall( (|S_$44_$0| $state))(!(=> ($program_entry_point |S_$44_$0|) (and ($extent_mutable |S_$44_$0| |p_$68|) (= ($owns |S_$44_$0| |p_$68|) $set_empty)))  :pattern ( ($program_entry_point |S_$44_$0|)))) (forall( (|S_$44| $state))(!(=> ($program_entry_point |S_$44|) (and ($extent_mutable |S_$44| |p_$68|) (= ($owns |S_$44| |p_$68|) $set_empty)))  :pattern ( ($program_entry_point |S_$44|))))))
    (forall( (|t_$26| $ctype))(= (and (and (and (and (= ($sizeof |t_$26|) 1) (= ($type_branch |t_$26|) $ctype_flat)) ($is_primitive |t_$26|)) ($is_math_type |t_$26|)) ($is_datatype |t_$26|)) (and (and (and (and (= ($sizeof |t_$26|) 1) (= ($type_branch |t_$26|) $ctype_flat)) ($is_primitive |t_$26|)) ($is_math_type |t_$26|)) ($is_datatype |t_$26|))))
    (forall( (|t_$27| $field) (|b| $ptr))(= ($field ($ptr |t_$27| |b|)) |t_$27|))
    (forall( (|t_$28| $field) (|b_$0| $ptr))(= ($base ($ptr |t_$28| |b_$0|)) |b_$0|))
    (forall( (|t_$3| $ctype))(= (and (and (and (= ($sizeof |t_$3|) 1) (= ($type_branch |t_$3|) $ctype_flat)) ($is_primitive |t_$3|)) ($is_record_type |t_$3|)) (and (and (and (= ($sizeof |t_$3|) 1) (= ($type_branch |t_$3|) $ctype_flat)) ($is_primitive |t_$3|)) ($is_record_type |t_$3|))))
    (forall( (|t_$33| $ctype))(!(ite (not ($is_primitive |t_$33|)) (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_root |t_$33|)) |t_$33|) (= ($field_type ($f_root |t_$33|)) |t_$33|)) (= ($as_field_with_type ($f_root |t_$33|) |t_$33|) ($f_root |t_$33|))) (=> ($is_primitive |t_$33|) (= ($as_primitive_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (=> (not ($is_primitive |t_$33|)) (= ($as_composite_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (= ($field_arr_root ($f_root |t_$33|)) ($f_root |t_$33|))) true) (= ($field_kind ($f_root |t_$33|)) $fk_allocation_root)) true) (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_root |t_$33|)) $primitive_emb_type) (= ($field_type ($f_root |t_$33|)) |t_$33|)) (= ($as_field_with_type ($f_root |t_$33|) |t_$33|) ($f_root |t_$33|))) (=> ($is_primitive |t_$33|) (= ($as_primitive_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (=> (not ($is_primitive |t_$33|)) (= ($as_composite_field ($f_root |t_$33|)) ($f_root |t_$33|)))) (= ($field_arr_root ($f_root |t_$33|)) ($f_root |t_$33|))) true) (= ($field_kind ($f_root |t_$33|)) $fk_allocation_root)) true) ($is_sequential_field ($f_root |t_$33|))))  :pattern ( ($f_root |t_$33|))))
    (forall( (|t_$34| $ctype))(!(=> (not ($is_primitive |t_$34|)) (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_owns |t_$34|)) |t_$34|) (= ($field_type ($f_owns |t_$34|)) ^$@ptrset)) (= ($as_field_with_type ($f_owns |t_$34|) ^$@ptrset) ($f_owns |t_$34|))) (=> ($is_primitive ^$@ptrset) (= ($as_primitive_field ($f_owns |t_$34|)) ($f_owns |t_$34|)))) (=> (not ($is_primitive ^$@ptrset)) (= ($as_composite_field ($f_owns |t_$34|)) ($f_owns |t_$34|)))) (= ($field_arr_root ($f_owns |t_$34|)) ($f_owns |t_$34|))) true) (= ($field_kind ($f_owns |t_$34|)) $fk_owns)) true) ($is_ghost_field ($f_owns |t_$34|))))  :pattern ( ($f_owns |t_$34|))))
    (forall( (|t_$35| $ctype))(!(=> (not ($is_primitive |t_$35|)) (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_ref_cnt |t_$35|)) |t_$35|) (= ($field_type ($f_ref_cnt |t_$35|)) ^^mathint)) (= ($as_field_with_type ($f_ref_cnt |t_$35|) ^^mathint) ($f_ref_cnt |t_$35|))) (=> ($is_primitive ^^mathint) (= ($as_primitive_field ($f_ref_cnt |t_$35|)) ($f_ref_cnt |t_$35|)))) (=> (not ($is_primitive ^^mathint)) (= ($as_composite_field ($f_ref_cnt |t_$35|)) ($f_ref_cnt |t_$35|)))) (= ($field_arr_root ($f_ref_cnt |t_$35|)) ($f_ref_cnt |t_$35|))) true) (= ($field_kind ($f_ref_cnt |t_$35|)) $fk_ref_cnt)) true) ($is_ghost_field ($f_ref_cnt |t_$35|))) ($is_semi_sequential_field ($f_ref_cnt |t_$35|))))  :pattern ( ($f_ref_cnt |t_$35|))))
    (forall( (|t_$36| $ctype))(!(=> (not ($is_primitive |t_$36|)) (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($f_vol_version |t_$36|)) |t_$36|) (= ($field_type ($f_vol_version |t_$36|)) ^$@volatile_version_t)) (= ($as_field_with_type ($f_vol_version |t_$36|) ^$@volatile_version_t) ($f_vol_version |t_$36|))) (=> ($is_primitive ^$@volatile_version_t) (= ($as_primitive_field ($f_vol_version |t_$36|)) ($f_vol_version |t_$36|)))) (=> (not ($is_primitive ^$@volatile_version_t)) (= ($as_composite_field ($f_vol_version |t_$36|)) ($f_vol_version |t_$36|)))) (= ($field_arr_root ($f_vol_version |t_$36|)) ($f_vol_version |t_$36|))) true) (= ($field_kind ($f_vol_version |t_$36|)) $fk_vol_version)) true) ($is_ghost_field ($f_vol_version |t_$36|))) ($is_semi_sequential_field ($f_vol_version |t_$36|))))  :pattern ( ($f_vol_version |t_$36|))))
    (forall( (|t_$37| $ctype))(!(= ($is_threadtype |t_$37|) (= |t_$37| ^$@thread_id_t))  :pattern ( ($is_threadtype |t_$37|))))
    (forall( (|t_$41| $ctype) (|sz_$30| Int))(!(and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type ($array_emb |t_$41| |sz_$30|)) ($array |t_$41| |sz_$30|)) (= ($field_type ($array_emb |t_$41| |sz_$30|)) |t_$41|)) (= ($as_field_with_type ($array_emb |t_$41| |sz_$30|) |t_$41|) ($array_emb |t_$41| |sz_$30|))) (=> ($is_primitive |t_$41|) (= ($as_primitive_field ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|)))) (=> (not ($is_primitive |t_$41|)) (= ($as_composite_field ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|)))) (= ($field_arr_root ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|))) true) (= ($field_kind ($array_emb |t_$41| |sz_$30|)) $fk_as_array_first)) ($is_phys_field ($array_emb |t_$41| |sz_$30|))) (= ($field_offset ($array_emb |t_$41| |sz_$30|)) 0)) (= ($field_arr_size ($array_emb |t_$41| |sz_$30|)) |sz_$30|)) (= ($field_arr_index ($array_emb |t_$41| |sz_$30|)) 0)) (= ($field_arr_root ($array_emb |t_$41| |sz_$30|)) ($array_emb |t_$41| |sz_$30|))) ($is_sequential_field ($array_emb |t_$41| |sz_$30|))) true)  :pattern ( ($array_emb |t_$41| |sz_$30|)) :pattern ( ($array |t_$41| |sz_$30|))))
    (forall( (|t_$54| $ctype) (|x_$14| Int) (|y_$3| Int))(!(= ($unchk_add |t_$54| |x_$14| |y_$3|) ($unchecked |t_$54| (+ |x_$14| |y_$3|)))  :pattern ( ($unchk_add |t_$54| |x_$14| |y_$3|))))
    (forall( (|t_$59| $ctype) (|x_$21| Int) (|y_$10| Int))(!(= ($_shl |t_$59| |x_$21| |y_$10|) ($unchecked |t_$59| (* |x_$21| ($_pow2 |y_$10|))))  :pattern ( ($_shl |t_$59| |x_$21| |y_$10|))))
    (forall( (|t_$60| $ctype) (|val_$17| Int))(!(=> ($in_range_t |t_$60| |val_$17|) (= ($unchecked |t_$60| |val_$17|) |val_$17|))  :pattern ( ($unchecked |t_$60| |val_$17|))))
    (forall( (|t_$61| $ctype) (|val_$18| Int))(!($in_range_t |t_$61| ($unchecked |t_$61| |val_$18|))  :pattern ( ($unchecked |t_$61| |val_$18|))))
    (forall( (|t_$62| $ctype) (|x_$32| Int) (|y_$14| Int) (|z| Int))(!(=> (and (and ($in_range_t |t_$62| |x_$32|) ($in_range_t |t_$62| (- ($_pow2 |y_$14|) 1))) (>= |x_$32| 0)) (= (mod |x_$32| ($_pow2 |y_$14|)) ($_and |t_$62| |x_$32| (- ($_pow2 |y_$14|) 1))))  :pattern ( (mod |x_$32| ($_pow2 |y_$14|)) ($_and |t_$62| |x_$32| |z|))))
    (forall( (|t_$63| $ctype) (|x_$38| Int) (|y_$20| Int))(!(=> (and (<= 0 |x_$38|) ($in_range_t |t_$63| |x_$38|)) (and (<= 0 ($_and |t_$63| |x_$38| |y_$20|)) (<= ($_and |t_$63| |x_$38| |y_$20|) |x_$38|)))  :pattern ( ($_and |t_$63| |x_$38| |y_$20|))))
    (forall( (|t_$64| $ctype) (|x_$39| Int) (|y_$21| Int))(!(=> (and (and (and (<= 0 |x_$39|) (<= 0 |y_$21|)) ($in_range_t |t_$64| |x_$39|)) ($in_range_t |t_$64| |y_$21|)) (and (<= ($_and |t_$64| |x_$39| |y_$21|) |x_$39|) (<= ($_and |t_$64| |x_$39| |y_$21|) |y_$21|)))  :pattern ( ($_and |t_$64| |x_$39| |y_$21|))))
    (forall( (|t_$65| $ctype) (|x_$40| Int) (|y_$22| Int))(!(=> (and (and (and (<= 0 |x_$40|) (<= 0 |y_$22|)) ($in_range_t |t_$65| |x_$40|)) ($in_range_t |t_$65| |y_$22|)) (and (<= 0 ($_or |t_$65| |x_$40| |y_$22|)) (<= ($_or |t_$65| |x_$40| |y_$22|) (+ |x_$40| |y_$22|))))  :pattern ( ($_or |t_$65| |x_$40| |y_$22|))))
    (forall( (|t_$66| $ctype) (|x_$41| Int) (|y_$23| Int))(!(=> (and (and (and (<= 0 |x_$41|) (<= 0 |y_$23|)) ($in_range_t |t_$66| |x_$41|)) ($in_range_t |t_$66| |y_$23|)) (and (<= |x_$41| ($_or |t_$66| |x_$41| |y_$23|)) (<= |y_$23| ($_or |t_$66| |x_$41| |y_$23|))))  :pattern ( ($_or |t_$66| |x_$41| |y_$23|))))
    (forall( (|t_$67| $ctype) (|x_$42| Int) (|y_$24| Int) (|z_$0| Int))(!(=> (and (and (and (and (and (and (and (<= 0 |x_$42|) (<= 0 |y_$24|)) (<= 0 |z_$0|)) (< |z_$0| 64)) (< |x_$42| ($_pow2 |z_$0|))) (< |y_$24| ($_pow2 |z_$0|))) ($in_range_t |t_$67| |x_$42|)) ($in_range_t |t_$67| |y_$24|)) (< ($_or |t_$67| |x_$42| |y_$24|) ($_pow2 |z_$0|)))  :pattern ( ($_or |t_$67| |x_$42| |y_$24|) ($_pow2 |z_$0|))))
    (forall( (|t_$68| $ctype) (|x_$43| Int) (|y_$25| Int))(!(=> (and (and (<= 0 |x_$43|) (<= |x_$43| $max.u1)) (and (<= 0 |y_$25|) (<= |y_$25| $max.u1))) (and (<= 0 ($_or |t_$68| |x_$43| |y_$25|)) (<= ($_or |t_$68| |x_$43| |y_$25|) $max.u1)))  :pattern ( ($_or |t_$68| |x_$43| |y_$25|))))
    (forall( (|t_$69| $ctype) (|x_$44| Int) (|y_$26| Int))(!(=> (and (and (<= 0 |x_$44|) (<= |x_$44| $max.u2)) (and (<= 0 |y_$26|) (<= |y_$26| $max.u2))) (and (<= 0 ($_or |t_$69| |x_$44| |y_$26|)) (<= ($_or |t_$69| |x_$44| |y_$26|) $max.u2)))  :pattern ( ($_or |t_$69| |x_$44| |y_$26|))))
    (forall( (|t_$70| $ctype) (|x_$45| Int) (|y_$27| Int))(!(=> (and (and (<= 0 |x_$45|) (<= |x_$45| $max.u4)) (and (<= 0 |y_$27|) (<= |y_$27| $max.u4))) (and (<= 0 ($_or |t_$70| |x_$45| |y_$27|)) (<= ($_or |t_$70| |x_$45| |y_$27|) $max.u4)))  :pattern ( ($_or |t_$70| |x_$45| |y_$27|))))
    (forall( (|t_$71| $ctype) (|x_$46| Int) (|y_$28| Int))(!(=> (and (and (<= 0 |x_$46|) (<= |x_$46| $max.u8)) (and (<= 0 |y_$28|) (<= |y_$28| $max.u8))) (and (<= 0 ($_or |t_$71| |x_$46| |y_$28|)) (<= ($_or |t_$71| |x_$46| |y_$28|) $max.u8)))  :pattern ( ($_or |t_$71| |x_$46| |y_$28|))))
    (forall( (|t_$72| $ctype) (|x_$47| Int) (|y_$29| Int))(!(=> (and (and (<= 0 |x_$47|) (<= |x_$47| $max.u1)) (and (<= 0 |y_$29|) (<= |y_$29| $max.u1))) (and (<= 0 ($_and |t_$72| |x_$47| |y_$29|)) (<= ($_and |t_$72| |x_$47| |y_$29|) $max.u1)))  :pattern ( ($_and |t_$72| |x_$47| |y_$29|))))
    (forall( (|t_$73| $ctype) (|x_$48| Int) (|y_$30| Int))(!(=> (and (and (<= 0 |x_$48|) (<= |x_$48| $max.u2)) (and (<= 0 |y_$30|) (<= |y_$30| $max.u2))) (and (<= 0 ($_and |t_$73| |x_$48| |y_$30|)) (<= ($_and |t_$73| |x_$48| |y_$30|) $max.u2)))  :pattern ( ($_and |t_$73| |x_$48| |y_$30|))))
    (forall( (|t_$74| $ctype) (|x_$49| Int) (|y_$31| Int))(!(=> (and (and (<= 0 |x_$49|) (<= |x_$49| $max.u4)) (and (<= 0 |y_$31|) (<= |y_$31| $max.u4))) (and (<= 0 ($_and |t_$74| |x_$49| |y_$31|)) (<= ($_and |t_$74| |x_$49| |y_$31|) $max.u4)))  :pattern ( ($_and |t_$74| |x_$49| |y_$31|))))
    (forall( (|t_$75| $ctype) (|x_$50| Int) (|y_$32| Int))(!(=> (and (and (<= 0 |x_$50|) (<= |x_$50| $max.u8)) (and (<= 0 |y_$32|) (<= |y_$32| $max.u8))) (and (<= 0 ($_and |t_$75| |x_$50| |y_$32|)) (<= ($_and |t_$75| |x_$50| |y_$32|) $max.u8)))  :pattern ( ($_and |t_$75| |x_$50| |y_$32|))))
    (forall( (|t_$76| $ctype) (|x_$51| Int) (|y_$33| Int))(!(=> (and (and (<= 0 |x_$51|) (<= |x_$51| $max.u1)) (and (<= 0 |y_$33|) (<= |y_$33| $max.u1))) (and (<= 0 ($_xor |t_$76| |x_$51| |y_$33|)) (<= ($_xor |t_$76| |x_$51| |y_$33|) $max.u1)))  :pattern ( ($_xor |t_$76| |x_$51| |y_$33|))))
    (forall( (|t_$77| $ctype) (|x_$52| Int) (|y_$34| Int))(!(=> (and (and (<= 0 |x_$52|) (<= |x_$52| $max.u2)) (and (<= 0 |y_$34|) (<= |y_$34| $max.u2))) (and (<= 0 ($_xor |t_$77| |x_$52| |y_$34|)) (<= ($_xor |t_$77| |x_$52| |y_$34|) $max.u2)))  :pattern ( ($_xor |t_$77| |x_$52| |y_$34|))))
    (forall( (|t_$78| $ctype) (|x_$53| Int) (|y_$35| Int))(!(=> (and (and (<= 0 |x_$53|) (<= |x_$53| $max.u4)) (and (<= 0 |y_$35|) (<= |y_$35| $max.u4))) (and (<= 0 ($_xor |t_$78| |x_$53| |y_$35|)) (<= ($_xor |t_$78| |x_$53| |y_$35|) $max.u4)))  :pattern ( ($_xor |t_$78| |x_$53| |y_$35|))))
    (forall( (|t_$79| $ctype) (|x_$54| Int) (|y_$36| Int))(!(=> (and (and (<= 0 |x_$54|) (<= |x_$54| $max.u8)) (and (<= 0 |y_$36|) (<= |y_$36| $max.u8))) (and (<= 0 ($_xor |t_$79| |x_$54| |y_$36|)) (<= ($_xor |t_$79| |x_$54| |y_$36|) $max.u8)))  :pattern ( ($_xor |t_$79| |x_$54| |y_$36|))))
    (forall( (|t_$8| $ctype))(= (not ($is_primitive |t_$8|)) (not ($is_primitive |t_$8|))))
    (forall( (|t_$80| $ctype) (|x_$55| Int))(!($in_range_t |t_$80| ($_not |t_$80| |x_$55|))  :pattern ( ($_not |t_$80| |x_$55|))))
    (forall( (|t_$81| $ctype) (|x_$56| Int))(!(= ($_or |t_$81| |x_$56| ($_not |t_$81| |x_$56|)) ($_not |t_$81| 0))  :pattern ( ($_or |t_$81| |x_$56| ($_not |t_$81| |x_$56|)))))
    (forall( (|t_$82| $ctype) (|x_$57| Int))(!(= ($_and |t_$82| |x_$57| ($_not |t_$82| |x_$57|)) 0)  :pattern ( ($_and |t_$82| |x_$57| ($_not |t_$82| |x_$57|)))))
    (forall( (|t_$83| $ctype) (|x_$58| Int))(!(=> ($in_range_t |t_$83| |x_$58|) (= ($_or |t_$83| |x_$58| 0) |x_$58|))  :pattern ( ($_or |t_$83| |x_$58| 0))))
    (forall( (|t_$84| $ctype) (|x_$59| Int))(!(= ($_or |t_$84| |x_$59| ($_not |t_$84| 0)) ($_not |t_$84| 0))  :pattern ( ($_or |t_$84| |x_$59| ($_not |t_$84| 0)))))
    (forall( (|t_$85| $ctype) (|x_$60| Int))(!(=> ($in_range_t |t_$85| |x_$60|) (= ($_or |t_$85| |x_$60| |x_$60|) |x_$60|))  :pattern ( ($_or |t_$85| |x_$60| |x_$60|))))
    (forall( (|t_$86| $ctype) (|x_$61| Int))(!(= ($_and |t_$86| |x_$61| 0) 0)  :pattern ( ($_and |t_$86| |x_$61| 0))))
    (forall( (|t_$87| $ctype) (|x_$62| Int))(!(=> ($in_range_t |t_$87| |x_$62|) (= ($_and |t_$87| |x_$62| ($_not |t_$87| 0)) |x_$62|))  :pattern ( ($_and |t_$87| |x_$62| ($_not |t_$87| 0)))))
    (forall( (|t_$88| $ctype) (|x_$63| Int))(!(=> ($in_range_t |t_$88| |x_$63|) (= ($_and |t_$88| |x_$63| |x_$63|) |x_$63|))  :pattern ( ($_and |t_$88| |x_$63| |x_$63|))))
    (forall( (|t_$89| $ctype) (|x_$64| Int) (|y_$37| Int))(!(= ($_and |t_$89| ($_or |t_$89| |x_$64| |y_$37|) |y_$37|) |y_$37|)  :pattern ( ($_and |t_$89| ($_or |t_$89| |x_$64| |y_$37|) |y_$37|))))
    (forall( (|t_$90| $ctype) (|x_$65| Int) (|y_$38| Int))(!(= ($_and |t_$90| ($_or |t_$90| |x_$65| |y_$38|) |x_$65|) |x_$65|)  :pattern ( ($_and |t_$90| ($_or |t_$90| |x_$65| |y_$38|) |x_$65|))))
    (forall( (|t_$91| $ctype) (|x_$66| Int))(!(=> ($in_range_t |t_$91| |x_$66|) (= ($_xor |t_$91| |x_$66| 0) |x_$66|))  :pattern ( ($_xor |t_$91| |x_$66| 0))))
    (forall( (|t_$92| $ctype) (|x_$67| Int))(!(= ($_xor |t_$92| |x_$67| |x_$67|) 0)  :pattern ( ($_xor |t_$92| |x_$67| |x_$67|))))
    (forall( (|t_$93| $ctype) (|x_$68| Int))(!(= ($_xor |t_$93| |x_$68| ($_not |t_$93| 0)) ($_not |t_$93| |x_$68|))  :pattern ( ($_xor |t_$93| |x_$68| ($_not |t_$93| 0)))))
    (forall( (|t_$94| $ctype) (|x_$69| Int))(!(=> ($in_range_t |t_$94| |x_$69|) (= ($_not |t_$94| ($_not |t_$94| |x_$69|)) |x_$69|))  :pattern ( ($_not |t_$94| ($_not |t_$94| |x_$69|)))))
    (forall( (|t_$95| $ctype) (|x_$70| Int) (|y_$39| Int))(!(= ($_or |t_$95| |x_$70| |y_$39|) ($_or |t_$95| |y_$39| |x_$70|))  :pattern ( ($_or |t_$95| |x_$70| |y_$39|))))
    (forall( (|t_$96| $ctype) (|x_$71| Int) (|y_$40| Int))(!(= ($_xor |t_$96| |x_$71| |y_$40|) ($_xor |t_$96| |y_$40| |x_$71|))  :pattern ( ($_xor |t_$96| |x_$71| |y_$40|))))
    (forall( (|t_$97| $ctype) (|x_$72| Int) (|y_$41| Int))(!(= ($_and |t_$97| |x_$72| |y_$41|) ($_and |t_$97| |y_$41| |x_$72|))  :pattern ( ($_and |t_$97| |x_$72| |y_$41|))))
    (forall( (|time_$0| Int) (|p_$128| $ptr))(!(= ($in_writes_at |time_$0| |p_$128|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($writes_at |time_$0|) |p_$128|))  :inline  false :pattern ( ($in_writes_at |time_$0| |p_$128|))))
    (forall( (|tok_$0| $token) (|c_$1| $ptr) (|#s2_$0| $state) (|#s1_$2| $state))(= (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$2|) ($full_stop |#s1_$2|)) ($good_state_ext |tok_$0| |#s2_$0|)) (forall( (|p_$36_$4| $ptr) (|q_$2_$4| $ptr))(!(=> (and (and ($good_state |#s1_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$2|) ($f_owns ($field_type ($field |q_$2_$4|)))) |q_$2_$4|)) |p_$36_$4|)) ($closed |#s1_$2| |q_$2_$4|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$4|)))) (= ($owner |#s1_$2| |p_$36_$4|) |q_$2_$4|)) ($closed |#s1_$2| |p_$36_$4|)) (not (= |p_$36_$4| ($phys_ptr_cast $null ($field_type ($field |p_$36_$4|)))))) true))  :pattern ( ($set_in_pos |p_$36_$4| ($owns |#s1_$2| |q_$2_$4|)))))) (forall( (|p_$36_$5| $ptr) (|q_$2_$5| $ptr))(!(=> (and (and ($good_state |#s2_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$0|) ($f_owns ($field_type ($field |q_$2_$5|)))) |q_$2_$5|)) |p_$36_$5|)) ($closed |#s2_$0| |q_$2_$5|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$5|)))) (= ($owner |#s2_$0| |p_$36_$5|) |q_$2_$5|)) ($closed |#s2_$0| |p_$36_$5|)) (not (= |p_$36_$5| ($phys_ptr_cast $null ($field_type ($field |p_$36_$5|)))))) true))  :pattern ( ($set_in_pos |p_$36_$5| ($owns |#s2_$0| |q_$2_$5|)))))) (forall( (|#p_$6_$1| $ptr))(!(or (and (not ($closed |#s1_$2| |#p_$6_$1|)) (not ($closed |#s2_$0| |#p_$6_$1|))) (and ($inv2 |#s1_$2| |#s2_$0| |#p_$6_$1| ($field_type ($field |#p_$6_$1|))) ($nonvolatile_spans_the_same |#s1_$2| |#s2_$0| |#p_$6_$1| ($field_type ($field |#p_$6_$1|)))))  :pattern ( ($closed |#s1_$2| |#p_$6_$1|)) :pattern ( ($closed |#s2_$0| |#p_$6_$1|))))) ($valid_claim |#s1_$2| |c_$1|)) ($closed |#s2_$0| |c_$1|)) true) (and (and (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s1_$2|) ($full_stop |#s1_$2|)) ($good_state_ext |tok_$0| |#s2_$0|)) (forall( (|p_$36_$6| $ptr) (|q_$2_$6| $ptr))(!(=> (and (and ($good_state |#s1_$2|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$2|) ($f_owns ($field_type ($field |q_$2_$6|)))) |q_$2_$6|)) |p_$36_$6|)) ($closed |#s1_$2| |q_$2_$6|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$6|)))) (= ($owner |#s1_$2| |p_$36_$6|) |q_$2_$6|)) ($closed |#s1_$2| |p_$36_$6|)) (not (= |p_$36_$6| ($phys_ptr_cast $null ($field_type ($field |p_$36_$6|)))))) true))  :pattern ( ($set_in_pos |p_$36_$6| ($owns |#s1_$2| |q_$2_$6|)))))) (forall( (|p_$36_$7| $ptr) (|q_$2_$7| $ptr))(!(=> (and (and ($good_state |#s2_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s2_$0|) ($f_owns ($field_type ($field |q_$2_$7|)))) |q_$2_$7|)) |p_$36_$7|)) ($closed |#s2_$0| |q_$2_$7|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$7|)))) (= ($owner |#s2_$0| |p_$36_$7|) |q_$2_$7|)) ($closed |#s2_$0| |p_$36_$7|)) (not (= |p_$36_$7| ($phys_ptr_cast $null ($field_type ($field |p_$36_$7|)))))) true))  :pattern ( ($set_in_pos |p_$36_$7| ($owns |#s2_$0| |q_$2_$7|)))))) (forall( (|#p_$6| $ptr))(!(or (and (not ($closed |#s1_$2| |#p_$6|)) (not ($closed |#s2_$0| |#p_$6|))) (and ($inv2 |#s1_$2| |#s2_$0| |#p_$6| ($field_type ($field |#p_$6|))) ($nonvolatile_spans_the_same |#s1_$2| |#s2_$0| |#p_$6| ($field_type ($field |#p_$6|)))))  :pattern ( ($closed |#s1_$2| |#p_$6|)) :pattern ( ($closed |#s2_$0| |#p_$6|))))) ($valid_claim |#s1_$2| |c_$1|)) ($closed |#s2_$0| |c_$1|)) true)))
    (forall( (|tok| $token) (|c_$0| $ptr) (|#s1_$0| $state))(= (and (and ($good_state_ext |tok| |#s1_$0|) (forall( (|p_$36_$2| $ptr) (|q_$2_$2| $ptr))(!(=> (and (and ($good_state |#s1_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$0|) ($f_owns ($field_type ($field |q_$2_$2|)))) |q_$2_$2|)) |p_$36_$2|)) ($closed |#s1_$0| |q_$2_$2|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$2|)))) (= ($owner |#s1_$0| |p_$36_$2|) |q_$2_$2|)) ($closed |#s1_$0| |p_$36_$2|)) (not (= |p_$36_$2| ($phys_ptr_cast $null ($field_type ($field |p_$36_$2|)))))) true))  :pattern ( ($set_in_pos |p_$36_$2| ($owns |#s1_$0| |q_$2_$2|)))))) true) (and (and ($good_state_ext |tok| |#s1_$0|) (forall( (|p_$36_$3| $ptr) (|q_$2_$3| $ptr))(!(=> (and (and ($good_state |#s1_$0|) (MapRead$$@Map@@$ptr@To@Bool@@$ ($int_to_ptrset (MapRead$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ ($heap |#s1_$0|) ($f_owns ($field_type ($field |q_$2_$3|)))) |q_$2_$3|)) |p_$36_$3|)) ($closed |#s1_$0| |q_$2_$3|)) (and (and (and (and (not ($is_primitive ($field_type ($field |p_$36_$3|)))) (= ($owner |#s1_$0| |p_$36_$3|) |q_$2_$3|)) ($closed |#s1_$0| |p_$36_$3|)) (not (= |p_$36_$3| ($phys_ptr_cast $null ($field_type ($field |p_$36_$3|)))))) true))  :pattern ( ($set_in_pos |p_$36_$3| ($owns |#s1_$0| |q_$2_$3|)))))) true)))
    (forall( (|tp_$3| $ctype) (|f_$4| $field) (|partp_$3| $ctype))(= (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$4|) |partp_$3|) (= ($field_type |f_$4|) |tp_$3|)) (= ($as_field_with_type |f_$4| |tp_$3|) |f_$4|)) (=> ($is_primitive |tp_$3|) (= ($as_primitive_field |f_$4|) |f_$4|))) (=> (not ($is_primitive |tp_$3|)) (= ($as_composite_field |f_$4|) |f_$4|))) (= ($field_arr_root |f_$4|) |f_$4|)) true) (=> (not false) ($is_sequential_field |f_$4|))) (=> false ($is_volatile_field |f_$4|))) true) (= ($field_offset |f_$4|) 0)) ($is_phys_field |f_$4|)) (= ($field_kind |f_$4|) $fk_base)) (=> (= 0 0) ($has_field_at0 |partp_$3| |f_$4|))) true) (= ($f_group_root |tp_$3|) |f_$4|)) ($is_group_type |tp_$3|)) true) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($field_parent_type |f_$4|) |partp_$3|) (= ($field_type |f_$4|) |tp_$3|)) (= ($as_field_with_type |f_$4| |tp_$3|) |f_$4|)) (=> ($is_primitive |tp_$3|) (= ($as_primitive_field |f_$4|) |f_$4|))) (=> (not ($is_primitive |tp_$3|)) (= ($as_composite_field |f_$4|) |f_$4|))) (= ($field_arr_root |f_$4|) |f_$4|)) true) (=> (not false) ($is_sequential_field |f_$4|))) (=> false ($is_volatile_field |f_$4|))) true) (= ($field_offset |f_$4|) 0)) ($is_phys_field |f_$4|)) (= ($field_kind |f_$4|) $fk_base)) (=> (= 0 0) ($has_field_at0 |partp_$3| |f_$4|))) true) (= ($f_group_root |tp_$3|) |f_$4|)) ($is_group_type |tp_$3|)) true)))
    (forall( (|tp| $ctype) (|f_$0| $field) (|partp| $ctype))(= (and (and (and (and (and (and (= ($field_parent_type |f_$0|) |partp|) (= ($field_type |f_$0|) |tp|)) (= ($as_field_with_type |f_$0| |tp|) |f_$0|)) (=> ($is_primitive |tp|) (= ($as_primitive_field |f_$0|) |f_$0|))) (=> (not ($is_primitive |tp|)) (= ($as_composite_field |f_$0|) |f_$0|))) (= ($field_arr_root |f_$0|) |f_$0|)) true) (and (and (and (and (and (and (= ($field_parent_type |f_$0|) |partp|) (= ($field_type |f_$0|) |tp|)) (= ($as_field_with_type |f_$0| |tp|) |f_$0|)) (=> ($is_primitive |tp|) (= ($as_primitive_field |f_$0|) |f_$0|))) (=> (not ($is_primitive |tp|)) (= ($as_composite_field |f_$0|) |f_$0|))) (= ($field_arr_root |f_$0|) |f_$0|)) true)))
    (forall( (|typ_$0| $ctype) (|#p_$5| $ptr) (|#s2| $state) (|#s1_$1| $state))(= (or (and (not ($closed |#s1_$1| |#p_$5|)) (not ($closed |#s2| |#p_$5|))) (and ($inv2 |#s1_$1| |#s2| |#p_$5| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$1| |#s2| |#p_$5| |typ_$0|))) (or (and (not ($closed |#s1_$1| |#p_$5|)) (not ($closed |#s2| |#p_$5|))) (and ($inv2 |#s1_$1| |#s2| |#p_$5| |typ_$0|) ($nonvolatile_spans_the_same |#s1_$1| |#s2| |#p_$5| |typ_$0|)))))
    (forall( (|typ| $ctype) (|#p_$4| $ptr) (|#s1| $state))(= ($inv2 |#s1| |#s1| |#p_$4| |typ|) ($inv2 |#s1| |#s1| |#p_$4| |typ|)))
    (forall( (|v_$0| Bool))(= (ite |v_$0| 1 0) (ite |v_$0| 1 0)))
    (forall( (|v| Int) (|f_$17| $field) (|r| $ptr) (|h| $@Map@@$field@To@$@Map@@$ptr@To@Int@@@@))(= (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17|) |r| |v|)) (MapWrite$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17| (MapWrite$$@Map@@$ptr@To@Int@@$ (MapRead$$@Map@@$field@To@$@Map@@$ptr@To@Int@@@@$ |h| |f_$17|) |r| |v|))))
    (forall( (|val_$10| Int))(!(= ($in_range_t ^^i4 |val_$10|) (and (<= $min.i4 |val_$10|) (<= |val_$10| $max.i4)))  :pattern ( ($in_range_t ^^i4 |val_$10|))))
    (forall( (|val_$11| Int))(!(= ($in_range_t ^^i8 |val_$11|) (and (<= $min.i8 |val_$11|) (<= |val_$11| $max.i8)))  :pattern ( ($in_range_t ^^i8 |val_$11|))))
    (forall( (|val_$12| Int))(!(= ($in_range_t ^^u1 |val_$12|) (and (<= 0 |val_$12|) (<= |val_$12| $max.u1)))  :pattern ( ($in_range_t ^^u1 |val_$12|))))
    (forall( (|val_$13| Int))(!(= ($in_range_t ^^u2 |val_$13|) (and (<= 0 |val_$13|) (<= |val_$13| $max.u2)))  :pattern ( ($in_range_t ^^u2 |val_$13|))))
    (forall( (|val_$14| Int))(!(= ($in_range_t ^^u4 |val_$14|) (and (<= 0 |val_$14|) (<= |val_$14| $max.u4)))  :pattern ( ($in_range_t ^^u4 |val_$14|))))
    (forall( (|val_$15| Int))(!(= ($in_range_t ^^u8 |val_$15|) (and (<= 0 |val_$15|) (<= |val_$15| $max.u8)))  :pattern ( ($in_range_t ^^u8 |val_$15|))))
    (forall( (|val_$16| Int))(!($in_range_t ^^mathint |val_$16|)  :pattern ( ($in_range_t ^^mathint |val_$16|))))
    (forall( (|val_$19| Int))(!(=> (and (<= 0 |val_$19|) (<= |val_$19| $max.u1)) (= ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|)) |val_$19|))  :pattern ( ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|)))))
    (forall( (|val_$20| Int))(!(=> (and (<= 0 |val_$20|) (<= |val_$20| $max.u2)) (= ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|)) |val_$20|))  :pattern ( ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|)))))
    (forall( (|val_$21| Int))(!(=> (and (<= 0 |val_$21|) (<= |val_$21| $max.u4)) (= ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|)) |val_$21|))  :pattern ( ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|)))))
    (forall( (|val_$22| Int))(!(=> (and (<= 0 |val_$22|) (<= |val_$22| $max.u8)) (= ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|)) |val_$22|))  :pattern ( ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|)))))
    (forall( (|val_$23| Int))(!(=> (and (<= $min.i1 |val_$23|) (<= |val_$23| $max.i1)) (= ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|)) |val_$23|))  :pattern ( ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|)))))
    (forall( (|val_$24| Int))(!(=> (and (<= $min.i2 |val_$24|) (<= |val_$24| $max.i2)) (= ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|)) |val_$24|))  :pattern ( ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|)))))
    (forall( (|val_$25| Int))(!(=> (and (<= $min.i4 |val_$25|) (<= |val_$25| $max.i4)) (= ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|)) |val_$25|))  :pattern ( ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|)))))
    (forall( (|val_$26| Int))(!(=> (and (<= $min.i8 |val_$26|) (<= |val_$26| $max.i8)) (= ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|)) |val_$26|))  :pattern ( ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|)))))
    (forall( (|val_$8| Int))(!(= ($in_range_t ^^i1 |val_$8|) (and (<= $min.i1 |val_$8|) (<= |val_$8| $max.i1)))  :pattern ( ($in_range_t ^^i1 |val_$8|))))
    (forall( (|val_$9| Int))(!(= ($in_range_t ^^i2 |val_$9|) (and (<= $min.i2 |val_$9|) (<= |val_$9| $max.i2)))  :pattern ( ($in_range_t ^^i2 |val_$9|))))
    (forall( (|W_$0| $@Map@@$ptr@To@Bool@@) (|S_$11| $state))(= (forall( (|p_$28_$0| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$0| |p_$28_$0|) (ite ($is_primitive ($field_type ($field |p_$28_$0|))) (and (= ($owner |S_$11| ($emb0 |p_$28_$0|)) $me) (not ($closed |S_$11| ($emb0 |p_$28_$0|)))) (= ($owner |S_$11| |p_$28_$0|) $me)))  :pattern ( ($mutable |S_$11| |p_$28_$0|)) :pattern ( ($owner |S_$11| |p_$28_$0|)) :pattern ( ($closed |S_$11| |p_$28_$0|)) :pattern ( ($owner |S_$11| ($emb0 |p_$28_$0|))) :pattern ( ($closed |S_$11| ($emb0 |p_$28_$0|))))) (forall( (|p_$28| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$0| |p_$28|) (ite ($is_primitive ($field_type ($field |p_$28|))) (and (= ($owner |S_$11| ($emb0 |p_$28|)) $me) (not ($closed |S_$11| ($emb0 |p_$28|)))) (= ($owner |S_$11| |p_$28|) $me)))  :pattern ( ($mutable |S_$11| |p_$28|)) :pattern ( ($owner |S_$11| |p_$28|)) :pattern ( ($closed |S_$11| |p_$28|)) :pattern ( ($owner |S_$11| ($emb0 |p_$28|))) :pattern ( ($closed |S_$11| ($emb0 |p_$28|)))))))
    (forall( (|W_$1| $@Map@@$ptr@To@Bool@@) (|p_$49| $ptr) (|S0_$2| $state))(= (and (= ($owner |S0_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$1| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|)))) (and (= ($owner |S0_$2| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|)) $me) (not (MapRead$$@Map@@$ptr@To@Bool@@$ |W_$1| (MapRead$$@Map@@$ptr@To@$ptr@@$ ($roots |S0_$2|) |p_$49|))))))
    (forall( (|W| $@Map@@$ptr@To@Bool@@) (|S_$9| $state))(= (forall( (|p_$26_$0| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W| |p_$26_$0|) ($mutable |S_$9| |p_$26_$0|))  :pattern ( ($mutable |S_$9| |p_$26_$0|)) :pattern ( ($owner |S_$9| |p_$26_$0|)) :pattern ( ($closed |S_$9| |p_$26_$0|)) :pattern ( ($owner |S_$9| ($emb0 |p_$26_$0|))) :pattern ( ($closed |S_$9| ($emb0 |p_$26_$0|))))) (forall( (|p_$26| $ptr))(!(=> (MapRead$$@Map@@$ptr@To@Bool@@$ |W| |p_$26|) ($mutable |S_$9| |p_$26|))  :pattern ( ($mutable |S_$9| |p_$26|)) :pattern ( ($owner |S_$9| |p_$26|)) :pattern ( ($closed |S_$9| |p_$26|)) :pattern ( ($owner |S_$9| ($emb0 |p_$26|))) :pattern ( ($closed |S_$9| ($emb0 |p_$26|)))))))
    (forall( (|x_$0| Int))(= (and (<= $min.i1 |x_$0|) (<= |x_$0| $max.i1)) (and (<= $min.i1 |x_$0|) (<= |x_$0| $max.i1))))
    (forall( (|x_$1| Int))(= (and (<= $min.i2 |x_$1|) (<= |x_$1| $max.i2)) (and (<= $min.i2 |x_$1|) (<= |x_$1| $max.i2))))
    (forall( (|x_$19| Int) (|y_$8| Int))(!(=> (and (and (and (<= 0 |x_$19|) (<= |x_$19| $max.u8)) (and (<= 0 |y_$8|) (<= |y_$8| $max.u8))) (> (+ |x_$19| |y_$8|) $max.u8)) (= ($unchk_add ^^u8 |x_$19| |y_$8|) (- (- (+ |x_$19| |y_$8|) $max.u8) 1)))  :pattern ( ($unchk_add ^^u8 |x_$19| |y_$8|))))
    (forall( (|x_$2| Int))(= (and (<= $min.i4 |x_$2|) (<= |x_$2| $max.i4)) (and (<= $min.i4 |x_$2|) (<= |x_$2| $max.i4))))
    (forall( (|x_$20| Int) (|y_$9| Int))(!(=> (and (and (and (<= 0 |x_$20|) (<= |x_$20| $max.u4)) (and (<= 0 |y_$9|) (<= |y_$9| $max.u4))) (> (+ |x_$20| |y_$9|) $max.u8)) (= ($unchk_add ^^u4 |x_$20| |y_$9|) (- (- (+ |x_$20| |y_$9|) $max.u4) 1)))  :pattern ( ($unchk_add ^^u4 |x_$20| |y_$9|))))
    (forall( (|x_$22| Int) (|y_$11| Int))(!(= ($_shr |x_$22| |y_$11|) (div |x_$22| ($_pow2 |y_$11|)))  :pattern ( ($_shr |x_$22| |y_$11|))))
    (forall( (|x_$23| Int) (|from| Int) (|to| Int) (|xs| Int) (|val_$0| Int))(!(=> (and (and (<= 0 |from|) (< |from| |to|)) (<= |to| |xs|)) (=> (and (<= 0 |val_$0|) (< |val_$0| ($_pow2 (- |to| |from|)))) (and (<= 0 ($bv_update |x_$23| |xs| |from| |to| |val_$0|)) (< ($bv_update |x_$23| |xs| |from| |to| |val_$0|) ($_pow2 |xs|)))))  :pattern ( ($bv_update |x_$23| |xs| |from| |to| |val_$0|))))
    (forall( (|x_$3| Int))(= (and (<= $min.i8 |x_$3|) (<= |x_$3| $max.i8)) (and (<= $min.i8 |x_$3|) (<= |x_$3| $max.i8))))
    (forall( (|x_$33| Int) (|y_$15| Int))(!(= (mod |x_$33| |y_$15|) (- |x_$33| (* (div |x_$33| |y_$15|) |y_$15|)))  :pattern ( (mod |x_$33| |y_$15|)) :pattern ( (div |x_$33| |y_$15|))))
    (forall( (|x_$34| Int) (|y_$16| Int))(!(=> (and (<= 0 |x_$34|) (< 0 |y_$16|)) (and (<= 0 (mod |x_$34| |y_$16|)) (< (mod |x_$34| |y_$16|) |y_$16|)))  :pattern ( (mod |x_$34| |y_$16|))))
    (forall( (|x_$35| Int) (|y_$17| Int))(!(=> (and (<= 0 |x_$35|) (< |y_$17| 0)) (and (<= 0 (mod |x_$35| |y_$17|)) (< (mod |x_$35| |y_$17|) (- 0 |y_$17|))))  :pattern ( (mod |x_$35| |y_$17|))))
    (forall( (|x_$36| Int) (|y_$18| Int))(!(=> (and (<= |x_$36| 0) (< 0 |y_$18|)) (and (< (- 0 |y_$18|) (mod |x_$36| |y_$18|)) (<= (mod |x_$36| |y_$18|) 0)))  :pattern ( (mod |x_$36| |y_$18|))))
    (forall( (|x_$37| Int) (|y_$19| Int))(!(=> (and (<= |x_$37| 0) (< |y_$19| 0)) (and (< |y_$19| (mod |x_$37| |y_$19|)) (<= (mod |x_$37| |y_$19|) 0)))  :pattern ( (mod |x_$37| |y_$19|))))
    (forall( (|x_$4| Int))(= (and (<= 0 |x_$4|) (<= |x_$4| $max.u1)) (and (<= 0 |x_$4|) (<= |x_$4| $max.u1))))
    (forall( (|x_$5| Int))(= (and (<= 0 |x_$5|) (<= |x_$5| $max.u2)) (and (<= 0 |x_$5|) (<= |x_$5| $max.u2))))
    (forall( (|x_$6| Int))(= (and (<= 0 |x_$6|) (<= |x_$6| $max.u4)) (and (<= 0 |x_$6|) (<= |x_$6| $max.u4))))
    (forall( (|x_$7| Int))(= (and (<= 0 |x_$7|) (<= |x_$7| $max.u8)) (and (<= 0 |x_$7|) (<= |x_$7| $max.u8))))
    (forall( (|x| Int))(= (not (= |x| 0)) (not (= |x| 0))))
    (forall( (|y_$0| Int) (|x_$9| Int))(= (or (not (= |y_$0| (- 0 1))) (not (= |x_$9| $min.i2))) (or (not (= |y_$0| (- 0 1))) (not (= |x_$9| $min.i2)))))
    (forall( (|y_$1| Int) (|x_$10| Int))(= (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i4))) (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i4)))))
    (forall( (|y_$2| Int) (|x_$11| Int))(= (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i8))) (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i8)))))
    (forall( (|y| Int) (|x_$8| Int))(= (or (not (= |y| (- 0 1))) (not (= |x_$8| $min.i1))) (or (not (= |y| (- 0 1))) (not (= |x_$8| $min.i1)))))
    (ite false ($is_volatile_field ($f_owns ^$@volatile_version_t)) ($is_sequential_field ($f_owns ^$@volatile_version_t)))
    (ite false ($is_volatile_field ($f_owns ^^claim)) ($is_sequential_field ($f_owns ^^claim)))
    (ite false ($is_volatile_field ($f_owns ^Node)) ($is_sequential_field ($f_owns ^Node)))
    (ite false ($is_volatile_field ($f_owns ^Tree)) ($is_sequential_field ($f_owns ^Tree)))
    (ite true ($is_volatile_field ($f_owns $inactive_union_owner_type)) ($is_sequential_field ($f_owns $inactive_union_owner_type)))
    (ite true ($is_volatile_field ($f_owns ^$@thread_id_t)) ($is_sequential_field ($f_owns ^$@thread_id_t)))
    (not ($is_primitive $inactive_union_owner_type))
    (not ($is_primitive ^$@thread_id_t))
    (not ($is_primitive ^$@volatile_version_t))
    (not ($is_primitive ^^claim))
    (not ($is_primitive ^Node))
    (not ($is_primitive ^Tree))
    (not ($is_union_type ^Node))
    (not ($is_union_type ^Tree))
    (not (= $inactive_union_owner ($phys_ptr_cast $null ($field_type ($field $inactive_union_owner)))))
    (not (= $me ($phys_ptr_cast $null ($field_type ($field $me)))))
  )
    PreconditionGeneratedEntry
)))
(let (($root (=> (and true
  )
    $start
)))
   $root
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))

;Commands
   (check-sat)
   ;(get-unsat-core)
