;Analysis time until now:     2s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
(set-option :smt.qi.profile true)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$ptr@To@Bool@@ 0)
(declare-sort $ctype 0)
(declare-sort $field 0)
(declare-sort $flowdata 0)
(declare-sort $kind 0)
(declare-sort $label 0)
(declare-sort $map_t..$ptr_to..^^void.^^bool 0)
(declare-sort $memory_t 0)
(declare-sort $ptr 0)
(declare-sort $ptrclub 0)
(declare-sort $ptrset 0)
(declare-sort $pure_function 0)
(declare-sort $record 0)
(declare-sort $state 0)
(declare-sort $status 0)
(declare-sort $statusmap_t 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $type_state 0)
(declare-sort $typemap_t 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)

;Functions
(declare-fun $@bf_270 ( ) Bool)
(declare-fun $@bf_271 ( ) Bool)
(declare-fun $@bf_272 ( ) Bool)
(declare-fun $@bf_273 ( ) Bool)
(declare-fun $@bf_274 ( ) Bool)
(declare-fun $@bf_275 ( ) Bool)
(declare-fun $@bf_276 ( ) Bool)
(declare-fun $@bf_277 ( ) Bool)
(declare-fun $@bf_278 ( ) Bool)
(declare-fun $@bf_279 ( ) Bool)
(declare-fun $@bf_280 ( ) Bool)
(declare-fun $@bf_281 ( ) Bool)
(declare-fun $@classifier@default ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@distTp3 ( ) $ctype)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c ( ) $token)
(declare-fun $@loc._this_ ( ) $token)
(declare-fun $@tok$1^13.1 ( ) $token)
(declare-fun $@wrTime$1^13.1 ( ) Int)
(declare-fun $_and ( $ctype Int Int ) Int)
(declare-fun $_not ( $ctype Int ) Int)
(declare-fun $_or ( $ctype Int Int ) Int)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $_xor ( $ctype Int Int ) Int)
(declare-fun $active_option ( $state $ptr ) $field)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $array_length ( $ctype ) Int)
(declare-fun $array_members ( $ptr $ctype Int ) $ptrset)
(declare-fun $array_path ( $field Int ) $field)
(declare-fun $array_path_1 ( $field ) $field)
(declare-fun $array_path_2 ( $field ) Int)
(declare-fun $array_range ( $state $ptr $ctype Int ) $ptrset)
(declare-fun $array_range_no_state ( $ptr $ctype Int ) $ptrset)
(declare-fun $as_array ( $ptr $ctype Int ) $ptr)
(declare-fun $as_in_range_t ( $ctype ) $ctype)
(declare-fun $as_record_record_field ( $field ) $field)
(declare-fun $bv_extract_signed ( Int Int Int Int ) Int)
(declare-fun $bv_extract_unsigned ( Int Int Int Int ) Int)
(declare-fun $bv_update ( Int Int Int Int Int ) Int)
(declare-fun $by_claim ( $state $ptr $ptr $ptr ) $ptr)
(declare-fun $claim_idx ( $ptr $ptr ) Int)
(declare-fun $claim_no ( $state $ptr Int ) $ptr)
(declare-fun $claim_version ( $ptr ) $version)
(declare-fun $current_frame_level ( ) Int)
(declare-fun $current_pure_post_level ( ) Int)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $domain ( $state $ptr ) $ptrset)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $element_type ( $ctype ) $ctype)
(declare-fun $emb ( $state $ptr ) $ptr)
(declare-fun $embedded_array_size ( $field $ctype ) Int)
(declare-fun $extent ( $state $ptr ) $ptrset)
(declare-fun $fetch_from_domain ( $version $ptr ) Int)
(declare-fun $fetch_from_vv ( $vol_version $ptr ) Int)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $frame_level ( $pure_function ) Int)
(declare-fun $full_extent ( $ptr ) $ptrset)
(declare-fun $get_fnptr ( Int $ctype ) $ptr)
(declare-fun $get_fnptr_ref ( Int ) Int)
(declare-fun $get_string_literal ( Int Int ) $ptr)
(declare-fun $ghost_emb ( Int ) $ptr)
(declare-fun $ghost_path ( Int ) $field)
(declare-fun $ghost_ref ( $ptr $field ) Int)
(declare-fun $id_set_disjoint ( $ptr $ptrset $ptrset ) Int)
(declare-fun $idx ( $ptr Int $ctype ) $ptr)
(declare-fun $index_within ( $ptr $ptr ) Int)
(declare-fun $int_to_map_t..ptr_to..^^void.^^bool ( Int ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $int_to_ptr ( Int ) $ptr)
(declare-fun $int_to_ptrset ( Int ) $ptrset)
(declare-fun $int_to_record ( Int ) $record)
(declare-fun $int_to_version ( Int ) $version)
(declare-fun $int_to_vol_version ( Int ) $vol_version)
(declare-fun $kind_array ( ) $kind)
(declare-fun $kind_composite ( ) $kind)
(declare-fun $kind_of ( $ctype ) $kind)
(declare-fun $kind_primitive ( ) $kind)
(declare-fun $kind_thread ( ) $kind)
(declare-fun $lblset.bot ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $lblset.top ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $me_ref ( ) Int)
(declare-fun $mem ( $state $ptr ) Int)
(declare-fun $memory ( $state ) $memory_t)
(declare-fun $memory_allocator_type ( ) $ctype)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $no_claim ( ) $ptr)
(declare-fun $non_null_array_range ( $ptr $ctype Int ) $ptrset)
(declare-fun $non_null_extent ( $state $ptr ) $ptrset)
(declare-fun $non_null_set_singleton ( $ptr ) $ptrset)
(declare-fun $null ( ) $ptr)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $ptrset)
(declare-fun $owns_set_field ( $ctype ) $field)
(declare-fun $path ( $state $ptr ) $field)
(declare-fun $ptr ( $ctype Int ) $ptr)
(declare-fun $ptr_level ( $ctype ) Int)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_int ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $ptrclub.addMember ( $ptr $ptrclub ) $ptrclub)
(declare-fun $ptrclub.bound ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.compare ( $ptr $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.construct ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $ptrclub)
(declare-fun $ptrclub.empty ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.members ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $pure_post_level ( $pure_function ) Int)
(declare-fun $read_ptr_m ( $state $ptr $ctype ) $ptr)
(declare-fun $read_version ( $state $ptr ) $version)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $rec_fetch ( $record $field ) Int)
(declare-fun $rec_update ( $record $field Int ) $record)
(declare-fun $rec_zero ( ) $record)
(declare-fun $record_field_int_kind ( $field ) $ctype)
(declare-fun $ref ( $ptr ) Int)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $release ( $state $state $ptr $ptr ) $state)
(declare-fun $released ( $state $ptr $ptr ) $status)
(declare-fun $s ( ) $state)
(declare-fun $s@0 ( ) $state)
(declare-fun $s@1 ( ) $state)
(declare-fun $s@2 ( ) $state)
(declare-fun $select.flow.data ( $memory_t $ptr ) $flowdata)
(declare-fun $select.flow.label ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.flow.meta ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.mem ( $memory_t $ptr ) Int)
(declare-fun $select.sec.pc ( $state ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.sm ( $statusmap_t $ptr ) $status)
(declare-fun $select.tm ( $typemap_t $ptr ) $type_state)
(declare-fun $select_range.mem ( $memory_t $ptr Int ) Int)
(declare-fun $set_cardinality ( $ptrset ) Int)
(declare-fun $set_difference ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_empty ( ) $ptrset)
(declare-fun $set_intersection ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_singleton ( $ptr ) $ptrset)
(declare-fun $set_union ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_universe ( ) $ptrset)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $span ( $ptr ) $ptrset)
(declare-fun $spec_ptr_to ( $ctype ) $ctype)
(declare-fun $st ( $state $ptr ) $status)
(declare-fun $st_owner ( $status ) $ptr)
(declare-fun $st_timestamp ( $status ) Int)
(declare-fun $statusmap ( $state ) $statusmap_t)
(declare-fun $store.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr Bool ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $store.flow.data ( $memory_t $ptr $flowdata ) $memory_t)
(declare-fun $store.flow.label ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.flow.meta ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.mem ( $memory_t $ptr Int ) $memory_t)
(declare-fun $store.sm ( $statusmap_t $ptr $status ) $statusmap_t)
(declare-fun $store.tm ( $typemap_t $ptr $type_state ) $typemap_t)
(declare-fun $struct_extent ( $ptr ) $ptrset)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $take_over ( $state $ptr $ptr ) $state)
(declare-fun $taken_over ( $state $ptr $ptr ) $status)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $ts ( $state $ptr ) $type_state)
(declare-fun $ts_active_option ( $type_state ) $field)
(declare-fun $ts_emb ( $type_state ) $ptr)
(declare-fun $ts_path ( $type_state ) $field)
(declare-fun $typ ( $ptr ) $ctype)
(declare-fun $typemap ( $state ) $typemap_t)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $unchecked_sbits ( Int Int ) Int)
(declare-fun $unchecked_ubits ( Int Int ) Int)
(declare-fun $unchk_add ( $ctype Int Int ) Int)
(declare-fun $unptr_to ( $ctype ) $ctype)
(declare-fun $update_int ( $state $ptr Int ) $state)
(declare-fun $ver_domain ( $version ) $ptrset)
(declare-fun $volatile_span ( $state $ptr ) $ptrset)
(declare-fun $vs_base_ref ( $struct ) Int)
(declare-fun $vs_ctor ( $state $ptr ) $struct)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun $zero.$map_t..$ptr_to..^^void.^^bool ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@state_t ( ) $ctype)
(declare-fun ^$@struct ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^$@thread_id_t ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^f4 ( ) $ctype)
(declare-fun ^^f8 ( ) $ctype)
(declare-fun ^^i1 ( ) $ctype)
(declare-fun ^^i2 ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^i8 ( ) $ctype)
(declare-fun ^^mathint ( ) $ctype)
(declare-fun ^^root_emb ( ) $ctype)
(declare-fun ^^u1 ( ) $ctype)
(declare-fun ^^u2 ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun ^A ( ) $ctype)
(declare-fun A.$owns ( ) $field)
(declare-fun A.x ( ) $field)
(declare-fun call0formal@@l@0 ( ) $ptr)
(declare-fun call0formal@p@0 ( ) $ptr)
(declare-fun cf@classifier@default ( ) $pure_function)
(declare-fun l@public ( ) $label)
(declare-fun MapRead$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr ) Bool)
(declare-fun MapWrite$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr Bool ) $@Map@@$ptr@To@Bool@@)
(declare-fun P@_this_ ( ) Int)

;Predicates
(declare-fun $account_claim ( $state $ptr $ptr ) Bool)
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $claimed_closed ( $state $ptr ) Bool)
(declare-fun $claims_claim ( $ptr $ptr ) Bool)
(declare-fun $claims_obj ( $ptr $ptr ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $closed_is_transitive ( $state ) Bool)
(declare-fun $domain_updated_at ( $state $state $ptr $ptrset ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $dont_instantiate_state ( $state ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $map_t..$ptr_to..^^void.^^bool ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $extent_zero ( $state $ptr ) Bool)
(declare-fun $file_name_is ( Int $token ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $full_stop_ext ( $token $state ) Bool)
(declare-fun $function_arg_type ( $pure_function Int $ctype ) Bool)
(declare-fun $function_entry ( $state ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_post_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_volatile_owns_set ( $ctype ) Bool)
(declare-fun $in_claim_domain ( $ptr $ptr ) Bool)
(declare-fun $in_domain ( $state $ptr $ptr ) Bool)
(declare-fun $in_domain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_extent_of ( $state $ptr $ptr ) Bool)
(declare-fun $in_full_extent_of ( $ptr $ptr ) Bool)
(declare-fun $in_range ( Int Int Int ) Bool)
(declare-fun $in_range_phys_ptr ( Int ) Bool)
(declare-fun $in_range_sbits ( Int Int ) Bool)
(declare-fun $in_range_spec_ptr ( Int ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $in_range_ubits ( Int Int ) Bool)
(declare-fun $in_some_owns ( $ptr ) Bool)
(declare-fun $in_vdomain ( $state $ptr $ptr ) Bool)
(declare-fun $in_vdomain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_wrapped_domain ( $state $ptr ) Bool)
(declare-fun $in_writes_at ( Int $ptr ) Bool)
(declare-fun $instantiate_bool ( Bool ) Bool)
(declare-fun $instantiate_int ( Int ) Bool)
(declare-fun $instantiate_ptr ( $ptr ) Bool)
(declare-fun $instantiate_ptrset ( $ptrset ) Bool)
(declare-fun $inv ( $state $ptr $ctype ) Bool)
(declare-fun $inv_is_approved_by_ptr ( $state $state $ptr $ptr $field ) Bool)
(declare-fun $inv_lab ( $state $ptr $label ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2_when_closed ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2nt ( $state $state $ptr ) Bool)
(declare-fun $invok_state ( $state ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_approved_by ( $ctype $field $field ) Bool)
(declare-fun $is_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_array_vol_or_nonvol ( $state $ptr $ctype Int Bool ) Bool)
(declare-fun $is_arraytype ( $ctype ) Bool)
(declare-fun $is_base_field ( $field ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_composite ( $ctype ) Bool)
(declare-fun $is_domain_root ( $state $ptr ) Bool)
(declare-fun $is_fnptr_type ( $ctype ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_non_primitive ( $ctype ) Bool)
(declare-fun $is_object_root ( $state $ptr ) Bool)
(declare-fun $is_owner_approved ( $ctype $field ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_primitive_ch ( $ctype ) Bool)
(declare-fun $is_primitive_embedded_array ( $field Int ) Bool)
(declare-fun $is_primitive_embedded_volatile_array ( $field Int $ctype ) Bool)
(declare-fun $is_primitive_non_volatile_field ( $field ) Bool)
(declare-fun $is_primitive_volatile_field ( $field ) Bool)
(declare-fun $is_record_field ( $ctype $field $ctype ) Bool)
(declare-fun $is_record_type ( $ctype ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $is_volatile ( $state $ptr ) Bool)
(declare-fun $local_value_is ( $state $token $token Int $ctype ) Bool)
(declare-fun $local_value_is_ptr ( $state $token $token $ptr $ctype ) Bool)
(declare-fun $mem_eq ( $state $state $ptr ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $nested ( $state $ptr ) Bool)
(declare-fun $nested_in ( $state $ptr $ptr ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $position_marker ( ) Bool)
(declare-fun $post_unwrap ( $state $state ) Bool)
(declare-fun $program_entry_point ( $state ) Bool)
(declare-fun $program_entry_point_ch ( $state ) Bool)
(declare-fun $rec_base_eq ( Int Int ) Bool)
(declare-fun $rec_eq ( $record $record ) Bool)
(declare-fun $seclbl.bot ( ) Bool)
(declare-fun $seclbl.leq ( Bool Bool ) Bool)
(declare-fun $seclbl.top ( ) Bool)
(declare-fun $select.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr ) Bool)
(declare-fun $sequential ( $state $state $ptr $ctype ) Bool)
(declare-fun $set_disjoint ( $ptrset $ptrset ) Bool)
(declare-fun $set_eq ( $ptrset $ptrset ) Bool)
(declare-fun $set_in ( $ptr $ptrset ) Bool)
(declare-fun $set_in0 ( $ptr $ptrset ) Bool)
(declare-fun $set_in2 ( $ptr $ptrset ) Bool)
(declare-fun $simple_index ( $ptr $ptr ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $st_closed ( $status ) Bool)
(declare-fun $st_eq ( $state $state $ptr ) Bool)
(declare-fun $state_nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $state_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $stuttering_pre ( $state $ptr ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $thread_local2 ( $state $ptr $ctype ) Bool)
(declare-fun $thread_owned_or_even_mutable ( $state $ptr ) Bool)
(declare-fun $timestamp_is_now ( $state $ptr ) Bool)
(declare-fun $timestamp_post ( $state $state ) Bool)
(declare-fun $ts_eq ( $state $state $ptr ) Bool)
(declare-fun $ts_is_volatile ( $type_state ) Bool)
(declare-fun $ts_typed ( $type_state ) Bool)
(declare-fun $typed ( $state $ptr ) Bool)
(declare-fun $typed2 ( $state $ptr $ctype ) Bool)
(declare-fun $unwrap_post ( $state $state $ptr $ptr ) Bool)
(declare-fun $valid_claim ( $state $ptr ) Bool)
(declare-fun $wrapped ( $state $ptr $ctype ) Bool)
(declare-fun is_active_ptrclub ( $ptrclub ) Bool)

;Axioms
	

   (assert (! (not (= $@distTp1 $memory_allocator_type)) :named ax_2))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_3))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_4))
   (assert (! (not (= $@distTp2 $memory_allocator_type)) :named ax_5))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_6))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_7))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_8))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_9))
   (assert (! (not (= $@distTp3 $memory_allocator_type)) :named ax_10))
   (assert (! (not (= $@loc._this_ $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c)) :named ax_11))
   (assert (! (not (= $@loc._this_ $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c)) :named ax_12))
   (assert (! (not (= $@loc._this_ $@tok$1^13.1)) :named ax_13))
   (assert (! (not (= $@tok$1^13.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c)) :named ax_14))
   (assert (! (not (= $@tok$1^13.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c)) :named ax_15))
   (assert (! (not (= $@tok$1^13.1 $@loc._this_)) :named ax_16))
   (assert (! (not (= $kind_array $kind_thread)) :named ax_17))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_18))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_19))
   (assert (! (not (= $kind_composite $kind_primitive)) :named ax_20))
   (assert (! (not (= $kind_composite $kind_thread)) :named ax_21))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_22))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_23))
   (assert (! (not (= $kind_primitive $kind_composite)) :named ax_24))
   (assert (! (not (= $kind_primitive $kind_thread)) :named ax_25))
   (assert (! (not (= $kind_thread $kind_array)) :named ax_26))
   (assert (! (not (= $kind_thread $kind_composite)) :named ax_27))
   (assert (! (not (= $kind_thread $kind_primitive)) :named ax_28))
   (assert (! (not (= $memory_allocator_type $@distTp1)) :named ax_29))
   (assert (! (not (= $memory_allocator_type $@distTp2)) :named ax_30))
   (assert (! (not (= $memory_allocator_type $@distTp3)) :named ax_31))
   (assert (! (not (= $memory_allocator_type ^$@thread_id)) :named ax_32))
   (assert (! (not (= $memory_allocator_type ^A)) :named ax_33))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_34))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_35))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_36))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_37))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_38))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_39))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_40))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_41))
   (assert (! (not (= ^$@ptrset ^$@state_t)) :named ax_42))
   (assert (! (not (= ^$@ptrset ^$@struct)) :named ax_43))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_44))
   (assert (! (not (= ^$@ptrset ^A)) :named ax_45))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_46))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_47))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_48))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_49))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_50))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_51))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_52))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_53))
   (assert (! (not (= ^$@state_t ^$@ptrset)) :named ax_54))
   (assert (! (not (= ^$@state_t ^$@struct)) :named ax_55))
   (assert (! (not (= ^$@state_t ^$@thread_id)) :named ax_56))
   (assert (! (not (= ^$@state_t ^A)) :named ax_57))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_58))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_59))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_60))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_61))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_62))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_63))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_64))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_65))
   (assert (! (not (= ^$@struct ^$@ptrset)) :named ax_66))
   (assert (! (not (= ^$@struct ^$@state_t)) :named ax_67))
   (assert (! (not (= ^$@struct ^$@thread_id)) :named ax_68))
   (assert (! (not (= ^$@struct ^A)) :named ax_69))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_70))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_71))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_72))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_73))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_74))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_75))
   (assert (! (not (= ^$@thread_id $memory_allocator_type)) :named ax_76))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_77))
   (assert (! (not (= ^$@thread_id ^$@state_t)) :named ax_78))
   (assert (! (not (= ^$@thread_id ^$@struct)) :named ax_79))
   (assert (! (not (= ^$@thread_id ^A)) :named ax_80))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_81))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_82))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_83))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_84))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_85))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_86))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_87))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_88))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_89))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_90))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_91))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_92))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_93))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_94))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_95))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_96))
   (assert (! (not (= ^$@thread_id_t ^A)) :named ax_97))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_98))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_99))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_100))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_101))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_102))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_103))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_104))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_105))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_106))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_107))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_108))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_109))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_110))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_111))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_112))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_113))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_114))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_115))
   (assert (! (not (= ^^bool ^^claim)) :named ax_116))
   (assert (! (not (= ^^bool ^^f4)) :named ax_117))
   (assert (! (not (= ^^bool ^^f8)) :named ax_118))
   (assert (! (not (= ^^bool ^^mathint)) :named ax_119))
   (assert (! (not (= ^^bool ^^root_emb)) :named ax_120))
   (assert (! (not (= ^^bool ^A)) :named ax_121))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_122))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_123))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_124))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_125))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_126))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_127))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_128))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_129))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_130))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_131))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_132))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_133))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_134))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_135))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_136))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_137))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_138))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_139))
   (assert (! (not (= ^^claim ^^bool)) :named ax_140))
   (assert (! (not (= ^^claim ^^mathint)) :named ax_141))
   (assert (! (not (= ^^claim ^^root_emb)) :named ax_142))
   (assert (! (not (= ^^claim ^A)) :named ax_143))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_144))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_145))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_146))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_147))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_148))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_149))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_150))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_151))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_152))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_153))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_154))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_155))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_156))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_157))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_158))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_159))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_160))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_161))
   (assert (! (not (= ^^f4 ^^bool)) :named ax_162))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_163))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_164))
   (assert (! (not (= ^^f4 ^^f8)) :named ax_165))
   (assert (! (not (= ^^f4 ^^mathint)) :named ax_166))
   (assert (! (not (= ^^f4 ^^root_emb)) :named ax_167))
   (assert (! (not (= ^^f4 ^A)) :named ax_168))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_169))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_170))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_171))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_172))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_173))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_174))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_175))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_176))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_177))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_178))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_179))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_180))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_181))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_182))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_183))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_184))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_185))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_186))
   (assert (! (not (= ^^f8 ^^bool)) :named ax_187))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_188))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_189))
   (assert (! (not (= ^^f8 ^^f4)) :named ax_190))
   (assert (! (not (= ^^f8 ^^mathint)) :named ax_191))
   (assert (! (not (= ^^f8 ^^root_emb)) :named ax_192))
   (assert (! (not (= ^^f8 ^A)) :named ax_193))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_194))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_195))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_196))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_197))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_198))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_199))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_200))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_201))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_202))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_203))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_204))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_205))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_206))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_207))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_208))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_209))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_210))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_211))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_212))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_213))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_214))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_215))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_216))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_217))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_218))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_219))
   (assert (! (not (= ^^i1 ^^i2)) :named ax_220))
   (assert (! (not (= ^^i1 ^^i4)) :named ax_221))
   (assert (! (not (= ^^i1 ^^i8)) :named ax_222))
   (assert (! (not (= ^^i1 ^^mathint)) :named ax_223))
   (assert (! (not (= ^^i1 ^^root_emb)) :named ax_224))
   (assert (! (not (= ^^i1 ^^u1)) :named ax_225))
   (assert (! (not (= ^^i1 ^^u2)) :named ax_226))
   (assert (! (not (= ^^i1 ^^u4)) :named ax_227))
   (assert (! (not (= ^^i1 ^^u8)) :named ax_228))
   (assert (! (not (= ^^i1 ^^void)) :named ax_229))
   (assert (! (not (= ^^i1 ^A)) :named ax_230))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_231))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_232))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_233))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_234))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_235))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_236))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_237))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_238))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_239))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_240))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_241))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_242))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_243))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_244))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_245))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_246))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_247))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_248))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_249))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_250))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_251))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_252))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_253))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_254))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_255))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_256))
   (assert (! (not (= ^^i2 ^^i1)) :named ax_257))
   (assert (! (not (= ^^i2 ^^i4)) :named ax_258))
   (assert (! (not (= ^^i2 ^^i8)) :named ax_259))
   (assert (! (not (= ^^i2 ^^mathint)) :named ax_260))
   (assert (! (not (= ^^i2 ^^root_emb)) :named ax_261))
   (assert (! (not (= ^^i2 ^^u1)) :named ax_262))
   (assert (! (not (= ^^i2 ^^u2)) :named ax_263))
   (assert (! (not (= ^^i2 ^^u4)) :named ax_264))
   (assert (! (not (= ^^i2 ^^u8)) :named ax_265))
   (assert (! (not (= ^^i2 ^^void)) :named ax_266))
   (assert (! (not (= ^^i2 ^A)) :named ax_267))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_268))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_269))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_270))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_271))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_272))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_273))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_274))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_275))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_276))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_277))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_278))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_279))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_280))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_281))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_282))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_283))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_284))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_285))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_286))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_287))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_288))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_289))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_290))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_291))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_292))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_293))
   (assert (! (not (= ^^i4 ^^i1)) :named ax_294))
   (assert (! (not (= ^^i4 ^^i2)) :named ax_295))
   (assert (! (not (= ^^i4 ^^i8)) :named ax_296))
   (assert (! (not (= ^^i4 ^^mathint)) :named ax_297))
   (assert (! (not (= ^^i4 ^^root_emb)) :named ax_298))
   (assert (! (not (= ^^i4 ^^u1)) :named ax_299))
   (assert (! (not (= ^^i4 ^^u2)) :named ax_300))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_301))
   (assert (! (not (= ^^i4 ^^u8)) :named ax_302))
   (assert (! (not (= ^^i4 ^^void)) :named ax_303))
   (assert (! (not (= ^^i4 ^A)) :named ax_304))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_305))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_306))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_307))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_308))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_309))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_310))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_311))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_312))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_313))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_314))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_315))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_316))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_317))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_318))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_319))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_320))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_321))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_322))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_323))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_324))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_325))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_326))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_327))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_328))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_329))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_330))
   (assert (! (not (= ^^i8 ^^i1)) :named ax_331))
   (assert (! (not (= ^^i8 ^^i2)) :named ax_332))
   (assert (! (not (= ^^i8 ^^i4)) :named ax_333))
   (assert (! (not (= ^^i8 ^^mathint)) :named ax_334))
   (assert (! (not (= ^^i8 ^^root_emb)) :named ax_335))
   (assert (! (not (= ^^i8 ^^u1)) :named ax_336))
   (assert (! (not (= ^^i8 ^^u2)) :named ax_337))
   (assert (! (not (= ^^i8 ^^u4)) :named ax_338))
   (assert (! (not (= ^^i8 ^^u8)) :named ax_339))
   (assert (! (not (= ^^i8 ^^void)) :named ax_340))
   (assert (! (not (= ^^i8 ^A)) :named ax_341))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_342))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_343))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_344))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_345))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_346))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_347))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_348))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_349))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_350))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_351))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_352))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_353))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_354))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_355))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_356))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_357))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_358))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_359))
   (assert (! (not (= ^^mathint ^^bool)) :named ax_360))
   (assert (! (not (= ^^mathint ^^claim)) :named ax_361))
   (assert (! (not (= ^^mathint ^^f4)) :named ax_362))
   (assert (! (not (= ^^mathint ^^f8)) :named ax_363))
   (assert (! (not (= ^^mathint ^^i1)) :named ax_364))
   (assert (! (not (= ^^mathint ^^i2)) :named ax_365))
   (assert (! (not (= ^^mathint ^^i4)) :named ax_366))
   (assert (! (not (= ^^mathint ^^i8)) :named ax_367))
   (assert (! (not (= ^^mathint ^A)) :named ax_368))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_369))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_370))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_371))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_372))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_373))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_374))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_375))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_376))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_377))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_378))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_379))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_380))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_381))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_382))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_383))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_384))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_385))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_386))
   (assert (! (not (= ^^root_emb ^^bool)) :named ax_387))
   (assert (! (not (= ^^root_emb ^^claim)) :named ax_388))
   (assert (! (not (= ^^root_emb ^^f4)) :named ax_389))
   (assert (! (not (= ^^root_emb ^^f8)) :named ax_390))
   (assert (! (not (= ^^root_emb ^^i1)) :named ax_391))
   (assert (! (not (= ^^root_emb ^^i2)) :named ax_392))
   (assert (! (not (= ^^root_emb ^^i4)) :named ax_393))
   (assert (! (not (= ^^root_emb ^^i8)) :named ax_394))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_395))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_396))
   (assert (! (not (= ^^root_emb ^A)) :named ax_397))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_398))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_399))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_400))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_401))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_402))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_403))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_404))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_405))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_406))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_407))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_408))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_409))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_410))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_411))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_412))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_413))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_414))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_415))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_416))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_417))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_418))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_419))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_420))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_421))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_422))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_423))
   (assert (! (not (= ^^u1 ^^i1)) :named ax_424))
   (assert (! (not (= ^^u1 ^^i2)) :named ax_425))
   (assert (! (not (= ^^u1 ^^i4)) :named ax_426))
   (assert (! (not (= ^^u1 ^^i8)) :named ax_427))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_428))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_429))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_430))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_431))
   (assert (! (not (= ^^u1 ^^u2)) :named ax_432))
   (assert (! (not (= ^^u1 ^^u4)) :named ax_433))
   (assert (! (not (= ^^u1 ^^u8)) :named ax_434))
   (assert (! (not (= ^^u1 ^^void)) :named ax_435))
   (assert (! (not (= ^^u1 ^A)) :named ax_436))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_437))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_438))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_439))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_440))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_441))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_442))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_443))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_444))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_445))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_446))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_447))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_448))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_449))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_450))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_451))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_452))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_453))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_454))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_455))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_456))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_457))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_458))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_459))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_460))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_461))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_462))
   (assert (! (not (= ^^u2 ^^i1)) :named ax_463))
   (assert (! (not (= ^^u2 ^^i2)) :named ax_464))
   (assert (! (not (= ^^u2 ^^i4)) :named ax_465))
   (assert (! (not (= ^^u2 ^^i8)) :named ax_466))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_467))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_468))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_469))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_470))
   (assert (! (not (= ^^u2 ^^u1)) :named ax_471))
   (assert (! (not (= ^^u2 ^^u4)) :named ax_472))
   (assert (! (not (= ^^u2 ^^u8)) :named ax_473))
   (assert (! (not (= ^^u2 ^^void)) :named ax_474))
   (assert (! (not (= ^^u2 ^A)) :named ax_475))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_476))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_477))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_478))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_479))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_480))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_481))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_482))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_483))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_484))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_485))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_486))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_487))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_488))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_489))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_490))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_491))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_492))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_493))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_494))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_495))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_496))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_497))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_498))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_499))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_500))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_501))
   (assert (! (not (= ^^u4 ^^i1)) :named ax_502))
   (assert (! (not (= ^^u4 ^^i2)) :named ax_503))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_504))
   (assert (! (not (= ^^u4 ^^i8)) :named ax_505))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_506))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_507))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_508))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_509))
   (assert (! (not (= ^^u4 ^^u1)) :named ax_510))
   (assert (! (not (= ^^u4 ^^u2)) :named ax_511))
   (assert (! (not (= ^^u4 ^^u8)) :named ax_512))
   (assert (! (not (= ^^u4 ^^void)) :named ax_513))
   (assert (! (not (= ^^u4 ^A)) :named ax_514))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_515))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_516))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_517))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_518))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_519))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_520))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_521))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_522))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_523))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_524))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_525))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_526))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_527))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_528))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_529))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_530))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_531))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_532))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_533))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_534))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_535))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_536))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_537))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_538))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_539))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_540))
   (assert (! (not (= ^^u8 ^^i1)) :named ax_541))
   (assert (! (not (= ^^u8 ^^i2)) :named ax_542))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_543))
   (assert (! (not (= ^^u8 ^^i8)) :named ax_544))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_545))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_546))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_547))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_548))
   (assert (! (not (= ^^u8 ^^u1)) :named ax_549))
   (assert (! (not (= ^^u8 ^^u2)) :named ax_550))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_551))
   (assert (! (not (= ^^u8 ^^void)) :named ax_552))
   (assert (! (not (= ^^u8 ^A)) :named ax_553))
   (assert (! (not (= ^^void $@distTp1)) :named ax_554))
   (assert (! (not (= ^^void $@distTp1)) :named ax_555))
   (assert (! (not (= ^^void $@distTp2)) :named ax_556))
   (assert (! (not (= ^^void $@distTp2)) :named ax_557))
   (assert (! (not (= ^^void $@distTp3)) :named ax_558))
   (assert (! (not (= ^^void $@distTp3)) :named ax_559))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_560))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_561))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_562))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_563))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_564))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_565))
   (assert (! (not (= ^^void ^$@struct)) :named ax_566))
   (assert (! (not (= ^^void ^$@struct)) :named ax_567))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_568))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_569))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_570))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_571))
   (assert (! (not (= ^^void ^^bool)) :named ax_572))
   (assert (! (not (= ^^void ^^bool)) :named ax_573))
   (assert (! (not (= ^^void ^^claim)) :named ax_574))
   (assert (! (not (= ^^void ^^claim)) :named ax_575))
   (assert (! (not (= ^^void ^^f4)) :named ax_576))
   (assert (! (not (= ^^void ^^f4)) :named ax_577))
   (assert (! (not (= ^^void ^^f8)) :named ax_578))
   (assert (! (not (= ^^void ^^f8)) :named ax_579))
   (assert (! (not (= ^^void ^^i1)) :named ax_580))
   (assert (! (not (= ^^void ^^i2)) :named ax_581))
   (assert (! (not (= ^^void ^^i4)) :named ax_582))
   (assert (! (not (= ^^void ^^i8)) :named ax_583))
   (assert (! (not (= ^^void ^^mathint)) :named ax_584))
   (assert (! (not (= ^^void ^^mathint)) :named ax_585))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_586))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_587))
   (assert (! (not (= ^^void ^^u1)) :named ax_588))
   (assert (! (not (= ^^void ^^u2)) :named ax_589))
   (assert (! (not (= ^^void ^^u4)) :named ax_590))
   (assert (! (not (= ^^void ^^u8)) :named ax_591))
   (assert (! (not (= ^^void ^A)) :named ax_592))
   (assert (! (not (= ^A $@distTp1)) :named ax_593))
   (assert (! (not (= ^A $@distTp1)) :named ax_594))
   (assert (! (not (= ^A $@distTp2)) :named ax_595))
   (assert (! (not (= ^A $@distTp2)) :named ax_596))
   (assert (! (not (= ^A $@distTp3)) :named ax_597))
   (assert (! (not (= ^A $@distTp3)) :named ax_598))
   (assert (! (not (= ^A $memory_allocator_type)) :named ax_599))
   (assert (! (not (= ^A ^$@ptrset)) :named ax_600))
   (assert (! (not (= ^A ^$@state_t)) :named ax_601))
   (assert (! (not (= ^A ^$@struct)) :named ax_602))
   (assert (! (not (= ^A ^$@thread_id)) :named ax_603))
   (assert (! (not (= ^A ^$@thread_id_t)) :named ax_604))
   (assert (! (not (= ^A ^^bool)) :named ax_605))
   (assert (! (not (= ^A ^^claim)) :named ax_606))
   (assert (! (not (= ^A ^^f4)) :named ax_607))
   (assert (! (not (= ^A ^^f8)) :named ax_608))
   (assert (! (not (= ^A ^^i1)) :named ax_609))
   (assert (! (not (= ^A ^^i2)) :named ax_610))
   (assert (! (not (= ^A ^^i4)) :named ax_611))
   (assert (! (not (= ^A ^^i8)) :named ax_612))
   (assert (! (not (= ^A ^^mathint)) :named ax_613))
   (assert (! (not (= ^A ^^root_emb)) :named ax_614))
   (assert (! (not (= ^A ^^u1)) :named ax_615))
   (assert (! (not (= ^A ^^u2)) :named ax_616))
   (assert (! (not (= ^A ^^u4)) :named ax_617))
   (assert (! (not (= ^A ^^u8)) :named ax_618))
   (assert (! (not (= ^A ^^void)) :named ax_619))
   (assert (! (not (= A.$owns A.x)) :named ax_620))
   (assert (! (not (= A.x A.$owns)) :named ax_621))


   (assert    (forall( (|#t_$5| $ctype) (|#b| Int))(!(= ($typ ($ptr |#t_$5| |#b|)) |#t_$5|)  :weight  0)))
(assert        (forall( (|#s1_$11| $state) (|#s2_$8| $state) (|#p_$33| $ptr))(!(= ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^A) (and (and ($typed |#s2_$8| |#p_$33|) ($set_eq ($owns |#s2_$8| |#p_$33|) $set_empty)) (or (= ($select.mem ($memory |#s1_$11|) ($dot |#p_$33| A.x)) ($select.mem ($memory |#s2_$8|) ($dot |#p_$33| A.x))) (= (+ ($select.mem ($memory |#s1_$11|) ($dot |#p_$33| A.x)) 1) ($select.mem ($memory |#s2_$8|) ($dot |#p_$33| A.x))))))  :pattern ( ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^A)))))
    (assert    (forall( (|#p_$34| $ptr) (|#s1_$12| $state) (|#s2_$10| $state))(!(= ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^A) (and (= ($mem |#s1_$12| ($dot |#p_$34| A.$owns)) ($mem |#s2_$10| ($dot |#p_$34| A.$owns))) (= ($mem |#s1_$12| ($dot |#p_$34| A.x)) ($mem |#s2_$10| ($dot |#p_$34| A.x)))))  :pattern ( ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^A)))))
    (assert    (forall( (|#s1_$8| $state) (|#s2_$5| $state) (|#p_$27| $ptr) (|#t_$11| $ctype))(!(= ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|) (and (and (and (= ($read_version |#s1_$8| |#p_$27|) ($read_version |#s2_$5| |#p_$27|)) (= ($owns |#s1_$8| |#p_$27|) ($owns |#s2_$5| |#p_$27|))) (= ($select.tm ($typemap |#s1_$8|) |#p_$27|) ($select.tm ($typemap |#s2_$5|) |#p_$27|))) ($state_spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))  :weight  0 :pattern ( ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))))

   
   ;Program
(assert (not
(let (($@hash@exit@1_assertion (and
    true ;(=> (and (not $is_stuttering_check) (not $is_unwrap_check)) (or (= ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x))) (= (+ ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) 1) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x)))))
)))
(let (($@hash@exit@3_assertion (and
    ($set_eq ($owns $s@2 ($ptr ^A P@_this_)) $set_empty) ;(=> $is_unwrap_check ($set_eq ($owns $s@2 ($ptr ^A P@_this_)) $set_empty))
)))
(let (($@hash@exit_assertion (and
    true ;(=> (and (not $is_stuttering_check) (not $is_unwrap_check)) ($set_eq ($owns $s@2 ($ptr ^A P@_this_)) $set_empty))
)))
(let ((anon5_assertion (and
    true ;($good_for_admissibility $s)
)))
(let (($@hash@exit@3 (=> (and true
    (=> $is_stuttering_check (or (= ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x)) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x))) (= (+ ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x)) 1) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x)))))
  )
    $@hash@exit@3_assertion
)))
(let (($@hash@exit@2 (=> (and true
    (=> (and (not $is_stuttering_check) (not $is_unwrap_check)) (or (= ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x))) (= (+ ($select.mem ($memory $s) ($dot ($ptr ^A P@_this_) A.x)) 1) ($select.mem ($memory $s@2) ($dot ($ptr ^A P@_this_) A.x)))))
  )
    $@hash@exit@3
)))
(let (($@hash@exit@1 (=> (and true
    (=> (and (not $is_stuttering_check) (not $is_unwrap_check)) ($set_eq ($owns $s@2 ($ptr ^A P@_this_)) $set_empty))
  )(and 
    $@hash@exit@1_assertion
    $@hash@exit@2
))))
(let (($@hash@exit (=> (and true
  )(and 
    $@hash@exit_assertion
    $@hash@exit@1
))))
(let ((anon00_Then@1 (=> (and true
    (= $s@2 $s@0)
  )
    $@hash@exit
)))
(let ((anon5@2 true))
(let ((anon00_Then (=> (and true
    $is_unwrap_check
    ($good_for_pre_can_unwrap $s)
    ($good_state_ext $@tok$1^13.1 $s@0)
    ($inv $s ($ptr ^A P@_this_) ($typ ($ptr ^A P@_this_)))
    ($spans_the_same $s $s@0 call0formal@@l@0 ($typ call0formal@@l@0))
    ($wrapped $s ($ptr ^A P@_this_) ($typ ($ptr ^A P@_this_)))
    (= call0formal@@l@0 ($ptr ^A P@_this_))
    (not $is_stuttering_check)
    (or (not ($is_claimable ($typ ($ptr ^A P@_this_)))) (= ($ref_cnt $s ($ptr ^A P@_this_)) 0))
  )
    anon00_Then@1
)))
(let ((anon5@1 true ))
(let ((anon5 true))
(let ((anon01_Else true))
(let ((anon01_Then true))
(let ((anon00_Else true))
(let ((anon6 (=> (and true
    ($full_stop $s)
    ($function_entry $s)
    ($good_state_ext $@tok$1^13.1 $s)
    ($local_value_is $s $@tok$1^13.1 $@loc._this_ ($ptr_to_int ($ptr ^A P@_this_)) ($ptr_to ^A))
    ($local_value_is_ptr $s $@tok$1^13.1 $@loc._this_ ($ptr ^A P@_this_) ($ptr_to ^A))
    (= $@wrTime$1^13.1 ($current_timestamp $s))
  )
    anon00_Then ;(and anon00_Else anon00_Then)
)))
(let ((PreconditionGeneratedEntry (=> (and true
  )
    anon6
)))
(let (($start (=> (and true
    $position_marker
    ($file_name_is 1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cexamples?5CLockFreeIncr.c)
    ($function_arg_type cf@classifier@default 0 ($map_t ($ptr_to ^^void) ^^bool))
    ($good_state ($vs_state $struct_zero))
    ($has_volatile_owns_set ^^claim)
    ($in_range_spec_ptr $me_ref)
    ($is_base_field A.$owns)
    ($is_base_field A.x)
    ($is_claimable ^^claim)
    ($is_composite ^^claim)
    ($is_composite ^^root_emb)
    ($is_composite ^A)
    ($is_math_type ^$@thread_id)
    ($is_primitive ^$@ptrset)
    ($is_primitive ^$@state_t)
    ($is_primitive ^^bool)
    ($is_primitive ^^f4)
    ($is_primitive ^^f8)
    ($is_primitive ^^i1)
    ($is_primitive ^^i2)
    ($is_primitive ^^i4)
    ($is_primitive ^^i8)
    ($is_primitive ^^mathint)
    ($is_primitive ^^u1)
    ($is_primitive ^^u2)
    ($is_primitive ^^u4)
    ($is_primitive ^^u8)
    ($is_primitive ^^void)
    ($is_primitive_non_volatile_field A.$owns)
    ($is_primitive_volatile_field A.x)
    ($is_threadtype ^$@thread_id_t)
    (= $@distTp1 ($ptr_to ^A))
    (= $@distTp2 ($spec_ptr_to ^^claim))
    (= $@distTp3 ($ptr_to ^^i4))
    (= $arch_ptr_size 8)
    (= $arch_spec_ptr_start $max.u8)
    (= $max.i1 127)
    (= $max.i2 32767)
    (= $max.i4 (- (* 65536 32768) 1))
    (= $max.i8 (- (* (* (* 65536 65536) 65536) 32768) 1))
    (= $max.u1 255)
    (= $max.u2 65535)
    (= $max.u4 (- (* 65536 65536) 1))
    (= $max.u8 (- (* (* (* 65536 65536) 65536) 65536) 1))
    (= $me ($ptr ^$@thread_id_t $me_ref))
    (= $min.i1 (- 0 128))
    (= $min.i2 (- 0 32768))
    (= $min.i4 (- 0 (* 65536 32768)))
    (= $min.i8 (- 0 (* (* (* 65536 65536) 65536) 32768)))
    (= $no_claim ($ptr ^^claim 0))
    (= $null ($ptr ^^void 0))
    (= $seclbl.bot false)
    (= $seclbl.top true)
    (= ($_pow2 0) 1)
    (= ($_pow2 1) 2)
    (= ($_pow2 10) 1024)
    (= ($_pow2 11) 2048)
    (= ($_pow2 12) 4096)
    (= ($_pow2 13) 8192)
    (= ($_pow2 14) 16384)
    (= ($_pow2 15) 32768)
    (= ($_pow2 16) 65536)
    (= ($_pow2 17) 131072)
    (= ($_pow2 18) 262144)
    (= ($_pow2 19) 524288)
    (= ($_pow2 2) 4)
    (= ($_pow2 20) 1048576)
    (= ($_pow2 21) 2097152)
    (= ($_pow2 22) 4194304)
    (= ($_pow2 23) 8388608)
    (= ($_pow2 24) 16777216)
    (= ($_pow2 25) 33554432)
    (= ($_pow2 26) 67108864)
    (= ($_pow2 27) 134217728)
    (= ($_pow2 28) 268435456)
    (= ($_pow2 29) 536870912)
    (= ($_pow2 3) 8)
    (= ($_pow2 30) 1073741824)
    (= ($_pow2 31) 2147483648)
    (= ($_pow2 32) 4294967296)
    (= ($_pow2 33) 8589934592)
    (= ($_pow2 34) 17179869184)
    (= ($_pow2 35) 34359738368)
    (= ($_pow2 36) 68719476736)
    (= ($_pow2 37) 137438953472)
    (= ($_pow2 38) 274877906944)
    (= ($_pow2 39) 549755813888)
    (= ($_pow2 4) 16)
    (= ($_pow2 40) 1099511627776)
    (= ($_pow2 41) 2199023255552)
    (= ($_pow2 42) 4398046511104)
    (= ($_pow2 43) 8796093022208)
    (= ($_pow2 44) 17592186044416)
    (= ($_pow2 45) 35184372088832)
    (= ($_pow2 46) 70368744177664)
    (= ($_pow2 47) 140737488355328)
    (= ($_pow2 48) 281474976710656)
    (= ($_pow2 49) 562949953421312)
    (= ($_pow2 5) 32)
    (= ($_pow2 50) 1125899906842624)
    (= ($_pow2 51) 2251799813685248)
    (= ($_pow2 52) 4503599627370496)
    (= ($_pow2 53) 9007199254740992)
    (= ($_pow2 54) 18014398509481984)
    (= ($_pow2 55) 36028797018963968)
    (= ($_pow2 56) 72057594037927936)
    (= ($_pow2 57) 144115188075855872)
    (= ($_pow2 58) 288230376151711744)
    (= ($_pow2 59) 576460752303423488)
    (= ($_pow2 6) 64)
    (= ($_pow2 60) 1152921504606846976)
    (= ($_pow2 61) 2305843009213693952)
    (= ($_pow2 62) 4611686018427387904)
    (= ($_pow2 63) 9223372036854775808)
    (= ($_pow2 7) 128)
    (= ($_pow2 8) 256)
    (= ($_pow2 9) 512)
    (= ($as_in_range_t ^^f4) ^^f4)
    (= ($as_in_range_t ^^f8) ^^f8)
    (= ($as_in_range_t ^^i1) ^^i1)
    (= ($as_in_range_t ^^i2) ^^i2)
    (= ($as_in_range_t ^^i4) ^^i4)
    (= ($as_in_range_t ^^i8) ^^i8)
    (= ($as_in_range_t ^^u1) ^^u1)
    (= ($as_in_range_t ^^u2) ^^u2)
    (= ($as_in_range_t ^^u4) ^^u4)
    (= ($as_in_range_t ^^u8) ^^u8)
    (= ($field_parent_type A.$owns) ^A)
    (= ($field_parent_type A.x) ^A)
    (= ($has_volatile_owns_set ^A) false)
    (= ($int_to_map_t..ptr_to..^^void.^^bool 0) $zero.$map_t..$ptr_to..^^void.^^bool)
    (= ($is_claimable ^A) false)
    (= ($owns_set_field ^A) A.$owns)
    (= ($ptr_level $memory_allocator_type) 0)
    (= ($ptr_level ^$@ptrset) 0)
    (= ($ptr_level ^$@state_t) 0)
    (= ($ptr_level ^$@struct) 0)
    (= ($ptr_level ^$@thread_id_t) 0)
    (= ($ptr_level ^^bool) 0)
    (= ($ptr_level ^^claim) 0)
    (= ($ptr_level ^^f4) 0)
    (= ($ptr_level ^^f8) 0)
    (= ($ptr_level ^^i1) 0)
    (= ($ptr_level ^^i2) 0)
    (= ($ptr_level ^^i4) 0)
    (= ($ptr_level ^^i8) 0)
    (= ($ptr_level ^^mathint) 0)
    (= ($ptr_level ^^root_emb) 0)
    (= ($ptr_level ^^u1) 0)
    (= ($ptr_level ^^u2) 0)
    (= ($ptr_level ^^u4) 0)
    (= ($ptr_level ^^u8) 0)
    (= ($ptr_level ^^void) 0)
    (= ($ptr_level ^A) 0)
    (= ($ptr_to_i1 $null) 0)
    (= ($ptr_to_i2 $null) 0)
    (= ($ptr_to_i4 $null) 0)
    (= ($ptr_to_i8 $null) 0)
    (= ($ptr_to_u1 $null) 0)
    (= ($ptr_to_u2 $null) 0)
    (= ($ptr_to_u4 $null) 0)
    (= ($ptr_to_u8 $null) 0)
    (= ($set_cardinality $set_empty) 0)
    (= ($sizeof ^$@ptrset) 1)
    (= ($sizeof ^$@thread_id_t) 1)
    (= ($sizeof ^^f4) 4)
    (= ($sizeof ^^f8) 8)
    (= ($sizeof ^^i1) 1)
    (= ($sizeof ^^i2) 2)
    (= ($sizeof ^^i4) 4)
    (= ($sizeof ^^i8) 8)
    (= ($sizeof ^^u1) 1)
    (= ($sizeof ^^u2) 2)
    (= ($sizeof ^^u4) 4)
    (= ($sizeof ^^u8) 8)
    (= ($sizeof ^A) 4)
    (= ($unchecked ^^u4 (- 0 1)) $max.u4)
    (= ($unchecked ^^u4 (+ $max.u4 1)) 0)
    (= ($unchecked ^^u8 (- 0 1)) $max.u8)
    (= ($unchecked ^^u8 (+ $max.u8 1)) 0)
    (= (and (not $is_stuttering_check) (not $is_unwrap_check)) (and (not $is_stuttering_check) (not $is_unwrap_check)))
    (= true $@bf_270)
    (= true $@bf_270)
    (= true $@bf_271)
    (= true $@bf_271)
    (= true $@bf_273)
    (= true $@bf_273)
    (= true $@bf_274)
    (= true $@bf_274)
    (= true $@bf_278)
    (= true $@bf_278)
    (= true $@bf_279)
    (= true $@bf_279)
    (= true $@bf_280)
    (= true $@bf_280)
    (not (= $me_ref 0))
    (not (= true $@bf_272))
    (not (= true $@bf_272))
    (not (= true $@bf_275))
    (not (= true $@bf_275))
    (not (= true $@bf_276))
    (not (= true $@bf_276))
    (not (= true $@bf_277))
    (not (= true $@bf_277))
    (not (= true $@bf_281))
    (not (= true $@bf_281))
  )
    PreconditionGeneratedEntry
)))
(let (($root (=> (and true
  )
    $start
)))
   $root
))))))))))))))))))))
))

;Commands
   (check-sat)
   ;(get-unsat-core)
