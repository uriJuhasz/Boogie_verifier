;Analysis time until now:     9s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$ptr@To@Bool@@ 0)
(declare-sort $ctype 0)
(declare-sort $field 0)
(declare-sort $flowdata 0)
(declare-sort $kind 0)
(declare-sort $label 0)
(declare-sort $map_t..$ptr_to..^^void.^^bool 0)
(declare-sort $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool 0)
(declare-sort $map_t..$ptr_to..^Node.^^u4 0)
(declare-sort $map_t..^^i4.^^bool 0)
(declare-sort $map_t..^^u4.$ptr_to..^Node 0)
(declare-sort $memory_t 0)
(declare-sort $ptr 0)
(declare-sort $ptrclub 0)
(declare-sort $ptrset 0)
(declare-sort $pure_function 0)
(declare-sort $record 0)
(declare-sort $state 0)
(declare-sort $status 0)
(declare-sort $statusmap_t 0)
(declare-sort $struct 0)
(declare-sort $token 0)
(declare-sort $type_state 0)
(declare-sort $typemap_t 0)
(declare-sort $version 0)
(declare-sort $vol_version 0)
(declare-sort cf_event 0)
(declare-sort var_locglob 0)

;Functions
(declare-fun $@bf_121 ( $ptr $state $ptr ) Bool)
(declare-fun $@bf_123 ( $state $ptr $ptr $label ) Bool)
(declare-fun $@bf_154 ( $state ) Bool)
(declare-fun $@bf_161 ( ) Bool)
(declare-fun $@bf_162 ( ) Bool)
(declare-fun $@bf_201 ( $ptr $ptrset ) Bool)
(declare-fun $@bf_260 ( Int ) Bool)
(declare-fun $@bf_275 ( Int ) Bool)
(declare-fun $@bf_282 ( Int Int ) Bool)
(declare-fun $@bf_284 ( Int Int ) Bool)
(declare-fun $@bf_286 ( Int Int ) Bool)
(declare-fun $@bf_288 ( Int Int ) Bool)
(declare-fun $@bf_306 ( $ctype ) Bool)
(declare-fun $@bf_31 ( $state $ptr $field $ctype ) Bool)
(declare-fun $@bf_323 ( ) Bool)
(declare-fun $@bf_327 ( ) Bool)
(declare-fun $@bf_33 ( $state $ptr $field $ctype ) Bool)
(declare-fun $@bf_333 ( ) Bool)
(declare-fun $@bf_334 ( ) Bool)
(declare-fun $@bf_335 ( ) Bool)
(declare-fun $@bf_336 ( ) Bool)
(declare-fun $@bf_337 ( ) Bool)
(declare-fun $@bf_338 ( ) Bool)
(declare-fun $@bf_339 ( ) Bool)
(declare-fun $@bf_340 ( ) Bool)
(declare-fun $@bf_341 ( ) Bool)
(declare-fun $@bf_342 ( ) Bool)
(declare-fun $@bf_343 ( ) Bool)
(declare-fun $@bf_344 ( ) Bool)
(declare-fun $@bf_345 ( ) Bool)
(declare-fun $@bf_346 ( ) Bool)
(declare-fun $@bf_347 ( ) Bool)
(declare-fun $@bf_348 ( ) Bool)
(declare-fun $@bf_349 ( ) Bool)
(declare-fun $@bf_350 ( ) Bool)
(declare-fun $@bf_351 ( ) Bool)
(declare-fun $@bf_352 ( ) Bool)
(declare-fun $@bf_353 ( ) Bool)
(declare-fun $@bf_354 ( ) Bool)
(declare-fun $@bf_355 ( ) Bool)
(declare-fun $@bf_356 ( ) Bool)
(declare-fun $@bf_58 ( $state $ptr $ctype ) Bool)
(declare-fun $@bf_61 ( $state $ptr ) Bool)
(declare-fun $@bf_66 ( $state $ptr ) Bool)
(declare-fun $@bf_71 ( $state $ptr $ctype ) Bool)
(declare-fun $@bf_74 ( $state $ptr $ctype ) Bool)
(declare-fun $@bf_75 ( $state $ptr $ctype ) Bool)
(declare-fun $@bf_76 ( $state $ptr $ctype ) Bool)
(declare-fun $@bf_77 ( $state $ptr $ctype ) Bool)
(declare-fun $@bf_78 ( $ptr $ptr ) Bool)
(declare-fun $@classifier@default ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $@distTp1 ( ) $ctype)
(declare-fun $@distTp2 ( ) $ctype)
(declare-fun $@distTp3 ( ) $ctype)
(declare-fun $@distTp4 ( ) $ctype)
(declare-fun $@distTp5 ( ) $ctype)
(declare-fun $@distTp6 ( ) $ctype)
(declare-fun $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c ( ) $token)
(declare-fun $@loc._this_ ( ) $token)
(declare-fun $@loc.i ( ) $token)
(declare-fun $@loc.l ( ) $token)
(declare-fun $@loc.n ( ) $token)
(declare-fun $@sk_65 ( ) $pure_function)
(declare-fun $@sk_66 ( ) $pure_function)
(declare-fun $@sk_92 ( ) Int)
(declare-fun $@tok$1^30.1 ( ) $token)
(declare-fun $@tok$1^35.10 ( ) $token)
(declare-fun $@tok$1^36.3 ( ) $token)
(declare-fun $@tok$1^38.21 ( ) $token)
(declare-fun $@tok$1^38.3 ( ) $token)
(declare-fun $@tok$1^38.31 ( ) $token)
(declare-fun $@tok$1^38.44 ( ) $token)
(declare-fun $@tok$1^38.8 ( ) $token)
(declare-fun $@tok$1^9.31 ( ) $token)
(declare-fun $@wrTime$1^30.1 ( ) Int)
(declare-fun $_and ( $ctype Int Int ) Int)
(declare-fun $_not ( $ctype Int ) Int)
(declare-fun $_or ( $ctype Int Int ) Int)
(declare-fun $_pow2 ( Int ) Int)
(declare-fun $_shl ( $ctype Int Int ) Int)
(declare-fun $_shr ( Int Int ) Int)
(declare-fun $_xor ( $ctype Int Int ) Int)
(declare-fun $active_option ( $state $ptr ) $field)
(declare-fun $add ( Int Int ) Int)
(declare-fun $add.mul ( Int Int Int ) Int)
(declare-fun $arch_ptr_size ( ) Int)
(declare-fun $arch_spec_ptr_start ( ) Int)
(declare-fun $array ( $ctype Int ) $ctype)
(declare-fun $array_length ( $ctype ) Int)
(declare-fun $array_members ( $ptr $ctype Int ) $ptrset)
(declare-fun $array_path ( $field Int ) $field)
(declare-fun $array_path_1 ( $field ) $field)
(declare-fun $array_path_2 ( $field ) Int)
(declare-fun $array_range ( $state $ptr $ctype Int ) $ptrset)
(declare-fun $array_range_no_state ( $ptr $ctype Int ) $ptrset)
(declare-fun $as_array ( $ptr $ctype Int ) $ptr)
(declare-fun $as_in_range_t ( $ctype ) $ctype)
(declare-fun $as_record_record_field ( $field ) $field)
(declare-fun $bool_to_int ( Bool ) Int)
(declare-fun $bv_extract_signed ( Int Int Int Int ) Int)
(declare-fun $bv_extract_unsigned ( Int Int Int Int ) Int)
(declare-fun $bv_update ( Int Int Int Int Int ) Int)
(declare-fun $by_claim ( $state $ptr $ptr $ptr ) $ptr)
(declare-fun $byte_ptr_subtraction ( $ptr $ptr ) Int)
(declare-fun $claim_idx ( $ptr $ptr ) Int)
(declare-fun $claim_no ( $state $ptr Int ) $ptr)
(declare-fun $claim_version ( $ptr ) $version)
(declare-fun $current_frame_level ( ) Int)
(declare-fun $current_pure_post_level ( ) Int)
(declare-fun $current_state ( $state ) $state)
(declare-fun $current_timestamp ( $state ) Int)
(declare-fun $domain ( $state $ptr ) $ptrset)
(declare-fun $dot ( $ptr $field ) $ptr)
(declare-fun $element_type ( $ctype ) $ctype)
(declare-fun $emb ( $state $ptr ) $ptr)
(declare-fun $embedded_array_size ( $field $ctype ) Int)
(declare-fun $extent ( $state $ptr ) $ptrset)
(declare-fun $fetch_from_domain ( $version $ptr ) Int)
(declare-fun $fetch_from_vv ( $vol_version $ptr ) Int)
(declare-fun $fetch_vol_field ( $state $ptr $field ) Int)
(declare-fun $field_offset ( $field ) Int)
(declare-fun $field_parent_type ( $field ) $ctype)
(declare-fun $frame_level ( $pure_function ) Int)
(declare-fun $full_extent ( $ptr ) $ptrset)
(declare-fun $get_fnptr ( Int $ctype ) $ptr)
(declare-fun $get_fnptr_inv ( Int ) Int)
(declare-fun $get_fnptr_ref ( Int ) Int)
(declare-fun $get_string_literal ( Int Int ) $ptr)
(declare-fun $ghost_emb ( Int ) $ptr)
(declare-fun $ghost_path ( Int ) $field)
(declare-fun $ghost_ref ( $ptr $field ) Int)
(declare-fun $i1_to_ptr ( Int ) $ptr)
(declare-fun $i2_to_ptr ( Int ) $ptr)
(declare-fun $i4_to_ptr ( Int ) $ptr)
(declare-fun $i8_to_ptr ( Int ) $ptr)
(declare-fun $id_set_disjoint ( $ptr $ptrset $ptrset ) Int)
(declare-fun $idx ( $ptr Int $ctype ) $ptr)
(declare-fun $index_within ( $ptr $ptr ) Int)
(declare-fun $inlined_array ( $ptr $ctype ) $ptr)
(declare-fun $int_to_map_t..^^i4.^^bool ( Int ) $map_t..^^i4.^^bool)
(declare-fun $int_to_map_t..^^u4.ptr_to..^Node ( Int ) $map_t..^^u4.$ptr_to..^Node)
(declare-fun $int_to_map_t..ptr_to..^^void.^^bool ( Int ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $int_to_map_t..ptr_to..^Node.^^u4 ( Int ) $map_t..$ptr_to..^Node.^^u4)
(declare-fun $int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ( Int ) $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool)
(declare-fun $int_to_ptr ( Int ) $ptr)
(declare-fun $int_to_ptrset ( Int ) $ptrset)
(declare-fun $int_to_record ( Int ) $record)
(declare-fun $int_to_version ( Int ) $version)
(declare-fun $int_to_vol_version ( Int ) $vol_version)
(declare-fun $joined_array ( $ptr $ptr ) $ptr)
(declare-fun $kind_array ( ) $kind)
(declare-fun $kind_composite ( ) $kind)
(declare-fun $kind_of ( $ctype ) $kind)
(declare-fun $kind_primitive ( ) $kind)
(declare-fun $kind_thread ( ) $kind)
(declare-fun $lblset.bot ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $lblset.join ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun $lblset.meet ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $@Map@@$ptr@To@Bool@@)
(declare-fun $lblset.top ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $left_split ( $ptr Int ) $ptr)
(declare-fun $map_domain ( $ctype ) $ctype)
(declare-fun $map_range ( $ctype ) $ctype)
(declare-fun $map_t ( $ctype $ctype ) $ctype)
(declare-fun $map_t..^^i4.^^bool_to_int ( $map_t..^^i4.^^bool ) Int)
(declare-fun $map_t..^^u4.ptr_to..^Node_to_int ( $map_t..^^u4.$ptr_to..^Node ) Int)
(declare-fun $map_t..ptr_to..^^void.^^bool_to_int ( $map_t..$ptr_to..^^void.^^bool ) Int)
(declare-fun $map_t..ptr_to..^Node.^^u4_to_int ( $map_t..$ptr_to..^Node.^^u4 ) Int)
(declare-fun $map_t..ptr_to..^Node.map_t..^^i4.^^bool_to_int ( $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ) Int)
(declare-fun $max.i1 ( ) Int)
(declare-fun $max.i2 ( ) Int)
(declare-fun $max.i4 ( ) Int)
(declare-fun $max.i8 ( ) Int)
(declare-fun $max.u1 ( ) Int)
(declare-fun $max.u2 ( ) Int)
(declare-fun $max.u4 ( ) Int)
(declare-fun $max.u8 ( ) Int)
(declare-fun $me ( ) $ptr)
(declare-fun $me_ref ( ) Int)
(declare-fun $mem ( $state $ptr ) Int)
(declare-fun $mem_range ( $state $ptr Int ) Int)
(declare-fun $memory ( $state ) $memory_t)
(declare-fun $memory_allocator_type ( ) $ctype)
(declare-fun $min.i1 ( ) Int)
(declare-fun $min.i2 ( ) Int)
(declare-fun $min.i4 ( ) Int)
(declare-fun $min.i8 ( ) Int)
(declare-fun $nesting_max ( $ctype $ctype ) Int)
(declare-fun $nesting_min ( $ctype $ctype ) Int)
(declare-fun $new_ownees ( $state $ptr $ptrset ) $ptrset)
(declare-fun $non_null_array_range ( $ptr $ctype Int ) $ptrset)
(declare-fun $non_null_extent ( $state $ptr ) $ptrset)
(declare-fun $non_null_set_singleton ( $ptr ) $ptrset)
(declare-fun $null ( ) $ptr)
(declare-fun $op_add ( $ctype Int Int ) Int)
(declare-fun $op_div ( $ctype Int Int ) Int)
(declare-fun $op_mul ( Int Int ) Int)
(declare-fun $op_sub ( $ctype Int Int ) Int)
(declare-fun $owner ( $state $ptr ) $ptr)
(declare-fun $owns ( $state $ptr ) $ptrset)
(declare-fun $owns_set_field ( $ctype ) $field)
(declare-fun $path ( $state $ptr ) $field)
(declare-fun $ptr ( $ctype Int ) $ptr)
(declare-fun $ptr_cast ( $ptr $ctype ) $ptr)
(declare-fun $ptr_level ( $ctype ) Int)
(declare-fun $ptr_to ( $ctype ) $ctype)
(declare-fun $ptr_to_i1 ( $ptr ) Int)
(declare-fun $ptr_to_i2 ( $ptr ) Int)
(declare-fun $ptr_to_i4 ( $ptr ) Int)
(declare-fun $ptr_to_i8 ( $ptr ) Int)
(declare-fun $ptr_to_int ( $ptr ) Int)
(declare-fun $ptr_to_u1 ( $ptr ) Int)
(declare-fun $ptr_to_u2 ( $ptr ) Int)
(declare-fun $ptr_to_u4 ( $ptr ) Int)
(declare-fun $ptr_to_u8 ( $ptr ) Int)
(declare-fun $ptrclub.addMember ( $ptr $ptrclub ) $ptrclub)
(declare-fun $ptrclub.bound ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.compare ( $ptr $ptr ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.construct ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) $ptrclub)
(declare-fun $ptrclub.empty ( ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrclub.members ( $ptrclub ) $@Map@@$ptr@To@Bool@@)
(declare-fun $ptrset_to_int ( $ptrset ) Int)
(declare-fun $pure_post_level ( $pure_function ) Int)
(declare-fun $read_ptr ( $state $ptr $ctype ) $ptr)
(declare-fun $read_ptr_m ( $state $ptr $ctype ) $ptr)
(declare-fun $read_version ( $state $ptr ) $version)
(declare-fun $read_vol_version ( $state $ptr ) $vol_version)
(declare-fun $rec_fetch ( $record $field ) Int)
(declare-fun $rec_update ( $record $field Int ) $record)
(declare-fun $rec_update_bv ( $record $field Int Int Int Int ) $record)
(declare-fun $rec_zero ( ) $record)
(declare-fun $record_field_int_kind ( $field ) $ctype)
(declare-fun $record_to_int ( $record ) Int)
(declare-fun $ref ( $ptr ) Int)
(declare-fun $ref_cnt ( $state $ptr ) Int)
(declare-fun $release ( $state $state $ptr $ptr ) $state)
(declare-fun $released ( $state $ptr $ptr ) $status)
(declare-fun $result@0 ( ) Int)
(declare-fun $right_split ( $ptr Int ) $ptr)
(declare-fun $s ( ) $state)
(declare-fun $select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool Int ) $map_t..^^i4.^^bool)
(declare-fun $select.$map_t..$ptr_to..^Node.^^u4 ( $map_t..$ptr_to..^Node.^^u4 Int ) Int)
(declare-fun $select.$map_t..^^u4.$ptr_to..^Node ( $map_t..^^u4.$ptr_to..^Node Int ) Int)
(declare-fun $select.flow.data ( $memory_t $ptr ) $flowdata)
(declare-fun $select.flow.label ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.flow.meta ( $flowdata ) $@Map@@$ptr@To@Bool@@)
(declare-fun $select.mem ( $memory_t $ptr ) Int)
(declare-fun $select.sm ( $statusmap_t $ptr ) $status)
(declare-fun $select.tm ( $typemap_t $ptr ) $type_state)
(declare-fun $select_range.mem ( $memory_t $ptr Int ) Int)
(declare-fun $set_add_element ( $ptrset $ptr ) $ptrset)
(declare-fun $set_cardinality ( $ptrset ) Int)
(declare-fun $set_difference ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_empty ( ) $ptrset)
(declare-fun $set_intersection ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_remove_element ( $ptrset $ptr ) $ptrset)
(declare-fun $set_singleton ( $ptr ) $ptrset)
(declare-fun $set_union ( $ptrset $ptrset ) $ptrset)
(declare-fun $set_universe ( ) $ptrset)
(declare-fun $simple_emb ( $ptr ) $ptr)
(declare-fun $sizeof ( $ctype ) Int)
(declare-fun $span ( $ptr ) $ptrset)
(declare-fun $spec_ptr_to ( $ctype ) $ctype)
(declare-fun $st ( $state $ptr ) $status)
(declare-fun $st_owner ( $status ) $ptr)
(declare-fun $st_ref_cnt ( $status ) Int)
(declare-fun $st_timestamp ( $status ) Int)
(declare-fun $statusmap ( $state ) $statusmap_t)
(declare-fun $store.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr Bool ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $store.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool Int $map_t..^^i4.^^bool ) $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool)
(declare-fun $store.$map_t..$ptr_to..^Node.^^u4 ( $map_t..$ptr_to..^Node.^^u4 Int Int ) $map_t..$ptr_to..^Node.^^u4)
(declare-fun $store.$map_t..^^i4.^^bool ( $map_t..^^i4.^^bool Int Bool ) $map_t..^^i4.^^bool)
(declare-fun $store.$map_t..^^u4.$ptr_to..^Node ( $map_t..^^u4.$ptr_to..^Node Int Int ) $map_t..^^u4.$ptr_to..^Node)
(declare-fun $store.flow.data ( $memory_t $ptr $flowdata ) $memory_t)
(declare-fun $store.flow.label ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.flow.meta ( $flowdata $@Map@@$ptr@To@Bool@@ ) $flowdata)
(declare-fun $store.mem ( $memory_t $ptr Int ) $memory_t)
(declare-fun $store.sm ( $statusmap_t $ptr $status ) $statusmap_t)
(declare-fun $store.tm ( $typemap_t $ptr $type_state ) $typemap_t)
(declare-fun $struct_extent ( $ptr ) $ptrset)
(declare-fun $struct_zero ( ) $struct)
(declare-fun $take_over ( $state $ptr $ptr ) $state)
(declare-fun $taken_over ( $state $ptr $ptr ) $status)
(declare-fun $timestamp ( $state $ptr ) Int)
(declare-fun $ts ( $state $ptr ) $type_state)
(declare-fun $ts_active_option ( $type_state ) $field)
(declare-fun $ts_emb ( $type_state ) $ptr)
(declare-fun $ts_path ( $type_state ) $field)
(declare-fun $typ ( $ptr ) $ctype)
(declare-fun $typemap ( $state ) $typemap_t)
(declare-fun $u1_to_ptr ( Int ) $ptr)
(declare-fun $u2_to_ptr ( Int ) $ptr)
(declare-fun $u4_to_ptr ( Int ) $ptr)
(declare-fun $u8_to_ptr ( Int ) $ptr)
(declare-fun $unchecked ( $ctype Int ) Int)
(declare-fun $unchecked_sbits ( Int Int ) Int)
(declare-fun $unchecked_ubits ( Int Int ) Int)
(declare-fun $unchk_add ( $ctype Int Int ) Int)
(declare-fun $unchk_div ( $ctype Int Int ) Int)
(declare-fun $unchk_mod ( $ctype Int Int ) Int)
(declare-fun $unchk_mul ( $ctype Int Int ) Int)
(declare-fun $unchk_sub ( $ctype Int Int ) Int)
(declare-fun $unptr_to ( $ctype ) $ctype)
(declare-fun $update_int ( $state $ptr Int ) $state)
(declare-fun $ver_domain ( $version ) $ptrset)
(declare-fun $version_to_int ( $version ) Int)
(declare-fun $vol_version_to_int ( $vol_version ) Int)
(declare-fun $volatile_span ( $state $ptr ) $ptrset)
(declare-fun $vs_base ( $struct $ctype ) $ptr)
(declare-fun $vs_base_ref ( $struct ) Int)
(declare-fun $vs_ctor ( $state $ptr ) $struct)
(declare-fun $vs_state ( $struct ) $state)
(declare-fun $zero.$map_t..$ptr_to..^^void.^^bool ( ) $map_t..$ptr_to..^^void.^^bool)
(declare-fun $zero.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( ) $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool)
(declare-fun $zero.$map_t..$ptr_to..^Node.^^u4 ( ) $map_t..$ptr_to..^Node.^^u4)
(declare-fun $zero.$map_t..^^i4.^^bool ( ) $map_t..^^i4.^^bool)
(declare-fun $zero.$map_t..^^u4.$ptr_to..^Node ( ) $map_t..^^u4.$ptr_to..^Node)
(declare-fun ^$@ptrset ( ) $ctype)
(declare-fun ^$@state_t ( ) $ctype)
(declare-fun ^$@struct ( ) $ctype)
(declare-fun ^$@thread_id ( ) $ctype)
(declare-fun ^$@thread_id_t ( ) $ctype)
(declare-fun ^^bool ( ) $ctype)
(declare-fun ^^claim ( ) $ctype)
(declare-fun ^^f4 ( ) $ctype)
(declare-fun ^^f8 ( ) $ctype)
(declare-fun ^^i1 ( ) $ctype)
(declare-fun ^^i2 ( ) $ctype)
(declare-fun ^^i4 ( ) $ctype)
(declare-fun ^^i8 ( ) $ctype)
(declare-fun ^^mathint ( ) $ctype)
(declare-fun ^^root_emb ( ) $ctype)
(declare-fun ^^u1 ( ) $ctype)
(declare-fun ^^u2 ( ) $ctype)
(declare-fun ^^u4 ( ) $ctype)
(declare-fun ^^u8 ( ) $ctype)
(declare-fun ^^void ( ) $ctype)
(declare-fun ^List ( ) $ctype)
(declare-fun ^Node ( ) $ctype)
(declare-fun cev_global ( ) var_locglob)
(declare-fun cev_implicit ( ) var_locglob)
(declare-fun cev_local ( ) var_locglob)
(declare-fun cev_parameter ( ) var_locglob)
(declare-fun cf@classifier@default ( ) $pure_function)
(declare-fun cf@lambda@1 ( ) $pure_function)
(declare-fun conditional_moment ( ) cf_event)
(declare-fun F@lambda@1 ( ) $map_t..^^i4.^^bool)
(declare-fun L@i ( ) Int)
(declare-fun L@i@0 ( ) Int)
(declare-fun L@i@1 ( ) Int)
(declare-fun L@n ( ) Int)
(declare-fun L@n@0 ( ) Int)
(declare-fun L@n@1 ( ) Int)
(declare-fun L@n@2 ( ) Int)
(declare-fun l@public ( ) $label)
(declare-fun List.$owns ( ) $field)
(declare-fun List.followers ( ) $field)
(declare-fun List.head ( ) $field)
(declare-fun List.idx ( ) $field)
(declare-fun List.length ( ) $field)
(declare-fun List.length_acc ( ) $field)
(declare-fun List.seq ( ) $field)
(declare-fun loop_entered ( ) cf_event)
(declare-fun loop_exited ( ) cf_event)
(declare-fun loop_register ( ) cf_event)
(declare-fun MapRead$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr ) Bool)
(declare-fun MapWrite$$@Map@@$ptr@To@Bool@@$ ( $@Map@@$ptr@To@Bool@@ $ptr Bool ) $@Map@@$ptr@To@Bool@@)
(declare-fun Node.$owns ( ) $field)
(declare-fun Node.data ( ) $field)
(declare-fun Node.next ( ) $field)
(declare-fun P@l ( ) Int)
(declare-fun took_else_branch ( ) cf_event)
(declare-fun took_then_branch ( ) cf_event)

;Predicates
(declare-fun $@condition ( ) Bool)
(declare-fun $@condition_$0 ( ) Bool)
(declare-fun $@condition_$1 ( ) Bool)
(declare-fun $@hash@break_2 ( ) Bool)
(declare-fun $account_claim ( $state $ptr $ptr ) Bool)
(declare-fun $admissibility_pre ( $state $ptr ) Bool)
(declare-fun $array_elt_emb ( $state $ptr $ptr ) Bool)
(declare-fun $array_eq ( $state $state $ptr $ctype Int ) Bool)
(declare-fun $array_field_properties ( $field $ctype Int Bool Bool ) Bool)
(declare-fun $bool_id ( Bool ) Bool)
(declare-fun $call_transition ( $state $state ) Bool)
(declare-fun $can_use_all_frame_axioms ( $state ) Bool)
(declare-fun $can_use_all_pure_post_axioms ( $state ) Bool)
(declare-fun $can_use_frame_axiom_of ( $pure_function ) Bool)
(declare-fun $can_use_pure_post_axiom_of ( $pure_function ) Bool)
(declare-fun $claim_initial_assumptions ( $state $ptr $token ) Bool)
(declare-fun $claim_transitivity_assumptions ( $state $state $ptr $token ) Bool)
(declare-fun $claimed_closed ( $state $ptr ) Bool)
(declare-fun $claims_claim ( $ptr $ptr ) Bool)
(declare-fun $claims_obj ( $ptr $ptr ) Bool)
(declare-fun $claims_upgrade ( $ptr $ptr ) Bool)
(declare-fun $closed ( $state $ptr ) Bool)
(declare-fun $closed_is_transitive ( $state ) Bool)
(declare-fun $depends ( $state $state $ptr $ptr ) Bool)
(declare-fun $dom_thread_local ( $state $ptr ) Bool)
(declare-fun $domain_updated_at ( $state $state $ptr $ptrset ) Bool)
(declare-fun $dont_instantiate ( $ptr ) Bool)
(declare-fun $dont_instantiate_state ( $state ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $map_t..$ptr_to..^^void.^^bool ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ( $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ) Bool)
(declare-fun $eq.$map_t..$ptr_to..^Node.^^u4 ( $map_t..$ptr_to..^Node.^^u4 $map_t..$ptr_to..^Node.^^u4 ) Bool)
(declare-fun $eq.$map_t..^^i4.^^bool ( $map_t..^^i4.^^bool $map_t..^^i4.^^bool ) Bool)
(declare-fun $eq.$map_t..^^u4.$ptr_to..^Node ( $map_t..^^u4.$ptr_to..^Node $map_t..^^u4.$ptr_to..^Node ) Bool)
(declare-fun $extent_hint ( $ptr $ptr ) Bool)
(declare-fun $extent_is_fresh ( $state $state $ptr ) Bool)
(declare-fun $extent_mutable ( $state $ptr ) Bool)
(declare-fun $extent_zero ( $state $ptr ) Bool)
(declare-fun $field_properties ( $state $ptr $field $ctype Bool ) Bool)
(declare-fun $forall_inv2_when_closed ( $state $state ) Bool)
(declare-fun $full_stop ( $state ) Bool)
(declare-fun $full_stop_ext ( $token $state ) Bool)
(declare-fun $function_entry ( $state ) Bool)
(declare-fun $good_for_admissibility ( $state ) Bool)
(declare-fun $good_for_pre_can_unwrap ( $state ) Bool)
(declare-fun $good_state ( $state ) Bool)
(declare-fun $good_state_ext ( $token $state ) Bool)
(declare-fun $has_volatile_owns_set ( $ctype ) Bool)
(declare-fun $imply_inv ( $state $ptr $ctype ) Bool)
(declare-fun $in_array ( $ptr $ptr $ctype Int ) Bool)
(declare-fun $in_array_extent_of ( $state $ptr $ptr $ctype Int ) Bool)
(declare-fun $in_array_full_extent_of ( $ptr $ptr $ctype Int ) Bool)
(declare-fun $in_claim_domain ( $ptr $ptr ) Bool)
(declare-fun $in_domain ( $state $ptr $ptr ) Bool)
(declare-fun $in_domain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_extent_of ( $state $ptr $ptr ) Bool)
(declare-fun $in_full_extent_of ( $ptr $ptr ) Bool)
(declare-fun $in_range ( Int Int Int ) Bool)
(declare-fun $in_range_div_i1 ( Int Int ) Bool)
(declare-fun $in_range_div_i2 ( Int Int ) Bool)
(declare-fun $in_range_div_i4 ( Int Int ) Bool)
(declare-fun $in_range_div_i8 ( Int Int ) Bool)
(declare-fun $in_range_i1 ( Int ) Bool)
(declare-fun $in_range_i2 ( Int ) Bool)
(declare-fun $in_range_i4 ( Int ) Bool)
(declare-fun $in_range_i8 ( Int ) Bool)
(declare-fun $in_range_phys_ptr ( Int ) Bool)
(declare-fun $in_range_ptr ( $ptr ) Bool)
(declare-fun $in_range_sbits ( Int Int ) Bool)
(declare-fun $in_range_spec_ptr ( Int ) Bool)
(declare-fun $in_range_t ( $ctype Int ) Bool)
(declare-fun $in_range_u1 ( Int ) Bool)
(declare-fun $in_range_u2 ( Int ) Bool)
(declare-fun $in_range_u4 ( Int ) Bool)
(declare-fun $in_range_u8 ( Int ) Bool)
(declare-fun $in_range_ubits ( Int Int ) Bool)
(declare-fun $in_some_owns ( $ptr ) Bool)
(declare-fun $in_span_of ( $ptr $ptr ) Bool)
(declare-fun $in_struct_extent_of ( $ptr $ptr ) Bool)
(declare-fun $in_vdomain ( $state $ptr $ptr ) Bool)
(declare-fun $in_vdomain_lab ( $state $ptr $ptr $label ) Bool)
(declare-fun $in_wrapped_domain ( $state $ptr ) Bool)
(declare-fun $in_writes_at ( Int $ptr ) Bool)
(declare-fun $instantiate_bool ( Bool ) Bool)
(declare-fun $instantiate_int ( Int ) Bool)
(declare-fun $instantiate_ptr ( $ptr ) Bool)
(declare-fun $instantiate_ptrset ( $ptrset ) Bool)
(declare-fun $instantiate_st ( $status ) Bool)
(declare-fun $int_to_bool ( Int ) Bool)
(declare-fun $inv ( $state $ptr $ctype ) Bool)
(declare-fun $inv_is_approved_by ( $state $state $ptr $field $field ) Bool)
(declare-fun $inv_is_approved_by_ptr ( $state $state $ptr $ptr $field ) Bool)
(declare-fun $inv_is_owner_approved ( $state $state $ptr $field ) Bool)
(declare-fun $inv_lab ( $state $ptr $label ) Bool)
(declare-fun $inv2 ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2_when_closed ( $state $state $ptr $ctype ) Bool)
(declare-fun $inv2nt ( $state $state $ptr ) Bool)
(declare-fun $invok_state ( $state ) Bool)
(declare-fun $irrelevant ( $state $ptr ) Bool)
(declare-fun $is ( $ptr $ctype ) Bool)
(declare-fun $is_admissibility_check ( ) Bool)
(declare-fun $is_approved_by ( $ctype $field $field ) Bool)
(declare-fun $is_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_array_emb ( $state $ptr $ctype Int $ptr ) Bool)
(declare-fun $is_array_emb_path ( $state $ptr $ctype Int $ptr $field Bool ) Bool)
(declare-fun $is_array_vol_or_nonvol ( $state $ptr $ctype Int Bool ) Bool)
(declare-fun $is_arraytype ( $ctype ) Bool)
(declare-fun $is_arraytype_ch ( $ctype ) Bool)
(declare-fun $is_base_field ( $field ) Bool)
(declare-fun $is_claimable ( $ctype ) Bool)
(declare-fun $is_composite ( $ctype ) Bool)
(declare-fun $is_composite_ch ( $ctype ) Bool)
(declare-fun $is_domain_root ( $state $ptr ) Bool)
(declare-fun $is_fnptr_type ( $ctype ) Bool)
(declare-fun $is_fresh ( $state $state $ptr ) Bool)
(declare-fun $is_ghost_ptr ( $ptr ) Bool)
(declare-fun $is_global ( $ptr $ctype ) Bool)
(declare-fun $is_global_array ( $ptr $ctype Int ) Bool)
(declare-fun $is_malloc_root ( $state $ptr ) Bool)
(declare-fun $is_math_type ( $ctype ) Bool)
(declare-fun $is_mutable_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_nested ( $ctype $ctype ) Bool)
(declare-fun $is_nested_range ( $ctype $ctype Int Int ) Bool)
(declare-fun $is_non_primitive ( $ctype ) Bool)
(declare-fun $is_non_primitive_ch ( $ctype ) Bool)
(declare-fun $is_non_primitive_ptr ( $ptr ) Bool)
(declare-fun $is_object_root ( $state $ptr ) Bool)
(declare-fun $is_owner_approved ( $ctype $field ) Bool)
(declare-fun $is_primitive ( $ctype ) Bool)
(declare-fun $is_primitive_ch ( $ctype ) Bool)
(declare-fun $is_primitive_embedded_array ( $field Int ) Bool)
(declare-fun $is_primitive_embedded_volatile_array ( $field Int $ctype ) Bool)
(declare-fun $is_primitive_field_of ( $state $ptr $ptr ) Bool)
(declare-fun $is_primitive_non_volatile_field ( $field ) Bool)
(declare-fun $is_ptr_to_composite ( $ptr ) Bool)
(declare-fun $is_record_field ( $ctype $field $ctype ) Bool)
(declare-fun $is_record_type ( $ctype ) Bool)
(declare-fun $is_stuttering_check ( ) Bool)
(declare-fun $is_thread ( $ptr ) Bool)
(declare-fun $is_thread_local_array ( $state $ptr $ctype Int ) Bool)
(declare-fun $is_threadtype ( $ctype ) Bool)
(declare-fun $is_unwrap_check ( ) Bool)
(declare-fun $is_volatile ( $state $ptr ) Bool)
(declare-fun $keeps ( $state $ptr $ptr ) Bool)
(declare-fun $lblset.leq ( $@Map@@$ptr@To@Bool@@ $@Map@@$ptr@To@Bool@@ ) Bool)
(declare-fun $local_value_is ( $state $token $token Int $ctype ) Bool)
(declare-fun $local_value_is_ptr ( $state $token $token $ptr $ctype ) Bool)
(declare-fun $mem_eq ( $state $state $ptr ) Bool)
(declare-fun $meta_eq ( $state $state ) Bool)
(declare-fun $mutable ( $state $ptr ) Bool)
(declare-fun $mutable_increases ( $state $state ) Bool)
(declare-fun $mutable_root ( $state $ptr ) Bool)
(declare-fun $nested ( $state $ptr ) Bool)
(declare-fun $nested_in ( $state $ptr $ptr ) Bool)
(declare-fun $no_inline_array_field_properties ( $field $ctype Int Bool Bool ) Bool)
(declare-fun $nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $not_shared ( $state $ptr ) Bool)
(declare-fun $now_writable ( $state $ptr ) Bool)
(declare-fun $op_ge ( $ctype Int Int ) Bool)
(declare-fun $op_gt ( $ctype Int Int ) Bool)
(declare-fun $op_le ( $ctype Int Int ) Bool)
(declare-fun $op_lt ( $ctype Int Int ) Bool)
(declare-fun $position_marker ( ) Bool)
(declare-fun $post_unwrap ( $state $state ) Bool)
(declare-fun $program_entry_point ( $state ) Bool)
(declare-fun $program_entry_point_ch ( $state ) Bool)
(declare-fun $ptr_eq ( $ptr $ptr ) Bool)
(declare-fun $ptr_neq ( $ptr $ptr ) Bool)
(declare-fun $ptrclub.isMember ( $ptr $ptrclub ) Bool)
(declare-fun $read_bool ( $state $ptr ) Bool)
(declare-fun $rec_base_eq ( Int Int ) Bool)
(declare-fun $rec_eq ( $record $record ) Bool)
(declare-fun $seclbl.bot ( ) Bool)
(declare-fun $seclbl.join ( Bool Bool ) Bool)
(declare-fun $seclbl.leq ( Bool Bool ) Bool)
(declare-fun $seclbl.meet ( Bool Bool ) Bool)
(declare-fun $seclbl.top ( ) Bool)
(declare-fun $select.$map_t..$ptr_to..^^void.^^bool ( $map_t..$ptr_to..^^void.^^bool $ptr ) Bool)
(declare-fun $select.$map_t..^^i4.^^bool ( $map_t..^^i4.^^bool Int ) Bool)
(declare-fun $sequential ( $state $state $ptr $ctype ) Bool)
(declare-fun $set_disjoint ( $ptrset $ptrset ) Bool)
(declare-fun $set_eq ( $ptrset $ptrset ) Bool)
(declare-fun $set_in ( $ptr $ptrset ) Bool)
(declare-fun $set_in0 ( $ptr $ptrset ) Bool)
(declare-fun $set_in2 ( $ptr $ptrset ) Bool)
(declare-fun $set_in3 ( $ptr $ptrset ) Bool)
(declare-fun $set_subset ( $ptrset $ptrset ) Bool)
(declare-fun $simple_index ( $ptr $ptr ) Bool)
(declare-fun $spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $st_closed ( $status ) Bool)
(declare-fun $st_eq ( $state $state $ptr ) Bool)
(declare-fun $state_nonvolatile_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $state_spans_the_same ( $state $state $ptr $ctype ) Bool)
(declare-fun $static_field_properties ( $field $ctype ) Bool)
(declare-fun $stuttering_pre ( $state $ptr ) Bool)
(declare-fun $thread_local ( $state $ptr ) Bool)
(declare-fun $thread_local_np ( $state $ptr ) Bool)
(declare-fun $thread_local2 ( $state $ptr $ctype ) Bool)
(declare-fun $thread_owned ( $state $ptr ) Bool)
(declare-fun $thread_owned_or_even_mutable ( $state $ptr ) Bool)
(declare-fun $timestamp_is_now ( $state $ptr ) Bool)
(declare-fun $timestamp_post ( $state $state ) Bool)
(declare-fun $timestamp_post_strict ( $state $state ) Bool)
(declare-fun $top_writable ( $state Int $ptr ) Bool)
(declare-fun $ts_eq ( $state $state $ptr ) Bool)
(declare-fun $ts_is_volatile ( $type_state ) Bool)
(declare-fun $ts_typed ( $type_state ) Bool)
(declare-fun $typed ( $state $ptr ) Bool)
(declare-fun $typed2 ( $state $ptr $ctype ) Bool)
(declare-fun $typed2_phys ( $state $ptr $ctype ) Bool)
(declare-fun $typed2_spec ( $state $ptr $ctype ) Bool)
(declare-fun $union_active ( $state $ptr $field ) Bool)
(declare-fun $union_havoced ( $state $state $ptr ) Bool)
(declare-fun $unwrap_check_pre ( $state $ptr ) Bool)
(declare-fun $unwrap_post ( $state $state $ptr $ptr ) Bool)
(declare-fun $unwrap_post_claimable ( $state $state $ptr $ptr ) Bool)
(declare-fun $updated_only_domains ( $state $state $ptrset ) Bool)
(declare-fun $updated_only_values ( $state $state $ptrset ) Bool)
(declare-fun $valid_claim ( $state $ptr ) Bool)
(declare-fun $valid_claim_impl ( $state $state ) Bool)
(declare-fun $wrapped ( $state $ptr $ctype ) Bool)
(declare-fun $writable ( $state Int $ptr ) Bool)
(declare-fun $writes_nothing ( $state $state ) Bool)
(declare-fun anon01_Else ( ) Bool)
(declare-fun anon01_Then ( ) Bool)
(declare-fun anon01_Then@1 ( ) Bool)
(declare-fun anon01_Then@1_assertion ( ) Bool)
(declare-fun anon01_Then@2 ( ) Bool)
(declare-fun anon01_Then_assertion ( ) Bool)
(declare-fun anon02_Else ( ) Bool)
(declare-fun anon02_Else@1 ( ) Bool)
(declare-fun anon02_Else@1_assertion ( ) Bool)
(declare-fun anon02_Else@2 ( ) Bool)
(declare-fun anon02_Else@2_assertion ( ) Bool)
(declare-fun anon02_Else@3 ( ) Bool)
(declare-fun anon02_Else@3_assertion ( ) Bool)
(declare-fun anon02_Else@4 ( ) Bool)
(declare-fun anon02_Else@4_assertion ( ) Bool)
(declare-fun anon02_Else@5 ( ) Bool)
(declare-fun anon02_Else@5_assertion ( ) Bool)
(declare-fun anon02_Else_assertion ( ) Bool)
(declare-fun anon02_Then ( ) Bool)
(declare-fun anon12@1 ( ) Bool)
(declare-fun anon12@1_assertion ( ) Bool)
(declare-fun anon12@2 ( ) Bool)
(declare-fun anon12@2_assertion ( ) Bool)
(declare-fun anon12@3 ( ) Bool)
(declare-fun anon12@3_assertion ( ) Bool)
(declare-fun anon12@4 ( ) Bool)
(declare-fun anon12@4_assertion ( ) Bool)
(declare-fun anon12@5 ( ) Bool)
(declare-fun anon12@5_assertion ( ) Bool)
(declare-fun anon12@6 ( ) Bool)
(declare-fun anon12_assertion ( ) Bool)
(declare-fun GeneratedUnifiedExit@1 ( ) Bool)
(declare-fun GeneratedUnifiedExit@1_assertion ( ) Bool)
(declare-fun GeneratedUnifiedExit_assertion ( ) Bool)
(declare-fun is_active_ptrclub ( $ptrclub ) Bool)
(declare-fun sk_hack ( Bool ) Bool)

;Axioms
   (assert (! ($can_use_all_frame_axioms $s) :named ax_0))
   (assert (! ($full_stop_ext $@tok$1^30.1 $s) :named ax_1))
   (assert (! ($function_entry $s) :named ax_2))
   (assert (! ($good_state ($vs_state $struct_zero)) :named ax_3))
   (assert (! ($has_volatile_owns_set ^^claim) :named ax_4))
   (assert (! ($in_range_phys_ptr L@n) :named ax_5))
   (assert (! ($in_range_phys_ptr P@l) :named ax_6))
   (assert (! ($in_range_spec_ptr $me_ref) :named ax_7))
   (assert (! ($in_range_spec_ptr 0) :named ax_8))
   (assert (! ($in_range_u4 L@i) :named ax_9))
   (assert (! ($is_claimable ^^claim) :named ax_10))
   (assert (! ($is_composite ^^claim) :named ax_11))
   (assert (! ($is_composite ^^root_emb) :named ax_12))
   (assert (! ($is_composite ^List) :named ax_13))
   (assert (! ($is_composite ^Node) :named ax_14))
   (assert (! ($is_primitive ^$@ptrset) :named ax_15))
   (assert (! ($is_primitive ^$@state_t) :named ax_16))
   (assert (! ($is_primitive ^$@thread_id) :named ax_17))
   (assert (! ($is_primitive ^^bool) :named ax_18))
   (assert (! ($is_primitive ^^f4) :named ax_19))
   (assert (! ($is_primitive ^^f8) :named ax_20))
   (assert (! ($is_primitive ^^i1) :named ax_21))
   (assert (! ($is_primitive ^^i2) :named ax_22))
   (assert (! ($is_primitive ^^i4) :named ax_23))
   (assert (! ($is_primitive ^^i8) :named ax_24))
   (assert (! ($is_primitive ^^mathint) :named ax_25))
   (assert (! ($is_primitive ^^u1) :named ax_26))
   (assert (! ($is_primitive ^^u2) :named ax_27))
   (assert (! ($is_primitive ^^u4) :named ax_28))
   (assert (! ($is_primitive ^^u8) :named ax_29))
   (assert (! ($is_primitive ^^void) :named ax_30))
   (assert (! ($is_primitive_non_volatile_field List.$owns) :named ax_31))
   (assert (! ($is_primitive_non_volatile_field List.followers) :named ax_32))
   (assert (! ($is_primitive_non_volatile_field List.head) :named ax_33))
   (assert (! ($is_primitive_non_volatile_field List.idx) :named ax_34))
   (assert (! ($is_primitive_non_volatile_field List.length) :named ax_35))
   (assert (! ($is_primitive_non_volatile_field List.length_acc) :named ax_36))
   (assert (! ($is_primitive_non_volatile_field List.seq) :named ax_37))
   (assert (! ($is_primitive_non_volatile_field Node.$owns) :named ax_38))
   (assert (! ($is_primitive_non_volatile_field Node.data) :named ax_39))
   (assert (! ($is_primitive_non_volatile_field Node.next) :named ax_40))
   (assert (! ($is_threadtype ^$@thread_id_t) :named ax_41))
   (assert (! ($local_value_is $s $@tok$1^30.1 $@loc.l ($ptr_to_int ($ptr ^List P@l)) $@distTp6) :named ax_42))
   (assert (! ($local_value_is_ptr $s $@tok$1^30.1 $@loc.l ($ptr ^List P@l) $@distTp6) :named ax_43))
   (assert (! ($seclbl.join false true) :named ax_44))
   (assert (! ($seclbl.join true false) :named ax_45))
   (assert (! ($seclbl.join true true) :named ax_46))
   (assert (! ($seclbl.leq false false) :named ax_47))
   (assert (! ($seclbl.leq false true) :named ax_48))
   (assert (! ($seclbl.leq true true) :named ax_49))
   (assert (! ($seclbl.meet true true) :named ax_50))
   (assert (! ($static_field_properties List.$owns ^List) :named ax_51))
   (assert (! ($static_field_properties List.followers ^List) :named ax_52))
   (assert (! ($static_field_properties List.head ^List) :named ax_53))
   (assert (! ($static_field_properties List.idx ^List) :named ax_54))
   (assert (! ($static_field_properties List.length ^List) :named ax_55))
   (assert (! ($static_field_properties List.length_acc ^List) :named ax_56))
   (assert (! ($static_field_properties List.seq ^List) :named ax_57))
   (assert (! ($static_field_properties Node.$owns ^Node) :named ax_58))
   (assert (! ($static_field_properties Node.data ^Node) :named ax_59))
   (assert (! ($static_field_properties Node.next ^Node) :named ax_60))
   (assert (! ($wrapped $s ($ptr ^List P@l) ^List) :named ax_61))
   (assert (! (= $@bf_161 $@bf_162) :named ax_62))
   (assert (! (= $@bf_337 $@bf_338) :named ax_63))
   (assert (! (= $@bf_343 $@bf_344) :named ax_64))
   (assert (! (= $@bf_345 $@bf_346) :named ax_65))
   (assert (! (= $@bf_347 $@bf_348) :named ax_66))
   (assert (! (= $@bf_355 $@bf_356) :named ax_67))
   (assert (! (= $@distTp1 ($ptr_to ^Node)) :named ax_68))
   (assert (! (= $@distTp2 ($map_t ^^i4 ^^bool)) :named ax_69))
   (assert (! (= $@distTp3 ($map_t $@distTp1 $@distTp2)) :named ax_70))
   (assert (! (= $@distTp4 ($map_t $@distTp1 ^^u4)) :named ax_71))
   (assert (! (= $@distTp5 ($map_t ^^u4 $@distTp1)) :named ax_72))
   (assert (! (= $@distTp6 ($ptr_to ^List)) :named ax_73))
   (assert (! (= $@wrTime$1^30.1 ($current_timestamp $s)) :named ax_74))
   (assert (! (= $arch_spec_ptr_start $max.u8) :named ax_75))
   (assert (! (= $arch_spec_ptr_start ($unchecked ^^u8 (- 1))) :named ax_76))
   (assert (! (= $arch_spec_ptr_start (+ 18446744073709551616 (- 1))) :named ax_77))
   (assert (! (= $max.i8 (+ 9223372036854775808 (- 1))) :named ax_78))
   (assert (! (= $me ($ptr ^$@thread_id_t $me_ref)) :named ax_79))
   (assert (! (= $min.i8 (* (- 1) 9223372036854775808)) :named ax_80))
   (assert (! (= $min.i8 (+ 0 $min.i8)) :named ax_81))
   (assert (! (= $null ($ptr ^^void 0)) :named ax_82))
   (assert (! (= $zero.$map_t..$ptr_to..^^void.^^bool ($int_to_map_t..ptr_to..^^void.^^bool 0)) :named ax_83))
   (assert (! (= $zero.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool 0)) :named ax_84))
   (assert (! (= $zero.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 0)) :named ax_85))
   (assert (! (= $zero.$map_t..^^i4.^^bool ($int_to_map_t..^^i4.^^bool 0)) :named ax_86))
   (assert (! (= $zero.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node 0)) :named ax_87))
   (assert (! (= (- 1) (* (- 1) 1)) :named ax_88))
   (assert (! (= (- 128) $min.i1) :named ax_89))
   (assert (! (= (- 2147483648) $min.i4) :named ax_90))
   (assert (! (= (- 2147483648) (* (- 1) 2147483648)) :named ax_91))
   (assert (! (= (- 2147483648) (+ 0 (- 2147483648))) :named ax_92))
   (assert (! (= (- 32768) $min.i2) :named ax_93))
   (assert (! (= (= true $@bf_161) $is_admissibility_check) :named ax_94))
   (assert (! (= (= true $@bf_162) (and (not $is_unwrap_check) (not $is_stuttering_check))) :named ax_95))
   (assert (! (= (= true $@bf_323) (forall ((|f_$8| $pure_function))(!(< ($frame_level f_$8) $current_frame_level):pattern ( ($frame_level f_$8))  ))) :named ax_96))
   (assert (! (= (= true $@bf_327) (forall ((|f_$10| $pure_function))(!(< ($pure_post_level f_$10) $current_frame_level):pattern ( ($frame_level f_$10))  ))) :named ax_97))
   (assert (! (= (= true $@bf_333) ($seclbl.leq true true)) :named ax_98))
   (assert (! (= (= true $@bf_335) ($seclbl.leq false true)) :named ax_99))
   (assert (! (= (= true $@bf_337) ($seclbl.leq true false)) :named ax_100))
   (assert (! (= (= true $@bf_339) ($seclbl.leq false false)) :named ax_101))
   (assert (! (= (= true $@bf_341) ($seclbl.meet true true)) :named ax_102))
   (assert (! (= (= true $@bf_343) ($seclbl.meet false true)) :named ax_103))
   (assert (! (= (= true $@bf_345) ($seclbl.meet true false)) :named ax_104))
   (assert (! (= (= true $@bf_347) ($seclbl.meet false false)) :named ax_105))
   (assert (! (= (= true $@bf_349) ($seclbl.join true true)) :named ax_106))
   (assert (! (= (= true $@bf_351) ($seclbl.join false true)) :named ax_107))
   (assert (! (= (= true $@bf_353) ($seclbl.join true false)) :named ax_108))
   (assert (! (= (= true $@bf_355) ($seclbl.join false false)) :named ax_109))
   (assert (! (= (ite false 1 0) ($bool_to_int false)) :named ax_110))
   (assert (! (= (ite true 1 0) ($bool_to_int true)) :named ax_111))
   (assert (! (= ^^f4 ($as_in_range_t ^^f4)) :named ax_112))
   (assert (! (= ^^f8 ($as_in_range_t ^^f8)) :named ax_113))
   (assert (! (= ^^i1 ($as_in_range_t ^^i1)) :named ax_114))
   (assert (! (= ^^i2 ($as_in_range_t ^^i2)) :named ax_115))
   (assert (! (= ^^i4 ($as_in_range_t ^^i4)) :named ax_116))
   (assert (! (= ^^i8 ($as_in_range_t ^^i8)) :named ax_117))
   (assert (! (= ^^u1 ($as_in_range_t ^^u1)) :named ax_118))
   (assert (! (= ^^u2 ($as_in_range_t ^^u2)) :named ax_119))
   (assert (! (= ^^u4 ($as_in_range_t ^^u4)) :named ax_120))
   (assert (! (= ^^u8 ($as_in_range_t ^^u8)) :named ax_121))
   (assert (! (= 0 ($field_offset List.head)) :named ax_122))
   (assert (! (= 0 ($field_offset Node.next)) :named ax_123))
   (assert (! (= 0 ($ptr_level $memory_allocator_type)) :named ax_124))
   (assert (! (= 0 ($ptr_level ^$@ptrset)) :named ax_125))
   (assert (! (= 0 ($ptr_level ^$@state_t)) :named ax_126))
   (assert (! (= 0 ($ptr_level ^$@struct)) :named ax_127))
   (assert (! (= 0 ($ptr_level ^$@thread_id_t)) :named ax_128))
   (assert (! (= 0 ($ptr_level ^^bool)) :named ax_129))
   (assert (! (= 0 ($ptr_level ^^claim)) :named ax_130))
   (assert (! (= 0 ($ptr_level ^^f4)) :named ax_131))
   (assert (! (= 0 ($ptr_level ^^f8)) :named ax_132))
   (assert (! (= 0 ($ptr_level ^^i1)) :named ax_133))
   (assert (! (= 0 ($ptr_level ^^i2)) :named ax_134))
   (assert (! (= 0 ($ptr_level ^^i4)) :named ax_135))
   (assert (! (= 0 ($ptr_level ^^i8)) :named ax_136))
   (assert (! (= 0 ($ptr_level ^^mathint)) :named ax_137))
   (assert (! (= 0 ($ptr_level ^^root_emb)) :named ax_138))
   (assert (! (= 0 ($ptr_level ^^u1)) :named ax_139))
   (assert (! (= 0 ($ptr_level ^^u2)) :named ax_140))
   (assert (! (= 0 ($ptr_level ^^u4)) :named ax_141))
   (assert (! (= 0 ($ptr_level ^^u8)) :named ax_142))
   (assert (! (= 0 ($ptr_level ^^void)) :named ax_143))
   (assert (! (= 0 ($ptr_level ^List)) :named ax_144))
   (assert (! (= 0 ($ptr_level ^Node)) :named ax_145))
   (assert (! (= 0 ($ptr_to_i1 $null)) :named ax_146))
   (assert (! (= 0 ($ptr_to_i2 $null)) :named ax_147))
   (assert (! (= 0 ($ptr_to_i4 $null)) :named ax_148))
   (assert (! (= 0 ($ptr_to_i8 $null)) :named ax_149))
   (assert (! (= 0 ($ptr_to_u1 $null)) :named ax_150))
   (assert (! (= 0 ($ptr_to_u2 $null)) :named ax_151))
   (assert (! (= 0 ($ptr_to_u4 $null)) :named ax_152))
   (assert (! (= 0 ($ptr_to_u8 $null)) :named ax_153))
   (assert (! (= 0 ($set_cardinality $set_empty)) :named ax_154))
   (assert (! (= 0 ($unchecked ^^u4 (+ 4294967295 1))) :named ax_155))
   (assert (! (= 0 ($unchecked ^^u8 (+ $arch_spec_ptr_start 1))) :named ax_156))
   (assert (! (= 1 ($_pow2 0)) :named ax_157))
   (assert (! (= 1 ($sizeof ^$@ptrset)) :named ax_158))
   (assert (! (= 1 ($sizeof ^$@thread_id_t)) :named ax_159))
   (assert (! (= 1 ($sizeof ^^i1)) :named ax_160))
   (assert (! (= 1 ($sizeof ^^u1)) :named ax_161))
   (assert (! (= 1024 ($_pow2 10)) :named ax_162))
   (assert (! (= 1048576 ($_pow2 20)) :named ax_163))
   (assert (! (= 1073741824 ($_pow2 30)) :named ax_164))
   (assert (! (= 1099511627776 ($_pow2 40)) :named ax_165))
   (assert (! (= 1125899906842624 ($_pow2 50)) :named ax_166))
   (assert (! (= 1152921504606846976 ($_pow2 60)) :named ax_167))
   (assert (! (= 127 $max.i1) :named ax_168))
   (assert (! (= 128 ($_pow2 7)) :named ax_169))
   (assert (! (= 131072 ($_pow2 17)) :named ax_170))
   (assert (! (= 134217728 ($_pow2 27)) :named ax_171))
   (assert (! (= 137438953472 ($_pow2 37)) :named ax_172))
   (assert (! (= 140737488355328 ($_pow2 47)) :named ax_173))
   (assert (! (= 144115188075855872 ($_pow2 57)) :named ax_174))
   (assert (! (= 16 ($_pow2 4)) :named ax_175))
   (assert (! (= 16 ($sizeof ^Node)) :named ax_176))
   (assert (! (= 16384 ($_pow2 14)) :named ax_177))
   (assert (! (= 16777216 ($_pow2 24)) :named ax_178))
   (assert (! (= 17179869184 ($_pow2 34)) :named ax_179))
   (assert (! (= 17592186044416 ($_pow2 44)) :named ax_180))
   (assert (! (= 18014398509481984 ($_pow2 54)) :named ax_181))
   (assert (! (= 18446744073709551616 (* 281474976710656 65536)) :named ax_182))
   (assert (! (= 2 ($_pow2 1)) :named ax_183))
   (assert (! (= 2 ($sizeof ^^i2)) :named ax_184))
   (assert (! (= 2 ($sizeof ^^u2)) :named ax_185))
   (assert (! (= 2048 ($_pow2 11)) :named ax_186))
   (assert (! (= 2097152 ($_pow2 21)) :named ax_187))
   (assert (! (= 2147483647 $max.i4) :named ax_188))
   (assert (! (= 2147483647 (+ 2147483648 (- 1))) :named ax_189))
   (assert (! (= 2147483648 ($_pow2 31)) :named ax_190))
   (assert (! (= 2199023255552 ($_pow2 41)) :named ax_191))
   (assert (! (= 2251799813685248 ($_pow2 51)) :named ax_192))
   (assert (! (= 2305843009213693952 ($_pow2 61)) :named ax_193))
   (assert (! (= 255 $max.u1) :named ax_194))
   (assert (! (= 256 ($_pow2 8)) :named ax_195))
   (assert (! (= 262144 ($_pow2 18)) :named ax_196))
   (assert (! (= 268435456 ($_pow2 28)) :named ax_197))
   (assert (! (= 274877906944 ($_pow2 38)) :named ax_198))
   (assert (! (= 281474976710656 ($_pow2 48)) :named ax_199))
   (assert (! (= 281474976710656 (* 4294967296 65536)) :named ax_200))
   (assert (! (= 288230376151711744 ($_pow2 58)) :named ax_201))
   (assert (! (= 32 ($_pow2 5)) :named ax_202))
   (assert (! (= 32767 $max.i2) :named ax_203))
   (assert (! (= 32768 ($_pow2 15)) :named ax_204))
   (assert (! (= 33554432 ($_pow2 25)) :named ax_205))
   (assert (! (= 34359738368 ($_pow2 35)) :named ax_206))
   (assert (! (= 35184372088832 ($_pow2 45)) :named ax_207))
   (assert (! (= 36028797018963968 ($_pow2 55)) :named ax_208))
   (assert (! (= 4 ($_pow2 2)) :named ax_209))
   (assert (! (= 4 ($sizeof ^^f4)) :named ax_210))
   (assert (! (= 4 ($sizeof ^^i4)) :named ax_211))
   (assert (! (= 4 ($sizeof ^^u4)) :named ax_212))
   (assert (! (= 4096 ($_pow2 12)) :named ax_213))
   (assert (! (= 4194304 ($_pow2 22)) :named ax_214))
   (assert (! (= 4294967295 $max.u4) :named ax_215))
   (assert (! (= 4294967295 ($unchecked ^^u4 (- 1))) :named ax_216))
   (assert (! (= 4294967295 (+ 4294967296 (- 1))) :named ax_217))
   (assert (! (= 4294967296 ($_pow2 32)) :named ax_218))
   (assert (! (= 4398046511104 ($_pow2 42)) :named ax_219))
   (assert (! (= 4503599627370496 ($_pow2 52)) :named ax_220))
   (assert (! (= 4611686018427387904 ($_pow2 62)) :named ax_221))
   (assert (! (= 512 ($_pow2 9)) :named ax_222))
   (assert (! (= 524288 ($_pow2 19)) :named ax_223))
   (assert (! (= 536870912 ($_pow2 29)) :named ax_224))
   (assert (! (= 549755813888 ($_pow2 39)) :named ax_225))
   (assert (! (= 562949953421312 ($_pow2 49)) :named ax_226))
   (assert (! (= 576460752303423488 ($_pow2 59)) :named ax_227))
   (assert (! (= 64 ($_pow2 6)) :named ax_228))
   (assert (! (= 65535 $max.u2) :named ax_229))
   (assert (! (= 65536 ($_pow2 16)) :named ax_230))
   (assert (! (= 67108864 ($_pow2 26)) :named ax_231))
   (assert (! (= 68719476736 ($_pow2 36)) :named ax_232))
   (assert (! (= 70368744177664 ($_pow2 46)) :named ax_233))
   (assert (! (= 72057594037927936 ($_pow2 56)) :named ax_234))
   (assert (! (= 8 $arch_ptr_size) :named ax_235))
   (assert (! (= 8 ($_pow2 3)) :named ax_236))
   (assert (! (= 8 ($field_offset Node.data)) :named ax_237))
   (assert (! (= 8 ($sizeof ^^f8)) :named ax_238))
   (assert (! (= 8 ($sizeof ^^i8)) :named ax_239))
   (assert (! (= 8 ($sizeof ^^u8)) :named ax_240))
   (assert (! (= 8 ($sizeof ^List)) :named ax_241))
   (assert (! (= 8192 ($_pow2 13)) :named ax_242))
   (assert (! (= 8388608 ($_pow2 23)) :named ax_243))
   (assert (! (= 8589934592 ($_pow2 33)) :named ax_244))
   (assert (! (= 8796093022208 ($_pow2 43)) :named ax_245))
   (assert (! (= 9007199254740992 ($_pow2 53)) :named ax_246))
   (assert (! (= 9223372036854775808 ($_pow2 63)) :named ax_247))
   (assert (! (= 9223372036854775808 (* 281474976710656 32768)) :named ax_248))
   (assert (! (= List.$owns ($owns_set_field ^List)) :named ax_249))
   (assert (! (= Node.$owns ($owns_set_field ^Node)) :named ax_250))
   (assert (! (= P@l ($ref ($ptr ^List P@l))) :named ax_251))
   (assert (! (= true $@bf_333) :named ax_252))
   (assert (! (= true $@bf_334) :named ax_253))
   (assert (! (= true $@bf_335) :named ax_254))
   (assert (! (= true $@bf_336) :named ax_255))
   (assert (! (= true $@bf_339) :named ax_256))
   (assert (! (= true $@bf_340) :named ax_257))
   (assert (! (= true $@bf_341) :named ax_258))
   (assert (! (= true $@bf_342) :named ax_259))
   (assert (! (= true $@bf_349) :named ax_260))
   (assert (! (= true $@bf_350) :named ax_261))
   (assert (! (= true $@bf_351) :named ax_262))
   (assert (! (= true $@bf_352) :named ax_263))
   (assert (! (= true $@bf_353) :named ax_264))
   (assert (! (= true $@bf_354) :named ax_265))
   (assert (! (= true ($@bf_306 ^$@thread_id)) :named ax_266))
   (assert (! (forall ((|i| $ptr)(|m| $@Map@@$ptr@To@Bool@@)(|v| Bool))(!(= v (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i v) i)):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m i v) i)) :qid map_1_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_267))
   (assert (! (forall ((|v_1| Bool)(|m_1| $@Map@@$ptr@To@Bool@@)(|i_1| $ptr)(|j_1| $ptr))(!(=> (not (= j_1 i_1)) (= (MapRead$$@Map@@$ptr@To@Bool@@$ m_1 j_1) (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_1 v_1) j_1))):pattern ( (MapRead$$@Map@@$ptr@To@Bool@@$ (MapWrite$$@Map@@$ptr@To@Bool@@$ m_1 i_1 v_1) j_1)) :qid map_2_$@Map@@$ptr@To@Bool@@ :weight 0 )) :named ax_268))
   (assert (! (forall( (|#a_$0| $ptrset) (|#b_$2| $ptrset) (|#o_$4| $ptr))(!(= ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|)) (and ($set_in |#o_$4| |#a_$0|) (not ($set_in |#o_$4| |#b_$2|))))  :weight  0 :pattern ( ($set_in |#o_$4| ($set_difference |#a_$0| |#b_$2|))))) :named ax_269))
   (assert (! (forall( (|#a_$1| $ptrset) (|#b_$3| $ptrset) (|#o_$5| $ptr))(!(= ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|)) (and ($set_in |#o_$5| |#b_$3|) ($set_in |#o_$5| |#a_$1|)))  :weight  0 :pattern ( ($set_in |#o_$5| ($set_intersection |#a_$1| |#b_$3|))))) :named ax_270))
   (assert (! (forall( (|#a_$2| $ptrset) (|#b_$4| $ptrset))(!(= (forall( (|#o_$6| $ptr))(!(=> ($set_in |#o_$6| |#a_$2|) ($set_in |#o_$6| |#b_$4|))  :weight  0 :pattern ( ($set_in |#o_$6| |#a_$2|)) :pattern ( ($set_in |#o_$6| |#b_$4|)))) ($set_subset |#a_$2| |#b_$4|))  :weight  0 :pattern ( ($set_subset |#a_$2| |#b_$4|)))) :named ax_271))
   (assert (! (forall( (|#a_$3| $ptrset) (|#b_$5| $ptrset))(!(=> (forall( (|#o_$7| $ptr))(!(= ($set_in |#o_$7| |#b_$5|) ($set_in |#o_$7| |#a_$3|))  :weight  0 :pattern ( ($dont_instantiate |#o_$7|)))) ($set_eq |#a_$3| |#b_$5|))  :weight  0 :pattern ( ($set_eq |#a_$3| |#b_$5|)))) :named ax_272))
   (assert (! (forall( (|#a_$4| $ptrset) (|#b_$6| $ptrset))(!(=> ($set_eq |#a_$4| |#b_$6|) (= |#b_$6| |#a_$4|))  :weight  0 :pattern ( ($set_eq |#a_$4| |#b_$6|)))) :named ax_273))
   (assert (! (forall( (|#a| $ptrset) (|#b_$1| $ptrset) (|#o_$3| $ptr))(!(= ($set_in |#o_$3| ($set_union |#a| |#b_$1|)) (or ($set_in |#o_$3| |#b_$1|) ($set_in |#o_$3| |#a|)))  :weight  0 :pattern ( ($set_in |#o_$3| ($set_union |#a| |#b_$1|))))) :named ax_274))
   (assert (! (forall( (|#l_$2| $ptr) (|#p_$16| $ptr))(= ($set_in |#p_$16| ($span |#l_$2|)) ($in_span_of |#p_$16| |#l_$2|))) :named ax_275))
   (assert (! (forall( (|#l_$3| $ptr) (|#p_$18| $ptr))(= ($set_in |#p_$18| ($struct_extent |#l_$3|)) ($in_struct_extent_of |#p_$18| |#l_$3|))) :named ax_276))
   (assert (! (forall( (|#n_$0| $ctype))(!(= ($unptr_to ($spec_ptr_to |#n_$0|)) |#n_$0|)  :pattern ( ($spec_ptr_to |#n_$0|)))) :named ax_277))
   (assert (! (forall( (|#n_$1| $ctype))(!(= ($sizeof ($ptr_to |#n_$1|)) $arch_ptr_size)  :pattern ( ($ptr_to |#n_$1|)))) :named ax_278))
   (assert (! (forall( (|#n_$2| $ctype))(!(= ($sizeof ($ptr_to |#n_$2|)) $arch_ptr_size)  :pattern ( ($spec_ptr_to |#n_$2|)))) :named ax_279))
   (assert (! (forall( (|#n_$3| $ctype))(!(= ($ptr_level ($ptr_to |#n_$3|)) (+ ($ptr_level |#n_$3|) 17))  :pattern ( ($ptr_to |#n_$3|)))) :named ax_280))
   (assert (! (forall( (|#n_$4| $ctype))(!(= ($ptr_level ($spec_ptr_to |#n_$4|)) (+ ($ptr_level |#n_$4|) 31))  :pattern ( ($spec_ptr_to |#n_$4|)))) :named ax_281))
   (assert (! (forall( (|#n_$5| $ctype))(!($is_primitive ($ptr_to |#n_$5|))  :pattern ( ($ptr_to |#n_$5|)))) :named ax_282))
   (assert (! (forall( (|#n_$6| $ctype))(!($is_primitive ($spec_ptr_to |#n_$6|))  :pattern ( ($spec_ptr_to |#n_$6|)))) :named ax_283))
   (assert (! (forall( (|#n_$7| $ctype))(!(=> ($is_primitive |#n_$7|) (not ($is_claimable |#n_$7|)))  :pattern ( ($is_primitive |#n_$7|)))) :named ax_284))
   (assert (! (forall( (|#n_$8| $ctype))(!(=> ($is_claimable |#n_$8|) ($is_composite |#n_$8|))  :pattern ( ($is_claimable |#n_$8|)))) :named ax_285))
   (assert (! (forall( (|#n| $ctype))(!(= ($unptr_to ($ptr_to |#n|)) |#n|)  :pattern ( ($ptr_to |#n|)))) :named ax_286))
   (assert (! (forall( (|#o_$0| $ptr))(!(not ($set_in |#o_$0| $set_empty))  :weight  0 :pattern ( ($set_in |#o_$0| $set_empty)))) :named ax_287))
   (assert (! (forall( (|#o_$8| $ptr))(!($set_in |#o_$8| $set_universe)  :weight  0 :pattern ( ($set_in |#o_$8| $set_universe)))) :named ax_288))
   (assert (! (forall( (|#o| $ptr) (|#f| $ptr) (|S_$19| $state))(= ($is_primitive_field_of |S_$19| |#f| |#o|) (and ($is_primitive_ch ($typ |#f|)) (= ($emb |S_$19| |#f|) |#o|)))) :named ax_289))
   (assert (! (forall( (|#p_$0| $ptr) (|S_$0| $state))(= ($ts_emb ($ts |S_$0| |#p_$0|)) ($emb |S_$0| |#p_$0|))) :named ax_290))
   (assert (! (forall( (|#p_$1| $ptr) (|S_$1| $state))(= ($ts_path ($ts |S_$1| |#p_$1|)) ($path |S_$1| |#p_$1|))) :named ax_291))
   (assert (! (forall( (|#p_$11| $ptr) (|S_$25| $state))(= (and ($typed |S_$25| |#p_$11|) (not ($is_volatile |S_$25| |#p_$11|))) ($dom_thread_local |S_$25| |#p_$11|))) :named ax_292))
   (assert (! (forall( (|#p_$12| $ptr) (|#l| $ptr) (|S_$32| $state) (|S0| $state))(= (and (and (and (and (and ($wrapped |S_$32| |#p_$12| ($typ |#p_$12|)) ($typed |S0| |#p_$12|)) ($timestamp_is_now |S_$32| |#p_$12|)) ($is_non_primitive ($typ |#p_$12|))) ($set_in |#p_$12| ($owns |S0| |#l|))) ($nested_in |S0| |#p_$12| |#l|)) ($unwrap_post |S0| |S_$32| |#l| |#p_$12|))) :named ax_293))
   (assert (! (forall( (|#p_$13| $ptr) (|#l_$0| $ptr) (|S_$33| $state) (|S0_$0| $state))(= ($unwrap_post_claimable |S0_$0| |S_$33| |#l_$0| |#p_$13|) (and ($unwrap_post |S0_$0| |S_$33| |#l_$0| |#p_$13|) (=> ($is_claimable ($typ |#p_$13|)) (= ($ref_cnt |S0_$0| |#p_$13|) ($ref_cnt |S_$33| |#p_$13|)))))) :named ax_294))
   (assert (! (forall( (|#p_$14| $ptr) (|#l_$1| $ptr) (|S_$34| $state))(= ($set_in |#p_$14| ($owns |S_$34| |#l_$1|)) ($keeps |S_$34| |#l_$1| |#p_$14|))) :named ax_295))
   (assert (! (forall( (|#p_$17| $ptr))(= ($struct_extent |#p_$17|) ($full_extent |#p_$17|))) :named ax_296))
   (assert (! (forall( (|#p_$19| $ptr) (|#t_$7| $ctype))(!(= (= ($typ |#p_$19|) |#t_$7|) ($is |#p_$19| |#t_$7|))  :weight  0)) :named ax_297))
   (assert (! (forall( (|#p_$20| $ptr) (|#t_$8| $ctype))(!(=> ($is |#p_$20| |#t_$8|) (= ($ptr |#t_$8| ($ref |#p_$20|)) |#p_$20|))  :pattern ( ($is |#p_$20| |#t_$8|)))) :named ax_298))
   (assert (! (forall( (|#p_$21| $ptr) (|t_$20| $ctype))(!(= ($ptr ^$@ptrset ($ghost_ref |#p_$21| ($owns_set_field |t_$20|))) ($dot |#p_$21| ($owns_set_field |t_$20|)))  :pattern ( ($dot |#p_$21| ($owns_set_field |t_$20|))))) :named ax_299))
   (assert (! (forall( (|#p_$32| $ptr) (|#i_$0| Int) (|#t_$16| $ctype))(!(and (= ($ptr |#t_$16| ($add.mul ($ref |#p_$32|) |#i_$0| ($sizeof |#t_$16|))) ($idx |#p_$32| |#i_$0| |#t_$16|)) ($extent_hint ($idx |#p_$32| |#i_$0| |#t_$16|) |#p_$32|))  :pattern ( ($idx |#p_$32| |#i_$0| |#t_$16|)))) :named ax_300))
   (assert (! (forall( (|#p_$34| $ptr) (|#s1_$12| $state) (|#s2_$10| $state))(!(= (and (and ($mem_eq |#s1_$12| |#s2_$10| ($dot |#p_$34| Node.next)) ($mem_eq |#s1_$12| |#s2_$10| ($dot |#p_$34| Node.$owns))) ($mem_eq |#s1_$12| |#s2_$10| ($dot |#p_$34| Node.data))) ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^Node))  :pattern ( ($state_spans_the_same |#s1_$12| |#s2_$10| |#p_$34| ^Node)))) :named ax_301))
   (assert (! (forall( (|#p_$35| $ptr) (|#s1_$13| $state) (|#s2_$11| $state))(!(= (and (and ($mem_eq |#s1_$13| |#s2_$11| ($dot |#p_$35| Node.next)) ($mem_eq |#s1_$13| |#s2_$11| ($dot |#p_$35| Node.$owns))) ($mem_eq |#s1_$13| |#s2_$11| ($dot |#p_$35| Node.data))) ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^Node))  :pattern ( ($state_nonvolatile_spans_the_same |#s1_$13| |#s2_$11| |#p_$35| ^Node)))) :named ax_302))
   (assert (! (forall( (|#p_$36| $ptr))(!(=> ($is |#p_$36| ^Node) (and (= ($ptr ^$@ptrset ($ghost_ref |#p_$36| Node.$owns)) ($dot |#p_$36| Node.$owns)) ($extent_hint ($dot |#p_$36| Node.$owns) |#p_$36|)))  :pattern ( ($dot |#p_$36| Node.$owns)))) :named ax_303))
   (assert (! (forall( (|#p_$37| $ptr) (|#s_$1| $state))(!(=> ($typed2 |#s_$1| |#p_$37| ^Node) ($field_properties |#s_$1| |#p_$37| Node.$owns ^$@ptrset false))  :pattern ( ($ts |#s_$1| ($dot |#p_$37| Node.$owns))) :pattern ( ($st |#s_$1| ($dot |#p_$37| Node.$owns))))) :named ax_304))
   (assert (! (forall( (|#p_$38| $ptr))(!(=> ($is |#p_$38| ^Node) (and (= ($ptr ($ptr_to ^Node) (+ ($ref |#p_$38|) 0)) ($dot |#p_$38| Node.next)) ($extent_hint ($dot |#p_$38| Node.next) |#p_$38|)))  :pattern ( ($dot |#p_$38| Node.next)))) :named ax_305))
   (assert (! (forall( (|#p_$39| $ptr) (|#s_$2| $state))(!(=> ($typed2 |#s_$2| |#p_$39| ^Node) ($field_properties |#s_$2| |#p_$39| Node.next ($ptr_to ^Node) false))  :pattern ( ($ts |#s_$2| ($dot |#p_$39| Node.next))) :pattern ( ($st |#s_$2| ($dot |#p_$39| Node.next))))) :named ax_306))
   (assert (! (forall( (|#p_$40| $ptr))(!(=> ($is |#p_$40| ^Node) (and (= ($ptr ^^i4 (+ ($ref |#p_$40|) 8)) ($dot |#p_$40| Node.data)) ($extent_hint ($dot |#p_$40| Node.data) |#p_$40|)))  :pattern ( ($dot |#p_$40| Node.data)))) :named ax_307))
   (assert (! (forall( (|#p_$41| $ptr) (|#s_$3| $state))(!(=> ($typed2 |#s_$3| |#p_$41| ^Node) ($field_properties |#s_$3| |#p_$41| Node.data ^^i4 false))  :pattern ( ($ts |#s_$3| ($dot |#p_$41| Node.data))) :pattern ( ($st |#s_$3| ($dot |#p_$41| Node.data))))) :named ax_308))
   (assert (! (forall( (|#p_$43| $ptr) (|#s1_$18| $state) (|#s2_$15| $state))(!(= (and (and (and (and (and ($mem_eq |#s1_$18| |#s2_$15| ($dot |#p_$43| List.seq)) (and ($mem_eq |#s1_$18| |#s2_$15| ($dot |#p_$43| List.head)) ($mem_eq |#s1_$18| |#s2_$15| ($dot |#p_$43| List.$owns)))) ($mem_eq |#s1_$18| |#s2_$15| ($dot |#p_$43| List.idx))) ($mem_eq |#s1_$18| |#s2_$15| ($dot |#p_$43| List.followers))) ($mem_eq |#s1_$18| |#s2_$15| ($dot |#p_$43| List.length_acc))) ($mem_eq |#s1_$18| |#s2_$15| ($dot |#p_$43| List.length))) ($state_spans_the_same |#s1_$18| |#s2_$15| |#p_$43| ^List))  :pattern ( ($state_spans_the_same |#s1_$18| |#s2_$15| |#p_$43| ^List)))) :named ax_309))
   (assert (! (forall( (|#p_$44| $ptr) (|#s1_$19| $state) (|#s2_$16| $state))(!(= (and (and (and (and (and ($mem_eq |#s1_$19| |#s2_$16| ($dot |#p_$44| List.seq)) (and ($mem_eq |#s1_$19| |#s2_$16| ($dot |#p_$44| List.head)) ($mem_eq |#s1_$19| |#s2_$16| ($dot |#p_$44| List.$owns)))) ($mem_eq |#s1_$19| |#s2_$16| ($dot |#p_$44| List.idx))) ($mem_eq |#s1_$19| |#s2_$16| ($dot |#p_$44| List.followers))) ($mem_eq |#s1_$19| |#s2_$16| ($dot |#p_$44| List.length_acc))) ($mem_eq |#s1_$19| |#s2_$16| ($dot |#p_$44| List.length))) ($state_nonvolatile_spans_the_same |#s1_$19| |#s2_$16| |#p_$44| ^List))  :pattern ( ($state_nonvolatile_spans_the_same |#s1_$19| |#s2_$16| |#p_$44| ^List)))) :named ax_310))
   (assert (! (forall( (|#p_$45| $ptr))(!(=> ($is |#p_$45| ^List) (and (= ($ptr ^$@ptrset ($ghost_ref |#p_$45| List.$owns)) ($dot |#p_$45| List.$owns)) ($extent_hint ($dot |#p_$45| List.$owns) |#p_$45|)))  :pattern ( ($dot |#p_$45| List.$owns)))) :named ax_311))
   (assert (! (forall( (|#p_$46| $ptr) (|#s_$6| $state))(!(=> ($typed2 |#s_$6| |#p_$46| ^List) ($field_properties |#s_$6| |#p_$46| List.$owns ^$@ptrset false))  :pattern ( ($ts |#s_$6| ($dot |#p_$46| List.$owns))) :pattern ( ($st |#s_$6| ($dot |#p_$46| List.$owns))))) :named ax_312))
   (assert (! (forall( (|#p_$47| $ptr))(!(=> ($is |#p_$47| ^List) (and (= ($ptr ($ptr_to ^Node) (+ ($ref |#p_$47|) 0)) ($dot |#p_$47| List.head)) ($extent_hint ($dot |#p_$47| List.head) |#p_$47|)))  :pattern ( ($dot |#p_$47| List.head)))) :named ax_313))
   (assert (! (forall( (|#p_$48| $ptr) (|#s_$7| $state))(!(=> ($typed2 |#s_$7| |#p_$48| ^List) ($field_properties |#s_$7| |#p_$48| List.head ($ptr_to ^Node) false))  :pattern ( ($ts |#s_$7| ($dot |#p_$48| List.head))) :pattern ( ($st |#s_$7| ($dot |#p_$48| List.head))))) :named ax_314))
   (assert (! (forall( (|#p_$49| $ptr))(!(=> ($is |#p_$49| ^List) (and (= ($ptr ($map_t ^^u4 ($ptr_to ^Node)) ($ghost_ref |#p_$49| List.seq)) ($dot |#p_$49| List.seq)) ($extent_hint ($dot |#p_$49| List.seq) |#p_$49|)))  :pattern ( ($dot |#p_$49| List.seq)))) :named ax_315))
   (assert (! (forall( (|#p_$50| $ptr) (|#s_$8| $state))(!(=> ($typed2 |#s_$8| |#p_$50| ^List) ($field_properties |#s_$8| |#p_$50| List.seq ($map_t ^^u4 ($ptr_to ^Node)) false))  :pattern ( ($ts |#s_$8| ($dot |#p_$50| List.seq))) :pattern ( ($st |#s_$8| ($dot |#p_$50| List.seq))))) :named ax_316))
   (assert (! (forall( (|#p_$51| $ptr))(!(=> ($is |#p_$51| ^List) (and (= ($ptr ($map_t ($ptr_to ^Node) ^^u4) ($ghost_ref |#p_$51| List.idx)) ($dot |#p_$51| List.idx)) ($extent_hint ($dot |#p_$51| List.idx) |#p_$51|)))  :pattern ( ($dot |#p_$51| List.idx)))) :named ax_317))
   (assert (! (forall( (|#p_$52| $ptr) (|#s_$9| $state))(!(=> ($typed2 |#s_$9| |#p_$52| ^List) ($field_properties |#s_$9| |#p_$52| List.idx ($map_t ($ptr_to ^Node) ^^u4) false))  :pattern ( ($ts |#s_$9| ($dot |#p_$52| List.idx))) :pattern ( ($st |#s_$9| ($dot |#p_$52| List.idx))))) :named ax_318))
   (assert (! (forall( (|#p_$53| $ptr))(!(=> ($is |#p_$53| ^List) (and (= ($ptr ($map_t ($ptr_to ^Node) ($map_t ^^i4 ^^bool)) ($ghost_ref |#p_$53| List.followers)) ($dot |#p_$53| List.followers)) ($extent_hint ($dot |#p_$53| List.followers) |#p_$53|)))  :pattern ( ($dot |#p_$53| List.followers)))) :named ax_319))
   (assert (! (forall( (|#p_$54| $ptr) (|#s_$10| $state))(!(=> ($typed2 |#s_$10| |#p_$54| ^List) ($field_properties |#s_$10| |#p_$54| List.followers ($map_t ($ptr_to ^Node) ($map_t ^^i4 ^^bool)) false))  :pattern ( ($ts |#s_$10| ($dot |#p_$54| List.followers))) :pattern ( ($st |#s_$10| ($dot |#p_$54| List.followers))))) :named ax_320))
   (assert (! (forall( (|#p_$55| $ptr))(!(=> ($is |#p_$55| ^List) (and (= ($ptr ($map_t ($ptr_to ^Node) ^^u4) ($ghost_ref |#p_$55| List.length_acc)) ($dot |#p_$55| List.length_acc)) ($extent_hint ($dot |#p_$55| List.length_acc) |#p_$55|)))  :pattern ( ($dot |#p_$55| List.length_acc)))) :named ax_321))
   (assert (! (forall( (|#p_$56| $ptr) (|#s_$11| $state))(!(=> ($typed2 |#s_$11| |#p_$56| ^List) ($field_properties |#s_$11| |#p_$56| List.length_acc ($map_t ($ptr_to ^Node) ^^u4) false))  :pattern ( ($ts |#s_$11| ($dot |#p_$56| List.length_acc))) :pattern ( ($st |#s_$11| ($dot |#p_$56| List.length_acc))))) :named ax_322))
   (assert (! (forall( (|#p_$57| $ptr))(!(=> ($is |#p_$57| ^List) (and (= ($ptr ^^u4 ($ghost_ref |#p_$57| List.length)) ($dot |#p_$57| List.length)) ($extent_hint ($dot |#p_$57| List.length) |#p_$57|)))  :pattern ( ($dot |#p_$57| List.length)))) :named ax_323))
   (assert (! (forall( (|#p_$58| $ptr) (|#s_$12| $state))(!(=> ($typed2 |#s_$12| |#p_$58| ^List) ($field_properties |#s_$12| |#p_$58| List.length ^^u4 false))  :pattern ( ($ts |#s_$12| ($dot |#p_$58| List.length))) :pattern ( ($st |#s_$12| ($dot |#p_$58| List.length))))) :named ax_324))
   (assert (! (forall( (|#p_$59| $ptr))(!(not ($in_writes_at $@wrTime$1^30.1 |#p_$59|))  :pattern ( ($in_writes_at $@wrTime$1^30.1 |#p_$59|)))) :named ax_325))
   (assert (! (forall( (|#p2_$0| $ptr) (|#p1_$0| $ptr))(= ($set_in |#p1_$0| ($full_extent |#p2_$0|)) ($in_full_extent_of |#p1_$0| |#p2_$0|))) :named ax_326))
   (assert (! (forall( (|#p2| $ptr) (|#p1| $ptr) (|S_$22| $state))(= ($set_in |#p1| ($extent |S_$22| |#p2|)) ($in_extent_of |S_$22| |#p1| |#p2|))) :named ax_327))
   (assert (! (forall( (|#q_$2| $ptr) (|#r_$16| Int))(!(= (or (or (or (= ($ptr ^Node |#r_$16|) |#q_$2|) (= ($dot ($ptr ^Node |#r_$16|) Node.$owns) |#q_$2|)) (= ($dot ($ptr ^Node |#r_$16|) Node.next) |#q_$2|)) (= ($dot ($ptr ^Node |#r_$16|) Node.data) |#q_$2|)) ($in_full_extent_of |#q_$2| ($ptr ^Node |#r_$16|)))  :pattern ( ($in_full_extent_of |#q_$2| ($ptr ^Node |#r_$16|))))) :named ax_328))
   (assert (! (forall( (|#q_$5| $ptr) (|#r_$19| Int))(!(= (or (or (or (= ($ptr ^Node |#r_$19|) |#q_$5|) (= ($dot ($ptr ^Node |#r_$19|) Node.$owns) |#q_$5|)) (= ($dot ($ptr ^Node |#r_$19|) Node.next) |#q_$5|)) (= ($dot ($ptr ^Node |#r_$19|) Node.data) |#q_$5|)) ($in_span_of |#q_$5| ($ptr ^Node |#r_$19|)))  :pattern ( ($in_span_of |#q_$5| ($ptr ^Node |#r_$19|))))) :named ax_329))
   (assert (! (forall( (|#q_$6| $ptr) (|#r_$24| Int))(!(= (or (or (or (or (or (or (or (= ($ptr ^List |#r_$24|) |#q_$6|) (= ($dot ($ptr ^List |#r_$24|) List.$owns) |#q_$6|)) (= ($dot ($ptr ^List |#r_$24|) List.head) |#q_$6|)) (= ($dot ($ptr ^List |#r_$24|) List.seq) |#q_$6|)) (= ($dot ($ptr ^List |#r_$24|) List.idx) |#q_$6|)) (= ($dot ($ptr ^List |#r_$24|) List.followers) |#q_$6|)) (= ($dot ($ptr ^List |#r_$24|) List.length_acc) |#q_$6|)) (= ($dot ($ptr ^List |#r_$24|) List.length) |#q_$6|)) ($in_full_extent_of |#q_$6| ($ptr ^List |#r_$24|)))  :pattern ( ($in_full_extent_of |#q_$6| ($ptr ^List |#r_$24|))))) :named ax_330))
   (assert (! (forall( (|#q_$9| $ptr) (|#r_$27| Int))(!(= (or (or (or (or (or (or (or (= ($ptr ^List |#r_$27|) |#q_$9|) (= ($dot ($ptr ^List |#r_$27|) List.$owns) |#q_$9|)) (= ($dot ($ptr ^List |#r_$27|) List.head) |#q_$9|)) (= ($dot ($ptr ^List |#r_$27|) List.seq) |#q_$9|)) (= ($dot ($ptr ^List |#r_$27|) List.idx) |#q_$9|)) (= ($dot ($ptr ^List |#r_$27|) List.followers) |#q_$9|)) (= ($dot ($ptr ^List |#r_$27|) List.length_acc) |#q_$9|)) (= ($dot ($ptr ^List |#r_$27|) List.length) |#q_$9|)) ($in_span_of |#q_$9| ($ptr ^List |#r_$27|)))  :pattern ( ($in_span_of |#q_$9| ($ptr ^List |#r_$27|))))) :named ax_331))
   (assert (! (forall( (|#r_$0| $ctype) (|#d_$0| $ctype))(!(= ($map_range ($map_t |#r_$0| |#d_$0|)) |#r_$0|)  :pattern ( ($map_t |#r_$0| |#d_$0|)))) :named ax_332))
   (assert (! (forall( (|#r_$1| $ctype) (|#d_$1| $ctype))(!(= ($ptr_level ($map_t |#r_$1| |#d_$1|)) (+ ($ptr_level |#r_$1|) 23))  :pattern ( ($map_t |#r_$1| |#d_$1|)))) :named ax_333))
   (assert (! (forall( (|#r_$2| $ctype) (|#d_$2| $ctype))(!($is_primitive ($map_t |#r_$2| |#d_$2|))  :pattern ( ($map_t |#r_$2| |#d_$2|)))) :named ax_334))
   (assert (! (forall( (|#r_$3| Int))(!(= ($in_range_phys_ptr |#r_$3|) ($in_range 0 |#r_$3| $arch_spec_ptr_start))  :pattern ( ($in_range_phys_ptr |#r_$3|)))) :named ax_335))
   (assert (! (forall( (|#r_$4| Int))(!(= (or (= 0 |#r_$4|) (> |#r_$4| $arch_spec_ptr_start)) ($in_range_spec_ptr |#r_$4|))  :pattern ( ($in_range_spec_ptr |#r_$4|)))) :named ax_336))
   (assert (! (forall( (|#r_$7| $ptr) (|#o_$1| $ptr))(!(= ($set_in |#o_$1| ($set_singleton |#r_$7|)) (= |#r_$7| |#o_$1|))  :weight  0 :pattern ( ($set_in |#o_$1| ($set_singleton |#r_$7|))))) :named ax_337))
   (assert (! (forall( (|#r_$8| $ptr) (|#o_$2| $ptr))(!(= ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|)) (and ($ptr_neq |#r_$8| $null) (= |#r_$8| |#o_$2|)))  :weight  0 :pattern ( ($set_in |#o_$2| ($non_null_set_singleton |#r_$8|))))) :named ax_338))
   (assert (! (forall( (|#r| $ctype) (|#d| $ctype))(!(= ($map_domain ($map_t |#r| |#d|)) |#d|)  :pattern ( ($map_t |#r| |#d|)))) :named ax_339))
   (assert (! (forall( (|#s_$0| $state) (|#q_$4| $ptr) (|#r_$18| Int))(!(=> ($typed |#s_$0| ($ptr ^Node |#r_$18|)) (= (or (= ($ptr ^Node |#r_$18|) ($emb |#s_$0| |#q_$4|)) (= ($ptr ^Node |#r_$18|) |#q_$4|)) ($in_extent_of |#s_$0| |#q_$4| ($ptr ^Node |#r_$18|))))  :pattern ( ($in_extent_of |#s_$0| |#q_$4| ($ptr ^Node |#r_$18|))))) :named ax_340))
   (assert (! (forall( (|#s_$4| $state) (|#q_$7| $ptr) (|#r_$25| Int))(!(= ($in_struct_extent_of |#q_$7| ($ptr ^List |#r_$25|)) ($in_extent_of |#s_$4| |#q_$7| ($ptr ^List |#r_$25|)))  :pattern ( ($in_extent_of |#s_$4| |#q_$7| ($ptr ^List |#r_$25|))))) :named ax_341))
   (assert (! (forall( (|#s_$5| $state) (|#q_$8| $ptr) (|#r_$26| Int))(!(=> ($typed |#s_$5| ($ptr ^List |#r_$26|)) (= (or (= ($ptr ^List |#r_$26|) ($emb |#s_$5| |#q_$8|)) (= ($ptr ^List |#r_$26|) |#q_$8|)) ($in_extent_of |#s_$5| |#q_$8| ($ptr ^List |#r_$26|))))  :pattern ( ($in_extent_of |#s_$5| |#q_$8| ($ptr ^List |#r_$26|))))) :named ax_342))
   (assert (! (forall( (|#s| $state) (|#q_$3| $ptr) (|#r_$17| Int))(!(= ($in_struct_extent_of |#q_$3| ($ptr ^Node |#r_$17|)) ($in_extent_of |#s| |#q_$3| ($ptr ^Node |#r_$17|)))  :pattern ( ($in_extent_of |#s| |#q_$3| ($ptr ^Node |#r_$17|))))) :named ax_343))
   (assert (! (forall( (|#s1_$10| $state) (|#s2_$7| $state) (|#p_$29| $ptr) (|#t_$13| $ctype))(!(=> (and (= ($typ |#p_$29|) |#t_$13|) ($is_arraytype |#t_$13|)) (and (= ($typed |#s2_$7| |#p_$29|) ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)) ($sequential |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)))  :pattern ( ($is_arraytype |#t_$13|) ($inv2 |#s1_$10| |#s2_$7| |#p_$29| |#t_$13|)))) :named ax_344))
   (assert (! (forall( (|#s1_$11| $state) (|#s2_$8| $state) (|#p_$33| $ptr))(!(= (and ($typed |#s2_$8| |#p_$33|) ($set_eq ($owns |#s2_$8| |#p_$33|) $set_empty)) ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^Node))  :pattern ( ($inv2 |#s1_$11| |#s2_$8| |#p_$33| ^Node)))) :named ax_345))
   (assert (! (forall( (|#s1_$14| $state) (|#r_$20| Int))(!(= ($mutable |#s1_$14| ($ptr ^Node |#r_$20|)) ($extent_mutable |#s1_$14| ($ptr ^Node |#r_$20|)))  :pattern ( ($extent_mutable |#s1_$14| ($ptr ^Node |#r_$20|))))) :named ax_346))
   (assert (! (forall( (|#s1_$15| $state) (|#s2_$12| $state) (|#r_$21| Int))(!(= ($is_fresh |#s1_$15| |#s2_$12| ($ptr ^Node |#r_$21|)) ($extent_is_fresh |#s1_$15| |#s2_$12| ($ptr ^Node |#r_$21|)))  :pattern ( ($extent_is_fresh |#s1_$15| |#s2_$12| ($ptr ^Node |#r_$21|))))) :named ax_347))
   (assert (! (forall( (|#s1_$16| $state) (|#r_$22| Int))(!(= (and (= 0 ($mem |#s1_$16| ($dot ($ptr ^Node |#r_$22|) Node.next))) (= 0 ($mem |#s1_$16| ($dot ($ptr ^Node |#r_$22|) Node.data)))) ($extent_zero |#s1_$16| ($ptr ^Node |#r_$22|)))  :pattern ( ($extent_zero |#s1_$16| ($ptr ^Node |#r_$22|))))) :named ax_348))
   (assert (! (forall( (|#s1_$17| $state) (|#s2_$13| $state) (|#p_$42| $ptr))(!(= (and (and (forall( (|Q#n$1^26.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^26.29#dt1|))) (=> (and ($ptr_neq ($read_ptr |#s2_$13| ($dot ($ptr ^Node |Q#n$1^26.29#dt1|) Node.next) ^Node) $null) ($keeps |#s2_$13| |#p_$42| ($ptr ^Node |Q#n$1^26.29#dt1|))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.idx))) ($ref ($read_ptr |#s2_$13| ($dot ($ptr ^Node |Q#n$1^26.29#dt1|) Node.next) ^Node))) (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.idx))) ($ref ($ptr ^Node |Q#n$1^26.29#dt1|))) 1))))) (and (and (= 0 ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.idx))) ($ref ($read_ptr |#s2_$13| ($dot |#p_$42| List.head) ^Node)))) (and (forall( (|Q#i$1^24.29#tc3| Int))(!(=> ($in_range_u4 |Q#i$1^24.29#tc3|) (=> (< |Q#i$1^24.29#tc3| ($mem |#s2_$13| ($dot |#p_$42| List.length))) ($ptr_eq ($read_ptr |#s2_$13| ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$13| ($dot |#p_$42| List.seq))) |Q#i$1^24.29#tc3|)) Node.next) ^Node) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$13| ($dot |#p_$42| List.seq))) (+ |Q#i$1^24.29#tc3| 1))))))  :pattern ( (sk_hack ($keeps |#s2_$13| |#p_$42| ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$13| ($dot |#p_$42| List.seq))) |Q#i$1^24.29#tc3|))))))) (and (forall( (|Q#i$1^23.29#tc3| Int))(=> ($in_range_u4 |Q#i$1^23.29#tc3|) (=> (< |Q#i$1^23.29#tc3| ($mem |#s2_$13| ($dot |#p_$42| List.length))) ($keeps |#s2_$13| |#p_$42| ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$13| ($dot |#p_$42| List.seq))) |Q#i$1^23.29#tc3|)))))) (and (forall( (|Q#n$1^22.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^22.29#dt1|))) (=> ($keeps |#s2_$13| |#p_$42| ($ptr ^Node |Q#n$1^22.29#dt1|)) ($ptr_eq ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$13| ($dot |#p_$42| List.seq))) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.idx))) ($ref ($ptr ^Node |Q#n$1^22.29#dt1|))))) ($ptr ^Node |Q#n$1^22.29#dt1|))))) (and (forall( (|Q#n$1^21.51#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^21.51#dt1|))) (=> ($keeps |#s2_$13| |#p_$42| ($ptr ^Node |Q#n$1^21.51#dt1|)) (= (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.length_acc))) ($ref ($read_ptr |#s2_$13| ($dot ($ptr ^Node |Q#n$1^21.51#dt1|) Node.next) ^Node))) 1) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.length_acc))) ($ref ($ptr ^Node |Q#n$1^21.51#dt1|))))))) (and (= 0 ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.length_acc))) ($ref ($ptr_cast $null ^Node)))) (and (forall( (|Q#n$1^19.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^19.29#dt1|))) (=> ($keeps |#s2_$13| |#p_$42| ($ptr ^Node |Q#n$1^19.29#dt1|)) (forall( (|Q#e$1^20.5#tc2| Int))(=> ($in_range_i4 |Q#e$1^20.5#tc2|) (= (or (= |Q#e$1^20.5#tc2| ($mem |#s2_$13| ($dot ($ptr ^Node |Q#n$1^19.29#dt1|) Node.data))) ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($mem |#s2_$13| ($dot |#p_$42| List.followers))) ($ref ($read_ptr |#s2_$13| ($dot ($ptr ^Node |Q#n$1^19.29#dt1|) Node.next) ^Node))) |Q#e$1^20.5#tc2|)) ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($mem |#s2_$13| ($dot |#p_$42| List.followers))) ($ref ($ptr ^Node |Q#n$1^19.29#dt1|))) |Q#e$1^20.5#tc2|))))))) (and (forall( (|Q#n$1^18.29#dt1| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^18.29#dt1|))) (=> ($keeps |#s2_$13| |#p_$42| ($ptr ^Node |Q#n$1^18.29#dt1|)) (or ($keeps |#s2_$13| |#p_$42| ($read_ptr |#s2_$13| ($dot ($ptr ^Node |Q#n$1^18.29#dt1|) Node.next) ^Node)) (not ($ptr_neq ($read_ptr |#s2_$13| ($dot ($ptr ^Node |Q#n$1^18.29#dt1|) Node.next) ^Node) $null)))))) (and (and ($typed |#s2_$13| |#p_$42|) (=> ($ptr_neq ($read_ptr |#s2_$13| ($dot |#p_$42| List.head) ^Node) $null) ($keeps |#s2_$13| |#p_$42| ($read_ptr |#s2_$13| ($dot |#p_$42| List.head) ^Node)))) ($eq.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($mem |#s2_$13| ($dot |#p_$42| List.followers))) ($ref ($ptr_cast $null ^Node))) F@lambda@1)))))))))) (=> ($ptr_neq ($read_ptr |#s2_$13| ($dot |#p_$42| List.head) ^Node) $null) ($ptr_eq ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$13| ($dot |#p_$42| List.seq))) 0)) ($read_ptr |#s2_$13| ($dot |#p_$42| List.head) ^Node))))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$13| ($dot |#p_$42| List.length_acc))) ($ref ($read_ptr |#s2_$13| ($dot |#p_$42| List.head) ^Node))) ($mem |#s2_$13| ($dot |#p_$42| List.length)))) ($inv2 |#s1_$17| |#s2_$13| |#p_$42| ^List))  :pattern ( ($inv2 |#s1_$17| |#s2_$13| |#p_$42| ^List)))) :named ax_349))
   (assert (! (forall( (|#s1_$20| $state) (|#r_$28| Int))(!(= ($mutable |#s1_$20| ($ptr ^List |#r_$28|)) ($extent_mutable |#s1_$20| ($ptr ^List |#r_$28|)))  :pattern ( ($extent_mutable |#s1_$20| ($ptr ^List |#r_$28|))))) :named ax_350))
   (assert (! (forall( (|#s1_$21| $state) (|#s2_$17| $state) (|#r_$29| Int))(!(= ($is_fresh |#s1_$21| |#s2_$17| ($ptr ^List |#r_$29|)) ($extent_is_fresh |#s1_$21| |#s2_$17| ($ptr ^List |#r_$29|)))  :pattern ( ($extent_is_fresh |#s1_$21| |#s2_$17| ($ptr ^List |#r_$29|))))) :named ax_351))
   (assert (! (forall( (|#s1_$22| $state) (|#r_$30| Int))(!(= (and (= 0 ($mem |#s1_$22| ($dot ($ptr ^List |#r_$30|) List.length))) (and (= 0 ($mem |#s1_$22| ($dot ($ptr ^List |#r_$30|) List.length_acc))) (and (= 0 ($mem |#s1_$22| ($dot ($ptr ^List |#r_$30|) List.followers))) (and (= 0 ($mem |#s1_$22| ($dot ($ptr ^List |#r_$30|) List.idx))) (and (= 0 ($mem |#s1_$22| ($dot ($ptr ^List |#r_$30|) List.seq))) (= 0 ($mem |#s1_$22| ($dot ($ptr ^List |#r_$30|) List.head)))))))) ($extent_zero |#s1_$22| ($ptr ^List |#r_$30|)))  :pattern ( ($extent_zero |#s1_$22| ($ptr ^List |#r_$30|))))) :named ax_352))
   (assert (! (forall( (|#s1_$5| $state) (|#p_$25| $ptr) (|typ_$1| $ctype))(!(=> ($imply_inv |#s1_$5| |#p_$25| |typ_$1|) ($inv |#s1_$5| |#p_$25| |typ_$1|))  :pattern ( ($inv |#s1_$5| |#p_$25| |typ_$1|)))) :named ax_353))
   (assert (! (forall( (|#s1_$6| $state) (|#s2_$3| $state) (|#p_$26| $ptr) (|#t_$10| $ctype))(!(= (=> (and ($closed |#s2_$3| |#p_$26|) ($closed |#s1_$6| |#p_$26|)) ($spans_the_same |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|)) ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|))  :weight  0 :pattern ( ($sequential |#s1_$6| |#s2_$3| |#p_$26| |#t_$10|)))) :named ax_354))
   (assert (! (forall( (|#s1_$7| $state) (|#s2_$4| $state) (|#dependant| $ptr) (|#this| $ptr))(!(= (or (or ($spans_the_same |#s1_$7| |#s2_$4| |#this| ($typ |#this|)) ($inv2_when_closed |#s1_$7| |#s2_$4| |#dependant| ($typ |#dependant|))) ($is_threadtype ($typ |#dependant|))) ($depends |#s1_$7| |#s2_$4| |#dependant| |#this|))  :weight  0 :pattern ( ($depends |#s1_$7| |#s2_$4| |#dependant| |#this|)))) :named ax_355))
   (assert (! (forall( (|#s1_$8| $state) (|#s2_$5| $state) (|#p_$27| $ptr) (|#t_$11| $ctype))(!(= (and (and (and (= ($read_version |#s2_$5| |#p_$27|) ($read_version |#s1_$8| |#p_$27|)) (= ($owns |#s2_$5| |#p_$27|) ($owns |#s1_$8| |#p_$27|))) (= ($ts |#s2_$5| |#p_$27|) ($ts |#s1_$8| |#p_$27|))) ($state_spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)) ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|))  :weight  0 :pattern ( ($spans_the_same |#s1_$8| |#s2_$5| |#p_$27| |#t_$11|)))) :named ax_356))
   (assert (! (forall( (|#s1_$9| $state) (|#s2_$6| $state) (|#p_$28| $ptr) (|#t_$12| $ctype))(!(= (and (and (= ($ts |#s2_$6| |#p_$28|) ($ts |#s1_$9| |#p_$28|)) (= ($read_version |#s2_$6| |#p_$28|) ($read_version |#s1_$9| |#p_$28|))) ($state_nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|)) ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|))  :weight  0 :pattern ( ($nonvolatile_spans_the_same |#s1_$9| |#s2_$6| |#p_$28| |#t_$12|)))) :named ax_357))
   (assert (! (forall( (|#s2_$0| $state) (|#s1_$1| $state))(= (forall( (|#p_$9| $ptr))(!($inv2_when_closed |#s1_$1| |#s2_$0| |#p_$9| ($typ |#p_$9|))  :pattern ( ($closed |#s1_$1| |#p_$9|)) :pattern ( ($closed |#s2_$0| |#p_$9|)))) ($forall_inv2_when_closed |#s1_$1| |#s2_$0|))) :named ax_358))
   (assert (! (forall( (|#s2_$14| $state) (|#r_$23| Int))(!(= (and (and (forall( (|Q#n$1^26.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^26.29#dt1_$0|))) (=> (and ($ptr_neq ($read_ptr |#s2_$14| ($dot ($ptr ^Node |Q#n$1^26.29#dt1_$0|) Node.next) ^Node) $null) ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($ptr ^Node |Q#n$1^26.29#dt1_$0|))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($read_ptr |#s2_$14| ($dot ($ptr ^Node |Q#n$1^26.29#dt1_$0|) Node.next) ^Node))) (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($ptr ^Node |Q#n$1^26.29#dt1_$0|))) 1))))) (and (and (= 0 ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($read_ptr |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.head) ^Node)))) (and (forall( (|Q#i$1^24.29#tc3_$0| Int))(!(=> ($in_range_u4 |Q#i$1^24.29#tc3_$0|) (=> (< |Q#i$1^24.29#tc3_$0| ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.length))) ($ptr_eq ($read_ptr |#s2_$14| ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.seq))) |Q#i$1^24.29#tc3_$0|)) Node.next) ^Node) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.seq))) (+ |Q#i$1^24.29#tc3_$0| 1))))))  :pattern ( (sk_hack ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.seq))) |Q#i$1^24.29#tc3_$0|))))))) (and (forall( (|Q#i$1^23.29#tc3_$0| Int))(=> ($in_range_u4 |Q#i$1^23.29#tc3_$0|) (=> (< |Q#i$1^23.29#tc3_$0| ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.length))) ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.seq))) |Q#i$1^23.29#tc3_$0|)))))) (and (forall( (|Q#n$1^22.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^22.29#dt1_$0|))) (=> ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($ptr ^Node |Q#n$1^22.29#dt1_$0|)) ($ptr_eq ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.seq))) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.idx))) ($ref ($ptr ^Node |Q#n$1^22.29#dt1_$0|))))) ($ptr ^Node |Q#n$1^22.29#dt1_$0|))))) (and (forall( (|Q#n$1^21.51#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^21.51#dt1_$0|))) (=> ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($ptr ^Node |Q#n$1^21.51#dt1_$0|)) (= (+ ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($read_ptr |#s2_$14| ($dot ($ptr ^Node |Q#n$1^21.51#dt1_$0|) Node.next) ^Node))) 1) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($ptr ^Node |Q#n$1^21.51#dt1_$0|))))))) (and (= 0 ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($ptr_cast $null ^Node)))) (and (forall( (|Q#n$1^19.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^19.29#dt1_$0|))) (=> ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($ptr ^Node |Q#n$1^19.29#dt1_$0|)) (forall( (|Q#e$1^20.5#tc2_$0| Int))(=> ($in_range_i4 |Q#e$1^20.5#tc2_$0|) (= (or (= |Q#e$1^20.5#tc2_$0| ($mem |#s2_$14| ($dot ($ptr ^Node |Q#n$1^19.29#dt1_$0|) Node.data))) ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.followers))) ($ref ($read_ptr |#s2_$14| ($dot ($ptr ^Node |Q#n$1^19.29#dt1_$0|) Node.next) ^Node))) |Q#e$1^20.5#tc2_$0|)) ($select.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.followers))) ($ref ($ptr ^Node |Q#n$1^19.29#dt1_$0|))) |Q#e$1^20.5#tc2_$0|))))))) (and (forall( (|Q#n$1^18.29#dt1_$0| Int))(=> ($in_range_phys_ptr ($ref ($ptr ^Node |Q#n$1^18.29#dt1_$0|))) (=> ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($ptr ^Node |Q#n$1^18.29#dt1_$0|)) (or ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($read_ptr |#s2_$14| ($dot ($ptr ^Node |Q#n$1^18.29#dt1_$0|) Node.next) ^Node)) (not ($ptr_neq ($read_ptr |#s2_$14| ($dot ($ptr ^Node |Q#n$1^18.29#dt1_$0|) Node.next) ^Node) $null)))))) (and (and ($typed |#s2_$14| ($ptr ^List |#r_$23|)) (=> ($ptr_neq ($read_ptr |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.head) ^Node) $null) ($keeps |#s2_$14| ($ptr ^List |#r_$23|) ($read_ptr |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.head) ^Node)))) ($eq.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.followers))) ($ref ($ptr_cast $null ^Node))) F@lambda@1)))))))))) (=> ($ptr_neq ($read_ptr |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.head) ^Node) $null) ($ptr_eq ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.seq))) 0)) ($read_ptr |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.head) ^Node))))) (= ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.length_acc))) ($ref ($read_ptr |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.head) ^Node))) ($mem |#s2_$14| ($dot ($ptr ^List |#r_$23|) List.length)))) ($inv_lab |#s2_$14| ($ptr ^List |#r_$23|) l@public))  :pattern ( ($inv_lab |#s2_$14| ($ptr ^List |#r_$23|) l@public)))) :named ax_359))
   (assert (! (forall( (|#s2_$9| $state) (|#r_$15| Int))(!(= (and ($typed |#s2_$9| ($ptr ^Node |#r_$15|)) ($set_eq ($owns |#s2_$9| ($ptr ^Node |#r_$15|)) $set_empty)) ($inv_lab |#s2_$9| ($ptr ^Node |#r_$15|) l@public))  :pattern ( ($inv_lab |#s2_$9| ($ptr ^Node |#r_$15|) l@public)))) :named ax_360))
   (assert (! (forall( (|#t_$0| $ctype) (|#p_$2| $ptr) (|S_$12| $state))(= (and (and (and (and (= ($owner |S_$12| |#p_$2|) $me) ($closed |S_$12| |#p_$2|)) ($typed2 |S_$12| |#p_$2| |#t_$0|)) (not (= $kind_primitive ($kind_of |#t_$0|)))) ($is_non_primitive |#t_$0|)) ($wrapped |S_$12| |#p_$2| |#t_$0|))) :named ax_361))
   (assert (! (forall( (|#t_$1| $ctype) (|#p_$3| $ptr) (|S_$16| $state))(= ($typed2 |S_$16| |#p_$3| |#t_$1|) (and ($typed |S_$16| |#p_$3|) ($is |#p_$3| |#t_$1|)))) :named ax_362))
   (assert (! (forall( (|#t_$2| $ctype) (|#p_$4| $ptr) (|S_$17| $state))(= (and (=> ($typed2 |S_$17| |#p_$4| |#t_$2|) ($in_range_phys_ptr ($ref |#p_$4|))) ($typed2 |S_$17| |#p_$4| |#t_$2|)) ($typed2_phys |S_$17| |#p_$4| |#t_$2|))) :named ax_363))
   (assert (! (forall( (|#t_$3| $ctype) (|#p_$5| $ptr) (|S_$18| $state))(= (and (=> ($typed2 |S_$18| |#p_$5| |#t_$3|) ($in_range_spec_ptr ($ref |#p_$5|))) ($typed2 |S_$18| |#p_$5| |#t_$3|)) ($typed2_spec |S_$18| |#p_$5| |#t_$3|))) :named ax_364))
   (assert (! (forall( (|#t_$4| $ctype) (|#p_$6| $ptr) (|S_$21| $state))(= ($thread_local2 |S_$21| |#p_$6| |#t_$4|) (and ($thread_local |S_$21| |#p_$6|) ($is |#p_$6| |#t_$4|)))) :named ax_365))
   (assert (! (forall( (|#t_$5| $ctype) (|#b| Int))(!(= ($typ ($ptr |#t_$5| |#b|)) |#t_$5|)  :weight  0)) :named ax_366))
   (assert (! (forall( (|#t_$6| $ctype) (|#b_$0| Int))(!(= ($ref ($ptr |#t_$6| |#b_$0|)) |#b_$0|)  :weight  0)) :named ax_367))
   (assert (! (forall( (|#t| $ctype) (|#p| $ptr))(= ($ptr_cast |#p| |#t|) ($ptr |#t| ($ref |#p|)))) :named ax_368))
   (assert (! (forall( (|#x_$0| $map_t..$ptr_to..^^void.^^bool))(= ($int_to_map_t..ptr_to..^^void.^^bool ($map_t..ptr_to..^^void.^^bool_to_int |#x_$0|)) |#x_$0|)) :named ax_369))
   (assert (! (forall( (|#x_$1| $map_t..^^i4.^^bool))(= ($int_to_map_t..^^i4.^^bool ($map_t..^^i4.^^bool_to_int |#x_$1|)) |#x_$1|)) :named ax_370))
   (assert (! (forall( (|#x_$2| $map_t..^^u4.$ptr_to..^Node))(= ($int_to_map_t..^^u4.ptr_to..^Node ($map_t..^^u4.ptr_to..^Node_to_int |#x_$2|)) |#x_$2|)) :named ax_371))
   (assert (! (forall( (|#x_$3| $map_t..$ptr_to..^Node.^^u4))(= ($int_to_map_t..ptr_to..^Node.^^u4 ($map_t..ptr_to..^Node.^^u4_to_int |#x_$3|)) |#x_$3|)) :named ax_372))
   (assert (! (forall( (|#x_$4| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool))(= ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($map_t..ptr_to..^Node.map_t..^^i4.^^bool_to_int |#x_$4|)) |#x_$4|)) :named ax_373))
   (assert (! (forall( (|#x| $ptr) (|#s2_$1| $state) (|#s1_$2| $state))(= (forall( (|#p_$15| $ptr))(!(or (or (and (or (not ($typed |#s2_$1| |#p_$15|)) (not ($typed |#s1_$2| |#p_$15|))) ($in_full_extent_of |#p_$15| |#x|)) (= |#x| |#p_$15|)) ($mem_eq |#s1_$2| |#s2_$1| |#p_$15|))  :pattern ( ($mem |#s2_$1| |#p_$15|)))) ($union_havoced |#s1_$2| |#s2_$1| |#x|))) :named ax_374))
   (assert (! (forall( (|a_$0| $ptr) (|i_$18| Int))(!(= ($right_split |a_$0| |i_$18|) ($as_array ($idx ($ptr ($element_type ($typ |a_$0|)) ($ref |a_$0|)) |i_$18| ($element_type ($typ |a_$0|))) ($element_type ($typ |a_$0|)) (- ($array_length ($typ |a_$0|)) |i_$18|)))  :pattern ( ($right_split |a_$0| |i_$18|)))) :named ax_375))
   (assert (! (forall( (|a| $ptr) (|i_$17| Int))(!(= ($left_split |a| |i_$17|) ($as_array |a| ($element_type ($typ |a|)) |i_$17|))  :pattern ( ($left_split |a| |i_$17|)))) :named ax_376))
   (assert (! (forall( (|a1| $ptr) (|a2| $ptr))(!(= ($ptr ($array ($element_type ($typ |a1|)) (+ ($array_length ($typ |a1|)) ($array_length ($typ |a2|)))) ($ref |a1|)) ($joined_array |a1| |a2|))  :pattern ( ($joined_array |a1| |a2|)))) :named ax_377))
   (assert (! (forall( (|bits_$0| Int) (|v_$11| Int))(!(and (=> ($in_range_sbits |bits_$0| |v_$11|) (= |v_$11| ($unchecked_sbits |bits_$0| |v_$11|))) ($in_range_sbits |bits_$0| ($unchecked_sbits |bits_$0| |v_$11|)))  :pattern ( ($unchecked_sbits |bits_$0| |v_$11|)))) :named ax_378))
   (assert (! (forall( (|bits_$1| Int) (|v_$12| Int))(!(= ($in_range_sbits |bits_$1| |v_$12|) ($in_range (- 0 ($_pow2 (- |bits_$1| 1))) |v_$12| (- ($_pow2 (- |bits_$1| 1)) 1)))  :pattern ( ($in_range_sbits |bits_$1| |v_$12|)))) :named ax_379))
   (assert (! (forall( (|bits_$2| Int) (|v_$13| Int))(!(and (=> ($in_range_ubits |bits_$2| |v_$13|) (= |v_$13| ($unchecked_ubits |bits_$2| |v_$13|))) ($in_range_ubits |bits_$2| ($unchecked_ubits |bits_$2| |v_$13|)))  :pattern ( ($unchecked_ubits |bits_$2| |v_$13|)))) :named ax_380))
   (assert (! (forall( (|bits| Int) (|v_$10| Int))(!(= ($in_range_ubits |bits| |v_$10|) ($in_range 0 |v_$10| (- ($_pow2 |bits|) 1)))  :pattern ( ($in_range_ubits |bits| |v_$10|)))) :named ax_381))
   (assert (! (forall( (|c_$1| $ptrclub) (|p_$53| $ptr))(= (MapRead$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$1|) |p_$53|) ($ptrclub.isMember |p_$53| |c_$1|))) :named ax_382))
   (assert (! (forall( (|c_$14| $@Map@@$ptr@To@Bool@@) (|l_$9| $@Map@@$ptr@To@Bool@@))(!(= |c_$14| ($ptrclub.members ($ptrclub.construct |c_$14| |l_$9|)))  :weight  0)) :named ax_383))
   (assert (! (forall( (|c_$15| $@Map@@$ptr@To@Bool@@) (|l_$10| $@Map@@$ptr@To@Bool@@))(!(= |l_$10| ($ptrclub.bound ($ptrclub.construct |c_$15| |l_$10|)))  :weight  0)) :named ax_384))
   (assert (! (forall( (|c_$16| $ptrclub) (|p_$171| $ptr))(!(= (MapWrite$$@Map@@$ptr@To@Bool@@$ ($ptrclub.members |c_$16|) |p_$171| true) ($ptrclub.members ($ptrclub.addMember |p_$171| |c_$16|)))  :weight  0)) :named ax_385))
   (assert (! (forall( (|c_$17| $ptrclub) (|p_$172| $ptr))(!(= ($ptrclub.bound |c_$17|) ($ptrclub.bound ($ptrclub.addMember |p_$172| |c_$17|)))  :weight  0)) :named ax_386))
   (assert (! (forall( (|c1| $ptr) (|c2| $ptr))(!(=> (and (forall( (|S_$133| $state))(=> ($valid_claim |S_$133| |c1|) ($closed |S_$133| |c2|))) (and ($is |c2| ^^claim) ($is |c1| ^^claim))) ($claims_claim |c1| |c2|))  :pattern ( ($claims_claim |c1| |c2|)))) :named ax_387))
   (assert (! (forall( (|e_$0| $ptr) (|S_$45| $ptrset))(= ($set_remove_element |S_$45| |e_$0|) ($set_difference |S_$45| ($set_singleton |e_$0|)))) :named ax_388))
   (assert (! (forall( (|e| $ptr) (|S_$44| $ptrset))(= ($set_union |S_$44| ($set_singleton |e|)) ($set_add_element |S_$44| |e|))) :named ax_389))
   (assert (! (forall( (|emb_$1| $ptr) (|p_$48| $ptr) (|S_$52| $state))(= (and (and (= |emb_$1| ($emb |S_$52| |p_$48|)) (not ($is_volatile |S_$52| |p_$48|))) ($typed |S_$52| |p_$48|)) ($array_elt_emb |S_$52| |p_$48| |emb_$1|))) :named ax_390))
   (assert (! (forall( (|emb| $ptr) (|sz_$3| Int) (|T_$2| $ctype) (|p_$43| $ptr) (|S_$48| $state))(= (and (forall( (|i_$3| Int))(!(=> (and (< |i_$3| |sz_$3|) (<= 0 |i_$3|)) (= |emb| ($emb |S_$48| ($idx |p_$43| |i_$3| |T_$2|))))  :pattern ( ($ts |S_$48| ($idx |p_$43| |i_$3| |T_$2|))))) ($is_array_vol_or_nonvol |S_$48| |p_$43| |T_$2| |sz_$3| false)) ($is_array_emb |S_$48| |p_$43| |T_$2| |sz_$3| |emb|))) :named ax_391))
   (assert (! (forall( (|f_$1| $field) (|p_$25| $ptr) (|S_$26| $state))(= ($fetch_vol_field |S_$26| |p_$25| |f_$1|) ($fetch_from_vv ($read_vol_version |S_$26| |p_$25|) ($dot |p_$25| |f_$1|)))) :named ax_392))
   (assert (! (forall( (|f_$11| $pure_function))(= (< ($pure_post_level |f_$11|) $current_pure_post_level) ($can_use_pure_post_axiom_of |f_$11|))) :named ax_393))
   (assert (! (forall( (|f_$15| $field) (|t_$18| $ctype))(!(= 0 ($mem ($vs_state $struct_zero) ($dot ($vs_base $struct_zero |t_$18|) |f_$15|)))  :pattern ( ($mem ($vs_state $struct_zero) ($dot ($vs_base $struct_zero |t_$18|) |f_$15|))))) :named ax_394))
   (assert (! (forall( (|f_$17| $field))(= 0 ($rec_fetch $rec_zero |f_$17|))) :named ax_395))
   (assert (! (forall( (|f_$4| $field) (|u_$0| $ptr) (|S_$42| $state))(= (= |f_$4| ($active_option |S_$42| |u_$0|)) ($union_active |S_$42| |u_$0| |f_$4|))) :named ax_396))
   (assert (! (forall( (|f_$9| $pure_function))(= (< ($frame_level |f_$9|) $current_frame_level) ($can_use_frame_axiom_of |f_$9|))) :named ax_397))
   (assert (! (forall( (|fd_$0| $flowdata) (|l_$6| $@Map@@$ptr@To@Bool@@))(!(= |l_$6| ($select.flow.meta ($store.flow.meta |fd_$0| |l_$6|)))  :weight  0)) :named ax_398))
   (assert (! (forall( (|fd_$1| $flowdata) (|l_$7| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.label |fd_$1|) ($select.flow.label ($store.flow.meta |fd_$1| |l_$7|)))  :weight  0)) :named ax_399))
   (assert (! (forall( (|fd_$2| $flowdata) (|l_$8| $@Map@@$ptr@To@Bool@@))(!(= ($select.flow.meta |fd_$2|) ($select.flow.meta ($store.flow.label |fd_$2| |l_$8|)))  :weight  0)) :named ax_400))
   (assert (! (forall( (|fd| $flowdata) (|l_$5| $@Map@@$ptr@To@Bool@@))(!(= |l_$5| ($select.flow.label ($store.flow.label |fd| |l_$5|)))  :weight  0)) :named ax_401))
   (assert (! (forall( (|fld| $field) (|off| Int))(!(and (= |off| ($array_path_2 ($array_path |fld| |off|))) (and (= |fld| ($array_path_1 ($array_path |fld| |off|))) (not ($is_base_field ($array_path |fld| |off|)))))  :weight  0 :pattern ( ($array_path |fld| |off|)))) :named ax_402))
   (assert (! (forall( (|from_$1| Int) (|to_$1| Int) (|xs_$0| Int))(!(=> (and (<= |to_$1| |xs_$0|) (and (< |from_$1| |to_$1|) (<= 0 |from_$1|))) (= 0 ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0)))  :pattern ( ($bv_update 0 |xs_$0| |from_$1| |to_$1| 0)))) :named ax_403))
   (assert (! (forall( (|from_$10| Int) (|to_$10| Int) (|val_$5| Int) (|xs_$9| Int))(!(=> (and (<= 0 |val_$5|) (and (<= |to_$10| |xs_$9|) (and (< |from_$10| |to_$10|) (<= 0 |from_$10|)))) (= (mod (div |val_$5| ($_pow2 |from_$10|)) ($_pow2 (- |to_$10| |from_$10|))) ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|)))  :pattern ( ($bv_extract_unsigned |val_$5| |xs_$9| |from_$10| |to_$10|)))) :named ax_404))
   (assert (! (forall( (|from_$11| Int) (|to_$11| Int) (|val_$6| Int) (|xs_$10| Int))(!(=> (and (and (<= 0 |val_$6|) (and (<= |to_$11| |xs_$10|) (and (< |from_$11| |to_$11|) (<= 0 |from_$11|)))) (< (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|))) ($_pow2 (- (- |to_$11| |from_$11|) 1)))) (= (mod (div |val_$6| ($_pow2 |from_$11|)) ($_pow2 (- |to_$11| |from_$11|))) ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|)))  :pattern ( ($bv_extract_signed |val_$6| |xs_$10| |from_$11| |to_$11|)))) :named ax_405))
   (assert (! (forall( (|from_$12| Int) (|to_$12| Int) (|val_$7| Int) (|xs_$11| Int))(!(=> (and (and (<= 0 |val_$7|) (and (<= |to_$12| |xs_$11|) (and (< |from_$12| |to_$12|) (<= 0 |from_$12|)))) (>= (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))) ($_pow2 (- (- |to_$12| |from_$12|) 1)))) (= ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|) (- ($_pow2 (- (- |to_$12| |from_$12|) 1)) (mod (div |val_$7| ($_pow2 |from_$12|)) ($_pow2 (- |to_$12| |from_$12|))))))  :pattern ( ($bv_extract_signed |val_$7| |xs_$11| |from_$12| |to_$12|)))) :named ax_406))
   (assert (! (forall( (|from_$2| Int) (|to_$2| Int) (|val_$1| Int) (|x_$34| Int) (|xs_$1| Int))(!(=> (and (<= |to_$2| |xs_$1|) (and (< |from_$2| |to_$2|) (<= 0 |from_$2|))) (=> (and (< |val_$1| ($_pow2 (- (- |to_$2| |from_$2|) 1))) (<= (- 0 ($_pow2 (- (- |to_$2| |from_$2|) 1))) |val_$1|)) (= |val_$1| ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|))))  :pattern ( ($bv_extract_signed ($bv_update |x_$34| |xs_$1| |from_$2| |to_$2| |val_$1|) |xs_$1| |from_$2| |to_$2|)))) :named ax_407))
   (assert (! (forall( (|from_$3| Int) (|to_$3| Int) (|val_$2| Int) (|x_$35| Int) (|xs_$2| Int))(!(=> (and (<= |to_$3| |xs_$2|) (and (< |from_$3| |to_$3|) (<= 0 |from_$3|))) (=> (and (< |val_$2| ($_pow2 (- |to_$3| |from_$3|))) (<= 0 |val_$2|)) (= |val_$2| ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$35| |xs_$2| |from_$3| |to_$3| |val_$2|) |xs_$2| |from_$3| |to_$3|)))) :named ax_408))
   (assert (! (forall( (|from_$4| Int) (|to_$4| Int) (|x_$36| Int) (|xs_$3| Int))(!(=> (and (<= |to_$4| |xs_$3|) (and (< |from_$4| |to_$4|) (<= 0 |from_$4|))) ($in_range (- 0 ($_pow2 (- (- |to_$4| |from_$4|) 1))) ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|) (- ($_pow2 (- (- |to_$4| |from_$4|) 1)) 1)))  :pattern ( ($bv_extract_signed |x_$36| |xs_$3| |from_$4| |to_$4|)))) :named ax_409))
   (assert (! (forall( (|from_$5| Int) (|to_$5| Int) (|x_$37| Int) (|xs_$4| Int))(!(=> (and (<= |to_$5| |xs_$4|) (and (< |from_$5| |to_$5|) (<= 0 |from_$5|))) ($in_range 0 ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|) (- ($_pow2 (- |to_$5| |from_$5|)) 1)))  :pattern ( ($bv_extract_unsigned |x_$37| |xs_$4| |from_$5| |to_$5|)))) :named ax_410))
   (assert (! (forall( (|from_$6| Int) (|to_$6| Int) (|val_$3| Int) (|x_$38| Int) (|xs_$5| Int) (|from2| Int) (|to2| Int))(!(=> (and (<= |to_$6| |xs_$5|) (and (< |from_$6| |to_$6|) (<= 0 |from_$6|))) (=> (and (<= |to2| |xs_$5|) (and (< |from2| |to2|) (<= 0 |from2|))) (=> (or (<= |to2| |from_$6|) (<= |to_$6| |from2|)) (= ($bv_extract_signed |x_$38| |xs_$5| |from2| |to2|) ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|)))))  :pattern ( ($bv_extract_signed ($bv_update |x_$38| |xs_$5| |from_$6| |to_$6| |val_$3|) |xs_$5| |from2| |to2|)))) :named ax_411))
   (assert (! (forall( (|from_$7| Int) (|to_$7| Int) (|val_$4| Int) (|x_$39| Int) (|xs_$6| Int) (|from2_$0| Int) (|to2_$0| Int))(!(=> (and (<= |to_$7| |xs_$6|) (and (< |from_$7| |to_$7|) (<= 0 |from_$7|))) (=> (and (<= |to2_$0| |xs_$6|) (and (< |from2_$0| |to2_$0|) (<= 0 |from2_$0|))) (=> (or (<= |to2_$0| |from_$7|) (<= |to_$7| |from2_$0|)) (= ($bv_extract_unsigned |x_$39| |xs_$6| |from2_$0| |to2_$0|) ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|)))))  :pattern ( ($bv_extract_unsigned ($bv_update |x_$39| |xs_$6| |from_$7| |to_$7| |val_$4|) |xs_$6| |from2_$0| |to2_$0|)))) :named ax_412))
   (assert (! (forall( (|from_$8| Int) (|to_$8| Int) (|xs_$7| Int))(!(=> (and (<= |to_$8| |xs_$7|) (and (< |from_$8| |to_$8|) (<= 0 |from_$8|))) (= 0 ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|)))  :pattern ( ($bv_extract_signed 0 |xs_$7| |from_$8| |to_$8|)))) :named ax_413))
   (assert (! (forall( (|from_$9| Int) (|to_$9| Int) (|xs_$8| Int))(!(=> (and (<= |to_$9| |xs_$8|) (and (< |from_$9| |to_$9|) (<= 0 |from_$9|))) (= 0 ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|)))  :pattern ( ($bv_extract_unsigned 0 |xs_$8| |from_$9| |to_$9|)))) :named ax_414))
   (assert (! (forall( (|i_$25| Int) (|j_$0| Int))(!(=> (and (<= 0 |i_$25|) (< 0 |j_$0|)) (<= (div |i_$25| |j_$0|) |i_$25|))  :pattern ( (div |i_$25| |j_$0|)))) :named ax_415))
   (assert (! (forall( (|i_$26| Int) (|j_$1| Int))(!(=> (and (> |j_$1| 0) (> |i_$26| 0)) (and (< (- |i_$26| |j_$1|) (* (div |i_$26| |j_$1|) |j_$1|)) (<= (* (div |i_$26| |j_$1|) |j_$1|) |i_$26|)))  :pattern ( (div |i_$26| |j_$1|)))) :named ax_416))
   (assert (! (forall( (|i_$27| Int))(!(=> (not (= |i_$27| 0)) (= (div |i_$27| |i_$27|) 1))  :pattern ( (div |i_$27| |i_$27|)))) :named ax_417))
   (assert (! (forall( (|i_$28| Int))(!(=> (not (= |i_$28| 0)) (= (div 0 |i_$28|) 0))  :pattern ( (div 0 |i_$28|)))) :named ax_418))
   (assert (! (forall( (|id_$0| Int) (|length| Int))(!($is ($get_string_literal |id_$0| |length|) ^^u1)  :pattern ( ($get_string_literal |id_$0| |length|)))) :named ax_419))
   (assert (! (forall( (|id_$1| Int) (|length_$0| Int) (|S_$129| $state))(!(=> ($good_state |S_$129|) (and ($typed |S_$129| ($get_string_literal |id_$1| |length_$0|)) ($is_thread_local_array |S_$129| ($get_string_literal |id_$1| |length_$0|) ^^u1 |length_$0|)))  :pattern ( ($typed |S_$129| ($get_string_literal |id_$1| |length_$0|))) :pattern ( ($is_array |S_$129| ($get_string_literal |id_$1| |length_$0|) ^^u1 |length_$0|)))) :named ax_420))
   (assert (! (forall( (|id| $token) (|S_$80| $state))(!(=> ($good_state_ext |id| |S_$80|) ($good_state |S_$80|))  :pattern ( ($good_state_ext |id| |S_$80|)))) :named ax_421))
   (assert (! (forall( (|isvol| Bool) (|f_$5| $field) (|emb_$0| $ptr) (|sz_$4| Int) (|T_$3| $ctype) (|p_$44| $ptr) (|S_$49| $state))(= (and (forall( (|i_$4| Int))(!(=> (and (< |i_$4| |sz_$4|) (<= 0 |i_$4|)) (and (= |emb_$0| ($emb |S_$49| ($idx |p_$44| |i_$4| |T_$3|))) (= ($path |S_$49| ($idx |p_$44| |i_$4| |T_$3|)) ($array_path |f_$5| |i_$4|))))  :pattern ( ($ts |S_$49| ($idx |p_$44| |i_$4| |T_$3|))) :pattern ( ($mem |S_$49| ($idx |p_$44| |i_$4| |T_$3|))))) ($is_array_vol_or_nonvol |S_$49| |p_$44| |T_$3| |sz_$4| |isvol|)) ($is_array_emb_path |S_$49| |p_$44| |T_$3| |sz_$4| |emb_$0| |f_$5| |isvol|))) :named ax_422))
   (assert (! (forall( (|isvolatile| Bool) (|tp| $ctype) (|f_$0| $field) (|p_$8| $ptr) (|S_$2| $state))(= (and (= |isvolatile| ($is_volatile |S_$2| ($dot |p_$8| |f_$0|))) (and (= |f_$0| ($path |S_$2| ($dot |p_$8| |f_$0|))) (and (= |p_$8| ($emb |S_$2| ($dot |p_$8| |f_$0|))) ($typed2 |S_$2| ($dot |p_$8| |f_$0|) |tp|)))) ($field_properties |S_$2| |p_$8| |f_$0| |tp| |isvolatile|))) :named ax_423))
   (assert (! (forall( (|l1_$3| $@Map@@$ptr@To@Bool@@) (|l2_$3| $@Map@@$ptr@To@Bool@@) (|p_$161| $ptr))(= ($seclbl.meet (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$3| |p_$161|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$3| |p_$161|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($lblset.meet |l1_$3| |l2_$3|) |p_$161|))) :named ax_424))
   (assert (! (forall( (|l1_$4| $@Map@@$ptr@To@Bool@@) (|l2_$4| $@Map@@$ptr@To@Bool@@) (|p_$162| $ptr))(= ($seclbl.join (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$4| |p_$162|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$4| |p_$162|)) (MapRead$$@Map@@$ptr@To@Bool@@$ ($lblset.join |l1_$4| |l2_$4|) |p_$162|))) :named ax_425))
   (assert (! (forall( (|l2_$0| Bool) (|l1_$0| Bool))(= (and |l2_$0| |l1_$0|) ($seclbl.meet |l1_$0| |l2_$0|))) :named ax_426))
   (assert (! (forall( (|l2_$1| Bool) (|l1_$1| Bool))(= (or |l2_$1| |l1_$1|) ($seclbl.join |l1_$1| |l2_$1|))) :named ax_427))
   (assert (! (forall( (|l2_$2| $@Map@@$ptr@To@Bool@@) (|l1_$2| $@Map@@$ptr@To@Bool@@))(= (forall( (|p_$52| $ptr))($seclbl.leq (MapRead$$@Map@@$ptr@To@Bool@@$ |l1_$2| |p_$52|) (MapRead$$@Map@@$ptr@To@Bool@@$ |l2_$2| |p_$52|))) ($lblset.leq |l1_$2| |l2_$2|))) :named ax_428))
   (assert (! (forall( (|l2| Bool) (|l1| Bool))(= (=> |l1| |l2|) ($seclbl.leq |l1| |l2|))) :named ax_429))
   (assert (! (forall( (|M_$0| $memory_t) (|p_$55| $ptr) (|q_$2| $ptr) (|v_$1| Int))(!(or (= |q_$2| |p_$55|) (= ($select.mem |M_$0| |q_$2|) ($select.mem ($store.mem |M_$0| |p_$55| |v_$1|) |q_$2|)))  :weight  0)) :named ax_430))
   (assert (! (forall( (|M_$1| $memory_t) (|p_$56| $ptr) (|q_$3| $ptr) (|sz_$12| Int) (|v_$2| Int))(!(or (and (and (= ($typ |q_$3|) ($typ |p_$56|)) (<= ($ref |q_$3|) ($ref |p_$56|))) (< ($ref |p_$56|) ($ref ($idx |q_$3| |sz_$12| ($typ |q_$3|))))) (= ($select_range.mem |M_$1| |q_$3| |sz_$12|) ($select_range.mem ($store.mem |M_$1| |p_$56| |v_$2|) |q_$3| |sz_$12|)))  :weight  0)) :named ax_431))
   (assert (! (forall( (|M_$10| $memory_t) (|p_$173| $ptr) (|q_$25| $ptr) (|v_$16| Int))(!(= ($select.flow.data |M_$10| |p_$173|) ($select.flow.data ($store.mem |M_$10| |q_$25| |v_$16|) |p_$173|))  :weight  0)) :named ax_432))
   (assert (! (forall( (|M_$11| $memory_t) (|p_$174| $ptr) (|q_$26| $ptr) (|fd_$5| $flowdata))(!(= ($select.mem |M_$11| |p_$174|) ($select.mem ($store.flow.data |M_$11| |q_$26| |fd_$5|) |p_$174|))  :weight  0)) :named ax_433))
   (assert (! (forall( (|M_$12| $map_t..^^i4.^^bool) (|p_$175| Int) (|v_$17| Bool))(=> ($in_range_t ^^i4 |p_$175|) (= |v_$17| ($select.$map_t..^^i4.^^bool ($store.$map_t..^^i4.^^bool |M_$12| |p_$175| |v_$17|) |p_$175|)))) :named ax_434))
   (assert (! (forall( (|M_$13| $map_t..^^i4.^^bool) (|p_$176| Int) (|v_$18| Bool) (|q_$27| Int))(=> (not (= |q_$27| |p_$176|)) (= ($select.$map_t..^^i4.^^bool |M_$13| |p_$176|) ($select.$map_t..^^i4.^^bool ($store.$map_t..^^i4.^^bool |M_$13| |q_$27| |v_$18|) |p_$176|)))) :named ax_435))
   (assert (! (forall( (|M_$14| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|p_$179| Int) (|v_$19| $map_t..^^i4.^^bool))(= |v_$19| ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($store.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M_$14| |p_$179| |v_$19|) |p_$179|))) :named ax_436))
   (assert (! (forall( (|M_$15| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|p_$180| Int) (|v_$20| $map_t..^^i4.^^bool) (|q_$28| Int))(=> (not (= |q_$28| |p_$180|)) (= ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M_$15| |p_$180|) ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($store.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M_$15| |q_$28| |v_$20|) |p_$180|)))) :named ax_437))
   (assert (! (forall( (|M_$16| $map_t..$ptr_to..^Node.^^u4) (|p_$183| Int) (|v_$21| Int))(= ($unchecked ^^u4 |v_$21|) ($select.$map_t..$ptr_to..^Node.^^u4 ($store.$map_t..$ptr_to..^Node.^^u4 |M_$16| |p_$183| |v_$21|) |p_$183|))) :named ax_438))
   (assert (! (forall( (|M_$17| $map_t..$ptr_to..^Node.^^u4) (|p_$184| Int) (|v_$22| Int) (|q_$29| Int))(=> (not (= |q_$29| |p_$184|)) (= ($select.$map_t..$ptr_to..^Node.^^u4 |M_$17| |p_$184|) ($select.$map_t..$ptr_to..^Node.^^u4 ($store.$map_t..$ptr_to..^Node.^^u4 |M_$17| |q_$29| |v_$22|) |p_$184|)))) :named ax_439))
   (assert (! (forall( (|M_$18| $map_t..$ptr_to..^Node.^^u4) (|p_$187| Int))($in_range_t ^^u4 ($select.$map_t..$ptr_to..^Node.^^u4 |M_$18| |p_$187|))) :named ax_440))
   (assert (! (forall( (|M_$19| $map_t..^^u4.$ptr_to..^Node) (|p_$188| Int) (|v_$23| Int))(=> ($in_range_t ^^u4 |p_$188|) (= |v_$23| ($select.$map_t..^^u4.$ptr_to..^Node ($store.$map_t..^^u4.$ptr_to..^Node |M_$19| |p_$188| |v_$23|) |p_$188|)))) :named ax_441))
   (assert (! (forall( (|M_$2| $typemap_t) (|p_$57| $ptr) (|v_$3| $type_state))(!(= |v_$3| ($select.tm ($store.tm |M_$2| |p_$57| |v_$3|) |p_$57|))  :weight  0)) :named ax_442))
   (assert (! (forall( (|M_$20| $map_t..^^u4.$ptr_to..^Node) (|p_$189| Int) (|v_$24| Int) (|q_$30| Int))(=> (not (= |q_$30| |p_$189|)) (= ($select.$map_t..^^u4.$ptr_to..^Node |M_$20| |p_$189|) ($select.$map_t..^^u4.$ptr_to..^Node ($store.$map_t..^^u4.$ptr_to..^Node |M_$20| |q_$30| |v_$24|) |p_$189|)))) :named ax_443))
   (assert (! (forall( (|M_$21| $map_t..^^u4.$ptr_to..^Node) (|p_$192| Int))($in_range_phys_ptr ($select.$map_t..^^u4.$ptr_to..^Node |M_$21| |p_$192|))) :named ax_444))
   (assert (! (forall( (|M_$3| $typemap_t) (|p_$58| $ptr) (|q_$4| $ptr) (|v_$4| $type_state))(!(or (= |q_$4| |p_$58|) (= ($select.tm |M_$3| |q_$4|) ($select.tm ($store.tm |M_$3| |p_$58| |v_$4|) |q_$4|)))  :weight  0)) :named ax_445))
   (assert (! (forall( (|M_$4| $statusmap_t) (|p_$59| $ptr) (|v_$5| $status))(!(= |v_$5| ($select.sm ($store.sm |M_$4| |p_$59| |v_$5|) |p_$59|))  :weight  0)) :named ax_446))
   (assert (! (forall( (|M_$5| $statusmap_t) (|p_$60| $ptr) (|q_$5| $ptr) (|v_$6| $status))(!(or (= |q_$5| |p_$60|) (= ($select.sm |M_$5| |q_$5|) ($select.sm ($store.sm |M_$5| |p_$60| |v_$6|) |q_$5|)))  :weight  0)) :named ax_447))
   (assert (! (forall( (|M_$6| $memory_t) (|p_$163| $ptr) (|q_$22| $ptr) (|fd_$3| $flowdata))(!(=> ($in_full_extent_of |q_$22| |p_$163|) (= |fd_$3| ($select.flow.data ($store.flow.data |M_$6| |p_$163| |fd_$3|) |q_$22|)))  :weight  0)) :named ax_448))
   (assert (! (forall( (|M_$7| $memory_t) (|p_$164| $ptr) (|q_$23| $ptr) (|fd_$4| $flowdata))(!(or (= ($select.flow.data |M_$7| |q_$23|) ($select.flow.data ($store.flow.data |M_$7| |p_$164| |fd_$4|) |q_$23|)) ($in_full_extent_of |q_$23| |p_$164|))  :weight  0)) :named ax_449))
   (assert (! (forall( (|M_$8| $map_t..$ptr_to..^^void.^^bool) (|p_$165| $ptr) (|v_$14| Bool))(!(= |v_$14| ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$8| |p_$165| |v_$14|) |p_$165|))  :weight  0)) :named ax_450))
   (assert (! (forall( (|M_$9| $map_t..$ptr_to..^^void.^^bool) (|p_$166| $ptr) (|v_$15| Bool) (|q_$24| $ptr))(!(=> (not (= |q_$24| |p_$166|)) (= ($select.$map_t..$ptr_to..^^void.^^bool |M_$9| |p_$166|) ($select.$map_t..$ptr_to..^^void.^^bool ($store.$map_t..$ptr_to..^^void.^^bool |M_$9| |q_$24| |v_$15|) |p_$166|)))  :weight  0)) :named ax_451))
   (assert (! (forall( (|M| $memory_t) (|p_$54| $ptr) (|v_$0| Int))(!(= |v_$0| ($select.mem ($store.mem |M| |p_$54| |v_$0|) |p_$54|))  :weight  0)) :named ax_452))
   (assert (! (forall( (|M1_$10| $map_t..^^u4.$ptr_to..^Node) (|M2_$10| $map_t..^^u4.$ptr_to..^Node))(!(=> (forall( (|p_$190| Int))(=> ($in_range_t ^^u4 |p_$190|) (= ($select.$map_t..^^u4.$ptr_to..^Node |M2_$10| |p_$190|) ($select.$map_t..^^u4.$ptr_to..^Node |M1_$10| |p_$190|)))) ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$10| |M2_$10|))  :pattern ( ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$10| |M2_$10|)))) :named ax_453))
   (assert (! (forall( (|M1_$11| $map_t..^^u4.$ptr_to..^Node) (|M2_$11| $map_t..^^u4.$ptr_to..^Node))(!(=> ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$11| |M2_$11|) (= |M2_$11| |M1_$11|))  :pattern ( ($eq.$map_t..^^u4.$ptr_to..^Node |M1_$11| |M2_$11|)))) :named ax_454))
   (assert (! (forall( (|M1_$2| $map_t..$ptr_to..^^void.^^bool) (|M2_$2| $map_t..$ptr_to..^^void.^^bool))(!(=> (forall( (|p_$167| $ptr))(!(= ($select.$map_t..$ptr_to..^^void.^^bool |M2_$2| |p_$167|) ($select.$map_t..$ptr_to..^^void.^^bool |M1_$2| |p_$167|))  :weight  0)) ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$2| |M2_$2|)))) :named ax_455))
   (assert (! (forall( (|M1_$3| $map_t..$ptr_to..^^void.^^bool) (|M2_$3| $map_t..$ptr_to..^^void.^^bool))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|) (= |M2_$3| |M1_$3|))  :weight  0 :pattern ( ($eq.$map_t..$ptr_to..^^void.^^bool |M1_$3| |M2_$3|)))) :named ax_456))
   (assert (! (forall( (|M1_$4| $map_t..^^i4.^^bool) (|M2_$4| $map_t..^^i4.^^bool))(!(=> (forall( (|p_$177| Int))(=> ($in_range_t ^^i4 |p_$177|) (= ($select.$map_t..^^i4.^^bool |M2_$4| |p_$177|) ($select.$map_t..^^i4.^^bool |M1_$4| |p_$177|)))) ($eq.$map_t..^^i4.^^bool |M1_$4| |M2_$4|))  :pattern ( ($eq.$map_t..^^i4.^^bool |M1_$4| |M2_$4|)))) :named ax_457))
   (assert (! (forall( (|M1_$5| $map_t..^^i4.^^bool) (|M2_$5| $map_t..^^i4.^^bool))(!(=> ($eq.$map_t..^^i4.^^bool |M1_$5| |M2_$5|) (= |M2_$5| |M1_$5|))  :pattern ( ($eq.$map_t..^^i4.^^bool |M1_$5| |M2_$5|)))) :named ax_458))
   (assert (! (forall( (|M1_$6| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|M2_$6| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool))(!(=> (forall( (|p_$181| Int))($eq.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$6| |p_$181|) ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M2_$6| |p_$181|))) ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$6| |M2_$6|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$6| |M2_$6|)))) :named ax_459))
   (assert (! (forall( (|M1_$7| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool) (|M2_$7| $map_t..$ptr_to..^Node.$map_t..^^i4.^^bool))(!(=> ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$7| |M2_$7|) (= |M2_$7| |M1_$7|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |M1_$7| |M2_$7|)))) :named ax_460))
   (assert (! (forall( (|M1_$8| $map_t..$ptr_to..^Node.^^u4) (|M2_$8| $map_t..$ptr_to..^Node.^^u4))(!(=> (forall( (|p_$185| Int))(= ($unchecked ^^u4 ($select.$map_t..$ptr_to..^Node.^^u4 |M2_$8| |p_$185|)) ($unchecked ^^u4 ($select.$map_t..$ptr_to..^Node.^^u4 |M1_$8| |p_$185|)))) ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$8| |M2_$8|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$8| |M2_$8|)))) :named ax_461))
   (assert (! (forall( (|M1_$9| $map_t..$ptr_to..^Node.^^u4) (|M2_$9| $map_t..$ptr_to..^Node.^^u4))(!(=> ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$9| |M2_$9|) (= |M2_$9| |M1_$9|))  :pattern ( ($eq.$map_t..$ptr_to..^Node.^^u4 |M1_$9| |M2_$9|)))) :named ax_462))
   (assert (! (forall( (|M2_$0| $state) (|M1_$0| $state))(= (and (and (forall( (|p_$32| $ptr))(!(<= ($timestamp |M1_$0| |p_$32|) ($timestamp |M2_$0| |p_$32|))  :weight  0 :pattern ( ($timestamp |M2_$0| |p_$32|)))) (<= ($current_timestamp |M1_$0|) ($current_timestamp |M2_$0|))) ($call_transition |M1_$0| |M2_$0|)) ($timestamp_post |M1_$0| |M2_$0|))) :named ax_463))
   (assert (! (forall( (|M2_$1| $state) (|M1_$1| $state))(= (and (and (forall( (|p_$33| $ptr))(!(<= ($timestamp |M1_$1| |p_$33|) ($timestamp |M2_$1| |p_$33|))  :weight  0 :pattern ( ($timestamp |M2_$1| |p_$33|)))) (< ($current_timestamp |M1_$1|) ($current_timestamp |M2_$1|))) ($call_transition |M1_$1| |M2_$1|)) ($timestamp_post_strict |M1_$1| |M2_$1|))) :named ax_464))
   (assert (! (forall( (|max| Int) (|val| Int) (|min| Int))(= (and (<= |val| |max|) (<= |min| |val|)) ($in_range |min| |val| |max|))) :named ax_465))
   (assert (! (forall( (|no_$0| Int))(= |no_$0| ($get_fnptr_inv ($get_fnptr_ref |no_$0|)))) :named ax_466))
   (assert (! (forall( (|no| Int) (|t_$87| $ctype))(!(= ($ptr |t_$87| ($get_fnptr_ref |no|)) ($get_fnptr |no| |t_$87|))  :pattern ( ($get_fnptr |no| |t_$87|)))) :named ax_467))
   (assert (! (forall( (|owner| $ptr) (|p_$18| $ptr) (|S_$11| $state))(= (and (= |owner| ($owner |S_$11| |p_$18|)) ($closed |S_$11| |p_$18|)) ($nested_in |S_$11| |p_$18| |owner|))) :named ax_468))
   (assert (! (forall( (|owns| $ptrset) (|o| $ptr) (|S_$35| $state))(= ($set_difference |owns| ($owns |S_$35| |o|)) ($new_ownees |S_$35| |o| |owns|))) :named ax_469))
   (assert (! (forall( (|p_$0| $ptr))(= (= ($kind_of ($typ |p_$0|)) $kind_composite) ($is_ptr_to_composite |p_$0|))) :named ax_470))
   (assert (! (forall( (|p_$1| $ptr))(= ($is_non_primitive_ptr |p_$1|) ($is_non_primitive ($typ |p_$1|)))) :named ax_471))
   (assert (! (forall( (|p_$10| $ptr) (|S_$4| $state))(= ($ts_is_volatile ($ts |S_$4| |p_$10|)) ($is_volatile |S_$4| |p_$10|))) :named ax_472))
   (assert (! (forall( (|p_$101| $ptr) (|S1_$9| $state) (|S2_$7| $state) (|q_$14| $ptr))(!($instantiate_bool ($set_in |q_$14| ($domain |S2_$7| |p_$101|)))  :weight  0 :pattern ( ($set_in |q_$14| ($domain |S1_$9| |p_$101|)) ($call_transition |S1_$9| |S2_$7|)))) :named ax_473))
   (assert (! (forall( (|p_$102| $ptr) (|S1_$10| $state) (|S2_$8| $state) (|q_$15| $ptr))(!($instantiate_bool ($set_in |q_$15| ($ver_domain ($read_version |S2_$8| |p_$102|))))  :weight  0 :pattern ( ($set_in |q_$15| ($ver_domain ($read_version |S1_$10| |p_$102|))) ($call_transition |S1_$10| |S2_$8|)))) :named ax_474))
   (assert (! (forall( (|p_$103| $ptr) (|c_$2| $ptr))(!(=> (forall( (|s_$8| $state))(!(=> ($valid_claim |s_$8| |c_$2|) ($closed |s_$8| |p_$103|))  :pattern ( ($dont_instantiate_state |s_$8|)))) ($in_claim_domain |p_$103| |c_$2|))  :pattern ( ($in_claim_domain |p_$103| |c_$2|)))) :named ax_475))
   (assert (! (forall( (|p_$11| $ptr) (|S_$5| $state))(= ($is_object_root |S_$5| |p_$11|) ($is_malloc_root |S_$5| |p_$11|))) :named ax_476))
   (assert (! (forall( (|p_$113| $ptr))(!(= 1 ($set_cardinality ($set_singleton |p_$113|)))  :weight  0)) :named ax_477))
   (assert (! (forall( (|p_$114| $ptr) (|s1_$5| $ptrset) (|s2_$5| $ptrset))(!(=> (and ($set_in |p_$114| |s1_$5|) ($set_disjoint |s1_$5| |s2_$5|)) (= 1 ($id_set_disjoint |p_$114| |s1_$5| |s2_$5|)))  :weight  0 :pattern ( ($set_disjoint |s1_$5| |s2_$5|) ($set_in |p_$114| |s1_$5|)))) :named ax_478))
   (assert (! (forall( (|p_$115| $ptr) (|s1_$6| $ptrset) (|s2_$6| $ptrset))(!(=> (and ($set_in |p_$115| |s2_$6|) ($set_disjoint |s1_$6| |s2_$6|)) (= 2 ($id_set_disjoint |p_$115| |s1_$6| |s2_$6|)))  :weight  0 :pattern ( ($set_disjoint |s1_$6| |s2_$6|) ($set_in |p_$115| |s2_$6|)))) :named ax_479))
   (assert (! (forall( (|p_$117| $ptr) (|S1_$12| $state) (|p1_$1| $ptr))(!(=> ($set_in |p_$117| ($owns |S1_$12| |p1_$1|)) ($in_some_owns |p_$117|))  :weight  0 :pattern ( ($set_in |p_$117| ($owns |S1_$12| |p1_$1|))))) :named ax_480))
   (assert (! (forall( (|p_$118| $ptr) (|S1_$13| $state) (|p1_$2| $ptr))(!(= ($set_in2 |p_$118| ($owns |S1_$13| |p1_$2|)) ($set_in |p_$118| ($owns |S1_$13| |p1_$2|)))  :weight  0 :pattern ( ($set_in2 |p_$118| ($owns |S1_$13| |p1_$2|)) ($in_some_owns |p_$118|)))) :named ax_481))
   (assert (! (forall( (|p_$119| $ptr) (|s_$9| $ptrset))(!(= ($set_in2 |p_$119| |s_$9|) ($set_in |p_$119| |s_$9|))  :weight  0 :pattern ( ($set_in |p_$119| |s_$9|)))) :named ax_482))
   (assert (! (forall( (|p_$12| $ptr) (|M2| $state) (|M1| $state))(= (and (<= ($timestamp |M2| |p_$12|) ($current_timestamp |M2|)) (< ($current_timestamp |M1|) ($timestamp |M2| |p_$12|))) ($is_fresh |M1| |M2| |p_$12|))) :named ax_483))
   (assert (! (forall( (|p_$120| $ptr) (|s_$10| $ptrset))(!(= ($set_in3 |p_$120| |s_$10|) ($set_in |p_$120| |s_$10|))  :weight  0 :pattern ( ($set_in |p_$120| |s_$10|)))) :named ax_484))
   (assert (! (forall( (|p_$121| $ptr) (|s_$11| $ptrset))(!(= ($set_in0 |p_$121| |s_$11|) ($set_in |p_$121| |s_$11|))  :weight  0 :pattern ( ($set_in0 |p_$121| |s_$11|)))) :named ax_485))
   (assert (! (forall( (|p_$122| $ptr) (|T_$22| $ctype))(!(= |p_$122| ($inlined_array |p_$122| |T_$22|))  :weight  0 :pattern ( ($inlined_array |p_$122| |T_$22|)))) :named ax_486))
   (assert (! (forall( (|p_$123| $ptr) (|i_$19| Int) (|j| Int) (|T_$23| $ctype))(!(=> (and (not (= |j| 0)) (not (= |i_$19| 0))) (= ($idx |p_$123| ($add |i_$19| |j|) |T_$23|) ($idx ($idx |p_$123| |i_$19| |T_$23|) |j| |T_$23|)))  :pattern ( ($idx ($idx |p_$123| |i_$19| |T_$23|) |j| |T_$23|)))) :named ax_487))
   (assert (! (forall( (|p_$126| $ptr) (|#r_$9| Int) (|T_$26| $ctype) (|sz_$25| Int))(!(= (or (= |p_$126| ($ptr ($array |T_$26| |sz_$25|) |#r_$9|)) ($in_array_full_extent_of |p_$126| ($ptr |T_$26| |#r_$9|) |T_$26| |sz_$25|)) ($in_full_extent_of |p_$126| ($ptr ($array |T_$26| |sz_$25|) |#r_$9|)))  :pattern ( ($in_full_extent_of |p_$126| ($ptr ($array |T_$26| |sz_$25|) |#r_$9|))))) :named ax_488))
   (assert (! (forall( (|p_$128| $ptr) (|#r_$11| Int) (|T_$28| $ctype) (|sz_$27| Int))(!(=> ($is_primitive |T_$28|) (= ($in_span_of |p_$128| ($ptr ($array |T_$28| |sz_$27|) |#r_$11|)) ($in_array |p_$128| ($ptr |T_$28| |#r_$11|) |T_$28| |sz_$27|)))  :pattern ( ($in_span_of |p_$128| ($ptr ($array |T_$28| |sz_$27|) |#r_$11|)) ($is_primitive |T_$28|)))) :named ax_489))
   (assert (! (forall( (|p_$129| $ptr) (|T_$30| $ctype) (|sz_$29| Int) (|elem| $ptr))(!(= ($set_in |elem| ($array_members |p_$129| |T_$30| |sz_$29|)) ($in_array |elem| |p_$129| |T_$30| |sz_$29|))  :pattern ( ($set_in |elem| ($array_members |p_$129| |T_$30| |sz_$29|))))) :named ax_490))
   (assert (! (forall( (|p_$13| $ptr) (|begin_time| Int) (|S_$6| $state))(= (and (or (>= ($timestamp |S_$6| |p_$13|) |begin_time|) ($in_writes_at |begin_time| |p_$13|)) ($mutable |S_$6| |p_$13|)) ($writable |S_$6| |begin_time| |p_$13|))) :named ax_491))
   (assert (! (forall( (|p_$132| $ptr) (|T_$33| $ctype) (|sz_$32| Int) (|idx| Int) (|S_$123| $ptrset))(!(=> ($set_disjoint ($array_range_no_state |p_$132| |T_$33| |sz_$32|) |S_$123|) (=> (and (< |idx| |sz_$32|) (<= 0 |idx|)) (= 1 ($id_set_disjoint ($idx |p_$132| |idx| |T_$33|) ($array_range_no_state |p_$132| |T_$33| |sz_$32|) |S_$123|))))  :pattern ( ($idx |p_$132| |idx| |T_$33|) ($set_disjoint ($array_range_no_state |p_$132| |T_$33| |sz_$32|) |S_$123|)))) :named ax_492))
   (assert (! (forall( (|p_$133| $ptr) (|T_$34| $ctype) (|sz_$33| Int) (|idx_$0| Int) (|S_$124| $ptrset))(!(=> ($set_disjoint |S_$124| ($array_range_no_state |p_$133| |T_$34| |sz_$33|)) (=> (and (< |idx_$0| |sz_$33|) (<= 0 |idx_$0|)) (= 2 ($id_set_disjoint ($idx |p_$133| |idx_$0| |T_$34|) |S_$124| ($array_range_no_state |p_$133| |T_$34| |sz_$33|)))))  :pattern ( ($idx |p_$133| |idx_$0| |T_$34|) ($set_disjoint |S_$124| ($array_range_no_state |p_$133| |T_$34| |sz_$33|))))) :named ax_493))
   (assert (! (forall( (|p_$134| $ptr) (|#r_$14| Int) (|T_$35| $ctype) (|sz_$34| Int))(!(= ($set_in |p_$134| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|)) (and ($in_array_full_extent_of |p_$134| ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|) (not (= 0 |#r_$14|))))  :pattern ( ($set_in |p_$134| ($non_null_array_range ($ptr |T_$35| |#r_$14|) |T_$35| |sz_$34|))))) :named ax_494))
   (assert (! (forall( (|p_$136| $ptr) (|k| Int))(!(and (= |k| ($index_within ($idx |p_$136| |k| ($typ |p_$136|)) |p_$136|)) ($simple_index ($idx |p_$136| |k| ($typ |p_$136|)) |p_$136|))  :pattern ( ($idx |p_$136| |k| ($typ |p_$136|))))) :named ax_495))
   (assert (! (forall( (|p_$137| $ptr) (|q_$19| $ptr) (|f_$30| $field))(!(=> ($simple_index |p_$137| |q_$19|) (and ($simple_index ($dot |p_$137| |f_$30|) |q_$19|) (= ($index_within |p_$137| |q_$19|) ($index_within ($dot |p_$137| |f_$30|) |q_$19|))))  :pattern ( ($simple_index ($dot |p_$137| |f_$30|) |q_$19|)) :pattern ( ($index_within ($dot |p_$137| |f_$30|) |q_$19|)))) :named ax_496))
   (assert (! (forall( (|p_$138| $ptr) (|q_$20| $ptr) (|f_$31| $field) (|i_$23| Int) (|t_$33| $ctype))(!(=> (and (and (< |i_$23| ($embedded_array_size |f_$31| |t_$33|)) (<= 0 |i_$23|)) ($simple_index |p_$138| |q_$20|)) (and ($simple_index ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|) (= ($index_within |p_$138| |q_$20|) ($index_within ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|))))  :pattern ( ($simple_index ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|)) :pattern ( ($index_within ($idx ($dot |p_$138| |f_$31|) |i_$23| |t_$33|) |q_$20|)))) :named ax_497))
   (assert (! (forall( (|p_$14| $ptr) (|begin_time_$0| Int) (|S_$7| $state))(= (and (or (>= ($timestamp |S_$7| |p_$14|) |begin_time_$0|) ($in_writes_at |begin_time_$0| |p_$14|)) ($thread_owned_or_even_mutable |S_$7| |p_$14|)) ($top_writable |S_$7| |begin_time_$0| |p_$14|))) :named ax_498))
   (assert (! (forall( (|p_$140| $ptr))(!(=> ($in_range_u8 ($ref |p_$140|)) (= ($ref |p_$140|) ($ptr_to_u8 |p_$140|)))  :pattern ( ($ptr_to_u8 |p_$140|)))) :named ax_499))
   (assert (! (forall( (|p_$141| $ptr))(!(=> ($in_range_i8 ($ref |p_$141|)) (= ($ref |p_$141|) ($ptr_to_i8 |p_$141|)))  :pattern ( ($ptr_to_i8 |p_$141|)))) :named ax_500))
   (assert (! (forall( (|p_$142| $ptr))(!(=> ($in_range_u4 ($ref |p_$142|)) (= ($ref |p_$142|) ($ptr_to_u4 |p_$142|)))  :pattern ( ($ptr_to_u4 |p_$142|)))) :named ax_501))
   (assert (! (forall( (|p_$143| $ptr))(!(=> ($in_range_i4 ($ref |p_$143|)) (= ($ref |p_$143|) ($ptr_to_i4 |p_$143|)))  :pattern ( ($ptr_to_i4 |p_$143|)))) :named ax_502))
   (assert (! (forall( (|p_$144| $ptr))(!(=> ($in_range_u2 ($ref |p_$144|)) (= ($ref |p_$144|) ($ptr_to_u2 |p_$144|)))  :pattern ( ($ptr_to_u2 |p_$144|)))) :named ax_503))
   (assert (! (forall( (|p_$145| $ptr))(!(=> ($in_range_i2 ($ref |p_$145|)) (= ($ref |p_$145|) ($ptr_to_i2 |p_$145|)))  :pattern ( ($ptr_to_i2 |p_$145|)))) :named ax_504))
   (assert (! (forall( (|p_$146| $ptr))(!(=> ($in_range_u1 ($ref |p_$146|)) (= ($ref |p_$146|) ($ptr_to_u1 |p_$146|)))  :pattern ( ($ptr_to_u1 |p_$146|)))) :named ax_505))
   (assert (! (forall( (|p_$147| $ptr))(!(=> ($in_range_i1 ($ref |p_$147|)) (= ($ref |p_$147|) ($ptr_to_i1 |p_$147|)))  :pattern ( ($ptr_to_i1 |p_$147|)))) :named ax_506))
   (assert (! (forall( (|p_$15| $ptr) (|S_$8| $state))(= ($st |S_$8| |p_$15|) ($select.sm ($statusmap |S_$8|) |p_$15|))) :named ax_507))
   (assert (! (forall( (|p_$152| $ptrset))(= |p_$152| ($int_to_ptrset ($ptrset_to_int |p_$152|)))) :named ax_508))
   (assert (! (forall( (|p_$153| $version))(= |p_$153| ($int_to_version ($version_to_int |p_$153|)))) :named ax_509))
   (assert (! (forall( (|p_$154| $vol_version))(= |p_$154| ($int_to_vol_version ($vol_version_to_int |p_$154|)))) :named ax_510))
   (assert (! (forall( (|p_$155| $ptr))(= |p_$155| ($int_to_ptr ($ptr_to_int |p_$155|)))) :named ax_511))
   (assert (! (forall( (|p_$159| $ptr))(= $seclbl.top (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.top |p_$159|))) :named ax_512))
   (assert (! (forall( (|p_$16| $ptr) (|S_$9| $state))(= ($ts |S_$9| |p_$16|) ($select.tm ($typemap |S_$9|) |p_$16|))) :named ax_513))
   (assert (! (forall( (|p_$160| $ptr))(not (MapRead$$@Map@@$ptr@To@Bool@@$ $lblset.bot |p_$160|))) :named ax_514))
   (assert (! (forall( (|p_$168| $ptr))(!(not ($select.$map_t..$ptr_to..^^void.^^bool $zero.$map_t..$ptr_to..^^void.^^bool |p_$168|))  :weight  0)) :named ax_515))
   (assert (! (forall( (|p_$169| $ptr))(!(not ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$169|))  :pattern ( ($select.$map_t..$ptr_to..^^void.^^bool $@classifier@default |p_$169|)))) :named ax_516))
   (assert (! (forall( (|p_$17| $ptr) (|S_$10| $state))(= ($nested |S_$10| |p_$17|) (not (= $kind_thread ($kind_of ($typ ($owner |S_$10| |p_$17|))))))) :named ax_517))
   (assert (! (forall( (|p_$170| $ptr))(not (MapRead$$@Map@@$ptr@To@Bool@@$ $ptrclub.empty |p_$170|))) :named ax_518))
   (assert (! (forall( (|p_$178| Int))(not ($select.$map_t..^^i4.^^bool $zero.$map_t..^^i4.^^bool |p_$178|))) :named ax_519))
   (assert (! (forall( (|p_$182| Int))(= $zero.$map_t..^^i4.^^bool ($select.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool $zero.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool |p_$182|))) :named ax_520))
   (assert (! (forall( (|p_$186| Int))(= 0 ($select.$map_t..$ptr_to..^Node.^^u4 $zero.$map_t..$ptr_to..^Node.^^u4 |p_$186|))) :named ax_521))
   (assert (! (forall( (|p_$19| $ptr) (|S_$13| $state))(= (or (and ($is_primitive_ch ($typ |p_$19|)) ($closed |S_$13| |p_$19|)) (not (= ($owner |S_$13| |p_$19|) $me))) ($irrelevant |S_$13| |p_$19|))) :named ax_522))
   (assert (! (forall( (|p_$191| Int))(= 0 ($select.$map_t..^^u4.$ptr_to..^Node $zero.$map_t..^^u4.$ptr_to..^Node |p_$191|))) :named ax_523))
   (assert (! (forall( (|p_$2| $ptr) (|s_$0| $state))(= ($select.mem ($memory |s_$0|) |p_$2|) ($mem |s_$0| |p_$2|))) :named ax_524))
   (assert (! (forall( (|p_$20| $ptr) (|S_$14| $state))(= (and ($typed |S_$14| |p_$20|) (= ($owner |S_$14| |p_$20|) $me)) ($thread_owned |S_$14| |p_$20|))) :named ax_525))
   (assert (! (forall( (|p_$21| $ptr) (|S_$15| $state))(= (and (and ($typed |S_$15| |p_$21|) (= ($owner |S_$15| |p_$21|) $me)) (=> ($is_primitive_ch ($typ |p_$21|)) (not ($closed |S_$15| |p_$21|)))) ($thread_owned_or_even_mutable |S_$15| |p_$21|))) :named ax_526))
   (assert (! (forall( (|p_$22| $ptr))(= ($is_ghost_ptr |p_$22|) ($in_range_spec_ptr ($ref |p_$22|)))) :named ax_527))
   (assert (! (forall( (|p_$23| $ptr) (|S_$20| $state))(= (and (or (= ($owner |S_$20| |p_$23|) $me) ($in_wrapped_domain |S_$20| |p_$23|)) (not ($is_primitive_ch ($typ |p_$23|)))) ($thread_local_np |S_$20| |p_$23|))) :named ax_528))
   (assert (! (forall( (|p_$24| $ptr) (|S2| $state) (|S1| $state))(= ($inv2nt |S1| |S2| |p_$24|) ($inv2 |S1| |S2| |p_$24| ($typ |p_$24|)))) :named ax_529))
   (assert (! (forall( (|p_$26| $ptr) (|S_$27| $state))(= (and (forall( (|#q_$0| $ptr))(!(=> ($closed |S_$27| |#q_$0|) ($inv |S_$27| |#q_$0| ($typ |#q_$0|)))  :pattern ( ($st |S_$27| |#q_$0|)))) ($good_for_admissibility |S_$27|)) ($stuttering_pre |S_$27| |p_$26|))) :named ax_530))
   (assert (! (forall( (|p_$27| $ptr) (|S_$28| $state))(= (and ($stuttering_pre |S_$28| |p_$27|) (and ($inv |S_$28| |p_$27| ($typ |p_$27|)) ($closed |S_$28| |p_$27|))) ($admissibility_pre |S_$28| |p_$27|))) :named ax_531))
   (assert (! (forall( (|p_$29| $ptr) (|S_$29| $state))(= (and (and (forall( (|#q_$1| $ptr))(!(=> ($closed |S_$29| |#q_$1|) ($inv |S_$29| |#q_$1| ($typ |#q_$1|)))  :pattern ( ($st |S_$29| |#q_$1|)))) (and (and (or (= 0 ($ref_cnt |S_$29| |p_$29|)) (not ($is_claimable ($typ |p_$29|)))) ($wrapped |S_$29| |p_$29| ($typ |p_$29|))) ($inv |S_$29| |p_$29| ($typ |p_$29|)))) ($good_for_pre_can_unwrap |S_$29|)) ($unwrap_check_pre |S_$29| |p_$29|))) :named ax_532))
   (assert (! (forall( (|p_$30| $ptr) (|S_$30| $state))(= ($timestamp_is_now |S_$30| |p_$30|) (= ($timestamp |S_$30| |p_$30|) ($current_timestamp |S_$30|)))) :named ax_533))
   (assert (! (forall( (|p_$31| $ptr) (|S_$31| $state))(= (and ($timestamp_is_now |S_$31| |p_$31|) ($mutable |S_$31| |p_$31|)) ($now_writable |S_$31| |p_$31|))) :named ax_534))
   (assert (! (forall( (|p_$36| $ptr) (|S_$43| $state))(= (and ($timestamp_is_now |S_$43| |p_$36|) (and ($is_object_root |S_$43| |p_$36|) ($extent_mutable |S_$43| |p_$36|))) ($mutable_root |S_$43| |p_$36|))) :named ax_535))
   (assert (! (forall( (|p_$4| $ptr) (|s2| $state) (|s1| $state))(= ($mem_eq |s1| |s2| |p_$4|) (= ($mem |s2| |p_$4|) ($mem |s1| |p_$4|)))) :named ax_536))
   (assert (! (forall( (|p_$5| $ptr) (|s2_$0| $state) (|s1_$0| $state))(= ($st_eq |s1_$0| |s2_$0| |p_$5|) (= ($st |s2_$0| |p_$5|) ($st |s1_$0| |p_$5|)))) :named ax_537))
   (assert (! (forall( (|p_$50| $ptr) (|S_$54| $state))(= ($read_bool |S_$54| |p_$50|) ($int_to_bool ($mem |S_$54| |p_$50|)))) :named ax_538))
   (assert (! (forall( (|p_$51| $ptr))(= ($in_range_u8 ($ref |p_$51|)) ($in_range_ptr |p_$51|))) :named ax_539))
   (assert (! (forall( (|p_$6| $ptr) (|s2_$1| $state) (|s1_$1| $state))(= ($ts_eq |s1_$1| |s2_$1| |p_$6|) (= ($ts |s2_$1| |p_$6|) ($ts |s1_$1| |p_$6|)))) :named ax_540))
   (assert (! (forall( (|p_$62| $ptr) (|q_$6| $ptr) (|r_$0| $ptr))(!(=> (and ($extent_hint |q_$6| |r_$0|) ($extent_hint |p_$62| |q_$6|)) ($extent_hint |p_$62| |r_$0|))  :pattern ( ($extent_hint |p_$62| |q_$6|) ($extent_hint |q_$6| |r_$0|)))) :named ax_541))
   (assert (! (forall( (|p_$63| $ptr))(!($extent_hint |p_$63| |p_$63|)  :pattern ( ($typ |p_$63|)))) :named ax_542))
   (assert (! (forall( (|p_$64| $ptr) (|f_$12| $field))(!(and (= |p_$64| ($ghost_emb ($ghost_ref |p_$64| |f_$12|))) (= |f_$12| ($ghost_path ($ghost_ref |p_$64| |f_$12|))))  :weight  0 :pattern ( ($ghost_ref |p_$64| |f_$12|)))) :named ax_543))
   (assert (! (forall( (|p_$65| $ptr) (|f_$13| $field))(!($in_range_spec_ptr ($ghost_ref |p_$65| |f_$13|))  :pattern ( ($ghost_ref |p_$65| |f_$13|)))) :named ax_544))
   (assert (! (forall( (|p_$66| $ptr) (|f_$14| $field))(!(= |p_$66| ($simple_emb ($dot |p_$66| |f_$14|)))  :pattern ( ($simple_emb ($dot |p_$66| |f_$14|))))) :named ax_545))
   (assert (! (forall( (|p_$71| $ctype) (|f_$20| $field) (|ft| $ctype))(!(=> (and ($is_record_type |ft|) ($is_record_field |p_$71| |f_$20| |ft|)) (= |f_$20| ($as_record_record_field |f_$20|)))  :pattern ( ($is_record_field |p_$71| |f_$20| |ft|) ($is_record_type |ft|)))) :named ax_546))
   (assert (! (forall( (|p_$9| $ptr) (|S_$3| $state))(= (= ($ptr ^^root_emb ($ref |p_$9|)) ($emb |S_$3| |p_$9|)) ($is_object_root |S_$3| |p_$9|))) :named ax_547))
   (assert (! (forall( (|p| $ptr))(= ($is_threadtype ($typ |p|)) ($is_thread |p|))) :named ax_548))
   (assert (! (forall( (|p1_$3| $ptr) (|p2_$1| $ptr))(!(= (- ($ref |p1_$3|) ($ref |p2_$1|)) ($byte_ptr_subtraction |p1_$3| |p2_$1|))  :weight  0 :pattern ( ($byte_ptr_subtraction |p1_$3| |p2_$1|)))) :named ax_549))
   (assert (! (forall( (|p1_$4| $ptr) (|p2_$2| $ptr))(=> ($ptr_eq |p1_$4| |p2_$2|) ($lblset.leq ($ptrclub.compare |p1_$4| |p2_$2|) $lblset.bot))) :named ax_550))
   (assert (! (forall( (|p1_$5| $ptr) (|p2_$3| $ptr) (|c_$18| $ptrclub))(=> (and (is_active_ptrclub |c_$18|) (and ($ptrclub.isMember |p2_$3| |c_$18|) ($ptrclub.isMember |p1_$5| |c_$18|))) ($lblset.leq ($ptrclub.compare |p1_$5| |p2_$3|) ($ptrclub.bound |c_$18|)))) :named ax_551))
   (assert (! (forall( (|p2_$0| $ptr) (|p1_$0| $ptr))(= ($ptr_neq |p1_$0| |p2_$0|) (not (= ($ref |p2_$0|) ($ref |p1_$0|))))) :named ax_552))
   (assert (! (forall( (|p2| $ptr) (|p1| $ptr))(= (= ($ref |p2|) ($ref |p1|)) ($ptr_eq |p1| |p2|))) :named ax_553))
   (assert (! (forall( (|Q#k$1^17.45#tc2| Int))(!(=> ($in_range_i4 |Q#k$1^17.45#tc2|) (not ($select.$map_t..^^i4.^^bool F@lambda@1 |Q#k$1^17.45#tc2|)))  :pattern ( ($select.$map_t..^^i4.^^bool F@lambda@1 |Q#k$1^17.45#tc2|)))) :named ax_554))
   (assert (! (forall( (|q_$18| $ptr) (|S_$125| $state) (|p_$135| $ptr))(!(= ($set_in |q_$18| ($non_null_extent |S_$125| |p_$135|)) (and ($set_in |q_$18| ($extent |S_$125| |p_$135|)) ($ptr_neq |p_$135| $null)))  :pattern ( ($set_in |q_$18| ($non_null_extent |S_$125| |p_$135|))))) :named ax_555))
   (assert (! (forall( (|r_$1| $record) (|f_$16| $field) (|val_bitsize| Int) (|from| Int) (|to| Int) (|repl| Int))(!(= ($rec_update_bv |r_$1| |f_$16| |val_bitsize| |from| |to| |repl|) ($rec_update |r_$1| |f_$16| ($bv_update ($rec_fetch |r_$1| |f_$16|) |val_bitsize| |from| |to| |repl|)))  :pattern ( ($rec_update_bv |r_$1| |f_$16| |val_bitsize| |from| |to| |repl|)))) :named ax_556))
   (assert (! (forall( (|r_$2| $record) (|f_$18| $field) (|v_$7| Int))(!(= ($unchecked ($record_field_int_kind |f_$18|) |v_$7|) ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|))  :pattern ( ($rec_fetch ($rec_update |r_$2| |f_$18| |v_$7|) |f_$18|)))) :named ax_557))
   (assert (! (forall( (|r_$3| $record) (|f_$19| $field))(!($in_range_t ($record_field_int_kind |f_$19|) ($rec_fetch |r_$3| |f_$19|))  :pattern ( ($rec_fetch |r_$3| |f_$19|)))) :named ax_558))
   (assert (! (forall( (|r_$4| $record) (|f1| $field) (|f2| $field) (|v_$8| Int))(!(or (= |f2| |f1|) (= ($rec_fetch |r_$4| |f2|) ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|)))  :pattern ( ($rec_fetch ($rec_update |r_$4| |f1| |v_$8|) |f2|)))) :named ax_559))
   (assert (! (forall( (|r_$5| $record))(= |r_$5| ($int_to_record ($record_to_int |r_$5|)))) :named ax_560))
   (assert (! (forall( (|r1_$0| $record) (|r2_$0| $record))(!(=> (forall( (|f_$21| $field))($rec_base_eq ($rec_fetch |r1_$0| |f_$21|) ($rec_fetch |r2_$0| |f_$21|))) ($rec_eq |r1_$0| |r2_$0|))  :pattern ( ($rec_eq |r1_$0| |r2_$0|)))) :named ax_561))
   (assert (! (forall( (|r1_$1| $record) (|r2_$1| $record) (|f_$22| $field))(!(=> ($rec_eq ($int_to_record ($rec_fetch |r1_$1| |f_$22|)) ($int_to_record ($rec_fetch |r2_$1| |f_$22|))) ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| |f_$22|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$1| |f_$22|) ($rec_fetch |r2_$1| ($as_record_record_field |f_$22|)))))) :named ax_562))
   (assert (! (forall( (|r1_$2| $record) (|r2_$2| $record) (|f_$32| $field) (|R| $ctype))(!(=> ($eq.$map_t..$ptr_to..^^void.^^bool ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r1_$2| |f_$32|)) ($int_to_map_t..ptr_to..^^void.^^bool ($rec_fetch |r2_$2| |f_$32|))) ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)))  :weight  0 :pattern ( ($rec_base_eq ($rec_fetch |r1_$2| |f_$32|) ($rec_fetch |r2_$2| |f_$32|)) ($is_record_field |R| |f_$32| ($map_t ($ptr_to ^^void) ^^bool))))) :named ax_563))
   (assert (! (forall( (|r1_$3| $record) (|r2_$3| $record) (|f_$33| $field) (|R_$0| $ctype))(!(=> ($eq.$map_t..^^i4.^^bool ($int_to_map_t..^^i4.^^bool ($rec_fetch |r1_$3| |f_$33|)) ($int_to_map_t..^^i4.^^bool ($rec_fetch |r2_$3| |f_$33|))) ($rec_base_eq ($rec_fetch |r1_$3| |f_$33|) ($rec_fetch |r2_$3| |f_$33|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$3| |f_$33|) ($rec_fetch |r2_$3| |f_$33|)) ($is_record_field |R_$0| |f_$33| ($map_t ^^i4 ^^bool))))) :named ax_564))
   (assert (! (forall( (|r1_$4| $record) (|r2_$4| $record) (|f_$34| $field) (|R_$1| $ctype))(!(=> ($eq.$map_t..$ptr_to..^Node.$map_t..^^i4.^^bool ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($rec_fetch |r1_$4| |f_$34|)) ($int_to_map_t..ptr_to..^Node.map_t..^^i4.^^bool ($rec_fetch |r2_$4| |f_$34|))) ($rec_base_eq ($rec_fetch |r1_$4| |f_$34|) ($rec_fetch |r2_$4| |f_$34|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$4| |f_$34|) ($rec_fetch |r2_$4| |f_$34|)) ($is_record_field |R_$1| |f_$34| ($map_t ($ptr_to ^Node) ($map_t ^^i4 ^^bool)))))) :named ax_565))
   (assert (! (forall( (|r1_$5| $record) (|r2_$5| $record) (|f_$35| $field) (|R_$2| $ctype))(!(=> ($eq.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($rec_fetch |r1_$5| |f_$35|)) ($int_to_map_t..ptr_to..^Node.^^u4 ($rec_fetch |r2_$5| |f_$35|))) ($rec_base_eq ($rec_fetch |r1_$5| |f_$35|) ($rec_fetch |r2_$5| |f_$35|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$5| |f_$35|) ($rec_fetch |r2_$5| |f_$35|)) ($is_record_field |R_$2| |f_$35| ($map_t ($ptr_to ^Node) ^^u4))))) :named ax_566))
   (assert (! (forall( (|r1_$6| $record) (|r2_$6| $record) (|f_$36| $field) (|R_$3| $ctype))(!(=> ($eq.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($rec_fetch |r1_$6| |f_$36|)) ($int_to_map_t..^^u4.ptr_to..^Node ($rec_fetch |r2_$6| |f_$36|))) ($rec_base_eq ($rec_fetch |r1_$6| |f_$36|) ($rec_fetch |r2_$6| |f_$36|)))  :pattern ( ($rec_base_eq ($rec_fetch |r1_$6| |f_$36|) ($rec_fetch |r2_$6| |f_$36|)) ($is_record_field |R_$3| |f_$36| ($map_t ^^u4 ($ptr_to ^Node)))))) :named ax_567))
   (assert (! (forall( (|r1| $record) (|r2| $record))(!(= (= |r2| |r1|) ($rec_eq |r1| |r2|))  :pattern ( ($rec_eq |r1| |r2|)))) :named ax_568))
   (assert (! (forall( (|S_$100| $state) (|c_$3| $ptr) (|obj| $ptr) (|ptr| $ptr))(!(= |ptr| ($by_claim |S_$100| |c_$3| |obj| |ptr|))  :weight  0 :pattern ( ($by_claim |S_$100| |c_$3| |obj| |ptr|)))) :named ax_569))
   (assert (! (forall( (|S_$101| $state) (|p_$104| $ptr) (|c_$4| $ptr) (|f_$28| $field))(!(=> (and ($is_primitive_non_volatile_field |f_$28|) (and ($in_claim_domain |p_$104| |c_$4|) (and ($good_state |S_$101|) ($closed |S_$101| |c_$4|)))) (and (= ($mem |S_$101| ($dot |p_$104| |f_$28|)) ($fetch_from_domain ($claim_version |c_$4|) ($dot |p_$104| |f_$28|))) ($in_claim_domain |p_$104| |c_$4|)))  :pattern ( ($in_claim_domain |p_$104| |c_$4|) ($mem |S_$101| ($dot |p_$104| |f_$28|))) :pattern ( ($by_claim |S_$101| |c_$4| |p_$104| ($dot |p_$104| |f_$28|))))) :named ax_570))
   (assert (! (forall( (|S_$102| $state) (|p_$105| $ptr) (|c_$5| $ptr) (|f_$29| $field) (|i_$15| Int) (|sz_$21| Int) (|t_$28| $ctype))(!(=> (and (< |i_$15| |sz_$21|) (and (<= 0 |i_$15|) (and ($is_primitive_embedded_array |f_$29| |sz_$21|) (and ($in_claim_domain |p_$105| |c_$5|) (and ($good_state |S_$102|) ($closed |S_$102| |c_$5|)))))) (= ($mem |S_$102| ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|)) ($fetch_from_domain ($claim_version |c_$5|) ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|))))  :pattern ( ($valid_claim |S_$102| |c_$5|) ($in_claim_domain |p_$105| |c_$5|) ($mem |S_$102| ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)) :pattern ( ($by_claim |S_$102| |c_$5| |p_$105| ($idx ($dot |p_$105| |f_$29|) |i_$15| |t_$28|)) ($is_primitive_embedded_array |f_$29| |sz_$21|)))) :named ax_571))
   (assert (! (forall( (|S_$103| $state) (|p_$106| $ptr) (|c_$6| $ptr) (|i_$16| Int) (|sz_$22| Int) (|t_$29| $ctype))(!(=> (and (< |i_$16| |sz_$22|) (and (<= 0 |i_$16|) (and ($is_primitive |t_$29|) (and ($in_claim_domain ($as_array |p_$106| |t_$29| |sz_$22|) |c_$6|) (and ($good_state |S_$103|) ($closed |S_$103| |c_$6|)))))) (= ($mem |S_$103| ($idx |p_$106| |i_$16| |t_$29|)) ($fetch_from_domain ($claim_version |c_$6|) ($idx |p_$106| |i_$16| |t_$29|))))  :pattern ( ($valid_claim |S_$103| |c_$6|) ($in_claim_domain ($as_array |p_$106| |t_$29| |sz_$22|) |c_$6|) ($mem |S_$103| ($idx |p_$106| |i_$16| |t_$29|)) ($is_primitive |t_$29|)) :pattern ( ($by_claim |S_$103| |c_$6| |p_$106| ($idx |p_$106| |i_$16| |t_$29|)) ($is_primitive |t_$29|) ($is_array |S_$103| |p_$106| |t_$29| |sz_$22|)))) :named ax_572))
   (assert (! (forall( (|S_$104| $state) (|p_$107| $ptr))(!(= ($read_vol_version |S_$104| |p_$107|) ($int_to_vol_version ($mem |S_$104| |p_$107|)))  :weight  0 :pattern ( ($read_vol_version |S_$104| |p_$107|)))) :named ax_573))
   (assert (! (forall( (|S_$105| $state) (|r_$18| Int) (|t_$30| $ctype) (|approver_$1| $field) (|subject_$2| $field))(!(=> (and (or (= $me ($int_to_ptr ($mem |S_$105| ($dot ($ptr |t_$30| |r_$18|) |approver_$1|)))) (= $me ($int_to_ptr ($fetch_vol_field |S_$105| ($ptr |t_$30| |r_$18|) |approver_$1|)))) (and (and ($is_approved_by |t_$30| |approver_$1| |subject_$2|) ($full_stop |S_$105|)) ($closed |S_$105| ($ptr |t_$30| |r_$18|)))) (= ($mem |S_$105| ($dot ($ptr |t_$30| |r_$18|) |subject_$2|)) ($fetch_vol_field |S_$105| ($ptr |t_$30| |r_$18|) |subject_$2|)))  :pattern ( ($is_approved_by |t_$30| |approver_$1| |subject_$2|) ($mem |S_$105| ($dot ($ptr |t_$30| |r_$18|) |subject_$2|))))) :named ax_574))
   (assert (! (forall( (|S_$106| $state) (|r_$19| Int) (|t_$31| $ctype) (|subject_$3| $field))(!(=> (and (= ($owner |S_$106| ($ptr |t_$31| |r_$19|)) $me) (and ($is_owner_approved |t_$31| |subject_$3|) (and ($full_stop |S_$106|) ($closed |S_$106| ($ptr |t_$31| |r_$19|))))) (= ($mem |S_$106| ($dot ($ptr |t_$31| |r_$19|) |subject_$3|)) ($fetch_vol_field |S_$106| ($ptr |t_$31| |r_$19|) |subject_$3|)))  :pattern ( ($is_owner_approved |t_$31| |subject_$3|) ($mem |S_$106| ($dot ($ptr |t_$31| |r_$19|) |subject_$3|))))) :named ax_575))
   (assert (! (forall( (|S_$107| $state) (|p_$108| $ptr) (|q_$16| $ptr))(!(=> (and ($is_non_primitive ($typ |p_$108|)) (and ($good_state |S_$107|) ($closed |S_$107| |q_$16|))) (= (= |q_$16| ($owner |S_$107| |p_$108|)) ($set_in |p_$108| ($owns |S_$107| |q_$16|))))  :pattern ( ($set_in |p_$108| ($owns |S_$107| |q_$16|)) ($is_non_primitive ($typ |p_$108|))))) :named ax_576))
   (assert (! (forall( (|S_$108| $state) (|#r_$6| Int) (|#t_$14| $ctype))(!(=> ($good_state |S_$108|) (=> ($is_arraytype |#t_$14|) (= $set_empty ($owns |S_$108| ($ptr |#t_$14| |#r_$6|)))))  :pattern ( ($owns |S_$108| ($ptr |#t_$14| |#r_$6|)) ($is_arraytype |#t_$14|)))) :named ax_577))
   (assert (! (forall( (|S_$109| $state) (|#p_$30| $ptr) (|#t_$15| $ctype))(!(=> (and ($invok_state |S_$109|) ($closed |S_$109| |#p_$30|)) ($inv |S_$109| |#p_$30| |#t_$15|))  :pattern ( ($inv |S_$109| |#p_$30| |#t_$15|)))) :named ax_578))
   (assert (! (forall( (|S_$110| $state))(!(=> ($good_state |S_$110|) ($closed_is_transitive |S_$110|))  :pattern ( ($good_state |S_$110|)))) :named ax_579))
   (assert (! (forall( (|S_$111| $state) (|#p_$31| $ptr))(!(=> ($closed |S_$111| |#p_$31|) ($typed |S_$111| |#p_$31|))  :pattern ( ($closed |S_$111| |#p_$31|)))) :named ax_580))
   (assert (! (forall( (|S_$112| $state) (|p_$109| $ptr) (|v_$9| Int))(!(and (and (and (= ($typemap |S_$112|) ($typemap ($update_int |S_$112| |p_$109| |v_$9|))) (= ($statusmap |S_$112|) ($statusmap ($update_int |S_$112| |p_$109| |v_$9|)))) (= ($store.mem ($memory |S_$112|) |p_$109| |v_$9|) ($memory ($update_int |S_$112| |p_$109| |v_$9|)))) ($timestamp_post_strict |S_$112| ($update_int |S_$112| |p_$109| |v_$9|)))  :pattern ( ($update_int |S_$112| |p_$109| |v_$9|)))) :named ax_581))
   (assert (! (forall( (|S_$113| $state) (|l_$3| $ptr) (|p_$110| $ptr))(!(=> ($is_non_primitive_ch ($typ |l_$3|)) (and (and (= |l_$3| ($owner ($take_over |S_$113| |l_$3| |p_$110|) |p_$110|)) (and (= ($store.sm ($statusmap |S_$113|) |p_$110| ($taken_over |S_$113| |l_$3| |p_$110|)) ($statusmap ($take_over |S_$113| |l_$3| |p_$110|))) ($closed ($take_over |S_$113| |l_$3| |p_$110|) |p_$110|))) (= ($ref_cnt |S_$113| |p_$110|) ($ref_cnt ($take_over |S_$113| |l_$3| |p_$110|) |p_$110|))))  :pattern ( ($take_over |S_$113| |l_$3| |p_$110|)))) :named ax_582))
   (assert (! (forall( (|S_$115| $state))(!(=> ($program_entry_point |S_$115|) ($program_entry_point_ch |S_$115|))  :pattern ( ($program_entry_point |S_$115|)))) :named ax_583))
   (assert (! (forall( (|S_$116| $state) (|p_$112| $ptr) (|q_$17| $ptr))(!(= (or (= |q_$17| |p_$112|) (and ($set_in |p_$112| ($span |q_$17|)) ($is_volatile |S_$116| |p_$112|))) ($set_in |p_$112| ($volatile_span |S_$116| |q_$17|)))  :pattern ( ($set_in |p_$112| ($volatile_span |S_$116| |q_$17|))))) :named ax_584))
   (assert (! (forall( (|S_$117| $state) (|p_$124| $ptr) (|T_$24| $ctype) (|sz_$23| Int) (|vol_$1| Bool))(!(= (and (forall( (|i_$20| Int))(!(=> (and (< |i_$20| |sz_$23|) (<= 0 |i_$20|)) (and (= |vol_$1| ($is_volatile |S_$117| ($idx |p_$124| |i_$20| |T_$24|))) ($typed |S_$117| ($idx |p_$124| |i_$20| |T_$24|))))  :pattern ( ($st |S_$117| ($idx |p_$124| |i_$20| |T_$24|))) :pattern ( ($ts |S_$117| ($idx |p_$124| |i_$20| |T_$24|))) :pattern ( ($mem |S_$117| ($idx |p_$124| |i_$20| |T_$24|))))) ($is |p_$124| |T_$24|)) ($is_array_vol_or_nonvol |S_$117| |p_$124| |T_$24| |sz_$23| |vol_$1|))  :weight  0 :pattern ( ($is_array_vol_or_nonvol |S_$117| |p_$124| |T_$24| |sz_$23| |vol_$1|)))) :named ax_585))
   (assert (! (forall( (|S_$118| $state) (|p_$125| $ptr) (|T_$25| $ctype) (|sz_$24| Int))(!(= (and (forall( (|i_$21| Int))(!(=> (and (< |i_$21| |sz_$24|) (<= 0 |i_$21|)) ($typed |S_$118| ($idx |p_$125| |i_$21| |T_$25|)))  :pattern ( ($st |S_$118| ($idx |p_$125| |i_$21| |T_$25|))) :pattern ( ($ts |S_$118| ($idx |p_$125| |i_$21| |T_$25|))) :pattern ( ($mem |S_$118| ($idx |p_$125| |i_$21| |T_$25|))))) ($is |p_$125| |T_$25|)) ($is_array |S_$118| |p_$125| |T_$25| |sz_$24|))  :weight  0 :pattern ( ($is_array |S_$118| |p_$125| |T_$25| |sz_$24|)))) :named ax_586))
   (assert (! (forall( (|S_$119| $state) (|p_$127| $ptr) (|#r_$10| Int) (|T_$27| $ctype) (|sz_$26| Int))(!(= (or (= |p_$127| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|)) ($in_array_extent_of |S_$119| |p_$127| ($ptr |T_$27| |#r_$10|) |T_$27| |sz_$26|)) ($in_extent_of |S_$119| |p_$127| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|)))  :pattern ( ($in_extent_of |S_$119| |p_$127| ($ptr ($array |T_$27| |sz_$26|) |#r_$10|))))) :named ax_587))
   (assert (! (forall( (|S_$120| $state) (|#r_$12| Int) (|T_$29| $ctype) (|sz_$28| Int) (|i_$22| Int))(!(=> ($typed |S_$120| ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) (=> (and (< |i_$22| |sz_$28|) (<= 0 |i_$22|)) ($array_elt_emb |S_$120| ($idx ($ptr ($array |T_$29| |sz_$28|) |#r_$12|) |i_$22| |T_$29|) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|))))  :pattern ( ($st |S_$120| ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)) :pattern ( ($ts |S_$120| ($idx ($ptr |T_$29| |#r_$12|) |i_$22| |T_$29|)) ($ptr ($array |T_$29| |sz_$28|) |#r_$12|)))) :named ax_588))
   (assert (! (forall( (|S_$121| $state) (|p_$130| $ptr) (|T_$31| $ctype) (|sz_$30| Int))(!(= ($array_range_no_state |p_$130| |T_$31| |sz_$30|) ($array_range |S_$121| |p_$130| |T_$31| |sz_$30|))  :pattern ( ($array_range |S_$121| |p_$130| |T_$31| |sz_$30|)))) :named ax_589))
   (assert (! (forall( (|S_$122| $state) (|p_$131| $ptr) (|#r_$13| Int) (|T_$32| $ctype) (|sz_$31| Int))(!(and (= ($set_in |p_$131| ($array_range |S_$122| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|)) ($in_array_full_extent_of |p_$131| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|)) ($instantiate_bool ($typed |S_$122| |p_$131|)))  :pattern ( ($set_in |p_$131| ($array_range |S_$122| ($ptr |T_$32| |#r_$13|) |T_$32| |sz_$31|))))) :named ax_590))
   (assert (! (forall( (|S_$126| $state) (|r_$21| Int) (|t_$35| $ctype))(!(=> ($good_state |S_$126|) ($in_range_t |t_$35| ($mem |S_$126| ($ptr ($as_in_range_t |t_$35|) |r_$21|))))  :pattern ( ($mem |S_$126| ($ptr ($as_in_range_t |t_$35|) |r_$21|))))) :named ax_591))
   (assert (! (forall( (|S_$127| $state) (|r_$22| Int) (|t_$36| $ctype))(!(=> ($good_state |S_$127|) ($in_range_phys_ptr ($mem |S_$127| ($ptr ($ptr_to |t_$36|) |r_$22|))))  :pattern ( ($mem |S_$127| ($ptr ($ptr_to |t_$36|) |r_$22|))))) :named ax_592))
   (assert (! (forall( (|S_$128| $state) (|r_$23| Int) (|t_$37| $ctype))(!(=> ($good_state |S_$128|) ($in_range_spec_ptr ($mem |S_$128| ($ptr ($spec_ptr_to |t_$37|) |r_$23|))))  :pattern ( ($mem |S_$128| ($ptr ($spec_ptr_to |t_$37|) |r_$23|))))) :named ax_593))
   (assert (! (forall( (|S_$130| $state) (|no_$1| Int) (|t_$88| $ctype))(!(=> (and ($is_fnptr_type |t_$88|) ($good_state |S_$130|)) ($mutable |S_$130| ($get_fnptr |no_$1| |t_$88|)))  :pattern ( ($ts |S_$130| ($get_fnptr |no_$1| |t_$88|))) :pattern ( ($st |S_$130| ($get_fnptr |no_$1| |t_$88|))))) :named ax_594))
   (assert (! (forall( (|S_$131| $state) (|c_$7| $ptr))(!(=> (and ($full_stop |S_$131|) ($closed |S_$131| |c_$7|)) ($valid_claim |S_$131| |c_$7|))  :pattern ( ($full_stop |S_$131|) ($valid_claim |S_$131| |c_$7|)))) :named ax_595))
   (assert (! (forall( (|S_$132| $state) (|c_$8| $ptr))(!(=> ($valid_claim |S_$132| |c_$8|) (and ($invok_state |S_$132|) ($closed |S_$132| |c_$8|)))  :pattern ( ($valid_claim |S_$132| |c_$8|)))) :named ax_596))
   (assert (! (forall( (|S_$134| $state) (|c1_$0| $ptr) (|c2_$0| $ptr))(!(=> (and ($valid_claim |S_$134| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)) ($valid_claim |S_$134| |c2_$0|))  :pattern ( ($valid_claim |S_$134| |c1_$0|) ($claims_claim |c1_$0| |c2_$0|)))) :named ax_597))
   (assert (! (forall( (|S_$135| $state) (|c_$9| $ptr) (|o_$0| $ptr))(!(=> ($good_state |S_$135|) (=> (and ($closed |S_$135| |c_$9|) ($claims_obj |c_$9| |o_$0|)) (and (> ($ref_cnt |S_$135| |o_$0|) 0) (and ($instantiate_ptrset ($owns |S_$135| |o_$0|)) ($closed |S_$135| |o_$0|)))))  :pattern ( ($closed |S_$135| |c_$9|) ($claims_obj |c_$9| |o_$0|)))) :named ax_598))
   (assert (! (forall( (|S_$136| $state) (|c_$10| $ptr) (|o_$1| $ptr))(!(=> (and ($valid_claim |S_$136| |c_$10|) ($claims_obj |c_$10| |o_$1|)) ($inv |S_$136| |o_$1| ($typ |o_$1|)))  :pattern ( ($valid_claim |S_$136| |c_$10|) ($claims_obj |c_$10| |o_$1|)))) :named ax_599))
   (assert (! (forall( (|S_$137| $state) (|c_$11| $ptr) (|r_$24| Int))(!(=> (and ($valid_claim |S_$137| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$24|))) ($valid_claim |S_$137| ($ptr ^^claim |r_$24|)))  :pattern ( ($valid_claim |S_$137| |c_$11|) ($claims_obj |c_$11| ($ptr ^^claim |r_$24|))))) :named ax_600))
   (assert (! (forall( (|S_$138| $state) (|p_$148| $ptr))(!(= (and (or (= 0 ($ref_cnt |S_$138| |p_$148|)) (not ($is_claimable ($typ |p_$148|)))) ($wrapped |S_$138| |p_$148| ($typ |p_$148|))) ($not_shared |S_$138| |p_$148|))  :weight  0 :pattern ( ($not_shared |S_$138| |p_$148|)))) :named ax_601))
   (assert (! (forall( (|S_$139| $state) (|p_$150| $ptr))(!(=> (and ($invok_state |S_$139|) ($claimed_closed |S_$139| |p_$150|)) ($inv |S_$139| |p_$150| ($typ |p_$150|)))  :pattern ( ($invok_state |S_$139|) ($claimed_closed |S_$139| |p_$150|)))) :named ax_602))
   (assert (! (forall( (|S_$140| $state) (|p_$151| $ptr))(!(= ($st_ref_cnt ($st |S_$140| |p_$151|)) ($ref_cnt |S_$140| |p_$151|))  :weight  0 :pattern ( ($ref_cnt |S_$140| |p_$151|)))) :named ax_603))
   (assert (! (forall( (|S_$141| $state) (|c_$12| $ptr) (|o_$3| $ptr))(!(= (and (and ($good_state |S_$141|) ($closed |S_$141| |c_$12|)) ($claims_obj |c_$12| |o_$3|)) ($account_claim |S_$141| |c_$12| |o_$3|))  :pattern ( ($account_claim |S_$141| |c_$12| |o_$3|)))) :named ax_604))
   (assert (! (forall( (|S_$142| $state) (|c_$13| $ptr) (|o_$4| $ptr))(!(=> ($account_claim |S_$142| |c_$13| |o_$4|) (and (and (= |c_$13| ($claim_no |S_$142| |o_$4| ($claim_idx |o_$4| |c_$13|))) (<= 0 ($claim_idx |o_$4| |c_$13|))) (< ($claim_idx |o_$4| |c_$13|) ($ref_cnt |S_$142| |o_$4|))))  :pattern ( ($account_claim |S_$142| |c_$13| |o_$4|)))) :named ax_605))
   (assert (! (forall( (|s_$18| $state) (|p_$149| $ptr))(!(= ($closed |s_$18| |p_$149|) ($claimed_closed |s_$18| |p_$149|))  :weight  0 :pattern ( ($claimed_closed |s_$18| |p_$149|)))) :named ax_606))
   (assert (! (forall( (|S_$23| $state) (|t_$6| $token))(= (and ($good_state_ext |t_$6| |S_$23|) ($full_stop |S_$23|)) ($full_stop_ext |t_$6| |S_$23|))) :named ax_607))
   (assert (! (forall( (|S_$24| $state))(= (forall( (|#p_$10| $ptr) (|#q| $ptr))(!(=> (and (and ($set_in |#p_$10| ($owns |S_$24| |#q|)) ($good_state |S_$24|)) ($closed |S_$24| |#q|)) (and ($closed |S_$24| |#p_$10|) (not (= 0 ($ref |#p_$10|)))))  :pattern ( ($set_in |#p_$10| ($owns |S_$24| |#q|))))) ($closed_is_transitive |S_$24|))) :named ax_608))
   (assert (! (forall( (|s_$3| $state))(= (forall( (|f_$8| $pure_function))(!(< ($frame_level |f_$8|) $current_frame_level)  :pattern ( ($frame_level |f_$8|)))) ($can_use_all_frame_axioms |s_$3|))) :named ax_609))
   (assert (! (forall( (|s_$4| $state))(= (forall( (|f_$10| $pure_function))(!(< ($pure_post_level |f_$10|) $current_frame_level)  :pattern ( ($frame_level |f_$10|)))) ($can_use_all_pure_post_axioms |s_$4|))) :named ax_610))
   (assert (! (forall( (|S_$55| $state) (|p_$67| $ptr))(!(=> ($typed |S_$55| |p_$67|) ($typed |S_$55| ($emb |S_$55| |p_$67|)))  :pattern ( ($typed |S_$55| |p_$67|) ($ts |S_$55| ($emb |S_$55| |p_$67|))))) :named ax_611))
   (assert (! (forall( (|S_$56| $state) (|p_$68| $ptr))(!(=> (and ($is_volatile |S_$56| |p_$68|) ($good_state |S_$56|)) ($is_primitive_ch ($typ |p_$68|)))  :pattern ( ($is_volatile |S_$56| |p_$68|)))) :named ax_612))
   (assert (! (forall( (|S_$57| $state) (|p_$69| $ptr))(!(or (<= ($timestamp |S_$57| |p_$69|) ($current_timestamp |S_$57|)) (not ($ts_typed ($ts |S_$57| |p_$69|))))  :weight  0 :pattern ( ($st |S_$57| |p_$69|)))) :named ax_613))
   (assert (! (forall( (|S_$58| $state) (|p_$70| $ptr))(!(=> ($good_state |S_$58|) (and (= |S_$58| ($vs_state ($vs_ctor |S_$58| |p_$70|))) (= ($vs_base_ref ($vs_ctor |S_$58| |p_$70|)) ($ref |p_$70|))))  :pattern ( ($vs_ctor |S_$58| |p_$70|)))) :named ax_614))
   (assert (! (forall( (|S_$59| $state) (|p_$72| $ptr))(!(=> ($is_primitive ($typ |p_$72|)) (= ($owner |S_$59| |p_$72|) ($owner |S_$59| ($emb |S_$59| |p_$72|))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$72|)) ($owner |S_$59| |p_$72|)))) :named ax_615))
   (assert (! (forall( (|s_$6| $struct))($good_state ($vs_state |s_$6|))) :named ax_616))
   (assert (! (forall( (|S_$60| $state) (|p_$73| $ptr))(!(=> ($is_non_primitive ($typ |p_$73|)) (= ($st_owner ($st |S_$60| |p_$73|)) ($owner |S_$60| |p_$73|)))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$73|)) ($owner |S_$60| |p_$73|)))) :named ax_617))
   (assert (! (forall( (|S_$61| $state) (|p_$74| $ptr))(!(=> ($is_primitive ($typ |p_$74|)) (= ($st_closed ($st |S_$61| ($emb |S_$61| |p_$74|))) ($closed |S_$61| |p_$74|)))  :weight  0 :pattern ( ($is_primitive ($typ |p_$74|)) ($closed |S_$61| |p_$74|)))) :named ax_618))
   (assert (! (forall( (|S_$62| $state) (|p_$75| $ptr))(!(=> ($is_non_primitive ($typ |p_$75|)) (= ($st_closed ($st |S_$62| |p_$75|)) ($closed |S_$62| |p_$75|)))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$75|)) ($closed |S_$62| |p_$75|)))) :named ax_619))
   (assert (! (forall( (|S_$63| $state) (|p_$76| $ptr))(!(=> ($is_primitive ($typ |p_$76|)) (= ($timestamp |S_$63| |p_$76|) ($st_timestamp ($st |S_$63| ($emb |S_$63| |p_$76|)))))  :weight  0 :pattern ( ($is_primitive ($typ |p_$76|)) ($timestamp |S_$63| |p_$76|)))) :named ax_620))
   (assert (! (forall( (|S_$64| $state) (|p_$77| $ptr))(!(=> ($is_non_primitive ($typ |p_$77|)) (= ($timestamp |S_$64| |p_$77|) ($st_timestamp ($st |S_$64| |p_$77|))))  :weight  0 :pattern ( ($is_non_primitive ($typ |p_$77|)) ($timestamp |S_$64| |p_$77|)))) :named ax_621))
   (assert (! (forall( (|S_$65| $state) (|#p_$22| $ptr))(!(= ($owns |S_$65| |#p_$22|) ($int_to_ptrset ($mem |S_$65| ($dot |#p_$22| ($owns_set_field ($typ |#p_$22|))))))  :weight  0 :pattern ( ($owns |S_$65| |#p_$22|)))) :named ax_622))
   (assert (! (forall( (|S_$66| $state) (|p_$78| $ptr))(!(= (and (and ($typed |S_$66| |p_$78|) (= ($owner |S_$66| |p_$78|) $me)) (not ($closed |S_$66| |p_$78|))) ($mutable |S_$66| |p_$78|))  :weight  0 :pattern ( ($mutable |S_$66| |p_$78|)))) :named ax_623))
   (assert (! (forall( (|S_$67| $state) (|#p_$23| $ptr))(!(=> ($good_state |S_$67|) (= ($typed |S_$67| |#p_$23|) ($ts_typed ($ts |S_$67| |#p_$23|))))  :weight  0 :pattern ( ($typed |S_$67| |#p_$23|)))) :named ax_624))
   (assert (! (forall( (|S_$68| $state) (|#p_$24| $ptr))(!(=> (and ($typed |S_$68| |#p_$24|) ($good_state |S_$68|)) (> ($ref |#p_$24|) 0))  :pattern ( ($typed |S_$68| |#p_$24|)))) :named ax_625))
   (assert (! (forall( (|S_$69| $state) (|#r_$5| Int) (|#t_$9| $ctype))(!(=> (and ($typed |S_$69| ($ptr |#t_$9| |#r_$5|)) ($in_range_phys_ptr |#r_$5|)) ($in_range_phys_ptr (- (+ |#r_$5| ($sizeof |#t_$9|)) 1)))  :pattern ( ($typed |S_$69| ($ptr |#t_$9| |#r_$5|))))) :named ax_626))
   (assert (! (forall( (|s_$7| $status))(!(and ($is_non_primitive ($typ ($st_owner |s_$7|))) (not (= $kind_primitive ($kind_of ($typ ($st_owner |s_$7|))))))  :pattern ( ($st_owner |s_$7|)))) :named ax_627))
   (assert (! (forall( (|S_$70| $state) (|p_$81| $ptr))(!($is_domain_root |S_$70| |p_$81|)  :pattern ( ($is_domain_root |S_$70| |p_$81|)))) :named ax_628))
   (assert (! (forall( (|S_$71| $state) (|p_$82| $ptr))(!(= (exists( (|q_$7| $ptr))(!(and (and ($wrapped |S_$71| |q_$7| ($typ |q_$7|)) ($set_in |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|)))) ($is_domain_root |S_$71| |q_$7|))  :pattern ( ($set_in2 |p_$82| ($ver_domain ($read_version |S_$71| |q_$7|)))))) ($in_wrapped_domain |S_$71| |p_$82|))  :pattern ( ($in_wrapped_domain |S_$71| |p_$82|)))) :named ax_629))
   (assert (! (forall( (|S_$72| $state) (|p_$83| $ptr))(!(= (and (or (and (and (or (not ($is_volatile |S_$72| |p_$83|)) (not ($closed |S_$72| ($emb |S_$72| |p_$83|)))) ($is_primitive_ch ($typ |p_$83|))) ($thread_local_np |S_$72| ($emb |S_$72| |p_$83|))) ($thread_local_np |S_$72| |p_$83|)) ($typed |S_$72| |p_$83|)) ($thread_local |S_$72| |p_$83|))  :pattern ( ($thread_local |S_$72| |p_$83|)))) :named ax_630))
   (assert (! (forall( (|S_$75| $state) (|T_$13| $ctype) (|sz_$14| Int) (|r_$9| Int))(!(= (and (forall( (|i_$8| Int))(!(=> (and (< |i_$8| |sz_$14|) (<= 0 |i_$8|)) ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|)))  :pattern ( ($extent_mutable |S_$75| ($idx ($ptr |T_$13| |r_$9|) |i_$8| |T_$13|))))) ($mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|))) ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|)))  :pattern ( ($extent_mutable |S_$75| ($ptr ($array |T_$13| |sz_$14|) |r_$9|))))) :named ax_631))
   (assert (! (forall( (|S_$77| $state) (|T_$15| $ctype) (|sz_$15| Int) (|r_$11| Int))(!(= (forall( (|i_$9| Int))(!(=> (and (< |i_$9| |sz_$15|) (<= 0 |i_$9|)) ($extent_zero |S_$77| ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))  :pattern ( ($idx ($ptr |T_$15| |r_$11|) |i_$9| |T_$15|)))) ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|)))  :pattern ( ($extent_zero |S_$77| ($ptr ($array |T_$15| |sz_$15|) |r_$11|))))) :named ax_632))
   (assert (! (forall( (|S_$78| $state))(!(=> ($full_stop |S_$78|) (and ($invok_state |S_$78|) ($good_state |S_$78|)))  :pattern ( ($full_stop |S_$78|)))) :named ax_633))
   (assert (! (forall( (|S_$79| $state))(!(=> ($invok_state |S_$79|) ($good_state |S_$79|))  :pattern ( ($invok_state |S_$79|)))) :named ax_634))
   (assert (! (forall( (|S_$81| $state) (|r_$12| Int) (|t_$21| $ctype))(!(= ($read_ptr_m |S_$81| ($ptr ($ptr_to |t_$21|) |r_$12|) |t_$21|) ($ptr |t_$21| ($mem |S_$81| ($ptr ($ptr_to |t_$21|) |r_$12|))))  :pattern ( ($ptr |t_$21| ($mem |S_$81| ($ptr ($ptr_to |t_$21|) |r_$12|)))))) :named ax_635))
   (assert (! (forall( (|S_$82| $state) (|r_$13| Int) (|t_$22| $ctype))(!(= ($read_ptr_m |S_$82| ($ptr ($spec_ptr_to |t_$22|) |r_$13|) |t_$22|) ($ptr |t_$22| ($mem |S_$82| ($ptr ($spec_ptr_to |t_$22|) |r_$13|))))  :pattern ( ($ptr |t_$22| ($mem |S_$82| ($ptr ($spec_ptr_to |t_$22|) |r_$13|)))))) :named ax_636))
   (assert (! (forall( (|S_$83| $state) (|p_$86| $ptr))(!(= ($read_version |S_$83| |p_$86|) ($int_to_version ($mem |S_$83| |p_$86|)))  :weight  0 :pattern ( ($read_version |S_$83| |p_$86|)))) :named ax_637))
   (assert (! (forall( (|S_$84| $state) (|p_$87| $ptr))(!(= ($ver_domain ($read_version |S_$84| |p_$87|)) ($domain |S_$84| |p_$87|))  :weight  0 :pattern ( ($domain |S_$84| |p_$87|)))) :named ax_638))
   (assert (! (forall( (|S_$85| $state) (|p_$88| $ptr) (|q_$8| $ptr) (|l| $label))(!(=> ($in_domain_lab |S_$85| |p_$88| |q_$8| |l|) ($inv_lab |S_$85| |p_$88| |l|))  :weight  0 :pattern ( ($in_domain_lab |S_$85| |p_$88| |q_$8| |l|)))) :named ax_639))
   (assert (! (forall( (|S_$86| $state) (|p_$89| $ptr) (|q_$9| $ptr) (|l_$0| $label))(!(= ($in_domain_lab |S_$86| |p_$89| |q_$9| |l_$0|) ($in_domain |S_$86| |p_$89| |q_$9|))  :weight  0 :pattern ( ($in_domain_lab |S_$86| |p_$89| |q_$9| |l_$0|)))) :named ax_640))
   (assert (! (forall( (|S_$87| $state) (|p_$90| $ptr) (|q_$10| $ptr) (|l_$1| $label))(!(=> ($in_vdomain_lab |S_$87| |p_$90| |q_$10| |l_$1|) ($inv_lab |S_$87| |p_$90| |l_$1|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$87| |p_$90| |q_$10| |l_$1|)))) :named ax_641))
   (assert (! (forall( (|S_$88| $state) (|p_$91| $ptr) (|q_$11| $ptr) (|l_$2| $label))(!(= ($in_vdomain_lab |S_$88| |p_$91| |q_$11| |l_$2|) ($in_vdomain |S_$88| |p_$91| |q_$11|))  :weight  0 :pattern ( ($in_vdomain_lab |S_$88| |p_$91| |q_$11| |l_$2|)))) :named ax_642))
   (assert (! (forall( (|S_$89| $state) (|p_$92| $ptr) (|q_$12| $ptr))(!(=> ($in_domain |S_$89| |p_$92| |q_$12|) (and (forall( (|r_$14| $ptr))(!(=> (and ($set_in |r_$14| ($owns |S_$89| |p_$92|)) (not ($has_volatile_owns_set ($typ |p_$92|)))) ($set_in2 |r_$14| ($ver_domain ($read_version |S_$89| |q_$12|))))  :pattern ( ($set_in |r_$14| ($owns |S_$89| |p_$92|))))) (and ($set_in |p_$92| ($domain |S_$89| |q_$12|)) ($closed |S_$89| |p_$92|))))  :weight  0 :pattern ( ($in_domain |S_$89| |p_$92| |q_$12|)))) :named ax_643))
   (assert (! (forall( (|S_$90| $state) (|p_$93| $ptr))(!(=> (and ($wrapped |S_$90| |p_$93| ($typ |p_$93|)) ($full_stop |S_$90|)) ($in_domain |S_$90| |p_$93| |p_$93|))  :pattern ( ($in_domain |S_$90| |p_$93| |p_$93|)))) :named ax_644))
   (assert (! (forall( (|S_$91| $state) (|p_$94| $ptr) (|q_$13| $ptr) (|r_$15| $ptr))(!(=> (and (forall( (|S1_$8| $state))(=> (and (and (= ($read_version |S1_$8| |p_$94|) ($read_version |S_$91| |p_$94|)) ($inv |S1_$8| |q_$13| ($typ |q_$13|))) (= ($domain |S1_$8| |p_$94|) ($domain |S_$91| |p_$94|))) ($set_in0 |r_$15| ($owns |S1_$8| |q_$13|)))) (and ($set_in |q_$13| ($domain |S_$91| |p_$94|)) ($has_volatile_owns_set ($typ |q_$13|)))) (and ($set_in0 |r_$15| ($owns |S_$91| |q_$13|)) ($in_vdomain |S_$91| |r_$15| |p_$94|)))  :weight  0 :pattern ( ($set_in |q_$13| ($domain |S_$91| |p_$94|)) ($in_vdomain |S_$91| |r_$15| |p_$94|)))) :named ax_645))
   (assert (! (forall( (|S_$92| $state) (|p_$95| $ptr) (|d| $ptr) (|f_$23| $field))(!(=> (and ($set_in |p_$95| ($domain |S_$92| |d|)) ($is_primitive_non_volatile_field |f_$23|)) (= ($mem |S_$92| ($dot |p_$95| |f_$23|)) ($fetch_from_domain ($read_version |S_$92| |d|) ($dot |p_$95| |f_$23|))))  :pattern ( ($set_in |p_$95| ($domain |S_$92| |d|)) ($is_primitive_non_volatile_field |f_$23|) ($mem |S_$92| ($dot |p_$95| |f_$23|))))) :named ax_646))
   (assert (! (forall( (|S_$93| $state) (|p_$96| $ptr) (|d_$0| $ptr))(!(=> (and ($set_in |p_$96| ($domain |S_$93| |d_$0|)) ($full_stop |S_$93|)) ($dom_thread_local |S_$93| |p_$96|))  :pattern ( ($full_stop |S_$93|) ($set_in |p_$96| ($domain |S_$93| |d_$0|)) ($st |S_$93| |p_$96|)) :pattern ( ($full_stop |S_$93|) ($set_in |p_$96| ($domain |S_$93| |d_$0|)) ($ts |S_$93| |p_$96|)))) :named ax_647))
   (assert (! (forall( (|S_$94| $state) (|p_$97| $ptr) (|d_$1| $ptr) (|f_$24| $field))(!(=> (and (and ($set_in |p_$97| ($domain |S_$94| |d_$1|)) ($full_stop |S_$94|)) ($is_primitive_non_volatile_field |f_$24|)) ($dom_thread_local |S_$94| ($dot |p_$97| |f_$24|)))  :pattern ( ($set_in |p_$97| ($domain |S_$94| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($owner |S_$94| ($dot |p_$97| |f_$24|))) :pattern ( ($set_in |p_$97| ($domain |S_$94| |d_$1|)) ($is_primitive_non_volatile_field |f_$24|) ($ts |S_$94| ($dot |p_$97| |f_$24|))))) :named ax_648))
   (assert (! (forall( (|S_$95| $state) (|p_$98| $ptr) (|d_$2| $ptr) (|f_$25| $field) (|sz_$16| Int) (|i_$10| Int) (|t_$23| $ctype))(!(=> (and (< |i_$10| |sz_$16|) (and (<= 0 |i_$10|) (and (and ($set_in |p_$98| ($domain |S_$95| |d_$2|)) ($full_stop |S_$95|)) ($is_primitive_embedded_array |f_$25| |sz_$16|)))) (= ($mem |S_$95| ($idx ($dot |p_$98| |f_$25|) |i_$10| |t_$23|)) ($fetch_from_domain ($read_version |S_$95| |d_$2|) ($idx ($dot |p_$98| |f_$25|) |i_$10| |t_$23|))))  :pattern ( ($set_in |p_$98| ($domain |S_$95| |d_$2|)) ($is_primitive_embedded_array |f_$25| |sz_$16|) ($mem |S_$95| ($idx ($dot |p_$98| |f_$25|) |i_$10| |t_$23|))))) :named ax_649))
   (assert (! (forall( (|S_$96| $state) (|p_$99| $ptr) (|d_$3| $ptr) (|f_$26| $field) (|sz_$17| Int) (|i_$11| Int) (|t_$24| $ctype))(!(=> (and (< |i_$11| |sz_$17|) (and (<= 0 |i_$11|) (and (and ($set_in |p_$99| ($domain |S_$96| |d_$3|)) ($full_stop |S_$96|)) ($is_primitive_embedded_array |f_$26| |sz_$17|)))) ($dom_thread_local |S_$96| ($idx ($dot |p_$99| |f_$26|) |i_$11| |t_$24|)))  :pattern ( ($set_in |p_$99| ($domain |S_$96| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($ts |S_$96| ($idx ($dot |p_$99| |f_$26|) |i_$11| |t_$24|))) :pattern ( ($set_in |p_$99| ($domain |S_$96| |d_$3|)) ($is_primitive_embedded_array |f_$26| |sz_$17|) ($owner |S_$96| ($idx ($dot |p_$99| |f_$26|) |i_$11| |t_$24|))))) :named ax_650))
   (assert (! (forall( (|S_$97| $state) (|r_$16| Int) (|d_$4| $ptr) (|sz_$18| Int) (|i_$12| Int) (|t_$25| $ctype))(!(=> (and (< |i_$12| |sz_$18|) (and (<= 0 |i_$12|) (and ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$16|) ($domain |S_$97| |d_$4|)) (and ($is_primitive |t_$25|) ($full_stop |S_$97|))))) ($dom_thread_local |S_$97| ($idx ($ptr |t_$25| |r_$16|) |i_$12| |t_$25|)))  :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$16|) ($domain |S_$97| |d_$4|)) ($ts |S_$97| ($idx ($ptr |t_$25| |r_$16|) |i_$12| |t_$25|)) ($is_primitive |t_$25|)) :pattern ( ($set_in ($ptr ($array |t_$25| |sz_$18|) |r_$16|) ($domain |S_$97| |d_$4|)) ($owner |S_$97| ($idx ($ptr |t_$25| |r_$16|) |i_$12| |t_$25|)) ($is_primitive |t_$25|)))) :named ax_651))
   (assert (! (forall( (|S_$98| $state) (|r_$17| Int) (|d_$5| $ptr) (|sz_$19| Int) (|i_$13| Int) (|t_$26| $ctype))(!(=> (and (< |i_$13| |sz_$19|) (and (<= 0 |i_$13|) (and ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$17|) ($domain |S_$98| |d_$5|)) (and ($is_primitive |t_$26|) ($full_stop |S_$98|))))) (= ($mem |S_$98| ($idx ($ptr |t_$26| |r_$17|) |i_$13| |t_$26|)) ($fetch_from_domain ($read_version |S_$98| |d_$5|) ($idx ($ptr |t_$26| |r_$17|) |i_$13| |t_$26|))))  :pattern ( ($set_in ($ptr ($array |t_$26| |sz_$19|) |r_$17|) ($domain |S_$98| |d_$5|)) ($mem |S_$98| ($idx ($ptr |t_$26| |r_$17|) |i_$13| |t_$26|)) ($is_primitive |t_$26|)))) :named ax_652))
   (assert (! (forall( (|S_$99| $state) (|p_$100| $ptr) (|f_$27| $field) (|sz_$20| Int) (|i_$14| Int) (|t_$27| $ctype))(!(=> (and (< |i_$14| |sz_$20|) (and (<= 0 |i_$14|) (and ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|) ($good_state |S_$99|)))) ($is_volatile |S_$99| ($idx ($dot |p_$100| |f_$27|) |i_$14| |t_$27|)))  :pattern ( ($is_primitive_embedded_volatile_array |f_$27| |sz_$20| |t_$27|) ($is_volatile |S_$99| ($idx ($dot |p_$100| |f_$27|) |i_$14| |t_$27|))))) :named ax_653))
   (assert (! (forall( (|s| $state))(= |s| ($current_state |s|))) :named ax_654))
   (assert (! (forall( (|S0_$2| $state) (|S_$114| $state) (|l_$4| $ptr) (|p_$111| $ptr))(!(and (and (and (and (= ($store.sm ($statusmap |S_$114|) |p_$111| ($released |S_$114| |l_$4| |p_$111|)) ($statusmap ($release |S0_$2| |S_$114| |l_$4| |p_$111|))) ($closed ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|)) (= ($owner ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|) $me)) (= ($ref_cnt |S_$114| |p_$111|) ($ref_cnt ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|))) (= ($timestamp ($release |S0_$2| |S_$114| |l_$4| |p_$111|) |p_$111|) ($current_timestamp |S0_$2|)))  :pattern ( ($release |S0_$2| |S_$114| |l_$4| |p_$111|)))) :named ax_655))
   (assert (! (forall( (|S1_$11| $state) (|S2_$9| $state) (|r_$20| Int) (|t_$32| $ctype) (|subject_$4| $field))(!($instantiate_int ($mem |S2_$9| ($dot ($ptr |t_$32| |r_$20|) |subject_$4|)))  :pattern ( ($is_owner_approved |t_$32| |subject_$4|) ($post_unwrap |S1_$11| |S2_$9|) ($mem |S1_$11| ($dot ($ptr |t_$32| |r_$20|) |subject_$4|))))) :named ax_656))
   (assert (! (forall( (|S1_$14| $state) (|S2_$10| $state) (|W| $ptrset))(!(=> (forall( (|p_$156| $ptr))(!(=> (or ($is_primitive ($typ |p_$156|)) ($is_non_primitive ($typ |p_$156|))) (=> (and ($typed |S1_$14| |p_$156|) (not ($irrelevant |S1_$14| |p_$156|))) (or ($set_in |p_$156| |W|) ($mem_eq |S1_$14| |S2_$10| |p_$156|))))  :pattern ( ($dont_instantiate |p_$156|)))) ($updated_only_values |S1_$14| |S2_$10| |W|))  :pattern ( ($updated_only_values |S1_$14| |S2_$10| |W|)))) :named ax_657))
   (assert (! (forall( (|S1_$15| $state) (|S2_$11| $state) (|W_$0| $ptrset))(!(=> (forall( (|p_$157| $ptr))(!(=> (and ($set_in |p_$157| |W_$0|) (not ($is_primitive_ch ($typ |p_$157|)))) (or ($mem_eq |S1_$15| |S2_$11| |p_$157|) ($domain_updated_at |S1_$15| |S2_$11| |p_$157| |W_$0|)))  :pattern ( ($dont_instantiate |p_$157|)))) ($updated_only_domains |S1_$15| |S2_$11| |W_$0|))  :pattern ( ($updated_only_domains |S1_$15| |S2_$11| |W_$0|)))) :named ax_658))
   (assert (! (forall( (|S1_$16| $state) (|S2_$12| $state) (|p_$158| $ptr) (|W_$1| $ptrset))(!(= (and (forall( (|q_$21| $ptr))(!(=> (and ($is_primitive_ch ($typ |q_$21|)) (not ($set_in |q_$21| |W_$1|))) (= ($fetch_from_domain ($read_version |S2_$12| |p_$158|) |q_$21|) ($fetch_from_domain ($read_version |S1_$16| |p_$158|) |q_$21|)))  :pattern ( ($fetch_from_domain ($read_version |S2_$12| |p_$158|) |q_$21|)))) (= ($domain |S2_$12| |p_$158|) ($domain |S1_$16| |p_$158|))) ($domain_updated_at |S1_$16| |S2_$12| |p_$158| |W_$1|))  :pattern ( ($domain_updated_at |S1_$16| |S2_$12| |p_$158| |W_$1|)))) :named ax_659))
   (assert (! (forall( (|S1_$4| $state) (|S0_$1| $state))(= (forall( (|r| Int))(!(=> (and ($closed |S1_$4| ($ptr ^^claim |r|)) ($closed |S0_$1| ($ptr ^^claim |r|))) ($valid_claim |S1_$4| ($ptr ^^claim |r|)))  :pattern ( ($closed |S1_$4| ($ptr ^^claim |r|))))) ($valid_claim_impl |S0_$1| |S1_$4|))) :named ax_660))
   (assert (! (forall( (|S1_$5| $state) (|S2_$4| $state) (|p_$61| $ptr) (|sz_$13| Int))(!(=> (forall( (|i_$7| Int))(=> (and (< |i_$7| |sz_$13|) (<= 0 |i_$7|)) (= ($mem |S2_$4| ($idx |p_$61| |i_$7| ($typ |p_$61|))) ($mem |S1_$5| ($idx |p_$61| |i_$7| ($typ |p_$61|)))))) (= ($mem_range |S2_$4| |p_$61| |sz_$13|) ($mem_range |S1_$5| |p_$61| |sz_$13|)))  :pattern ( ($call_transition |S1_$5| |S2_$4|) ($mem_range |S2_$4| |p_$61| |sz_$13|)))) :named ax_661))
   (assert (! (forall( (|S1_$6| $state) (|S2_$5| $state) (|p_$79| $ptr))(!(=> ($call_transition |S1_$6| |S2_$5|) ($instantiate_st ($st |S1_$6| |p_$79|)))  :pattern ( ($st |S2_$5| |p_$79|) ($call_transition |S1_$6| |S2_$5|)))) :named ax_662))
   (assert (! (forall( (|s1_$7| $ptrset) (|s2_$7| $ptrset))(!(=> (forall( (|p_$116| $ptr))(!(and (=> ($set_in |p_$116| |s2_$7|) (not ($set_in |p_$116| |s1_$7|))) (=> ($set_in |p_$116| |s1_$7|) (not ($set_in |p_$116| |s2_$7|))))  :pattern ( ($dont_instantiate |p_$116|)))) ($set_disjoint |s1_$7| |s2_$7|))  :weight  0 :pattern ( ($set_disjoint |s1_$7| |s2_$7|)))) :named ax_663))
   (assert (! (forall( (|S1_$7| $state) (|S2_$6| $state) (|p_$80| $ptr))(!(=> ($call_transition |S1_$7| |S2_$6|) ($instantiate_int ($mem |S1_$7| |p_$80|)))  :pattern ( ($mem |S2_$6| |p_$80|) ($call_transition |S1_$7| |S2_$6|)))) :named ax_664))
   (assert (! (forall( (|s1_$8| $state) (|s2_$8| $state) (|p_$139| $ptr) (|t_$34| $ctype) (|sz_$35| Int))(!(=> ($is_primitive |t_$34|) (=> ($state_spans_the_same |s1_$8| |s2_$8| |p_$139| ($array |t_$34| |sz_$35|)) (forall( (|i_$24| Int))(!(=> (and (< |i_$24| |sz_$35|) (<= 0 |i_$24|)) ($mem_eq |s1_$8| |s2_$8| ($idx ($ptr_cast |p_$139| |t_$34|) |i_$24| |t_$34|)))  :pattern ( ($mem |s2_$8| ($idx ($ptr_cast |p_$139| |t_$34|) |i_$24| |t_$34|)))))))  :pattern ( ($state_spans_the_same |s1_$8| |s2_$8| |p_$139| ($array |t_$34| |sz_$35|)) ($is_primitive |t_$34|)))) :named ax_665))
   (assert (! (forall( (|s2_$2| $state) (|s1_$2| $state))(= (forall( (|p_$28| $ptr))(!(=> ($mutable |s1_$2| |p_$28|) ($mutable |s2_$2| |p_$28|))  :pattern ( ($st |s2_$2| |p_$28|)) :pattern ( ($ts |s2_$2| |p_$28|)))) ($mutable_increases |s1_$2| |s2_$2|))) :named ax_666))
   (assert (! (forall( (|s2_$3| $state) (|s1_$3| $state))(= (and (= ($typemap |s2_$3|) ($typemap |s1_$3|)) (= ($statusmap |s2_$3|) ($statusmap |s1_$3|))) ($meta_eq |s1_$3| |s2_$3|))) :named ax_667))
   (assert (! (forall( (|S2_$3| $state) (|S1_$3| $state))(= (and (and (forall( (|p_$40| $ptr))(!(=> ($thread_local |S1_$3| |p_$40|) (and ($ts_eq |S1_$3| |S2_$3| |p_$40|) ($thread_local |S2_$3| |p_$40|)))  :pattern ( ($ts |S2_$3| |p_$40|)))) (and (forall( (|p_$39| $ptr))(!(=> ($thread_local |S1_$3| |p_$39|) (and ($thread_local |S2_$3| |p_$39|) ($st_eq |S1_$3| |S2_$3| |p_$39|)))  :pattern ( ($st |S2_$3| |p_$39|)))) (and (forall( (|p_$38| $ptr))(!(=> ($thread_local |S1_$3| |p_$38|) (and ($thread_local |S2_$3| |p_$38|) ($mem_eq |S1_$3| |S2_$3| |p_$38|)))  :pattern ( ($mem |S2_$3| |p_$38|)))) (forall( (|p_$37| $ptr))(!(=> ($nested |S2_$3| |p_$37|) ($nested |S1_$3| |p_$37|))  :pattern ( ($st |S2_$3| |p_$37|))))))) ($timestamp_post |S1_$3| |S2_$3|)) ($writes_nothing |S1_$3| |S2_$3|))) :named ax_668))
   (assert (! (forall( (|subject_$0| $field) (|approver_$0| $field) (|this_$0| $ptr) (|S2_$1| $state) (|S1_$1| $state))(= ($inv_is_approved_by_ptr |S1_$1| |S2_$1| |this_$0| ($int_to_ptr ($mem |S1_$1| ($dot |this_$0| |approver_$0|))) |subject_$0|) ($inv_is_approved_by |S1_$1| |S2_$1| |this_$0| |approver_$0| |subject_$0|))) :named ax_669))
   (assert (! (forall( (|subject_$1| $field) (|this_$1| $ptr) (|S2_$2| $state) (|S1_$2| $state))(= ($inv_is_owner_approved |S1_$2| |S2_$2| |this_$1| |subject_$1|) ($inv_is_approved_by_ptr |S1_$2| |S2_$2| |this_$1| ($owner |S1_$2| |this_$1|) |subject_$1|))) :named ax_670))
   (assert (! (forall( (|subject| $field) (|approver| $ptr) (|this| $ptr) (|S2_$0| $state) (|S1_$0| $state))(= (or (or (or (= 0 ($ref |approver|)) ($mem_eq |S1_$0| |S2_$0| ($dot |this| |subject|))) (and ($inv2nt |S1_$0| |S2_$0| |approver|) (not ($is_threadtype ($typ |approver|))))) (and ($is_threadtype ($typ |approver|)) (not (= ($read_vol_version |S2_$0| |this|) ($read_vol_version |S1_$0| |this|))))) ($inv_is_approved_by_ptr |S1_$0| |S2_$0| |this| |approver| |subject|))) :named ax_671))
   (assert (! (forall( (|sz_$0| Int) (|T| $ctype) (|p_$35| $ptr))(= (and (forall( (|S_$40| $state) (|i_$0| Int))(!(=> ($good_state |S_$40|) (=> (and (< |i_$0| |sz_$0|) (<= 0 |i_$0|)) (and (and ($typed |S_$40| ($idx |p_$35| |i_$0| |T|)) (not ($is_volatile |S_$40| ($idx |p_$35| |i_$0| |T|)))) (=> ($program_entry_point_ch |S_$40|) ($mutable |S_$40| ($idx |p_$35| |i_$0| |T|))))))  :pattern ( ($st |S_$40| ($idx |p_$35| |i_$0| |T|))) :pattern ( ($ts |S_$40| ($idx |p_$35| |i_$0| |T|))))) ($is |p_$35| |T|)) ($is_global_array |p_$35| |T| |sz_$0|))) :named ax_672))
   (assert (! (forall( (|sz_$1| Int) (|T_$0| $ctype) (|p_$41| $ptr) (|S_$46| $state))(= (forall( (|i_$1| Int))(!(=> (and (< |i_$1| |sz_$1|) (<= 0 |i_$1|)) ($thread_local2 |S_$46| ($idx |p_$41| |i_$1| |T_$0|) |T_$0|))  :pattern ( ($st |S_$46| ($idx |p_$41| |i_$1| |T_$0|))) :pattern ( ($ts |S_$46| ($idx |p_$41| |i_$1| |T_$0|))))) ($is_thread_local_array |S_$46| |p_$41| |T_$0| |sz_$1|))) :named ax_673))
   (assert (! (forall( (|sz_$10| Int) (|T_$9| $ctype) (|arr_$1| $ptr) (|q_$0| $ptr))(= (and ($in_range 0 ($index_within |q_$0| |arr_$1|) (- |sz_$10| 1)) ($in_full_extent_of |q_$0| ($idx |arr_$1| ($index_within |q_$0| |arr_$1|) |T_$9|))) ($in_array_full_extent_of |q_$0| |arr_$1| |T_$9| |sz_$10|))) :named ax_674))
   (assert (! (forall( (|sz_$11| Int) (|T_$10| $ctype) (|arr_$2| $ptr) (|q_$1| $ptr) (|S_$53| $state))(= (and ($in_range 0 ($index_within |q_$1| |arr_$2|) (- |sz_$11| 1)) ($in_extent_of |S_$53| |q_$1| ($idx |arr_$2| ($index_within |q_$1| |arr_$2|) |T_$10|))) ($in_array_extent_of |S_$53| |q_$1| |arr_$2| |T_$10| |sz_$11|))) :named ax_675))
   (assert (! (forall( (|sz_$2| Int) (|T_$1| $ctype) (|p_$42| $ptr) (|S_$47| $state))(= (and (forall( (|i_$2| Int))(!(=> (and (< |i_$2| |sz_$2|) (<= 0 |i_$2|)) ($mutable |S_$47| ($idx |p_$42| |i_$2| |T_$1|)))  :pattern ( ($st |S_$47| ($idx |p_$42| |i_$2| |T_$1|))) :pattern ( ($ts |S_$47| ($idx |p_$42| |i_$2| |T_$1|))))) ($is_array |S_$47| |p_$42| |T_$1| |sz_$2|)) ($is_mutable_array |S_$47| |p_$42| |T_$1| |sz_$2|))) :named ax_676))
   (assert (! (forall( (|sz_$7| Int) (|T_$6| $ctype) (|p_$49| $ptr))(= ($ptr ($array |T_$6| |sz_$7|) ($ref |p_$49|)) ($as_array |p_$49| |T_$6| |sz_$7|))) :named ax_677))
   (assert (! (forall( (|sz_$8| Int) (|T_$7| $ctype) (|arr| $ptr) (|s2_$4| $state) (|s1_$4| $state))(= (forall( (|#i| Int))(!(=> (and (<= 0 |#i|) (< |#i| |sz_$8|)) ($mem_eq |s1_$4| |s2_$4| ($idx |arr| |#i| |T_$7|)))  :pattern ( ($idx |arr| |#i| |T_$7|)))) ($array_eq |s1_$4| |s2_$4| |arr| |T_$7| |sz_$8|))) :named ax_678))
   (assert (! (forall( (|sz_$9| Int) (|T_$8| $ctype) (|arr_$0| $ptr) (|q| $ptr))(= (and (= |q| ($idx |arr_$0| ($index_within |q| |arr_$0|) |T_$8|)) ($in_range 0 ($index_within |q| |arr_$0|) (- |sz_$9| 1))) ($in_array |q| |arr_$0| |T_$8| |sz_$9|))) :named ax_679))
   (assert (! (forall( (|sz| Int) (|p_$3| $ptr) (|s_$1| $state))(= ($select_range.mem ($memory |s_$1|) |p_$3| |sz|) ($mem_range |s_$1| |p_$3| |sz|))) :named ax_680))
   (assert (! (forall( (|t_$0| $ctype))(= (= ($kind_of |t_$0|) $kind_composite) ($is_composite_ch |t_$0|))) :named ax_681))
   (assert (! (forall( (|t_$1| $ctype))(= (= ($kind_of |t_$1|) $kind_array) ($is_arraytype_ch |t_$1|))) :named ax_682))
   (assert (! (forall( (|t_$10| $ctype))(!(= (= $kind_primitive ($kind_of |t_$10|)) ($is_primitive |t_$10|))  :weight  0 :pattern ( ($is_primitive |t_$10|)))) :named ax_683))
   (assert (! (forall( (|t_$11| $ctype))(!(= (= ($kind_of |t_$11|) $kind_composite) ($is_composite |t_$11|))  :weight  0 :pattern ( ($is_composite |t_$11|)))) :named ax_684))
   (assert (! (forall( (|T_$11| $ctype))(!(=> ($is_primitive |T_$11|) (and (forall( (|r_$7| Int) (|S_$73| $state))(!(= ($mutable |S_$73| ($ptr |T_$11| |r_$7|)) ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|)))  :pattern ( ($extent_mutable |S_$73| ($ptr |T_$11| |r_$7|))))) (forall( (|r_$6| Int) (|p_$84| $ptr))(!(= (= |p_$84| ($ptr |T_$11| |r_$6|)) ($in_full_extent_of |p_$84| ($ptr |T_$11| |r_$6|)))  :pattern ( ($in_full_extent_of |p_$84| ($ptr |T_$11| |r_$6|)))))))  :pattern ( ($is_primitive |T_$11|)))) :named ax_685))
   (assert (! (forall( (|t_$12| $ctype))(!(= (= ($kind_of |t_$12|) $kind_array) ($is_arraytype |t_$12|))  :weight  0 :pattern ( ($is_arraytype |t_$12|)))) :named ax_686))
   (assert (! (forall( (|T_$12| $ctype))(!(=> ($is_primitive |T_$12|) (forall( (|S_$74| $state) (|r_$8| Int) (|p_$85| $ptr))(!(= (= |p_$85| ($ptr |T_$12| |r_$8|)) ($in_extent_of |S_$74| |p_$85| ($ptr |T_$12| |r_$8|)))  :pattern ( ($in_extent_of |S_$74| |p_$85| ($ptr |T_$12| |r_$8|))))))  :pattern ( ($is_primitive |T_$12|)))) :named ax_687))
   (assert (! (forall( (|t_$13| $ctype))(!(= (= $kind_thread ($kind_of |t_$13|)) ($is_threadtype |t_$13|))  :weight  0 :pattern ( ($is_threadtype |t_$13|)))) :named ax_688))
   (assert (! (forall( (|t_$14| $ctype))(!(=> ($is_composite |t_$14|) ($is_non_primitive |t_$14|))  :weight  0 :pattern ( ($is_composite |t_$14|)))) :named ax_689))
   (assert (! (forall( (|T_$14| $ctype))(!(=> ($is_primitive |T_$14|) (forall( (|S_$76| $state) (|r_$10| Int))(!(= (= 0 ($mem |S_$76| ($ptr |T_$14| |r_$10|))) ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|)))  :pattern ( ($extent_zero |S_$76| ($ptr |T_$14| |r_$10|))))))  :pattern ( ($is_primitive |T_$14|)))) :named ax_690))
   (assert (! (forall( (|t_$15| $ctype))(!(=> ($is_arraytype |t_$15|) ($is_non_primitive |t_$15|))  :weight  0 :pattern ( ($is_arraytype |t_$15|)))) :named ax_691))
   (assert (! (forall( (|T_$16| $ctype) (|s_$12| Int))(!(= |T_$16| ($element_type ($array |T_$16| |s_$12|)))  :pattern ( ($array |T_$16| |s_$12|)))) :named ax_692))
   (assert (! (forall( (|t_$16| $ctype))(!(=> ($is_threadtype |t_$16|) ($is_non_primitive |t_$16|))  :weight  0 :pattern ( ($is_threadtype |t_$16|)))) :named ax_693))
   (assert (! (forall( (|T_$17| $ctype) (|s_$13| Int))(!(= |s_$13| ($array_length ($array |T_$17| |s_$13|)))  :pattern ( ($array |T_$17| |s_$13|)))) :named ax_694))
   (assert (! (forall( (|t_$17| $ctype) (|s_$5| $ctype) (|min_$0| Int) (|max_$0| Int))(!(= (and (= |max_$0| ($nesting_max |t_$17| |s_$5|)) (and (= |min_$0| ($nesting_min |t_$17| |s_$5|)) ($is_nested |t_$17| |s_$5|))) ($is_nested_range |t_$17| |s_$5| |min_$0| |max_$0|))  :pattern ( ($is_nested_range |t_$17| |s_$5| |min_$0| |max_$0|)))) :named ax_695))
   (assert (! (forall( (|T_$18| $ctype) (|s_$14| Int))(!(= 0 ($ptr_level ($array |T_$18| |s_$14|)))  :pattern ( ($array |T_$18| |s_$14|)))) :named ax_696))
   (assert (! (forall( (|T_$19| $ctype) (|s_$15| Int))(!($is_arraytype ($array |T_$19| |s_$15|))  :pattern ( ($array |T_$19| |s_$15|)))) :named ax_697))
   (assert (! (forall( (|t_$19| $ctype))(!(=> ($is_record_type |t_$19|) ($is_primitive |t_$19|))  :pattern ( ($is_record_type |t_$19|)))) :named ax_698))
   (assert (! (forall( (|t_$2| $ctype))(= ($is_non_primitive_ch |t_$2|) (not (= $kind_primitive ($kind_of |t_$2|))))) :named ax_699))
   (assert (! (forall( (|T_$20| $ctype) (|s_$16| Int))(!(not ($is_claimable ($array |T_$20| |s_$16|)))  :pattern ( ($array |T_$20| |s_$16|)))) :named ax_700))
   (assert (! (forall( (|T_$21| $ctype) (|s_$17| Int))(!(= (* ($sizeof |T_$21|) |s_$17|) ($sizeof ($array |T_$21| |s_$17|)))  :pattern ( ($sizeof ($array |T_$21| |s_$17|))))) :named ax_701))
   (assert (! (forall( (|t_$3| $ctype) (|p_$7| $ptr) (|S| $state))(= ($read_ptr |S| |p_$7| |t_$3|) ($ptr |t_$3| ($mem |S| |p_$7|)))) :named ax_702))
   (assert (! (forall( (|t_$38| $ctype) (|x_$26| Int) (|y_$8| Int))(!(= ($unchk_add |t_$38| |x_$26| |y_$8|) ($unchecked |t_$38| (+ |x_$26| |y_$8|)))  :weight  0 :pattern ( ($unchk_add |t_$38| |x_$26| |y_$8|)))) :named ax_703))
   (assert (! (forall( (|t_$39| $ctype) (|x_$27| Int) (|y_$9| Int))(!(= ($unchk_sub |t_$39| |x_$27| |y_$9|) ($unchecked |t_$39| (- |x_$27| |y_$9|)))  :weight  0 :pattern ( ($unchk_sub |t_$39| |x_$27| |y_$9|)))) :named ax_704))
   (assert (! (forall( (|t_$4| $ctype) (|f| $field))(= (and (= |t_$4| ($field_parent_type |f|)) ($is_base_field |f|)) ($static_field_properties |f| |t_$4|))) :named ax_705))
   (assert (! (forall( (|t_$40| $ctype) (|x_$28| Int) (|y_$10| Int))(!(= ($unchk_mul |t_$40| |x_$28| |y_$10|) ($unchecked |t_$40| (* |x_$28| |y_$10|)))  :weight  0 :pattern ( ($unchk_mul |t_$40| |x_$28| |y_$10|)))) :named ax_706))
   (assert (! (forall( (|t_$41| $ctype) (|x_$31| Int) (|y_$13| Int))(!(= ($unchecked |t_$41| (* |x_$31| ($_pow2 |y_$13|))) ($_shl |t_$41| |x_$31| |y_$13|))  :weight  0 :pattern ( ($_shl |t_$41| |x_$31| |y_$13|)))) :named ax_707))
   (assert (! (forall( (|t_$42| $ctype) (|val_$17| Int))(!(=> ($in_range_t |t_$42| |val_$17|) (= |val_$17| ($unchecked |t_$42| |val_$17|)))  :pattern ( ($unchecked |t_$42| |val_$17|)))) :named ax_708))
   (assert (! (forall( (|t_$43| $ctype) (|val_$18| Int))(!($in_range_t |t_$43| ($unchecked |t_$43| |val_$18|))  :pattern ( ($unchecked |t_$43| |val_$18|)))) :named ax_709))
   (assert (! (forall( (|t_$44| $ctype) (|x_$40| Int) (|y_$15| Int) (|z_$0| Int))(!(=> (and (>= |x_$40| 0) (and ($in_range_t |t_$44| |x_$40|) ($in_range_t |t_$44| (- ($_pow2 |y_$15|) 1)))) (= (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| (- ($_pow2 |y_$15|) 1))))  :pattern ( (mod |x_$40| ($_pow2 |y_$15|)) ($_and |t_$44| |x_$40| |z_$0|)))) :named ax_710))
   (assert (! (forall( (|t_$45| $ctype) (|x_$46| Int) (|y_$21| Int))(!(=> (and (<= 0 |x_$46|) ($in_range_t |t_$45| |x_$46|)) (and (<= 0 ($_and |t_$45| |x_$46| |y_$21|)) (<= ($_and |t_$45| |x_$46| |y_$21|) |x_$46|)))  :pattern ( ($_and |t_$45| |x_$46| |y_$21|)))) :named ax_711))
   (assert (! (forall( (|t_$46| $ctype) (|x_$47| Int) (|y_$22| Int))(!(=> (and (and (and (<= 0 |y_$22|) (<= 0 |x_$47|)) ($in_range_t |t_$46| |x_$47|)) ($in_range_t |t_$46| |y_$22|)) (and (<= ($_and |t_$46| |x_$47| |y_$22|) |y_$22|) (<= ($_and |t_$46| |x_$47| |y_$22|) |x_$47|)))  :pattern ( ($_and |t_$46| |x_$47| |y_$22|)))) :named ax_712))
   (assert (! (forall( (|t_$47| $ctype) (|x_$48| Int) (|y_$23| Int))(!(=> (and (and (and (<= 0 |y_$23|) (<= 0 |x_$48|)) ($in_range_t |t_$47| |x_$48|)) ($in_range_t |t_$47| |y_$23|)) (and (<= 0 ($_or |t_$47| |x_$48| |y_$23|)) (<= ($_or |t_$47| |x_$48| |y_$23|) (+ |x_$48| |y_$23|))))  :pattern ( ($_or |t_$47| |x_$48| |y_$23|)))) :named ax_713))
   (assert (! (forall( (|t_$48| $ctype) (|x_$49| Int) (|y_$24| Int))(!(=> (and (and (and (<= 0 |y_$24|) (<= 0 |x_$49|)) ($in_range_t |t_$48| |x_$49|)) ($in_range_t |t_$48| |y_$24|)) (and (<= |y_$24| ($_or |t_$48| |x_$49| |y_$24|)) (<= |x_$49| ($_or |t_$48| |x_$49| |y_$24|))))  :pattern ( ($_or |t_$48| |x_$49| |y_$24|)))) :named ax_714))
   (assert (! (forall( (|t_$49| $ctype) (|x_$50| Int) (|y_$25| Int) (|z_$1| Int))(!(=> (and (and (and (< |y_$25| ($_pow2 |z_$1|)) (and (< |x_$50| ($_pow2 |z_$1|)) (and (< |z_$1| 64) (and (<= 0 |z_$1|) (and (<= 0 |y_$25|) (<= 0 |x_$50|)))))) ($in_range_t |t_$49| |x_$50|)) ($in_range_t |t_$49| |y_$25|)) (< ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|)))  :pattern ( ($_or |t_$49| |x_$50| |y_$25|) ($_pow2 |z_$1|)))) :named ax_715))
   (assert (! (forall( (|t_$5| $ctype) (|s_$2| $struct))(= ($vs_base |s_$2| |t_$5|) ($ptr |t_$5| ($vs_base_ref |s_$2|)))) :named ax_716))
   (assert (! (forall( (|t_$50| $ctype) (|x_$51| Int) (|y_$26| Int))(!(=> (and ($in_range_u1 |y_$26|) ($in_range_u1 |x_$51|)) ($in_range_u1 ($_or |t_$50| |x_$51| |y_$26|)))  :pattern ( ($_or |t_$50| |x_$51| |y_$26|)))) :named ax_717))
   (assert (! (forall( (|t_$51| $ctype) (|x_$52| Int) (|y_$27| Int))(!(=> (and ($in_range_u2 |y_$27|) ($in_range_u2 |x_$52|)) ($in_range_u2 ($_or |t_$51| |x_$52| |y_$27|)))  :pattern ( ($_or |t_$51| |x_$52| |y_$27|)))) :named ax_718))
   (assert (! (forall( (|t_$52| $ctype) (|x_$53| Int) (|y_$28| Int))(!(=> (and ($in_range_u4 |y_$28|) ($in_range_u4 |x_$53|)) ($in_range_u4 ($_or |t_$52| |x_$53| |y_$28|)))  :pattern ( ($_or |t_$52| |x_$53| |y_$28|)))) :named ax_719))
   (assert (! (forall( (|t_$53| $ctype) (|x_$54| Int) (|y_$29| Int))(!(=> (and ($in_range_u8 |y_$29|) ($in_range_u8 |x_$54|)) ($in_range_u8 ($_or |t_$53| |x_$54| |y_$29|)))  :pattern ( ($_or |t_$53| |x_$54| |y_$29|)))) :named ax_720))
   (assert (! (forall( (|t_$54| $ctype) (|x_$55| Int) (|y_$30| Int))(!(=> (and ($in_range_u1 |y_$30|) ($in_range_u1 |x_$55|)) ($in_range_u1 ($_and |t_$54| |x_$55| |y_$30|)))  :pattern ( ($_and |t_$54| |x_$55| |y_$30|)))) :named ax_721))
   (assert (! (forall( (|t_$55| $ctype) (|x_$56| Int) (|y_$31| Int))(!(=> (and ($in_range_u2 |y_$31|) ($in_range_u2 |x_$56|)) ($in_range_u2 ($_and |t_$55| |x_$56| |y_$31|)))  :pattern ( ($_and |t_$55| |x_$56| |y_$31|)))) :named ax_722))
   (assert (! (forall( (|t_$56| $ctype) (|x_$57| Int) (|y_$32| Int))(!(=> (and ($in_range_u4 |y_$32|) ($in_range_u4 |x_$57|)) ($in_range_u4 ($_and |t_$56| |x_$57| |y_$32|)))  :pattern ( ($_and |t_$56| |x_$57| |y_$32|)))) :named ax_723))
   (assert (! (forall( (|t_$57| $ctype) (|x_$58| Int) (|y_$33| Int))(!(=> (and ($in_range_u8 |y_$33|) ($in_range_u8 |x_$58|)) ($in_range_u8 ($_and |t_$57| |x_$58| |y_$33|)))  :pattern ( ($_and |t_$57| |x_$58| |y_$33|)))) :named ax_724))
   (assert (! (forall( (|t_$58| $ctype) (|x_$59| Int) (|y_$34| Int))(!(=> (and ($in_range_u1 |y_$34|) ($in_range_u1 |x_$59|)) ($in_range_u1 ($_xor |t_$58| |x_$59| |y_$34|)))  :pattern ( ($_xor |t_$58| |x_$59| |y_$34|)))) :named ax_725))
   (assert (! (forall( (|t_$59| $ctype) (|x_$60| Int) (|y_$35| Int))(!(=> (and ($in_range_u2 |y_$35|) ($in_range_u2 |x_$60|)) ($in_range_u2 ($_xor |t_$59| |x_$60| |y_$35|)))  :pattern ( ($_xor |t_$59| |x_$60| |y_$35|)))) :named ax_726))
   (assert (! (forall( (|t_$60| $ctype) (|x_$61| Int) (|y_$36| Int))(!(=> (and ($in_range_u4 |y_$36|) ($in_range_u4 |x_$61|)) ($in_range_u4 ($_xor |t_$60| |x_$61| |y_$36|)))  :pattern ( ($_xor |t_$60| |x_$61| |y_$36|)))) :named ax_727))
   (assert (! (forall( (|t_$61| $ctype) (|x_$62| Int) (|y_$37| Int))(!(=> (and ($in_range_u8 |y_$37|) ($in_range_u8 |x_$62|)) ($in_range_u8 ($_xor |t_$61| |x_$62| |y_$37|)))  :pattern ( ($_xor |t_$61| |x_$62| |y_$37|)))) :named ax_728))
   (assert (! (forall( (|t_$62| $ctype) (|x_$63| Int))(!($in_range_t |t_$62| ($_not |t_$62| |x_$63|))  :pattern ( ($_not |t_$62| |x_$63|)))) :named ax_729))
   (assert (! (forall( (|t_$63| $ctype) (|x_$64| Int))(!(= ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|)) ($_not |t_$63| 0))  :pattern ( ($_or |t_$63| |x_$64| ($_not |t_$63| |x_$64|))))) :named ax_730))
   (assert (! (forall( (|t_$64| $ctype) (|x_$65| Int))(!(= 0 ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|)))  :pattern ( ($_and |t_$64| |x_$65| ($_not |t_$64| |x_$65|))))) :named ax_731))
   (assert (! (forall( (|t_$65| $ctype) (|x_$66| Int))(!(=> ($in_range_t |t_$65| |x_$66|) (= |x_$66| ($_or |t_$65| |x_$66| 0)))  :pattern ( ($_or |t_$65| |x_$66| 0)))) :named ax_732))
   (assert (! (forall( (|t_$66| $ctype) (|x_$67| Int))(!(= ($_or |t_$66| |x_$67| ($_not |t_$66| 0)) ($_not |t_$66| 0))  :pattern ( ($_or |t_$66| |x_$67| ($_not |t_$66| 0))))) :named ax_733))
   (assert (! (forall( (|t_$67| $ctype) (|x_$68| Int))(!(=> ($in_range_t |t_$67| |x_$68|) (= |x_$68| ($_or |t_$67| |x_$68| |x_$68|)))  :pattern ( ($_or |t_$67| |x_$68| |x_$68|)))) :named ax_734))
   (assert (! (forall( (|t_$68| $ctype) (|x_$69| Int))(!(= 0 ($_and |t_$68| |x_$69| 0))  :pattern ( ($_and |t_$68| |x_$69| 0)))) :named ax_735))
   (assert (! (forall( (|t_$69| $ctype) (|x_$70| Int))(!(=> ($in_range_t |t_$69| |x_$70|) (= |x_$70| ($_and |t_$69| |x_$70| ($_not |t_$69| 0))))  :pattern ( ($_and |t_$69| |x_$70| ($_not |t_$69| 0))))) :named ax_736))
   (assert (! (forall( (|t_$7| $ctype) (|p_$34| $ptr))(= (and (forall( (|S_$39| $state))(!(=> ($program_entry_point |S_$39|) (and (= $set_empty ($owns |S_$39| |p_$34|)) ($extent_mutable |S_$39| |p_$34|)))  :pattern ( ($program_entry_point |S_$39|)))) (and (forall( (|S_$38| $state) (|f_$3| $field) (|i| Int) (|tt| $ctype))(!(=> ($good_state |S_$38|) (and ($typed |S_$38| |p_$34|) ($is_object_root |S_$38| |p_$34|)))  :pattern ( ($ts |S_$38| ($idx ($dot |p_$34| |f_$3|) |i| |tt|))))) (and (forall( (|S_$37| $state) (|f_$2| $field))(!(=> ($good_state |S_$37|) (and ($typed |S_$37| |p_$34|) ($is_object_root |S_$37| |p_$34|)))  :pattern ( ($ts |S_$37| ($dot |p_$34| |f_$2|))))) (forall( (|S_$36| $state))(!(=> ($good_state |S_$36|) (and ($typed |S_$36| |p_$34|) ($is_object_root |S_$36| |p_$34|)))  :pattern ( ($ts |S_$36| |p_$34|))))))) ($is_global |p_$34| |t_$7|))) :named ax_737))
   (assert (! (forall( (|t_$70| $ctype) (|x_$71| Int))(!(=> ($in_range_t |t_$70| |x_$71|) (= |x_$71| ($_and |t_$70| |x_$71| |x_$71|)))  :pattern ( ($_and |t_$70| |x_$71| |x_$71|)))) :named ax_738))
   (assert (! (forall( (|t_$71| $ctype) (|x_$72| Int) (|y_$38| Int))(!(= |y_$38| ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|))  :pattern ( ($_and |t_$71| ($_or |t_$71| |x_$72| |y_$38|) |y_$38|)))) :named ax_739))
   (assert (! (forall( (|t_$72| $ctype) (|x_$73| Int) (|y_$39| Int))(!(= |x_$73| ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|))  :pattern ( ($_and |t_$72| ($_or |t_$72| |x_$73| |y_$39|) |x_$73|)))) :named ax_740))
   (assert (! (forall( (|t_$73| $ctype) (|x_$74| Int))(!(=> ($in_range_t |t_$73| |x_$74|) (= |x_$74| ($_xor |t_$73| |x_$74| 0)))  :pattern ( ($_xor |t_$73| |x_$74| 0)))) :named ax_741))
   (assert (! (forall( (|t_$74| $ctype) (|x_$75| Int))(!(= 0 ($_xor |t_$74| |x_$75| |x_$75|))  :pattern ( ($_xor |t_$74| |x_$75| |x_$75|)))) :named ax_742))
   (assert (! (forall( (|t_$75| $ctype) (|x_$76| Int))(!(= ($_xor |t_$75| |x_$76| ($_not |t_$75| 0)) ($_not |t_$75| |x_$76|))  :pattern ( ($_xor |t_$75| |x_$76| ($_not |t_$75| 0))))) :named ax_743))
   (assert (! (forall( (|t_$76| $ctype) (|x_$77| Int))(!(=> ($in_range_t |t_$76| |x_$77|) (= |x_$77| ($_not |t_$76| ($_not |t_$76| |x_$77|))))  :pattern ( ($_not |t_$76| ($_not |t_$76| |x_$77|))))) :named ax_744))
   (assert (! (forall( (|t_$77| $ctype) (|x_$78| Int) (|y_$40| Int))(!(= ($_or |t_$77| |y_$40| |x_$78|) ($_or |t_$77| |x_$78| |y_$40|))  :pattern ( ($_or |t_$77| |x_$78| |y_$40|)))) :named ax_745))
   (assert (! (forall( (|t_$78| $ctype) (|x_$79| Int) (|y_$41| Int))(!(= ($_xor |t_$78| |y_$41| |x_$79|) ($_xor |t_$78| |x_$79| |y_$41|))  :pattern ( ($_xor |t_$78| |x_$79| |y_$41|)))) :named ax_746))
   (assert (! (forall( (|t_$79| $ctype) (|x_$80| Int) (|y_$42| Int))(!(= ($_and |t_$79| |y_$42| |x_$80|) ($_and |t_$79| |x_$80| |y_$42|))  :pattern ( ($_and |t_$79| |x_$80| |y_$42|)))) :named ax_747))
   (assert (! (forall( (|t_$80| $ctype) (|x_$82| Int) (|y_$44| Int))(!(= (+ |x_$82| |y_$44|) ($op_add |t_$80| |x_$82| |y_$44|))  :weight  0 :pattern ( ($op_add |t_$80| |x_$82| |y_$44|)))) :named ax_748))
   (assert (! (forall( (|t_$81| $ctype) (|x_$83| Int) (|y_$45| Int))(!(= (- |x_$83| |y_$45|) ($op_sub |t_$81| |x_$83| |y_$45|))  :weight  0 :pattern ( ($op_sub |t_$81| |x_$83| |y_$45|)))) :named ax_749))
   (assert (! (forall( (|t_$82| $ctype) (|x_$84| Int) (|y_$46| Int))(!(= (div |x_$84| |y_$46|) ($op_div |t_$82| |x_$84| |y_$46|))  :weight  0 :pattern ( ($op_div |t_$82| |x_$84| |y_$46|)))) :named ax_750))
   (assert (! (forall( (|t_$83| $ctype) (|x_$85| Int) (|y_$47| Int))(!(= (< |x_$85| |y_$47|) ($op_lt |t_$83| |x_$85| |y_$47|))  :weight  0 :pattern ( ($op_lt |t_$83| |x_$85| |y_$47|)))) :named ax_751))
   (assert (! (forall( (|t_$84| $ctype) (|x_$86| Int) (|y_$48| Int))(!(= (<= |x_$86| |y_$48|) ($op_le |t_$84| |x_$86| |y_$48|))  :weight  0 :pattern ( ($op_le |t_$84| |x_$86| |y_$48|)))) :named ax_752))
   (assert (! (forall( (|t_$85| $ctype) (|x_$87| Int) (|y_$49| Int))(!(= (> |x_$87| |y_$49|) ($op_gt |t_$85| |x_$87| |y_$49|))  :weight  0 :pattern ( ($op_gt |t_$85| |x_$87| |y_$49|)))) :named ax_753))
   (assert (! (forall( (|t_$86| $ctype) (|x_$88| Int) (|y_$50| Int))(!(= (>= |x_$88| |y_$50|) ($op_ge |t_$86| |x_$88| |y_$50|))  :weight  0 :pattern ( ($op_ge |t_$86| |x_$88| |y_$50|)))) :named ax_754))
   (assert (! (forall( (|t_$89| $ctype))(!(=> ($is_math_type |t_$89|) ($is_primitive |t_$89|))  :pattern ( ($is_math_type |t_$89|)))) :named ax_755))
   (assert (! (forall( (|t_$90| $ctype))(!(=> ($is_fnptr_type |t_$90|) ($is_primitive |t_$90|))  :pattern ( ($is_fnptr_type |t_$90|)))) :named ax_756))
   (assert (! (forall( (|t| $ctype))(= (= $kind_primitive ($kind_of |t|)) ($is_primitive_ch |t|))) :named ax_757))
   (assert (! (forall( (|the_new| $ptr) (|the_old| $ptr))(!(= (forall( (|o_$2| $ptr))(=> ($claims_obj |the_old| |o_$2|) ($claims_obj |the_new| |o_$2|))) ($claims_upgrade |the_new| |the_old|))  :pattern ( ($claims_upgrade |the_new| |the_old|)))) :named ax_758))
   (assert (! (forall( (|tok_$0| $token) (|c_$0| $ptr) (|#s2_$2| $state) (|#s1_$4| $state))(= (and (and (and (and (and (and ($good_state_ext |tok_$0| |#s2_$2|) ($full_stop_ext |tok_$0| |#s1_$4|)) ($closed_is_transitive |#s1_$4|)) ($closed_is_transitive |#s2_$2|)) ($forall_inv2_when_closed |#s1_$4| |#s2_$2|)) ($valid_claim |#s1_$4| |c_$0|)) ($closed |#s2_$2| |c_$0|)) ($claim_transitivity_assumptions |#s1_$4| |#s2_$2| |c_$0| |tok_$0|))) :named ax_759))
   (assert (! (forall( (|tok| $token) (|c| $ptr) (|#s1_$3| $state))(= (and ($good_state_ext |tok| |#s1_$3|) ($closed_is_transitive |#s1_$3|)) ($claim_initial_assumptions |#s1_$3| |c| |tok|))) :named ax_760))
   (assert (! (forall( (|ts| $type_state))(!(and ($is_non_primitive ($typ ($ts_emb |ts|))) (not (= $kind_primitive ($kind_of ($typ ($ts_emb |ts|))))))  :pattern ( ($ts_emb |ts|)))) :named ax_761))
   (assert (! (forall( (|typ_$0| $ctype) (|#p_$8| $ptr) (|#s2| $state) (|#s1_$0| $state))(= (or (and (not ($closed |#s2| |#p_$8|)) (not ($closed |#s1_$0| |#p_$8|))) (and ($nonvolatile_spans_the_same |#s1_$0| |#s2| |#p_$8| |typ_$0|) ($inv2 |#s1_$0| |#s2| |#p_$8| |typ_$0|))) ($inv2_when_closed |#s1_$0| |#s2| |#p_$8| |typ_$0|))) :named ax_762))
   (assert (! (forall( (|typ| $ctype) (|#p_$7| $ptr) (|#s1| $state))(= ($inv2 |#s1| |#s1| |#p_$7| |typ|) ($inv |#s1| |#p_$7| |typ|))) :named ax_763))
   (assert (! (forall( (|u| $ptr) (|S_$41| $state))(= ($ts_active_option ($ts |S_$41| |u|)) ($active_option |S_$41| |u|))) :named ax_764))
   (assert (! (forall( (|v| Bool))(= (ite |v| 1 0) ($bool_to_int |v|))) :named ax_765))
   (assert (! (forall( (|val_$10| Int))(!(= ($in_range_t ^^i4 |val_$10|) ($in_range_i4 |val_$10|))  :pattern ( ($in_range_t ^^i4 |val_$10|)))) :named ax_766))
   (assert (! (forall( (|val_$11| Int))(!(= ($in_range_t ^^i8 |val_$11|) ($in_range_i8 |val_$11|))  :pattern ( ($in_range_t ^^i8 |val_$11|)))) :named ax_767))
   (assert (! (forall( (|val_$12| Int))(!(= ($in_range_u1 |val_$12|) ($in_range_t ^^u1 |val_$12|))  :pattern ( ($in_range_t ^^u1 |val_$12|)))) :named ax_768))
   (assert (! (forall( (|val_$13| Int))(!(= ($in_range_u2 |val_$13|) ($in_range_t ^^u2 |val_$13|))  :pattern ( ($in_range_t ^^u2 |val_$13|)))) :named ax_769))
   (assert (! (forall( (|val_$14| Int))(!(= ($in_range_u4 |val_$14|) ($in_range_t ^^u4 |val_$14|))  :pattern ( ($in_range_t ^^u4 |val_$14|)))) :named ax_770))
   (assert (! (forall( (|val_$15| Int))(!(= ($in_range_u8 |val_$15|) ($in_range_t ^^u8 |val_$15|))  :pattern ( ($in_range_t ^^u8 |val_$15|)))) :named ax_771))
   (assert (! (forall( (|val_$16| Int))(!($in_range_t ^^mathint |val_$16|)  :pattern ( ($in_range_t ^^mathint |val_$16|)))) :named ax_772))
   (assert (! (forall( (|val_$19| Int))(!(=> ($in_range_u1 |val_$19|) (= |val_$19| ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|))))  :pattern ( ($unchecked ^^u1 ($unchecked ^^i1 |val_$19|))))) :named ax_773))
   (assert (! (forall( (|val_$20| Int))(!(=> ($in_range_u2 |val_$20|) (= |val_$20| ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|))))  :pattern ( ($unchecked ^^u2 ($unchecked ^^i2 |val_$20|))))) :named ax_774))
   (assert (! (forall( (|val_$21| Int))(!(=> ($in_range_u4 |val_$21|) (= |val_$21| ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|))))  :pattern ( ($unchecked ^^u4 ($unchecked ^^i4 |val_$21|))))) :named ax_775))
   (assert (! (forall( (|val_$22| Int))(!(=> ($in_range_u8 |val_$22|) (= |val_$22| ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|))))  :pattern ( ($unchecked ^^u8 ($unchecked ^^i8 |val_$22|))))) :named ax_776))
   (assert (! (forall( (|val_$23| Int))(!(=> ($in_range_i1 |val_$23|) (= |val_$23| ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|))))  :pattern ( ($unchecked ^^i1 ($unchecked ^^u1 |val_$23|))))) :named ax_777))
   (assert (! (forall( (|val_$24| Int))(!(=> ($in_range_i2 |val_$24|) (= |val_$24| ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|))))  :pattern ( ($unchecked ^^i2 ($unchecked ^^u2 |val_$24|))))) :named ax_778))
   (assert (! (forall( (|val_$25| Int))(!(=> ($in_range_i4 |val_$25|) (= |val_$25| ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|))))  :pattern ( ($unchecked ^^i4 ($unchecked ^^u4 |val_$25|))))) :named ax_779))
   (assert (! (forall( (|val_$26| Int))(!(=> ($in_range_i8 |val_$26|) (= |val_$26| ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|))))  :pattern ( ($unchecked ^^i8 ($unchecked ^^u8 |val_$26|))))) :named ax_780))
   (assert (! (forall( (|val_$8| Int))(!(= ($in_range_t ^^i1 |val_$8|) ($in_range_i1 |val_$8|))  :pattern ( ($in_range_t ^^i1 |val_$8|)))) :named ax_781))
   (assert (! (forall( (|val_$9| Int))(!(= ($in_range_t ^^i2 |val_$9|) ($in_range_i2 |val_$9|))  :pattern ( ($in_range_t ^^i2 |val_$9|)))) :named ax_782))
   (assert (! (forall( (|vol_$0| Bool) (|union_$0| Bool) (|sz_$6| Int) (|T_$5| $ctype) (|f_$7| $field))(= (and (forall( (|S_$51| $state) (|p_$46| $ptr))(!(=> (and (or (= |f_$7| ($active_option |S_$51| |p_$46|)) (not |union_$0|)) ($typed2 |S_$51| |p_$46| ($field_parent_type |f_$7|))) (and (= |f_$7| ($path |S_$51| ($as_array ($dot |p_$46| |f_$7|) |T_$5| |sz_$6|))) (and (= |p_$46| ($emb |S_$51| ($as_array ($dot |p_$46| |f_$7|) |T_$5| |sz_$6|))) (and ($typed |S_$51| ($as_array ($dot |p_$46| |f_$7|) |T_$5| |sz_$6|)) ($extent_hint ($as_array ($dot |p_$46| |f_$7|) |T_$5| |sz_$6|) |p_$46|)))))  :pattern ( ($ts |S_$51| ($as_array ($dot |p_$46| |f_$7|) |T_$5| |sz_$6|))) :pattern ( ($st |S_$51| ($as_array ($dot |p_$46| |f_$7|) |T_$5| |sz_$6|))) :pattern ( ($mem |S_$51| ($as_array ($dot |p_$46| |f_$7|) |T_$5| |sz_$6|))))) (forall( (|p_$47| $ptr) (|i_$6| Int))(!($instantiate_ptr ($as_array ($dot |p_$47| |f_$7|) |T_$5| |sz_$6|))  :pattern ( ($idx ($dot |p_$47| |f_$7|) |i_$6| |T_$5|))))) ($no_inline_array_field_properties |f_$7| |T_$5| |sz_$6| |union_$0| |vol_$0|))) :named ax_783))
   (assert (! (forall( (|vol| Bool) (|union| Bool) (|sz_$5| Int) (|T_$4| $ctype) (|f_$6| $field))(= (forall( (|S_$50| $state) (|p_$45| $ptr) (|i_$5| Int))(!(=> (and (and (and (< |i_$5| |sz_$5|) (<= 0 |i_$5|)) (or (= |f_$6| ($active_option |S_$50| |p_$45|)) (not |union|))) ($typed2 |S_$50| |p_$45| ($field_parent_type |f_$6|))) (and (and (= |p_$45| ($emb |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) (and (= |vol| ($is_volatile |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) ($typed |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|)))) (= ($path |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|)) ($array_path |f_$6| |i_$5|))))  :pattern ( ($ts |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($st |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))) :pattern ( ($mem |S_$50| ($idx ($dot |p_$45| |f_$6|) |i_$5| |T_$4|))))) ($array_field_properties |f_$6| |T_$4| |sz_$5| |union| |vol|))) :named ax_784))
   (assert (! (forall( (|x_$1| Int))(= ($int_to_bool |x_$1|) (not (= |x_$1| 0)))) :named ax_785))
   (assert (! (forall( (|x_$14| Int))(= ($u8_to_ptr |x_$14|) ($ptr ^^void |x_$14|))) :named ax_786))
   (assert (! (forall( (|x_$15| Int))(= ($ptr ^^void |x_$15|) ($i8_to_ptr |x_$15|))) :named ax_787))
   (assert (! (forall( (|x_$16| Int))(= ($u4_to_ptr |x_$16|) ($ptr ^^void |x_$16|))) :named ax_788))
   (assert (! (forall( (|x_$17| Int))(= ($ptr ^^void |x_$17|) ($i4_to_ptr |x_$17|))) :named ax_789))
   (assert (! (forall( (|x_$18| Int))(= ($u2_to_ptr |x_$18|) ($ptr ^^void |x_$18|))) :named ax_790))
   (assert (! (forall( (|x_$19| Int))(= ($ptr ^^void |x_$19|) ($i2_to_ptr |x_$19|))) :named ax_791))
   (assert (! (forall( (|x_$2| Int))(= ($in_range_i1 |x_$2|) ($in_range $min.i1 |x_$2| $max.i1))) :named ax_792))
   (assert (! (forall( (|x_$20| Int))(= ($u1_to_ptr |x_$20|) ($ptr ^^void |x_$20|))) :named ax_793))
   (assert (! (forall( (|x_$21| Int))(= ($ptr ^^void |x_$21|) ($i1_to_ptr |x_$21|))) :named ax_794))
   (assert (! (forall( (|x_$24| Int) (|y_$7| Int))(!(= (= |y_$7| |x_$24|) ($rec_base_eq |x_$24| |y_$7|))  :pattern ( ($rec_base_eq |x_$24| |y_$7|)))) :named ax_795))
   (assert (! (forall( (|x_$25| Bool))(!(= |x_$25| ($bool_id |x_$25|))  :weight  0 :pattern ( ($bool_id |x_$25|)))) :named ax_796))
   (assert (! (forall( (|x_$29| Int) (|y_$11| Int))(!(=> (and (> (+ |x_$29| |y_$11|) $max.u8) (and ($in_range_u8 |y_$11|) ($in_range_u8 |x_$29|))) (= (- (- (+ |x_$29| |y_$11|) $max.u8) 1) ($unchk_add ^^u8 |x_$29| |y_$11|)))  :pattern ( ($unchk_add ^^u8 |x_$29| |y_$11|)))) :named ax_797))
   (assert (! (forall( (|x_$3| Int))(= ($in_range_i2 |x_$3|) ($in_range $min.i2 |x_$3| $max.i2))) :named ax_798))
   (assert (! (forall( (|x_$30| Int) (|y_$12| Int))(!(=> (and (> (+ |x_$30| |y_$12|) $max.u8) (and ($in_range_u4 |y_$12|) ($in_range_u4 |x_$30|))) (= (- (- (+ |x_$30| |y_$12|) $max.u4) 1) ($unchk_add ^^u4 |x_$30| |y_$12|)))  :pattern ( ($unchk_add ^^u4 |x_$30| |y_$12|)))) :named ax_799))
   (assert (! (forall( (|x_$32| Int) (|y_$14| Int))(!(= (div |x_$32| ($_pow2 |y_$14|)) ($_shr |x_$32| |y_$14|))  :weight  0 :pattern ( ($_shr |x_$32| |y_$14|)))) :named ax_800))
   (assert (! (forall( (|x_$33| Int) (|from_$0| Int) (|to_$0| Int) (|xs| Int) (|val_$0| Int))(!(=> (and (<= |to_$0| |xs|) (and (< |from_$0| |to_$0|) (<= 0 |from_$0|))) (=> (and (< |val_$0| ($_pow2 (- |to_$0| |from_$0|))) (<= 0 |val_$0|)) (and (<= 0 ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|)) (< ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|) ($_pow2 |xs|)))))  :pattern ( ($bv_update |x_$33| |xs| |from_$0| |to_$0| |val_$0|)))) :named ax_801))
   (assert (! (forall( (|x_$4| Int))(= ($in_range_i4 |x_$4|) ($in_range $min.i4 |x_$4| $max.i4))) :named ax_802))
   (assert (! (forall( (|x_$41| Int) (|y_$16| Int))(!(= (mod |x_$41| |y_$16|) (- |x_$41| (* (div |x_$41| |y_$16|) |y_$16|)))  :pattern ( (mod |x_$41| |y_$16|)) :pattern ( (div |x_$41| |y_$16|)))) :named ax_803))
   (assert (! (forall( (|x_$42| Int) (|y_$17| Int))(!(=> (and (<= 0 |x_$42|) (< 0 |y_$17|)) (and (<= 0 (mod |x_$42| |y_$17|)) (< (mod |x_$42| |y_$17|) |y_$17|)))  :pattern ( (mod |x_$42| |y_$17|)))) :named ax_804))
   (assert (! (forall( (|x_$43| Int) (|y_$18| Int))(!(=> (and (< |y_$18| 0) (<= 0 |x_$43|)) (and (<= 0 (mod |x_$43| |y_$18|)) (< (mod |x_$43| |y_$18|) (- 0 |y_$18|))))  :pattern ( (mod |x_$43| |y_$18|)))) :named ax_805))
   (assert (! (forall( (|x_$44| Int) (|y_$19| Int))(!(=> (and (<= |x_$44| 0) (< 0 |y_$19|)) (and (<= (mod |x_$44| |y_$19|) 0) (< (- 0 |y_$19|) (mod |x_$44| |y_$19|))))  :pattern ( (mod |x_$44| |y_$19|)))) :named ax_806))
   (assert (! (forall( (|x_$45| Int) (|y_$20| Int))(!(=> (and (< |y_$20| 0) (<= |x_$45| 0)) (and (< |y_$20| (mod |x_$45| |y_$20|)) (<= (mod |x_$45| |y_$20|) 0)))  :pattern ( (mod |x_$45| |y_$20|)))) :named ax_807))
   (assert (! (forall( (|x_$5| Int))(= ($in_range_i8 |x_$5|) ($in_range $min.i8 |x_$5| $max.i8))) :named ax_808))
   (assert (! (forall( (|x_$6| Int))(= ($in_range_u1 |x_$6|) ($in_range 0 |x_$6| $max.u1))) :named ax_809))
   (assert (! (forall( (|x_$7| Int))(= ($in_range_u2 |x_$7|) ($in_range 0 |x_$7| $max.u2))) :named ax_810))
   (assert (! (forall( (|x_$8| Int))(= ($in_range_u4 |x_$8|) ($in_range 0 |x_$8| $max.u4))) :named ax_811))
   (assert (! (forall( (|x_$81| Int) (|y_$43| Int))(!(= (* |x_$81| |y_$43|) ($op_mul |x_$81| |y_$43|))  :weight  0 :pattern ( ($op_mul |x_$81| |y_$43|)))) :named ax_812))
   (assert (! (forall( (|x_$9| Int))(= ($in_range_u8 |x_$9|) ($in_range 0 |x_$9| $max.u8))) :named ax_813))
   (assert (! (forall( (|y_$0| Int) (|x_$0| Int))(= (+ |x_$0| |y_$0|) ($add |x_$0| |y_$0|))) :named ax_814))
   (assert (! (forall( (|y_$1| Int) (|x_$10| Int))(= (or (not (= |y_$1| (- 0 1))) (not (= |x_$10| $min.i1))) ($in_range_div_i1 |x_$10| |y_$1|))) :named ax_815))
   (assert (! (forall( (|y_$2| Int) (|x_$11| Int))(= (or (not (= |y_$2| (- 0 1))) (not (= |x_$11| $min.i2))) ($in_range_div_i2 |x_$11| |y_$2|))) :named ax_816))
   (assert (! (forall( (|y_$3| Int) (|x_$12| Int))(= (or (not (= |y_$3| (- 0 1))) (not (= |x_$12| $min.i4))) ($in_range_div_i4 |x_$12| |y_$3|))) :named ax_817))
   (assert (! (forall( (|y_$4| Int) (|x_$13| Int))(= (or (not (= |y_$4| (- 0 1))) (not (= |x_$13| $min.i8))) ($in_range_div_i8 |x_$13| |y_$4|))) :named ax_818))
   (assert (! (forall( (|y_$5| Int) (|x_$22| Int) (|t_$8| $ctype))(= ($unchk_div |t_$8| |x_$22| |y_$5|) ($unchecked |t_$8| (div |x_$22| |y_$5|)))) :named ax_819))
   (assert (! (forall( (|y_$6| Int) (|x_$23| Int) (|t_$9| $ctype))(= ($unchk_mod |t_$9| |x_$23| |y_$6|) ($unchecked |t_$9| (mod |x_$23| |y_$6|)))) :named ax_820))
   (assert (! (forall( (|z| Int) (|y| Int) (|x| Int))(= (+ |x| (* |y| |z|)) ($add.mul |x| |y| |z|))) :named ax_821))
   (assert (! (not $seclbl.bot) :named ax_822))
   (assert (! (not ($has_volatile_owns_set ^List)) :named ax_823))
   (assert (! (not ($has_volatile_owns_set ^Node)) :named ax_824))
   (assert (! (not ($is_claimable ^List)) :named ax_825))
   (assert (! (not ($is_claimable ^Node)) :named ax_826))
   (assert (! (not ($seclbl.join false false)) :named ax_827))
   (assert (! (not ($seclbl.leq true false)) :named ax_828))
   (assert (! (not ($seclbl.meet false false)) :named ax_829))
   (assert (! (not ($seclbl.meet false true)) :named ax_830))
   (assert (! (not ($seclbl.meet true false)) :named ax_831))
   (assert (! (not (= $@bf_337 true)) :named ax_832))
   (assert (! (not (= $@bf_343 true)) :named ax_833))
   (assert (! (not (= $@bf_345 true)) :named ax_834))
   (assert (! (not (= $@bf_347 true)) :named ax_835))
   (assert (! (not (= $@bf_355 true)) :named ax_836))
   (assert (! (not (= $@distTp1 $@distTp2)) :named ax_837))
   (assert (! (not (= $@distTp1 $@distTp3)) :named ax_838))
   (assert (! (not (= $@distTp1 $@distTp4)) :named ax_839))
   (assert (! (not (= $@distTp1 $@distTp5)) :named ax_840))
   (assert (! (not (= $@distTp1 $@distTp6)) :named ax_841))
   (assert (! (not (= $@distTp1 $memory_allocator_type)) :named ax_842))
   (assert (! (not (= $@distTp2 $@distTp1)) :named ax_843))
   (assert (! (not (= $@distTp2 $@distTp3)) :named ax_844))
   (assert (! (not (= $@distTp2 $@distTp4)) :named ax_845))
   (assert (! (not (= $@distTp2 $@distTp5)) :named ax_846))
   (assert (! (not (= $@distTp2 $@distTp6)) :named ax_847))
   (assert (! (not (= $@distTp2 $memory_allocator_type)) :named ax_848))
   (assert (! (not (= $@distTp3 $@distTp1)) :named ax_849))
   (assert (! (not (= $@distTp3 $@distTp2)) :named ax_850))
   (assert (! (not (= $@distTp3 $@distTp4)) :named ax_851))
   (assert (! (not (= $@distTp3 $@distTp5)) :named ax_852))
   (assert (! (not (= $@distTp3 $@distTp6)) :named ax_853))
   (assert (! (not (= $@distTp3 $memory_allocator_type)) :named ax_854))
   (assert (! (not (= $@distTp4 $@distTp1)) :named ax_855))
   (assert (! (not (= $@distTp4 $@distTp2)) :named ax_856))
   (assert (! (not (= $@distTp4 $@distTp3)) :named ax_857))
   (assert (! (not (= $@distTp4 $@distTp5)) :named ax_858))
   (assert (! (not (= $@distTp4 $@distTp6)) :named ax_859))
   (assert (! (not (= $@distTp4 $memory_allocator_type)) :named ax_860))
   (assert (! (not (= $@distTp5 $@distTp1)) :named ax_861))
   (assert (! (not (= $@distTp5 $@distTp2)) :named ax_862))
   (assert (! (not (= $@distTp5 $@distTp3)) :named ax_863))
   (assert (! (not (= $@distTp5 $@distTp4)) :named ax_864))
   (assert (! (not (= $@distTp5 $@distTp6)) :named ax_865))
   (assert (! (not (= $@distTp5 $memory_allocator_type)) :named ax_866))
   (assert (! (not (= $@distTp6 $@distTp1)) :named ax_867))
   (assert (! (not (= $@distTp6 $@distTp2)) :named ax_868))
   (assert (! (not (= $@distTp6 $@distTp3)) :named ax_869))
   (assert (! (not (= $@distTp6 $@distTp4)) :named ax_870))
   (assert (! (not (= $@distTp6 $@distTp5)) :named ax_871))
   (assert (! (not (= $@distTp6 $memory_allocator_type)) :named ax_872))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@loc.i)) :named ax_873))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@loc.l)) :named ax_874))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@loc.n)) :named ax_875))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^30.1)) :named ax_876))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^35.10)) :named ax_877))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^36.3)) :named ax_878))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^38.21)) :named ax_879))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^38.3)) :named ax_880))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^38.31)) :named ax_881))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^38.44)) :named ax_882))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^38.8)) :named ax_883))
   (assert (! (not (= $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c $@tok$1^9.31)) :named ax_884))
   (assert (! (not (= $@loc._this_ $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_885))
   (assert (! (not (= $@loc._this_ $@loc.i)) :named ax_886))
   (assert (! (not (= $@loc._this_ $@loc.l)) :named ax_887))
   (assert (! (not (= $@loc._this_ $@loc.n)) :named ax_888))
   (assert (! (not (= $@loc._this_ $@tok$1^30.1)) :named ax_889))
   (assert (! (not (= $@loc._this_ $@tok$1^35.10)) :named ax_890))
   (assert (! (not (= $@loc._this_ $@tok$1^36.3)) :named ax_891))
   (assert (! (not (= $@loc._this_ $@tok$1^38.21)) :named ax_892))
   (assert (! (not (= $@loc._this_ $@tok$1^38.3)) :named ax_893))
   (assert (! (not (= $@loc._this_ $@tok$1^38.31)) :named ax_894))
   (assert (! (not (= $@loc._this_ $@tok$1^38.44)) :named ax_895))
   (assert (! (not (= $@loc._this_ $@tok$1^38.8)) :named ax_896))
   (assert (! (not (= $@loc._this_ $@tok$1^9.31)) :named ax_897))
   (assert (! (not (= $@loc.i $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_898))
   (assert (! (not (= $@loc.i $@loc._this_)) :named ax_899))
   (assert (! (not (= $@loc.i $@loc.l)) :named ax_900))
   (assert (! (not (= $@loc.i $@loc.n)) :named ax_901))
   (assert (! (not (= $@loc.i $@tok$1^30.1)) :named ax_902))
   (assert (! (not (= $@loc.i $@tok$1^35.10)) :named ax_903))
   (assert (! (not (= $@loc.i $@tok$1^36.3)) :named ax_904))
   (assert (! (not (= $@loc.i $@tok$1^38.21)) :named ax_905))
   (assert (! (not (= $@loc.i $@tok$1^38.3)) :named ax_906))
   (assert (! (not (= $@loc.i $@tok$1^38.31)) :named ax_907))
   (assert (! (not (= $@loc.i $@tok$1^38.44)) :named ax_908))
   (assert (! (not (= $@loc.i $@tok$1^38.8)) :named ax_909))
   (assert (! (not (= $@loc.i $@tok$1^9.31)) :named ax_910))
   (assert (! (not (= $@loc.l $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_911))
   (assert (! (not (= $@loc.l $@loc._this_)) :named ax_912))
   (assert (! (not (= $@loc.l $@loc.i)) :named ax_913))
   (assert (! (not (= $@loc.l $@loc.n)) :named ax_914))
   (assert (! (not (= $@loc.l $@tok$1^30.1)) :named ax_915))
   (assert (! (not (= $@loc.l $@tok$1^35.10)) :named ax_916))
   (assert (! (not (= $@loc.l $@tok$1^36.3)) :named ax_917))
   (assert (! (not (= $@loc.l $@tok$1^38.21)) :named ax_918))
   (assert (! (not (= $@loc.l $@tok$1^38.3)) :named ax_919))
   (assert (! (not (= $@loc.l $@tok$1^38.31)) :named ax_920))
   (assert (! (not (= $@loc.l $@tok$1^38.44)) :named ax_921))
   (assert (! (not (= $@loc.l $@tok$1^38.8)) :named ax_922))
   (assert (! (not (= $@loc.l $@tok$1^9.31)) :named ax_923))
   (assert (! (not (= $@loc.n $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_924))
   (assert (! (not (= $@loc.n $@loc._this_)) :named ax_925))
   (assert (! (not (= $@loc.n $@loc.i)) :named ax_926))
   (assert (! (not (= $@loc.n $@loc.l)) :named ax_927))
   (assert (! (not (= $@loc.n $@tok$1^30.1)) :named ax_928))
   (assert (! (not (= $@loc.n $@tok$1^35.10)) :named ax_929))
   (assert (! (not (= $@loc.n $@tok$1^36.3)) :named ax_930))
   (assert (! (not (= $@loc.n $@tok$1^38.21)) :named ax_931))
   (assert (! (not (= $@loc.n $@tok$1^38.3)) :named ax_932))
   (assert (! (not (= $@loc.n $@tok$1^38.31)) :named ax_933))
   (assert (! (not (= $@loc.n $@tok$1^38.44)) :named ax_934))
   (assert (! (not (= $@loc.n $@tok$1^38.8)) :named ax_935))
   (assert (! (not (= $@loc.n $@tok$1^9.31)) :named ax_936))
   (assert (! (not (= $@tok$1^30.1 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_937))
   (assert (! (not (= $@tok$1^30.1 $@loc._this_)) :named ax_938))
   (assert (! (not (= $@tok$1^30.1 $@loc.i)) :named ax_939))
   (assert (! (not (= $@tok$1^30.1 $@loc.l)) :named ax_940))
   (assert (! (not (= $@tok$1^30.1 $@loc.n)) :named ax_941))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^35.10)) :named ax_942))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^36.3)) :named ax_943))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^38.21)) :named ax_944))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^38.3)) :named ax_945))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^38.31)) :named ax_946))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^38.44)) :named ax_947))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^38.8)) :named ax_948))
   (assert (! (not (= $@tok$1^30.1 $@tok$1^9.31)) :named ax_949))
   (assert (! (not (= $@tok$1^35.10 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_950))
   (assert (! (not (= $@tok$1^35.10 $@loc._this_)) :named ax_951))
   (assert (! (not (= $@tok$1^35.10 $@loc.i)) :named ax_952))
   (assert (! (not (= $@tok$1^35.10 $@loc.l)) :named ax_953))
   (assert (! (not (= $@tok$1^35.10 $@loc.n)) :named ax_954))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^30.1)) :named ax_955))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^36.3)) :named ax_956))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^38.21)) :named ax_957))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^38.3)) :named ax_958))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^38.31)) :named ax_959))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^38.44)) :named ax_960))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^38.8)) :named ax_961))
   (assert (! (not (= $@tok$1^35.10 $@tok$1^9.31)) :named ax_962))
   (assert (! (not (= $@tok$1^36.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_963))
   (assert (! (not (= $@tok$1^36.3 $@loc._this_)) :named ax_964))
   (assert (! (not (= $@tok$1^36.3 $@loc.i)) :named ax_965))
   (assert (! (not (= $@tok$1^36.3 $@loc.l)) :named ax_966))
   (assert (! (not (= $@tok$1^36.3 $@loc.n)) :named ax_967))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^30.1)) :named ax_968))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^35.10)) :named ax_969))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^38.21)) :named ax_970))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^38.3)) :named ax_971))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^38.31)) :named ax_972))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^38.44)) :named ax_973))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^38.8)) :named ax_974))
   (assert (! (not (= $@tok$1^36.3 $@tok$1^9.31)) :named ax_975))
   (assert (! (not (= $@tok$1^38.21 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_976))
   (assert (! (not (= $@tok$1^38.21 $@loc._this_)) :named ax_977))
   (assert (! (not (= $@tok$1^38.21 $@loc.i)) :named ax_978))
   (assert (! (not (= $@tok$1^38.21 $@loc.l)) :named ax_979))
   (assert (! (not (= $@tok$1^38.21 $@loc.n)) :named ax_980))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^30.1)) :named ax_981))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^35.10)) :named ax_982))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^36.3)) :named ax_983))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^38.3)) :named ax_984))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^38.31)) :named ax_985))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^38.44)) :named ax_986))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^38.8)) :named ax_987))
   (assert (! (not (= $@tok$1^38.21 $@tok$1^9.31)) :named ax_988))
   (assert (! (not (= $@tok$1^38.3 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_989))
   (assert (! (not (= $@tok$1^38.3 $@loc._this_)) :named ax_990))
   (assert (! (not (= $@tok$1^38.3 $@loc.i)) :named ax_991))
   (assert (! (not (= $@tok$1^38.3 $@loc.l)) :named ax_992))
   (assert (! (not (= $@tok$1^38.3 $@loc.n)) :named ax_993))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^30.1)) :named ax_994))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^35.10)) :named ax_995))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^36.3)) :named ax_996))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^38.21)) :named ax_997))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^38.31)) :named ax_998))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^38.44)) :named ax_999))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^38.8)) :named ax_1000))
   (assert (! (not (= $@tok$1^38.3 $@tok$1^9.31)) :named ax_1001))
   (assert (! (not (= $@tok$1^38.31 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_1002))
   (assert (! (not (= $@tok$1^38.31 $@loc._this_)) :named ax_1003))
   (assert (! (not (= $@tok$1^38.31 $@loc.i)) :named ax_1004))
   (assert (! (not (= $@tok$1^38.31 $@loc.l)) :named ax_1005))
   (assert (! (not (= $@tok$1^38.31 $@loc.n)) :named ax_1006))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^30.1)) :named ax_1007))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^35.10)) :named ax_1008))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^36.3)) :named ax_1009))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.21)) :named ax_1010))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.3)) :named ax_1011))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.44)) :named ax_1012))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^38.8)) :named ax_1013))
   (assert (! (not (= $@tok$1^38.31 $@tok$1^9.31)) :named ax_1014))
   (assert (! (not (= $@tok$1^38.44 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_1015))
   (assert (! (not (= $@tok$1^38.44 $@loc._this_)) :named ax_1016))
   (assert (! (not (= $@tok$1^38.44 $@loc.i)) :named ax_1017))
   (assert (! (not (= $@tok$1^38.44 $@loc.l)) :named ax_1018))
   (assert (! (not (= $@tok$1^38.44 $@loc.n)) :named ax_1019))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^30.1)) :named ax_1020))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^35.10)) :named ax_1021))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^36.3)) :named ax_1022))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.21)) :named ax_1023))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.3)) :named ax_1024))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.31)) :named ax_1025))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^38.8)) :named ax_1026))
   (assert (! (not (= $@tok$1^38.44 $@tok$1^9.31)) :named ax_1027))
   (assert (! (not (= $@tok$1^38.8 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_1028))
   (assert (! (not (= $@tok$1^38.8 $@loc._this_)) :named ax_1029))
   (assert (! (not (= $@tok$1^38.8 $@loc.i)) :named ax_1030))
   (assert (! (not (= $@tok$1^38.8 $@loc.l)) :named ax_1031))
   (assert (! (not (= $@tok$1^38.8 $@loc.n)) :named ax_1032))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^30.1)) :named ax_1033))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^35.10)) :named ax_1034))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^36.3)) :named ax_1035))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.21)) :named ax_1036))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.3)) :named ax_1037))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.31)) :named ax_1038))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^38.44)) :named ax_1039))
   (assert (! (not (= $@tok$1^38.8 $@tok$1^9.31)) :named ax_1040))
   (assert (! (not (= $@tok$1^9.31 $@file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvscomp2010?5Cvscomp2010_p3_v0.c)) :named ax_1041))
   (assert (! (not (= $@tok$1^9.31 $@loc._this_)) :named ax_1042))
   (assert (! (not (= $@tok$1^9.31 $@loc.i)) :named ax_1043))
   (assert (! (not (= $@tok$1^9.31 $@loc.l)) :named ax_1044))
   (assert (! (not (= $@tok$1^9.31 $@loc.n)) :named ax_1045))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^30.1)) :named ax_1046))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^35.10)) :named ax_1047))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^36.3)) :named ax_1048))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^38.21)) :named ax_1049))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^38.3)) :named ax_1050))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^38.31)) :named ax_1051))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^38.44)) :named ax_1052))
   (assert (! (not (= $@tok$1^9.31 $@tok$1^38.8)) :named ax_1053))
   (assert (! (not (= $kind_array $kind_primitive)) :named ax_1054))
   (assert (! (not (= $kind_array $kind_thread)) :named ax_1055))
   (assert (! (not (= $kind_composite $kind_array)) :named ax_1056))
   (assert (! (not (= $kind_composite $kind_primitive)) :named ax_1057))
   (assert (! (not (= $kind_composite $kind_thread)) :named ax_1058))
   (assert (! (not (= $kind_primitive $kind_array)) :named ax_1059))
   (assert (! (not (= $kind_primitive $kind_composite)) :named ax_1060))
   (assert (! (not (= $kind_primitive $kind_thread)) :named ax_1061))
   (assert (! (not (= $kind_thread $kind_array)) :named ax_1062))
   (assert (! (not (= $kind_thread $kind_composite)) :named ax_1063))
   (assert (! (not (= $kind_thread $kind_primitive)) :named ax_1064))
   (assert (! (not (= $me_ref $arch_spec_ptr_start)) :named ax_1065))
   (assert (! (not (= $me_ref 0)) :named ax_1066))
   (assert (! (not (= $memory_allocator_type $@distTp1)) :named ax_1067))
   (assert (! (not (= $memory_allocator_type $@distTp2)) :named ax_1068))
   (assert (! (not (= $memory_allocator_type $@distTp3)) :named ax_1069))
   (assert (! (not (= $memory_allocator_type $@distTp4)) :named ax_1070))
   (assert (! (not (= $memory_allocator_type $@distTp5)) :named ax_1071))
   (assert (! (not (= $memory_allocator_type $@distTp6)) :named ax_1072))
   (assert (! (not (= $memory_allocator_type ^$@ptrset)) :named ax_1073))
   (assert (! (not (= $memory_allocator_type ^$@state_t)) :named ax_1074))
   (assert (! (not (= $memory_allocator_type ^$@struct)) :named ax_1075))
   (assert (! (not (= $memory_allocator_type ^$@thread_id)) :named ax_1076))
   (assert (! (not (= $memory_allocator_type ^$@thread_id_t)) :named ax_1077))
   (assert (! (not (= $memory_allocator_type ^^bool)) :named ax_1078))
   (assert (! (not (= $memory_allocator_type ^^claim)) :named ax_1079))
   (assert (! (not (= $memory_allocator_type ^^f4)) :named ax_1080))
   (assert (! (not (= $memory_allocator_type ^^f8)) :named ax_1081))
   (assert (! (not (= $memory_allocator_type ^^i1)) :named ax_1082))
   (assert (! (not (= $memory_allocator_type ^^i2)) :named ax_1083))
   (assert (! (not (= $memory_allocator_type ^^i4)) :named ax_1084))
   (assert (! (not (= $memory_allocator_type ^^i8)) :named ax_1085))
   (assert (! (not (= $memory_allocator_type ^^mathint)) :named ax_1086))
   (assert (! (not (= $memory_allocator_type ^^root_emb)) :named ax_1087))
   (assert (! (not (= $memory_allocator_type ^^u1)) :named ax_1088))
   (assert (! (not (= $memory_allocator_type ^^u2)) :named ax_1089))
   (assert (! (not (= $memory_allocator_type ^^u4)) :named ax_1090))
   (assert (! (not (= $memory_allocator_type ^^u8)) :named ax_1091))
   (assert (! (not (= $memory_allocator_type ^^void)) :named ax_1092))
   (assert (! (not (= ($@bf_288 (- 1) $min.i8) true)) :named ax_1093))
   (assert (! (not (= ^$@ptrset $@distTp1)) :named ax_1094))
   (assert (! (not (= ^$@ptrset $@distTp2)) :named ax_1095))
   (assert (! (not (= ^$@ptrset $@distTp3)) :named ax_1096))
   (assert (! (not (= ^$@ptrset $@distTp4)) :named ax_1097))
   (assert (! (not (= ^$@ptrset $@distTp5)) :named ax_1098))
   (assert (! (not (= ^$@ptrset $@distTp6)) :named ax_1099))
   (assert (! (not (= ^$@ptrset $memory_allocator_type)) :named ax_1100))
   (assert (! (not (= ^$@ptrset ^$@state_t)) :named ax_1101))
   (assert (! (not (= ^$@ptrset ^$@struct)) :named ax_1102))
   (assert (! (not (= ^$@ptrset ^$@thread_id)) :named ax_1103))
   (assert (! (not (= ^$@ptrset ^$@thread_id_t)) :named ax_1104))
   (assert (! (not (= ^$@ptrset ^^bool)) :named ax_1105))
   (assert (! (not (= ^$@ptrset ^^claim)) :named ax_1106))
   (assert (! (not (= ^$@ptrset ^^f4)) :named ax_1107))
   (assert (! (not (= ^$@ptrset ^^f8)) :named ax_1108))
   (assert (! (not (= ^$@ptrset ^^i1)) :named ax_1109))
   (assert (! (not (= ^$@ptrset ^^i2)) :named ax_1110))
   (assert (! (not (= ^$@ptrset ^^i4)) :named ax_1111))
   (assert (! (not (= ^$@ptrset ^^i8)) :named ax_1112))
   (assert (! (not (= ^$@ptrset ^^mathint)) :named ax_1113))
   (assert (! (not (= ^$@ptrset ^^root_emb)) :named ax_1114))
   (assert (! (not (= ^$@ptrset ^^u1)) :named ax_1115))
   (assert (! (not (= ^$@ptrset ^^u2)) :named ax_1116))
   (assert (! (not (= ^$@ptrset ^^u4)) :named ax_1117))
   (assert (! (not (= ^$@ptrset ^^u8)) :named ax_1118))
   (assert (! (not (= ^$@ptrset ^^void)) :named ax_1119))
   (assert (! (not (= ^$@state_t $@distTp1)) :named ax_1120))
   (assert (! (not (= ^$@state_t $@distTp2)) :named ax_1121))
   (assert (! (not (= ^$@state_t $@distTp3)) :named ax_1122))
   (assert (! (not (= ^$@state_t $@distTp4)) :named ax_1123))
   (assert (! (not (= ^$@state_t $@distTp5)) :named ax_1124))
   (assert (! (not (= ^$@state_t $@distTp6)) :named ax_1125))
   (assert (! (not (= ^$@state_t $memory_allocator_type)) :named ax_1126))
   (assert (! (not (= ^$@state_t ^$@ptrset)) :named ax_1127))
   (assert (! (not (= ^$@state_t ^$@struct)) :named ax_1128))
   (assert (! (not (= ^$@state_t ^$@thread_id)) :named ax_1129))
   (assert (! (not (= ^$@state_t ^$@thread_id_t)) :named ax_1130))
   (assert (! (not (= ^$@state_t ^^bool)) :named ax_1131))
   (assert (! (not (= ^$@state_t ^^claim)) :named ax_1132))
   (assert (! (not (= ^$@state_t ^^f4)) :named ax_1133))
   (assert (! (not (= ^$@state_t ^^f8)) :named ax_1134))
   (assert (! (not (= ^$@state_t ^^i1)) :named ax_1135))
   (assert (! (not (= ^$@state_t ^^i2)) :named ax_1136))
   (assert (! (not (= ^$@state_t ^^i4)) :named ax_1137))
   (assert (! (not (= ^$@state_t ^^i8)) :named ax_1138))
   (assert (! (not (= ^$@state_t ^^mathint)) :named ax_1139))
   (assert (! (not (= ^$@state_t ^^root_emb)) :named ax_1140))
   (assert (! (not (= ^$@state_t ^^u1)) :named ax_1141))
   (assert (! (not (= ^$@state_t ^^u2)) :named ax_1142))
   (assert (! (not (= ^$@state_t ^^u4)) :named ax_1143))
   (assert (! (not (= ^$@state_t ^^u8)) :named ax_1144))
   (assert (! (not (= ^$@state_t ^^void)) :named ax_1145))
   (assert (! (not (= ^$@struct $@distTp1)) :named ax_1146))
   (assert (! (not (= ^$@struct $@distTp2)) :named ax_1147))
   (assert (! (not (= ^$@struct $@distTp3)) :named ax_1148))
   (assert (! (not (= ^$@struct $@distTp4)) :named ax_1149))
   (assert (! (not (= ^$@struct $@distTp5)) :named ax_1150))
   (assert (! (not (= ^$@struct $@distTp6)) :named ax_1151))
   (assert (! (not (= ^$@struct $memory_allocator_type)) :named ax_1152))
   (assert (! (not (= ^$@struct ^$@ptrset)) :named ax_1153))
   (assert (! (not (= ^$@struct ^$@state_t)) :named ax_1154))
   (assert (! (not (= ^$@struct ^$@thread_id)) :named ax_1155))
   (assert (! (not (= ^$@struct ^$@thread_id_t)) :named ax_1156))
   (assert (! (not (= ^$@struct ^^bool)) :named ax_1157))
   (assert (! (not (= ^$@struct ^^claim)) :named ax_1158))
   (assert (! (not (= ^$@struct ^^f4)) :named ax_1159))
   (assert (! (not (= ^$@struct ^^f8)) :named ax_1160))
   (assert (! (not (= ^$@struct ^^i1)) :named ax_1161))
   (assert (! (not (= ^$@struct ^^i2)) :named ax_1162))
   (assert (! (not (= ^$@struct ^^i4)) :named ax_1163))
   (assert (! (not (= ^$@struct ^^i8)) :named ax_1164))
   (assert (! (not (= ^$@struct ^^mathint)) :named ax_1165))
   (assert (! (not (= ^$@struct ^^root_emb)) :named ax_1166))
   (assert (! (not (= ^$@struct ^^u1)) :named ax_1167))
   (assert (! (not (= ^$@struct ^^u2)) :named ax_1168))
   (assert (! (not (= ^$@struct ^^u4)) :named ax_1169))
   (assert (! (not (= ^$@struct ^^u8)) :named ax_1170))
   (assert (! (not (= ^$@struct ^^void)) :named ax_1171))
   (assert (! (not (= ^$@thread_id $@distTp1)) :named ax_1172))
   (assert (! (not (= ^$@thread_id $@distTp2)) :named ax_1173))
   (assert (! (not (= ^$@thread_id $@distTp3)) :named ax_1174))
   (assert (! (not (= ^$@thread_id $@distTp4)) :named ax_1175))
   (assert (! (not (= ^$@thread_id $@distTp5)) :named ax_1176))
   (assert (! (not (= ^$@thread_id $@distTp6)) :named ax_1177))
   (assert (! (not (= ^$@thread_id $memory_allocator_type)) :named ax_1178))
   (assert (! (not (= ^$@thread_id ^$@ptrset)) :named ax_1179))
   (assert (! (not (= ^$@thread_id ^$@state_t)) :named ax_1180))
   (assert (! (not (= ^$@thread_id ^$@struct)) :named ax_1181))
   (assert (! (not (= ^$@thread_id ^$@thread_id_t)) :named ax_1182))
   (assert (! (not (= ^$@thread_id ^^bool)) :named ax_1183))
   (assert (! (not (= ^$@thread_id ^^claim)) :named ax_1184))
   (assert (! (not (= ^$@thread_id ^^f4)) :named ax_1185))
   (assert (! (not (= ^$@thread_id ^^f8)) :named ax_1186))
   (assert (! (not (= ^$@thread_id ^^i1)) :named ax_1187))
   (assert (! (not (= ^$@thread_id ^^i2)) :named ax_1188))
   (assert (! (not (= ^$@thread_id ^^i4)) :named ax_1189))
   (assert (! (not (= ^$@thread_id ^^i8)) :named ax_1190))
   (assert (! (not (= ^$@thread_id ^^mathint)) :named ax_1191))
   (assert (! (not (= ^$@thread_id ^^root_emb)) :named ax_1192))
   (assert (! (not (= ^$@thread_id ^^u1)) :named ax_1193))
   (assert (! (not (= ^$@thread_id ^^u2)) :named ax_1194))
   (assert (! (not (= ^$@thread_id ^^u4)) :named ax_1195))
   (assert (! (not (= ^$@thread_id ^^u8)) :named ax_1196))
   (assert (! (not (= ^$@thread_id ^^void)) :named ax_1197))
   (assert (! (not (= ^$@thread_id_t $@distTp1)) :named ax_1198))
   (assert (! (not (= ^$@thread_id_t $@distTp2)) :named ax_1199))
   (assert (! (not (= ^$@thread_id_t $@distTp3)) :named ax_1200))
   (assert (! (not (= ^$@thread_id_t $@distTp4)) :named ax_1201))
   (assert (! (not (= ^$@thread_id_t $@distTp5)) :named ax_1202))
   (assert (! (not (= ^$@thread_id_t $@distTp6)) :named ax_1203))
   (assert (! (not (= ^$@thread_id_t $memory_allocator_type)) :named ax_1204))
   (assert (! (not (= ^$@thread_id_t ^$@ptrset)) :named ax_1205))
   (assert (! (not (= ^$@thread_id_t ^$@state_t)) :named ax_1206))
   (assert (! (not (= ^$@thread_id_t ^$@struct)) :named ax_1207))
   (assert (! (not (= ^$@thread_id_t ^$@thread_id)) :named ax_1208))
   (assert (! (not (= ^$@thread_id_t ^^bool)) :named ax_1209))
   (assert (! (not (= ^$@thread_id_t ^^claim)) :named ax_1210))
   (assert (! (not (= ^$@thread_id_t ^^f4)) :named ax_1211))
   (assert (! (not (= ^$@thread_id_t ^^f8)) :named ax_1212))
   (assert (! (not (= ^$@thread_id_t ^^i1)) :named ax_1213))
   (assert (! (not (= ^$@thread_id_t ^^i2)) :named ax_1214))
   (assert (! (not (= ^$@thread_id_t ^^i4)) :named ax_1215))
   (assert (! (not (= ^$@thread_id_t ^^i8)) :named ax_1216))
   (assert (! (not (= ^$@thread_id_t ^^mathint)) :named ax_1217))
   (assert (! (not (= ^$@thread_id_t ^^root_emb)) :named ax_1218))
   (assert (! (not (= ^$@thread_id_t ^^u1)) :named ax_1219))
   (assert (! (not (= ^$@thread_id_t ^^u2)) :named ax_1220))
   (assert (! (not (= ^$@thread_id_t ^^u4)) :named ax_1221))
   (assert (! (not (= ^$@thread_id_t ^^u8)) :named ax_1222))
   (assert (! (not (= ^$@thread_id_t ^^void)) :named ax_1223))
   (assert (! (not (= ^^bool $@distTp1)) :named ax_1224))
   (assert (! (not (= ^^bool $@distTp2)) :named ax_1225))
   (assert (! (not (= ^^bool $@distTp3)) :named ax_1226))
   (assert (! (not (= ^^bool $@distTp4)) :named ax_1227))
   (assert (! (not (= ^^bool $@distTp5)) :named ax_1228))
   (assert (! (not (= ^^bool $@distTp6)) :named ax_1229))
   (assert (! (not (= ^^bool $memory_allocator_type)) :named ax_1230))
   (assert (! (not (= ^^bool ^$@ptrset)) :named ax_1231))
   (assert (! (not (= ^^bool ^$@state_t)) :named ax_1232))
   (assert (! (not (= ^^bool ^$@struct)) :named ax_1233))
   (assert (! (not (= ^^bool ^$@thread_id)) :named ax_1234))
   (assert (! (not (= ^^bool ^$@thread_id_t)) :named ax_1235))
   (assert (! (not (= ^^bool ^^claim)) :named ax_1236))
   (assert (! (not (= ^^bool ^^f4)) :named ax_1237))
   (assert (! (not (= ^^bool ^^f8)) :named ax_1238))
   (assert (! (not (= ^^bool ^^i1)) :named ax_1239))
   (assert (! (not (= ^^bool ^^i2)) :named ax_1240))
   (assert (! (not (= ^^bool ^^i4)) :named ax_1241))
   (assert (! (not (= ^^bool ^^i8)) :named ax_1242))
   (assert (! (not (= ^^bool ^^mathint)) :named ax_1243))
   (assert (! (not (= ^^bool ^^root_emb)) :named ax_1244))
   (assert (! (not (= ^^bool ^^u1)) :named ax_1245))
   (assert (! (not (= ^^bool ^^u2)) :named ax_1246))
   (assert (! (not (= ^^bool ^^u4)) :named ax_1247))
   (assert (! (not (= ^^bool ^^u8)) :named ax_1248))
   (assert (! (not (= ^^bool ^^void)) :named ax_1249))
   (assert (! (not (= ^^bool ^List)) :named ax_1250))
   (assert (! (not (= ^^bool ^Node)) :named ax_1251))
   (assert (! (not (= ^^claim $@distTp1)) :named ax_1252))
   (assert (! (not (= ^^claim $@distTp2)) :named ax_1253))
   (assert (! (not (= ^^claim $@distTp3)) :named ax_1254))
   (assert (! (not (= ^^claim $@distTp4)) :named ax_1255))
   (assert (! (not (= ^^claim $@distTp5)) :named ax_1256))
   (assert (! (not (= ^^claim $@distTp6)) :named ax_1257))
   (assert (! (not (= ^^claim $memory_allocator_type)) :named ax_1258))
   (assert (! (not (= ^^claim ^$@ptrset)) :named ax_1259))
   (assert (! (not (= ^^claim ^$@state_t)) :named ax_1260))
   (assert (! (not (= ^^claim ^$@struct)) :named ax_1261))
   (assert (! (not (= ^^claim ^$@thread_id)) :named ax_1262))
   (assert (! (not (= ^^claim ^$@thread_id_t)) :named ax_1263))
   (assert (! (not (= ^^claim ^^bool)) :named ax_1264))
   (assert (! (not (= ^^claim ^^f4)) :named ax_1265))
   (assert (! (not (= ^^claim ^^f8)) :named ax_1266))
   (assert (! (not (= ^^claim ^^i1)) :named ax_1267))
   (assert (! (not (= ^^claim ^^i2)) :named ax_1268))
   (assert (! (not (= ^^claim ^^i4)) :named ax_1269))
   (assert (! (not (= ^^claim ^^i8)) :named ax_1270))
   (assert (! (not (= ^^claim ^^mathint)) :named ax_1271))
   (assert (! (not (= ^^claim ^^root_emb)) :named ax_1272))
   (assert (! (not (= ^^claim ^^u1)) :named ax_1273))
   (assert (! (not (= ^^claim ^^u2)) :named ax_1274))
   (assert (! (not (= ^^claim ^^u4)) :named ax_1275))
   (assert (! (not (= ^^claim ^^u8)) :named ax_1276))
   (assert (! (not (= ^^claim ^^void)) :named ax_1277))
   (assert (! (not (= ^^claim ^List)) :named ax_1278))
   (assert (! (not (= ^^claim ^Node)) :named ax_1279))
   (assert (! (not (= ^^f4 $@distTp1)) :named ax_1280))
   (assert (! (not (= ^^f4 $@distTp2)) :named ax_1281))
   (assert (! (not (= ^^f4 $@distTp3)) :named ax_1282))
   (assert (! (not (= ^^f4 $@distTp4)) :named ax_1283))
   (assert (! (not (= ^^f4 $@distTp5)) :named ax_1284))
   (assert (! (not (= ^^f4 $@distTp6)) :named ax_1285))
   (assert (! (not (= ^^f4 $memory_allocator_type)) :named ax_1286))
   (assert (! (not (= ^^f4 ^$@ptrset)) :named ax_1287))
   (assert (! (not (= ^^f4 ^$@state_t)) :named ax_1288))
   (assert (! (not (= ^^f4 ^$@struct)) :named ax_1289))
   (assert (! (not (= ^^f4 ^$@thread_id)) :named ax_1290))
   (assert (! (not (= ^^f4 ^$@thread_id_t)) :named ax_1291))
   (assert (! (not (= ^^f4 ^^bool)) :named ax_1292))
   (assert (! (not (= ^^f4 ^^claim)) :named ax_1293))
   (assert (! (not (= ^^f4 ^^f8)) :named ax_1294))
   (assert (! (not (= ^^f4 ^^i1)) :named ax_1295))
   (assert (! (not (= ^^f4 ^^i2)) :named ax_1296))
   (assert (! (not (= ^^f4 ^^i4)) :named ax_1297))
   (assert (! (not (= ^^f4 ^^i8)) :named ax_1298))
   (assert (! (not (= ^^f4 ^^u1)) :named ax_1299))
   (assert (! (not (= ^^f4 ^^u2)) :named ax_1300))
   (assert (! (not (= ^^f4 ^^u4)) :named ax_1301))
   (assert (! (not (= ^^f8 $@distTp1)) :named ax_1302))
   (assert (! (not (= ^^f8 $@distTp2)) :named ax_1303))
   (assert (! (not (= ^^f8 $@distTp3)) :named ax_1304))
   (assert (! (not (= ^^f8 $@distTp4)) :named ax_1305))
   (assert (! (not (= ^^f8 $@distTp5)) :named ax_1306))
   (assert (! (not (= ^^f8 $@distTp6)) :named ax_1307))
   (assert (! (not (= ^^f8 $memory_allocator_type)) :named ax_1308))
   (assert (! (not (= ^^f8 ^$@ptrset)) :named ax_1309))
   (assert (! (not (= ^^f8 ^$@state_t)) :named ax_1310))
   (assert (! (not (= ^^f8 ^$@struct)) :named ax_1311))
   (assert (! (not (= ^^f8 ^$@thread_id)) :named ax_1312))
   (assert (! (not (= ^^f8 ^$@thread_id_t)) :named ax_1313))
   (assert (! (not (= ^^f8 ^^bool)) :named ax_1314))
   (assert (! (not (= ^^f8 ^^claim)) :named ax_1315))
   (assert (! (not (= ^^f8 ^^f4)) :named ax_1316))
   (assert (! (not (= ^^f8 ^^i1)) :named ax_1317))
   (assert (! (not (= ^^f8 ^^i2)) :named ax_1318))
   (assert (! (not (= ^^f8 ^^i4)) :named ax_1319))
   (assert (! (not (= ^^f8 ^^i8)) :named ax_1320))
   (assert (! (not (= ^^f8 ^^u1)) :named ax_1321))
   (assert (! (not (= ^^f8 ^^u2)) :named ax_1322))
   (assert (! (not (= ^^f8 ^^u4)) :named ax_1323))
   (assert (! (not (= ^^i1 $@distTp1)) :named ax_1324))
   (assert (! (not (= ^^i1 $@distTp2)) :named ax_1325))
   (assert (! (not (= ^^i1 $@distTp3)) :named ax_1326))
   (assert (! (not (= ^^i1 $@distTp4)) :named ax_1327))
   (assert (! (not (= ^^i1 $@distTp5)) :named ax_1328))
   (assert (! (not (= ^^i1 $@distTp6)) :named ax_1329))
   (assert (! (not (= ^^i1 $memory_allocator_type)) :named ax_1330))
   (assert (! (not (= ^^i1 ^$@ptrset)) :named ax_1331))
   (assert (! (not (= ^^i1 ^$@state_t)) :named ax_1332))
   (assert (! (not (= ^^i1 ^$@struct)) :named ax_1333))
   (assert (! (not (= ^^i1 ^$@thread_id)) :named ax_1334))
   (assert (! (not (= ^^i1 ^$@thread_id_t)) :named ax_1335))
   (assert (! (not (= ^^i1 ^^bool)) :named ax_1336))
   (assert (! (not (= ^^i1 ^^claim)) :named ax_1337))
   (assert (! (not (= ^^i1 ^^f4)) :named ax_1338))
   (assert (! (not (= ^^i1 ^^f8)) :named ax_1339))
   (assert (! (not (= ^^i1 ^^i2)) :named ax_1340))
   (assert (! (not (= ^^i1 ^^i4)) :named ax_1341))
   (assert (! (not (= ^^i1 ^^i8)) :named ax_1342))
   (assert (! (not (= ^^i1 ^^u1)) :named ax_1343))
   (assert (! (not (= ^^i1 ^^u2)) :named ax_1344))
   (assert (! (not (= ^^i1 ^^u4)) :named ax_1345))
   (assert (! (not (= ^^i2 $@distTp1)) :named ax_1346))
   (assert (! (not (= ^^i2 $@distTp2)) :named ax_1347))
   (assert (! (not (= ^^i2 $@distTp3)) :named ax_1348))
   (assert (! (not (= ^^i2 $@distTp4)) :named ax_1349))
   (assert (! (not (= ^^i2 $@distTp5)) :named ax_1350))
   (assert (! (not (= ^^i2 $@distTp6)) :named ax_1351))
   (assert (! (not (= ^^i2 $memory_allocator_type)) :named ax_1352))
   (assert (! (not (= ^^i2 ^$@ptrset)) :named ax_1353))
   (assert (! (not (= ^^i2 ^$@state_t)) :named ax_1354))
   (assert (! (not (= ^^i2 ^$@struct)) :named ax_1355))
   (assert (! (not (= ^^i2 ^$@thread_id)) :named ax_1356))
   (assert (! (not (= ^^i2 ^$@thread_id_t)) :named ax_1357))
   (assert (! (not (= ^^i2 ^^bool)) :named ax_1358))
   (assert (! (not (= ^^i2 ^^claim)) :named ax_1359))
   (assert (! (not (= ^^i2 ^^f4)) :named ax_1360))
   (assert (! (not (= ^^i2 ^^f8)) :named ax_1361))
   (assert (! (not (= ^^i2 ^^i1)) :named ax_1362))
   (assert (! (not (= ^^i2 ^^i4)) :named ax_1363))
   (assert (! (not (= ^^i2 ^^i8)) :named ax_1364))
   (assert (! (not (= ^^i2 ^^u1)) :named ax_1365))
   (assert (! (not (= ^^i2 ^^u2)) :named ax_1366))
   (assert (! (not (= ^^i2 ^^u4)) :named ax_1367))
   (assert (! (not (= ^^i4 $@distTp1)) :named ax_1368))
   (assert (! (not (= ^^i4 $@distTp2)) :named ax_1369))
   (assert (! (not (= ^^i4 $@distTp3)) :named ax_1370))
   (assert (! (not (= ^^i4 $@distTp4)) :named ax_1371))
   (assert (! (not (= ^^i4 $@distTp5)) :named ax_1372))
   (assert (! (not (= ^^i4 $@distTp6)) :named ax_1373))
   (assert (! (not (= ^^i4 $memory_allocator_type)) :named ax_1374))
   (assert (! (not (= ^^i4 ^$@ptrset)) :named ax_1375))
   (assert (! (not (= ^^i4 ^$@state_t)) :named ax_1376))
   (assert (! (not (= ^^i4 ^$@struct)) :named ax_1377))
   (assert (! (not (= ^^i4 ^$@thread_id)) :named ax_1378))
   (assert (! (not (= ^^i4 ^$@thread_id_t)) :named ax_1379))
   (assert (! (not (= ^^i4 ^^bool)) :named ax_1380))
   (assert (! (not (= ^^i4 ^^claim)) :named ax_1381))
   (assert (! (not (= ^^i4 ^^f4)) :named ax_1382))
   (assert (! (not (= ^^i4 ^^f8)) :named ax_1383))
   (assert (! (not (= ^^i4 ^^i1)) :named ax_1384))
   (assert (! (not (= ^^i4 ^^i2)) :named ax_1385))
   (assert (! (not (= ^^i4 ^^i8)) :named ax_1386))
   (assert (! (not (= ^^i4 ^^u1)) :named ax_1387))
   (assert (! (not (= ^^i4 ^^u2)) :named ax_1388))
   (assert (! (not (= ^^i4 ^^u4)) :named ax_1389))
   (assert (! (not (= ^^i8 $@distTp1)) :named ax_1390))
   (assert (! (not (= ^^i8 $@distTp2)) :named ax_1391))
   (assert (! (not (= ^^i8 $@distTp3)) :named ax_1392))
   (assert (! (not (= ^^i8 $@distTp4)) :named ax_1393))
   (assert (! (not (= ^^i8 $@distTp5)) :named ax_1394))
   (assert (! (not (= ^^i8 $@distTp6)) :named ax_1395))
   (assert (! (not (= ^^i8 $memory_allocator_type)) :named ax_1396))
   (assert (! (not (= ^^i8 ^$@ptrset)) :named ax_1397))
   (assert (! (not (= ^^i8 ^$@state_t)) :named ax_1398))
   (assert (! (not (= ^^i8 ^$@struct)) :named ax_1399))
   (assert (! (not (= ^^i8 ^$@thread_id)) :named ax_1400))
   (assert (! (not (= ^^i8 ^$@thread_id_t)) :named ax_1401))
   (assert (! (not (= ^^i8 ^^bool)) :named ax_1402))
   (assert (! (not (= ^^i8 ^^claim)) :named ax_1403))
   (assert (! (not (= ^^i8 ^^f4)) :named ax_1404))
   (assert (! (not (= ^^i8 ^^f8)) :named ax_1405))
   (assert (! (not (= ^^i8 ^^i1)) :named ax_1406))
   (assert (! (not (= ^^i8 ^^i2)) :named ax_1407))
   (assert (! (not (= ^^i8 ^^i4)) :named ax_1408))
   (assert (! (not (= ^^i8 ^^u1)) :named ax_1409))
   (assert (! (not (= ^^i8 ^^u2)) :named ax_1410))
   (assert (! (not (= ^^i8 ^^u4)) :named ax_1411))
   (assert (! (not (= ^^mathint $@distTp1)) :named ax_1412))
   (assert (! (not (= ^^mathint $@distTp2)) :named ax_1413))
   (assert (! (not (= ^^mathint $@distTp3)) :named ax_1414))
   (assert (! (not (= ^^mathint $@distTp4)) :named ax_1415))
   (assert (! (not (= ^^mathint $@distTp5)) :named ax_1416))
   (assert (! (not (= ^^mathint $@distTp6)) :named ax_1417))
   (assert (! (not (= ^^mathint $memory_allocator_type)) :named ax_1418))
   (assert (! (not (= ^^mathint ^$@ptrset)) :named ax_1419))
   (assert (! (not (= ^^mathint ^$@state_t)) :named ax_1420))
   (assert (! (not (= ^^mathint ^$@struct)) :named ax_1421))
   (assert (! (not (= ^^mathint ^$@thread_id)) :named ax_1422))
   (assert (! (not (= ^^mathint ^$@thread_id_t)) :named ax_1423))
   (assert (! (not (= ^^mathint ^^bool)) :named ax_1424))
   (assert (! (not (= ^^mathint ^^claim)) :named ax_1425))
   (assert (! (not (= ^^mathint ^^f4)) :named ax_1426))
   (assert (! (not (= ^^mathint ^^f8)) :named ax_1427))
   (assert (! (not (= ^^mathint ^^i1)) :named ax_1428))
   (assert (! (not (= ^^mathint ^^i2)) :named ax_1429))
   (assert (! (not (= ^^mathint ^^i4)) :named ax_1430))
   (assert (! (not (= ^^mathint ^^i8)) :named ax_1431))
   (assert (! (not (= ^^mathint ^^root_emb)) :named ax_1432))
   (assert (! (not (= ^^mathint ^^u1)) :named ax_1433))
   (assert (! (not (= ^^mathint ^^u2)) :named ax_1434))
   (assert (! (not (= ^^mathint ^^u4)) :named ax_1435))
   (assert (! (not (= ^^mathint ^^u8)) :named ax_1436))
   (assert (! (not (= ^^mathint ^^void)) :named ax_1437))
   (assert (! (not (= ^^mathint ^List)) :named ax_1438))
   (assert (! (not (= ^^root_emb $@distTp1)) :named ax_1439))
   (assert (! (not (= ^^root_emb $@distTp2)) :named ax_1440))
   (assert (! (not (= ^^root_emb $@distTp3)) :named ax_1441))
   (assert (! (not (= ^^root_emb $@distTp4)) :named ax_1442))
   (assert (! (not (= ^^root_emb $@distTp5)) :named ax_1443))
   (assert (! (not (= ^^root_emb $@distTp6)) :named ax_1444))
   (assert (! (not (= ^^root_emb $memory_allocator_type)) :named ax_1445))
   (assert (! (not (= ^^root_emb ^$@ptrset)) :named ax_1446))
   (assert (! (not (= ^^root_emb ^$@state_t)) :named ax_1447))
   (assert (! (not (= ^^root_emb ^$@struct)) :named ax_1448))
   (assert (! (not (= ^^root_emb ^$@thread_id)) :named ax_1449))
   (assert (! (not (= ^^root_emb ^$@thread_id_t)) :named ax_1450))
   (assert (! (not (= ^^root_emb ^^bool)) :named ax_1451))
   (assert (! (not (= ^^root_emb ^^claim)) :named ax_1452))
   (assert (! (not (= ^^root_emb ^^f4)) :named ax_1453))
   (assert (! (not (= ^^root_emb ^^f8)) :named ax_1454))
   (assert (! (not (= ^^root_emb ^^i1)) :named ax_1455))
   (assert (! (not (= ^^root_emb ^^i2)) :named ax_1456))
   (assert (! (not (= ^^root_emb ^^i4)) :named ax_1457))
   (assert (! (not (= ^^root_emb ^^i8)) :named ax_1458))
   (assert (! (not (= ^^root_emb ^^mathint)) :named ax_1459))
   (assert (! (not (= ^^root_emb ^^u1)) :named ax_1460))
   (assert (! (not (= ^^root_emb ^^u2)) :named ax_1461))
   (assert (! (not (= ^^root_emb ^^u4)) :named ax_1462))
   (assert (! (not (= ^^root_emb ^^u8)) :named ax_1463))
   (assert (! (not (= ^^root_emb ^^void)) :named ax_1464))
   (assert (! (not (= ^^root_emb ^List)) :named ax_1465))
   (assert (! (not (= ^^u1 $@distTp1)) :named ax_1466))
   (assert (! (not (= ^^u1 $@distTp2)) :named ax_1467))
   (assert (! (not (= ^^u1 $@distTp3)) :named ax_1468))
   (assert (! (not (= ^^u1 $@distTp4)) :named ax_1469))
   (assert (! (not (= ^^u1 $@distTp5)) :named ax_1470))
   (assert (! (not (= ^^u1 $@distTp6)) :named ax_1471))
   (assert (! (not (= ^^u1 $memory_allocator_type)) :named ax_1472))
   (assert (! (not (= ^^u1 ^$@ptrset)) :named ax_1473))
   (assert (! (not (= ^^u1 ^$@state_t)) :named ax_1474))
   (assert (! (not (= ^^u1 ^$@struct)) :named ax_1475))
   (assert (! (not (= ^^u1 ^$@thread_id)) :named ax_1476))
   (assert (! (not (= ^^u1 ^$@thread_id_t)) :named ax_1477))
   (assert (! (not (= ^^u1 ^^bool)) :named ax_1478))
   (assert (! (not (= ^^u1 ^^claim)) :named ax_1479))
   (assert (! (not (= ^^u1 ^^f4)) :named ax_1480))
   (assert (! (not (= ^^u1 ^^f8)) :named ax_1481))
   (assert (! (not (= ^^u1 ^^i1)) :named ax_1482))
   (assert (! (not (= ^^u1 ^^i2)) :named ax_1483))
   (assert (! (not (= ^^u1 ^^i4)) :named ax_1484))
   (assert (! (not (= ^^u1 ^^i8)) :named ax_1485))
   (assert (! (not (= ^^u1 ^^mathint)) :named ax_1486))
   (assert (! (not (= ^^u1 ^^root_emb)) :named ax_1487))
   (assert (! (not (= ^^u1 ^^u2)) :named ax_1488))
   (assert (! (not (= ^^u1 ^^u4)) :named ax_1489))
   (assert (! (not (= ^^u2 $@distTp1)) :named ax_1490))
   (assert (! (not (= ^^u2 $@distTp2)) :named ax_1491))
   (assert (! (not (= ^^u2 $@distTp3)) :named ax_1492))
   (assert (! (not (= ^^u2 $@distTp4)) :named ax_1493))
   (assert (! (not (= ^^u2 $@distTp5)) :named ax_1494))
   (assert (! (not (= ^^u2 $@distTp6)) :named ax_1495))
   (assert (! (not (= ^^u2 $memory_allocator_type)) :named ax_1496))
   (assert (! (not (= ^^u2 ^$@ptrset)) :named ax_1497))
   (assert (! (not (= ^^u2 ^$@state_t)) :named ax_1498))
   (assert (! (not (= ^^u2 ^$@struct)) :named ax_1499))
   (assert (! (not (= ^^u2 ^$@thread_id)) :named ax_1500))
   (assert (! (not (= ^^u2 ^$@thread_id_t)) :named ax_1501))
   (assert (! (not (= ^^u2 ^^bool)) :named ax_1502))
   (assert (! (not (= ^^u2 ^^claim)) :named ax_1503))
   (assert (! (not (= ^^u2 ^^f4)) :named ax_1504))
   (assert (! (not (= ^^u2 ^^f8)) :named ax_1505))
   (assert (! (not (= ^^u2 ^^i1)) :named ax_1506))
   (assert (! (not (= ^^u2 ^^i2)) :named ax_1507))
   (assert (! (not (= ^^u2 ^^i4)) :named ax_1508))
   (assert (! (not (= ^^u2 ^^i8)) :named ax_1509))
   (assert (! (not (= ^^u2 ^^mathint)) :named ax_1510))
   (assert (! (not (= ^^u2 ^^root_emb)) :named ax_1511))
   (assert (! (not (= ^^u2 ^^u1)) :named ax_1512))
   (assert (! (not (= ^^u2 ^^u4)) :named ax_1513))
   (assert (! (not (= ^^u4 $@distTp1)) :named ax_1514))
   (assert (! (not (= ^^u4 $@distTp2)) :named ax_1515))
   (assert (! (not (= ^^u4 $@distTp3)) :named ax_1516))
   (assert (! (not (= ^^u4 $@distTp4)) :named ax_1517))
   (assert (! (not (= ^^u4 $@distTp5)) :named ax_1518))
   (assert (! (not (= ^^u4 $@distTp6)) :named ax_1519))
   (assert (! (not (= ^^u4 $memory_allocator_type)) :named ax_1520))
   (assert (! (not (= ^^u4 ^$@ptrset)) :named ax_1521))
   (assert (! (not (= ^^u4 ^$@state_t)) :named ax_1522))
   (assert (! (not (= ^^u4 ^$@struct)) :named ax_1523))
   (assert (! (not (= ^^u4 ^$@thread_id)) :named ax_1524))
   (assert (! (not (= ^^u4 ^$@thread_id_t)) :named ax_1525))
   (assert (! (not (= ^^u4 ^^bool)) :named ax_1526))
   (assert (! (not (= ^^u4 ^^claim)) :named ax_1527))
   (assert (! (not (= ^^u4 ^^f4)) :named ax_1528))
   (assert (! (not (= ^^u4 ^^f8)) :named ax_1529))
   (assert (! (not (= ^^u4 ^^i1)) :named ax_1530))
   (assert (! (not (= ^^u4 ^^i2)) :named ax_1531))
   (assert (! (not (= ^^u4 ^^i4)) :named ax_1532))
   (assert (! (not (= ^^u4 ^^i8)) :named ax_1533))
   (assert (! (not (= ^^u4 ^^mathint)) :named ax_1534))
   (assert (! (not (= ^^u4 ^^root_emb)) :named ax_1535))
   (assert (! (not (= ^^u4 ^^u1)) :named ax_1536))
   (assert (! (not (= ^^u4 ^^u2)) :named ax_1537))
   (assert (! (not (= ^^u8 $@distTp1)) :named ax_1538))
   (assert (! (not (= ^^u8 $@distTp2)) :named ax_1539))
   (assert (! (not (= ^^u8 $@distTp3)) :named ax_1540))
   (assert (! (not (= ^^u8 $@distTp4)) :named ax_1541))
   (assert (! (not (= ^^u8 $@distTp5)) :named ax_1542))
   (assert (! (not (= ^^u8 $@distTp6)) :named ax_1543))
   (assert (! (not (= ^^u8 $memory_allocator_type)) :named ax_1544))
   (assert (! (not (= ^^u8 ^$@ptrset)) :named ax_1545))
   (assert (! (not (= ^^u8 ^$@state_t)) :named ax_1546))
   (assert (! (not (= ^^u8 ^$@struct)) :named ax_1547))
   (assert (! (not (= ^^u8 ^$@thread_id)) :named ax_1548))
   (assert (! (not (= ^^u8 ^$@thread_id_t)) :named ax_1549))
   (assert (! (not (= ^^u8 ^^bool)) :named ax_1550))
   (assert (! (not (= ^^u8 ^^claim)) :named ax_1551))
   (assert (! (not (= ^^u8 ^^f4)) :named ax_1552))
   (assert (! (not (= ^^u8 ^^f8)) :named ax_1553))
   (assert (! (not (= ^^u8 ^^i1)) :named ax_1554))
   (assert (! (not (= ^^u8 ^^i2)) :named ax_1555))
   (assert (! (not (= ^^u8 ^^i4)) :named ax_1556))
   (assert (! (not (= ^^u8 ^^i8)) :named ax_1557))
   (assert (! (not (= ^^u8 ^^mathint)) :named ax_1558))
   (assert (! (not (= ^^u8 ^^root_emb)) :named ax_1559))
   (assert (! (not (= ^^u8 ^^u1)) :named ax_1560))
   (assert (! (not (= ^^u8 ^^u2)) :named ax_1561))
   (assert (! (not (= ^^u8 ^^u4)) :named ax_1562))
   (assert (! (not (= ^^void $@distTp1)) :named ax_1563))
   (assert (! (not (= ^^void $@distTp2)) :named ax_1564))
   (assert (! (not (= ^^void $@distTp3)) :named ax_1565))
   (assert (! (not (= ^^void $@distTp4)) :named ax_1566))
   (assert (! (not (= ^^void $@distTp5)) :named ax_1567))
   (assert (! (not (= ^^void $@distTp6)) :named ax_1568))
   (assert (! (not (= ^^void $memory_allocator_type)) :named ax_1569))
   (assert (! (not (= ^^void ^$@ptrset)) :named ax_1570))
   (assert (! (not (= ^^void ^$@state_t)) :named ax_1571))
   (assert (! (not (= ^^void ^$@struct)) :named ax_1572))
   (assert (! (not (= ^^void ^$@thread_id)) :named ax_1573))
   (assert (! (not (= ^^void ^$@thread_id_t)) :named ax_1574))
   (assert (! (not (= ^^void ^^bool)) :named ax_1575))
   (assert (! (not (= ^^void ^^claim)) :named ax_1576))
   (assert (! (not (= ^^void ^^f4)) :named ax_1577))
   (assert (! (not (= ^^void ^^f8)) :named ax_1578))
   (assert (! (not (= ^^void ^^i1)) :named ax_1579))
   (assert (! (not (= ^^void ^^i2)) :named ax_1580))
   (assert (! (not (= ^^void ^^i4)) :named ax_1581))
   (assert (! (not (= ^^void ^^i8)) :named ax_1582))
   (assert (! (not (= ^^void ^^mathint)) :named ax_1583))
   (assert (! (not (= ^^void ^^root_emb)) :named ax_1584))
   (assert (! (not (= ^^void ^^u1)) :named ax_1585))
   (assert (! (not (= ^^void ^^u2)) :named ax_1586))
   (assert (! (not (= ^^void ^^u4)) :named ax_1587))
   (assert (! (not (= ^^void ^^u8)) :named ax_1588))
   (assert (! (not (= ^^void ^List)) :named ax_1589))
   (assert (! (not (= ^List $@distTp1)) :named ax_1590))
   (assert (! (not (= ^List $@distTp2)) :named ax_1591))
   (assert (! (not (= ^List $@distTp3)) :named ax_1592))
   (assert (! (not (= ^List $@distTp4)) :named ax_1593))
   (assert (! (not (= ^List $@distTp5)) :named ax_1594))
   (assert (! (not (= ^List $@distTp6)) :named ax_1595))
   (assert (! (not (= ^List $memory_allocator_type)) :named ax_1596))
   (assert (! (not (= ^List ^$@ptrset)) :named ax_1597))
   (assert (! (not (= ^List ^$@state_t)) :named ax_1598))
   (assert (! (not (= ^List ^$@struct)) :named ax_1599))
   (assert (! (not (= ^List ^$@thread_id)) :named ax_1600))
   (assert (! (not (= ^List ^$@thread_id_t)) :named ax_1601))
   (assert (! (not (= ^List ^^bool)) :named ax_1602))
   (assert (! (not (= ^List ^^claim)) :named ax_1603))
   (assert (! (not (= ^List ^^f4)) :named ax_1604))
   (assert (! (not (= ^List ^^f8)) :named ax_1605))
   (assert (! (not (= ^List ^^i1)) :named ax_1606))
   (assert (! (not (= ^List ^^i2)) :named ax_1607))
   (assert (! (not (= ^List ^^i4)) :named ax_1608))
   (assert (! (not (= ^List ^^i8)) :named ax_1609))
   (assert (! (not (= ^List ^^mathint)) :named ax_1610))
   (assert (! (not (= ^List ^^root_emb)) :named ax_1611))
   (assert (! (not (= ^List ^^u1)) :named ax_1612))
   (assert (! (not (= ^List ^^u2)) :named ax_1613))
   (assert (! (not (= ^List ^^u4)) :named ax_1614))
   (assert (! (not (= ^List ^^u8)) :named ax_1615))
   (assert (! (not (= ^List ^^void)) :named ax_1616))
   (assert (! (not (= ^List ^Node)) :named ax_1617))
   (assert (! (not (= ^Node $@distTp1)) :named ax_1618))
   (assert (! (not (= ^Node $@distTp2)) :named ax_1619))
   (assert (! (not (= ^Node $@distTp3)) :named ax_1620))
   (assert (! (not (= ^Node $@distTp4)) :named ax_1621))
   (assert (! (not (= ^Node $@distTp5)) :named ax_1622))
   (assert (! (not (= ^Node $@distTp6)) :named ax_1623))
   (assert (! (not (= ^Node $memory_allocator_type)) :named ax_1624))
   (assert (! (not (= ^Node ^$@ptrset)) :named ax_1625))
   (assert (! (not (= ^Node ^$@state_t)) :named ax_1626))
   (assert (! (not (= ^Node ^$@struct)) :named ax_1627))
   (assert (! (not (= ^Node ^$@thread_id)) :named ax_1628))
   (assert (! (not (= ^Node ^$@thread_id_t)) :named ax_1629))
   (assert (! (not (= ^Node ^^bool)) :named ax_1630))
   (assert (! (not (= ^Node ^^claim)) :named ax_1631))
   (assert (! (not (= ^Node ^^f4)) :named ax_1632))
   (assert (! (not (= ^Node ^^f8)) :named ax_1633))
   (assert (! (not (= ^Node ^^i1)) :named ax_1634))
   (assert (! (not (= ^Node ^^i2)) :named ax_1635))
   (assert (! (not (= ^Node ^^i4)) :named ax_1636))
   (assert (! (not (= ^Node ^^i8)) :named ax_1637))
   (assert (! (not (= ^Node ^^mathint)) :named ax_1638))
   (assert (! (not (= ^Node ^^root_emb)) :named ax_1639))
   (assert (! (not (= ^Node ^^u1)) :named ax_1640))
   (assert (! (not (= ^Node ^^u2)) :named ax_1641))
   (assert (! (not (= ^Node ^^u4)) :named ax_1642))
   (assert (! (not (= ^Node ^^u8)) :named ax_1643))
   (assert (! (not (= ^Node ^^void)) :named ax_1644))
   (assert (! (not (= ^Node ^List)) :named ax_1645))
   (assert (! (not (= cev_global cev_local)) :named ax_1646))
   (assert (! (not (= cev_global cev_parameter)) :named ax_1647))
   (assert (! (not (= cev_implicit cev_global)) :named ax_1648))
   (assert (! (not (= cev_implicit cev_local)) :named ax_1649))
   (assert (! (not (= cev_implicit cev_parameter)) :named ax_1650))
   (assert (! (not (= cev_local cev_global)) :named ax_1651))
   (assert (! (not (= cev_local cev_implicit)) :named ax_1652))
   (assert (! (not (= cev_local cev_parameter)) :named ax_1653))
   (assert (! (not (= cev_parameter cev_global)) :named ax_1654))
   (assert (! (not (= cev_parameter cev_implicit)) :named ax_1655))
   (assert (! (not (= cev_parameter cev_local)) :named ax_1656))
   (assert (! (not (= cf@lambda@1 cf@classifier@default)) :named ax_1657))
   (assert (! (not (= conditional_moment loop_exited)) :named ax_1658))
   (assert (! (not (= conditional_moment loop_register)) :named ax_1659))
   (assert (! (not (= conditional_moment took_else_branch)) :named ax_1660))
   (assert (! (not (= conditional_moment took_then_branch)) :named ax_1661))
   (assert (! (not (= List.$owns Node.$owns)) :named ax_1662))
   (assert (! (not (= List.followers List.$owns)) :named ax_1663))
   (assert (! (not (= List.followers List.head)) :named ax_1664))
   (assert (! (not (= List.followers List.idx)) :named ax_1665))
   (assert (! (not (= List.followers List.length)) :named ax_1666))
   (assert (! (not (= List.followers List.length_acc)) :named ax_1667))
   (assert (! (not (= List.followers List.seq)) :named ax_1668))
   (assert (! (not (= List.followers Node.$owns)) :named ax_1669))
   (assert (! (not (= List.followers Node.data)) :named ax_1670))
   (assert (! (not (= List.followers Node.next)) :named ax_1671))
   (assert (! (not (= List.head List.$owns)) :named ax_1672))
   (assert (! (not (= List.head List.followers)) :named ax_1673))
   (assert (! (not (= List.head List.idx)) :named ax_1674))
   (assert (! (not (= List.head List.length)) :named ax_1675))
   (assert (! (not (= List.head List.length_acc)) :named ax_1676))
   (assert (! (not (= List.head List.seq)) :named ax_1677))
   (assert (! (not (= List.head Node.$owns)) :named ax_1678))
   (assert (! (not (= List.head Node.data)) :named ax_1679))
   (assert (! (not (= List.head Node.next)) :named ax_1680))
   (assert (! (not (= List.idx List.$owns)) :named ax_1681))
   (assert (! (not (= List.idx List.followers)) :named ax_1682))
   (assert (! (not (= List.idx List.head)) :named ax_1683))
   (assert (! (not (= List.idx List.length)) :named ax_1684))
   (assert (! (not (= List.idx List.length_acc)) :named ax_1685))
   (assert (! (not (= List.idx List.seq)) :named ax_1686))
   (assert (! (not (= List.idx Node.$owns)) :named ax_1687))
   (assert (! (not (= List.idx Node.data)) :named ax_1688))
   (assert (! (not (= List.idx Node.next)) :named ax_1689))
   (assert (! (not (= List.length List.$owns)) :named ax_1690))
   (assert (! (not (= List.length List.followers)) :named ax_1691))
   (assert (! (not (= List.length List.head)) :named ax_1692))
   (assert (! (not (= List.length List.idx)) :named ax_1693))
   (assert (! (not (= List.length List.length_acc)) :named ax_1694))
   (assert (! (not (= List.length List.seq)) :named ax_1695))
   (assert (! (not (= List.length Node.$owns)) :named ax_1696))
   (assert (! (not (= List.length Node.data)) :named ax_1697))
   (assert (! (not (= List.length Node.next)) :named ax_1698))
   (assert (! (not (= List.length_acc List.$owns)) :named ax_1699))
   (assert (! (not (= List.length_acc List.followers)) :named ax_1700))
   (assert (! (not (= List.length_acc List.head)) :named ax_1701))
   (assert (! (not (= List.length_acc List.idx)) :named ax_1702))
   (assert (! (not (= List.length_acc List.length)) :named ax_1703))
   (assert (! (not (= List.length_acc Node.$owns)) :named ax_1704))
   (assert (! (not (= List.length_acc Node.data)) :named ax_1705))
   (assert (! (not (= List.seq List.$owns)) :named ax_1706))
   (assert (! (not (= List.seq List.followers)) :named ax_1707))
   (assert (! (not (= List.seq List.head)) :named ax_1708))
   (assert (! (not (= List.seq List.idx)) :named ax_1709))
   (assert (! (not (= List.seq List.length)) :named ax_1710))
   (assert (! (not (= List.seq List.length_acc)) :named ax_1711))
   (assert (! (not (= List.seq Node.$owns)) :named ax_1712))
   (assert (! (not (= List.seq Node.data)) :named ax_1713))
   (assert (! (not (= List.seq Node.next)) :named ax_1714))
   (assert (! (not (= loop_entered conditional_moment)) :named ax_1715))
   (assert (! (not (= loop_entered loop_exited)) :named ax_1716))
   (assert (! (not (= loop_entered loop_register)) :named ax_1717))
   (assert (! (not (= loop_entered took_else_branch)) :named ax_1718))
   (assert (! (not (= loop_entered took_then_branch)) :named ax_1719))
   (assert (! (not (= loop_exited conditional_moment)) :named ax_1720))
   (assert (! (not (= loop_exited loop_entered)) :named ax_1721))
   (assert (! (not (= loop_exited loop_register)) :named ax_1722))
   (assert (! (not (= loop_exited took_else_branch)) :named ax_1723))
   (assert (! (not (= loop_exited took_then_branch)) :named ax_1724))
   (assert (! (not (= loop_register conditional_moment)) :named ax_1725))
   (assert (! (not (= loop_register loop_entered)) :named ax_1726))
   (assert (! (not (= loop_register loop_exited)) :named ax_1727))
   (assert (! (not (= loop_register took_else_branch)) :named ax_1728))
   (assert (! (not (= loop_register took_then_branch)) :named ax_1729))
   (assert (! (not (= Node.$owns List.$owns)) :named ax_1730))
   (assert (! (not (= Node.$owns List.followers)) :named ax_1731))
   (assert (! (not (= Node.$owns List.head)) :named ax_1732))
   (assert (! (not (= Node.$owns List.idx)) :named ax_1733))
   (assert (! (not (= Node.$owns List.length)) :named ax_1734))
   (assert (! (not (= Node.$owns List.length_acc)) :named ax_1735))
   (assert (! (not (= Node.$owns List.seq)) :named ax_1736))
   (assert (! (not (= Node.data List.$owns)) :named ax_1737))
   (assert (! (not (= Node.data List.followers)) :named ax_1738))
   (assert (! (not (= Node.data List.head)) :named ax_1739))
   (assert (! (not (= Node.data List.idx)) :named ax_1740))
   (assert (! (not (= Node.data List.length)) :named ax_1741))
   (assert (! (not (= Node.data List.length_acc)) :named ax_1742))
   (assert (! (not (= Node.data List.seq)) :named ax_1743))
   (assert (! (not (= Node.data Node.$owns)) :named ax_1744))
   (assert (! (not (= Node.next List.$owns)) :named ax_1745))
   (assert (! (not (= Node.next List.followers)) :named ax_1746))
   (assert (! (not (= Node.next List.head)) :named ax_1747))
   (assert (! (not (= Node.next List.idx)) :named ax_1748))
   (assert (! (not (= Node.next List.length)) :named ax_1749))
   (assert (! (not (= Node.next List.length_acc)) :named ax_1750))
   (assert (! (not (= Node.next List.seq)) :named ax_1751))
   (assert (! (not (= Node.next Node.$owns)) :named ax_1752))
   (assert (! (not (= Node.next Node.data)) :named ax_1753))
   (assert (! (not (= took_else_branch conditional_moment)) :named ax_1754))
   (assert (! (not (= took_else_branch loop_entered)) :named ax_1755))
   (assert (! (not (= took_else_branch loop_exited)) :named ax_1756))
   (assert (! (not (= took_else_branch loop_register)) :named ax_1757))
   (assert (! (not (= took_else_branch took_then_branch)) :named ax_1758))
   (assert (! (not (= took_then_branch conditional_moment)) :named ax_1759))
   (assert (! (not (= took_then_branch loop_entered)) :named ax_1760))
   (assert (! (not (= took_then_branch loop_exited)) :named ax_1761))
   (assert (! (not (= took_then_branch loop_register)) :named ax_1762))
   (assert (! (not (= took_then_branch took_else_branch)) :named ax_1763))
   (assert (! (not (= true $@bf_338)) :named ax_1764))
   (assert (! (not (= true $@bf_344)) :named ax_1765))
   (assert (! (not (= true $@bf_346)) :named ax_1766))
   (assert (! (not (= true $@bf_348)) :named ax_1767))
   (assert (! (not (= true $@bf_356)) :named ax_1768))
   (assert (! (not (= true ($@bf_260 0))) :named ax_1769))
   (assert (! (not (= true ($@bf_282 (- 1) (- 128)))) :named ax_1770))
   (assert (! (not (= true ($@bf_284 (- 1) (- 32768)))) :named ax_1771))
   (assert (! (not (= true ($@bf_286 (- 1) (- 2147483648)))) :named ax_1772))
   (assert (! (or $is_stuttering_check $is_unwrap_check (= true $@bf_161)) :named ax_1773))
   (assert (! (or (not $is_admissibility_check) (= true $@bf_161)) :named ax_1774))
   (assert (! (or (not $is_stuttering_check) (not (= true $@bf_161))) :named ax_1775))
   (assert (! (or (not $is_unwrap_check) (not (= true $@bf_161))) :named ax_1776))
   (assert (! (or (not (< ($frame_level $@sk_65) $current_frame_level)) (= $@bf_323 true)) :named ax_1777))
   (assert (! (or (not (< ($pure_post_level $@sk_66) $current_frame_level)) (= $@bf_327 true)) :named ax_1778))
   (assert (! (or (not (= true $@bf_161)) $is_admissibility_check) :named ax_1779))

;Program
(assert (! (and true
(or anon12@1 anon12_assertion)
) :named ax_true))
(assert (! (=> anon12@1 (and true 
   (and true
      ($in_domain_lab $s ($ptr ^List P@l) ($ptr ^List P@l) l@public)
      ($local_value_is $s $@tok$1^35.10 $@loc.n ($ptr_to_int ($ptr ^Node L@n)) ($ptr_to ^Node))
      ($local_value_is $s $@tok$1^36.3 $@loc.i L@i ^^u4)
      ($local_value_is_ptr $s $@tok$1^35.10 $@loc.n ($ptr ^Node L@n) ($ptr_to ^Node))
      (not (= ($ptr_to ^Node) ^^u4))
      (not (= ^List ($ptr_to ^Node)))
      (not (= ^Node ($ptr_to ^Node)))
   )
(or anon12@1_assertion anon12@2)
)) :named ax_anon12@1))
(assert (! (=> anon12_assertion (not (and true
   (and true
      ($in_domain_lab $s ($ptr ^List P@l) ($ptr ^List P@l) l@public)
   )
))) :named ax_anon12_assertion))
(assert (! (=> anon12@1_assertion (not (and true
   (and true
      ($typed2 $s ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
   )
))) :named ax_anon12@1_assertion))
(assert (! (=> anon12@2 (and true 
   (and true
      ($typed2 $s ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
   )
(or anon12@2_assertion anon12@3)
)) :named ax_anon12@2))
(assert (! (=> anon12@2_assertion (not (and true
   (and true
      ($thread_local2 $s ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
   )
))) :named ax_anon12@2_assertion))
(assert (! (=> anon12@3 (and true 
   (and true
      ($local_value_is $s $@tok$1^38.21 $@loc.i 0 ^^u4)
      ($local_value_is $s $@tok$1^38.8 $@loc.n ($ptr_to_int ($ptr ^Node L@n@0)) ($ptr_to ^Node))
      ($local_value_is_ptr $s $@tok$1^38.8 $@loc.n ($ptr ^Node L@n@0) ($ptr_to ^Node))
      ($thread_local2 $s ($dot ($ptr ^List P@l) List.head) ($ptr_to ^Node))
      (= L@n@0 ($ref ($read_ptr $s ($dot ($ptr ^List P@l) List.head) ^Node)))
   )
(or anon12@3_assertion anon12@4)
)) :named ax_anon12@3))
(assert (! (=> anon12@3_assertion (not (and true
   (and true
      (=> ($ptr_neq ($ptr ^Node L@n@0) $null) ($set_in ($ptr ^Node L@n@0) ($owns $s ($ptr ^List P@l))))
   )
))) :named ax_anon12@3_assertion))
(assert (! (=> anon12@4 (and true 
   (and true
      (or (not ($ptr_neq ($ptr ^Node L@n@0) $null)) ($set_in ($ptr ^Node L@n@0) ($owns $s ($ptr ^List P@l))))
   )
(or anon12@4_assertion anon12@5)
)) :named ax_anon12@4))
(assert (! (=> anon12@4_assertion (not (and true
   (and true
      (= (- ($mem $s ($dot ($ptr ^List P@l) List.length)) 0) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem $s ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@0))))
   )
))) :named ax_anon12@4_assertion))
(assert (! (=> anon12@5 (and true 
   (and true
      (= (+ ($mem $s ($dot ($ptr ^List P@l) List.length)) 0) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem $s ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@0))))
      (= 0 (* (- 1) 0))
   )
(or anon12@5_assertion anon12@6)
)) :named ax_anon12@5))
(assert (! (=> anon12@5_assertion (not (and true
   (and true
      (=> ($ptr_neq ($ptr ^Node L@n@0) $null) ($ptr_eq ($ptr ^Node L@n@0) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) 0))))
   )
))) :named ax_anon12@5_assertion))
(assert (! (=> anon12@6 (and true 
   (and true
      ($full_stop_ext $@tok$1^38.3 $s)
      ($in_range_phys_ptr L@n@1)
      ($in_range_u4 L@i@0)
      ($local_value_is $s $@tok$1^38.3 $@loc.i L@i@0 ^^u4)
      ($local_value_is $s $@tok$1^38.3 $@loc.l ($ptr_to_int ($ptr ^List P@l)) ($ptr_to ^List))
      ($local_value_is $s $@tok$1^38.3 $@loc.n ($ptr_to_int ($ptr ^Node L@n@1)) ($ptr_to ^Node))
      ($local_value_is_ptr $s $@tok$1^38.3 $@loc.l ($ptr ^List P@l) ($ptr_to ^List))
      ($local_value_is_ptr $s $@tok$1^38.3 $@loc.n ($ptr ^Node L@n@1) ($ptr_to ^Node))
      ($meta_eq $s $s)
      ($timestamp_post $s $s)
      ($writes_nothing $s $s)
      (= (+ ($mem $s ($dot ($ptr ^List P@l) List.length)) (* (- 1) L@i@0)) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem $s ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@1))))
      (forall( (|Q#j$1^42.31#tc3| Int))(=> ($in_range_u4 |Q#j$1^42.31#tc3|) (=> (< |Q#j$1^42.31#tc3| L@i@0) (not (= 0 ($mem $s ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) |Q#j$1^42.31#tc3|)) Node.data)))))))
      (not $@condition)
      (not (< L@i@0 0))
      (not (= ($ptr_to ^List) ^^u4))
      (not (= ($ptr_to ^Node) ($ptr_to ^List)))
      (not (= ^List ($ptr_to ^List)))
      (not (= ^Node ($ptr_to ^List)))
      (or (not ($ptr_neq ($ptr ^Node L@n@0) $null)) ($ptr_eq ($ptr ^Node L@n@0) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) 0))))
      (or (not ($ptr_neq ($ptr ^Node L@n@1) $null)) ($ptr_eq ($ptr ^Node L@n@1) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) L@i@0))))
      (or (not ($ptr_neq ($ptr ^Node L@n@1) $null)) ($set_in ($ptr ^Node L@n@1) ($owns $s ($ptr ^List P@l))))
   )
(or anon01_Else anon01_Then)
)) :named ax_anon12@6))
(assert (! (=> anon01_Else (and true 
   (and true
      (not $@condition_$0)
      (not ($ptr_neq ($ptr ^Node L@n@1) $null))
   )
$@hash@break_2
)) :named ax_anon01_Else))
(assert (! (=> anon01_Then (and true 
   (and true
      $@condition_$0
      ($ptr_neq ($ptr ^Node L@n@1) $null)
      (not (= ^^f4 ^^mathint))
      (not (= ^^f4 ^^root_emb))
      (not (= ^^f4 ^^u8))
      (not (= ^^f8 ^^mathint))
      (not (= ^^f8 ^^root_emb))
      (not (= ^^f8 ^^u8))
      (not (= ^^i1 ^^mathint))
      (not (= ^^i1 ^^root_emb))
      (not (= ^^i1 ^^u8))
      (not (= ^^i2 ^^mathint))
      (not (= ^^i2 ^^root_emb))
      (not (= ^^i2 ^^u8))
      (not (= ^^i4 ^^mathint))
      (not (= ^^i4 ^^root_emb))
      (not (= ^^i4 ^^u8))
      (not (= ^^i4 ^^void))
      (not (= ^^i4 ^List))
      (not (= ^^i8 ^^mathint))
      (not (= ^^i8 ^^root_emb))
      (not (= ^^i8 ^^u8))
      (not (= ^^u1 ^^u8))
      (not (= ^^u2 ^^u8))
      (not (= ^^u4 ^^u8))
      (not (= ^^u4 ^^void))
      (not (= ^^u4 ^List))
      (not (= List.length_acc List.seq))
      (not (= Node.data Node.next))
   )
(or anon01_Then@1 anon01_Then_assertion)
)) :named ax_anon01_Then))
(assert (! (=> anon01_Then@1 (and true 
   (and true
      ($typed2 $s ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
   )
(or anon01_Then@1_assertion anon01_Then@2)
)) :named ax_anon01_Then@1))
(assert (! (=> anon01_Then_assertion (not (and true
   (and true
      ($typed2 $s ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
   )
))) :named ax_anon01_Then_assertion))
(assert (! (=> anon01_Then@1_assertion (not (and true
   (and true
      ($thread_local2 $s ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
   )
))) :named ax_anon01_Then@1_assertion))
(assert (! (=> anon01_Then@2 (and true 
   (and true
      ($thread_local2 $s ($dot ($ptr ^Node L@n@1) Node.data) ^^i4)
   )
(or anon02_Else anon02_Then)
)) :named ax_anon01_Then@2))
(assert (! (=> anon02_Else (and true 
   (and true
      (not $@condition_$1)
      (not (= ($mem $s ($dot ($ptr ^Node L@n@1) Node.data)) 0))
   )
(or anon02_Else@1 anon02_Else_assertion)
)) :named ax_anon02_Else))
(assert (! (=> anon02_Then (and true 
   (and true
      $@condition_$1
      (= 0 ($mem $s ($dot ($ptr ^Node L@n@1) Node.data)))
      (not (= $memory_allocator_type ^List))
      (not (= $memory_allocator_type ^Node))
      (not (= ^$@ptrset ^List))
      (not (= ^$@ptrset ^Node))
      (not (= ^$@state_t ^List))
      (not (= ^$@state_t ^Node))
      (not (= ^$@struct ^List))
      (not (= ^$@struct ^Node))
      (not (= ^$@thread_id_t ^List))
      (not (= ^$@thread_id_t ^Node))
      (not (= ^^f4 ^^void))
      (not (= ^^f4 ^List))
      (not (= ^^f4 ^Node))
      (not (= ^^f8 ^^void))
      (not (= ^^f8 ^List))
      (not (= ^^f8 ^Node))
      (not (= ^^i1 ^^void))
      (not (= ^^i1 ^List))
      (not (= ^^i1 ^Node))
      (not (= ^^i2 ^^void))
      (not (= ^^i2 ^List))
      (not (= ^^i2 ^Node))
      (not (= ^^i4 ^Node))
      (not (= ^^i8 ^^void))
      (not (= ^^i8 ^List))
      (not (= ^^i8 ^Node))
      (not (= ^^mathint ^Node))
      (not (= ^^root_emb ^Node))
      (not (= ^^u1 ^^void))
      (not (= ^^u1 ^List))
      (not (= ^^u1 ^Node))
      (not (= ^^u2 ^^void))
      (not (= ^^u2 ^List))
      (not (= ^^u2 ^Node))
      (not (= ^^u4 ^Node))
      (not (= ^^u8 ^^void))
      (not (= ^^u8 ^List))
      (not (= ^^u8 ^Node))
      (not (= ^^void ^Node))
   )
$@hash@break_2
)) :named ax_anon02_Then))
(assert (! (=> anon02_Else@1 (and true 
   (and true
      ($typed2 $s ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
   )
(or anon02_Else@1_assertion anon02_Else@2)
)) :named ax_anon02_Else@1))
(assert (! (=> anon02_Else_assertion (not (and true
   (and true
      ($typed2 $s ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
   )
))) :named ax_anon02_Else_assertion))
(assert (! (=> $@hash@break_2 (and true 
   (and true
      $position_marker
      (= $result@0 L@i@0)
   )
(or GeneratedUnifiedExit@1 GeneratedUnifiedExit_assertion)
)) :named ax_$@hash@break_2))
(assert (! (=> anon02_Else@1_assertion (not (and true
   (and true
      ($thread_local2 $s ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
   )
))) :named ax_anon02_Else@1_assertion))
(assert (! (=> anon02_Else@2 (and true 
   (and true
      ($local_value_is $s $@tok$1^38.31 $@loc.n ($ptr_to_int ($ptr ^Node L@n@2)) ($ptr_to ^Node))
      ($local_value_is_ptr $s $@tok$1^38.31 $@loc.n ($ptr ^Node L@n@2) ($ptr_to ^Node))
      ($thread_local2 $s ($dot ($ptr ^Node L@n@1) Node.next) ($ptr_to ^Node))
      (= L@n@2 ($ref ($read_ptr $s ($dot ($ptr ^Node L@n@1) Node.next) ^Node)))
   )
(or anon02_Else@2_assertion anon02_Else@3)
)) :named ax_anon02_Else@2))
(assert (! (=> GeneratedUnifiedExit@1 (and true 
   (and true
      (forall( (|Q#i$1^32.51#tc3| Int))(=> ($in_range_u4 |Q#i$1^32.51#tc3|) (=> (< |Q#i$1^32.51#tc3| $result@0) (not (= 0 ($mem $s ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) |Q#i$1^32.51#tc3|)) Node.data)))))))
      (not (< ($mem $s ($dot ($ptr ^List P@l) List.length)) $result@0))
   )
GeneratedUnifiedExit@1_assertion
)) :named ax_GeneratedUnifiedExit@1))
(assert (! (=> GeneratedUnifiedExit_assertion (not (and true
   (and true
      (<= $result@0 ($mem $s ($dot ($ptr ^List P@l) List.length)))
      (forall( (|Q#i$1^32.51#tc3| Int))(=> ($in_range_u4 |Q#i$1^32.51#tc3|) (=> (< |Q#i$1^32.51#tc3| $result@0) (not (= ($mem $s ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) |Q#i$1^32.51#tc3|)) Node.data)) 0)))))
   )
))) :named ax_GeneratedUnifiedExit_assertion))
(assert (! (=> anon02_Else@2_assertion (not (and true
   (and true
      ($in_range_u4 (+ L@i@0 1))
   )
))) :named ax_anon02_Else@2_assertion))
(assert (! (=> anon02_Else@3 (and true 
   (and true
      ($in_range_u4 L@i@1)
      ($local_value_is $s $@tok$1^38.44 $@loc.i L@i@1 ^^u4)
      (= L@i@1 (+ L@i@0 1))
   )
(or anon02_Else@3_assertion anon02_Else@4)
)) :named ax_anon02_Else@3))
(assert (! (=> GeneratedUnifiedExit@1_assertion (not (and true
   (and true
      (=> (< $result@0 ($mem $s ($dot ($ptr ^List P@l) List.length))) (= ($mem $s ($dot ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) $result@0)) Node.data)) 0))
   )
))) :named ax_GeneratedUnifiedExit@1_assertion))
(assert (! (=> anon02_Else@3_assertion (not (and true
   (and true
      (=> ($ptr_neq ($ptr ^Node L@n@2) $null) ($set_in ($ptr ^Node L@n@2) ($owns $s ($ptr ^List P@l))))
   )
))) :named ax_anon02_Else@3_assertion))
(assert (! (=> anon02_Else@4 (and true 
   (and true
      (or (not ($ptr_neq ($ptr ^Node L@n@2) $null)) ($set_in ($ptr ^Node L@n@2) ($owns $s ($ptr ^List P@l))))
   )
(or anon02_Else@4_assertion anon02_Else@5)
)) :named ax_anon02_Else@4))
(assert (! (=> anon02_Else@4_assertion (not (and true
   (and true
      (= (- ($mem $s ($dot ($ptr ^List P@l) List.length)) L@i@1) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem $s ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@2))))
   )
))) :named ax_anon02_Else@4_assertion))
(assert (! (=> anon02_Else@5 (and true 
   (and true
      (= (+ ($mem $s ($dot ($ptr ^List P@l) List.length)) (* (- 1) L@i@1)) ($select.$map_t..$ptr_to..^Node.^^u4 ($int_to_map_t..ptr_to..^Node.^^u4 ($mem $s ($dot ($ptr ^List P@l) List.length_acc))) ($ref ($ptr ^Node L@n@2))))
   )
anon02_Else@5_assertion
)) :named ax_anon02_Else@5))
(assert (! (=> anon02_Else@5_assertion (not (and true
   (and true
      (=> ($ptr_neq ($ptr ^Node L@n@2) $null) ($ptr_eq ($ptr ^Node L@n@2) ($ptr ^Node ($select.$map_t..^^u4.$ptr_to..^Node ($int_to_map_t..^^u4.ptr_to..^Node ($mem $s ($dot ($ptr ^List P@l) List.seq))) L@i@1))))
   )
))) :named ax_anon02_Else@5_assertion))
(assert (=> false (not (and
   anon01_Then@1_assertion
   anon01_Then_assertion
   anon02_Else@1_assertion
   anon02_Else@2_assertion
   anon02_Else@3_assertion
   anon02_Else@4_assertion
   anon02_Else@5_assertion
   anon02_Else_assertion
   anon12@1_assertion
   anon12@2_assertion
   anon12@3_assertion
   anon12@4_assertion
   anon12@5_assertion
   anon12_assertion
   GeneratedUnifiedExit@1_assertion
   GeneratedUnifiedExit_assertion
))))

;Commands
   (check-sat)
   ;(get-unsat-core)
