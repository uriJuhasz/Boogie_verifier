////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class AVLTree{
	//////////////////////////////////////////////////////////
	var root : AVLTreeNode;
	ghost var keys : seq<int>;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(root,100)
		&& acc(keys,50)
		&& (root!=null ==> (
			   root.valid
//			&& acc(root.height       ,50)
			&& acc(root.keys         ,50)
//			&& acc(root.balanceFactor,50)
			&& keys == root.keys
		))
		&& (root==null ==> (
			keys == nil<int>
		))
	}

	//////////////////////////////////////////////////////////
	method init()
		requires acc(root,100);
		requires acc(keys,100);

		ensures valid;
		ensures acc(keys,50);
		ensures keys == nil<int>;
	{
		/*root := null;
		keys := nil<int>;
		fold valid;*/
		assume false;
	}

	//////////////////////////////////////////////////////////
	method insert(k : int)
		requires valid;
		requires acc(keys,50);

		ensures valid;
		ensures acc(keys,50);

		ensures k in keys;
		ensures forall j in old(keys) :: j in keys;
		ensures forall j in keys :: ( j in old(keys) || j==k);
	{
		/*unfold valid;
		if (root==null){
			var n : AVLTreeNode := new AVLTreeNode;
			call n.init(k);
			root := n;
		}else{
			call r := root.insert(k);
			root := r;
		}
		keys := root.keys;
		fold valid;*/
		assume false;		
	}
	
	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);

		ensures valid;
		ensures rd(keys);
		ensures b == (k in keys);
	{ 
		/*unfold valid;
		if (root==null){
			b := false;
		}else{
			var bb : bool;
			call bb:= root.has(k);
			b := bb;
		}
		fold valid;*/
		assume false;
	}
}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class AVLTreeNode{
	//////////////////////////////////////////////////////////
	var key    : int;
//	var height : int;
	var left  : AVLTreeNode;
	var right : AVLTreeNode;

	//////////////////////////////////////////////////////////
	ghost var keys : seq<int>;
//	ghost var balanceFactor : int;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(key   ,100)
//		&& acc(height,50)
		&& acc(left  ,100)
		&& acc(right ,100)

		&& acc(keys         ,50)
//		&& acc(balanceFactor,50)

		&& (left!=null ==> (
			   left.valid
//			&& acc(left.height       ,50)
			&& acc(left.keys         ,50)
//			&& acc(left.balanceFactor,50)
			&& (forall lk in left.keys :: lk < key)
//			&& left.height > 0
		))

		&& (right!=null ==> (
			   right.valid
//			&& acc(right.height       ,50)
			&& acc(right.keys         ,50)
//			&& acc(right.balanceFactor,50)
			&& (forall rk in right.keys :: key < rk )
//			&& right.height > 0
		))

		&& keys          == ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys )
		&& key in keys
		&& (forall kk : int :: 
				(	
					(kk in keys )
						<==> 
					(
						   ( left !=null && kk in left .keys )
						|| ( right!=null && kk in right.keys )
						|| kk == key
					)
				)
			)
//		&& height        == ( ( left==null ? 0 : left.height ) > ( right==null ? 0 : right.height ) ? ( left==null ? 0 : left.height )+1 : ( right==null ? 0 : right.height )+1 )
//		&& balanceFactor == ( left==null ? 0 : left.height ) - ( right==null ? 0 : right.height )
//		&& balanceFactor<= 1
//		&& balanceFactor>=-1
//		&& height > 0
	}

	//////////////////////////////////////////////////////////
	method init(k : int)
		requires acc(key   ,100);
//		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
//		requires acc(balanceFactor,100)

		ensures valid;
		ensures acc(keys,  50);
//		ensures acc(height,50);
//		ensures acc(balanceFactor,50);

//		ensures height == 1;
		ensures keys == [k];
//		ensures balanceFactor == 0;

		ensures k in keys;
	{ 
		/*left   := null;
		right  := null;
		key    := k;

		assert [k][0] == k;
		call close();*/
		assume false;		
	}

	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method insert(k : int) returns ( r : AVLTreeNode )
		requires valid;
		requires acc(keys,  50);
//		requires acc(height,50);
//		requires acc(balanceFactor,50);

		ensures r != null;
		ensures r.valid;
		ensures acc(r.keys,  50);
//		ensures acc(r.height,50);
//		ensures acc(r.balanceFactor,50);

		ensures k in r.keys;
		ensures forall i in old(keys) :: i in r.keys;
		ensures forall i in r.keys :: ( i in old(keys) || i==k);
		ensures k in old(keys) ==> r.keys==old(keys);
		ensures !(k in old(keys)) ==> |r.keys| == |old(keys)|+1;
		
//		ensures ( r.height == old(height) ) || ( r.height == old(height) + 1 );
//		ensures k in old(keys) ==> r.height==old(height);
	{
		unfold valid;
		if (key==k){
			/*r := this;
			assert k==[key][0];
			call r.close();*/
			assume false;
		}else{ //key!=k
			if (k<key){
				ghost var ol : seq<int> := (left==null?nil<int>:left.keys);
				ghost var ik : seq<int> := [key];
				ghost var or : seq<int> := (right==null?nil<int>:right.keys);
				assert old(keys) == ol ++ ik ++ or;
				
				var nl : AVLTreeNode;
				if (left==null){
					/*nl := new AVLTreeNode;
					call nl.init(k);*/
					assume false;
				}else{
					call nl := left.insert(k);
				}
				left := nl;

				assert left!=null;
				ghost var il : seq<int> := left.keys;
				ghost var iks : seq<int> := il ++ ik ++ or;
				assert forall i in old(keys) :: i in iks; //+
				
				var bf : int;
				call bf := getBalanceFactorI();
				if (bf==2){ //rebalance
					var lbf : int;
					call lbf := left.getBalanceFactor();
					unfold left.valid;
					if (lbf==-1){
						ghost var ill  : seq<int> := (left.left ==null?nil<int>:left.left .keys);
						ghost var ilk  : seq<int> := [left.key];
						ghost var ilr  : seq<int> := left.right.keys;
						assert il == ill ++ ilk ++ ilr;
						assert iks == ill ++ ilk ++ ilr ++ ik ++ or;
						

						unfold left.right.valid;
						ghost var ilrl : seq<int> := (left.right.left==null?nil<int>:left.right.left.keys);
						ghost var ilrk :     int  := left.right.key;
						ghost var ilrr : seq<int> := (left.right.right==null?nil<int>:left.right.right.keys);
						assert iks == ill ++ ilk ++ ilrl ++ [ilrk] ++ ilrr ++ ik ++ or;
//						assume iks == ill ++ [ilk] ++ ilrl ++ [ilrk] ++ ilrr ++ [ik] ++ or;
//						assume forall k1 in [ilk]  :: k1 == ilk;
//						assume forall k1 in [ilrk] :: k1 == ilrk;
//						assume forall k1 in [ik]   :: k1 == ik;
20m
						assume false;
/*						r          := left.right;
						left.right := r.left;
						call left.close();
//						ghost var nlks : seq<int> := left.keys;

//						assume nlks == ill ++ [ilk] ++ ilrl;
//						assume iks == nlks ++ [ilrk] ++ ilrr ++ [ik] ++ or;

						r.left     := left;
						left       := r.right;
						call close(); 
//						ghost var nks : seq<int> := keys;
						r.right    := this;

//						assume nks == ilrr ++ [ik] ++ or;
//						assume iks == nlks ++ [ilrk] ++ nks;

						//						assert nlks == ill ++ [ilk] ++ ilrl;
//						assert forall k1 in ill   :: k1 < ilrk;
//						assert forall k1 in [ilk] :: k1 < ilrk;
//						assert forall k1 in ilrl  :: k1 < ilrk;
//						assume forall k1 in nlks  :: k1 < ilrk;

//						assert nks == ilrr ++ [ik] ++ or;
//						assert forall k2 in ilrr :: ilrk < k2;
//						assert forall k2 in [ik] :: ilrk < k2;
//						assert forall k2 in or   :: ilrk < k2;
//						assume forall k2 in nks  :: ilrk < k2;
						
 
						call r.close();
//						assert r.keys == iks;
//						assume r != null;
//						assume r.valid;
//						assume acc(r.keys,  50);
//						assume k in r.keys;
//						assert forall i in old(keys) :: i in r.keys;
//-						assert forall i in r.keys :: ( i in old(keys) || i==k);
//-						assert k in old(keys) ==> r.keys==old(keys);
//						assert !(k in old(keys)) ==> |r.keys| == |old(keys)|+1;*/
						assume false;
					}else{ //lbf>=0
						/*r       := left;
						left    := r.right;
						call close();
						r.right := this;
						call r.close();*/
						assume false;
					}
					//assume false;
				}else{ //no rebalance
					/*r := this;
					call r.close();*/
					assume false;
				}
			}else{ // k>key 
				/*var nr : AVLTreeNode;
				if (right==null){
					nr := new AVLTreeNode;
					call nr.init(k);
				}else{
					call nr := right.insert(k);
				}
				right := nr;
				
				ghost var ir : seq<int> := (right ==null?nil<int>:right .keys);
				ghost var iks : seq<int> := ol ++ [key] ++ ir;
				
				var bf : int;
				call bf := getBalanceFactorI();
				if (bf==-2){ //rebalance
					var rbf : int;
					call rbf := right.getBalanceFactor();
					unfold right.valid;

					if (rbf==1){
						unfold right.left.valid;
						ghost var irr  : seq<int> := (right.right ==null?nil<int>:right.right .keys);
						ghost var irk  :     int  := right.key;
						ghost var irlr : seq<int> := (right.left.right==null?nil<int>:right.left.right.keys);
						ghost var irlk :     int  := right.left.key;
						ghost var irll : seq<int> := (right.left.left==null?nil<int>:right.left.left.keys);
						ghost var ik   :     int  := key;
						assume forall k1 in [irk]  :: k1 == irk;
						assume forall k1 in [irlk] :: k1 == irlk;
						assume forall k1 in [ik]   :: k1 == ik;

						r          := right.left;
						right.left := r.right;
						call right.close();
						ghost var nrks : seq<int> := right.keys;

						r.right    := right;
						right      := r.left;
						call close();
						ghost var nks : seq<int> := keys;
						r.left     := this;

						assert nrks == irlr ++ [irk] ++ irr;
						assert forall k2 in irlr  :: irlk < k2;
						assert forall k2 in [irk] :: irlk < k2;
						assert forall k2 in irr   :: irlk < k2;
						assume forall k2 in nrks  :: irlk < k2;

						assert nks == ol ++ [ik] ++ irll;
						assert forall k1 in irll :: k1 < irlk;
						assert forall k1 in [ik] :: k1 < irlk;
						assert forall k1 in ol   :: k1 < irlk;
						assume forall k1 in nks  :: k1 < irlk;
						
						
						call r.close();
					}else{ //rbf<=0
						r       := right;
						right   := r.left;
						call close();
						r.left  := this;
						call r.close();
					}
				}else{//bf > -2
					r := this;
					call r.close();
				}*/
				assume false;
			}
		}
/*		assume forall i in old(keys) :: i in r.keys;
		assume forall i in r.keys :: ( i in old(keys) || i==k);
		assume k in old(keys) ==> r.keys==old(keys);
		assume !(k in old(keys)) ==> |r.keys| == |old(keys)|+1;*/
	}

	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);

		ensures valid;
		ensures rd(keys);
		ensures b == (k in keys);
	{ 
		/*unfold valid;
		if (k==key){
			b := true;
			assert [key][0]==k;
			fold valid;
		}else{ //k!=key
			if (k < key){
				if (left!=null){
					call b := left.has(k);
					fold valid;
				}else{
					b := false;
					fold valid;
				}
			}else{ //k > key;
				if (right!=null){
					call b := right.has(k);
					fold valid;
				}else{
					b := false;
					fold valid;
				}
			}
		}*/
		assume false;		
	}

	//////////////////////////////////////////////////////////
	method getBalanceFactorI() returns ( bf : int ) 
		requires rd(left);// && rd(left.height);
		requires rd(right);
		
		ensures rd(left);
		ensures rd(right);
		
		ensures bf > 0 ==> left!=null;
		ensures bf < 0 ==> right!=null;
		
//		ensures bf == left.height-right.height;
	{
		assume bf > 0 ==> left!=null;
		assume bf < 0 ==> right!=null;
	}

	//////////////////////////////////////////////////////////
	method getBalanceFactor() returns ( bf : int ) 
		requires valid;
//		requires rd(balanceFactor);

		ensures valid;
//		ensures rd(balanceFactor);
//		ensures bf == balanceFactor;
		ensures bf > 0 ==> unfolding valid in left!=null;
		ensures bf < 0 ==> unfolding valid in right!=null;
	{
		/* unfold valid;
//		var lh : int := (left ==null ? 0 : left .height );
//		var rh : int := (right==null ? 0 : right.height );
//		bf := lh-rh;
		fold valid; */
		assume bf > 0 ==> unfolding valid in left!=null;
		assume bf < 0 ==> unfolding valid in right!=null;
	}

	//////////////////////////////////////////////////////////
	method close()
		requires acc(key   ,100);
//		requires acc(height,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
//		requires acc(balanceFactor,100);

		requires left!=null ==> (
			   left.valid
//			&& acc(left.height       ,50)
			&& acc(left.keys         ,50)
//			&& acc(left.balanceFactor,50)
			&& forall k in left.keys :: k < key
		);

		requires right!=null ==> (
			   right.valid
//			&& acc(right.height       ,50)
			&& acc(right.keys         ,50)
//			&& acc(right.balanceFactor,50)
			&& forall k in right.keys :: key < k
		);

//		requires ( left==null ? 0 : left.height )-( right==null ? 0 : right.height ) <= 1;
//		requires ( left==null ? 0 : left.height )-( right==null ? 0 : right.height ) >=-1;

		ensures valid;
//		ensures acc(height       ,50);
		ensures acc(keys         ,50);
//		ensures acc(balanceFactor,50);

		ensures keys == 
			( old(left)==null ? nil<int> : old(left.keys) ) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );
//		ensures height == 
//			( ( old(left)==null ? 0 : old(left.height) )>( old(right)==null ? 0 : old(right.height) ) 
//				? 	( old(left)==null ? 0 : old(left.height) )+1 
//				: 	( old(right)==null ? 0 : old(right.height))+1
//			);
			
//		ensures balanceFactor == 
//			( old(left)==null ? 0 : old(left.height) )-( old(right)==null ? 0 : old(right.height) );
	{/*
//		var lh : int := (left ==null ? 0 : left .height );
//		var rh : int := (right==null ? 0 : right.height );
		
//		assert left !=null ==> unfolding left .valid in left .height>0;
//		assert right!=null ==> unfolding right.valid in right.height>0;
//		height := ( (( left==null ? 0 : left.height )>( right==null ? 0 : right.height )) ? ( left==null ? 0 : left.height )+1 : ( right==null ? 0 : right.height )+1);
		
//		balanceFactor := ( left==null ? 0 : left.height )-( right==null ? 0 : right.height );
		keys          := ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys );
		assert [key][0] == key;
		fold valid;*/
		assume false;
	}
}