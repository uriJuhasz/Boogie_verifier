(set-option :smt.qi.profile true)



Global parameters
    auto_config (bool) use heuristics to automatically select solver and configure it (default: true)
    debug_ref_count (bool) debug support for AST reference counting (default: false)
    dump_models (bool) dump models whenever check-sat returns sat (default: false)
    memory_high_watermark (unsigned int) set high watermark for memory consumption (in megabytes), if 0 then there is no limit (default: 0)
    memory_max_alloc_count (unsigned int) set hard upper limit for memory allocations, if 0 then there is no limit (default: 0)
    memory_max_size (unsigned int) set hard upper limit for memory consumption (in megabytes), if 0 then there is no limit (default: 0)
    model (bool) model generation for solvers, this parameter can be overwritten when creating a solver (default: true)
    model_validate (bool) validate models produced by solvers (default: false)
    proof (bool) proof generation, it must be enabled when the Z3 context is created (default: false)
    rlimit (unsigned int) default resource limit used for solvers. Unrestricted when set to 0. (default: 0)
    smtlib2_compliant (bool) enable/disable SMT-LIB 2.0 compliance (default: false)
    timeout (unsigned int) default timeout (in milliseconds) used for solvers (default: 4294967295)
    trace (bool) trace generation for VCC (default: false)
    trace_file_name (string) trace out file name (see option 'trace') (default: z3.log)
    type_check (bool) type checker (alias for well_sorted_check) (default: true)
    unsat_core (bool) unsat-core generation for solvers, this parameter can be overwritten when creating a solver, not every solver in Z3 supports unsat core generation (default: false)
    verbose (unsigned int) be verbose, where the value is the verbosity level (default: 0)
    warning (bool) enable/disable warning messages (default: true)
    well_sorted_check (bool) type checker (default: false)

To set a module parameter, use <module-name>.<parameter-name>=value
Example:  pp.decimal=true

[module] pi, description: pattern inference (heuristics) for universal formulas (without annotation)
    arith (unsigned int) 0 - do not infer patterns with arithmetic terms, 1 - use patterns with arithmetic terms if there is no other pattern, 2 - always use patterns with arithmetic terms (default: 1)
    arith_weight (unsigned int) default weight for quantifiers where the only available pattern has nested arithmetic terms (default: 5)
    block_loop_patterns (bool) block looping patterns during pattern inference (default: true)
    max_multi_patterns (unsigned int) when patterns are not provided, the prover uses a heuristic to infer them, this option sets the threshold on the number of extra multi-patterns that can be created; by default, the prover creates at most one multi-pattern when there is no unary pattern (default: 0)
    non_nested_arith_weight (unsigned int) default weight for quantifiers where the only available pattern has non nested arithmetic terms (default: 10)
    pull_quantifiers (bool) pull nested quantifiers, if no pattern was found (default: true)
    use_database (bool) use pattern database (default: false)
    warnings (bool) enable/disable warning messages in the pattern inference module (default: false)
[module] pp, description: pretty printer
    bounded (bool) ignore characters exceeding max widht (default: false)
    bv_literals (bool) use Bit-Vector literals (e.g, #x0F and #b0101) during pretty printing (default: true)
    bv_neg (bool) use bvneg when displaying Bit-Vector literals where the most significant bit is 1 (default: false)
    decimal (bool) pretty print real numbers using decimal notation (the output may be truncated). Z3 adds a ? if the value is not precise (default: false)
    decimal_precision (unsigned int) maximum number of decimal places to be used when pp.decimal=true (default: 10)
    fixed_indent (bool) use a fixed indentation for applications (default: false)
    flat_assoc (bool) flat associative operators (when pretty printing SMT2 terms/formulas) (default: true)
    fp_real_literals (bool) use real-numbered floating point literals (e.g, +1.0p-1) during pretty printing (default: false)
    max_depth (unsigned int) max. term depth (when pretty printing SMT2 terms/formulas) (default: 5)
    max_indent (unsigned int) max. indentation in pretty printer (default: 4294967295)
    max_num_lines (unsigned int) max. number of lines to be displayed in pretty printer (default: 4294967295)
    max_ribbon (unsigned int) max. ribbon (width - indentation) in pretty printer (default: 80)
    max_width (unsigned int) max. width in pretty printer (default: 80)
    min_alias_size (unsigned int) min. size for creating an alias for a shared term (when pretty printing SMT2 terms/formulas) (default: 10)
    simplify_implies (bool) simplify nested implications for pretty printing (default: true)
    single_line (bool) ignore line breaks when true (default: false)
[module] fixedpoint, description: fixedpoint parameters
    datalog.all_or_nothing_deltas (bool) compile rules so that it is enough for the delta relation in union and widening operations to determine only whether the updated relation was modified or not (default: false)
    datalog.check_relation (symbol) name of default relation to check. operations on the default relation will be verified using SMT solving (default: null)
    datalog.compile_with_widening (bool) widening will be used to compile recursive rules (default: false)
    datalog.dbg_fpr_nonempty_relation_signature (bool) if true, finite_product_relation will attempt to avoid creating inner relation with empty signature by putting in half of the table columns, if it would have been empty otherwise (default: false)
    datalog.default_relation (symbol) default relation implementation: external_relation, pentagon (default: pentagon)
    datalog.default_table (symbol) default table implementation: sparse, hashtable, bitvector, interval (default: sparse)
    datalog.default_table_checked (bool) if true, the detault table will be default_table inside a wrapper that checks that its results are the same as of default_table_checker table (default: false)
    datalog.default_table_checker (symbol) see default_table_checked (default: null)
    datalog.explanations_on_relation_level (bool) if true, explanations are generated as history of each relation, rather than per fact (generate_explanations must be set to true for this option to have any effect) (default: false)
    datalog.generate_explanations (bool) produce explanations for produced facts when using the datalog engine (default: false)
    datalog.initial_restart_timeout (unsigned int) length of saturation run before the first restart (in ms), zero means no restarts (default: 0)
    datalog.magic_sets_for_queries (bool) magic set transformation will be used for queries (default: false)
    datalog.output_profile (bool) determines whether profile information should be output when outputting Datalog rules or instructions (default: false)
    datalog.print.tuples (bool) determines whether tuples for output predicates should be output (default: true)
    datalog.profile_timeout_milliseconds (unsigned int) instructions and rules that took less than the threshold will not be printed when printed the instruction/rule list (default: 0)
    datalog.similarity_compressor (bool) rules that differ only in values of constants will be merged into a single rule (default: true)
    datalog.similarity_compressor_threshold (unsigned int) if similarity_compressor is on, this value determines how many similar rules there must be in order for them to be merged (default: 11)
    datalog.unbound_compressor (bool) auxiliary relations will be introduced to avoid unbound variables in rule heads (default: true)
    datalog.use_map_names (bool) use names from map files when displaying tuples (default: true)
    duality.batch_expand (bool) use batch expansion (default: false)
    duality.conjecture_file (string) save conjectures to file (default: )
    duality.enable_restarts (bool) DUALITY: enable restarts (default: false)
    duality.feasible_edges (bool) Don't expand definitley infeasible edges (default: true)
    duality.full_expand (bool) Fully expand derivation trees (default: false)
    duality.mbqi (bool) use model-based quantifier instantiation (default: true)
    duality.no_conj (bool) No forced covering (conjectures) (default: false)
    duality.profile (bool) profile run time (default: false)
    duality.recursion_bound (unsigned int) Recursion bound for stratified inlining (default: 4294967295)
    duality.stratified_inlining (bool) Use stratified inlining (default: false)
    duality.use_underapprox (bool) Use underapproximations (default: false)
    engine (symbol) Select: auto-config, datalog, duality, pdr, bmc (default: auto-config)
    generate_proof_trace (bool) trace for 'sat' answer as proof object (default: false)
    pdr.bfs_model_search (bool) use BFS strategy for expanding model search (default: true)
    pdr.cache_mode (unsigned int) use no (0), symbolic (1) or explicit cache (2) for model search (default: 0)
    pdr.farkas (bool) use lemma generator based on Farkas (for linear real arithmetic) (default: true)
    pdr.flexible_trace (bool) allow PDR generate long counter-examples by extending candidate trace within search area (default: false)
    pdr.inductive_reachability_check (bool) assume negation of the cube on the previous level when checking for reachability (not only during cube weakening) (default: false)
    pdr.max_num_contexts (unsigned int) maximal number of contexts to create (default: 500)
    pdr.simplify_formulas_post (bool) simplify derived formulas after inductive propagation (default: false)
    pdr.simplify_formulas_pre (bool) simplify derived formulas before inductive propagation (default: false)
    pdr.try_minimize_core (bool) try to reduce core size (before inductive minimization) (default: false)
    pdr.use_arith_inductive_generalizer (bool) generalize lemmas using arithmetic heuristics for induction strengthening (default: false)
    pdr.use_convex_closure_generalizer (bool) generalize using convex closures of lemmas (default: false)
    pdr.use_convex_interior_generalizer (bool) generalize using convex interiors of lemmas (default: false)
    pdr.use_inductive_generalizer (bool) generalize lemmas using induction strengthening (default: true)
    pdr.use_model_generalizer (bool) use model for backwards propagation (instead of symbolic simulation) (default: false)
    pdr.use_multicore_generalizer (bool) extract multiple cores for blocking states (default: false)
    pdr.utvpi (bool) Enable UTVPI strategy (default: true)
    pdr.validate_result (bool) validate result (by proof checking or model checking) (default: false)
    print_aig (symbol) Dump clauses in AIG text format (AAG) to the given file name (default: )
    print_answer (bool) print answer instance(s) to query (default: false)
    print_boogie_certificate (bool) print certificate for reachability or non-reachability using a format understood by Boogie (default: false)
    print_certificate (bool) print certificate for reachability or non-reachability (default: false)
    print_fixedpoint_extensions (bool) use SMT-LIB2 fixedpoint extensions, instead of pure SMT2, when printing rules (default: true)
    print_low_level_smt2 (bool) use (faster) low-level SMT2 printer (the printer is scalable but the result may not be as readable) (default: false)
    print_statistics (bool) print statistics (default: false)
    print_with_variable_declarations (bool) use variable declarations when displaying rules (instead of attempting to use original names) (default: true)
    tab.selection (symbol) selection method for tabular strategy: weight (default), first, var-use (default: weight)
    timeout (unsigned int) set timeout (default: 4294967295)
    xform.bit_blast (bool) bit-blast bit-vectors (default: false)
    xform.coalesce_rules (bool) coalesce rules (default: false)
    xform.coi (bool) use cone of influence simplificaiton (default: true)
    xform.fix_unbound_vars (bool) fix unbound variables in tail (default: false)
    xform.inline_eager (bool) try eager inlining of rules (default: true)
    xform.inline_linear (bool) try linear inlining method (default: true)
    xform.inline_linear_branch (bool) try linear inlining method with potential expansion (default: false)
    xform.instantiate_quantifiers (bool) instantiate quantified Horn clauses using E-matching heuristic (default: false)
    xform.karr (bool) Add linear invariants to clauses using Karr's method (default: false)
    xform.magic (bool) perform symbolic magic set transformation (default: false)
    xform.quantify_arrays (bool) create quantified Horn clauses from clauses with arrays (default: false)
    xform.scale (bool) add scaling variable to linear real arithemtic clauses (default: false)
    xform.slice (bool) simplify clause set using slicing (default: true)
    xform.unfold_rules (unsigned int) unfold rules statically using iterative squarring (default: 0)
[module] model
    compact (bool) try to compact function graph (i.e., function interpretations that are lookup tables) (default: false)
    partial (bool) enable/disable partial function interpretations (default: false)
    v1 (bool) use Z3 version 1.x pretty printer (default: false)
    v2 (bool) use Z3 version 2.x (x <= 16) pretty printer (default: false)
[module] old_simplify, description: old simplification (stack) still used in the smt module
    arith.expand_eqs (bool) expand equalities into two inequalities (default: false)
    arith.process_all_eqs (bool) put all equations in the form (= t c), where c is a numeral (default: false)
    array.canonize (bool) normalize array terms into normal form during simplification (default: false)
    array.simplify (bool) enable/disable array simplifications (default: true)
    bv.bv2int_distribute (bool) if true, then int2bv is distributed over arithmetical operators (default: true)
[module] sat, description: propositional SAT solver
    asymm_branch (bool) asymmetric branching (default: true)
    asymm_branch.limit (unsigned int) approx. maximum number of literals visited during asymmetric branching (default: 100000000)
    asymm_branch.rounds (unsigned int) maximum number of rounds of asymmetric branching (default: 32)
    bcd (bool) enable blocked clause decomposition for equality extraction (default: false)
    blocked_clause_limit (unsigned int) maximum number of literals visited during blocked clause elimination (default: 100000000)
    burst_search (unsigned int) number of conflicts before first global simplification (default: 100)
    dimacs.core (bool) extract core from DIMACS benchmarks (default: false)
    dyn_sub_res (bool) dynamic subsumption resolution for minimizing learned clauses (default: true)
    elim_blocked_clauses (bool) eliminate blocked clauses (default: false)
    elim_blocked_clauses_at (unsigned int) eliminate blocked clauses only once at the given simplification round (default: 2)
    elim_vars (bool) enable variable elimination during simplification (default: true)
    gc (symbol) garbage collection strategy: psm, glue, glue_psm, dyn_psm (default: glue_psm)
    gc.increment (unsigned int) increment to the garbage collection threshold (default: 500)
    gc.initial (unsigned int) learned clauses garbage collection frequence (default: 20000)
    gc.k (unsigned int) learned clauses that are inactive for k gc rounds are permanently deleted (only used in dyn_psm) (default: 7)
    gc.small_lbd (unsigned int) learned clauses with small LBD are never deleted (only used in dyn_psm) (default: 3)
    max_conflicts (unsigned int) maximum number of conflicts (default: 4294967295)
    max_memory (unsigned int) maximum amount of memory in megabytes (default: 4294967295)
    minimize_core (bool) minimize computed core (default: false)
    minimize_core_partial (bool) apply partial (cheap) core minimization (default: false)
    minimize_lemmas (bool) minimize learned clauses (default: true)
    optimize_model (bool) enable optimization of soft constraints (default: false)
    phase (symbol) phase selection strategy: always_false, always_true, caching, random (default: caching)
    phase.caching.off (unsigned int) phase caching off period (in number of conflicts) (default: 100)
    phase.caching.on (unsigned int) phase caching on period (in number of conflicts) (default: 400)
    random_freq (double) frequency of random case splits (default: 0.01)
    random_seed (unsigned int) random seed (default: 0)
    resolution (bool) eliminate boolean variables using resolution (default: true)
    resolution.cls_cutoff1 (unsigned int) limit1 - total number of problems clauses for the second cutoff of Boolean variable elimination (default: 100000000)
    resolution.cls_cutoff2 (unsigned int) limit2 - total number of problems clauses for the second cutoff of Boolean variable elimination (default: 700000000)
    resolution.limit (unsigned int) approx. maximum number of literals visited during variable elimination (default: 500000000)
    resolution.lit_cutoff_range1 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing less than res_cls_cutoff1 clauses (default: 700)
    resolution.lit_cutoff_range2 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing more than res_cls_cutoff1 and less than res_cls_cutoff2 (default: 400)
    resolution.lit_cutoff_range3 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing more than res_cls_cutoff2 (default: 300)
    resolution.occ_cutoff (unsigned int) first cutoff (on number of positive/negative occurrences) for Boolean variable elimination (default: 10)
    resolution.occ_cutoff_range1 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing less than res_cls_cutoff1 clauses (default: 8)
    resolution.occ_cutoff_range2 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing more than res_cls_cutoff1 and less than res_cls_cutoff2 (default: 5)
    resolution.occ_cutoff_range3 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing more than res_cls_cutoff2 (default: 3)
    restart (symbol) restart strategy: luby or geometric (default: luby)
    restart.factor (double) restart increment factor for geometric strategy (default: 1.5)
    restart.initial (unsigned int) initial restart (number of conflicts) (default: 100)
    scc (bool) eliminate Boolean variables by computing strongly connected components (default: true)
    subsumption (bool) eliminate subsumed clauses (default: true)
    subsumption.limit (unsigned int) approx. maximum number of literals visited during subsumption (and subsumption resolution) (default: 100000000)
[module] opt, description: optimization parameters
    dump_benchmarks (bool) dump benchmarks for profiling (default: false)
    elim_01 (bool) eliminate 01 variables (default: true)
    enable_sat (bool) enable the new SAT core for propositional constraints (default: true)
    enable_sls (bool) enable SLS tuning during weighted maxsast (default: false)
    maxres.add_upper_bound_block (bool) restict upper bound with constraint (default: false)
    maxres.hill_climb (bool) give preference for large weight cores (default: true)
    maxres.max_core_size (unsigned int) break batch of generated cores if size reaches this number (default: 3)
    maxres.max_correction_set_size (unsigned int) allow generating correction set constraints up to maximal size (default: 3)
    maxres.max_num_cores (unsigned int) maximal number of cores per round (default: 4294967295)
    maxres.maximize_assignment (bool) find an MSS/MCS to improve current assignment (default: false)
    maxres.pivot_on_correction_set (bool) reduce soft constraints if the current correction set is smaller than current core (default: true)
    maxres.wmax (bool) use weighted theory solver to constrain upper bounds (default: false)
    maxsat_engine (symbol) select engine for maxsat: 'fu_malik', 'core_maxsat', 'wmax', 'pbmax', 'maxres', 'pd-maxres', 'bcd2', 'wpm2', 'sls', 'maxhs' (default: maxres)
    optsmt_engine (symbol) select optimization engine: 'basic', 'farkas', 'symba' (default: basic)
    pb.compile_equality (bool) compile arithmetical equalities into pseudo-Boolean equality (instead of two inequalites) (default: false)
    pp.neat (bool) use neat (as opposed to less readable, but faster) pretty printer when displaying context (default: true)
    print_model (bool) display model for satisfiable constraints (default: false)
    priority (symbol) select how to priortize objectives: 'lex' (lexicographic), 'pareto', or 'box' (default: lex)
    timeout (unsigned int) set timeout (default: 4294967295)
[module] nnf, description: negation normal form
    ignore_labels (bool) remove/ignore labels in the input formula, this option is ignored if proofs are enabled (default: false)
    max_memory (unsigned int) maximum amount of memory in megabytes (default: 4294967295)
    mode (symbol) NNF translation mode: skolem (skolem normal form), quantifiers (skolem normal form + quantifiers in NNF), full (default: skolem)
    sk_hack (bool) hack for VCC (default: false)
    skolemize (bool) skolemize (existential force) quantifiers (default: true)
[module] algebraic, description: real algebraic number package
    factor (bool) use polynomial factorization to simplify polynomials representing algebraic numbers (default: true)
    factor_max_prime (unsigned int) parameter for the polynomial factorization procedure in the algebraic number module. Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. This parameter limits the maximum prime number p to be used in the first step (default: 31)
    factor_num_primes (unsigned int) parameter for the polynomial factorization procedure in the algebraic number module. Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. The search space may be reduced by factoring the polynomial in different GF(p)'s. This parameter specify the maximum number of finite factorizations to be considered, before lifiting and searching (default: 1)
    factor_search_size (unsigned int) parameter for the polynomial factorization procedure in the algebraic number module. Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. This parameter can be used to limit the search space (default: 5000)
    min_mag (unsigned int) Z3 represents algebraic numbers using a (square-free) polynomial p and an isolating interval (which contains one and only one root of p). This interval may be refined during the computations. This parameter specifies whether to cache the value of a refined interval or not. It says the minimal size of an interval for caching purposes is 1/2^16 (default: 16)
    zero_accuracy (unsigned int) one of the most time-consuming operations in the real algebraic number module is determining the sign of a polynomial evaluated at a sample point with non-rational algebraic number values. Let k be the value of this option. If k is 0, Z3 uses precise computation. Otherwise, the result of a polynomial evaluation is considered to be 0 if Z3 can show it is inside the interval (-1/2^k, 1/2^k) (default: 0)
[module] combined_solver, description: combines two solvers: non-incremental (solver1) and incremental (solver2)
    ignore_solver1 (bool) if true, solver 2 is always used (default: false)
    solver2_timeout (unsigned int) fallback to solver 1 after timeout even when in incremental model (default: 4294967295)
    solver2_unknown (unsigned int) what should be done when solver 2 returns unknown: 0 - just return unknown, 1 - execute solver 1 if quantifier free problem, 2 - execute solver 1 (default: 1)
[module] rcf, description: real closed fields
    clean_denominators (bool) clean denominators before root isolation (default: true)
    inf_precision (unsigned int) a value k that is the initial interval size (i.e., (0, 1/2^l)) used as an approximation for infinitesimal values (default: 24)
    initial_precision (unsigned int) a value k that is the initial interval size (as 1/2^k) when creating transcendentals and approximated division (default: 24)
    lazy_algebraic_normalization (bool) during sturm-seq and square-free polynomial computations, only normalize algebraic polynomial expressions when the definining polynomial is monic (default: true)
    max_precision (unsigned int) during sign determination we switch from interval arithmetic to complete methods when the interval size is less than 1/2^k, where k is the max_precision (default: 128)
    use_prem (bool) use pseudo-remainder instead of remainder when computing GCDs and Sturm-Tarski sequences (default: true)
[module] model_evaluator
    cache (bool) cache intermediate results in the model evaluator (default: true)
    completion (bool) assigns an interptetation to symbols that do not have one in the current model, when evaluating expressions in the current model (default: false)
    max_memory (unsigned int) maximum amount of memory in megabytes (default: 4294967295)
    max_steps (unsigned int) maximum number of steps (default: 4294967295)
[module] ackermannization, description: tactics based on solving UF-theories via ackermannization (see also ackr module)
    eager (bool) eagerly instantiate all congruence rules (default: true)
    inc_sat_backend (bool) use incremental SAT (default: false)
    sat_backend (bool) use SAT rather than SMT in qfufbv_ackr_tactic (default: false)
[module] nlsat, description: nonlinear solver
    factor (bool) factor polynomials produced during conflict resolution. (default: true)
    lazy (unsigned int) how lazy the solver is. (default: 0)
    max_conflicts (unsigned int) maximum number of conflicts. (default: 4294967295)
    max_memory (unsigned int) maximum amount of memory in megabytes (default: 4294967295)
    minimize_conflicts (bool) minimize conflicts (default: false)
    randomize (bool) randomize selection of a witness in nlsat. (default: true)
    reorder (bool) reorder variables. (default: true)
    seed (unsigned int) random seed. (default: 0)
    shuffle_vars (bool) use a random variable order. (default: false)
    simplify_conflicts (bool) simplify conflicts using equalities before resolving them in nlsat solver. (default: true)
[module] parser
    error_for_visual_studio (bool) display error messages in Visual Studio format (default: false)
    ignore_bad_patterns (bool) ignore malformed patterns (default: true)
    ignore_user_patterns (bool) ignore patterns provided by the user (default: false)
[module] rewriter, description: new formula simplification module used in the tactic framework, and new solvers
    algebraic_number_evaluator (bool) simplify/evaluate expressions containing (algebraic) irrational numbers. (default: true)
    arith_lhs (bool) all monomials are moved to the left-hand-side, and the right-hand-side is just a constant. (default: false)
    bit2bool (bool) try to convert bit-vector terms of size 1 into Boolean terms (default: true)
    blast_distinct (bool) expand a distinct predicate into a quadratic number of disequalities (default: false)
    blast_distinct_threshold (unsigned int) when blast_distinct is true, only distinct expressions with less than this number of arguments are blasted (default: 4294967295)
    blast_eq_value (bool) blast (some) Bit-vector equalities into bits (default: false)
    bv_sort_ac (bool) sort the arguments of all AC operators (default: false)
    bv_trailing (bool) lean removal of trailing zeros (default: false)
    bvnot2arith (bool) replace (bvnot x) with (bvsub -1 x) (default: false)
    cache_all (bool) cache all intermediate results. (default: false)
    div0_ackermann_limit (unsigned int) a bound for number of congruence Ackermann lemmas for div0 modelling (default: 1000)
    elim_and (bool) conjunctions are rewritten using negation and disjunctions (default: false)
    elim_rem (bool) replace (rem x y) with (ite (>= y 0) (mod x y) (- (mod x y))). (default: false)
    elim_sign_ext (bool) expand sign-ext operator using concat and extract (default: true)
    elim_to_real (bool) eliminate to_real from arithmetic predicates that contain only integers. (default: false)
    eq2ineq (bool) split arithmetic equalities into two inequalities. (default: false)
    expand_power (bool) expand (^ t k) into (* t ... t) if  1 < k <= max_degree. (default: false)
    expand_select_store (bool) replace a (select (store ...) ...) term by an if-then-else term (default: false)
    expand_store_eq (bool) reduce (store ...) = (store ...) with a common base into selects (default: false)
    expand_tan (bool) replace (tan x) with (/ (sin x) (cos x)). (default: false)
    flat (bool) create nary applications for and,or,+,*,bvadd,bvmul,bvand,bvor,bvxor (default: true)
    gcd_rounding (bool) use gcd rounding on integer arithmetic atoms. (default: false)
    hi_div0 (bool) use the 'hardware interpretation' for division by zero (for bit-vector terms) (default: true)
    hi_fp_unspecified (bool) use the 'hardware interpretation' for unspecified values in fp.min, fp.max, fp.to_ubv, fp.to_sbv, and fp.to_real (default: false)
    hoist_cmul (bool) hoist constant multiplication over summation to minimize number of multiplications (default: false)
    hoist_mul (bool) hoist multiplication over summation to minimize number of multiplications (default: false)
    ite_extra_rules (bool) extra ite simplifications, these additional simplifications may reduce size locally but increase globally (default: false)
    local_ctx (bool) perform local (i.e., cheap) context simplifications (default: false)
    local_ctx_limit (unsigned int) limit for applying local context simplifier (default: 4294967295)
    max_degree (unsigned int) max degree of algebraic numbers (and power operators) processed by simplifier. (default: 64)
    max_memory (unsigned int) maximum amount of memory in megabytes (default: 4294967295)
    max_steps (unsigned int) maximum number of steps (default: 4294967295)
    mul2concat (bool) replace multiplication by a power of two into a concatenation (default: false)
    mul_to_power (bool) collpase (* t ... t) into (^ t k), it is ignored if expand_power is true. (default: false)
    pull_cheap_ite (bool) pull if-then-else terms when cheap. (default: false)
    push_ite_arith (bool) push if-then-else over arithmetic terms. (default: false)
    push_ite_bv (bool) push if-then-else over bit-vector terms. (default: false)
    push_to_real (bool) distribute to_real over * and +. (default: true)
    som (bool) put polynomials in som-of-monomials form (default: false)
    som_blowup (unsigned int) maximum number of monomials generated when putting a polynomial in sum-of-monomials normal form (default: 4294967295)
    sort_store (bool) sort nested stores when the indices are known to be different (default: false)
    sort_sums (bool) sort the arguments of + application. (default: false)
    split_concat_eq (bool) split equalities of the form (= (concat t1 t2) t3) (default: false)
    udiv2mul (bool) convert constant udiv to mul (default: false)
[module] interp, description: interpolation parameters
    check (bool) (INTERP) check interpolants (default: false)
    profile (bool) (INTERP) profile interpolation (default: false)
[module] smt, description: smt solver based on lazy smt
    arith.branch_cut_ratio (unsigned int) branch/cut ratio for linear integer arithmetic (default: 2)
    arith.dump_lemmas (bool) dump arithmetic theory lemmas to files (default: false)
    arith.euclidean_solver (bool) eucliean solver for linear integer arithmetic (default: false)
    arith.greatest_error_pivot (bool) Pivoting strategy (default: false)
    arith.ignore_int (bool) treat integer variables as real (default: false)
    arith.int_eq_branch (bool) branching using derived integer equations (default: false)
    arith.nl (bool) (incomplete) nonlinear arithmetic support based on Groebner basis and interval propagation (default: true)
    arith.nl.branching (bool) branching on integer variables in non linear clusters (default: true)
    arith.nl.gb (bool) groebner Basis computation, this option is ignored when arith.nl=false (default: true)
    arith.nl.rounds (unsigned int) threshold for number of (nested) final checks for non linear arithmetic (default: 1024)
    arith.propagate_eqs (bool) propagate (cheap) equalities (default: true)
    arith.propagation_mode (unsigned int) 0 - no propagation, 1 - propagate existing literals, 2 - refine bounds (default: 2)
    arith.random_initial_value (bool) use random initial values in the simplex-based procedure for linear arithmetic (default: false)
    arith.solver (unsigned int) arithmetic solver: 0 - no solver, 1 - bellman-ford based solver (diff. logic only), 2 - simplex based solver, 3 - floyd-warshall based solver (diff. logic only) and no theory combination (default: 2)
    array.extensional (bool) extensional array theory (default: true)
    array.weak (bool) weak array theory (default: false)
    auto_config (bool) automatically configure solver (default: true)
    bv.enable_int2bv (bool) enable support for int2bv and bv2int operators (default: true)
    bv.reflect (bool) create enode for every bit-vector term (default: true)
    case_split (unsigned int) 0 - case split based on variable activity, 1 - similar to 0, but delay case splits created during the search, 2 - similar to 0, but cache the relevancy, 3 - case split based on relevancy (structural splitting), 4 - case split on relevancy and activity, 5 - case split on relevancy and current goal (default: 1)
    core.validate (bool) validate unsat core produced by SMT context (default: false)
    dack (unsigned int) 0 - disable dynamic ackermannization, 1 - expand Leibniz's axiom if a congruence is the root of a conflict, 2 - expand Leibniz's axiom if a congruence is used during conflict resolution (default: 1)
    dack.eq (bool) enable dynamic ackermannization for transtivity of equalities (default: false)
    dack.factor (double) number of instance per conflict (default: 0.1)
    dack.gc (unsigned int) Dynamic ackermannization garbage collection frequency (per conflict) (default: 2000)
    dack.gc_inv_decay (double) Dynamic ackermannization garbage collection decay (default: 0.8)
    dack.threshold (unsigned int)  number of times the congruence rule must be used before Leibniz's axiom is expanded (default: 10)
    delay_units (bool) if true then z3 will not restart when a unit clause is learned (default: false)
    delay_units_threshold (unsigned int) maximum number of learned unit clauses before restarting, ingored if delay_units is false (default: 32)
    ematching (bool) E-Matching based quantifier instantiation (default: true)
    logic (symbol) logic used to setup the SMT solver (default: )
    macro_finder (bool) try to find universally quantified formulas that can be viewed as macros (default: false)
    max_conflicts (unsigned int) maximum number of conflicts before giving up. (default: 4294967295)
    mbqi (bool) model based quantifier instantiation (MBQI) (default: true)
    mbqi.force_template (unsigned int) some quantifiers can be used as templates for building interpretations for functions. Z3 uses heuristics to decide whether a quantifier will be used as a template or not. Quantifiers with weight >= mbqi.force_template are forced to be used as a template (default: 10)
    mbqi.id (string) Only use model-based instantiation for quantifiers with id's beginning with string (default: )
    mbqi.max_cexs (unsigned int) initial maximal number of counterexamples used in MBQI, each counterexample generates a quantifier instantiation (default: 1)
    mbqi.max_cexs_incr (unsigned int) increment for MBQI_MAX_CEXS, the increment is performed after each round of MBQI (default: 0)
    mbqi.max_iterations (unsigned int) maximum number of rounds of MBQI (default: 1000)
    mbqi.trace (bool) generate tracing messages for Model Based Quantifier Instantiation (MBQI). It will display a message before every round of MBQI, and the quantifiers that were not satisfied (default: false)
    pb.conflict_frequency (unsigned int) conflict frequency for Pseudo-Boolean theory (default: 1000)
    pb.enable_compilation (bool) enable compilation into sorting circuits for Pseudo-Boolean (default: true)
    pb.enable_simplex (bool) enable simplex to check rational feasibility (default: false)
    pb.learn_complements (bool) learn complement literals for Pseudo-Boolean theory (default: true)
    phase_selection (unsigned int) phase selection heuristic: 0 - always false, 1 - always true, 2 - phase caching, 3 - phase caching conservative, 4 - phase caching conservative 2, 5 - random, 6 - number of occurrences (default: 3)
    pull_nested_quantifiers (bool) pull nested quantifiers (default: false)
    qi.cost (string) expression specifying what is the cost of a given quantifier instantiation (default: (+ weight generation))
    qi.eager_threshold (double) threshold for eager quantifier instantiation (default: 10.0)
    qi.lazy_threshold (double) threshold for lazy quantifier instantiation (default: 20.0)
    qi.max_instances (unsigned int) maximum number of quantifier instantiations (default: 4294967295)
    qi.max_multi_patterns (unsigned int) specify the number of extra multi patterns (default: 0)
    qi.profile (bool) profile quantifier instantiation (default: false)
    qi.profile_freq (unsigned int) how frequent results are reported by qi.profile (default: 4294967295)
    random_seed (unsigned int) random seed for the smt solver (default: 0)
    refine_inj_axioms (bool) refine injectivity axioms (default: true)
    relevancy (unsigned int) relevancy propagation heuristic: 0 - disabled, 1 - relevancy is tracked by only affects quantifier instantiation, 2 - relevancy is tracked, and an atom is only asserted if it is relevant (default: 2)
    restart_factor (double) when using geometric (or inner-outer-geometric) progression of restarts, it specifies the constant used to multiply the currect restart threshold (default: 1.1)
    restart_strategy (unsigned int) 0 - geometric, 1 - inner-outer-geometric, 2 - luby, 3 - fixed, 4 - arithmetic (default: 1)
    rlimit (unsigned int) resource limit (0 means no limit) (default: 0)
    timeout (unsigned int) timeout (in milliseconds) (0 means immediate timeout) (default: 4294967295)
[module] sls, description: Experimental Stochastic Local Search Solver (for QFBV only).
    early_prune (bool) use early pruning for score prediction (default: true)
    max_memory (unsigned int) maximum amount of memory in megabytes (default: 4294967295)
    max_restarts (unsigned int) maximum number of restarts (default: 4294967295)
    paws_init (unsigned int) initial/minimum assertion weights (default: 40)
    paws_sp (unsigned int) smooth assertion weights with probability paws_sp / 1024 (default: 52)
    random_offset (bool) use random offset for candidate evaluation (default: true)
    random_seed (unsigned int) random seed (default: 0)
    rescore (bool) rescore/normalize top-level score every base restart interval (default: true)
    restart_base (unsigned int) base restart interval given by moves per run (default: 100)
    restart_init (bool) initialize to 0 or random value (= 1) after restart (default: false)
    scale_unsat (double) scale score of unsat expressions by this factor (default: 0.5)
    track_unsat (bool) keep a list of unsat assertions as done in SAT - currently disabled internally (default: false)
    vns_mc (unsigned int) in local minima, try Monte Carlo sampling vns_mc many 2-bit-flips per bit (default: 0)
    vns_repick (bool) in local minima, try picking a different assertion (only for walksat) (default: false)
    walksat (bool) use walksat assertion selection (instead of gsat) (default: true)
    walksat_repick (bool) repick assertion if randomizing in local minima (default: true)
    walksat_ucb (bool) use bandit heuristic for walksat assertion selection (instead of random) (default: true)
    walksat_ucb_constant (double) the ucb constant c in the term score + c * f(touched) (default: 20.0)
    walksat_ucb_forget (double) scale touched by this factor every base restart interval (default: 1.0)
    walksat_ucb_init (bool) initialize total ucb touched to formula size (default: false)
    walksat_ucb_noise (double) add noise 0 <= 256 * ucb_noise to ucb score for assertion selection (default: 0.0002)
    wp (unsigned int) random walk with probability wp / 1024 (default: 100)
