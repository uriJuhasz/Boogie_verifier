;Analysis time until now:     5s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ 0)
(declare-sort $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ 0)
(declare-sort $@Map@@PermissionComponent@To@Int@@ 0)
(declare-sort $@Map@@ref@To@Int@@ 0)
(declare-sort Field$Bool$ 0)
(declare-sort Field$Int$ 0)
(declare-sort Field$Mu$ 0)
(declare-sort Field$ref$ 0)
(declare-sort Field$Seq$Int$$ 0)
(declare-sort ModuleName 0)
(declare-sort Mu 0)
(declare-sort PartialHeapType 0)
(declare-sort PermissionComponent 0)
(declare-sort ref 0)
(declare-sort Seq$Int$ 0)
(declare-sort Seq$ref$ 0)
(declare-sort TypeName 0)

;Functions
(declare-fun $@bf ( ) Bool)
(declare-fun $@bf_1 ( ) Bool)
(declare-fun $@bf_2 ( ) Bool)
(declare-fun $@bf_3 ( ) Bool)
(declare-fun $@bf_32 ( ) Bool)
(declare-fun $@bf_33 ( ) Bool)
(declare-fun $@bf_34 ( ) Bool)
(declare-fun $@bf_35 ( ) Bool)
(declare-fun $@bf_36 ( ) Bool)
(declare-fun $@bf_37 ( ) Bool)
(declare-fun $@bf_38 ( ) Bool)
(declare-fun $@bf_39 ( ) Bool)
(declare-fun $@bf_4 ( ) Bool)
(declare-fun $@bf_5 ( ) Bool)
(declare-fun $@bf_55 ( ) Bool)
(declare-fun $@bf_56 ( ) Bool)
(declare-fun $@bf_57 ( ) Bool)
(declare-fun $@bf_58 ( ) Bool)
(declare-fun $@bf_59 ( ) Bool)
(declare-fun $@bf_6 ( ) Bool)
(declare-fun $@bf_60 ( ) Bool)
(declare-fun $@bf_61 ( ) Bool)
(declare-fun $@bf_62 ( ) Bool)
(declare-fun $@bf_63 ( ) Bool)
(declare-fun $@bf_64 ( ) Bool)
(declare-fun $@bf_65 ( ) Bool)
(declare-fun $@bf_66 ( ) Bool)
(declare-fun $@bf_67 ( ) Bool)
(declare-fun $@bf_68 ( ) Bool)
(declare-fun $@bf_69 ( ) Bool)
(declare-fun $@bf_7 ( ) Bool)
(declare-fun $@bf_70 ( ) Bool)
(declare-fun $@bf_71 ( ) Bool)
(declare-fun $@bf_72 ( ) Bool)
(declare-fun $@bf_73 ( ) Bool)
(declare-fun $@bf_74 ( ) Bool)
(declare-fun $@bf_75 ( ) Bool)
(declare-fun $@bf_76 ( ) Bool)
(declare-fun $@bf_77 ( ) Bool)
(declare-fun $LockBottom ( ) Mu)
(declare-fun assertSecMask@_533@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@22 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_533@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@22 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun assertSecMask@_582@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun AVLTree.keys ( ) Field$Seq$Int$$)
(declare-fun AVLTree.root ( ) Field$ref$)
(declare-fun AVLTree.valid ( ) Field$Int$)
(declare-fun AVLTreeNode.balanceFactor ( ) Field$Int$)
(declare-fun AVLTreeNode.height ( ) Field$Int$)
(declare-fun AVLTreeNode.key ( ) Field$Int$)
(declare-fun AVLTreeNode.keys ( ) Field$Seq$Int$$)
(declare-fun AVLTreeNode.left ( ) Field$ref$)
(declare-fun AVLTreeNode.right ( ) Field$ref$)
(declare-fun AVLTreeNode.valid ( ) Field$Int$)
(declare-fun AVLTreeNode@t ( ) TypeName)
(declare-fun bf@249@0 ( ) Int)
(declare-fun bf@275@0 ( ) Int)
(declare-fun bf@298@0 ( ) Int)
(declare-fun channelK ( ) Int)
(declare-fun Credits ( ) $@Map@@ref@To@Int@@)
(declare-fun CurrentModule ( ) ModuleName)
(declare-fun DecPerm$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$Seq$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Seq$Int$$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun dtype ( ref ) TypeName)
(declare-fun emptyPartialHeap ( ) PartialHeapType)
(declare-fun exhaleHeap@_535@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_584@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_635@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_651@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_664@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_699@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_724@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_737@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_753@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_776@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_799@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_823@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_836@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_852@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_875@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_898@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleHeap@_916@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun exhaleMask@_636@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_636@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_652@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_652@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_652@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_652@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_665@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_665@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_665@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_665@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_700@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_725@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_725@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_725@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_725@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_738@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_754@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_777@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_800@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_824@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_824@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_824@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_824@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_837@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_853@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_876@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_899@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun exhaleMask@_917@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun forkK ( ) Field$Int$)
(declare-fun Fractions ( Int ) Int)
(declare-fun Heap ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun heapFragment$Int$ ( Int ) PartialHeapType)
(declare-fun heapFragment$ref$ ( ref ) PartialHeapType)
(declare-fun heapFragment$Seq$Int$$ ( Seq$Int$ ) PartialHeapType)
(declare-fun held ( ) Field$Int$)
(declare-fun IncPerm$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$Seq$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Seq$Int$$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Bool $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Bool $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun ite$$@Map@@PermissionComponent@To@Int@@$ ( Bool $@Map@@PermissionComponent@To@Int@@ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun ite$$@Map@@ref@To@Int@@$ ( Bool $@Map@@ref@To@Int@@ $@Map@@ref@To@Int@@ ) $@Map@@ref@To@Int@@)
(declare-fun ite$Field$Bool$$ ( Bool Field$Bool$ Field$Bool$ ) Field$Bool$)
(declare-fun ite$Field$Int$$ ( Bool Field$Int$ Field$Int$ ) Field$Int$)
(declare-fun ite$Field$Mu$$ ( Bool Field$Mu$ Field$Mu$ ) Field$Mu$)
(declare-fun ite$Field$ref$$ ( Bool Field$ref$ Field$ref$ ) Field$ref$)
(declare-fun ite$Field$Seq$Int$$$ ( Bool Field$Seq$Int$$ Field$Seq$Int$$ ) Field$Seq$Int$$)
(declare-fun ite$Int$ ( Bool Int Int ) Int)
(declare-fun ite$ModuleName$ ( Bool ModuleName ModuleName ) ModuleName)
(declare-fun ite$Mu$ ( Bool Mu Mu ) Mu)
(declare-fun ite$PartialHeapType$ ( Bool PartialHeapType PartialHeapType ) PartialHeapType)
(declare-fun ite$PermissionComponent$ ( Bool PermissionComponent PermissionComponent ) PermissionComponent)
(declare-fun ite$ref$ ( Bool ref ref ) ref)
(declare-fun ite$Seq$Int$$ ( Bool Seq$Int$ Seq$Int$ ) Seq$Int$)
(declare-fun ite$Seq$ref$$ ( Bool Seq$ref$ Seq$ref$ ) Seq$ref$)
(declare-fun ite$TypeName$ ( Bool TypeName TypeName ) TypeName)
(declare-fun joinable ( ) Field$Int$)
(declare-fun k@19 ( ) Int)
(declare-fun m@252 ( ) ref)
(declare-fun m@252@0 ( ) ref)
(declare-fun m@256 ( ) ref)
(declare-fun m@256@0 ( ) ref)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Seq$Int$$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Bool$ ) Bool)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Int$ ) Int)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Mu$ ) Mu)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$ref$ ) ref)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Seq$Int$$ ) Seq$Int$)
(declare-fun MapRead$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@PermissionComponent@To@Int@@ PermissionComponent ) Int)
(declare-fun MapRead$$@Map@@ref@To@Int@@$ ( $@Map@@ref@To@Int@@ ref ) Int)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Seq$Int$$ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Int$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$ref$ ref ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun MapWrite$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@PermissionComponent@To@Int@@ PermissionComponent Int ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun Mask ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@100 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@101 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@102 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@103 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@104 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@105 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@106 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@107 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@108 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@109 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@110 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@111 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@112 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@113 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@114 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@115 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@116 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@117 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@118 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@119 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@120 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@121 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@122 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@123 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@124 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@125 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@126 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@127 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@128 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@129 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@130 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@131 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@132 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@133 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@134 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@135 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@136 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@137 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@138 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@139 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@140 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@141 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@142 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@143 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@144 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@145 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@146 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@147 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@148 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@149 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@22 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@23 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@24 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@25 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@26 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@27 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@28 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@29 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@30 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@31 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@32 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@33 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@34 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@35 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@36 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@37 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@38 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@39 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@40 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@41 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@42 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@43 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@44 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@45 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@46 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@47 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@48 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@49 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@50 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@51 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@52 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@53 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@54 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@55 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@56 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@57 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@58 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@59 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@60 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@61 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@62 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@63 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@64 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@65 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@66 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@67 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@68 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@69 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@70 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@71 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@72 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@73 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@74 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@75 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@76 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@77 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@78 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@79 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@80 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@81 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@82 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@83 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@84 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@85 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@86 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@87 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@88 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@89 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@90 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@91 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@92 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@93 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@94 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@95 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@96 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@97 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@98 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@99 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun methodCallK@_634 ( ) Int)
(declare-fun methodCallK@_650 ( ) Int)
(declare-fun methodCallK@_663 ( ) Int)
(declare-fun methodCallK@_698 ( ) Int)
(declare-fun methodCallK@_723 ( ) Int)
(declare-fun methodCallK@_736 ( ) Int)
(declare-fun methodCallK@_752 ( ) Int)
(declare-fun methodCallK@_775 ( ) Int)
(declare-fun methodCallK@_798 ( ) Int)
(declare-fun methodCallK@_822 ( ) Int)
(declare-fun methodCallK@_835 ( ) Int)
(declare-fun methodCallK@_851 ( ) Int)
(declare-fun methodCallK@_874 ( ) Int)
(declare-fun methodCallK@_897 ( ) Int)
(declare-fun methodK@_506 ( ) Int)
(declare-fun module@default ( ) ModuleName)
(declare-fun monitorK ( ) Int)
(declare-fun mu ( ) Field$Mu$)
(declare-fun newVers@_528@0 ( ) Int)
(declare-fun newVers@_563@0 ( ) Int)
(declare-fun newVers@_612@0 ( ) Int)
(declare-fun newVers@_693@0 ( ) Int)
(declare-fun nl@24 ( ) ref)
(declare-fun nl@24@0 ( ) ref)
(declare-fun nl@24@1 ( ) ref)
(declare-fun nl@28 ( ) ref)
(declare-fun nr@26 ( ) ref)
(declare-fun nr@26@0 ( ) ref)
(declare-fun nr@26@1 ( ) ref)
(declare-fun nr@32 ( ) ref)
(declare-fun null ( ) ref)
(declare-fun oldVers@_527@0 ( ) Int)
(declare-fun oldVers@_562@0 ( ) Int)
(declare-fun oldVers@_611@0 ( ) Int)
(declare-fun oldVers@_692@0 ( ) Int)
(declare-fun perm$N ( ) PermissionComponent)
(declare-fun perm$R ( ) PermissionComponent)
(declare-fun Permission$denominator ( ) Int)
(declare-fun Permission$Full ( ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun Permission$FullFraction ( ) Int)
(declare-fun Permission$Zero ( ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun predicateK ( ) Int)
(declare-fun r@20 ( ) ref)
(declare-fun r@20@0 ( ) ref)
(declare-fun r@20@1 ( ) ref)
(declare-fun r@20@2 ( ) ref)
(declare-fun r@20@3 ( ) ref)
(declare-fun r@251 ( ) ref)
(declare-fun r@251@0 ( ) ref)
(declare-fun r@255 ( ) ref)
(declare-fun r@255@0 ( ) ref)
(declare-fun r@271 ( ) ref)
(declare-fun r@271@0 ( ) ref)
(declare-fun r@277 ( ) ref)
(declare-fun r@277@0 ( ) ref)
(declare-fun r@294 ( ) ref)
(declare-fun r@294@0 ( ) ref)
(declare-fun r@300 ( ) ref)
(declare-fun r@300@0 ( ) ref)
(declare-fun rdheld ( ) Field$Bool$)
(declare-fun SecMask ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Seq@Append$Int$ ( Seq$Int$ Seq$Int$ ) Seq$Int$)
(declare-fun Seq@Append$ref$ ( Seq$ref$ Seq$ref$ ) Seq$ref$)
(declare-fun Seq@Build$Int$ ( Seq$Int$ Int Int Int ) Seq$Int$)
(declare-fun Seq@Build$ref$ ( Seq$ref$ Int ref Int ) Seq$ref$)
(declare-fun Seq@Drop$Int$ ( Seq$Int$ Int ) Seq$Int$)
(declare-fun Seq@Drop$ref$ ( Seq$ref$ Int ) Seq$ref$)
(declare-fun Seq@Empty$Int$ ( ) Seq$Int$)
(declare-fun Seq@Empty$ref$ ( ) Seq$ref$)
(declare-fun Seq@Index$Int$ ( Seq$Int$ Int ) Int)
(declare-fun Seq@Index$ref$ ( Seq$ref$ Int ) ref)
(declare-fun Seq@Length$Int$ ( Seq$Int$ ) Int)
(declare-fun Seq@Length$ref$ ( Seq$ref$ ) Int)
(declare-fun Seq@Range ( Int Int ) Seq$Int$)
(declare-fun Seq@Singleton$Int$ ( Int ) Seq$Int$)
(declare-fun Seq@Singleton$ref$ ( ref ) Seq$ref$)
(declare-fun Seq@Take$Int$ ( Seq$Int$ Int ) Seq$Int$)
(declare-fun Seq@Take$ref$ ( Seq$ref$ Int ) Seq$ref$)
(declare-fun this ( ) ref)
(declare-fun this@248 ( ) ref)
(declare-fun this@250 ( ) ref)
(declare-fun this@250@0 ( ) ref)
(declare-fun this@254 ( ) ref)
(declare-fun this@254@0 ( ) ref)
(declare-fun this@264 ( ) ref)
(declare-fun this@269 ( ) ref)
(declare-fun this@269@0 ( ) ref)
(declare-fun this@274 ( ) ref)
(declare-fun this@276 ( ) ref)
(declare-fun this@282 ( ) ref)
(declare-fun this@287 ( ) ref)
(declare-fun this@292 ( ) ref)
(declare-fun this@292@0 ( ) ref)
(declare-fun this@297 ( ) ref)
(declare-fun this@299 ( ) ref)
(declare-fun this@305 ( ) ref)
(declare-fun this@310 ( ) ref)
(declare-fun unfoldingHeap@_537@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun unfoldingHeap@_537@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun unfoldingHeap@_586@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun unfoldingHeap@_586@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun unfoldingK@_542 ( ) Int)
(declare-fun unfoldingK@_591 ( ) Int)
(declare-fun unfoldingMask@_538@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@22 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_538@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@1 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@10 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@11 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@12 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@13 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@14 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@15 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@16 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@17 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@18 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@19 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@2 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@20 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@21 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@22 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@3 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@4 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@5 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@6 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@7 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@8 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldingMask@_587@9 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun unfoldK@_507 ( ) Int)
(declare-fun unfoldK@_672 ( ) Int)
(declare-fun ZeroCredits ( ) $@Map@@ref@To@Int@@)
(declare-fun ZeroMask ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)

;Predicates
(declare-fun $@AVLTreeNode.valid@trigger ( ref ) Bool)
(declare-fun $@condition ( ) Bool)
(declare-fun $@condition_$0 ( ) Bool)
(declare-fun $@condition_$1 ( ) Bool)
(declare-fun $@condition_$10 ( ) Bool)
(declare-fun $@condition_$101 ( ) Bool)
(declare-fun $@condition_$103 ( ) Bool)
(declare-fun $@condition_$104 ( ) Bool)
(declare-fun $@condition_$106 ( ) Bool)
(declare-fun $@condition_$108 ( ) Bool)
(declare-fun $@condition_$110 ( ) Bool)
(declare-fun $@condition_$112 ( ) Bool)
(declare-fun $@condition_$114 ( ) Bool)
(declare-fun $@condition_$116 ( ) Bool)
(declare-fun $@condition_$118 ( ) Bool)
(declare-fun $@condition_$119 ( ) Bool)
(declare-fun $@condition_$12 ( ) Bool)
(declare-fun $@condition_$120 ( ) Bool)
(declare-fun $@condition_$122 ( ) Bool)
(declare-fun $@condition_$123 ( ) Bool)
(declare-fun $@condition_$124 ( ) Bool)
(declare-fun $@condition_$126 ( ) Bool)
(declare-fun $@condition_$128 ( ) Bool)
(declare-fun $@condition_$130 ( ) Bool)
(declare-fun $@condition_$132 ( ) Bool)
(declare-fun $@condition_$133 ( ) Bool)
(declare-fun $@condition_$136 ( ) Bool)
(declare-fun $@condition_$139 ( ) Bool)
(declare-fun $@condition_$14 ( ) Bool)
(declare-fun $@condition_$141 ( ) Bool)
(declare-fun $@condition_$143 ( ) Bool)
(declare-fun $@condition_$145 ( ) Bool)
(declare-fun $@condition_$147 ( ) Bool)
(declare-fun $@condition_$149 ( ) Bool)
(declare-fun $@condition_$151 ( ) Bool)
(declare-fun $@condition_$153 ( ) Bool)
(declare-fun $@condition_$154 ( ) Bool)
(declare-fun $@condition_$155 ( ) Bool)
(declare-fun $@condition_$157 ( ) Bool)
(declare-fun $@condition_$158 ( ) Bool)
(declare-fun $@condition_$159 ( ) Bool)
(declare-fun $@condition_$16 ( ) Bool)
(declare-fun $@condition_$161 ( ) Bool)
(declare-fun $@condition_$166 ( ) Bool)
(declare-fun $@condition_$167 ( ) Bool)
(declare-fun $@condition_$169 ( ) Bool)
(declare-fun $@condition_$171 ( ) Bool)
(declare-fun $@condition_$172 ( ) Bool)
(declare-fun $@condition_$175 ( ) Bool)
(declare-fun $@condition_$176 ( ) Bool)
(declare-fun $@condition_$178 ( ) Bool)
(declare-fun $@condition_$18 ( ) Bool)
(declare-fun $@condition_$180 ( ) Bool)
(declare-fun $@condition_$182 ( ) Bool)
(declare-fun $@condition_$183 ( ) Bool)
(declare-fun $@condition_$185 ( ) Bool)
(declare-fun $@condition_$186 ( ) Bool)
(declare-fun $@condition_$187 ( ) Bool)
(declare-fun $@condition_$188 ( ) Bool)
(declare-fun $@condition_$189 ( ) Bool)
(declare-fun $@condition_$191 ( ) Bool)
(declare-fun $@condition_$193 ( ) Bool)
(declare-fun $@condition_$194 ( ) Bool)
(declare-fun $@condition_$195 ( ) Bool)
(declare-fun $@condition_$196 ( ) Bool)
(declare-fun $@condition_$197 ( ) Bool)
(declare-fun $@condition_$199 ( ) Bool)
(declare-fun $@condition_$2 ( ) Bool)
(declare-fun $@condition_$20 ( ) Bool)
(declare-fun $@condition_$201 ( ) Bool)
(declare-fun $@condition_$203 ( ) Bool)
(declare-fun $@condition_$205 ( ) Bool)
(declare-fun $@condition_$207 ( ) Bool)
(declare-fun $@condition_$209 ( ) Bool)
(declare-fun $@condition_$211 ( ) Bool)
(declare-fun $@condition_$213 ( ) Bool)
(declare-fun $@condition_$214 ( ) Bool)
(declare-fun $@condition_$215 ( ) Bool)
(declare-fun $@condition_$216 ( ) Bool)
(declare-fun $@condition_$217 ( ) Bool)
(declare-fun $@condition_$219 ( ) Bool)
(declare-fun $@condition_$22 ( ) Bool)
(declare-fun $@condition_$221 ( ) Bool)
(declare-fun $@condition_$223 ( ) Bool)
(declare-fun $@condition_$225 ( ) Bool)
(declare-fun $@condition_$227 ( ) Bool)
(declare-fun $@condition_$231 ( ) Bool)
(declare-fun $@condition_$233 ( ) Bool)
(declare-fun $@condition_$235 ( ) Bool)
(declare-fun $@condition_$237 ( ) Bool)
(declare-fun $@condition_$238 ( ) Bool)
(declare-fun $@condition_$239 ( ) Bool)
(declare-fun $@condition_$24 ( ) Bool)
(declare-fun $@condition_$241 ( ) Bool)
(declare-fun $@condition_$243 ( ) Bool)
(declare-fun $@condition_$245 ( ) Bool)
(declare-fun $@condition_$247 ( ) Bool)
(declare-fun $@condition_$249 ( ) Bool)
(declare-fun $@condition_$25 ( ) Bool)
(declare-fun $@condition_$251 ( ) Bool)
(declare-fun $@condition_$252 ( ) Bool)
(declare-fun $@condition_$253 ( ) Bool)
(declare-fun $@condition_$254 ( ) Bool)
(declare-fun $@condition_$255 ( ) Bool)
(declare-fun $@condition_$257 ( ) Bool)
(declare-fun $@condition_$259 ( ) Bool)
(declare-fun $@condition_$26 ( ) Bool)
(declare-fun $@condition_$260 ( ) Bool)
(declare-fun $@condition_$261 ( ) Bool)
(declare-fun $@condition_$262 ( ) Bool)
(declare-fun $@condition_$263 ( ) Bool)
(declare-fun $@condition_$264 ( ) Bool)
(declare-fun $@condition_$265 ( ) Bool)
(declare-fun $@condition_$267 ( ) Bool)
(declare-fun $@condition_$269 ( ) Bool)
(declare-fun $@condition_$27 ( ) Bool)
(declare-fun $@condition_$270 ( ) Bool)
(declare-fun $@condition_$271 ( ) Bool)
(declare-fun $@condition_$272 ( ) Bool)
(declare-fun $@condition_$273 ( ) Bool)
(declare-fun $@condition_$275 ( ) Bool)
(declare-fun $@condition_$276 ( ) Bool)
(declare-fun $@condition_$278 ( ) Bool)
(declare-fun $@condition_$28 ( ) Bool)
(declare-fun $@condition_$280 ( ) Bool)
(declare-fun $@condition_$282 ( ) Bool)
(declare-fun $@condition_$284 ( ) Bool)
(declare-fun $@condition_$286 ( ) Bool)
(declare-fun $@condition_$288 ( ) Bool)
(declare-fun $@condition_$289 ( ) Bool)
(declare-fun $@condition_$29 ( ) Bool)
(declare-fun $@condition_$290 ( ) Bool)
(declare-fun $@condition_$292 ( ) Bool)
(declare-fun $@condition_$294 ( ) Bool)
(declare-fun $@condition_$295 ( ) Bool)
(declare-fun $@condition_$296 ( ) Bool)
(declare-fun $@condition_$297 ( ) Bool)
(declare-fun $@condition_$298 ( ) Bool)
(declare-fun $@condition_$30 ( ) Bool)
(declare-fun $@condition_$300 ( ) Bool)
(declare-fun $@condition_$302 ( ) Bool)
(declare-fun $@condition_$304 ( ) Bool)
(declare-fun $@condition_$306 ( ) Bool)
(declare-fun $@condition_$308 ( ) Bool)
(declare-fun $@condition_$31 ( ) Bool)
(declare-fun $@condition_$310 ( ) Bool)
(declare-fun $@condition_$311 ( ) Bool)
(declare-fun $@condition_$312 ( ) Bool)
(declare-fun $@condition_$314 ( ) Bool)
(declare-fun $@condition_$316 ( ) Bool)
(declare-fun $@condition_$317 ( ) Bool)
(declare-fun $@condition_$318 ( ) Bool)
(declare-fun $@condition_$319 ( ) Bool)
(declare-fun $@condition_$32 ( ) Bool)
(declare-fun $@condition_$320 ( ) Bool)
(declare-fun $@condition_$322 ( ) Bool)
(declare-fun $@condition_$324 ( ) Bool)
(declare-fun $@condition_$325 ( ) Bool)
(declare-fun $@condition_$326 ( ) Bool)
(declare-fun $@condition_$327 ( ) Bool)
(declare-fun $@condition_$328 ( ) Bool)
(declare-fun $@condition_$329 ( ) Bool)
(declare-fun $@condition_$33 ( ) Bool)
(declare-fun $@condition_$331 ( ) Bool)
(declare-fun $@condition_$334 ( ) Bool)
(declare-fun $@condition_$335 ( ) Bool)
(declare-fun $@condition_$336 ( ) Bool)
(declare-fun $@condition_$338 ( ) Bool)
(declare-fun $@condition_$34 ( ) Bool)
(declare-fun $@condition_$340 ( ) Bool)
(declare-fun $@condition_$344 ( ) Bool)
(declare-fun $@condition_$346 ( ) Bool)
(declare-fun $@condition_$348 ( ) Bool)
(declare-fun $@condition_$35 ( ) Bool)
(declare-fun $@condition_$350 ( ) Bool)
(declare-fun $@condition_$353 ( ) Bool)
(declare-fun $@condition_$355 ( ) Bool)
(declare-fun $@condition_$357 ( ) Bool)
(declare-fun $@condition_$359 ( ) Bool)
(declare-fun $@condition_$36 ( ) Bool)
(declare-fun $@condition_$361 ( ) Bool)
(declare-fun $@condition_$363 ( ) Bool)
(declare-fun $@condition_$364 ( ) Bool)
(declare-fun $@condition_$365 ( ) Bool)
(declare-fun $@condition_$367 ( ) Bool)
(declare-fun $@condition_$369 ( ) Bool)
(declare-fun $@condition_$37 ( ) Bool)
(declare-fun $@condition_$371 ( ) Bool)
(declare-fun $@condition_$372 ( ) Bool)
(declare-fun $@condition_$373 ( ) Bool)
(declare-fun $@condition_$374 ( ) Bool)
(declare-fun $@condition_$375 ( ) Bool)
(declare-fun $@condition_$376 ( ) Bool)
(declare-fun $@condition_$377 ( ) Bool)
(declare-fun $@condition_$379 ( ) Bool)
(declare-fun $@condition_$38 ( ) Bool)
(declare-fun $@condition_$383 ( ) Bool)
(declare-fun $@condition_$387 ( ) Bool)
(declare-fun $@condition_$389 ( ) Bool)
(declare-fun $@condition_$390 ( ) Bool)
(declare-fun $@condition_$392 ( ) Bool)
(declare-fun $@condition_$394 ( ) Bool)
(declare-fun $@condition_$396 ( ) Bool)
(declare-fun $@condition_$397 ( ) Bool)
(declare-fun $@condition_$398 ( ) Bool)
(declare-fun $@condition_$4 ( ) Bool)
(declare-fun $@condition_$40 ( ) Bool)
(declare-fun $@condition_$400 ( ) Bool)
(declare-fun $@condition_$402 ( ) Bool)
(declare-fun $@condition_$404 ( ) Bool)
(declare-fun $@condition_$409 ( ) Bool)
(declare-fun $@condition_$411 ( ) Bool)
(declare-fun $@condition_$413 ( ) Bool)
(declare-fun $@condition_$415 ( ) Bool)
(declare-fun $@condition_$417 ( ) Bool)
(declare-fun $@condition_$419 ( ) Bool)
(declare-fun $@condition_$42 ( ) Bool)
(declare-fun $@condition_$421 ( ) Bool)
(declare-fun $@condition_$423 ( ) Bool)
(declare-fun $@condition_$424 ( ) Bool)
(declare-fun $@condition_$425 ( ) Bool)
(declare-fun $@condition_$428 ( ) Bool)
(declare-fun $@condition_$430 ( ) Bool)
(declare-fun $@condition_$431 ( ) Bool)
(declare-fun $@condition_$436 ( ) Bool)
(declare-fun $@condition_$438 ( ) Bool)
(declare-fun $@condition_$44 ( ) Bool)
(declare-fun $@condition_$440 ( ) Bool)
(declare-fun $@condition_$442 ( ) Bool)
(declare-fun $@condition_$444 ( ) Bool)
(declare-fun $@condition_$446 ( ) Bool)
(declare-fun $@condition_$448 ( ) Bool)
(declare-fun $@condition_$45 ( ) Bool)
(declare-fun $@condition_$450 ( ) Bool)
(declare-fun $@condition_$451 ( ) Bool)
(declare-fun $@condition_$454 ( ) Bool)
(declare-fun $@condition_$456 ( ) Bool)
(declare-fun $@condition_$458 ( ) Bool)
(declare-fun $@condition_$46 ( ) Bool)
(declare-fun $@condition_$460 ( ) Bool)
(declare-fun $@condition_$461 ( ) Bool)
(declare-fun $@condition_$463 ( ) Bool)
(declare-fun $@condition_$465 ( ) Bool)
(declare-fun $@condition_$467 ( ) Bool)
(declare-fun $@condition_$47 ( ) Bool)
(declare-fun $@condition_$48 ( ) Bool)
(declare-fun $@condition_$49 ( ) Bool)
(declare-fun $@condition_$51 ( ) Bool)
(declare-fun $@condition_$52 ( ) Bool)
(declare-fun $@condition_$54 ( ) Bool)
(declare-fun $@condition_$55 ( ) Bool)
(declare-fun $@condition_$57 ( ) Bool)
(declare-fun $@condition_$59 ( ) Bool)
(declare-fun $@condition_$6 ( ) Bool)
(declare-fun $@condition_$60 ( ) Bool)
(declare-fun $@condition_$61 ( ) Bool)
(declare-fun $@condition_$63 ( ) Bool)
(declare-fun $@condition_$64 ( ) Bool)
(declare-fun $@condition_$65 ( ) Bool)
(declare-fun $@condition_$68 ( ) Bool)
(declare-fun $@condition_$70 ( ) Bool)
(declare-fun $@condition_$72 ( ) Bool)
(declare-fun $@condition_$74 ( ) Bool)
(declare-fun $@condition_$75 ( ) Bool)
(declare-fun $@condition_$78 ( ) Bool)
(declare-fun $@condition_$8 ( ) Bool)
(declare-fun $@condition_$81 ( ) Bool)
(declare-fun $@condition_$83 ( ) Bool)
(declare-fun $@condition_$85 ( ) Bool)
(declare-fun $@condition_$87 ( ) Bool)
(declare-fun $@condition_$89 ( ) Bool)
(declare-fun $@condition_$91 ( ) Bool)
(declare-fun $@condition_$93 ( ) Bool)
(declare-fun $@condition_$95 ( ) Bool)
(declare-fun $@condition_$97 ( ) Bool)
(declare-fun $@condition_$99 ( ) Bool)
(declare-fun $branchMerge_0 ( ) Bool)
(declare-fun $branchMerge_1 ( ) Bool)
(declare-fun $branchMerge_10 ( ) Bool)
(declare-fun $branchMerge_100 ( ) Bool)
(declare-fun $branchMerge_101 ( ) Bool)
(declare-fun $branchMerge_102 ( ) Bool)
(declare-fun $branchMerge_103 ( ) Bool)
(declare-fun $branchMerge_104 ( ) Bool)
(declare-fun $branchMerge_105 ( ) Bool)
(declare-fun $branchMerge_106 ( ) Bool)
(declare-fun $branchMerge_107 ( ) Bool)
(declare-fun $branchMerge_108 ( ) Bool)
(declare-fun $branchMerge_109 ( ) Bool)
(declare-fun $branchMerge_11 ( ) Bool)
(declare-fun $branchMerge_110 ( ) Bool)
(declare-fun $branchMerge_111 ( ) Bool)
(declare-fun $branchMerge_112 ( ) Bool)
(declare-fun $branchMerge_113 ( ) Bool)
(declare-fun $branchMerge_114 ( ) Bool)
(declare-fun $branchMerge_115 ( ) Bool)
(declare-fun $branchMerge_116 ( ) Bool)
(declare-fun $branchMerge_117 ( ) Bool)
(declare-fun $branchMerge_118 ( ) Bool)
(declare-fun $branchMerge_119 ( ) Bool)
(declare-fun $branchMerge_12 ( ) Bool)
(declare-fun $branchMerge_120 ( ) Bool)
(declare-fun $branchMerge_121 ( ) Bool)
(declare-fun $branchMerge_122 ( ) Bool)
(declare-fun $branchMerge_123 ( ) Bool)
(declare-fun $branchMerge_124 ( ) Bool)
(declare-fun $branchMerge_125 ( ) Bool)
(declare-fun $branchMerge_126 ( ) Bool)
(declare-fun $branchMerge_127 ( ) Bool)
(declare-fun $branchMerge_128 ( ) Bool)
(declare-fun $branchMerge_129 ( ) Bool)
(declare-fun $branchMerge_13 ( ) Bool)
(declare-fun $branchMerge_130 ( ) Bool)
(declare-fun $branchMerge_131 ( ) Bool)
(declare-fun $branchMerge_132 ( ) Bool)
(declare-fun $branchMerge_133 ( ) Bool)
(declare-fun $branchMerge_134 ( ) Bool)
(declare-fun $branchMerge_135 ( ) Bool)
(declare-fun $branchMerge_136 ( ) Bool)
(declare-fun $branchMerge_137 ( ) Bool)
(declare-fun $branchMerge_138 ( ) Bool)
(declare-fun $branchMerge_139 ( ) Bool)
(declare-fun $branchMerge_14 ( ) Bool)
(declare-fun $branchMerge_140 ( ) Bool)
(declare-fun $branchMerge_141 ( ) Bool)
(declare-fun $branchMerge_142 ( ) Bool)
(declare-fun $branchMerge_143 ( ) Bool)
(declare-fun $branchMerge_144 ( ) Bool)
(declare-fun $branchMerge_145 ( ) Bool)
(declare-fun $branchMerge_146 ( ) Bool)
(declare-fun $branchMerge_147 ( ) Bool)
(declare-fun $branchMerge_148 ( ) Bool)
(declare-fun $branchMerge_149 ( ) Bool)
(declare-fun $branchMerge_15 ( ) Bool)
(declare-fun $branchMerge_150 ( ) Bool)
(declare-fun $branchMerge_151 ( ) Bool)
(declare-fun $branchMerge_152 ( ) Bool)
(declare-fun $branchMerge_153 ( ) Bool)
(declare-fun $branchMerge_154 ( ) Bool)
(declare-fun $branchMerge_155 ( ) Bool)
(declare-fun $branchMerge_156 ( ) Bool)
(declare-fun $branchMerge_157 ( ) Bool)
(declare-fun $branchMerge_158 ( ) Bool)
(declare-fun $branchMerge_159 ( ) Bool)
(declare-fun $branchMerge_16 ( ) Bool)
(declare-fun $branchMerge_160 ( ) Bool)
(declare-fun $branchMerge_161 ( ) Bool)
(declare-fun $branchMerge_162 ( ) Bool)
(declare-fun $branchMerge_163 ( ) Bool)
(declare-fun $branchMerge_164 ( ) Bool)
(declare-fun $branchMerge_165 ( ) Bool)
(declare-fun $branchMerge_166 ( ) Bool)
(declare-fun $branchMerge_167 ( ) Bool)
(declare-fun $branchMerge_168 ( ) Bool)
(declare-fun $branchMerge_169 ( ) Bool)
(declare-fun $branchMerge_17 ( ) Bool)
(declare-fun $branchMerge_170 ( ) Bool)
(declare-fun $branchMerge_171 ( ) Bool)
(declare-fun $branchMerge_172 ( ) Bool)
(declare-fun $branchMerge_173 ( ) Bool)
(declare-fun $branchMerge_174 ( ) Bool)
(declare-fun $branchMerge_175 ( ) Bool)
(declare-fun $branchMerge_176 ( ) Bool)
(declare-fun $branchMerge_177 ( ) Bool)
(declare-fun $branchMerge_178 ( ) Bool)
(declare-fun $branchMerge_179 ( ) Bool)
(declare-fun $branchMerge_18 ( ) Bool)
(declare-fun $branchMerge_180 ( ) Bool)
(declare-fun $branchMerge_181 ( ) Bool)
(declare-fun $branchMerge_182 ( ) Bool)
(declare-fun $branchMerge_183 ( ) Bool)
(declare-fun $branchMerge_184 ( ) Bool)
(declare-fun $branchMerge_19 ( ) Bool)
(declare-fun $branchMerge_2 ( ) Bool)
(declare-fun $branchMerge_20 ( ) Bool)
(declare-fun $branchMerge_21 ( ) Bool)
(declare-fun $branchMerge_22 ( ) Bool)
(declare-fun $branchMerge_23 ( ) Bool)
(declare-fun $branchMerge_24 ( ) Bool)
(declare-fun $branchMerge_25 ( ) Bool)
(declare-fun $branchMerge_26 ( ) Bool)
(declare-fun $branchMerge_27 ( ) Bool)
(declare-fun $branchMerge_28 ( ) Bool)
(declare-fun $branchMerge_29 ( ) Bool)
(declare-fun $branchMerge_3 ( ) Bool)
(declare-fun $branchMerge_30 ( ) Bool)
(declare-fun $branchMerge_31 ( ) Bool)
(declare-fun $branchMerge_32 ( ) Bool)
(declare-fun $branchMerge_33 ( ) Bool)
(declare-fun $branchMerge_34 ( ) Bool)
(declare-fun $branchMerge_35 ( ) Bool)
(declare-fun $branchMerge_36 ( ) Bool)
(declare-fun $branchMerge_37 ( ) Bool)
(declare-fun $branchMerge_38 ( ) Bool)
(declare-fun $branchMerge_39 ( ) Bool)
(declare-fun $branchMerge_4 ( ) Bool)
(declare-fun $branchMerge_40 ( ) Bool)
(declare-fun $branchMerge_41 ( ) Bool)
(declare-fun $branchMerge_42 ( ) Bool)
(declare-fun $branchMerge_43 ( ) Bool)
(declare-fun $branchMerge_44 ( ) Bool)
(declare-fun $branchMerge_45 ( ) Bool)
(declare-fun $branchMerge_46 ( ) Bool)
(declare-fun $branchMerge_47 ( ) Bool)
(declare-fun $branchMerge_48 ( ) Bool)
(declare-fun $branchMerge_49 ( ) Bool)
(declare-fun $branchMerge_5 ( ) Bool)
(declare-fun $branchMerge_50 ( ) Bool)
(declare-fun $branchMerge_51 ( ) Bool)
(declare-fun $branchMerge_52 ( ) Bool)
(declare-fun $branchMerge_53 ( ) Bool)
(declare-fun $branchMerge_54 ( ) Bool)
(declare-fun $branchMerge_55 ( ) Bool)
(declare-fun $branchMerge_56 ( ) Bool)
(declare-fun $branchMerge_57 ( ) Bool)
(declare-fun $branchMerge_58 ( ) Bool)
(declare-fun $branchMerge_59 ( ) Bool)
(declare-fun $branchMerge_6 ( ) Bool)
(declare-fun $branchMerge_60 ( ) Bool)
(declare-fun $branchMerge_61 ( ) Bool)
(declare-fun $branchMerge_62 ( ) Bool)
(declare-fun $branchMerge_63 ( ) Bool)
(declare-fun $branchMerge_64 ( ) Bool)
(declare-fun $branchMerge_65 ( ) Bool)
(declare-fun $branchMerge_66 ( ) Bool)
(declare-fun $branchMerge_67 ( ) Bool)
(declare-fun $branchMerge_68 ( ) Bool)
(declare-fun $branchMerge_69 ( ) Bool)
(declare-fun $branchMerge_7 ( ) Bool)
(declare-fun $branchMerge_70 ( ) Bool)
(declare-fun $branchMerge_71 ( ) Bool)
(declare-fun $branchMerge_72 ( ) Bool)
(declare-fun $branchMerge_73 ( ) Bool)
(declare-fun $branchMerge_74 ( ) Bool)
(declare-fun $branchMerge_75 ( ) Bool)
(declare-fun $branchMerge_76 ( ) Bool)
(declare-fun $branchMerge_77 ( ) Bool)
(declare-fun $branchMerge_78 ( ) Bool)
(declare-fun $branchMerge_79 ( ) Bool)
(declare-fun $branchMerge_8 ( ) Bool)
(declare-fun $branchMerge_80 ( ) Bool)
(declare-fun $branchMerge_81 ( ) Bool)
(declare-fun $branchMerge_82 ( ) Bool)
(declare-fun $branchMerge_83 ( ) Bool)
(declare-fun $branchMerge_84 ( ) Bool)
(declare-fun $branchMerge_85 ( ) Bool)
(declare-fun $branchMerge_86 ( ) Bool)
(declare-fun $branchMerge_87 ( ) Bool)
(declare-fun $branchMerge_88 ( ) Bool)
(declare-fun $branchMerge_89 ( ) Bool)
(declare-fun $branchMerge_9 ( ) Bool)
(declare-fun $branchMerge_90 ( ) Bool)
(declare-fun $branchMerge_91 ( ) Bool)
(declare-fun $branchMerge_92 ( ) Bool)
(declare-fun $branchMerge_93 ( ) Bool)
(declare-fun $branchMerge_94 ( ) Bool)
(declare-fun $branchMerge_95 ( ) Bool)
(declare-fun $branchMerge_96 ( ) Bool)
(declare-fun $branchMerge_97 ( ) Bool)
(declare-fun $branchMerge_98 ( ) Bool)
(declare-fun $branchMerge_99 ( ) Bool)
(declare-fun $start ( ) Bool)
(declare-fun anon0 ( ) Bool)
(declare-fun anon0@1 ( ) Bool)
(declare-fun anon0@1_assertion ( ) Bool)
(declare-fun anon0@2 ( ) Bool)
(declare-fun anon0@2_assertion ( ) Bool)
(declare-fun anon0@3 ( ) Bool)
(declare-fun anon0_assertion ( ) Bool)
(declare-fun anon1012_Else ( ) Bool)
(declare-fun anon1012_Then ( ) Bool)
(declare-fun anon1013_Else ( ) Bool)
(declare-fun anon1013_Then ( ) Bool)
(declare-fun anon1014_Else ( ) Bool)
(declare-fun anon1014_Then ( ) Bool)
(declare-fun anon1015_Else ( ) Bool)
(declare-fun anon1015_Then ( ) Bool)
(declare-fun anon1016_Else ( ) Bool)
(declare-fun anon1016_Then ( ) Bool)
(declare-fun anon1017_Else ( ) Bool)
(declare-fun anon1017_Then ( ) Bool)
(declare-fun anon1018_Else ( ) Bool)
(declare-fun anon1018_Then ( ) Bool)
(declare-fun anon1019_Else ( ) Bool)
(declare-fun anon1019_Then ( ) Bool)
(declare-fun anon1020_Else ( ) Bool)
(declare-fun anon1020_Then ( ) Bool)
(declare-fun anon1021_Else ( ) Bool)
(declare-fun anon1021_Then ( ) Bool)
(declare-fun anon1022_Else ( ) Bool)
(declare-fun anon1022_Then ( ) Bool)
(declare-fun anon1023_Else ( ) Bool)
(declare-fun anon1023_Then ( ) Bool)
(declare-fun anon1024_Else ( ) Bool)
(declare-fun anon1024_Then ( ) Bool)
(declare-fun anon1025_Else ( ) Bool)
(declare-fun anon1052_Else ( ) Bool)
(declare-fun anon1052_Then ( ) Bool)
(declare-fun anon1053_Else ( ) Bool)
(declare-fun anon1053_Then ( ) Bool)
(declare-fun anon1054_Else ( ) Bool)
(declare-fun anon1054_Then ( ) Bool)
(declare-fun anon1055_Else ( ) Bool)
(declare-fun anon1055_Then ( ) Bool)
(declare-fun anon1056_Else ( ) Bool)
(declare-fun anon1056_Then ( ) Bool)
(declare-fun anon1057_Else ( ) Bool)
(declare-fun anon1057_Then ( ) Bool)
(declare-fun anon1058_Else ( ) Bool)
(declare-fun anon1058_Then ( ) Bool)
(declare-fun anon1059_Else ( ) Bool)
(declare-fun anon1059_Then ( ) Bool)
(declare-fun anon1060_Else ( ) Bool)
(declare-fun anon1060_Then ( ) Bool)
(declare-fun anon1061_Else ( ) Bool)
(declare-fun anon1061_Then ( ) Bool)
(declare-fun anon1062_Else ( ) Bool)
(declare-fun anon1062_Then ( ) Bool)
(declare-fun anon1063_Else ( ) Bool)
(declare-fun anon1063_Then ( ) Bool)
(declare-fun anon1064_Else ( ) Bool)
(declare-fun anon1064_Else@1 ( ) Bool)
(declare-fun anon1064_Else@1_assertion ( ) Bool)
(declare-fun anon1064_Else@2 ( ) Bool)
(declare-fun anon1064_Else_assertion ( ) Bool)
(declare-fun anon1064_Then ( ) Bool)
(declare-fun anon1064_Then@1 ( ) Bool)
(declare-fun anon1064_Then@1_assertion ( ) Bool)
(declare-fun anon1064_Then@2 ( ) Bool)
(declare-fun anon1064_Then_assertion ( ) Bool)
(declare-fun anon1065_Else ( ) Bool)
(declare-fun anon1065_Then ( ) Bool)
(declare-fun anon1065_Then@1 ( ) Bool)
(declare-fun anon1065_Then@1_assertion ( ) Bool)
(declare-fun anon1065_Then@2 ( ) Bool)
(declare-fun anon1065_Then_assertion ( ) Bool)
(declare-fun anon1066_Else ( ) Bool)
(declare-fun anon1066_Then ( ) Bool)
(declare-fun anon1066_Then@1 ( ) Bool)
(declare-fun anon1066_Then@1_assertion ( ) Bool)
(declare-fun anon1066_Then@2 ( ) Bool)
(declare-fun anon1066_Then_assertion ( ) Bool)
(declare-fun anon1067_Else ( ) Bool)
(declare-fun anon1067_Then ( ) Bool)
(declare-fun anon1067_Then@1 ( ) Bool)
(declare-fun anon1067_Then@1_assertion ( ) Bool)
(declare-fun anon1067_Then@2 ( ) Bool)
(declare-fun anon1067_Then_assertion ( ) Bool)
(declare-fun anon1068_Else ( ) Bool)
(declare-fun anon1068_Then ( ) Bool)
(declare-fun anon1069_Else ( ) Bool)
(declare-fun anon1069_Then ( ) Bool)
(declare-fun anon1069_Then@1 ( ) Bool)
(declare-fun anon1069_Then@1_assertion ( ) Bool)
(declare-fun anon1069_Then@2 ( ) Bool)
(declare-fun anon1069_Then_assertion ( ) Bool)
(declare-fun anon1070_Else ( ) Bool)
(declare-fun anon1070_Then ( ) Bool)
(declare-fun anon1071_Else ( ) Bool)
(declare-fun anon1071_Then ( ) Bool)
(declare-fun anon1072_Else ( ) Bool)
(declare-fun anon1072_Then ( ) Bool)
(declare-fun anon1073_Else ( ) Bool)
(declare-fun anon1073_Then ( ) Bool)
(declare-fun anon1074_Else ( ) Bool)
(declare-fun anon1074_Then ( ) Bool)
(declare-fun anon1075_Else ( ) Bool)
(declare-fun anon1075_Then ( ) Bool)
(declare-fun anon1076_Else ( ) Bool)
(declare-fun anon1076_Then ( ) Bool)
(declare-fun anon1077_Else ( ) Bool)
(declare-fun anon1077_Else@1 ( ) Bool)
(declare-fun anon1077_Else@1_assertion ( ) Bool)
(declare-fun anon1077_Else@2 ( ) Bool)
(declare-fun anon1077_Else@2_assertion ( ) Bool)
(declare-fun anon1077_Else@3 ( ) Bool)
(declare-fun anon1077_Else@3_assertion ( ) Bool)
(declare-fun anon1077_Else@4 ( ) Bool)
(declare-fun anon1077_Else@4_assertion ( ) Bool)
(declare-fun anon1077_Else@5 ( ) Bool)
(declare-fun anon1077_Else_assertion ( ) Bool)
(declare-fun anon1077_Then ( ) Bool)
(declare-fun anon1077_Then@1 ( ) Bool)
(declare-fun anon1077_Then@1_assertion ( ) Bool)
(declare-fun anon1077_Then@2 ( ) Bool)
(declare-fun anon1077_Then@2_assertion ( ) Bool)
(declare-fun anon1077_Then@3 ( ) Bool)
(declare-fun anon1077_Then@3_assertion ( ) Bool)
(declare-fun anon1077_Then@4 ( ) Bool)
(declare-fun anon1077_Then@4_assertion ( ) Bool)
(declare-fun anon1077_Then@5 ( ) Bool)
(declare-fun anon1077_Then_assertion ( ) Bool)
(declare-fun anon1078_Else ( ) Bool)
(declare-fun anon1078_Then ( ) Bool)
(declare-fun anon1079_Else ( ) Bool)
(declare-fun anon1079_Then ( ) Bool)
(declare-fun anon1080_Else ( ) Bool)
(declare-fun anon1080_Then ( ) Bool)
(declare-fun anon1081_Else ( ) Bool)
(declare-fun anon1081_Then ( ) Bool)
(declare-fun anon1082_Else ( ) Bool)
(declare-fun anon1082_Then ( ) Bool)
(declare-fun anon1083_Else ( ) Bool)
(declare-fun anon1083_Then ( ) Bool)
(declare-fun anon1084_Else ( ) Bool)
(declare-fun anon1084_Then ( ) Bool)
(declare-fun anon1085_Else ( ) Bool)
(declare-fun anon1085_Then ( ) Bool)
(declare-fun anon1086_Else ( ) Bool)
(declare-fun anon1086_Then ( ) Bool)
(declare-fun anon1087_Else ( ) Bool)
(declare-fun anon1087_Then ( ) Bool)
(declare-fun anon1088_Else ( ) Bool)
(declare-fun anon1088_Then ( ) Bool)
(declare-fun anon1089_Else ( ) Bool)
(declare-fun anon1089_Then ( ) Bool)
(declare-fun anon1090_Else ( ) Bool)
(declare-fun anon1090_Then ( ) Bool)
(declare-fun anon1091_Else ( ) Bool)
(declare-fun anon1091_Then ( ) Bool)
(declare-fun anon1092_Else ( ) Bool)
(declare-fun anon1092_Then ( ) Bool)
(declare-fun anon1093_Else ( ) Bool)
(declare-fun anon1093_Then ( ) Bool)
(declare-fun anon1094_Else ( ) Bool)
(declare-fun anon1094_Then ( ) Bool)
(declare-fun anon1095_Else ( ) Bool)
(declare-fun anon1095_Then ( ) Bool)
(declare-fun anon1096_Else ( ) Bool)
(declare-fun anon1096_Then ( ) Bool)
(declare-fun anon1097_Else ( ) Bool)
(declare-fun anon1097_Then ( ) Bool)
(declare-fun anon1098_Else ( ) Bool)
(declare-fun anon1125_Else ( ) Bool)
(declare-fun anon1125_Then ( ) Bool)
(declare-fun anon1126_Else ( ) Bool)
(declare-fun anon1126_Then ( ) Bool)
(declare-fun anon1127_Else ( ) Bool)
(declare-fun anon1127_Then ( ) Bool)
(declare-fun anon1128_Else ( ) Bool)
(declare-fun anon1128_Then ( ) Bool)
(declare-fun anon1129_Else ( ) Bool)
(declare-fun anon1129_Then ( ) Bool)
(declare-fun anon1130_Else ( ) Bool)
(declare-fun anon1130_Then ( ) Bool)
(declare-fun anon1131_Else ( ) Bool)
(declare-fun anon1131_Then ( ) Bool)
(declare-fun anon1132_Else ( ) Bool)
(declare-fun anon1132_Then ( ) Bool)
(declare-fun anon1133_Else ( ) Bool)
(declare-fun anon1133_Then ( ) Bool)
(declare-fun anon1134_Else ( ) Bool)
(declare-fun anon1134_Then ( ) Bool)
(declare-fun anon1135_Else ( ) Bool)
(declare-fun anon1135_Then ( ) Bool)
(declare-fun anon1136_Else ( ) Bool)
(declare-fun anon1136_Then ( ) Bool)
(declare-fun anon1137_Else ( ) Bool)
(declare-fun anon1137_Then ( ) Bool)
(declare-fun anon1138_Else ( ) Bool)
(declare-fun anon1138_Then ( ) Bool)
(declare-fun anon1138_Then@1 ( ) Bool)
(declare-fun anon1138_Then_assertion ( ) Bool)
(declare-fun anon1139_Else ( ) Bool)
(declare-fun anon1139_Then ( ) Bool)
(declare-fun anon1139_Then@1 ( ) Bool)
(declare-fun anon1139_Then_assertion ( ) Bool)
(declare-fun anon1140_Else ( ) Bool)
(declare-fun anon1140_Then ( ) Bool)
(declare-fun anon1140_Then@1 ( ) Bool)
(declare-fun anon1140_Then@1_assertion ( ) Bool)
(declare-fun anon1140_Then@2 ( ) Bool)
(declare-fun anon1140_Then_assertion ( ) Bool)
(declare-fun anon1141_Else ( ) Bool)
(declare-fun anon1141_Then ( ) Bool)
(declare-fun anon1142_Else ( ) Bool)
(declare-fun anon1142_Then ( ) Bool)
(declare-fun anon1142_Then@1 ( ) Bool)
(declare-fun anon1142_Then@1_assertion ( ) Bool)
(declare-fun anon1142_Then@2 ( ) Bool)
(declare-fun anon1142_Then_assertion ( ) Bool)
(declare-fun anon1143_Else ( ) Bool)
(declare-fun anon1143_Then ( ) Bool)
(declare-fun anon1143_Then@1 ( ) Bool)
(declare-fun anon1143_Then@1_assertion ( ) Bool)
(declare-fun anon1143_Then@2 ( ) Bool)
(declare-fun anon1143_Then_assertion ( ) Bool)
(declare-fun anon1144_Else ( ) Bool)
(declare-fun anon1144_Then ( ) Bool)
(declare-fun anon1144_Then@1 ( ) Bool)
(declare-fun anon1144_Then@1_assertion ( ) Bool)
(declare-fun anon1144_Then@2 ( ) Bool)
(declare-fun anon1144_Then_assertion ( ) Bool)
(declare-fun anon1145_Else ( ) Bool)
(declare-fun anon1145_Then ( ) Bool)
(declare-fun anon1145_Then@1 ( ) Bool)
(declare-fun anon1145_Then@1_assertion ( ) Bool)
(declare-fun anon1145_Then@2 ( ) Bool)
(declare-fun anon1145_Then_assertion ( ) Bool)
(declare-fun anon1146_Else ( ) Bool)
(declare-fun anon1146_Then ( ) Bool)
(declare-fun anon1147_Else ( ) Bool)
(declare-fun anon1147_Then ( ) Bool)
(declare-fun anon1147_Then@1 ( ) Bool)
(declare-fun anon1147_Then@1_assertion ( ) Bool)
(declare-fun anon1147_Then@2 ( ) Bool)
(declare-fun anon1147_Then_assertion ( ) Bool)
(declare-fun anon1148_Else ( ) Bool)
(declare-fun anon1148_Then ( ) Bool)
(declare-fun anon1148_Then@1 ( ) Bool)
(declare-fun anon1148_Then@1_assertion ( ) Bool)
(declare-fun anon1148_Then@2 ( ) Bool)
(declare-fun anon1148_Then_assertion ( ) Bool)
(declare-fun anon1149_Else ( ) Bool)
(declare-fun anon1149_Then ( ) Bool)
(declare-fun anon1149_Then@1 ( ) Bool)
(declare-fun anon1149_Then@1_assertion ( ) Bool)
(declare-fun anon1149_Then@2 ( ) Bool)
(declare-fun anon1149_Then_assertion ( ) Bool)
(declare-fun anon1150_Else ( ) Bool)
(declare-fun anon1150_Else@1 ( ) Bool)
(declare-fun anon1150_Else@1_assertion ( ) Bool)
(declare-fun anon1150_Else@2 ( ) Bool)
(declare-fun anon1150_Else_assertion ( ) Bool)
(declare-fun anon1150_Then ( ) Bool)
(declare-fun anon1150_Then@1 ( ) Bool)
(declare-fun anon1150_Then@1_assertion ( ) Bool)
(declare-fun anon1150_Then@2 ( ) Bool)
(declare-fun anon1150_Then_assertion ( ) Bool)
(declare-fun anon1151_Else ( ) Bool)
(declare-fun anon1151_Else@1 ( ) Bool)
(declare-fun anon1151_Else_assertion ( ) Bool)
(declare-fun anon1151_Then ( ) Bool)
(declare-fun anon1151_Then@1 ( ) Bool)
(declare-fun anon1151_Then@1_assertion ( ) Bool)
(declare-fun anon1151_Then@2 ( ) Bool)
(declare-fun anon1151_Then@2_assertion ( ) Bool)
(declare-fun anon1151_Then@3 ( ) Bool)
(declare-fun anon1151_Then@3_assertion ( ) Bool)
(declare-fun anon1151_Then@4 ( ) Bool)
(declare-fun anon1151_Then@4_assertion ( ) Bool)
(declare-fun anon1151_Then@5 ( ) Bool)
(declare-fun anon1151_Then_assertion ( ) Bool)
(declare-fun anon1152_Else ( ) Bool)
(declare-fun anon1152_Then ( ) Bool)
(declare-fun anon1153_Else ( ) Bool)
(declare-fun anon1153_Then ( ) Bool)
(declare-fun anon1154_Else ( ) Bool)
(declare-fun anon1154_Then ( ) Bool)
(declare-fun anon1155_Else ( ) Bool)
(declare-fun anon1155_Then ( ) Bool)
(declare-fun anon1156_Else ( ) Bool)
(declare-fun anon1156_Then ( ) Bool)
(declare-fun anon1157_Else ( ) Bool)
(declare-fun anon1157_Then ( ) Bool)
(declare-fun anon1158_Else ( ) Bool)
(declare-fun anon1158_Then ( ) Bool)
(declare-fun anon1159_Else ( ) Bool)
(declare-fun anon1159_Then ( ) Bool)
(declare-fun anon1160_Else ( ) Bool)
(declare-fun anon1160_Then ( ) Bool)
(declare-fun anon1161_Else ( ) Bool)
(declare-fun anon1161_Then ( ) Bool)
(declare-fun anon1162_Else ( ) Bool)
(declare-fun anon1162_Then ( ) Bool)
(declare-fun anon1163_Else ( ) Bool)
(declare-fun anon1163_Then ( ) Bool)
(declare-fun anon1164_Else ( ) Bool)
(declare-fun anon1164_Then ( ) Bool)
(declare-fun anon1165_Else ( ) Bool)
(declare-fun anon1165_Then ( ) Bool)
(declare-fun anon1166_Else ( ) Bool)
(declare-fun anon1166_Then ( ) Bool)
(declare-fun anon1167_Else ( ) Bool)
(declare-fun anon1167_Then ( ) Bool)
(declare-fun anon1168_Else ( ) Bool)
(declare-fun anon1168_Then ( ) Bool)
(declare-fun anon1169_Else ( ) Bool)
(declare-fun anon1169_Then ( ) Bool)
(declare-fun anon1169_Then@1 ( ) Bool)
(declare-fun anon1169_Then@1_assertion ( ) Bool)
(declare-fun anon1169_Then@2 ( ) Bool)
(declare-fun anon1169_Then_assertion ( ) Bool)
(declare-fun anon1170_Else ( ) Bool)
(declare-fun anon1170_Then ( ) Bool)
(declare-fun anon1170_Then@1 ( ) Bool)
(declare-fun anon1170_Then@1_assertion ( ) Bool)
(declare-fun anon1170_Then@2 ( ) Bool)
(declare-fun anon1170_Then_assertion ( ) Bool)
(declare-fun anon1171_Else ( ) Bool)
(declare-fun anon1171_Then ( ) Bool)
(declare-fun anon1171_Then@1 ( ) Bool)
(declare-fun anon1171_Then@1_assertion ( ) Bool)
(declare-fun anon1171_Then@2 ( ) Bool)
(declare-fun anon1171_Then_assertion ( ) Bool)
(declare-fun anon1172_Else ( ) Bool)
(declare-fun anon1172_Then ( ) Bool)
(declare-fun anon1173_Else ( ) Bool)
(declare-fun anon1173_Then ( ) Bool)
(declare-fun anon1173_Then@1 ( ) Bool)
(declare-fun anon1173_Then@1_assertion ( ) Bool)
(declare-fun anon1173_Then@2 ( ) Bool)
(declare-fun anon1173_Then_assertion ( ) Bool)
(declare-fun anon1174_Else ( ) Bool)
(declare-fun anon1174_Then ( ) Bool)
(declare-fun anon1175_Else ( ) Bool)
(declare-fun anon1175_Then ( ) Bool)
(declare-fun anon1176_Else ( ) Bool)
(declare-fun anon1176_Then ( ) Bool)
(declare-fun anon1177_Else ( ) Bool)
(declare-fun anon1177_Then ( ) Bool)
(declare-fun anon1178_Else ( ) Bool)
(declare-fun anon1178_Then ( ) Bool)
(declare-fun anon1179_Else ( ) Bool)
(declare-fun anon1179_Then ( ) Bool)
(declare-fun anon1180_Else ( ) Bool)
(declare-fun anon1180_Then ( ) Bool)
(declare-fun anon1181_Else ( ) Bool)
(declare-fun anon1181_Else@1 ( ) Bool)
(declare-fun anon1181_Else_assertion ( ) Bool)
(declare-fun anon1181_Then ( ) Bool)
(declare-fun anon1181_Then@1 ( ) Bool)
(declare-fun anon1181_Then_assertion ( ) Bool)
(declare-fun anon1182_Else ( ) Bool)
(declare-fun anon1182_Then ( ) Bool)
(declare-fun anon1182_Then@1 ( ) Bool)
(declare-fun anon1182_Then_assertion ( ) Bool)
(declare-fun anon1183_Else ( ) Bool)
(declare-fun anon1183_Then ( ) Bool)
(declare-fun anon1183_Then@1 ( ) Bool)
(declare-fun anon1183_Then@1_assertion ( ) Bool)
(declare-fun anon1183_Then@2 ( ) Bool)
(declare-fun anon1183_Then_assertion ( ) Bool)
(declare-fun anon1184_Else ( ) Bool)
(declare-fun anon1184_Then ( ) Bool)
(declare-fun anon1185_Else ( ) Bool)
(declare-fun anon1185_Then ( ) Bool)
(declare-fun anon1185_Then@1 ( ) Bool)
(declare-fun anon1185_Then@1_assertion ( ) Bool)
(declare-fun anon1185_Then@2 ( ) Bool)
(declare-fun anon1185_Then_assertion ( ) Bool)
(declare-fun anon1186_Else ( ) Bool)
(declare-fun anon1186_Then ( ) Bool)
(declare-fun anon1186_Then@1 ( ) Bool)
(declare-fun anon1186_Then@1_assertion ( ) Bool)
(declare-fun anon1186_Then@2 ( ) Bool)
(declare-fun anon1186_Then_assertion ( ) Bool)
(declare-fun anon1187_Else ( ) Bool)
(declare-fun anon1187_Then ( ) Bool)
(declare-fun anon1187_Then@1 ( ) Bool)
(declare-fun anon1187_Then@1_assertion ( ) Bool)
(declare-fun anon1187_Then@2 ( ) Bool)
(declare-fun anon1187_Then_assertion ( ) Bool)
(declare-fun anon1188_Else ( ) Bool)
(declare-fun anon1188_Then ( ) Bool)
(declare-fun anon1189_Else ( ) Bool)
(declare-fun anon1189_Then ( ) Bool)
(declare-fun anon1189_Then@1 ( ) Bool)
(declare-fun anon1189_Then_assertion ( ) Bool)
(declare-fun anon1190_Else ( ) Bool)
(declare-fun anon1190_Then ( ) Bool)
(declare-fun anon1190_Then@1 ( ) Bool)
(declare-fun anon1190_Then_assertion ( ) Bool)
(declare-fun anon1191_Else ( ) Bool)
(declare-fun anon1191_Then ( ) Bool)
(declare-fun anon1191_Then@1 ( ) Bool)
(declare-fun anon1191_Then@1_assertion ( ) Bool)
(declare-fun anon1191_Then@2 ( ) Bool)
(declare-fun anon1191_Then_assertion ( ) Bool)
(declare-fun anon1192_Else ( ) Bool)
(declare-fun anon1192_Then ( ) Bool)
(declare-fun anon1193_Else ( ) Bool)
(declare-fun anon1193_Then ( ) Bool)
(declare-fun anon1193_Then@1 ( ) Bool)
(declare-fun anon1193_Then@1_assertion ( ) Bool)
(declare-fun anon1193_Then@2 ( ) Bool)
(declare-fun anon1193_Then_assertion ( ) Bool)
(declare-fun anon1194_Else ( ) Bool)
(declare-fun anon1194_Then ( ) Bool)
(declare-fun anon1194_Then@1 ( ) Bool)
(declare-fun anon1194_Then@1_assertion ( ) Bool)
(declare-fun anon1194_Then@2 ( ) Bool)
(declare-fun anon1194_Then_assertion ( ) Bool)
(declare-fun anon1195_Else ( ) Bool)
(declare-fun anon1195_Then ( ) Bool)
(declare-fun anon1195_Then@1 ( ) Bool)
(declare-fun anon1195_Then@1_assertion ( ) Bool)
(declare-fun anon1195_Then@2 ( ) Bool)
(declare-fun anon1195_Then_assertion ( ) Bool)
(declare-fun anon1196_Else ( ) Bool)
(declare-fun anon1196_Then ( ) Bool)
(declare-fun anon1196_Then@1 ( ) Bool)
(declare-fun anon1196_Then@1_assertion ( ) Bool)
(declare-fun anon1196_Then@2 ( ) Bool)
(declare-fun anon1196_Then_assertion ( ) Bool)
(declare-fun anon1197_Else ( ) Bool)
(declare-fun anon1197_Then ( ) Bool)
(declare-fun anon1198_Else ( ) Bool)
(declare-fun anon1198_Then ( ) Bool)
(declare-fun anon1198_Then@1 ( ) Bool)
(declare-fun anon1198_Then@1_assertion ( ) Bool)
(declare-fun anon1198_Then@2 ( ) Bool)
(declare-fun anon1198_Then_assertion ( ) Bool)
(declare-fun anon1199_Else ( ) Bool)
(declare-fun anon1199_Then ( ) Bool)
(declare-fun anon1199_Then@1 ( ) Bool)
(declare-fun anon1199_Then@1_assertion ( ) Bool)
(declare-fun anon1199_Then@2 ( ) Bool)
(declare-fun anon1199_Then_assertion ( ) Bool)
(declare-fun anon1200_Else ( ) Bool)
(declare-fun anon1200_Then ( ) Bool)
(declare-fun anon1200_Then@1 ( ) Bool)
(declare-fun anon1200_Then@1_assertion ( ) Bool)
(declare-fun anon1200_Then@2 ( ) Bool)
(declare-fun anon1200_Then_assertion ( ) Bool)
(declare-fun anon1201_Else ( ) Bool)
(declare-fun anon1201_Then ( ) Bool)
(declare-fun anon1201_Then@1 ( ) Bool)
(declare-fun anon1201_Then_assertion ( ) Bool)
(declare-fun anon1202_Else ( ) Bool)
(declare-fun anon1202_Then ( ) Bool)
(declare-fun anon1202_Then@1 ( ) Bool)
(declare-fun anon1202_Then_assertion ( ) Bool)
(declare-fun anon1203_Else ( ) Bool)
(declare-fun anon1203_Then ( ) Bool)
(declare-fun anon1203_Then@1 ( ) Bool)
(declare-fun anon1203_Then@1_assertion ( ) Bool)
(declare-fun anon1203_Then@2 ( ) Bool)
(declare-fun anon1203_Then_assertion ( ) Bool)
(declare-fun anon1204_Else ( ) Bool)
(declare-fun anon1204_Then ( ) Bool)
(declare-fun anon1205_Else ( ) Bool)
(declare-fun anon1205_Then ( ) Bool)
(declare-fun anon1205_Then@1 ( ) Bool)
(declare-fun anon1205_Then@1_assertion ( ) Bool)
(declare-fun anon1205_Then@2 ( ) Bool)
(declare-fun anon1205_Then_assertion ( ) Bool)
(declare-fun anon1206_Else ( ) Bool)
(declare-fun anon1206_Then ( ) Bool)
(declare-fun anon1206_Then@1 ( ) Bool)
(declare-fun anon1206_Then@1_assertion ( ) Bool)
(declare-fun anon1206_Then@2 ( ) Bool)
(declare-fun anon1206_Then_assertion ( ) Bool)
(declare-fun anon1207_Else ( ) Bool)
(declare-fun anon1207_Then ( ) Bool)
(declare-fun anon1207_Then@1 ( ) Bool)
(declare-fun anon1207_Then@1_assertion ( ) Bool)
(declare-fun anon1207_Then@2 ( ) Bool)
(declare-fun anon1207_Then_assertion ( ) Bool)
(declare-fun anon1208_Else ( ) Bool)
(declare-fun anon1208_Then ( ) Bool)
(declare-fun anon1208_Then@1 ( ) Bool)
(declare-fun anon1208_Then@1_assertion ( ) Bool)
(declare-fun anon1208_Then@2 ( ) Bool)
(declare-fun anon1208_Then_assertion ( ) Bool)
(declare-fun anon1209_Else ( ) Bool)
(declare-fun anon1209_Then ( ) Bool)
(declare-fun anon1210_Else ( ) Bool)
(declare-fun anon1210_Then ( ) Bool)
(declare-fun anon1210_Then@1 ( ) Bool)
(declare-fun anon1210_Then@1_assertion ( ) Bool)
(declare-fun anon1210_Then@2 ( ) Bool)
(declare-fun anon1210_Then_assertion ( ) Bool)
(declare-fun anon1211_Else ( ) Bool)
(declare-fun anon1211_Then ( ) Bool)
(declare-fun anon1211_Then@1 ( ) Bool)
(declare-fun anon1211_Then@1_assertion ( ) Bool)
(declare-fun anon1211_Then@2 ( ) Bool)
(declare-fun anon1211_Then_assertion ( ) Bool)
(declare-fun anon1212_Else ( ) Bool)
(declare-fun anon1212_Then ( ) Bool)
(declare-fun anon1212_Then@1 ( ) Bool)
(declare-fun anon1212_Then@1_assertion ( ) Bool)
(declare-fun anon1212_Then@2 ( ) Bool)
(declare-fun anon1212_Then_assertion ( ) Bool)
(declare-fun anon1213_Else ( ) Bool)
(declare-fun anon1213_Else@1 ( ) Bool)
(declare-fun anon1213_Else_assertion ( ) Bool)
(declare-fun anon1213_Then ( ) Bool)
(declare-fun anon1213_Then@1 ( ) Bool)
(declare-fun anon1213_Then@1_assertion ( ) Bool)
(declare-fun anon1213_Then@2 ( ) Bool)
(declare-fun anon1213_Then@2_assertion ( ) Bool)
(declare-fun anon1213_Then@3 ( ) Bool)
(declare-fun anon1213_Then@3_assertion ( ) Bool)
(declare-fun anon1213_Then@4 ( ) Bool)
(declare-fun anon1213_Then@4_assertion ( ) Bool)
(declare-fun anon1213_Then@5 ( ) Bool)
(declare-fun anon1213_Then_assertion ( ) Bool)
(declare-fun anon1214_Else ( ) Bool)
(declare-fun anon1214_Then ( ) Bool)
(declare-fun anon1215_Else ( ) Bool)
(declare-fun anon1215_Then ( ) Bool)
(declare-fun anon1216_Else ( ) Bool)
(declare-fun anon1216_Then ( ) Bool)
(declare-fun anon1217_Else ( ) Bool)
(declare-fun anon1217_Then ( ) Bool)
(declare-fun anon1218_Else ( ) Bool)
(declare-fun anon1218_Then ( ) Bool)
(declare-fun anon1219_Else ( ) Bool)
(declare-fun anon1219_Then ( ) Bool)
(declare-fun anon1220_Else ( ) Bool)
(declare-fun anon1220_Then ( ) Bool)
(declare-fun anon1221_Else ( ) Bool)
(declare-fun anon1221_Then ( ) Bool)
(declare-fun anon1222_Else ( ) Bool)
(declare-fun anon1222_Then ( ) Bool)
(declare-fun anon1223_Else ( ) Bool)
(declare-fun anon1223_Then ( ) Bool)
(declare-fun anon1224_Else ( ) Bool)
(declare-fun anon1224_Then ( ) Bool)
(declare-fun anon1225_Else ( ) Bool)
(declare-fun anon1225_Then ( ) Bool)
(declare-fun anon1226_Else ( ) Bool)
(declare-fun anon1226_Then ( ) Bool)
(declare-fun anon1227_Else ( ) Bool)
(declare-fun anon1227_Then ( ) Bool)
(declare-fun anon1228_Else ( ) Bool)
(declare-fun anon1228_Then ( ) Bool)
(declare-fun anon1229_Else ( ) Bool)
(declare-fun anon1229_Then ( ) Bool)
(declare-fun anon1230_Else ( ) Bool)
(declare-fun anon1230_Then ( ) Bool)
(declare-fun anon1231_Else ( ) Bool)
(declare-fun anon1231_Then ( ) Bool)
(declare-fun anon1231_Then@1 ( ) Bool)
(declare-fun anon1231_Then@1_assertion ( ) Bool)
(declare-fun anon1231_Then@2 ( ) Bool)
(declare-fun anon1231_Then_assertion ( ) Bool)
(declare-fun anon1232_Else ( ) Bool)
(declare-fun anon1232_Then ( ) Bool)
(declare-fun anon1232_Then@1 ( ) Bool)
(declare-fun anon1232_Then@1_assertion ( ) Bool)
(declare-fun anon1232_Then@2 ( ) Bool)
(declare-fun anon1232_Then_assertion ( ) Bool)
(declare-fun anon1233_Else ( ) Bool)
(declare-fun anon1233_Then ( ) Bool)
(declare-fun anon1233_Then@1 ( ) Bool)
(declare-fun anon1233_Then@1_assertion ( ) Bool)
(declare-fun anon1233_Then@2 ( ) Bool)
(declare-fun anon1233_Then_assertion ( ) Bool)
(declare-fun anon1234_Else ( ) Bool)
(declare-fun anon1234_Then ( ) Bool)
(declare-fun anon1235_Else ( ) Bool)
(declare-fun anon1235_Then ( ) Bool)
(declare-fun anon1235_Then@1 ( ) Bool)
(declare-fun anon1235_Then@1_assertion ( ) Bool)
(declare-fun anon1235_Then@2 ( ) Bool)
(declare-fun anon1235_Then_assertion ( ) Bool)
(declare-fun anon1236_Else ( ) Bool)
(declare-fun anon1236_Then ( ) Bool)
(declare-fun anon1237_Else ( ) Bool)
(declare-fun anon1237_Then ( ) Bool)
(declare-fun anon1238_Else ( ) Bool)
(declare-fun anon1238_Then ( ) Bool)
(declare-fun anon1239_Else ( ) Bool)
(declare-fun anon1239_Then ( ) Bool)
(declare-fun anon1240_Else ( ) Bool)
(declare-fun anon1240_Then ( ) Bool)
(declare-fun anon1241_Else ( ) Bool)
(declare-fun anon1241_Then ( ) Bool)
(declare-fun anon1242_Else ( ) Bool)
(declare-fun anon1242_Then ( ) Bool)
(declare-fun anon1243_Else ( ) Bool)
(declare-fun anon1243_Else@1 ( ) Bool)
(declare-fun anon1243_Else_assertion ( ) Bool)
(declare-fun anon1243_Then ( ) Bool)
(declare-fun anon1243_Then@1 ( ) Bool)
(declare-fun anon1243_Then@1_assertion ( ) Bool)
(declare-fun anon1243_Then@2 ( ) Bool)
(declare-fun anon1243_Then@2_assertion ( ) Bool)
(declare-fun anon1243_Then@3 ( ) Bool)
(declare-fun anon1243_Then_assertion ( ) Bool)
(declare-fun anon1244_Else ( ) Bool)
(declare-fun anon1244_Then ( ) Bool)
(declare-fun anon1244_Then@1 ( ) Bool)
(declare-fun anon1244_Then_assertion ( ) Bool)
(declare-fun anon1245_Else ( ) Bool)
(declare-fun anon1245_Then ( ) Bool)
(declare-fun anon1246_Else ( ) Bool)
(declare-fun anon1246_Then ( ) Bool)
(declare-fun anon1246_Then@1 ( ) Bool)
(declare-fun anon1246_Then@1_assertion ( ) Bool)
(declare-fun anon1246_Then@2 ( ) Bool)
(declare-fun anon1246_Then_assertion ( ) Bool)
(declare-fun anon1247_Else ( ) Bool)
(declare-fun anon1247_Then ( ) Bool)
(declare-fun anon1248_Else ( ) Bool)
(declare-fun anon1248_Then ( ) Bool)
(declare-fun anon1248_Then@1 ( ) Bool)
(declare-fun anon1248_Then@1_assertion ( ) Bool)
(declare-fun anon1248_Then@2 ( ) Bool)
(declare-fun anon1248_Then_assertion ( ) Bool)
(declare-fun anon1249_Else ( ) Bool)
(declare-fun anon1249_Then ( ) Bool)
(declare-fun anon1249_Then@1 ( ) Bool)
(declare-fun anon1249_Then@1_assertion ( ) Bool)
(declare-fun anon1249_Then@2 ( ) Bool)
(declare-fun anon1249_Then_assertion ( ) Bool)
(declare-fun anon1250_Else ( ) Bool)
(declare-fun anon1250_Then ( ) Bool)
(declare-fun anon1250_Then@1 ( ) Bool)
(declare-fun anon1250_Then@1_assertion ( ) Bool)
(declare-fun anon1250_Then@2 ( ) Bool)
(declare-fun anon1250_Then_assertion ( ) Bool)
(declare-fun anon1251_Else ( ) Bool)
(declare-fun anon1251_Then ( ) Bool)
(declare-fun anon1251_Then@1 ( ) Bool)
(declare-fun anon1251_Then_assertion ( ) Bool)
(declare-fun anon1252_Else ( ) Bool)
(declare-fun anon1252_Then ( ) Bool)
(declare-fun anon1252_Then@1 ( ) Bool)
(declare-fun anon1252_Then_assertion ( ) Bool)
(declare-fun anon1253_Else ( ) Bool)
(declare-fun anon1253_Then ( ) Bool)
(declare-fun anon1253_Then@1 ( ) Bool)
(declare-fun anon1253_Then@1_assertion ( ) Bool)
(declare-fun anon1253_Then@2 ( ) Bool)
(declare-fun anon1253_Then_assertion ( ) Bool)
(declare-fun anon1254_Else ( ) Bool)
(declare-fun anon1254_Then ( ) Bool)
(declare-fun anon1255_Else ( ) Bool)
(declare-fun anon1255_Then ( ) Bool)
(declare-fun anon1255_Then@1 ( ) Bool)
(declare-fun anon1255_Then@1_assertion ( ) Bool)
(declare-fun anon1255_Then@2 ( ) Bool)
(declare-fun anon1255_Then_assertion ( ) Bool)
(declare-fun anon1256_Else ( ) Bool)
(declare-fun anon1256_Then ( ) Bool)
(declare-fun anon1256_Then@1 ( ) Bool)
(declare-fun anon1256_Then@1_assertion ( ) Bool)
(declare-fun anon1256_Then@2 ( ) Bool)
(declare-fun anon1256_Then_assertion ( ) Bool)
(declare-fun anon1257_Else ( ) Bool)
(declare-fun anon1257_Then ( ) Bool)
(declare-fun anon1257_Then@1 ( ) Bool)
(declare-fun anon1257_Then@1_assertion ( ) Bool)
(declare-fun anon1257_Then@2 ( ) Bool)
(declare-fun anon1257_Then_assertion ( ) Bool)
(declare-fun anon1258_Else ( ) Bool)
(declare-fun anon1258_Then ( ) Bool)
(declare-fun anon1258_Then@1 ( ) Bool)
(declare-fun anon1258_Then@1_assertion ( ) Bool)
(declare-fun anon1258_Then@2 ( ) Bool)
(declare-fun anon1258_Then_assertion ( ) Bool)
(declare-fun anon1259_Else ( ) Bool)
(declare-fun anon1259_Then ( ) Bool)
(declare-fun anon1260_Else ( ) Bool)
(declare-fun anon1260_Then ( ) Bool)
(declare-fun anon1260_Then@1 ( ) Bool)
(declare-fun anon1260_Then@1_assertion ( ) Bool)
(declare-fun anon1260_Then@2 ( ) Bool)
(declare-fun anon1260_Then_assertion ( ) Bool)
(declare-fun anon1261_Else ( ) Bool)
(declare-fun anon1261_Then ( ) Bool)
(declare-fun anon1261_Then@1 ( ) Bool)
(declare-fun anon1261_Then@1_assertion ( ) Bool)
(declare-fun anon1261_Then@2 ( ) Bool)
(declare-fun anon1261_Then_assertion ( ) Bool)
(declare-fun anon1262_Else ( ) Bool)
(declare-fun anon1262_Then ( ) Bool)
(declare-fun anon1262_Then@1 ( ) Bool)
(declare-fun anon1262_Then@1_assertion ( ) Bool)
(declare-fun anon1262_Then@2 ( ) Bool)
(declare-fun anon1262_Then_assertion ( ) Bool)
(declare-fun anon1263_Else ( ) Bool)
(declare-fun anon1263_Then ( ) Bool)
(declare-fun anon1263_Then@1 ( ) Bool)
(declare-fun anon1263_Then_assertion ( ) Bool)
(declare-fun anon1264_Else ( ) Bool)
(declare-fun anon1264_Then ( ) Bool)
(declare-fun anon1264_Then@1 ( ) Bool)
(declare-fun anon1264_Then_assertion ( ) Bool)
(declare-fun anon1265_Else ( ) Bool)
(declare-fun anon1265_Then ( ) Bool)
(declare-fun anon1265_Then@1 ( ) Bool)
(declare-fun anon1265_Then@1_assertion ( ) Bool)
(declare-fun anon1265_Then@2 ( ) Bool)
(declare-fun anon1265_Then_assertion ( ) Bool)
(declare-fun anon1266_Else ( ) Bool)
(declare-fun anon1266_Then ( ) Bool)
(declare-fun anon1267_Else ( ) Bool)
(declare-fun anon1267_Then ( ) Bool)
(declare-fun anon1267_Then@1 ( ) Bool)
(declare-fun anon1267_Then@1_assertion ( ) Bool)
(declare-fun anon1267_Then@2 ( ) Bool)
(declare-fun anon1267_Then_assertion ( ) Bool)
(declare-fun anon1268_Else ( ) Bool)
(declare-fun anon1268_Then ( ) Bool)
(declare-fun anon1268_Then@1 ( ) Bool)
(declare-fun anon1268_Then@1_assertion ( ) Bool)
(declare-fun anon1268_Then@2 ( ) Bool)
(declare-fun anon1268_Then_assertion ( ) Bool)
(declare-fun anon1269_Else ( ) Bool)
(declare-fun anon1269_Then ( ) Bool)
(declare-fun anon1269_Then@1 ( ) Bool)
(declare-fun anon1269_Then@1_assertion ( ) Bool)
(declare-fun anon1269_Then@2 ( ) Bool)
(declare-fun anon1269_Then_assertion ( ) Bool)
(declare-fun anon1270_Else ( ) Bool)
(declare-fun anon1270_Then ( ) Bool)
(declare-fun anon1270_Then@1 ( ) Bool)
(declare-fun anon1270_Then@1_assertion ( ) Bool)
(declare-fun anon1270_Then@2 ( ) Bool)
(declare-fun anon1270_Then_assertion ( ) Bool)
(declare-fun anon1271_Else ( ) Bool)
(declare-fun anon1271_Then ( ) Bool)
(declare-fun anon1272_Else ( ) Bool)
(declare-fun anon1272_Then ( ) Bool)
(declare-fun anon1272_Then@1 ( ) Bool)
(declare-fun anon1272_Then@1_assertion ( ) Bool)
(declare-fun anon1272_Then@2 ( ) Bool)
(declare-fun anon1272_Then_assertion ( ) Bool)
(declare-fun anon1273_Else ( ) Bool)
(declare-fun anon1273_Then ( ) Bool)
(declare-fun anon1273_Then@1 ( ) Bool)
(declare-fun anon1273_Then@1_assertion ( ) Bool)
(declare-fun anon1273_Then@2 ( ) Bool)
(declare-fun anon1273_Then_assertion ( ) Bool)
(declare-fun anon1274_Else ( ) Bool)
(declare-fun anon1274_Then ( ) Bool)
(declare-fun anon1274_Then@1 ( ) Bool)
(declare-fun anon1274_Then@1_assertion ( ) Bool)
(declare-fun anon1274_Then@2 ( ) Bool)
(declare-fun anon1274_Then_assertion ( ) Bool)
(declare-fun anon1275_Else ( ) Bool)
(declare-fun anon1275_Then ( ) Bool)
(declare-fun anon1275_Then@1 ( ) Bool)
(declare-fun anon1275_Then_assertion ( ) Bool)
(declare-fun anon1276_Else ( ) Bool)
(declare-fun anon1276_Then ( ) Bool)
(declare-fun anon1276_Then@1 ( ) Bool)
(declare-fun anon1276_Then_assertion ( ) Bool)
(declare-fun anon1277_Else ( ) Bool)
(declare-fun anon1277_Then ( ) Bool)
(declare-fun anon1277_Then@1 ( ) Bool)
(declare-fun anon1277_Then_assertion ( ) Bool)
(declare-fun anon1278_Else ( ) Bool)
(declare-fun anon1278_Then ( ) Bool)
(declare-fun anon1278_Then@1 ( ) Bool)
(declare-fun anon1278_Then_assertion ( ) Bool)
(declare-fun anon1279_Else ( ) Bool)
(declare-fun anon1279_Then ( ) Bool)
(declare-fun anon1279_Then@1 ( ) Bool)
(declare-fun anon1279_Then_assertion ( ) Bool)
(declare-fun anon1280_Else ( ) Bool)
(declare-fun anon1280_Then ( ) Bool)
(declare-fun anon1280_Then@1 ( ) Bool)
(declare-fun anon1280_Then_assertion ( ) Bool)
(declare-fun anon1281_Else ( ) Bool)
(declare-fun anon1281_Then ( ) Bool)
(declare-fun anon1281_Then@1 ( ) Bool)
(declare-fun anon1281_Then_assertion ( ) Bool)
(declare-fun anon1282_Else ( ) Bool)
(declare-fun anon1282_Then ( ) Bool)
(declare-fun anon1283_Else ( ) Bool)
(declare-fun anon1283_Then ( ) Bool)
(declare-fun anon1283_Then@1 ( ) Bool)
(declare-fun anon1283_Then_assertion ( ) Bool)
(declare-fun anon1284_Else ( ) Bool)
(declare-fun anon1284_Then ( ) Bool)
(declare-fun anon1284_Then@1 ( ) Bool)
(declare-fun anon1284_Then_assertion ( ) Bool)
(declare-fun anon1285_Else ( ) Bool)
(declare-fun anon1285_Then ( ) Bool)
(declare-fun anon1285_Then@1 ( ) Bool)
(declare-fun anon1285_Then_assertion ( ) Bool)
(declare-fun anon1286_Else ( ) Bool)
(declare-fun anon1286_Then ( ) Bool)
(declare-fun anon1286_Then@1 ( ) Bool)
(declare-fun anon1286_Then_assertion ( ) Bool)
(declare-fun anon1287_Else ( ) Bool)
(declare-fun anon1287_Then ( ) Bool)
(declare-fun anon1287_Then@1 ( ) Bool)
(declare-fun anon1287_Then@1_assertion ( ) Bool)
(declare-fun anon1287_Then@2 ( ) Bool)
(declare-fun anon1287_Then_assertion ( ) Bool)
(declare-fun anon1288_Else ( ) Bool)
(declare-fun anon1288_Then ( ) Bool)
(declare-fun anon1289_Else ( ) Bool)
(declare-fun anon1289_Then ( ) Bool)
(declare-fun anon1289_Then@1 ( ) Bool)
(declare-fun anon1289_Then@1_assertion ( ) Bool)
(declare-fun anon1289_Then@2 ( ) Bool)
(declare-fun anon1289_Then_assertion ( ) Bool)
(declare-fun anon1290_Else ( ) Bool)
(declare-fun anon1290_Then ( ) Bool)
(declare-fun anon1290_Then@1 ( ) Bool)
(declare-fun anon1290_Then@1_assertion ( ) Bool)
(declare-fun anon1290_Then@2 ( ) Bool)
(declare-fun anon1290_Then_assertion ( ) Bool)
(declare-fun anon1291_Else ( ) Bool)
(declare-fun anon1291_Then ( ) Bool)
(declare-fun anon1291_Then@1 ( ) Bool)
(declare-fun anon1291_Then@1_assertion ( ) Bool)
(declare-fun anon1291_Then@2 ( ) Bool)
(declare-fun anon1291_Then_assertion ( ) Bool)
(declare-fun anon1292_Else ( ) Bool)
(declare-fun anon1292_Then ( ) Bool)
(declare-fun anon139 ( ) Bool)
(declare-fun anon163 ( ) Bool)
(declare-fun anon241 ( ) Bool)
(declare-fun anon241@1 ( ) Bool)
(declare-fun anon241@1_assertion ( ) Bool)
(declare-fun anon241@2 ( ) Bool)
(declare-fun anon241@2_assertion ( ) Bool)
(declare-fun anon241@3 ( ) Bool)
(declare-fun anon241@3_assertion ( ) Bool)
(declare-fun anon241@4 ( ) Bool)
(declare-fun anon241@4_assertion ( ) Bool)
(declare-fun anon241@5 ( ) Bool)
(declare-fun anon241_assertion ( ) Bool)
(declare-fun anon242 ( ) Bool)
(declare-fun anon242@1 ( ) Bool)
(declare-fun anon242@1_assertion ( ) Bool)
(declare-fun anon242@2 ( ) Bool)
(declare-fun anon242_assertion ( ) Bool)
(declare-fun anon299 ( ) Bool)
(declare-fun anon323 ( ) Bool)
(declare-fun anon401 ( ) Bool)
(declare-fun anon401@1 ( ) Bool)
(declare-fun anon401@1_assertion ( ) Bool)
(declare-fun anon401@2 ( ) Bool)
(declare-fun anon401@2_assertion ( ) Bool)
(declare-fun anon401@3 ( ) Bool)
(declare-fun anon401@3_assertion ( ) Bool)
(declare-fun anon401@4 ( ) Bool)
(declare-fun anon401@4_assertion ( ) Bool)
(declare-fun anon401@5 ( ) Bool)
(declare-fun anon401_assertion ( ) Bool)
(declare-fun anon402 ( ) Bool)
(declare-fun anon402@1 ( ) Bool)
(declare-fun anon402@1_assertion ( ) Bool)
(declare-fun anon402@2 ( ) Bool)
(declare-fun anon402_assertion ( ) Bool)
(declare-fun anon407 ( ) Bool)
(declare-fun anon407@1 ( ) Bool)
(declare-fun anon407@1_assertion ( ) Bool)
(declare-fun anon407@2 ( ) Bool)
(declare-fun anon407_assertion ( ) Bool)
(declare-fun anon412 ( ) Bool)
(declare-fun anon416 ( ) Bool)
(declare-fun anon417 ( ) Bool)
(declare-fun anon421 ( ) Bool)
(declare-fun anon425 ( ) Bool)
(declare-fun anon429 ( ) Bool)
(declare-fun anon432 ( ) Bool)
(declare-fun anon432@1 ( ) Bool)
(declare-fun anon432@1_assertion ( ) Bool)
(declare-fun anon432@2 ( ) Bool)
(declare-fun anon432@2_assertion ( ) Bool)
(declare-fun anon432@3 ( ) Bool)
(declare-fun anon432@3_assertion ( ) Bool)
(declare-fun anon432@4 ( ) Bool)
(declare-fun anon432@4_assertion ( ) Bool)
(declare-fun anon432@5 ( ) Bool)
(declare-fun anon432@5_assertion ( ) Bool)
(declare-fun anon432@6 ( ) Bool)
(declare-fun anon432_assertion ( ) Bool)
(declare-fun anon448 ( ) Bool)
(declare-fun anon450 ( ) Bool)
(declare-fun anon453 ( ) Bool)
(declare-fun anon453@1 ( ) Bool)
(declare-fun anon453@1_assertion ( ) Bool)
(declare-fun anon453@2 ( ) Bool)
(declare-fun anon453@2_assertion ( ) Bool)
(declare-fun anon453@3 ( ) Bool)
(declare-fun anon453@3_assertion ( ) Bool)
(declare-fun anon453@4 ( ) Bool)
(declare-fun anon453@4_assertion ( ) Bool)
(declare-fun anon453@5 ( ) Bool)
(declare-fun anon453@5_assertion ( ) Bool)
(declare-fun anon453@6 ( ) Bool)
(declare-fun anon453_assertion ( ) Bool)
(declare-fun anon469 ( ) Bool)
(declare-fun anon471 ( ) Bool)
(declare-fun anon472 ( ) Bool)
(declare-fun anon472@1 ( ) Bool)
(declare-fun anon472@1_assertion ( ) Bool)
(declare-fun anon472@2 ( ) Bool)
(declare-fun anon472@2_assertion ( ) Bool)
(declare-fun anon472@3 ( ) Bool)
(declare-fun anon472_assertion ( ) Bool)
(declare-fun anon528 ( ) Bool)
(declare-fun anon552 ( ) Bool)
(declare-fun anon552@1 ( ) Bool)
(declare-fun anon552@1_assertion ( ) Bool)
(declare-fun anon552@2 ( ) Bool)
(declare-fun anon552@2_assertion ( ) Bool)
(declare-fun anon552@3 ( ) Bool)
(declare-fun anon552_assertion ( ) Bool)
(declare-fun anon556 ( ) Bool)
(declare-fun anon556@1 ( ) Bool)
(declare-fun anon556@1_assertion ( ) Bool)
(declare-fun anon556@10 ( ) Bool)
(declare-fun anon556@10_assertion ( ) Bool)
(declare-fun anon556@11 ( ) Bool)
(declare-fun anon556@11_assertion ( ) Bool)
(declare-fun anon556@12 ( ) Bool)
(declare-fun anon556@12_assertion ( ) Bool)
(declare-fun anon556@13 ( ) Bool)
(declare-fun anon556@13_assertion ( ) Bool)
(declare-fun anon556@14 ( ) Bool)
(declare-fun anon556@2 ( ) Bool)
(declare-fun anon556@2_assertion ( ) Bool)
(declare-fun anon556@3 ( ) Bool)
(declare-fun anon556@3_assertion ( ) Bool)
(declare-fun anon556@4 ( ) Bool)
(declare-fun anon556@4_assertion ( ) Bool)
(declare-fun anon556@5 ( ) Bool)
(declare-fun anon556@5_assertion ( ) Bool)
(declare-fun anon556@6 ( ) Bool)
(declare-fun anon556@6_assertion ( ) Bool)
(declare-fun anon556@7 ( ) Bool)
(declare-fun anon556@7_assertion ( ) Bool)
(declare-fun anon556@8 ( ) Bool)
(declare-fun anon556@8_assertion ( ) Bool)
(declare-fun anon556@9 ( ) Bool)
(declare-fun anon556@9_assertion ( ) Bool)
(declare-fun anon556_assertion ( ) Bool)
(declare-fun anon559 ( ) Bool)
(declare-fun anon56 ( ) Bool)
(declare-fun anon569 ( ) Bool)
(declare-fun anon576 ( ) Bool)
(declare-fun anon581 ( ) Bool)
(declare-fun anon581@1 ( ) Bool)
(declare-fun anon581@1_assertion ( ) Bool)
(declare-fun anon581@2 ( ) Bool)
(declare-fun anon581@2_assertion ( ) Bool)
(declare-fun anon581@3 ( ) Bool)
(declare-fun anon581@3_assertion ( ) Bool)
(declare-fun anon581@4 ( ) Bool)
(declare-fun anon581@4_assertion ( ) Bool)
(declare-fun anon581@5 ( ) Bool)
(declare-fun anon581@5_assertion ( ) Bool)
(declare-fun anon581@6 ( ) Bool)
(declare-fun anon581_assertion ( ) Bool)
(declare-fun anon612 ( ) Bool)
(declare-fun anon612@1 ( ) Bool)
(declare-fun anon612@1_assertion ( ) Bool)
(declare-fun anon612@2 ( ) Bool)
(declare-fun anon612@2_assertion ( ) Bool)
(declare-fun anon612@3 ( ) Bool)
(declare-fun anon612@3_assertion ( ) Bool)
(declare-fun anon612@4 ( ) Bool)
(declare-fun anon612_assertion ( ) Bool)
(declare-fun anon614 ( ) Bool)
(declare-fun anon614@1 ( ) Bool)
(declare-fun anon614@1_assertion ( ) Bool)
(declare-fun anon614@2 ( ) Bool)
(declare-fun anon614_assertion ( ) Bool)
(declare-fun anon619 ( ) Bool)
(declare-fun anon623 ( ) Bool)
(declare-fun anon624 ( ) Bool)
(declare-fun anon628 ( ) Bool)
(declare-fun anon632 ( ) Bool)
(declare-fun anon636 ( ) Bool)
(declare-fun anon639 ( ) Bool)
(declare-fun anon639@1 ( ) Bool)
(declare-fun anon639@1_assertion ( ) Bool)
(declare-fun anon639@10 ( ) Bool)
(declare-fun anon639@10_assertion ( ) Bool)
(declare-fun anon639@11 ( ) Bool)
(declare-fun anon639@11_assertion ( ) Bool)
(declare-fun anon639@12 ( ) Bool)
(declare-fun anon639@12_assertion ( ) Bool)
(declare-fun anon639@13 ( ) Bool)
(declare-fun anon639@13_assertion ( ) Bool)
(declare-fun anon639@14 ( ) Bool)
(declare-fun anon639@14_assertion ( ) Bool)
(declare-fun anon639@15 ( ) Bool)
(declare-fun anon639@2 ( ) Bool)
(declare-fun anon639@2_assertion ( ) Bool)
(declare-fun anon639@3 ( ) Bool)
(declare-fun anon639@3_assertion ( ) Bool)
(declare-fun anon639@4 ( ) Bool)
(declare-fun anon639@4_assertion ( ) Bool)
(declare-fun anon639@5 ( ) Bool)
(declare-fun anon639@5_assertion ( ) Bool)
(declare-fun anon639@6 ( ) Bool)
(declare-fun anon639@6_assertion ( ) Bool)
(declare-fun anon639@7 ( ) Bool)
(declare-fun anon639@7_assertion ( ) Bool)
(declare-fun anon639@8 ( ) Bool)
(declare-fun anon639@8_assertion ( ) Bool)
(declare-fun anon639@9 ( ) Bool)
(declare-fun anon639@9_assertion ( ) Bool)
(declare-fun anon639_assertion ( ) Bool)
(declare-fun anon642 ( ) Bool)
(declare-fun anon649 ( ) Bool)
(declare-fun anon649@1 ( ) Bool)
(declare-fun anon649@1_assertion ( ) Bool)
(declare-fun anon649@2 ( ) Bool)
(declare-fun anon649_assertion ( ) Bool)
(declare-fun anon651 ( ) Bool)
(declare-fun anon651@1 ( ) Bool)
(declare-fun anon651@1_assertion ( ) Bool)
(declare-fun anon651@2 ( ) Bool)
(declare-fun anon651@2_assertion ( ) Bool)
(declare-fun anon651@3 ( ) Bool)
(declare-fun anon651@3_assertion ( ) Bool)
(declare-fun anon651@4 ( ) Bool)
(declare-fun anon651@4_assertion ( ) Bool)
(declare-fun anon651@5 ( ) Bool)
(declare-fun anon651@5_assertion ( ) Bool)
(declare-fun anon651@6 ( ) Bool)
(declare-fun anon651_assertion ( ) Bool)
(declare-fun anon656 ( ) Bool)
(declare-fun anon656@1 ( ) Bool)
(declare-fun anon656@1_assertion ( ) Bool)
(declare-fun anon656@10 ( ) Bool)
(declare-fun anon656@10_assertion ( ) Bool)
(declare-fun anon656@11 ( ) Bool)
(declare-fun anon656@11_assertion ( ) Bool)
(declare-fun anon656@12 ( ) Bool)
(declare-fun anon656@12_assertion ( ) Bool)
(declare-fun anon656@13 ( ) Bool)
(declare-fun anon656@13_assertion ( ) Bool)
(declare-fun anon656@14 ( ) Bool)
(declare-fun anon656@2 ( ) Bool)
(declare-fun anon656@2_assertion ( ) Bool)
(declare-fun anon656@3 ( ) Bool)
(declare-fun anon656@3_assertion ( ) Bool)
(declare-fun anon656@4 ( ) Bool)
(declare-fun anon656@4_assertion ( ) Bool)
(declare-fun anon656@5 ( ) Bool)
(declare-fun anon656@5_assertion ( ) Bool)
(declare-fun anon656@6 ( ) Bool)
(declare-fun anon656@6_assertion ( ) Bool)
(declare-fun anon656@7 ( ) Bool)
(declare-fun anon656@7_assertion ( ) Bool)
(declare-fun anon656@8 ( ) Bool)
(declare-fun anon656@8_assertion ( ) Bool)
(declare-fun anon656@9 ( ) Bool)
(declare-fun anon656@9_assertion ( ) Bool)
(declare-fun anon656_assertion ( ) Bool)
(declare-fun anon659 ( ) Bool)
(declare-fun anon669 ( ) Bool)
(declare-fun anon676 ( ) Bool)
(declare-fun anon681 ( ) Bool)
(declare-fun anon681@1 ( ) Bool)
(declare-fun anon681@1_assertion ( ) Bool)
(declare-fun anon681@10 ( ) Bool)
(declare-fun anon681@10_assertion ( ) Bool)
(declare-fun anon681@11 ( ) Bool)
(declare-fun anon681@11_assertion ( ) Bool)
(declare-fun anon681@12 ( ) Bool)
(declare-fun anon681@12_assertion ( ) Bool)
(declare-fun anon681@13 ( ) Bool)
(declare-fun anon681@13_assertion ( ) Bool)
(declare-fun anon681@14 ( ) Bool)
(declare-fun anon681@2 ( ) Bool)
(declare-fun anon681@2_assertion ( ) Bool)
(declare-fun anon681@3 ( ) Bool)
(declare-fun anon681@3_assertion ( ) Bool)
(declare-fun anon681@4 ( ) Bool)
(declare-fun anon681@4_assertion ( ) Bool)
(declare-fun anon681@5 ( ) Bool)
(declare-fun anon681@5_assertion ( ) Bool)
(declare-fun anon681@6 ( ) Bool)
(declare-fun anon681@6_assertion ( ) Bool)
(declare-fun anon681@7 ( ) Bool)
(declare-fun anon681@7_assertion ( ) Bool)
(declare-fun anon681@8 ( ) Bool)
(declare-fun anon681@8_assertion ( ) Bool)
(declare-fun anon681@9 ( ) Bool)
(declare-fun anon681@9_assertion ( ) Bool)
(declare-fun anon681_assertion ( ) Bool)
(declare-fun anon684 ( ) Bool)
(declare-fun anon694 ( ) Bool)
(declare-fun anon701 ( ) Bool)
(declare-fun anon705 ( ) Bool)
(declare-fun anon705@1 ( ) Bool)
(declare-fun anon705@1_assertion ( ) Bool)
(declare-fun anon705@2 ( ) Bool)
(declare-fun anon705@2_assertion ( ) Bool)
(declare-fun anon705@3 ( ) Bool)
(declare-fun anon705@3_assertion ( ) Bool)
(declare-fun anon705@4 ( ) Bool)
(declare-fun anon705@4_assertion ( ) Bool)
(declare-fun anon705@5 ( ) Bool)
(declare-fun anon705@5_assertion ( ) Bool)
(declare-fun anon705@6 ( ) Bool)
(declare-fun anon705_assertion ( ) Bool)
(declare-fun anon736 ( ) Bool)
(declare-fun anon736@1 ( ) Bool)
(declare-fun anon736@1_assertion ( ) Bool)
(declare-fun anon736@2 ( ) Bool)
(declare-fun anon736@2_assertion ( ) Bool)
(declare-fun anon736@3 ( ) Bool)
(declare-fun anon736@3_assertion ( ) Bool)
(declare-fun anon736@4 ( ) Bool)
(declare-fun anon736_assertion ( ) Bool)
(declare-fun anon738 ( ) Bool)
(declare-fun anon738@1 ( ) Bool)
(declare-fun anon738@1_assertion ( ) Bool)
(declare-fun anon738@2 ( ) Bool)
(declare-fun anon738_assertion ( ) Bool)
(declare-fun anon743 ( ) Bool)
(declare-fun anon747 ( ) Bool)
(declare-fun anon748 ( ) Bool)
(declare-fun anon752 ( ) Bool)
(declare-fun anon756 ( ) Bool)
(declare-fun anon760 ( ) Bool)
(declare-fun anon763 ( ) Bool)
(declare-fun anon763@1 ( ) Bool)
(declare-fun anon763@1_assertion ( ) Bool)
(declare-fun anon763@10 ( ) Bool)
(declare-fun anon763@10_assertion ( ) Bool)
(declare-fun anon763@11 ( ) Bool)
(declare-fun anon763@11_assertion ( ) Bool)
(declare-fun anon763@12 ( ) Bool)
(declare-fun anon763@12_assertion ( ) Bool)
(declare-fun anon763@13 ( ) Bool)
(declare-fun anon763@13_assertion ( ) Bool)
(declare-fun anon763@14 ( ) Bool)
(declare-fun anon763@14_assertion ( ) Bool)
(declare-fun anon763@15 ( ) Bool)
(declare-fun anon763@2 ( ) Bool)
(declare-fun anon763@2_assertion ( ) Bool)
(declare-fun anon763@3 ( ) Bool)
(declare-fun anon763@3_assertion ( ) Bool)
(declare-fun anon763@4 ( ) Bool)
(declare-fun anon763@4_assertion ( ) Bool)
(declare-fun anon763@5 ( ) Bool)
(declare-fun anon763@5_assertion ( ) Bool)
(declare-fun anon763@6 ( ) Bool)
(declare-fun anon763@6_assertion ( ) Bool)
(declare-fun anon763@7 ( ) Bool)
(declare-fun anon763@7_assertion ( ) Bool)
(declare-fun anon763@8 ( ) Bool)
(declare-fun anon763@8_assertion ( ) Bool)
(declare-fun anon763@9 ( ) Bool)
(declare-fun anon763@9_assertion ( ) Bool)
(declare-fun anon763_assertion ( ) Bool)
(declare-fun anon765 ( ) Bool)
(declare-fun anon765@1 ( ) Bool)
(declare-fun anon765@1_assertion ( ) Bool)
(declare-fun anon765@2 ( ) Bool)
(declare-fun anon765@2_assertion ( ) Bool)
(declare-fun anon765@3 ( ) Bool)
(declare-fun anon765@3_assertion ( ) Bool)
(declare-fun anon765@4 ( ) Bool)
(declare-fun anon765@4_assertion ( ) Bool)
(declare-fun anon765@5 ( ) Bool)
(declare-fun anon765@5_assertion ( ) Bool)
(declare-fun anon765@6 ( ) Bool)
(declare-fun anon765_assertion ( ) Bool)
(declare-fun anon768 ( ) Bool)
(declare-fun anon775 ( ) Bool)
(declare-fun anon780 ( ) Bool)
(declare-fun anon780@1 ( ) Bool)
(declare-fun anon780@1_assertion ( ) Bool)
(declare-fun anon780@10 ( ) Bool)
(declare-fun anon780@10_assertion ( ) Bool)
(declare-fun anon780@11 ( ) Bool)
(declare-fun anon780@11_assertion ( ) Bool)
(declare-fun anon780@12 ( ) Bool)
(declare-fun anon780@12_assertion ( ) Bool)
(declare-fun anon780@13 ( ) Bool)
(declare-fun anon780@13_assertion ( ) Bool)
(declare-fun anon780@14 ( ) Bool)
(declare-fun anon780@2 ( ) Bool)
(declare-fun anon780@2_assertion ( ) Bool)
(declare-fun anon780@3 ( ) Bool)
(declare-fun anon780@3_assertion ( ) Bool)
(declare-fun anon780@4 ( ) Bool)
(declare-fun anon780@4_assertion ( ) Bool)
(declare-fun anon780@5 ( ) Bool)
(declare-fun anon780@5_assertion ( ) Bool)
(declare-fun anon780@6 ( ) Bool)
(declare-fun anon780@6_assertion ( ) Bool)
(declare-fun anon780@7 ( ) Bool)
(declare-fun anon780@7_assertion ( ) Bool)
(declare-fun anon780@8 ( ) Bool)
(declare-fun anon780@8_assertion ( ) Bool)
(declare-fun anon780@9 ( ) Bool)
(declare-fun anon780@9_assertion ( ) Bool)
(declare-fun anon780_assertion ( ) Bool)
(declare-fun anon783 ( ) Bool)
(declare-fun anon793 ( ) Bool)
(declare-fun anon80 ( ) Bool)
(declare-fun anon80@1 ( ) Bool)
(declare-fun anon80@1_assertion ( ) Bool)
(declare-fun anon80@2 ( ) Bool)
(declare-fun anon80_assertion ( ) Bool)
(declare-fun anon800 ( ) Bool)
(declare-fun anon805 ( ) Bool)
(declare-fun anon805@1 ( ) Bool)
(declare-fun anon805@1_assertion ( ) Bool)
(declare-fun anon805@10 ( ) Bool)
(declare-fun anon805@10_assertion ( ) Bool)
(declare-fun anon805@11 ( ) Bool)
(declare-fun anon805@11_assertion ( ) Bool)
(declare-fun anon805@12 ( ) Bool)
(declare-fun anon805@12_assertion ( ) Bool)
(declare-fun anon805@13 ( ) Bool)
(declare-fun anon805@13_assertion ( ) Bool)
(declare-fun anon805@14 ( ) Bool)
(declare-fun anon805@2 ( ) Bool)
(declare-fun anon805@2_assertion ( ) Bool)
(declare-fun anon805@3 ( ) Bool)
(declare-fun anon805@3_assertion ( ) Bool)
(declare-fun anon805@4 ( ) Bool)
(declare-fun anon805@4_assertion ( ) Bool)
(declare-fun anon805@5 ( ) Bool)
(declare-fun anon805@5_assertion ( ) Bool)
(declare-fun anon805@6 ( ) Bool)
(declare-fun anon805@6_assertion ( ) Bool)
(declare-fun anon805@7 ( ) Bool)
(declare-fun anon805@7_assertion ( ) Bool)
(declare-fun anon805@8 ( ) Bool)
(declare-fun anon805@8_assertion ( ) Bool)
(declare-fun anon805@9 ( ) Bool)
(declare-fun anon805@9_assertion ( ) Bool)
(declare-fun anon805_assertion ( ) Bool)
(declare-fun anon808 ( ) Bool)
(declare-fun anon818 ( ) Bool)
(declare-fun anon825 ( ) Bool)
(declare-fun anon852 ( ) Bool)
(declare-fun anon861 ( ) Bool)
(declare-fun anon861@1 ( ) Bool)
(declare-fun anon861@1_assertion ( ) Bool)
(declare-fun anon861_assertion ( ) Bool)
(declare-fun anon862_Else ( ) Bool)
(declare-fun anon889_Else ( ) Bool)
(declare-fun anon889_Then ( ) Bool)
(declare-fun anon890_Else ( ) Bool)
(declare-fun anon890_Then ( ) Bool)
(declare-fun anon891_Else ( ) Bool)
(declare-fun anon891_Then ( ) Bool)
(declare-fun anon892_Else ( ) Bool)
(declare-fun anon892_Then ( ) Bool)
(declare-fun anon893_Else ( ) Bool)
(declare-fun anon893_Then ( ) Bool)
(declare-fun anon894_Else ( ) Bool)
(declare-fun anon894_Then ( ) Bool)
(declare-fun anon895_Else ( ) Bool)
(declare-fun anon895_Then ( ) Bool)
(declare-fun anon896_Else ( ) Bool)
(declare-fun anon896_Then ( ) Bool)
(declare-fun anon897_Else ( ) Bool)
(declare-fun anon897_Then ( ) Bool)
(declare-fun anon898_Else ( ) Bool)
(declare-fun anon898_Then ( ) Bool)
(declare-fun anon899_Else ( ) Bool)
(declare-fun anon899_Then ( ) Bool)
(declare-fun anon900_Else ( ) Bool)
(declare-fun anon900_Then ( ) Bool)
(declare-fun anon901_Else ( ) Bool)
(declare-fun anon901_Then ( ) Bool)
(declare-fun anon902_Else ( ) Bool)
(declare-fun anon902_Else@1 ( ) Bool)
(declare-fun anon902_Else@1_assertion ( ) Bool)
(declare-fun anon902_Else@2 ( ) Bool)
(declare-fun anon902_Else_assertion ( ) Bool)
(declare-fun anon902_Then ( ) Bool)
(declare-fun anon902_Then@1 ( ) Bool)
(declare-fun anon902_Then@1_assertion ( ) Bool)
(declare-fun anon902_Then@2 ( ) Bool)
(declare-fun anon902_Then@2_assertion ( ) Bool)
(declare-fun anon902_Then@3 ( ) Bool)
(declare-fun anon902_Then@3_assertion ( ) Bool)
(declare-fun anon902_Then@4 ( ) Bool)
(declare-fun anon902_Then_assertion ( ) Bool)
(declare-fun anon903_Else ( ) Bool)
(declare-fun anon903_Else@1 ( ) Bool)
(declare-fun anon903_Else@1_assertion ( ) Bool)
(declare-fun anon903_Else@2 ( ) Bool)
(declare-fun anon903_Else@2_assertion ( ) Bool)
(declare-fun anon903_Else@3 ( ) Bool)
(declare-fun anon903_Else@3_assertion ( ) Bool)
(declare-fun anon903_Else@4 ( ) Bool)
(declare-fun anon903_Else@4_assertion ( ) Bool)
(declare-fun anon903_Else@5 ( ) Bool)
(declare-fun anon903_Else@5_assertion ( ) Bool)
(declare-fun anon903_Else@6 ( ) Bool)
(declare-fun anon903_Else@6_assertion ( ) Bool)
(declare-fun anon903_Else@7 ( ) Bool)
(declare-fun anon903_Else_assertion ( ) Bool)
(declare-fun anon903_Then ( ) Bool)
(declare-fun anon903_Then@1 ( ) Bool)
(declare-fun anon903_Then@1_assertion ( ) Bool)
(declare-fun anon903_Then@2 ( ) Bool)
(declare-fun anon903_Then_assertion ( ) Bool)
(declare-fun anon904_Else ( ) Bool)
(declare-fun anon904_Then ( ) Bool)
(declare-fun anon904_Then@1 ( ) Bool)
(declare-fun anon904_Then@1_assertion ( ) Bool)
(declare-fun anon904_Then@2 ( ) Bool)
(declare-fun anon904_Then@2_assertion ( ) Bool)
(declare-fun anon904_Then@3 ( ) Bool)
(declare-fun anon904_Then@3_assertion ( ) Bool)
(declare-fun anon904_Then@4 ( ) Bool)
(declare-fun anon904_Then@4_assertion ( ) Bool)
(declare-fun anon904_Then@5 ( ) Bool)
(declare-fun anon904_Then_assertion ( ) Bool)
(declare-fun anon905_Else ( ) Bool)
(declare-fun anon932_Else ( ) Bool)
(declare-fun anon932_Then ( ) Bool)
(declare-fun anon933_Else ( ) Bool)
(declare-fun anon933_Then ( ) Bool)
(declare-fun anon934_Else ( ) Bool)
(declare-fun anon934_Then ( ) Bool)
(declare-fun anon935_Else ( ) Bool)
(declare-fun anon935_Then ( ) Bool)
(declare-fun anon936_Else ( ) Bool)
(declare-fun anon936_Then ( ) Bool)
(declare-fun anon937_Else ( ) Bool)
(declare-fun anon937_Then ( ) Bool)
(declare-fun anon938_Else ( ) Bool)
(declare-fun anon938_Then ( ) Bool)
(declare-fun anon939_Else ( ) Bool)
(declare-fun anon939_Then ( ) Bool)
(declare-fun anon940_Else ( ) Bool)
(declare-fun anon940_Then ( ) Bool)
(declare-fun anon941_Else ( ) Bool)
(declare-fun anon941_Then ( ) Bool)
(declare-fun anon942_Else ( ) Bool)
(declare-fun anon942_Then ( ) Bool)
(declare-fun anon943_Else ( ) Bool)
(declare-fun anon943_Then ( ) Bool)
(declare-fun anon944_Else ( ) Bool)
(declare-fun anon944_Then ( ) Bool)
(declare-fun anon945_Else ( ) Bool)
(declare-fun anon972_Else ( ) Bool)
(declare-fun anon972_Then ( ) Bool)
(declare-fun anon973_Else ( ) Bool)
(declare-fun anon973_Then ( ) Bool)
(declare-fun anon974_Else ( ) Bool)
(declare-fun anon974_Then ( ) Bool)
(declare-fun anon975_Else ( ) Bool)
(declare-fun anon975_Then ( ) Bool)
(declare-fun anon976_Else ( ) Bool)
(declare-fun anon976_Then ( ) Bool)
(declare-fun anon977_Else ( ) Bool)
(declare-fun anon977_Then ( ) Bool)
(declare-fun anon978_Else ( ) Bool)
(declare-fun anon978_Then ( ) Bool)
(declare-fun anon979_Else ( ) Bool)
(declare-fun anon979_Then ( ) Bool)
(declare-fun anon980_Else ( ) Bool)
(declare-fun anon980_Then ( ) Bool)
(declare-fun anon981_Else ( ) Bool)
(declare-fun anon981_Then ( ) Bool)
(declare-fun anon982_Else ( ) Bool)
(declare-fun anon982_Then ( ) Bool)
(declare-fun anon983_Else ( ) Bool)
(declare-fun anon983_Then ( ) Bool)
(declare-fun anon984_Else ( ) Bool)
(declare-fun anon984_Then ( ) Bool)
(declare-fun anon984_Then@1 ( ) Bool)
(declare-fun anon984_Then@1_assertion ( ) Bool)
(declare-fun anon984_Then@2 ( ) Bool)
(declare-fun anon984_Then@2_assertion ( ) Bool)
(declare-fun anon984_Then@3 ( ) Bool)
(declare-fun anon984_Then@3_assertion ( ) Bool)
(declare-fun anon984_Then@4 ( ) Bool)
(declare-fun anon984_Then@4_assertion ( ) Bool)
(declare-fun anon984_Then@5 ( ) Bool)
(declare-fun anon984_Then_assertion ( ) Bool)
(declare-fun anon985_Else ( ) Bool)
(declare-fun CanAssumeFunctionDefs ( ) Bool)
(declare-fun CanRead$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ ) Bool)
(declare-fun CanRead$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ ) Bool)
(declare-fun CanRead$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ ) Bool)
(declare-fun CanRead$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ ) Bool)
(declare-fun CanRead$Seq$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Seq$Int$$ ) Bool)
(declare-fun CanWrite$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ ) Bool)
(declare-fun CanWrite$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ ) Bool)
(declare-fun CanWrite$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ ) Bool)
(declare-fun CanWrite$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ ) Bool)
(declare-fun CanWrite$Seq$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Seq$Int$$ ) Bool)
(declare-fun cond@_529@0 ( ) Bool)
(declare-fun cond@_530@0 ( ) Bool)
(declare-fun cond@_629@0 ( ) Bool)
(declare-fun cond@_645@0 ( ) Bool)
(declare-fun cond@_717@0 ( ) Bool)
(declare-fun cond@_718@0 ( ) Bool)
(declare-fun cond@_747@0 ( ) Bool)
(declare-fun cond@_817@0 ( ) Bool)
(declare-fun cond@_846@0 ( ) Bool)
(declare-fun IsGoodExhaleState ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)
(declare-fun IsGoodMask ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)
(declare-fun IsGoodState ( PartialHeapType ) Bool)
(declare-fun ite$Bool$ ( Bool Bool Bool ) Bool)
(declare-fun MuBelow ( Mu Mu ) Bool)
(declare-fun NonPredicateField$Bool$ ( Field$Bool$ ) Bool)
(declare-fun NonPredicateField$Int$ ( Field$Int$ ) Bool)
(declare-fun NonPredicateField$Mu$ ( Field$Mu$ ) Bool)
(declare-fun NonPredicateField$ref$ ( Field$ref$ ) Bool)
(declare-fun NonPredicateField$Seq$Int$$ ( Field$Seq$Int$$ ) Bool)
(declare-fun PreconditionGeneratedEntry ( ) Bool)
(declare-fun PredicateField$Bool$ ( Field$Bool$ ) Bool)
(declare-fun PredicateField$Int$ ( Field$Int$ ) Bool)
(declare-fun PredicateField$Mu$ ( Field$Mu$ ) Bool)
(declare-fun PredicateField$ref$ ( Field$ref$ ) Bool)
(declare-fun PredicateField$Seq$Int$$ ( Field$Seq$Int$$ ) Bool)
(declare-fun Seq@Contains$Int$ ( Seq$Int$ Int ) Bool)
(declare-fun Seq@Contains$ref$ ( Seq$ref$ ref ) Bool)
(declare-fun Seq@Equal$Int$ ( Seq$Int$ Seq$Int$ ) Bool)
(declare-fun Seq@Equal$ref$ ( Seq$ref$ Seq$ref$ ) Bool)
(declare-fun wf ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)

;Axioms
   (assert (! (forall ((|i_1| Field$Int$)(|i| ref)(|m_1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|v| $@Map@@PermissionComponent@To@Int@@))(!(= v (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_1 i i_1 v) i i_1)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_1 i i_1 v) i i_1)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_0))
   (assert (! (forall ((|i_12| PermissionComponent)(|m_7| $@Map@@PermissionComponent@To@Int@@)(|v_6| Int))(!(= v_6 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_7 i_12 v_6) i_12)):pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_7 i_12 v_6) i_12)) :qid map_1_$@Map@@PermissionComponent@To@Int@@ :weight 0 )) :named ax_1))
   (assert (! (forall ((|i_15| Field$Seq$Int$$)(|i_14| ref)(|m_9| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|v_8| $@Map@@PermissionComponent@To@Int@@))(!(= v_8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_9 i_14 i_15 v_8) i_14 i_15)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_9 i_14 i_15 v_8) i_14 i_15)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_2))
   (assert (! (forall ((|i_27| Field$Int$)(|i_26| ref)(|m_15| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|v_14| Int))(!(= v_14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_15 i_26 i_27 v_14) i_26 i_27)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_15 i_26 i_27 v_14) i_26 i_27)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_3))
   (assert (! (forall ((|i_39| Field$ref$)(|i_38| ref)(|m_21| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|v_20| $@Map@@PermissionComponent@To@Int@@))(!(= v_20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_21 i_38 i_39 v_20) i_38 i_39)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_21 i_38 i_39 v_20) i_38 i_39)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_4))
   (assert (! (forall ((|i_51| Field$ref$)(|i_50| ref)(|m_27| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|v_26| ref))(!(= v_26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_27 i_50 i_51 v_26) i_50 i_51)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_27 i_50 i_51 v_26) i_50 i_51)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_5))
   (assert (! (forall ((|v_1| $@Map@@PermissionComponent@To@Int@@)(|m_2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|i_3| Field$Int$)(|j_1| Field$Int$)(|i_2| ref)(|j| ref))(!(=> (or (not (= j_1 i_3)) (not (= j i_2))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_2 j j_1) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_2 i_2 i_3 v_1) j j_1))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_2 i_2 i_3 v_1) j j_1)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_6))
   (assert (! (forall ((|v_10| $@Map@@PermissionComponent@To@Int@@)(|i_19| Field$Seq$Int$$)(|i_18| ref)(|j_14| Field$Bool$)(|j_13| ref)(|m_11| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ m_11 j_13 j_14) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_11 i_18 i_19 v_10) j_13 j_14)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_11 i_18 i_19 v_10) j_13 j_14)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Bool__Seq$Int$ :weight 0 )) :named ax_7))
   (assert (! (forall ((|v_11| $@Map@@PermissionComponent@To@Int@@)(|i_21| Field$Seq$Int$$)(|i_20| ref)(|j_16| Field$Int$)(|j_15| ref)(|m_12| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_12 j_15 j_16) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_12 i_20 i_21 v_11) j_15 j_16)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_12 i_20 i_21 v_11) j_15 j_16)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Int__Seq$Int$ :weight 0 )) :named ax_8))
   (assert (! (forall ((|v_12| $@Map@@PermissionComponent@To@Int@@)(|i_23| Field$Seq$Int$$)(|i_22| ref)(|j_18| Field$ref$)(|j_17| ref)(|m_13| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_13 j_17 j_18) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_13 i_22 i_23 v_12) j_17 j_18)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_13 i_22 i_23 v_12) j_17 j_18)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__ref__Seq$Int$ :weight 0 )) :named ax_9))
   (assert (! (forall ((|v_13| $@Map@@PermissionComponent@To@Int@@)(|i_25| Field$Seq$Int$$)(|i_24| ref)(|j_20| Field$Mu$)(|j_19| ref)(|m_14| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ m_14 j_19 j_20) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_14 i_24 i_25 v_13) j_19 j_20)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_14 i_24 i_25 v_13) j_19 j_20)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Mu__Seq$Int$ :weight 0 )) :named ax_10))
   (assert (! (forall ((|v_15| Int)(|m_16| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_29| Field$Int$)(|j_22| Field$Int$)(|i_28| ref)(|j_21| ref))(!(=> (or (not (= j_22 i_29)) (not (= j_21 i_28))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_16 j_21 j_22) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_16 i_28 i_29 v_15) j_21 j_22))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_16 i_28 i_29 v_15) j_21 j_22)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_11))
   (assert (! (forall ((|v_16| Int)(|i_31| Field$Int$)(|i_30| ref)(|j_24| Field$Bool$)(|j_23| ref)(|m_17| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ m_17 j_23 j_24) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_17 i_30 i_31 v_16) j_23 j_24)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_17 i_30 i_31 v_16) j_23 j_24)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Bool__Int :weight 0 )) :named ax_12))
   (assert (! (forall ((|v_17| Int)(|i_33| Field$Int$)(|i_32| ref)(|j_26| Field$ref$)(|j_25| ref)(|m_18| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_18 j_25 j_26) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_18 i_32 i_33 v_17) j_25 j_26)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_18 i_32 i_33 v_17) j_25 j_26)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__ref__Int :weight 0 )) :named ax_13))
   (assert (! (forall ((|v_18| Int)(|i_35| Field$Int$)(|i_34| ref)(|j_28| Field$Mu$)(|j_27| ref)(|m_19| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ m_19 j_27 j_28) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_19 i_34 i_35 v_18) j_27 j_28)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_19 i_34 i_35 v_18) j_27 j_28)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Mu__Int :weight 0 )) :named ax_14))
   (assert (! (forall ((|v_19| Int)(|i_37| Field$Int$)(|i_36| ref)(|j_30| Field$Seq$Int$$)(|j_29| ref)(|m_20| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ m_20 j_29 j_30) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_20 i_36 i_37 v_19) j_29 j_30)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_20 i_36 i_37 v_19) j_29 j_30)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Seq$Int$__Int :weight 0 )) :named ax_15))
   (assert (! (forall ((|v_2| $@Map@@PermissionComponent@To@Int@@)(|i_5| Field$Int$)(|i_4| ref)(|j_3| Field$Bool$)(|j_2| ref)(|m_3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ m_3 j_2 j_3) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_3 i_4 i_5 v_2) j_2 j_3)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_3 i_4 i_5 v_2) j_2 j_3)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Bool__Int :weight 0 )) :named ax_16))
   (assert (! (forall ((|v_21| $@Map@@PermissionComponent@To@Int@@)(|m_22| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|i_41| Field$ref$)(|j_32| Field$ref$)(|i_40| ref)(|j_31| ref))(!(=> (or (not (= j_32 i_41)) (not (= j_31 i_40))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_22 j_31 j_32) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_22 i_40 i_41 v_21) j_31 j_32))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_22 i_40 i_41 v_21) j_31 j_32)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_17))
   (assert (! (forall ((|v_22| $@Map@@PermissionComponent@To@Int@@)(|i_43| Field$ref$)(|i_42| ref)(|j_34| Field$Bool$)(|j_33| ref)(|m_23| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ m_23 j_33 j_34) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_23 i_42 i_43 v_22) j_33 j_34)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_23 i_42 i_43 v_22) j_33 j_34)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Bool__ref :weight 0 )) :named ax_18))
   (assert (! (forall ((|v_23| $@Map@@PermissionComponent@To@Int@@)(|i_45| Field$ref$)(|i_44| ref)(|j_36| Field$Int$)(|j_35| ref)(|m_24| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_24 j_35 j_36) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_24 i_44 i_45 v_23) j_35 j_36)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_24 i_44 i_45 v_23) j_35 j_36)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Int__ref :weight 0 )) :named ax_19))
   (assert (! (forall ((|v_24| $@Map@@PermissionComponent@To@Int@@)(|i_47| Field$ref$)(|i_46| ref)(|j_38| Field$Mu$)(|j_37| ref)(|m_25| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ m_25 j_37 j_38) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_25 i_46 i_47 v_24) j_37 j_38)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_25 i_46 i_47 v_24) j_37 j_38)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Mu__ref :weight 0 )) :named ax_20))
   (assert (! (forall ((|v_25| $@Map@@PermissionComponent@To@Int@@)(|i_49| Field$ref$)(|i_48| ref)(|j_40| Field$Seq$Int$$)(|j_39| ref)(|m_26| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_26 j_39 j_40) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_26 i_48 i_49 v_25) j_39 j_40)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_26 i_48 i_49 v_25) j_39 j_40)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Seq$Int$__ref :weight 0 )) :named ax_21))
   (assert (! (forall ((|v_27| ref)(|m_28| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_53| Field$ref$)(|j_42| Field$ref$)(|i_52| ref)(|j_41| ref))(!(=> (or (not (= j_42 i_53)) (not (= j_41 i_52))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_28 j_41 j_42) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_28 i_52 i_53 v_27) j_41 j_42))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_28 i_52 i_53 v_27) j_41 j_42)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_22))
   (assert (! (forall ((|v_28| ref)(|i_55| Field$ref$)(|i_54| ref)(|j_44| Field$Bool$)(|j_43| ref)(|m_29| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ m_29 j_43 j_44) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_29 i_54 i_55 v_28) j_43 j_44)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_29 i_54 i_55 v_28) j_43 j_44)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Bool__ref :weight 0 )) :named ax_23))
   (assert (! (forall ((|v_29| ref)(|i_57| Field$ref$)(|i_56| ref)(|j_46| Field$Int$)(|j_45| ref)(|m_30| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_30 j_45 j_46) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_30 i_56 i_57 v_29) j_45 j_46)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_30 i_56 i_57 v_29) j_45 j_46)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Int__ref :weight 0 )) :named ax_24))
   (assert (! (forall ((|v_3| $@Map@@PermissionComponent@To@Int@@)(|i_7| Field$Int$)(|i_6| ref)(|j_5| Field$ref$)(|j_4| ref)(|m_4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_4 j_4 j_5) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_4 i_6 i_7 v_3) j_4 j_5)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_4 i_6 i_7 v_3) j_4 j_5)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__ref__Int :weight 0 )) :named ax_25))
   (assert (! (forall ((|v_30| ref)(|i_59| Field$ref$)(|i_58| ref)(|j_48| Field$Mu$)(|j_47| ref)(|m_31| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ m_31 j_47 j_48) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_31 i_58 i_59 v_30) j_47 j_48)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_31 i_58 i_59 v_30) j_47 j_48)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Mu__ref :weight 0 )) :named ax_26))
   (assert (! (forall ((|v_31| ref)(|i_61| Field$ref$)(|i_60| ref)(|j_50| Field$Seq$Int$$)(|j_49| ref)(|m_32| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ m_32 j_49 j_50) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_32 i_60 i_61 v_31) j_49 j_50)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_32 i_60 i_61 v_31) j_49 j_50)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Seq$Int$__ref :weight 0 )) :named ax_27))
   (assert (! (forall ((|v_4| $@Map@@PermissionComponent@To@Int@@)(|i_9| Field$Int$)(|i_8| ref)(|j_7| Field$Mu$)(|j_6| ref)(|m_5| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ m_5 j_6 j_7) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_5 i_8 i_9 v_4) j_6 j_7)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_5 i_8 i_9 v_4) j_6 j_7)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Mu__Int :weight 0 )) :named ax_28))
   (assert (! (forall ((|v_5| $@Map@@PermissionComponent@To@Int@@)(|i_11| Field$Int$)(|i_10| ref)(|j_9| Field$Seq$Int$$)(|j_8| ref)(|m_6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_6 j_8 j_9) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_6 i_10 i_11 v_5) j_8 j_9)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_6 i_10 i_11 v_5) j_8 j_9)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Seq$Int$__Int :weight 0 )) :named ax_29))
   (assert (! (forall ((|v_7| Int)(|m_8| $@Map@@PermissionComponent@To@Int@@)(|i_13| PermissionComponent)(|j_10| PermissionComponent))(!(=> (not (= j_10 i_13)) (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ m_8 j_10) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_8 i_13 v_7) j_10))):pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_8 i_13 v_7) j_10)) :qid map_2_$@Map@@PermissionComponent@To@Int@@ :weight 0 )) :named ax_30))
   (assert (! (forall ((|v_9| $@Map@@PermissionComponent@To@Int@@)(|m_10| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|i_17| Field$Seq$Int$$)(|j_12| Field$Seq$Int$$)(|i_16| ref)(|j_11| ref))(!(=> (or (not (= j_12 i_17)) (not (= j_11 i_16))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_10 j_11 j_12) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_10 i_16 i_17 v_9) j_11 j_12))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ m_10 i_16 i_17 v_9) j_11 j_12)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_31))
   (assert (! (not (= AVLTree.keys AVLTreeNode.keys)) :named ax_32))
   (assert (! (not (= AVLTree.root AVLTreeNode.left)) :named ax_33))
   (assert (! (not (= AVLTree.root AVLTreeNode.right)) :named ax_34))
   (assert (! (not (= AVLTree.valid AVLTreeNode.balanceFactor)) :named ax_35))
   (assert (! (not (= AVLTree.valid AVLTreeNode.height)) :named ax_36))
   (assert (! (not (= AVLTree.valid AVLTreeNode.key)) :named ax_37))
   (assert (! (not (= AVLTree.valid AVLTreeNode.valid)) :named ax_38))
   (assert (! (not (= AVLTreeNode.balanceFactor AVLTree.valid)) :named ax_39))
   (assert (! (not (= AVLTreeNode.balanceFactor AVLTreeNode.valid)) :named ax_40))
   (assert (! (not (= AVLTreeNode.height AVLTree.valid)) :named ax_41))
   (assert (! (not (= AVLTreeNode.height AVLTreeNode.balanceFactor)) :named ax_42))
   (assert (! (not (= AVLTreeNode.height AVLTreeNode.balanceFactor)) :named ax_43))
   (assert (! (not (= AVLTreeNode.height AVLTreeNode.valid)) :named ax_44))
   (assert (! (not (= AVLTreeNode.key AVLTree.valid)) :named ax_45))
   (assert (! (not (= AVLTreeNode.key AVLTreeNode.balanceFactor)) :named ax_46))
   (assert (! (not (= AVLTreeNode.key AVLTreeNode.balanceFactor)) :named ax_47))
   (assert (! (not (= AVLTreeNode.key AVLTreeNode.height)) :named ax_48))
   (assert (! (not (= AVLTreeNode.key AVLTreeNode.height)) :named ax_49))
   (assert (! (not (= AVLTreeNode.key AVLTreeNode.valid)) :named ax_50))
   (assert (! (not (= AVLTreeNode.keys AVLTree.keys)) :named ax_51))
   (assert (! (not (= AVLTreeNode.left AVLTree.root)) :named ax_52))
   (assert (! (not (= AVLTreeNode.left AVLTreeNode.right)) :named ax_53))
   (assert (! (not (= AVLTreeNode.right AVLTree.root)) :named ax_54))
   (assert (! (not (= AVLTreeNode.right AVLTreeNode.left)) :named ax_55))
   (assert (! (not (= AVLTreeNode.valid AVLTree.valid)) :named ax_56))
   (assert (! (not (= AVLTreeNode.valid AVLTreeNode.balanceFactor)) :named ax_57))
   (assert (! (not (= AVLTreeNode.valid AVLTreeNode.height)) :named ax_58))
   (assert (! (not (= AVLTreeNode.valid AVLTreeNode.key)) :named ax_59))
   (assert (! (not (= forkK AVLTree.valid)) :named ax_60))
   (assert (! (not (= forkK AVLTree.valid)) :named ax_61))
   (assert (! (not (= forkK AVLTreeNode.balanceFactor)) :named ax_62))
   (assert (! (not (= forkK AVLTreeNode.balanceFactor)) :named ax_63))
   (assert (! (not (= forkK AVLTreeNode.height)) :named ax_64))
   (assert (! (not (= forkK AVLTreeNode.height)) :named ax_65))
   (assert (! (not (= forkK AVLTreeNode.key)) :named ax_66))
   (assert (! (not (= forkK AVLTreeNode.key)) :named ax_67))
   (assert (! (not (= forkK AVLTreeNode.valid)) :named ax_68))
   (assert (! (not (= forkK AVLTreeNode.valid)) :named ax_69))
   (assert (! (not (= forkK held)) :named ax_70))
   (assert (! (not (= held AVLTree.valid)) :named ax_71))
   (assert (! (not (= held AVLTree.valid)) :named ax_72))
   (assert (! (not (= held AVLTreeNode.balanceFactor)) :named ax_73))
   (assert (! (not (= held AVLTreeNode.balanceFactor)) :named ax_74))
   (assert (! (not (= held AVLTreeNode.height)) :named ax_75))
   (assert (! (not (= held AVLTreeNode.height)) :named ax_76))
   (assert (! (not (= held AVLTreeNode.key)) :named ax_77))
   (assert (! (not (= held AVLTreeNode.key)) :named ax_78))
   (assert (! (not (= held AVLTreeNode.valid)) :named ax_79))
   (assert (! (not (= held AVLTreeNode.valid)) :named ax_80))
   (assert (! (not (= held forkK)) :named ax_81))
   (assert (! (not (= joinable AVLTree.valid)) :named ax_82))
   (assert (! (not (= joinable AVLTree.valid)) :named ax_83))
   (assert (! (not (= joinable AVLTreeNode.balanceFactor)) :named ax_84))
   (assert (! (not (= joinable AVLTreeNode.balanceFactor)) :named ax_85))
   (assert (! (not (= joinable AVLTreeNode.height)) :named ax_86))
   (assert (! (not (= joinable AVLTreeNode.height)) :named ax_87))
   (assert (! (not (= joinable AVLTreeNode.key)) :named ax_88))
   (assert (! (not (= joinable AVLTreeNode.key)) :named ax_89))
   (assert (! (not (= joinable AVLTreeNode.valid)) :named ax_90))
   (assert (! (not (= joinable AVLTreeNode.valid)) :named ax_91))
   (assert (! (not (= joinable forkK)) :named ax_92))
   (assert (! (not (= joinable forkK)) :named ax_93))
   (assert (! (not (= joinable held)) :named ax_94))
   (assert (! (not (= joinable held)) :named ax_95))
   (assert (! (not (= perm$R perm$N)) :named ax_96))
   (assert (! (not (= perm$R perm$N)) :named ax_97))

;Program
(assert (! (and true
$start
) :named ax_true))
(assert (! (=> $start (and true 
   (and true
      (< (* 1000 channelK) (Fractions 1))
      (< (* 1000 monitorK) (Fractions 1))
      (< (* 1000 predicateK) (Fractions 1))
      (< 0 channelK)
      (< 0 monitorK)
      (< 0 predicateK)
      (= (= true $@bf_32) (ite$Bool$ true true true))
      (= (= true $@bf_33) (ite$Bool$ true true false))
      (= (= true $@bf_34) (ite$Bool$ true false true))
      (= (= true $@bf_35) (ite$Bool$ true false false))
      (= (= true $@bf_36) (ite$Bool$ false true true))
      (= (= true $@bf_37) (ite$Bool$ false true false))
      (= (= true $@bf_38) (ite$Bool$ false false true))
      (= (= true $@bf_39) (ite$Bool$ false false false))
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Full perm$N) 0)
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Full perm$R) Permission$FullFraction)
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Zero perm$N) 0)
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Zero perm$R) 0)
      (= (Seq@Length$Int$ Seq@Empty$Int$) 0)
      (= (Seq@Length$ref$ Seq@Empty$ref$) 0)
      (= channelK monitorK)
      (= Permission$FullFraction (Fractions 100))
      (= predicateK channelK)
      (> Permission$denominator 0)
      (forall( (|a_$2_$0| Seq$Int$) (|b_$2_$0| Seq$Int$))(!(=> (Seq@Equal$Int$ |a_$2_$0| |b_$2_$0|) (= |a_$2_$0| |b_$2_$0|))  :pattern ( (Seq@Equal$Int$ |a_$2_$0| |b_$2_$0|))))
      (forall( (|a_$2_$1| Seq$ref$) (|b_$2_$1| Seq$ref$))(!(=> (Seq@Equal$ref$ |a_$2_$1| |b_$2_$1|) (= |a_$2_$1| |b_$2_$1|))  :pattern ( (Seq@Equal$ref$ |a_$2_$1| |b_$2_$1|))))
      (forall( (|con_$0_$0| Bool) (|a_$1_$0| Bool) (|b_$1_$0| Bool))(!(=> (not |con_$0_$0|) (= (ite$Bool$ |con_$0_$0| |a_$1_$0| |b_$1_$0|) |b_$1_$0|))  :pattern ( (ite$Bool$ |con_$0_$0| |a_$1_$0| |b_$1_$0|))))
      (forall( (|con_$0_$1| Bool) (|a_$1_$1| Int) (|b_$1_$1| Int))(!(=> (not |con_$0_$1|) (= (ite$Int$ |con_$0_$1| |a_$1_$1| |b_$1_$1|) |b_$1_$1|))  :pattern ( (ite$Int$ |con_$0_$1| |a_$1_$1| |b_$1_$1|))))
      (forall( (|con_$0_$10| Bool) (|a_$1_$10| Field$Bool$) (|b_$1_$10| Field$Bool$))(!(=> (not |con_$0_$10|) (= (ite$Field$Bool$$ |con_$0_$10| |a_$1_$10| |b_$1_$10|) |b_$1_$10|))  :pattern ( (ite$Field$Bool$$ |con_$0_$10| |a_$1_$10| |b_$1_$10|))))
      (forall( (|con_$0_$11| Bool) (|a_$1_$11| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$1_$11| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(=> (not |con_$0_$11|) (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$0_$11| |a_$1_$11| |b_$1_$11|) |b_$1_$11|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$0_$11| |a_$1_$11| |b_$1_$11|))))
      (forall( (|con_$0_$12| Bool) (|a_$1_$12| $@Map@@ref@To@Int@@) (|b_$1_$12| $@Map@@ref@To@Int@@))(!(=> (not |con_$0_$12|) (= (ite$$@Map@@ref@To@Int@@$ |con_$0_$12| |a_$1_$12| |b_$1_$12|) |b_$1_$12|))  :pattern ( (ite$$@Map@@ref@To@Int@@$ |con_$0_$12| |a_$1_$12| |b_$1_$12|))))
      (forall( (|con_$0_$13| Bool) (|a_$1_$13| Seq$ref$) (|b_$1_$13| Seq$ref$))(!(=> (not |con_$0_$13|) (= (ite$Seq$ref$$ |con_$0_$13| |a_$1_$13| |b_$1_$13|) |b_$1_$13|))  :pattern ( (ite$Seq$ref$$ |con_$0_$13| |a_$1_$13| |b_$1_$13|))))
      (forall( (|con_$0_$14| Bool) (|a_$1_$14| Seq$Int$) (|b_$1_$14| Seq$Int$))(!(=> (not |con_$0_$14|) (= (ite$Seq$Int$$ |con_$0_$14| |a_$1_$14| |b_$1_$14|) |b_$1_$14|))  :pattern ( (ite$Seq$Int$$ |con_$0_$14| |a_$1_$14| |b_$1_$14|))))
      (forall( (|con_$0_$15| Bool) (|a_$1_$15| Field$ref$) (|b_$1_$15| Field$ref$))(!(=> (not |con_$0_$15|) (= (ite$Field$ref$$ |con_$0_$15| |a_$1_$15| |b_$1_$15|) |b_$1_$15|))  :pattern ( (ite$Field$ref$$ |con_$0_$15| |a_$1_$15| |b_$1_$15|))))
      (forall( (|con_$0_$16| Bool) (|a_$1_$16| Field$Seq$Int$$) (|b_$1_$16| Field$Seq$Int$$))(!(=> (not |con_$0_$16|) (= (ite$Field$Seq$Int$$$ |con_$0_$16| |a_$1_$16| |b_$1_$16|) |b_$1_$16|))  :pattern ( (ite$Field$Seq$Int$$$ |con_$0_$16| |a_$1_$16| |b_$1_$16|))))
      (forall( (|con_$0_$17| Bool) (|a_$1_$17| TypeName) (|b_$1_$17| TypeName))(!(=> (not |con_$0_$17|) (= (ite$TypeName$ |con_$0_$17| |a_$1_$17| |b_$1_$17|) |b_$1_$17|))  :pattern ( (ite$TypeName$ |con_$0_$17| |a_$1_$17| |b_$1_$17|))))
      (forall( (|con_$0_$18| Bool) (|a_$1_$18| ModuleName) (|b_$1_$18| ModuleName))(!(=> (not |con_$0_$18|) (= (ite$ModuleName$ |con_$0_$18| |a_$1_$18| |b_$1_$18|) |b_$1_$18|))  :pattern ( (ite$ModuleName$ |con_$0_$18| |a_$1_$18| |b_$1_$18|))))
      (forall( (|con_$0_$2| Bool) (|a_$1_$2| $@Map@@PermissionComponent@To@Int@@) (|b_$1_$2| $@Map@@PermissionComponent@To@Int@@))(!(=> (not |con_$0_$2|) (= (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$0_$2| |a_$1_$2| |b_$1_$2|) |b_$1_$2|))  :pattern ( (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$0_$2| |a_$1_$2| |b_$1_$2|))))
      (forall( (|con_$0_$3| Bool) (|a_$1_$3| PermissionComponent) (|b_$1_$3| PermissionComponent))(!(=> (not |con_$0_$3|) (= (ite$PermissionComponent$ |con_$0_$3| |a_$1_$3| |b_$1_$3|) |b_$1_$3|))  :pattern ( (ite$PermissionComponent$ |con_$0_$3| |a_$1_$3| |b_$1_$3|))))
      (forall( (|con_$0_$4| Bool) (|a_$1_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$1_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(=> (not |con_$0_$4|) (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$0_$4| |a_$1_$4| |b_$1_$4|) |b_$1_$4|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$0_$4| |a_$1_$4| |b_$1_$4|))))
      (forall( (|con_$0_$5| Bool) (|a_$1_$5| ref) (|b_$1_$5| ref))(!(=> (not |con_$0_$5|) (= (ite$ref$ |con_$0_$5| |a_$1_$5| |b_$1_$5|) |b_$1_$5|))  :pattern ( (ite$ref$ |con_$0_$5| |a_$1_$5| |b_$1_$5|))))
      (forall( (|con_$0_$6| Bool) (|a_$1_$6| Field$Int$) (|b_$1_$6| Field$Int$))(!(=> (not |con_$0_$6|) (= (ite$Field$Int$$ |con_$0_$6| |a_$1_$6| |b_$1_$6|) |b_$1_$6|))  :pattern ( (ite$Field$Int$$ |con_$0_$6| |a_$1_$6| |b_$1_$6|))))
      (forall( (|con_$0_$7| Bool) (|a_$1_$7| PartialHeapType) (|b_$1_$7| PartialHeapType))(!(=> (not |con_$0_$7|) (= (ite$PartialHeapType$ |con_$0_$7| |a_$1_$7| |b_$1_$7|) |b_$1_$7|))  :pattern ( (ite$PartialHeapType$ |con_$0_$7| |a_$1_$7| |b_$1_$7|))))
      (forall( (|con_$0_$8| Bool) (|a_$1_$8| Field$Mu$) (|b_$1_$8| Field$Mu$))(!(=> (not |con_$0_$8|) (= (ite$Field$Mu$$ |con_$0_$8| |a_$1_$8| |b_$1_$8|) |b_$1_$8|))  :pattern ( (ite$Field$Mu$$ |con_$0_$8| |a_$1_$8| |b_$1_$8|))))
      (forall( (|con_$0_$9| Bool) (|a_$1_$9| Mu) (|b_$1_$9| Mu))(!(=> (not |con_$0_$9|) (= (ite$Mu$ |con_$0_$9| |a_$1_$9| |b_$1_$9|) |b_$1_$9|))  :pattern ( (ite$Mu$ |con_$0_$9| |a_$1_$9| |b_$1_$9|))))
      (forall( (|con_$1| Bool) (|a_$0_$0| Bool) (|b_$0_$0| Bool))(!(=> |con_$1| (= (ite$Bool$ |con_$1| |a_$0_$0| |b_$0_$0|) |a_$0_$0|))  :pattern ( (ite$Bool$ |con_$1| |a_$0_$0| |b_$0_$0|))))
      (forall( (|con_$10| Bool) (|a_$0_$9| Mu) (|b_$0_$9| Mu))(!(=> |con_$10| (= (ite$Mu$ |con_$10| |a_$0_$9| |b_$0_$9|) |a_$0_$9|))  :pattern ( (ite$Mu$ |con_$10| |a_$0_$9| |b_$0_$9|))))
      (forall( (|con_$11| Bool) (|a_$0_$10| Field$Bool$) (|b_$0_$10| Field$Bool$))(!(=> |con_$11| (= (ite$Field$Bool$$ |con_$11| |a_$0_$10| |b_$0_$10|) |a_$0_$10|))  :pattern ( (ite$Field$Bool$$ |con_$11| |a_$0_$10| |b_$0_$10|))))
      (forall( (|con_$12| Bool) (|a_$0_$11| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$0_$11| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(=> |con_$12| (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$12| |a_$0_$11| |b_$0_$11|) |a_$0_$11|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$12| |a_$0_$11| |b_$0_$11|))))
      (forall( (|con_$13| Bool) (|a_$0_$12| $@Map@@ref@To@Int@@) (|b_$0_$12| $@Map@@ref@To@Int@@))(!(=> |con_$13| (= (ite$$@Map@@ref@To@Int@@$ |con_$13| |a_$0_$12| |b_$0_$12|) |a_$0_$12|))  :pattern ( (ite$$@Map@@ref@To@Int@@$ |con_$13| |a_$0_$12| |b_$0_$12|))))
      (forall( (|con_$14| Bool) (|a_$0_$13| Seq$ref$) (|b_$0_$13| Seq$ref$))(!(=> |con_$14| (= (ite$Seq$ref$$ |con_$14| |a_$0_$13| |b_$0_$13|) |a_$0_$13|))  :pattern ( (ite$Seq$ref$$ |con_$14| |a_$0_$13| |b_$0_$13|))))
      (forall( (|con_$15| Bool) (|a_$0_$14| Seq$Int$) (|b_$0_$14| Seq$Int$))(!(=> |con_$15| (= (ite$Seq$Int$$ |con_$15| |a_$0_$14| |b_$0_$14|) |a_$0_$14|))  :pattern ( (ite$Seq$Int$$ |con_$15| |a_$0_$14| |b_$0_$14|))))
      (forall( (|con_$16| Bool) (|a_$0_$15| Field$ref$) (|b_$0_$15| Field$ref$))(!(=> |con_$16| (= (ite$Field$ref$$ |con_$16| |a_$0_$15| |b_$0_$15|) |a_$0_$15|))  :pattern ( (ite$Field$ref$$ |con_$16| |a_$0_$15| |b_$0_$15|))))
      (forall( (|con_$17| Bool) (|a_$0_$16| Field$Seq$Int$$) (|b_$0_$16| Field$Seq$Int$$))(!(=> |con_$17| (= (ite$Field$Seq$Int$$$ |con_$17| |a_$0_$16| |b_$0_$16|) |a_$0_$16|))  :pattern ( (ite$Field$Seq$Int$$$ |con_$17| |a_$0_$16| |b_$0_$16|))))
      (forall( (|con_$18| Bool) (|a_$0_$17| TypeName) (|b_$0_$17| TypeName))(!(=> |con_$18| (= (ite$TypeName$ |con_$18| |a_$0_$17| |b_$0_$17|) |a_$0_$17|))  :pattern ( (ite$TypeName$ |con_$18| |a_$0_$17| |b_$0_$17|))))
      (forall( (|con_$19| Bool) (|a_$0_$18| ModuleName) (|b_$0_$18| ModuleName))(!(=> |con_$19| (= (ite$ModuleName$ |con_$19| |a_$0_$18| |b_$0_$18|) |a_$0_$18|))  :pattern ( (ite$ModuleName$ |con_$19| |a_$0_$18| |b_$0_$18|))))
      (forall( (|con_$2| Bool) (|a_$0_$1| Int) (|b_$0_$1| Int))(!(=> |con_$2| (= (ite$Int$ |con_$2| |a_$0_$1| |b_$0_$1|) |a_$0_$1|))  :pattern ( (ite$Int$ |con_$2| |a_$0_$1| |b_$0_$1|))))
      (forall( (|con_$3| Bool) (|a_$0_$2| $@Map@@PermissionComponent@To@Int@@) (|b_$0_$2| $@Map@@PermissionComponent@To@Int@@))(!(=> |con_$3| (= (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$3| |a_$0_$2| |b_$0_$2|) |a_$0_$2|))  :pattern ( (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$3| |a_$0_$2| |b_$0_$2|))))
      (forall( (|con_$4| Bool) (|a_$0_$3| PermissionComponent) (|b_$0_$3| PermissionComponent))(!(=> |con_$4| (= (ite$PermissionComponent$ |con_$4| |a_$0_$3| |b_$0_$3|) |a_$0_$3|))  :pattern ( (ite$PermissionComponent$ |con_$4| |a_$0_$3| |b_$0_$3|))))
      (forall( (|con_$5| Bool) (|a_$0_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$0_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(=> |con_$5| (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$5| |a_$0_$4| |b_$0_$4|) |a_$0_$4|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$5| |a_$0_$4| |b_$0_$4|))))
      (forall( (|con_$6| Bool) (|a_$0_$5| ref) (|b_$0_$5| ref))(!(=> |con_$6| (= (ite$ref$ |con_$6| |a_$0_$5| |b_$0_$5|) |a_$0_$5|))  :pattern ( (ite$ref$ |con_$6| |a_$0_$5| |b_$0_$5|))))
      (forall( (|con_$7| Bool) (|a_$0_$6| Field$Int$) (|b_$0_$6| Field$Int$))(!(=> |con_$7| (= (ite$Field$Int$$ |con_$7| |a_$0_$6| |b_$0_$6|) |a_$0_$6|))  :pattern ( (ite$Field$Int$$ |con_$7| |a_$0_$6| |b_$0_$6|))))
      (forall( (|con_$8| Bool) (|a_$0_$7| PartialHeapType) (|b_$0_$7| PartialHeapType))(!(=> |con_$8| (= (ite$PartialHeapType$ |con_$8| |a_$0_$7| |b_$0_$7|) |a_$0_$7|))  :pattern ( (ite$PartialHeapType$ |con_$8| |a_$0_$7| |b_$0_$7|))))
      (forall( (|con_$9| Bool) (|a_$0_$8| Field$Mu$) (|b_$0_$8| Field$Mu$))(!(=> |con_$9| (= (ite$Field$Mu$$ |con_$9| |a_$0_$8| |b_$0_$8|) |a_$0_$8|))  :pattern ( (ite$Field$Mu$$ |con_$9| |a_$0_$8| |b_$0_$8|))))
      (forall( (|eh| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|h_$0| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|m_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|sm_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodExhaleState |eh| |h_$0| |m_$3| |sm_$0|) (and (and (and (and (and (and (and (and (and (and (and (forall( (|o_$6_$0| ref) (|f_$1_$0| Field$Bool$))(!(=> (CanRead$Bool$ |m_$3| |sm_$0| |o_$6_$0| |f_$1_$0|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |eh| |o_$6_$0| |f_$1_$0|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$0| |o_$6_$0| |f_$1_$0|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |eh| |o_$6_$0| |f_$1_$0|)))) (forall( (|o_$6_$1| ref) (|f_$1_$1| Field$Int$))(!(=> (CanRead$Int$ |m_$3| |sm_$0| |o_$6_$1| |f_$1_$1|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$6_$1| |f_$1_$1|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$6_$1| |f_$1_$1|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$6_$1| |f_$1_$1|))))) (forall( (|o_$6_$2| ref) (|f_$1_$2| Field$ref$))(!(=> (CanRead$ref$ |m_$3| |sm_$0| |o_$6_$2| |f_$1_$2|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |eh| |o_$6_$2| |f_$1_$2|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |h_$0| |o_$6_$2| |f_$1_$2|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |eh| |o_$6_$2| |f_$1_$2|))))) (forall( (|o_$6_$3| ref) (|f_$1_$3| Field$Mu$))(!(=> (CanRead$Mu$ |m_$3| |sm_$0| |o_$6_$3| |f_$1_$3|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |eh| |o_$6_$3| |f_$1_$3|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$0| |o_$6_$3| |f_$1_$3|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |eh| |o_$6_$3| |f_$1_$3|))))) (forall( (|o_$6_$4| ref) (|f_$1_$4| Field$Seq$Int$$))(!(=> (CanRead$Seq$Int$$ |m_$3| |sm_$0| |o_$6_$4| |f_$1_$4|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ |eh| |o_$6_$4| |f_$1_$4|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ |h_$0| |o_$6_$4| |f_$1_$4|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ |eh| |o_$6_$4| |f_$1_$4|))))) (forall( (|o_$7| ref))(!(= (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$7| held)) (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$7| held)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$7| held))))) (forall( (|o_$8| ref))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |eh| |o_$8| rdheld) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$0| |o_$8| rdheld))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |eh| |o_$8| rdheld))))) (forall( (|o_$9| ref))(!(=> (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$9| held)) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |eh| |o_$9| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$0| |o_$9| mu)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$9| held))))) (forall( (|o_$10| ref))(!(=> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$0| |o_$10| rdheld) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |eh| |o_$10| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$0| |o_$10| mu)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$0| |o_$10| rdheld))))) (forall( (|o_$11| ref))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$11| forkK) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$11| forkK))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$11| forkK)) :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$11| forkK))))) (forall( (|o_$12| ref))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$12| held) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$12| held))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$12| held)) :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$12| held))))) (forall( (|o_$13| ref) (|f_$2| Field$Int$))(!(=> (PredicateField$Int$ |f_$2|) (<= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$13| |f_$2|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$13| |f_$2|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |eh| |o_$13| |f_$2|) (PredicateField$Int$ |f_$2|))))))  :pattern ( (IsGoodExhaleState |eh| |h_$0| |m_$3| |sm_$0|))))
      (forall( (|f_$13_$0| Field$Bool$))(=> (NonPredicateField$Bool$ |f_$13_$0|) (not (PredicateField$Bool$ |f_$13_$0|))))
      (forall( (|f_$13_$1| Field$Int$))(=> (NonPredicateField$Int$ |f_$13_$1|) (not (PredicateField$Int$ |f_$13_$1|))))
      (forall( (|f_$13_$2| Field$ref$))(=> (NonPredicateField$ref$ |f_$13_$2|) (not (PredicateField$ref$ |f_$13_$2|))))
      (forall( (|f_$13_$3| Field$Mu$))(=> (NonPredicateField$Mu$ |f_$13_$3|) (not (PredicateField$Mu$ |f_$13_$3|))))
      (forall( (|f_$13_$4| Field$Seq$Int$$))(=> (NonPredicateField$Seq$Int$$ |f_$13_$4|) (not (PredicateField$Seq$Int$$ |f_$13_$4|))))
      (forall( (|f_$14_$0| Field$Bool$))(=> (PredicateField$Bool$ |f_$14_$0|) (not (NonPredicateField$Bool$ |f_$14_$0|))))
      (forall( (|f_$14_$1| Field$Int$))(=> (PredicateField$Int$ |f_$14_$1|) (not (NonPredicateField$Int$ |f_$14_$1|))))
      (forall( (|f_$14_$2| Field$ref$))(=> (PredicateField$ref$ |f_$14_$2|) (not (NonPredicateField$ref$ |f_$14_$2|))))
      (forall( (|f_$14_$3| Field$Mu$))(=> (PredicateField$Mu$ |f_$14_$3|) (not (NonPredicateField$Mu$ |f_$14_$3|))))
      (forall( (|f_$14_$4| Field$Seq$Int$$))(=> (PredicateField$Seq$Int$$ |f_$14_$4|) (not (NonPredicateField$Seq$Int$$ |f_$14_$4|))))
      (forall( (|h_$1| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|m_$8| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|sm_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$15| ref) (|q| ref))(!(=> (and (and (and (wf |h_$1| |m_$8| |sm_$2|) (not (= |o_$15| |q|))) (or (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$1| |o_$15| held)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$1| |o_$15| rdheld))) (or (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$1| |q| held)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$1| |q| rdheld))) (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$1| |o_$15| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$1| |q| mu))))  :pattern ( (wf |h_$1| |m_$8| |sm_$2|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$1| |o_$15| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$1| |q| mu))))
      (forall( (|m_$0| Mu) (|n_$1| Mu) (|o_$0| Mu))(!(=> (and (MuBelow |m_$0| |n_$1|) (MuBelow |n_$1| |o_$0|)) (MuBelow |m_$0| |o_$0|))  :pattern ( (MuBelow |m_$0| |n_$1|) (MuBelow |n_$1| |o_$0|))))
      (forall( (|m_$1| Mu) (|n_$2| Mu))(=> (MuBelow |m_$1| |n_$2|) (not (= |n_$2| $LockBottom))))
      (forall( (|m_$11_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$0| ref) (|f_$9_$0| Field$Bool$) (|howMuch_$1_$0| Int) (|q_$2_$0| ref) (|g_$1_$0| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Bool$ |m_$11_$0| |o_$18_$0| |f_$9_$0| |howMuch_$1_$0|) |q_$2_$0| |g_$1_$0|) perm$R) (ite$Int$ (and (= |o_$18_$0| |q_$2_$0|) (= |f_$9_$0| |g_$1_$0|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$0| |q_$2_$0| |g_$1_$0|) perm$R) |howMuch_$1_$0|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$0| |q_$2_$0| |g_$1_$0|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Bool$ |m_$11_$0| |o_$18_$0| |f_$9_$0| |howMuch_$1_$0|) |q_$2_$0| |g_$1_$0|) perm$R))))
      (forall( (|m_$11_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$1| ref) (|f_$9_$1| Field$Int$) (|howMuch_$1_$1| Int) (|q_$2_$1| ref) (|g_$1_$1| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Int$ |m_$11_$1| |o_$18_$1| |f_$9_$1| |howMuch_$1_$1|) |q_$2_$1| |g_$1_$1|) perm$R) (ite$Int$ (and (= |o_$18_$1| |q_$2_$1|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$1| |q_$2_$1| |g_$1_$1|) perm$R) |howMuch_$1_$1|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$1| |q_$2_$1| |g_$1_$1|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Int$ |m_$11_$1| |o_$18_$1| |f_$9_$1| |howMuch_$1_$1|) |q_$2_$1| |g_$1_$1|) perm$R))))
      (forall( (|m_$11_$10| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$10| ref) (|f_$9_$10| Field$Bool$) (|howMuch_$1_$10| Int) (|q_$2_$10| ref) (|g_$1_$10| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Bool$ |m_$11_$10| |o_$18_$10| |f_$9_$10| |howMuch_$1_$10|) |q_$2_$10| |g_$1_$10|) perm$R) (ite$Int$ (and (= |o_$18_$10| |q_$2_$10|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$10| |q_$2_$10| |g_$1_$10|) perm$R) |howMuch_$1_$10|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$10| |q_$2_$10| |g_$1_$10|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Bool$ |m_$11_$10| |o_$18_$10| |f_$9_$10| |howMuch_$1_$10|) |q_$2_$10| |g_$1_$10|) perm$R))))
      (forall( (|m_$11_$11| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$11| ref) (|f_$9_$11| Field$Int$) (|howMuch_$1_$11| Int) (|q_$2_$11| ref) (|g_$1_$11| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Int$ |m_$11_$11| |o_$18_$11| |f_$9_$11| |howMuch_$1_$11|) |q_$2_$11| |g_$1_$11|) perm$R) (ite$Int$ (and (= |o_$18_$11| |q_$2_$11|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$11| |q_$2_$11| |g_$1_$11|) perm$R) |howMuch_$1_$11|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$11| |q_$2_$11| |g_$1_$11|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Int$ |m_$11_$11| |o_$18_$11| |f_$9_$11| |howMuch_$1_$11|) |q_$2_$11| |g_$1_$11|) perm$R))))
      (forall( (|m_$11_$12| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$12| ref) (|f_$9_$12| Field$ref$) (|howMuch_$1_$12| Int) (|q_$2_$12| ref) (|g_$1_$12| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$ref$ |m_$11_$12| |o_$18_$12| |f_$9_$12| |howMuch_$1_$12|) |q_$2_$12| |g_$1_$12|) perm$R) (ite$Int$ (and (= |o_$18_$12| |q_$2_$12|) (= |f_$9_$12| |g_$1_$12|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$12| |q_$2_$12| |g_$1_$12|) perm$R) |howMuch_$1_$12|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$12| |q_$2_$12| |g_$1_$12|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$ref$ |m_$11_$12| |o_$18_$12| |f_$9_$12| |howMuch_$1_$12|) |q_$2_$12| |g_$1_$12|) perm$R))))
      (forall( (|m_$11_$13| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$13| ref) (|f_$9_$13| Field$Mu$) (|howMuch_$1_$13| Int) (|q_$2_$13| ref) (|g_$1_$13| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Mu$ |m_$11_$13| |o_$18_$13| |f_$9_$13| |howMuch_$1_$13|) |q_$2_$13| |g_$1_$13|) perm$R) (ite$Int$ (and (= |o_$18_$13| |q_$2_$13|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$13| |q_$2_$13| |g_$1_$13|) perm$R) |howMuch_$1_$13|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$13| |q_$2_$13| |g_$1_$13|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Mu$ |m_$11_$13| |o_$18_$13| |f_$9_$13| |howMuch_$1_$13|) |q_$2_$13| |g_$1_$13|) perm$R))))
      (forall( (|m_$11_$14| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$14| ref) (|f_$9_$14| Field$Seq$Int$$) (|howMuch_$1_$14| Int) (|q_$2_$14| ref) (|g_$1_$14| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Seq$Int$$ |m_$11_$14| |o_$18_$14| |f_$9_$14| |howMuch_$1_$14|) |q_$2_$14| |g_$1_$14|) perm$R) (ite$Int$ (and (= |o_$18_$14| |q_$2_$14|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$14| |q_$2_$14| |g_$1_$14|) perm$R) |howMuch_$1_$14|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$11_$14| |q_$2_$14| |g_$1_$14|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Seq$Int$$ |m_$11_$14| |o_$18_$14| |f_$9_$14| |howMuch_$1_$14|) |q_$2_$14| |g_$1_$14|) perm$R))))
      (forall( (|m_$11_$15| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$15| ref) (|f_$9_$15| Field$Bool$) (|howMuch_$1_$15| Int) (|q_$2_$15| ref) (|g_$1_$15| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Bool$ |m_$11_$15| |o_$18_$15| |f_$9_$15| |howMuch_$1_$15|) |q_$2_$15| |g_$1_$15|) perm$R) (ite$Int$ (and (= |o_$18_$15| |q_$2_$15|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$15| |q_$2_$15| |g_$1_$15|) perm$R) |howMuch_$1_$15|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$15| |q_$2_$15| |g_$1_$15|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Bool$ |m_$11_$15| |o_$18_$15| |f_$9_$15| |howMuch_$1_$15|) |q_$2_$15| |g_$1_$15|) perm$R))))
      (forall( (|m_$11_$16| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$16| ref) (|f_$9_$16| Field$Int$) (|howMuch_$1_$16| Int) (|q_$2_$16| ref) (|g_$1_$16| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Int$ |m_$11_$16| |o_$18_$16| |f_$9_$16| |howMuch_$1_$16|) |q_$2_$16| |g_$1_$16|) perm$R) (ite$Int$ (and (= |o_$18_$16| |q_$2_$16|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$16| |q_$2_$16| |g_$1_$16|) perm$R) |howMuch_$1_$16|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$16| |q_$2_$16| |g_$1_$16|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Int$ |m_$11_$16| |o_$18_$16| |f_$9_$16| |howMuch_$1_$16|) |q_$2_$16| |g_$1_$16|) perm$R))))
      (forall( (|m_$11_$17| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$17| ref) (|f_$9_$17| Field$ref$) (|howMuch_$1_$17| Int) (|q_$2_$17| ref) (|g_$1_$17| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$ref$ |m_$11_$17| |o_$18_$17| |f_$9_$17| |howMuch_$1_$17|) |q_$2_$17| |g_$1_$17|) perm$R) (ite$Int$ (and (= |o_$18_$17| |q_$2_$17|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$17| |q_$2_$17| |g_$1_$17|) perm$R) |howMuch_$1_$17|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$17| |q_$2_$17| |g_$1_$17|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$ref$ |m_$11_$17| |o_$18_$17| |f_$9_$17| |howMuch_$1_$17|) |q_$2_$17| |g_$1_$17|) perm$R))))
      (forall( (|m_$11_$18| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$18| ref) (|f_$9_$18| Field$Mu$) (|howMuch_$1_$18| Int) (|q_$2_$18| ref) (|g_$1_$18| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Mu$ |m_$11_$18| |o_$18_$18| |f_$9_$18| |howMuch_$1_$18|) |q_$2_$18| |g_$1_$18|) perm$R) (ite$Int$ (and (= |o_$18_$18| |q_$2_$18|) (= |f_$9_$18| |g_$1_$18|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$18| |q_$2_$18| |g_$1_$18|) perm$R) |howMuch_$1_$18|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$18| |q_$2_$18| |g_$1_$18|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Mu$ |m_$11_$18| |o_$18_$18| |f_$9_$18| |howMuch_$1_$18|) |q_$2_$18| |g_$1_$18|) perm$R))))
      (forall( (|m_$11_$19| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$19| ref) (|f_$9_$19| Field$Seq$Int$$) (|howMuch_$1_$19| Int) (|q_$2_$19| ref) (|g_$1_$19| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Seq$Int$$ |m_$11_$19| |o_$18_$19| |f_$9_$19| |howMuch_$1_$19|) |q_$2_$19| |g_$1_$19|) perm$R) (ite$Int$ (and (= |o_$18_$19| |q_$2_$19|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$19| |q_$2_$19| |g_$1_$19|) perm$R) |howMuch_$1_$19|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$11_$19| |q_$2_$19| |g_$1_$19|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Seq$Int$$ |m_$11_$19| |o_$18_$19| |f_$9_$19| |howMuch_$1_$19|) |q_$2_$19| |g_$1_$19|) perm$R))))
      (forall( (|m_$11_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$2| ref) (|f_$9_$2| Field$ref$) (|howMuch_$1_$2| Int) (|q_$2_$2| ref) (|g_$1_$2| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$ref$ |m_$11_$2| |o_$18_$2| |f_$9_$2| |howMuch_$1_$2|) |q_$2_$2| |g_$1_$2|) perm$R) (ite$Int$ (and (= |o_$18_$2| |q_$2_$2|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$2| |q_$2_$2| |g_$1_$2|) perm$R) |howMuch_$1_$2|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$2| |q_$2_$2| |g_$1_$2|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$ref$ |m_$11_$2| |o_$18_$2| |f_$9_$2| |howMuch_$1_$2|) |q_$2_$2| |g_$1_$2|) perm$R))))
      (forall( (|m_$11_$20| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$20| ref) (|f_$9_$20| Field$Bool$) (|howMuch_$1_$20| Int) (|q_$2_$20| ref) (|g_$1_$20| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Bool$ |m_$11_$20| |o_$18_$20| |f_$9_$20| |howMuch_$1_$20|) |q_$2_$20| |g_$1_$20|) perm$R) (ite$Int$ (and (= |o_$18_$20| |q_$2_$20|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$20| |q_$2_$20| |g_$1_$20|) perm$R) |howMuch_$1_$20|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$20| |q_$2_$20| |g_$1_$20|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Bool$ |m_$11_$20| |o_$18_$20| |f_$9_$20| |howMuch_$1_$20|) |q_$2_$20| |g_$1_$20|) perm$R))))
      (forall( (|m_$11_$21| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$21| ref) (|f_$9_$21| Field$Int$) (|howMuch_$1_$21| Int) (|q_$2_$21| ref) (|g_$1_$21| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Int$ |m_$11_$21| |o_$18_$21| |f_$9_$21| |howMuch_$1_$21|) |q_$2_$21| |g_$1_$21|) perm$R) (ite$Int$ (and (= |o_$18_$21| |q_$2_$21|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$21| |q_$2_$21| |g_$1_$21|) perm$R) |howMuch_$1_$21|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$21| |q_$2_$21| |g_$1_$21|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Int$ |m_$11_$21| |o_$18_$21| |f_$9_$21| |howMuch_$1_$21|) |q_$2_$21| |g_$1_$21|) perm$R))))
      (forall( (|m_$11_$22| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$22| ref) (|f_$9_$22| Field$ref$) (|howMuch_$1_$22| Int) (|q_$2_$22| ref) (|g_$1_$22| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$ref$ |m_$11_$22| |o_$18_$22| |f_$9_$22| |howMuch_$1_$22|) |q_$2_$22| |g_$1_$22|) perm$R) (ite$Int$ (and (= |o_$18_$22| |q_$2_$22|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$22| |q_$2_$22| |g_$1_$22|) perm$R) |howMuch_$1_$22|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$22| |q_$2_$22| |g_$1_$22|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$ref$ |m_$11_$22| |o_$18_$22| |f_$9_$22| |howMuch_$1_$22|) |q_$2_$22| |g_$1_$22|) perm$R))))
      (forall( (|m_$11_$23| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$23| ref) (|f_$9_$23| Field$Mu$) (|howMuch_$1_$23| Int) (|q_$2_$23| ref) (|g_$1_$23| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Mu$ |m_$11_$23| |o_$18_$23| |f_$9_$23| |howMuch_$1_$23|) |q_$2_$23| |g_$1_$23|) perm$R) (ite$Int$ (and (= |o_$18_$23| |q_$2_$23|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$23| |q_$2_$23| |g_$1_$23|) perm$R) |howMuch_$1_$23|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$23| |q_$2_$23| |g_$1_$23|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Mu$ |m_$11_$23| |o_$18_$23| |f_$9_$23| |howMuch_$1_$23|) |q_$2_$23| |g_$1_$23|) perm$R))))
      (forall( (|m_$11_$24| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$24| ref) (|f_$9_$24| Field$Seq$Int$$) (|howMuch_$1_$24| Int) (|q_$2_$24| ref) (|g_$1_$24| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Seq$Int$$ |m_$11_$24| |o_$18_$24| |f_$9_$24| |howMuch_$1_$24|) |q_$2_$24| |g_$1_$24|) perm$R) (ite$Int$ (and (= |o_$18_$24| |q_$2_$24|) (= |f_$9_$24| |g_$1_$24|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$24| |q_$2_$24| |g_$1_$24|) perm$R) |howMuch_$1_$24|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$11_$24| |q_$2_$24| |g_$1_$24|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (IncPerm$Seq$Int$$ |m_$11_$24| |o_$18_$24| |f_$9_$24| |howMuch_$1_$24|) |q_$2_$24| |g_$1_$24|) perm$R))))
      (forall( (|m_$11_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$3| ref) (|f_$9_$3| Field$Mu$) (|howMuch_$1_$3| Int) (|q_$2_$3| ref) (|g_$1_$3| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Mu$ |m_$11_$3| |o_$18_$3| |f_$9_$3| |howMuch_$1_$3|) |q_$2_$3| |g_$1_$3|) perm$R) (ite$Int$ (and (= |o_$18_$3| |q_$2_$3|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$3| |q_$2_$3| |g_$1_$3|) perm$R) |howMuch_$1_$3|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$3| |q_$2_$3| |g_$1_$3|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Mu$ |m_$11_$3| |o_$18_$3| |f_$9_$3| |howMuch_$1_$3|) |q_$2_$3| |g_$1_$3|) perm$R))))
      (forall( (|m_$11_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$4| ref) (|f_$9_$4| Field$Seq$Int$$) (|howMuch_$1_$4| Int) (|q_$2_$4| ref) (|g_$1_$4| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Seq$Int$$ |m_$11_$4| |o_$18_$4| |f_$9_$4| |howMuch_$1_$4|) |q_$2_$4| |g_$1_$4|) perm$R) (ite$Int$ (and (= |o_$18_$4| |q_$2_$4|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$4| |q_$2_$4| |g_$1_$4|) perm$R) |howMuch_$1_$4|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$11_$4| |q_$2_$4| |g_$1_$4|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Seq$Int$$ |m_$11_$4| |o_$18_$4| |f_$9_$4| |howMuch_$1_$4|) |q_$2_$4| |g_$1_$4|) perm$R))))
      (forall( (|m_$11_$5| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$5| ref) (|f_$9_$5| Field$Bool$) (|howMuch_$1_$5| Int) (|q_$2_$5| ref) (|g_$1_$5| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Bool$ |m_$11_$5| |o_$18_$5| |f_$9_$5| |howMuch_$1_$5|) |q_$2_$5| |g_$1_$5|) perm$R) (ite$Int$ (and (= |o_$18_$5| |q_$2_$5|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$5| |q_$2_$5| |g_$1_$5|) perm$R) |howMuch_$1_$5|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$5| |q_$2_$5| |g_$1_$5|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Bool$ |m_$11_$5| |o_$18_$5| |f_$9_$5| |howMuch_$1_$5|) |q_$2_$5| |g_$1_$5|) perm$R))))
      (forall( (|m_$11_$6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$6| ref) (|f_$9_$6| Field$Int$) (|howMuch_$1_$6| Int) (|q_$2_$6| ref) (|g_$1_$6| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Int$ |m_$11_$6| |o_$18_$6| |f_$9_$6| |howMuch_$1_$6|) |q_$2_$6| |g_$1_$6|) perm$R) (ite$Int$ (and (= |o_$18_$6| |q_$2_$6|) (= |f_$9_$6| |g_$1_$6|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$6| |q_$2_$6| |g_$1_$6|) perm$R) |howMuch_$1_$6|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$6| |q_$2_$6| |g_$1_$6|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Int$ |m_$11_$6| |o_$18_$6| |f_$9_$6| |howMuch_$1_$6|) |q_$2_$6| |g_$1_$6|) perm$R))))
      (forall( (|m_$11_$7| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$7| ref) (|f_$9_$7| Field$ref$) (|howMuch_$1_$7| Int) (|q_$2_$7| ref) (|g_$1_$7| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$ref$ |m_$11_$7| |o_$18_$7| |f_$9_$7| |howMuch_$1_$7|) |q_$2_$7| |g_$1_$7|) perm$R) (ite$Int$ (and (= |o_$18_$7| |q_$2_$7|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$7| |q_$2_$7| |g_$1_$7|) perm$R) |howMuch_$1_$7|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$7| |q_$2_$7| |g_$1_$7|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$ref$ |m_$11_$7| |o_$18_$7| |f_$9_$7| |howMuch_$1_$7|) |q_$2_$7| |g_$1_$7|) perm$R))))
      (forall( (|m_$11_$8| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$8| ref) (|f_$9_$8| Field$Mu$) (|howMuch_$1_$8| Int) (|q_$2_$8| ref) (|g_$1_$8| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Mu$ |m_$11_$8| |o_$18_$8| |f_$9_$8| |howMuch_$1_$8|) |q_$2_$8| |g_$1_$8|) perm$R) (ite$Int$ (and (= |o_$18_$8| |q_$2_$8|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$8| |q_$2_$8| |g_$1_$8|) perm$R) |howMuch_$1_$8|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$8| |q_$2_$8| |g_$1_$8|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Mu$ |m_$11_$8| |o_$18_$8| |f_$9_$8| |howMuch_$1_$8|) |q_$2_$8| |g_$1_$8|) perm$R))))
      (forall( (|m_$11_$9| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$18_$9| ref) (|f_$9_$9| Field$Seq$Int$$) (|howMuch_$1_$9| Int) (|q_$2_$9| ref) (|g_$1_$9| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Seq$Int$$ |m_$11_$9| |o_$18_$9| |f_$9_$9| |howMuch_$1_$9|) |q_$2_$9| |g_$1_$9|) perm$R) (ite$Int$ (and (= |o_$18_$9| |q_$2_$9|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$9| |q_$2_$9| |g_$1_$9|) perm$R) |howMuch_$1_$9|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$11_$9| |q_$2_$9| |g_$1_$9|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Seq$Int$$ |m_$11_$9| |o_$18_$9| |f_$9_$9| |howMuch_$1_$9|) |q_$2_$9| |g_$1_$9|) perm$R))))
      (forall( (|m_$4_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|sm_$1_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$2| ref) (|f_$3_$0| Field$Bool$))(!(= (CanRead$Bool$ |m_$4_$0| |sm_$1_$0| |obj_$2| |f_$3_$0|) (or (or (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$4_$0| |obj_$2| |f_$3_$0|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$4_$0| |obj_$2| |f_$3_$0|) perm$N))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |sm_$1_$0| |obj_$2| |f_$3_$0|) perm$R))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |sm_$1_$0| |obj_$2| |f_$3_$0|) perm$N))))  :pattern ( (CanRead$Bool$ |m_$4_$0| |sm_$1_$0| |obj_$2| |f_$3_$0|))))
      (forall( (|m_$4_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|sm_$1_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$3| ref) (|f_$3_$1| Field$Int$))(!(= (CanRead$Int$ |m_$4_$1| |sm_$1_$1| |obj_$3| |f_$3_$1|) (or (or (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$4_$1| |obj_$3| |f_$3_$1|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$4_$1| |obj_$3| |f_$3_$1|) perm$N))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |sm_$1_$1| |obj_$3| |f_$3_$1|) perm$R))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |sm_$1_$1| |obj_$3| |f_$3_$1|) perm$N))))  :pattern ( (CanRead$Int$ |m_$4_$1| |sm_$1_$1| |obj_$3| |f_$3_$1|))))
      (forall( (|m_$4_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|sm_$1_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$4| ref) (|f_$3_$2| Field$ref$))(!(= (CanRead$ref$ |m_$4_$2| |sm_$1_$2| |obj_$4| |f_$3_$2|) (or (or (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$4_$2| |obj_$4| |f_$3_$2|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$4_$2| |obj_$4| |f_$3_$2|) perm$N))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |sm_$1_$2| |obj_$4| |f_$3_$2|) perm$R))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |sm_$1_$2| |obj_$4| |f_$3_$2|) perm$N))))  :pattern ( (CanRead$ref$ |m_$4_$2| |sm_$1_$2| |obj_$4| |f_$3_$2|))))
      (forall( (|m_$4_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|sm_$1_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$5| ref) (|f_$3_$3| Field$Mu$))(!(= (CanRead$Mu$ |m_$4_$3| |sm_$1_$3| |obj_$5| |f_$3_$3|) (or (or (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$4_$3| |obj_$5| |f_$3_$3|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$4_$3| |obj_$5| |f_$3_$3|) perm$N))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |sm_$1_$3| |obj_$5| |f_$3_$3|) perm$R))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |sm_$1_$3| |obj_$5| |f_$3_$3|) perm$N))))  :pattern ( (CanRead$Mu$ |m_$4_$3| |sm_$1_$3| |obj_$5| |f_$3_$3|))))
      (forall( (|m_$4_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|sm_$1_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$6| ref) (|f_$3_$4| Field$Seq$Int$$))(!(= (CanRead$Seq$Int$$ |m_$4_$4| |sm_$1_$4| |obj_$6| |f_$3_$4|) (or (or (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$4_$4| |obj_$6| |f_$3_$4|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$4_$4| |obj_$6| |f_$3_$4|) perm$N))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |sm_$1_$4| |obj_$6| |f_$3_$4|) perm$R))) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |sm_$1_$4| |obj_$6| |f_$3_$4|) perm$N))))  :pattern ( (CanRead$Seq$Int$$ |m_$4_$4| |sm_$1_$4| |obj_$6| |f_$3_$4|))))
      (forall( (|m_$6_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$1_$0| ref) (|f_$5_$0| Field$Bool$))(!(= (CanWrite$Bool$ |m_$6_$0| |obj_$1_$0| |f_$5_$0|) (and (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$6_$0| |obj_$1_$0| |f_$5_$0|) perm$R) Permission$FullFraction) (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$6_$0| |obj_$1_$0| |f_$5_$0|) perm$N) 0)))  :pattern ( (CanWrite$Bool$ |m_$6_$0| |obj_$1_$0| |f_$5_$0|))))
      (forall( (|m_$6_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$1_$1| ref) (|f_$5_$1| Field$Int$))(!(= (CanWrite$Int$ |m_$6_$1| |obj_$1_$1| |f_$5_$1|) (and (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$6_$1| |obj_$1_$1| |f_$5_$1|) perm$R) Permission$FullFraction) (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$6_$1| |obj_$1_$1| |f_$5_$1|) perm$N) 0)))  :pattern ( (CanWrite$Int$ |m_$6_$1| |obj_$1_$1| |f_$5_$1|))))
      (forall( (|m_$6_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$1_$2| ref) (|f_$5_$2| Field$ref$))(!(= (CanWrite$ref$ |m_$6_$2| |obj_$1_$2| |f_$5_$2|) (and (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$6_$2| |obj_$1_$2| |f_$5_$2|) perm$R) Permission$FullFraction) (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$6_$2| |obj_$1_$2| |f_$5_$2|) perm$N) 0)))  :pattern ( (CanWrite$ref$ |m_$6_$2| |obj_$1_$2| |f_$5_$2|))))
      (forall( (|m_$6_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$1_$3| ref) (|f_$5_$3| Field$Mu$))(!(= (CanWrite$Mu$ |m_$6_$3| |obj_$1_$3| |f_$5_$3|) (and (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$6_$3| |obj_$1_$3| |f_$5_$3|) perm$R) Permission$FullFraction) (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$6_$3| |obj_$1_$3| |f_$5_$3|) perm$N) 0)))  :pattern ( (CanWrite$Mu$ |m_$6_$3| |obj_$1_$3| |f_$5_$3|))))
      (forall( (|m_$6_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$1_$4| ref) (|f_$5_$4| Field$Seq$Int$$))(!(= (CanWrite$Seq$Int$$ |m_$6_$4| |obj_$1_$4| |f_$5_$4|) (and (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$6_$4| |obj_$1_$4| |f_$5_$4|) perm$R) Permission$FullFraction) (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$6_$4| |obj_$1_$4| |f_$5_$4|) perm$N) 0)))  :pattern ( (CanWrite$Seq$Int$$ |m_$6_$4| |obj_$1_$4| |f_$5_$4|))))
      (forall( (|m_$7| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodMask |m_$7|) (and (and (and (and (forall( (|o_$14_$0| ref) (|f_$6_$0| Field$Bool$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7| |o_$14_$0| |f_$6_$0|) perm$R)) (=> (NonPredicateField$Bool$ |f_$6_$0|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7| |o_$14_$0| |f_$6_$0|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7| |o_$14_$0| |f_$6_$0|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7| |o_$14_$0| |f_$6_$0|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7| |o_$14_$0| |f_$6_$0|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7| |o_$14_$0| |f_$6_$0|) perm$R))))) (forall( (|o_$14_$1| ref) (|f_$6_$1| Field$Int$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7| |o_$14_$1| |f_$6_$1|) perm$R)) (=> (NonPredicateField$Int$ |f_$6_$1|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7| |o_$14_$1| |f_$6_$1|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7| |o_$14_$1| |f_$6_$1|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7| |o_$14_$1| |f_$6_$1|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7| |o_$14_$1| |f_$6_$1|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7| |o_$14_$1| |f_$6_$1|) perm$R)))))) (forall( (|o_$14_$2| ref) (|f_$6_$2| Field$ref$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7| |o_$14_$2| |f_$6_$2|) perm$R)) (=> (NonPredicateField$ref$ |f_$6_$2|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7| |o_$14_$2| |f_$6_$2|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7| |o_$14_$2| |f_$6_$2|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7| |o_$14_$2| |f_$6_$2|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7| |o_$14_$2| |f_$6_$2|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7| |o_$14_$2| |f_$6_$2|) perm$R)))))) (forall( (|o_$14_$3| ref) (|f_$6_$3| Field$Mu$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7| |o_$14_$3| |f_$6_$3|) perm$R)) (=> (NonPredicateField$Mu$ |f_$6_$3|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7| |o_$14_$3| |f_$6_$3|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7| |o_$14_$3| |f_$6_$3|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7| |o_$14_$3| |f_$6_$3|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7| |o_$14_$3| |f_$6_$3|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7| |o_$14_$3| |f_$6_$3|) perm$R)))))) (forall( (|o_$14_$4| ref) (|f_$6_$4| Field$Seq$Int$$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$7| |o_$14_$4| |f_$6_$4|) perm$R)) (=> (NonPredicateField$Seq$Int$$ |f_$6_$4|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$7| |o_$14_$4| |f_$6_$4|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$7| |o_$14_$4| |f_$6_$4|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$7| |o_$14_$4| |f_$6_$4|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$7| |o_$14_$4| |f_$6_$4|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$7| |o_$14_$4| |f_$6_$4|) perm$R)))))))  :pattern ( (IsGoodMask |m_$7|))))
      (forall( (|m_$9_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$0| ref) (|f_$7_$0| Field$Bool$) (|howMuch_$3| Int) (|q_$0_$0| ref) (|g_$4| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Bool$ |m_$9_$0| |o_$16_$0| |f_$7_$0| |howMuch_$3|) |q_$0_$0| |g_$4|) perm$R) (ite$Int$ (and (= |o_$16_$0| |q_$0_$0|) (= |f_$7_$0| |g_$4|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$0| |q_$0_$0| |g_$4|) perm$R) |howMuch_$3|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$0| |q_$0_$0| |g_$4|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Bool$ |m_$9_$0| |o_$16_$0| |f_$7_$0| |howMuch_$3|) |q_$0_$0| |g_$4|) perm$R))))
      (forall( (|m_$9_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$1| ref) (|f_$7_$1| Field$Int$) (|howMuch_$4| Int) (|q_$0_$1| ref) (|g_$5| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Int$ |m_$9_$1| |o_$16_$1| |f_$7_$1| |howMuch_$4|) |q_$0_$1| |g_$5|) perm$R) (ite$Int$ (and (= |o_$16_$1| |q_$0_$1|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$1| |q_$0_$1| |g_$5|) perm$R) |howMuch_$4|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$1| |q_$0_$1| |g_$5|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Int$ |m_$9_$1| |o_$16_$1| |f_$7_$1| |howMuch_$4|) |q_$0_$1| |g_$5|) perm$R))))
      (forall( (|m_$9_$10| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$10| ref) (|f_$7_$10| Field$Bool$) (|howMuch_$13| Int) (|q_$0_$10| ref) (|g_$14| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Bool$ |m_$9_$10| |o_$16_$10| |f_$7_$10| |howMuch_$13|) |q_$0_$10| |g_$14|) perm$R) (ite$Int$ (and (= |o_$16_$10| |q_$0_$10|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$10| |q_$0_$10| |g_$14|) perm$R) |howMuch_$13|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$10| |q_$0_$10| |g_$14|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Bool$ |m_$9_$10| |o_$16_$10| |f_$7_$10| |howMuch_$13|) |q_$0_$10| |g_$14|) perm$R))))
      (forall( (|m_$9_$11| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$11| ref) (|f_$7_$11| Field$Int$) (|howMuch_$14| Int) (|q_$0_$11| ref) (|g_$15| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Int$ |m_$9_$11| |o_$16_$11| |f_$7_$11| |howMuch_$14|) |q_$0_$11| |g_$15|) perm$R) (ite$Int$ (and (= |o_$16_$11| |q_$0_$11|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$11| |q_$0_$11| |g_$15|) perm$R) |howMuch_$14|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$11| |q_$0_$11| |g_$15|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Int$ |m_$9_$11| |o_$16_$11| |f_$7_$11| |howMuch_$14|) |q_$0_$11| |g_$15|) perm$R))))
      (forall( (|m_$9_$12| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$12| ref) (|f_$7_$12| Field$ref$) (|howMuch_$15| Int) (|q_$0_$12| ref) (|g_$16| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$ref$ |m_$9_$12| |o_$16_$12| |f_$7_$12| |howMuch_$15|) |q_$0_$12| |g_$16|) perm$R) (ite$Int$ (and (= |o_$16_$12| |q_$0_$12|) (= |f_$7_$12| |g_$16|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$12| |q_$0_$12| |g_$16|) perm$R) |howMuch_$15|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$12| |q_$0_$12| |g_$16|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$ref$ |m_$9_$12| |o_$16_$12| |f_$7_$12| |howMuch_$15|) |q_$0_$12| |g_$16|) perm$R))))
      (forall( (|m_$9_$13| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$13| ref) (|f_$7_$13| Field$Mu$) (|howMuch_$16| Int) (|q_$0_$13| ref) (|g_$17| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Mu$ |m_$9_$13| |o_$16_$13| |f_$7_$13| |howMuch_$16|) |q_$0_$13| |g_$17|) perm$R) (ite$Int$ (and (= |o_$16_$13| |q_$0_$13|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$13| |q_$0_$13| |g_$17|) perm$R) |howMuch_$16|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$13| |q_$0_$13| |g_$17|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Mu$ |m_$9_$13| |o_$16_$13| |f_$7_$13| |howMuch_$16|) |q_$0_$13| |g_$17|) perm$R))))
      (forall( (|m_$9_$14| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$14| ref) (|f_$7_$14| Field$Seq$Int$$) (|howMuch_$17| Int) (|q_$0_$14| ref) (|g_$18| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Seq$Int$$ |m_$9_$14| |o_$16_$14| |f_$7_$14| |howMuch_$17|) |q_$0_$14| |g_$18|) perm$R) (ite$Int$ (and (= |o_$16_$14| |q_$0_$14|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$14| |q_$0_$14| |g_$18|) perm$R) |howMuch_$17|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$14| |q_$0_$14| |g_$18|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Seq$Int$$ |m_$9_$14| |o_$16_$14| |f_$7_$14| |howMuch_$17|) |q_$0_$14| |g_$18|) perm$R))))
      (forall( (|m_$9_$15| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$15| ref) (|f_$7_$15| Field$Bool$) (|howMuch_$18| Int) (|q_$0_$15| ref) (|g_$19| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Bool$ |m_$9_$15| |o_$16_$15| |f_$7_$15| |howMuch_$18|) |q_$0_$15| |g_$19|) perm$R) (ite$Int$ (and (= |o_$16_$15| |q_$0_$15|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$15| |q_$0_$15| |g_$19|) perm$R) |howMuch_$18|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$15| |q_$0_$15| |g_$19|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Bool$ |m_$9_$15| |o_$16_$15| |f_$7_$15| |howMuch_$18|) |q_$0_$15| |g_$19|) perm$R))))
      (forall( (|m_$9_$16| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$16| ref) (|f_$7_$16| Field$Int$) (|howMuch_$19| Int) (|q_$0_$16| ref) (|g_$20| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Int$ |m_$9_$16| |o_$16_$16| |f_$7_$16| |howMuch_$19|) |q_$0_$16| |g_$20|) perm$R) (ite$Int$ (and (= |o_$16_$16| |q_$0_$16|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$16| |q_$0_$16| |g_$20|) perm$R) |howMuch_$19|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$16| |q_$0_$16| |g_$20|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Int$ |m_$9_$16| |o_$16_$16| |f_$7_$16| |howMuch_$19|) |q_$0_$16| |g_$20|) perm$R))))
      (forall( (|m_$9_$17| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$17| ref) (|f_$7_$17| Field$ref$) (|howMuch_$20| Int) (|q_$0_$17| ref) (|g_$21| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$ref$ |m_$9_$17| |o_$16_$17| |f_$7_$17| |howMuch_$20|) |q_$0_$17| |g_$21|) perm$R) (ite$Int$ (and (= |o_$16_$17| |q_$0_$17|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$17| |q_$0_$17| |g_$21|) perm$R) |howMuch_$20|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$17| |q_$0_$17| |g_$21|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$ref$ |m_$9_$17| |o_$16_$17| |f_$7_$17| |howMuch_$20|) |q_$0_$17| |g_$21|) perm$R))))
      (forall( (|m_$9_$18| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$18| ref) (|f_$7_$18| Field$Mu$) (|howMuch_$21| Int) (|q_$0_$18| ref) (|g_$22| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Mu$ |m_$9_$18| |o_$16_$18| |f_$7_$18| |howMuch_$21|) |q_$0_$18| |g_$22|) perm$R) (ite$Int$ (and (= |o_$16_$18| |q_$0_$18|) (= |f_$7_$18| |g_$22|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$18| |q_$0_$18| |g_$22|) perm$R) |howMuch_$21|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$18| |q_$0_$18| |g_$22|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Mu$ |m_$9_$18| |o_$16_$18| |f_$7_$18| |howMuch_$21|) |q_$0_$18| |g_$22|) perm$R))))
      (forall( (|m_$9_$19| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$19| ref) (|f_$7_$19| Field$Seq$Int$$) (|howMuch_$22| Int) (|q_$0_$19| ref) (|g_$23| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Seq$Int$$ |m_$9_$19| |o_$16_$19| |f_$7_$19| |howMuch_$22|) |q_$0_$19| |g_$23|) perm$R) (ite$Int$ (and (= |o_$16_$19| |q_$0_$19|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$19| |q_$0_$19| |g_$23|) perm$R) |howMuch_$22|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$19| |q_$0_$19| |g_$23|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Seq$Int$$ |m_$9_$19| |o_$16_$19| |f_$7_$19| |howMuch_$22|) |q_$0_$19| |g_$23|) perm$R))))
      (forall( (|m_$9_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$2| ref) (|f_$7_$2| Field$ref$) (|howMuch_$5| Int) (|q_$0_$2| ref) (|g_$6| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$ref$ |m_$9_$2| |o_$16_$2| |f_$7_$2| |howMuch_$5|) |q_$0_$2| |g_$6|) perm$R) (ite$Int$ (and (= |o_$16_$2| |q_$0_$2|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$2| |q_$0_$2| |g_$6|) perm$R) |howMuch_$5|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$2| |q_$0_$2| |g_$6|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$ref$ |m_$9_$2| |o_$16_$2| |f_$7_$2| |howMuch_$5|) |q_$0_$2| |g_$6|) perm$R))))
      (forall( (|m_$9_$20| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$20| ref) (|f_$7_$20| Field$Bool$) (|howMuch_$23| Int) (|q_$0_$20| ref) (|g_$24| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Bool$ |m_$9_$20| |o_$16_$20| |f_$7_$20| |howMuch_$23|) |q_$0_$20| |g_$24|) perm$R) (ite$Int$ (and (= |o_$16_$20| |q_$0_$20|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$20| |q_$0_$20| |g_$24|) perm$R) |howMuch_$23|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$20| |q_$0_$20| |g_$24|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Bool$ |m_$9_$20| |o_$16_$20| |f_$7_$20| |howMuch_$23|) |q_$0_$20| |g_$24|) perm$R))))
      (forall( (|m_$9_$21| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$21| ref) (|f_$7_$21| Field$Int$) (|howMuch_$24| Int) (|q_$0_$21| ref) (|g_$25| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Int$ |m_$9_$21| |o_$16_$21| |f_$7_$21| |howMuch_$24|) |q_$0_$21| |g_$25|) perm$R) (ite$Int$ (and (= |o_$16_$21| |q_$0_$21|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$21| |q_$0_$21| |g_$25|) perm$R) |howMuch_$24|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$21| |q_$0_$21| |g_$25|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Int$ |m_$9_$21| |o_$16_$21| |f_$7_$21| |howMuch_$24|) |q_$0_$21| |g_$25|) perm$R))))
      (forall( (|m_$9_$22| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$22| ref) (|f_$7_$22| Field$ref$) (|howMuch_$25| Int) (|q_$0_$22| ref) (|g_$26| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$ref$ |m_$9_$22| |o_$16_$22| |f_$7_$22| |howMuch_$25|) |q_$0_$22| |g_$26|) perm$R) (ite$Int$ (and (= |o_$16_$22| |q_$0_$22|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$22| |q_$0_$22| |g_$26|) perm$R) |howMuch_$25|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$22| |q_$0_$22| |g_$26|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$ref$ |m_$9_$22| |o_$16_$22| |f_$7_$22| |howMuch_$25|) |q_$0_$22| |g_$26|) perm$R))))
      (forall( (|m_$9_$23| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$23| ref) (|f_$7_$23| Field$Mu$) (|howMuch_$26| Int) (|q_$0_$23| ref) (|g_$27| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Mu$ |m_$9_$23| |o_$16_$23| |f_$7_$23| |howMuch_$26|) |q_$0_$23| |g_$27|) perm$R) (ite$Int$ (and (= |o_$16_$23| |q_$0_$23|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$23| |q_$0_$23| |g_$27|) perm$R) |howMuch_$26|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$23| |q_$0_$23| |g_$27|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Mu$ |m_$9_$23| |o_$16_$23| |f_$7_$23| |howMuch_$26|) |q_$0_$23| |g_$27|) perm$R))))
      (forall( (|m_$9_$24| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$24| ref) (|f_$7_$24| Field$Seq$Int$$) (|howMuch_$27| Int) (|q_$0_$24| ref) (|g_$28| Field$Seq$Int$$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Seq$Int$$ |m_$9_$24| |o_$16_$24| |f_$7_$24| |howMuch_$27|) |q_$0_$24| |g_$28|) perm$R) (ite$Int$ (and (= |o_$16_$24| |q_$0_$24|) (= |f_$7_$24| |g_$28|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$24| |q_$0_$24| |g_$28|) perm$R) |howMuch_$27|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ |m_$9_$24| |q_$0_$24| |g_$28|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ (DecPerm$Seq$Int$$ |m_$9_$24| |o_$16_$24| |f_$7_$24| |howMuch_$27|) |q_$0_$24| |g_$28|) perm$R))))
      (forall( (|m_$9_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$3| ref) (|f_$7_$3| Field$Mu$) (|howMuch_$6| Int) (|q_$0_$3| ref) (|g_$7| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Mu$ |m_$9_$3| |o_$16_$3| |f_$7_$3| |howMuch_$6|) |q_$0_$3| |g_$7|) perm$R) (ite$Int$ (and (= |o_$16_$3| |q_$0_$3|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$3| |q_$0_$3| |g_$7|) perm$R) |howMuch_$6|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$3| |q_$0_$3| |g_$7|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Mu$ |m_$9_$3| |o_$16_$3| |f_$7_$3| |howMuch_$6|) |q_$0_$3| |g_$7|) perm$R))))
      (forall( (|m_$9_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$4| ref) (|f_$7_$4| Field$Seq$Int$$) (|howMuch_$7| Int) (|q_$0_$4| ref) (|g_$8| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Seq$Int$$ |m_$9_$4| |o_$16_$4| |f_$7_$4| |howMuch_$7|) |q_$0_$4| |g_$8|) perm$R) (ite$Int$ (and (= |o_$16_$4| |q_$0_$4|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$4| |q_$0_$4| |g_$8|) perm$R) |howMuch_$7|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$4| |q_$0_$4| |g_$8|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Seq$Int$$ |m_$9_$4| |o_$16_$4| |f_$7_$4| |howMuch_$7|) |q_$0_$4| |g_$8|) perm$R))))
      (forall( (|m_$9_$5| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$5| ref) (|f_$7_$5| Field$Bool$) (|howMuch_$8| Int) (|q_$0_$5| ref) (|g_$9| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Bool$ |m_$9_$5| |o_$16_$5| |f_$7_$5| |howMuch_$8|) |q_$0_$5| |g_$9|) perm$R) (ite$Int$ (and (= |o_$16_$5| |q_$0_$5|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$5| |q_$0_$5| |g_$9|) perm$R) |howMuch_$8|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$5| |q_$0_$5| |g_$9|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Bool$ |m_$9_$5| |o_$16_$5| |f_$7_$5| |howMuch_$8|) |q_$0_$5| |g_$9|) perm$R))))
      (forall( (|m_$9_$6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$6| ref) (|f_$7_$6| Field$Int$) (|howMuch_$9| Int) (|q_$0_$6| ref) (|g_$10| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Int$ |m_$9_$6| |o_$16_$6| |f_$7_$6| |howMuch_$9|) |q_$0_$6| |g_$10|) perm$R) (ite$Int$ (and (= |o_$16_$6| |q_$0_$6|) (= |f_$7_$6| |g_$10|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$6| |q_$0_$6| |g_$10|) perm$R) |howMuch_$9|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$6| |q_$0_$6| |g_$10|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Int$ |m_$9_$6| |o_$16_$6| |f_$7_$6| |howMuch_$9|) |q_$0_$6| |g_$10|) perm$R))))
      (forall( (|m_$9_$7| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$7| ref) (|f_$7_$7| Field$ref$) (|howMuch_$10| Int) (|q_$0_$7| ref) (|g_$11| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$ref$ |m_$9_$7| |o_$16_$7| |f_$7_$7| |howMuch_$10|) |q_$0_$7| |g_$11|) perm$R) (ite$Int$ (and (= |o_$16_$7| |q_$0_$7|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$7| |q_$0_$7| |g_$11|) perm$R) |howMuch_$10|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$7| |q_$0_$7| |g_$11|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$ref$ |m_$9_$7| |o_$16_$7| |f_$7_$7| |howMuch_$10|) |q_$0_$7| |g_$11|) perm$R))))
      (forall( (|m_$9_$8| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$8| ref) (|f_$7_$8| Field$Mu$) (|howMuch_$11| Int) (|q_$0_$8| ref) (|g_$12| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Mu$ |m_$9_$8| |o_$16_$8| |f_$7_$8| |howMuch_$11|) |q_$0_$8| |g_$12|) perm$R) (ite$Int$ (and (= |o_$16_$8| |q_$0_$8|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$8| |q_$0_$8| |g_$12|) perm$R) |howMuch_$11|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$8| |q_$0_$8| |g_$12|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Mu$ |m_$9_$8| |o_$16_$8| |f_$7_$8| |howMuch_$11|) |q_$0_$8| |g_$12|) perm$R))))
      (forall( (|m_$9_$9| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$16_$9| ref) (|f_$7_$9| Field$Seq$Int$$) (|howMuch_$12| Int) (|q_$0_$9| ref) (|g_$13| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Seq$Int$$ |m_$9_$9| |o_$16_$9| |f_$7_$9| |howMuch_$12|) |q_$0_$9| |g_$13|) perm$R) (ite$Int$ (and (= |o_$16_$9| |q_$0_$9|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$9| |q_$0_$9| |g_$13|) perm$R) |howMuch_$12|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$9| |q_$0_$9| |g_$13|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Seq$Int$$ |m_$9_$9| |o_$16_$9| |f_$7_$9| |howMuch_$12|) |q_$0_$9| |g_$13|) perm$R))))
      (forall( (|m| Mu) (|n_$0| Mu))(!(not (and (MuBelow |m| |n_$0|) (MuBelow |n_$0| |m|)))  :pattern ( (MuBelow |m| |n_$0|) (MuBelow |n_$0| |m|))))
      (forall( (|min_$0| Int) (|max_$0| Int) (|j_$4| Int))(!(=> (and (<= 0 |j_$4|) (< |j_$4| (- |max_$0| |min_$0|))) (= (Seq@Index$Int$ (Seq@Range |min_$0| |max_$0|) |j_$4|) (+ |min_$0| |j_$4|)))  :pattern ( (Seq@Index$Int$ (Seq@Range |min_$0| |max_$0|) |j_$4|))))
      (forall( (|min| Int) (|max| Int))(!(and (=> (< |min| |max|) (= (Seq@Length$Int$ (Seq@Range |min| |max|)) (- |max| |min|))) (=> (<= |max| |min|) (= (Seq@Length$Int$ (Seq@Range |min| |max|)) 0)))  :pattern ( (Seq@Length$Int$ (Seq@Range |min| |max|)))))
      (forall( (|n| Int))(!(= (Fractions |n|) (* |n| Permission$denominator))  :pattern ( (Fractions |n|))))
      (forall( (|o_$22| ref))(= (MapRead$$@Map@@ref@To@Int@@$ ZeroCredits |o_$22|) 0))
      (forall( (|o_$25| ref) (|f_$16| Field$Bool$) (|pc_$0| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ ZeroMask |o_$25| |f_$16|) |pc_$0|) 0))
      (forall( (|o_$26| ref) (|f_$17| Field$Int$) (|pc_$1| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask |o_$26| |f_$17|) |pc_$1|) 0))
      (forall( (|o_$27| ref) (|f_$18| Field$ref$) (|pc_$2| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ ZeroMask |o_$27| |f_$18|) |pc_$2|) 0))
      (forall( (|o_$28| ref) (|f_$19| Field$Mu$) (|pc_$3| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ ZeroMask |o_$28| |f_$19|) |pc_$3|) 0))
      (forall( (|o_$29| ref) (|f_$20| Field$Seq$Int$$) (|pc_$4| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ ZeroMask |o_$29| |f_$20|) |pc_$4|) 0))
      (forall( (|s_$0_$0| Seq$Int$))(!(=> (= (Seq@Length$Int$ |s_$0_$0|) 0) (= |s_$0_$0| Seq@Empty$Int$))  :pattern ( (Seq@Length$Int$ |s_$0_$0|))))
      (forall( (|s_$0_$1| Seq$ref$))(!(=> (= (Seq@Length$ref$ |s_$0_$1|) 0) (= |s_$0_$1| Seq@Empty$ref$))  :pattern ( (Seq@Length$ref$ |s_$0_$1|))))
      (forall( (|s_$1_$0| Seq$Int$) (|i_$5| Int) (|v_$2| Int) (|len_$2| Int))(!(=> (<= 0 |len_$2|) (= (Seq@Length$Int$ (Seq@Build$Int$ |s_$1_$0| |i_$5| |v_$2| |len_$2|)) |len_$2|))  :pattern ( (Seq@Length$Int$ (Seq@Build$Int$ |s_$1_$0| |i_$5| |v_$2| |len_$2|)))))
      (forall( (|s_$1_$1| Seq$ref$) (|i_$6| Int) (|v_$3| ref) (|len_$3| Int))(!(=> (<= 0 |len_$3|) (= (Seq@Length$ref$ (Seq@Build$ref$ |s_$1_$1| |i_$6| |v_$3| |len_$3|)) |len_$3|))  :pattern ( (Seq@Length$ref$ (Seq@Build$ref$ |s_$1_$1| |i_$6| |v_$3| |len_$3|)))))
      (forall( (|s_$10_$0| Seq$Int$) (|n_$11_$0| Int) (|j_$3_$0| Int))(!(=> (and (and (<= 0 |n_$11_$0|) (<= 0 |j_$3_$0|)) (< |j_$3_$0| (- (Seq@Length$Int$ |s_$10_$0|) |n_$11_$0|))) (= (Seq@Index$Int$ (Seq@Drop$Int$ |s_$10_$0| |n_$11_$0|) |j_$3_$0|) (Seq@Index$Int$ |s_$10_$0| (+ |j_$3_$0| |n_$11_$0|))))  :weight  25 :pattern ( (Seq@Index$Int$ (Seq@Drop$Int$ |s_$10_$0| |n_$11_$0|) |j_$3_$0|))))
      (forall( (|s_$10_$1| Seq$ref$) (|n_$11_$1| Int) (|j_$3_$1| Int))(!(=> (and (and (<= 0 |n_$11_$1|) (<= 0 |j_$3_$1|)) (< |j_$3_$1| (- (Seq@Length$ref$ |s_$10_$1|) |n_$11_$1|))) (= (Seq@Index$ref$ (Seq@Drop$ref$ |s_$10_$1| |n_$11_$1|) |j_$3_$1|) (Seq@Index$ref$ |s_$10_$1| (+ |j_$3_$1| |n_$11_$1|))))  :weight  25 :pattern ( (Seq@Index$ref$ (Seq@Drop$ref$ |s_$10_$1| |n_$11_$1|) |j_$3_$1|))))
      (forall( (|s_$11_$0| Seq$Int$) (|t_$1_$0| Seq$Int$))(!(and (= (Seq@Take$Int$ (Seq@Append$Int$ |s_$11_$0| |t_$1_$0|) (Seq@Length$Int$ |s_$11_$0|)) |s_$11_$0|) (= (Seq@Drop$Int$ (Seq@Append$Int$ |s_$11_$0| |t_$1_$0|) (Seq@Length$Int$ |s_$11_$0|)) |t_$1_$0|))  :pattern ( (Seq@Append$Int$ |s_$11_$0| |t_$1_$0|))))
      (forall( (|s_$11_$1| Seq$ref$) (|t_$1_$1| Seq$ref$))(!(and (= (Seq@Take$ref$ (Seq@Append$ref$ |s_$11_$1| |t_$1_$1|) (Seq@Length$ref$ |s_$11_$1|)) |s_$11_$1|) (= (Seq@Drop$ref$ (Seq@Append$ref$ |s_$11_$1| |t_$1_$1|) (Seq@Length$ref$ |s_$11_$1|)) |t_$1_$1|))  :pattern ( (Seq@Append$ref$ |s_$11_$1| |t_$1_$1|))))
      (forall( (|s_$12| Seq$Int$))(!(<= 0 (Seq@Length$Int$ |s_$12|))  :pattern ( (Seq@Length$Int$ |s_$12|))))
      (forall( (|s_$13| Seq$ref$))(!(<= 0 (Seq@Length$ref$ |s_$13|))  :pattern ( (Seq@Length$ref$ |s_$13|))))
      (forall( (|s_$2_$0| Seq$Int$) (|i_$0_$0| Int) (|v_$0_$0| Int) (|len_$0_$0| Int) (|n_$4_$0| Int))(!(=> (and (<= 0 |n_$4_$0|) (< |n_$4_$0| |len_$0_$0|)) (and (=> (= |i_$0_$0| |n_$4_$0|) (= (Seq@Index$Int$ (Seq@Build$Int$ |s_$2_$0| |i_$0_$0| |v_$0_$0| |len_$0_$0|) |n_$4_$0|) |v_$0_$0|)) (=> (not (= |i_$0_$0| |n_$4_$0|)) (= (Seq@Index$Int$ (Seq@Build$Int$ |s_$2_$0| |i_$0_$0| |v_$0_$0| |len_$0_$0|) |n_$4_$0|) (Seq@Index$Int$ |s_$2_$0| |n_$4_$0|)))))  :pattern ( (Seq@Index$Int$ (Seq@Build$Int$ |s_$2_$0| |i_$0_$0| |v_$0_$0| |len_$0_$0|) |n_$4_$0|))))
      (forall( (|s_$2_$1| Seq$ref$) (|i_$0_$1| Int) (|v_$0_$1| ref) (|len_$0_$1| Int) (|n_$4_$1| Int))(!(=> (and (<= 0 |n_$4_$1|) (< |n_$4_$1| |len_$0_$1|)) (and (=> (= |i_$0_$1| |n_$4_$1|) (= (Seq@Index$ref$ (Seq@Build$ref$ |s_$2_$1| |i_$0_$1| |v_$0_$1| |len_$0_$1|) |n_$4_$1|) |v_$0_$1|)) (=> (not (= |i_$0_$1| |n_$4_$1|)) (= (Seq@Index$ref$ (Seq@Build$ref$ |s_$2_$1| |i_$0_$1| |v_$0_$1| |len_$0_$1|) |n_$4_$1|) (Seq@Index$ref$ |s_$2_$1| |n_$4_$1|)))))  :pattern ( (Seq@Index$ref$ (Seq@Build$ref$ |s_$2_$1| |i_$0_$1| |v_$0_$1| |len_$0_$1|) |n_$4_$1|))))
      (forall( (|s_$3_$0| Seq$Int$) (|x_$0_$0| Int))(!(= (Seq@Contains$Int$ |s_$3_$0| |x_$0_$0|) (exists( (|i_$1_$1| Int))(!(and (and (<= 0 |i_$1_$1|) (< |i_$1_$1| (Seq@Length$Int$ |s_$3_$0|))) (= (Seq@Index$Int$ |s_$3_$0| |i_$1_$1|) |x_$0_$0|))  :pattern ( (Seq@Index$Int$ |s_$3_$0| |i_$1_$1|)))))  :pattern ( (Seq@Contains$Int$ |s_$3_$0| |x_$0_$0|))))
      (forall( (|s_$3_$1| Seq$ref$) (|x_$0_$1| ref))(!(= (Seq@Contains$ref$ |s_$3_$1| |x_$0_$1|) (exists( (|i_$1_$3| Int))(!(and (and (<= 0 |i_$1_$3|) (< |i_$1_$3| (Seq@Length$ref$ |s_$3_$1|))) (= (Seq@Index$ref$ |s_$3_$1| |i_$1_$3|) |x_$0_$1|))  :pattern ( (Seq@Index$ref$ |s_$3_$1| |i_$1_$3|)))))  :pattern ( (Seq@Contains$ref$ |s_$3_$1| |x_$0_$1|))))
      (forall( (|s_$4_$0| Seq$Int$) (|i_$2_$0| Int) (|v_$1_$0| Int) (|len_$1_$0| Int) (|x_$3_$0| Int))(!(= (Seq@Contains$Int$ (Seq@Build$Int$ |s_$4_$0| |i_$2_$0| |v_$1_$0| |len_$1_$0|) |x_$3_$0|) (or (and (and (<= 0 |i_$2_$0|) (< |i_$2_$0| |len_$1_$0|)) (= |x_$3_$0| |v_$1_$0|)) (exists( (|j_$6| Int))(!(and (and (and (and (<= 0 |j_$6|) (< |j_$6| (Seq@Length$Int$ |s_$4_$0|))) (< |j_$6| |len_$1_$0|)) (not (= |j_$6| |i_$2_$0|))) (= (Seq@Index$Int$ |s_$4_$0| |j_$6|) |x_$3_$0|))  :pattern ( (Seq@Index$Int$ |s_$4_$0| |j_$6|))))))  :pattern ( (Seq@Contains$Int$ (Seq@Build$Int$ |s_$4_$0| |i_$2_$0| |v_$1_$0| |len_$1_$0|) |x_$3_$0|))))
      (forall( (|s_$4_$1| Seq$ref$) (|i_$2_$1| Int) (|v_$1_$1| ref) (|len_$1_$1| Int) (|x_$3_$1| ref))(!(= (Seq@Contains$ref$ (Seq@Build$ref$ |s_$4_$1| |i_$2_$1| |v_$1_$1| |len_$1_$1|) |x_$3_$1|) (or (and (and (<= 0 |i_$2_$1|) (< |i_$2_$1| |len_$1_$1|)) (= |x_$3_$1| |v_$1_$1|)) (exists( (|j_$8| Int))(!(and (and (and (and (<= 0 |j_$8|) (< |j_$8| (Seq@Length$ref$ |s_$4_$1|))) (< |j_$8| |len_$1_$1|)) (not (= |j_$8| |i_$2_$1|))) (= (Seq@Index$ref$ |s_$4_$1| |j_$8|) |x_$3_$1|))  :pattern ( (Seq@Index$ref$ |s_$4_$1| |j_$8|))))))  :pattern ( (Seq@Contains$ref$ (Seq@Build$ref$ |s_$4_$1| |i_$2_$1| |v_$1_$1| |len_$1_$1|) |x_$3_$1|))))
      (forall( (|s_$5_$0| Seq$Int$) (|n_$5_$0| Int) (|x_$4_$0| Int))(!(= (Seq@Contains$Int$ (Seq@Take$Int$ |s_$5_$0| |n_$5_$0|) |x_$4_$0|) (exists( (|i_$3_$1| Int))(!(and (and (and (<= 0 |i_$3_$1|) (< |i_$3_$1| |n_$5_$0|)) (< |i_$3_$1| (Seq@Length$Int$ |s_$5_$0|))) (= (Seq@Index$Int$ |s_$5_$0| |i_$3_$1|) |x_$4_$0|))  :pattern ( (Seq@Index$Int$ |s_$5_$0| |i_$3_$1|)))))  :pattern ( (Seq@Contains$Int$ (Seq@Take$Int$ |s_$5_$0| |n_$5_$0|) |x_$4_$0|))))
      (forall( (|s_$5_$1| Seq$ref$) (|n_$5_$1| Int) (|x_$4_$1| ref))(!(= (Seq@Contains$ref$ (Seq@Take$ref$ |s_$5_$1| |n_$5_$1|) |x_$4_$1|) (exists( (|i_$3_$3| Int))(!(and (and (and (<= 0 |i_$3_$3|) (< |i_$3_$3| |n_$5_$1|)) (< |i_$3_$3| (Seq@Length$ref$ |s_$5_$1|))) (= (Seq@Index$ref$ |s_$5_$1| |i_$3_$3|) |x_$4_$1|))  :pattern ( (Seq@Index$ref$ |s_$5_$1| |i_$3_$3|)))))  :pattern ( (Seq@Contains$ref$ (Seq@Take$ref$ |s_$5_$1| |n_$5_$1|) |x_$4_$1|))))
      (forall( (|s_$6_$0| Seq$Int$) (|n_$6_$0| Int) (|x_$5_$0| Int))(!(= (Seq@Contains$Int$ (Seq@Drop$Int$ |s_$6_$0| |n_$6_$0|) |x_$5_$0|) (exists( (|i_$4_$1| Int))(!(and (and (and (<= 0 |n_$6_$0|) (<= |n_$6_$0| |i_$4_$1|)) (< |i_$4_$1| (Seq@Length$Int$ |s_$6_$0|))) (= (Seq@Index$Int$ |s_$6_$0| |i_$4_$1|) |x_$5_$0|))  :pattern ( (Seq@Index$Int$ |s_$6_$0| |i_$4_$1|)))))  :pattern ( (Seq@Contains$Int$ (Seq@Drop$Int$ |s_$6_$0| |n_$6_$0|) |x_$5_$0|))))
      (forall( (|s_$6_$1| Seq$ref$) (|n_$6_$1| Int) (|x_$5_$1| ref))(!(= (Seq@Contains$ref$ (Seq@Drop$ref$ |s_$6_$1| |n_$6_$1|) |x_$5_$1|) (exists( (|i_$4_$3| Int))(!(and (and (and (<= 0 |n_$6_$1|) (<= |n_$6_$1| |i_$4_$3|)) (< |i_$4_$3| (Seq@Length$ref$ |s_$6_$1|))) (= (Seq@Index$ref$ |s_$6_$1| |i_$4_$3|) |x_$5_$1|))  :pattern ( (Seq@Index$ref$ |s_$6_$1| |i_$4_$3|)))))  :pattern ( (Seq@Contains$ref$ (Seq@Drop$ref$ |s_$6_$1| |n_$6_$1|) |x_$5_$1|))))
      (forall( (|s_$7_$0| Seq$Int$) (|n_$8_$0| Int))(!(=> (<= 0 |n_$8_$0|) (and (=> (<= |n_$8_$0| (Seq@Length$Int$ |s_$7_$0|)) (= (Seq@Length$Int$ (Seq@Take$Int$ |s_$7_$0| |n_$8_$0|)) |n_$8_$0|)) (=> (< (Seq@Length$Int$ |s_$7_$0|) |n_$8_$0|) (= (Seq@Length$Int$ (Seq@Take$Int$ |s_$7_$0| |n_$8_$0|)) (Seq@Length$Int$ |s_$7_$0|)))))  :pattern ( (Seq@Length$Int$ (Seq@Take$Int$ |s_$7_$0| |n_$8_$0|)))))
      (forall( (|s_$7_$1| Seq$ref$) (|n_$8_$1| Int))(!(=> (<= 0 |n_$8_$1|) (and (=> (<= |n_$8_$1| (Seq@Length$ref$ |s_$7_$1|)) (= (Seq@Length$ref$ (Seq@Take$ref$ |s_$7_$1| |n_$8_$1|)) |n_$8_$1|)) (=> (< (Seq@Length$ref$ |s_$7_$1|) |n_$8_$1|) (= (Seq@Length$ref$ (Seq@Take$ref$ |s_$7_$1| |n_$8_$1|)) (Seq@Length$ref$ |s_$7_$1|)))))  :pattern ( (Seq@Length$ref$ (Seq@Take$ref$ |s_$7_$1| |n_$8_$1|)))))
      (forall( (|s_$8_$0| Seq$Int$) (|n_$9_$0| Int) (|j_$2_$0| Int))(!(=> (and (and (<= 0 |j_$2_$0|) (< |j_$2_$0| |n_$9_$0|)) (< |j_$2_$0| (Seq@Length$Int$ |s_$8_$0|))) (= (Seq@Index$Int$ (Seq@Take$Int$ |s_$8_$0| |n_$9_$0|) |j_$2_$0|) (Seq@Index$Int$ |s_$8_$0| |j_$2_$0|)))  :weight  25 :pattern ( (Seq@Index$Int$ (Seq@Take$Int$ |s_$8_$0| |n_$9_$0|) |j_$2_$0|))))
      (forall( (|s_$8_$1| Seq$ref$) (|n_$9_$1| Int) (|j_$2_$1| Int))(!(=> (and (and (<= 0 |j_$2_$1|) (< |j_$2_$1| |n_$9_$1|)) (< |j_$2_$1| (Seq@Length$ref$ |s_$8_$1|))) (= (Seq@Index$ref$ (Seq@Take$ref$ |s_$8_$1| |n_$9_$1|) |j_$2_$1|) (Seq@Index$ref$ |s_$8_$1| |j_$2_$1|)))  :weight  25 :pattern ( (Seq@Index$ref$ (Seq@Take$ref$ |s_$8_$1| |n_$9_$1|) |j_$2_$1|))))
      (forall( (|s_$9_$0| Seq$Int$) (|n_$10_$0| Int))(!(=> (<= 0 |n_$10_$0|) (and (=> (<= |n_$10_$0| (Seq@Length$Int$ |s_$9_$0|)) (= (Seq@Length$Int$ (Seq@Drop$Int$ |s_$9_$0| |n_$10_$0|)) (- (Seq@Length$Int$ |s_$9_$0|) |n_$10_$0|))) (=> (< (Seq@Length$Int$ |s_$9_$0|) |n_$10_$0|) (= (Seq@Length$Int$ (Seq@Drop$Int$ |s_$9_$0| |n_$10_$0|)) 0))))  :pattern ( (Seq@Length$Int$ (Seq@Drop$Int$ |s_$9_$0| |n_$10_$0|)))))
      (forall( (|s_$9_$1| Seq$ref$) (|n_$10_$1| Int))(!(=> (<= 0 |n_$10_$1|) (and (=> (<= |n_$10_$1| (Seq@Length$ref$ |s_$9_$1|)) (= (Seq@Length$ref$ (Seq@Drop$ref$ |s_$9_$1| |n_$10_$1|)) (- (Seq@Length$ref$ |s_$9_$1|) |n_$10_$1|))) (=> (< (Seq@Length$ref$ |s_$9_$1|) |n_$10_$1|) (= (Seq@Length$ref$ (Seq@Drop$ref$ |s_$9_$1| |n_$10_$1|)) 0))))  :pattern ( (Seq@Length$ref$ (Seq@Drop$ref$ |s_$9_$1| |n_$10_$1|)))))
      (forall( (|s0_$0_$0| Seq$Int$) (|s1_$0_$0| Seq$Int$) (|n_$3_$0| Int))(!(and (=> (< |n_$3_$0| (Seq@Length$Int$ |s0_$0_$0|)) (= (Seq@Index$Int$ (Seq@Append$Int$ |s0_$0_$0| |s1_$0_$0|) |n_$3_$0|) (Seq@Index$Int$ |s0_$0_$0| |n_$3_$0|))) (=> (<= (Seq@Length$Int$ |s0_$0_$0|) |n_$3_$0|) (= (Seq@Index$Int$ (Seq@Append$Int$ |s0_$0_$0| |s1_$0_$0|) |n_$3_$0|) (Seq@Index$Int$ |s1_$0_$0| (- |n_$3_$0| (Seq@Length$Int$ |s0_$0_$0|))))))  :pattern ( (Seq@Index$Int$ (Seq@Append$Int$ |s0_$0_$0| |s1_$0_$0|) |n_$3_$0|))))
      (forall( (|s0_$0_$1| Seq$ref$) (|s1_$0_$1| Seq$ref$) (|n_$3_$1| Int))(!(and (=> (< |n_$3_$1| (Seq@Length$ref$ |s0_$0_$1|)) (= (Seq@Index$ref$ (Seq@Append$ref$ |s0_$0_$1| |s1_$0_$1|) |n_$3_$1|) (Seq@Index$ref$ |s0_$0_$1| |n_$3_$1|))) (=> (<= (Seq@Length$ref$ |s0_$0_$1|) |n_$3_$1|) (= (Seq@Index$ref$ (Seq@Append$ref$ |s0_$0_$1| |s1_$0_$1|) |n_$3_$1|) (Seq@Index$ref$ |s1_$0_$1| (- |n_$3_$1| (Seq@Length$ref$ |s0_$0_$1|))))))  :pattern ( (Seq@Index$ref$ (Seq@Append$ref$ |s0_$0_$1| |s1_$0_$1|) |n_$3_$1|))))
      (forall( (|s0_$1_$0| Seq$Int$) (|s1_$1_$0| Seq$Int$) (|x_$2_$0| Int))(!(= (Seq@Contains$Int$ (Seq@Append$Int$ |s0_$1_$0| |s1_$1_$0|) |x_$2_$0|) (or (Seq@Contains$Int$ |s0_$1_$0| |x_$2_$0|) (Seq@Contains$Int$ |s1_$1_$0| |x_$2_$0|)))  :pattern ( (Seq@Contains$Int$ (Seq@Append$Int$ |s0_$1_$0| |s1_$1_$0|) |x_$2_$0|))))
      (forall( (|s0_$1_$1| Seq$ref$) (|s1_$1_$1| Seq$ref$) (|x_$2_$1| ref))(!(= (Seq@Contains$ref$ (Seq@Append$ref$ |s0_$1_$1| |s1_$1_$1|) |x_$2_$1|) (or (Seq@Contains$ref$ |s0_$1_$1| |x_$2_$1|) (Seq@Contains$ref$ |s1_$1_$1| |x_$2_$1|)))  :pattern ( (Seq@Contains$ref$ (Seq@Append$ref$ |s0_$1_$1| |s1_$1_$1|) |x_$2_$1|))))
      (forall( (|s0_$2_$0| Seq$Int$) (|s1_$2_$0| Seq$Int$))(!(= (Seq@Equal$Int$ |s0_$2_$0| |s1_$2_$0|) (and (= (Seq@Length$Int$ |s0_$2_$0|) (Seq@Length$Int$ |s1_$2_$0|)) (forall( (|j_$0_$1| Int))(!(=> (and (<= 0 |j_$0_$1|) (< |j_$0_$1| (Seq@Length$Int$ |s0_$2_$0|))) (= (Seq@Index$Int$ |s0_$2_$0| |j_$0_$1|) (Seq@Index$Int$ |s1_$2_$0| |j_$0_$1|)))  :pattern ( (Seq@Index$Int$ |s0_$2_$0| |j_$0_$1|)) :pattern ( (Seq@Index$Int$ |s1_$2_$0| |j_$0_$1|))))))  :pattern ( (Seq@Equal$Int$ |s0_$2_$0| |s1_$2_$0|))))
      (forall( (|s0_$2_$1| Seq$ref$) (|s1_$2_$1| Seq$ref$))(!(= (Seq@Equal$ref$ |s0_$2_$1| |s1_$2_$1|) (and (= (Seq@Length$ref$ |s0_$2_$1|) (Seq@Length$ref$ |s1_$2_$1|)) (forall( (|j_$0_$3| Int))(!(=> (and (<= 0 |j_$0_$3|) (< |j_$0_$3| (Seq@Length$ref$ |s0_$2_$1|))) (= (Seq@Index$ref$ |s0_$2_$1| |j_$0_$3|) (Seq@Index$ref$ |s1_$2_$1| |j_$0_$3|)))  :pattern ( (Seq@Index$ref$ |s0_$2_$1| |j_$0_$3|)) :pattern ( (Seq@Index$ref$ |s1_$2_$1| |j_$0_$3|))))))  :pattern ( (Seq@Equal$ref$ |s0_$2_$1| |s1_$2_$1|))))
      (forall( (|s0_$4| Seq$Int$) (|s1_$4| Seq$Int$))(!(= (Seq@Length$Int$ (Seq@Append$Int$ |s0_$4| |s1_$4|)) (+ (Seq@Length$Int$ |s0_$4|) (Seq@Length$Int$ |s1_$4|)))  :pattern ( (Seq@Length$Int$ (Seq@Append$Int$ |s0_$4| |s1_$4|)))))
      (forall( (|s0_$5| Seq$ref$) (|s1_$5| Seq$ref$))(!(= (Seq@Length$ref$ (Seq@Append$ref$ |s0_$5| |s1_$5|)) (+ (Seq@Length$ref$ |s0_$5|) (Seq@Length$ref$ |s1_$5|)))  :pattern ( (Seq@Length$ref$ (Seq@Append$ref$ |s0_$5| |s1_$5|)))))
      (forall( (|t_$0_$0| Int))(!(= (Seq@Index$Int$ (Seq@Singleton$Int$ |t_$0_$0|) 0) |t_$0_$0|)  :pattern ( (Seq@Index$Int$ (Seq@Singleton$Int$ |t_$0_$0|) 0))))
      (forall( (|t_$0_$1| ref))(!(= (Seq@Index$ref$ (Seq@Singleton$ref$ |t_$0_$1|) 0) |t_$0_$1|)  :pattern ( (Seq@Index$ref$ (Seq@Singleton$ref$ |t_$0_$1|) 0))))
      (forall( (|t_$2| Int))(!(= (Seq@Length$Int$ (Seq@Singleton$Int$ |t_$2|)) 1)  :pattern ( (Seq@Length$Int$ (Seq@Singleton$Int$ |t_$2|)))))
      (forall( (|t_$3| ref))(!(= (Seq@Length$ref$ (Seq@Singleton$ref$ |t_$3|)) 1)  :pattern ( (Seq@Length$ref$ (Seq@Singleton$ref$ |t_$3|)))))
      (forall( (|x_$1| ref))(!(not (Seq@Contains$ref$ Seq@Empty$ref$ |x_$1|))  :pattern ( (Seq@Contains$ref$ Seq@Empty$ref$ |x_$1|))))
      (forall( (|x_$6_$0| Int) (|y_$0_$0| Int))(!(= (Seq@Contains$Int$ (Seq@Singleton$Int$ |x_$6_$0|) |y_$0_$0|) (= |x_$6_$0| |y_$0_$0|))  :pattern ( (Seq@Contains$Int$ (Seq@Singleton$Int$ |x_$6_$0|) |y_$0_$0|))))
      (forall( (|x_$6_$1| ref) (|y_$0_$1| ref))(!(= (Seq@Contains$ref$ (Seq@Singleton$ref$ |x_$6_$1|) |y_$0_$1|) (= |x_$6_$1| |y_$0_$1|))  :pattern ( (Seq@Contains$ref$ (Seq@Singleton$ref$ |x_$6_$1|) |y_$0_$1|))))
      (forall( (|x| Int) (|y| Int))(=> (and (<= 0 |x|) (<= |x| |y|)) (<= (Fractions |x|) (Fractions |y|))))
      (IsGoodMask ZeroMask)
      (IsGoodState emptyPartialHeap)
      (NonPredicateField$Bool$ rdheld)
      (NonPredicateField$Int$ AVLTreeNode.balanceFactor)
      (NonPredicateField$Int$ AVLTreeNode.height)
      (NonPredicateField$Int$ AVLTreeNode.key)
      (NonPredicateField$Int$ forkK)
      (NonPredicateField$Int$ held)
      (NonPredicateField$Int$ joinable)
      (NonPredicateField$Mu$ mu)
      (NonPredicateField$ref$ AVLTree.root)
      (NonPredicateField$ref$ AVLTreeNode.left)
      (NonPredicateField$ref$ AVLTreeNode.right)
      (NonPredicateField$Seq$Int$$ AVLTree.keys)
      (NonPredicateField$Seq$Int$$ AVLTreeNode.keys)
      (PredicateField$Int$ AVLTree.valid)
      (PredicateField$Int$ AVLTreeNode.valid)
   )
PreconditionGeneratedEntry
)) :named ax_$start))
(assert (! (=> PreconditionGeneratedEntry (and true 
   (and true
      (IsGoodMask Mask)
      (IsGoodMask SecMask)
      (not (= this null))
      (or (= m@252 null) (= (dtype m@252) AVLTreeNode@t))
      (or (= m@256 null) (= (dtype m@256) AVLTreeNode@t))
      (or (= nl@24 null) (= (dtype nl@24) AVLTreeNode@t))
      (or (= nl@28 null) (= (dtype nl@28) AVLTreeNode@t))
      (or (= nr@26 null) (= (dtype nr@26) AVLTreeNode@t))
      (or (= nr@32 null) (= (dtype nr@32) AVLTreeNode@t))
      (or (= r@20 null) (= (dtype r@20) AVLTreeNode@t))
      (or (= r@251 null) (= (dtype r@251) AVLTreeNode@t))
      (or (= r@255 null) (= (dtype r@255) AVLTreeNode@t))
      (or (= r@271 null) (= (dtype r@271) AVLTreeNode@t))
      (or (= r@277 null) (= (dtype r@277) AVLTreeNode@t))
      (or (= r@294 null) (= (dtype r@294) AVLTreeNode@t))
      (or (= r@300 null) (= (dtype r@300) AVLTreeNode@t))
      (or (= this null) (= (dtype this) AVLTreeNode@t))
      (or (= this@248 null) (= (dtype this@248) AVLTreeNode@t))
      (or (= this@250 null) (= (dtype this@250) AVLTreeNode@t))
      (or (= this@254 null) (= (dtype this@254) AVLTreeNode@t))
      (or (= this@264 null) (= (dtype this@264) AVLTreeNode@t))
      (or (= this@269 null) (= (dtype this@269) AVLTreeNode@t))
      (or (= this@274 null) (= (dtype this@274) AVLTreeNode@t))
      (or (= this@276 null) (= (dtype this@276) AVLTreeNode@t))
      (or (= this@282 null) (= (dtype this@282) AVLTreeNode@t))
      (or (= this@287 null) (= (dtype this@287) AVLTreeNode@t))
      (or (= this@292 null) (= (dtype this@292) AVLTreeNode@t))
      (or (= this@297 null) (= (dtype this@297) AVLTreeNode@t))
      (or (= this@299 null) (= (dtype this@299) AVLTreeNode@t))
      (or (= this@305 null) (= (dtype this@305) AVLTreeNode@t))
      (or (= this@310 null) (= (dtype this@310) AVLTreeNode@t))
      (wf Heap Mask SecMask)
   )
anon0
)) :named ax_PreconditionGeneratedEntry))
(assert (! (=> anon0 (and true 
   (and true
      ($@AVLTreeNode.valid@trigger this)
      (< (* 1000 methodK@_506) (Fractions 1))
      (< (* 1000 unfoldK@_507) methodK@_506)
      (< 0 methodK@_506)
      (< 0 unfoldK@_507)
      (< unfoldK@_507 (Fractions 1))
      (= CurrentModule module@default)
      (= Heap Heap)
      (= Mask@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask this AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask this AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask this AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@0 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@0 this AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@0 this AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@1 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@1 this AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@1 this AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@2 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@2 this AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@2 this AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@3 Mask)
      (= ZeroCredits Credits)
      (= ZeroMask SecMask)
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@0)
      (IsGoodMask Mask@1)
      (IsGoodMask Mask@2)
      (IsGoodMask Mask@3)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys)))
      (not (= this null))
      (wf Heap Mask@0 ZeroMask)
      (wf Heap Mask@1 ZeroMask)
      (wf Heap Mask@2 ZeroMask)
      (wf Heap Mask@3 ZeroMask)
      (wf Heap ZeroMask ZeroMask)
      CanAssumeFunctionDefs
   )
(or anon0@1 anon0_assertion)
)) :named ax_anon0))
(assert (! (=> anon0@1 (and true 
   (and true
      (not (= this null))
   )
(or anon0@1_assertion anon0@2)
)) :named ax_anon0@1))
(assert (! (=> anon0_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon0_assertion))
(assert (! (=> anon0@1_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon0@1_assertion))
(assert (! (=> anon0@2 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon0@2_assertion anon0@3)
)) :named ax_anon0@2))
(assert (! (=> anon0@2_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon0@2_assertion))
(assert (! (=> anon0@3 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$R))
      (= Mask@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@3 this AVLTreeNode.valid) perm$N)))
   )
anon862_Else
)) :named ax_anon0@3))
(assert (! (=> anon862_Else (and true 
   (and true
      (= $@condition false)
      (not $@condition)
      (not false)
   )
(or anon889_Else anon889_Then)
)) :named ax_anon862_Else))
(assert (! (=> anon889_Else (and true 
   (and true
      (= $@condition_$0 (not (CanRead$Int$ Mask@4 ZeroMask this AVLTreeNode.valid)))
      (= Heap@1 Heap)
      (CanRead$Int$ Mask@4 ZeroMask this AVLTreeNode.valid)
      (not $@condition_$0)
   )
anon56
)) :named ax_anon889_Else))
(assert (! (=> anon889_Then (and true 
   (and true
      $@condition_$0
      (< oldVers@_527@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@0 this AVLTreeNode.valid))
      (= $@condition_$0 (not (CanRead$Int$ Mask@4 ZeroMask this AVLTreeNode.valid)))
      (= Heap@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.valid newVers@_528@0))
      (= Heap@1 Heap@0)
      (= oldVers@_527@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.valid))
      (not (CanRead$Int$ Mask@4 ZeroMask this AVLTreeNode.valid))
   )
anon56
)) :named ax_anon889_Then))
(assert (! (=> anon56 (and true 
   (and true
      (= Mask@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@9 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@9 this AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@9 this AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@4 this AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@4 this AVLTreeNode.key) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@4 this AVLTreeNode.key) perm$R) (Fractions 100)))))
      (= Mask@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@5 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@5 this AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@5 this AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@7 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@6 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@6 this AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@6 this AVLTreeNode.left) perm$R) (Fractions 100)))))
      (= Mask@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@7 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@7 this AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@7 this AVLTreeNode.right) perm$R) (Fractions 100)))))
      (= Mask@9 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@8 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@8 this AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@8 this AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@10)
      (IsGoodMask Mask@4)
      (IsGoodMask Mask@5)
      (IsGoodMask Mask@6)
      (IsGoodMask Mask@7)
      (IsGoodMask Mask@8)
      (IsGoodMask Mask@9)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this AVLTreeNode.keys)))
      (not (= this null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)) AVLTreeNode@t))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)) AVLTreeNode@t))
      (wf Heap@1 Mask@10 ZeroMask)
      (wf Heap@1 Mask@4 ZeroMask)
      (wf Heap@1 Mask@5 ZeroMask)
      (wf Heap@1 Mask@6 ZeroMask)
      (wf Heap@1 Mask@7 ZeroMask)
      (wf Heap@1 Mask@8 ZeroMask)
      (wf Heap@1 Mask@9 ZeroMask)
   )
(or anon890_Else anon890_Then)
)) :named ax_anon56))
(assert (! (=> anon890_Else (and true 
   (and true
      (= $@condition_$1 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= Mask@12 Mask@10)
      (not $@condition_$1)
   )
$branchMerge_0
)) :named ax_anon890_Else))
(assert (! (=> anon890_Then (and true 
   (and true
      $@condition_$1
      (= $@condition_$1 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= Mask@11 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@12 Mask@11)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@11)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
      (wf Heap@1 Mask@10 ZeroMask)
      (wf Heap@1 Mask@11 ZeroMask)
   )
$branchMerge_0
)) :named ax_anon890_Then))
(assert (! (=> $branchMerge_0 (and true 
   (and true
   )
(or anon891_Else anon891_Then)
)) :named ax_$branchMerge_0))
(assert (! (=> anon891_Else (and true 
   (and true
      (= $@condition_$2 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= Mask@14 Mask@12)
      (not $@condition_$2)
   )
$branchMerge_1
)) :named ax_anon891_Else))
(assert (! (=> anon891_Then (and true 
   (and true
      $@condition_$2
      (= $@condition_$2 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= Mask@13 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@14 Mask@13)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@13)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
      (wf Heap@1 Mask@12 ZeroMask)
      (wf Heap@1 Mask@13 ZeroMask)
   )
$branchMerge_1
)) :named ax_anon891_Then))
(assert (! (=> $branchMerge_1 (and true 
   (and true
   )
(or anon892_Else anon892_Then)
)) :named ax_$branchMerge_1))
(assert (! (=> anon892_Else (and true 
   (and true
      (= $@condition_$4 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= Mask@16 Mask@14)
      (not $@condition_$4)
   )
$branchMerge_2
)) :named ax_anon892_Else))
(assert (! (=> anon892_Then (and true 
   (and true
      $@condition_$4
      (= $@condition_$4 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= Mask@15 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@16 Mask@15)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@15)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
      (wf Heap@1 Mask@14 ZeroMask)
      (wf Heap@1 Mask@15 ZeroMask)
   )
$branchMerge_2
)) :named ax_anon892_Then))
(assert (! (=> $branchMerge_2 (and true 
   (and true
   )
(or anon893_Else anon893_Then)
)) :named ax_$branchMerge_2))
(assert (! (=> anon893_Else (and true 
   (and true
      (= $@condition_$6 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= Mask@18 Mask@16)
      (not $@condition_$6)
   )
$branchMerge_3
)) :named ax_anon893_Else))
(assert (! (=> anon893_Then (and true 
   (and true
      $@condition_$6
      (= $@condition_$6 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= Mask@17 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@18 Mask@17)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@17)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
      (wf Heap@1 Mask@16 ZeroMask)
      (wf Heap@1 Mask@17 ZeroMask)
   )
$branchMerge_3
)) :named ax_anon893_Then))
(assert (! (=> $branchMerge_3 (and true 
   (and true
   )
(or anon894_Else anon894_Then)
)) :named ax_$branchMerge_3))
(assert (! (=> anon894_Else (and true 
   (and true
      (= $@condition_$8 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (not $@condition_$8)
   )
$branchMerge_4
)) :named ax_anon894_Else))
(assert (! (=> anon894_Then (and true 
   (and true
      $@condition_$8
      (= $@condition_$8 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (forall( (|lk#79#222| Int))(=> (and (<= 0 |lk#79#222|) (< |lk#79#222| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) |lk#79#222|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
$branchMerge_4
)) :named ax_anon894_Then))
(assert (! (=> $branchMerge_4 (and true 
   (and true
   )
(or anon895_Else anon895_Then)
)) :named ax_$branchMerge_4))
(assert (! (=> anon895_Else (and true 
   (and true
      (= $@condition_$10 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (not $@condition_$10)
   )
$branchMerge_5
)) :named ax_anon895_Else))
(assert (! (=> anon895_Then (and true 
   (and true
      $@condition_$10
      (= $@condition_$10 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
$branchMerge_5
)) :named ax_anon895_Then))
(assert (! (=> $branchMerge_5 (and true 
   (and true
   )
(or anon896_Else anon896_Then)
)) :named ax_$branchMerge_5))
(assert (! (=> anon896_Else (and true 
   (and true
      (= $@condition_$12 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= Mask@20 Mask@18)
      (not $@condition_$12)
   )
$branchMerge_6
)) :named ax_anon896_Else))
(assert (! (=> anon896_Then (and true 
   (and true
      $@condition_$12
      (= $@condition_$12 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= Mask@19 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@20 Mask@19)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@19)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
      (wf Heap@1 Mask@18 ZeroMask)
      (wf Heap@1 Mask@19 ZeroMask)
   )
$branchMerge_6
)) :named ax_anon896_Then))
(assert (! (=> $branchMerge_6 (and true 
   (and true
   )
(or anon897_Else anon897_Then)
)) :named ax_$branchMerge_6))
(assert (! (=> anon897_Else (and true 
   (and true
      (= $@condition_$14 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= Mask@22 Mask@20)
      (not $@condition_$14)
   )
$branchMerge_7
)) :named ax_anon897_Else))
(assert (! (=> anon897_Then (and true 
   (and true
      $@condition_$14
      (= $@condition_$14 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= Mask@21 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@22 Mask@21)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@21)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
      (wf Heap@1 Mask@20 ZeroMask)
      (wf Heap@1 Mask@21 ZeroMask)
   )
$branchMerge_7
)) :named ax_anon897_Then))
(assert (! (=> $branchMerge_7 (and true 
   (and true
   )
(or anon898_Else anon898_Then)
)) :named ax_$branchMerge_7))
(assert (! (=> anon898_Else (and true 
   (and true
      (= $@condition_$16 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= Mask@24 Mask@22)
      (not $@condition_$16)
   )
$branchMerge_8
)) :named ax_anon898_Else))
(assert (! (=> anon898_Then (and true 
   (and true
      $@condition_$16
      (= $@condition_$16 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= Mask@23 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@22 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@22 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@22 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@24 Mask@23)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@23)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
      (wf Heap@1 Mask@22 ZeroMask)
      (wf Heap@1 Mask@23 ZeroMask)
   )
$branchMerge_8
)) :named ax_anon898_Then))
(assert (! (=> $branchMerge_8 (and true 
   (and true
   )
(or anon899_Else anon899_Then)
)) :named ax_$branchMerge_8))
(assert (! (=> anon899_Else (and true 
   (and true
      (= $@condition_$18 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= Mask@26 Mask@24)
      (not $@condition_$18)
   )
$branchMerge_9
)) :named ax_anon899_Else))
(assert (! (=> anon899_Then (and true 
   (and true
      $@condition_$18
      (= $@condition_$18 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= Mask@25 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@24 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@24 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@24 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@26 Mask@25)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@25)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
      (wf Heap@1 Mask@24 ZeroMask)
      (wf Heap@1 Mask@25 ZeroMask)
   )
$branchMerge_9
)) :named ax_anon899_Then))
(assert (! (=> $branchMerge_9 (and true 
   (and true
   )
(or anon900_Else anon900_Then)
)) :named ax_$branchMerge_9))
(assert (! (=> anon900_Else (and true 
   (and true
      (= $@condition_$20 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (not $@condition_$20)
   )
$branchMerge_10
)) :named ax_anon900_Else))
(assert (! (=> anon900_Then (and true 
   (and true
      $@condition_$20
      (= $@condition_$20 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (forall( (|rk#80#223| Int))(=> (and (<= 0 |rk#80#223|) (< |rk#80#223| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) |rk#80#223|))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
$branchMerge_10
)) :named ax_anon900_Then))
(assert (! (=> $branchMerge_10 (and true 
   (and true
   )
(or anon901_Else anon901_Then)
)) :named ax_$branchMerge_10))
(assert (! (=> anon901_Else (and true 
   (and true
      (= $@condition_$22 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (not $@condition_$22)
   )
anon80
)) :named ax_anon901_Else))
(assert (! (=> anon901_Then (and true 
   (and true
      $@condition_$22
      (= $@condition_$22 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
anon80
)) :named ax_anon901_Then))
(assert (! (=> anon80 (and true 
   (and true
      (<= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.balanceFactor) 1)
      (= (= true $@bf) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (= (= true $@bf_1) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
      (= (= true $@bf_55) (< (ite$Int$ $@bf_1 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (= cond@_529@0 (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key) k@19))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.height) 0)
      (>= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.balanceFactor) (- 0 1))
      (forall( (|kk#81| Int))(= (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this AVLTreeNode.keys) |kk#81|) (or (or (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) |kk#81|)) (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) |kk#81|))) (= |kk#81| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key)))))
      (IsGoodMask Mask@26)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys))))
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon80@1 anon80_assertion)
)) :named ax_anon80))
(assert (! (=> anon80@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon80@1_assertion anon80@2)
)) :named ax_anon80@1))
(assert (! (=> anon80_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon80_assertion))
(assert (! (=> anon80@1_assertion (not (and true
   (and true
      (=> true (CanRead$Int$ Mask@26 ZeroMask this AVLTreeNode.key))
   )
))) :named ax_anon80@1_assertion))
(assert (! (=> anon80@2 (and true 
   (and true
      (=> true (CanRead$Int$ Mask@26 ZeroMask this AVLTreeNode.key))
   )
(or anon902_Else anon902_Then)
)) :named ax_anon80@2))
(assert (! (=> anon902_Else (and true 
   (and true
      (= $@condition_$24 cond@_529@0)
      (= cond@_717@0 (< k@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key)))
      (not $@condition_$24)
      (not cond@_529@0)
   )
(or anon902_Else@1 anon902_Else_assertion)
)) :named ax_anon902_Else))
(assert (! (=> anon902_Then (and true 
   (and true
      $@condition_$24
      (= $@condition_$24 cond@_529@0)
      (= cond@_530@0 (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      cond@_529@0
   )
(or anon902_Then@1 anon902_Then_assertion)
)) :named ax_anon902_Then))
(assert (! (=> anon902_Else@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon902_Else@1_assertion anon902_Else@2)
)) :named ax_anon902_Else@1))
(assert (! (=> anon902_Else_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon902_Else_assertion))
(assert (! (=> anon902_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon902_Then@1_assertion anon902_Then@2)
)) :named ax_anon902_Then@1))
(assert (! (=> anon902_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon902_Then_assertion))
(assert (! (=> anon902_Else@1_assertion (not (and true
   (and true
      (=> true (CanRead$Int$ Mask@26 ZeroMask this AVLTreeNode.key))
   )
))) :named ax_anon902_Else@1_assertion))
(assert (! (=> anon902_Else@2 (and true 
   (and true
      (=> true (CanRead$Int$ Mask@26 ZeroMask this AVLTreeNode.key))
   )
(or anon1150_Else anon1150_Then)
)) :named ax_anon902_Else@2))
(assert (! (=> anon902_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon902_Then@1_assertion))
(assert (! (=> anon902_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
(or anon902_Then@2_assertion anon902_Then@3)
)) :named ax_anon902_Then@2))
(assert (! (=> anon1150_Else (and true 
   (and true
      (= $@condition_$26 cond@_717@0)
      (= cond@_817@0 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not $@condition_$26)
      (not cond@_717@0)
   )
(or anon1150_Else@1 anon1150_Else_assertion)
)) :named ax_anon1150_Else))
(assert (! (=> anon1150_Then (and true 
   (and true
      $@condition_$26
      (= $@condition_$26 cond@_717@0)
      (= cond@_718@0 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      cond@_717@0
   )
(or anon1150_Then@1 anon1150_Then_assertion)
)) :named ax_anon1150_Then))
(assert (! (=> anon902_Then@2_assertion (not (and true
   (and true
      (=> (and true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))) (not (= this null)))
   )
))) :named ax_anon902_Then@2_assertion))
(assert (! (=> anon902_Then@3 (and true 
   (and true
      (=> (and true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))) (not (= this null)))
   )
(or anon902_Then@3_assertion anon902_Then@4)
)) :named ax_anon902_Then@3))
(assert (! (=> anon1150_Else@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1150_Else@1_assertion anon1150_Else@2)
)) :named ax_anon1150_Else@1))
(assert (! (=> anon1150_Else_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1150_Else_assertion))
(assert (! (=> anon1150_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1150_Then@1_assertion anon1150_Then@2)
)) :named ax_anon1150_Then@1))
(assert (! (=> anon1150_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1150_Then_assertion))
(assert (! (=> anon902_Then@3_assertion (not (and true
   (and true
      (=> (and true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))) (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon902_Then@3_assertion))
(assert (! (=> anon902_Then@4 (and true 
   (and true
      (=> (and true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))) (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
(or anon903_Else anon903_Then)
)) :named ax_anon902_Then@4))
(assert (! (=> anon1150_Else@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon1150_Else@1_assertion))
(assert (! (=> anon1150_Else@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
(or anon1213_Else anon1213_Then)
)) :named ax_anon1150_Else@2))
(assert (! (=> anon1150_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon1150_Then@1_assertion))
(assert (! (=> anon1150_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
(or anon1151_Else anon1151_Then)
)) :named ax_anon1150_Then@2))
(assert (! (=> anon903_Else (and true 
   (and true
      (= $@condition_$25 cond@_530@0)
      (not $@condition_$25)
      (not cond@_530@0)
   )
(or anon903_Else@1 anon903_Else_assertion)
)) :named ax_anon903_Else))
(assert (! (=> anon903_Then (and true 
   (and true
      $@condition_$25
      (= $@condition_$25 cond@_530@0)
      (wf Heap@1 Mask@26 ZeroMask)
      cond@_530@0
   )
(or anon903_Then@1 anon903_Then_assertion)
)) :named ax_anon903_Then))
(assert (! (=> anon1213_Else (and true 
   (and true
      (< (* 1000 methodCallK@_897) (Fractions 1))
      (< (* 1000 methodCallK@_897) methodK@_506)
      (< 0 methodCallK@_897)
      (= $@condition_$30 cond@_817@0)
      (not $@condition_$30)
      (not cond@_817@0)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1213_Else@1 anon1213_Else_assertion)
)) :named ax_anon1213_Else))
(assert (! (=> anon1213_Then (and true 
   (and true
      $@condition_$30
      (< (* 1000 methodCallK@_822) (Fractions 1))
      (< (* 1000 methodCallK@_822) methodK@_506)
      (< 0 methodCallK@_822)
      (= $@condition_$30 cond@_817@0)
      (wf Heap@1 Mask@26 ZeroMask)
      cond@_817@0
   )
(or anon1213_Then@1 anon1213_Then_assertion)
)) :named ax_anon1213_Then))
(assert (! (=> anon1151_Else (and true 
   (and true
      (< (* 1000 methodCallK@_798) (Fractions 1))
      (< (* 1000 methodCallK@_798) methodK@_506)
      (< 0 methodCallK@_798)
      (= $@condition_$29 cond@_718@0)
      (not $@condition_$29)
      (not cond@_718@0)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1151_Else@1 anon1151_Else_assertion)
)) :named ax_anon1151_Else))
(assert (! (=> anon1151_Then (and true 
   (and true
      $@condition_$29
      (< (* 1000 methodCallK@_723) (Fractions 1))
      (< (* 1000 methodCallK@_723) methodK@_506)
      (< 0 methodCallK@_723)
      (= $@condition_$29 cond@_718@0)
      (wf Heap@1 Mask@26 ZeroMask)
      cond@_718@0
   )
(or anon1151_Then@1 anon1151_Then_assertion)
)) :named ax_anon1151_Then))
(assert (! (=> anon903_Else@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon903_Else@1_assertion anon903_Else@2)
)) :named ax_anon903_Else@1))
(assert (! (=> anon903_Else_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon903_Else_assertion))
(assert (! (=> anon903_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon903_Then@1_assertion anon903_Then@2)
)) :named ax_anon903_Then@1))
(assert (! (=> anon903_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon903_Then_assertion))
(assert (! (=> anon1213_Else@1 (and true 
   (and true
      (not (= this null))
   )
(or anon1263_Else anon1263_Then)
)) :named ax_anon1213_Else@1))
(assert (! (=> anon1213_Else_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon1213_Else_assertion))
(assert (! (=> anon1213_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1213_Then@1_assertion anon1213_Then@2)
)) :named ax_anon1213_Then@1))
(assert (! (=> anon1213_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1213_Then_assertion))
(assert (! (=> anon1151_Else@1 (and true 
   (and true
      (not (= this null))
   )
(or anon1201_Else anon1201_Then)
)) :named ax_anon1151_Else@1))
(assert (! (=> anon1151_Else_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon1151_Else_assertion))
(assert (! (=> anon1151_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1151_Then@1_assertion anon1151_Then@2)
)) :named ax_anon1151_Then@1))
(assert (! (=> anon1151_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1151_Then_assertion))
(assert (! (=> anon903_Else@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon903_Else@1_assertion))
(assert (! (=> anon903_Else@2 (and true 
   (and true
      (= nl@24@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left))
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
(or anon903_Else@2_assertion anon903_Else@3)
)) :named ax_anon903_Else@2))
(assert (! (=> anon903_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon903_Then@1_assertion))
(assert (! (=> anon903_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
(or anon904_Else anon904_Then)
)) :named ax_anon903_Then@2))
(assert (! (=> anon1263_Else (and true 
   (and true
      (= $@condition_$35 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (not $@condition_$35)
   )
$branchMerge_12
)) :named ax_anon1263_Else))
(assert (! (=> anon1263_Then (and true 
   (and true
      $@condition_$35
      (= $@condition_$35 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1263_Then@1 anon1263_Then_assertion)
)) :named ax_anon1263_Then))
(assert (! (=> anon1213_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon1213_Then@1_assertion))
(assert (! (=> anon1213_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
(or anon1213_Then@2_assertion anon1213_Then@3)
)) :named ax_anon1213_Then@2))
(assert (! (=> anon1201_Else (and true 
   (and true
      (= $@condition_$33 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (not $@condition_$33)
   )
$branchMerge_11
)) :named ax_anon1201_Else))
(assert (! (=> anon1201_Then (and true 
   (and true
      $@condition_$33
      (= $@condition_$33 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1201_Then@1 anon1201_Then_assertion)
)) :named ax_anon1201_Then))
(assert (! (=> anon1151_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon1151_Then@1_assertion))
(assert (! (=> anon1151_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
(or anon1151_Then@2_assertion anon1151_Then@3)
)) :named ax_anon1151_Then@2))
(assert (! (=> anon903_Else@2_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon903_Else@2_assertion))
(assert (! (=> anon903_Else@3 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon903_Else@3_assertion anon903_Else@4)
)) :named ax_anon903_Else@3))
(assert (! (=> anon904_Else (and true 
   (and true
      (= $@condition_$27 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= assertSecMask@_533@22 ZeroMask)
      (not $@condition_$27)
   )
anon242
)) :named ax_anon904_Else))
(assert (! (=> anon904_Then (and true 
   (and true
      $@condition_$27
      (< (* 1000 unfoldingK@_542) (Fractions 1))
      (< 0 unfoldingK@_542)
      (= $@condition_$27 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon904_Then@1 anon904_Then_assertion)
)) :named ax_anon904_Then))
(assert (! (=> anon1263_Then@1 (and true 
   (and true
      (forall( (|k#92#311| Int))(=> (and (<= 0 |k#92#311|) (< |k#92#311| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#311|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))))
   )
$branchMerge_12
)) :named ax_anon1263_Then@1))
(assert (! (=> anon1263_Then_assertion (not (and true
   (and true
      (forall( (|k#92#311| Int))(=> (and (<= 0 |k#92#311|) (< |k#92#311| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#311|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))))
   )
))) :named ax_anon1263_Then_assertion))
(assert (! (=> anon1213_Then@2_assertion (not (and true
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
))) :named ax_anon1213_Then@2_assertion))
(assert (! (=> anon1213_Then@3 (and true 
   (and true
      (= this@292@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1213_Then@3_assertion anon1213_Then@4)
)) :named ax_anon1213_Then@3))
(assert (! (=> anon1201_Then@1 (and true 
   (and true
      (forall( (|k#92#288| Int))(=> (and (<= 0 |k#92#288|) (< |k#92#288| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#288|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))))
   )
$branchMerge_11
)) :named ax_anon1201_Then@1))
(assert (! (=> anon1201_Then_assertion (not (and true
   (and true
      (forall( (|k#92#288| Int))(=> (and (<= 0 |k#92#288|) (< |k#92#288| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#288|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))))
   )
))) :named ax_anon1201_Then_assertion))
(assert (! (=> anon1151_Then@2_assertion (not (and true
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
))) :named ax_anon1151_Then@2_assertion))
(assert (! (=> anon1151_Then@3 (and true 
   (and true
      (= this@269@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1151_Then@3_assertion anon1151_Then@4)
)) :named ax_anon1151_Then@3))
(assert (! (=> anon903_Else@3_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon903_Else@3_assertion))
(assert (! (=> anon903_Else@4 (and true 
   (and true
      (< (* 1000 methodCallK@_634) (Fractions 1))
      (< (* 1000 methodCallK@_634) methodK@_506)
      (< 0 methodCallK@_634)
      (= nr@26@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right))
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon903_Else@4_assertion anon903_Else@5)
)) :named ax_anon903_Else@4))
(assert (! (=> anon904_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon904_Then@1_assertion anon904_Then@2)
)) :named ax_anon904_Then@1))
(assert (! (=> anon904_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon904_Then_assertion))
(assert (! (=> $branchMerge_12 (and true 
   (and true
   )
(or anon1264_Else anon1264_Then)
)) :named ax_$branchMerge_12))
(assert (! (=> anon1213_Then@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1213_Then@3_assertion))
(assert (! (=> anon1213_Then@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1213_Then@4_assertion anon1213_Then@5)
)) :named ax_anon1213_Then@4))
(assert (! (=> $branchMerge_11 (and true 
   (and true
   )
(or anon1202_Else anon1202_Then)
)) :named ax_$branchMerge_11))
(assert (! (=> anon1151_Then@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1151_Then@3_assertion))
(assert (! (=> anon1151_Then@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1151_Then@4_assertion anon1151_Then@5)
)) :named ax_anon1151_Then@4))
(assert (! (=> anon903_Else@4_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon903_Else@4_assertion))
(assert (! (=> anon903_Else@5 (and true 
   (and true
      (not (= this null))
   )
(or anon903_Else@5_assertion anon903_Else@6)
)) :named ax_anon903_Else@5))
(assert (! (=> anon904_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon904_Then@1_assertion))
(assert (! (=> anon904_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
(or anon904_Then@2_assertion anon904_Then@3)
)) :named ax_anon904_Then@2))
(assert (! (=> anon1264_Else (and true 
   (and true
      (= $@condition_$40 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (not $@condition_$40)
   )
anon805
)) :named ax_anon1264_Else))
(assert (! (=> anon1264_Then (and true 
   (and true
      $@condition_$40
      (= $@condition_$40 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1264_Then@1 anon1264_Then_assertion)
)) :named ax_anon1264_Then))
(assert (! (=> anon1213_Then@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1213_Then@4_assertion))
(assert (! (=> anon1213_Then@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$R))
      (= exhaleMask@_824@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@292@0 AVLTreeNode.valid) perm$N)))
   )
(or anon1214_Else anon1214_Then)
)) :named ax_anon1213_Then@5))
(assert (! (=> anon1202_Else (and true 
   (and true
      (= $@condition_$38 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (not $@condition_$38)
   )
anon681
)) :named ax_anon1202_Else))
(assert (! (=> anon1202_Then (and true 
   (and true
      $@condition_$38
      (= $@condition_$38 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1202_Then@1 anon1202_Then_assertion)
)) :named ax_anon1202_Then))
(assert (! (=> anon1151_Then@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1151_Then@4_assertion))
(assert (! (=> anon1151_Then@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$R))
      (= exhaleMask@_725@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this@269@0 AVLTreeNode.valid) perm$N)))
   )
(or anon1152_Else anon1152_Then)
)) :named ax_anon1151_Then@5))
(assert (! (=> anon903_Else@5_assertion (not (and true
   (and true
      (> methodCallK@_634 0)
   )
))) :named ax_anon903_Else@5_assertion))
(assert (! (=> anon903_Else@6 (and true 
   (and true
      (> methodCallK@_634 0)
   )
(or anon903_Else@6_assertion anon903_Else@7)
)) :named ax_anon903_Else@6))
(assert (! (=> anon904_Then@2_assertion (not (and true
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
   )
))) :named ax_anon904_Then@2_assertion))
(assert (! (=> anon904_Then@3 (and true 
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon904_Then@3_assertion anon904_Then@4)
)) :named ax_anon904_Then@3))
(assert (! (=> anon1264_Then@1 (and true 
   (and true
      (forall( (|k#93#312| Int))(=> (and (<= 0 |k#93#312|) (< |k#93#312| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#312|))))
   )
anon805
)) :named ax_anon1264_Then@1))
(assert (! (=> anon1264_Then_assertion (not (and true
   (and true
      (forall( (|k#93#312| Int))(=> (and (<= 0 |k#93#312|) (< |k#93#312| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#312|))))
   )
))) :named ax_anon1264_Then_assertion))
(assert (! (=> anon1214_Else (and true 
   (and true
      (= $@condition_$34 (not (CanRead$Int$ exhaleMask@_824@0 ZeroMask this@292@0 AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_824@0 ZeroMask this@292@0 AVLTreeNode.valid)
      (not $@condition_$34)
   )
anon705
)) :named ax_anon1214_Else))
(assert (! (=> anon1214_Then (and true 
   (and true
      $@condition_$34
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@292@0 AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_823@0 this@292@0 AVLTreeNode.valid))
      (= $@condition_$34 (not (CanRead$Int$ exhaleMask@_824@0 ZeroMask this@292@0 AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_824@0 ZeroMask this@292@0 AVLTreeNode.valid))
   )
anon705
)) :named ax_anon1214_Then))
(assert (! (=> anon1202_Then@1 (and true 
   (and true
      (forall( (|k#93#289| Int))(=> (and (<= 0 |k#93#289|) (< |k#93#289| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#289|))))
   )
anon681
)) :named ax_anon1202_Then@1))
(assert (! (=> anon1202_Then_assertion (not (and true
   (and true
      (forall( (|k#93#289| Int))(=> (and (<= 0 |k#93#289|) (< |k#93#289| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#289|))))
   )
))) :named ax_anon1202_Then_assertion))
(assert (! (=> anon1152_Else (and true 
   (and true
      (= $@condition_$32 (not (CanRead$Int$ exhaleMask@_725@0 ZeroMask this@269@0 AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_725@0 ZeroMask this@269@0 AVLTreeNode.valid)
      (not $@condition_$32)
   )
anon581
)) :named ax_anon1152_Else))
(assert (! (=> anon1152_Then (and true 
   (and true
      $@condition_$32
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@269@0 AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_724@0 this@269@0 AVLTreeNode.valid))
      (= $@condition_$32 (not (CanRead$Int$ exhaleMask@_725@0 ZeroMask this@269@0 AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_725@0 ZeroMask this@269@0 AVLTreeNode.valid))
   )
anon581
)) :named ax_anon1152_Then))
(assert (! (=> anon903_Else@6_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@26 this AVLTreeNode.left) perm$R) 0)
   )
))) :named ax_anon903_Else@6_assertion))
(assert (! (=> anon903_Else@7 (and true 
   (and true
      (< methodCallK@_634 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@26 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_636@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@26 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@26 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@26 this AVLTreeNode.left) perm$R) methodCallK@_634))))
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@26 this AVLTreeNode.left) perm$R) 0)
      (IsGoodMask exhaleMask@_636@0)
      (wf Heap@1 exhaleMask@_636@0 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1065_Else anon1065_Then)
)) :named ax_anon903_Else@7))
(assert (! (=> anon904_Then@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon904_Then@3_assertion))
(assert (! (=> anon904_Then@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon904_Then@4_assertion anon904_Then@5)
)) :named ax_anon904_Then@4))
(assert (! (=> anon805 (and true 
   (and true
      (= (= true $@bf) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (= (= true $@bf_1) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
   )
(or anon805@1 anon805_assertion)
)) :named ax_anon805))
(assert (! (=> anon705 (and true 
   (and true
      (IsGoodMask exhaleMask@_824@0)
      (wf Heap@1 exhaleMask@_824@0 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon705@1 anon705_assertion)
)) :named ax_anon705))
(assert (! (=> anon681 (and true 
   (and true
      (= (= true $@bf) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (= (= true $@bf_1) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
   )
(or anon681@1 anon681_assertion)
)) :named ax_anon681))
(assert (! (=> anon581 (and true 
   (and true
      (IsGoodMask exhaleMask@_725@0)
      (wf Heap@1 exhaleMask@_725@0 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon581@1 anon581_assertion)
)) :named ax_anon581))
(assert (! (=> anon1065_Else (and true 
   (and true
      (= $@condition_$28 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_636@2 exhaleMask@_636@0)
      (not $@condition_$28)
   )
anon407
)) :named ax_anon1065_Else))
(assert (! (=> anon1065_Then (and true 
   (and true
      $@condition_$28
      (= $@condition_$28 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1065_Then@1 anon1065_Then_assertion)
)) :named ax_anon1065_Then))
(assert (! (=> anon904_Then@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon904_Then@4_assertion))
(assert (! (=> anon904_Then@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= unfoldingMask@_538@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
anon905_Else
)) :named ax_anon904_Then@5))
(assert (! (=> anon805@1 (and true 
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) 1)
      (= (= true $@bf) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (= (= true $@bf_1) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
   )
(or anon805@1_assertion anon805@2)
)) :named ax_anon805@1))
(assert (! (=> anon805_assertion (not (and true
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) 1)
   )
))) :named ax_anon805_assertion))
(assert (! (=> anon705@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon705@1_assertion anon705@2)
)) :named ax_anon705@1))
(assert (! (=> anon705_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon705_assertion))
(assert (! (=> anon681@1 (and true 
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) 1)
      (= (= true $@bf) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (= (= true $@bf_1) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
   )
(or anon681@1_assertion anon681@2)
)) :named ax_anon681@1))
(assert (! (=> anon681_assertion (not (and true
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) 1)
   )
))) :named ax_anon681_assertion))
(assert (! (=> anon581@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon581@1_assertion anon581@2)
)) :named ax_anon581@1))
(assert (! (=> anon581_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon581_assertion))
(assert (! (=> anon1065_Then@1 (and true 
   (and true
      (> methodCallK@_634 0)
   )
(or anon1065_Then@1_assertion anon1065_Then@2)
)) :named ax_anon1065_Then@1))
(assert (! (=> anon1065_Then_assertion (not (and true
   (and true
      (> methodCallK@_634 0)
   )
))) :named ax_anon1065_Then_assertion))
(assert (! (=> anon905_Else (and true 
   (and true
      (= $@condition_$31 false)
      (not $@condition_$31)
      (not false)
   )
(or anon932_Else anon932_Then)
)) :named ax_anon905_Else))
(assert (! (=> anon805@1_assertion (not (and true
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
))) :named ax_anon805@1_assertion))
(assert (! (=> anon805@2 (and true 
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
(or anon805@2_assertion anon805@3)
)) :named ax_anon805@2))
(assert (! (=> anon705@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon705@1_assertion))
(assert (! (=> anon705@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$R))
      (= exhaleMask@_824@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_824@0 this@292@0 AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_824@1)
      (wf Heap@1 exhaleMask@_824@1 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon705@2_assertion anon705@3)
)) :named ax_anon705@2))
(assert (! (=> anon681@1_assertion (not (and true
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
))) :named ax_anon681@1_assertion))
(assert (! (=> anon681@2 (and true 
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
(or anon681@2_assertion anon681@3)
)) :named ax_anon681@2))
(assert (! (=> anon581@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon581@1_assertion))
(assert (! (=> anon581@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$R))
      (= exhaleMask@_725@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_725@0 this@269@0 AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_725@1)
      (wf Heap@1 exhaleMask@_725@1 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon581@2_assertion anon581@3)
)) :named ax_anon581@2))
(assert (! (=> anon1065_Then@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) 0)
   )
))) :named ax_anon1065_Then@1_assertion))
(assert (! (=> anon1065_Then@2 (and true 
   (and true
      (< methodCallK@_634 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_636@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) methodCallK@_634))))
      (= exhaleMask@_636@2 exhaleMask@_636@1)
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) 0)
      (IsGoodMask exhaleMask@_636@1)
      (wf Heap@1 exhaleMask@_636@1 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
anon407
)) :named ax_anon1065_Then@2))
(assert (! (=> anon932_Else (and true 
   (and true
      (= $@condition_$36 (not (CanRead$Int$ unfoldingMask@_538@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (= unfoldingHeap@_537@1 Heap@1)
      (CanRead$Int$ unfoldingMask@_538@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$36)
   )
anon139
)) :named ax_anon932_Else))
(assert (! (=> anon932_Then (and true 
   (and true
      $@condition_$36
      (< oldVers@_562@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@0 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$36 (not (CanRead$Int$ unfoldingMask@_538@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (= oldVers@_562@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
      (= unfoldingHeap@_537@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid newVers@_563@0))
      (= unfoldingHeap@_537@1 unfoldingHeap@_537@0)
      (not (CanRead$Int$ unfoldingMask@_538@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon139
)) :named ax_anon932_Then))
(assert (! (=> anon805@2_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon805@2_assertion))
(assert (! (=> anon805@3 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon805@3_assertion anon805@4)
)) :named ax_anon805@3))
(assert (! (=> anon705@2_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon705@2_assertion))
(assert (! (=> anon705@3 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon705@3_assertion anon705@4)
)) :named ax_anon705@3))
(assert (! (=> anon681@2_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon681@2_assertion))
(assert (! (=> anon681@3 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon681@3_assertion anon681@4)
)) :named ax_anon681@3))
(assert (! (=> anon581@2_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon581@2_assertion))
(assert (! (=> anon581@3 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon581@3_assertion anon581@4)
)) :named ax_anon581@3))
(assert (! (=> anon407 (and true 
   (and true
   )
(or anon407@1 anon407_assertion)
)) :named ax_anon407))
(assert (! (=> anon139 (and true 
   (and true
      (= unfoldingMask@_538@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key) perm$R) (Fractions 100)))))
      (= unfoldingMask@_538@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= unfoldingMask@_538@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_538@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_538@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_538@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) perm$R) (Fractions 100)))))
      (= unfoldingMask@_538@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_538@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_538@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_538@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) perm$R) (Fractions 100)))))
      (= unfoldingMask@_538@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= unfoldingMask@_538@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_538@0)
      (IsGoodMask unfoldingMask@_538@1)
      (IsGoodMask unfoldingMask@_538@2)
      (IsGoodMask unfoldingMask@_538@3)
      (IsGoodMask unfoldingMask@_538@4)
      (IsGoodMask unfoldingMask@_538@5)
      (IsGoodMask unfoldingMask@_538@6)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left)) AVLTreeNode@t))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right)) AVLTreeNode@t))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@0 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@1 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@2 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@3 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@4 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@5 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@6 ZeroMask)
   )
(or anon933_Else anon933_Then)
)) :named ax_anon139))
(assert (! (=> anon805@3_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$N)))
   )
))) :named ax_anon805@3_assertion))
(assert (! (=> anon805@4 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R))
      (= exhaleMask@_899@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$N)))
      (IsGoodMask exhaleMask@_899@0)
      (wf Heap@1 exhaleMask@_899@0 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon805@4_assertion anon805@5)
)) :named ax_anon805@4))
(assert (! (=> anon705@3_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon705@3_assertion))
(assert (! (=> anon705@4 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$R))
      (= exhaleMask@_824@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@1 this@292@0 AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_824@2)
      (wf Heap@1 exhaleMask@_824@2 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon705@4_assertion anon705@5)
)) :named ax_anon705@4))
(assert (! (=> anon681@3_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$N)))
   )
))) :named ax_anon681@3_assertion))
(assert (! (=> anon681@4 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R))
      (= exhaleMask@_800@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 this AVLTreeNode.key) perm$N)))
      (IsGoodMask exhaleMask@_800@0)
      (wf Heap@1 exhaleMask@_800@0 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon681@4_assertion anon681@5)
)) :named ax_anon681@4))
(assert (! (=> anon581@3_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon581@3_assertion))
(assert (! (=> anon581@4 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$R))
      (= exhaleMask@_725@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@1 this@269@0 AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_725@2)
      (wf Heap@1 exhaleMask@_725@2 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon581@4_assertion anon581@5)
)) :named ax_anon581@4))
(assert (! (=> anon407@1 (and true 
   (and true
      (> methodCallK@_634 0)
   )
(or anon407@1_assertion anon407@2)
)) :named ax_anon407@1))
(assert (! (=> anon407_assertion (not (and true
   (and true
      (> methodCallK@_634 0)
   )
))) :named ax_anon407_assertion))
(assert (! (=> anon933_Else (and true 
   (and true
      (= $@condition_$46 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= unfoldingMask@_538@8 unfoldingMask@_538@6)
      (not $@condition_$46)
   )
$branchMerge_17
)) :named ax_anon933_Else))
(assert (! (=> anon933_Then (and true 
   (and true
      $@condition_$46
      (= $@condition_$46 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= unfoldingMask@_538@7 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= unfoldingMask@_538@8 unfoldingMask@_538@7)
      (> (Fractions 100) 0)
      (IsGoodMask unfoldingMask@_538@7)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@6 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@7 ZeroMask)
   )
$branchMerge_17
)) :named ax_anon933_Then))
(assert (! (=> anon805@4_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon805@4_assertion))
(assert (! (=> anon805@5 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon805@5_assertion anon805@6)
)) :named ax_anon805@5))
(assert (! (=> anon705@4_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon705@4_assertion))
(assert (! (=> anon705@5 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon705@5_assertion anon705@6)
)) :named ax_anon705@5))
(assert (! (=> anon681@4_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon681@4_assertion))
(assert (! (=> anon681@5 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon681@5_assertion anon681@6)
)) :named ax_anon681@5))
(assert (! (=> anon581@4_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon581@4_assertion))
(assert (! (=> anon581@5 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon581@5_assertion anon581@6)
)) :named ax_anon581@5))
(assert (! (=> anon407@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@2 this AVLTreeNode.right) perm$R) 0)
   )
))) :named ax_anon407@1_assertion))
(assert (! (=> anon407@2 (and true 
   (and true
      (< methodCallK@_634 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_636@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@2 this AVLTreeNode.right) perm$R) methodCallK@_634))))
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@2 this AVLTreeNode.right) perm$R) 0)
      (IsGoodMask exhaleMask@_636@3)
      (wf Heap@1 exhaleMask@_636@3 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1066_Else anon1066_Then)
)) :named ax_anon407@2))
(assert (! (=> $branchMerge_17 (and true 
   (and true
   )
(or anon934_Else anon934_Then)
)) :named ax_$branchMerge_17))
(assert (! (=> anon805@5_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon805@5_assertion))
(assert (! (=> anon805@6 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$R))
      (= exhaleMask@_899@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@0 this AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_899@1)
      (wf Heap@1 exhaleMask@_899@1 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon805@6_assertion anon805@7)
)) :named ax_anon805@6))
(assert (! (=> anon705@5_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon705@5_assertion))
(assert (! (=> anon705@6 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_824@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@2 this@292@0 AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodExhaleState exhaleHeap@_823@0 Heap@1 exhaleMask@_824@3 ZeroMask)
      (IsGoodMask exhaleMask@_824@3)
      (or (= r@294@0 null) (= (dtype r@294@0) AVLTreeNode@t))
      (wf exhaleHeap@_823@0 exhaleMask@_824@3 ZeroMask)
      (wf Heap@1 exhaleMask@_824@3 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1215_Else anon1215_Then)
)) :named ax_anon705@6))
(assert (! (=> anon681@5_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon681@5_assertion))
(assert (! (=> anon681@6 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$R))
      (= exhaleMask@_800@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@0 this AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_800@1)
      (wf Heap@1 exhaleMask@_800@1 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon681@6_assertion anon681@7)
)) :named ax_anon681@6))
(assert (! (=> anon581@5_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon581@5_assertion))
(assert (! (=> anon581@6 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_725@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@2 this@269@0 AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodExhaleState exhaleHeap@_724@0 Heap@1 exhaleMask@_725@3 ZeroMask)
      (IsGoodMask exhaleMask@_725@3)
      (or (= r@271@0 null) (= (dtype r@271@0) AVLTreeNode@t))
      (wf exhaleHeap@_724@0 exhaleMask@_725@3 ZeroMask)
      (wf Heap@1 exhaleMask@_725@3 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1153_Else anon1153_Then)
)) :named ax_anon581@6))
(assert (! (=> anon1066_Else (and true 
   (and true
      (= $@condition_$37 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_636@5 exhaleMask@_636@3)
      (not $@condition_$37)
   )
$branchMerge_13
)) :named ax_anon1066_Else))
(assert (! (=> anon1066_Then (and true 
   (and true
      $@condition_$37
      (= $@condition_$37 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1066_Then@1 anon1066_Then_assertion)
)) :named ax_anon1066_Then))
(assert (! (=> anon934_Else (and true 
   (and true
      (= $@condition_$55 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= unfoldingMask@_538@10 unfoldingMask@_538@8)
      (not $@condition_$55)
   )
$branchMerge_22
)) :named ax_anon934_Else))
(assert (! (=> anon934_Then (and true 
   (and true
      $@condition_$55
      (= $@condition_$55 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= unfoldingMask@_538@10 unfoldingMask@_538@9)
      (= unfoldingMask@_538@9 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_538@9)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@8 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@9 ZeroMask)
   )
$branchMerge_22
)) :named ax_anon934_Then))
(assert (! (=> anon805@6_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon805@6_assertion))
(assert (! (=> anon805@7 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon805@7_assertion anon805@8)
)) :named ax_anon805@7))
(assert (! (=> anon1215_Else (and true 
   (and true
      (= $@condition_$45 (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
      (not $@condition_$45)
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
   )
$branchMerge_16
)) :named ax_anon1215_Else))
(assert (! (=> anon1215_Then (and true 
   (and true
      $@condition_$45
      (= $@condition_$45 (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
      (= r@294@0 null)
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))
   )
$branchMerge_16
)) :named ax_anon1215_Then))
(assert (! (=> anon681@6_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon681@6_assertion))
(assert (! (=> anon681@7 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon681@7_assertion anon681@8)
)) :named ax_anon681@7))
(assert (! (=> anon1153_Else (and true 
   (and true
      (= $@condition_$44 (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
      (not $@condition_$44)
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
   )
$branchMerge_15
)) :named ax_anon1153_Else))
(assert (! (=> anon1153_Then (and true 
   (and true
      $@condition_$44
      (= $@condition_$44 (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
      (= r@271@0 null)
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))
   )
$branchMerge_15
)) :named ax_anon1153_Then))
(assert (! (=> anon1066_Then@1 (and true 
   (and true
      (> methodCallK@_634 0)
   )
(or anon1066_Then@1_assertion anon1066_Then@2)
)) :named ax_anon1066_Then@1))
(assert (! (=> anon1066_Then_assertion (not (and true
   (and true
      (> methodCallK@_634 0)
   )
))) :named ax_anon1066_Then_assertion))
(assert (! (=> $branchMerge_22 (and true 
   (and true
   )
(or anon935_Else anon935_Then)
)) :named ax_$branchMerge_22))
(assert (! (=> anon805@7_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$N)))
   )
))) :named ax_anon805@7_assertion))
(assert (! (=> anon805@8 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_899@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@1 this AVLTreeNode.left) perm$N)))
      (IsGoodMask exhaleMask@_899@2)
      (wf Heap@1 exhaleMask@_899@2 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon805@8_assertion anon805@9)
)) :named ax_anon805@8))
(assert (! (=> $branchMerge_16 (and true 
   (and true
   )
(or anon1216_Else anon1216_Then)
)) :named ax_$branchMerge_16))
(assert (! (=> anon681@7_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$N)))
   )
))) :named ax_anon681@7_assertion))
(assert (! (=> anon681@8 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_800@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@1 this AVLTreeNode.left) perm$N)))
      (IsGoodMask exhaleMask@_800@2)
      (wf Heap@1 exhaleMask@_800@2 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon681@8_assertion anon681@9)
)) :named ax_anon681@8))
(assert (! (=> $branchMerge_15 (and true 
   (and true
   )
(or anon1154_Else anon1154_Then)
)) :named ax_$branchMerge_15))
(assert (! (=> anon1066_Then@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) 0)
   )
))) :named ax_anon1066_Then@1_assertion))
(assert (! (=> anon1066_Then@2 (and true 
   (and true
      (< methodCallK@_634 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_636@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) methodCallK@_634))))
      (= exhaleMask@_636@5 exhaleMask@_636@4)
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) 0)
      (IsGoodMask exhaleMask@_636@4)
      (wf Heap@1 exhaleMask@_636@4 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_13
)) :named ax_anon1066_Then@2))
(assert (! (=> anon935_Else (and true 
   (and true
      (= $@condition_$65 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= unfoldingMask@_538@12 unfoldingMask@_538@10)
      (not $@condition_$65)
   )
$branchMerge_27
)) :named ax_anon935_Else))
(assert (! (=> anon935_Then (and true 
   (and true
      $@condition_$65
      (= $@condition_$65 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= unfoldingMask@_538@11 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= unfoldingMask@_538@12 unfoldingMask@_538@11)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_538@11)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@10 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@11 ZeroMask)
   )
$branchMerge_27
)) :named ax_anon935_Then))
(assert (! (=> anon805@8_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon805@8_assertion))
(assert (! (=> anon805@9 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon805@10 anon805@9_assertion)
)) :named ax_anon805@9))
(assert (! (=> anon1216_Else (and true 
   (and true
      (= $@condition_$52 (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))))
      (not $@condition_$52)
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))
   )
$branchMerge_20
)) :named ax_anon1216_Else))
(assert (! (=> anon1216_Then (and true 
   (and true
      $@condition_$52
      (= $@condition_$52 (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))))
      (not (= r@294@0 null))
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
   )
$branchMerge_20
)) :named ax_anon1216_Then))
(assert (! (=> anon681@8_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon681@8_assertion))
(assert (! (=> anon681@9 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon681@10 anon681@9_assertion)
)) :named ax_anon681@9))
(assert (! (=> anon1154_Else (and true 
   (and true
      (= $@condition_$49 (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))))
      (not $@condition_$49)
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))
   )
$branchMerge_18
)) :named ax_anon1154_Else))
(assert (! (=> anon1154_Then (and true 
   (and true
      $@condition_$49
      (= $@condition_$49 (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))))
      (not (= r@271@0 null))
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
   )
$branchMerge_18
)) :named ax_anon1154_Then))
(assert (! (=> $branchMerge_13 (and true 
   (and true
   )
(or anon1067_Else anon1067_Then)
)) :named ax_$branchMerge_13))
(assert (! (=> $branchMerge_27 (and true 
   (and true
   )
(or anon936_Else anon936_Then)
)) :named ax_$branchMerge_27))
(assert (! (=> anon805@10 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_899@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$N)))
      (IsGoodMask exhaleMask@_899@3)
      (wf Heap@1 exhaleMask@_899@3 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon805@10_assertion anon805@11)
)) :named ax_anon805@10))
(assert (! (=> anon805@9_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_899@2 this AVLTreeNode.right) perm$N)))
   )
))) :named ax_anon805@9_assertion))
(assert (! (=> $branchMerge_20 (and true 
   (and true
   )
(or anon1217_Else anon1217_Then)
)) :named ax_$branchMerge_20))
(assert (! (=> anon681@10 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_800@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$N)))
      (IsGoodMask exhaleMask@_800@3)
      (wf Heap@1 exhaleMask@_800@3 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon681@10_assertion anon681@11)
)) :named ax_anon681@10))
(assert (! (=> anon681@9_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_800@2 this AVLTreeNode.right) perm$N)))
   )
))) :named ax_anon681@9_assertion))
(assert (! (=> $branchMerge_18 (and true 
   (and true
   )
(or anon1155_Else anon1155_Then)
)) :named ax_$branchMerge_18))
(assert (! (=> anon1067_Else (and true 
   (and true
      (= $@condition_$42 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_636@7 exhaleMask@_636@5)
      (not $@condition_$42)
   )
$branchMerge_14
)) :named ax_anon1067_Else))
(assert (! (=> anon1067_Then (and true 
   (and true
      $@condition_$42
      (= $@condition_$42 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1067_Then@1 anon1067_Then_assertion)
)) :named ax_anon1067_Then))
(assert (! (=> anon936_Else (and true 
   (and true
      (= $@condition_$72 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= unfoldingMask@_538@14 unfoldingMask@_538@12)
      (not $@condition_$72)
   )
$branchMerge_30
)) :named ax_anon936_Else))
(assert (! (=> anon936_Then (and true 
   (and true
      $@condition_$72
      (= $@condition_$72 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= unfoldingMask@_538@13 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= unfoldingMask@_538@14 unfoldingMask@_538@13)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_538@13)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@12 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@13 ZeroMask)
   )
$branchMerge_30
)) :named ax_anon936_Then))
(assert (! (=> anon805@10_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon805@10_assertion))
(assert (! (=> anon805@11 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon805@11_assertion anon805@12)
)) :named ax_anon805@11))
(assert (! (=> anon1217_Else (and true 
   (and true
      (= $@condition_$61 (not (= r@294@0 null)))
      (= Mask@32 exhaleMask@_824@3)
      (= r@294@0 null)
      (not $@condition_$61)
   )
$branchMerge_25
)) :named ax_anon1217_Else))
(assert (! (=> anon1217_Then (and true 
   (and true
      $@condition_$61
      (= $@condition_$61 (not (= r@294@0 null)))
      (= Mask@31 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@3 r@294@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@3 r@294@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_824@3 r@294@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@32 Mask@31)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@31)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.valid)))
      (not (= r@294@0 null))
      (wf exhaleHeap@_823@0 exhaleMask@_824@3 ZeroMask)
      (wf exhaleHeap@_823@0 Mask@31 ZeroMask)
   )
$branchMerge_25
)) :named ax_anon1217_Then))
(assert (! (=> anon681@10_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon681@10_assertion))
(assert (! (=> anon681@11 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon681@11_assertion anon681@12)
)) :named ax_anon681@11))
(assert (! (=> anon1155_Else (and true 
   (and true
      (= $@condition_$57 (not (= r@271@0 null)))
      (= Mask@62 exhaleMask@_725@3)
      (= r@271@0 null)
      (not $@condition_$57)
   )
$branchMerge_23
)) :named ax_anon1155_Else))
(assert (! (=> anon1155_Then (and true 
   (and true
      $@condition_$57
      (= $@condition_$57 (not (= r@271@0 null)))
      (= Mask@61 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@3 r@271@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@3 r@271@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_725@3 r@271@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@62 Mask@61)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@61)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.valid)))
      (not (= r@271@0 null))
      (wf exhaleHeap@_724@0 exhaleMask@_725@3 ZeroMask)
      (wf exhaleHeap@_724@0 Mask@61 ZeroMask)
   )
$branchMerge_23
)) :named ax_anon1155_Then))
(assert (! (=> anon1067_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1067_Then@1_assertion anon1067_Then@2)
)) :named ax_anon1067_Then@1))
(assert (! (=> anon1067_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1067_Then_assertion))
(assert (! (=> $branchMerge_30 (and true 
   (and true
   )
(or anon937_Else anon937_Then)
)) :named ax_$branchMerge_30))
(assert (! (=> anon805@11_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon805@11_assertion))
(assert (! (=> anon805@12 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$R))
      (= exhaleMask@_899@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@3 this AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_899@4)
      (wf Heap@1 exhaleMask@_899@4 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon805@12_assertion anon805@13)
)) :named ax_anon805@12))
(assert (! (=> $branchMerge_25 (and true 
   (and true
   )
(or anon1218_Else anon1218_Then)
)) :named ax_$branchMerge_25))
(assert (! (=> anon681@11_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon681@11_assertion))
(assert (! (=> anon681@12 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$R))
      (= exhaleMask@_800@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@3 this AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_800@4)
      (wf Heap@1 exhaleMask@_800@4 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon681@12_assertion anon681@13)
)) :named ax_anon681@12))
(assert (! (=> $branchMerge_23 (and true 
   (and true
   )
(or anon1156_Else anon1156_Then)
)) :named ax_$branchMerge_23))
(assert (! (=> anon1067_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1067_Then@1_assertion))
(assert (! (=> anon1067_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_636@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1068_Else anon1068_Then)
)) :named ax_anon1067_Then@2))
(assert (! (=> anon937_Else (and true 
   (and true
      (= $@condition_$81 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (not $@condition_$81)
   )
$branchMerge_33
)) :named ax_anon937_Else))
(assert (! (=> anon937_Then (and true 
   (and true
      $@condition_$81
      (= $@condition_$81 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (forall( (|lk#79#228| Int))(=> (and (<= 0 |lk#79#228|) (< |lk#79#228| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) |lk#79#228|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null))
   )
$branchMerge_33
)) :named ax_anon937_Then))
(assert (! (=> anon805@12_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon805@12_assertion))
(assert (! (=> anon805@13 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon805@13_assertion anon805@14)
)) :named ax_anon805@13))
(assert (! (=> anon1218_Else (and true 
   (and true
      (= $@condition_$70 (not (= r@294@0 null)))
      (= Mask@34 Mask@32)
      (= r@294@0 null)
      (not $@condition_$70)
   )
$branchMerge_29
)) :named ax_anon1218_Else))
(assert (! (=> anon1218_Then (and true 
   (and true
      $@condition_$70
      (= $@condition_$70 (not (= r@294@0 null)))
      (= Mask@33 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@32 r@294@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@32 r@294@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@32 r@294@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@34 Mask@33)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@33)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys)))
      (not (= r@294@0 null))
      (wf exhaleHeap@_823@0 Mask@32 ZeroMask)
      (wf exhaleHeap@_823@0 Mask@33 ZeroMask)
   )
$branchMerge_29
)) :named ax_anon1218_Then))
(assert (! (=> anon681@12_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon681@12_assertion))
(assert (! (=> anon681@13 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon681@13_assertion anon681@14)
)) :named ax_anon681@13))
(assert (! (=> anon1156_Else (and true 
   (and true
      (= $@condition_$68 (not (= r@271@0 null)))
      (= Mask@64 Mask@62)
      (= r@271@0 null)
      (not $@condition_$68)
   )
$branchMerge_28
)) :named ax_anon1156_Else))
(assert (! (=> anon1156_Then (and true 
   (and true
      $@condition_$68
      (= $@condition_$68 (not (= r@271@0 null)))
      (= Mask@63 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@62 r@271@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@62 r@271@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@62 r@271@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@64 Mask@63)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@63)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys)))
      (not (= r@271@0 null))
      (wf exhaleHeap@_724@0 Mask@62 ZeroMask)
      (wf exhaleHeap@_724@0 Mask@63 ZeroMask)
   )
$branchMerge_28
)) :named ax_anon1156_Then))
(assert (! (=> anon1068_Else (and true 
   (and true
      (= $@condition_$47 (not (CanRead$Int$ exhaleMask@_636@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_636@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$47)
   )
anon412
)) :named ax_anon1068_Else))
(assert (! (=> anon1068_Then (and true 
   (and true
      $@condition_$47
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$47 (not (CanRead$Int$ exhaleMask@_636@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_636@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon412
)) :named ax_anon1068_Then))
(assert (! (=> $branchMerge_33 (and true 
   (and true
   )
(or anon938_Else anon938_Then)
)) :named ax_$branchMerge_33))
(assert (! (=> anon805@13_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon805@13_assertion))
(assert (! (=> anon805@14 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_899@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@4 this AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_899@5)
      (wf Heap@1 exhaleMask@_899@5 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1265_Else anon1265_Then)
)) :named ax_anon805@14))
(assert (! (=> $branchMerge_29 (and true 
   (and true
   )
(or anon1219_Else anon1219_Then)
)) :named ax_$branchMerge_29))
(assert (! (=> anon681@13_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon681@13_assertion))
(assert (! (=> anon681@14 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_800@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@4 this AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_800@5)
      (wf Heap@1 exhaleMask@_800@5 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1203_Else anon1203_Then)
)) :named ax_anon681@14))
(assert (! (=> $branchMerge_28 (and true 
   (and true
   )
(or anon1157_Else anon1157_Then)
)) :named ax_$branchMerge_28))
(assert (! (=> anon412 (and true 
   (and true
      (= exhaleMask@_636@7 exhaleMask@_636@6)
      (IsGoodMask exhaleMask@_636@6)
      (wf Heap@1 exhaleMask@_636@6 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_14
)) :named ax_anon412))
(assert (! (=> anon938_Else (and true 
   (and true
      (= $@condition_$91 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (not $@condition_$91)
   )
$branchMerge_38
)) :named ax_anon938_Else))
(assert (! (=> anon938_Then (and true 
   (and true
      $@condition_$91
      (= $@condition_$91 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null))
   )
$branchMerge_38
)) :named ax_anon938_Then))
(assert (! (=> anon1265_Else (and true 
   (and true
      (= $@condition_$54 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_899@7 exhaleMask@_899@5)
      (not $@condition_$54)
   )
$branchMerge_21
)) :named ax_anon1265_Else))
(assert (! (=> anon1265_Then (and true 
   (and true
      $@condition_$54
      (= $@condition_$54 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1265_Then@1 anon1265_Then_assertion)
)) :named ax_anon1265_Then))
(assert (! (=> anon1219_Else (and true 
   (and true
      (= $@condition_$78 (not (= r@294@0 null)))
      (= Mask@36 Mask@34)
      (= r@294@0 null)
      (not $@condition_$78)
   )
$branchMerge_32
)) :named ax_anon1219_Else))
(assert (! (=> anon1219_Then (and true 
   (and true
      $@condition_$78
      (= $@condition_$78 (not (= r@294@0 null)))
      (= Mask@35 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@34 r@294@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@34 r@294@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@34 r@294@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@36 Mask@35)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@35)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.height)))
      (not (= r@294@0 null))
      (wf exhaleHeap@_823@0 Mask@34 ZeroMask)
      (wf exhaleHeap@_823@0 Mask@35 ZeroMask)
   )
$branchMerge_32
)) :named ax_anon1219_Then))
(assert (! (=> anon1203_Else (and true 
   (and true
      (= $@condition_$51 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_800@7 exhaleMask@_800@5)
      (not $@condition_$51)
   )
$branchMerge_19
)) :named ax_anon1203_Else))
(assert (! (=> anon1203_Then (and true 
   (and true
      $@condition_$51
      (= $@condition_$51 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1203_Then@1 anon1203_Then_assertion)
)) :named ax_anon1203_Then))
(assert (! (=> anon1157_Else (and true 
   (and true
      (= $@condition_$75 (not (= r@271@0 null)))
      (= Mask@66 Mask@64)
      (= r@271@0 null)
      (not $@condition_$75)
   )
$branchMerge_31
)) :named ax_anon1157_Else))
(assert (! (=> anon1157_Then (and true 
   (and true
      $@condition_$75
      (= $@condition_$75 (not (= r@271@0 null)))
      (= Mask@65 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@64 r@271@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@64 r@271@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@64 r@271@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@66 Mask@65)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@65)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.height)))
      (not (= r@271@0 null))
      (wf exhaleHeap@_724@0 Mask@64 ZeroMask)
      (wf exhaleHeap@_724@0 Mask@65 ZeroMask)
   )
$branchMerge_31
)) :named ax_anon1157_Then))
(assert (! (=> $branchMerge_14 (and true 
   (and true
   )
(or anon1069_Else anon1069_Then)
)) :named ax_$branchMerge_14))
(assert (! (=> $branchMerge_38 (and true 
   (and true
   )
(or anon939_Else anon939_Then)
)) :named ax_$branchMerge_38))
(assert (! (=> anon1265_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1265_Then@1_assertion anon1265_Then@2)
)) :named ax_anon1265_Then@1))
(assert (! (=> anon1265_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1265_Then_assertion))
(assert (! (=> $branchMerge_32 (and true 
   (and true
   )
(or anon1220_Else anon1220_Then)
)) :named ax_$branchMerge_32))
(assert (! (=> anon1203_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1203_Then@1_assertion anon1203_Then@2)
)) :named ax_anon1203_Then@1))
(assert (! (=> anon1203_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1203_Then_assertion))
(assert (! (=> $branchMerge_31 (and true 
   (and true
   )
(or anon1158_Else anon1158_Then)
)) :named ax_$branchMerge_31))
(assert (! (=> anon1069_Else (and true 
   (and true
      (= $@condition_$48 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_636@9 exhaleMask@_636@7)
      (not $@condition_$48)
   )
anon417
)) :named ax_anon1069_Else))
(assert (! (=> anon1069_Then (and true 
   (and true
      $@condition_$48
      (= $@condition_$48 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1069_Then@1 anon1069_Then_assertion)
)) :named ax_anon1069_Then))
(assert (! (=> anon939_Else (and true 
   (and true
      (= $@condition_$101 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= unfoldingMask@_538@16 unfoldingMask@_538@14)
      (not $@condition_$101)
   )
$branchMerge_43
)) :named ax_anon939_Else))
(assert (! (=> anon939_Then (and true 
   (and true
      $@condition_$101
      (= $@condition_$101 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= unfoldingMask@_538@15 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= unfoldingMask@_538@16 unfoldingMask@_538@15)
      (> (Fractions 100) 0)
      (IsGoodMask unfoldingMask@_538@15)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@14 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@15 ZeroMask)
   )
$branchMerge_43
)) :named ax_anon939_Then))
(assert (! (=> anon1265_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1265_Then@1_assertion))
(assert (! (=> anon1265_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_899@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1266_Else anon1266_Then)
)) :named ax_anon1265_Then@2))
(assert (! (=> anon1220_Else (and true 
   (and true
      (= $@condition_$87 (not (= r@294@0 null)))
      (= Mask@38 Mask@36)
      (= r@294@0 null)
      (not $@condition_$87)
   )
$branchMerge_36
)) :named ax_anon1220_Else))
(assert (! (=> anon1220_Then (and true 
   (and true
      $@condition_$87
      (= $@condition_$87 (not (= r@294@0 null)))
      (= Mask@37 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@36 r@294@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@36 r@294@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@36 r@294@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@38 Mask@37)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@37)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.balanceFactor)))
      (not (= r@294@0 null))
      (wf exhaleHeap@_823@0 Mask@36 ZeroMask)
      (wf exhaleHeap@_823@0 Mask@37 ZeroMask)
   )
$branchMerge_36
)) :named ax_anon1220_Then))
(assert (! (=> anon1203_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1203_Then@1_assertion))
(assert (! (=> anon1203_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_800@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1204_Else anon1204_Then)
)) :named ax_anon1203_Then@2))
(assert (! (=> anon1158_Else (and true 
   (and true
      (= $@condition_$83 (not (= r@271@0 null)))
      (= Mask@68 Mask@66)
      (= r@271@0 null)
      (not $@condition_$83)
   )
$branchMerge_34
)) :named ax_anon1158_Else))
(assert (! (=> anon1158_Then (and true 
   (and true
      $@condition_$83
      (= $@condition_$83 (not (= r@271@0 null)))
      (= Mask@67 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@66 r@271@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@66 r@271@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@66 r@271@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@68 Mask@67)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@67)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.balanceFactor)))
      (not (= r@271@0 null))
      (wf exhaleHeap@_724@0 Mask@66 ZeroMask)
      (wf exhaleHeap@_724@0 Mask@67 ZeroMask)
   )
$branchMerge_34
)) :named ax_anon1158_Then))
(assert (! (=> anon1069_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1069_Then@1_assertion anon1069_Then@2)
)) :named ax_anon1069_Then@1))
(assert (! (=> anon1069_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1069_Then_assertion))
(assert (! (=> $branchMerge_43 (and true 
   (and true
   )
(or anon940_Else anon940_Then)
)) :named ax_$branchMerge_43))
(assert (! (=> anon1266_Else (and true 
   (and true
      (= $@condition_$63 (not (CanRead$Int$ exhaleMask@_899@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_899@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$63)
   )
anon808
)) :named ax_anon1266_Else))
(assert (! (=> anon1266_Then (and true 
   (and true
      $@condition_$63
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_898@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$63 (not (CanRead$Int$ exhaleMask@_899@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_899@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon808
)) :named ax_anon1266_Then))
(assert (! (=> $branchMerge_36 (and true 
   (and true
   )
(or anon1221_Else anon1221_Then)
)) :named ax_$branchMerge_36))
(assert (! (=> anon1204_Else (and true 
   (and true
      (= $@condition_$59 (not (CanRead$Int$ exhaleMask@_800@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_800@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$59)
   )
anon684
)) :named ax_anon1204_Else))
(assert (! (=> anon1204_Then (and true 
   (and true
      $@condition_$59
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_799@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$59 (not (CanRead$Int$ exhaleMask@_800@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_800@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon684
)) :named ax_anon1204_Then))
(assert (! (=> $branchMerge_34 (and true 
   (and true
   )
(or anon1159_Else anon1159_Then)
)) :named ax_$branchMerge_34))
(assert (! (=> anon1069_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1069_Then@1_assertion))
(assert (! (=> anon1069_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_636@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_636@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1070_Else anon1070_Then)
)) :named ax_anon1069_Then@2))
(assert (! (=> anon940_Else (and true 
   (and true
      (= $@condition_$112 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= unfoldingMask@_538@18 unfoldingMask@_538@16)
      (not $@condition_$112)
   )
$branchMerge_49
)) :named ax_anon940_Else))
(assert (! (=> anon940_Then (and true 
   (and true
      $@condition_$112
      (= $@condition_$112 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= unfoldingMask@_538@17 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= unfoldingMask@_538@18 unfoldingMask@_538@17)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_538@17)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@16 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@17 ZeroMask)
   )
$branchMerge_49
)) :named ax_anon940_Then))
(assert (! (=> anon808 (and true 
   (and true
      (= exhaleMask@_899@7 exhaleMask@_899@6)
      (IsGoodMask exhaleMask@_899@6)
      (wf Heap@1 exhaleMask@_899@6 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_21
)) :named ax_anon808))
(assert (! (=> anon1221_Else (and true 
   (and true
      (= $@condition_$97 (not (= r@294@0 null)))
      (= r@294@0 null)
      (not $@condition_$97)
   )
$branchMerge_41
)) :named ax_anon1221_Else))
(assert (! (=> anon1221_Then (and true 
   (and true
      $@condition_$97
      (= $@condition_$97 (not (= r@294@0 null)))
      (not (= r@294@0 null))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys) k@19))
   )
$branchMerge_41
)) :named ax_anon1221_Then))
(assert (! (=> anon684 (and true 
   (and true
      (= exhaleMask@_800@7 exhaleMask@_800@6)
      (IsGoodMask exhaleMask@_800@6)
      (wf Heap@1 exhaleMask@_800@6 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_19
)) :named ax_anon684))
(assert (! (=> anon1159_Else (and true 
   (and true
      (= $@condition_$93 (not (= r@271@0 null)))
      (= r@271@0 null)
      (not $@condition_$93)
   )
$branchMerge_39
)) :named ax_anon1159_Else))
(assert (! (=> anon1159_Then (and true 
   (and true
      $@condition_$93
      (= $@condition_$93 (not (= r@271@0 null)))
      (not (= r@271@0 null))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys) k@19))
   )
$branchMerge_39
)) :named ax_anon1159_Then))
(assert (! (=> anon1070_Else (and true 
   (and true
      (= $@condition_$74 (not (CanRead$Int$ exhaleMask@_636@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_636@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$74)
   )
anon416
)) :named ax_anon1070_Else))
(assert (! (=> anon1070_Then (and true 
   (and true
      $@condition_$74
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$74 (not (CanRead$Int$ exhaleMask@_636@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_636@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon416
)) :named ax_anon1070_Then))
(assert (! (=> $branchMerge_49 (and true 
   (and true
   )
(or anon941_Else anon941_Then)
)) :named ax_$branchMerge_49))
(assert (! (=> $branchMerge_21 (and true 
   (and true
   )
(or anon1267_Else anon1267_Then)
)) :named ax_$branchMerge_21))
(assert (! (=> $branchMerge_41 (and true 
   (and true
   )
(or anon1222_Else anon1222_Then)
)) :named ax_$branchMerge_41))
(assert (! (=> $branchMerge_19 (and true 
   (and true
   )
(or anon1205_Else anon1205_Then)
)) :named ax_$branchMerge_19))
(assert (! (=> $branchMerge_39 (and true 
   (and true
   )
(or anon1160_Else anon1160_Then)
)) :named ax_$branchMerge_39))
(assert (! (=> anon416 (and true 
   (and true
      (= exhaleMask@_636@9 exhaleMask@_636@8)
      (IsGoodMask exhaleMask@_636@8)
      (wf Heap@1 exhaleMask@_636@8 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
anon417
)) :named ax_anon416))
(assert (! (=> anon941_Else (and true 
   (and true
      (= $@condition_$124 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= unfoldingMask@_538@20 unfoldingMask@_538@18)
      (not $@condition_$124)
   )
$branchMerge_54
)) :named ax_anon941_Else))
(assert (! (=> anon941_Then (and true 
   (and true
      $@condition_$124
      (= $@condition_$124 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= unfoldingMask@_538@19 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_538@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= unfoldingMask@_538@20 unfoldingMask@_538@19)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_538@19)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@18 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@19 ZeroMask)
   )
$branchMerge_54
)) :named ax_anon941_Then))
(assert (! (=> anon1267_Else (and true 
   (and true
      (= $@condition_$64 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_899@9 exhaleMask@_899@7)
      (not $@condition_$64)
   )
$branchMerge_26
)) :named ax_anon1267_Else))
(assert (! (=> anon1267_Then (and true 
   (and true
      $@condition_$64
      (= $@condition_$64 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1267_Then@1 anon1267_Then_assertion)
)) :named ax_anon1267_Then))
(assert (! (=> anon1222_Else (and true 
   (and true
      (= $@condition_$108 (not (= r@294@0 null)))
      (= r@294@0 null)
      (not $@condition_$108)
   )
$branchMerge_47
)) :named ax_anon1222_Else))
(assert (! (=> anon1222_Then (and true 
   (and true
      $@condition_$108
      (= $@condition_$108 (not (= r@294@0 null)))
      (forall( (|i#84#295| Int))(=> (and (<= 0 |i#84#295|) (< |i#84#295| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys)))) (or (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) |i#84#295|)) (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) |i#84#295|) k@19))))
      (not (= r@294@0 null))
   )
$branchMerge_47
)) :named ax_anon1222_Then))
(assert (! (=> anon1205_Else (and true 
   (and true
      (= $@condition_$60 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_800@9 exhaleMask@_800@7)
      (not $@condition_$60)
   )
$branchMerge_24
)) :named ax_anon1205_Else))
(assert (! (=> anon1205_Then (and true 
   (and true
      $@condition_$60
      (= $@condition_$60 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1205_Then@1 anon1205_Then_assertion)
)) :named ax_anon1205_Then))
(assert (! (=> anon1160_Else (and true 
   (and true
      (= $@condition_$104 (not (= r@271@0 null)))
      (= r@271@0 null)
      (not $@condition_$104)
   )
$branchMerge_45
)) :named ax_anon1160_Else))
(assert (! (=> anon1160_Then (and true 
   (and true
      $@condition_$104
      (= $@condition_$104 (not (= r@271@0 null)))
      (forall( (|i#84#272| Int))(=> (and (<= 0 |i#84#272|) (< |i#84#272| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys)))) (or (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) |i#84#272|)) (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) |i#84#272|) k@19))))
      (not (= r@271@0 null))
   )
$branchMerge_45
)) :named ax_anon1160_Then))
(assert (! (=> anon417 (and true 
   (and true
      (= Mask@87 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@9 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@9 this AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_636@9 this AVLTreeNode.left) perm$R) methodCallK@_634))))
      (> methodCallK@_634 0)
      (IsGoodExhaleState exhaleHeap@_635@0 Heap@1 exhaleMask@_636@9 ZeroMask)
      (IsGoodMask exhaleMask@_636@9)
      (IsGoodMask Mask@87)
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left)))
      (not (= this null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left)) AVLTreeNode@t))
      (wf exhaleHeap@_635@0 exhaleMask@_636@9 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@87 ZeroMask)
   )
(or anon1071_Else anon1071_Then)
)) :named ax_anon417))
(assert (! (=> $branchMerge_54 (and true 
   (and true
   )
(or anon942_Else anon942_Then)
)) :named ax_$branchMerge_54))
(assert (! (=> anon1267_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1267_Then@1_assertion anon1267_Then@2)
)) :named ax_anon1267_Then@1))
(assert (! (=> anon1267_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1267_Then_assertion))
(assert (! (=> $branchMerge_47 (and true 
   (and true
   )
(or anon1223_Else anon1223_Then)
)) :named ax_$branchMerge_47))
(assert (! (=> anon1205_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1205_Then@1_assertion anon1205_Then@2)
)) :named ax_anon1205_Then@1))
(assert (! (=> anon1205_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1205_Then_assertion))
(assert (! (=> $branchMerge_45 (and true 
   (and true
   )
(or anon1161_Else anon1161_Then)
)) :named ax_$branchMerge_45))
(assert (! (=> anon1071_Else (and true 
   (and true
      (= $@condition_$103 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null)
      (= Mask@89 Mask@87)
      (not $@condition_$103)
   )
$branchMerge_44
)) :named ax_anon1071_Else))
(assert (! (=> anon1071_Then (and true 
   (and true
      $@condition_$103
      (= $@condition_$103 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null)))
      (= Mask@88 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@87 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@87 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@87 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@89 Mask@88)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@88)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null))
      (wf exhaleHeap@_635@0 Mask@87 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@88 ZeroMask)
   )
$branchMerge_44
)) :named ax_anon1071_Then))
(assert (! (=> anon942_Else (and true 
   (and true
      (= $@condition_$130 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= unfoldingMask@_538@22 unfoldingMask@_538@20)
      (not $@condition_$130)
   )
$branchMerge_57
)) :named ax_anon942_Else))
(assert (! (=> anon942_Then (and true 
   (and true
      $@condition_$130
      (= $@condition_$130 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= unfoldingMask@_538@21 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_538@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= unfoldingMask@_538@22 unfoldingMask@_538@21)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_538@21)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@20 ZeroMask)
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@21 ZeroMask)
   )
$branchMerge_57
)) :named ax_anon942_Then))
(assert (! (=> anon1267_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1267_Then@1_assertion))
(assert (! (=> anon1267_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_899@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_899@9 exhaleMask@_899@8)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_899@8)
      (wf Heap@1 exhaleMask@_899@8 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_26
)) :named ax_anon1267_Then@2))
(assert (! (=> anon1223_Else (and true 
   (and true
      (= $@condition_$120 (not (= r@294@0 null)))
      (= r@294@0 null)
      (not $@condition_$120)
   )
$branchMerge_52
)) :named ax_anon1223_Else))
(assert (! (=> anon1223_Then (and true 
   (and true
      $@condition_$120
      (= $@condition_$120 (not (= r@294@0 null)))
      (forall( (|i#85#296| Int))(=> (and (<= 0 |i#85#296|) (< |i#85#296| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys)))) (and (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys) |i#85#296|)) (not (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys) |i#85#296|) k@19)))))
      (not (= r@294@0 null))
   )
$branchMerge_52
)) :named ax_anon1223_Then))
(assert (! (=> anon1205_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1205_Then@1_assertion))
(assert (! (=> anon1205_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_800@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_800@9 exhaleMask@_800@8)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_800@8)
      (wf Heap@1 exhaleMask@_800@8 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_24
)) :named ax_anon1205_Then@2))
(assert (! (=> anon1161_Else (and true 
   (and true
      (= $@condition_$116 (not (= r@271@0 null)))
      (= r@271@0 null)
      (not $@condition_$116)
   )
$branchMerge_50
)) :named ax_anon1161_Else))
(assert (! (=> anon1161_Then (and true 
   (and true
      $@condition_$116
      (= $@condition_$116 (not (= r@271@0 null)))
      (forall( (|i#85#273| Int))(=> (and (<= 0 |i#85#273|) (< |i#85#273| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys)))) (and (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys) |i#85#273|)) (not (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys) |i#85#273|) k@19)))))
      (not (= r@271@0 null))
   )
$branchMerge_50
)) :named ax_anon1161_Then))
(assert (! (=> $branchMerge_44 (and true 
   (and true
   )
(or anon1072_Else anon1072_Then)
)) :named ax_$branchMerge_44))
(assert (! (=> $branchMerge_57 (and true 
   (and true
   )
(or anon943_Else anon943_Then)
)) :named ax_$branchMerge_57))
(assert (! (=> $branchMerge_26 (and true 
   (and true
   )
(or anon1268_Else anon1268_Then)
)) :named ax_$branchMerge_26))
(assert (! (=> $branchMerge_52 (and true 
   (and true
   )
(or anon1224_Else anon1224_Then)
)) :named ax_$branchMerge_52))
(assert (! (=> $branchMerge_24 (and true 
   (and true
   )
(or anon1206_Else anon1206_Then)
)) :named ax_$branchMerge_24))
(assert (! (=> $branchMerge_50 (and true 
   (and true
   )
(or anon1162_Else anon1162_Then)
)) :named ax_$branchMerge_50))
(assert (! (=> anon1072_Else (and true 
   (and true
      (= $@condition_$114 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null)
      (= Mask@91 Mask@89)
      (not $@condition_$114)
   )
anon421
)) :named ax_anon1072_Else))
(assert (! (=> anon1072_Then (and true 
   (and true
      $@condition_$114
      (= $@condition_$114 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null)))
      (= Mask@90 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@89 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@89 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@89 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R) methodCallK@_634))))
      (= Mask@91 Mask@90)
      (> methodCallK@_634 0)
      (IsGoodMask Mask@90)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null))
      (wf exhaleHeap@_635@0 Mask@89 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@90 ZeroMask)
   )
anon421
)) :named ax_anon1072_Then))
(assert (! (=> anon943_Else (and true 
   (and true
      (= $@condition_$139 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (not $@condition_$139)
   )
$branchMerge_61
)) :named ax_anon943_Else))
(assert (! (=> anon943_Then (and true 
   (and true
      $@condition_$139
      (= $@condition_$139 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (forall( (|rk#80#229| Int))(=> (and (<= 0 |rk#80#229|) (< |rk#80#229| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) |rk#80#229|))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null))
   )
$branchMerge_61
)) :named ax_anon943_Then))
(assert (! (=> anon1268_Else (and true 
   (and true
      (= $@condition_$89 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_899@11 exhaleMask@_899@9)
      (not $@condition_$89)
   )
$branchMerge_37
)) :named ax_anon1268_Else))
(assert (! (=> anon1268_Then (and true 
   (and true
      $@condition_$89
      (= $@condition_$89 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1268_Then@1 anon1268_Then_assertion)
)) :named ax_anon1268_Then))
(assert (! (=> anon1224_Else (and true 
   (and true
      (= $@condition_$128 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)))
      (not $@condition_$128)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)
   )
$branchMerge_56
)) :named ax_anon1224_Else))
(assert (! (=> anon1224_Then (and true 
   (and true
      $@condition_$128
      (= $@condition_$128 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)))
      (not (= r@294@0 null))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19))
   )
$branchMerge_56
)) :named ax_anon1224_Then))
(assert (! (=> anon1206_Else (and true 
   (and true
      (= $@condition_$85 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_800@11 exhaleMask@_800@9)
      (not $@condition_$85)
   )
$branchMerge_35
)) :named ax_anon1206_Else))
(assert (! (=> anon1206_Then (and true 
   (and true
      $@condition_$85
      (= $@condition_$85 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1206_Then@1 anon1206_Then_assertion)
)) :named ax_anon1206_Then))
(assert (! (=> anon1162_Else (and true 
   (and true
      (= $@condition_$126 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)))
      (not $@condition_$126)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)
   )
$branchMerge_55
)) :named ax_anon1162_Else))
(assert (! (=> anon1162_Then (and true 
   (and true
      $@condition_$126
      (= $@condition_$126 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)))
      (not (= r@271@0 null))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19))
   )
$branchMerge_55
)) :named ax_anon1162_Then))
(assert (! (=> anon421 (and true 
   (and true
      (= Mask@92 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@91 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@91 this AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@91 this AVLTreeNode.right) perm$R) methodCallK@_634))))
      (> methodCallK@_634 0)
      (IsGoodMask Mask@92)
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right)))
      (not (= this null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right)) AVLTreeNode@t))
      (wf exhaleHeap@_635@0 Mask@91 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@92 ZeroMask)
   )
(or anon1073_Else anon1073_Then)
)) :named ax_anon421))
(assert (! (=> $branchMerge_61 (and true 
   (and true
   )
(or anon944_Else anon944_Then)
)) :named ax_$branchMerge_61))
(assert (! (=> anon1268_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1268_Then@1_assertion anon1268_Then@2)
)) :named ax_anon1268_Then@1))
(assert (! (=> anon1268_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1268_Then_assertion))
(assert (! (=> $branchMerge_56 (and true 
   (and true
   )
(or anon1225_Else anon1225_Then)
)) :named ax_$branchMerge_56))
(assert (! (=> anon1206_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1206_Then@1_assertion anon1206_Then@2)
)) :named ax_anon1206_Then@1))
(assert (! (=> anon1206_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1206_Then_assertion))
(assert (! (=> $branchMerge_55 (and true 
   (and true
   )
(or anon1163_Else anon1163_Then)
)) :named ax_$branchMerge_55))
(assert (! (=> anon1073_Else (and true 
   (and true
      (= $@condition_$132 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null)
      (= Mask@94 Mask@92)
      (not $@condition_$132)
   )
$branchMerge_58
)) :named ax_anon1073_Else))
(assert (! (=> anon1073_Then (and true 
   (and true
      $@condition_$132
      (= $@condition_$132 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null)))
      (= Mask@93 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@92 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@92 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@92 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@94 Mask@93)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@93)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null))
      (wf exhaleHeap@_635@0 Mask@92 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@93 ZeroMask)
   )
$branchMerge_58
)) :named ax_anon1073_Then))
(assert (! (=> anon944_Else (and true 
   (and true
      (= $@condition_$151 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (not $@condition_$151)
   )
anon163
)) :named ax_anon944_Else))
(assert (! (=> anon944_Then (and true 
   (and true
      $@condition_$151
      (= $@condition_$151 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null))
   )
anon163
)) :named ax_anon944_Then))
(assert (! (=> anon1268_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1268_Then@1_assertion))
(assert (! (=> anon1268_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_899@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_899@11 exhaleMask@_899@10)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_899@10)
      (wf Heap@1 exhaleMask@_899@10 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_37
)) :named ax_anon1268_Then@2))
(assert (! (=> anon1225_Else (and true 
   (and true
      (= $@condition_$136 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)))
      (not $@condition_$136)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)
   )
$branchMerge_60
)) :named ax_anon1225_Else))
(assert (! (=> anon1225_Then (and true 
   (and true
      $@condition_$136
      (= $@condition_$136 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys))
   )
$branchMerge_60
)) :named ax_anon1225_Then))
(assert (! (=> anon1206_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1206_Then@1_assertion))
(assert (! (=> anon1206_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_800@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_800@11 exhaleMask@_800@10)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_800@10)
      (wf Heap@1 exhaleMask@_800@10 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_35
)) :named ax_anon1206_Then@2))
(assert (! (=> anon1163_Else (and true 
   (and true
      (= $@condition_$133 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)))
      (not $@condition_$133)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)
   )
$branchMerge_59
)) :named ax_anon1163_Else))
(assert (! (=> anon1163_Then (and true 
   (and true
      $@condition_$133
      (= $@condition_$133 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys))
   )
$branchMerge_59
)) :named ax_anon1163_Then))
(assert (! (=> $branchMerge_58 (and true 
   (and true
   )
(or anon1074_Else anon1074_Then)
)) :named ax_$branchMerge_58))
(assert (! (=> anon163 (and true 
   (and true
      (<= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) 1)
      (= (= true $@bf_58) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left)))
      (= (= true $@bf_59) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right)))
      (= (= true $@bf_60) (< (ite$Int$ $@bf_59 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_58 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.height) 0)
      (>= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) (- 0 1))
      (forall( (|kk#81_$0| Int))(= (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys) |kk#81_$0|) (or (or (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) |kk#81_$0|)) (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) |kk#81_$0|))) (= |kk#81_$0| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key)))))
      (IsGoodMask unfoldingMask@_538@22)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys))))
      (wf unfoldingHeap@_537@1 unfoldingMask@_538@22 ZeroMask)
   )
anon945_Else
)) :named ax_anon163))
(assert (! (=> $branchMerge_37 (and true 
   (and true
   )
(or anon1269_Else anon1269_Then)
)) :named ax_$branchMerge_37))
(assert (! (=> $branchMerge_60 (and true 
   (and true
   )
(or anon1226_Else anon1226_Then)
)) :named ax_$branchMerge_60))
(assert (! (=> $branchMerge_35 (and true 
   (and true
   )
(or anon1207_Else anon1207_Then)
)) :named ax_$branchMerge_35))
(assert (! (=> $branchMerge_59 (and true 
   (and true
   )
(or anon1164_Else anon1164_Then)
)) :named ax_$branchMerge_59))
(assert (! (=> anon1074_Else (and true 
   (and true
      (= $@condition_$141 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null)
      (= Mask@96 Mask@94)
      (not $@condition_$141)
   )
anon425
)) :named ax_anon1074_Else))
(assert (! (=> anon1074_Then (and true 
   (and true
      $@condition_$141
      (= $@condition_$141 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null)))
      (= Mask@95 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@94 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@94 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@94 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R) methodCallK@_634))))
      (= Mask@96 Mask@95)
      (> methodCallK@_634 0)
      (IsGoodMask Mask@95)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null))
      (wf exhaleHeap@_635@0 Mask@94 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@95 ZeroMask)
   )
anon425
)) :named ax_anon1074_Then))
(assert (! (=> anon945_Else (and true 
   (and true
      (= $@condition_$166 false)
      (= assertSecMask@_533@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key) perm$R) (Fractions 100)))))
      (= assertSecMask@_533@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_533@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_533@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_533@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) perm$R) (Fractions 100)))))
      (= assertSecMask@_533@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_533@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_533@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_533@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) perm$R) (Fractions 100)))))
      (= assertSecMask@_533@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys)))
      (not $@condition_$166)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
      (not false)
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left)) AVLTreeNode@t))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right)) AVLTreeNode@t))
      (wf Heap@1 Mask@26 assertSecMask@_533@0)
      (wf Heap@1 Mask@26 assertSecMask@_533@1)
      (wf Heap@1 Mask@26 assertSecMask@_533@2)
      (wf Heap@1 Mask@26 assertSecMask@_533@3)
      (wf Heap@1 Mask@26 assertSecMask@_533@4)
      (wf Heap@1 Mask@26 assertSecMask@_533@5)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon972_Else anon972_Then)
)) :named ax_anon945_Else))
(assert (! (=> anon1269_Else (and true 
   (and true
      (= $@condition_$99 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_899@13 exhaleMask@_899@11)
      (not $@condition_$99)
   )
$branchMerge_42
)) :named ax_anon1269_Else))
(assert (! (=> anon1269_Then (and true 
   (and true
      $@condition_$99
      (= $@condition_$99 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1269_Then@1 anon1269_Then_assertion)
)) :named ax_anon1269_Then))
(assert (! (=> anon1226_Else (and true 
   (and true
      (= $@condition_$147 (not (= r@294@0 null)))
      (= r@294@0 null)
      (not $@condition_$147)
   )
$branchMerge_64
)) :named ax_anon1226_Else))
(assert (! (=> anon1226_Then (and true 
   (and true
      $@condition_$147
      (= $@condition_$147 (not (= r@294@0 null)))
      (not (= r@294@0 null))
   )
(or anon1227_Else anon1227_Then)
)) :named ax_anon1226_Then))
(assert (! (=> anon1207_Else (and true 
   (and true
      (= $@condition_$95 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= exhaleMask@_800@13 exhaleMask@_800@11)
      (not $@condition_$95)
   )
$branchMerge_40
)) :named ax_anon1207_Else))
(assert (! (=> anon1207_Then (and true 
   (and true
      $@condition_$95
      (= $@condition_$95 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon1207_Then@1 anon1207_Then_assertion)
)) :named ax_anon1207_Then))
(assert (! (=> anon1164_Else (and true 
   (and true
      (= $@condition_$143 (not (= r@271@0 null)))
      (= r@271@0 null)
      (not $@condition_$143)
   )
$branchMerge_62
)) :named ax_anon1164_Else))
(assert (! (=> anon1164_Then (and true 
   (and true
      $@condition_$143
      (= $@condition_$143 (not (= r@271@0 null)))
      (not (= r@271@0 null))
   )
(or anon1165_Else anon1165_Then)
)) :named ax_anon1164_Then))
(assert (! (=> anon425 (and true 
   (and true
      (= (= true $@bf_56) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left)))
      (= (= true $@bf_57) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right)))
      (= bf@249@0 (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) AVLTreeNode.height))))
   )
(or anon1075_Else anon1075_Then)
)) :named ax_anon425))
(assert (! (=> anon972_Else (and true 
   (and true
      (= $@condition_$175 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= assertSecMask@_533@7 assertSecMask@_533@5)
      (not $@condition_$175)
   )
$branchMerge_73
)) :named ax_anon972_Else))
(assert (! (=> anon972_Then (and true 
   (and true
      $@condition_$175
      (= $@condition_$175 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= assertSecMask@_533@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= assertSecMask@_533@7 assertSecMask@_533@6)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@5)
      (wf Heap@1 Mask@26 assertSecMask@_533@6)
   )
$branchMerge_73
)) :named ax_anon972_Then))
(assert (! (=> anon1269_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1269_Then@1_assertion anon1269_Then@2)
)) :named ax_anon1269_Then@1))
(assert (! (=> anon1269_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1269_Then_assertion))
(assert (! (=> anon1227_Else (and true 
   (and true
      (= $@condition_$157 (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19))
      (not $@condition_$157)
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19))
   )
$branchMerge_64
)) :named ax_anon1227_Else))
(assert (! (=> anon1227_Then (and true 
   (and true
      $@condition_$157
      (= $@condition_$157 (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19))
      (= (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.keys)) (- (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys)) 1))
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)
   )
$branchMerge_64
)) :named ax_anon1227_Then))
(assert (! (=> anon1207_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1207_Then@1_assertion anon1207_Then@2)
)) :named ax_anon1207_Then@1))
(assert (! (=> anon1207_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1207_Then_assertion))
(assert (! (=> anon1165_Else (and true 
   (and true
      (= $@condition_$153 (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19))
      (not $@condition_$153)
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19))
   )
$branchMerge_62
)) :named ax_anon1165_Else))
(assert (! (=> anon1165_Then (and true 
   (and true
      $@condition_$153
      (= $@condition_$153 (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19))
      (= (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.keys)) (- (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys)) 1))
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)
   )
$branchMerge_62
)) :named ax_anon1165_Then))
(assert (! (=> anon1075_Else (and true 
   (and true
      (>= 0 bf@249@0)
      (not $@condition_$161)
   )
$branchMerge_68
)) :named ax_anon1075_Else))
(assert (! (=> anon1075_Then (and true 
   (and true
      $@condition_$161
      (> bf@249@0 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null))
   )
$branchMerge_68
)) :named ax_anon1075_Then))
(assert (! (=> $branchMerge_73 (and true 
   (and true
   )
(or anon973_Else anon973_Then)
)) :named ax_$branchMerge_73))
(assert (! (=> anon1269_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1269_Then@1_assertion))
(assert (! (=> anon1269_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_899@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_899@13 exhaleMask@_899@12)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_899@12)
      (wf Heap@1 exhaleMask@_899@12 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_42
)) :named ax_anon1269_Then@2))
(assert (! (=> $branchMerge_64 (and true 
   (and true
   )
(or anon1228_Else anon1228_Then)
)) :named ax_$branchMerge_64))
(assert (! (=> anon1207_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1207_Then@1_assertion))
(assert (! (=> anon1207_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_800@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_800@13 exhaleMask@_800@12)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_800@12)
      (wf Heap@1 exhaleMask@_800@12 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_40
)) :named ax_anon1207_Then@2))
(assert (! (=> $branchMerge_62 (and true 
   (and true
   )
(or anon1166_Else anon1166_Then)
)) :named ax_$branchMerge_62))
(assert (! (=> $branchMerge_68 (and true 
   (and true
   )
(or anon1076_Else anon1076_Then)
)) :named ax_$branchMerge_68))
(assert (! (=> anon973_Else (and true 
   (and true
      (= $@condition_$180 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= assertSecMask@_533@9 assertSecMask@_533@7)
      (not $@condition_$180)
   )
$branchMerge_74
)) :named ax_anon973_Else))
(assert (! (=> anon973_Then (and true 
   (and true
      $@condition_$180
      (= $@condition_$180 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= assertSecMask@_533@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@9 assertSecMask@_533@8)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@7)
      (wf Heap@1 Mask@26 assertSecMask@_533@8)
   )
$branchMerge_74
)) :named ax_anon973_Then))
(assert (! (=> $branchMerge_42 (and true 
   (and true
   )
(or anon1270_Else anon1270_Then)
)) :named ax_$branchMerge_42))
(assert (! (=> anon1228_Else (and true 
   (and true
      (>= 1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@292@0 AVLTreeNode.height))
      (not $@condition_$158)
   )
$branchMerge_67
)) :named ax_anon1228_Else))
(assert (! (=> anon1228_Then (and true 
   (and true
      $@condition_$158
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@292@0 AVLTreeNode.height) 1)
      (not (= r@294@0 null))
   )
$branchMerge_67
)) :named ax_anon1228_Then))
(assert (! (=> $branchMerge_40 (and true 
   (and true
   )
(or anon1208_Else anon1208_Then)
)) :named ax_$branchMerge_40))
(assert (! (=> anon1166_Else (and true 
   (and true
      (>= 1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@269@0 AVLTreeNode.height))
      (not $@condition_$154)
   )
$branchMerge_66
)) :named ax_anon1166_Else))
(assert (! (=> anon1166_Then (and true 
   (and true
      $@condition_$154
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@269@0 AVLTreeNode.height) 1)
      (not (= r@271@0 null))
   )
$branchMerge_66
)) :named ax_anon1166_Then))
(assert (! (=> anon1076_Else (and true 
   (and true
      (<= 0 bf@249@0)
      (not $@condition_$167)
   )
anon429
)) :named ax_anon1076_Else))
(assert (! (=> anon1076_Then (and true 
   (and true
      $@condition_$167
      (< bf@249@0 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null))
   )
anon429
)) :named ax_anon1076_Then))
(assert (! (=> $branchMerge_74 (and true 
   (and true
   )
(or anon974_Else anon974_Then)
)) :named ax_$branchMerge_74))
(assert (! (=> anon1270_Else (and true 
   (and true
      (= $@condition_$110 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_899@15 exhaleMask@_899@13)
      (not $@condition_$110)
   )
$branchMerge_48
)) :named ax_anon1270_Else))
(assert (! (=> anon1270_Then (and true 
   (and true
      $@condition_$110
      (= $@condition_$110 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1270_Then@1 anon1270_Then_assertion)
)) :named ax_anon1270_Then))
(assert (! (=> $branchMerge_67 (and true 
   (and true
   )
(or anon1229_Else anon1229_Then)
)) :named ax_$branchMerge_67))
(assert (! (=> anon1208_Else (and true 
   (and true
      (= $@condition_$106 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_800@15 exhaleMask@_800@13)
      (not $@condition_$106)
   )
$branchMerge_46
)) :named ax_anon1208_Else))
(assert (! (=> anon1208_Then (and true 
   (and true
      $@condition_$106
      (= $@condition_$106 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1208_Then@1 anon1208_Then_assertion)
)) :named ax_anon1208_Then))
(assert (! (=> $branchMerge_66 (and true 
   (and true
   )
(or anon1167_Else anon1167_Then)
)) :named ax_$branchMerge_66))
(assert (! (=> anon429 (and true 
   (and true
      (= cond@_645@0 (> bf@249@0 0))
      (IsGoodMask Mask@96)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon1077_Else anon1077_Then)
)) :named ax_anon429))
(assert (! (=> anon974_Else (and true 
   (and true
      (= $@condition_$183 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= assertSecMask@_533@11 assertSecMask@_533@9)
      (not $@condition_$183)
   )
$branchMerge_75
)) :named ax_anon974_Else))
(assert (! (=> anon974_Then (and true 
   (and true
      $@condition_$183
      (= $@condition_$183 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= assertSecMask@_533@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@11 assertSecMask@_533@10)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@10)
      (wf Heap@1 Mask@26 assertSecMask@_533@9)
   )
$branchMerge_75
)) :named ax_anon974_Then))
(assert (! (=> anon1270_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1270_Then@1_assertion anon1270_Then@2)
)) :named ax_anon1270_Then@1))
(assert (! (=> anon1270_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1270_Then_assertion))
(assert (! (=> anon1229_Else (and true 
   (and true
      (= $@condition_$172 (not (= r@294@0 null)))
      (= r@294@0 null)
      (not $@condition_$172)
   )
$branchMerge_72
)) :named ax_anon1229_Else))
(assert (! (=> anon1229_Then (and true 
   (and true
      $@condition_$172
      (= $@condition_$172 (not (= r@294@0 null)))
      (not (= r@294@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@292@0 AVLTreeNode.height)) (= (+ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.height) 1) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@292@0 AVLTreeNode.height)))
   )
$branchMerge_72
)) :named ax_anon1229_Then))
(assert (! (=> anon1208_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1208_Then@1_assertion anon1208_Then@2)
)) :named ax_anon1208_Then@1))
(assert (! (=> anon1208_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1208_Then_assertion))
(assert (! (=> anon1167_Else (and true 
   (and true
      (= $@condition_$169 (not (= r@271@0 null)))
      (= r@271@0 null)
      (not $@condition_$169)
   )
$branchMerge_70
)) :named ax_anon1167_Else))
(assert (! (=> anon1167_Then (and true 
   (and true
      $@condition_$169
      (= $@condition_$169 (not (= r@271@0 null)))
      (not (= r@271@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@269@0 AVLTreeNode.height)) (= (+ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.height) 1) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@269@0 AVLTreeNode.height)))
   )
$branchMerge_70
)) :named ax_anon1167_Then))
(assert (! (=> anon1077_Else (and true 
   (and true
      (< (* 1000 methodCallK@_663) (Fractions 1))
      (< (* 1000 methodCallK@_663) methodK@_506)
      (< 0 methodCallK@_663)
      (= $@condition_$182 cond@_645@0)
      (not $@condition_$182)
      (not cond@_645@0)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon1077_Else@1 anon1077_Else_assertion)
)) :named ax_anon1077_Else))
(assert (! (=> anon1077_Then (and true 
   (and true
      $@condition_$182
      (< (* 1000 methodCallK@_650) (Fractions 1))
      (< (* 1000 methodCallK@_650) methodK@_506)
      (< 0 methodCallK@_650)
      (= $@condition_$182 cond@_645@0)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
      cond@_645@0
   )
(or anon1077_Then@1 anon1077_Then_assertion)
)) :named ax_anon1077_Then))
(assert (! (=> $branchMerge_75 (and true 
   (and true
   )
(or anon975_Else anon975_Then)
)) :named ax_$branchMerge_75))
(assert (! (=> anon1270_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1270_Then@1_assertion))
(assert (! (=> anon1270_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_899@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1271_Else anon1271_Then)
)) :named ax_anon1270_Then@2))
(assert (! (=> $branchMerge_72 (and true 
   (and true
   )
(or anon1230_Else anon1230_Then)
)) :named ax_$branchMerge_72))
(assert (! (=> anon1208_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1208_Then@1_assertion))
(assert (! (=> anon1208_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_800@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1209_Else anon1209_Then)
)) :named ax_anon1208_Then@2))
(assert (! (=> $branchMerge_70 (and true 
   (and true
   )
(or anon1168_Else anon1168_Then)
)) :named ax_$branchMerge_70))
(assert (! (=> anon1077_Else@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1077_Else@1_assertion anon1077_Else@2)
)) :named ax_anon1077_Else@1))
(assert (! (=> anon1077_Else_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1077_Else_assertion))
(assert (! (=> anon1077_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1077_Then@1_assertion anon1077_Then@2)
)) :named ax_anon1077_Then@1))
(assert (! (=> anon1077_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1077_Then_assertion))
(assert (! (=> anon975_Else (and true 
   (and true
      (= $@condition_$189 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (= assertSecMask@_533@13 assertSecMask@_533@11)
      (not $@condition_$189)
   )
$branchMerge_76
)) :named ax_anon975_Else))
(assert (! (=> anon975_Then (and true 
   (and true
      $@condition_$189
      (= $@condition_$189 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= assertSecMask@_533@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@13 assertSecMask@_533@12)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@11)
      (wf Heap@1 Mask@26 assertSecMask@_533@12)
   )
$branchMerge_76
)) :named ax_anon975_Then))
(assert (! (=> anon1271_Else (and true 
   (and true
      (= $@condition_$122 (not (CanRead$Int$ exhaleMask@_899@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_899@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$122)
   )
anon818
)) :named ax_anon1271_Else))
(assert (! (=> anon1271_Then (and true 
   (and true
      $@condition_$122
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_898@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$122 (not (CanRead$Int$ exhaleMask@_899@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_899@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon818
)) :named ax_anon1271_Then))
(assert (! (=> anon1230_Else (and true 
   (and true
      (= $@condition_$178 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)))
      (not $@condition_$178)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)
   )
anon736
)) :named ax_anon1230_Else))
(assert (! (=> anon1230_Then (and true 
   (and true
      $@condition_$178
      (= $@condition_$178 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_823@0 r@294@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@292@0 AVLTreeNode.height))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@292@0 AVLTreeNode.keys) k@19))
   )
anon736
)) :named ax_anon1230_Then))
(assert (! (=> anon1209_Else (and true 
   (and true
      (= $@condition_$118 (not (CanRead$Int$ exhaleMask@_800@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_800@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$118)
   )
anon694
)) :named ax_anon1209_Else))
(assert (! (=> anon1209_Then (and true 
   (and true
      $@condition_$118
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_799@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$118 (not (CanRead$Int$ exhaleMask@_800@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_800@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon694
)) :named ax_anon1209_Then))
(assert (! (=> anon1168_Else (and true 
   (and true
      (= $@condition_$176 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)))
      (not $@condition_$176)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)
   )
anon612
)) :named ax_anon1168_Else))
(assert (! (=> anon1168_Then (and true 
   (and true
      $@condition_$176
      (= $@condition_$176 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_724@0 r@271@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this@269@0 AVLTreeNode.height))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 this@269@0 AVLTreeNode.keys) k@19))
   )
anon612
)) :named ax_anon1168_Then))
(assert (! (=> anon1077_Else@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@96 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon1077_Else@1_assertion))
(assert (! (=> anon1077_Else@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@96 ZeroMask this AVLTreeNode.right))
   )
(or anon1077_Else@2_assertion anon1077_Else@3)
)) :named ax_anon1077_Else@2))
(assert (! (=> anon1077_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@96 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon1077_Then@1_assertion))
(assert (! (=> anon1077_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@96 ZeroMask this AVLTreeNode.left))
   )
(or anon1077_Then@2_assertion anon1077_Then@3)
)) :named ax_anon1077_Then@2))
(assert (! (=> $branchMerge_76 (and true 
   (and true
   )
(or anon976_Else anon976_Then)
)) :named ax_$branchMerge_76))
(assert (! (=> anon818 (and true 
   (and true
      (= exhaleMask@_899@15 exhaleMask@_899@14)
      (IsGoodMask exhaleMask@_899@14)
      (wf Heap@1 exhaleMask@_899@14 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_48
)) :named ax_anon818))
(assert (! (=> anon736 (and true 
   (and true
      (IsGoodMask Mask@38)
      (wf exhaleHeap@_823@0 Mask@38 ZeroMask)
   )
(or anon736@1 anon736_assertion)
)) :named ax_anon736))
(assert (! (=> anon694 (and true 
   (and true
      (= exhaleMask@_800@15 exhaleMask@_800@14)
      (IsGoodMask exhaleMask@_800@14)
      (wf Heap@1 exhaleMask@_800@14 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_46
)) :named ax_anon694))
(assert (! (=> anon612 (and true 
   (and true
      (IsGoodMask Mask@68)
      (wf exhaleHeap@_724@0 Mask@68 ZeroMask)
   )
(or anon612@1 anon612_assertion)
)) :named ax_anon612))
(assert (! (=> anon1077_Else@2_assertion (not (and true
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null))
   )
))) :named ax_anon1077_Else@2_assertion))
(assert (! (=> anon1077_Else@3 (and true 
   (and true
      (= this@254@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.right) null))
   )
(or anon1077_Else@3_assertion anon1077_Else@4)
)) :named ax_anon1077_Else@3))
(assert (! (=> anon1077_Then@2_assertion (not (and true
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null))
   )
))) :named ax_anon1077_Then@2_assertion))
(assert (! (=> anon1077_Then@3 (and true 
   (and true
      (= this@250@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_635@0 this AVLTreeNode.left) null))
   )
(or anon1077_Then@3_assertion anon1077_Then@4)
)) :named ax_anon1077_Then@3))
(assert (! (=> anon976_Else (and true 
   (and true
      (= $@condition_$191 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (not $@condition_$191)
   )
$branchMerge_77
)) :named ax_anon976_Else))
(assert (! (=> anon976_Then (and true 
   (and true
      $@condition_$191
      (= $@condition_$191 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (forall( (|lk#79#234| Int))(=> (and (<= 0 |lk#79#234|) (< |lk#79#234| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) |lk#79#234|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null))
   )
$branchMerge_77
)) :named ax_anon976_Then))
(assert (! (=> $branchMerge_48 (and true 
   (and true
   )
(or anon1272_Else anon1272_Then)
)) :named ax_$branchMerge_48))
(assert (! (=> anon736@1 (and true 
   (and true
      (< (* 1000 methodCallK@_835) (Fractions 1))
      (< (* 1000 methodCallK@_835) methodK@_506)
      (< 0 methodCallK@_835)
      (= Heap@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_823@0 this AVLTreeNode.right r@294@0))
      (CanWrite$ref$ Mask@38 this AVLTreeNode.right)
      (wf Heap@2 Mask@38 ZeroMask)
   )
(or anon736@1_assertion anon736@2)
)) :named ax_anon736@1))
(assert (! (=> anon736_assertion (not (and true
   (and true
      (CanWrite$ref$ Mask@38 this AVLTreeNode.right)
   )
))) :named ax_anon736_assertion))
(assert (! (=> $branchMerge_46 (and true 
   (and true
   )
(or anon1210_Else anon1210_Then)
)) :named ax_$branchMerge_46))
(assert (! (=> anon612@1 (and true 
   (and true
      (< (* 1000 methodCallK@_736) (Fractions 1))
      (< (* 1000 methodCallK@_736) methodK@_506)
      (< 0 methodCallK@_736)
      (= Heap@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_724@0 this AVLTreeNode.left r@271@0))
      (CanWrite$ref$ Mask@68 this AVLTreeNode.left)
      (wf Heap@3 Mask@68 ZeroMask)
   )
(or anon612@1_assertion anon612@2)
)) :named ax_anon612@1))
(assert (! (=> anon612_assertion (not (and true
   (and true
      (CanWrite$ref$ Mask@68 this AVLTreeNode.left)
   )
))) :named ax_anon612_assertion))
(assert (! (=> anon1077_Else@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1077_Else@3_assertion))
(assert (! (=> anon1077_Else@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1077_Else@4_assertion anon1077_Else@5)
)) :named ax_anon1077_Else@4))
(assert (! (=> anon1077_Then@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1077_Then@3_assertion))
(assert (! (=> anon1077_Then@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1077_Then@4_assertion anon1077_Then@5)
)) :named ax_anon1077_Then@4))
(assert (! (=> $branchMerge_77 (and true 
   (and true
   )
(or anon977_Else anon977_Then)
)) :named ax_$branchMerge_77))
(assert (! (=> anon1272_Else (and true 
   (and true
      (= $@condition_$123 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_899@17 exhaleMask@_899@15)
      (not $@condition_$123)
   )
$branchMerge_53
)) :named ax_anon1272_Else))
(assert (! (=> anon1272_Then (and true 
   (and true
      $@condition_$123
      (= $@condition_$123 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1272_Then@1 anon1272_Then_assertion)
)) :named ax_anon1272_Then))
(assert (! (=> anon736@1_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon736@1_assertion))
(assert (! (=> anon736@2 (and true 
   (and true
      (not (= this null))
   )
(or anon736@2_assertion anon736@3)
)) :named ax_anon736@2))
(assert (! (=> anon1210_Else (and true 
   (and true
      (= $@condition_$119 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_800@17 exhaleMask@_800@15)
      (not $@condition_$119)
   )
$branchMerge_51
)) :named ax_anon1210_Else))
(assert (! (=> anon1210_Then (and true 
   (and true
      $@condition_$119
      (= $@condition_$119 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1210_Then@1 anon1210_Then_assertion)
)) :named ax_anon1210_Then))
(assert (! (=> anon612@1_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon612@1_assertion))
(assert (! (=> anon612@2 (and true 
   (and true
      (not (= this null))
   )
(or anon612@2_assertion anon612@3)
)) :named ax_anon612@2))
(assert (! (=> anon1077_Else@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1077_Else@4_assertion))
(assert (! (=> anon1077_Else@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$R))
      (= exhaleMask@_665@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@254@0 AVLTreeNode.valid) perm$N)))
   )
(or anon1088_Else anon1088_Then)
)) :named ax_anon1077_Else@5))
(assert (! (=> anon1077_Then@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1077_Then@4_assertion))
(assert (! (=> anon1077_Then@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$R))
      (= exhaleMask@_652@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@96 this@250@0 AVLTreeNode.valid) perm$N)))
   )
(or anon1078_Else anon1078_Then)
)) :named ax_anon1077_Then@5))
(assert (! (=> anon977_Else (and true 
   (and true
      (= $@condition_$197 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)
      (not $@condition_$197)
   )
$branchMerge_82
)) :named ax_anon977_Else))
(assert (! (=> anon977_Then (and true 
   (and true
      $@condition_$197
      (= $@condition_$197 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null))
   )
$branchMerge_82
)) :named ax_anon977_Then))
(assert (! (=> anon1272_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1272_Then@1_assertion anon1272_Then@2)
)) :named ax_anon1272_Then@1))
(assert (! (=> anon1272_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1272_Then_assertion))
(assert (! (=> anon736@2_assertion (not (and true
   (and true
      (> methodCallK@_835 0)
   )
))) :named ax_anon736@2_assertion))
(assert (! (=> anon736@3 (and true 
   (and true
      (> methodCallK@_835 0)
   )
(or anon736@3_assertion anon736@4)
)) :named ax_anon736@3))
(assert (! (=> anon1210_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1210_Then@1_assertion anon1210_Then@2)
)) :named ax_anon1210_Then@1))
(assert (! (=> anon1210_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1210_Then_assertion))
(assert (! (=> anon612@2_assertion (not (and true
   (and true
      (> methodCallK@_736 0)
   )
))) :named ax_anon612@2_assertion))
(assert (! (=> anon612@3 (and true 
   (and true
      (> methodCallK@_736 0)
   )
(or anon612@3_assertion anon612@4)
)) :named ax_anon612@3))
(assert (! (=> anon1088_Else (and true 
   (and true
      (= $@condition_$186 (not (CanRead$Int$ exhaleMask@_665@0 ZeroMask this@254@0 AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_665@0 ZeroMask this@254@0 AVLTreeNode.valid)
      (not $@condition_$186)
   )
anon453
)) :named ax_anon1088_Else))
(assert (! (=> anon1088_Then (and true 
   (and true
      $@condition_$186
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 this@254@0 AVLTreeNode.valid))
      (= $@condition_$186 (not (CanRead$Int$ exhaleMask@_665@0 ZeroMask this@254@0 AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_665@0 ZeroMask this@254@0 AVLTreeNode.valid))
   )
anon453
)) :named ax_anon1088_Then))
(assert (! (=> anon1078_Else (and true 
   (and true
      (= $@condition_$185 (not (CanRead$Int$ exhaleMask@_652@0 ZeroMask this@250@0 AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_652@0 ZeroMask this@250@0 AVLTreeNode.valid)
      (not $@condition_$185)
   )
anon432
)) :named ax_anon1078_Else))
(assert (! (=> anon1078_Then (and true 
   (and true
      $@condition_$185
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 this@250@0 AVLTreeNode.valid))
      (= $@condition_$185 (not (CanRead$Int$ exhaleMask@_652@0 ZeroMask this@250@0 AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_652@0 ZeroMask this@250@0 AVLTreeNode.valid))
   )
anon432
)) :named ax_anon1078_Then))
(assert (! (=> $branchMerge_82 (and true 
   (and true
   )
(or anon978_Else anon978_Then)
)) :named ax_$branchMerge_82))
(assert (! (=> anon1272_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1272_Then@1_assertion))
(assert (! (=> anon1272_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_899@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_899@17 exhaleMask@_899@16)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_899@16)
      (wf Heap@1 exhaleMask@_899@16 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_53
)) :named ax_anon1272_Then@2))
(assert (! (=> anon736@3_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@38 this AVLTreeNode.left) perm$R) 0)
   )
))) :named ax_anon736@3_assertion))
(assert (! (=> anon736@4 (and true 
   (and true
      (< methodCallK@_835 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@38 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_837@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@38 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@38 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@38 this AVLTreeNode.left) perm$R) methodCallK@_835))))
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@38 this AVLTreeNode.left) perm$R) 0)
      (IsGoodMask exhaleMask@_837@0)
      (wf Heap@2 exhaleMask@_837@0 ZeroMask)
      (wf Heap@2 Mask@38 ZeroMask)
   )
(or anon1231_Else anon1231_Then)
)) :named ax_anon736@4))
(assert (! (=> anon1210_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1210_Then@1_assertion))
(assert (! (=> anon1210_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_800@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_800@17 exhaleMask@_800@16)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_800@16)
      (wf Heap@1 exhaleMask@_800@16 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_51
)) :named ax_anon1210_Then@2))
(assert (! (=> anon612@3_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@68 this AVLTreeNode.left) perm$R) 0)
   )
))) :named ax_anon612@3_assertion))
(assert (! (=> anon612@4 (and true 
   (and true
      (< methodCallK@_736 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@68 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_738@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@68 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@68 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@68 this AVLTreeNode.left) perm$R) methodCallK@_736))))
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@68 this AVLTreeNode.left) perm$R) 0)
      (IsGoodMask exhaleMask@_738@0)
      (wf Heap@3 exhaleMask@_738@0 ZeroMask)
      (wf Heap@3 Mask@68 ZeroMask)
   )
(or anon1169_Else anon1169_Then)
)) :named ax_anon612@4))
(assert (! (=> anon453 (and true 
   (and true
      (IsGoodMask exhaleMask@_665@0)
      (wf exhaleHeap@_635@0 exhaleMask@_665@0 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon453@1 anon453_assertion)
)) :named ax_anon453))
(assert (! (=> anon432 (and true 
   (and true
      (IsGoodMask exhaleMask@_652@0)
      (wf exhaleHeap@_635@0 exhaleMask@_652@0 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon432@1 anon432_assertion)
)) :named ax_anon432))
(assert (! (=> anon978_Else (and true 
   (and true
      (= $@condition_$207 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= assertSecMask@_533@15 assertSecMask@_533@13)
      (not $@condition_$207)
   )
$branchMerge_87
)) :named ax_anon978_Else))
(assert (! (=> anon978_Then (and true 
   (and true
      $@condition_$207
      (= $@condition_$207 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= assertSecMask@_533@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= assertSecMask@_533@15 assertSecMask@_533@14)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@13)
      (wf Heap@1 Mask@26 assertSecMask@_533@14)
   )
$branchMerge_87
)) :named ax_anon978_Then))
(assert (! (=> $branchMerge_53 (and true 
   (and true
   )
(or anon1273_Else anon1273_Then)
)) :named ax_$branchMerge_53))
(assert (! (=> anon1231_Else (and true 
   (and true
      (= $@condition_$188 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null)
      (= exhaleMask@_837@2 exhaleMask@_837@0)
      (not $@condition_$188)
   )
anon738
)) :named ax_anon1231_Else))
(assert (! (=> anon1231_Then (and true 
   (and true
      $@condition_$188
      (= $@condition_$188 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null))
   )
(or anon1231_Then@1 anon1231_Then_assertion)
)) :named ax_anon1231_Then))
(assert (! (=> $branchMerge_51 (and true 
   (and true
   )
(or anon1211_Else anon1211_Then)
)) :named ax_$branchMerge_51))
(assert (! (=> anon1169_Else (and true 
   (and true
      (= $@condition_$187 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null)
      (= exhaleMask@_738@2 exhaleMask@_738@0)
      (not $@condition_$187)
   )
anon614
)) :named ax_anon1169_Else))
(assert (! (=> anon1169_Then (and true 
   (and true
      $@condition_$187
      (= $@condition_$187 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null))
   )
(or anon1169_Then@1 anon1169_Then_assertion)
)) :named ax_anon1169_Then))
(assert (! (=> anon453@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon453@1_assertion anon453@2)
)) :named ax_anon453@1))
(assert (! (=> anon453_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon453_assertion))
(assert (! (=> anon432@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon432@1_assertion anon432@2)
)) :named ax_anon432@1))
(assert (! (=> anon432_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon432_assertion))
(assert (! (=> $branchMerge_87 (and true 
   (and true
   )
(or anon979_Else anon979_Then)
)) :named ax_$branchMerge_87))
(assert (! (=> anon1273_Else (and true 
   (and true
      (= $@condition_$149 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_899@19 exhaleMask@_899@17)
      (not $@condition_$149)
   )
$branchMerge_65
)) :named ax_anon1273_Else))
(assert (! (=> anon1273_Then (and true 
   (and true
      $@condition_$149
      (= $@condition_$149 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1273_Then@1 anon1273_Then_assertion)
)) :named ax_anon1273_Then))
(assert (! (=> anon1231_Then@1 (and true 
   (and true
      (> methodCallK@_835 0)
   )
(or anon1231_Then@1_assertion anon1231_Then@2)
)) :named ax_anon1231_Then@1))
(assert (! (=> anon1231_Then_assertion (not (and true
   (and true
      (> methodCallK@_835 0)
   )
))) :named ax_anon1231_Then_assertion))
(assert (! (=> anon1211_Else (and true 
   (and true
      (= $@condition_$145 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_800@19 exhaleMask@_800@17)
      (not $@condition_$145)
   )
$branchMerge_63
)) :named ax_anon1211_Else))
(assert (! (=> anon1211_Then (and true 
   (and true
      $@condition_$145
      (= $@condition_$145 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1211_Then@1 anon1211_Then_assertion)
)) :named ax_anon1211_Then))
(assert (! (=> anon1169_Then@1 (and true 
   (and true
      (> methodCallK@_736 0)
   )
(or anon1169_Then@1_assertion anon1169_Then@2)
)) :named ax_anon1169_Then@1))
(assert (! (=> anon1169_Then_assertion (not (and true
   (and true
      (> methodCallK@_736 0)
   )
))) :named ax_anon1169_Then_assertion))
(assert (! (=> anon453@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon453@1_assertion))
(assert (! (=> anon453@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$R))
      (= exhaleMask@_665@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_665@0 this@254@0 AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_665@1)
      (wf exhaleHeap@_635@0 exhaleMask@_665@1 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon453@2_assertion anon453@3)
)) :named ax_anon453@2))
(assert (! (=> anon432@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon432@1_assertion))
(assert (! (=> anon432@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$R))
      (= exhaleMask@_652@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_652@0 this@250@0 AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_652@1)
      (wf exhaleHeap@_635@0 exhaleMask@_652@1 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon432@2_assertion anon432@3)
)) :named ax_anon432@2))
(assert (! (=> anon979_Else (and true 
   (and true
      (= $@condition_$217 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= assertSecMask@_533@17 assertSecMask@_533@15)
      (not $@condition_$217)
   )
$branchMerge_90
)) :named ax_anon979_Else))
(assert (! (=> anon979_Then (and true 
   (and true
      $@condition_$217
      (= $@condition_$217 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= assertSecMask@_533@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@17 assertSecMask@_533@16)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@15)
      (wf Heap@1 Mask@26 assertSecMask@_533@16)
   )
$branchMerge_90
)) :named ax_anon979_Then))
(assert (! (=> anon1273_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1273_Then@1_assertion anon1273_Then@2)
)) :named ax_anon1273_Then@1))
(assert (! (=> anon1273_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1273_Then_assertion))
(assert (! (=> anon1231_Then@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.height) perm$R) 0)
   )
))) :named ax_anon1231_Then@1_assertion))
(assert (! (=> anon1231_Then@2 (and true 
   (and true
      (< methodCallK@_835 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_837@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.height) perm$R) methodCallK@_835))))
      (= exhaleMask@_837@2 exhaleMask@_837@1)
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.height) perm$R) 0)
      (IsGoodMask exhaleMask@_837@1)
      (wf Heap@2 exhaleMask@_837@1 ZeroMask)
      (wf Heap@2 Mask@38 ZeroMask)
   )
anon738
)) :named ax_anon1231_Then@2))
(assert (! (=> anon1211_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1211_Then@1_assertion anon1211_Then@2)
)) :named ax_anon1211_Then@1))
(assert (! (=> anon1211_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1211_Then_assertion))
(assert (! (=> anon1169_Then@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.height) perm$R) 0)
   )
))) :named ax_anon1169_Then@1_assertion))
(assert (! (=> anon1169_Then@2 (and true 
   (and true
      (< methodCallK@_736 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_738@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.height) perm$R) methodCallK@_736))))
      (= exhaleMask@_738@2 exhaleMask@_738@1)
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.height) perm$R) 0)
      (IsGoodMask exhaleMask@_738@1)
      (wf Heap@3 exhaleMask@_738@1 ZeroMask)
      (wf Heap@3 Mask@68 ZeroMask)
   )
anon614
)) :named ax_anon1169_Then@2))
(assert (! (=> anon453@2_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon453@2_assertion))
(assert (! (=> anon453@3 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon453@3_assertion anon453@4)
)) :named ax_anon453@3))
(assert (! (=> anon432@2_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon432@2_assertion))
(assert (! (=> anon432@3 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon432@3_assertion anon432@4)
)) :named ax_anon432@3))
(assert (! (=> $branchMerge_90 (and true 
   (and true
   )
(or anon980_Else anon980_Then)
)) :named ax_$branchMerge_90))
(assert (! (=> anon1273_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1273_Then@1_assertion))
(assert (! (=> anon1273_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_899@18 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_899@19 exhaleMask@_899@18)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_899@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_899@18)
      (wf Heap@1 exhaleMask@_899@18 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_65
)) :named ax_anon1273_Then@2))
(assert (! (=> anon738 (and true 
   (and true
   )
(or anon738@1 anon738_assertion)
)) :named ax_anon738))
(assert (! (=> anon1211_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1211_Then@1_assertion))
(assert (! (=> anon1211_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_800@18 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_800@19 exhaleMask@_800@18)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_800@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_800@18)
      (wf Heap@1 exhaleMask@_800@18 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
$branchMerge_63
)) :named ax_anon1211_Then@2))
(assert (! (=> anon614 (and true 
   (and true
   )
(or anon614@1 anon614_assertion)
)) :named ax_anon614))
(assert (! (=> anon453@3_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon453@3_assertion))
(assert (! (=> anon453@4 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$R))
      (= exhaleMask@_665@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@1 this@254@0 AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_665@2)
      (wf exhaleHeap@_635@0 exhaleMask@_665@2 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon453@4_assertion anon453@5)
)) :named ax_anon453@4))
(assert (! (=> anon432@3_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon432@3_assertion))
(assert (! (=> anon432@4 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$R))
      (= exhaleMask@_652@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@1 this@250@0 AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_652@2)
      (wf exhaleHeap@_635@0 exhaleMask@_652@2 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
   )
(or anon432@4_assertion anon432@5)
)) :named ax_anon432@4))
(assert (! (=> anon980_Else (and true 
   (and true
      (= $@condition_$223 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= assertSecMask@_533@19 assertSecMask@_533@17)
      (not $@condition_$223)
   )
$branchMerge_93
)) :named ax_anon980_Else))
(assert (! (=> anon980_Then (and true 
   (and true
      $@condition_$223
      (= $@condition_$223 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= assertSecMask@_533@18 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_533@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@19 assertSecMask@_533@18)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@17)
      (wf Heap@1 Mask@26 assertSecMask@_533@18)
   )
$branchMerge_93
)) :named ax_anon980_Then))
(assert (! (=> $branchMerge_65 (and true 
   (and true
   )
(or anon1274_Else anon1274_Then)
)) :named ax_$branchMerge_65))
(assert (! (=> anon738@1 (and true 
   (and true
      (> methodCallK@_835 0)
   )
(or anon738@1_assertion anon738@2)
)) :named ax_anon738@1))
(assert (! (=> anon738_assertion (not (and true
   (and true
      (> methodCallK@_835 0)
   )
))) :named ax_anon738_assertion))
(assert (! (=> $branchMerge_63 (and true 
   (and true
   )
(or anon1212_Else anon1212_Then)
)) :named ax_$branchMerge_63))
(assert (! (=> anon614@1 (and true 
   (and true
      (> methodCallK@_736 0)
   )
(or anon614@1_assertion anon614@2)
)) :named ax_anon614@1))
(assert (! (=> anon614_assertion (not (and true
   (and true
      (> methodCallK@_736 0)
   )
))) :named ax_anon614_assertion))
(assert (! (=> anon453@4_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon453@4_assertion))
(assert (! (=> anon453@5 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon453@5_assertion anon453@6)
)) :named ax_anon453@5))
(assert (! (=> anon432@4_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon432@4_assertion))
(assert (! (=> anon432@5 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon432@5_assertion anon432@6)
)) :named ax_anon432@5))
(assert (! (=> $branchMerge_93 (and true 
   (and true
   )
(or anon981_Else anon981_Then)
)) :named ax_$branchMerge_93))
(assert (! (=> anon1274_Else (and true 
   (and true
      (= $@condition_$159 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_899@21 exhaleMask@_899@19)
      (not $@condition_$159)
   )
anon825
)) :named ax_anon1274_Else))
(assert (! (=> anon1274_Then (and true 
   (and true
      $@condition_$159
      (= $@condition_$159 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1274_Then@1 anon1274_Then_assertion)
)) :named ax_anon1274_Then))
(assert (! (=> anon738@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@2 this AVLTreeNode.right) perm$R) 0)
   )
))) :named ax_anon738@1_assertion))
(assert (! (=> anon738@2 (and true 
   (and true
      (< methodCallK@_835 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_837@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@2 this AVLTreeNode.right) perm$R) methodCallK@_835))))
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@2 this AVLTreeNode.right) perm$R) 0)
      (IsGoodMask exhaleMask@_837@3)
      (wf Heap@2 exhaleMask@_837@3 ZeroMask)
      (wf Heap@2 Mask@38 ZeroMask)
   )
(or anon1232_Else anon1232_Then)
)) :named ax_anon738@2))
(assert (! (=> anon1212_Else (and true 
   (and true
      (= $@condition_$155 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)
      (= exhaleMask@_800@21 exhaleMask@_800@19)
      (not $@condition_$155)
   )
anon701
)) :named ax_anon1212_Else))
(assert (! (=> anon1212_Then (and true 
   (and true
      $@condition_$155
      (= $@condition_$155 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null))
   )
(or anon1212_Then@1 anon1212_Then_assertion)
)) :named ax_anon1212_Then))
(assert (! (=> anon614@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@2 this AVLTreeNode.right) perm$R) 0)
   )
))) :named ax_anon614@1_assertion))
(assert (! (=> anon614@2 (and true 
   (and true
      (< methodCallK@_736 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_738@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@2 this AVLTreeNode.right) perm$R) methodCallK@_736))))
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@2 this AVLTreeNode.right) perm$R) 0)
      (IsGoodMask exhaleMask@_738@3)
      (wf Heap@3 exhaleMask@_738@3 ZeroMask)
      (wf Heap@3 Mask@68 ZeroMask)
   )
(or anon1170_Else anon1170_Then)
)) :named ax_anon614@2))
(assert (! (=> anon453@5_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon453@5_assertion))
(assert (! (=> anon453@6 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_665@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@2 this@254@0 AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodExhaleState exhaleHeap@_664@0 exhaleHeap@_635@0 exhaleMask@_665@3 ZeroMask)
      (IsGoodMask exhaleMask@_665@3)
      (or (= m@256@0 null) (= (dtype m@256@0) AVLTreeNode@t))
      (or (= r@255@0 null) (= (dtype r@255@0) AVLTreeNode@t))
      (wf exhaleHeap@_635@0 exhaleMask@_665@3 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
      (wf exhaleHeap@_664@0 exhaleMask@_665@3 ZeroMask)
   )
(or anon1089_Else anon1089_Then)
)) :named ax_anon453@6))
(assert (! (=> anon432@5_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon432@5_assertion))
(assert (! (=> anon432@6 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_652@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@2 this@250@0 AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodExhaleState exhaleHeap@_651@0 exhaleHeap@_635@0 exhaleMask@_652@3 ZeroMask)
      (IsGoodMask exhaleMask@_652@3)
      (or (= m@252@0 null) (= (dtype m@252@0) AVLTreeNode@t))
      (or (= r@251@0 null) (= (dtype r@251@0) AVLTreeNode@t))
      (wf exhaleHeap@_635@0 exhaleMask@_652@3 ZeroMask)
      (wf exhaleHeap@_635@0 Mask@96 ZeroMask)
      (wf exhaleHeap@_651@0 exhaleMask@_652@3 ZeroMask)
   )
(or anon1079_Else anon1079_Then)
)) :named ax_anon432@6))
(assert (! (=> anon981_Else (and true 
   (and true
      (= $@condition_$231 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (= assertSecMask@_533@21 assertSecMask@_533@19)
      (not $@condition_$231)
   )
$branchMerge_96
)) :named ax_anon981_Else))
(assert (! (=> anon981_Then (and true 
   (and true
      $@condition_$231
      (= $@condition_$231 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= assertSecMask@_533@20 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_533@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= assertSecMask@_533@21 assertSecMask@_533@20)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_533@19)
      (wf Heap@1 Mask@26 assertSecMask@_533@20)
   )
$branchMerge_96
)) :named ax_anon981_Then))
(assert (! (=> anon1274_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1274_Then@1_assertion anon1274_Then@2)
)) :named ax_anon1274_Then@1))
(assert (! (=> anon1274_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1274_Then_assertion))
(assert (! (=> anon1232_Else (and true 
   (and true
      (= $@condition_$196 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null)
      (= exhaleMask@_837@5 exhaleMask@_837@3)
      (not $@condition_$196)
   )
$branchMerge_81
)) :named ax_anon1232_Else))
(assert (! (=> anon1232_Then (and true 
   (and true
      $@condition_$196
      (= $@condition_$196 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null))
   )
(or anon1232_Then@1 anon1232_Then_assertion)
)) :named ax_anon1232_Then))
(assert (! (=> anon1212_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1212_Then@1_assertion anon1212_Then@2)
)) :named ax_anon1212_Then@1))
(assert (! (=> anon1212_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1212_Then_assertion))
(assert (! (=> anon1170_Else (and true 
   (and true
      (= $@condition_$195 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null)
      (= exhaleMask@_738@5 exhaleMask@_738@3)
      (not $@condition_$195)
   )
$branchMerge_80
)) :named ax_anon1170_Else))
(assert (! (=> anon1170_Then (and true 
   (and true
      $@condition_$195
      (= $@condition_$195 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null))
   )
(or anon1170_Then@1 anon1170_Then_assertion)
)) :named ax_anon1170_Then))
(assert (! (=> anon1089_Else (and true 
   (and true
      (= $@condition_$194 (not (= r@255@0 null)))
      (= Mask@98 exhaleMask@_665@3)
      (= r@255@0 null)
      (not $@condition_$194)
   )
$branchMerge_79
)) :named ax_anon1089_Else))
(assert (! (=> anon1089_Then (and true 
   (and true
      $@condition_$194
      (= $@condition_$194 (not (= r@255@0 null)))
      (= Mask@97 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@3 r@255@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@3 r@255@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_665@3 r@255@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@98 Mask@97)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@97)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.valid)))
      (not (= r@255@0 null))
      (wf exhaleHeap@_664@0 exhaleMask@_665@3 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@97 ZeroMask)
   )
$branchMerge_79
)) :named ax_anon1089_Then))
(assert (! (=> anon1079_Else (and true 
   (and true
      (= $@condition_$193 (not (= r@251@0 null)))
      (= Mask@110 exhaleMask@_652@3)
      (= r@251@0 null)
      (not $@condition_$193)
   )
$branchMerge_78
)) :named ax_anon1079_Else))
(assert (! (=> anon1079_Then (and true 
   (and true
      $@condition_$193
      (= $@condition_$193 (not (= r@251@0 null)))
      (= Mask@109 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@3 r@251@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@3 r@251@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_652@3 r@251@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@110 Mask@109)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@109)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.valid)))
      (not (= r@251@0 null))
      (wf exhaleHeap@_651@0 exhaleMask@_652@3 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@109 ZeroMask)
   )
$branchMerge_78
)) :named ax_anon1079_Then))
(assert (! (=> $branchMerge_96 (and true 
   (and true
   )
(or anon982_Else anon982_Then)
)) :named ax_$branchMerge_96))
(assert (! (=> anon1274_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1274_Then@1_assertion))
(assert (! (=> anon1274_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_899@20 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_899@21 exhaleMask@_899@20)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_899@20)
      (wf Heap@1 exhaleMask@_899@20 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
anon825
)) :named ax_anon1274_Then@2))
(assert (! (=> anon1232_Then@1 (and true 
   (and true
      (> methodCallK@_835 0)
   )
(or anon1232_Then@1_assertion anon1232_Then@2)
)) :named ax_anon1232_Then@1))
(assert (! (=> anon1232_Then_assertion (not (and true
   (and true
      (> methodCallK@_835 0)
   )
))) :named ax_anon1232_Then_assertion))
(assert (! (=> anon1212_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1212_Then@1_assertion))
(assert (! (=> anon1212_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_800@20 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_800@21 exhaleMask@_800@20)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_800@20)
      (wf Heap@1 exhaleMask@_800@20 ZeroMask)
      (wf Heap@1 Mask@26 ZeroMask)
   )
anon701
)) :named ax_anon1212_Then@2))
(assert (! (=> anon1170_Then@1 (and true 
   (and true
      (> methodCallK@_736 0)
   )
(or anon1170_Then@1_assertion anon1170_Then@2)
)) :named ax_anon1170_Then@1))
(assert (! (=> anon1170_Then_assertion (not (and true
   (and true
      (> methodCallK@_736 0)
   )
))) :named ax_anon1170_Then_assertion))
(assert (! (=> $branchMerge_79 (and true 
   (and true
   )
(or anon1090_Else anon1090_Then)
)) :named ax_$branchMerge_79))
(assert (! (=> $branchMerge_78 (and true 
   (and true
   )
(or anon1080_Else anon1080_Then)
)) :named ax_$branchMerge_78))
(assert (! (=> anon982_Else (and true 
   (and true
      (= $@condition_$239 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (not $@condition_$239)
   )
$branchMerge_99
)) :named ax_anon982_Else))
(assert (! (=> anon982_Then (and true 
   (and true
      $@condition_$239
      (= $@condition_$239 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (forall( (|rk#80#235| Int))(=> (and (<= 0 |rk#80#235|) (< |rk#80#235| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) |rk#80#235|))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null))
   )
$branchMerge_99
)) :named ax_anon982_Then))
(assert (! (=> anon825 (and true 
   (and true
      (= (= true $@bf) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (= (= true $@bf_1) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
      (= (= true $@bf_55) (< (ite$Int$ $@bf_1 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_898@0 this AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_898@0 this AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (= Heap@9 exhaleHeap@_898@0)
      (= Mask@149 Mask@30)
      (= Mask@27 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@21 this AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@21 this AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_899@21 this AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@28 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@27 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@27 this AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@27 this AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@29 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@28 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@28 this AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@28 this AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@30 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@29 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@29 this AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@29 this AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= r@20@3 this)
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodExhaleState exhaleHeap@_898@0 Heap@1 exhaleMask@_899@21 ZeroMask)
      (IsGoodMask exhaleMask@_899@21)
      (IsGoodMask Mask@27)
      (IsGoodMask Mask@28)
      (IsGoodMask Mask@29)
      (IsGoodMask Mask@30)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_898@0 this AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_898@0 this AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_898@0 this AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_898@0 this AVLTreeNode.keys)))
      (not (= this null))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_898@0 this AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys))))
      (wf exhaleHeap@_898@0 exhaleMask@_899@21 ZeroMask)
      (wf exhaleHeap@_898@0 Mask@27 ZeroMask)
      (wf exhaleHeap@_898@0 Mask@28 ZeroMask)
      (wf exhaleHeap@_898@0 Mask@29 ZeroMask)
      (wf exhaleHeap@_898@0 Mask@30 ZeroMask)
   )
$branchMerge_69
)) :named ax_anon825))
(assert (! (=> anon1232_Then@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.height) perm$R) 0)
   )
))) :named ax_anon1232_Then@1_assertion))
(assert (! (=> anon1232_Then@2 (and true 
   (and true
      (< methodCallK@_835 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_837@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.height) perm$R) methodCallK@_835))))
      (= exhaleMask@_837@5 exhaleMask@_837@4)
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.height) perm$R) 0)
      (IsGoodMask exhaleMask@_837@4)
      (wf Heap@2 exhaleMask@_837@4 ZeroMask)
      (wf Heap@2 Mask@38 ZeroMask)
   )
$branchMerge_81
)) :named ax_anon1232_Then@2))
(assert (! (=> anon701 (and true 
   (and true
      (= (= true $@bf) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left)))
      (= (= true $@bf_1) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right)))
      (= (= true $@bf_55) (< (ite$Int$ $@bf_1 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_799@0 this AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_799@0 this AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (= Heap@9 exhaleHeap@_799@0)
      (= Mask@149 Mask@60)
      (= Mask@57 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@21 this AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@21 this AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_800@21 this AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@58 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@57 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@57 this AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@57 this AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@59 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@58 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@58 this AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@58 this AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@60 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@59 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@59 this AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@59 this AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= r@20@3 this)
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodExhaleState exhaleHeap@_799@0 Heap@1 exhaleMask@_800@21 ZeroMask)
      (IsGoodMask exhaleMask@_800@21)
      (IsGoodMask Mask@57)
      (IsGoodMask Mask@58)
      (IsGoodMask Mask@59)
      (IsGoodMask Mask@60)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_799@0 this AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_799@0 this AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_799@0 this AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_799@0 this AVLTreeNode.keys)))
      (not (= this null))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_799@0 this AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 this AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys))))
      (wf exhaleHeap@_799@0 exhaleMask@_800@21 ZeroMask)
      (wf exhaleHeap@_799@0 Mask@57 ZeroMask)
      (wf exhaleHeap@_799@0 Mask@58 ZeroMask)
      (wf exhaleHeap@_799@0 Mask@59 ZeroMask)
      (wf exhaleHeap@_799@0 Mask@60 ZeroMask)
   )
$branchMerge_69
)) :named ax_anon701))
(assert (! (=> anon1170_Then@1_assertion (not (and true
   (and true
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.height) perm$R) 0)
   )
))) :named ax_anon1170_Then@1_assertion))
(assert (! (=> anon1170_Then@2 (and true 
   (and true
      (< methodCallK@_736 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_738@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.height) perm$R) methodCallK@_736))))
      (= exhaleMask@_738@5 exhaleMask@_738@4)
      (> (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.height) perm$R) 0)
      (IsGoodMask exhaleMask@_738@4)
      (wf Heap@3 exhaleMask@_738@4 ZeroMask)
      (wf Heap@3 Mask@68 ZeroMask)
   )
$branchMerge_80
)) :named ax_anon1170_Then@2))
(assert (! (=> anon1090_Else (and true 
   (and true
      (= $@condition_$201 (not (= r@255@0 null)))
      (= Mask@100 Mask@98)
      (= r@255@0 null)
      (not $@condition_$201)
   )
$branchMerge_84
)) :named ax_anon1090_Else))
(assert (! (=> anon1090_Then (and true 
   (and true
      $@condition_$201
      (= $@condition_$201 (not (= r@255@0 null)))
      (= Mask@100 Mask@99)
      (= Mask@99 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@98 r@255@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@98 r@255@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@98 r@255@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (> (Fractions 50) 0)
      (IsGoodMask Mask@99)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.keys)))
      (not (= r@255@0 null))
      (wf exhaleHeap@_664@0 Mask@98 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@99 ZeroMask)
   )
$branchMerge_84
)) :named ax_anon1090_Then))
(assert (! (=> anon1080_Else (and true 
   (and true
      (= $@condition_$199 (not (= r@251@0 null)))
      (= Mask@112 Mask@110)
      (= r@251@0 null)
      (not $@condition_$199)
   )
$branchMerge_83
)) :named ax_anon1080_Else))
(assert (! (=> anon1080_Then (and true 
   (and true
      $@condition_$199
      (= $@condition_$199 (not (= r@251@0 null)))
      (= Mask@111 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@110 r@251@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@110 r@251@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@110 r@251@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@112 Mask@111)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@111)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.keys)))
      (not (= r@251@0 null))
      (wf exhaleHeap@_651@0 Mask@110 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@111 ZeroMask)
   )
$branchMerge_83
)) :named ax_anon1080_Then))
(assert (! (=> $branchMerge_99 (and true 
   (and true
   )
(or anon983_Else anon983_Then)
)) :named ax_$branchMerge_99))
(assert (! (=> $branchMerge_81 (and true 
   (and true
   )
(or anon1233_Else anon1233_Then)
)) :named ax_$branchMerge_81))
(assert (! (=> $branchMerge_80 (and true 
   (and true
   )
(or anon1171_Else anon1171_Then)
)) :named ax_$branchMerge_80))
(assert (! (=> $branchMerge_84 (and true 
   (and true
   )
(or anon1091_Else anon1091_Then)
)) :named ax_$branchMerge_84))
(assert (! (=> $branchMerge_83 (and true 
   (and true
   )
(or anon1081_Else anon1081_Then)
)) :named ax_$branchMerge_83))
(assert (! (=> anon983_Else (and true 
   (and true
      (= $@condition_$245 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)
      (not $@condition_$245)
   )
anon241
)) :named ax_anon983_Else))
(assert (! (=> anon983_Then (and true 
   (and true
      $@condition_$245
      (= $@condition_$245 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null))
   )
anon241
)) :named ax_anon983_Then))
(assert (! (=> anon1233_Else (and true 
   (and true
      (= $@condition_$205 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null)
      (= exhaleMask@_837@7 exhaleMask@_837@5)
      (not $@condition_$205)
   )
$branchMerge_86
)) :named ax_anon1233_Else))
(assert (! (=> anon1233_Then (and true 
   (and true
      $@condition_$205
      (= $@condition_$205 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) null))
   )
(or anon1233_Then@1 anon1233_Then_assertion)
)) :named ax_anon1233_Then))
(assert (! (=> anon1171_Else (and true 
   (and true
      (= $@condition_$203 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null)
      (= exhaleMask@_738@7 exhaleMask@_738@5)
      (not $@condition_$203)
   )
$branchMerge_85
)) :named ax_anon1171_Else))
(assert (! (=> anon1171_Then (and true 
   (and true
      $@condition_$203
      (= $@condition_$203 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) null))
   )
(or anon1171_Then@1 anon1171_Then_assertion)
)) :named ax_anon1171_Then))
(assert (! (=> anon1091_Else (and true 
   (and true
      (= $@condition_$211 (not (= r@255@0 null)))
      (= Mask@102 Mask@100)
      (= r@255@0 null)
      (not $@condition_$211)
   )
$branchMerge_89
)) :named ax_anon1091_Else))
(assert (! (=> anon1091_Then (and true 
   (and true
      $@condition_$211
      (= $@condition_$211 (not (= r@255@0 null)))
      (= Mask@101 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@100 r@255@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@100 r@255@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@100 r@255@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@102 Mask@101)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@101)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.height)))
      (not (= r@255@0 null))
      (wf exhaleHeap@_664@0 Mask@100 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@101 ZeroMask)
   )
$branchMerge_89
)) :named ax_anon1091_Then))
(assert (! (=> anon1081_Else (and true 
   (and true
      (= $@condition_$209 (not (= r@251@0 null)))
      (= Mask@114 Mask@112)
      (= r@251@0 null)
      (not $@condition_$209)
   )
$branchMerge_88
)) :named ax_anon1081_Else))
(assert (! (=> anon1081_Then (and true 
   (and true
      $@condition_$209
      (= $@condition_$209 (not (= r@251@0 null)))
      (= Mask@113 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@112 r@251@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@112 r@251@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@112 r@251@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@114 Mask@113)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@113)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.height)))
      (not (= r@251@0 null))
      (wf exhaleHeap@_651@0 Mask@112 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@113 ZeroMask)
   )
$branchMerge_88
)) :named ax_anon1081_Then))
(assert (! (=> anon241 (and true 
   (and true
      (<= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) 1)
      (= (= true $@bf_61) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left)))
      (= (= true $@bf_62) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right)))
      (= (= true $@bf_63) (< (ite$Int$ $@bf_62 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_61 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.height) 0)
      (>= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.balanceFactor) (- 0 1))
      (forall( (|kk#81_$1| Int))(= (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) |kk#81_$1|) (or (or (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys) |kk#81_$1|)) (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys) |kk#81_$1|))) (= |kk#81_$1| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key)))))
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.right) AVLTreeNode.keys))))
   )
(or anon241@1 anon241_assertion)
)) :named ax_anon241))
(assert (! (=> anon1233_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1233_Then@1_assertion anon1233_Then@2)
)) :named ax_anon1233_Then@1))
(assert (! (=> anon1233_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1233_Then_assertion))
(assert (! (=> anon1171_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1171_Then@1_assertion anon1171_Then@2)
)) :named ax_anon1171_Then@1))
(assert (! (=> anon1171_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1171_Then_assertion))
(assert (! (=> $branchMerge_89 (and true 
   (and true
   )
(or anon1092_Else anon1092_Then)
)) :named ax_$branchMerge_89))
(assert (! (=> $branchMerge_88 (and true 
   (and true
   )
(or anon1082_Else anon1082_Then)
)) :named ax_$branchMerge_88))
(assert (! (=> anon241@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon241@1_assertion anon241@2)
)) :named ax_anon241@1))
(assert (! (=> anon241_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon241_assertion))
(assert (! (=> anon1233_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1233_Then@1_assertion))
(assert (! (=> anon1233_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_837@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1234_Else anon1234_Then)
)) :named ax_anon1233_Then@2))
(assert (! (=> anon1171_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1171_Then@1_assertion))
(assert (! (=> anon1171_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_738@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1172_Else anon1172_Then)
)) :named ax_anon1171_Then@2))
(assert (! (=> anon1092_Else (and true 
   (and true
      (= $@condition_$221 (not (= r@255@0 null)))
      (= Mask@104 Mask@102)
      (= r@255@0 null)
      (not $@condition_$221)
   )
$branchMerge_92
)) :named ax_anon1092_Else))
(assert (! (=> anon1092_Then (and true 
   (and true
      $@condition_$221
      (= $@condition_$221 (not (= r@255@0 null)))
      (= Mask@103 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@102 r@255@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@102 r@255@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@102 r@255@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@104 Mask@103)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@103)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.balanceFactor)))
      (not (= r@255@0 null))
      (wf exhaleHeap@_664@0 Mask@102 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@103 ZeroMask)
   )
$branchMerge_92
)) :named ax_anon1092_Then))
(assert (! (=> anon1082_Else (and true 
   (and true
      (= $@condition_$219 (not (= r@251@0 null)))
      (= Mask@116 Mask@114)
      (= r@251@0 null)
      (not $@condition_$219)
   )
$branchMerge_91
)) :named ax_anon1082_Else))
(assert (! (=> anon1082_Then (and true 
   (and true
      $@condition_$219
      (= $@condition_$219 (not (= r@251@0 null)))
      (= Mask@115 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@114 r@251@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@114 r@251@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@114 r@251@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@116 Mask@115)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@115)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.balanceFactor)))
      (not (= r@251@0 null))
      (wf exhaleHeap@_651@0 Mask@114 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@115 ZeroMask)
   )
$branchMerge_91
)) :named ax_anon1082_Then))
(assert (! (=> anon241@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ unfoldingMask@_538@22 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon241@1_assertion))
(assert (! (=> anon241@2 (and true 
   (and true
      (=> true (CanRead$ref$ unfoldingMask@_538@22 ZeroMask this AVLTreeNode.right))
   )
(or anon241@2_assertion anon241@3)
)) :named ax_anon241@2))
(assert (! (=> anon1234_Else (and true 
   (and true
      (= $@condition_$215 (not (CanRead$Int$ exhaleMask@_837@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_837@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$215)
   )
anon743
)) :named ax_anon1234_Else))
(assert (! (=> anon1234_Then (and true 
   (and true
      $@condition_$215
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$215 (not (CanRead$Int$ exhaleMask@_837@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_837@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon743
)) :named ax_anon1234_Then))
(assert (! (=> anon1172_Else (and true 
   (and true
      (= $@condition_$213 (not (CanRead$Int$ exhaleMask@_738@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_738@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$213)
   )
anon619
)) :named ax_anon1172_Else))
(assert (! (=> anon1172_Then (and true 
   (and true
      $@condition_$213
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$213 (not (CanRead$Int$ exhaleMask@_738@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_738@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon619
)) :named ax_anon1172_Then))
(assert (! (=> $branchMerge_92 (and true 
   (and true
   )
(or anon1093_Else anon1093_Then)
)) :named ax_$branchMerge_92))
(assert (! (=> $branchMerge_91 (and true 
   (and true
   )
(or anon1083_Else anon1083_Then)
)) :named ax_$branchMerge_91))
(assert (! (=> anon241@2_assertion (not (and true
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) null)))
   )
))) :named ax_anon241@2_assertion))
(assert (! (=> anon241@3 (and true 
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) null)))
   )
(or anon241@3_assertion anon241@4)
)) :named ax_anon241@3))
(assert (! (=> anon743 (and true 
   (and true
      (= exhaleMask@_837@7 exhaleMask@_837@6)
      (IsGoodMask exhaleMask@_837@6)
      (wf Heap@2 exhaleMask@_837@6 ZeroMask)
      (wf Heap@2 Mask@38 ZeroMask)
   )
$branchMerge_86
)) :named ax_anon743))
(assert (! (=> anon619 (and true 
   (and true
      (= exhaleMask@_738@7 exhaleMask@_738@6)
      (IsGoodMask exhaleMask@_738@6)
      (wf Heap@3 exhaleMask@_738@6 ZeroMask)
      (wf Heap@3 Mask@68 ZeroMask)
   )
$branchMerge_85
)) :named ax_anon619))
(assert (! (=> anon1093_Else (and true 
   (and true
      (= $@condition_$227 (not (= r@255@0 null)))
      (= r@255@0 null)
      (not $@condition_$227)
   )
$branchMerge_95
)) :named ax_anon1093_Else))
(assert (! (=> anon1093_Then (and true 
   (and true
      $@condition_$227
      (= $@condition_$227 (not (= r@255@0 null)))
      (not (= r@255@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height)) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.height) (- (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) 1)))
   )
$branchMerge_95
)) :named ax_anon1093_Then))
(assert (! (=> anon1083_Else (and true 
   (and true
      (= $@condition_$225 (not (= r@251@0 null)))
      (= r@251@0 null)
      (not $@condition_$225)
   )
$branchMerge_94
)) :named ax_anon1083_Else))
(assert (! (=> anon1083_Then (and true 
   (and true
      $@condition_$225
      (= $@condition_$225 (not (= r@251@0 null)))
      (not (= r@251@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height)) (= (+ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.height) 1) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height)))
   )
$branchMerge_94
)) :named ax_anon1083_Then))
(assert (! (=> anon241@3_assertion (not (and true
   (and true
      (=> true (CanRead$Seq$Int$$ unfoldingMask@_538@22 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys))
   )
))) :named ax_anon241@3_assertion))
(assert (! (=> anon241@4 (and true 
   (and true
      (=> true (CanRead$Seq$Int$$ unfoldingMask@_538@22 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_537@1 this AVLTreeNode.right) AVLTreeNode.keys))
   )
(or anon241@4_assertion anon241@5)
)) :named ax_anon241@4))
(assert (! (=> $branchMerge_86 (and true 
   (and true
   )
(or anon1235_Else anon1235_Then)
)) :named ax_$branchMerge_86))
(assert (! (=> $branchMerge_85 (and true 
   (and true
   )
(or anon1173_Else anon1173_Then)
)) :named ax_$branchMerge_85))
(assert (! (=> $branchMerge_95 (and true 
   (and true
   )
(or anon1094_Else anon1094_Then)
)) :named ax_$branchMerge_95))
(assert (! (=> $branchMerge_94 (and true 
   (and true
   )
(or anon1084_Else anon1084_Then)
)) :named ax_$branchMerge_94))
(assert (! (=> anon241@4_assertion (not (and true
   (and true
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) Seq@Empty$Int$))
   )
))) :named ax_anon241@4_assertion))
(assert (! (=> anon241@5 (and true 
   (and true
      (= assertSecMask@_533@22 assertSecMask@_533@21)
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right) AVLTreeNode.keys) Seq@Empty$Int$))
   )
anon242
)) :named ax_anon241@5))
(assert (! (=> anon1235_Else (and true 
   (and true
      (= $@condition_$216 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null)
      (= exhaleMask@_837@9 exhaleMask@_837@7)
      (not $@condition_$216)
   )
anon748
)) :named ax_anon1235_Else))
(assert (! (=> anon1235_Then (and true 
   (and true
      $@condition_$216
      (= $@condition_$216 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) null))
   )
(or anon1235_Then@1 anon1235_Then_assertion)
)) :named ax_anon1235_Then))
(assert (! (=> anon1173_Else (and true 
   (and true
      (= $@condition_$214 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null)
      (= exhaleMask@_738@9 exhaleMask@_738@7)
      (not $@condition_$214)
   )
anon624
)) :named ax_anon1173_Else))
(assert (! (=> anon1173_Then (and true 
   (and true
      $@condition_$214
      (= $@condition_$214 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) null))
   )
(or anon1173_Then@1 anon1173_Then_assertion)
)) :named ax_anon1173_Then))
(assert (! (=> anon1094_Else (and true 
   (and true
      (= $@condition_$235 (not (= r@255@0 null)))
      (= r@255@0 null)
      (not $@condition_$235)
   )
$branchMerge_98
)) :named ax_anon1094_Else))
(assert (! (=> anon1094_Then (and true 
   (and true
      $@condition_$235
      (= $@condition_$235 (not (= r@255@0 null)))
      (= (+ (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.keys)) 1) (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.keys)))
      (not (= r@255@0 null))
   )
$branchMerge_98
)) :named ax_anon1094_Then))
(assert (! (=> anon1084_Else (and true 
   (and true
      (= $@condition_$233 (not (= r@251@0 null)))
      (= r@251@0 null)
      (not $@condition_$233)
   )
$branchMerge_97
)) :named ax_anon1084_Else))
(assert (! (=> anon1084_Then (and true 
   (and true
      $@condition_$233
      (= $@condition_$233 (not (= r@251@0 null)))
      (= (+ (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.keys)) 1) (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.keys)))
      (not (= r@251@0 null))
   )
$branchMerge_97
)) :named ax_anon1084_Then))
(assert (! (=> anon242 (and true 
   (and true
      (IsGoodExhaleState exhaleHeap@_535@0 Heap@1 Mask@26 assertSecMask@_533@22)
      (IsGoodMask Mask@26)
      (wf exhaleHeap@_535@0 Mask@26 assertSecMask@_533@22)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon242@1 anon242_assertion)
)) :named ax_anon242))
(assert (! (=> anon1235_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1235_Then@1_assertion anon1235_Then@2)
)) :named ax_anon1235_Then@1))
(assert (! (=> anon1235_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1235_Then_assertion))
(assert (! (=> anon1173_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1173_Then@1_assertion anon1173_Then@2)
)) :named ax_anon1173_Then@1))
(assert (! (=> anon1173_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1173_Then_assertion))
(assert (! (=> $branchMerge_98 (and true 
   (and true
   )
(or anon1095_Else anon1095_Then)
)) :named ax_$branchMerge_98))
(assert (! (=> $branchMerge_97 (and true 
   (and true
   )
(or anon1085_Else anon1085_Then)
)) :named ax_$branchMerge_97))
(assert (! (=> anon242@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon242@1_assertion anon242@2)
)) :named ax_anon242@1))
(assert (! (=> anon242_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon242_assertion))
(assert (! (=> anon1235_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1235_Then@1_assertion))
(assert (! (=> anon1235_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_837@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_837@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1236_Else anon1236_Then)
)) :named ax_anon1235_Then@2))
(assert (! (=> anon1173_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1173_Then@1_assertion))
(assert (! (=> anon1173_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_738@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_738@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1174_Else anon1174_Then)
)) :named ax_anon1173_Then@2))
(assert (! (=> anon1095_Else (and true 
   (and true
      (>= 1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height))
      (not $@condition_$243)
   )
$branchMerge_101
)) :named ax_anon1095_Else))
(assert (! (=> anon1095_Then (and true 
   (and true
      $@condition_$243
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) 1)
      (not (= r@255@0 null))
   )
$branchMerge_101
)) :named ax_anon1095_Then))
(assert (! (=> anon1085_Else (and true 
   (and true
      (>= 1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height))
      (not $@condition_$241)
   )
$branchMerge_100
)) :named ax_anon1085_Else))
(assert (! (=> anon1085_Then (and true 
   (and true
      $@condition_$241
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height) 1)
      (not (= r@251@0 null))
   )
$branchMerge_100
)) :named ax_anon1085_Then))
(assert (! (=> anon242@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon242@1_assertion))
(assert (! (=> anon242@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
(or anon984_Else anon984_Then)
)) :named ax_anon242@2))
(assert (! (=> anon1236_Else (and true 
   (and true
      (= $@condition_$238 (not (CanRead$Int$ exhaleMask@_837@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_837@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$238)
   )
anon747
)) :named ax_anon1236_Else))
(assert (! (=> anon1236_Then (and true 
   (and true
      $@condition_$238
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$238 (not (CanRead$Int$ exhaleMask@_837@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_837@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@2 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon747
)) :named ax_anon1236_Then))
(assert (! (=> anon1174_Else (and true 
   (and true
      (= $@condition_$237 (not (CanRead$Int$ exhaleMask@_738@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_738@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$237)
   )
anon623
)) :named ax_anon1174_Else))
(assert (! (=> anon1174_Then (and true 
   (and true
      $@condition_$237
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$237 (not (CanRead$Int$ exhaleMask@_738@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_738@8 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@3 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon623
)) :named ax_anon1174_Then))
(assert (! (=> $branchMerge_101 (and true 
   (and true
   )
(or anon1096_Else anon1096_Then)
)) :named ax_$branchMerge_101))
(assert (! (=> $branchMerge_100 (and true 
   (and true
   )
(or anon1086_Else anon1086_Then)
)) :named ax_$branchMerge_100))
(assert (! (=> anon984_Else (and true 
   (and true
      (= $@condition_$259 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)
      (= assertSecMask@_582@22 ZeroMask)
      (not $@condition_$259)
   )
anon402
)) :named ax_anon984_Else))
(assert (! (=> anon984_Then (and true 
   (and true
      $@condition_$259
      (< (* 1000 unfoldingK@_591) (Fractions 1))
      (< 0 unfoldingK@_591)
      (= $@condition_$259 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
   )
(or anon984_Then@1 anon984_Then_assertion)
)) :named ax_anon984_Then))
(assert (! (=> anon747 (and true 
   (and true
      (= exhaleMask@_837@9 exhaleMask@_837@8)
      (IsGoodMask exhaleMask@_837@8)
      (wf Heap@2 exhaleMask@_837@8 ZeroMask)
      (wf Heap@2 Mask@38 ZeroMask)
   )
anon748
)) :named ax_anon747))
(assert (! (=> anon623 (and true 
   (and true
      (= exhaleMask@_738@9 exhaleMask@_738@8)
      (IsGoodMask exhaleMask@_738@8)
      (wf Heap@3 exhaleMask@_738@8 ZeroMask)
      (wf Heap@3 Mask@68 ZeroMask)
   )
anon624
)) :named ax_anon623))
(assert (! (=> anon1096_Else (and true 
   (and true
      (= $@condition_$249 (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) 1))
      (not $@condition_$249)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) 1))
   )
anon469
)) :named ax_anon1096_Else))
(assert (! (=> anon1096_Then (and true 
   (and true
      $@condition_$249
      (= $@condition_$249 (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) 1))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) 1)
      (= r@255@0 null)
   )
anon469
)) :named ax_anon1096_Then))
(assert (! (=> anon1086_Else (and true 
   (and true
      (= $@condition_$247 (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height) 1))
      (not $@condition_$247)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height) 1))
   )
anon448
)) :named ax_anon1086_Else))
(assert (! (=> anon1086_Then (and true 
   (and true
      $@condition_$247
      (= $@condition_$247 (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height) 1))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height) 1)
      (= r@251@0 null)
   )
anon448
)) :named ax_anon1086_Then))
(assert (! (=> anon984_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon984_Then@1_assertion anon984_Then@2)
)) :named ax_anon984_Then@1))
(assert (! (=> anon984_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon984_Then_assertion))
(assert (! (=> anon748 (and true 
   (and true
      (= Mask@39 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@9 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@9 this AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_837@9 this AVLTreeNode.left) perm$R) methodCallK@_835))))
      (> methodCallK@_835 0)
      (IsGoodExhaleState exhaleHeap@_836@0 Heap@2 exhaleMask@_837@9 ZeroMask)
      (IsGoodMask exhaleMask@_837@9)
      (IsGoodMask Mask@39)
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left)))
      (not (= this null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left)) AVLTreeNode@t))
      (wf exhaleHeap@_836@0 exhaleMask@_837@9 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@39 ZeroMask)
   )
(or anon1237_Else anon1237_Then)
)) :named ax_anon748))
(assert (! (=> anon624 (and true 
   (and true
      (= Mask@69 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@9 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@9 this AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_738@9 this AVLTreeNode.left) perm$R) methodCallK@_736))))
      (> methodCallK@_736 0)
      (IsGoodExhaleState exhaleHeap@_737@0 Heap@3 exhaleMask@_738@9 ZeroMask)
      (IsGoodMask exhaleMask@_738@9)
      (IsGoodMask Mask@69)
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)))
      (not (= this null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)) AVLTreeNode@t))
      (wf exhaleHeap@_737@0 exhaleMask@_738@9 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@69 ZeroMask)
   )
(or anon1175_Else anon1175_Then)
)) :named ax_anon624))
(assert (! (=> anon469 (and true 
   (and true
      (= (= true $@bf_65) (= r@255@0 null))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.height) 1)
      (= (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.keys)) 1)
      (= Mask@105 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@104 m@256@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@104 m@256@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@104 m@256@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@106 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@105 m@256@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@105 m@256@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@105 m@256@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@107 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@106 m@256@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@106 m@256@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@106 m@256@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@108 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@107 m@256@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@107 m@256@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@107 m@256@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@105)
      (IsGoodMask Mask@106)
      (IsGoodMask Mask@107)
      (IsGoodMask Mask@108)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.keys)))
      (not (= m@256@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) (ite$Int$ (= r@255@0 null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.height))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.height) (+ (ite$Int$ (= r@255@0 null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.height)) 1)))
      (Seq@Equal$Int$ (Seq@Append$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.keys) (ite$Seq$Int$$ (= r@255@0 null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.keys))) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_635@0 this@254@0 AVLTreeNode.keys))
      (wf exhaleHeap@_664@0 Mask@104 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@105 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@106 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@107 ZeroMask)
      (wf exhaleHeap@_664@0 Mask@108 ZeroMask)
   )
(or anon1097_Else anon1097_Then)
)) :named ax_anon469))
(assert (! (=> anon448 (and true 
   (and true
      (= (= true $@bf_64) (= r@251@0 null))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.height) 1)
      (= (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.keys)) 1)
      (= Mask@117 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@116 m@252@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@116 m@252@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@116 m@252@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@118 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@117 m@252@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@117 m@252@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@117 m@252@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@119 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@118 m@252@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@118 m@252@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@118 m@252@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@120 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@119 m@252@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@119 m@252@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@119 m@252@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@117)
      (IsGoodMask Mask@118)
      (IsGoodMask Mask@119)
      (IsGoodMask Mask@120)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.keys)))
      (not (= m@252@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height) (ite$Int$ (= r@251@0 null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.height))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.height) (+ (ite$Int$ (= r@251@0 null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.height)) 1)))
      (Seq@Equal$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= r@251@0 null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.keys)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.keys)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_635@0 this@250@0 AVLTreeNode.keys))
      (wf exhaleHeap@_651@0 Mask@116 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@117 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@118 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@119 ZeroMask)
      (wf exhaleHeap@_651@0 Mask@120 ZeroMask)
   )
(or anon1087_Else anon1087_Then)
)) :named ax_anon448))
(assert (! (=> anon984_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon984_Then@1_assertion))
(assert (! (=> anon984_Then@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
(or anon984_Then@2_assertion anon984_Then@3)
)) :named ax_anon984_Then@2))
(assert (! (=> anon1237_Else (and true 
   (and true
      (= $@condition_$252 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)
      (= Mask@41 Mask@39)
      (not $@condition_$252)
   )
$branchMerge_103
)) :named ax_anon1237_Else))
(assert (! (=> anon1237_Then (and true 
   (and true
      $@condition_$252
      (= $@condition_$252 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= Mask@40 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@39 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@39 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@39 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@41 Mask@40)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@40)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
      (wf exhaleHeap@_836@0 Mask@39 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@40 ZeroMask)
   )
$branchMerge_103
)) :named ax_anon1237_Then))
(assert (! (=> anon1175_Else (and true 
   (and true
      (= $@condition_$251 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= Mask@71 Mask@69)
      (not $@condition_$251)
   )
$branchMerge_102
)) :named ax_anon1175_Else))
(assert (! (=> anon1175_Then (and true 
   (and true
      $@condition_$251
      (= $@condition_$251 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= Mask@70 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@69 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@69 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@69 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@71 Mask@70)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@70)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
      (wf exhaleHeap@_737@0 Mask@69 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@70 ZeroMask)
   )
$branchMerge_102
)) :named ax_anon1175_Then))
(assert (! (=> anon1097_Else (and true 
   (and true
      (= $@condition_$254 (not (= r@255@0 null)))
      (= r@255@0 null)
      (not $@condition_$254)
   )
anon471
)) :named ax_anon1097_Else))
(assert (! (=> anon1097_Then (and true 
   (and true
      $@condition_$254
      (= $@condition_$254 (not (= r@255@0 null)))
      (forall( (|k#89#257| Int))(=> (and (<= 0 |k#89#257|) (< |k#89#257| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 m@256@0 AVLTreeNode.keys) 0) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_664@0 r@255@0 AVLTreeNode.keys) |k#89#257|))))
      (not (= r@255@0 null))
   )
anon471
)) :named ax_anon1097_Then))
(assert (! (=> anon1087_Else (and true 
   (and true
      (= $@condition_$253 (not (= r@251@0 null)))
      (= r@251@0 null)
      (not $@condition_$253)
   )
anon450
)) :named ax_anon1087_Else))
(assert (! (=> anon1087_Then (and true 
   (and true
      $@condition_$253
      (= $@condition_$253 (not (= r@251@0 null)))
      (forall( (|k#86#253| Int))(=> (and (<= 0 |k#86#253|) (< |k#86#253| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 r@251@0 AVLTreeNode.keys) |k#86#253|) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_651@0 m@252@0 AVLTreeNode.keys) 0))))
      (not (= r@251@0 null))
   )
anon450
)) :named ax_anon1087_Then))
(assert (! (=> anon984_Then@2_assertion (not (and true
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
   )
))) :named ax_anon984_Then@2_assertion))
(assert (! (=> anon984_Then@3 (and true 
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null)))
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon984_Then@3_assertion anon984_Then@4)
)) :named ax_anon984_Then@3))
(assert (! (=> $branchMerge_103 (and true 
   (and true
   )
(or anon1238_Else anon1238_Then)
)) :named ax_$branchMerge_103))
(assert (! (=> $branchMerge_102 (and true 
   (and true
   )
(or anon1176_Else anon1176_Then)
)) :named ax_$branchMerge_102))
(assert (! (=> anon471 (and true 
   (and true
      (= Heap@4 exhaleHeap@_664@0)
      (= Mask@121 Mask@108)
      (= nl@24@1 nl@24@0)
      (= nr@26@1 r@255@0)
      (= r@20@0 m@256@0)
      (IsGoodMask Mask@108)
      (wf exhaleHeap@_664@0 Mask@108 ZeroMask)
   )
anon472
)) :named ax_anon471))
(assert (! (=> anon450 (and true 
   (and true
      (= Heap@4 exhaleHeap@_651@0)
      (= Mask@121 Mask@120)
      (= nl@24@1 r@251@0)
      (= nr@26@1 nr@26@0)
      (= r@20@0 m@252@0)
      (IsGoodMask Mask@120)
      (wf exhaleHeap@_651@0 Mask@120 ZeroMask)
   )
anon472
)) :named ax_anon450))
(assert (! (=> anon984_Then@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon984_Then@3_assertion))
(assert (! (=> anon984_Then@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon984_Then@4_assertion anon984_Then@5)
)) :named ax_anon984_Then@4))
(assert (! (=> anon1238_Else (and true 
   (and true
      (= $@condition_$257 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)
      (= Mask@43 Mask@41)
      (not $@condition_$257)
   )
anon752
)) :named ax_anon1238_Else))
(assert (! (=> anon1238_Then (and true 
   (and true
      $@condition_$257
      (= $@condition_$257 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= Mask@42 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@41 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@41 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@41 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R) methodCallK@_835))))
      (= Mask@43 Mask@42)
      (> methodCallK@_835 0)
      (IsGoodMask Mask@42)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
      (wf exhaleHeap@_836@0 Mask@41 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@42 ZeroMask)
   )
anon752
)) :named ax_anon1238_Then))
(assert (! (=> anon1176_Else (and true 
   (and true
      (= $@condition_$255 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= Mask@73 Mask@71)
      (not $@condition_$255)
   )
anon628
)) :named ax_anon1176_Else))
(assert (! (=> anon1176_Then (and true 
   (and true
      $@condition_$255
      (= $@condition_$255 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= Mask@72 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@71 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@71 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@71 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R) methodCallK@_736))))
      (= Mask@73 Mask@72)
      (> methodCallK@_736 0)
      (IsGoodMask Mask@72)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
      (wf exhaleHeap@_737@0 Mask@71 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@72 ZeroMask)
   )
anon628
)) :named ax_anon1176_Then))
(assert (! (=> anon472 (and true 
   (and true
      ($@AVLTreeNode.valid@trigger r@20@0)
      (< (* 1000 unfoldK@_672) methodK@_506)
      (< 0 unfoldK@_672)
      (< unfoldK@_672 (Fractions 1))
   )
(or anon472@1 anon472_assertion)
)) :named ax_anon472))
(assert (! (=> anon984_Then@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon984_Then@4_assertion))
(assert (! (=> anon984_Then@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= unfoldingMask@_587@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@26 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
anon985_Else
)) :named ax_anon984_Then@5))
(assert (! (=> anon752 (and true 
   (and true
      (= Mask@44 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@43 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@43 this AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@43 this AVLTreeNode.right) perm$R) methodCallK@_835))))
      (> methodCallK@_835 0)
      (IsGoodMask Mask@44)
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)))
      (not (= this null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)) AVLTreeNode@t))
      (wf exhaleHeap@_836@0 Mask@43 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@44 ZeroMask)
   )
(or anon1239_Else anon1239_Then)
)) :named ax_anon752))
(assert (! (=> anon628 (and true 
   (and true
      (= Mask@74 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@73 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@73 this AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@73 this AVLTreeNode.right) perm$R) methodCallK@_736))))
      (> methodCallK@_736 0)
      (IsGoodMask Mask@74)
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right)))
      (not (= this null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right)) AVLTreeNode@t))
      (wf exhaleHeap@_737@0 Mask@73 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@74 ZeroMask)
   )
(or anon1177_Else anon1177_Then)
)) :named ax_anon628))
(assert (! (=> anon472@1 (and true 
   (and true
      (not (= r@20@0 null))
   )
(or anon472@1_assertion anon472@2)
)) :named ax_anon472@1))
(assert (! (=> anon472_assertion (not (and true
   (and true
      (not (= r@20@0 null))
   )
))) :named ax_anon472_assertion))
(assert (! (=> anon985_Else (and true 
   (and true
      (= $@condition_$260 false)
      (not $@condition_$260)
      (not false)
   )
(or anon1012_Else anon1012_Then)
)) :named ax_anon985_Else))
(assert (! (=> anon1239_Else (and true 
   (and true
      (= $@condition_$262 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= Mask@46 Mask@44)
      (not $@condition_$262)
   )
$branchMerge_105
)) :named ax_anon1239_Else))
(assert (! (=> anon1239_Then (and true 
   (and true
      $@condition_$262
      (= $@condition_$262 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= Mask@45 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@44 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@44 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@44 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@46 Mask@45)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@45)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
      (wf exhaleHeap@_836@0 Mask@44 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@45 ZeroMask)
   )
$branchMerge_105
)) :named ax_anon1239_Then))
(assert (! (=> anon1177_Else (and true 
   (and true
      (= $@condition_$261 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)
      (= Mask@76 Mask@74)
      (not $@condition_$261)
   )
$branchMerge_104
)) :named ax_anon1177_Else))
(assert (! (=> anon1177_Then (and true 
   (and true
      $@condition_$261
      (= $@condition_$261 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= Mask@75 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@74 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@74 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@74 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@76 Mask@75)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@75)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
      (wf exhaleHeap@_737@0 Mask@74 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@75 ZeroMask)
   )
$branchMerge_104
)) :named ax_anon1177_Then))
(assert (! (=> anon472@1_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon472@1_assertion))
(assert (! (=> anon472@2 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon472@2_assertion anon472@3)
)) :named ax_anon472@2))
(assert (! (=> anon1012_Else (and true 
   (and true
      (= $@condition_$263 (not (CanRead$Int$ unfoldingMask@_587@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (= unfoldingHeap@_586@1 Heap@1)
      (CanRead$Int$ unfoldingMask@_587@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$263)
   )
anon299
)) :named ax_anon1012_Else))
(assert (! (=> anon1012_Then (and true 
   (and true
      $@condition_$263
      (< oldVers@_611@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@0 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$263 (not (CanRead$Int$ unfoldingMask@_587@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid)))
      (= oldVers@_611@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
      (= unfoldingHeap@_586@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid newVers@_612@0))
      (= unfoldingHeap@_586@1 unfoldingHeap@_586@0)
      (not (CanRead$Int$ unfoldingMask@_587@0 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon299
)) :named ax_anon1012_Then))
(assert (! (=> $branchMerge_105 (and true 
   (and true
   )
(or anon1240_Else anon1240_Then)
)) :named ax_$branchMerge_105))
(assert (! (=> $branchMerge_104 (and true 
   (and true
   )
(or anon1178_Else anon1178_Then)
)) :named ax_$branchMerge_104))
(assert (! (=> anon472@2_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon472@2_assertion))
(assert (! (=> anon472@3 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$R))
      (= Mask@122 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@121 r@20@0 AVLTreeNode.valid) perm$N)))
   )
anon1098_Else
)) :named ax_anon472@3))
(assert (! (=> anon299 (and true 
   (and true
      (= unfoldingMask@_587@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key) perm$R) (Fractions 100)))))
      (= unfoldingMask@_587@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= unfoldingMask@_587@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_587@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_587@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_587@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) perm$R) (Fractions 100)))))
      (= unfoldingMask@_587@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_587@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_587@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ unfoldingMask@_587@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) perm$R) (Fractions 100)))))
      (= unfoldingMask@_587@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= unfoldingMask@_587@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_587@0)
      (IsGoodMask unfoldingMask@_587@1)
      (IsGoodMask unfoldingMask@_587@2)
      (IsGoodMask unfoldingMask@_587@3)
      (IsGoodMask unfoldingMask@_587@4)
      (IsGoodMask unfoldingMask@_587@5)
      (IsGoodMask unfoldingMask@_587@6)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left)) AVLTreeNode@t))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right)) AVLTreeNode@t))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@0 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@1 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@2 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@3 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@4 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@5 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@6 ZeroMask)
   )
(or anon1013_Else anon1013_Then)
)) :named ax_anon299))
(assert (! (=> anon1240_Else (and true 
   (and true
      (= $@condition_$267 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= Mask@48 Mask@46)
      (not $@condition_$267)
   )
anon756
)) :named ax_anon1240_Else))
(assert (! (=> anon1240_Then (and true 
   (and true
      $@condition_$267
      (= $@condition_$267 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= Mask@47 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@46 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@46 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@46 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R) methodCallK@_835))))
      (= Mask@48 Mask@47)
      (> methodCallK@_835 0)
      (IsGoodMask Mask@47)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
      (wf exhaleHeap@_836@0 Mask@46 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@47 ZeroMask)
   )
anon756
)) :named ax_anon1240_Then))
(assert (! (=> anon1178_Else (and true 
   (and true
      (= $@condition_$265 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)
      (= Mask@78 Mask@76)
      (not $@condition_$265)
   )
anon632
)) :named ax_anon1178_Else))
(assert (! (=> anon1178_Then (and true 
   (and true
      $@condition_$265
      (= $@condition_$265 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= Mask@77 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@76 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@76 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@76 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R) methodCallK@_736))))
      (= Mask@78 Mask@77)
      (> methodCallK@_736 0)
      (IsGoodMask Mask@77)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
      (wf exhaleHeap@_737@0 Mask@76 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@77 ZeroMask)
   )
anon632
)) :named ax_anon1178_Then))
(assert (! (=> anon1098_Else (and true 
   (and true
      (= $@condition_$264 false)
      (not $@condition_$264)
      (not false)
   )
(or anon1125_Else anon1125_Then)
)) :named ax_anon1098_Else))
(assert (! (=> anon1013_Else (and true 
   (and true
      (= $@condition_$270 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= unfoldingMask@_587@8 unfoldingMask@_587@6)
      (not $@condition_$270)
   )
$branchMerge_106
)) :named ax_anon1013_Else))
(assert (! (=> anon1013_Then (and true 
   (and true
      $@condition_$270
      (= $@condition_$270 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= unfoldingMask@_587@7 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= unfoldingMask@_587@8 unfoldingMask@_587@7)
      (> (Fractions 100) 0)
      (IsGoodMask unfoldingMask@_587@7)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@6 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@7 ZeroMask)
   )
$branchMerge_106
)) :named ax_anon1013_Then))
(assert (! (=> anon756 (and true 
   (and true
      (= (= true $@bf_3) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)))
      (= (= true $@bf_5) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left)))
      (= bf@298@0 (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))))
   )
(or anon1241_Else anon1241_Then)
)) :named ax_anon756))
(assert (! (=> anon632 (and true 
   (and true
      (= (= true $@bf_2) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)))
      (= (= true $@bf_4) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right)))
      (= bf@275@0 (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height))))
   )
(or anon1179_Else anon1179_Then)
)) :named ax_anon632))
(assert (! (=> anon1125_Else (and true 
   (and true
      (= $@condition_$269 (not (CanRead$Int$ Mask@122 ZeroMask r@20@0 AVLTreeNode.valid)))
      (= Heap@6 Heap@4)
      (CanRead$Int$ Mask@122 ZeroMask r@20@0 AVLTreeNode.valid)
      (not $@condition_$269)
   )
anon528
)) :named ax_anon1125_Else))
(assert (! (=> anon1125_Then (and true 
   (and true
      $@condition_$269
      (< oldVers@_692@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@5 r@20@0 AVLTreeNode.valid))
      (= $@condition_$269 (not (CanRead$Int$ Mask@122 ZeroMask r@20@0 AVLTreeNode.valid)))
      (= Heap@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@4 r@20@0 AVLTreeNode.valid newVers@_693@0))
      (= Heap@6 Heap@5)
      (= oldVers@_692@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@4 r@20@0 AVLTreeNode.valid))
      (not (CanRead$Int$ Mask@122 ZeroMask r@20@0 AVLTreeNode.valid))
   )
anon528
)) :named ax_anon1125_Then))
(assert (! (=> $branchMerge_106 (and true 
   (and true
   )
(or anon1014_Else anon1014_Then)
)) :named ax_$branchMerge_106))
(assert (! (=> anon1241_Else (and true 
   (and true
      (>= 0 bf@298@0)
      (not $@condition_$272)
   )
$branchMerge_108
)) :named ax_anon1241_Else))
(assert (! (=> anon1241_Then (and true 
   (and true
      $@condition_$272
      (> bf@298@0 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
$branchMerge_108
)) :named ax_anon1241_Then))
(assert (! (=> anon1179_Else (and true 
   (and true
      (>= 0 bf@275@0)
      (not $@condition_$271)
   )
$branchMerge_107
)) :named ax_anon1179_Else))
(assert (! (=> anon1179_Then (and true 
   (and true
      $@condition_$271
      (> bf@275@0 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
$branchMerge_107
)) :named ax_anon1179_Then))
(assert (! (=> anon528 (and true 
   (and true
      (= Mask@123 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@122 r@20@0 AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@122 r@20@0 AVLTreeNode.key) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@122 r@20@0 AVLTreeNode.key) perm$R) (Fractions 100)))))
      (= Mask@124 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@123 r@20@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@123 r@20@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@123 r@20@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@125 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@124 r@20@0 AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@124 r@20@0 AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@124 r@20@0 AVLTreeNode.left) perm$R) (Fractions 100)))))
      (= Mask@126 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@125 r@20@0 AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@125 r@20@0 AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ Mask@125 r@20@0 AVLTreeNode.right) perm$R) (Fractions 100)))))
      (= Mask@127 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@126 r@20@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@126 r@20@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@126 r@20@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@128 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@127 r@20@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@127 r@20@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@127 r@20@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@122)
      (IsGoodMask Mask@123)
      (IsGoodMask Mask@124)
      (IsGoodMask Mask@125)
      (IsGoodMask Mask@126)
      (IsGoodMask Mask@127)
      (IsGoodMask Mask@128)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.key)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 r@20@0 AVLTreeNode.keys)))
      (not (= r@20@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left)) AVLTreeNode@t))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right)) AVLTreeNode@t))
      (wf Heap@6 Mask@122 ZeroMask)
      (wf Heap@6 Mask@123 ZeroMask)
      (wf Heap@6 Mask@124 ZeroMask)
      (wf Heap@6 Mask@125 ZeroMask)
      (wf Heap@6 Mask@126 ZeroMask)
      (wf Heap@6 Mask@127 ZeroMask)
      (wf Heap@6 Mask@128 ZeroMask)
   )
(or anon1126_Else anon1126_Then)
)) :named ax_anon528))
(assert (! (=> anon1014_Else (and true 
   (and true
      (= $@condition_$273 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= unfoldingMask@_587@10 unfoldingMask@_587@8)
      (not $@condition_$273)
   )
$branchMerge_109
)) :named ax_anon1014_Else))
(assert (! (=> anon1014_Then (and true 
   (and true
      $@condition_$273
      (= $@condition_$273 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= unfoldingMask@_587@10 unfoldingMask@_587@9)
      (= unfoldingMask@_587@9 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_587@9)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@8 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@9 ZeroMask)
   )
$branchMerge_109
)) :named ax_anon1014_Then))
(assert (! (=> $branchMerge_108 (and true 
   (and true
   )
(or anon1242_Else anon1242_Then)
)) :named ax_$branchMerge_108))
(assert (! (=> $branchMerge_107 (and true 
   (and true
   )
(or anon1180_Else anon1180_Then)
)) :named ax_$branchMerge_107))
(assert (! (=> anon1126_Else (and true 
   (and true
      (= $@condition_$275 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)
      (= Mask@130 Mask@128)
      (not $@condition_$275)
   )
$branchMerge_110
)) :named ax_anon1126_Else))
(assert (! (=> anon1126_Then (and true 
   (and true
      $@condition_$275
      (= $@condition_$275 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= Mask@129 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@128 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@128 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@128 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@130 Mask@129)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@129)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null))
      (wf Heap@6 Mask@128 ZeroMask)
      (wf Heap@6 Mask@129 ZeroMask)
   )
$branchMerge_110
)) :named ax_anon1126_Then))
(assert (! (=> $branchMerge_109 (and true 
   (and true
   )
(or anon1015_Else anon1015_Then)
)) :named ax_$branchMerge_109))
(assert (! (=> anon1242_Else (and true 
   (and true
      (<= 0 bf@298@0)
      (not $@condition_$278)
   )
anon760
)) :named ax_anon1242_Else))
(assert (! (=> anon1242_Then (and true 
   (and true
      $@condition_$278
      (< bf@298@0 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
anon760
)) :named ax_anon1242_Then))
(assert (! (=> anon1180_Else (and true 
   (and true
      (<= 0 bf@275@0)
      (not $@condition_$276)
   )
anon636
)) :named ax_anon1180_Else))
(assert (! (=> anon1180_Then (and true 
   (and true
      $@condition_$276
      (< bf@275@0 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
anon636
)) :named ax_anon1180_Then))
(assert (! (=> $branchMerge_110 (and true 
   (and true
   )
(or anon1127_Else anon1127_Then)
)) :named ax_$branchMerge_110))
(assert (! (=> anon1015_Else (and true 
   (and true
      (= $@condition_$280 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= unfoldingMask@_587@12 unfoldingMask@_587@10)
      (not $@condition_$280)
   )
$branchMerge_111
)) :named ax_anon1015_Else))
(assert (! (=> anon1015_Then (and true 
   (and true
      $@condition_$280
      (= $@condition_$280 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= unfoldingMask@_587@11 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@10 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= unfoldingMask@_587@12 unfoldingMask@_587@11)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_587@11)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@10 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@11 ZeroMask)
   )
$branchMerge_111
)) :named ax_anon1015_Then))
(assert (! (=> anon760 (and true 
   (and true
      (= cond@_846@0 (= bf@298@0 2))
      (IsGoodMask Mask@48)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon1243_Else anon1243_Then)
)) :named ax_anon760))
(assert (! (=> anon636 (and true 
   (and true
      (= cond@_747@0 (= bf@275@0 (- 0 2)))
      (IsGoodMask Mask@78)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon1181_Else anon1181_Then)
)) :named ax_anon636))
(assert (! (=> anon1127_Else (and true 
   (and true
      (= $@condition_$282 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)
      (= Mask@132 Mask@130)
      (not $@condition_$282)
   )
$branchMerge_112
)) :named ax_anon1127_Else))
(assert (! (=> anon1127_Then (and true 
   (and true
      $@condition_$282
      (= $@condition_$282 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= Mask@131 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@130 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@130 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@130 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@132 Mask@131)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@131)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null))
      (wf Heap@6 Mask@130 ZeroMask)
      (wf Heap@6 Mask@131 ZeroMask)
   )
$branchMerge_112
)) :named ax_anon1127_Then))
(assert (! (=> $branchMerge_111 (and true 
   (and true
   )
(or anon1016_Else anon1016_Then)
)) :named ax_$branchMerge_111))
(assert (! (=> anon1243_Else (and true 
   (and true
      (< (* 1000 methodCallK@_874) (Fractions 1))
      (< (* 1000 methodCallK@_874) methodK@_506)
      (< 0 methodCallK@_874)
      (= $@condition_$289 cond@_846@0)
      (not $@condition_$289)
      (not cond@_846@0)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon1243_Else@1 anon1243_Else_assertion)
)) :named ax_anon1243_Else))
(assert (! (=> anon1243_Then (and true 
   (and true
      $@condition_$289
      (< (* 1000 methodCallK@_851) (Fractions 1))
      (< (* 1000 methodCallK@_851) methodK@_506)
      (< 0 methodCallK@_851)
      (= $@condition_$289 cond@_846@0)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
      cond@_846@0
   )
(or anon1243_Then@1 anon1243_Then_assertion)
)) :named ax_anon1243_Then))
(assert (! (=> anon1181_Else (and true 
   (and true
      (< (* 1000 methodCallK@_775) (Fractions 1))
      (< (* 1000 methodCallK@_775) methodK@_506)
      (< 0 methodCallK@_775)
      (= $@condition_$288 cond@_747@0)
      (not $@condition_$288)
      (not cond@_747@0)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon1181_Else@1 anon1181_Else_assertion)
)) :named ax_anon1181_Else))
(assert (! (=> anon1181_Then (and true 
   (and true
      $@condition_$288
      (< (* 1000 methodCallK@_752) (Fractions 1))
      (< (* 1000 methodCallK@_752) methodK@_506)
      (< 0 methodCallK@_752)
      (= $@condition_$288 cond@_747@0)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
      cond@_747@0
   )
(or anon1181_Then@1 anon1181_Then_assertion)
)) :named ax_anon1181_Then))
(assert (! (=> $branchMerge_112 (and true 
   (and true
   )
(or anon1128_Else anon1128_Then)
)) :named ax_$branchMerge_112))
(assert (! (=> anon1016_Else (and true 
   (and true
      (= $@condition_$284 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= unfoldingMask@_587@14 unfoldingMask@_587@12)
      (not $@condition_$284)
   )
$branchMerge_113
)) :named ax_anon1016_Else))
(assert (! (=> anon1016_Then (and true 
   (and true
      $@condition_$284
      (= $@condition_$284 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= unfoldingMask@_587@13 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@12 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= unfoldingMask@_587@14 unfoldingMask@_587@13)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_587@13)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@12 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@13 ZeroMask)
   )
$branchMerge_113
)) :named ax_anon1016_Then))
(assert (! (=> anon1243_Else@1 (and true 
   (and true
      (not (= this null))
   )
(or anon1251_Else anon1251_Then)
)) :named ax_anon1243_Else@1))
(assert (! (=> anon1243_Else_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon1243_Else_assertion))
(assert (! (=> anon1243_Then@1 (and true 
   (and true
      (not (= this null))
   )
(or anon1243_Then@1_assertion anon1243_Then@2)
)) :named ax_anon1243_Then@1))
(assert (! (=> anon1243_Then_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon1243_Then_assertion))
(assert (! (=> anon1181_Else@1 (and true 
   (and true
      (not (= this null))
   )
(or anon1189_Else anon1189_Then)
)) :named ax_anon1181_Else@1))
(assert (! (=> anon1181_Else_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon1181_Else_assertion))
(assert (! (=> anon1181_Then@1 (and true 
   (and true
      (not (= this null))
   )
(or anon1182_Else anon1182_Then)
)) :named ax_anon1181_Then@1))
(assert (! (=> anon1181_Then_assertion (not (and true
   (and true
      (not (= this null))
   )
))) :named ax_anon1181_Then_assertion))
(assert (! (=> anon1128_Else (and true 
   (and true
      (= $@condition_$286 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)
      (= Mask@134 Mask@132)
      (not $@condition_$286)
   )
$branchMerge_114
)) :named ax_anon1128_Else))
(assert (! (=> anon1128_Then (and true 
   (and true
      $@condition_$286
      (= $@condition_$286 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= Mask@133 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@132 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@132 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@132 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@134 Mask@133)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@133)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null))
      (wf Heap@6 Mask@132 ZeroMask)
      (wf Heap@6 Mask@133 ZeroMask)
   )
$branchMerge_114
)) :named ax_anon1128_Then))
(assert (! (=> $branchMerge_113 (and true 
   (and true
   )
(or anon1017_Else anon1017_Then)
)) :named ax_$branchMerge_113))
(assert (! (=> anon1251_Else (and true 
   (and true
      (= $@condition_$297 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)
      (not $@condition_$297)
   )
$branchMerge_118
)) :named ax_anon1251_Else))
(assert (! (=> anon1251_Then (and true 
   (and true
      $@condition_$297
      (= $@condition_$297 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
(or anon1251_Then@1 anon1251_Then_assertion)
)) :named ax_anon1251_Then))
(assert (! (=> anon1243_Then@1_assertion (not (and true
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
))) :named ax_anon1243_Then@1_assertion))
(assert (! (=> anon1243_Then@2 (and true 
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
(or anon1243_Then@2_assertion anon1243_Then@3)
)) :named ax_anon1243_Then@2))
(assert (! (=> anon1189_Else (and true 
   (and true
      (= $@condition_$295 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (not $@condition_$295)
   )
$branchMerge_117
)) :named ax_anon1189_Else))
(assert (! (=> anon1189_Then (and true 
   (and true
      $@condition_$295
      (= $@condition_$295 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1189_Then@1 anon1189_Then_assertion)
)) :named ax_anon1189_Then))
(assert (! (=> anon1182_Else (and true 
   (and true
      (= $@condition_$294 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (not $@condition_$294)
   )
anon639
)) :named ax_anon1182_Else))
(assert (! (=> anon1182_Then (and true 
   (and true
      $@condition_$294
      (= $@condition_$294 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1182_Then@1 anon1182_Then_assertion)
)) :named ax_anon1182_Then))
(assert (! (=> $branchMerge_114 (and true 
   (and true
   )
(or anon1129_Else anon1129_Then)
)) :named ax_$branchMerge_114))
(assert (! (=> anon1017_Else (and true 
   (and true
      (= $@condition_$290 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (not $@condition_$290)
   )
$branchMerge_115
)) :named ax_anon1017_Else))
(assert (! (=> anon1017_Then (and true 
   (and true
      $@condition_$290
      (= $@condition_$290 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (forall( (|lk#79#240| Int))(=> (and (<= 0 |lk#79#240|) (< |lk#79#240| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) |lk#79#240|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null))
   )
$branchMerge_115
)) :named ax_anon1017_Then))
(assert (! (=> anon1251_Then@1 (and true 
   (and true
      (forall( (|k#92#306| Int))(=> (and (<= 0 |k#92#306|) (< |k#92#306| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#306|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key))))
   )
$branchMerge_118
)) :named ax_anon1251_Then@1))
(assert (! (=> anon1251_Then_assertion (not (and true
   (and true
      (forall( (|k#92#306| Int))(=> (and (<= 0 |k#92#306|) (< |k#92#306| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#306|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key))))
   )
))) :named ax_anon1251_Then_assertion))
(assert (! (=> anon1243_Then@2_assertion (not (and true
   (and true
      (forall( (|k#94#301| Int))(=> (and (<= 0 |k#94#301|) (< |k#94#301| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#94#301|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key))))
   )
))) :named ax_anon1243_Then@2_assertion))
(assert (! (=> anon1243_Then@3 (and true 
   (and true
      (forall( (|k#94#301| Int))(=> (and (<= 0 |k#94#301|) (< |k#94#301| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#94#301|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key))))
   )
(or anon1244_Else anon1244_Then)
)) :named ax_anon1243_Then@3))
(assert (! (=> anon1189_Then@1 (and true 
   (and true
      (forall( (|k#92#283| Int))(=> (and (<= 0 |k#92#283|) (< |k#92#283| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#283|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key))))
   )
$branchMerge_117
)) :named ax_anon1189_Then@1))
(assert (! (=> anon1189_Then_assertion (not (and true
   (and true
      (forall( (|k#92#283| Int))(=> (and (<= 0 |k#92#283|) (< |k#92#283| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#92#283|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key))))
   )
))) :named ax_anon1189_Then_assertion))
(assert (! (=> anon1182_Then@1 (and true 
   (and true
      (forall( (|k#104#278| Int))(=> (and (<= 0 |k#104#278|) (< |k#104#278| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#104#278|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key))))
   )
anon639
)) :named ax_anon1182_Then@1))
(assert (! (=> anon1182_Then_assertion (not (and true
   (and true
      (forall( (|k#104#278| Int))(=> (and (<= 0 |k#104#278|) (< |k#104#278| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) |k#104#278|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key))))
   )
))) :named ax_anon1182_Then_assertion))
(assert (! (=> anon1129_Else (and true 
   (and true
      (= $@condition_$292 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)
      (= Mask@136 Mask@134)
      (not $@condition_$292)
   )
$branchMerge_116
)) :named ax_anon1129_Else))
(assert (! (=> anon1129_Then (and true 
   (and true
      $@condition_$292
      (= $@condition_$292 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= Mask@135 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@134 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@134 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@134 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@136 Mask@135)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@135)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null))
      (wf Heap@6 Mask@134 ZeroMask)
      (wf Heap@6 Mask@135 ZeroMask)
   )
$branchMerge_116
)) :named ax_anon1129_Then))
(assert (! (=> $branchMerge_115 (and true 
   (and true
   )
(or anon1018_Else anon1018_Then)
)) :named ax_$branchMerge_115))
(assert (! (=> $branchMerge_118 (and true 
   (and true
   )
(or anon1252_Else anon1252_Then)
)) :named ax_$branchMerge_118))
(assert (! (=> anon1244_Else (and true 
   (and true
      (= $@condition_$296 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (not $@condition_$296)
   )
anon763
)) :named ax_anon1244_Else))
(assert (! (=> anon1244_Then (and true 
   (and true
      $@condition_$296
      (= $@condition_$296 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1244_Then@1 anon1244_Then_assertion)
)) :named ax_anon1244_Then))
(assert (! (=> $branchMerge_117 (and true 
   (and true
   )
(or anon1190_Else anon1190_Then)
)) :named ax_$branchMerge_117))
(assert (! (=> anon639 (and true 
   (and true
   )
(or anon639@1 anon639_assertion)
)) :named ax_anon639))
(assert (! (=> $branchMerge_116 (and true 
   (and true
   )
(or anon1130_Else anon1130_Then)
)) :named ax_$branchMerge_116))
(assert (! (=> anon1018_Else (and true 
   (and true
      (= $@condition_$298 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (not $@condition_$298)
   )
$branchMerge_119
)) :named ax_anon1018_Else))
(assert (! (=> anon1018_Then (and true 
   (and true
      $@condition_$298
      (= $@condition_$298 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null))
   )
$branchMerge_119
)) :named ax_anon1018_Then))
(assert (! (=> anon1252_Else (and true 
   (and true
      (= $@condition_$304 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (not $@condition_$304)
   )
anon780
)) :named ax_anon1252_Else))
(assert (! (=> anon1252_Then (and true 
   (and true
      $@condition_$304
      (= $@condition_$304 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1252_Then@1 anon1252_Then_assertion)
)) :named ax_anon1252_Then))
(assert (! (=> anon1244_Then@1 (and true 
   (and true
      (forall( (|k#95#302| Int))(=> (and (<= 0 |k#95#302|) (< |k#95#302| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#95#302|))))
   )
anon763
)) :named ax_anon1244_Then@1))
(assert (! (=> anon1244_Then_assertion (not (and true
   (and true
      (forall( (|k#95#302| Int))(=> (and (<= 0 |k#95#302|) (< |k#95#302| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#95#302|))))
   )
))) :named ax_anon1244_Then_assertion))
(assert (! (=> anon1190_Else (and true 
   (and true
      (= $@condition_$302 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)
      (not $@condition_$302)
   )
anon656
)) :named ax_anon1190_Else))
(assert (! (=> anon1190_Then (and true 
   (and true
      $@condition_$302
      (= $@condition_$302 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
(or anon1190_Then@1 anon1190_Then_assertion)
)) :named ax_anon1190_Then))
(assert (! (=> anon639@1 (and true 
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
(or anon639@1_assertion anon639@2)
)) :named ax_anon639@1))
(assert (! (=> anon639_assertion (not (and true
   (and true
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
))) :named ax_anon639_assertion))
(assert (! (=> anon1130_Else (and true 
   (and true
      (= $@condition_$300 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)
      (not $@condition_$300)
   )
$branchMerge_120
)) :named ax_anon1130_Else))
(assert (! (=> anon1130_Then (and true 
   (and true
      $@condition_$300
      (= $@condition_$300 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (forall( (|lk#79#262| Int))(=> (and (<= 0 |lk#79#262|) (< |lk#79#262| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) |lk#79#262|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.key))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null))
   )
$branchMerge_120
)) :named ax_anon1130_Then))
(assert (! (=> $branchMerge_119 (and true 
   (and true
   )
(or anon1019_Else anon1019_Then)
)) :named ax_$branchMerge_119))
(assert (! (=> anon1252_Then@1 (and true 
   (and true
      (forall( (|k#93#307| Int))(=> (and (<= 0 |k#93#307|) (< |k#93#307| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#307|))))
   )
anon780
)) :named ax_anon1252_Then@1))
(assert (! (=> anon1252_Then_assertion (not (and true
   (and true
      (forall( (|k#93#307| Int))(=> (and (<= 0 |k#93#307|) (< |k#93#307| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#307|))))
   )
))) :named ax_anon1252_Then_assertion))
(assert (! (=> anon763 (and true 
   (and true
      (= (= true $@bf_3) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)))
   )
(or anon763@1 anon763_assertion)
)) :named ax_anon763))
(assert (! (=> anon1190_Then@1 (and true 
   (and true
      (forall( (|k#93#284| Int))(=> (and (<= 0 |k#93#284|) (< |k#93#284| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#284|))))
   )
anon656
)) :named ax_anon1190_Then@1))
(assert (! (=> anon1190_Then_assertion (not (and true
   (and true
      (forall( (|k#93#284| Int))(=> (and (<= 0 |k#93#284|) (< |k#93#284| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#93#284|))))
   )
))) :named ax_anon1190_Then_assertion))
(assert (! (=> anon639@1_assertion (not (and true
   (and true
      (forall( (|k#105#279| Int))(=> (and (<= 0 |k#105#279|) (< |k#105#279| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#105#279|))))
   )
))) :named ax_anon639@1_assertion))
(assert (! (=> anon639@2 (and true 
   (and true
      (= (= true $@bf_2) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)))
      (forall( (|k#105#279| Int))(=> (and (<= 0 |k#105#279|) (< |k#105#279| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) |k#105#279|))))
   )
(or anon639@2_assertion anon639@3)
)) :named ax_anon639@2))
(assert (! (=> $branchMerge_120 (and true 
   (and true
   )
(or anon1131_Else anon1131_Then)
)) :named ax_$branchMerge_120))
(assert (! (=> anon1019_Else (and true 
   (and true
      (= $@condition_$306 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= unfoldingMask@_587@16 unfoldingMask@_587@14)
      (not $@condition_$306)
   )
$branchMerge_121
)) :named ax_anon1019_Else))
(assert (! (=> anon1019_Then (and true 
   (and true
      $@condition_$306
      (= $@condition_$306 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= unfoldingMask@_587@15 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= unfoldingMask@_587@16 unfoldingMask@_587@15)
      (> (Fractions 100) 0)
      (IsGoodMask unfoldingMask@_587@15)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@14 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@15 ZeroMask)
   )
$branchMerge_121
)) :named ax_anon1019_Then))
(assert (! (=> anon780 (and true 
   (and true
      (= (= true $@bf_3) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)))
      (= (= true $@bf_5) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left)))
   )
(or anon780@1 anon780_assertion)
)) :named ax_anon780))
(assert (! (=> anon763@1 (and true 
   (and true
      (= (- (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))) 2)
   )
(or anon763@1_assertion anon763@2)
)) :named ax_anon763@1))
(assert (! (=> anon763_assertion (not (and true
   (and true
      (= (- (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))) 2)
   )
))) :named ax_anon763_assertion))
(assert (! (=> anon656 (and true 
   (and true
      (= (= true $@bf_2) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)))
      (= (= true $@bf_4) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right)))
   )
(or anon656@1 anon656_assertion)
)) :named ax_anon656))
(assert (! (=> anon639@2_assertion (not (and true
   (and true
      (= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height)) (- 0 2))
   )
))) :named ax_anon639@2_assertion))
(assert (! (=> anon639@3 (and true 
   (and true
      (= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height)) (- 0 2))
   )
(or anon639@3_assertion anon639@4)
)) :named ax_anon639@3))
(assert (! (=> anon1131_Else (and true 
   (and true
      (= $@condition_$308 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)
      (not $@condition_$308)
   )
$branchMerge_122
)) :named ax_anon1131_Else))
(assert (! (=> anon1131_Then (and true 
   (and true
      $@condition_$308
      (= $@condition_$308 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null))
   )
$branchMerge_122
)) :named ax_anon1131_Then))
(assert (! (=> $branchMerge_121 (and true 
   (and true
   )
(or anon1020_Else anon1020_Then)
)) :named ax_$branchMerge_121))
(assert (! (=> anon780@1 (and true 
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))) 1)
      (= (= true $@bf_3) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)))
      (= (= true $@bf_5) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left)))
   )
(or anon780@1_assertion anon780@2)
)) :named ax_anon780@1))
(assert (! (=> anon780_assertion (not (and true
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))) 1)
   )
))) :named ax_anon780_assertion))
(assert (! (=> anon763@1_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon763@1_assertion))
(assert (! (=> anon763@2 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon763@2_assertion anon763@3)
)) :named ax_anon763@2))
(assert (! (=> anon656@1 (and true 
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height))) 1)
      (= (= true $@bf_2) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)))
      (= (= true $@bf_4) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right)))
   )
(or anon656@1_assertion anon656@2)
)) :named ax_anon656@1))
(assert (! (=> anon656_assertion (not (and true
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height))) 1)
   )
))) :named ax_anon656_assertion))
(assert (! (=> anon639@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon639@3_assertion))
(assert (! (=> anon639@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon639@4_assertion anon639@5)
)) :named ax_anon639@4))
(assert (! (=> $branchMerge_122 (and true 
   (and true
   )
(or anon1132_Else anon1132_Then)
)) :named ax_$branchMerge_122))
(assert (! (=> anon1020_Else (and true 
   (and true
      (= $@condition_$312 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= unfoldingMask@_587@18 unfoldingMask@_587@16)
      (not $@condition_$312)
   )
$branchMerge_124
)) :named ax_anon1020_Else))
(assert (! (=> anon1020_Then (and true 
   (and true
      $@condition_$312
      (= $@condition_$312 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= unfoldingMask@_587@17 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= unfoldingMask@_587@18 unfoldingMask@_587@17)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_587@17)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@16 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@17 ZeroMask)
   )
$branchMerge_124
)) :named ax_anon1020_Then))
(assert (! (=> anon780@1_assertion (not (and true
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
))) :named ax_anon780@1_assertion))
(assert (! (=> anon780@2 (and true 
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
(or anon780@2_assertion anon780@3)
)) :named ax_anon780@2))
(assert (! (=> anon763@2_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$N)))
   )
))) :named ax_anon763@2_assertion))
(assert (! (=> anon763@3 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R))
      (= exhaleMask@_853@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$N)))
      (IsGoodMask exhaleMask@_853@0)
      (wf exhaleHeap@_836@0 exhaleMask@_853@0 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon763@3_assertion anon763@4)
)) :named ax_anon763@3))
(assert (! (=> anon656@1_assertion (not (and true
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
))) :named ax_anon656@1_assertion))
(assert (! (=> anon656@2 (and true 
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
(or anon656@2_assertion anon656@3)
)) :named ax_anon656@2))
(assert (! (=> anon639@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$N)))
   )
))) :named ax_anon639@4_assertion))
(assert (! (=> anon639@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R))
      (= exhaleMask@_754@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$N)))
      (IsGoodMask exhaleMask@_754@0)
      (wf exhaleHeap@_737@0 exhaleMask@_754@0 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon639@5_assertion anon639@6)
)) :named ax_anon639@5))
(assert (! (=> anon1132_Else (and true 
   (and true
      (= $@condition_$314 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)
      (= Mask@138 Mask@136)
      (not $@condition_$314)
   )
$branchMerge_125
)) :named ax_anon1132_Else))
(assert (! (=> anon1132_Then (and true 
   (and true
      $@condition_$314
      (= $@condition_$314 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= Mask@137 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@136 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@136 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@136 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@138 Mask@137)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@137)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null))
      (wf Heap@6 Mask@136 ZeroMask)
      (wf Heap@6 Mask@137 ZeroMask)
   )
$branchMerge_125
)) :named ax_anon1132_Then))
(assert (! (=> $branchMerge_124 (and true 
   (and true
   )
(or anon1021_Else anon1021_Then)
)) :named ax_$branchMerge_124))
(assert (! (=> anon780@2_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon780@2_assertion))
(assert (! (=> anon780@3 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon780@3_assertion anon780@4)
)) :named ax_anon780@3))
(assert (! (=> anon763@3_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon763@3_assertion))
(assert (! (=> anon763@4 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon763@4_assertion anon763@5)
)) :named ax_anon763@4))
(assert (! (=> anon656@2_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon656@2_assertion))
(assert (! (=> anon656@3 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon656@3_assertion anon656@4)
)) :named ax_anon656@3))
(assert (! (=> anon639@5_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon639@5_assertion))
(assert (! (=> anon639@6 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon639@6_assertion anon639@7)
)) :named ax_anon639@6))
(assert (! (=> $branchMerge_125 (and true 
   (and true
   )
(or anon1133_Else anon1133_Then)
)) :named ax_$branchMerge_125))
(assert (! (=> anon1021_Else (and true 
   (and true
      (= $@condition_$320 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= unfoldingMask@_587@20 unfoldingMask@_587@18)
      (not $@condition_$320)
   )
$branchMerge_129
)) :named ax_anon1021_Else))
(assert (! (=> anon1021_Then (and true 
   (and true
      $@condition_$320
      (= $@condition_$320 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= unfoldingMask@_587@19 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ unfoldingMask@_587@18 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= unfoldingMask@_587@20 unfoldingMask@_587@19)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_587@19)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@18 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@19 ZeroMask)
   )
$branchMerge_129
)) :named ax_anon1021_Then))
(assert (! (=> anon780@3_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$N)))
   )
))) :named ax_anon780@3_assertion))
(assert (! (=> anon780@4 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R))
      (= exhaleMask@_876@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@48 this AVLTreeNode.key) perm$N)))
      (IsGoodMask exhaleMask@_876@0)
      (wf exhaleHeap@_836@0 exhaleMask@_876@0 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon780@4_assertion anon780@5)
)) :named ax_anon780@4))
(assert (! (=> anon763@4_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon763@4_assertion))
(assert (! (=> anon763@5 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$R))
      (= exhaleMask@_853@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@0 this AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_853@1)
      (wf exhaleHeap@_836@0 exhaleMask@_853@1 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon763@5_assertion anon763@6)
)) :named ax_anon763@5))
(assert (! (=> anon656@3_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$N)))
   )
))) :named ax_anon656@3_assertion))
(assert (! (=> anon656@4 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R))
      (= exhaleMask@_777@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@78 this AVLTreeNode.key) perm$N)))
      (IsGoodMask exhaleMask@_777@0)
      (wf exhaleHeap@_737@0 exhaleMask@_777@0 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon656@4_assertion anon656@5)
)) :named ax_anon656@4))
(assert (! (=> anon639@6_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon639@6_assertion))
(assert (! (=> anon639@7 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$R))
      (= exhaleMask@_754@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@0 this AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_754@1)
      (wf exhaleHeap@_737@0 exhaleMask@_754@1 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon639@7_assertion anon639@8)
)) :named ax_anon639@7))
(assert (! (=> anon1133_Else (and true 
   (and true
      (= $@condition_$322 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)
      (= Mask@140 Mask@138)
      (not $@condition_$322)
   )
$branchMerge_130
)) :named ax_anon1133_Else))
(assert (! (=> anon1133_Then (and true 
   (and true
      $@condition_$322
      (= $@condition_$322 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= Mask@139 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@138 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@138 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@138 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@140 Mask@139)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@139)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null))
      (wf Heap@6 Mask@138 ZeroMask)
      (wf Heap@6 Mask@139 ZeroMask)
   )
$branchMerge_130
)) :named ax_anon1133_Then))
(assert (! (=> $branchMerge_129 (and true 
   (and true
   )
(or anon1022_Else anon1022_Then)
)) :named ax_$branchMerge_129))
(assert (! (=> anon780@4_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon780@4_assertion))
(assert (! (=> anon780@5 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon780@5_assertion anon780@6)
)) :named ax_anon780@5))
(assert (! (=> anon763@5_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon763@5_assertion))
(assert (! (=> anon763@6 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon763@6_assertion anon763@7)
)) :named ax_anon763@6))
(assert (! (=> anon656@4_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon656@4_assertion))
(assert (! (=> anon656@5 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon656@5_assertion anon656@6)
)) :named ax_anon656@5))
(assert (! (=> anon639@7_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon639@7_assertion))
(assert (! (=> anon639@8 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon639@8_assertion anon639@9)
)) :named ax_anon639@8))
(assert (! (=> $branchMerge_130 (and true 
   (and true
   )
(or anon1134_Else anon1134_Then)
)) :named ax_$branchMerge_130))
(assert (! (=> anon1022_Else (and true 
   (and true
      (= $@condition_$329 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= unfoldingMask@_587@22 unfoldingMask@_587@20)
      (not $@condition_$329)
   )
$branchMerge_134
)) :named ax_anon1022_Else))
(assert (! (=> anon1022_Then (and true 
   (and true
      $@condition_$329
      (= $@condition_$329 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= unfoldingMask@_587@21 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ unfoldingMask@_587@20 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= unfoldingMask@_587@22 unfoldingMask@_587@21)
      (> (Fractions 50) 0)
      (IsGoodMask unfoldingMask@_587@21)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@20 ZeroMask)
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@21 ZeroMask)
   )
$branchMerge_134
)) :named ax_anon1022_Then))
(assert (! (=> anon780@5_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon780@5_assertion))
(assert (! (=> anon780@6 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$R))
      (= exhaleMask@_876@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@0 this AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_876@1)
      (wf exhaleHeap@_836@0 exhaleMask@_876@1 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon780@6_assertion anon780@7)
)) :named ax_anon780@6))
(assert (! (=> anon763@6_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$N)))
   )
))) :named ax_anon763@6_assertion))
(assert (! (=> anon763@7 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_853@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@1 this AVLTreeNode.left) perm$N)))
      (IsGoodMask exhaleMask@_853@2)
      (wf exhaleHeap@_836@0 exhaleMask@_853@2 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon763@7_assertion anon763@8)
)) :named ax_anon763@7))
(assert (! (=> anon656@5_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon656@5_assertion))
(assert (! (=> anon656@6 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$R))
      (= exhaleMask@_777@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@0 this AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_777@1)
      (wf exhaleHeap@_737@0 exhaleMask@_777@1 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon656@6_assertion anon656@7)
)) :named ax_anon656@6))
(assert (! (=> anon639@8_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$N)))
   )
))) :named ax_anon639@8_assertion))
(assert (! (=> anon639@9 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_754@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@1 this AVLTreeNode.left) perm$N)))
      (IsGoodMask exhaleMask@_754@2)
      (wf exhaleHeap@_737@0 exhaleMask@_754@2 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon639@10 anon639@9_assertion)
)) :named ax_anon639@9))
(assert (! (=> anon1134_Else (and true 
   (and true
      (= $@condition_$331 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)
      (= Mask@142 Mask@140)
      (not $@condition_$331)
   )
$branchMerge_135
)) :named ax_anon1134_Else))
(assert (! (=> anon1134_Then (and true 
   (and true
      $@condition_$331
      (= $@condition_$331 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= Mask@141 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@140 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@140 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@140 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@142 Mask@141)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@141)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null))
      (wf Heap@6 Mask@140 ZeroMask)
      (wf Heap@6 Mask@141 ZeroMask)
   )
$branchMerge_135
)) :named ax_anon1134_Then))
(assert (! (=> $branchMerge_134 (and true 
   (and true
   )
(or anon1023_Else anon1023_Then)
)) :named ax_$branchMerge_134))
(assert (! (=> anon780@6_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon780@6_assertion))
(assert (! (=> anon780@7 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon780@7_assertion anon780@8)
)) :named ax_anon780@7))
(assert (! (=> anon763@7_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon763@7_assertion))
(assert (! (=> anon763@8 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon763@8_assertion anon763@9)
)) :named ax_anon763@8))
(assert (! (=> anon656@6_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon656@6_assertion))
(assert (! (=> anon656@7 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon656@7_assertion anon656@8)
)) :named ax_anon656@7))
(assert (! (=> anon639@10 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon639@10_assertion anon639@11)
)) :named ax_anon639@10))
(assert (! (=> anon639@9_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon639@9_assertion))
(assert (! (=> $branchMerge_135 (and true 
   (and true
   )
(or anon1135_Else anon1135_Then)
)) :named ax_$branchMerge_135))
(assert (! (=> anon1023_Else (and true 
   (and true
      (= $@condition_$336 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (not $@condition_$336)
   )
$branchMerge_137
)) :named ax_anon1023_Else))
(assert (! (=> anon1023_Then (and true 
   (and true
      $@condition_$336
      (= $@condition_$336 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (forall( (|rk#80#241| Int))(=> (and (<= 0 |rk#80#241|) (< |rk#80#241| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) |rk#80#241|))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null))
   )
$branchMerge_137
)) :named ax_anon1023_Then))
(assert (! (=> anon780@7_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$N)))
   )
))) :named ax_anon780@7_assertion))
(assert (! (=> anon780@8 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_876@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@1 this AVLTreeNode.left) perm$N)))
      (IsGoodMask exhaleMask@_876@2)
      (wf exhaleHeap@_836@0 exhaleMask@_876@2 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon780@8_assertion anon780@9)
)) :named ax_anon780@8))
(assert (! (=> anon763@8_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$N)))
   )
))) :named ax_anon763@8_assertion))
(assert (! (=> anon763@9 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_853@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_853@2 this AVLTreeNode.right) perm$N)))
      (IsGoodMask exhaleMask@_853@3)
      (wf exhaleHeap@_836@0 exhaleMask@_853@3 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon763@10 anon763@9_assertion)
)) :named ax_anon763@9))
(assert (! (=> anon656@7_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$N)))
   )
))) :named ax_anon656@7_assertion))
(assert (! (=> anon656@8 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$R))
      (= exhaleMask@_777@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@1 this AVLTreeNode.left) perm$N)))
      (IsGoodMask exhaleMask@_777@2)
      (wf exhaleHeap@_737@0 exhaleMask@_777@2 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon656@8_assertion anon656@9)
)) :named ax_anon656@8))
(assert (! (=> anon639@10_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$N)))
   )
))) :named ax_anon639@10_assertion))
(assert (! (=> anon639@11 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_754@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_754@2 this AVLTreeNode.right) perm$N)))
      (IsGoodMask exhaleMask@_754@3)
      (wf exhaleHeap@_737@0 exhaleMask@_754@3 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon639@11_assertion anon639@12)
)) :named ax_anon639@11))
(assert (! (=> anon1135_Else (and true 
   (and true
      (= $@condition_$338 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)
      (= Mask@144 Mask@142)
      (not $@condition_$338)
   )
$branchMerge_138
)) :named ax_anon1135_Else))
(assert (! (=> anon1135_Then (and true 
   (and true
      $@condition_$338
      (= $@condition_$338 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= Mask@143 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@142 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@142 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@142 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@144 Mask@143)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@143)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null))
      (wf Heap@6 Mask@142 ZeroMask)
      (wf Heap@6 Mask@143 ZeroMask)
   )
$branchMerge_138
)) :named ax_anon1135_Then))
(assert (! (=> $branchMerge_137 (and true 
   (and true
   )
(or anon1024_Else anon1024_Then)
)) :named ax_$branchMerge_137))
(assert (! (=> anon780@8_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon780@8_assertion))
(assert (! (=> anon780@9 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon780@10 anon780@9_assertion)
)) :named ax_anon780@9))
(assert (! (=> anon763@10 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon763@10_assertion anon763@11)
)) :named ax_anon763@10))
(assert (! (=> anon763@9_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon763@9_assertion))
(assert (! (=> anon656@8_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon656@8_assertion))
(assert (! (=> anon656@9 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon656@10 anon656@9_assertion)
)) :named ax_anon656@9))
(assert (! (=> anon639@11_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon639@11_assertion))
(assert (! (=> anon639@12 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon639@12_assertion anon639@13)
)) :named ax_anon639@12))
(assert (! (=> $branchMerge_138 (and true 
   (and true
   )
(or anon1136_Else anon1136_Then)
)) :named ax_$branchMerge_138))
(assert (! (=> anon1024_Else (and true 
   (and true
      (= $@condition_$344 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (not $@condition_$344)
   )
anon323
)) :named ax_anon1024_Else))
(assert (! (=> anon1024_Then (and true 
   (and true
      $@condition_$344
      (= $@condition_$344 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null))
   )
anon323
)) :named ax_anon1024_Then))
(assert (! (=> anon780@10 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_876@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$N)))
      (IsGoodMask exhaleMask@_876@3)
      (wf exhaleHeap@_836@0 exhaleMask@_876@3 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon780@10_assertion anon780@11)
)) :named ax_anon780@10))
(assert (! (=> anon780@9_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_876@2 this AVLTreeNode.right) perm$N)))
   )
))) :named ax_anon780@9_assertion))
(assert (! (=> anon763@10_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon763@10_assertion))
(assert (! (=> anon763@11 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$R))
      (= exhaleMask@_853@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@3 this AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_853@4)
      (wf exhaleHeap@_836@0 exhaleMask@_853@4 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon763@11_assertion anon763@12)
)) :named ax_anon763@11))
(assert (! (=> anon656@10 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$R))
      (= exhaleMask@_777@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$N)))
      (IsGoodMask exhaleMask@_777@3)
      (wf exhaleHeap@_737@0 exhaleMask@_777@3 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon656@10_assertion anon656@11)
)) :named ax_anon656@10))
(assert (! (=> anon656@9_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_777@2 this AVLTreeNode.right) perm$N)))
   )
))) :named ax_anon656@9_assertion))
(assert (! (=> anon639@12_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon639@12_assertion))
(assert (! (=> anon639@13 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$R))
      (= exhaleMask@_754@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@3 this AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_754@4)
      (wf exhaleHeap@_737@0 exhaleMask@_754@4 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon639@13_assertion anon639@14)
)) :named ax_anon639@13))
(assert (! (=> anon1136_Else (and true 
   (and true
      (= $@condition_$346 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)
      (not $@condition_$346)
   )
$branchMerge_140
)) :named ax_anon1136_Else))
(assert (! (=> anon1136_Then (and true 
   (and true
      $@condition_$346
      (= $@condition_$346 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (forall( (|rk#80#263| Int))(=> (and (<= 0 |rk#80#263|) (< |rk#80#263| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) |rk#80#263|))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null))
   )
$branchMerge_140
)) :named ax_anon1136_Then))
(assert (! (=> anon323 (and true 
   (and true
      (<= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) 1)
      (= (= true $@bf_66) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left)))
      (= (= true $@bf_67) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right)))
      (= (= true $@bf_68) (< (ite$Int$ $@bf_67 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_66 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.height) 0)
      (>= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) (- 0 1))
      (forall( (|kk#81_$2| Int))(= (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys) |kk#81_$2|) (or (or (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) |kk#81_$2|)) (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) |kk#81_$2|))) (= |kk#81_$2| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key)))))
      (IsGoodMask unfoldingMask@_587@22)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys))))
      (wf unfoldingHeap@_586@1 unfoldingMask@_587@22 ZeroMask)
   )
anon1025_Else
)) :named ax_anon323))
(assert (! (=> anon780@10_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon780@10_assertion))
(assert (! (=> anon780@11 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon780@11_assertion anon780@12)
)) :named ax_anon780@11))
(assert (! (=> anon763@11_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon763@11_assertion))
(assert (! (=> anon763@12 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon763@12_assertion anon763@13)
)) :named ax_anon763@12))
(assert (! (=> anon656@10_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon656@10_assertion))
(assert (! (=> anon656@11 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon656@11_assertion anon656@12)
)) :named ax_anon656@11))
(assert (! (=> anon639@13_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon639@13_assertion))
(assert (! (=> anon639@14 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon639@14_assertion anon639@15)
)) :named ax_anon639@14))
(assert (! (=> $branchMerge_140 (and true 
   (and true
   )
(or anon1137_Else anon1137_Then)
)) :named ax_$branchMerge_140))
(assert (! (=> anon1025_Else (and true 
   (and true
      (= $@condition_$363 false)
      (= assertSecMask@_582@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key) perm$R) (Fractions 100)))))
      (= assertSecMask@_582@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_582@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_582@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_582@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) perm$R) (Fractions 100)))))
      (= assertSecMask@_582@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_582@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_582@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ assertSecMask@_582@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) perm$R) (Fractions 100)))))
      (= assertSecMask@_582@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@3 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@4 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left)))
      (IsGoodState (heapFragment$ref$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys)))
      (not $@condition_$363)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
      (not false)
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left)) AVLTreeNode@t))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null) (= (dtype (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right)) AVLTreeNode@t))
      (wf Heap@1 Mask@26 assertSecMask@_582@0)
      (wf Heap@1 Mask@26 assertSecMask@_582@1)
      (wf Heap@1 Mask@26 assertSecMask@_582@2)
      (wf Heap@1 Mask@26 assertSecMask@_582@3)
      (wf Heap@1 Mask@26 assertSecMask@_582@4)
      (wf Heap@1 Mask@26 assertSecMask@_582@5)
      (wf Heap@1 Mask@26 ZeroMask)
   )
(or anon1052_Else anon1052_Then)
)) :named ax_anon1025_Else))
(assert (! (=> anon780@11_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon780@11_assertion))
(assert (! (=> anon780@12 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$R))
      (= exhaleMask@_876@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@3 this AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_876@4)
      (wf exhaleHeap@_836@0 exhaleMask@_876@4 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon780@12_assertion anon780@13)
)) :named ax_anon780@12))
(assert (! (=> anon763@12_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon763@12_assertion))
(assert (! (=> anon763@13 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_853@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@4 this AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_853@5)
      (wf exhaleHeap@_836@0 exhaleMask@_853@5 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon763@13_assertion anon763@14)
)) :named ax_anon763@13))
(assert (! (=> anon656@11_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon656@11_assertion))
(assert (! (=> anon656@12 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$R))
      (= exhaleMask@_777@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@3 this AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_777@4)
      (wf exhaleHeap@_737@0 exhaleMask@_777@4 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon656@12_assertion anon656@13)
)) :named ax_anon656@12))
(assert (! (=> anon639@14_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon639@14_assertion))
(assert (! (=> anon639@15 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_754@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@4 this AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_754@5)
      (wf exhaleHeap@_737@0 exhaleMask@_754@5 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon1183_Else anon1183_Then)
)) :named ax_anon639@15))
(assert (! (=> anon1137_Else (and true 
   (and true
      (= $@condition_$355 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)
      (not $@condition_$355)
   )
anon552
)) :named ax_anon1137_Else))
(assert (! (=> anon1137_Then (and true 
   (and true
      $@condition_$355
      (= $@condition_$355 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null))
   )
anon552
)) :named ax_anon1137_Then))
(assert (! (=> anon1052_Else (and true 
   (and true
      (= $@condition_$371 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= assertSecMask@_582@7 assertSecMask@_582@5)
      (not $@condition_$371)
   )
$branchMerge_148
)) :named ax_anon1052_Else))
(assert (! (=> anon1052_Then (and true 
   (and true
      $@condition_$371
      (= $@condition_$371 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= assertSecMask@_582@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= assertSecMask@_582@7 assertSecMask@_582@6)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@5)
      (wf Heap@1 Mask@26 assertSecMask@_582@6)
   )
$branchMerge_148
)) :named ax_anon1052_Then))
(assert (! (=> anon780@12_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon780@12_assertion))
(assert (! (=> anon780@13 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon780@13_assertion anon780@14)
)) :named ax_anon780@13))
(assert (! (=> anon763@13_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon763@13_assertion))
(assert (! (=> anon763@14 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon763@14_assertion anon763@15)
)) :named ax_anon763@14))
(assert (! (=> anon656@12_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon656@12_assertion))
(assert (! (=> anon656@13 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon656@13_assertion anon656@14)
)) :named ax_anon656@13))
(assert (! (=> anon1183_Else (and true 
   (and true
      (= $@condition_$310 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_754@7 exhaleMask@_754@5)
      (not $@condition_$310)
   )
$branchMerge_123
)) :named ax_anon1183_Else))
(assert (! (=> anon1183_Then (and true 
   (and true
      $@condition_$310
      (= $@condition_$310 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1183_Then@1 anon1183_Then_assertion)
)) :named ax_anon1183_Then))
(assert (! (=> anon552 (and true 
   (and true
      (<= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.balanceFactor) 1)
      (= (= true $@bf_69) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left)))
      (= (= true $@bf_70) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right)))
      (= (= true $@bf_71) (< (ite$Int$ $@bf_70 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_69 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.height) 0)
      (>= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.balanceFactor) (- 0 1))
      (forall( (|kk#81_$3| Int))(= (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 r@20@0 AVLTreeNode.keys) |kk#81_$3|) (or (or (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) |kk#81_$3|)) (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) |kk#81_$3|))) (= |kk#81_$3| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.key)))))
      (IsGoodMask Mask@144)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 r@20@0 AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.key))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 r@20@0 AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@6 r@20@0 AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.right) AVLTreeNode.keys))))
      (wf Heap@6 Mask@144 ZeroMask)
   )
(or anon552@1 anon552_assertion)
)) :named ax_anon552))
(assert (! (=> $branchMerge_148 (and true 
   (and true
   )
(or anon1053_Else anon1053_Then)
)) :named ax_$branchMerge_148))
(assert (! (=> anon780@13_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon780@13_assertion))
(assert (! (=> anon780@14 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_876@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@4 this AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_876@5)
      (wf exhaleHeap@_836@0 exhaleMask@_876@5 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon1253_Else anon1253_Then)
)) :named ax_anon780@14))
(assert (! (=> anon763@14_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon763@14_assertion))
(assert (! (=> anon763@15 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_853@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1245_Else anon1245_Then)
)) :named ax_anon763@15))
(assert (! (=> anon656@13_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon656@13_assertion))
(assert (! (=> anon656@14 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_777@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@4 this AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_777@5)
      (wf exhaleHeap@_737@0 exhaleMask@_777@5 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon1191_Else anon1191_Then)
)) :named ax_anon656@14))
(assert (! (=> anon1183_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1183_Then@1_assertion anon1183_Then@2)
)) :named ax_anon1183_Then@1))
(assert (! (=> anon1183_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1183_Then_assertion))
(assert (! (=> anon552@1 (and true 
   (and true
      (= Heap@7 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@6 r@20@0 AVLTreeNode.left nl@24@1))
      (CanWrite$ref$ Mask@144 r@20@0 AVLTreeNode.left)
      (wf Heap@7 Mask@144 ZeroMask)
   )
(or anon552@1_assertion anon552@2)
)) :named ax_anon552@1))
(assert (! (=> anon552_assertion (not (and true
   (and true
      (CanWrite$ref$ Mask@144 r@20@0 AVLTreeNode.left)
   )
))) :named ax_anon552_assertion))
(assert (! (=> anon1053_Else (and true 
   (and true
      (= $@condition_$377 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= assertSecMask@_582@9 assertSecMask@_582@7)
      (not $@condition_$377)
   )
$branchMerge_152
)) :named ax_anon1053_Else))
(assert (! (=> anon1053_Then (and true 
   (and true
      $@condition_$377
      (= $@condition_$377 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= assertSecMask@_582@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@9 assertSecMask@_582@8)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@7)
      (wf Heap@1 Mask@26 assertSecMask@_582@8)
   )
$branchMerge_152
)) :named ax_anon1053_Then))
(assert (! (=> anon1253_Else (and true 
   (and true
      (= $@condition_$319 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)
      (= exhaleMask@_876@7 exhaleMask@_876@5)
      (not $@condition_$319)
   )
$branchMerge_128
)) :named ax_anon1253_Else))
(assert (! (=> anon1253_Then (and true 
   (and true
      $@condition_$319
      (= $@condition_$319 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
(or anon1253_Then@1 anon1253_Then_assertion)
)) :named ax_anon1253_Then))
(assert (! (=> anon1245_Else (and true 
   (and true
      (= $@condition_$311 (not (CanRead$Int$ exhaleMask@_853@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_853@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$311)
   )
anon765
)) :named ax_anon1245_Else))
(assert (! (=> anon1245_Then (and true 
   (and true
      $@condition_$311
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_852@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$311 (not (CanRead$Int$ exhaleMask@_853@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_853@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon765
)) :named ax_anon1245_Then))
(assert (! (=> anon1191_Else (and true 
   (and true
      (= $@condition_$318 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_777@7 exhaleMask@_777@5)
      (not $@condition_$318)
   )
$branchMerge_127
)) :named ax_anon1191_Else))
(assert (! (=> anon1191_Then (and true 
   (and true
      $@condition_$318
      (= $@condition_$318 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1191_Then@1 anon1191_Then_assertion)
)) :named ax_anon1191_Then))
(assert (! (=> anon1183_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1183_Then@1_assertion))
(assert (! (=> anon1183_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_754@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1184_Else anon1184_Then)
)) :named ax_anon1183_Then@2))
(assert (! (=> anon552@1_assertion (not (and true
   (and true
      (CanWrite$ref$ Mask@144 r@20@0 AVLTreeNode.right)
   )
))) :named ax_anon552@1_assertion))
(assert (! (=> anon552@2 (and true 
   (and true
      (< (* 1000 methodCallK@_698) (Fractions 1))
      (< (* 1000 methodCallK@_698) methodK@_506)
      (< 0 methodCallK@_698)
      (= Heap@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@7 r@20@0 AVLTreeNode.right nr@26@1))
      (CanWrite$ref$ Mask@144 r@20@0 AVLTreeNode.right)
      (wf Heap@8 Mask@144 ZeroMask)
   )
(or anon552@2_assertion anon552@3)
)) :named ax_anon552@2))
(assert (! (=> $branchMerge_152 (and true 
   (and true
   )
(or anon1054_Else anon1054_Then)
)) :named ax_$branchMerge_152))
(assert (! (=> anon1253_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1253_Then@1_assertion anon1253_Then@2)
)) :named ax_anon1253_Then@1))
(assert (! (=> anon1253_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1253_Then_assertion))
(assert (! (=> anon765 (and true 
   (and true
      (IsGoodMask exhaleMask@_853@6)
      (wf exhaleHeap@_836@0 exhaleMask@_853@6 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon765@1 anon765_assertion)
)) :named ax_anon765))
(assert (! (=> anon1191_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1191_Then@1_assertion anon1191_Then@2)
)) :named ax_anon1191_Then@1))
(assert (! (=> anon1191_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1191_Then_assertion))
(assert (! (=> anon1184_Else (and true 
   (and true
      (= $@condition_$316 (not (CanRead$Int$ exhaleMask@_754@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_754@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$316)
   )
anon642
)) :named ax_anon1184_Else))
(assert (! (=> anon1184_Then (and true 
   (and true
      $@condition_$316
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_753@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$316 (not (CanRead$Int$ exhaleMask@_754@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_754@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon642
)) :named ax_anon1184_Then))
(assert (! (=> anon552@2_assertion (not (and true
   (and true
      (not (= r@20@0 null))
   )
))) :named ax_anon552@2_assertion))
(assert (! (=> anon552@3 (and true 
   (and true
      (not (= r@20@0 null))
   )
(or anon1138_Else anon1138_Then)
)) :named ax_anon552@3))
(assert (! (=> anon1054_Else (and true 
   (and true
      (= $@condition_$383 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= assertSecMask@_582@11 assertSecMask@_582@9)
      (not $@condition_$383)
   )
$branchMerge_153
)) :named ax_anon1054_Else))
(assert (! (=> anon1054_Then (and true 
   (and true
      $@condition_$383
      (= $@condition_$383 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= assertSecMask@_582@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@11 assertSecMask@_582@10)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@10)
      (wf Heap@1 Mask@26 assertSecMask@_582@9)
   )
$branchMerge_153
)) :named ax_anon1054_Then))
(assert (! (=> anon1253_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1253_Then@1_assertion))
(assert (! (=> anon1253_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_876@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1254_Else anon1254_Then)
)) :named ax_anon1253_Then@2))
(assert (! (=> anon765@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon765@1_assertion anon765@2)
)) :named ax_anon765@1))
(assert (! (=> anon765_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon765_assertion))
(assert (! (=> anon1191_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1191_Then@1_assertion))
(assert (! (=> anon1191_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_777@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1192_Else anon1192_Then)
)) :named ax_anon1191_Then@2))
(assert (! (=> anon642 (and true 
   (and true
      (= exhaleMask@_754@7 exhaleMask@_754@6)
      (IsGoodMask exhaleMask@_754@6)
      (wf exhaleHeap@_737@0 exhaleMask@_754@6 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_123
)) :named ax_anon642))
(assert (! (=> anon1138_Else (and true 
   (and true
      (= $@condition_$372 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)
      (not $@condition_$372)
   )
$branchMerge_149
)) :named ax_anon1138_Else))
(assert (! (=> anon1138_Then (and true 
   (and true
      $@condition_$372
      (= $@condition_$372 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null))
   )
(or anon1138_Then@1 anon1138_Then_assertion)
)) :named ax_anon1138_Then))
(assert (! (=> $branchMerge_153 (and true 
   (and true
   )
(or anon1055_Else anon1055_Then)
)) :named ax_$branchMerge_153))
(assert (! (=> anon1254_Else (and true 
   (and true
      (= $@condition_$327 (not (CanRead$Int$ exhaleMask@_876@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_876@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$327)
   )
anon783
)) :named ax_anon1254_Else))
(assert (! (=> anon1254_Then (and true 
   (and true
      $@condition_$327
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_875@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$327 (not (CanRead$Int$ exhaleMask@_876@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_876@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon783
)) :named ax_anon1254_Then))
(assert (! (=> anon765@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon765@1_assertion))
(assert (! (=> anon765@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_853@7 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@6 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_853@7)
      (wf exhaleHeap@_836@0 exhaleMask@_853@7 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon765@2_assertion anon765@3)
)) :named ax_anon765@2))
(assert (! (=> anon1192_Else (and true 
   (and true
      (= $@condition_$324 (not (CanRead$Int$ exhaleMask@_777@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_777@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$324)
   )
anon659
)) :named ax_anon1192_Else))
(assert (! (=> anon1192_Then (and true 
   (and true
      $@condition_$324
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_776@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$324 (not (CanRead$Int$ exhaleMask@_777@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_777@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.valid))
   )
anon659
)) :named ax_anon1192_Then))
(assert (! (=> $branchMerge_123 (and true 
   (and true
   )
(or anon1185_Else anon1185_Then)
)) :named ax_$branchMerge_123))
(assert (! (=> anon1138_Then@1 (and true 
   (and true
      (forall( (|k#92#265| Int))(=> (and (<= 0 |k#92#265|) (< |k#92#265| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) |k#92#265|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 r@20@0 AVLTreeNode.key))))
   )
$branchMerge_149
)) :named ax_anon1138_Then@1))
(assert (! (=> anon1138_Then_assertion (not (and true
   (and true
      (forall( (|k#92#265| Int))(=> (and (<= 0 |k#92#265|) (< |k#92#265| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) |k#92#265|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 r@20@0 AVLTreeNode.key))))
   )
))) :named ax_anon1138_Then_assertion))
(assert (! (=> anon1055_Else (and true 
   (and true
      (= $@condition_$387 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (= assertSecMask@_582@13 assertSecMask@_582@11)
      (not $@condition_$387)
   )
$branchMerge_154
)) :named ax_anon1055_Else))
(assert (! (=> anon1055_Then (and true 
   (and true
      $@condition_$387
      (= $@condition_$387 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= assertSecMask@_582@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@13 assertSecMask@_582@12)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@11)
      (wf Heap@1 Mask@26 assertSecMask@_582@12)
   )
$branchMerge_154
)) :named ax_anon1055_Then))
(assert (! (=> anon783 (and true 
   (and true
      (= exhaleMask@_876@7 exhaleMask@_876@6)
      (IsGoodMask exhaleMask@_876@6)
      (wf exhaleHeap@_836@0 exhaleMask@_876@6 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_128
)) :named ax_anon783))
(assert (! (=> anon765@2_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon765@2_assertion))
(assert (! (=> anon765@3 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon765@3_assertion anon765@4)
)) :named ax_anon765@3))
(assert (! (=> anon659 (and true 
   (and true
      (= exhaleMask@_777@7 exhaleMask@_777@6)
      (IsGoodMask exhaleMask@_777@6)
      (wf exhaleHeap@_737@0 exhaleMask@_777@6 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_127
)) :named ax_anon659))
(assert (! (=> anon1185_Else (and true 
   (and true
      (= $@condition_$317 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_754@9 exhaleMask@_754@7)
      (not $@condition_$317)
   )
$branchMerge_126
)) :named ax_anon1185_Else))
(assert (! (=> anon1185_Then (and true 
   (and true
      $@condition_$317
      (= $@condition_$317 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1185_Then@1 anon1185_Then_assertion)
)) :named ax_anon1185_Then))
(assert (! (=> $branchMerge_149 (and true 
   (and true
   )
(or anon1139_Else anon1139_Then)
)) :named ax_$branchMerge_149))
(assert (! (=> $branchMerge_154 (and true 
   (and true
   )
(or anon1056_Else anon1056_Then)
)) :named ax_$branchMerge_154))
(assert (! (=> $branchMerge_128 (and true 
   (and true
   )
(or anon1255_Else anon1255_Then)
)) :named ax_$branchMerge_128))
(assert (! (=> anon765@3_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon765@3_assertion))
(assert (! (=> anon765@4 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_853@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_853@8)
      (wf exhaleHeap@_836@0 exhaleMask@_853@8 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon765@4_assertion anon765@5)
)) :named ax_anon765@4))
(assert (! (=> $branchMerge_127 (and true 
   (and true
   )
(or anon1193_Else anon1193_Then)
)) :named ax_$branchMerge_127))
(assert (! (=> anon1185_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1185_Then@1_assertion anon1185_Then@2)
)) :named ax_anon1185_Then@1))
(assert (! (=> anon1185_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1185_Then_assertion))
(assert (! (=> anon1139_Else (and true 
   (and true
      (= $@condition_$379 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)
      (not $@condition_$379)
   )
anon556
)) :named ax_anon1139_Else))
(assert (! (=> anon1139_Then (and true 
   (and true
      $@condition_$379
      (= $@condition_$379 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null))
   )
(or anon1139_Then@1 anon1139_Then_assertion)
)) :named ax_anon1139_Then))
(assert (! (=> anon1056_Else (and true 
   (and true
      (= $@condition_$394 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (not $@condition_$394)
   )
$branchMerge_158
)) :named ax_anon1056_Else))
(assert (! (=> anon1056_Then (and true 
   (and true
      $@condition_$394
      (= $@condition_$394 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (forall( (|lk#79#246| Int))(=> (and (<= 0 |lk#79#246|) (< |lk#79#246| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys)))) (< (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) |lk#79#246|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null))
   )
$branchMerge_158
)) :named ax_anon1056_Then))
(assert (! (=> anon1255_Else (and true 
   (and true
      (= $@condition_$328 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)
      (= exhaleMask@_876@9 exhaleMask@_876@7)
      (not $@condition_$328)
   )
$branchMerge_133
)) :named ax_anon1255_Else))
(assert (! (=> anon1255_Then (and true 
   (and true
      $@condition_$328
      (= $@condition_$328 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
(or anon1255_Then@1 anon1255_Then_assertion)
)) :named ax_anon1255_Then))
(assert (! (=> anon765@4_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon765@4_assertion))
(assert (! (=> anon765@5 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon765@5_assertion anon765@6)
)) :named ax_anon765@5))
(assert (! (=> anon1193_Else (and true 
   (and true
      (= $@condition_$325 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_777@9 exhaleMask@_777@7)
      (not $@condition_$325)
   )
$branchMerge_131
)) :named ax_anon1193_Else))
(assert (! (=> anon1193_Then (and true 
   (and true
      $@condition_$325
      (= $@condition_$325 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1193_Then@1 anon1193_Then_assertion)
)) :named ax_anon1193_Then))
(assert (! (=> anon1185_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1185_Then@1_assertion))
(assert (! (=> anon1185_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_754@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_754@9 exhaleMask@_754@8)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_754@8)
      (wf exhaleHeap@_737@0 exhaleMask@_754@8 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_126
)) :named ax_anon1185_Then@2))
(assert (! (=> anon1139_Then@1 (and true 
   (and true
      (forall( (|k#93#266| Int))(=> (and (<= 0 |k#93#266|) (< |k#93#266| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 r@20@0 AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) |k#93#266|))))
   )
anon556
)) :named ax_anon1139_Then@1))
(assert (! (=> anon1139_Then_assertion (not (and true
   (and true
      (forall( (|k#93#266| Int))(=> (and (<= 0 |k#93#266|) (< |k#93#266| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 r@20@0 AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) |k#93#266|))))
   )
))) :named ax_anon1139_Then_assertion))
(assert (! (=> $branchMerge_158 (and true 
   (and true
   )
(or anon1057_Else anon1057_Then)
)) :named ax_$branchMerge_158))
(assert (! (=> anon1255_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1255_Then@1_assertion anon1255_Then@2)
)) :named ax_anon1255_Then@1))
(assert (! (=> anon1255_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1255_Then_assertion))
(assert (! (=> anon765@5_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon765@5_assertion))
(assert (! (=> anon765@6 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_853@9 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_853@9)
      (wf exhaleHeap@_836@0 exhaleMask@_853@9 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
(or anon1246_Else anon1246_Then)
)) :named ax_anon765@6))
(assert (! (=> anon1193_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1193_Then@1_assertion anon1193_Then@2)
)) :named ax_anon1193_Then@1))
(assert (! (=> anon1193_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1193_Then_assertion))
(assert (! (=> $branchMerge_126 (and true 
   (and true
   )
(or anon1186_Else anon1186_Then)
)) :named ax_$branchMerge_126))
(assert (! (=> anon556 (and true 
   (and true
      (= (= true $@bf_6) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left)))
      (= (= true $@bf_7) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right)))
   )
(or anon556@1 anon556_assertion)
)) :named ax_anon556))
(assert (! (=> anon1057_Else (and true 
   (and true
      (= $@condition_$402 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)
      (not $@condition_$402)
   )
$branchMerge_160
)) :named ax_anon1057_Else))
(assert (! (=> anon1057_Then (and true 
   (and true
      $@condition_$402
      (= $@condition_$402 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null))
   )
$branchMerge_160
)) :named ax_anon1057_Then))
(assert (! (=> anon1255_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1255_Then@1_assertion))
(assert (! (=> anon1255_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_876@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_876@9 exhaleMask@_876@8)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_876@8)
      (wf exhaleHeap@_836@0 exhaleMask@_876@8 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_133
)) :named ax_anon1255_Then@2))
(assert (! (=> anon1246_Else (and true 
   (and true
      (= $@condition_$326 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_853@11 exhaleMask@_853@9)
      (not $@condition_$326)
   )
$branchMerge_132
)) :named ax_anon1246_Else))
(assert (! (=> anon1246_Then (and true 
   (and true
      $@condition_$326
      (= $@condition_$326 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1246_Then@1 anon1246_Then_assertion)
)) :named ax_anon1246_Then))
(assert (! (=> anon1193_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1193_Then@1_assertion))
(assert (! (=> anon1193_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_777@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_777@9 exhaleMask@_777@8)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_777@8)
      (wf exhaleHeap@_737@0 exhaleMask@_777@8 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_131
)) :named ax_anon1193_Then@2))
(assert (! (=> anon1186_Else (and true 
   (and true
      (= $@condition_$340 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_754@11 exhaleMask@_754@9)
      (not $@condition_$340)
   )
$branchMerge_139
)) :named ax_anon1186_Else))
(assert (! (=> anon1186_Then (and true 
   (and true
      $@condition_$340
      (= $@condition_$340 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1186_Then@1 anon1186_Then_assertion)
)) :named ax_anon1186_Then))
(assert (! (=> anon556@1 (and true 
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height))) 1)
      (= (= true $@bf_6) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left)))
      (= (= true $@bf_7) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right)))
   )
(or anon556@1_assertion anon556@2)
)) :named ax_anon556@1))
(assert (! (=> anon556_assertion (not (and true
   (and true
      (<= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height))) 1)
   )
))) :named ax_anon556_assertion))
(assert (! (=> $branchMerge_160 (and true 
   (and true
   )
(or anon1058_Else anon1058_Then)
)) :named ax_$branchMerge_160))
(assert (! (=> $branchMerge_133 (and true 
   (and true
   )
(or anon1256_Else anon1256_Then)
)) :named ax_$branchMerge_133))
(assert (! (=> anon1246_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1246_Then@1_assertion anon1246_Then@2)
)) :named ax_anon1246_Then@1))
(assert (! (=> anon1246_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1246_Then_assertion))
(assert (! (=> $branchMerge_131 (and true 
   (and true
   )
(or anon1194_Else anon1194_Then)
)) :named ax_$branchMerge_131))
(assert (! (=> anon1186_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1186_Then@1_assertion anon1186_Then@2)
)) :named ax_anon1186_Then@1))
(assert (! (=> anon1186_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1186_Then_assertion))
(assert (! (=> anon556@1_assertion (not (and true
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
))) :named ax_anon556@1_assertion))
(assert (! (=> anon556@2 (and true 
   (and true
      (>= (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height))) (- 0 1))
   )
(or anon556@2_assertion anon556@3)
)) :named ax_anon556@2))
(assert (! (=> anon1058_Else (and true 
   (and true
      (= $@condition_$404 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= assertSecMask@_582@15 assertSecMask@_582@13)
      (not $@condition_$404)
   )
$branchMerge_161
)) :named ax_anon1058_Else))
(assert (! (=> anon1058_Then (and true 
   (and true
      $@condition_$404
      (= $@condition_$404 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= assertSecMask@_582@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= assertSecMask@_582@15 assertSecMask@_582@14)
      (> (Fractions 100) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.valid)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@13)
      (wf Heap@1 Mask@26 assertSecMask@_582@14)
   )
$branchMerge_161
)) :named ax_anon1058_Then))
(assert (! (=> anon1256_Else (and true 
   (and true
      (= $@condition_$353 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)
      (= exhaleMask@_876@11 exhaleMask@_876@9)
      (not $@condition_$353)
   )
$branchMerge_142
)) :named ax_anon1256_Else))
(assert (! (=> anon1256_Then (and true 
   (and true
      $@condition_$353
      (= $@condition_$353 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
(or anon1256_Then@1 anon1256_Then_assertion)
)) :named ax_anon1256_Then))
(assert (! (=> anon1246_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1246_Then@1_assertion))
(assert (! (=> anon1246_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_853@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1247_Else anon1247_Then)
)) :named ax_anon1246_Then@2))
(assert (! (=> anon1194_Else (and true 
   (and true
      (= $@condition_$350 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_777@11 exhaleMask@_777@9)
      (not $@condition_$350)
   )
$branchMerge_141
)) :named ax_anon1194_Else))
(assert (! (=> anon1194_Then (and true 
   (and true
      $@condition_$350
      (= $@condition_$350 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1194_Then@1 anon1194_Then_assertion)
)) :named ax_anon1194_Then))
(assert (! (=> anon1186_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1186_Then@1_assertion))
(assert (! (=> anon1186_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_754@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_754@11 exhaleMask@_754@10)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_754@10)
      (wf exhaleHeap@_737@0 exhaleMask@_754@10 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_139
)) :named ax_anon1186_Then@2))
(assert (! (=> anon556@2_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon556@2_assertion))
(assert (! (=> anon556@3 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon556@3_assertion anon556@4)
)) :named ax_anon556@3))
(assert (! (=> $branchMerge_161 (and true 
   (and true
   )
(or anon1059_Else anon1059_Then)
)) :named ax_$branchMerge_161))
(assert (! (=> anon1256_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1256_Then@1_assertion anon1256_Then@2)
)) :named ax_anon1256_Then@1))
(assert (! (=> anon1256_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1256_Then_assertion))
(assert (! (=> anon1247_Else (and true 
   (and true
      (= $@condition_$334 (not (CanRead$Int$ exhaleMask@_853@10 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_853@10 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$334)
   )
anon768
)) :named ax_anon1247_Else))
(assert (! (=> anon1247_Then (and true 
   (and true
      $@condition_$334
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_852@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$334 (not (CanRead$Int$ exhaleMask@_853@10 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_853@10 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon768
)) :named ax_anon1247_Then))
(assert (! (=> anon1194_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1194_Then@1_assertion anon1194_Then@2)
)) :named ax_anon1194_Then@1))
(assert (! (=> anon1194_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1194_Then_assertion))
(assert (! (=> $branchMerge_139 (and true 
   (and true
   )
(or anon1187_Else anon1187_Then)
)) :named ax_$branchMerge_139))
(assert (! (=> anon556@3_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$N)))
   )
))) :named ax_anon556@3_assertion))
(assert (! (=> anon556@4 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$R))
      (= exhaleMask@_700@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@144 r@20@0 AVLTreeNode.key) perm$N)))
      (IsGoodMask exhaleMask@_700@0)
      (wf Heap@8 exhaleMask@_700@0 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
(or anon556@4_assertion anon556@5)
)) :named ax_anon556@4))
(assert (! (=> anon1059_Else (and true 
   (and true
      (= $@condition_$409 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= assertSecMask@_582@17 assertSecMask@_582@15)
      (not $@condition_$409)
   )
$branchMerge_162
)) :named ax_anon1059_Else))
(assert (! (=> anon1059_Then (and true 
   (and true
      $@condition_$409
      (= $@condition_$409 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= assertSecMask@_582@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@17 assertSecMask@_582@16)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@15)
      (wf Heap@1 Mask@26 assertSecMask@_582@16)
   )
$branchMerge_162
)) :named ax_anon1059_Then))
(assert (! (=> anon1256_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1256_Then@1_assertion))
(assert (! (=> anon1256_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_876@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_876@11 exhaleMask@_876@10)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_876@10)
      (wf exhaleHeap@_836@0 exhaleMask@_876@10 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_142
)) :named ax_anon1256_Then@2))
(assert (! (=> anon768 (and true 
   (and true
      (= exhaleMask@_853@11 exhaleMask@_853@10)
      (IsGoodMask exhaleMask@_853@10)
      (wf exhaleHeap@_836@0 exhaleMask@_853@10 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_132
)) :named ax_anon768))
(assert (! (=> anon1194_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1194_Then@1_assertion))
(assert (! (=> anon1194_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_777@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_777@11 exhaleMask@_777@10)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_777@10)
      (wf exhaleHeap@_737@0 exhaleMask@_777@10 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_141
)) :named ax_anon1194_Then@2))
(assert (! (=> anon1187_Else (and true 
   (and true
      (= $@condition_$348 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_754@13 exhaleMask@_754@11)
      (not $@condition_$348)
   )
anon649
)) :named ax_anon1187_Else))
(assert (! (=> anon1187_Then (and true 
   (and true
      $@condition_$348
      (= $@condition_$348 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1187_Then@1 anon1187_Then_assertion)
)) :named ax_anon1187_Then))
(assert (! (=> anon556@4_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon556@4_assertion))
(assert (! (=> anon556@5 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon556@5_assertion anon556@6)
)) :named ax_anon556@5))
(assert (! (=> $branchMerge_162 (and true 
   (and true
   )
(or anon1060_Else anon1060_Then)
)) :named ax_$branchMerge_162))
(assert (! (=> $branchMerge_142 (and true 
   (and true
   )
(or anon1257_Else anon1257_Then)
)) :named ax_$branchMerge_142))
(assert (! (=> $branchMerge_132 (and true 
   (and true
   )
(or anon1248_Else anon1248_Then)
)) :named ax_$branchMerge_132))
(assert (! (=> $branchMerge_141 (and true 
   (and true
   )
(or anon1195_Else anon1195_Then)
)) :named ax_$branchMerge_141))
(assert (! (=> anon1187_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1187_Then@1_assertion anon1187_Then@2)
)) :named ax_anon1187_Then@1))
(assert (! (=> anon1187_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1187_Then_assertion))
(assert (! (=> anon556@5_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon556@5_assertion))
(assert (! (=> anon556@6 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$R))
      (= exhaleMask@_700@1 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@0 r@20@0 AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_700@1)
      (wf Heap@8 exhaleMask@_700@1 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
(or anon556@6_assertion anon556@7)
)) :named ax_anon556@6))
(assert (! (=> anon1060_Else (and true 
   (and true
      (= $@condition_$413 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= assertSecMask@_582@19 assertSecMask@_582@17)
      (not $@condition_$413)
   )
$branchMerge_164
)) :named ax_anon1060_Else))
(assert (! (=> anon1060_Then (and true 
   (and true
      $@condition_$413
      (= $@condition_$413 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= assertSecMask@_582@18 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ assertSecMask@_582@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@19 assertSecMask@_582@18)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@17)
      (wf Heap@1 Mask@26 assertSecMask@_582@18)
   )
$branchMerge_164
)) :named ax_anon1060_Then))
(assert (! (=> anon1257_Else (and true 
   (and true
      (= $@condition_$361 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)
      (= exhaleMask@_876@13 exhaleMask@_876@11)
      (not $@condition_$361)
   )
$branchMerge_145
)) :named ax_anon1257_Else))
(assert (! (=> anon1257_Then (and true 
   (and true
      $@condition_$361
      (= $@condition_$361 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null))
   )
(or anon1257_Then@1 anon1257_Then_assertion)
)) :named ax_anon1257_Then))
(assert (! (=> anon1248_Else (and true 
   (and true
      (= $@condition_$335 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_853@13 exhaleMask@_853@11)
      (not $@condition_$335)
   )
$branchMerge_136
)) :named ax_anon1248_Else))
(assert (! (=> anon1248_Then (and true 
   (and true
      $@condition_$335
      (= $@condition_$335 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1248_Then@1 anon1248_Then_assertion)
)) :named ax_anon1248_Then))
(assert (! (=> anon1195_Else (and true 
   (and true
      (= $@condition_$357 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)
      (= exhaleMask@_777@13 exhaleMask@_777@11)
      (not $@condition_$357)
   )
$branchMerge_143
)) :named ax_anon1195_Else))
(assert (! (=> anon1195_Then (and true 
   (and true
      $@condition_$357
      (= $@condition_$357 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null))
   )
(or anon1195_Then@1 anon1195_Then_assertion)
)) :named ax_anon1195_Then))
(assert (! (=> anon1187_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1187_Then@1_assertion))
(assert (! (=> anon1187_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_754@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_754@13 exhaleMask@_754@12)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_754@12)
      (wf exhaleHeap@_737@0 exhaleMask@_754@12 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
anon649
)) :named ax_anon1187_Then@2))
(assert (! (=> anon556@6_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon556@6_assertion))
(assert (! (=> anon556@7 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon556@7_assertion anon556@8)
)) :named ax_anon556@7))
(assert (! (=> $branchMerge_164 (and true 
   (and true
   )
(or anon1061_Else anon1061_Then)
)) :named ax_$branchMerge_164))
(assert (! (=> anon1257_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1257_Then@1_assertion anon1257_Then@2)
)) :named ax_anon1257_Then@1))
(assert (! (=> anon1257_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1257_Then_assertion))
(assert (! (=> anon1248_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1248_Then@1_assertion anon1248_Then@2)
)) :named ax_anon1248_Then@1))
(assert (! (=> anon1248_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1248_Then_assertion))
(assert (! (=> anon1195_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1195_Then@1_assertion anon1195_Then@2)
)) :named ax_anon1195_Then@1))
(assert (! (=> anon1195_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1195_Then_assertion))
(assert (! (=> anon649 (and true 
   (and true
   )
(or anon649@1 anon649_assertion)
)) :named ax_anon649))
(assert (! (=> anon556@7_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$N)))
   )
))) :named ax_anon556@7_assertion))
(assert (! (=> anon556@8 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$R))
      (= exhaleMask@_700@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@1 r@20@0 AVLTreeNode.left) perm$N)))
      (IsGoodMask exhaleMask@_700@2)
      (wf Heap@8 exhaleMask@_700@2 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
(or anon556@8_assertion anon556@9)
)) :named ax_anon556@8))
(assert (! (=> anon1061_Else (and true 
   (and true
      (= $@condition_$417 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (= assertSecMask@_582@21 assertSecMask@_582@19)
      (not $@condition_$417)
   )
$branchMerge_166
)) :named ax_anon1061_Else))
(assert (! (=> anon1061_Then (and true 
   (and true
      $@condition_$417
      (= $@condition_$417 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= assertSecMask@_582@20 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ assertSecMask@_582@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= assertSecMask@_582@21 assertSecMask@_582@20)
      (> (Fractions 50) 0)
      (IsGoodMask Mask@26)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.balanceFactor)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null))
      (wf Heap@1 Mask@26 assertSecMask@_582@19)
      (wf Heap@1 Mask@26 assertSecMask@_582@20)
   )
$branchMerge_166
)) :named ax_anon1061_Then))
(assert (! (=> anon1257_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1257_Then@1_assertion))
(assert (! (=> anon1257_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_876@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_876@13 exhaleMask@_876@12)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_876@12)
      (wf exhaleHeap@_836@0 exhaleMask@_876@12 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_145
)) :named ax_anon1257_Then@2))
(assert (! (=> anon1248_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1248_Then@1_assertion))
(assert (! (=> anon1248_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_853@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_853@13 exhaleMask@_853@12)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_853@12)
      (wf exhaleHeap@_836@0 exhaleMask@_853@12 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_136
)) :named ax_anon1248_Then@2))
(assert (! (=> anon1195_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1195_Then@1_assertion))
(assert (! (=> anon1195_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_777@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_777@13 exhaleMask@_777@12)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_777@12)
      (wf exhaleHeap@_737@0 exhaleMask@_777@12 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_143
)) :named ax_anon1195_Then@2))
(assert (! (=> anon649@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon649@1_assertion anon649@2)
)) :named ax_anon649@1))
(assert (! (=> anon649_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon649_assertion))
(assert (! (=> anon556@8_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon556@8_assertion))
(assert (! (=> anon556@9 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon556@10 anon556@9_assertion)
)) :named ax_anon556@9))
(assert (! (=> $branchMerge_166 (and true 
   (and true
   )
(or anon1062_Else anon1062_Then)
)) :named ax_$branchMerge_166))
(assert (! (=> $branchMerge_145 (and true 
   (and true
   )
(or anon1258_Else anon1258_Then)
)) :named ax_$branchMerge_145))
(assert (! (=> $branchMerge_136 (and true 
   (and true
   )
(or anon1249_Else anon1249_Then)
)) :named ax_$branchMerge_136))
(assert (! (=> $branchMerge_143 (and true 
   (and true
   )
(or anon1196_Else anon1196_Then)
)) :named ax_$branchMerge_143))
(assert (! (=> anon649@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon649@1_assertion))
(assert (! (=> anon649@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_754@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1188_Else anon1188_Then)
)) :named ax_anon649@2))
(assert (! (=> anon556@10 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$R))
      (= exhaleMask@_700@3 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$N)))
      (IsGoodMask exhaleMask@_700@3)
      (wf Heap@8 exhaleMask@_700@3 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
(or anon556@10_assertion anon556@11)
)) :named ax_anon556@10))
(assert (! (=> anon556@9_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ exhaleMask@_700@2 r@20@0 AVLTreeNode.right) perm$N)))
   )
))) :named ax_anon556@9_assertion))
(assert (! (=> anon1062_Else (and true 
   (and true
      (= $@condition_$421 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (not $@condition_$421)
   )
$branchMerge_168
)) :named ax_anon1062_Else))
(assert (! (=> anon1062_Then (and true 
   (and true
      $@condition_$421
      (= $@condition_$421 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (forall( (|rk#80#247| Int))(=> (and (<= 0 |rk#80#247|) (< |rk#80#247| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys)))) (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) |rk#80#247|))))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null))
   )
$branchMerge_168
)) :named ax_anon1062_Then))
(assert (! (=> anon1258_Else (and true 
   (and true
      (= $@condition_$369 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_876@15 exhaleMask@_876@13)
      (not $@condition_$369)
   )
$branchMerge_147
)) :named ax_anon1258_Else))
(assert (! (=> anon1258_Then (and true 
   (and true
      $@condition_$369
      (= $@condition_$369 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1258_Then@1 anon1258_Then_assertion)
)) :named ax_anon1258_Then))
(assert (! (=> anon1249_Else (and true 
   (and true
      (= $@condition_$359 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_853@15 exhaleMask@_853@13)
      (not $@condition_$359)
   )
$branchMerge_144
)) :named ax_anon1249_Else))
(assert (! (=> anon1249_Then (and true 
   (and true
      $@condition_$359
      (= $@condition_$359 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1249_Then@1 anon1249_Then_assertion)
)) :named ax_anon1249_Then))
(assert (! (=> anon1196_Else (and true 
   (and true
      (= $@condition_$365 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)
      (= exhaleMask@_777@15 exhaleMask@_777@13)
      (not $@condition_$365)
   )
$branchMerge_146
)) :named ax_anon1196_Else))
(assert (! (=> anon1196_Then (and true 
   (and true
      $@condition_$365
      (= $@condition_$365 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
(or anon1196_Then@1 anon1196_Then_assertion)
)) :named ax_anon1196_Then))
(assert (! (=> anon1188_Else (and true 
   (and true
      (= $@condition_$364 (not (CanRead$Int$ exhaleMask@_754@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_754@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$364)
   )
anon651
)) :named ax_anon1188_Else))
(assert (! (=> anon1188_Then (and true 
   (and true
      $@condition_$364
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_753@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$364 (not (CanRead$Int$ exhaleMask@_754@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_754@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon651
)) :named ax_anon1188_Then))
(assert (! (=> anon556@10_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon556@10_assertion))
(assert (! (=> anon556@11 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon556@11_assertion anon556@12)
)) :named ax_anon556@11))
(assert (! (=> $branchMerge_168 (and true 
   (and true
   )
(or anon1063_Else anon1063_Then)
)) :named ax_$branchMerge_168))
(assert (! (=> anon1258_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1258_Then@1_assertion anon1258_Then@2)
)) :named ax_anon1258_Then@1))
(assert (! (=> anon1258_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1258_Then_assertion))
(assert (! (=> anon1249_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1249_Then@1_assertion anon1249_Then@2)
)) :named ax_anon1249_Then@1))
(assert (! (=> anon1249_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1249_Then_assertion))
(assert (! (=> anon1196_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1196_Then@1_assertion anon1196_Then@2)
)) :named ax_anon1196_Then@1))
(assert (! (=> anon1196_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1196_Then_assertion))
(assert (! (=> anon651 (and true 
   (and true
      (IsGoodMask exhaleMask@_754@14)
      (wf exhaleHeap@_737@0 exhaleMask@_754@14 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon651@1 anon651_assertion)
)) :named ax_anon651))
(assert (! (=> anon556@11_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon556@11_assertion))
(assert (! (=> anon556@12 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$R))
      (= exhaleMask@_700@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@3 r@20@0 AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_700@4)
      (wf Heap@8 exhaleMask@_700@4 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
(or anon556@12_assertion anon556@13)
)) :named ax_anon556@12))
(assert (! (=> anon1063_Else (and true 
   (and true
      (= $@condition_$425 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)
      (not $@condition_$425)
   )
anon401
)) :named ax_anon1063_Else))
(assert (! (=> anon1063_Then (and true 
   (and true
      $@condition_$425
      (= $@condition_$425 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height) 0)
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null))
   )
anon401
)) :named ax_anon1063_Then))
(assert (! (=> anon1258_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1258_Then@1_assertion))
(assert (! (=> anon1258_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_876@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1259_Else anon1259_Then)
)) :named ax_anon1258_Then@2))
(assert (! (=> anon1249_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1249_Then@1_assertion))
(assert (! (=> anon1249_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_853@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_853@15 exhaleMask@_853@14)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_853@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_853@14)
      (wf exhaleHeap@_836@0 exhaleMask@_853@14 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_144
)) :named ax_anon1249_Then@2))
(assert (! (=> anon1196_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1196_Then@1_assertion))
(assert (! (=> anon1196_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_777@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1197_Else anon1197_Then)
)) :named ax_anon1196_Then@2))
(assert (! (=> anon651@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon651@1_assertion anon651@2)
)) :named ax_anon651@1))
(assert (! (=> anon651_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon651_assertion))
(assert (! (=> anon556@12_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon556@12_assertion))
(assert (! (=> anon556@13 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon556@13_assertion anon556@14)
)) :named ax_anon556@13))
(assert (! (=> anon401 (and true 
   (and true
      (<= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) 1)
      (= (= true $@bf_74) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left)))
      (= (= true $@bf_75) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right)))
      (= (= true $@bf_76) (< (ite$Int$ $@bf_75 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_74 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.height) 0)
      (>= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.balanceFactor) (- 0 1))
      (forall( (|kk#81_$4| Int))(= (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) |kk#81_$4|) (or (or (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys) |kk#81_$4|)) (and (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null)) (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys) |kk#81_$4|))) (= |kk#81_$4| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key)))))
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.right) AVLTreeNode.keys))))
   )
(or anon401@1 anon401_assertion)
)) :named ax_anon401))
(assert (! (=> anon1259_Else (and true 
   (and true
      (= $@condition_$375 (not (CanRead$Int$ exhaleMask@_876@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_876@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$375)
   )
anon793
)) :named ax_anon1259_Else))
(assert (! (=> anon1259_Then (and true 
   (and true
      $@condition_$375
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_875@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$375 (not (CanRead$Int$ exhaleMask@_876@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_876@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon793
)) :named ax_anon1259_Then))
(assert (! (=> $branchMerge_144 (and true 
   (and true
   )
(or anon1250_Else anon1250_Then)
)) :named ax_$branchMerge_144))
(assert (! (=> anon1197_Else (and true 
   (and true
      (= $@condition_$373 (not (CanRead$Int$ exhaleMask@_777@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_777@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$373)
   )
anon669
)) :named ax_anon1197_Else))
(assert (! (=> anon1197_Then (and true 
   (and true
      $@condition_$373
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_776@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$373 (not (CanRead$Int$ exhaleMask@_777@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_777@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.valid))
   )
anon669
)) :named ax_anon1197_Then))
(assert (! (=> anon651@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon651@1_assertion))
(assert (! (=> anon651@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_754@15 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@14 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_754@15)
      (wf exhaleHeap@_737@0 exhaleMask@_754@15 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon651@2_assertion anon651@3)
)) :named ax_anon651@2))
(assert (! (=> anon556@13_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon556@13_assertion))
(assert (! (=> anon556@14 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_700@5 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@4 r@20@0 AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_700@5)
      (wf Heap@8 exhaleMask@_700@5 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
(or anon1140_Else anon1140_Then)
)) :named ax_anon556@14))
(assert (! (=> anon401@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon401@1_assertion anon401@2)
)) :named ax_anon401@1))
(assert (! (=> anon401_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon401_assertion))
(assert (! (=> anon793 (and true 
   (and true
      (= exhaleMask@_876@15 exhaleMask@_876@14)
      (IsGoodMask exhaleMask@_876@14)
      (wf exhaleHeap@_836@0 exhaleMask@_876@14 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_147
)) :named ax_anon793))
(assert (! (=> anon1250_Else (and true 
   (and true
      (= $@condition_$367 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_853@17 exhaleMask@_853@15)
      (not $@condition_$367)
   )
anon775
)) :named ax_anon1250_Else))
(assert (! (=> anon1250_Then (and true 
   (and true
      $@condition_$367
      (= $@condition_$367 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1250_Then@1 anon1250_Then_assertion)
)) :named ax_anon1250_Then))
(assert (! (=> anon669 (and true 
   (and true
      (= exhaleMask@_777@15 exhaleMask@_777@14)
      (IsGoodMask exhaleMask@_777@14)
      (wf exhaleHeap@_737@0 exhaleMask@_777@14 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_146
)) :named ax_anon669))
(assert (! (=> anon651@2_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon651@2_assertion))
(assert (! (=> anon651@3 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon651@3_assertion anon651@4)
)) :named ax_anon651@3))
(assert (! (=> anon1140_Else (and true 
   (and true
      (= $@condition_$389 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)
      (= exhaleMask@_700@7 exhaleMask@_700@5)
      (not $@condition_$389)
   )
$branchMerge_155
)) :named ax_anon1140_Else))
(assert (! (=> anon1140_Then (and true 
   (and true
      $@condition_$389
      (= $@condition_$389 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null))
   )
(or anon1140_Then@1 anon1140_Then_assertion)
)) :named ax_anon1140_Then))
(assert (! (=> anon401@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ unfoldingMask@_587@22 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon401@1_assertion))
(assert (! (=> anon401@2 (and true 
   (and true
      (=> true (CanRead$ref$ unfoldingMask@_587@22 ZeroMask this AVLTreeNode.left))
   )
(or anon401@2_assertion anon401@3)
)) :named ax_anon401@2))
(assert (! (=> $branchMerge_147 (and true 
   (and true
   )
(or anon1260_Else anon1260_Then)
)) :named ax_$branchMerge_147))
(assert (! (=> anon1250_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1250_Then@1_assertion anon1250_Then@2)
)) :named ax_anon1250_Then@1))
(assert (! (=> anon1250_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1250_Then_assertion))
(assert (! (=> $branchMerge_146 (and true 
   (and true
   )
(or anon1198_Else anon1198_Then)
)) :named ax_$branchMerge_146))
(assert (! (=> anon651@3_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon651@3_assertion))
(assert (! (=> anon651@4 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_754@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_754@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_754@16)
      (wf exhaleHeap@_737@0 exhaleMask@_754@16 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
(or anon651@4_assertion anon651@5)
)) :named ax_anon651@4))
(assert (! (=> anon1140_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1140_Then@1_assertion anon1140_Then@2)
)) :named ax_anon1140_Then@1))
(assert (! (=> anon1140_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1140_Then_assertion))
(assert (! (=> anon401@2_assertion (not (and true
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) null)))
   )
))) :named ax_anon401@2_assertion))
(assert (! (=> anon401@3 (and true 
   (and true
      (=> true (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) null)))
   )
(or anon401@3_assertion anon401@4)
)) :named ax_anon401@3))
(assert (! (=> anon1260_Else (and true 
   (and true
      (= $@condition_$376 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_876@17 exhaleMask@_876@15)
      (not $@condition_$376)
   )
$branchMerge_151
)) :named ax_anon1260_Else))
(assert (! (=> anon1260_Then (and true 
   (and true
      $@condition_$376
      (= $@condition_$376 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1260_Then@1 anon1260_Then_assertion)
)) :named ax_anon1260_Then))
(assert (! (=> anon1250_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1250_Then@1_assertion))
(assert (! (=> anon1250_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_853@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_853@17 exhaleMask@_853@16)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_853@16)
      (wf exhaleHeap@_836@0 exhaleMask@_853@16 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
anon775
)) :named ax_anon1250_Then@2))
(assert (! (=> anon1198_Else (and true 
   (and true
      (= $@condition_$374 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)
      (= exhaleMask@_777@17 exhaleMask@_777@15)
      (not $@condition_$374)
   )
$branchMerge_150
)) :named ax_anon1198_Else))
(assert (! (=> anon1198_Then (and true 
   (and true
      $@condition_$374
      (= $@condition_$374 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
(or anon1198_Then@1 anon1198_Then_assertion)
)) :named ax_anon1198_Then))
(assert (! (=> anon651@4_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon651@4_assertion))
(assert (! (=> anon651@5 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon651@5_assertion anon651@6)
)) :named ax_anon651@5))
(assert (! (=> anon1140_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1140_Then@1_assertion))
(assert (! (=> anon1140_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_700@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@5 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) perm$N)))
   )
(or anon1141_Else anon1141_Then)
)) :named ax_anon1140_Then@2))
(assert (! (=> anon401@3_assertion (not (and true
   (and true
      (=> true (CanRead$Seq$Int$$ unfoldingMask@_587@22 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys))
   )
))) :named ax_anon401@3_assertion))
(assert (! (=> anon401@4 (and true 
   (and true
      (=> true (CanRead$Seq$Int$$ unfoldingMask@_587@22 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ unfoldingHeap@_586@1 this AVLTreeNode.left) AVLTreeNode.keys))
   )
(or anon401@4_assertion anon401@5)
)) :named ax_anon401@4))
(assert (! (=> anon1260_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1260_Then@1_assertion anon1260_Then@2)
)) :named ax_anon1260_Then@1))
(assert (! (=> anon1260_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1260_Then_assertion))
(assert (! (=> anon775 (and true 
   (and true
      (= (= true $@bf_3) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)))
      (= Heap@9 exhaleHeap@_852@0)
      (= Mask@149 Mask@56)
      (= Mask@53 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@17 r@300@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@17 r@300@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_853@17 r@300@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@54 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@53 r@300@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@53 r@300@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@53 r@300@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@55 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@54 r@300@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@54 r@300@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@54 r@300@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@56 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@55 r@300@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@55 r@300@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@55 r@300@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= r@20@3 r@300@0)
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodExhaleState exhaleHeap@_852@0 exhaleHeap@_836@0 exhaleMask@_853@17 ZeroMask)
      (IsGoodMask exhaleMask@_853@17)
      (IsGoodMask Mask@53)
      (IsGoodMask Mask@54)
      (IsGoodMask Mask@55)
      (IsGoodMask Mask@56)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_852@0 r@300@0 AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_852@0 r@300@0 AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_852@0 r@300@0 AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_852@0 r@300@0 AVLTreeNode.keys)))
      (not (= r@300@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_852@0 r@300@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_852@0 r@300@0 AVLTreeNode.height) (+ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height) 1)))
      (or (= r@300@0 null) (= (dtype r@300@0) AVLTreeNode@t))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_852@0 r@300@0 AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys))))
      (wf exhaleHeap@_852@0 exhaleMask@_853@17 ZeroMask)
      (wf exhaleHeap@_852@0 Mask@53 ZeroMask)
      (wf exhaleHeap@_852@0 Mask@54 ZeroMask)
      (wf exhaleHeap@_852@0 Mask@55 ZeroMask)
      (wf exhaleHeap@_852@0 Mask@56 ZeroMask)
   )
$branchMerge_69
)) :named ax_anon775))
(assert (! (=> anon1198_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1198_Then@1_assertion anon1198_Then@2)
)) :named ax_anon1198_Then@1))
(assert (! (=> anon1198_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1198_Then_assertion))
(assert (! (=> anon651@5_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon651@5_assertion))
(assert (! (=> anon651@6 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (= (= true $@bf_2) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)))
      (= exhaleMask@_754@17 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Heap@9 exhaleHeap@_753@0)
      (= Mask@149 Mask@86)
      (= Mask@83 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@17 r@277@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@17 r@277@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@17 r@277@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@84 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@83 r@277@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@83 r@277@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@83 r@277@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@85 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@84 r@277@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@84 r@277@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@84 r@277@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@86 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@85 r@277@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@85 r@277@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@85 r@277@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= r@20@3 r@277@0)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_754@16 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodExhaleState exhaleHeap@_753@0 exhaleHeap@_737@0 exhaleMask@_754@17 ZeroMask)
      (IsGoodMask exhaleMask@_754@17)
      (IsGoodMask Mask@83)
      (IsGoodMask Mask@84)
      (IsGoodMask Mask@85)
      (IsGoodMask Mask@86)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_753@0 r@277@0 AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_753@0 r@277@0 AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_753@0 r@277@0 AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_753@0 r@277@0 AVLTreeNode.keys)))
      (not (= r@277@0 null))
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_753@0 r@277@0 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height)) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_753@0 r@277@0 AVLTreeNode.height) (+ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) 1)))
      (or (= r@277@0 null) (= (dtype r@277@0) AVLTreeNode@t))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_753@0 r@277@0 AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key))) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys)))
      (wf exhaleHeap@_737@0 exhaleMask@_754@17 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
      (wf exhaleHeap@_753@0 exhaleMask@_754@17 ZeroMask)
      (wf exhaleHeap@_753@0 Mask@83 ZeroMask)
      (wf exhaleHeap@_753@0 Mask@84 ZeroMask)
      (wf exhaleHeap@_753@0 Mask@85 ZeroMask)
      (wf exhaleHeap@_753@0 Mask@86 ZeroMask)
   )
$branchMerge_69
)) :named ax_anon651@6))
(assert (! (=> anon1141_Else (and true 
   (and true
      (= $@condition_$396 (not (CanRead$Int$ exhaleMask@_700@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_700@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid)
      (not $@condition_$396)
   )
anon559
)) :named ax_anon1141_Else))
(assert (! (=> anon1141_Then (and true 
   (and true
      $@condition_$396
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_699@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid))
      (= $@condition_$396 (not (CanRead$Int$ exhaleMask@_700@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_700@6 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.valid))
   )
anon559
)) :named ax_anon1141_Then))
(assert (! (=> anon401@4_assertion (not (and true
   (and true
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) Seq@Empty$Int$))
   )
))) :named ax_anon401@4_assertion))
(assert (! (=> anon401@5 (and true 
   (and true
      (= assertSecMask@_582@22 assertSecMask@_582@21)
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) AVLTreeNode.keys) Seq@Empty$Int$))
   )
anon402
)) :named ax_anon401@5))
(assert (! (=> anon1260_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1260_Then@1_assertion))
(assert (! (=> anon1260_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_876@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_876@17 exhaleMask@_876@16)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_876@16)
      (wf exhaleHeap@_836@0 exhaleMask@_876@16 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_151
)) :named ax_anon1260_Then@2))
(assert (! (=> anon1198_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1198_Then@1_assertion))
(assert (! (=> anon1198_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_777@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_777@17 exhaleMask@_777@16)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_777@16)
      (wf exhaleHeap@_737@0 exhaleMask@_777@16 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_150
)) :named ax_anon1198_Then@2))
(assert (! (=> anon559 (and true 
   (and true
      (= exhaleMask@_700@7 exhaleMask@_700@6)
      (IsGoodMask exhaleMask@_700@6)
      (wf Heap@8 exhaleMask@_700@6 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
$branchMerge_155
)) :named ax_anon559))
(assert (! (=> anon402 (and true 
   (and true
      (= cond@_629@0 (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left) null))
      (IsGoodExhaleState exhaleHeap@_584@0 Heap@1 Mask@26 assertSecMask@_582@22)
      (IsGoodMask Mask@26)
      (wf exhaleHeap@_584@0 Mask@26 assertSecMask@_582@22)
   )
(or anon402@1 anon402_assertion)
)) :named ax_anon402))
(assert (! (=> $branchMerge_151 (and true 
   (and true
   )
(or anon1261_Else anon1261_Then)
)) :named ax_$branchMerge_151))
(assert (! (=> $branchMerge_150 (and true 
   (and true
   )
(or anon1199_Else anon1199_Then)
)) :named ax_$branchMerge_150))
(assert (! (=> $branchMerge_155 (and true 
   (and true
   )
(or anon1142_Else anon1142_Then)
)) :named ax_$branchMerge_155))
(assert (! (=> anon402@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon402@1_assertion anon402@2)
)) :named ax_anon402@1))
(assert (! (=> anon402_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon402_assertion))
(assert (! (=> anon1261_Else (and true 
   (and true
      (= $@condition_$392 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_876@19 exhaleMask@_876@17)
      (not $@condition_$392)
   )
$branchMerge_157
)) :named ax_anon1261_Else))
(assert (! (=> anon1261_Then (and true 
   (and true
      $@condition_$392
      (= $@condition_$392 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1261_Then@1 anon1261_Then_assertion)
)) :named ax_anon1261_Then))
(assert (! (=> anon1199_Else (and true 
   (and true
      (= $@condition_$390 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)
      (= exhaleMask@_777@19 exhaleMask@_777@17)
      (not $@condition_$390)
   )
$branchMerge_156
)) :named ax_anon1199_Else))
(assert (! (=> anon1199_Then (and true 
   (and true
      $@condition_$390
      (= $@condition_$390 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
(or anon1199_Then@1 anon1199_Then_assertion)
)) :named ax_anon1199_Then))
(assert (! (=> anon1142_Else (and true 
   (and true
      (= $@condition_$397 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)
      (= exhaleMask@_700@9 exhaleMask@_700@7)
      (not $@condition_$397)
   )
$branchMerge_159
)) :named ax_anon1142_Else))
(assert (! (=> anon1142_Then (and true 
   (and true
      $@condition_$397
      (= $@condition_$397 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null))
   )
(or anon1142_Then@1 anon1142_Then_assertion)
)) :named ax_anon1142_Then))
(assert (! (=> anon402@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon402@1_assertion))
(assert (! (=> anon402@2 (and true 
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
(or anon1064_Else anon1064_Then)
)) :named ax_anon402@2))
(assert (! (=> anon1261_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1261_Then@1_assertion anon1261_Then@2)
)) :named ax_anon1261_Then@1))
(assert (! (=> anon1261_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1261_Then_assertion))
(assert (! (=> anon1199_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1199_Then@1_assertion anon1199_Then@2)
)) :named ax_anon1199_Then@1))
(assert (! (=> anon1199_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1199_Then_assertion))
(assert (! (=> anon1142_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1142_Then@1_assertion anon1142_Then@2)
)) :named ax_anon1142_Then@1))
(assert (! (=> anon1142_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1142_Then_assertion))
(assert (! (=> anon1064_Else (and true 
   (and true
      (= $@condition_$430 cond@_629@0)
      (not $@condition_$430)
      (not cond@_629@0)
   )
(or anon1064_Else@1 anon1064_Else_assertion)
)) :named ax_anon1064_Else))
(assert (! (=> anon1064_Then (and true 
   (and true
      $@condition_$430
      (= $@condition_$430 cond@_629@0)
      cond@_629@0
   )
(or anon1064_Then@1 anon1064_Then_assertion)
)) :named ax_anon1064_Then))
(assert (! (=> anon1261_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1261_Then@1_assertion))
(assert (! (=> anon1261_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_876@18 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_876@19 exhaleMask@_876@18)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_876@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_876@18)
      (wf exhaleHeap@_836@0 exhaleMask@_876@18 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
$branchMerge_157
)) :named ax_anon1261_Then@2))
(assert (! (=> anon1199_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1199_Then@1_assertion))
(assert (! (=> anon1199_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_777@18 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_777@19 exhaleMask@_777@18)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_777@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_777@18)
      (wf exhaleHeap@_737@0 exhaleMask@_777@18 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
$branchMerge_156
)) :named ax_anon1199_Then@2))
(assert (! (=> anon1142_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1142_Then@1_assertion))
(assert (! (=> anon1142_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R))
      (= exhaleMask@_700@8 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_700@9 exhaleMask@_700@8)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_700@8)
      (wf Heap@8 exhaleMask@_700@8 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
$branchMerge_159
)) :named ax_anon1142_Then@2))
(assert (! (=> anon1064_Else@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1064_Else@1_assertion anon1064_Else@2)
)) :named ax_anon1064_Else@1))
(assert (! (=> anon1064_Else_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1064_Else_assertion))
(assert (! (=> anon1064_Then@1 (and true 
   (and true
      (=> true (not (= this null)))
   )
(or anon1064_Then@1_assertion anon1064_Then@2)
)) :named ax_anon1064_Then@1))
(assert (! (=> anon1064_Then_assertion (not (and true
   (and true
      (=> true (not (= this null)))
   )
))) :named ax_anon1064_Then_assertion))
(assert (! (=> $branchMerge_157 (and true 
   (and true
   )
(or anon1262_Else anon1262_Then)
)) :named ax_$branchMerge_157))
(assert (! (=> $branchMerge_156 (and true 
   (and true
   )
(or anon1200_Else anon1200_Then)
)) :named ax_$branchMerge_156))
(assert (! (=> $branchMerge_159 (and true 
   (and true
   )
(or anon1143_Else anon1143_Then)
)) :named ax_$branchMerge_159))
(assert (! (=> anon1064_Else@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
))) :named ax_anon1064_Else@1_assertion))
(assert (! (=> anon1064_Else@2 (and true 
   (and true
      (= Heap@9 Heap@1)
      (= Mask@149 Mask@26)
      (= r@20@2 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.left))
      (= r@20@3 r@20@2)
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.left))
   )
$branchMerge_69
)) :named ax_anon1064_Else@2))
(assert (! (=> anon1064_Then@1_assertion (not (and true
   (and true
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
))) :named ax_anon1064_Then@1_assertion))
(assert (! (=> anon1064_Then@2 (and true 
   (and true
      (= Heap@9 Heap@1)
      (= Mask@149 Mask@26)
      (= r@20@1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@1 this AVLTreeNode.right))
      (= r@20@3 r@20@1)
      (=> true (CanRead$ref$ Mask@26 ZeroMask this AVLTreeNode.right))
   )
$branchMerge_69
)) :named ax_anon1064_Then@2))
(assert (! (=> anon1262_Else (and true 
   (and true
      (= $@condition_$400 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)
      (= exhaleMask@_876@21 exhaleMask@_876@19)
      (not $@condition_$400)
   )
anon800
)) :named ax_anon1262_Else))
(assert (! (=> anon1262_Then (and true 
   (and true
      $@condition_$400
      (= $@condition_$400 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null))
   )
(or anon1262_Then@1 anon1262_Then_assertion)
)) :named ax_anon1262_Then))
(assert (! (=> anon1200_Else (and true 
   (and true
      (= $@condition_$398 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)
      (= exhaleMask@_777@21 exhaleMask@_777@19)
      (not $@condition_$398)
   )
anon676
)) :named ax_anon1200_Else))
(assert (! (=> anon1200_Then (and true 
   (and true
      $@condition_$398
      (= $@condition_$398 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null))
   )
(or anon1200_Then@1 anon1200_Then_assertion)
)) :named ax_anon1200_Then))
(assert (! (=> anon1143_Else (and true 
   (and true
      (= $@condition_$411 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)
      (= exhaleMask@_700@11 exhaleMask@_700@9)
      (not $@condition_$411)
   )
$branchMerge_163
)) :named ax_anon1143_Else))
(assert (! (=> anon1143_Then (and true 
   (and true
      $@condition_$411
      (= $@condition_$411 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null))
   )
(or anon1143_Then@1 anon1143_Then_assertion)
)) :named ax_anon1143_Then))
(assert (! (=> anon1262_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1262_Then@1_assertion anon1262_Then@2)
)) :named ax_anon1262_Then@1))
(assert (! (=> anon1262_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1262_Then_assertion))
(assert (! (=> anon1200_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1200_Then@1_assertion anon1200_Then@2)
)) :named ax_anon1200_Then@1))
(assert (! (=> anon1200_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1200_Then_assertion))
(assert (! (=> anon1143_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1143_Then@1_assertion anon1143_Then@2)
)) :named ax_anon1143_Then@1))
(assert (! (=> anon1143_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1143_Then_assertion))
(assert (! (=> anon1262_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1262_Then@1_assertion))
(assert (! (=> anon1262_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_876@20 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_876@21 exhaleMask@_876@20)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_876@20)
      (wf exhaleHeap@_836@0 exhaleMask@_876@20 ZeroMask)
      (wf exhaleHeap@_836@0 Mask@48 ZeroMask)
   )
anon800
)) :named ax_anon1262_Then@2))
(assert (! (=> anon1200_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1200_Then@1_assertion))
(assert (! (=> anon1200_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_777@20 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_777@21 exhaleMask@_777@20)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_777@20)
      (wf exhaleHeap@_737@0 exhaleMask@_777@20 ZeroMask)
      (wf exhaleHeap@_737@0 Mask@78 ZeroMask)
   )
anon676
)) :named ax_anon1200_Then@2))
(assert (! (=> anon1143_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1143_Then@1_assertion))
(assert (! (=> anon1143_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_700@10 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_700@11 exhaleMask@_700@10)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@9 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_700@10)
      (wf Heap@8 exhaleMask@_700@10 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
$branchMerge_163
)) :named ax_anon1143_Then@2))
(assert (! (=> anon800 (and true 
   (and true
      (= (= true $@bf_3) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right)))
      (= (= true $@bf_5) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left)))
      (= (= true $@bf_73) (< (ite$Int$ $@bf_3 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_5 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_875@0 this AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_875@0 this AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (= Heap@9 exhaleHeap@_875@0)
      (= Mask@149 Mask@52)
      (= Mask@49 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@21 this AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@21 this AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_876@21 this AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@50 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@49 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@49 this AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@49 this AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@51 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@50 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@50 this AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@50 this AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@52 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@51 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@51 this AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@51 this AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= r@20@3 this)
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodExhaleState exhaleHeap@_875@0 exhaleHeap@_836@0 exhaleMask@_876@21 ZeroMask)
      (IsGoodMask exhaleMask@_876@21)
      (IsGoodMask Mask@49)
      (IsGoodMask Mask@50)
      (IsGoodMask Mask@51)
      (IsGoodMask Mask@52)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_875@0 this AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_875@0 this AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_875@0 this AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_875@0 this AVLTreeNode.keys)))
      (not (= this null))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_875@0 this AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_836@0 this AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_836@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_836@0 this AVLTreeNode.right) AVLTreeNode.keys))))
      (wf exhaleHeap@_875@0 exhaleMask@_876@21 ZeroMask)
      (wf exhaleHeap@_875@0 Mask@49 ZeroMask)
      (wf exhaleHeap@_875@0 Mask@50 ZeroMask)
      (wf exhaleHeap@_875@0 Mask@51 ZeroMask)
      (wf exhaleHeap@_875@0 Mask@52 ZeroMask)
   )
$branchMerge_69
)) :named ax_anon800))
(assert (! (=> anon676 (and true 
   (and true
      (= (= true $@bf_2) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left)))
      (= (= true $@bf_4) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right)))
      (= (= true $@bf_72) (< (ite$Int$ $@bf_4 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_2 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_776@0 this AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_776@0 this AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (= Heap@9 exhaleHeap@_776@0)
      (= Mask@149 Mask@82)
      (= Mask@79 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@21 this AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@21 this AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_777@21 this AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@80 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@79 this AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@79 this AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@79 this AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@81 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@80 this AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@80 this AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@80 this AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@82 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@81 this AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@81 this AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@81 this AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= r@20@3 this)
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodExhaleState exhaleHeap@_776@0 exhaleHeap@_737@0 exhaleMask@_777@21 ZeroMask)
      (IsGoodMask exhaleMask@_777@21)
      (IsGoodMask Mask@79)
      (IsGoodMask Mask@80)
      (IsGoodMask Mask@81)
      (IsGoodMask Mask@82)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_776@0 this AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_776@0 this AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_776@0 this AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_776@0 this AVLTreeNode.keys)))
      (not (= this null))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_776@0 this AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_737@0 this AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_737@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ exhaleHeap@_737@0 this AVLTreeNode.right) AVLTreeNode.keys))))
      (wf exhaleHeap@_776@0 exhaleMask@_777@21 ZeroMask)
      (wf exhaleHeap@_776@0 Mask@79 ZeroMask)
      (wf exhaleHeap@_776@0 Mask@80 ZeroMask)
      (wf exhaleHeap@_776@0 Mask@81 ZeroMask)
      (wf exhaleHeap@_776@0 Mask@82 ZeroMask)
   )
$branchMerge_69
)) :named ax_anon676))
(assert (! (=> $branchMerge_163 (and true 
   (and true
   )
(or anon1144_Else anon1144_Then)
)) :named ax_$branchMerge_163))
(assert (! (=> anon1144_Else (and true 
   (and true
      (= $@condition_$415 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)
      (= exhaleMask@_700@13 exhaleMask@_700@11)
      (not $@condition_$415)
   )
$branchMerge_165
)) :named ax_anon1144_Else))
(assert (! (=> anon1144_Then (and true 
   (and true
      $@condition_$415
      (= $@condition_$415 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null))
   )
(or anon1144_Then@1 anon1144_Then_assertion)
)) :named ax_anon1144_Then))
(assert (! (=> anon1144_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1144_Then@1_assertion anon1144_Then@2)
)) :named ax_anon1144_Then@1))
(assert (! (=> anon1144_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1144_Then_assertion))
(assert (! (=> anon1144_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1144_Then@1_assertion))
(assert (! (=> anon1144_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_700@12 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_700@13 exhaleMask@_700@12)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@11 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_700@12)
      (wf Heap@8 exhaleMask@_700@12 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
$branchMerge_165
)) :named ax_anon1144_Then@2))
(assert (! (=> $branchMerge_165 (and true 
   (and true
   )
(or anon1145_Else anon1145_Then)
)) :named ax_$branchMerge_165))
(assert (! (=> anon1145_Else (and true 
   (and true
      (= $@condition_$419 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)
      (= exhaleMask@_700@15 exhaleMask@_700@13)
      (not $@condition_$419)
   )
$branchMerge_167
)) :named ax_anon1145_Else))
(assert (! (=> anon1145_Then (and true 
   (and true
      $@condition_$419
      (= $@condition_$419 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null))
   )
(or anon1145_Then@1 anon1145_Then_assertion)
)) :named ax_anon1145_Then))
(assert (! (=> anon1145_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1145_Then@1_assertion anon1145_Then@2)
)) :named ax_anon1145_Then@1))
(assert (! (=> anon1145_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1145_Then_assertion))
(assert (! (=> anon1145_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1145_Then@1_assertion))
(assert (! (=> anon1145_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R))
      (= exhaleMask@_700@14 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@13 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) perm$N)))
   )
(or anon1146_Else anon1146_Then)
)) :named ax_anon1145_Then@2))
(assert (! (=> anon1146_Else (and true 
   (and true
      (= $@condition_$423 (not (CanRead$Int$ exhaleMask@_700@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_700@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid)
      (not $@condition_$423)
   )
anon569
)) :named ax_anon1146_Else))
(assert (! (=> anon1146_Then (and true 
   (and true
      $@condition_$423
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_699@0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid))
      (= $@condition_$423 (not (CanRead$Int$ exhaleMask@_700@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_700@14 ZeroMask (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.valid))
   )
anon569
)) :named ax_anon1146_Then))
(assert (! (=> anon569 (and true 
   (and true
      (= exhaleMask@_700@15 exhaleMask@_700@14)
      (IsGoodMask exhaleMask@_700@14)
      (wf Heap@8 exhaleMask@_700@14 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
$branchMerge_167
)) :named ax_anon569))
(assert (! (=> $branchMerge_167 (and true 
   (and true
   )
(or anon1147_Else anon1147_Then)
)) :named ax_$branchMerge_167))
(assert (! (=> anon1147_Else (and true 
   (and true
      (= $@condition_$424 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)
      (= exhaleMask@_700@17 exhaleMask@_700@15)
      (not $@condition_$424)
   )
$branchMerge_169
)) :named ax_anon1147_Else))
(assert (! (=> anon1147_Then (and true 
   (and true
      $@condition_$424
      (= $@condition_$424 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null))
   )
(or anon1147_Then@1 anon1147_Then_assertion)
)) :named ax_anon1147_Then))
(assert (! (=> anon1147_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1147_Then@1_assertion anon1147_Then@2)
)) :named ax_anon1147_Then@1))
(assert (! (=> anon1147_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1147_Then_assertion))
(assert (! (=> anon1147_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1147_Then@1_assertion))
(assert (! (=> anon1147_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R))
      (= exhaleMask@_700@16 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_700@17 exhaleMask@_700@16)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_700@16)
      (wf Heap@8 exhaleMask@_700@16 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
$branchMerge_169
)) :named ax_anon1147_Then@2))
(assert (! (=> $branchMerge_169 (and true 
   (and true
   )
(or anon1148_Else anon1148_Then)
)) :named ax_$branchMerge_169))
(assert (! (=> anon1148_Else (and true 
   (and true
      (= $@condition_$428 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)
      (= exhaleMask@_700@19 exhaleMask@_700@17)
      (not $@condition_$428)
   )
$branchMerge_170
)) :named ax_anon1148_Else))
(assert (! (=> anon1148_Then (and true 
   (and true
      $@condition_$428
      (= $@condition_$428 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null))
   )
(or anon1148_Then@1 anon1148_Then_assertion)
)) :named ax_anon1148_Then))
(assert (! (=> anon1148_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1148_Then@1_assertion anon1148_Then@2)
)) :named ax_anon1148_Then@1))
(assert (! (=> anon1148_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1148_Then_assertion))
(assert (! (=> anon1148_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1148_Then@1_assertion))
(assert (! (=> anon1148_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R))
      (= exhaleMask@_700@18 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_700@19 exhaleMask@_700@18)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_700@17 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_700@18)
      (wf Heap@8 exhaleMask@_700@18 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
$branchMerge_170
)) :named ax_anon1148_Then@2))
(assert (! (=> $branchMerge_170 (and true 
   (and true
   )
(or anon1149_Else anon1149_Then)
)) :named ax_$branchMerge_170))
(assert (! (=> anon1149_Else (and true 
   (and true
      (= $@condition_$431 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)
      (= exhaleMask@_700@21 exhaleMask@_700@19)
      (not $@condition_$431)
   )
anon576
)) :named ax_anon1149_Else))
(assert (! (=> anon1149_Then (and true 
   (and true
      $@condition_$431
      (= $@condition_$431 (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null)))
      (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null))
   )
(or anon1149_Then@1 anon1149_Then_assertion)
)) :named ax_anon1149_Then))
(assert (! (=> anon1149_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1149_Then@1_assertion anon1149_Then@2)
)) :named ax_anon1149_Then@1))
(assert (! (=> anon1149_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1149_Then_assertion))
(assert (! (=> anon1149_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1149_Then@1_assertion))
(assert (! (=> anon1149_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_700@20 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_700@21 exhaleMask@_700@20)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@19 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_700@20)
      (wf Heap@8 exhaleMask@_700@20 ZeroMask)
      (wf Heap@8 Mask@144 ZeroMask)
   )
anon576
)) :named ax_anon1149_Then@2))
(assert (! (=> anon576 (and true 
   (and true
      (= (= true $@bf_6) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left)))
      (= (= true $@bf_7) (= null (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right)))
      (= (= true $@bf_77) (< (ite$Int$ $@bf_7 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height)) (ite$Int$ $@bf_6 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_699@0 r@20@0 AVLTreeNode.balanceFactor) (- (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height))))
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_699@0 r@20@0 AVLTreeNode.height) (ite$Int$ (> (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height))) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.height)) 1) (+ (ite$Int$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.height)) 1)))
      (= Heap@9 exhaleHeap@_699@0)
      (= Mask@145 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@21 r@20@0 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@21 r@20@0 AVLTreeNode.valid) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_700@21 r@20@0 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (= Mask@146 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@145 r@20@0 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@145 r@20@0 AVLTreeNode.height) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@145 r@20@0 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= Mask@147 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@146 r@20@0 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@146 r@20@0 AVLTreeNode.keys) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ Mask@146 r@20@0 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= Mask@148 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@147 r@20@0 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@147 r@20@0 AVLTreeNode.balanceFactor) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@147 r@20@0 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= Mask@149 Mask@148)
      (= r@20@3 r@20@0)
      (> (Fractions 100) 0)
      (> (Fractions 50) 0)
      (IsGoodExhaleState exhaleHeap@_699@0 Heap@8 exhaleMask@_700@21 ZeroMask)
      (IsGoodMask exhaleMask@_700@21)
      (IsGoodMask Mask@145)
      (IsGoodMask Mask@146)
      (IsGoodMask Mask@147)
      (IsGoodMask Mask@148)
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_699@0 r@20@0 AVLTreeNode.balanceFactor)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_699@0 r@20@0 AVLTreeNode.height)))
      (IsGoodState (heapFragment$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_699@0 r@20@0 AVLTreeNode.valid)))
      (IsGoodState (heapFragment$Seq$Int$$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_699@0 r@20@0 AVLTreeNode.keys)))
      (not (= r@20@0 null))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ exhaleHeap@_699@0 r@20@0 AVLTreeNode.keys) (Seq@Append$Int$ (Seq@Append$Int$ (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.left) AVLTreeNode.keys)) (Seq@Singleton$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@8 r@20@0 AVLTreeNode.key))) (ite$Seq$Int$$ (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) null) Seq@Empty$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@8 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ Heap@8 r@20@0 AVLTreeNode.right) AVLTreeNode.keys))))
      (wf exhaleHeap@_699@0 exhaleMask@_700@21 ZeroMask)
      (wf exhaleHeap@_699@0 Mask@145 ZeroMask)
      (wf exhaleHeap@_699@0 Mask@146 ZeroMask)
      (wf exhaleHeap@_699@0 Mask@147 ZeroMask)
      (wf exhaleHeap@_699@0 Mask@148 ZeroMask)
   )
$branchMerge_69
)) :named ax_anon576))
(assert (! (=> $branchMerge_69 (and true 
   (and true
   )
(or anon1275_Else anon1275_Then)
)) :named ax_$branchMerge_69))
(assert (! (=> anon1275_Else (and true 
   (and true
      (= $@condition_$171 (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
      (not $@condition_$171)
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
   )
$branchMerge_71
)) :named ax_anon1275_Else))
(assert (! (=> anon1275_Then (and true 
   (and true
      $@condition_$171
      (= $@condition_$171 (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))
   )
(or anon1275_Then@1 anon1275_Then_assertion)
)) :named ax_anon1275_Then))
(assert (! (=> anon1275_Then@1 (and true 
   (and true
      (= r@20@3 null)
   )
$branchMerge_71
)) :named ax_anon1275_Then@1))
(assert (! (=> anon1275_Then_assertion (not (and true
   (and true
      (= r@20@3 null)
   )
))) :named ax_anon1275_Then_assertion))
(assert (! (=> $branchMerge_71 (and true 
   (and true
   )
(or anon1276_Else anon1276_Then)
)) :named ax_$branchMerge_71))
(assert (! (=> anon1276_Else (and true 
   (and true
      (= $@condition_$436 (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))))
      (not $@condition_$436)
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))
   )
$branchMerge_171
)) :named ax_anon1276_Else))
(assert (! (=> anon1276_Then (and true 
   (and true
      $@condition_$436
      (= $@condition_$436 (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19))))
      (not (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Singleton$Int$ k@19)))
   )
(or anon1276_Then@1 anon1276_Then_assertion)
)) :named ax_anon1276_Then))
(assert (! (=> anon1276_Then@1 (and true 
   (and true
      (not (= r@20@3 null))
   )
$branchMerge_171
)) :named ax_anon1276_Then@1))
(assert (! (=> anon1276_Then_assertion (not (and true
   (and true
      (not (= r@20@3 null))
   )
))) :named ax_anon1276_Then_assertion))
(assert (! (=> $branchMerge_171 (and true 
   (and true
   )
(or anon1277_Else anon1277_Then)
)) :named ax_$branchMerge_171))
(assert (! (=> anon1277_Else (and true 
   (and true
      (= $@condition_$438 (not (= r@20@3 null)))
      (= r@20@3 null)
      (not $@condition_$438)
   )
$branchMerge_172
)) :named ax_anon1277_Else))
(assert (! (=> anon1277_Then (and true 
   (and true
      $@condition_$438
      (= $@condition_$438 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1277_Then@1 anon1277_Then_assertion)
)) :named ax_anon1277_Then))
(assert (! (=> anon1277_Then@1 (and true 
   (and true
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) k@19))
   )
$branchMerge_172
)) :named ax_anon1277_Then@1))
(assert (! (=> anon1277_Then_assertion (not (and true
   (and true
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) k@19))
   )
))) :named ax_anon1277_Then_assertion))
(assert (! (=> $branchMerge_172 (and true 
   (and true
   )
(or anon1278_Else anon1278_Then)
)) :named ax_$branchMerge_172))
(assert (! (=> anon1278_Else (and true 
   (and true
      (= $@condition_$440 (not (= r@20@3 null)))
      (= r@20@3 null)
      (not $@condition_$440)
   )
$branchMerge_173
)) :named ax_anon1278_Else))
(assert (! (=> anon1278_Then (and true 
   (and true
      $@condition_$440
      (= $@condition_$440 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1278_Then@1 anon1278_Then_assertion)
)) :named ax_anon1278_Then))
(assert (! (=> anon1278_Then@1 (and true 
   (and true
      (forall( (|i#84#315| Int))(=> (and (<= 0 |i#84#315|) (< |i#84#315| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys)))) (or (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) |i#84#315|)) (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) |i#84#315|) k@19))))
   )
$branchMerge_173
)) :named ax_anon1278_Then@1))
(assert (! (=> anon1278_Then_assertion (not (and true
   (and true
      (forall( (|i#84#315| Int))(=> (and (<= 0 |i#84#315|) (< |i#84#315| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys)))) (or (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) |i#84#315|)) (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) |i#84#315|) k@19))))
   )
))) :named ax_anon1278_Then_assertion))
(assert (! (=> $branchMerge_173 (and true 
   (and true
   )
(or anon1279_Else anon1279_Then)
)) :named ax_$branchMerge_173))
(assert (! (=> anon1279_Else (and true 
   (and true
      (= $@condition_$442 (not (= r@20@3 null)))
      (= r@20@3 null)
      (not $@condition_$442)
   )
$branchMerge_174
)) :named ax_anon1279_Else))
(assert (! (=> anon1279_Then (and true 
   (and true
      $@condition_$442
      (= $@condition_$442 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1279_Then@1 anon1279_Then_assertion)
)) :named ax_anon1279_Then))
(assert (! (=> anon1279_Then@1 (and true 
   (and true
      (forall( (|i#85#316| Int))(=> (and (<= 0 |i#85#316|) (< |i#85#316| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys)))) (and (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) |i#85#316|)) (not (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) |i#85#316|) k@19)))))
   )
$branchMerge_174
)) :named ax_anon1279_Then@1))
(assert (! (=> anon1279_Then_assertion (not (and true
   (and true
      (forall( (|i#85#316| Int))(=> (and (<= 0 |i#85#316|) (< |i#85#316| (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys)))) (and (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) |i#85#316|)) (not (= (Seq@Index$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) |i#85#316|) k@19)))))
   )
))) :named ax_anon1279_Then_assertion))
(assert (! (=> $branchMerge_174 (and true 
   (and true
   )
(or anon1280_Else anon1280_Then)
)) :named ax_$branchMerge_174))
(assert (! (=> anon1280_Else (and true 
   (and true
      (= $@condition_$444 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)))
      (not $@condition_$444)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)
   )
$branchMerge_175
)) :named ax_anon1280_Else))
(assert (! (=> anon1280_Then (and true 
   (and true
      $@condition_$444
      (= $@condition_$444 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19))
   )
(or anon1280_Then@1 anon1280_Then_assertion)
)) :named ax_anon1280_Then))
(assert (! (=> anon1280_Then@1 (and true 
   (and true
      (not (= r@20@3 null))
   )
$branchMerge_175
)) :named ax_anon1280_Then@1))
(assert (! (=> anon1280_Then_assertion (not (and true
   (and true
      (not (= r@20@3 null))
   )
))) :named ax_anon1280_Then_assertion))
(assert (! (=> $branchMerge_175 (and true 
   (and true
   )
(or anon1281_Else anon1281_Then)
)) :named ax_$branchMerge_175))
(assert (! (=> anon1281_Else (and true 
   (and true
      (= $@condition_$446 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)))
      (not $@condition_$446)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)
   )
$branchMerge_176
)) :named ax_anon1281_Else))
(assert (! (=> anon1281_Then (and true 
   (and true
      $@condition_$446
      (= $@condition_$446 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19))
   )
(or anon1281_Then@1 anon1281_Then_assertion)
)) :named ax_anon1281_Then))
(assert (! (=> anon1281_Then@1 (and true 
   (and true
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys))
   )
$branchMerge_176
)) :named ax_anon1281_Then@1))
(assert (! (=> anon1281_Then_assertion (not (and true
   (and true
      (Seq@Equal$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys))
   )
))) :named ax_anon1281_Then_assertion))
(assert (! (=> $branchMerge_176 (and true 
   (and true
   )
(or anon1282_Else anon1282_Then)
)) :named ax_$branchMerge_176))
(assert (! (=> anon1282_Else (and true 
   (and true
      (= $@condition_$448 (not (= r@20@3 null)))
      (= r@20@3 null)
      (not $@condition_$448)
   )
$branchMerge_177
)) :named ax_anon1282_Else))
(assert (! (=> anon1282_Then (and true 
   (and true
      $@condition_$448
      (= $@condition_$448 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1283_Else anon1283_Then)
)) :named ax_anon1282_Then))
(assert (! (=> anon1283_Else (and true 
   (and true
      (= $@condition_$450 (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19))
      (not $@condition_$450)
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19))
   )
$branchMerge_177
)) :named ax_anon1283_Else))
(assert (! (=> anon1283_Then (and true 
   (and true
      $@condition_$450
      (= $@condition_$450 (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19))
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)
   )
(or anon1283_Then@1 anon1283_Then_assertion)
)) :named ax_anon1283_Then))
(assert (! (=> anon1283_Then@1 (and true 
   (and true
      (= (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys)) (- (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys)) 1))
   )
$branchMerge_177
)) :named ax_anon1283_Then@1))
(assert (! (=> anon1283_Then_assertion (not (and true
   (and true
      (= (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap@9 r@20@3 AVLTreeNode.keys)) (- (Seq@Length$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys)) 1))
   )
))) :named ax_anon1283_Then_assertion))
(assert (! (=> $branchMerge_177 (and true 
   (and true
   )
(or anon1284_Else anon1284_Then)
)) :named ax_$branchMerge_177))
(assert (! (=> anon1284_Else (and true 
   (and true
      (>= 1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height))
      (not $@condition_$451)
   )
$branchMerge_178
)) :named ax_anon1284_Else))
(assert (! (=> anon1284_Then (and true 
   (and true
      $@condition_$451
      (> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height) 1)
   )
(or anon1284_Then@1 anon1284_Then_assertion)
)) :named ax_anon1284_Then))
(assert (! (=> anon1284_Then@1 (and true 
   (and true
      (not (= r@20@3 null))
   )
$branchMerge_178
)) :named ax_anon1284_Then@1))
(assert (! (=> anon1284_Then_assertion (not (and true
   (and true
      (not (= r@20@3 null))
   )
))) :named ax_anon1284_Then_assertion))
(assert (! (=> $branchMerge_178 (and true 
   (and true
   )
(or anon1285_Else anon1285_Then)
)) :named ax_$branchMerge_178))
(assert (! (=> anon1285_Else (and true 
   (and true
      (= $@condition_$454 (not (= r@20@3 null)))
      (= r@20@3 null)
      (not $@condition_$454)
   )
$branchMerge_179
)) :named ax_anon1285_Else))
(assert (! (=> anon1285_Then (and true 
   (and true
      $@condition_$454
      (= $@condition_$454 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1285_Then@1 anon1285_Then_assertion)
)) :named ax_anon1285_Then))
(assert (! (=> anon1285_Then@1 (and true 
   (and true
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@9 r@20@3 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height)) (= (+ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@9 r@20@3 AVLTreeNode.height) 1) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height)))
   )
$branchMerge_179
)) :named ax_anon1285_Then@1))
(assert (! (=> anon1285_Then_assertion (not (and true
   (and true
      (or (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@9 r@20@3 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height)) (= (+ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@9 r@20@3 AVLTreeNode.height) 1) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height)))
   )
))) :named ax_anon1285_Then_assertion))
(assert (! (=> $branchMerge_179 (and true 
   (and true
   )
(or anon1286_Else anon1286_Then)
)) :named ax_$branchMerge_179))
(assert (! (=> anon1286_Else (and true 
   (and true
      (= $@condition_$456 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)))
      (not $@condition_$456)
      (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)
   )
$branchMerge_180
)) :named ax_anon1286_Else))
(assert (! (=> anon1286_Then (and true 
   (and true
      $@condition_$456
      (= $@condition_$456 (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19)))
      (not (Seq@Contains$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Seq$Int$$ Heap this AVLTreeNode.keys) k@19))
   )
(or anon1286_Then@1 anon1286_Then_assertion)
)) :named ax_anon1286_Then))
(assert (! (=> anon1286_Then@1 (and true 
   (and true
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@9 r@20@3 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height))
   )
$branchMerge_180
)) :named ax_anon1286_Then@1))
(assert (! (=> anon1286_Then_assertion (not (and true
   (and true
      (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@9 r@20@3 AVLTreeNode.height) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap this AVLTreeNode.height))
   )
))) :named ax_anon1286_Then_assertion))
(assert (! (=> $branchMerge_180 (and true 
   (and true
   )
(or anon1287_Else anon1287_Then)
)) :named ax_$branchMerge_180))
(assert (! (=> anon1287_Else (and true 
   (and true
      (= $@condition_$458 (not (= r@20@3 null)))
      (= exhaleMask@_917@1 Mask@149)
      (= r@20@3 null)
      (not $@condition_$458)
   )
$branchMerge_181
)) :named ax_anon1287_Else))
(assert (! (=> anon1287_Then (and true 
   (and true
      $@condition_$458
      (= $@condition_$458 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1287_Then@1 anon1287_Then_assertion)
)) :named ax_anon1287_Then))
(assert (! (=> anon1287_Then@1 (and true 
   (and true
      (> (Fractions 100) 0)
   )
(or anon1287_Then@1_assertion anon1287_Then@2)
)) :named ax_anon1287_Then@1))
(assert (! (=> anon1287_Then_assertion (not (and true
   (and true
      (> (Fractions 100) 0)
   )
))) :named ax_anon1287_Then_assertion))
(assert (! (=> anon1287_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$R))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$N)))
   )
))) :named ax_anon1287_Then@1_assertion))
(assert (! (=> anon1287_Then@2 (and true 
   (and true
      (<= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$R))
      (= exhaleMask@_917@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$R) (Fractions 100)))))
      (=> (= (Fractions 100) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ Mask@149 r@20@3 AVLTreeNode.valid) perm$N)))
   )
(or anon1288_Else anon1288_Then)
)) :named ax_anon1287_Then@2))
(assert (! (=> anon1288_Else (and true 
   (and true
      (= $@condition_$460 (not (CanRead$Int$ exhaleMask@_917@0 ZeroMask r@20@3 AVLTreeNode.valid)))
      (CanRead$Int$ exhaleMask@_917@0 ZeroMask r@20@3 AVLTreeNode.valid)
      (not $@condition_$460)
   )
anon852
)) :named ax_anon1288_Else))
(assert (! (=> anon1288_Then (and true 
   (and true
      $@condition_$460
      (< (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap@9 r@20@3 AVLTreeNode.valid) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_916@0 r@20@3 AVLTreeNode.valid))
      (= $@condition_$460 (not (CanRead$Int$ exhaleMask@_917@0 ZeroMask r@20@3 AVLTreeNode.valid)))
      (not (CanRead$Int$ exhaleMask@_917@0 ZeroMask r@20@3 AVLTreeNode.valid))
   )
anon852
)) :named ax_anon1288_Then))
(assert (! (=> anon852 (and true 
   (and true
      (= exhaleMask@_917@1 exhaleMask@_917@0)
      (IsGoodMask exhaleMask@_917@0)
      (wf Heap@9 exhaleMask@_917@0 ZeroMask)
      (wf Heap@9 Mask@149 ZeroMask)
   )
$branchMerge_181
)) :named ax_anon852))
(assert (! (=> $branchMerge_181 (and true 
   (and true
   )
(or anon1289_Else anon1289_Then)
)) :named ax_$branchMerge_181))
(assert (! (=> anon1289_Else (and true 
   (and true
      (= $@condition_$461 (not (= r@20@3 null)))
      (= exhaleMask@_917@3 exhaleMask@_917@1)
      (= r@20@3 null)
      (not $@condition_$461)
   )
$branchMerge_182
)) :named ax_anon1289_Else))
(assert (! (=> anon1289_Then (and true 
   (and true
      $@condition_$461
      (= $@condition_$461 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1289_Then@1 anon1289_Then_assertion)
)) :named ax_anon1289_Then))
(assert (! (=> anon1289_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1289_Then@1_assertion anon1289_Then@2)
)) :named ax_anon1289_Then@1))
(assert (! (=> anon1289_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1289_Then_assertion))
(assert (! (=> anon1289_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$N)))
   )
))) :named ax_anon1289_Then@1_assertion))
(assert (! (=> anon1289_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$R))
      (= exhaleMask@_917@2 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$R) (Fractions 50)))))
      (= exhaleMask@_917@3 exhaleMask@_917@2)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Seq$Int$$ exhaleMask@_917@1 r@20@3 AVLTreeNode.keys) perm$N)))
      (IsGoodMask exhaleMask@_917@2)
      (wf Heap@9 exhaleMask@_917@2 ZeroMask)
      (wf Heap@9 Mask@149 ZeroMask)
   )
$branchMerge_182
)) :named ax_anon1289_Then@2))
(assert (! (=> $branchMerge_182 (and true 
   (and true
   )
(or anon1290_Else anon1290_Then)
)) :named ax_$branchMerge_182))
(assert (! (=> anon1290_Else (and true 
   (and true
      (= $@condition_$463 (not (= r@20@3 null)))
      (= exhaleMask@_917@5 exhaleMask@_917@3)
      (= r@20@3 null)
      (not $@condition_$463)
   )
$branchMerge_183
)) :named ax_anon1290_Else))
(assert (! (=> anon1290_Then (and true 
   (and true
      $@condition_$463
      (= $@condition_$463 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1290_Then@1 anon1290_Then_assertion)
)) :named ax_anon1290_Then))
(assert (! (=> anon1290_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1290_Then@1_assertion anon1290_Then@2)
)) :named ax_anon1290_Then@1))
(assert (! (=> anon1290_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1290_Then_assertion))
(assert (! (=> anon1290_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$N)))
   )
))) :named ax_anon1290_Then@1_assertion))
(assert (! (=> anon1290_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$R))
      (= exhaleMask@_917@4 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$R) (Fractions 50)))))
      (= exhaleMask@_917@5 exhaleMask@_917@4)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@3 r@20@3 AVLTreeNode.height) perm$N)))
      (IsGoodMask exhaleMask@_917@4)
      (wf Heap@9 exhaleMask@_917@4 ZeroMask)
      (wf Heap@9 Mask@149 ZeroMask)
   )
$branchMerge_183
)) :named ax_anon1290_Then@2))
(assert (! (=> $branchMerge_183 (and true 
   (and true
   )
(or anon1291_Else anon1291_Then)
)) :named ax_$branchMerge_183))
(assert (! (=> anon1291_Else (and true 
   (and true
      (= $@condition_$465 (not (= r@20@3 null)))
      (= exhaleMask@_917@7 exhaleMask@_917@5)
      (= r@20@3 null)
      (not $@condition_$465)
   )
$branchMerge_184
)) :named ax_anon1291_Else))
(assert (! (=> anon1291_Then (and true 
   (and true
      $@condition_$465
      (= $@condition_$465 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
(or anon1291_Then@1 anon1291_Then_assertion)
)) :named ax_anon1291_Then))
(assert (! (=> anon1291_Then@1 (and true 
   (and true
      (> (Fractions 50) 0)
   )
(or anon1291_Then@1_assertion anon1291_Then@2)
)) :named ax_anon1291_Then@1))
(assert (! (=> anon1291_Then_assertion (not (and true
   (and true
      (> (Fractions 50) 0)
   )
))) :named ax_anon1291_Then_assertion))
(assert (! (=> anon1291_Then@1_assertion (not (and true
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$R))
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$N)))
   )
))) :named ax_anon1291_Then@1_assertion))
(assert (! (=> anon1291_Then@2 (and true 
   (and true
      (<= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$R))
      (= exhaleMask@_917@6 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$R (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$R) (Fractions 50)))))
      (= exhaleMask@_917@7 exhaleMask@_917@6)
      (=> (= (Fractions 50) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$R)) (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ exhaleMask@_917@5 r@20@3 AVLTreeNode.balanceFactor) perm$N)))
      (IsGoodMask exhaleMask@_917@6)
      (wf Heap@9 exhaleMask@_917@6 ZeroMask)
      (wf Heap@9 Mask@149 ZeroMask)
   )
$branchMerge_184
)) :named ax_anon1291_Then@2))
(assert (! (=> $branchMerge_184 (and true 
   (and true
   )
(or anon1292_Else anon1292_Then)
)) :named ax_$branchMerge_184))
(assert (! (=> anon1292_Else (and true 
   (and true
      (= $@condition_$467 (not (= r@20@3 null)))
      (= r@20@3 null)
      (not $@condition_$467)
   )
anon861
)) :named ax_anon1292_Else))
(assert (! (=> anon1292_Then (and true 
   (and true
      $@condition_$467
      (= $@condition_$467 (not (= r@20@3 null)))
      (not (= r@20@3 null))
   )
anon861
)) :named ax_anon1292_Then))
(assert (! (=> anon861 (and true 
   (and true
      (IsGoodExhaleState exhaleHeap@_916@0 Heap@9 exhaleMask@_917@7 ZeroMask)
      (IsGoodMask exhaleMask@_917@7)
      (wf exhaleHeap@_916@0 exhaleMask@_917@7 ZeroMask)
   )
(or anon861@1 anon861_assertion)
)) :named ax_anon861))
(assert (! (=> anon861@1 (and true 
   (and true
      (forall( (|lk#_922| ref))(!(or (and (= (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_916@0 |lk#_922| held)) (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap |lk#_922| held))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ exhaleHeap@_916@0 |lk#_922| rdheld) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ Heap |lk#_922| rdheld))) false)  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_916@0 |lk#_922| held)) :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ exhaleHeap@_916@0 |lk#_922| rdheld))))
   )
anon861@1_assertion
)) :named ax_anon861@1))
(assert (! (=> anon861_assertion (not (and true
   (and true
      (forall( (|lk#_922| ref))(!(or (and (= (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_916@0 |lk#_922| held)) (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap |lk#_922| held))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ exhaleHeap@_916@0 |lk#_922| rdheld) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ Heap |lk#_922| rdheld))) false)  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ exhaleHeap@_916@0 |lk#_922| held)) :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ exhaleHeap@_916@0 |lk#_922| rdheld))))
   )
))) :named ax_anon861_assertion))
(assert (! (=> anon861@1_assertion (not (and true
   (and true
      (forall( (|ch| ref))(or (= |ch| null) (<= 0 (MapRead$$@Map@@ref@To@Int@@$ ZeroCredits |ch|))))
   )
))) :named ax_anon861@1_assertion))
(assert (=> false (not (and
   anon0@1_assertion
   anon0@2_assertion
   anon0_assertion
   anon1064_Else@1_assertion
   anon1064_Else_assertion
   anon1064_Then@1_assertion
   anon1064_Then_assertion
   anon1065_Then@1_assertion
   anon1065_Then_assertion
   anon1066_Then@1_assertion
   anon1066_Then_assertion
   anon1067_Then@1_assertion
   anon1067_Then_assertion
   anon1069_Then@1_assertion
   anon1069_Then_assertion
   anon1077_Else@1_assertion
   anon1077_Else@2_assertion
   anon1077_Else@3_assertion
   anon1077_Else@4_assertion
   anon1077_Else_assertion
   anon1077_Then@1_assertion
   anon1077_Then@2_assertion
   anon1077_Then@3_assertion
   anon1077_Then@4_assertion
   anon1077_Then_assertion
   anon1138_Then_assertion
   anon1139_Then_assertion
   anon1140_Then@1_assertion
   anon1140_Then_assertion
   anon1142_Then@1_assertion
   anon1142_Then_assertion
   anon1143_Then@1_assertion
   anon1143_Then_assertion
   anon1144_Then@1_assertion
   anon1144_Then_assertion
   anon1145_Then@1_assertion
   anon1145_Then_assertion
   anon1147_Then@1_assertion
   anon1147_Then_assertion
   anon1148_Then@1_assertion
   anon1148_Then_assertion
   anon1149_Then@1_assertion
   anon1149_Then_assertion
   anon1150_Else@1_assertion
   anon1150_Else_assertion
   anon1150_Then@1_assertion
   anon1150_Then_assertion
   anon1151_Else_assertion
   anon1151_Then@1_assertion
   anon1151_Then@2_assertion
   anon1151_Then@3_assertion
   anon1151_Then@4_assertion
   anon1151_Then_assertion
   anon1169_Then@1_assertion
   anon1169_Then_assertion
   anon1170_Then@1_assertion
   anon1170_Then_assertion
   anon1171_Then@1_assertion
   anon1171_Then_assertion
   anon1173_Then@1_assertion
   anon1173_Then_assertion
   anon1181_Else_assertion
   anon1181_Then_assertion
   anon1182_Then_assertion
   anon1183_Then@1_assertion
   anon1183_Then_assertion
   anon1185_Then@1_assertion
   anon1185_Then_assertion
   anon1186_Then@1_assertion
   anon1186_Then_assertion
   anon1187_Then@1_assertion
   anon1187_Then_assertion
   anon1189_Then_assertion
   anon1190_Then_assertion
   anon1191_Then@1_assertion
   anon1191_Then_assertion
   anon1193_Then@1_assertion
   anon1193_Then_assertion
   anon1194_Then@1_assertion
   anon1194_Then_assertion
   anon1195_Then@1_assertion
   anon1195_Then_assertion
   anon1196_Then@1_assertion
   anon1196_Then_assertion
   anon1198_Then@1_assertion
   anon1198_Then_assertion
   anon1199_Then@1_assertion
   anon1199_Then_assertion
   anon1200_Then@1_assertion
   anon1200_Then_assertion
   anon1201_Then_assertion
   anon1202_Then_assertion
   anon1203_Then@1_assertion
   anon1203_Then_assertion
   anon1205_Then@1_assertion
   anon1205_Then_assertion
   anon1206_Then@1_assertion
   anon1206_Then_assertion
   anon1207_Then@1_assertion
   anon1207_Then_assertion
   anon1208_Then@1_assertion
   anon1208_Then_assertion
   anon1210_Then@1_assertion
   anon1210_Then_assertion
   anon1211_Then@1_assertion
   anon1211_Then_assertion
   anon1212_Then@1_assertion
   anon1212_Then_assertion
   anon1213_Else_assertion
   anon1213_Then@1_assertion
   anon1213_Then@2_assertion
   anon1213_Then@3_assertion
   anon1213_Then@4_assertion
   anon1213_Then_assertion
   anon1231_Then@1_assertion
   anon1231_Then_assertion
   anon1232_Then@1_assertion
   anon1232_Then_assertion
   anon1233_Then@1_assertion
   anon1233_Then_assertion
   anon1235_Then@1_assertion
   anon1235_Then_assertion
   anon1243_Else_assertion
   anon1243_Then@1_assertion
   anon1243_Then@2_assertion
   anon1243_Then_assertion
   anon1244_Then_assertion
   anon1246_Then@1_assertion
   anon1246_Then_assertion
   anon1248_Then@1_assertion
   anon1248_Then_assertion
   anon1249_Then@1_assertion
   anon1249_Then_assertion
   anon1250_Then@1_assertion
   anon1250_Then_assertion
   anon1251_Then_assertion
   anon1252_Then_assertion
   anon1253_Then@1_assertion
   anon1253_Then_assertion
   anon1255_Then@1_assertion
   anon1255_Then_assertion
   anon1256_Then@1_assertion
   anon1256_Then_assertion
   anon1257_Then@1_assertion
   anon1257_Then_assertion
   anon1258_Then@1_assertion
   anon1258_Then_assertion
   anon1260_Then@1_assertion
   anon1260_Then_assertion
   anon1261_Then@1_assertion
   anon1261_Then_assertion
   anon1262_Then@1_assertion
   anon1262_Then_assertion
   anon1263_Then_assertion
   anon1264_Then_assertion
   anon1265_Then@1_assertion
   anon1265_Then_assertion
   anon1267_Then@1_assertion
   anon1267_Then_assertion
   anon1268_Then@1_assertion
   anon1268_Then_assertion
   anon1269_Then@1_assertion
   anon1269_Then_assertion
   anon1270_Then@1_assertion
   anon1270_Then_assertion
   anon1272_Then@1_assertion
   anon1272_Then_assertion
   anon1273_Then@1_assertion
   anon1273_Then_assertion
   anon1274_Then@1_assertion
   anon1274_Then_assertion
   anon1275_Then_assertion
   anon1276_Then_assertion
   anon1277_Then_assertion
   anon1278_Then_assertion
   anon1279_Then_assertion
   anon1280_Then_assertion
   anon1281_Then_assertion
   anon1283_Then_assertion
   anon1284_Then_assertion
   anon1285_Then_assertion
   anon1286_Then_assertion
   anon1287_Then@1_assertion
   anon1287_Then_assertion
   anon1289_Then@1_assertion
   anon1289_Then_assertion
   anon1290_Then@1_assertion
   anon1290_Then_assertion
   anon1291_Then@1_assertion
   anon1291_Then_assertion
   anon241@1_assertion
   anon241@2_assertion
   anon241@3_assertion
   anon241@4_assertion
   anon241_assertion
   anon242@1_assertion
   anon242_assertion
   anon401@1_assertion
   anon401@2_assertion
   anon401@3_assertion
   anon401@4_assertion
   anon401_assertion
   anon402@1_assertion
   anon402_assertion
   anon407@1_assertion
   anon407_assertion
   anon432@1_assertion
   anon432@2_assertion
   anon432@3_assertion
   anon432@4_assertion
   anon432@5_assertion
   anon432_assertion
   anon453@1_assertion
   anon453@2_assertion
   anon453@3_assertion
   anon453@4_assertion
   anon453@5_assertion
   anon453_assertion
   anon472@1_assertion
   anon472@2_assertion
   anon472_assertion
   anon552@1_assertion
   anon552@2_assertion
   anon552_assertion
   anon556@1_assertion
   anon556@10_assertion
   anon556@11_assertion
   anon556@12_assertion
   anon556@13_assertion
   anon556@2_assertion
   anon556@3_assertion
   anon556@4_assertion
   anon556@5_assertion
   anon556@6_assertion
   anon556@7_assertion
   anon556@8_assertion
   anon556@9_assertion
   anon556_assertion
   anon581@1_assertion
   anon581@2_assertion
   anon581@3_assertion
   anon581@4_assertion
   anon581@5_assertion
   anon581_assertion
   anon612@1_assertion
   anon612@2_assertion
   anon612@3_assertion
   anon612_assertion
   anon614@1_assertion
   anon614_assertion
   anon639@1_assertion
   anon639@10_assertion
   anon639@11_assertion
   anon639@12_assertion
   anon639@13_assertion
   anon639@14_assertion
   anon639@2_assertion
   anon639@3_assertion
   anon639@4_assertion
   anon639@5_assertion
   anon639@6_assertion
   anon639@7_assertion
   anon639@8_assertion
   anon639@9_assertion
   anon639_assertion
   anon649@1_assertion
   anon649_assertion
   anon651@1_assertion
   anon651@2_assertion
   anon651@3_assertion
   anon651@4_assertion
   anon651@5_assertion
   anon651_assertion
   anon656@1_assertion
   anon656@10_assertion
   anon656@11_assertion
   anon656@12_assertion
   anon656@13_assertion
   anon656@2_assertion
   anon656@3_assertion
   anon656@4_assertion
   anon656@5_assertion
   anon656@6_assertion
   anon656@7_assertion
   anon656@8_assertion
   anon656@9_assertion
   anon656_assertion
   anon681@1_assertion
   anon681@10_assertion
   anon681@11_assertion
   anon681@12_assertion
   anon681@13_assertion
   anon681@2_assertion
   anon681@3_assertion
   anon681@4_assertion
   anon681@5_assertion
   anon681@6_assertion
   anon681@7_assertion
   anon681@8_assertion
   anon681@9_assertion
   anon681_assertion
   anon705@1_assertion
   anon705@2_assertion
   anon705@3_assertion
   anon705@4_assertion
   anon705@5_assertion
   anon705_assertion
   anon736@1_assertion
   anon736@2_assertion
   anon736@3_assertion
   anon736_assertion
   anon738@1_assertion
   anon738_assertion
   anon763@1_assertion
   anon763@10_assertion
   anon763@11_assertion
   anon763@12_assertion
   anon763@13_assertion
   anon763@14_assertion
   anon763@2_assertion
   anon763@3_assertion
   anon763@4_assertion
   anon763@5_assertion
   anon763@6_assertion
   anon763@7_assertion
   anon763@8_assertion
   anon763@9_assertion
   anon763_assertion
   anon765@1_assertion
   anon765@2_assertion
   anon765@3_assertion
   anon765@4_assertion
   anon765@5_assertion
   anon765_assertion
   anon780@1_assertion
   anon780@10_assertion
   anon780@11_assertion
   anon780@12_assertion
   anon780@13_assertion
   anon780@2_assertion
   anon780@3_assertion
   anon780@4_assertion
   anon780@5_assertion
   anon780@6_assertion
   anon780@7_assertion
   anon780@8_assertion
   anon780@9_assertion
   anon780_assertion
   anon80@1_assertion
   anon80_assertion
   anon805@1_assertion
   anon805@10_assertion
   anon805@11_assertion
   anon805@12_assertion
   anon805@13_assertion
   anon805@2_assertion
   anon805@3_assertion
   anon805@4_assertion
   anon805@5_assertion
   anon805@6_assertion
   anon805@7_assertion
   anon805@8_assertion
   anon805@9_assertion
   anon805_assertion
   anon861@1_assertion
   anon861_assertion
   anon902_Else@1_assertion
   anon902_Else_assertion
   anon902_Then@1_assertion
   anon902_Then@2_assertion
   anon902_Then@3_assertion
   anon902_Then_assertion
   anon903_Else@1_assertion
   anon903_Else@2_assertion
   anon903_Else@3_assertion
   anon903_Else@4_assertion
   anon903_Else@5_assertion
   anon903_Else@6_assertion
   anon903_Else_assertion
   anon903_Then@1_assertion
   anon903_Then_assertion
   anon904_Then@1_assertion
   anon904_Then@2_assertion
   anon904_Then@3_assertion
   anon904_Then@4_assertion
   anon904_Then_assertion
   anon984_Then@1_assertion
   anon984_Then@2_assertion
   anon984_Then@3_assertion
   anon984_Then@4_assertion
   anon984_Then_assertion
))))

;Commands
   (check-sat)
   ;(get-unsat-core)
