type Integer = int;
type Boolean = bool;
type HeapType = <a>[ref,Field (a)]a;
type MaskType = <a>[ref,Field (a)][PermissionComponent]int;
type CreditsType = [ref]int;
type ArgSeq = <T>[int]T;
type string = int;
type Field m0;
type ref;
type PermissionComponent;
type PartialHeapType;
type ModuleName;
type TypeName;
type Mu;
const null : ref;
const unique perm$R : PermissionComponent;
const unique perm$N : PermissionComponent;
const Permission$denominator : int;
const Permission$FullFraction : int;
const Permission$Zero : [PermissionComponent]int;
const Permission$Full : [PermissionComponent]int;
const ZeroMask : MaskType;
const unique joinable : Field (int);
const unique token#t : TypeName;
const unique forkK : Field (int);
const channelK : int;
const monitorK : int;
const predicateK : int;
const emptyPartialHeap : PartialHeapType;
const CurrentModule : ModuleName;
const CanAssumeFunctionDefs : bool;
const unique mu : Field (Mu);
const $LockBottom : Mu;
const unique held : Field (int);
const unique rdheld : Field (bool);
const ZeroCredits : CreditsType;
const unique Node#t : TypeName;
const unique module#default : ModuleName;
const unique Node.next : Field (ref);
const unique Node.prev : Field (ref);
const unique Node.inv : Field (int);
const unique Node.invLeft : Field (int);
const unique Node.invRight : Field (int);
const $old_Heap : HeapType;
const $old_Mask : MaskType;
const $old_SecMask : MaskType;
const $old_Credits : CreditsType;
function Fractions(int) : int;
function IsGoodState(PartialHeapType) : bool;
function combine(PartialHeapType,PartialHeapType) : PartialHeapType;
function heapFragment <T> (T) : PartialHeapType;
function dtype(ref) : TypeName;
function MuBelow(Mu,Mu) : bool;
function Acquire$Heap(int) : HeapType;
function Acquire$Mask(int) : MaskType;
function Acquire$SecMask(int) : MaskType;
function Acquire$Credits(int) : CreditsType;
function LastSeen$Heap(Mu,int) : HeapType;
function LastSeen$Mask(Mu,int) : MaskType;
function LastSeen$SecMask(Mu,int) : MaskType;
function LastSeen$Credits(Mu,int) : CreditsType;
function wf(HeapType,MaskType,MaskType) : bool;
function IsGoodInhaleState(HeapType,HeapType,MaskType,MaskType) : bool;
function IsGoodExhaleState(HeapType,HeapType,MaskType,MaskType) : bool;
function {:expand  false} CanRead <T> (MaskType,MaskType,ref,Field (T)) : bool;
function {:expand  false} CanReadForSure <T> (MaskType,ref,Field (T)) : bool;
function {:expand  false} CanWrite <T> (MaskType,ref,Field (T)) : bool;
function {:expand  true} IsGoodMask(MaskType) : bool;
function DecPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function DecEpsilons <T> (MaskType,ref,Field (T),int) : MaskType;
function IncPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function IncEpsilons <T> (MaskType,ref,Field (T),int) : MaskType;
function Havocing <T,U> (HeapType,ref,Field (T),U) : HeapType;
function Call$Heap(int) : HeapType;
function Call$Mask(int) : MaskType;
function Call$SecMask(int) : MaskType;
function Call$Credits(int) : CreditsType;
function Call$Args(int) : ArgSeq;
function EmptyMask(MaskType) : bool;
function EmptyCredits(CreditsType) : bool;
function NonPredicateField <T> (Field (T)) : bool;
function PredicateField <T> (Field (T)) : bool;
function submask(MaskType,MaskType) : bool;
function ite <T> (bool,T,T) : T;
function #Node.inv#trigger(ref) : bool;
function #Node.invLeft#trigger(ref) : bool;
function #Node.invRight#trigger(ref) : bool;
var Heap : HeapType;
var Mask : MaskType;
var SecMask : MaskType;
var Credits : CreditsType;
var predicateK#_98 : int;
var Mask_$_0 : MaskType;
var Mask_$_1 : MaskType;
var Mask_$_2 : MaskType;
var Mask_$_4 : MaskType;
var SecMask_$_5 : MaskType;
var Mask_$_3 : MaskType;
var predRec#_99_$_0 : ref;
var predVer#_100_$_0 : int;
var unfoldingK#_107 : int;
var unfoldingMask#_103_$_0 : MaskType;
var unfoldingHeap#_102_$_1 : HeapType;
var unfoldingMask#_103_$_1 : MaskType;
var unfoldingMask#_103_$_2 : MaskType;
var unfoldingMask#_103_$_3 : MaskType;
var unfoldingMask#_103_$_5 : MaskType;
var unfoldingSecMask#_104_$_5 : MaskType;
var SecMask_$_0 : MaskType;
var SecMask_$_1 : MaskType;
var SecMask_$_2 : MaskType;
var SecMask_$_4 : MaskType;
var SecMask_$_3 : MaskType;
var unfoldingMask#_103_$_4 : MaskType;
var predRec#_119_$_0 : ref;
var predVer#_120_$_0 : int;
var unfoldingSecMask#_104_$_0 : MaskType;
var unfoldingSecMask#_104_$_1 : MaskType;
var unfoldingSecMask#_104_$_2 : MaskType;
var unfoldingSecMask#_104_$_4 : MaskType;
var unfoldingSecMask#_104_$_3 : MaskType;
var oldVers#_117_$_0 : int;
var unfoldingHeap#_102_$_0 : HeapType;
var newVers#_118_$_0 : int;
var predRec#_99 : ref;
var predFlag#_101 : bool;
var predVer#_100 : int;
var predFlag#_106 : bool;
var unfoldingHeap#_102 : HeapType;
var unfoldingMask#_103 : MaskType;
var unfoldingSecMask#_104 : MaskType;
var unfoldingCredits#_105 : CreditsType;
var oldVers#_117 : int;
var newVers#_118 : int;
var predRec#_119 : ref;
var predFlag#_121 : bool;
var predVer#_120 : int;
procedure Node.invLeft$checkDefinedness (this : ref)
{
	var predicateK#_98 : int;
	var predRec#_99 : ref;
	var predFlag#_101 : bool;
	var predVer#_100 : int;
	var unfoldingK#_107 : int;
	var predFlag#_106 : bool;
	var unfoldingHeap#_102 : HeapType;
	var unfoldingMask#_103 : MaskType;
	var unfoldingSecMask#_104 : MaskType;
	var unfoldingCredits#_105 : CreditsType;
	var oldVers#_117 : int;
	var newVers#_118 : int;
	var predRec#_119 : ref;
	var predFlag#_121 : bool;
	var predVer#_120 : int;
	var Mask_$_0 : MaskType;
	var Mask_$_1 : MaskType;
	var Mask_$_2 : MaskType;
	var Mask_$_3 : MaskType;
	var predRec#_99_$_0 : ref;
	var predVer#_100_$_0 : int;
	var unfoldingMask#_103_$_0 : MaskType;
	var oldVers#_117_$_0 : int;
	var newVers#_118_$_0 : int;
	var unfoldingHeap#_102_$_0 : HeapType;
	var unfoldingHeap#_102_$_1 : HeapType;
	var unfoldingMask#_103_$_1 : MaskType;
	var unfoldingMask#_103_$_2 : MaskType;
	var unfoldingMask#_103_$_3 : MaskType;
	var unfoldingMask#_103_$_4 : MaskType;
	var predRec#_119_$_0 : ref;
	var predVer#_120_$_0 : int;
	var unfoldingSecMask#_104_$_0 : MaskType;
	var unfoldingSecMask#_104_$_1 : MaskType;
	var unfoldingSecMask#_104_$_2 : MaskType;
	var unfoldingSecMask#_104_$_3 : MaskType;
	var unfoldingSecMask#_104_$_4 : MaskType;
	var unfoldingMask#_103_$_5 : MaskType;
	var unfoldingSecMask#_104_$_5 : MaskType;
	var SecMask_$_0 : MaskType;
	var SecMask_$_1 : MaskType;
	var SecMask_$_2 : MaskType;
	var SecMask_$_3 : MaskType;
	var SecMask_$_4 : MaskType;
	var Mask_$_4 : MaskType;
	var SecMask_$_5 : MaskType;
	var $_$_condition : bool;
	var $_$_condition_$0 : bool;
	var $_$_condition_$1 : bool;
	var $_$_condition_$2 : bool;
	var $_$_condition_$3 : bool;
	var $_$_condition_$4 : bool;
	var $_$_condition_$5 : bool;
	var $_$_condition_$6 : bool;
$start:
	assume Permission$denominator > 0;
	assume (Permission$Zero[perm$R] == 0) && (Permission$Zero[perm$N] == 0);
	assume (Permission$Full[perm$R] == Permission$FullFraction) && (Permission$Full[perm$N] == 0);
	assume (forall<T> o : ref, f : Field (T) , pc : PermissionComponent :: ( ZeroMask[o,f][pc] == 0 ));
	assume IsGoodMask(ZeroMask);
	assume NonPredicateField(joinable);
	assume NonPredicateField(forkK);
	assume (forall  n : Integer :: {Fractions(n)} ( Fractions(n) == (n * Permission$denominator) ));
	assume (forall  x : Integer, y : Integer :: ( ((0 <= x) && (x <= y)) ==> (Fractions(x) <= Fractions(y)) ));
	assume Permission$FullFraction == Fractions(100);
	assume (0 < channelK) && ((1000 * channelK) < Fractions(1));
	assume (0 < monitorK) && ((1000 * monitorK) < Fractions(1));
	assume (0 < predicateK) && ((1000 * predicateK) < Fractions(1));
	assume (predicateK == channelK) && (channelK == monitorK);
	assume (forall  a : PartialHeapType, b : PartialHeapType :: {IsGoodState(combine(a,b))} ( IsGoodState(combine(a,b)) <==> (IsGoodState(a) && IsGoodState(b)) ));
	assume IsGoodState(emptyPartialHeap);
	assume NonPredicateField(mu);
	assume (forall  m : Mu, n_$0 : Mu :: {MuBelow(m,n_$0),MuBelow(n_$0,m)} ( !(MuBelow(m,n_$0) && MuBelow(n_$0,m)) ));
	assume (forall  m_$0 : Mu, n_$1 : Mu, o_$0 : Mu :: {MuBelow(m_$0,n_$1),MuBelow(n_$1,o_$0)} ( (MuBelow(m_$0,n_$1) && MuBelow(n_$1,o_$0)) ==> MuBelow(m_$0,o_$0) ));
	assume (forall  m_$1 : Mu, n_$2 : Mu :: ( MuBelow(m_$1,n_$2) ==> (!(n_$2 == $LockBottom)) ));
	assume NonPredicateField(held);
	assume NonPredicateField(rdheld);
	assume (forall  ih : HeapType, h : HeapType, m_$2 : MaskType, sm : MaskType :: {IsGoodInhaleState(ih,h,m_$2,sm)} ( IsGoodInhaleState(ih,h,m_$2,sm) <==> ((((((forall<T> o_$1 : ref, f_$0 : Field (T)  :: {ih[o_$1,f_$0]} ( CanRead(m_$2,sm,o_$1,f_$0) ==> (ih[o_$1,f_$0] == h[o_$1,f_$0]) ))) && ((forall  o_$2 : ref :: {ih[o_$2,held]} ( (0 < ih[o_$2,held]) <==> (0 < h[o_$2,held]) )))) && ((forall  o_$3 : ref :: {ih[o_$3,rdheld]} ( ih[o_$3,rdheld] <==> h[o_$3,rdheld] )))) && ((forall  o_$4 : ref :: {h[o_$4,held]} ( (0 < h[o_$4,held]) ==> (ih[o_$4,mu] == h[o_$4,mu]) )))) && ((forall  o_$5 : ref :: {h[o_$5,rdheld]} ( h[o_$5,rdheld] ==> (ih[o_$5,mu] == h[o_$5,mu]) )))) ));
	assume (forall  eh : HeapType, h_$0 : HeapType, m_$3 : MaskType, sm_$0 : MaskType :: {IsGoodExhaleState(eh,h_$0,m_$3,sm_$0)} ( IsGoodExhaleState(eh,h_$0,m_$3,sm_$0) <==> (((((((((forall<T> o_$6 : ref, f_$1 : Field (T)  :: {eh[o_$6,f_$1]} ( CanRead(m_$3,sm_$0,o_$6,f_$1) ==> (eh[o_$6,f_$1] == h_$0[o_$6,f_$1]) ))) && ((forall  o_$7 : ref :: {eh[o_$7,held]} ( (0 < eh[o_$7,held]) <==> (0 < h_$0[o_$7,held]) )))) && ((forall  o_$8 : ref :: {eh[o_$8,rdheld]} ( eh[o_$8,rdheld] <==> h_$0[o_$8,rdheld] )))) && ((forall  o_$9 : ref :: {h_$0[o_$9,held]} ( (0 < h_$0[o_$9,held]) ==> (eh[o_$9,mu] == h_$0[o_$9,mu]) )))) && ((forall  o_$10 : ref :: {h_$0[o_$10,rdheld]} ( h_$0[o_$10,rdheld] ==> (eh[o_$10,mu] == h_$0[o_$10,mu]) )))) && ((forall  o_$11 : ref :: {h_$0[o_$11,forkK]} {eh[o_$11,forkK]} ( h_$0[o_$11,forkK] == eh[o_$11,forkK] )))) && ((forall  o_$12 : ref :: {h_$0[o_$12,held]} {eh[o_$12,held]} ( h_$0[o_$12,held] == eh[o_$12,held] )))) && ((forall  o_$13 : ref, f_$2 : Field (Integer)  :: {eh[o_$13,f_$2],PredicateField(f_$2)} ( PredicateField(f_$2) ==> (h_$0[o_$13,f_$2] <= eh[o_$13,f_$2]) )))) ));
	assume (forall<T> m_$4 : MaskType, sm_$1 : MaskType, obj : ref, f_$3 : Field (T)  :: {CanRead(m_$4,sm_$1,obj,f_$3)} {:expand  false}( CanRead(m_$4,sm_$1,obj,f_$3) <==> ((((0 < m_$4[obj,f_$3][perm$R]) || (0 < m_$4[obj,f_$3][perm$N])) || (0 < sm_$1[obj,f_$3][perm$R])) || (0 < sm_$1[obj,f_$3][perm$N])) ));
	assume (forall<T> m_$5 : MaskType, obj_$0 : ref, f_$4 : Field (T)  :: {CanReadForSure(m_$5,obj_$0,f_$4)} {:expand  false}( CanReadForSure(m_$5,obj_$0,f_$4) <==> ((0 < m_$5[obj_$0,f_$4][perm$R]) || (0 < m_$5[obj_$0,f_$4][perm$N])) ));
	assume (forall<T> m_$6 : MaskType, obj_$1 : ref, f_$5 : Field (T)  :: {CanWrite(m_$6,obj_$1,f_$5)} {:expand  false}( CanWrite(m_$6,obj_$1,f_$5) <==> ((m_$6[obj_$1,f_$5][perm$R] == Permission$FullFraction) && (m_$6[obj_$1,f_$5][perm$N] == 0)) ));
	assume (forall  m_$7 : MaskType :: {IsGoodMask(m_$7)} {:expand  true}( IsGoodMask(m_$7) <==> ((forall<T> o_$14 : ref, f_$6 : Field (T)  :: ( ((0 <= m_$7[o_$14,f_$6][perm$R]) && (NonPredicateField(f_$6) ==> ((m_$7[o_$14,f_$6][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14,f_$6][perm$N]) ==> (m_$7[o_$14,f_$6][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14,f_$6][perm$N] < 0) ==> (0 < m_$7[o_$14,f_$6][perm$R])) ))) ));
	assume (forall  h_$1 : HeapType, m_$8 : MaskType, sm_$2 : MaskType, o_$15 : ref, q : ref :: {wf(h_$1,m_$8,sm_$2),h_$1[o_$15,mu],h_$1[q,mu]} ( (((wf(h_$1,m_$8,sm_$2) && (!(o_$15 == q))) && ((0 < h_$1[o_$15,held]) || h_$1[o_$15,rdheld])) && ((0 < h_$1[q,held]) || h_$1[q,rdheld])) ==> (!(h_$1[o_$15,mu] == h_$1[q,mu])) ));
	assume (forall<T,U> m_$9 : MaskType, o_$16 : ref, f_$7 : Field (T) , howMuch : Integer, q_$0 : ref, g : Field (U)  :: {DecPerm(m_$9,o_$16,f_$7,howMuch)[q_$0,g][perm$R]} ( DecPerm(m_$9,o_$16,f_$7,howMuch)[q_$0,g][perm$R] == ite((o_$16 == q_$0) && (f_$7 == g),m_$9[q_$0,g][perm$R] - howMuch,m_$9[q_$0,g][perm$R]) ));
	assume (forall<T,U> m_$10 : MaskType, o_$17 : ref, f_$8 : Field (T) , howMuch_$0 : Integer, q_$1 : ref, g_$0 : Field (U)  :: {DecPerm(m_$10,o_$17,f_$8,howMuch_$0)[q_$1,g_$0][perm$N]} ( DecEpsilons(m_$10,o_$17,f_$8,howMuch_$0)[q_$1,g_$0][perm$N] == ite((o_$17 == q_$1) && (f_$8 == g_$0),m_$10[q_$1,g_$0][perm$N] - howMuch_$0,m_$10[q_$1,g_$0][perm$N]) ));
	assume (forall<T,U> m_$11 : MaskType, o_$18 : ref, f_$9 : Field (T) , howMuch_$1 : Integer, q_$2 : ref, g_$1 : Field (U)  :: {IncPerm(m_$11,o_$18,f_$9,howMuch_$1)[q_$2,g_$1][perm$R]} ( IncPerm(m_$11,o_$18,f_$9,howMuch_$1)[q_$2,g_$1][perm$R] == ite((o_$18 == q_$2) && (f_$9 == g_$1),m_$11[q_$2,g_$1][perm$R] + howMuch_$1,m_$11[q_$2,g_$1][perm$R]) ));
	assume (forall<T,U> m_$12 : MaskType, o_$19 : ref, f_$10 : Field (T) , howMuch_$2 : Integer, q_$3 : ref, g_$2 : Field (U)  :: {IncPerm(m_$12,o_$19,f_$10,howMuch_$2)[q_$3,g_$2][perm$N]} ( IncEpsilons(m_$12,o_$19,f_$10,howMuch_$2)[q_$3,g_$2][perm$N] == ite((o_$19 == q_$3) && (f_$10 == g_$2),m_$12[q_$3,g_$2][perm$N] + howMuch_$2,m_$12[q_$3,g_$2][perm$N]) ));
	assume (forall<T,U> h_$2 : HeapType, o_$20 : ref, f_$11 : Field (T) , newValue : U, q_$4 : ref, g_$3 : Field (U)  :: {Havocing(h_$2,o_$20,f_$11,newValue)[q_$4,g_$3]} ( Havocing(h_$2,o_$20,f_$11,newValue)[q_$4,g_$3] == ite((o_$20 == q_$4) && (f_$11 == g_$3),newValue,h_$2[q_$4,g_$3]) ));
	assume (forall  m_$13 : MaskType :: {EmptyMask(m_$13)} ( EmptyMask(m_$13) <==> ((forall<T> o_$21 : ref, f_$12 : Field (T)  :: ( NonPredicateField(f_$12) ==> ((m_$13[o_$21,f_$12][perm$R] <= 0) && (m_$13[o_$21,f_$12][perm$N] <= 0)) ))) ));
	assume (forall  o_$22 : ref :: ( ZeroCredits[o_$22] == 0 ));
	assume (forall  c : CreditsType :: {EmptyCredits(c)} ( EmptyCredits(c) <==> ((forall  o_$23 : ref :: ( (!(o_$23 == null)) ==> (c[o_$23] == 0) ))) ));
	assume (forall<T> f_$13 : Field (T)  :: ( NonPredicateField(f_$13) ==> (!PredicateField(f_$13)) ));
	assume (forall<T> f_$14 : Field (T)  :: ( PredicateField(f_$14) ==> (!NonPredicateField(f_$14)) ));
	assume (forall  m1 : MaskType, m2 : MaskType :: {submask(m1,m2)} ( submask(m1,m2) <==> ((forall<T> o_$24 : ref, f_$15 : Field (T)  :: ( (m1[o_$24,f_$15][perm$R] < m2[o_$24,f_$15][perm$R]) || ((m1[o_$24,f_$15][perm$R] == m2[o_$24,f_$15][perm$R]) && (m1[o_$24,f_$15][perm$N] <= m2[o_$24,f_$15][perm$N])) ))) ));
	assume (forall<T> con : Boolean, a_$0 : T, b_$0 : T :: {ite(con,a_$0,b_$0)} ( con ==> (ite(con,a_$0,b_$0) == a_$0) ));
	assume (forall<T> con_$0 : Boolean, a_$1 : T, b_$1 : T :: {ite(con_$0,a_$1,b_$1)} ( (!con_$0) ==> (ite(con_$0,a_$1,b_$1) == b_$1) ));
	assume (forall  x_$0 : Integer, y_$0 : Integer :: {x_$0 mod y_$0} {x_$0 div y_$0} ( (x_$0 mod y_$0) == (x_$0 - ((x_$0 div y_$0) * y_$0)) ));
	assume (forall  x_$1 : Integer, y_$1 : Integer :: {x_$1 mod y_$1} ( (0 < y_$1) ==> ((0 <= (x_$1 mod y_$1)) && ((x_$1 mod y_$1) < y_$1)) ));
	assume (forall  x_$2 : Integer, y_$2 : Integer :: {x_$2 mod y_$2} ( (y_$2 < 0) ==> ((y_$2 < (x_$2 mod y_$2)) && ((x_$2 mod y_$2) <= 0)) ));
	assume (forall  a_$2 : Integer, b_$2 : Integer, d : Integer :: {a_$2 mod d,b_$2 mod d} ( (((2 <= d) && ((a_$2 mod d) == (b_$2 mod d))) && (a_$2 < b_$2)) ==> ((a_$2 + d) <= b_$2) ));
	assume NonPredicateField(Node.next);
	assume NonPredicateField(Node.prev);
	assume PredicateField(Node.inv);
	assume PredicateField(Node.invLeft);
	assume PredicateField(Node.invRight);
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume IsGoodMask(Mask);
	assume IsGoodMask(SecMask);
	assume (this == null) || (dtype(this) == Node#t);
	assume !(this == null);
	assume wf(Heap,Mask,SecMask);
	goto anon0;
anon0:
	assume (0 < predicateK#_98) && ((1000 * predicateK#_98) < Fractions(1));
	assume !(this == null);
	assume wf(Heap,ZeroMask,ZeroMask);
	assume (Heap[this,Node.prev] == null) || (dtype(Heap[this,Node.prev]) == Node#t);
	assume 1 > 0;
	assume Mask_$_0 == ZeroMask[this,Node.prev := ZeroMask[this,Node.prev][perm$N := ZeroMask[this,Node.prev][perm$N] + 1]];
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume IsGoodMask(Mask_$_0);
	assume IsGoodState(heapFragment(Heap[this,Node.prev]));
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume !(this == null);
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume (Heap[this,Node.next] == null) || (dtype(Heap[this,Node.next]) == Node#t);
	assume 1 > 0;
	assume Mask_$_1 == Mask_$_0[this,Node.next := Mask_$_0[this,Node.next][perm$N := Mask_$_0[this,Node.next][perm$N] + 1]];
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume IsGoodMask(Mask_$_1);
	assume IsGoodState(heapFragment(Heap[this,Node.next]));
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume !(this == null);
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume true;
	assume 1 > 0;
	assume Mask_$_2 == Mask_$_1[this,mu := Mask_$_1[this,mu][perm$N := Mask_$_1[this,mu][perm$N] + 1]];
	assume wf(Heap,Mask_$_2,ZeroMask);
	assume IsGoodMask(Mask_$_2);
	assume IsGoodState(heapFragment(Heap[this,mu]));
	assume wf(Heap,Mask_$_2,ZeroMask);
	assume wf(Heap,Mask_$_2,ZeroMask);
	assert { :msg "  23.10: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  23.10: Location might not be readable." } true ==> CanRead(Mask_$_2,ZeroMask,this,Node.prev);
	if ($_$_condition) { goto anon53_Then; } else { goto anon53_Else; }
anon53_Then:
	assume !(Heap[this,Node.prev] == null);
	assert { :msg "  23.25: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  23.25: Location might not be readable." } true ==> CanRead(Mask_$_2,ZeroMask,this,Node.prev);
	assert { :msg "  23.25: Receiver might be null." } !(Heap[this,Node.prev] == null);
	assert { :msg "  23.25: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  23.25: Location might not be readable." } true ==> CanRead(Mask_$_2,ZeroMask,this,Node.prev);
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_2,ZeroMask);
	assume Fractions(100) > 0;
	assume Mask_$_3 == Mask_$_2[Heap[this,Node.prev],Node.invLeft := Mask_$_2[Heap[this,Node.prev],Node.invLeft][perm$R := Mask_$_2[Heap[this,Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],Node.invLeft]));
	assume wf(Heap,Mask_$_3,ZeroMask);
	assume wf(Heap,Mask_$_3,ZeroMask);
	assume predRec#_99_$_0 == Heap[this,Node.prev];
	assume #Node.invLeft#trigger(Heap[this,Node.prev]);
	assume predVer#_100_$_0 == Heap[Heap[this,Node.prev],Node.invLeft];
	assume (0 < unfoldingK#_107) && ((1000 * unfoldingK#_107) < Fractions(1));
	assert { :msg "  23.51: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  23.51: Location might not be readable." } true ==> CanRead(Mask_$_3,ZeroMask,this,Node.prev);
	assert { :msg "  23.51: Receiver might be null." } true ==> (!(Heap[this,Node.prev] == null));
	assume wf(Heap,Mask_$_3,ZeroMask);
	assert { :msg "  23.41: Unfolding might fail. The permission at 23.51 might not be positive." } Fractions(100) > 0;
	assert { :msg "  23.41: Unfolding might fail. Insufficient fraction at 23.51 for Node.invLeft." } (Fractions(100) <= Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R]) && ((Fractions(100) == Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R]) ==> (0 <= Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$N]));
	assume unfoldingMask#_103_$_0 == Mask_$_3[Heap[this,Node.prev],Node.invLeft := Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R := Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R] - Fractions(100)]];
	if ($_$_condition_$0) { goto anon54_Then; } else { goto anon54_Else; }
anon53_Else:
	assume Heap[this,Node.prev] == null;
	assume Mask_$_4 == Mask_$_2;
	assume SecMask_$_5 == ZeroMask;
	goto anon52;
anon54_Then:
	assume false;
	goto $exit;
anon54_Else:
	assume !false;
	if ($_$_condition_$1) { goto anon61_Then; } else { goto anon61_Else; }
anon52:
	assume IsGoodMask(Mask_$_4);
	assume wf(Heap,Mask_$_4,SecMask_$_5);
	assert { :msg "  21.5: SMOKE-TEST-52. (Predicate Node.invLeft is equivalent to false.)" } !(1 == 1);
	goto $exit;
anon61_Then:
	assume !CanRead(unfoldingMask#_103_$_0,ZeroMask,Heap[this,Node.prev],Node.invLeft);
	assume oldVers#_117_$_0 == Heap[Heap[this,Node.prev],Node.invLeft];
	assume unfoldingHeap#_102_$_0 == Heap[Heap[this,Node.prev],Node.invLeft := newVers#_118_$_0];
	assume oldVers#_117_$_0 < unfoldingHeap#_102_$_0[unfoldingHeap#_102_$_0[this,Node.prev],Node.invLeft];
	assume unfoldingHeap#_102_$_1 == unfoldingHeap#_102_$_0;
	goto anon17;
anon61_Else:
	assume CanRead(unfoldingMask#_103_$_0,ZeroMask,Heap[this,Node.prev],Node.invLeft);
	assume unfoldingHeap#_102_$_1 == Heap;
	goto anon17;
anon17:
	assume IsGoodMask(unfoldingMask#_103_$_0);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_0,ZeroMask);
	assume IsGoodMask(unfoldingMask#_103_$_0);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_0,ZeroMask);
	assume !(unfoldingHeap#_102_$_1[this,Node.prev] == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_0,ZeroMask);
	assume (unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev] == null) || (dtype(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev]) == Node#t);
	assume 1 > 0;
	assume unfoldingMask#_103_$_1 == unfoldingMask#_103_$_0[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev := unfoldingMask#_103_$_0[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev][perm$N := unfoldingMask#_103_$_0[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev][perm$N] + 1]];
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_1,ZeroMask);
	assume IsGoodMask(unfoldingMask#_103_$_1);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_1,ZeroMask);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_1,ZeroMask);
	assume !(unfoldingHeap#_102_$_1[this,Node.prev] == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_1,ZeroMask);
	assume (unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.next] == null) || (dtype(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.next]) == Node#t);
	assume 1 > 0;
	assume unfoldingMask#_103_$_2 == unfoldingMask#_103_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.next := unfoldingMask#_103_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.next][perm$N := unfoldingMask#_103_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.next][perm$N] + 1]];
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_2,ZeroMask);
	assume IsGoodMask(unfoldingMask#_103_$_2);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.next]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_2,ZeroMask);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_2,ZeroMask);
	assume !(unfoldingHeap#_102_$_1[this,Node.prev] == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_2,ZeroMask);
	assume true;
	assume 1 > 0;
	assume unfoldingMask#_103_$_3 == unfoldingMask#_103_$_2[unfoldingHeap#_102_$_1[this,Node.prev],mu := unfoldingMask#_103_$_2[unfoldingHeap#_102_$_1[this,Node.prev],mu][perm$N := unfoldingMask#_103_$_2[unfoldingHeap#_102_$_1[this,Node.prev],mu][perm$N] + 1]];
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_3,ZeroMask);
	assume IsGoodMask(unfoldingMask#_103_$_3);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],mu]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_3,ZeroMask);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_3,ZeroMask);
	if ($_$_condition_$2) { goto anon62_Then; } else { goto anon62_Else; }
anon62_Then:
	assume !(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev] == null);
	assume !(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev] == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_3,ZeroMask);
	assume Fractions(100) > 0;
	assume unfoldingMask#_103_$_4 == unfoldingMask#_103_$_3[unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev],Node.invLeft := unfoldingMask#_103_$_3[unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev],Node.invLeft][perm$R := unfoldingMask#_103_$_3[unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(unfoldingMask#_103_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev],Node.invLeft]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,ZeroMask);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,ZeroMask);
	assume predRec#_119_$_0 == Heap[Heap[this,Node.prev],Node.prev];
	assume #Node.invLeft#trigger(Heap[Heap[this,Node.prev],Node.prev]);
	assume predVer#_120_$_0 == unfoldingHeap#_102_$_1[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft];
	if ($_$_condition_$3) { goto anon63_Then; } else { goto anon63_Else; }
anon62_Else:
	assume unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev] == null;
	assume unfoldingMask#_103_$_5 == unfoldingMask#_103_$_3;
	assume unfoldingSecMask#_104_$_5 == ZeroMask;
	goto anon35;
anon63_Then:
	assume false;
	goto $exit;
anon63_Else:
	assume !false;
	assume !(predRec#_119_$_0 == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,ZeroMask);
	assume (unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev] == null) || (dtype(unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev]) == Node#t);
	assume 1 > 0;
	assume unfoldingSecMask#_104_$_0 == ZeroMask[predRec#_119_$_0,Node.prev := ZeroMask[predRec#_119_$_0,Node.prev][perm$N := ZeroMask[predRec#_119_$_0,Node.prev][perm$N] + 1]];
	assume wf(unfoldingHeap#_102_$_1,unfoldingSecMask#_104_$_0,unfoldingSecMask#_104_$_0);
	assume IsGoodMask(unfoldingMask#_103_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_0);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_0);
	assume !(predRec#_119_$_0 == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_0);
	assume (unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.next] == null) || (dtype(unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.next]) == Node#t);
	assume 1 > 0;
	assume unfoldingSecMask#_104_$_1 == unfoldingSecMask#_104_$_0[predRec#_119_$_0,Node.next := unfoldingSecMask#_104_$_0[predRec#_119_$_0,Node.next][perm$N := unfoldingSecMask#_104_$_0[predRec#_119_$_0,Node.next][perm$N] + 1]];
	assume wf(unfoldingHeap#_102_$_1,unfoldingSecMask#_104_$_1,unfoldingSecMask#_104_$_1);
	assume IsGoodMask(unfoldingMask#_103_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.next]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_1);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_1);
	assume !(predRec#_119_$_0 == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_1);
	assume true;
	assume 1 > 0;
	assume unfoldingSecMask#_104_$_2 == unfoldingSecMask#_104_$_1[predRec#_119_$_0,mu := unfoldingSecMask#_104_$_1[predRec#_119_$_0,mu][perm$N := unfoldingSecMask#_104_$_1[predRec#_119_$_0,mu][perm$N] + 1]];
	assume wf(unfoldingHeap#_102_$_1,unfoldingSecMask#_104_$_2,unfoldingSecMask#_104_$_2);
	assume IsGoodMask(unfoldingMask#_103_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[predRec#_119_$_0,mu]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_2);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_2);
	if ($_$_condition_$4) { goto anon70_Then; } else { goto anon70_Else; }
anon35:
	assume IsGoodMask(unfoldingMask#_103_$_5);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_5,unfoldingSecMask#_104_$_5);
	if ($_$_condition_$5) { goto anon71_Then; } else { goto anon71_Else; }
anon70_Then:
	assume !(unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev] == null);
	assume !(unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev] == null);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_2);
	assume Fractions(100) > 0;
	assume unfoldingSecMask#_104_$_3 == unfoldingSecMask#_104_$_2[unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev],Node.invLeft := unfoldingSecMask#_104_$_2[unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev],Node.invLeft][perm$R := unfoldingSecMask#_104_$_2[unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(unfoldingMask#_103_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev],Node.invLeft]));
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_3);
	assume wf(unfoldingHeap#_102_$_1,unfoldingMask#_103_$_4,unfoldingSecMask#_104_$_3);
	assume unfoldingSecMask#_104_$_4 == unfoldingSecMask#_104_$_3;
	goto anon34;
anon70_Else:
	assume unfoldingHeap#_102_$_1[predRec#_119_$_0,Node.prev] == null;
	assume unfoldingSecMask#_104_$_4 == unfoldingSecMask#_104_$_2;
	goto anon34;
anon34:
	assume MuBelow(unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],Node.prev],mu],unfoldingHeap#_102_$_1[unfoldingHeap#_102_$_1[this,Node.prev],mu]);
	assume unfoldingMask#_103_$_5 == unfoldingMask#_103_$_4;
	assume unfoldingSecMask#_104_$_5 == unfoldingSecMask#_104_$_4;
	goto anon35;
anon71_Then:
	assume false;
	goto $exit;
anon71_Else:
	assume !false;
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_3,ZeroMask);
	assume (Heap[Heap[this,Node.prev],Node.prev] == null) || (dtype(Heap[Heap[this,Node.prev],Node.prev]) == Node#t);
	assume 1 > 0;
	assume SecMask_$_0 == ZeroMask[Heap[this,Node.prev],Node.prev := ZeroMask[Heap[this,Node.prev],Node.prev][perm$N := ZeroMask[Heap[this,Node.prev],Node.prev][perm$N] + 1]];
	assume wf(Heap,SecMask_$_0,SecMask_$_0);
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],Node.prev]));
	assume wf(Heap,Mask_$_3,SecMask_$_0);
	assume wf(Heap,Mask_$_3,SecMask_$_0);
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_3,SecMask_$_0);
	assume (Heap[Heap[this,Node.prev],Node.next] == null) || (dtype(Heap[Heap[this,Node.prev],Node.next]) == Node#t);
	assume 1 > 0;
	assume SecMask_$_1 == SecMask_$_0[Heap[this,Node.prev],Node.next := SecMask_$_0[Heap[this,Node.prev],Node.next][perm$N := SecMask_$_0[Heap[this,Node.prev],Node.next][perm$N] + 1]];
	assume wf(Heap,SecMask_$_1,SecMask_$_1);
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],Node.next]));
	assume wf(Heap,Mask_$_3,SecMask_$_1);
	assume wf(Heap,Mask_$_3,SecMask_$_1);
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_3,SecMask_$_1);
	assume true;
	assume 1 > 0;
	assume SecMask_$_2 == SecMask_$_1[Heap[this,Node.prev],mu := SecMask_$_1[Heap[this,Node.prev],mu][perm$N := SecMask_$_1[Heap[this,Node.prev],mu][perm$N] + 1]];
	assume wf(Heap,SecMask_$_2,SecMask_$_2);
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],mu]));
	assume wf(Heap,Mask_$_3,SecMask_$_2);
	assume wf(Heap,Mask_$_3,SecMask_$_2);
	if ($_$_condition_$6) { goto anon78_Then; } else { goto anon78_Else; }
anon78_Then:
	assume !(Heap[Heap[this,Node.prev],Node.prev] == null);
	assume !(Heap[Heap[this,Node.prev],Node.prev] == null);
	assume wf(Heap,Mask_$_3,SecMask_$_2);
	assume Fractions(100) > 0;
	assume SecMask_$_3 == SecMask_$_2[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft := SecMask_$_2[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft][perm$R := SecMask_$_2[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft]));
	assume wf(Heap,Mask_$_3,SecMask_$_3);
	assume wf(Heap,Mask_$_3,SecMask_$_3);
	assume SecMask_$_4 == SecMask_$_3;
	goto anon51;
anon78_Else:
	assume Heap[Heap[this,Node.prev],Node.prev] == null;
	assume SecMask_$_4 == SecMask_$_2;
	goto anon51;
anon51:
	assert { :msg "  23.67: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  23.67: Location might not be readable." } true ==> CanRead(unfoldingMask#_103_$_5,unfoldingSecMask#_104_$_5,this,Node.prev);
	assert { :msg "  23.67: Receiver might be null." } true ==> (!(unfoldingHeap#_102_$_1[this,Node.prev] == null));
	assert { :msg "  23.67: Location might not be readable." } true ==> CanRead(unfoldingMask#_103_$_5,unfoldingSecMask#_104_$_5,unfoldingHeap#_102_$_1[this,Node.prev],mu);
	assert { :msg "  23.78: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  23.78: Location might not be readable." } true ==> CanRead(unfoldingMask#_103_$_5,unfoldingSecMask#_104_$_5,this,mu);
	assume MuBelow(Heap[Heap[this,Node.prev],mu],Heap[this,mu]);
	assume Mask_$_4 == Mask_$_3;
	assume SecMask_$_5 == SecMask_$_4;
	goto anon52;
}
