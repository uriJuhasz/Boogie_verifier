type Integer = int;
type Boolean = bool;
type HeapType = <a>[ref,Field (a)]a;
type MaskType = <a>[ref,Field (a)][PermissionComponent]int;
type CreditsType = [ref]int;
type ArgSeq = <T>[int]T;
type Field m0;
type ref;
type PermissionComponent;
type PartialHeapType;
type ModuleName;
type TypeName;
type Mu;
const null : ref;
const unique perm$R : PermissionComponent;
const unique perm$N : PermissionComponent;
const Permission$denominator : int;
const Permission$FullFraction : int;
const Permission$Zero : [PermissionComponent]int;
const Permission$Full : [PermissionComponent]int;
const ZeroMask : MaskType;
const unique joinable : Field (int);
const unique forkK : Field (int);
const channelK : int;
const monitorK : int;
const predicateK : int;
const emptyPartialHeap : PartialHeapType;
const unique mu : Field (Mu);
const $LockBottom : Mu;
const unique held : Field (int);
const unique rdheld : Field (bool);
const ZeroCredits : CreditsType;
const unique Node#t : TypeName;
const unique Node.next : Field (ref);
const unique Node.prev : Field (ref);
const unique Node.inv : Field (int);
const unique Node.invLeft : Field (int);
const unique Node.invRight : Field (int);
function Fractions(int) : int;
function IsGoodState(PartialHeapType) : bool;
function heapFragment <T> (T) : PartialHeapType;
function dtype(ref) : TypeName;
function MuBelow(Mu,Mu) : bool;
function wf(HeapType,MaskType,MaskType) : bool;
function {:expand  false} CanRead <T> (MaskType,MaskType,ref,Field (T)) : bool;
function {:expand  true} IsGoodMask(MaskType) : bool;
function DecPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function IncPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function NonPredicateField <T> (Field (T)) : bool;
function PredicateField <T> (Field (T)) : bool;
function ite <T> (bool,T,T) : T;
function #Node.invLeft#trigger(ref) : bool;
function #Node.invRight#trigger(ref) : bool;
var Heap : HeapType;
var Mask : MaskType;
var SecMask : MaskType;
var predicateK#_27 : int;
var Mask_$_0 : MaskType;
var Mask_$_1 : MaskType;
var Mask_$_2 : MaskType;
var Mask_$_4 : MaskType;
var SecMask_$_5 : MaskType;
var SecMask_$_11 : MaskType;
var Mask_$_6 : MaskType;
var Mask_$_5 : MaskType;
var predRec#_63_$_0 : ref;
var predVer#_64_$_0 : int;
var unfoldingK#_71 : int;
var unfoldingMask#_67_$_0 : MaskType;
var unfoldingHeap#_66_$_1 : HeapType;
var unfoldingMask#_67_$_1 : MaskType;
var unfoldingMask#_67_$_2 : MaskType;
var unfoldingMask#_67_$_3 : MaskType;
var unfoldingMask#_67_$_5 : MaskType;
var unfoldingSecMask#_68_$_5 : MaskType;
var SecMask_$_6 : MaskType;
var SecMask_$_7 : MaskType;
var SecMask_$_8 : MaskType;
var SecMask_$_10 : MaskType;
var SecMask_$_9 : MaskType;
var unfoldingMask#_67_$_4 : MaskType;
var predRec#_83_$_0 : ref;
var predVer#_84_$_0 : int;
var unfoldingSecMask#_68_$_0 : MaskType;
var unfoldingSecMask#_68_$_1 : MaskType;
var unfoldingSecMask#_68_$_2 : MaskType;
var unfoldingSecMask#_68_$_4 : MaskType;
var unfoldingSecMask#_68_$_3 : MaskType;
var oldVers#_81_$_0 : int;
var unfoldingHeap#_66_$_0 : HeapType;
var newVers#_82_$_0 : int;
var Mask_$_3 : MaskType;
var predRec#_28_$_0 : ref;
var predVer#_29_$_0 : int;
var unfoldingK#_36 : int;
var unfoldingMask#_32_$_0 : MaskType;
var unfoldingHeap#_31_$_1 : HeapType;
var unfoldingMask#_32_$_1 : MaskType;
var unfoldingMask#_32_$_2 : MaskType;
var unfoldingMask#_32_$_3 : MaskType;
var unfoldingMask#_32_$_5 : MaskType;
var unfoldingSecMask#_33_$_5 : MaskType;
var SecMask_$_0 : MaskType;
var SecMask_$_1 : MaskType;
var SecMask_$_2 : MaskType;
var SecMask_$_4 : MaskType;
var SecMask_$_3 : MaskType;
var unfoldingMask#_32_$_4 : MaskType;
var predRec#_48_$_0 : ref;
var predVer#_49_$_0 : int;
var unfoldingSecMask#_33_$_0 : MaskType;
var unfoldingSecMask#_33_$_1 : MaskType;
var unfoldingSecMask#_33_$_2 : MaskType;
var unfoldingSecMask#_33_$_4 : MaskType;
var unfoldingSecMask#_33_$_3 : MaskType;
var oldVers#_46_$_0 : int;
var unfoldingHeap#_31_$_0 : HeapType;
var newVers#_47_$_0 : int;
var predRec#_28 : ref;
var predFlag#_30 : bool;
var predVer#_29 : int;
var predFlag#_35 : bool;
var unfoldingHeap#_31 : HeapType;
var unfoldingMask#_32 : MaskType;
var unfoldingSecMask#_33 : MaskType;
var unfoldingCredits#_34 : CreditsType;
var oldVers#_46 : int;
var newVers#_47 : int;
var predRec#_48 : ref;
var predFlag#_50 : bool;
var predVer#_49 : int;
var predRec#_63 : ref;
var predFlag#_65 : bool;
var predVer#_64 : int;
var predFlag#_70 : bool;
var unfoldingHeap#_66 : HeapType;
var unfoldingMask#_67 : MaskType;
var unfoldingSecMask#_68 : MaskType;
var unfoldingCredits#_69 : CreditsType;
var oldVers#_81 : int;
var newVers#_82 : int;
var predRec#_83 : ref;
var predFlag#_85 : bool;
var predVer#_84 : int;
procedure Node.inv$checkDefinedness (this : ref)
{
	var predicateK#_27 : int;
	var unfoldingK#_36 : int;
	var unfoldingK#_71 : int;
	var Mask_$_0 : MaskType;
	var Mask_$_1 : MaskType;
	var Mask_$_2 : MaskType;
	var Mask_$_3 : MaskType;
	var predRec#_28_$_0 : ref;
	var predVer#_29_$_0 : int;
	var unfoldingMask#_32_$_0 : MaskType;
	var oldVers#_46_$_0 : int;
	var newVers#_47_$_0 : int;
	var unfoldingHeap#_31_$_0 : HeapType;
	var unfoldingHeap#_31_$_1 : HeapType;
	var unfoldingMask#_32_$_1 : MaskType;
	var unfoldingMask#_32_$_2 : MaskType;
	var unfoldingMask#_32_$_3 : MaskType;
	var unfoldingMask#_32_$_4 : MaskType;
	var predRec#_48_$_0 : ref;
	var predVer#_49_$_0 : int;
	var unfoldingSecMask#_33_$_0 : MaskType;
	var unfoldingSecMask#_33_$_1 : MaskType;
	var unfoldingSecMask#_33_$_2 : MaskType;
	var unfoldingSecMask#_33_$_3 : MaskType;
	var unfoldingSecMask#_33_$_4 : MaskType;
	var unfoldingMask#_32_$_5 : MaskType;
	var unfoldingSecMask#_33_$_5 : MaskType;
	var SecMask_$_0 : MaskType;
	var SecMask_$_1 : MaskType;
	var SecMask_$_2 : MaskType;
	var SecMask_$_3 : MaskType;
	var SecMask_$_4 : MaskType;
	var Mask_$_4 : MaskType;
	var SecMask_$_5 : MaskType;
	var Mask_$_5 : MaskType;
	var predRec#_63_$_0 : ref;
	var predVer#_64_$_0 : int;
	var unfoldingMask#_67_$_0 : MaskType;
	var oldVers#_81_$_0 : int;
	var newVers#_82_$_0 : int;
	var unfoldingHeap#_66_$_0 : HeapType;
	var unfoldingHeap#_66_$_1 : HeapType;
	var unfoldingMask#_67_$_1 : MaskType;
	var unfoldingMask#_67_$_2 : MaskType;
	var unfoldingMask#_67_$_3 : MaskType;
	var unfoldingMask#_67_$_4 : MaskType;
	var predRec#_83_$_0 : ref;
	var predVer#_84_$_0 : int;
	var unfoldingSecMask#_68_$_0 : MaskType;
	var unfoldingSecMask#_68_$_1 : MaskType;
	var unfoldingSecMask#_68_$_2 : MaskType;
	var unfoldingSecMask#_68_$_3 : MaskType;
	var unfoldingSecMask#_68_$_4 : MaskType;
	var unfoldingMask#_67_$_5 : MaskType;
	var unfoldingSecMask#_68_$_5 : MaskType;
	var SecMask_$_6 : MaskType;
	var SecMask_$_7 : MaskType;
	var SecMask_$_8 : MaskType;
	var SecMask_$_9 : MaskType;
	var SecMask_$_10 : MaskType;
	var SecMask_$_11 : MaskType;
	var Mask_$_6 : MaskType;
	var $_$_condition : bool;
	var $_$_condition_$0 : bool;
	var $_$_condition_$1 : bool;
	var $_$_condition_$2 : bool;
	var $_$_condition_$3 : bool;
	var $_$_condition_$4 : bool;
	var $_$_condition_$5 : bool;
	var $_$_condition_$6 : bool;
	var $_$_condition_$7 : bool;
	var $_$_condition_$8 : bool;
	var $_$_condition_$9 : bool;
	var $_$_condition_$10 : bool;
	var $_$_condition_$11 : bool;
	var $_$_condition_$12 : bool;
	var $_$_condition_$13 : bool;
	var $_$_condition_$14 : bool;
$start:
	assume Permission$denominator > 0;
	assume (Permission$Zero[perm$R] == 0) && (Permission$Zero[perm$N] == 0);
	assume (Permission$Full[perm$R] == Permission$FullFraction) && (Permission$Full[perm$N] == 0);
	assume ((((forall  o_$25 : ref, f_$16 : Field (Boolean) , pc_$0 : PermissionComponent :: ( ZeroMask[o_$25,f_$16][pc_$0] == 0 ))) && ((forall  o_$26 : ref, f_$17 : Field (Integer) , pc_$1 : PermissionComponent :: ( ZeroMask[o_$26,f_$17][pc_$1] == 0 )))) && ((forall  o_$27 : ref, f_$18 : Field (ref) , pc_$2 : PermissionComponent :: ( ZeroMask[o_$27,f_$18][pc_$2] == 0 )))) && ((forall  o_$28 : ref, f_$19 : Field (Mu) , pc_$3 : PermissionComponent :: ( ZeroMask[o_$28,f_$19][pc_$3] == 0 )));
	assume IsGoodMask(ZeroMask);
	assume NonPredicateField(joinable);
	assume NonPredicateField(forkK);
	assume (forall  n : Integer :: {Fractions(n)} ( Fractions(n) == (n * Permission$denominator) ));
	assume (forall  x : Integer, y : Integer :: ( ((0 <= x) && (x <= y)) ==> (Fractions(x) <= Fractions(y)) ));
	assume Permission$FullFraction == Fractions(100);
	assume (0 < channelK) && ((1000 * channelK) < Fractions(1));
	assume (0 < monitorK) && ((1000 * monitorK) < Fractions(1));
	assume (0 < predicateK) && ((1000 * predicateK) < Fractions(1));
	assume (predicateK == channelK) && (channelK == monitorK);
	assume IsGoodState(emptyPartialHeap);
	assume NonPredicateField(mu);
	assume (forall  m : Mu, n_$0 : Mu :: {MuBelow(m,n_$0),MuBelow(n_$0,m)} ( !(MuBelow(m,n_$0) && MuBelow(n_$0,m)) ));
	assume (forall  m_$0 : Mu, n_$1 : Mu, o_$0 : Mu :: {MuBelow(m_$0,n_$1),MuBelow(n_$1,o_$0)} ( (MuBelow(m_$0,n_$1) && MuBelow(n_$1,o_$0)) ==> MuBelow(m_$0,o_$0) ));
	assume (forall  m_$1 : Mu, n_$2 : Mu :: ( MuBelow(m_$1,n_$2) ==> (!(n_$2 == $LockBottom)) ));
	assume NonPredicateField(held);
	assume NonPredicateField(rdheld);
	assume ((((forall  m_$4_$0 : MaskType, sm_$1_$0 : MaskType, obj_$2 : ref, f_$3_$0 : Field (Boolean)  :: {CanRead(m_$4_$0,sm_$1_$0,obj_$2,f_$3_$0)} {:expand  false}( CanRead(m_$4_$0,sm_$1_$0,obj_$2,f_$3_$0) <==> ((((0 < m_$4_$0[obj_$2,f_$3_$0][perm$R]) || (0 < m_$4_$0[obj_$2,f_$3_$0][perm$N])) || (0 < sm_$1_$0[obj_$2,f_$3_$0][perm$R])) || (0 < sm_$1_$0[obj_$2,f_$3_$0][perm$N])) ))) && ((forall  m_$4_$1 : MaskType, sm_$1_$1 : MaskType, obj_$3 : ref, f_$3_$1 : Field (Integer)  :: {CanRead(m_$4_$1,sm_$1_$1,obj_$3,f_$3_$1)} {:expand  false}( CanRead(m_$4_$1,sm_$1_$1,obj_$3,f_$3_$1) <==> ((((0 < m_$4_$1[obj_$3,f_$3_$1][perm$R]) || (0 < m_$4_$1[obj_$3,f_$3_$1][perm$N])) || (0 < sm_$1_$1[obj_$3,f_$3_$1][perm$R])) || (0 < sm_$1_$1[obj_$3,f_$3_$1][perm$N])) )))) && ((forall  m_$4_$2 : MaskType, sm_$1_$2 : MaskType, obj_$4 : ref, f_$3_$2 : Field (ref)  :: {CanRead(m_$4_$2,sm_$1_$2,obj_$4,f_$3_$2)} {:expand  false}( CanRead(m_$4_$2,sm_$1_$2,obj_$4,f_$3_$2) <==> ((((0 < m_$4_$2[obj_$4,f_$3_$2][perm$R]) || (0 < m_$4_$2[obj_$4,f_$3_$2][perm$N])) || (0 < sm_$1_$2[obj_$4,f_$3_$2][perm$R])) || (0 < sm_$1_$2[obj_$4,f_$3_$2][perm$N])) )))) && ((forall  m_$4_$3 : MaskType, sm_$1_$3 : MaskType, obj_$5 : ref, f_$3_$3 : Field (Mu)  :: {CanRead(m_$4_$3,sm_$1_$3,obj_$5,f_$3_$3)} {:expand  false}( CanRead(m_$4_$3,sm_$1_$3,obj_$5,f_$3_$3) <==> ((((0 < m_$4_$3[obj_$5,f_$3_$3][perm$R]) || (0 < m_$4_$3[obj_$5,f_$3_$3][perm$N])) || (0 < sm_$1_$3[obj_$5,f_$3_$3][perm$R])) || (0 < sm_$1_$3[obj_$5,f_$3_$3][perm$N])) )));
	assume (forall  m_$7 : MaskType :: {IsGoodMask(m_$7)} {:expand  true}( IsGoodMask(m_$7) <==> (((((forall  o_$14_$0 : ref, f_$6_$0 : Field (Boolean)  :: ( ((0 <= m_$7[o_$14_$0,f_$6_$0][perm$R]) && (NonPredicateField(f_$6_$0) ==> ((m_$7[o_$14_$0,f_$6_$0][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$0,f_$6_$0][perm$N]) ==> (m_$7[o_$14_$0,f_$6_$0][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$0,f_$6_$0][perm$N] < 0) ==> (0 < m_$7[o_$14_$0,f_$6_$0][perm$R])) ))) && ((forall  o_$14_$1 : ref, f_$6_$1 : Field (Integer)  :: ( ((0 <= m_$7[o_$14_$1,f_$6_$1][perm$R]) && (NonPredicateField(f_$6_$1) ==> ((m_$7[o_$14_$1,f_$6_$1][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$1,f_$6_$1][perm$N]) ==> (m_$7[o_$14_$1,f_$6_$1][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$1,f_$6_$1][perm$N] < 0) ==> (0 < m_$7[o_$14_$1,f_$6_$1][perm$R])) )))) && ((forall  o_$14_$2 : ref, f_$6_$2 : Field (ref)  :: ( ((0 <= m_$7[o_$14_$2,f_$6_$2][perm$R]) && (NonPredicateField(f_$6_$2) ==> ((m_$7[o_$14_$2,f_$6_$2][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$2,f_$6_$2][perm$N]) ==> (m_$7[o_$14_$2,f_$6_$2][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$2,f_$6_$2][perm$N] < 0) ==> (0 < m_$7[o_$14_$2,f_$6_$2][perm$R])) )))) && ((forall  o_$14_$3 : ref, f_$6_$3 : Field (Mu)  :: ( ((0 <= m_$7[o_$14_$3,f_$6_$3][perm$R]) && (NonPredicateField(f_$6_$3) ==> ((m_$7[o_$14_$3,f_$6_$3][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$3,f_$6_$3][perm$N]) ==> (m_$7[o_$14_$3,f_$6_$3][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$3,f_$6_$3][perm$N] < 0) ==> (0 < m_$7[o_$14_$3,f_$6_$3][perm$R])) )))) ));
	assume (forall  h_$1 : HeapType, m_$8 : MaskType, sm_$2 : MaskType, o_$15 : ref, q : ref :: {wf(h_$1,m_$8,sm_$2),h_$1[o_$15,mu],h_$1[q,mu]} ( (((wf(h_$1,m_$8,sm_$2) && (!(o_$15 == q))) && ((0 < h_$1[o_$15,held]) || h_$1[o_$15,rdheld])) && ((0 < h_$1[q,held]) || h_$1[q,rdheld])) ==> (!(h_$1[o_$15,mu] == h_$1[q,mu])) ));
	assume ((((((((((((((((forall  m_$9_$0 : MaskType, o_$16_$0 : ref, f_$7_$0 : Field (Boolean) , howMuch_$3 : Integer, q_$0_$0 : ref, g_$4 : Field (Boolean)  :: {DecPerm(m_$9_$0,o_$16_$0,f_$7_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R]} ( DecPerm(m_$9_$0,o_$16_$0,f_$7_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R] == ite((o_$16_$0 == q_$0_$0) && (f_$7_$0 == g_$4),m_$9_$0[q_$0_$0,g_$4][perm$R] - howMuch_$3,m_$9_$0[q_$0_$0,g_$4][perm$R]) ))) && ((forall  m_$9_$1 : MaskType, o_$16_$1 : ref, f_$7_$1 : Field (Integer) , howMuch_$4 : Integer, q_$0_$1 : ref, g_$5 : Field (Boolean)  :: {DecPerm(m_$9_$1,o_$16_$1,f_$7_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R]} ( DecPerm(m_$9_$1,o_$16_$1,f_$7_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R] == ite((o_$16_$1 == q_$0_$1) && false,m_$9_$1[q_$0_$1,g_$5][perm$R] - howMuch_$4,m_$9_$1[q_$0_$1,g_$5][perm$R]) )))) && ((forall  m_$9_$2 : MaskType, o_$16_$2 : ref, f_$7_$2 : Field (ref) , howMuch_$5 : Integer, q_$0_$2 : ref, g_$6 : Field (Boolean)  :: {DecPerm(m_$9_$2,o_$16_$2,f_$7_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R]} ( DecPerm(m_$9_$2,o_$16_$2,f_$7_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R] == ite((o_$16_$2 == q_$0_$2) && false,m_$9_$2[q_$0_$2,g_$6][perm$R] - howMuch_$5,m_$9_$2[q_$0_$2,g_$6][perm$R]) )))) && ((forall  m_$9_$3 : MaskType, o_$16_$3 : ref, f_$7_$3 : Field (Mu) , howMuch_$6 : Integer, q_$0_$3 : ref, g_$7 : Field (Boolean)  :: {DecPerm(m_$9_$3,o_$16_$3,f_$7_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R]} ( DecPerm(m_$9_$3,o_$16_$3,f_$7_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R] == ite((o_$16_$3 == q_$0_$3) && false,m_$9_$3[q_$0_$3,g_$7][perm$R] - howMuch_$6,m_$9_$3[q_$0_$3,g_$7][perm$R]) )))) && ((forall  m_$9_$4 : MaskType, o_$16_$4 : ref, f_$7_$4 : Field (Boolean) , howMuch_$7 : Integer, q_$0_$4 : ref, g_$8 : Field (Integer)  :: {DecPerm(m_$9_$4,o_$16_$4,f_$7_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R]} ( DecPerm(m_$9_$4,o_$16_$4,f_$7_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R] == ite((o_$16_$4 == q_$0_$4) && false,m_$9_$4[q_$0_$4,g_$8][perm$R] - howMuch_$7,m_$9_$4[q_$0_$4,g_$8][perm$R]) )))) && ((forall  m_$9_$5 : MaskType, o_$16_$5 : ref, f_$7_$5 : Field (Integer) , howMuch_$8 : Integer, q_$0_$5 : ref, g_$9 : Field (Integer)  :: {DecPerm(m_$9_$5,o_$16_$5,f_$7_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R]} ( DecPerm(m_$9_$5,o_$16_$5,f_$7_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R] == ite((o_$16_$5 == q_$0_$5) && (f_$7_$5 == g_$9),m_$9_$5[q_$0_$5,g_$9][perm$R] - howMuch_$8,m_$9_$5[q_$0_$5,g_$9][perm$R]) )))) && ((forall  m_$9_$6 : MaskType, o_$16_$6 : ref, f_$7_$6 : Field (ref) , howMuch_$9 : Integer, q_$0_$6 : ref, g_$10 : Field (Integer)  :: {DecPerm(m_$9_$6,o_$16_$6,f_$7_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R]} ( DecPerm(m_$9_$6,o_$16_$6,f_$7_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R] == ite((o_$16_$6 == q_$0_$6) && false,m_$9_$6[q_$0_$6,g_$10][perm$R] - howMuch_$9,m_$9_$6[q_$0_$6,g_$10][perm$R]) )))) && ((forall  m_$9_$7 : MaskType, o_$16_$7 : ref, f_$7_$7 : Field (Mu) , howMuch_$10 : Integer, q_$0_$7 : ref, g_$11 : Field (Integer)  :: {DecPerm(m_$9_$7,o_$16_$7,f_$7_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R]} ( DecPerm(m_$9_$7,o_$16_$7,f_$7_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R] == ite((o_$16_$7 == q_$0_$7) && false,m_$9_$7[q_$0_$7,g_$11][perm$R] - howMuch_$10,m_$9_$7[q_$0_$7,g_$11][perm$R]) )))) && ((forall  m_$9_$8 : MaskType, o_$16_$8 : ref, f_$7_$8 : Field (Boolean) , howMuch_$11 : Integer, q_$0_$8 : ref, g_$12 : Field (ref)  :: {DecPerm(m_$9_$8,o_$16_$8,f_$7_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R]} ( DecPerm(m_$9_$8,o_$16_$8,f_$7_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R] == ite((o_$16_$8 == q_$0_$8) && false,m_$9_$8[q_$0_$8,g_$12][perm$R] - howMuch_$11,m_$9_$8[q_$0_$8,g_$12][perm$R]) )))) && ((forall  m_$9_$9 : MaskType, o_$16_$9 : ref, f_$7_$9 : Field (Integer) , howMuch_$12 : Integer, q_$0_$9 : ref, g_$13 : Field (ref)  :: {DecPerm(m_$9_$9,o_$16_$9,f_$7_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R]} ( DecPerm(m_$9_$9,o_$16_$9,f_$7_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R] == ite((o_$16_$9 == q_$0_$9) && false,m_$9_$9[q_$0_$9,g_$13][perm$R] - howMuch_$12,m_$9_$9[q_$0_$9,g_$13][perm$R]) )))) && ((forall  m_$9_$10 : MaskType, o_$16_$10 : ref, f_$7_$10 : Field (ref) , howMuch_$13 : Integer, q_$0_$10 : ref, g_$14 : Field (ref)  :: {DecPerm(m_$9_$10,o_$16_$10,f_$7_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R]} ( DecPerm(m_$9_$10,o_$16_$10,f_$7_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R] == ite((o_$16_$10 == q_$0_$10) && (f_$7_$10 == g_$14),m_$9_$10[q_$0_$10,g_$14][perm$R] - howMuch_$13,m_$9_$10[q_$0_$10,g_$14][perm$R]) )))) && ((forall  m_$9_$11 : MaskType, o_$16_$11 : ref, f_$7_$11 : Field (Mu) , howMuch_$14 : Integer, q_$0_$11 : ref, g_$15 : Field (ref)  :: {DecPerm(m_$9_$11,o_$16_$11,f_$7_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R]} ( DecPerm(m_$9_$11,o_$16_$11,f_$7_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R] == ite((o_$16_$11 == q_$0_$11) && false,m_$9_$11[q_$0_$11,g_$15][perm$R] - howMuch_$14,m_$9_$11[q_$0_$11,g_$15][perm$R]) )))) && ((forall  m_$9_$12 : MaskType, o_$16_$12 : ref, f_$7_$12 : Field (Boolean) , howMuch_$15 : Integer, q_$0_$12 : ref, g_$16 : Field (Mu)  :: {DecPerm(m_$9_$12,o_$16_$12,f_$7_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R]} ( DecPerm(m_$9_$12,o_$16_$12,f_$7_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R] == ite((o_$16_$12 == q_$0_$12) && false,m_$9_$12[q_$0_$12,g_$16][perm$R] - howMuch_$15,m_$9_$12[q_$0_$12,g_$16][perm$R]) )))) && ((forall  m_$9_$13 : MaskType, o_$16_$13 : ref, f_$7_$13 : Field (Integer) , howMuch_$16 : Integer, q_$0_$13 : ref, g_$17 : Field (Mu)  :: {DecPerm(m_$9_$13,o_$16_$13,f_$7_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R]} ( DecPerm(m_$9_$13,o_$16_$13,f_$7_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R] == ite((o_$16_$13 == q_$0_$13) && false,m_$9_$13[q_$0_$13,g_$17][perm$R] - howMuch_$16,m_$9_$13[q_$0_$13,g_$17][perm$R]) )))) && ((forall  m_$9_$14 : MaskType, o_$16_$14 : ref, f_$7_$14 : Field (ref) , howMuch_$17 : Integer, q_$0_$14 : ref, g_$18 : Field (Mu)  :: {DecPerm(m_$9_$14,o_$16_$14,f_$7_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R]} ( DecPerm(m_$9_$14,o_$16_$14,f_$7_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R] == ite((o_$16_$14 == q_$0_$14) && false,m_$9_$14[q_$0_$14,g_$18][perm$R] - howMuch_$17,m_$9_$14[q_$0_$14,g_$18][perm$R]) )))) && ((forall  m_$9_$15 : MaskType, o_$16_$15 : ref, f_$7_$15 : Field (Mu) , howMuch_$18 : Integer, q_$0_$15 : ref, g_$19 : Field (Mu)  :: {DecPerm(m_$9_$15,o_$16_$15,f_$7_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R]} ( DecPerm(m_$9_$15,o_$16_$15,f_$7_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R] == ite((o_$16_$15 == q_$0_$15) && (f_$7_$15 == g_$19),m_$9_$15[q_$0_$15,g_$19][perm$R] - howMuch_$18,m_$9_$15[q_$0_$15,g_$19][perm$R]) )));
	assume ((((((((((((((((forall  m_$11_$0 : MaskType, o_$18_$0 : ref, f_$9_$0 : Field (Boolean) , howMuch_$1_$0 : Integer, q_$2_$0 : ref, g_$1_$0 : Field (Boolean)  :: {IncPerm(m_$11_$0,o_$18_$0,f_$9_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R]} ( IncPerm(m_$11_$0,o_$18_$0,f_$9_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R] == ite((o_$18_$0 == q_$2_$0) && (f_$9_$0 == g_$1_$0),m_$11_$0[q_$2_$0,g_$1_$0][perm$R] + howMuch_$1_$0,m_$11_$0[q_$2_$0,g_$1_$0][perm$R]) ))) && ((forall  m_$11_$1 : MaskType, o_$18_$1 : ref, f_$9_$1 : Field (Integer) , howMuch_$1_$1 : Integer, q_$2_$1 : ref, g_$1_$1 : Field (Boolean)  :: {IncPerm(m_$11_$1,o_$18_$1,f_$9_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R]} ( IncPerm(m_$11_$1,o_$18_$1,f_$9_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R] == ite((o_$18_$1 == q_$2_$1) && false,m_$11_$1[q_$2_$1,g_$1_$1][perm$R] + howMuch_$1_$1,m_$11_$1[q_$2_$1,g_$1_$1][perm$R]) )))) && ((forall  m_$11_$2 : MaskType, o_$18_$2 : ref, f_$9_$2 : Field (ref) , howMuch_$1_$2 : Integer, q_$2_$2 : ref, g_$1_$2 : Field (Boolean)  :: {IncPerm(m_$11_$2,o_$18_$2,f_$9_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R]} ( IncPerm(m_$11_$2,o_$18_$2,f_$9_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R] == ite((o_$18_$2 == q_$2_$2) && false,m_$11_$2[q_$2_$2,g_$1_$2][perm$R] + howMuch_$1_$2,m_$11_$2[q_$2_$2,g_$1_$2][perm$R]) )))) && ((forall  m_$11_$3 : MaskType, o_$18_$3 : ref, f_$9_$3 : Field (Mu) , howMuch_$1_$3 : Integer, q_$2_$3 : ref, g_$1_$3 : Field (Boolean)  :: {IncPerm(m_$11_$3,o_$18_$3,f_$9_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R]} ( IncPerm(m_$11_$3,o_$18_$3,f_$9_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R] == ite((o_$18_$3 == q_$2_$3) && false,m_$11_$3[q_$2_$3,g_$1_$3][perm$R] + howMuch_$1_$3,m_$11_$3[q_$2_$3,g_$1_$3][perm$R]) )))) && ((forall  m_$11_$4 : MaskType, o_$18_$4 : ref, f_$9_$4 : Field (Boolean) , howMuch_$1_$4 : Integer, q_$2_$4 : ref, g_$1_$4 : Field (Integer)  :: {IncPerm(m_$11_$4,o_$18_$4,f_$9_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R]} ( IncPerm(m_$11_$4,o_$18_$4,f_$9_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R] == ite((o_$18_$4 == q_$2_$4) && false,m_$11_$4[q_$2_$4,g_$1_$4][perm$R] + howMuch_$1_$4,m_$11_$4[q_$2_$4,g_$1_$4][perm$R]) )))) && ((forall  m_$11_$5 : MaskType, o_$18_$5 : ref, f_$9_$5 : Field (Integer) , howMuch_$1_$5 : Integer, q_$2_$5 : ref, g_$1_$5 : Field (Integer)  :: {IncPerm(m_$11_$5,o_$18_$5,f_$9_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R]} ( IncPerm(m_$11_$5,o_$18_$5,f_$9_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R] == ite((o_$18_$5 == q_$2_$5) && (f_$9_$5 == g_$1_$5),m_$11_$5[q_$2_$5,g_$1_$5][perm$R] + howMuch_$1_$5,m_$11_$5[q_$2_$5,g_$1_$5][perm$R]) )))) && ((forall  m_$11_$6 : MaskType, o_$18_$6 : ref, f_$9_$6 : Field (ref) , howMuch_$1_$6 : Integer, q_$2_$6 : ref, g_$1_$6 : Field (Integer)  :: {IncPerm(m_$11_$6,o_$18_$6,f_$9_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R]} ( IncPerm(m_$11_$6,o_$18_$6,f_$9_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R] == ite((o_$18_$6 == q_$2_$6) && false,m_$11_$6[q_$2_$6,g_$1_$6][perm$R] + howMuch_$1_$6,m_$11_$6[q_$2_$6,g_$1_$6][perm$R]) )))) && ((forall  m_$11_$7 : MaskType, o_$18_$7 : ref, f_$9_$7 : Field (Mu) , howMuch_$1_$7 : Integer, q_$2_$7 : ref, g_$1_$7 : Field (Integer)  :: {IncPerm(m_$11_$7,o_$18_$7,f_$9_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R]} ( IncPerm(m_$11_$7,o_$18_$7,f_$9_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R] == ite((o_$18_$7 == q_$2_$7) && false,m_$11_$7[q_$2_$7,g_$1_$7][perm$R] + howMuch_$1_$7,m_$11_$7[q_$2_$7,g_$1_$7][perm$R]) )))) && ((forall  m_$11_$8 : MaskType, o_$18_$8 : ref, f_$9_$8 : Field (Boolean) , howMuch_$1_$8 : Integer, q_$2_$8 : ref, g_$1_$8 : Field (ref)  :: {IncPerm(m_$11_$8,o_$18_$8,f_$9_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R]} ( IncPerm(m_$11_$8,o_$18_$8,f_$9_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R] == ite((o_$18_$8 == q_$2_$8) && false,m_$11_$8[q_$2_$8,g_$1_$8][perm$R] + howMuch_$1_$8,m_$11_$8[q_$2_$8,g_$1_$8][perm$R]) )))) && ((forall  m_$11_$9 : MaskType, o_$18_$9 : ref, f_$9_$9 : Field (Integer) , howMuch_$1_$9 : Integer, q_$2_$9 : ref, g_$1_$9 : Field (ref)  :: {IncPerm(m_$11_$9,o_$18_$9,f_$9_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R]} ( IncPerm(m_$11_$9,o_$18_$9,f_$9_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R] == ite((o_$18_$9 == q_$2_$9) && false,m_$11_$9[q_$2_$9,g_$1_$9][perm$R] + howMuch_$1_$9,m_$11_$9[q_$2_$9,g_$1_$9][perm$R]) )))) && ((forall  m_$11_$10 : MaskType, o_$18_$10 : ref, f_$9_$10 : Field (ref) , howMuch_$1_$10 : Integer, q_$2_$10 : ref, g_$1_$10 : Field (ref)  :: {IncPerm(m_$11_$10,o_$18_$10,f_$9_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R]} ( IncPerm(m_$11_$10,o_$18_$10,f_$9_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R] == ite((o_$18_$10 == q_$2_$10) && (f_$9_$10 == g_$1_$10),m_$11_$10[q_$2_$10,g_$1_$10][perm$R] + howMuch_$1_$10,m_$11_$10[q_$2_$10,g_$1_$10][perm$R]) )))) && ((forall  m_$11_$11 : MaskType, o_$18_$11 : ref, f_$9_$11 : Field (Mu) , howMuch_$1_$11 : Integer, q_$2_$11 : ref, g_$1_$11 : Field (ref)  :: {IncPerm(m_$11_$11,o_$18_$11,f_$9_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R]} ( IncPerm(m_$11_$11,o_$18_$11,f_$9_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R] == ite((o_$18_$11 == q_$2_$11) && false,m_$11_$11[q_$2_$11,g_$1_$11][perm$R] + howMuch_$1_$11,m_$11_$11[q_$2_$11,g_$1_$11][perm$R]) )))) && ((forall  m_$11_$12 : MaskType, o_$18_$12 : ref, f_$9_$12 : Field (Boolean) , howMuch_$1_$12 : Integer, q_$2_$12 : ref, g_$1_$12 : Field (Mu)  :: {IncPerm(m_$11_$12,o_$18_$12,f_$9_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R]} ( IncPerm(m_$11_$12,o_$18_$12,f_$9_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R] == ite((o_$18_$12 == q_$2_$12) && false,m_$11_$12[q_$2_$12,g_$1_$12][perm$R] + howMuch_$1_$12,m_$11_$12[q_$2_$12,g_$1_$12][perm$R]) )))) && ((forall  m_$11_$13 : MaskType, o_$18_$13 : ref, f_$9_$13 : Field (Integer) , howMuch_$1_$13 : Integer, q_$2_$13 : ref, g_$1_$13 : Field (Mu)  :: {IncPerm(m_$11_$13,o_$18_$13,f_$9_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R]} ( IncPerm(m_$11_$13,o_$18_$13,f_$9_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R] == ite((o_$18_$13 == q_$2_$13) && false,m_$11_$13[q_$2_$13,g_$1_$13][perm$R] + howMuch_$1_$13,m_$11_$13[q_$2_$13,g_$1_$13][perm$R]) )))) && ((forall  m_$11_$14 : MaskType, o_$18_$14 : ref, f_$9_$14 : Field (ref) , howMuch_$1_$14 : Integer, q_$2_$14 : ref, g_$1_$14 : Field (Mu)  :: {IncPerm(m_$11_$14,o_$18_$14,f_$9_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R]} ( IncPerm(m_$11_$14,o_$18_$14,f_$9_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R] == ite((o_$18_$14 == q_$2_$14) && false,m_$11_$14[q_$2_$14,g_$1_$14][perm$R] + howMuch_$1_$14,m_$11_$14[q_$2_$14,g_$1_$14][perm$R]) )))) && ((forall  m_$11_$15 : MaskType, o_$18_$15 : ref, f_$9_$15 : Field (Mu) , howMuch_$1_$15 : Integer, q_$2_$15 : ref, g_$1_$15 : Field (Mu)  :: {IncPerm(m_$11_$15,o_$18_$15,f_$9_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R]} ( IncPerm(m_$11_$15,o_$18_$15,f_$9_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R] == ite((o_$18_$15 == q_$2_$15) && (f_$9_$15 == g_$1_$15),m_$11_$15[q_$2_$15,g_$1_$15][perm$R] + howMuch_$1_$15,m_$11_$15[q_$2_$15,g_$1_$15][perm$R]) )));
	assume (forall  o_$22 : ref :: ( ZeroCredits[o_$22] == 0 ));
	assume ((((forall  f_$13_$0 : Field (Boolean)  :: ( NonPredicateField(f_$13_$0) ==> (!PredicateField(f_$13_$0)) ))) && ((forall  f_$13_$1 : Field (Integer)  :: ( NonPredicateField(f_$13_$1) ==> (!PredicateField(f_$13_$1)) )))) && ((forall  f_$13_$2 : Field (ref)  :: ( NonPredicateField(f_$13_$2) ==> (!PredicateField(f_$13_$2)) )))) && ((forall  f_$13_$3 : Field (Mu)  :: ( NonPredicateField(f_$13_$3) ==> (!PredicateField(f_$13_$3)) )));
	assume ((((forall  f_$14_$0 : Field (Boolean)  :: ( PredicateField(f_$14_$0) ==> (!NonPredicateField(f_$14_$0)) ))) && ((forall  f_$14_$1 : Field (Integer)  :: ( PredicateField(f_$14_$1) ==> (!NonPredicateField(f_$14_$1)) )))) && ((forall  f_$14_$2 : Field (ref)  :: ( PredicateField(f_$14_$2) ==> (!NonPredicateField(f_$14_$2)) )))) && ((forall  f_$14_$3 : Field (Mu)  :: ( PredicateField(f_$14_$3) ==> (!NonPredicateField(f_$14_$3)) )));
	assume (((((((((((((((forall  con_$1 : Boolean, a_$0_$0 : Boolean, b_$0_$0 : Boolean :: {ite(con_$1,a_$0_$0,b_$0_$0)} ( con_$1 ==> (ite(con_$1,a_$0_$0,b_$0_$0) == a_$0_$0) ))) && ((forall  con_$2 : Boolean, a_$0_$1 : Integer, b_$0_$1 : Integer :: {ite(con_$2,a_$0_$1,b_$0_$1)} ( con_$2 ==> (ite(con_$2,a_$0_$1,b_$0_$1) == a_$0_$1) )))) && ((forall  con_$3 : Boolean, a_$0_$2 : [PermissionComponent]Integer, b_$0_$2 : [PermissionComponent]Integer :: {ite(con_$3,a_$0_$2,b_$0_$2)} ( con_$3 ==> (ite(con_$3,a_$0_$2,b_$0_$2) == a_$0_$2) )))) && ((forall  con_$4 : Boolean, a_$0_$3 : PermissionComponent, b_$0_$3 : PermissionComponent :: {ite(con_$4,a_$0_$3,b_$0_$3)} ( con_$4 ==> (ite(con_$4,a_$0_$3,b_$0_$3) == a_$0_$3) )))) && ((forall  con_$5 : Boolean, a_$0_$4 : MaskType, b_$0_$4 : MaskType :: {ite(con_$5,a_$0_$4,b_$0_$4)} ( con_$5 ==> (ite(con_$5,a_$0_$4,b_$0_$4) == a_$0_$4) )))) && ((forall  con_$6 : Boolean, a_$0_$5 : ref, b_$0_$5 : ref :: {ite(con_$6,a_$0_$5,b_$0_$5)} ( con_$6 ==> (ite(con_$6,a_$0_$5,b_$0_$5) == a_$0_$5) )))) && ((forall  con_$7 : Boolean, a_$0_$6 : Field (Integer) , b_$0_$6 : Field (Integer)  :: {ite(con_$7,a_$0_$6,b_$0_$6)} ( con_$7 ==> (ite(con_$7,a_$0_$6,b_$0_$6) == a_$0_$6) )))) && ((forall  con_$8 : Boolean, a_$0_$7 : PartialHeapType, b_$0_$7 : PartialHeapType :: {ite(con_$8,a_$0_$7,b_$0_$7)} ( con_$8 ==> (ite(con_$8,a_$0_$7,b_$0_$7) == a_$0_$7) )))) && ((forall  con_$9 : Boolean, a_$0_$8 : Field (Mu) , b_$0_$8 : Field (Mu)  :: {ite(con_$9,a_$0_$8,b_$0_$8)} ( con_$9 ==> (ite(con_$9,a_$0_$8,b_$0_$8) == a_$0_$8) )))) && ((forall  con_$10 : Boolean, a_$0_$9 : Mu, b_$0_$9 : Mu :: {ite(con_$10,a_$0_$9,b_$0_$9)} ( con_$10 ==> (ite(con_$10,a_$0_$9,b_$0_$9) == a_$0_$9) )))) && ((forall  con_$11 : Boolean, a_$0_$10 : Field (Boolean) , b_$0_$10 : Field (Boolean)  :: {ite(con_$11,a_$0_$10,b_$0_$10)} ( con_$11 ==> (ite(con_$11,a_$0_$10,b_$0_$10) == a_$0_$10) )))) && ((forall  con_$12 : Boolean, a_$0_$11 : HeapType, b_$0_$11 : HeapType :: {ite(con_$12,a_$0_$11,b_$0_$11)} ( con_$12 ==> (ite(con_$12,a_$0_$11,b_$0_$11) == a_$0_$11) )))) && ((forall  con_$13 : Boolean, a_$0_$12 : CreditsType, b_$0_$12 : CreditsType :: {ite(con_$13,a_$0_$12,b_$0_$12)} ( con_$13 ==> (ite(con_$13,a_$0_$12,b_$0_$12) == a_$0_$12) )))) && ((forall  con_$14 : Boolean, a_$0_$13 : Field (ref) , b_$0_$13 : Field (ref)  :: {ite(con_$14,a_$0_$13,b_$0_$13)} ( con_$14 ==> (ite(con_$14,a_$0_$13,b_$0_$13) == a_$0_$13) )))) && ((forall  con_$15 : Boolean, a_$0_$14 : TypeName, b_$0_$14 : TypeName :: {ite(con_$15,a_$0_$14,b_$0_$14)} ( con_$15 ==> (ite(con_$15,a_$0_$14,b_$0_$14) == a_$0_$14) )));
	assume (((((((((((((((forall  con_$0_$0 : Boolean, a_$1_$0 : Boolean, b_$1_$0 : Boolean :: {ite(con_$0_$0,a_$1_$0,b_$1_$0)} ( (!con_$0_$0) ==> (ite(con_$0_$0,a_$1_$0,b_$1_$0) == b_$1_$0) ))) && ((forall  con_$0_$1 : Boolean, a_$1_$1 : Integer, b_$1_$1 : Integer :: {ite(con_$0_$1,a_$1_$1,b_$1_$1)} ( (!con_$0_$1) ==> (ite(con_$0_$1,a_$1_$1,b_$1_$1) == b_$1_$1) )))) && ((forall  con_$0_$2 : Boolean, a_$1_$2 : [PermissionComponent]Integer, b_$1_$2 : [PermissionComponent]Integer :: {ite(con_$0_$2,a_$1_$2,b_$1_$2)} ( (!con_$0_$2) ==> (ite(con_$0_$2,a_$1_$2,b_$1_$2) == b_$1_$2) )))) && ((forall  con_$0_$3 : Boolean, a_$1_$3 : PermissionComponent, b_$1_$3 : PermissionComponent :: {ite(con_$0_$3,a_$1_$3,b_$1_$3)} ( (!con_$0_$3) ==> (ite(con_$0_$3,a_$1_$3,b_$1_$3) == b_$1_$3) )))) && ((forall  con_$0_$4 : Boolean, a_$1_$4 : MaskType, b_$1_$4 : MaskType :: {ite(con_$0_$4,a_$1_$4,b_$1_$4)} ( (!con_$0_$4) ==> (ite(con_$0_$4,a_$1_$4,b_$1_$4) == b_$1_$4) )))) && ((forall  con_$0_$5 : Boolean, a_$1_$5 : ref, b_$1_$5 : ref :: {ite(con_$0_$5,a_$1_$5,b_$1_$5)} ( (!con_$0_$5) ==> (ite(con_$0_$5,a_$1_$5,b_$1_$5) == b_$1_$5) )))) && ((forall  con_$0_$6 : Boolean, a_$1_$6 : Field (Integer) , b_$1_$6 : Field (Integer)  :: {ite(con_$0_$6,a_$1_$6,b_$1_$6)} ( (!con_$0_$6) ==> (ite(con_$0_$6,a_$1_$6,b_$1_$6) == b_$1_$6) )))) && ((forall  con_$0_$7 : Boolean, a_$1_$7 : PartialHeapType, b_$1_$7 : PartialHeapType :: {ite(con_$0_$7,a_$1_$7,b_$1_$7)} ( (!con_$0_$7) ==> (ite(con_$0_$7,a_$1_$7,b_$1_$7) == b_$1_$7) )))) && ((forall  con_$0_$8 : Boolean, a_$1_$8 : Field (Mu) , b_$1_$8 : Field (Mu)  :: {ite(con_$0_$8,a_$1_$8,b_$1_$8)} ( (!con_$0_$8) ==> (ite(con_$0_$8,a_$1_$8,b_$1_$8) == b_$1_$8) )))) && ((forall  con_$0_$9 : Boolean, a_$1_$9 : Mu, b_$1_$9 : Mu :: {ite(con_$0_$9,a_$1_$9,b_$1_$9)} ( (!con_$0_$9) ==> (ite(con_$0_$9,a_$1_$9,b_$1_$9) == b_$1_$9) )))) && ((forall  con_$0_$10 : Boolean, a_$1_$10 : Field (Boolean) , b_$1_$10 : Field (Boolean)  :: {ite(con_$0_$10,a_$1_$10,b_$1_$10)} ( (!con_$0_$10) ==> (ite(con_$0_$10,a_$1_$10,b_$1_$10) == b_$1_$10) )))) && ((forall  con_$0_$11 : Boolean, a_$1_$11 : HeapType, b_$1_$11 : HeapType :: {ite(con_$0_$11,a_$1_$11,b_$1_$11)} ( (!con_$0_$11) ==> (ite(con_$0_$11,a_$1_$11,b_$1_$11) == b_$1_$11) )))) && ((forall  con_$0_$12 : Boolean, a_$1_$12 : CreditsType, b_$1_$12 : CreditsType :: {ite(con_$0_$12,a_$1_$12,b_$1_$12)} ( (!con_$0_$12) ==> (ite(con_$0_$12,a_$1_$12,b_$1_$12) == b_$1_$12) )))) && ((forall  con_$0_$13 : Boolean, a_$1_$13 : Field (ref) , b_$1_$13 : Field (ref)  :: {ite(con_$0_$13,a_$1_$13,b_$1_$13)} ( (!con_$0_$13) ==> (ite(con_$0_$13,a_$1_$13,b_$1_$13) == b_$1_$13) )))) && ((forall  con_$0_$14 : Boolean, a_$1_$14 : TypeName, b_$1_$14 : TypeName :: {ite(con_$0_$14,a_$1_$14,b_$1_$14)} ( (!con_$0_$14) ==> (ite(con_$0_$14,a_$1_$14,b_$1_$14) == b_$1_$14) )));
	assume (forall  x_$0 : Integer, y_$0 : Integer :: {x_$0 mod y_$0} {x_$0 div y_$0} ( (x_$0 mod y_$0) == (x_$0 - ((x_$0 div y_$0) * y_$0)) ));
	assume (forall  x_$1 : Integer, y_$1 : Integer :: {x_$1 mod y_$1} ( (0 < y_$1) ==> ((0 <= (x_$1 mod y_$1)) && ((x_$1 mod y_$1) < y_$1)) ));
	assume (forall  x_$2 : Integer, y_$2 : Integer :: {x_$2 mod y_$2} ( (y_$2 < 0) ==> ((y_$2 < (x_$2 mod y_$2)) && ((x_$2 mod y_$2) <= 0)) ));
	assume (forall  a_$2 : Integer, b_$2 : Integer, d : Integer :: {a_$2 mod d,b_$2 mod d} ( (((2 <= d) && ((a_$2 mod d) == (b_$2 mod d))) && (a_$2 < b_$2)) ==> ((a_$2 + d) <= b_$2) ));
	assume NonPredicateField(Node.next);
	assume NonPredicateField(Node.prev);
	assume PredicateField(Node.inv);
	assume PredicateField(Node.invLeft);
	assume PredicateField(Node.invRight);
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume IsGoodMask(Mask);
	assume IsGoodMask(SecMask);
	assume (this == null) || (dtype(this) == Node#t);
	assume !(this == null);
	assume wf(Heap,Mask,SecMask);
	goto anon0;
anon0:
	assume (0 < predicateK#_27) && ((1000 * predicateK#_27) < Fractions(1));
	assume !(this == null);
	assume wf(Heap,ZeroMask,ZeroMask);
	assume (Heap[this,Node.prev] == null) || (dtype(Heap[this,Node.prev]) == Node#t);
	assume 1 > 0;
	assume Mask_$_0 == ZeroMask[this,Node.prev := ZeroMask[this,Node.prev][perm$N := ZeroMask[this,Node.prev][perm$N] + 1]];
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume IsGoodMask(Mask_$_0);
	assume IsGoodState(heapFragment(Heap[this,Node.prev]));
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume !(this == null);
	assume wf(Heap,Mask_$_0,ZeroMask);
	assume (Heap[this,Node.next] == null) || (dtype(Heap[this,Node.next]) == Node#t);
	assume 1 > 0;
	assume Mask_$_1 == Mask_$_0[this,Node.next := Mask_$_0[this,Node.next][perm$N := Mask_$_0[this,Node.next][perm$N] + 1]];
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume IsGoodMask(Mask_$_1);
	assume IsGoodState(heapFragment(Heap[this,Node.next]));
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume !(this == null);
	assume wf(Heap,Mask_$_1,ZeroMask);
	assume true;
	assume 1 > 0;
	assume Mask_$_2 == Mask_$_1[this,mu := Mask_$_1[this,mu][perm$N := Mask_$_1[this,mu][perm$N] + 1]];
	assume wf(Heap,Mask_$_2,ZeroMask);
	assume IsGoodMask(Mask_$_2);
	assume IsGoodState(heapFragment(Heap[this,mu]));
	assume wf(Heap,Mask_$_2,ZeroMask);
	assume wf(Heap,Mask_$_2,ZeroMask);
	assert { :msg "  18.10: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  18.10: Location might not be readable." } true ==> CanRead(Mask_$_2,ZeroMask,this,Node.prev);
	if ($_$_condition) { goto anon105_Then; } else { goto anon105_Else; }
anon105_Then:
	assume $_$_condition;
	assume $_$_condition <==> (!(Heap[this,Node.prev] == null));
	assume !(Heap[this,Node.prev] == null);
	assert { :msg "  18.25: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  18.25: Location might not be readable." } true ==> CanRead(Mask_$_2,ZeroMask,this,Node.prev);
	assert { :msg "  18.25: Receiver might be null." } !(Heap[this,Node.prev] == null);
	assert { :msg "  18.25: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  18.25: Location might not be readable." } true ==> CanRead(Mask_$_2,ZeroMask,this,Node.prev);
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_2,ZeroMask);
	assume Fractions(100) > 0;
	assume Mask_$_3 == Mask_$_2[Heap[this,Node.prev],Node.invLeft := Mask_$_2[Heap[this,Node.prev],Node.invLeft][perm$R := Mask_$_2[Heap[this,Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],Node.invLeft]));
	assume wf(Heap,Mask_$_3,ZeroMask);
	assume wf(Heap,Mask_$_3,ZeroMask);
	assume predRec#_28_$_0 == Heap[this,Node.prev];
	assume #Node.invLeft#trigger(Heap[this,Node.prev]);
	assume predVer#_29_$_0 == Heap[Heap[this,Node.prev],Node.invLeft];
	assume (0 < unfoldingK#_36) && ((1000 * unfoldingK#_36) < Fractions(1));
	assert { :msg "  18.51: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  18.51: Location might not be readable." } true ==> CanRead(Mask_$_3,ZeroMask,this,Node.prev);
	assert { :msg "  18.51: Receiver might be null." } true ==> (!(Heap[this,Node.prev] == null));
	assume wf(Heap,Mask_$_3,ZeroMask);
	assert { :msg "  18.41: Unfolding might fail. The permission at 18.51 might not be positive." } Fractions(100) > 0;
	assert { :msg "  18.41: Unfolding might fail. Insufficient fraction at 18.51 for Node.invLeft." } (Fractions(100) <= Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R]) && ((Fractions(100) == Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R]) ==> (0 <= Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$N]));
	assume unfoldingMask#_32_$_0 == Mask_$_3[Heap[this,Node.prev],Node.invLeft := Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R := Mask_$_3[Heap[this,Node.prev],Node.invLeft][perm$R] - Fractions(100)]];
	if ($_$_condition_$0) { goto anon106_Then; } else { goto anon106_Else; }
anon105_Else:
	assume !$_$_condition;
	assume $_$_condition <==> (!(Heap[this,Node.prev] == null));
	assume Heap[this,Node.prev] == null;
	assume Mask_$_4 == Mask_$_2;
	assume SecMask_$_5 == ZeroMask;
	goto anon52;
anon106_Then:
	assume $_$_condition_$0;
	assume $_$_condition_$0 <==> false;
	assume false;
	goto $exit;
anon106_Else:
	assume !$_$_condition_$0;
	assume $_$_condition_$0 <==> false;
	assume !false;
	if ($_$_condition_$1) { goto anon113_Then; } else { goto anon113_Else; }
anon52:
	assert { :msg "  19.10: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  19.10: Location might not be readable." } true ==> CanRead(Mask_$_4,SecMask_$_5,this,Node.next);
	if ($_$_condition_$7) { goto anon131_Then; } else { goto anon131_Else; }
anon113_Then:
	assume $_$_condition_$1;
	assume $_$_condition_$1 <==> (!CanRead(unfoldingMask#_32_$_0,ZeroMask,Heap[this,Node.prev],Node.invLeft));
	assume !CanRead(unfoldingMask#_32_$_0,ZeroMask,Heap[this,Node.prev],Node.invLeft);
	assume oldVers#_46_$_0 == Heap[Heap[this,Node.prev],Node.invLeft];
	assume unfoldingHeap#_31_$_0 == Heap[Heap[this,Node.prev],Node.invLeft := newVers#_47_$_0];
	assume oldVers#_46_$_0 < unfoldingHeap#_31_$_0[unfoldingHeap#_31_$_0[this,Node.prev],Node.invLeft];
	assume unfoldingHeap#_31_$_1 == unfoldingHeap#_31_$_0;
	goto anon17;
anon113_Else:
	assume !$_$_condition_$1;
	assume $_$_condition_$1 <==> (!CanRead(unfoldingMask#_32_$_0,ZeroMask,Heap[this,Node.prev],Node.invLeft));
	assume CanRead(unfoldingMask#_32_$_0,ZeroMask,Heap[this,Node.prev],Node.invLeft);
	assume unfoldingHeap#_31_$_1 == Heap;
	goto anon17;
anon17:
	assume IsGoodMask(unfoldingMask#_32_$_0);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_0,ZeroMask);
	assume IsGoodMask(unfoldingMask#_32_$_0);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_0,ZeroMask);
	assume !(unfoldingHeap#_31_$_1[this,Node.prev] == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_0,ZeroMask);
	assume (unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev] == null) || (dtype(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev]) == Node#t);
	assume 1 > 0;
	assume unfoldingMask#_32_$_1 == unfoldingMask#_32_$_0[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev := unfoldingMask#_32_$_0[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev][perm$N := unfoldingMask#_32_$_0[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev][perm$N] + 1]];
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_1,ZeroMask);
	assume IsGoodMask(unfoldingMask#_32_$_1);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_1,ZeroMask);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_1,ZeroMask);
	assume !(unfoldingHeap#_31_$_1[this,Node.prev] == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_1,ZeroMask);
	assume (unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.next] == null) || (dtype(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.next]) == Node#t);
	assume 1 > 0;
	assume unfoldingMask#_32_$_2 == unfoldingMask#_32_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.next := unfoldingMask#_32_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.next][perm$N := unfoldingMask#_32_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.next][perm$N] + 1]];
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_2,ZeroMask);
	assume IsGoodMask(unfoldingMask#_32_$_2);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.next]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_2,ZeroMask);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_2,ZeroMask);
	assume !(unfoldingHeap#_31_$_1[this,Node.prev] == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_2,ZeroMask);
	assume true;
	assume 1 > 0;
	assume unfoldingMask#_32_$_3 == unfoldingMask#_32_$_2[unfoldingHeap#_31_$_1[this,Node.prev],mu := unfoldingMask#_32_$_2[unfoldingHeap#_31_$_1[this,Node.prev],mu][perm$N := unfoldingMask#_32_$_2[unfoldingHeap#_31_$_1[this,Node.prev],mu][perm$N] + 1]];
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_3,ZeroMask);
	assume IsGoodMask(unfoldingMask#_32_$_3);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],mu]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_3,ZeroMask);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_3,ZeroMask);
	if ($_$_condition_$2) { goto anon114_Then; } else { goto anon114_Else; }
anon114_Then:
	assume $_$_condition_$2;
	assume $_$_condition_$2 <==> (!(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev] == null));
	assume !(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev] == null);
	assume !(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev] == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_3,ZeroMask);
	assume Fractions(100) > 0;
	assume unfoldingMask#_32_$_4 == unfoldingMask#_32_$_3[unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev],Node.invLeft := unfoldingMask#_32_$_3[unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev],Node.invLeft][perm$R := unfoldingMask#_32_$_3[unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(unfoldingMask#_32_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev],Node.invLeft]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,ZeroMask);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,ZeroMask);
	assume predRec#_48_$_0 == Heap[Heap[this,Node.prev],Node.prev];
	assume #Node.invLeft#trigger(Heap[Heap[this,Node.prev],Node.prev]);
	assume predVer#_49_$_0 == unfoldingHeap#_31_$_1[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft];
	if ($_$_condition_$3) { goto anon115_Then; } else { goto anon115_Else; }
anon114_Else:
	assume !$_$_condition_$2;
	assume $_$_condition_$2 <==> (!(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev] == null));
	assume unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev] == null;
	assume unfoldingMask#_32_$_5 == unfoldingMask#_32_$_3;
	assume unfoldingSecMask#_33_$_5 == ZeroMask;
	goto anon35;
anon115_Then:
	assume $_$_condition_$3;
	assume $_$_condition_$3 <==> false;
	assume false;
	goto $exit;
anon115_Else:
	assume !$_$_condition_$3;
	assume $_$_condition_$3 <==> false;
	assume !false;
	assume !(predRec#_48_$_0 == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,ZeroMask);
	assume (unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev] == null) || (dtype(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev]) == Node#t);
	assume 1 > 0;
	assume unfoldingSecMask#_33_$_0 == ZeroMask[predRec#_48_$_0,Node.prev := ZeroMask[predRec#_48_$_0,Node.prev][perm$N := ZeroMask[predRec#_48_$_0,Node.prev][perm$N] + 1]];
	assume wf(unfoldingHeap#_31_$_1,unfoldingSecMask#_33_$_0,unfoldingSecMask#_33_$_0);
	assume IsGoodMask(unfoldingMask#_32_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_0);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_0);
	assume !(predRec#_48_$_0 == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_0);
	assume (unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.next] == null) || (dtype(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.next]) == Node#t);
	assume 1 > 0;
	assume unfoldingSecMask#_33_$_1 == unfoldingSecMask#_33_$_0[predRec#_48_$_0,Node.next := unfoldingSecMask#_33_$_0[predRec#_48_$_0,Node.next][perm$N := unfoldingSecMask#_33_$_0[predRec#_48_$_0,Node.next][perm$N] + 1]];
	assume wf(unfoldingHeap#_31_$_1,unfoldingSecMask#_33_$_1,unfoldingSecMask#_33_$_1);
	assume IsGoodMask(unfoldingMask#_32_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.next]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_1);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_1);
	assume !(predRec#_48_$_0 == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_1);
	assume true;
	assume 1 > 0;
	assume unfoldingSecMask#_33_$_2 == unfoldingSecMask#_33_$_1[predRec#_48_$_0,mu := unfoldingSecMask#_33_$_1[predRec#_48_$_0,mu][perm$N := unfoldingSecMask#_33_$_1[predRec#_48_$_0,mu][perm$N] + 1]];
	assume wf(unfoldingHeap#_31_$_1,unfoldingSecMask#_33_$_2,unfoldingSecMask#_33_$_2);
	assume IsGoodMask(unfoldingMask#_32_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[predRec#_48_$_0,mu]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_2);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_2);
	if ($_$_condition_$4) { goto anon122_Then; } else { goto anon122_Else; }
anon35:
	assume IsGoodMask(unfoldingMask#_32_$_5);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_5,unfoldingSecMask#_33_$_5);
	if ($_$_condition_$5) { goto anon123_Then; } else { goto anon123_Else; }
anon122_Then:
	assume $_$_condition_$4;
	assume $_$_condition_$4 <==> (!(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev] == null));
	assume !(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev] == null);
	assume !(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev] == null);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_2);
	assume Fractions(100) > 0;
	assume unfoldingSecMask#_33_$_3 == unfoldingSecMask#_33_$_2[unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev],Node.invLeft := unfoldingSecMask#_33_$_2[unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev],Node.invLeft][perm$R := unfoldingSecMask#_33_$_2[unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(unfoldingMask#_32_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev],Node.invLeft]));
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_3);
	assume wf(unfoldingHeap#_31_$_1,unfoldingMask#_32_$_4,unfoldingSecMask#_33_$_3);
	assume unfoldingSecMask#_33_$_4 == unfoldingSecMask#_33_$_3;
	goto anon34;
anon122_Else:
	assume !$_$_condition_$4;
	assume $_$_condition_$4 <==> (!(unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev] == null));
	assume unfoldingHeap#_31_$_1[predRec#_48_$_0,Node.prev] == null;
	assume unfoldingSecMask#_33_$_4 == unfoldingSecMask#_33_$_2;
	goto anon34;
anon34:
	assume MuBelow(unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],Node.prev],mu],unfoldingHeap#_31_$_1[unfoldingHeap#_31_$_1[this,Node.prev],mu]);
	assume unfoldingMask#_32_$_5 == unfoldingMask#_32_$_4;
	assume unfoldingSecMask#_33_$_5 == unfoldingSecMask#_33_$_4;
	goto anon35;
anon123_Then:
	assume $_$_condition_$5;
	assume $_$_condition_$5 <==> false;
	assume false;
	goto $exit;
anon123_Else:
	assume !$_$_condition_$5;
	assume $_$_condition_$5 <==> false;
	assume !false;
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_3,ZeroMask);
	assume (Heap[Heap[this,Node.prev],Node.prev] == null) || (dtype(Heap[Heap[this,Node.prev],Node.prev]) == Node#t);
	assume 1 > 0;
	assume SecMask_$_0 == ZeroMask[Heap[this,Node.prev],Node.prev := ZeroMask[Heap[this,Node.prev],Node.prev][perm$N := ZeroMask[Heap[this,Node.prev],Node.prev][perm$N] + 1]];
	assume wf(Heap,SecMask_$_0,SecMask_$_0);
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],Node.prev]));
	assume wf(Heap,Mask_$_3,SecMask_$_0);
	assume wf(Heap,Mask_$_3,SecMask_$_0);
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_3,SecMask_$_0);
	assume (Heap[Heap[this,Node.prev],Node.next] == null) || (dtype(Heap[Heap[this,Node.prev],Node.next]) == Node#t);
	assume 1 > 0;
	assume SecMask_$_1 == SecMask_$_0[Heap[this,Node.prev],Node.next := SecMask_$_0[Heap[this,Node.prev],Node.next][perm$N := SecMask_$_0[Heap[this,Node.prev],Node.next][perm$N] + 1]];
	assume wf(Heap,SecMask_$_1,SecMask_$_1);
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],Node.next]));
	assume wf(Heap,Mask_$_3,SecMask_$_1);
	assume wf(Heap,Mask_$_3,SecMask_$_1);
	assume !(Heap[this,Node.prev] == null);
	assume wf(Heap,Mask_$_3,SecMask_$_1);
	assume true;
	assume 1 > 0;
	assume SecMask_$_2 == SecMask_$_1[Heap[this,Node.prev],mu := SecMask_$_1[Heap[this,Node.prev],mu][perm$N := SecMask_$_1[Heap[this,Node.prev],mu][perm$N] + 1]];
	assume wf(Heap,SecMask_$_2,SecMask_$_2);
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.prev],mu]));
	assume wf(Heap,Mask_$_3,SecMask_$_2);
	assume wf(Heap,Mask_$_3,SecMask_$_2);
	if ($_$_condition_$6) { goto anon130_Then; } else { goto anon130_Else; }
anon130_Then:
	assume $_$_condition_$6;
	assume $_$_condition_$6 <==> (!(Heap[Heap[this,Node.prev],Node.prev] == null));
	assume !(Heap[Heap[this,Node.prev],Node.prev] == null);
	assume !(Heap[Heap[this,Node.prev],Node.prev] == null);
	assume wf(Heap,Mask_$_3,SecMask_$_2);
	assume Fractions(100) > 0;
	assume SecMask_$_3 == SecMask_$_2[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft := SecMask_$_2[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft][perm$R := SecMask_$_2[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft][perm$R] + Fractions(100)]];
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap[Heap[Heap[this,Node.prev],Node.prev],Node.invLeft]));
	assume wf(Heap,Mask_$_3,SecMask_$_3);
	assume wf(Heap,Mask_$_3,SecMask_$_3);
	assume SecMask_$_4 == SecMask_$_3;
	goto anon51;
anon130_Else:
	assume !$_$_condition_$6;
	assume $_$_condition_$6 <==> (!(Heap[Heap[this,Node.prev],Node.prev] == null));
	assume Heap[Heap[this,Node.prev],Node.prev] == null;
	assume SecMask_$_4 == SecMask_$_2;
	goto anon51;
anon51:
	assert { :msg "  18.67: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  18.67: Location might not be readable." } true ==> CanRead(unfoldingMask#_32_$_5,unfoldingSecMask#_33_$_5,this,Node.prev);
	assert { :msg "  18.67: Receiver might be null." } true ==> (!(unfoldingHeap#_31_$_1[this,Node.prev] == null));
	assert { :msg "  18.67: Location might not be readable." } true ==> CanRead(unfoldingMask#_32_$_5,unfoldingSecMask#_33_$_5,unfoldingHeap#_31_$_1[this,Node.prev],mu);
	assert { :msg "  18.78: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  18.78: Location might not be readable." } true ==> CanRead(unfoldingMask#_32_$_5,unfoldingSecMask#_33_$_5,this,mu);
	assume MuBelow(Heap[Heap[this,Node.prev],mu],Heap[this,mu]);
	assume Mask_$_4 == Mask_$_3;
	assume SecMask_$_5 == SecMask_$_4;
	goto anon52;
anon131_Then:
	assume $_$_condition_$7;
	assume $_$_condition_$7 <==> (!(Heap[this,Node.next] == null));
	assume !(Heap[this,Node.next] == null);
	assert { :msg "  19.25: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  19.25: Location might not be readable." } true ==> CanRead(Mask_$_4,SecMask_$_5,this,Node.next);
	assert { :msg "  19.25: Receiver might be null." } !(Heap[this,Node.next] == null);
	assert { :msg "  19.25: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  19.25: Location might not be readable." } true ==> CanRead(Mask_$_4,SecMask_$_5,this,Node.next);
	assume !(Heap[this,Node.next] == null);
	assume wf(Heap,Mask_$_4,SecMask_$_5);
	assume Fractions(100) > 0;
	assume Mask_$_5 == Mask_$_4[Heap[this,Node.next],Node.invRight := Mask_$_4[Heap[this,Node.next],Node.invRight][perm$R := Mask_$_4[Heap[this,Node.next],Node.invRight][perm$R] + Fractions(100)]];
	assume IsGoodMask(Mask_$_5);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.next],Node.invRight]));
	assume wf(Heap,Mask_$_5,SecMask_$_5);
	assume wf(Heap,Mask_$_5,SecMask_$_5);
	assume predRec#_63_$_0 == Heap[this,Node.next];
	assume #Node.invRight#trigger(Heap[this,Node.next]);
	assume predVer#_64_$_0 == Heap[Heap[this,Node.next],Node.invRight];
	assume (0 < unfoldingK#_71) && ((1000 * unfoldingK#_71) < Fractions(1));
	assert { :msg "  19.52: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  19.52: Location might not be readable." } true ==> CanRead(Mask_$_5,SecMask_$_5,this,Node.next);
	assert { :msg "  19.52: Receiver might be null." } true ==> (!(Heap[this,Node.next] == null));
	assume wf(Heap,Mask_$_5,SecMask_$_5);
	assert { :msg "  19.42: Unfolding might fail. The permission at 19.52 might not be positive." } Fractions(100) > 0;
	assert { :msg "  19.42: Unfolding might fail. Insufficient fraction at 19.52 for Node.invRight." } (Fractions(100) <= Mask_$_5[Heap[this,Node.next],Node.invRight][perm$R]) && ((Fractions(100) == Mask_$_5[Heap[this,Node.next],Node.invRight][perm$R]) ==> (0 <= Mask_$_5[Heap[this,Node.next],Node.invRight][perm$N]));
	assume unfoldingMask#_67_$_0 == Mask_$_5[Heap[this,Node.next],Node.invRight := Mask_$_5[Heap[this,Node.next],Node.invRight][perm$R := Mask_$_5[Heap[this,Node.next],Node.invRight][perm$R] - Fractions(100)]];
	if ($_$_condition_$8) { goto anon132_Then; } else { goto anon132_Else; }
anon131_Else:
	assume !$_$_condition_$7;
	assume $_$_condition_$7 <==> (!(Heap[this,Node.next] == null));
	assume Heap[this,Node.next] == null;
	assume SecMask_$_11 == SecMask_$_5;
	assume Mask_$_6 == Mask_$_4;
	goto anon104;
anon132_Then:
	assume $_$_condition_$8;
	assume $_$_condition_$8 <==> false;
	assume false;
	goto $exit;
anon132_Else:
	assume !$_$_condition_$8;
	assume $_$_condition_$8 <==> false;
	assume !false;
	if ($_$_condition_$9) { goto anon139_Then; } else { goto anon139_Else; }
anon104:
	assume IsGoodMask(Mask_$_6);
	assume wf(Heap,Mask_$_6,SecMask_$_11);
	assert { :msg "  16.5: SMOKE-TEST-51. (Predicate Node.inv is equivalent to false.)" } !(1 == 1);
	goto $exit;
anon139_Then:
	assume $_$_condition_$9;
	assume $_$_condition_$9 <==> (!CanRead(unfoldingMask#_67_$_0,SecMask_$_5,Heap[this,Node.next],Node.invRight));
	assume !CanRead(unfoldingMask#_67_$_0,SecMask_$_5,Heap[this,Node.next],Node.invRight);
	assume oldVers#_81_$_0 == Heap[Heap[this,Node.next],Node.invRight];
	assume unfoldingHeap#_66_$_0 == Heap[Heap[this,Node.next],Node.invRight := newVers#_82_$_0];
	assume oldVers#_81_$_0 < unfoldingHeap#_66_$_0[unfoldingHeap#_66_$_0[this,Node.next],Node.invRight];
	assume unfoldingHeap#_66_$_1 == unfoldingHeap#_66_$_0;
	goto anon69;
anon139_Else:
	assume !$_$_condition_$9;
	assume $_$_condition_$9 <==> (!CanRead(unfoldingMask#_67_$_0,SecMask_$_5,Heap[this,Node.next],Node.invRight));
	assume CanRead(unfoldingMask#_67_$_0,SecMask_$_5,Heap[this,Node.next],Node.invRight);
	assume unfoldingHeap#_66_$_1 == Heap;
	goto anon69;
anon69:
	assume IsGoodMask(unfoldingMask#_67_$_0);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_0,SecMask_$_5);
	assume IsGoodMask(unfoldingMask#_67_$_0);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_0,SecMask_$_5);
	assume !(unfoldingHeap#_66_$_1[this,Node.next] == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_0,SecMask_$_5);
	assume (unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.prev] == null) || (dtype(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.prev]) == Node#t);
	assume 1 > 0;
	assume unfoldingMask#_67_$_1 == unfoldingMask#_67_$_0[unfoldingHeap#_66_$_1[this,Node.next],Node.prev := unfoldingMask#_67_$_0[unfoldingHeap#_66_$_1[this,Node.next],Node.prev][perm$N := unfoldingMask#_67_$_0[unfoldingHeap#_66_$_1[this,Node.next],Node.prev][perm$N] + 1]];
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_1,SecMask_$_5);
	assume IsGoodMask(unfoldingMask#_67_$_1);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.prev]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_1,SecMask_$_5);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_1,SecMask_$_5);
	assume !(unfoldingHeap#_66_$_1[this,Node.next] == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_1,SecMask_$_5);
	assume (unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next] == null) || (dtype(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next]) == Node#t);
	assume 1 > 0;
	assume unfoldingMask#_67_$_2 == unfoldingMask#_67_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next := unfoldingMask#_67_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next][perm$N := unfoldingMask#_67_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next][perm$N] + 1]];
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_2,SecMask_$_5);
	assume IsGoodMask(unfoldingMask#_67_$_2);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_2,SecMask_$_5);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_2,SecMask_$_5);
	assume !(unfoldingHeap#_66_$_1[this,Node.next] == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_2,SecMask_$_5);
	assume true;
	assume 1 > 0;
	assume unfoldingMask#_67_$_3 == unfoldingMask#_67_$_2[unfoldingHeap#_66_$_1[this,Node.next],mu := unfoldingMask#_67_$_2[unfoldingHeap#_66_$_1[this,Node.next],mu][perm$N := unfoldingMask#_67_$_2[unfoldingHeap#_66_$_1[this,Node.next],mu][perm$N] + 1]];
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_3,SecMask_$_5);
	assume IsGoodMask(unfoldingMask#_67_$_3);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],mu]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_3,SecMask_$_5);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_3,SecMask_$_5);
	if ($_$_condition_$10) { goto anon140_Then; } else { goto anon140_Else; }
anon140_Then:
	assume $_$_condition_$10;
	assume $_$_condition_$10 <==> (!(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next] == null));
	assume !(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next] == null);
	assume !(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next] == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_3,SecMask_$_5);
	assume Fractions(100) > 0;
	assume unfoldingMask#_67_$_4 == unfoldingMask#_67_$_3[unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next],Node.invRight := unfoldingMask#_67_$_3[unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next],Node.invRight][perm$R := unfoldingMask#_67_$_3[unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next],Node.invRight][perm$R] + Fractions(100)]];
	assume IsGoodMask(unfoldingMask#_67_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next],Node.invRight]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,SecMask_$_5);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,SecMask_$_5);
	assume predRec#_83_$_0 == Heap[Heap[this,Node.next],Node.next];
	assume #Node.invRight#trigger(Heap[Heap[this,Node.next],Node.next]);
	assume predVer#_84_$_0 == unfoldingHeap#_66_$_1[Heap[Heap[this,Node.next],Node.next],Node.invRight];
	if ($_$_condition_$11) { goto anon141_Then; } else { goto anon141_Else; }
anon140_Else:
	assume !$_$_condition_$10;
	assume $_$_condition_$10 <==> (!(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next] == null));
	assume unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next] == null;
	assume unfoldingMask#_67_$_5 == unfoldingMask#_67_$_3;
	assume unfoldingSecMask#_68_$_5 == SecMask_$_5;
	goto anon87;
anon141_Then:
	assume $_$_condition_$11;
	assume $_$_condition_$11 <==> false;
	assume false;
	goto $exit;
anon141_Else:
	assume !$_$_condition_$11;
	assume $_$_condition_$11 <==> false;
	assume !false;
	assume !(predRec#_83_$_0 == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,SecMask_$_5);
	assume (unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.prev] == null) || (dtype(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.prev]) == Node#t);
	assume 1 > 0;
	assume unfoldingSecMask#_68_$_0 == SecMask_$_5[predRec#_83_$_0,Node.prev := SecMask_$_5[predRec#_83_$_0,Node.prev][perm$N := SecMask_$_5[predRec#_83_$_0,Node.prev][perm$N] + 1]];
	assume wf(unfoldingHeap#_66_$_1,unfoldingSecMask#_68_$_0,unfoldingSecMask#_68_$_0);
	assume IsGoodMask(unfoldingMask#_67_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.prev]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_0);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_0);
	assume !(predRec#_83_$_0 == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_0);
	assume (unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next] == null) || (dtype(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next]) == Node#t);
	assume 1 > 0;
	assume unfoldingSecMask#_68_$_1 == unfoldingSecMask#_68_$_0[predRec#_83_$_0,Node.next := unfoldingSecMask#_68_$_0[predRec#_83_$_0,Node.next][perm$N := unfoldingSecMask#_68_$_0[predRec#_83_$_0,Node.next][perm$N] + 1]];
	assume wf(unfoldingHeap#_66_$_1,unfoldingSecMask#_68_$_1,unfoldingSecMask#_68_$_1);
	assume IsGoodMask(unfoldingMask#_67_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_1);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_1);
	assume !(predRec#_83_$_0 == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_1);
	assume true;
	assume 1 > 0;
	assume unfoldingSecMask#_68_$_2 == unfoldingSecMask#_68_$_1[predRec#_83_$_0,mu := unfoldingSecMask#_68_$_1[predRec#_83_$_0,mu][perm$N := unfoldingSecMask#_68_$_1[predRec#_83_$_0,mu][perm$N] + 1]];
	assume wf(unfoldingHeap#_66_$_1,unfoldingSecMask#_68_$_2,unfoldingSecMask#_68_$_2);
	assume IsGoodMask(unfoldingMask#_67_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[predRec#_83_$_0,mu]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_2);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_2);
	if ($_$_condition_$12) { goto anon148_Then; } else { goto anon148_Else; }
anon87:
	assume IsGoodMask(unfoldingMask#_67_$_5);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_5,unfoldingSecMask#_68_$_5);
	if ($_$_condition_$13) { goto anon149_Then; } else { goto anon149_Else; }
anon148_Then:
	assume $_$_condition_$12;
	assume $_$_condition_$12 <==> (!(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next] == null));
	assume !(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next] == null);
	assume !(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next] == null);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_2);
	assume Fractions(100) > 0;
	assume unfoldingSecMask#_68_$_3 == unfoldingSecMask#_68_$_2[unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next],Node.invRight := unfoldingSecMask#_68_$_2[unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next],Node.invRight][perm$R := unfoldingSecMask#_68_$_2[unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next],Node.invRight][perm$R] + Fractions(100)]];
	assume IsGoodMask(unfoldingMask#_67_$_4);
	assume IsGoodState(heapFragment(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next],Node.invRight]));
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_3);
	assume wf(unfoldingHeap#_66_$_1,unfoldingMask#_67_$_4,unfoldingSecMask#_68_$_3);
	assume unfoldingSecMask#_68_$_4 == unfoldingSecMask#_68_$_3;
	goto anon86;
anon148_Else:
	assume !$_$_condition_$12;
	assume $_$_condition_$12 <==> (!(unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next] == null));
	assume unfoldingHeap#_66_$_1[predRec#_83_$_0,Node.next] == null;
	assume unfoldingSecMask#_68_$_4 == unfoldingSecMask#_68_$_2;
	goto anon86;
anon86:
	assume MuBelow(unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],mu],unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[unfoldingHeap#_66_$_1[this,Node.next],Node.next],mu]);
	assume unfoldingMask#_67_$_5 == unfoldingMask#_67_$_4;
	assume unfoldingSecMask#_68_$_5 == unfoldingSecMask#_68_$_4;
	goto anon87;
anon149_Then:
	assume $_$_condition_$13;
	assume $_$_condition_$13 <==> false;
	assume false;
	goto $exit;
anon149_Else:
	assume !$_$_condition_$13;
	assume $_$_condition_$13 <==> false;
	assume !false;
	assume !(Heap[this,Node.next] == null);
	assume wf(Heap,Mask_$_5,SecMask_$_5);
	assume (Heap[Heap[this,Node.next],Node.prev] == null) || (dtype(Heap[Heap[this,Node.next],Node.prev]) == Node#t);
	assume 1 > 0;
	assume SecMask_$_6 == SecMask_$_5[Heap[this,Node.next],Node.prev := SecMask_$_5[Heap[this,Node.next],Node.prev][perm$N := SecMask_$_5[Heap[this,Node.next],Node.prev][perm$N] + 1]];
	assume wf(Heap,SecMask_$_6,SecMask_$_6);
	assume IsGoodMask(Mask_$_5);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.next],Node.prev]));
	assume wf(Heap,Mask_$_5,SecMask_$_6);
	assume wf(Heap,Mask_$_5,SecMask_$_6);
	assume !(Heap[this,Node.next] == null);
	assume wf(Heap,Mask_$_5,SecMask_$_6);
	assume (Heap[Heap[this,Node.next],Node.next] == null) || (dtype(Heap[Heap[this,Node.next],Node.next]) == Node#t);
	assume 1 > 0;
	assume SecMask_$_7 == SecMask_$_6[Heap[this,Node.next],Node.next := SecMask_$_6[Heap[this,Node.next],Node.next][perm$N := SecMask_$_6[Heap[this,Node.next],Node.next][perm$N] + 1]];
	assume wf(Heap,SecMask_$_7,SecMask_$_7);
	assume IsGoodMask(Mask_$_5);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.next],Node.next]));
	assume wf(Heap,Mask_$_5,SecMask_$_7);
	assume wf(Heap,Mask_$_5,SecMask_$_7);
	assume !(Heap[this,Node.next] == null);
	assume wf(Heap,Mask_$_5,SecMask_$_7);
	assume true;
	assume 1 > 0;
	assume SecMask_$_8 == SecMask_$_7[Heap[this,Node.next],mu := SecMask_$_7[Heap[this,Node.next],mu][perm$N := SecMask_$_7[Heap[this,Node.next],mu][perm$N] + 1]];
	assume wf(Heap,SecMask_$_8,SecMask_$_8);
	assume IsGoodMask(Mask_$_5);
	assume IsGoodState(heapFragment(Heap[Heap[this,Node.next],mu]));
	assume wf(Heap,Mask_$_5,SecMask_$_8);
	assume wf(Heap,Mask_$_5,SecMask_$_8);
	if ($_$_condition_$14) { goto anon156_Then; } else { goto anon156_Else; }
anon156_Then:
	assume $_$_condition_$14;
	assume $_$_condition_$14 <==> (!(Heap[Heap[this,Node.next],Node.next] == null));
	assume !(Heap[Heap[this,Node.next],Node.next] == null);
	assume !(Heap[Heap[this,Node.next],Node.next] == null);
	assume wf(Heap,Mask_$_5,SecMask_$_8);
	assume Fractions(100) > 0;
	assume SecMask_$_9 == SecMask_$_8[Heap[Heap[this,Node.next],Node.next],Node.invRight := SecMask_$_8[Heap[Heap[this,Node.next],Node.next],Node.invRight][perm$R := SecMask_$_8[Heap[Heap[this,Node.next],Node.next],Node.invRight][perm$R] + Fractions(100)]];
	assume IsGoodMask(Mask_$_5);
	assume IsGoodState(heapFragment(Heap[Heap[Heap[this,Node.next],Node.next],Node.invRight]));
	assume wf(Heap,Mask_$_5,SecMask_$_9);
	assume wf(Heap,Mask_$_5,SecMask_$_9);
	assume SecMask_$_10 == SecMask_$_9;
	goto anon103;
anon156_Else:
	assume !$_$_condition_$14;
	assume $_$_condition_$14 <==> (!(Heap[Heap[this,Node.next],Node.next] == null));
	assume Heap[Heap[this,Node.next],Node.next] == null;
	assume SecMask_$_10 == SecMask_$_8;
	goto anon103;
anon103:
	assert { :msg "  19.69: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  19.69: Location might not be readable." } true ==> CanRead(unfoldingMask#_67_$_5,unfoldingSecMask#_68_$_5,this,mu);
	assert { :msg "  19.80: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  19.80: Location might not be readable." } true ==> CanRead(unfoldingMask#_67_$_5,unfoldingSecMask#_68_$_5,this,Node.next);
	assert { :msg "  19.80: Receiver might be null." } true ==> (!(unfoldingHeap#_66_$_1[this,Node.next] == null));
	assert { :msg "  19.80: Location might not be readable." } true ==> CanRead(unfoldingMask#_67_$_5,unfoldingSecMask#_68_$_5,unfoldingHeap#_66_$_1[this,Node.next],mu);
	assume MuBelow(Heap[this,mu],Heap[Heap[this,Node.next],mu]);
	assume SecMask_$_11 == SecMask_$_10;
	assume Mask_$_6 == Mask_$_5;
	goto anon104;
}
