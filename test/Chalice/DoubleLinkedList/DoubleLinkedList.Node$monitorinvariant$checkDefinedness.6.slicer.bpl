type Integer = int;
type Boolean = bool;
type HeapType = <a>[ref,Field (a)]a;
type MaskType = <a>[ref,Field (a)][PermissionComponent]int;
type CreditsType = [ref]int;
type ArgSeq = <T>[int]T;
type Field m0;
type ref;
type PermissionComponent;
type PartialHeapType;
type ModuleName;
type TypeName;
type Mu;
const null : ref;
const unique perm$R : PermissionComponent;
const unique perm$N : PermissionComponent;
const Permission$denominator : int;
const Permission$FullFraction : int;
const Permission$Zero : [PermissionComponent]int;
const Permission$Full : [PermissionComponent]int;
const ZeroMask : MaskType;
const unique joinable : Field (int);
const unique forkK : Field (int);
const channelK : int;
const monitorK : int;
const predicateK : int;
const emptyPartialHeap : PartialHeapType;
const unique mu : Field (Mu);
const $LockBottom : Mu;
const unique held : Field (int);
const unique rdheld : Field (bool);
const ZeroCredits : CreditsType;
const unique Node#t : TypeName;
const unique Node.next : Field (ref);
const unique Node.prev : Field (ref);
const unique Node.inv : Field (int);
const unique Node.invLeft : Field (int);
const unique Node.invRight : Field (int);
function Fractions(int) : int;
function IsGoodState(PartialHeapType) : bool;
function heapFragment <T> (T) : PartialHeapType;
function dtype(ref) : TypeName;
function MuBelow(Mu,Mu) : bool;
function wf(HeapType,MaskType,MaskType) : bool;
function IsGoodExhaleState(HeapType,HeapType,MaskType,MaskType) : bool;
function {:expand  false} CanRead <T> (MaskType,MaskType,ref,Field (T)) : bool;
function {:expand  true} IsGoodMask(MaskType) : bool;
function DecPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function IncPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function NonPredicateField <T> (Field (T)) : bool;
function PredicateField <T> (Field (T)) : bool;
function ite <T> (bool,T,T) : T;
var Heap : HeapType;
var Mask : MaskType;
var SecMask : MaskType;
var methodK#_9 : int;
var h0#_0 : HeapType;
var m0#_1 : MaskType;
var sm0#_2 : MaskType;
var h1#_4 : HeapType;
var m1#_5 : MaskType;
var sm1#_6 : MaskType;
var h1#_4_$_0 : HeapType;
var m1#_5_$_0 : MaskType;
var m1#_5_$_1 : MaskType;
var m1#_5_$_2 : MaskType;
var m1#_5_$_3 : MaskType;
var m1#_5_$_4 : MaskType;
var m1#_5_$_5 : MaskType;
var m1#_5_$_9 : MaskType;
var m1#_5_$_13 : MaskType;
var m1#_5_$_17 : MaskType;
var m1#_5_$_21 : MaskType;
var Heap_$_0 : HeapType;
var Mask_$_0 : MaskType;
var Mask_$_1 : MaskType;
var Mask_$_2 : MaskType;
var Mask_$_3 : MaskType;
var Mask_$_4 : MaskType;
var Mask_$_5 : MaskType;
var Mask_$_9 : MaskType;
var Mask_$_13 : MaskType;
var Mask_$_17 : MaskType;
var Mask_$_21 : MaskType;
var exhaleMask#_11_$_0 : MaskType;
var exhaleMask#_11_$_1 : MaskType;
var exhaleMask#_11_$_2 : MaskType;
var exhaleMask#_11_$_3 : MaskType;
var exhaleMask#_11_$_4 : MaskType;
var exhaleMask#_11_$_5 : MaskType;
var exhaleMask#_11_$_9 : MaskType;
var exhaleMask#_11_$_13 : MaskType;
var exhaleMask#_11_$_17 : MaskType;
var exhaleMask#_11_$_21 : MaskType;
var exhaleHeap#_10_$_0 : HeapType;
var exhaleMask#_11_$_18 : MaskType;
var exhaleMask#_11_$_19 : MaskType;
var exhaleMask#_11_$_20 : MaskType;
var exhaleMask#_11_$_14 : MaskType;
var exhaleMask#_11_$_15 : MaskType;
var exhaleMask#_11_$_16 : MaskType;
var exhaleMask#_11_$_10 : MaskType;
var exhaleMask#_11_$_11 : MaskType;
var exhaleMask#_11_$_12 : MaskType;
var exhaleMask#_11_$_6 : MaskType;
var exhaleMask#_11_$_7 : MaskType;
var exhaleMask#_11_$_8 : MaskType;
var Mask_$_18 : MaskType;
var Mask_$_19 : MaskType;
var Mask_$_20 : MaskType;
var Mask_$_14 : MaskType;
var Mask_$_15 : MaskType;
var Mask_$_16 : MaskType;
var Mask_$_10 : MaskType;
var Mask_$_11 : MaskType;
var Mask_$_12 : MaskType;
var Mask_$_6 : MaskType;
var Mask_$_7 : MaskType;
var Mask_$_8 : MaskType;
var m1#_5_$_18 : MaskType;
var m1#_5_$_19 : MaskType;
var m1#_5_$_20 : MaskType;
var m1#_5_$_14 : MaskType;
var m1#_5_$_15 : MaskType;
var m1#_5_$_16 : MaskType;
var m1#_5_$_10 : MaskType;
var m1#_5_$_11 : MaskType;
var m1#_5_$_12 : MaskType;
var m1#_5_$_6 : MaskType;
var m1#_5_$_7 : MaskType;
var m1#_5_$_8 : MaskType;
var c1#_7 : CreditsType;
var exhaleMask#_11 : MaskType;
var exhaleHeap#_10 : HeapType;
procedure Node$monitorinvariant$checkDefinedness (this : ref)
{
	var methodK#_9 : int;
	var h0#_0 : HeapType;
	var m0#_1 : MaskType;
	var sm0#_2 : MaskType;
	var h1#_4 : HeapType;
	var m1#_5 : MaskType;
	var sm1#_6 : MaskType;
	var h1#_4_$_0 : HeapType;
	var m1#_5_$_0 : MaskType;
	var m1#_5_$_1 : MaskType;
	var m1#_5_$_2 : MaskType;
	var m1#_5_$_3 : MaskType;
	var m1#_5_$_4 : MaskType;
	var m1#_5_$_5 : MaskType;
	var m1#_5_$_6 : MaskType;
	var m1#_5_$_7 : MaskType;
	var m1#_5_$_8 : MaskType;
	var m1#_5_$_9 : MaskType;
	var m1#_5_$_10 : MaskType;
	var m1#_5_$_11 : MaskType;
	var m1#_5_$_12 : MaskType;
	var m1#_5_$_13 : MaskType;
	var m1#_5_$_14 : MaskType;
	var m1#_5_$_15 : MaskType;
	var m1#_5_$_16 : MaskType;
	var m1#_5_$_17 : MaskType;
	var m1#_5_$_18 : MaskType;
	var m1#_5_$_19 : MaskType;
	var m1#_5_$_20 : MaskType;
	var m1#_5_$_21 : MaskType;
	var Heap_$_0 : HeapType;
	var Mask_$_0 : MaskType;
	var Mask_$_1 : MaskType;
	var Mask_$_2 : MaskType;
	var Mask_$_3 : MaskType;
	var Mask_$_4 : MaskType;
	var Mask_$_5 : MaskType;
	var Mask_$_6 : MaskType;
	var Mask_$_7 : MaskType;
	var Mask_$_8 : MaskType;
	var Mask_$_9 : MaskType;
	var Mask_$_10 : MaskType;
	var Mask_$_11 : MaskType;
	var Mask_$_12 : MaskType;
	var Mask_$_13 : MaskType;
	var Mask_$_14 : MaskType;
	var Mask_$_15 : MaskType;
	var Mask_$_16 : MaskType;
	var Mask_$_17 : MaskType;
	var Mask_$_18 : MaskType;
	var Mask_$_19 : MaskType;
	var Mask_$_20 : MaskType;
	var Mask_$_21 : MaskType;
	var exhaleHeap#_10_$_0 : HeapType;
	var exhaleMask#_11_$_0 : MaskType;
	var exhaleMask#_11_$_1 : MaskType;
	var exhaleMask#_11_$_2 : MaskType;
	var exhaleMask#_11_$_3 : MaskType;
	var exhaleMask#_11_$_4 : MaskType;
	var exhaleMask#_11_$_5 : MaskType;
	var exhaleMask#_11_$_6 : MaskType;
	var exhaleMask#_11_$_7 : MaskType;
	var exhaleMask#_11_$_8 : MaskType;
	var exhaleMask#_11_$_9 : MaskType;
	var exhaleMask#_11_$_10 : MaskType;
	var exhaleMask#_11_$_11 : MaskType;
	var exhaleMask#_11_$_12 : MaskType;
	var exhaleMask#_11_$_13 : MaskType;
	var exhaleMask#_11_$_14 : MaskType;
	var exhaleMask#_11_$_15 : MaskType;
	var exhaleMask#_11_$_16 : MaskType;
	var exhaleMask#_11_$_17 : MaskType;
	var exhaleMask#_11_$_18 : MaskType;
	var exhaleMask#_11_$_19 : MaskType;
	var exhaleMask#_11_$_20 : MaskType;
	var exhaleMask#_11_$_21 : MaskType;
	var $_$_condition : bool;
	var $_$_condition_$0 : bool;
	var $_$_condition_$2 : bool;
	var $_$_condition_$4 : bool;
	var $_$_condition_$6 : bool;
	var $_$_condition_$8 : bool;
	var $_$_condition_$10 : bool;
	var $_$_condition_$12 : bool;
	var $_$_condition_$14 : bool;
	var $_$_condition_$15 : bool;
	var $_$_condition_$16 : bool;
	var $_$_condition_$17 : bool;
	var $_$_condition_$18 : bool;
	var $_$_condition_$19 : bool;
	var $_$_condition_$20 : bool;
	var $_$_condition_$21 : bool;
	var $_$_condition_$22 : bool;
	var $_$_condition_$23 : bool;
	var $_$_condition_$25 : bool;
	var $_$_condition_$27 : bool;
	var $_$_condition_$29 : bool;
	var $_$_condition_$30 : bool;
	var $_$_condition_$32 : bool;
	var $_$_condition_$34 : bool;
$start:
	assume Permission$denominator > 0;
	assume (Permission$Zero[perm$R] == 0) && (Permission$Zero[perm$N] == 0);
	assume (Permission$Full[perm$R] == Permission$FullFraction) && (Permission$Full[perm$N] == 0);
	assume ((((forall  o_$25 : ref, f_$16 : Field (Boolean) , pc_$0 : PermissionComponent :: ( ZeroMask[o_$25,f_$16][pc_$0] == 0 ))) && ((forall  o_$26 : ref, f_$17 : Field (Integer) , pc_$1 : PermissionComponent :: ( ZeroMask[o_$26,f_$17][pc_$1] == 0 )))) && ((forall  o_$27 : ref, f_$18 : Field (ref) , pc_$2 : PermissionComponent :: ( ZeroMask[o_$27,f_$18][pc_$2] == 0 )))) && ((forall  o_$28 : ref, f_$19 : Field (Mu) , pc_$3 : PermissionComponent :: ( ZeroMask[o_$28,f_$19][pc_$3] == 0 )));
	assume IsGoodMask(ZeroMask);
	assume NonPredicateField(joinable);
	assume NonPredicateField(forkK);
	assume (forall  n : Integer :: {Fractions(n)} ( Fractions(n) == (n * Permission$denominator) ));
	assume (forall  x : Integer, y : Integer :: ( ((0 <= x) && (x <= y)) ==> (Fractions(x) <= Fractions(y)) ));
	assume Permission$FullFraction == Fractions(100);
	assume (0 < channelK) && ((1000 * channelK) < Fractions(1));
	assume (0 < monitorK) && ((1000 * monitorK) < Fractions(1));
	assume (0 < predicateK) && ((1000 * predicateK) < Fractions(1));
	assume (predicateK == channelK) && (channelK == monitorK);
	assume IsGoodState(emptyPartialHeap);
	assume NonPredicateField(mu);
	assume (forall  m : Mu, n_$0 : Mu :: {MuBelow(m,n_$0),MuBelow(n_$0,m)} ( !(MuBelow(m,n_$0) && MuBelow(n_$0,m)) ));
	assume (forall  m_$0 : Mu, n_$1 : Mu, o_$0 : Mu :: {MuBelow(m_$0,n_$1),MuBelow(n_$1,o_$0)} ( (MuBelow(m_$0,n_$1) && MuBelow(n_$1,o_$0)) ==> MuBelow(m_$0,o_$0) ));
	assume (forall  m_$1 : Mu, n_$2 : Mu :: ( MuBelow(m_$1,n_$2) ==> (!(n_$2 == $LockBottom)) ));
	assume NonPredicateField(held);
	assume NonPredicateField(rdheld);
	assume (forall  eh : HeapType, h_$0 : HeapType, m_$3 : MaskType, sm_$0 : MaskType :: {IsGoodExhaleState(eh,h_$0,m_$3,sm_$0)} ( IsGoodExhaleState(eh,h_$0,m_$3,sm_$0) <==> ((((((((((((forall  o_$6_$0 : ref, f_$1_$0 : Field (Boolean)  :: {eh[o_$6_$0,f_$1_$0]} ( CanRead(m_$3,sm_$0,o_$6_$0,f_$1_$0) ==> (eh[o_$6_$0,f_$1_$0] == h_$0[o_$6_$0,f_$1_$0]) ))) && ((forall  o_$6_$1 : ref, f_$1_$1 : Field (Integer)  :: {eh[o_$6_$1,f_$1_$1]} ( CanRead(m_$3,sm_$0,o_$6_$1,f_$1_$1) ==> (eh[o_$6_$1,f_$1_$1] == h_$0[o_$6_$1,f_$1_$1]) )))) && ((forall  o_$6_$2 : ref, f_$1_$2 : Field (ref)  :: {eh[o_$6_$2,f_$1_$2]} ( CanRead(m_$3,sm_$0,o_$6_$2,f_$1_$2) ==> (eh[o_$6_$2,f_$1_$2] == h_$0[o_$6_$2,f_$1_$2]) )))) && ((forall  o_$6_$3 : ref, f_$1_$3 : Field (Mu)  :: {eh[o_$6_$3,f_$1_$3]} ( CanRead(m_$3,sm_$0,o_$6_$3,f_$1_$3) ==> (eh[o_$6_$3,f_$1_$3] == h_$0[o_$6_$3,f_$1_$3]) )))) && ((forall  o_$7 : ref :: {eh[o_$7,held]} ( (0 < eh[o_$7,held]) <==> (0 < h_$0[o_$7,held]) )))) && ((forall  o_$8 : ref :: {eh[o_$8,rdheld]} ( eh[o_$8,rdheld] <==> h_$0[o_$8,rdheld] )))) && ((forall  o_$9 : ref :: {h_$0[o_$9,held]} ( (0 < h_$0[o_$9,held]) ==> (eh[o_$9,mu] == h_$0[o_$9,mu]) )))) && ((forall  o_$10 : ref :: {h_$0[o_$10,rdheld]} ( h_$0[o_$10,rdheld] ==> (eh[o_$10,mu] == h_$0[o_$10,mu]) )))) && ((forall  o_$11 : ref :: {h_$0[o_$11,forkK]} {eh[o_$11,forkK]} ( h_$0[o_$11,forkK] == eh[o_$11,forkK] )))) && ((forall  o_$12 : ref :: {h_$0[o_$12,held]} {eh[o_$12,held]} ( h_$0[o_$12,held] == eh[o_$12,held] )))) && ((forall  o_$13 : ref, f_$2 : Field (Integer)  :: {eh[o_$13,f_$2],PredicateField(f_$2)} ( PredicateField(f_$2) ==> (h_$0[o_$13,f_$2] <= eh[o_$13,f_$2]) )))) ));
	assume ((((forall  m_$4_$0 : MaskType, sm_$1_$0 : MaskType, obj_$2 : ref, f_$3_$0 : Field (Boolean)  :: {CanRead(m_$4_$0,sm_$1_$0,obj_$2,f_$3_$0)} {:expand  false}( CanRead(m_$4_$0,sm_$1_$0,obj_$2,f_$3_$0) <==> ((((0 < m_$4_$0[obj_$2,f_$3_$0][perm$R]) || (0 < m_$4_$0[obj_$2,f_$3_$0][perm$N])) || (0 < sm_$1_$0[obj_$2,f_$3_$0][perm$R])) || (0 < sm_$1_$0[obj_$2,f_$3_$0][perm$N])) ))) && ((forall  m_$4_$1 : MaskType, sm_$1_$1 : MaskType, obj_$3 : ref, f_$3_$1 : Field (Integer)  :: {CanRead(m_$4_$1,sm_$1_$1,obj_$3,f_$3_$1)} {:expand  false}( CanRead(m_$4_$1,sm_$1_$1,obj_$3,f_$3_$1) <==> ((((0 < m_$4_$1[obj_$3,f_$3_$1][perm$R]) || (0 < m_$4_$1[obj_$3,f_$3_$1][perm$N])) || (0 < sm_$1_$1[obj_$3,f_$3_$1][perm$R])) || (0 < sm_$1_$1[obj_$3,f_$3_$1][perm$N])) )))) && ((forall  m_$4_$2 : MaskType, sm_$1_$2 : MaskType, obj_$4 : ref, f_$3_$2 : Field (ref)  :: {CanRead(m_$4_$2,sm_$1_$2,obj_$4,f_$3_$2)} {:expand  false}( CanRead(m_$4_$2,sm_$1_$2,obj_$4,f_$3_$2) <==> ((((0 < m_$4_$2[obj_$4,f_$3_$2][perm$R]) || (0 < m_$4_$2[obj_$4,f_$3_$2][perm$N])) || (0 < sm_$1_$2[obj_$4,f_$3_$2][perm$R])) || (0 < sm_$1_$2[obj_$4,f_$3_$2][perm$N])) )))) && ((forall  m_$4_$3 : MaskType, sm_$1_$3 : MaskType, obj_$5 : ref, f_$3_$3 : Field (Mu)  :: {CanRead(m_$4_$3,sm_$1_$3,obj_$5,f_$3_$3)} {:expand  false}( CanRead(m_$4_$3,sm_$1_$3,obj_$5,f_$3_$3) <==> ((((0 < m_$4_$3[obj_$5,f_$3_$3][perm$R]) || (0 < m_$4_$3[obj_$5,f_$3_$3][perm$N])) || (0 < sm_$1_$3[obj_$5,f_$3_$3][perm$R])) || (0 < sm_$1_$3[obj_$5,f_$3_$3][perm$N])) )));
	assume (forall  m_$7 : MaskType :: {IsGoodMask(m_$7)} {:expand  true}( IsGoodMask(m_$7) <==> (((((forall  o_$14_$0 : ref, f_$6_$0 : Field (Boolean)  :: ( ((0 <= m_$7[o_$14_$0,f_$6_$0][perm$R]) && (NonPredicateField(f_$6_$0) ==> ((m_$7[o_$14_$0,f_$6_$0][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$0,f_$6_$0][perm$N]) ==> (m_$7[o_$14_$0,f_$6_$0][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$0,f_$6_$0][perm$N] < 0) ==> (0 < m_$7[o_$14_$0,f_$6_$0][perm$R])) ))) && ((forall  o_$14_$1 : ref, f_$6_$1 : Field (Integer)  :: ( ((0 <= m_$7[o_$14_$1,f_$6_$1][perm$R]) && (NonPredicateField(f_$6_$1) ==> ((m_$7[o_$14_$1,f_$6_$1][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$1,f_$6_$1][perm$N]) ==> (m_$7[o_$14_$1,f_$6_$1][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$1,f_$6_$1][perm$N] < 0) ==> (0 < m_$7[o_$14_$1,f_$6_$1][perm$R])) )))) && ((forall  o_$14_$2 : ref, f_$6_$2 : Field (ref)  :: ( ((0 <= m_$7[o_$14_$2,f_$6_$2][perm$R]) && (NonPredicateField(f_$6_$2) ==> ((m_$7[o_$14_$2,f_$6_$2][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$2,f_$6_$2][perm$N]) ==> (m_$7[o_$14_$2,f_$6_$2][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$2,f_$6_$2][perm$N] < 0) ==> (0 < m_$7[o_$14_$2,f_$6_$2][perm$R])) )))) && ((forall  o_$14_$3 : ref, f_$6_$3 : Field (Mu)  :: ( ((0 <= m_$7[o_$14_$3,f_$6_$3][perm$R]) && (NonPredicateField(f_$6_$3) ==> ((m_$7[o_$14_$3,f_$6_$3][perm$R] <= Permission$FullFraction) && ((0 < m_$7[o_$14_$3,f_$6_$3][perm$N]) ==> (m_$7[o_$14_$3,f_$6_$3][perm$R] < Permission$FullFraction))))) && ((m_$7[o_$14_$3,f_$6_$3][perm$N] < 0) ==> (0 < m_$7[o_$14_$3,f_$6_$3][perm$R])) )))) ));
	assume (forall  h_$1 : HeapType, m_$8 : MaskType, sm_$2 : MaskType, o_$15 : ref, q : ref :: {wf(h_$1,m_$8,sm_$2),h_$1[o_$15,mu],h_$1[q,mu]} ( (((wf(h_$1,m_$8,sm_$2) && (!(o_$15 == q))) && ((0 < h_$1[o_$15,held]) || h_$1[o_$15,rdheld])) && ((0 < h_$1[q,held]) || h_$1[q,rdheld])) ==> (!(h_$1[o_$15,mu] == h_$1[q,mu])) ));
	assume ((((((((((((((((forall  m_$9_$0 : MaskType, o_$16_$0 : ref, f_$7_$0 : Field (Boolean) , howMuch_$3 : Integer, q_$0_$0 : ref, g_$4 : Field (Boolean)  :: {DecPerm(m_$9_$0,o_$16_$0,f_$7_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R]} ( DecPerm(m_$9_$0,o_$16_$0,f_$7_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R] == ite((o_$16_$0 == q_$0_$0) && (f_$7_$0 == g_$4),m_$9_$0[q_$0_$0,g_$4][perm$R] - howMuch_$3,m_$9_$0[q_$0_$0,g_$4][perm$R]) ))) && ((forall  m_$9_$1 : MaskType, o_$16_$1 : ref, f_$7_$1 : Field (Integer) , howMuch_$4 : Integer, q_$0_$1 : ref, g_$5 : Field (Boolean)  :: {DecPerm(m_$9_$1,o_$16_$1,f_$7_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R]} ( DecPerm(m_$9_$1,o_$16_$1,f_$7_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R] == ite((o_$16_$1 == q_$0_$1) && false,m_$9_$1[q_$0_$1,g_$5][perm$R] - howMuch_$4,m_$9_$1[q_$0_$1,g_$5][perm$R]) )))) && ((forall  m_$9_$2 : MaskType, o_$16_$2 : ref, f_$7_$2 : Field (ref) , howMuch_$5 : Integer, q_$0_$2 : ref, g_$6 : Field (Boolean)  :: {DecPerm(m_$9_$2,o_$16_$2,f_$7_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R]} ( DecPerm(m_$9_$2,o_$16_$2,f_$7_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R] == ite((o_$16_$2 == q_$0_$2) && false,m_$9_$2[q_$0_$2,g_$6][perm$R] - howMuch_$5,m_$9_$2[q_$0_$2,g_$6][perm$R]) )))) && ((forall  m_$9_$3 : MaskType, o_$16_$3 : ref, f_$7_$3 : Field (Mu) , howMuch_$6 : Integer, q_$0_$3 : ref, g_$7 : Field (Boolean)  :: {DecPerm(m_$9_$3,o_$16_$3,f_$7_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R]} ( DecPerm(m_$9_$3,o_$16_$3,f_$7_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R] == ite((o_$16_$3 == q_$0_$3) && false,m_$9_$3[q_$0_$3,g_$7][perm$R] - howMuch_$6,m_$9_$3[q_$0_$3,g_$7][perm$R]) )))) && ((forall  m_$9_$4 : MaskType, o_$16_$4 : ref, f_$7_$4 : Field (Boolean) , howMuch_$7 : Integer, q_$0_$4 : ref, g_$8 : Field (Integer)  :: {DecPerm(m_$9_$4,o_$16_$4,f_$7_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R]} ( DecPerm(m_$9_$4,o_$16_$4,f_$7_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R] == ite((o_$16_$4 == q_$0_$4) && false,m_$9_$4[q_$0_$4,g_$8][perm$R] - howMuch_$7,m_$9_$4[q_$0_$4,g_$8][perm$R]) )))) && ((forall  m_$9_$5 : MaskType, o_$16_$5 : ref, f_$7_$5 : Field (Integer) , howMuch_$8 : Integer, q_$0_$5 : ref, g_$9 : Field (Integer)  :: {DecPerm(m_$9_$5,o_$16_$5,f_$7_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R]} ( DecPerm(m_$9_$5,o_$16_$5,f_$7_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R] == ite((o_$16_$5 == q_$0_$5) && (f_$7_$5 == g_$9),m_$9_$5[q_$0_$5,g_$9][perm$R] - howMuch_$8,m_$9_$5[q_$0_$5,g_$9][perm$R]) )))) && ((forall  m_$9_$6 : MaskType, o_$16_$6 : ref, f_$7_$6 : Field (ref) , howMuch_$9 : Integer, q_$0_$6 : ref, g_$10 : Field (Integer)  :: {DecPerm(m_$9_$6,o_$16_$6,f_$7_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R]} ( DecPerm(m_$9_$6,o_$16_$6,f_$7_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R] == ite((o_$16_$6 == q_$0_$6) && false,m_$9_$6[q_$0_$6,g_$10][perm$R] - howMuch_$9,m_$9_$6[q_$0_$6,g_$10][perm$R]) )))) && ((forall  m_$9_$7 : MaskType, o_$16_$7 : ref, f_$7_$7 : Field (Mu) , howMuch_$10 : Integer, q_$0_$7 : ref, g_$11 : Field (Integer)  :: {DecPerm(m_$9_$7,o_$16_$7,f_$7_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R]} ( DecPerm(m_$9_$7,o_$16_$7,f_$7_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R] == ite((o_$16_$7 == q_$0_$7) && false,m_$9_$7[q_$0_$7,g_$11][perm$R] - howMuch_$10,m_$9_$7[q_$0_$7,g_$11][perm$R]) )))) && ((forall  m_$9_$8 : MaskType, o_$16_$8 : ref, f_$7_$8 : Field (Boolean) , howMuch_$11 : Integer, q_$0_$8 : ref, g_$12 : Field (ref)  :: {DecPerm(m_$9_$8,o_$16_$8,f_$7_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R]} ( DecPerm(m_$9_$8,o_$16_$8,f_$7_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R] == ite((o_$16_$8 == q_$0_$8) && false,m_$9_$8[q_$0_$8,g_$12][perm$R] - howMuch_$11,m_$9_$8[q_$0_$8,g_$12][perm$R]) )))) && ((forall  m_$9_$9 : MaskType, o_$16_$9 : ref, f_$7_$9 : Field (Integer) , howMuch_$12 : Integer, q_$0_$9 : ref, g_$13 : Field (ref)  :: {DecPerm(m_$9_$9,o_$16_$9,f_$7_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R]} ( DecPerm(m_$9_$9,o_$16_$9,f_$7_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R] == ite((o_$16_$9 == q_$0_$9) && false,m_$9_$9[q_$0_$9,g_$13][perm$R] - howMuch_$12,m_$9_$9[q_$0_$9,g_$13][perm$R]) )))) && ((forall  m_$9_$10 : MaskType, o_$16_$10 : ref, f_$7_$10 : Field (ref) , howMuch_$13 : Integer, q_$0_$10 : ref, g_$14 : Field (ref)  :: {DecPerm(m_$9_$10,o_$16_$10,f_$7_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R]} ( DecPerm(m_$9_$10,o_$16_$10,f_$7_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R] == ite((o_$16_$10 == q_$0_$10) && (f_$7_$10 == g_$14),m_$9_$10[q_$0_$10,g_$14][perm$R] - howMuch_$13,m_$9_$10[q_$0_$10,g_$14][perm$R]) )))) && ((forall  m_$9_$11 : MaskType, o_$16_$11 : ref, f_$7_$11 : Field (Mu) , howMuch_$14 : Integer, q_$0_$11 : ref, g_$15 : Field (ref)  :: {DecPerm(m_$9_$11,o_$16_$11,f_$7_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R]} ( DecPerm(m_$9_$11,o_$16_$11,f_$7_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R] == ite((o_$16_$11 == q_$0_$11) && false,m_$9_$11[q_$0_$11,g_$15][perm$R] - howMuch_$14,m_$9_$11[q_$0_$11,g_$15][perm$R]) )))) && ((forall  m_$9_$12 : MaskType, o_$16_$12 : ref, f_$7_$12 : Field (Boolean) , howMuch_$15 : Integer, q_$0_$12 : ref, g_$16 : Field (Mu)  :: {DecPerm(m_$9_$12,o_$16_$12,f_$7_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R]} ( DecPerm(m_$9_$12,o_$16_$12,f_$7_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R] == ite((o_$16_$12 == q_$0_$12) && false,m_$9_$12[q_$0_$12,g_$16][perm$R] - howMuch_$15,m_$9_$12[q_$0_$12,g_$16][perm$R]) )))) && ((forall  m_$9_$13 : MaskType, o_$16_$13 : ref, f_$7_$13 : Field (Integer) , howMuch_$16 : Integer, q_$0_$13 : ref, g_$17 : Field (Mu)  :: {DecPerm(m_$9_$13,o_$16_$13,f_$7_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R]} ( DecPerm(m_$9_$13,o_$16_$13,f_$7_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R] == ite((o_$16_$13 == q_$0_$13) && false,m_$9_$13[q_$0_$13,g_$17][perm$R] - howMuch_$16,m_$9_$13[q_$0_$13,g_$17][perm$R]) )))) && ((forall  m_$9_$14 : MaskType, o_$16_$14 : ref, f_$7_$14 : Field (ref) , howMuch_$17 : Integer, q_$0_$14 : ref, g_$18 : Field (Mu)  :: {DecPerm(m_$9_$14,o_$16_$14,f_$7_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R]} ( DecPerm(m_$9_$14,o_$16_$14,f_$7_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R] == ite((o_$16_$14 == q_$0_$14) && false,m_$9_$14[q_$0_$14,g_$18][perm$R] - howMuch_$17,m_$9_$14[q_$0_$14,g_$18][perm$R]) )))) && ((forall  m_$9_$15 : MaskType, o_$16_$15 : ref, f_$7_$15 : Field (Mu) , howMuch_$18 : Integer, q_$0_$15 : ref, g_$19 : Field (Mu)  :: {DecPerm(m_$9_$15,o_$16_$15,f_$7_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R]} ( DecPerm(m_$9_$15,o_$16_$15,f_$7_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R] == ite((o_$16_$15 == q_$0_$15) && (f_$7_$15 == g_$19),m_$9_$15[q_$0_$15,g_$19][perm$R] - howMuch_$18,m_$9_$15[q_$0_$15,g_$19][perm$R]) )));
	assume ((((((((((((((((forall  m_$11_$0 : MaskType, o_$18_$0 : ref, f_$9_$0 : Field (Boolean) , howMuch_$1_$0 : Integer, q_$2_$0 : ref, g_$1_$0 : Field (Boolean)  :: {IncPerm(m_$11_$0,o_$18_$0,f_$9_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R]} ( IncPerm(m_$11_$0,o_$18_$0,f_$9_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R] == ite((o_$18_$0 == q_$2_$0) && (f_$9_$0 == g_$1_$0),m_$11_$0[q_$2_$0,g_$1_$0][perm$R] + howMuch_$1_$0,m_$11_$0[q_$2_$0,g_$1_$0][perm$R]) ))) && ((forall  m_$11_$1 : MaskType, o_$18_$1 : ref, f_$9_$1 : Field (Integer) , howMuch_$1_$1 : Integer, q_$2_$1 : ref, g_$1_$1 : Field (Boolean)  :: {IncPerm(m_$11_$1,o_$18_$1,f_$9_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R]} ( IncPerm(m_$11_$1,o_$18_$1,f_$9_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R] == ite((o_$18_$1 == q_$2_$1) && false,m_$11_$1[q_$2_$1,g_$1_$1][perm$R] + howMuch_$1_$1,m_$11_$1[q_$2_$1,g_$1_$1][perm$R]) )))) && ((forall  m_$11_$2 : MaskType, o_$18_$2 : ref, f_$9_$2 : Field (ref) , howMuch_$1_$2 : Integer, q_$2_$2 : ref, g_$1_$2 : Field (Boolean)  :: {IncPerm(m_$11_$2,o_$18_$2,f_$9_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R]} ( IncPerm(m_$11_$2,o_$18_$2,f_$9_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R] == ite((o_$18_$2 == q_$2_$2) && false,m_$11_$2[q_$2_$2,g_$1_$2][perm$R] + howMuch_$1_$2,m_$11_$2[q_$2_$2,g_$1_$2][perm$R]) )))) && ((forall  m_$11_$3 : MaskType, o_$18_$3 : ref, f_$9_$3 : Field (Mu) , howMuch_$1_$3 : Integer, q_$2_$3 : ref, g_$1_$3 : Field (Boolean)  :: {IncPerm(m_$11_$3,o_$18_$3,f_$9_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R]} ( IncPerm(m_$11_$3,o_$18_$3,f_$9_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R] == ite((o_$18_$3 == q_$2_$3) && false,m_$11_$3[q_$2_$3,g_$1_$3][perm$R] + howMuch_$1_$3,m_$11_$3[q_$2_$3,g_$1_$3][perm$R]) )))) && ((forall  m_$11_$4 : MaskType, o_$18_$4 : ref, f_$9_$4 : Field (Boolean) , howMuch_$1_$4 : Integer, q_$2_$4 : ref, g_$1_$4 : Field (Integer)  :: {IncPerm(m_$11_$4,o_$18_$4,f_$9_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R]} ( IncPerm(m_$11_$4,o_$18_$4,f_$9_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R] == ite((o_$18_$4 == q_$2_$4) && false,m_$11_$4[q_$2_$4,g_$1_$4][perm$R] + howMuch_$1_$4,m_$11_$4[q_$2_$4,g_$1_$4][perm$R]) )))) && ((forall  m_$11_$5 : MaskType, o_$18_$5 : ref, f_$9_$5 : Field (Integer) , howMuch_$1_$5 : Integer, q_$2_$5 : ref, g_$1_$5 : Field (Integer)  :: {IncPerm(m_$11_$5,o_$18_$5,f_$9_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R]} ( IncPerm(m_$11_$5,o_$18_$5,f_$9_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R] == ite((o_$18_$5 == q_$2_$5) && (f_$9_$5 == g_$1_$5),m_$11_$5[q_$2_$5,g_$1_$5][perm$R] + howMuch_$1_$5,m_$11_$5[q_$2_$5,g_$1_$5][perm$R]) )))) && ((forall  m_$11_$6 : MaskType, o_$18_$6 : ref, f_$9_$6 : Field (ref) , howMuch_$1_$6 : Integer, q_$2_$6 : ref, g_$1_$6 : Field (Integer)  :: {IncPerm(m_$11_$6,o_$18_$6,f_$9_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R]} ( IncPerm(m_$11_$6,o_$18_$6,f_$9_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R] == ite((o_$18_$6 == q_$2_$6) && false,m_$11_$6[q_$2_$6,g_$1_$6][perm$R] + howMuch_$1_$6,m_$11_$6[q_$2_$6,g_$1_$6][perm$R]) )))) && ((forall  m_$11_$7 : MaskType, o_$18_$7 : ref, f_$9_$7 : Field (Mu) , howMuch_$1_$7 : Integer, q_$2_$7 : ref, g_$1_$7 : Field (Integer)  :: {IncPerm(m_$11_$7,o_$18_$7,f_$9_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R]} ( IncPerm(m_$11_$7,o_$18_$7,f_$9_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R] == ite((o_$18_$7 == q_$2_$7) && false,m_$11_$7[q_$2_$7,g_$1_$7][perm$R] + howMuch_$1_$7,m_$11_$7[q_$2_$7,g_$1_$7][perm$R]) )))) && ((forall  m_$11_$8 : MaskType, o_$18_$8 : ref, f_$9_$8 : Field (Boolean) , howMuch_$1_$8 : Integer, q_$2_$8 : ref, g_$1_$8 : Field (ref)  :: {IncPerm(m_$11_$8,o_$18_$8,f_$9_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R]} ( IncPerm(m_$11_$8,o_$18_$8,f_$9_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R] == ite((o_$18_$8 == q_$2_$8) && false,m_$11_$8[q_$2_$8,g_$1_$8][perm$R] + howMuch_$1_$8,m_$11_$8[q_$2_$8,g_$1_$8][perm$R]) )))) && ((forall  m_$11_$9 : MaskType, o_$18_$9 : ref, f_$9_$9 : Field (Integer) , howMuch_$1_$9 : Integer, q_$2_$9 : ref, g_$1_$9 : Field (ref)  :: {IncPerm(m_$11_$9,o_$18_$9,f_$9_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R]} ( IncPerm(m_$11_$9,o_$18_$9,f_$9_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R] == ite((o_$18_$9 == q_$2_$9) && false,m_$11_$9[q_$2_$9,g_$1_$9][perm$R] + howMuch_$1_$9,m_$11_$9[q_$2_$9,g_$1_$9][perm$R]) )))) && ((forall  m_$11_$10 : MaskType, o_$18_$10 : ref, f_$9_$10 : Field (ref) , howMuch_$1_$10 : Integer, q_$2_$10 : ref, g_$1_$10 : Field (ref)  :: {IncPerm(m_$11_$10,o_$18_$10,f_$9_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R]} ( IncPerm(m_$11_$10,o_$18_$10,f_$9_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R] == ite((o_$18_$10 == q_$2_$10) && (f_$9_$10 == g_$1_$10),m_$11_$10[q_$2_$10,g_$1_$10][perm$R] + howMuch_$1_$10,m_$11_$10[q_$2_$10,g_$1_$10][perm$R]) )))) && ((forall  m_$11_$11 : MaskType, o_$18_$11 : ref, f_$9_$11 : Field (Mu) , howMuch_$1_$11 : Integer, q_$2_$11 : ref, g_$1_$11 : Field (ref)  :: {IncPerm(m_$11_$11,o_$18_$11,f_$9_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R]} ( IncPerm(m_$11_$11,o_$18_$11,f_$9_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R] == ite((o_$18_$11 == q_$2_$11) && false,m_$11_$11[q_$2_$11,g_$1_$11][perm$R] + howMuch_$1_$11,m_$11_$11[q_$2_$11,g_$1_$11][perm$R]) )))) && ((forall  m_$11_$12 : MaskType, o_$18_$12 : ref, f_$9_$12 : Field (Boolean) , howMuch_$1_$12 : Integer, q_$2_$12 : ref, g_$1_$12 : Field (Mu)  :: {IncPerm(m_$11_$12,o_$18_$12,f_$9_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R]} ( IncPerm(m_$11_$12,o_$18_$12,f_$9_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R] == ite((o_$18_$12 == q_$2_$12) && false,m_$11_$12[q_$2_$12,g_$1_$12][perm$R] + howMuch_$1_$12,m_$11_$12[q_$2_$12,g_$1_$12][perm$R]) )))) && ((forall  m_$11_$13 : MaskType, o_$18_$13 : ref, f_$9_$13 : Field (Integer) , howMuch_$1_$13 : Integer, q_$2_$13 : ref, g_$1_$13 : Field (Mu)  :: {IncPerm(m_$11_$13,o_$18_$13,f_$9_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R]} ( IncPerm(m_$11_$13,o_$18_$13,f_$9_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R] == ite((o_$18_$13 == q_$2_$13) && false,m_$11_$13[q_$2_$13,g_$1_$13][perm$R] + howMuch_$1_$13,m_$11_$13[q_$2_$13,g_$1_$13][perm$R]) )))) && ((forall  m_$11_$14 : MaskType, o_$18_$14 : ref, f_$9_$14 : Field (ref) , howMuch_$1_$14 : Integer, q_$2_$14 : ref, g_$1_$14 : Field (Mu)  :: {IncPerm(m_$11_$14,o_$18_$14,f_$9_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R]} ( IncPerm(m_$11_$14,o_$18_$14,f_$9_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R] == ite((o_$18_$14 == q_$2_$14) && false,m_$11_$14[q_$2_$14,g_$1_$14][perm$R] + howMuch_$1_$14,m_$11_$14[q_$2_$14,g_$1_$14][perm$R]) )))) && ((forall  m_$11_$15 : MaskType, o_$18_$15 : ref, f_$9_$15 : Field (Mu) , howMuch_$1_$15 : Integer, q_$2_$15 : ref, g_$1_$15 : Field (Mu)  :: {IncPerm(m_$11_$15,o_$18_$15,f_$9_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R]} ( IncPerm(m_$11_$15,o_$18_$15,f_$9_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R] == ite((o_$18_$15 == q_$2_$15) && (f_$9_$15 == g_$1_$15),m_$11_$15[q_$2_$15,g_$1_$15][perm$R] + howMuch_$1_$15,m_$11_$15[q_$2_$15,g_$1_$15][perm$R]) )));
	assume (forall  o_$22 : ref :: ( ZeroCredits[o_$22] == 0 ));
	assume ((((forall  f_$13_$0 : Field (Boolean)  :: ( NonPredicateField(f_$13_$0) ==> (!PredicateField(f_$13_$0)) ))) && ((forall  f_$13_$1 : Field (Integer)  :: ( NonPredicateField(f_$13_$1) ==> (!PredicateField(f_$13_$1)) )))) && ((forall  f_$13_$2 : Field (ref)  :: ( NonPredicateField(f_$13_$2) ==> (!PredicateField(f_$13_$2)) )))) && ((forall  f_$13_$3 : Field (Mu)  :: ( NonPredicateField(f_$13_$3) ==> (!PredicateField(f_$13_$3)) )));
	assume ((((forall  f_$14_$0 : Field (Boolean)  :: ( PredicateField(f_$14_$0) ==> (!NonPredicateField(f_$14_$0)) ))) && ((forall  f_$14_$1 : Field (Integer)  :: ( PredicateField(f_$14_$1) ==> (!NonPredicateField(f_$14_$1)) )))) && ((forall  f_$14_$2 : Field (ref)  :: ( PredicateField(f_$14_$2) ==> (!NonPredicateField(f_$14_$2)) )))) && ((forall  f_$14_$3 : Field (Mu)  :: ( PredicateField(f_$14_$3) ==> (!NonPredicateField(f_$14_$3)) )));
	assume (((((((((((((((forall  con_$1 : Boolean, a_$0_$0 : Boolean, b_$0_$0 : Boolean :: {ite(con_$1,a_$0_$0,b_$0_$0)} ( con_$1 ==> (ite(con_$1,a_$0_$0,b_$0_$0) == a_$0_$0) ))) && ((forall  con_$2 : Boolean, a_$0_$1 : Integer, b_$0_$1 : Integer :: {ite(con_$2,a_$0_$1,b_$0_$1)} ( con_$2 ==> (ite(con_$2,a_$0_$1,b_$0_$1) == a_$0_$1) )))) && ((forall  con_$3 : Boolean, a_$0_$2 : [PermissionComponent]Integer, b_$0_$2 : [PermissionComponent]Integer :: {ite(con_$3,a_$0_$2,b_$0_$2)} ( con_$3 ==> (ite(con_$3,a_$0_$2,b_$0_$2) == a_$0_$2) )))) && ((forall  con_$4 : Boolean, a_$0_$3 : PermissionComponent, b_$0_$3 : PermissionComponent :: {ite(con_$4,a_$0_$3,b_$0_$3)} ( con_$4 ==> (ite(con_$4,a_$0_$3,b_$0_$3) == a_$0_$3) )))) && ((forall  con_$5 : Boolean, a_$0_$4 : MaskType, b_$0_$4 : MaskType :: {ite(con_$5,a_$0_$4,b_$0_$4)} ( con_$5 ==> (ite(con_$5,a_$0_$4,b_$0_$4) == a_$0_$4) )))) && ((forall  con_$6 : Boolean, a_$0_$5 : ref, b_$0_$5 : ref :: {ite(con_$6,a_$0_$5,b_$0_$5)} ( con_$6 ==> (ite(con_$6,a_$0_$5,b_$0_$5) == a_$0_$5) )))) && ((forall  con_$7 : Boolean, a_$0_$6 : Field (Integer) , b_$0_$6 : Field (Integer)  :: {ite(con_$7,a_$0_$6,b_$0_$6)} ( con_$7 ==> (ite(con_$7,a_$0_$6,b_$0_$6) == a_$0_$6) )))) && ((forall  con_$8 : Boolean, a_$0_$7 : PartialHeapType, b_$0_$7 : PartialHeapType :: {ite(con_$8,a_$0_$7,b_$0_$7)} ( con_$8 ==> (ite(con_$8,a_$0_$7,b_$0_$7) == a_$0_$7) )))) && ((forall  con_$9 : Boolean, a_$0_$8 : Field (Mu) , b_$0_$8 : Field (Mu)  :: {ite(con_$9,a_$0_$8,b_$0_$8)} ( con_$9 ==> (ite(con_$9,a_$0_$8,b_$0_$8) == a_$0_$8) )))) && ((forall  con_$10 : Boolean, a_$0_$9 : Mu, b_$0_$9 : Mu :: {ite(con_$10,a_$0_$9,b_$0_$9)} ( con_$10 ==> (ite(con_$10,a_$0_$9,b_$0_$9) == a_$0_$9) )))) && ((forall  con_$11 : Boolean, a_$0_$10 : Field (Boolean) , b_$0_$10 : Field (Boolean)  :: {ite(con_$11,a_$0_$10,b_$0_$10)} ( con_$11 ==> (ite(con_$11,a_$0_$10,b_$0_$10) == a_$0_$10) )))) && ((forall  con_$12 : Boolean, a_$0_$11 : HeapType, b_$0_$11 : HeapType :: {ite(con_$12,a_$0_$11,b_$0_$11)} ( con_$12 ==> (ite(con_$12,a_$0_$11,b_$0_$11) == a_$0_$11) )))) && ((forall  con_$13 : Boolean, a_$0_$12 : CreditsType, b_$0_$12 : CreditsType :: {ite(con_$13,a_$0_$12,b_$0_$12)} ( con_$13 ==> (ite(con_$13,a_$0_$12,b_$0_$12) == a_$0_$12) )))) && ((forall  con_$14 : Boolean, a_$0_$13 : Field (ref) , b_$0_$13 : Field (ref)  :: {ite(con_$14,a_$0_$13,b_$0_$13)} ( con_$14 ==> (ite(con_$14,a_$0_$13,b_$0_$13) == a_$0_$13) )))) && ((forall  con_$15 : Boolean, a_$0_$14 : TypeName, b_$0_$14 : TypeName :: {ite(con_$15,a_$0_$14,b_$0_$14)} ( con_$15 ==> (ite(con_$15,a_$0_$14,b_$0_$14) == a_$0_$14) )));
	assume (((((((((((((((forall  con_$0_$0 : Boolean, a_$1_$0 : Boolean, b_$1_$0 : Boolean :: {ite(con_$0_$0,a_$1_$0,b_$1_$0)} ( (!con_$0_$0) ==> (ite(con_$0_$0,a_$1_$0,b_$1_$0) == b_$1_$0) ))) && ((forall  con_$0_$1 : Boolean, a_$1_$1 : Integer, b_$1_$1 : Integer :: {ite(con_$0_$1,a_$1_$1,b_$1_$1)} ( (!con_$0_$1) ==> (ite(con_$0_$1,a_$1_$1,b_$1_$1) == b_$1_$1) )))) && ((forall  con_$0_$2 : Boolean, a_$1_$2 : [PermissionComponent]Integer, b_$1_$2 : [PermissionComponent]Integer :: {ite(con_$0_$2,a_$1_$2,b_$1_$2)} ( (!con_$0_$2) ==> (ite(con_$0_$2,a_$1_$2,b_$1_$2) == b_$1_$2) )))) && ((forall  con_$0_$3 : Boolean, a_$1_$3 : PermissionComponent, b_$1_$3 : PermissionComponent :: {ite(con_$0_$3,a_$1_$3,b_$1_$3)} ( (!con_$0_$3) ==> (ite(con_$0_$3,a_$1_$3,b_$1_$3) == b_$1_$3) )))) && ((forall  con_$0_$4 : Boolean, a_$1_$4 : MaskType, b_$1_$4 : MaskType :: {ite(con_$0_$4,a_$1_$4,b_$1_$4)} ( (!con_$0_$4) ==> (ite(con_$0_$4,a_$1_$4,b_$1_$4) == b_$1_$4) )))) && ((forall  con_$0_$5 : Boolean, a_$1_$5 : ref, b_$1_$5 : ref :: {ite(con_$0_$5,a_$1_$5,b_$1_$5)} ( (!con_$0_$5) ==> (ite(con_$0_$5,a_$1_$5,b_$1_$5) == b_$1_$5) )))) && ((forall  con_$0_$6 : Boolean, a_$1_$6 : Field (Integer) , b_$1_$6 : Field (Integer)  :: {ite(con_$0_$6,a_$1_$6,b_$1_$6)} ( (!con_$0_$6) ==> (ite(con_$0_$6,a_$1_$6,b_$1_$6) == b_$1_$6) )))) && ((forall  con_$0_$7 : Boolean, a_$1_$7 : PartialHeapType, b_$1_$7 : PartialHeapType :: {ite(con_$0_$7,a_$1_$7,b_$1_$7)} ( (!con_$0_$7) ==> (ite(con_$0_$7,a_$1_$7,b_$1_$7) == b_$1_$7) )))) && ((forall  con_$0_$8 : Boolean, a_$1_$8 : Field (Mu) , b_$1_$8 : Field (Mu)  :: {ite(con_$0_$8,a_$1_$8,b_$1_$8)} ( (!con_$0_$8) ==> (ite(con_$0_$8,a_$1_$8,b_$1_$8) == b_$1_$8) )))) && ((forall  con_$0_$9 : Boolean, a_$1_$9 : Mu, b_$1_$9 : Mu :: {ite(con_$0_$9,a_$1_$9,b_$1_$9)} ( (!con_$0_$9) ==> (ite(con_$0_$9,a_$1_$9,b_$1_$9) == b_$1_$9) )))) && ((forall  con_$0_$10 : Boolean, a_$1_$10 : Field (Boolean) , b_$1_$10 : Field (Boolean)  :: {ite(con_$0_$10,a_$1_$10,b_$1_$10)} ( (!con_$0_$10) ==> (ite(con_$0_$10,a_$1_$10,b_$1_$10) == b_$1_$10) )))) && ((forall  con_$0_$11 : Boolean, a_$1_$11 : HeapType, b_$1_$11 : HeapType :: {ite(con_$0_$11,a_$1_$11,b_$1_$11)} ( (!con_$0_$11) ==> (ite(con_$0_$11,a_$1_$11,b_$1_$11) == b_$1_$11) )))) && ((forall  con_$0_$12 : Boolean, a_$1_$12 : CreditsType, b_$1_$12 : CreditsType :: {ite(con_$0_$12,a_$1_$12,b_$1_$12)} ( (!con_$0_$12) ==> (ite(con_$0_$12,a_$1_$12,b_$1_$12) == b_$1_$12) )))) && ((forall  con_$0_$13 : Boolean, a_$1_$13 : Field (ref) , b_$1_$13 : Field (ref)  :: {ite(con_$0_$13,a_$1_$13,b_$1_$13)} ( (!con_$0_$13) ==> (ite(con_$0_$13,a_$1_$13,b_$1_$13) == b_$1_$13) )))) && ((forall  con_$0_$14 : Boolean, a_$1_$14 : TypeName, b_$1_$14 : TypeName :: {ite(con_$0_$14,a_$1_$14,b_$1_$14)} ( (!con_$0_$14) ==> (ite(con_$0_$14,a_$1_$14,b_$1_$14) == b_$1_$14) )));
	assume (forall  x_$0 : Integer, y_$0 : Integer :: {x_$0 mod y_$0} {x_$0 div y_$0} ( (x_$0 mod y_$0) == (x_$0 - ((x_$0 div y_$0) * y_$0)) ));
	assume (forall  x_$1 : Integer, y_$1 : Integer :: {x_$1 mod y_$1} ( (0 < y_$1) ==> ((0 <= (x_$1 mod y_$1)) && ((x_$1 mod y_$1) < y_$1)) ));
	assume (forall  x_$2 : Integer, y_$2 : Integer :: {x_$2 mod y_$2} ( (y_$2 < 0) ==> ((y_$2 < (x_$2 mod y_$2)) && ((x_$2 mod y_$2) <= 0)) ));
	assume (forall  a_$2 : Integer, b_$2 : Integer, d : Integer :: {a_$2 mod d,b_$2 mod d} ( (((2 <= d) && ((a_$2 mod d) == (b_$2 mod d))) && (a_$2 < b_$2)) ==> ((a_$2 + d) <= b_$2) ));
	assume NonPredicateField(Node.next);
	assume NonPredicateField(Node.prev);
	assume PredicateField(Node.inv);
	assume PredicateField(Node.invLeft);
	assume PredicateField(Node.invRight);
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume IsGoodMask(Mask);
	assume IsGoodMask(SecMask);
	assume (this == null) || (dtype(this) == Node#t);
	assume !(this == null);
	assume wf(Heap,Mask,SecMask);
	goto anon0;
anon0:
	assume (0 < methodK#_9) && ((1000 * methodK#_9) < Fractions(1));
	assume wf(h0#_0,m0#_1,sm0#_2);
	assume wf(h1#_4,m1#_5,sm1#_6);
	assume !(this == null);
	assume wf(h1#_4_$_0,ZeroMask,ZeroMask);
	assume (h1#_4_$_0[this,Node.prev] == null) || (dtype(h1#_4_$_0[this,Node.prev]) == Node#t);
	assume ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assume m1#_5_$_0 == ZeroMask[this,Node.prev := ZeroMask[this,Node.prev][perm$R := ZeroMask[this,Node.prev][perm$R] + (Fractions(50) - 0)]];
	assume m1#_5_$_1 == m1#_5_$_0[this,Node.prev := m1#_5_$_0[this,Node.prev][perm$N := m1#_5_$_0[this,Node.prev][perm$N] + (0 - 1)]];
	assume wf(h1#_4_$_0,m1#_5_$_1,ZeroMask);
	assume IsGoodMask(m1#_5_$_1);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,Node.prev]));
	assume wf(h1#_4_$_0,m1#_5_$_1,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_1,ZeroMask);
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_1,ZeroMask);
	assume (h1#_4_$_0[this,Node.next] == null) || (dtype(h1#_4_$_0[this,Node.next]) == Node#t);
	assume ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assume m1#_5_$_2 == m1#_5_$_1[this,Node.next := m1#_5_$_1[this,Node.next][perm$R := m1#_5_$_1[this,Node.next][perm$R] + (Fractions(50) - 0)]];
	assume m1#_5_$_3 == m1#_5_$_2[this,Node.next := m1#_5_$_2[this,Node.next][perm$N := m1#_5_$_2[this,Node.next][perm$N] + (0 - 1)]];
	assume wf(h1#_4_$_0,m1#_5_$_3,ZeroMask);
	assume IsGoodMask(m1#_5_$_3);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,Node.next]));
	assume wf(h1#_4_$_0,m1#_5_$_3,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_3,ZeroMask);
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_3,ZeroMask);
	assume true;
	assume ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assume m1#_5_$_4 == m1#_5_$_3[this,mu := m1#_5_$_3[this,mu][perm$R := m1#_5_$_3[this,mu][perm$R] + (Fractions(50) - 0)]];
	assume m1#_5_$_5 == m1#_5_$_4[this,mu := m1#_5_$_4[this,mu][perm$N := m1#_5_$_4[this,mu][perm$N] + (0 - 1)]];
	assume wf(h1#_4_$_0,m1#_5_$_5,ZeroMask);
	assume IsGoodMask(m1#_5_$_5);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,mu]));
	assume wf(h1#_4_$_0,m1#_5_$_5,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_5,ZeroMask);
	if ($_$_condition) { goto anon49_Then; } else { goto anon49_Else; }
anon49_Then:
	assume $_$_condition;
	assume $_$_condition <==> (h1#_4_$_0[this,Node.next] == null);
	assume h1#_4_$_0[this,Node.next] == null;
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_5,ZeroMask);
	assume (h1#_4_$_0[this,Node.prev] == null) || (dtype(h1#_4_$_0[this,Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_6 == m1#_5_$_5[this,Node.prev := m1#_5_$_5[this,Node.prev][perm$R := m1#_5_$_5[this,Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_6);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,Node.prev]));
	assume wf(h1#_4_$_0,m1#_5_$_6,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_6,ZeroMask);
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_6,ZeroMask);
	assume (h1#_4_$_0[this,Node.next] == null) || (dtype(h1#_4_$_0[this,Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_7 == m1#_5_$_6[this,Node.next := m1#_5_$_6[this,Node.next][perm$R := m1#_5_$_6[this,Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_7);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,Node.next]));
	assume wf(h1#_4_$_0,m1#_5_$_7,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_7,ZeroMask);
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_7,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume m1#_5_$_8 == m1#_5_$_7[this,mu := m1#_5_$_7[this,mu][perm$R := m1#_5_$_7[this,mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_8);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,mu]));
	assume wf(h1#_4_$_0,m1#_5_$_8,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_8,ZeroMask);
	assume m1#_5_$_9 == m1#_5_$_8;
	goto $branchMerge_0;
anon49_Else:
	assume !$_$_condition;
	assume $_$_condition <==> (h1#_4_$_0[this,Node.next] == null);
	assume !(h1#_4_$_0[this,Node.next] == null);
	assume m1#_5_$_9 == m1#_5_$_5;
	goto $branchMerge_0;
anon50_Then:
	assume $_$_condition_$0;
	assume $_$_condition_$0 <==> (!(h1#_4_$_0[this,Node.next] == null));
	assume !(h1#_4_$_0[this,Node.next] == null);
	assume !(h1#_4_$_0[this,Node.next] == null);
	assume wf(h1#_4_$_0,m1#_5_$_9,ZeroMask);
	assume (h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.next] == null) || (dtype(h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_10 == m1#_5_$_9[h1#_4_$_0[this,Node.next],Node.next := m1#_5_$_9[h1#_4_$_0[this,Node.next],Node.next][perm$R := m1#_5_$_9[h1#_4_$_0[this,Node.next],Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_10);
	assume IsGoodState(heapFragment(h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.next]));
	assume wf(h1#_4_$_0,m1#_5_$_10,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_10,ZeroMask);
	assume !(h1#_4_$_0[this,Node.next] == null);
	assume wf(h1#_4_$_0,m1#_5_$_10,ZeroMask);
	assume (h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.prev] == null) || (dtype(h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_11 == m1#_5_$_10[h1#_4_$_0[this,Node.next],Node.prev := m1#_5_$_10[h1#_4_$_0[this,Node.next],Node.prev][perm$R := m1#_5_$_10[h1#_4_$_0[this,Node.next],Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_11);
	assume IsGoodState(heapFragment(h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.prev]));
	assume wf(h1#_4_$_0,m1#_5_$_11,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_11,ZeroMask);
	assume !(h1#_4_$_0[this,Node.next] == null);
	assume wf(h1#_4_$_0,m1#_5_$_11,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume m1#_5_$_12 == m1#_5_$_11[h1#_4_$_0[this,Node.next],mu := m1#_5_$_11[h1#_4_$_0[this,Node.next],mu][perm$R := m1#_5_$_11[h1#_4_$_0[this,Node.next],mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_12);
	assume IsGoodState(heapFragment(h1#_4_$_0[h1#_4_$_0[this,Node.next],mu]));
	assume wf(h1#_4_$_0,m1#_5_$_12,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_12,ZeroMask);
	assume m1#_5_$_13 == m1#_5_$_12;
	goto $branchMerge_1;
anon50_Else:
	assume !$_$_condition_$0;
	assume $_$_condition_$0 <==> (!(h1#_4_$_0[this,Node.next] == null));
	assume h1#_4_$_0[this,Node.next] == null;
	assume m1#_5_$_13 == m1#_5_$_9;
	goto $branchMerge_1;
anon51_Then:
	assume $_$_condition_$2;
	assume $_$_condition_$2 <==> (h1#_4_$_0[this,Node.prev] == null);
	assume h1#_4_$_0[this,Node.prev] == null;
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_13,ZeroMask);
	assume (h1#_4_$_0[this,Node.prev] == null) || (dtype(h1#_4_$_0[this,Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_14 == m1#_5_$_13[this,Node.prev := m1#_5_$_13[this,Node.prev][perm$R := m1#_5_$_13[this,Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_14);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,Node.prev]));
	assume wf(h1#_4_$_0,m1#_5_$_14,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_14,ZeroMask);
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_14,ZeroMask);
	assume (h1#_4_$_0[this,Node.next] == null) || (dtype(h1#_4_$_0[this,Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_15 == m1#_5_$_14[this,Node.next := m1#_5_$_14[this,Node.next][perm$R := m1#_5_$_14[this,Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_15);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,Node.next]));
	assume wf(h1#_4_$_0,m1#_5_$_15,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_15,ZeroMask);
	assume !(this == null);
	assume wf(h1#_4_$_0,m1#_5_$_15,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume m1#_5_$_16 == m1#_5_$_15[this,mu := m1#_5_$_15[this,mu][perm$R := m1#_5_$_15[this,mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_16);
	assume IsGoodState(heapFragment(h1#_4_$_0[this,mu]));
	assume wf(h1#_4_$_0,m1#_5_$_16,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_16,ZeroMask);
	assume m1#_5_$_17 == m1#_5_$_16;
	goto $branchMerge_2;
anon51_Else:
	assume !$_$_condition_$2;
	assume $_$_condition_$2 <==> (h1#_4_$_0[this,Node.prev] == null);
	assume !(h1#_4_$_0[this,Node.prev] == null);
	assume m1#_5_$_17 == m1#_5_$_13;
	goto $branchMerge_2;
anon52_Then:
	assume $_$_condition_$4;
	assume $_$_condition_$4 <==> (!(h1#_4_$_0[this,Node.prev] == null));
	assume !(h1#_4_$_0[this,Node.prev] == null);
	assume !(h1#_4_$_0[this,Node.prev] == null);
	assume wf(h1#_4_$_0,m1#_5_$_17,ZeroMask);
	assume (h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.next] == null) || (dtype(h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_18 == m1#_5_$_17[h1#_4_$_0[this,Node.prev],Node.next := m1#_5_$_17[h1#_4_$_0[this,Node.prev],Node.next][perm$R := m1#_5_$_17[h1#_4_$_0[this,Node.prev],Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_18);
	assume IsGoodState(heapFragment(h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.next]));
	assume wf(h1#_4_$_0,m1#_5_$_18,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_18,ZeroMask);
	assume !(h1#_4_$_0[this,Node.prev] == null);
	assume wf(h1#_4_$_0,m1#_5_$_18,ZeroMask);
	assume (h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.prev] == null) || (dtype(h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume m1#_5_$_19 == m1#_5_$_18[h1#_4_$_0[this,Node.prev],Node.prev := m1#_5_$_18[h1#_4_$_0[this,Node.prev],Node.prev][perm$R := m1#_5_$_18[h1#_4_$_0[this,Node.prev],Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_19);
	assume IsGoodState(heapFragment(h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.prev]));
	assume wf(h1#_4_$_0,m1#_5_$_19,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_19,ZeroMask);
	assume !(h1#_4_$_0[this,Node.prev] == null);
	assume wf(h1#_4_$_0,m1#_5_$_19,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume m1#_5_$_20 == m1#_5_$_19[h1#_4_$_0[this,Node.prev],mu := m1#_5_$_19[h1#_4_$_0[this,Node.prev],mu][perm$R := m1#_5_$_19[h1#_4_$_0[this,Node.prev],mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(m1#_5_$_20);
	assume IsGoodState(heapFragment(h1#_4_$_0[h1#_4_$_0[this,Node.prev],mu]));
	assume wf(h1#_4_$_0,m1#_5_$_20,ZeroMask);
	assume wf(h1#_4_$_0,m1#_5_$_20,ZeroMask);
	assume m1#_5_$_21 == m1#_5_$_20;
	goto $branchMerge_3;
anon52_Else:
	assume !$_$_condition_$4;
	assume $_$_condition_$4 <==> (!(h1#_4_$_0[this,Node.prev] == null));
	assume h1#_4_$_0[this,Node.prev] == null;
	assume m1#_5_$_21 == m1#_5_$_17;
	goto $branchMerge_3;
anon53_Then:
	assume $_$_condition_$6;
	assume $_$_condition_$6 <==> (!(h1#_4_$_0[this,Node.next] == null));
	assume !(h1#_4_$_0[this,Node.next] == null);
	assume !(h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.prev] == null);
	assume h1#_4_$_0[h1#_4_$_0[this,Node.next],Node.prev] == this;
	goto $branchMerge_4;
anon53_Else:
	assume !$_$_condition_$6;
	assume $_$_condition_$6 <==> (!(h1#_4_$_0[this,Node.next] == null));
	assume h1#_4_$_0[this,Node.next] == null;
	goto $branchMerge_4;
anon54_Then:
	assume $_$_condition_$8;
	assume $_$_condition_$8 <==> (!(h1#_4_$_0[this,Node.prev] == null));
	assume !(h1#_4_$_0[this,Node.prev] == null);
	assume !(h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.next] == null);
	assume h1#_4_$_0[h1#_4_$_0[this,Node.prev],Node.next] == this;
	goto $branchMerge_5;
anon54_Else:
	assume !$_$_condition_$8;
	assume $_$_condition_$8 <==> (!(h1#_4_$_0[this,Node.prev] == null));
	assume h1#_4_$_0[this,Node.prev] == null;
	goto $branchMerge_5;
anon55_Then:
	assume $_$_condition_$10;
	assume $_$_condition_$10 <==> (!(h1#_4_$_0[this,Node.next] == null));
	assume !(h1#_4_$_0[this,Node.next] == null);
	assume MuBelow(h1#_4_$_0[this,mu],h1#_4_$_0[h1#_4_$_0[this,Node.next],mu]);
	goto $branchMerge_6;
anon55_Else:
	assume !$_$_condition_$10;
	assume $_$_condition_$10 <==> (!(h1#_4_$_0[this,Node.next] == null));
	assume h1#_4_$_0[this,Node.next] == null;
	goto $branchMerge_6;
anon56_Then:
	assume $_$_condition_$12;
	assume $_$_condition_$12 <==> (!(h1#_4_$_0[this,Node.prev] == null));
	assume !(h1#_4_$_0[this,Node.prev] == null);
	assume MuBelow(h1#_4_$_0[h1#_4_$_0[this,Node.prev],mu],h1#_4_$_0[this,mu]);
	goto anon16;
anon56_Else:
	assume !$_$_condition_$12;
	assume $_$_condition_$12 <==> (!(h1#_4_$_0[this,Node.prev] == null));
	assume h1#_4_$_0[this,Node.prev] == null;
	goto anon16;
anon16:
	assume IsGoodMask(m1#_5_$_21);
	assume wf(h1#_4_$_0,m1#_5_$_21,ZeroMask);
	assume !(this == null);
	assume wf(Heap_$_0,ZeroMask,ZeroMask);
	assume (Heap_$_0[this,Node.prev] == null) || (dtype(Heap_$_0[this,Node.prev]) == Node#t);
	assume ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assume Mask_$_0 == ZeroMask[this,Node.prev := ZeroMask[this,Node.prev][perm$R := ZeroMask[this,Node.prev][perm$R] + (Fractions(50) - 0)]];
	assume Mask_$_1 == Mask_$_0[this,Node.prev := Mask_$_0[this,Node.prev][perm$N := Mask_$_0[this,Node.prev][perm$N] + (0 - 1)]];
	assume wf(Heap_$_0,Mask_$_1,ZeroMask);
	assume IsGoodMask(Mask_$_1);
	assume IsGoodState(heapFragment(Heap_$_0[this,Node.prev]));
	assume wf(Heap_$_0,Mask_$_1,ZeroMask);
	assume wf(Heap_$_0,Mask_$_1,ZeroMask);
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_1,ZeroMask);
	assume (Heap_$_0[this,Node.next] == null) || (dtype(Heap_$_0[this,Node.next]) == Node#t);
	assume ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assume Mask_$_2 == Mask_$_1[this,Node.next := Mask_$_1[this,Node.next][perm$R := Mask_$_1[this,Node.next][perm$R] + (Fractions(50) - 0)]];
	assume Mask_$_3 == Mask_$_2[this,Node.next := Mask_$_2[this,Node.next][perm$N := Mask_$_2[this,Node.next][perm$N] + (0 - 1)]];
	assume wf(Heap_$_0,Mask_$_3,ZeroMask);
	assume IsGoodMask(Mask_$_3);
	assume IsGoodState(heapFragment(Heap_$_0[this,Node.next]));
	assume wf(Heap_$_0,Mask_$_3,ZeroMask);
	assume wf(Heap_$_0,Mask_$_3,ZeroMask);
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_3,ZeroMask);
	assume true;
	assume ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assume Mask_$_4 == Mask_$_3[this,mu := Mask_$_3[this,mu][perm$R := Mask_$_3[this,mu][perm$R] + (Fractions(50) - 0)]];
	assume Mask_$_5 == Mask_$_4[this,mu := Mask_$_4[this,mu][perm$N := Mask_$_4[this,mu][perm$N] + (0 - 1)]];
	assume wf(Heap_$_0,Mask_$_5,ZeroMask);
	assume IsGoodMask(Mask_$_5);
	assume IsGoodState(heapFragment(Heap_$_0[this,mu]));
	assume wf(Heap_$_0,Mask_$_5,ZeroMask);
	assume wf(Heap_$_0,Mask_$_5,ZeroMask);
	assert { :msg "  7.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  7.15: Location might not be readable." } true ==> CanRead(Mask_$_5,ZeroMask,this,Node.next);
	if ($_$_condition_$14) { goto anon57_Then; } else { goto anon57_Else; }
anon57_Then:
	assume $_$_condition_$14;
	assume $_$_condition_$14 <==> (Heap_$_0[this,Node.next] == null);
	assume Heap_$_0[this,Node.next] == null;
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_5,ZeroMask);
	assume (Heap_$_0[this,Node.prev] == null) || (dtype(Heap_$_0[this,Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_6 == Mask_$_5[this,Node.prev := Mask_$_5[this,Node.prev][perm$R := Mask_$_5[this,Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_6);
	assume IsGoodState(heapFragment(Heap_$_0[this,Node.prev]));
	assume wf(Heap_$_0,Mask_$_6,ZeroMask);
	assume wf(Heap_$_0,Mask_$_6,ZeroMask);
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_6,ZeroMask);
	assume (Heap_$_0[this,Node.next] == null) || (dtype(Heap_$_0[this,Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_7 == Mask_$_6[this,Node.next := Mask_$_6[this,Node.next][perm$R := Mask_$_6[this,Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_7);
	assume IsGoodState(heapFragment(Heap_$_0[this,Node.next]));
	assume wf(Heap_$_0,Mask_$_7,ZeroMask);
	assume wf(Heap_$_0,Mask_$_7,ZeroMask);
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_7,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume Mask_$_8 == Mask_$_7[this,mu := Mask_$_7[this,mu][perm$R := Mask_$_7[this,mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_8);
	assume IsGoodState(heapFragment(Heap_$_0[this,mu]));
	assume wf(Heap_$_0,Mask_$_8,ZeroMask);
	assume wf(Heap_$_0,Mask_$_8,ZeroMask);
	assume Mask_$_9 == Mask_$_8;
	goto anon18;
anon57_Else:
	assume !$_$_condition_$14;
	assume $_$_condition_$14 <==> (Heap_$_0[this,Node.next] == null);
	assume !(Heap_$_0[this,Node.next] == null);
	assume Mask_$_9 == Mask_$_5;
	goto anon18;
anon18:
	assert { :msg "  8.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  8.15: Location might not be readable." } true ==> CanRead(Mask_$_9,ZeroMask,this,Node.next);
	if ($_$_condition_$15) { goto anon58_Then; } else { goto anon58_Else; }
anon58_Then:
	assume $_$_condition_$15;
	assume $_$_condition_$15 <==> (!(Heap_$_0[this,Node.next] == null));
	assume !(Heap_$_0[this,Node.next] == null);
	assert { :msg "  8.35: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  8.35: Location might not be readable." } true ==> CanRead(Mask_$_9,ZeroMask,this,Node.next);
	assume !(Heap_$_0[this,Node.next] == null);
	assume wf(Heap_$_0,Mask_$_9,ZeroMask);
	assume (Heap_$_0[Heap_$_0[this,Node.next],Node.next] == null) || (dtype(Heap_$_0[Heap_$_0[this,Node.next],Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_10 == Mask_$_9[Heap_$_0[this,Node.next],Node.next := Mask_$_9[Heap_$_0[this,Node.next],Node.next][perm$R := Mask_$_9[Heap_$_0[this,Node.next],Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_10);
	assume IsGoodState(heapFragment(Heap_$_0[Heap_$_0[this,Node.next],Node.next]));
	assume wf(Heap_$_0,Mask_$_10,ZeroMask);
	assume wf(Heap_$_0,Mask_$_10,ZeroMask);
	assert { :msg "  8.57: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  8.57: Location might not be readable." } true ==> CanRead(Mask_$_10,ZeroMask,this,Node.next);
	assume !(Heap_$_0[this,Node.next] == null);
	assume wf(Heap_$_0,Mask_$_10,ZeroMask);
	assume (Heap_$_0[Heap_$_0[this,Node.next],Node.prev] == null) || (dtype(Heap_$_0[Heap_$_0[this,Node.next],Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_11 == Mask_$_10[Heap_$_0[this,Node.next],Node.prev := Mask_$_10[Heap_$_0[this,Node.next],Node.prev][perm$R := Mask_$_10[Heap_$_0[this,Node.next],Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_11);
	assume IsGoodState(heapFragment(Heap_$_0[Heap_$_0[this,Node.next],Node.prev]));
	assume wf(Heap_$_0,Mask_$_11,ZeroMask);
	assume wf(Heap_$_0,Mask_$_11,ZeroMask);
	assert { :msg "  8.79: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  8.79: Location might not be readable." } true ==> CanRead(Mask_$_11,ZeroMask,this,Node.next);
	assume !(Heap_$_0[this,Node.next] == null);
	assume wf(Heap_$_0,Mask_$_11,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume Mask_$_12 == Mask_$_11[Heap_$_0[this,Node.next],mu := Mask_$_11[Heap_$_0[this,Node.next],mu][perm$R := Mask_$_11[Heap_$_0[this,Node.next],mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_12);
	assume IsGoodState(heapFragment(Heap_$_0[Heap_$_0[this,Node.next],mu]));
	assume wf(Heap_$_0,Mask_$_12,ZeroMask);
	assume wf(Heap_$_0,Mask_$_12,ZeroMask);
	assume Mask_$_13 == Mask_$_12;
	goto anon20;
anon58_Else:
	assume !$_$_condition_$15;
	assume $_$_condition_$15 <==> (!(Heap_$_0[this,Node.next] == null));
	assume Heap_$_0[this,Node.next] == null;
	assume Mask_$_13 == Mask_$_9;
	goto anon20;
anon20:
	assert { :msg "  9.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  9.15: Location might not be readable." } true ==> CanRead(Mask_$_13,ZeroMask,this,Node.prev);
	if ($_$_condition_$16) { goto anon59_Then; } else { goto anon59_Else; }
anon59_Then:
	assume $_$_condition_$16;
	assume $_$_condition_$16 <==> (Heap_$_0[this,Node.prev] == null);
	assume Heap_$_0[this,Node.prev] == null;
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_13,ZeroMask);
	assume (Heap_$_0[this,Node.prev] == null) || (dtype(Heap_$_0[this,Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_14 == Mask_$_13[this,Node.prev := Mask_$_13[this,Node.prev][perm$R := Mask_$_13[this,Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_14);
	assume IsGoodState(heapFragment(Heap_$_0[this,Node.prev]));
	assume wf(Heap_$_0,Mask_$_14,ZeroMask);
	assume wf(Heap_$_0,Mask_$_14,ZeroMask);
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_14,ZeroMask);
	assume (Heap_$_0[this,Node.next] == null) || (dtype(Heap_$_0[this,Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_15 == Mask_$_14[this,Node.next := Mask_$_14[this,Node.next][perm$R := Mask_$_14[this,Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_15);
	assume IsGoodState(heapFragment(Heap_$_0[this,Node.next]));
	assume wf(Heap_$_0,Mask_$_15,ZeroMask);
	assume wf(Heap_$_0,Mask_$_15,ZeroMask);
	assume !(this == null);
	assume wf(Heap_$_0,Mask_$_15,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume Mask_$_16 == Mask_$_15[this,mu := Mask_$_15[this,mu][perm$R := Mask_$_15[this,mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_16);
	assume IsGoodState(heapFragment(Heap_$_0[this,mu]));
	assume wf(Heap_$_0,Mask_$_16,ZeroMask);
	assume wf(Heap_$_0,Mask_$_16,ZeroMask);
	assume Mask_$_17 == Mask_$_16;
	goto anon22;
anon59_Else:
	assume !$_$_condition_$16;
	assume $_$_condition_$16 <==> (Heap_$_0[this,Node.prev] == null);
	assume !(Heap_$_0[this,Node.prev] == null);
	assume Mask_$_17 == Mask_$_13;
	goto anon22;
anon22:
	assert { :msg "  10.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  10.15: Location might not be readable." } true ==> CanRead(Mask_$_17,ZeroMask,this,Node.prev);
	if ($_$_condition_$17) { goto anon60_Then; } else { goto anon60_Else; }
anon60_Then:
	assume $_$_condition_$17;
	assume $_$_condition_$17 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume !(Heap_$_0[this,Node.prev] == null);
	assert { :msg "  10.35: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  10.35: Location might not be readable." } true ==> CanRead(Mask_$_17,ZeroMask,this,Node.prev);
	assume !(Heap_$_0[this,Node.prev] == null);
	assume wf(Heap_$_0,Mask_$_17,ZeroMask);
	assume (Heap_$_0[Heap_$_0[this,Node.prev],Node.next] == null) || (dtype(Heap_$_0[Heap_$_0[this,Node.prev],Node.next]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_18 == Mask_$_17[Heap_$_0[this,Node.prev],Node.next := Mask_$_17[Heap_$_0[this,Node.prev],Node.next][perm$R := Mask_$_17[Heap_$_0[this,Node.prev],Node.next][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_18);
	assume IsGoodState(heapFragment(Heap_$_0[Heap_$_0[this,Node.prev],Node.next]));
	assume wf(Heap_$_0,Mask_$_18,ZeroMask);
	assume wf(Heap_$_0,Mask_$_18,ZeroMask);
	assert { :msg "  10.57: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  10.57: Location might not be readable." } true ==> CanRead(Mask_$_18,ZeroMask,this,Node.prev);
	assume !(Heap_$_0[this,Node.prev] == null);
	assume wf(Heap_$_0,Mask_$_18,ZeroMask);
	assume (Heap_$_0[Heap_$_0[this,Node.prev],Node.prev] == null) || (dtype(Heap_$_0[Heap_$_0[this,Node.prev],Node.prev]) == Node#t);
	assume Fractions(25) > 0;
	assume Mask_$_19 == Mask_$_18[Heap_$_0[this,Node.prev],Node.prev := Mask_$_18[Heap_$_0[this,Node.prev],Node.prev][perm$R := Mask_$_18[Heap_$_0[this,Node.prev],Node.prev][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_19);
	assume IsGoodState(heapFragment(Heap_$_0[Heap_$_0[this,Node.prev],Node.prev]));
	assume wf(Heap_$_0,Mask_$_19,ZeroMask);
	assume wf(Heap_$_0,Mask_$_19,ZeroMask);
	assert { :msg "  10.79: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  10.79: Location might not be readable." } true ==> CanRead(Mask_$_19,ZeroMask,this,Node.prev);
	assume !(Heap_$_0[this,Node.prev] == null);
	assume wf(Heap_$_0,Mask_$_19,ZeroMask);
	assume true;
	assume Fractions(25) > 0;
	assume Mask_$_20 == Mask_$_19[Heap_$_0[this,Node.prev],mu := Mask_$_19[Heap_$_0[this,Node.prev],mu][perm$R := Mask_$_19[Heap_$_0[this,Node.prev],mu][perm$R] + Fractions(25)]];
	assume IsGoodMask(Mask_$_20);
	assume IsGoodState(heapFragment(Heap_$_0[Heap_$_0[this,Node.prev],mu]));
	assume wf(Heap_$_0,Mask_$_20,ZeroMask);
	assume wf(Heap_$_0,Mask_$_20,ZeroMask);
	assume Mask_$_21 == Mask_$_20;
	goto anon24;
anon60_Else:
	assume !$_$_condition_$17;
	assume $_$_condition_$17 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume Heap_$_0[this,Node.prev] == null;
	assume Mask_$_21 == Mask_$_17;
	goto anon24;
anon24:
	assert { :msg "  11.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  11.15: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.next);
	if ($_$_condition_$18) { goto anon61_Then; } else { goto anon61_Else; }
anon61_Then:
	assume $_$_condition_$18;
	assume $_$_condition_$18 <==> (!(Heap_$_0[this,Node.next] == null));
	assume !(Heap_$_0[this,Node.next] == null);
	assert { :msg "  11.31: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  11.31: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.next);
	assert { :msg "  11.31: Receiver might be null." } true ==> (!(Heap_$_0[this,Node.next] == null));
	assert { :msg "  11.31: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,Heap_$_0[this,Node.next],Node.prev);
	assume !(Heap_$_0[Heap_$_0[this,Node.next],Node.prev] == null);
	assert { :msg "  11.52: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  11.52: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.next);
	assert { :msg "  11.52: Receiver might be null." } true ==> (!(Heap_$_0[this,Node.next] == null));
	assert { :msg "  11.52: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,Heap_$_0[this,Node.next],Node.prev);
	assume Heap_$_0[Heap_$_0[this,Node.next],Node.prev] == this;
	goto anon26;
anon61_Else:
	assume !$_$_condition_$18;
	assume $_$_condition_$18 <==> (!(Heap_$_0[this,Node.next] == null));
	assume Heap_$_0[this,Node.next] == null;
	goto anon26;
anon26:
	assert { :msg "  12.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  12.15: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.prev);
	if ($_$_condition_$19) { goto anon62_Then; } else { goto anon62_Else; }
anon62_Then:
	assume $_$_condition_$19;
	assume $_$_condition_$19 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume !(Heap_$_0[this,Node.prev] == null);
	assert { :msg "  12.31: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  12.31: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.prev);
	assert { :msg "  12.31: Receiver might be null." } true ==> (!(Heap_$_0[this,Node.prev] == null));
	assert { :msg "  12.31: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,Heap_$_0[this,Node.prev],Node.next);
	assume !(Heap_$_0[Heap_$_0[this,Node.prev],Node.next] == null);
	assert { :msg "  12.52: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  12.52: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.prev);
	assert { :msg "  12.52: Receiver might be null." } true ==> (!(Heap_$_0[this,Node.prev] == null));
	assert { :msg "  12.52: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,Heap_$_0[this,Node.prev],Node.next);
	assume Heap_$_0[Heap_$_0[this,Node.prev],Node.next] == this;
	goto anon28;
anon62_Else:
	assume !$_$_condition_$19;
	assume $_$_condition_$19 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume Heap_$_0[this,Node.prev] == null;
	goto anon28;
anon28:
	assert { :msg "  13.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  13.15: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.next);
	if ($_$_condition_$20) { goto anon63_Then; } else { goto anon63_Else; }
anon63_Then:
	assume $_$_condition_$20;
	assume $_$_condition_$20 <==> (!(Heap_$_0[this,Node.next] == null));
	assume !(Heap_$_0[this,Node.next] == null);
	assert { :msg "  13.30: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  13.30: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,mu);
	assert { :msg "  13.41: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  13.41: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.next);
	assert { :msg "  13.41: Receiver might be null." } true ==> (!(Heap_$_0[this,Node.next] == null));
	assert { :msg "  13.41: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,Heap_$_0[this,Node.next],mu);
	assume MuBelow(Heap_$_0[this,mu],Heap_$_0[Heap_$_0[this,Node.next],mu]);
	goto anon30;
anon63_Else:
	assume !$_$_condition_$20;
	assume $_$_condition_$20 <==> (!(Heap_$_0[this,Node.next] == null));
	assume Heap_$_0[this,Node.next] == null;
	goto anon30;
anon30:
	assert { :msg "  14.15: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  14.15: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.prev);
	if ($_$_condition_$21) { goto anon64_Then; } else { goto anon64_Else; }
anon64_Then:
	assume $_$_condition_$21;
	assume $_$_condition_$21 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume !(Heap_$_0[this,Node.prev] == null);
	assert { :msg "  14.30: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  14.30: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,Node.prev);
	assert { :msg "  14.30: Receiver might be null." } true ==> (!(Heap_$_0[this,Node.prev] == null));
	assert { :msg "  14.30: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,Heap_$_0[this,Node.prev],mu);
	assert { :msg "  14.41: Receiver might be null." } true ==> (!(this == null));
	assert { :msg "  14.41: Location might not be readable." } true ==> CanRead(Mask_$_21,ZeroMask,this,mu);
	assume MuBelow(Heap_$_0[Heap_$_0[this,Node.prev],mu],Heap_$_0[this,mu]);
	goto anon32;
anon64_Else:
	assume !$_$_condition_$21;
	assume $_$_condition_$21 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume Heap_$_0[this,Node.prev] == null;
	goto anon32;
anon32:
	assume IsGoodMask(Mask_$_21);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  1.1: SMOKE-TEST-50. (Monitor invariant is equivalent to false.)" } !(1 == 1);
	if ($_$_condition_$22) { goto anon65_Then; } else { goto anon65_Else; }
anon65_Then:
	assume $_$_condition_$22;
	assume $_$_condition_$22 <==> (!(Heap_$_0[this,Node.next] == null));
	assume !(Heap_$_0[this,Node.next] == null);
	assert { :msg "  11.5: Monitor invariant might not be reflexive. The expression at 11.31 might not evaluate to true." } !(Heap_$_0[Heap_$_0[this,Node.next],Node.prev] == null);
	assert { :msg "  11.5: Monitor invariant might not be reflexive. The expression at 11.52 might not evaluate to true." } Heap_$_0[Heap_$_0[this,Node.next],Node.prev] == this;
	goto $branchMerge_7;
anon65_Else:
	assume !$_$_condition_$22;
	assume $_$_condition_$22 <==> (!(Heap_$_0[this,Node.next] == null));
	assume Heap_$_0[this,Node.next] == null;
	goto $branchMerge_7;
anon66_Then:
	assume $_$_condition_$23;
	assume $_$_condition_$23 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume !(Heap_$_0[this,Node.prev] == null);
	assert { :msg "  12.5: Monitor invariant might not be reflexive. The expression at 12.31 might not evaluate to true." } !(Heap_$_0[Heap_$_0[this,Node.prev],Node.next] == null);
	assert { :msg "  12.5: Monitor invariant might not be reflexive. The expression at 12.52 might not evaluate to true." } Heap_$_0[Heap_$_0[this,Node.prev],Node.next] == this;
	goto $branchMerge_8;
anon66_Else:
	assume !$_$_condition_$23;
	assume $_$_condition_$23 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume Heap_$_0[this,Node.prev] == null;
	goto $branchMerge_8;
anon67_Then:
	assume $_$_condition_$25;
	assume $_$_condition_$25 <==> (!(Heap_$_0[this,Node.next] == null));
	assume !(Heap_$_0[this,Node.next] == null);
	assert { :msg "  13.5: Monitor invariant might not be reflexive. The expression at 13.30 might not evaluate to true." } MuBelow(Heap_$_0[this,mu],Heap_$_0[Heap_$_0[this,Node.next],mu]);
	goto $branchMerge_9;
anon67_Else:
	assume !$_$_condition_$25;
	assume $_$_condition_$25 <==> (!(Heap_$_0[this,Node.next] == null));
	assume Heap_$_0[this,Node.next] == null;
	goto $branchMerge_9;
anon68_Then:
	assume $_$_condition_$27;
	assume $_$_condition_$27 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume !(Heap_$_0[this,Node.prev] == null);
	assert { :msg "  14.5: Monitor invariant might not be reflexive. The expression at 14.30 might not evaluate to true." } MuBelow(Heap_$_0[Heap_$_0[this,Node.prev],mu],Heap_$_0[this,mu]);
	goto anon40;
anon68_Else:
	assume !$_$_condition_$27;
	assume $_$_condition_$27 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume Heap_$_0[this,Node.prev] == null;
	goto anon40;
anon40:
	assert { :msg "  6.5: Monitor invariant might not be reflexive. The permission at 6.15 might not be positive." } ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assert { :msg "  6.5: Monitor invariant might not be reflexive. Insufficient permission at 6.15 for Node.prev." } ((Fractions(50) - 0) <= Mask_$_21[this,Node.prev][perm$R]) && (((Fractions(50) - 0) == Mask_$_21[this,Node.prev][perm$R]) ==> ((0 - 1) <= Mask_$_21[this,Node.prev][perm$N]));
	assume exhaleMask#_11_$_0 == Mask_$_21[this,Node.prev := Mask_$_21[this,Node.prev][perm$N := Mask_$_21[this,Node.prev][perm$N] - (0 - 1)]];
	assume exhaleMask#_11_$_1 == exhaleMask#_11_$_0[this,Node.prev := exhaleMask#_11_$_0[this,Node.prev][perm$R := exhaleMask#_11_$_0[this,Node.prev][perm$R] - (Fractions(50) - 0)]];
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assume IsGoodMask(exhaleMask#_11_$_1);
	assume wf(Heap_$_0,exhaleMask#_11_$_1,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  6.5: Monitor invariant might not be reflexive. The permission at 6.38 might not be positive." } ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assert { :msg "  6.5: Monitor invariant might not be reflexive. Insufficient permission at 6.38 for Node.next." } ((Fractions(50) - 0) <= exhaleMask#_11_$_1[this,Node.next][perm$R]) && (((Fractions(50) - 0) == exhaleMask#_11_$_1[this,Node.next][perm$R]) ==> ((0 - 1) <= exhaleMask#_11_$_1[this,Node.next][perm$N]));
	assume exhaleMask#_11_$_2 == exhaleMask#_11_$_1[this,Node.next := exhaleMask#_11_$_1[this,Node.next][perm$N := exhaleMask#_11_$_1[this,Node.next][perm$N] - (0 - 1)]];
	assume exhaleMask#_11_$_3 == exhaleMask#_11_$_2[this,Node.next := exhaleMask#_11_$_2[this,Node.next][perm$R := exhaleMask#_11_$_2[this,Node.next][perm$R] - (Fractions(50) - 0)]];
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assume IsGoodMask(exhaleMask#_11_$_3);
	assume wf(Heap_$_0,exhaleMask#_11_$_3,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  6.5: Monitor invariant might not be reflexive. The permission at 6.61 might not be positive." } ((Fractions(50) - 0) > 0) || (false && ((0 - 1) > 0));
	assert { :msg "  6.5: Monitor invariant might not be reflexive. Insufficient permission at 6.61 for mu." } ((Fractions(50) - 0) <= exhaleMask#_11_$_3[this,mu][perm$R]) && (((Fractions(50) - 0) == exhaleMask#_11_$_3[this,mu][perm$R]) ==> ((0 - 1) <= exhaleMask#_11_$_3[this,mu][perm$N]));
	assume exhaleMask#_11_$_4 == exhaleMask#_11_$_3[this,mu := exhaleMask#_11_$_3[this,mu][perm$N := exhaleMask#_11_$_3[this,mu][perm$N] - (0 - 1)]];
	assume exhaleMask#_11_$_5 == exhaleMask#_11_$_4[this,mu := exhaleMask#_11_$_4[this,mu][perm$R := exhaleMask#_11_$_4[this,mu][perm$R] - (Fractions(50) - 0)]];
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assume IsGoodMask(exhaleMask#_11_$_5);
	assume wf(Heap_$_0,exhaleMask#_11_$_5,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	if ($_$_condition_$29) { goto anon69_Then; } else { goto anon69_Else; }
anon69_Then:
	assume $_$_condition_$29;
	assume $_$_condition_$29 <==> (Heap_$_0[this,Node.next] == null);
	assume Heap_$_0[this,Node.next] == null;
	assert { :msg "  7.5: Monitor invariant might not be reflexive. The permission at 7.31 might not be positive." } Fractions(25) > 0;
	assert { :msg "  7.5: Monitor invariant might not be reflexive. Insufficient fraction at 7.31 for Node.prev." } (Fractions(25) <= exhaleMask#_11_$_5[this,Node.prev][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_5[this,Node.prev][perm$R]) ==> (0 <= exhaleMask#_11_$_5[this,Node.prev][perm$N]));
	assume exhaleMask#_11_$_6 == exhaleMask#_11_$_5[this,Node.prev := exhaleMask#_11_$_5[this,Node.prev][perm$R := exhaleMask#_11_$_5[this,Node.prev][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_6);
	assume wf(Heap_$_0,exhaleMask#_11_$_6,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  7.5: Monitor invariant might not be reflexive. The permission at 7.48 might not be positive." } Fractions(25) > 0;
	assert { :msg "  7.5: Monitor invariant might not be reflexive. Insufficient fraction at 7.48 for Node.next." } (Fractions(25) <= exhaleMask#_11_$_6[this,Node.next][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_6[this,Node.next][perm$R]) ==> (0 <= exhaleMask#_11_$_6[this,Node.next][perm$N]));
	assume exhaleMask#_11_$_7 == exhaleMask#_11_$_6[this,Node.next := exhaleMask#_11_$_6[this,Node.next][perm$R := exhaleMask#_11_$_6[this,Node.next][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_7);
	assume wf(Heap_$_0,exhaleMask#_11_$_7,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  7.5: Monitor invariant might not be reflexive. The permission at 7.65 might not be positive." } Fractions(25) > 0;
	assert { :msg "  7.5: Monitor invariant might not be reflexive. Insufficient fraction at 7.65 for mu." } (Fractions(25) <= exhaleMask#_11_$_7[this,mu][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_7[this,mu][perm$R]) ==> (0 <= exhaleMask#_11_$_7[this,mu][perm$N]));
	assume exhaleMask#_11_$_8 == exhaleMask#_11_$_7[this,mu := exhaleMask#_11_$_7[this,mu][perm$R := exhaleMask#_11_$_7[this,mu][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_8);
	assume wf(Heap_$_0,exhaleMask#_11_$_8,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assume exhaleMask#_11_$_9 == exhaleMask#_11_$_8;
	goto $branchMerge_10;
anon69_Else:
	assume !$_$_condition_$29;
	assume $_$_condition_$29 <==> (Heap_$_0[this,Node.next] == null);
	assume !(Heap_$_0[this,Node.next] == null);
	assume exhaleMask#_11_$_9 == exhaleMask#_11_$_5;
	goto $branchMerge_10;
anon70_Then:
	assume $_$_condition_$30;
	assume $_$_condition_$30 <==> (!(Heap_$_0[this,Node.next] == null));
	assume !(Heap_$_0[this,Node.next] == null);
	assert { :msg "  8.5: Monitor invariant might not be reflexive. The permission at 8.31 might not be positive." } Fractions(25) > 0;
	assert { :msg "  8.5: Monitor invariant might not be reflexive. Insufficient fraction at 8.31 for Node.next." } (Fractions(25) <= exhaleMask#_11_$_9[Heap_$_0[this,Node.next],Node.next][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_9[Heap_$_0[this,Node.next],Node.next][perm$R]) ==> (0 <= exhaleMask#_11_$_9[Heap_$_0[this,Node.next],Node.next][perm$N]));
	assume exhaleMask#_11_$_10 == exhaleMask#_11_$_9[Heap_$_0[this,Node.next],Node.next := exhaleMask#_11_$_9[Heap_$_0[this,Node.next],Node.next][perm$R := exhaleMask#_11_$_9[Heap_$_0[this,Node.next],Node.next][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_10);
	assume wf(Heap_$_0,exhaleMask#_11_$_10,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  8.5: Monitor invariant might not be reflexive. The permission at 8.53 might not be positive." } Fractions(25) > 0;
	assert { :msg "  8.5: Monitor invariant might not be reflexive. Insufficient fraction at 8.53 for Node.prev." } (Fractions(25) <= exhaleMask#_11_$_10[Heap_$_0[this,Node.next],Node.prev][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_10[Heap_$_0[this,Node.next],Node.prev][perm$R]) ==> (0 <= exhaleMask#_11_$_10[Heap_$_0[this,Node.next],Node.prev][perm$N]));
	assume exhaleMask#_11_$_11 == exhaleMask#_11_$_10[Heap_$_0[this,Node.next],Node.prev := exhaleMask#_11_$_10[Heap_$_0[this,Node.next],Node.prev][perm$R := exhaleMask#_11_$_10[Heap_$_0[this,Node.next],Node.prev][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_11);
	assume wf(Heap_$_0,exhaleMask#_11_$_11,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  8.5: Monitor invariant might not be reflexive. The permission at 8.75 might not be positive." } Fractions(25) > 0;
	assert { :msg "  8.5: Monitor invariant might not be reflexive. Insufficient fraction at 8.75 for mu." } (Fractions(25) <= exhaleMask#_11_$_11[Heap_$_0[this,Node.next],mu][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_11[Heap_$_0[this,Node.next],mu][perm$R]) ==> (0 <= exhaleMask#_11_$_11[Heap_$_0[this,Node.next],mu][perm$N]));
	assume exhaleMask#_11_$_12 == exhaleMask#_11_$_11[Heap_$_0[this,Node.next],mu := exhaleMask#_11_$_11[Heap_$_0[this,Node.next],mu][perm$R := exhaleMask#_11_$_11[Heap_$_0[this,Node.next],mu][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_12);
	assume wf(Heap_$_0,exhaleMask#_11_$_12,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assume exhaleMask#_11_$_13 == exhaleMask#_11_$_12;
	goto $branchMerge_11;
anon70_Else:
	assume !$_$_condition_$30;
	assume $_$_condition_$30 <==> (!(Heap_$_0[this,Node.next] == null));
	assume Heap_$_0[this,Node.next] == null;
	assume exhaleMask#_11_$_13 == exhaleMask#_11_$_9;
	goto $branchMerge_11;
anon71_Then:
	assume $_$_condition_$32;
	assume $_$_condition_$32 <==> (Heap_$_0[this,Node.prev] == null);
	assume Heap_$_0[this,Node.prev] == null;
	assert { :msg "  9.5: Monitor invariant might not be reflexive. The permission at 9.31 might not be positive." } Fractions(25) > 0;
	assert { :msg "  9.5: Monitor invariant might not be reflexive. Insufficient fraction at 9.31 for Node.prev." } (Fractions(25) <= exhaleMask#_11_$_13[this,Node.prev][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_13[this,Node.prev][perm$R]) ==> (0 <= exhaleMask#_11_$_13[this,Node.prev][perm$N]));
	assume exhaleMask#_11_$_14 == exhaleMask#_11_$_13[this,Node.prev := exhaleMask#_11_$_13[this,Node.prev][perm$R := exhaleMask#_11_$_13[this,Node.prev][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_14);
	assume wf(Heap_$_0,exhaleMask#_11_$_14,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  9.5: Monitor invariant might not be reflexive. The permission at 9.48 might not be positive." } Fractions(25) > 0;
	assert { :msg "  9.5: Monitor invariant might not be reflexive. Insufficient fraction at 9.48 for Node.next." } (Fractions(25) <= exhaleMask#_11_$_14[this,Node.next][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_14[this,Node.next][perm$R]) ==> (0 <= exhaleMask#_11_$_14[this,Node.next][perm$N]));
	assume exhaleMask#_11_$_15 == exhaleMask#_11_$_14[this,Node.next := exhaleMask#_11_$_14[this,Node.next][perm$R := exhaleMask#_11_$_14[this,Node.next][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_15);
	assume wf(Heap_$_0,exhaleMask#_11_$_15,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  9.5: Monitor invariant might not be reflexive. The permission at 9.65 might not be positive." } Fractions(25) > 0;
	assert { :msg "  9.5: Monitor invariant might not be reflexive. Insufficient fraction at 9.65 for mu." } (Fractions(25) <= exhaleMask#_11_$_15[this,mu][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_15[this,mu][perm$R]) ==> (0 <= exhaleMask#_11_$_15[this,mu][perm$N]));
	assume exhaleMask#_11_$_16 == exhaleMask#_11_$_15[this,mu := exhaleMask#_11_$_15[this,mu][perm$R := exhaleMask#_11_$_15[this,mu][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_16);
	assume wf(Heap_$_0,exhaleMask#_11_$_16,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assume exhaleMask#_11_$_17 == exhaleMask#_11_$_16;
	goto $branchMerge_12;
anon71_Else:
	assume !$_$_condition_$32;
	assume $_$_condition_$32 <==> (Heap_$_0[this,Node.prev] == null);
	assume !(Heap_$_0[this,Node.prev] == null);
	assume exhaleMask#_11_$_17 == exhaleMask#_11_$_13;
	goto $branchMerge_12;
anon72_Then:
	assume $_$_condition_$34;
	assume $_$_condition_$34 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume !(Heap_$_0[this,Node.prev] == null);
	assert { :msg "  10.5: Monitor invariant might not be reflexive. The permission at 10.31 might not be positive." } Fractions(25) > 0;
	assert { :msg "  10.5: Monitor invariant might not be reflexive. Insufficient fraction at 10.31 for Node.next." } (Fractions(25) <= exhaleMask#_11_$_17[Heap_$_0[this,Node.prev],Node.next][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_17[Heap_$_0[this,Node.prev],Node.next][perm$R]) ==> (0 <= exhaleMask#_11_$_17[Heap_$_0[this,Node.prev],Node.next][perm$N]));
	assume exhaleMask#_11_$_18 == exhaleMask#_11_$_17[Heap_$_0[this,Node.prev],Node.next := exhaleMask#_11_$_17[Heap_$_0[this,Node.prev],Node.next][perm$R := exhaleMask#_11_$_17[Heap_$_0[this,Node.prev],Node.next][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_18);
	assume wf(Heap_$_0,exhaleMask#_11_$_18,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  10.5: Monitor invariant might not be reflexive. The permission at 10.53 might not be positive." } Fractions(25) > 0;
	assert { :msg "  10.5: Monitor invariant might not be reflexive. Insufficient fraction at 10.53 for Node.prev." } (Fractions(25) <= exhaleMask#_11_$_18[Heap_$_0[this,Node.prev],Node.prev][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_18[Heap_$_0[this,Node.prev],Node.prev][perm$R]) ==> (0 <= exhaleMask#_11_$_18[Heap_$_0[this,Node.prev],Node.prev][perm$N]));
	assume exhaleMask#_11_$_19 == exhaleMask#_11_$_18[Heap_$_0[this,Node.prev],Node.prev := exhaleMask#_11_$_18[Heap_$_0[this,Node.prev],Node.prev][perm$R := exhaleMask#_11_$_18[Heap_$_0[this,Node.prev],Node.prev][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_19);
	assume wf(Heap_$_0,exhaleMask#_11_$_19,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assert { :msg "  10.5: Monitor invariant might not be reflexive. The permission at 10.75 might not be positive." } Fractions(25) > 0;
	assert { :msg "  10.5: Monitor invariant might not be reflexive. Insufficient fraction at 10.75 for mu." } (Fractions(25) <= exhaleMask#_11_$_19[Heap_$_0[this,Node.prev],mu][perm$R]) && ((Fractions(25) == exhaleMask#_11_$_19[Heap_$_0[this,Node.prev],mu][perm$R]) ==> (0 <= exhaleMask#_11_$_19[Heap_$_0[this,Node.prev],mu][perm$N]));
	assume exhaleMask#_11_$_20 == exhaleMask#_11_$_19[Heap_$_0[this,Node.prev],mu := exhaleMask#_11_$_19[Heap_$_0[this,Node.prev],mu][perm$R := exhaleMask#_11_$_19[Heap_$_0[this,Node.prev],mu][perm$R] - Fractions(25)]];
	assume IsGoodMask(exhaleMask#_11_$_20);
	assume wf(Heap_$_0,exhaleMask#_11_$_20,ZeroMask);
	assume wf(Heap_$_0,Mask_$_21,ZeroMask);
	assume exhaleMask#_11_$_21 == exhaleMask#_11_$_20;
	goto anon48;
anon72_Else:
	assume !$_$_condition_$34;
	assume $_$_condition_$34 <==> (!(Heap_$_0[this,Node.prev] == null));
	assume Heap_$_0[this,Node.prev] == null;
	assume exhaleMask#_11_$_21 == exhaleMask#_11_$_17;
	goto anon48;
anon48:
	assume IsGoodExhaleState(exhaleHeap#_10_$_0,Heap_$_0,exhaleMask#_11_$_21,ZeroMask);
	assume IsGoodMask(exhaleMask#_11_$_21);
	assume wf(exhaleHeap#_10_$_0,exhaleMask#_11_$_21,ZeroMask);
	assert { :msg "  1.1: Monitor invariant is not allowed to contain debt." } (forall  ch : ref :: ( (ch == null) || (0 <= ZeroCredits[ch]) ));
	goto $exit;
$branchMerge_0:
	if ($_$_condition_$0) { goto anon50_Then; } else { goto anon50_Else; }
$branchMerge_1:
	if ($_$_condition_$2) { goto anon51_Then; } else { goto anon51_Else; }
$branchMerge_2:
	if ($_$_condition_$4) { goto anon52_Then; } else { goto anon52_Else; }
$branchMerge_3:
	if ($_$_condition_$6) { goto anon53_Then; } else { goto anon53_Else; }
$branchMerge_4:
	if ($_$_condition_$8) { goto anon54_Then; } else { goto anon54_Else; }
$branchMerge_5:
	if ($_$_condition_$10) { goto anon55_Then; } else { goto anon55_Else; }
$branchMerge_6:
	if ($_$_condition_$12) { goto anon56_Then; } else { goto anon56_Else; }
$branchMerge_7:
	if ($_$_condition_$23) { goto anon66_Then; } else { goto anon66_Else; }
$branchMerge_8:
	if ($_$_condition_$25) { goto anon67_Then; } else { goto anon67_Else; }
$branchMerge_9:
	if ($_$_condition_$27) { goto anon68_Then; } else { goto anon68_Else; }
$branchMerge_10:
	if ($_$_condition_$30) { goto anon70_Then; } else { goto anon70_Else; }
$branchMerge_11:
	if ($_$_condition_$32) { goto anon71_Then; } else { goto anon71_Else; }
$branchMerge_12:
	if ($_$_condition_$34) { goto anon72_Then; } else { goto anon72_Else; }
}
