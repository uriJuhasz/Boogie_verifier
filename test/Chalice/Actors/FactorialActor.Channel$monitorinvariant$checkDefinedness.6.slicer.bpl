type Integer = int;
type Boolean = bool;
type HeapType = <a>[ref,Field (a)]a;
type MaskType = <a>[ref,Field (a)][PermissionComponent]int;
type CreditsType = [ref]int;
type ArgSeq = <T>[int]T;
type Field m0;
type ref;
type PermissionComponent;
type ModuleName;
type TypeName;
type Mu;
const null : ref;
const unique perm$R : PermissionComponent;
const unique perm$N : PermissionComponent;
const Permission$denominator : int;
const Permission$FullFraction : int;
const Permission$Zero : [PermissionComponent]int;
const Permission$Full : [PermissionComponent]int;
const ZeroMask : MaskType;
const unique joinable : Field (int);
const unique forkK : Field (int);
const channelK : int;
const monitorK : int;
const predicateK : int;
const nostate : HeapType;
const CurrentModule : ModuleName;
const CanAssumeFunctionDefs : bool;
const unique mu : Field (Mu);
const $LockBottom : Mu;
const unique held : Field (int);
const unique rdheld : Field (bool);
const ZeroCredits : CreditsType;
const unique Channel#t : TypeName;
const unique module#default : ModuleName;
const unique FactorialActorChannelExpEP.state : Field (int);
const unique FactorialActorChannelExpEP.ch : Field (ref);
const unique FactorialActorChannelExpEP.expch : Field (ref);
const unique FactorialActorChannelExpEP.valid : Field (HeapType);
const unique FactorialActorChannelImpEP.state : Field (int);
const unique FactorialActorChannelImpEP.ch : Field (ref);
const unique FactorialActorChannelImpEP.impch : Field (ref);
const unique FactorialActorChannelImpEP.valid : Field (HeapType);
const unique FactorialActorChannel.imp : Field (ref);
const unique FactorialActorChannel.exp : Field (ref);
const unique FactorialActorChannel.valid : Field (HeapType);
const unique FactorialActorChannel.initImpState : Field (HeapType);
const unique FactorialActorChannel.initExpState : Field (HeapType);
const unique FactorialContChannelExpEP.state : Field (int);
const unique FactorialContChannelExpEP.ch : Field (ref);
const unique FactorialContChannelExpEP.expch : Field (ref);
const unique FactorialContChannelExpEP.valid : Field (HeapType);
const unique FactorialContChannelImpEP.state : Field (int);
const unique FactorialContChannelImpEP.ch : Field (ref);
const unique FactorialContChannelImpEP.impch : Field (ref);
const unique FactorialContChannelImpEP.valid : Field (HeapType);
const unique FactorialContChannel.imp : Field (ref);
const unique FactorialContChannel.exp : Field (ref);
const unique FactorialContChannel.valid : Field (HeapType);
const unique FactorialContChannel.initImpState : Field (HeapType);
const unique FactorialContChannel.initExpState : Field (HeapType);
const unique FutureChannelExpEP.state : Field (int);
const unique FutureChannelExpEP.ch : Field (ref);
const unique FutureChannelExpEP.expch : Field (ref);
const unique FutureChannelExpEP.valid : Field (HeapType);
const unique FutureChannelImpEP.state : Field (int);
const unique FutureChannelImpEP.ch : Field (ref);
const unique FutureChannelImpEP.impch : Field (ref);
const unique FutureChannelImpEP.valid : Field (HeapType);
const unique FutureChannel.imp : Field (ref);
const unique FutureChannel.exp : Field (ref);
const unique FutureChannel.valid : Field (HeapType);
const unique FutureChannel.initImpState : Field (HeapType);
const unique FutureChannel.initExpState : Field (HeapType);
const unique Future.sent : Field (ref);
const unique Future.value : Field (ref);
const unique Future.q : Field (ref);
const unique Message.type : Field (int);
const unique Message.sender1 : Field (ref);
const unique Message.sender3 : Field (ref);
const unique Message.sender2 : Field (ref);
const unique Message.sender4 : Field (ref);
const unique Message.receiver1 : Field (ref);
const unique Message.receiver2 : Field (ref);
const unique Message.receiver3 : Field (ref);
const unique Message.receiver4 : Field (ref);
const unique Message.v1 : Field (int);
const unique Message.vo1 : Field (int);
const unique Message.cust1 : Field (ref);
const unique Message.vr1 : Field (int);
const unique Message.old1 : Field (ref);
const unique Message.vr2 : Field (int);
const unique Message.old2 : Field (ref);
const unique Message.vr3 : Field (int);
const unique Message.invValue : Field (HeapType);
const unique Message.invResult1 : Field (HeapType);
const unique Message.invResult2 : Field (HeapType);
const unique Message.invFinalResult : Field (HeapType);
const unique Message.inv : Field (HeapType);
const unique FactorialActor.q : Field (ref);
const unique FactorialCont.q : Field (ref);
const unique FactorialCont.v : Field (int);
const unique FactorialCont.vo : Field (int);
const unique FactorialCont.cust : Field (ref);
function Fractions(int) : int;
function IsGoodState <T> (T) : bool;
function combine <T,U> (T,U) : T;
function dtype(ref) : TypeName;
function MuBelow(Mu,Mu) : bool;
function wf(HeapType,MaskType) : bool;
function {:expand  false} CanRead <T> (MaskType,ref,Field (T)) : bool;
function {:expand  true} IsGoodMask(MaskType) : bool;
function DecPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function IncPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function NonPredicateField <T> (Field (T)) : bool;
function PredicateField <T> (Field (T)) : bool;
function ite <T> (bool,T,T) : T;
function #Future.getQ(HeapType,MaskType,ref) : ref;
function ##Future.getQ(HeapType,ref) : ref;
function #Message.factorial(HeapType,MaskType,ref,int) : int;
function #Message.factorial#limited(HeapType,MaskType,ref,int) : int;
function ##Message.factorial(HeapType,ref,int) : int;
function #FactorialActor.getQ(HeapType,MaskType,ref) : ref;
function ##FactorialActor.getQ(HeapType,ref) : ref;
function #FactorialCont.getQ(HeapType,MaskType,ref) : ref;
function ##FactorialCont.getQ(HeapType,ref) : ref;
var Heap : HeapType;
var Mask : MaskType;
var methodK#_7 : int;
var h0#_0 : HeapType;
var m0#_1 : MaskType;
var h1#_3 : HeapType;
var m1#_4 : MaskType;
var c1#_5 : CreditsType;
var Heap_$_0 : HeapType;
procedure Channel$monitorinvariant$checkDefinedness (this : ref)
{
	var methodK#_7 : int;
	var h0#_0 : HeapType;
	var m0#_1 : MaskType;
	var h1#_3 : HeapType;
	var m1#_4 : MaskType;
$start:
	assume Permission$denominator > 0;
	assume (Permission$Zero[perm$R] == 0) && (Permission$Zero[perm$N] == 0);
	assume (Permission$Full[perm$R] == Permission$FullFraction) && (Permission$Full[perm$N] == 0);
	assume (((((forall  o_$17 : ref, f_$13 : Field (Boolean) , pc_$0 : PermissionComponent :: ( ZeroMask[o_$17,f_$13][pc_$0] == 0 ))) && ((forall  o_$18 : ref, f_$14 : Field (Integer) , pc_$1 : PermissionComponent :: ( ZeroMask[o_$18,f_$14][pc_$1] == 0 )))) && ((forall  o_$19 : ref, f_$15 : Field (ref) , pc_$2 : PermissionComponent :: ( ZeroMask[o_$19,f_$15][pc_$2] == 0 )))) && ((forall  o_$20 : ref, f_$16 : Field (HeapType) , pc_$3 : PermissionComponent :: ( ZeroMask[o_$20,f_$16][pc_$3] == 0 )))) && ((forall  o_$21 : ref, f_$17 : Field (Mu) , pc_$4 : PermissionComponent :: ( ZeroMask[o_$21,f_$17][pc_$4] == 0 )));
	assume IsGoodMask(ZeroMask);
	assume NonPredicateField(joinable);
	assume NonPredicateField(forkK);
	assume (forall  n : Integer :: {Fractions(n)} ( Fractions(n) == (n * Permission$denominator) ));
	assume (forall  x : Integer, y : Integer :: ( ((0 <= x) && (x <= y)) ==> (Fractions(x) <= Fractions(y)) ));
	assume Permission$FullFraction == Fractions(100);
	assume (0 < channelK) && ((1000 * channelK) < Fractions(1));
	assume (0 < monitorK) && ((1000 * monitorK) < Fractions(1));
	assume (0 < predicateK) && ((1000 * predicateK) < Fractions(1));
	assume (predicateK == channelK) && (channelK == monitorK);
	assume ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((forall  a_$2 : Boolean, b_$2 : Boolean :: {IsGoodState(combine(a_$2,b_$2))} ( IsGoodState(combine(a_$2,b_$2)) <==> (IsGoodState(a_$2) && IsGoodState(b_$2)) ))) && ((forall  a_$3 : Boolean, b_$3 : Integer :: {IsGoodState(combine(a_$3,b_$3))} ( IsGoodState(combine(a_$3,b_$3)) <==> (IsGoodState(a_$3) && IsGoodState(b_$3)) )))) && ((forall  a_$4 : Boolean, b_$4 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$4,b_$4))} ( IsGoodState(combine(a_$4,b_$4)) <==> (IsGoodState(a_$4) && IsGoodState(b_$4)) )))) && ((forall  a_$5 : Boolean, b_$5 : PermissionComponent :: {IsGoodState(combine(a_$5,b_$5))} ( IsGoodState(combine(a_$5,b_$5)) <==> (IsGoodState(a_$5) && IsGoodState(b_$5)) )))) && ((forall  a_$6 : Boolean, b_$6 : MaskType :: {IsGoodState(combine(a_$6,b_$6))} ( IsGoodState(combine(a_$6,b_$6)) <==> (IsGoodState(a_$6) && IsGoodState(b_$6)) )))) && ((forall  a_$7 : Boolean, b_$7 : ref :: {IsGoodState(combine(a_$7,b_$7))} ( IsGoodState(combine(a_$7,b_$7)) <==> (IsGoodState(a_$7) && IsGoodState(b_$7)) )))) && ((forall  a_$8 : Boolean, b_$8 : Field (Integer)  :: {IsGoodState(combine(a_$8,b_$8))} ( IsGoodState(combine(a_$8,b_$8)) <==> (IsGoodState(a_$8) && IsGoodState(b_$8)) )))) && ((forall  a_$9 : Boolean, b_$9 : HeapType :: {IsGoodState(combine(a_$9,b_$9))} ( IsGoodState(combine(a_$9,b_$9)) <==> (IsGoodState(a_$9) && IsGoodState(b_$9)) )))) && ((forall  a_$10 : Boolean, b_$10 : Field (Mu)  :: {IsGoodState(combine(a_$10,b_$10))} ( IsGoodState(combine(a_$10,b_$10)) <==> (IsGoodState(a_$10) && IsGoodState(b_$10)) )))) && ((forall  a_$11 : Boolean, b_$11 : Mu :: {IsGoodState(combine(a_$11,b_$11))} ( IsGoodState(combine(a_$11,b_$11)) <==> (IsGoodState(a_$11) && IsGoodState(b_$11)) )))) && ((forall  a_$12 : Boolean, b_$12 : Field (Boolean)  :: {IsGoodState(combine(a_$12,b_$12))} ( IsGoodState(combine(a_$12,b_$12)) <==> (IsGoodState(a_$12) && IsGoodState(b_$12)) )))) && ((forall  a_$13 : Boolean, b_$13 : CreditsType :: {IsGoodState(combine(a_$13,b_$13))} ( IsGoodState(combine(a_$13,b_$13)) <==> (IsGoodState(a_$13) && IsGoodState(b_$13)) )))) && ((forall  a_$14 : Boolean, b_$14 : Field (ref)  :: {IsGoodState(combine(a_$14,b_$14))} ( IsGoodState(combine(a_$14,b_$14)) <==> (IsGoodState(a_$14) && IsGoodState(b_$14)) )))) && ((forall  a_$15 : Boolean, b_$15 : Field (HeapType)  :: {IsGoodState(combine(a_$15,b_$15))} ( IsGoodState(combine(a_$15,b_$15)) <==> (IsGoodState(a_$15) && IsGoodState(b_$15)) )))) && ((forall  a_$16 : Boolean, b_$16 : ModuleName :: {IsGoodState(combine(a_$16,b_$16))} ( IsGoodState(combine(a_$16,b_$16)) <==> (IsGoodState(a_$16) && IsGoodState(b_$16)) )))) && ((forall  a_$17 : Boolean, b_$17 : TypeName :: {IsGoodState(combine(a_$17,b_$17))} ( IsGoodState(combine(a_$17,b_$17)) <==> (IsGoodState(a_$17) && IsGoodState(b_$17)) )))) && ((forall  a_$18 : Integer, b_$18 : Boolean :: {IsGoodState(combine(a_$18,b_$18))} ( IsGoodState(combine(a_$18,b_$18)) <==> (IsGoodState(a_$18) && IsGoodState(b_$18)) )))) && ((forall  a_$19 : Integer, b_$19 : Integer :: {IsGoodState(combine(a_$19,b_$19))} ( IsGoodState(combine(a_$19,b_$19)) <==> (IsGoodState(a_$19) && IsGoodState(b_$19)) )))) && ((forall  a_$20 : Integer, b_$20 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$20,b_$20))} ( IsGoodState(combine(a_$20,b_$20)) <==> (IsGoodState(a_$20) && IsGoodState(b_$20)) )))) && ((forall  a_$21 : Integer, b_$21 : PermissionComponent :: {IsGoodState(combine(a_$21,b_$21))} ( IsGoodState(combine(a_$21,b_$21)) <==> (IsGoodState(a_$21) && IsGoodState(b_$21)) )))) && ((forall  a_$22 : Integer, b_$22 : MaskType :: {IsGoodState(combine(a_$22,b_$22))} ( IsGoodState(combine(a_$22,b_$22)) <==> (IsGoodState(a_$22) && IsGoodState(b_$22)) )))) && ((forall  a_$23 : Integer, b_$23 : ref :: {IsGoodState(combine(a_$23,b_$23))} ( IsGoodState(combine(a_$23,b_$23)) <==> (IsGoodState(a_$23) && IsGoodState(b_$23)) )))) && ((forall  a_$24 : Integer, b_$24 : Field (Integer)  :: {IsGoodState(combine(a_$24,b_$24))} ( IsGoodState(combine(a_$24,b_$24)) <==> (IsGoodState(a_$24) && IsGoodState(b_$24)) )))) && ((forall  a_$25 : Integer, b_$25 : HeapType :: {IsGoodState(combine(a_$25,b_$25))} ( IsGoodState(combine(a_$25,b_$25)) <==> (IsGoodState(a_$25) && IsGoodState(b_$25)) )))) && ((forall  a_$26 : Integer, b_$26 : Field (Mu)  :: {IsGoodState(combine(a_$26,b_$26))} ( IsGoodState(combine(a_$26,b_$26)) <==> (IsGoodState(a_$26) && IsGoodState(b_$26)) )))) && ((forall  a_$27 : Integer, b_$27 : Mu :: {IsGoodState(combine(a_$27,b_$27))} ( IsGoodState(combine(a_$27,b_$27)) <==> (IsGoodState(a_$27) && IsGoodState(b_$27)) )))) && ((forall  a_$28 : Integer, b_$28 : Field (Boolean)  :: {IsGoodState(combine(a_$28,b_$28))} ( IsGoodState(combine(a_$28,b_$28)) <==> (IsGoodState(a_$28) && IsGoodState(b_$28)) )))) && ((forall  a_$29 : Integer, b_$29 : CreditsType :: {IsGoodState(combine(a_$29,b_$29))} ( IsGoodState(combine(a_$29,b_$29)) <==> (IsGoodState(a_$29) && IsGoodState(b_$29)) )))) && ((forall  a_$30 : Integer, b_$30 : Field (ref)  :: {IsGoodState(combine(a_$30,b_$30))} ( IsGoodState(combine(a_$30,b_$30)) <==> (IsGoodState(a_$30) && IsGoodState(b_$30)) )))) && ((forall  a_$31 : Integer, b_$31 : Field (HeapType)  :: {IsGoodState(combine(a_$31,b_$31))} ( IsGoodState(combine(a_$31,b_$31)) <==> (IsGoodState(a_$31) && IsGoodState(b_$31)) )))) && ((forall  a_$32 : Integer, b_$32 : ModuleName :: {IsGoodState(combine(a_$32,b_$32))} ( IsGoodState(combine(a_$32,b_$32)) <==> (IsGoodState(a_$32) && IsGoodState(b_$32)) )))) && ((forall  a_$33 : Integer, b_$33 : TypeName :: {IsGoodState(combine(a_$33,b_$33))} ( IsGoodState(combine(a_$33,b_$33)) <==> (IsGoodState(a_$33) && IsGoodState(b_$33)) )))) && ((forall  a_$34 : [PermissionComponent]Integer, b_$34 : Boolean :: {IsGoodState(combine(a_$34,b_$34))} ( IsGoodState(combine(a_$34,b_$34)) <==> (IsGoodState(a_$34) && IsGoodState(b_$34)) )))) && ((forall  a_$35 : [PermissionComponent]Integer, b_$35 : Integer :: {IsGoodState(combine(a_$35,b_$35))} ( IsGoodState(combine(a_$35,b_$35)) <==> (IsGoodState(a_$35) && IsGoodState(b_$35)) )))) && ((forall  a_$36 : [PermissionComponent]Integer, b_$36 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$36,b_$36))} ( IsGoodState(combine(a_$36,b_$36)) <==> (IsGoodState(a_$36) && IsGoodState(b_$36)) )))) && ((forall  a_$37 : [PermissionComponent]Integer, b_$37 : PermissionComponent :: {IsGoodState(combine(a_$37,b_$37))} ( IsGoodState(combine(a_$37,b_$37)) <==> (IsGoodState(a_$37) && IsGoodState(b_$37)) )))) && ((forall  a_$38 : [PermissionComponent]Integer, b_$38 : MaskType :: {IsGoodState(combine(a_$38,b_$38))} ( IsGoodState(combine(a_$38,b_$38)) <==> (IsGoodState(a_$38) && IsGoodState(b_$38)) )))) && ((forall  a_$39 : [PermissionComponent]Integer, b_$39 : ref :: {IsGoodState(combine(a_$39,b_$39))} ( IsGoodState(combine(a_$39,b_$39)) <==> (IsGoodState(a_$39) && IsGoodState(b_$39)) )))) && ((forall  a_$40 : [PermissionComponent]Integer, b_$40 : Field (Integer)  :: {IsGoodState(combine(a_$40,b_$40))} ( IsGoodState(combine(a_$40,b_$40)) <==> (IsGoodState(a_$40) && IsGoodState(b_$40)) )))) && ((forall  a_$41 : [PermissionComponent]Integer, b_$41 : HeapType :: {IsGoodState(combine(a_$41,b_$41))} ( IsGoodState(combine(a_$41,b_$41)) <==> (IsGoodState(a_$41) && IsGoodState(b_$41)) )))) && ((forall  a_$42 : [PermissionComponent]Integer, b_$42 : Field (Mu)  :: {IsGoodState(combine(a_$42,b_$42))} ( IsGoodState(combine(a_$42,b_$42)) <==> (IsGoodState(a_$42) && IsGoodState(b_$42)) )))) && ((forall  a_$43 : [PermissionComponent]Integer, b_$43 : Mu :: {IsGoodState(combine(a_$43,b_$43))} ( IsGoodState(combine(a_$43,b_$43)) <==> (IsGoodState(a_$43) && IsGoodState(b_$43)) )))) && ((forall  a_$44 : [PermissionComponent]Integer, b_$44 : Field (Boolean)  :: {IsGoodState(combine(a_$44,b_$44))} ( IsGoodState(combine(a_$44,b_$44)) <==> (IsGoodState(a_$44) && IsGoodState(b_$44)) )))) && ((forall  a_$45 : [PermissionComponent]Integer, b_$45 : CreditsType :: {IsGoodState(combine(a_$45,b_$45))} ( IsGoodState(combine(a_$45,b_$45)) <==> (IsGoodState(a_$45) && IsGoodState(b_$45)) )))) && ((forall  a_$46 : [PermissionComponent]Integer, b_$46 : Field (ref)  :: {IsGoodState(combine(a_$46,b_$46))} ( IsGoodState(combine(a_$46,b_$46)) <==> (IsGoodState(a_$46) && IsGoodState(b_$46)) )))) && ((forall  a_$47 : [PermissionComponent]Integer, b_$47 : Field (HeapType)  :: {IsGoodState(combine(a_$47,b_$47))} ( IsGoodState(combine(a_$47,b_$47)) <==> (IsGoodState(a_$47) && IsGoodState(b_$47)) )))) && ((forall  a_$48 : [PermissionComponent]Integer, b_$48 : ModuleName :: {IsGoodState(combine(a_$48,b_$48))} ( IsGoodState(combine(a_$48,b_$48)) <==> (IsGoodState(a_$48) && IsGoodState(b_$48)) )))) && ((forall  a_$49 : [PermissionComponent]Integer, b_$49 : TypeName :: {IsGoodState(combine(a_$49,b_$49))} ( IsGoodState(combine(a_$49,b_$49)) <==> (IsGoodState(a_$49) && IsGoodState(b_$49)) )))) && ((forall  a_$50 : PermissionComponent, b_$50 : Boolean :: {IsGoodState(combine(a_$50,b_$50))} ( IsGoodState(combine(a_$50,b_$50)) <==> (IsGoodState(a_$50) && IsGoodState(b_$50)) )))) && ((forall  a_$51 : PermissionComponent, b_$51 : Integer :: {IsGoodState(combine(a_$51,b_$51))} ( IsGoodState(combine(a_$51,b_$51)) <==> (IsGoodState(a_$51) && IsGoodState(b_$51)) )))) && ((forall  a_$52 : PermissionComponent, b_$52 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$52,b_$52))} ( IsGoodState(combine(a_$52,b_$52)) <==> (IsGoodState(a_$52) && IsGoodState(b_$52)) )))) && ((forall  a_$53 : PermissionComponent, b_$53 : PermissionComponent :: {IsGoodState(combine(a_$53,b_$53))} ( IsGoodState(combine(a_$53,b_$53)) <==> (IsGoodState(a_$53) && IsGoodState(b_$53)) )))) && ((forall  a_$54 : PermissionComponent, b_$54 : MaskType :: {IsGoodState(combine(a_$54,b_$54))} ( IsGoodState(combine(a_$54,b_$54)) <==> (IsGoodState(a_$54) && IsGoodState(b_$54)) )))) && ((forall  a_$55 : PermissionComponent, b_$55 : ref :: {IsGoodState(combine(a_$55,b_$55))} ( IsGoodState(combine(a_$55,b_$55)) <==> (IsGoodState(a_$55) && IsGoodState(b_$55)) )))) && ((forall  a_$56 : PermissionComponent, b_$56 : Field (Integer)  :: {IsGoodState(combine(a_$56,b_$56))} ( IsGoodState(combine(a_$56,b_$56)) <==> (IsGoodState(a_$56) && IsGoodState(b_$56)) )))) && ((forall  a_$57 : PermissionComponent, b_$57 : HeapType :: {IsGoodState(combine(a_$57,b_$57))} ( IsGoodState(combine(a_$57,b_$57)) <==> (IsGoodState(a_$57) && IsGoodState(b_$57)) )))) && ((forall  a_$58 : PermissionComponent, b_$58 : Field (Mu)  :: {IsGoodState(combine(a_$58,b_$58))} ( IsGoodState(combine(a_$58,b_$58)) <==> (IsGoodState(a_$58) && IsGoodState(b_$58)) )))) && ((forall  a_$59 : PermissionComponent, b_$59 : Mu :: {IsGoodState(combine(a_$59,b_$59))} ( IsGoodState(combine(a_$59,b_$59)) <==> (IsGoodState(a_$59) && IsGoodState(b_$59)) )))) && ((forall  a_$60 : PermissionComponent, b_$60 : Field (Boolean)  :: {IsGoodState(combine(a_$60,b_$60))} ( IsGoodState(combine(a_$60,b_$60)) <==> (IsGoodState(a_$60) && IsGoodState(b_$60)) )))) && ((forall  a_$61 : PermissionComponent, b_$61 : CreditsType :: {IsGoodState(combine(a_$61,b_$61))} ( IsGoodState(combine(a_$61,b_$61)) <==> (IsGoodState(a_$61) && IsGoodState(b_$61)) )))) && ((forall  a_$62 : PermissionComponent, b_$62 : Field (ref)  :: {IsGoodState(combine(a_$62,b_$62))} ( IsGoodState(combine(a_$62,b_$62)) <==> (IsGoodState(a_$62) && IsGoodState(b_$62)) )))) && ((forall  a_$63 : PermissionComponent, b_$63 : Field (HeapType)  :: {IsGoodState(combine(a_$63,b_$63))} ( IsGoodState(combine(a_$63,b_$63)) <==> (IsGoodState(a_$63) && IsGoodState(b_$63)) )))) && ((forall  a_$64 : PermissionComponent, b_$64 : ModuleName :: {IsGoodState(combine(a_$64,b_$64))} ( IsGoodState(combine(a_$64,b_$64)) <==> (IsGoodState(a_$64) && IsGoodState(b_$64)) )))) && ((forall  a_$65 : PermissionComponent, b_$65 : TypeName :: {IsGoodState(combine(a_$65,b_$65))} ( IsGoodState(combine(a_$65,b_$65)) <==> (IsGoodState(a_$65) && IsGoodState(b_$65)) )))) && ((forall  a_$66 : MaskType, b_$66 : Boolean :: {IsGoodState(combine(a_$66,b_$66))} ( IsGoodState(combine(a_$66,b_$66)) <==> (IsGoodState(a_$66) && IsGoodState(b_$66)) )))) && ((forall  a_$67 : MaskType, b_$67 : Integer :: {IsGoodState(combine(a_$67,b_$67))} ( IsGoodState(combine(a_$67,b_$67)) <==> (IsGoodState(a_$67) && IsGoodState(b_$67)) )))) && ((forall  a_$68 : MaskType, b_$68 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$68,b_$68))} ( IsGoodState(combine(a_$68,b_$68)) <==> (IsGoodState(a_$68) && IsGoodState(b_$68)) )))) && ((forall  a_$69 : MaskType, b_$69 : PermissionComponent :: {IsGoodState(combine(a_$69,b_$69))} ( IsGoodState(combine(a_$69,b_$69)) <==> (IsGoodState(a_$69) && IsGoodState(b_$69)) )))) && ((forall  a_$70 : MaskType, b_$70 : MaskType :: {IsGoodState(combine(a_$70,b_$70))} ( IsGoodState(combine(a_$70,b_$70)) <==> (IsGoodState(a_$70) && IsGoodState(b_$70)) )))) && ((forall  a_$71 : MaskType, b_$71 : ref :: {IsGoodState(combine(a_$71,b_$71))} ( IsGoodState(combine(a_$71,b_$71)) <==> (IsGoodState(a_$71) && IsGoodState(b_$71)) )))) && ((forall  a_$72 : MaskType, b_$72 : Field (Integer)  :: {IsGoodState(combine(a_$72,b_$72))} ( IsGoodState(combine(a_$72,b_$72)) <==> (IsGoodState(a_$72) && IsGoodState(b_$72)) )))) && ((forall  a_$73 : MaskType, b_$73 : HeapType :: {IsGoodState(combine(a_$73,b_$73))} ( IsGoodState(combine(a_$73,b_$73)) <==> (IsGoodState(a_$73) && IsGoodState(b_$73)) )))) && ((forall  a_$74 : MaskType, b_$74 : Field (Mu)  :: {IsGoodState(combine(a_$74,b_$74))} ( IsGoodState(combine(a_$74,b_$74)) <==> (IsGoodState(a_$74) && IsGoodState(b_$74)) )))) && ((forall  a_$75 : MaskType, b_$75 : Mu :: {IsGoodState(combine(a_$75,b_$75))} ( IsGoodState(combine(a_$75,b_$75)) <==> (IsGoodState(a_$75) && IsGoodState(b_$75)) )))) && ((forall  a_$76 : MaskType, b_$76 : Field (Boolean)  :: {IsGoodState(combine(a_$76,b_$76))} ( IsGoodState(combine(a_$76,b_$76)) <==> (IsGoodState(a_$76) && IsGoodState(b_$76)) )))) && ((forall  a_$77 : MaskType, b_$77 : CreditsType :: {IsGoodState(combine(a_$77,b_$77))} ( IsGoodState(combine(a_$77,b_$77)) <==> (IsGoodState(a_$77) && IsGoodState(b_$77)) )))) && ((forall  a_$78 : MaskType, b_$78 : Field (ref)  :: {IsGoodState(combine(a_$78,b_$78))} ( IsGoodState(combine(a_$78,b_$78)) <==> (IsGoodState(a_$78) && IsGoodState(b_$78)) )))) && ((forall  a_$79 : MaskType, b_$79 : Field (HeapType)  :: {IsGoodState(combine(a_$79,b_$79))} ( IsGoodState(combine(a_$79,b_$79)) <==> (IsGoodState(a_$79) && IsGoodState(b_$79)) )))) && ((forall  a_$80 : MaskType, b_$80 : ModuleName :: {IsGoodState(combine(a_$80,b_$80))} ( IsGoodState(combine(a_$80,b_$80)) <==> (IsGoodState(a_$80) && IsGoodState(b_$80)) )))) && ((forall  a_$81 : MaskType, b_$81 : TypeName :: {IsGoodState(combine(a_$81,b_$81))} ( IsGoodState(combine(a_$81,b_$81)) <==> (IsGoodState(a_$81) && IsGoodState(b_$81)) )))) && ((forall  a_$82 : ref, b_$82 : Boolean :: {IsGoodState(combine(a_$82,b_$82))} ( IsGoodState(combine(a_$82,b_$82)) <==> (IsGoodState(a_$82) && IsGoodState(b_$82)) )))) && ((forall  a_$83 : ref, b_$83 : Integer :: {IsGoodState(combine(a_$83,b_$83))} ( IsGoodState(combine(a_$83,b_$83)) <==> (IsGoodState(a_$83) && IsGoodState(b_$83)) )))) && ((forall  a_$84 : ref, b_$84 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$84,b_$84))} ( IsGoodState(combine(a_$84,b_$84)) <==> (IsGoodState(a_$84) && IsGoodState(b_$84)) )))) && ((forall  a_$85 : ref, b_$85 : PermissionComponent :: {IsGoodState(combine(a_$85,b_$85))} ( IsGoodState(combine(a_$85,b_$85)) <==> (IsGoodState(a_$85) && IsGoodState(b_$85)) )))) && ((forall  a_$86 : ref, b_$86 : MaskType :: {IsGoodState(combine(a_$86,b_$86))} ( IsGoodState(combine(a_$86,b_$86)) <==> (IsGoodState(a_$86) && IsGoodState(b_$86)) )))) && ((forall  a_$87 : ref, b_$87 : ref :: {IsGoodState(combine(a_$87,b_$87))} ( IsGoodState(combine(a_$87,b_$87)) <==> (IsGoodState(a_$87) && IsGoodState(b_$87)) )))) && ((forall  a_$88 : ref, b_$88 : Field (Integer)  :: {IsGoodState(combine(a_$88,b_$88))} ( IsGoodState(combine(a_$88,b_$88)) <==> (IsGoodState(a_$88) && IsGoodState(b_$88)) )))) && ((forall  a_$89 : ref, b_$89 : HeapType :: {IsGoodState(combine(a_$89,b_$89))} ( IsGoodState(combine(a_$89,b_$89)) <==> (IsGoodState(a_$89) && IsGoodState(b_$89)) )))) && ((forall  a_$90 : ref, b_$90 : Field (Mu)  :: {IsGoodState(combine(a_$90,b_$90))} ( IsGoodState(combine(a_$90,b_$90)) <==> (IsGoodState(a_$90) && IsGoodState(b_$90)) )))) && ((forall  a_$91 : ref, b_$91 : Mu :: {IsGoodState(combine(a_$91,b_$91))} ( IsGoodState(combine(a_$91,b_$91)) <==> (IsGoodState(a_$91) && IsGoodState(b_$91)) )))) && ((forall  a_$92 : ref, b_$92 : Field (Boolean)  :: {IsGoodState(combine(a_$92,b_$92))} ( IsGoodState(combine(a_$92,b_$92)) <==> (IsGoodState(a_$92) && IsGoodState(b_$92)) )))) && ((forall  a_$93 : ref, b_$93 : CreditsType :: {IsGoodState(combine(a_$93,b_$93))} ( IsGoodState(combine(a_$93,b_$93)) <==> (IsGoodState(a_$93) && IsGoodState(b_$93)) )))) && ((forall  a_$94 : ref, b_$94 : Field (ref)  :: {IsGoodState(combine(a_$94,b_$94))} ( IsGoodState(combine(a_$94,b_$94)) <==> (IsGoodState(a_$94) && IsGoodState(b_$94)) )))) && ((forall  a_$95 : ref, b_$95 : Field (HeapType)  :: {IsGoodState(combine(a_$95,b_$95))} ( IsGoodState(combine(a_$95,b_$95)) <==> (IsGoodState(a_$95) && IsGoodState(b_$95)) )))) && ((forall  a_$96 : ref, b_$96 : ModuleName :: {IsGoodState(combine(a_$96,b_$96))} ( IsGoodState(combine(a_$96,b_$96)) <==> (IsGoodState(a_$96) && IsGoodState(b_$96)) )))) && ((forall  a_$97 : ref, b_$97 : TypeName :: {IsGoodState(combine(a_$97,b_$97))} ( IsGoodState(combine(a_$97,b_$97)) <==> (IsGoodState(a_$97) && IsGoodState(b_$97)) )))) && ((forall  a_$98 : Field (Integer) , b_$98 : Boolean :: {IsGoodState(combine(a_$98,b_$98))} ( IsGoodState(combine(a_$98,b_$98)) <==> (IsGoodState(a_$98) && IsGoodState(b_$98)) )))) && ((forall  a_$99 : Field (Integer) , b_$99 : Integer :: {IsGoodState(combine(a_$99,b_$99))} ( IsGoodState(combine(a_$99,b_$99)) <==> (IsGoodState(a_$99) && IsGoodState(b_$99)) )))) && ((forall  a_$100 : Field (Integer) , b_$100 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$100,b_$100))} ( IsGoodState(combine(a_$100,b_$100)) <==> (IsGoodState(a_$100) && IsGoodState(b_$100)) )))) && ((forall  a_$101 : Field (Integer) , b_$101 : PermissionComponent :: {IsGoodState(combine(a_$101,b_$101))} ( IsGoodState(combine(a_$101,b_$101)) <==> (IsGoodState(a_$101) && IsGoodState(b_$101)) )))) && ((forall  a_$102 : Field (Integer) , b_$102 : MaskType :: {IsGoodState(combine(a_$102,b_$102))} ( IsGoodState(combine(a_$102,b_$102)) <==> (IsGoodState(a_$102) && IsGoodState(b_$102)) )))) && ((forall  a_$103 : Field (Integer) , b_$103 : ref :: {IsGoodState(combine(a_$103,b_$103))} ( IsGoodState(combine(a_$103,b_$103)) <==> (IsGoodState(a_$103) && IsGoodState(b_$103)) )))) && ((forall  a_$104 : Field (Integer) , b_$104 : Field (Integer)  :: {IsGoodState(combine(a_$104,b_$104))} ( IsGoodState(combine(a_$104,b_$104)) <==> (IsGoodState(a_$104) && IsGoodState(b_$104)) )))) && ((forall  a_$105 : Field (Integer) , b_$105 : HeapType :: {IsGoodState(combine(a_$105,b_$105))} ( IsGoodState(combine(a_$105,b_$105)) <==> (IsGoodState(a_$105) && IsGoodState(b_$105)) )))) && ((forall  a_$106 : Field (Integer) , b_$106 : Field (Mu)  :: {IsGoodState(combine(a_$106,b_$106))} ( IsGoodState(combine(a_$106,b_$106)) <==> (IsGoodState(a_$106) && IsGoodState(b_$106)) )))) && ((forall  a_$107 : Field (Integer) , b_$107 : Mu :: {IsGoodState(combine(a_$107,b_$107))} ( IsGoodState(combine(a_$107,b_$107)) <==> (IsGoodState(a_$107) && IsGoodState(b_$107)) )))) && ((forall  a_$108 : Field (Integer) , b_$108 : Field (Boolean)  :: {IsGoodState(combine(a_$108,b_$108))} ( IsGoodState(combine(a_$108,b_$108)) <==> (IsGoodState(a_$108) && IsGoodState(b_$108)) )))) && ((forall  a_$109 : Field (Integer) , b_$109 : CreditsType :: {IsGoodState(combine(a_$109,b_$109))} ( IsGoodState(combine(a_$109,b_$109)) <==> (IsGoodState(a_$109) && IsGoodState(b_$109)) )))) && ((forall  a_$110 : Field (Integer) , b_$110 : Field (ref)  :: {IsGoodState(combine(a_$110,b_$110))} ( IsGoodState(combine(a_$110,b_$110)) <==> (IsGoodState(a_$110) && IsGoodState(b_$110)) )))) && ((forall  a_$111 : Field (Integer) , b_$111 : Field (HeapType)  :: {IsGoodState(combine(a_$111,b_$111))} ( IsGoodState(combine(a_$111,b_$111)) <==> (IsGoodState(a_$111) && IsGoodState(b_$111)) )))) && ((forall  a_$112 : Field (Integer) , b_$112 : ModuleName :: {IsGoodState(combine(a_$112,b_$112))} ( IsGoodState(combine(a_$112,b_$112)) <==> (IsGoodState(a_$112) && IsGoodState(b_$112)) )))) && ((forall  a_$113 : Field (Integer) , b_$113 : TypeName :: {IsGoodState(combine(a_$113,b_$113))} ( IsGoodState(combine(a_$113,b_$113)) <==> (IsGoodState(a_$113) && IsGoodState(b_$113)) )))) && ((forall  a_$114 : HeapType, b_$114 : Boolean :: {IsGoodState(combine(a_$114,b_$114))} ( IsGoodState(combine(a_$114,b_$114)) <==> (IsGoodState(a_$114) && IsGoodState(b_$114)) )))) && ((forall  a_$115 : HeapType, b_$115 : Integer :: {IsGoodState(combine(a_$115,b_$115))} ( IsGoodState(combine(a_$115,b_$115)) <==> (IsGoodState(a_$115) && IsGoodState(b_$115)) )))) && ((forall  a_$116 : HeapType, b_$116 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$116,b_$116))} ( IsGoodState(combine(a_$116,b_$116)) <==> (IsGoodState(a_$116) && IsGoodState(b_$116)) )))) && ((forall  a_$117 : HeapType, b_$117 : PermissionComponent :: {IsGoodState(combine(a_$117,b_$117))} ( IsGoodState(combine(a_$117,b_$117)) <==> (IsGoodState(a_$117) && IsGoodState(b_$117)) )))) && ((forall  a_$118 : HeapType, b_$118 : MaskType :: {IsGoodState(combine(a_$118,b_$118))} ( IsGoodState(combine(a_$118,b_$118)) <==> (IsGoodState(a_$118) && IsGoodState(b_$118)) )))) && ((forall  a_$119 : HeapType, b_$119 : ref :: {IsGoodState(combine(a_$119,b_$119))} ( IsGoodState(combine(a_$119,b_$119)) <==> (IsGoodState(a_$119) && IsGoodState(b_$119)) )))) && ((forall  a_$120 : HeapType, b_$120 : Field (Integer)  :: {IsGoodState(combine(a_$120,b_$120))} ( IsGoodState(combine(a_$120,b_$120)) <==> (IsGoodState(a_$120) && IsGoodState(b_$120)) )))) && ((forall  a_$121 : HeapType, b_$121 : HeapType :: {IsGoodState(combine(a_$121,b_$121))} ( IsGoodState(combine(a_$121,b_$121)) <==> (IsGoodState(a_$121) && IsGoodState(b_$121)) )))) && ((forall  a_$122 : HeapType, b_$122 : Field (Mu)  :: {IsGoodState(combine(a_$122,b_$122))} ( IsGoodState(combine(a_$122,b_$122)) <==> (IsGoodState(a_$122) && IsGoodState(b_$122)) )))) && ((forall  a_$123 : HeapType, b_$123 : Mu :: {IsGoodState(combine(a_$123,b_$123))} ( IsGoodState(combine(a_$123,b_$123)) <==> (IsGoodState(a_$123) && IsGoodState(b_$123)) )))) && ((forall  a_$124 : HeapType, b_$124 : Field (Boolean)  :: {IsGoodState(combine(a_$124,b_$124))} ( IsGoodState(combine(a_$124,b_$124)) <==> (IsGoodState(a_$124) && IsGoodState(b_$124)) )))) && ((forall  a_$125 : HeapType, b_$125 : CreditsType :: {IsGoodState(combine(a_$125,b_$125))} ( IsGoodState(combine(a_$125,b_$125)) <==> (IsGoodState(a_$125) && IsGoodState(b_$125)) )))) && ((forall  a_$126 : HeapType, b_$126 : Field (ref)  :: {IsGoodState(combine(a_$126,b_$126))} ( IsGoodState(combine(a_$126,b_$126)) <==> (IsGoodState(a_$126) && IsGoodState(b_$126)) )))) && ((forall  a_$127 : HeapType, b_$127 : Field (HeapType)  :: {IsGoodState(combine(a_$127,b_$127))} ( IsGoodState(combine(a_$127,b_$127)) <==> (IsGoodState(a_$127) && IsGoodState(b_$127)) )))) && ((forall  a_$128 : HeapType, b_$128 : ModuleName :: {IsGoodState(combine(a_$128,b_$128))} ( IsGoodState(combine(a_$128,b_$128)) <==> (IsGoodState(a_$128) && IsGoodState(b_$128)) )))) && ((forall  a_$129 : HeapType, b_$129 : TypeName :: {IsGoodState(combine(a_$129,b_$129))} ( IsGoodState(combine(a_$129,b_$129)) <==> (IsGoodState(a_$129) && IsGoodState(b_$129)) )))) && ((forall  a_$130 : Field (Mu) , b_$130 : Boolean :: {IsGoodState(combine(a_$130,b_$130))} ( IsGoodState(combine(a_$130,b_$130)) <==> (IsGoodState(a_$130) && IsGoodState(b_$130)) )))) && ((forall  a_$131 : Field (Mu) , b_$131 : Integer :: {IsGoodState(combine(a_$131,b_$131))} ( IsGoodState(combine(a_$131,b_$131)) <==> (IsGoodState(a_$131) && IsGoodState(b_$131)) )))) && ((forall  a_$132 : Field (Mu) , b_$132 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$132,b_$132))} ( IsGoodState(combine(a_$132,b_$132)) <==> (IsGoodState(a_$132) && IsGoodState(b_$132)) )))) && ((forall  a_$133 : Field (Mu) , b_$133 : PermissionComponent :: {IsGoodState(combine(a_$133,b_$133))} ( IsGoodState(combine(a_$133,b_$133)) <==> (IsGoodState(a_$133) && IsGoodState(b_$133)) )))) && ((forall  a_$134 : Field (Mu) , b_$134 : MaskType :: {IsGoodState(combine(a_$134,b_$134))} ( IsGoodState(combine(a_$134,b_$134)) <==> (IsGoodState(a_$134) && IsGoodState(b_$134)) )))) && ((forall  a_$135 : Field (Mu) , b_$135 : ref :: {IsGoodState(combine(a_$135,b_$135))} ( IsGoodState(combine(a_$135,b_$135)) <==> (IsGoodState(a_$135) && IsGoodState(b_$135)) )))) && ((forall  a_$136 : Field (Mu) , b_$136 : Field (Integer)  :: {IsGoodState(combine(a_$136,b_$136))} ( IsGoodState(combine(a_$136,b_$136)) <==> (IsGoodState(a_$136) && IsGoodState(b_$136)) )))) && ((forall  a_$137 : Field (Mu) , b_$137 : HeapType :: {IsGoodState(combine(a_$137,b_$137))} ( IsGoodState(combine(a_$137,b_$137)) <==> (IsGoodState(a_$137) && IsGoodState(b_$137)) )))) && ((forall  a_$138 : Field (Mu) , b_$138 : Field (Mu)  :: {IsGoodState(combine(a_$138,b_$138))} ( IsGoodState(combine(a_$138,b_$138)) <==> (IsGoodState(a_$138) && IsGoodState(b_$138)) )))) && ((forall  a_$139 : Field (Mu) , b_$139 : Mu :: {IsGoodState(combine(a_$139,b_$139))} ( IsGoodState(combine(a_$139,b_$139)) <==> (IsGoodState(a_$139) && IsGoodState(b_$139)) )))) && ((forall  a_$140 : Field (Mu) , b_$140 : Field (Boolean)  :: {IsGoodState(combine(a_$140,b_$140))} ( IsGoodState(combine(a_$140,b_$140)) <==> (IsGoodState(a_$140) && IsGoodState(b_$140)) )))) && ((forall  a_$141 : Field (Mu) , b_$141 : CreditsType :: {IsGoodState(combine(a_$141,b_$141))} ( IsGoodState(combine(a_$141,b_$141)) <==> (IsGoodState(a_$141) && IsGoodState(b_$141)) )))) && ((forall  a_$142 : Field (Mu) , b_$142 : Field (ref)  :: {IsGoodState(combine(a_$142,b_$142))} ( IsGoodState(combine(a_$142,b_$142)) <==> (IsGoodState(a_$142) && IsGoodState(b_$142)) )))) && ((forall  a_$143 : Field (Mu) , b_$143 : Field (HeapType)  :: {IsGoodState(combine(a_$143,b_$143))} ( IsGoodState(combine(a_$143,b_$143)) <==> (IsGoodState(a_$143) && IsGoodState(b_$143)) )))) && ((forall  a_$144 : Field (Mu) , b_$144 : ModuleName :: {IsGoodState(combine(a_$144,b_$144))} ( IsGoodState(combine(a_$144,b_$144)) <==> (IsGoodState(a_$144) && IsGoodState(b_$144)) )))) && ((forall  a_$145 : Field (Mu) , b_$145 : TypeName :: {IsGoodState(combine(a_$145,b_$145))} ( IsGoodState(combine(a_$145,b_$145)) <==> (IsGoodState(a_$145) && IsGoodState(b_$145)) )))) && ((forall  a_$146 : Mu, b_$146 : Boolean :: {IsGoodState(combine(a_$146,b_$146))} ( IsGoodState(combine(a_$146,b_$146)) <==> (IsGoodState(a_$146) && IsGoodState(b_$146)) )))) && ((forall  a_$147 : Mu, b_$147 : Integer :: {IsGoodState(combine(a_$147,b_$147))} ( IsGoodState(combine(a_$147,b_$147)) <==> (IsGoodState(a_$147) && IsGoodState(b_$147)) )))) && ((forall  a_$148 : Mu, b_$148 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$148,b_$148))} ( IsGoodState(combine(a_$148,b_$148)) <==> (IsGoodState(a_$148) && IsGoodState(b_$148)) )))) && ((forall  a_$149 : Mu, b_$149 : PermissionComponent :: {IsGoodState(combine(a_$149,b_$149))} ( IsGoodState(combine(a_$149,b_$149)) <==> (IsGoodState(a_$149) && IsGoodState(b_$149)) )))) && ((forall  a_$150 : Mu, b_$150 : MaskType :: {IsGoodState(combine(a_$150,b_$150))} ( IsGoodState(combine(a_$150,b_$150)) <==> (IsGoodState(a_$150) && IsGoodState(b_$150)) )))) && ((forall  a_$151 : Mu, b_$151 : ref :: {IsGoodState(combine(a_$151,b_$151))} ( IsGoodState(combine(a_$151,b_$151)) <==> (IsGoodState(a_$151) && IsGoodState(b_$151)) )))) && ((forall  a_$152 : Mu, b_$152 : Field (Integer)  :: {IsGoodState(combine(a_$152,b_$152))} ( IsGoodState(combine(a_$152,b_$152)) <==> (IsGoodState(a_$152) && IsGoodState(b_$152)) )))) && ((forall  a_$153 : Mu, b_$153 : HeapType :: {IsGoodState(combine(a_$153,b_$153))} ( IsGoodState(combine(a_$153,b_$153)) <==> (IsGoodState(a_$153) && IsGoodState(b_$153)) )))) && ((forall  a_$154 : Mu, b_$154 : Field (Mu)  :: {IsGoodState(combine(a_$154,b_$154))} ( IsGoodState(combine(a_$154,b_$154)) <==> (IsGoodState(a_$154) && IsGoodState(b_$154)) )))) && ((forall  a_$155 : Mu, b_$155 : Mu :: {IsGoodState(combine(a_$155,b_$155))} ( IsGoodState(combine(a_$155,b_$155)) <==> (IsGoodState(a_$155) && IsGoodState(b_$155)) )))) && ((forall  a_$156 : Mu, b_$156 : Field (Boolean)  :: {IsGoodState(combine(a_$156,b_$156))} ( IsGoodState(combine(a_$156,b_$156)) <==> (IsGoodState(a_$156) && IsGoodState(b_$156)) )))) && ((forall  a_$157 : Mu, b_$157 : CreditsType :: {IsGoodState(combine(a_$157,b_$157))} ( IsGoodState(combine(a_$157,b_$157)) <==> (IsGoodState(a_$157) && IsGoodState(b_$157)) )))) && ((forall  a_$158 : Mu, b_$158 : Field (ref)  :: {IsGoodState(combine(a_$158,b_$158))} ( IsGoodState(combine(a_$158,b_$158)) <==> (IsGoodState(a_$158) && IsGoodState(b_$158)) )))) && ((forall  a_$159 : Mu, b_$159 : Field (HeapType)  :: {IsGoodState(combine(a_$159,b_$159))} ( IsGoodState(combine(a_$159,b_$159)) <==> (IsGoodState(a_$159) && IsGoodState(b_$159)) )))) && ((forall  a_$160 : Mu, b_$160 : ModuleName :: {IsGoodState(combine(a_$160,b_$160))} ( IsGoodState(combine(a_$160,b_$160)) <==> (IsGoodState(a_$160) && IsGoodState(b_$160)) )))) && ((forall  a_$161 : Mu, b_$161 : TypeName :: {IsGoodState(combine(a_$161,b_$161))} ( IsGoodState(combine(a_$161,b_$161)) <==> (IsGoodState(a_$161) && IsGoodState(b_$161)) )))) && ((forall  a_$162 : Field (Boolean) , b_$162 : Boolean :: {IsGoodState(combine(a_$162,b_$162))} ( IsGoodState(combine(a_$162,b_$162)) <==> (IsGoodState(a_$162) && IsGoodState(b_$162)) )))) && ((forall  a_$163 : Field (Boolean) , b_$163 : Integer :: {IsGoodState(combine(a_$163,b_$163))} ( IsGoodState(combine(a_$163,b_$163)) <==> (IsGoodState(a_$163) && IsGoodState(b_$163)) )))) && ((forall  a_$164 : Field (Boolean) , b_$164 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$164,b_$164))} ( IsGoodState(combine(a_$164,b_$164)) <==> (IsGoodState(a_$164) && IsGoodState(b_$164)) )))) && ((forall  a_$165 : Field (Boolean) , b_$165 : PermissionComponent :: {IsGoodState(combine(a_$165,b_$165))} ( IsGoodState(combine(a_$165,b_$165)) <==> (IsGoodState(a_$165) && IsGoodState(b_$165)) )))) && ((forall  a_$166 : Field (Boolean) , b_$166 : MaskType :: {IsGoodState(combine(a_$166,b_$166))} ( IsGoodState(combine(a_$166,b_$166)) <==> (IsGoodState(a_$166) && IsGoodState(b_$166)) )))) && ((forall  a_$167 : Field (Boolean) , b_$167 : ref :: {IsGoodState(combine(a_$167,b_$167))} ( IsGoodState(combine(a_$167,b_$167)) <==> (IsGoodState(a_$167) && IsGoodState(b_$167)) )))) && ((forall  a_$168 : Field (Boolean) , b_$168 : Field (Integer)  :: {IsGoodState(combine(a_$168,b_$168))} ( IsGoodState(combine(a_$168,b_$168)) <==> (IsGoodState(a_$168) && IsGoodState(b_$168)) )))) && ((forall  a_$169 : Field (Boolean) , b_$169 : HeapType :: {IsGoodState(combine(a_$169,b_$169))} ( IsGoodState(combine(a_$169,b_$169)) <==> (IsGoodState(a_$169) && IsGoodState(b_$169)) )))) && ((forall  a_$170 : Field (Boolean) , b_$170 : Field (Mu)  :: {IsGoodState(combine(a_$170,b_$170))} ( IsGoodState(combine(a_$170,b_$170)) <==> (IsGoodState(a_$170) && IsGoodState(b_$170)) )))) && ((forall  a_$171 : Field (Boolean) , b_$171 : Mu :: {IsGoodState(combine(a_$171,b_$171))} ( IsGoodState(combine(a_$171,b_$171)) <==> (IsGoodState(a_$171) && IsGoodState(b_$171)) )))) && ((forall  a_$172 : Field (Boolean) , b_$172 : Field (Boolean)  :: {IsGoodState(combine(a_$172,b_$172))} ( IsGoodState(combine(a_$172,b_$172)) <==> (IsGoodState(a_$172) && IsGoodState(b_$172)) )))) && ((forall  a_$173 : Field (Boolean) , b_$173 : CreditsType :: {IsGoodState(combine(a_$173,b_$173))} ( IsGoodState(combine(a_$173,b_$173)) <==> (IsGoodState(a_$173) && IsGoodState(b_$173)) )))) && ((forall  a_$174 : Field (Boolean) , b_$174 : Field (ref)  :: {IsGoodState(combine(a_$174,b_$174))} ( IsGoodState(combine(a_$174,b_$174)) <==> (IsGoodState(a_$174) && IsGoodState(b_$174)) )))) && ((forall  a_$175 : Field (Boolean) , b_$175 : Field (HeapType)  :: {IsGoodState(combine(a_$175,b_$175))} ( IsGoodState(combine(a_$175,b_$175)) <==> (IsGoodState(a_$175) && IsGoodState(b_$175)) )))) && ((forall  a_$176 : Field (Boolean) , b_$176 : ModuleName :: {IsGoodState(combine(a_$176,b_$176))} ( IsGoodState(combine(a_$176,b_$176)) <==> (IsGoodState(a_$176) && IsGoodState(b_$176)) )))) && ((forall  a_$177 : Field (Boolean) , b_$177 : TypeName :: {IsGoodState(combine(a_$177,b_$177))} ( IsGoodState(combine(a_$177,b_$177)) <==> (IsGoodState(a_$177) && IsGoodState(b_$177)) )))) && ((forall  a_$178 : CreditsType, b_$178 : Boolean :: {IsGoodState(combine(a_$178,b_$178))} ( IsGoodState(combine(a_$178,b_$178)) <==> (IsGoodState(a_$178) && IsGoodState(b_$178)) )))) && ((forall  a_$179 : CreditsType, b_$179 : Integer :: {IsGoodState(combine(a_$179,b_$179))} ( IsGoodState(combine(a_$179,b_$179)) <==> (IsGoodState(a_$179) && IsGoodState(b_$179)) )))) && ((forall  a_$180 : CreditsType, b_$180 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$180,b_$180))} ( IsGoodState(combine(a_$180,b_$180)) <==> (IsGoodState(a_$180) && IsGoodState(b_$180)) )))) && ((forall  a_$181 : CreditsType, b_$181 : PermissionComponent :: {IsGoodState(combine(a_$181,b_$181))} ( IsGoodState(combine(a_$181,b_$181)) <==> (IsGoodState(a_$181) && IsGoodState(b_$181)) )))) && ((forall  a_$182 : CreditsType, b_$182 : MaskType :: {IsGoodState(combine(a_$182,b_$182))} ( IsGoodState(combine(a_$182,b_$182)) <==> (IsGoodState(a_$182) && IsGoodState(b_$182)) )))) && ((forall  a_$183 : CreditsType, b_$183 : ref :: {IsGoodState(combine(a_$183,b_$183))} ( IsGoodState(combine(a_$183,b_$183)) <==> (IsGoodState(a_$183) && IsGoodState(b_$183)) )))) && ((forall  a_$184 : CreditsType, b_$184 : Field (Integer)  :: {IsGoodState(combine(a_$184,b_$184))} ( IsGoodState(combine(a_$184,b_$184)) <==> (IsGoodState(a_$184) && IsGoodState(b_$184)) )))) && ((forall  a_$185 : CreditsType, b_$185 : HeapType :: {IsGoodState(combine(a_$185,b_$185))} ( IsGoodState(combine(a_$185,b_$185)) <==> (IsGoodState(a_$185) && IsGoodState(b_$185)) )))) && ((forall  a_$186 : CreditsType, b_$186 : Field (Mu)  :: {IsGoodState(combine(a_$186,b_$186))} ( IsGoodState(combine(a_$186,b_$186)) <==> (IsGoodState(a_$186) && IsGoodState(b_$186)) )))) && ((forall  a_$187 : CreditsType, b_$187 : Mu :: {IsGoodState(combine(a_$187,b_$187))} ( IsGoodState(combine(a_$187,b_$187)) <==> (IsGoodState(a_$187) && IsGoodState(b_$187)) )))) && ((forall  a_$188 : CreditsType, b_$188 : Field (Boolean)  :: {IsGoodState(combine(a_$188,b_$188))} ( IsGoodState(combine(a_$188,b_$188)) <==> (IsGoodState(a_$188) && IsGoodState(b_$188)) )))) && ((forall  a_$189 : CreditsType, b_$189 : CreditsType :: {IsGoodState(combine(a_$189,b_$189))} ( IsGoodState(combine(a_$189,b_$189)) <==> (IsGoodState(a_$189) && IsGoodState(b_$189)) )))) && ((forall  a_$190 : CreditsType, b_$190 : Field (ref)  :: {IsGoodState(combine(a_$190,b_$190))} ( IsGoodState(combine(a_$190,b_$190)) <==> (IsGoodState(a_$190) && IsGoodState(b_$190)) )))) && ((forall  a_$191 : CreditsType, b_$191 : Field (HeapType)  :: {IsGoodState(combine(a_$191,b_$191))} ( IsGoodState(combine(a_$191,b_$191)) <==> (IsGoodState(a_$191) && IsGoodState(b_$191)) )))) && ((forall  a_$192 : CreditsType, b_$192 : ModuleName :: {IsGoodState(combine(a_$192,b_$192))} ( IsGoodState(combine(a_$192,b_$192)) <==> (IsGoodState(a_$192) && IsGoodState(b_$192)) )))) && ((forall  a_$193 : CreditsType, b_$193 : TypeName :: {IsGoodState(combine(a_$193,b_$193))} ( IsGoodState(combine(a_$193,b_$193)) <==> (IsGoodState(a_$193) && IsGoodState(b_$193)) )))) && ((forall  a_$194 : Field (ref) , b_$194 : Boolean :: {IsGoodState(combine(a_$194,b_$194))} ( IsGoodState(combine(a_$194,b_$194)) <==> (IsGoodState(a_$194) && IsGoodState(b_$194)) )))) && ((forall  a_$195 : Field (ref) , b_$195 : Integer :: {IsGoodState(combine(a_$195,b_$195))} ( IsGoodState(combine(a_$195,b_$195)) <==> (IsGoodState(a_$195) && IsGoodState(b_$195)) )))) && ((forall  a_$196 : Field (ref) , b_$196 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$196,b_$196))} ( IsGoodState(combine(a_$196,b_$196)) <==> (IsGoodState(a_$196) && IsGoodState(b_$196)) )))) && ((forall  a_$197 : Field (ref) , b_$197 : PermissionComponent :: {IsGoodState(combine(a_$197,b_$197))} ( IsGoodState(combine(a_$197,b_$197)) <==> (IsGoodState(a_$197) && IsGoodState(b_$197)) )))) && ((forall  a_$198 : Field (ref) , b_$198 : MaskType :: {IsGoodState(combine(a_$198,b_$198))} ( IsGoodState(combine(a_$198,b_$198)) <==> (IsGoodState(a_$198) && IsGoodState(b_$198)) )))) && ((forall  a_$199 : Field (ref) , b_$199 : ref :: {IsGoodState(combine(a_$199,b_$199))} ( IsGoodState(combine(a_$199,b_$199)) <==> (IsGoodState(a_$199) && IsGoodState(b_$199)) )))) && ((forall  a_$200 : Field (ref) , b_$200 : Field (Integer)  :: {IsGoodState(combine(a_$200,b_$200))} ( IsGoodState(combine(a_$200,b_$200)) <==> (IsGoodState(a_$200) && IsGoodState(b_$200)) )))) && ((forall  a_$201 : Field (ref) , b_$201 : HeapType :: {IsGoodState(combine(a_$201,b_$201))} ( IsGoodState(combine(a_$201,b_$201)) <==> (IsGoodState(a_$201) && IsGoodState(b_$201)) )))) && ((forall  a_$202 : Field (ref) , b_$202 : Field (Mu)  :: {IsGoodState(combine(a_$202,b_$202))} ( IsGoodState(combine(a_$202,b_$202)) <==> (IsGoodState(a_$202) && IsGoodState(b_$202)) )))) && ((forall  a_$203 : Field (ref) , b_$203 : Mu :: {IsGoodState(combine(a_$203,b_$203))} ( IsGoodState(combine(a_$203,b_$203)) <==> (IsGoodState(a_$203) && IsGoodState(b_$203)) )))) && ((forall  a_$204 : Field (ref) , b_$204 : Field (Boolean)  :: {IsGoodState(combine(a_$204,b_$204))} ( IsGoodState(combine(a_$204,b_$204)) <==> (IsGoodState(a_$204) && IsGoodState(b_$204)) )))) && ((forall  a_$205 : Field (ref) , b_$205 : CreditsType :: {IsGoodState(combine(a_$205,b_$205))} ( IsGoodState(combine(a_$205,b_$205)) <==> (IsGoodState(a_$205) && IsGoodState(b_$205)) )))) && ((forall  a_$206 : Field (ref) , b_$206 : Field (ref)  :: {IsGoodState(combine(a_$206,b_$206))} ( IsGoodState(combine(a_$206,b_$206)) <==> (IsGoodState(a_$206) && IsGoodState(b_$206)) )))) && ((forall  a_$207 : Field (ref) , b_$207 : Field (HeapType)  :: {IsGoodState(combine(a_$207,b_$207))} ( IsGoodState(combine(a_$207,b_$207)) <==> (IsGoodState(a_$207) && IsGoodState(b_$207)) )))) && ((forall  a_$208 : Field (ref) , b_$208 : ModuleName :: {IsGoodState(combine(a_$208,b_$208))} ( IsGoodState(combine(a_$208,b_$208)) <==> (IsGoodState(a_$208) && IsGoodState(b_$208)) )))) && ((forall  a_$209 : Field (ref) , b_$209 : TypeName :: {IsGoodState(combine(a_$209,b_$209))} ( IsGoodState(combine(a_$209,b_$209)) <==> (IsGoodState(a_$209) && IsGoodState(b_$209)) )))) && ((forall  a_$210 : Field (HeapType) , b_$210 : Boolean :: {IsGoodState(combine(a_$210,b_$210))} ( IsGoodState(combine(a_$210,b_$210)) <==> (IsGoodState(a_$210) && IsGoodState(b_$210)) )))) && ((forall  a_$211 : Field (HeapType) , b_$211 : Integer :: {IsGoodState(combine(a_$211,b_$211))} ( IsGoodState(combine(a_$211,b_$211)) <==> (IsGoodState(a_$211) && IsGoodState(b_$211)) )))) && ((forall  a_$212 : Field (HeapType) , b_$212 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$212,b_$212))} ( IsGoodState(combine(a_$212,b_$212)) <==> (IsGoodState(a_$212) && IsGoodState(b_$212)) )))) && ((forall  a_$213 : Field (HeapType) , b_$213 : PermissionComponent :: {IsGoodState(combine(a_$213,b_$213))} ( IsGoodState(combine(a_$213,b_$213)) <==> (IsGoodState(a_$213) && IsGoodState(b_$213)) )))) && ((forall  a_$214 : Field (HeapType) , b_$214 : MaskType :: {IsGoodState(combine(a_$214,b_$214))} ( IsGoodState(combine(a_$214,b_$214)) <==> (IsGoodState(a_$214) && IsGoodState(b_$214)) )))) && ((forall  a_$215 : Field (HeapType) , b_$215 : ref :: {IsGoodState(combine(a_$215,b_$215))} ( IsGoodState(combine(a_$215,b_$215)) <==> (IsGoodState(a_$215) && IsGoodState(b_$215)) )))) && ((forall  a_$216 : Field (HeapType) , b_$216 : Field (Integer)  :: {IsGoodState(combine(a_$216,b_$216))} ( IsGoodState(combine(a_$216,b_$216)) <==> (IsGoodState(a_$216) && IsGoodState(b_$216)) )))) && ((forall  a_$217 : Field (HeapType) , b_$217 : HeapType :: {IsGoodState(combine(a_$217,b_$217))} ( IsGoodState(combine(a_$217,b_$217)) <==> (IsGoodState(a_$217) && IsGoodState(b_$217)) )))) && ((forall  a_$218 : Field (HeapType) , b_$218 : Field (Mu)  :: {IsGoodState(combine(a_$218,b_$218))} ( IsGoodState(combine(a_$218,b_$218)) <==> (IsGoodState(a_$218) && IsGoodState(b_$218)) )))) && ((forall  a_$219 : Field (HeapType) , b_$219 : Mu :: {IsGoodState(combine(a_$219,b_$219))} ( IsGoodState(combine(a_$219,b_$219)) <==> (IsGoodState(a_$219) && IsGoodState(b_$219)) )))) && ((forall  a_$220 : Field (HeapType) , b_$220 : Field (Boolean)  :: {IsGoodState(combine(a_$220,b_$220))} ( IsGoodState(combine(a_$220,b_$220)) <==> (IsGoodState(a_$220) && IsGoodState(b_$220)) )))) && ((forall  a_$221 : Field (HeapType) , b_$221 : CreditsType :: {IsGoodState(combine(a_$221,b_$221))} ( IsGoodState(combine(a_$221,b_$221)) <==> (IsGoodState(a_$221) && IsGoodState(b_$221)) )))) && ((forall  a_$222 : Field (HeapType) , b_$222 : Field (ref)  :: {IsGoodState(combine(a_$222,b_$222))} ( IsGoodState(combine(a_$222,b_$222)) <==> (IsGoodState(a_$222) && IsGoodState(b_$222)) )))) && ((forall  a_$223 : Field (HeapType) , b_$223 : Field (HeapType)  :: {IsGoodState(combine(a_$223,b_$223))} ( IsGoodState(combine(a_$223,b_$223)) <==> (IsGoodState(a_$223) && IsGoodState(b_$223)) )))) && ((forall  a_$224 : Field (HeapType) , b_$224 : ModuleName :: {IsGoodState(combine(a_$224,b_$224))} ( IsGoodState(combine(a_$224,b_$224)) <==> (IsGoodState(a_$224) && IsGoodState(b_$224)) )))) && ((forall  a_$225 : Field (HeapType) , b_$225 : TypeName :: {IsGoodState(combine(a_$225,b_$225))} ( IsGoodState(combine(a_$225,b_$225)) <==> (IsGoodState(a_$225) && IsGoodState(b_$225)) )))) && ((forall  a_$226 : ModuleName, b_$226 : Boolean :: {IsGoodState(combine(a_$226,b_$226))} ( IsGoodState(combine(a_$226,b_$226)) <==> (IsGoodState(a_$226) && IsGoodState(b_$226)) )))) && ((forall  a_$227 : ModuleName, b_$227 : Integer :: {IsGoodState(combine(a_$227,b_$227))} ( IsGoodState(combine(a_$227,b_$227)) <==> (IsGoodState(a_$227) && IsGoodState(b_$227)) )))) && ((forall  a_$228 : ModuleName, b_$228 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$228,b_$228))} ( IsGoodState(combine(a_$228,b_$228)) <==> (IsGoodState(a_$228) && IsGoodState(b_$228)) )))) && ((forall  a_$229 : ModuleName, b_$229 : PermissionComponent :: {IsGoodState(combine(a_$229,b_$229))} ( IsGoodState(combine(a_$229,b_$229)) <==> (IsGoodState(a_$229) && IsGoodState(b_$229)) )))) && ((forall  a_$230 : ModuleName, b_$230 : MaskType :: {IsGoodState(combine(a_$230,b_$230))} ( IsGoodState(combine(a_$230,b_$230)) <==> (IsGoodState(a_$230) && IsGoodState(b_$230)) )))) && ((forall  a_$231 : ModuleName, b_$231 : ref :: {IsGoodState(combine(a_$231,b_$231))} ( IsGoodState(combine(a_$231,b_$231)) <==> (IsGoodState(a_$231) && IsGoodState(b_$231)) )))) && ((forall  a_$232 : ModuleName, b_$232 : Field (Integer)  :: {IsGoodState(combine(a_$232,b_$232))} ( IsGoodState(combine(a_$232,b_$232)) <==> (IsGoodState(a_$232) && IsGoodState(b_$232)) )))) && ((forall  a_$233 : ModuleName, b_$233 : HeapType :: {IsGoodState(combine(a_$233,b_$233))} ( IsGoodState(combine(a_$233,b_$233)) <==> (IsGoodState(a_$233) && IsGoodState(b_$233)) )))) && ((forall  a_$234 : ModuleName, b_$234 : Field (Mu)  :: {IsGoodState(combine(a_$234,b_$234))} ( IsGoodState(combine(a_$234,b_$234)) <==> (IsGoodState(a_$234) && IsGoodState(b_$234)) )))) && ((forall  a_$235 : ModuleName, b_$235 : Mu :: {IsGoodState(combine(a_$235,b_$235))} ( IsGoodState(combine(a_$235,b_$235)) <==> (IsGoodState(a_$235) && IsGoodState(b_$235)) )))) && ((forall  a_$236 : ModuleName, b_$236 : Field (Boolean)  :: {IsGoodState(combine(a_$236,b_$236))} ( IsGoodState(combine(a_$236,b_$236)) <==> (IsGoodState(a_$236) && IsGoodState(b_$236)) )))) && ((forall  a_$237 : ModuleName, b_$237 : CreditsType :: {IsGoodState(combine(a_$237,b_$237))} ( IsGoodState(combine(a_$237,b_$237)) <==> (IsGoodState(a_$237) && IsGoodState(b_$237)) )))) && ((forall  a_$238 : ModuleName, b_$238 : Field (ref)  :: {IsGoodState(combine(a_$238,b_$238))} ( IsGoodState(combine(a_$238,b_$238)) <==> (IsGoodState(a_$238) && IsGoodState(b_$238)) )))) && ((forall  a_$239 : ModuleName, b_$239 : Field (HeapType)  :: {IsGoodState(combine(a_$239,b_$239))} ( IsGoodState(combine(a_$239,b_$239)) <==> (IsGoodState(a_$239) && IsGoodState(b_$239)) )))) && ((forall  a_$240 : ModuleName, b_$240 : ModuleName :: {IsGoodState(combine(a_$240,b_$240))} ( IsGoodState(combine(a_$240,b_$240)) <==> (IsGoodState(a_$240) && IsGoodState(b_$240)) )))) && ((forall  a_$241 : ModuleName, b_$241 : TypeName :: {IsGoodState(combine(a_$241,b_$241))} ( IsGoodState(combine(a_$241,b_$241)) <==> (IsGoodState(a_$241) && IsGoodState(b_$241)) )))) && ((forall  a_$242 : TypeName, b_$242 : Boolean :: {IsGoodState(combine(a_$242,b_$242))} ( IsGoodState(combine(a_$242,b_$242)) <==> (IsGoodState(a_$242) && IsGoodState(b_$242)) )))) && ((forall  a_$243 : TypeName, b_$243 : Integer :: {IsGoodState(combine(a_$243,b_$243))} ( IsGoodState(combine(a_$243,b_$243)) <==> (IsGoodState(a_$243) && IsGoodState(b_$243)) )))) && ((forall  a_$244 : TypeName, b_$244 : [PermissionComponent]Integer :: {IsGoodState(combine(a_$244,b_$244))} ( IsGoodState(combine(a_$244,b_$244)) <==> (IsGoodState(a_$244) && IsGoodState(b_$244)) )))) && ((forall  a_$245 : TypeName, b_$245 : PermissionComponent :: {IsGoodState(combine(a_$245,b_$245))} ( IsGoodState(combine(a_$245,b_$245)) <==> (IsGoodState(a_$245) && IsGoodState(b_$245)) )))) && ((forall  a_$246 : TypeName, b_$246 : MaskType :: {IsGoodState(combine(a_$246,b_$246))} ( IsGoodState(combine(a_$246,b_$246)) <==> (IsGoodState(a_$246) && IsGoodState(b_$246)) )))) && ((forall  a_$247 : TypeName, b_$247 : ref :: {IsGoodState(combine(a_$247,b_$247))} ( IsGoodState(combine(a_$247,b_$247)) <==> (IsGoodState(a_$247) && IsGoodState(b_$247)) )))) && ((forall  a_$248 : TypeName, b_$248 : Field (Integer)  :: {IsGoodState(combine(a_$248,b_$248))} ( IsGoodState(combine(a_$248,b_$248)) <==> (IsGoodState(a_$248) && IsGoodState(b_$248)) )))) && ((forall  a_$249 : TypeName, b_$249 : HeapType :: {IsGoodState(combine(a_$249,b_$249))} ( IsGoodState(combine(a_$249,b_$249)) <==> (IsGoodState(a_$249) && IsGoodState(b_$249)) )))) && ((forall  a_$250 : TypeName, b_$250 : Field (Mu)  :: {IsGoodState(combine(a_$250,b_$250))} ( IsGoodState(combine(a_$250,b_$250)) <==> (IsGoodState(a_$250) && IsGoodState(b_$250)) )))) && ((forall  a_$251 : TypeName, b_$251 : Mu :: {IsGoodState(combine(a_$251,b_$251))} ( IsGoodState(combine(a_$251,b_$251)) <==> (IsGoodState(a_$251) && IsGoodState(b_$251)) )))) && ((forall  a_$252 : TypeName, b_$252 : Field (Boolean)  :: {IsGoodState(combine(a_$252,b_$252))} ( IsGoodState(combine(a_$252,b_$252)) <==> (IsGoodState(a_$252) && IsGoodState(b_$252)) )))) && ((forall  a_$253 : TypeName, b_$253 : CreditsType :: {IsGoodState(combine(a_$253,b_$253))} ( IsGoodState(combine(a_$253,b_$253)) <==> (IsGoodState(a_$253) && IsGoodState(b_$253)) )))) && ((forall  a_$254 : TypeName, b_$254 : Field (ref)  :: {IsGoodState(combine(a_$254,b_$254))} ( IsGoodState(combine(a_$254,b_$254)) <==> (IsGoodState(a_$254) && IsGoodState(b_$254)) )))) && ((forall  a_$255 : TypeName, b_$255 : Field (HeapType)  :: {IsGoodState(combine(a_$255,b_$255))} ( IsGoodState(combine(a_$255,b_$255)) <==> (IsGoodState(a_$255) && IsGoodState(b_$255)) )))) && ((forall  a_$256 : TypeName, b_$256 : ModuleName :: {IsGoodState(combine(a_$256,b_$256))} ( IsGoodState(combine(a_$256,b_$256)) <==> (IsGoodState(a_$256) && IsGoodState(b_$256)) )))) && ((forall  a_$257 : TypeName, b_$257 : TypeName :: {IsGoodState(combine(a_$257,b_$257))} ( IsGoodState(combine(a_$257,b_$257)) <==> (IsGoodState(a_$257) && IsGoodState(b_$257)) )));
	assume IsGoodState(nostate);
	assume NonPredicateField(mu);
	assume (forall  m : Mu, n_$0 : Mu :: {MuBelow(m,n_$0),MuBelow(n_$0,m)} ( !(MuBelow(m,n_$0) && MuBelow(n_$0,m)) ));
	assume (forall  m_$0 : Mu, n_$1 : Mu, o_$0 : Mu :: {MuBelow(m_$0,n_$1),MuBelow(n_$1,o_$0)} ( (MuBelow(m_$0,n_$1) && MuBelow(n_$1,o_$0)) ==> MuBelow(m_$0,o_$0) ));
	assume (forall  m_$1 : Mu, n_$2 : Mu :: ( MuBelow(m_$1,n_$2) ==> (!(n_$2 == $LockBottom)) ));
	assume NonPredicateField(held);
	assume NonPredicateField(rdheld);
	assume (((((forall  m_$3_$0 : MaskType, obj_$1 : ref, f_$1_$0 : Field (Boolean)  :: {CanRead(m_$3_$0,obj_$1,f_$1_$0)} {:expand  false}( CanRead(m_$3_$0,obj_$1,f_$1_$0) <==> ((0 < m_$3_$0[obj_$1,f_$1_$0][perm$R]) || (0 < m_$3_$0[obj_$1,f_$1_$0][perm$N])) ))) && ((forall  m_$3_$1 : MaskType, obj_$2 : ref, f_$1_$1 : Field (Integer)  :: {CanRead(m_$3_$1,obj_$2,f_$1_$1)} {:expand  false}( CanRead(m_$3_$1,obj_$2,f_$1_$1) <==> ((0 < m_$3_$1[obj_$2,f_$1_$1][perm$R]) || (0 < m_$3_$1[obj_$2,f_$1_$1][perm$N])) )))) && ((forall  m_$3_$2 : MaskType, obj_$3 : ref, f_$1_$2 : Field (ref)  :: {CanRead(m_$3_$2,obj_$3,f_$1_$2)} {:expand  false}( CanRead(m_$3_$2,obj_$3,f_$1_$2) <==> ((0 < m_$3_$2[obj_$3,f_$1_$2][perm$R]) || (0 < m_$3_$2[obj_$3,f_$1_$2][perm$N])) )))) && ((forall  m_$3_$3 : MaskType, obj_$4 : ref, f_$1_$3 : Field (HeapType)  :: {CanRead(m_$3_$3,obj_$4,f_$1_$3)} {:expand  false}( CanRead(m_$3_$3,obj_$4,f_$1_$3) <==> ((0 < m_$3_$3[obj_$4,f_$1_$3][perm$R]) || (0 < m_$3_$3[obj_$4,f_$1_$3][perm$N])) )))) && ((forall  m_$3_$4 : MaskType, obj_$5 : ref, f_$1_$4 : Field (Mu)  :: {CanRead(m_$3_$4,obj_$5,f_$1_$4)} {:expand  false}( CanRead(m_$3_$4,obj_$5,f_$1_$4) <==> ((0 < m_$3_$4[obj_$5,f_$1_$4][perm$R]) || (0 < m_$3_$4[obj_$5,f_$1_$4][perm$N])) )));
	assume (forall  m_$5 : MaskType :: {IsGoodMask(m_$5)} {:expand  true}( IsGoodMask(m_$5) <==> ((((((forall  o_$6_$0 : ref, f_$3_$0 : Field (Boolean)  :: ( ((0 <= m_$5[o_$6_$0,f_$3_$0][perm$R]) && (NonPredicateField(f_$3_$0) ==> ((m_$5[o_$6_$0,f_$3_$0][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$0,f_$3_$0][perm$N]) ==> (m_$5[o_$6_$0,f_$3_$0][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$0,f_$3_$0][perm$N] < 0) ==> (0 < m_$5[o_$6_$0,f_$3_$0][perm$R])) ))) && ((forall  o_$6_$1 : ref, f_$3_$1 : Field (Integer)  :: ( ((0 <= m_$5[o_$6_$1,f_$3_$1][perm$R]) && (NonPredicateField(f_$3_$1) ==> ((m_$5[o_$6_$1,f_$3_$1][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$1,f_$3_$1][perm$N]) ==> (m_$5[o_$6_$1,f_$3_$1][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$1,f_$3_$1][perm$N] < 0) ==> (0 < m_$5[o_$6_$1,f_$3_$1][perm$R])) )))) && ((forall  o_$6_$2 : ref, f_$3_$2 : Field (ref)  :: ( ((0 <= m_$5[o_$6_$2,f_$3_$2][perm$R]) && (NonPredicateField(f_$3_$2) ==> ((m_$5[o_$6_$2,f_$3_$2][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$2,f_$3_$2][perm$N]) ==> (m_$5[o_$6_$2,f_$3_$2][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$2,f_$3_$2][perm$N] < 0) ==> (0 < m_$5[o_$6_$2,f_$3_$2][perm$R])) )))) && ((forall  o_$6_$3 : ref, f_$3_$3 : Field (HeapType)  :: ( ((0 <= m_$5[o_$6_$3,f_$3_$3][perm$R]) && (NonPredicateField(f_$3_$3) ==> ((m_$5[o_$6_$3,f_$3_$3][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$3,f_$3_$3][perm$N]) ==> (m_$5[o_$6_$3,f_$3_$3][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$3,f_$3_$3][perm$N] < 0) ==> (0 < m_$5[o_$6_$3,f_$3_$3][perm$R])) )))) && ((forall  o_$6_$4 : ref, f_$3_$4 : Field (Mu)  :: ( ((0 <= m_$5[o_$6_$4,f_$3_$4][perm$R]) && (NonPredicateField(f_$3_$4) ==> ((m_$5[o_$6_$4,f_$3_$4][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$4,f_$3_$4][perm$N]) ==> (m_$5[o_$6_$4,f_$3_$4][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$4,f_$3_$4][perm$N] < 0) ==> (0 < m_$5[o_$6_$4,f_$3_$4][perm$R])) )))) ));
	assume (forall  h_$0 : HeapType, m_$6 : MaskType, o_$7 : ref, q : ref :: {wf(h_$0,m_$6),h_$0[o_$7,mu],h_$0[q,mu]} ( (((wf(h_$0,m_$6) && (!(o_$7 == q))) && ((0 < h_$0[o_$7,held]) || h_$0[o_$7,rdheld])) && ((0 < h_$0[q,held]) || h_$0[q,rdheld])) ==> (!(h_$0[o_$7,mu] == h_$0[q,mu])) ));
	assume (((((((((((((((((((((((((forall  m_$7_$0 : MaskType, o_$8_$0 : ref, f_$4_$0 : Field (Boolean) , howMuch_$3 : Integer, q_$0_$0 : ref, g_$4 : Field (Boolean)  :: {DecPerm(m_$7_$0,o_$8_$0,f_$4_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R]} ( DecPerm(m_$7_$0,o_$8_$0,f_$4_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R] == ite((o_$8_$0 == q_$0_$0) && (f_$4_$0 == g_$4),m_$7_$0[q_$0_$0,g_$4][perm$R] - howMuch_$3,m_$7_$0[q_$0_$0,g_$4][perm$R]) ))) && ((forall  m_$7_$1 : MaskType, o_$8_$1 : ref, f_$4_$1 : Field (Integer) , howMuch_$4 : Integer, q_$0_$1 : ref, g_$5 : Field (Boolean)  :: {DecPerm(m_$7_$1,o_$8_$1,f_$4_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R]} ( DecPerm(m_$7_$1,o_$8_$1,f_$4_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R] == ite((o_$8_$1 == q_$0_$1) && false,m_$7_$1[q_$0_$1,g_$5][perm$R] - howMuch_$4,m_$7_$1[q_$0_$1,g_$5][perm$R]) )))) && ((forall  m_$7_$2 : MaskType, o_$8_$2 : ref, f_$4_$2 : Field (ref) , howMuch_$5 : Integer, q_$0_$2 : ref, g_$6 : Field (Boolean)  :: {DecPerm(m_$7_$2,o_$8_$2,f_$4_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R]} ( DecPerm(m_$7_$2,o_$8_$2,f_$4_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R] == ite((o_$8_$2 == q_$0_$2) && false,m_$7_$2[q_$0_$2,g_$6][perm$R] - howMuch_$5,m_$7_$2[q_$0_$2,g_$6][perm$R]) )))) && ((forall  m_$7_$3 : MaskType, o_$8_$3 : ref, f_$4_$3 : Field (HeapType) , howMuch_$6 : Integer, q_$0_$3 : ref, g_$7 : Field (Boolean)  :: {DecPerm(m_$7_$3,o_$8_$3,f_$4_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R]} ( DecPerm(m_$7_$3,o_$8_$3,f_$4_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R] == ite((o_$8_$3 == q_$0_$3) && false,m_$7_$3[q_$0_$3,g_$7][perm$R] - howMuch_$6,m_$7_$3[q_$0_$3,g_$7][perm$R]) )))) && ((forall  m_$7_$4 : MaskType, o_$8_$4 : ref, f_$4_$4 : Field (Mu) , howMuch_$7 : Integer, q_$0_$4 : ref, g_$8 : Field (Boolean)  :: {DecPerm(m_$7_$4,o_$8_$4,f_$4_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R]} ( DecPerm(m_$7_$4,o_$8_$4,f_$4_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R] == ite((o_$8_$4 == q_$0_$4) && false,m_$7_$4[q_$0_$4,g_$8][perm$R] - howMuch_$7,m_$7_$4[q_$0_$4,g_$8][perm$R]) )))) && ((forall  m_$7_$5 : MaskType, o_$8_$5 : ref, f_$4_$5 : Field (Boolean) , howMuch_$8 : Integer, q_$0_$5 : ref, g_$9 : Field (Integer)  :: {DecPerm(m_$7_$5,o_$8_$5,f_$4_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R]} ( DecPerm(m_$7_$5,o_$8_$5,f_$4_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R] == ite((o_$8_$5 == q_$0_$5) && false,m_$7_$5[q_$0_$5,g_$9][perm$R] - howMuch_$8,m_$7_$5[q_$0_$5,g_$9][perm$R]) )))) && ((forall  m_$7_$6 : MaskType, o_$8_$6 : ref, f_$4_$6 : Field (Integer) , howMuch_$9 : Integer, q_$0_$6 : ref, g_$10 : Field (Integer)  :: {DecPerm(m_$7_$6,o_$8_$6,f_$4_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R]} ( DecPerm(m_$7_$6,o_$8_$6,f_$4_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R] == ite((o_$8_$6 == q_$0_$6) && (f_$4_$6 == g_$10),m_$7_$6[q_$0_$6,g_$10][perm$R] - howMuch_$9,m_$7_$6[q_$0_$6,g_$10][perm$R]) )))) && ((forall  m_$7_$7 : MaskType, o_$8_$7 : ref, f_$4_$7 : Field (ref) , howMuch_$10 : Integer, q_$0_$7 : ref, g_$11 : Field (Integer)  :: {DecPerm(m_$7_$7,o_$8_$7,f_$4_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R]} ( DecPerm(m_$7_$7,o_$8_$7,f_$4_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R] == ite((o_$8_$7 == q_$0_$7) && false,m_$7_$7[q_$0_$7,g_$11][perm$R] - howMuch_$10,m_$7_$7[q_$0_$7,g_$11][perm$R]) )))) && ((forall  m_$7_$8 : MaskType, o_$8_$8 : ref, f_$4_$8 : Field (HeapType) , howMuch_$11 : Integer, q_$0_$8 : ref, g_$12 : Field (Integer)  :: {DecPerm(m_$7_$8,o_$8_$8,f_$4_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R]} ( DecPerm(m_$7_$8,o_$8_$8,f_$4_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R] == ite((o_$8_$8 == q_$0_$8) && false,m_$7_$8[q_$0_$8,g_$12][perm$R] - howMuch_$11,m_$7_$8[q_$0_$8,g_$12][perm$R]) )))) && ((forall  m_$7_$9 : MaskType, o_$8_$9 : ref, f_$4_$9 : Field (Mu) , howMuch_$12 : Integer, q_$0_$9 : ref, g_$13 : Field (Integer)  :: {DecPerm(m_$7_$9,o_$8_$9,f_$4_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R]} ( DecPerm(m_$7_$9,o_$8_$9,f_$4_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R] == ite((o_$8_$9 == q_$0_$9) && false,m_$7_$9[q_$0_$9,g_$13][perm$R] - howMuch_$12,m_$7_$9[q_$0_$9,g_$13][perm$R]) )))) && ((forall  m_$7_$10 : MaskType, o_$8_$10 : ref, f_$4_$10 : Field (Boolean) , howMuch_$13 : Integer, q_$0_$10 : ref, g_$14 : Field (ref)  :: {DecPerm(m_$7_$10,o_$8_$10,f_$4_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R]} ( DecPerm(m_$7_$10,o_$8_$10,f_$4_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R] == ite((o_$8_$10 == q_$0_$10) && false,m_$7_$10[q_$0_$10,g_$14][perm$R] - howMuch_$13,m_$7_$10[q_$0_$10,g_$14][perm$R]) )))) && ((forall  m_$7_$11 : MaskType, o_$8_$11 : ref, f_$4_$11 : Field (Integer) , howMuch_$14 : Integer, q_$0_$11 : ref, g_$15 : Field (ref)  :: {DecPerm(m_$7_$11,o_$8_$11,f_$4_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R]} ( DecPerm(m_$7_$11,o_$8_$11,f_$4_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R] == ite((o_$8_$11 == q_$0_$11) && false,m_$7_$11[q_$0_$11,g_$15][perm$R] - howMuch_$14,m_$7_$11[q_$0_$11,g_$15][perm$R]) )))) && ((forall  m_$7_$12 : MaskType, o_$8_$12 : ref, f_$4_$12 : Field (ref) , howMuch_$15 : Integer, q_$0_$12 : ref, g_$16 : Field (ref)  :: {DecPerm(m_$7_$12,o_$8_$12,f_$4_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R]} ( DecPerm(m_$7_$12,o_$8_$12,f_$4_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R] == ite((o_$8_$12 == q_$0_$12) && (f_$4_$12 == g_$16),m_$7_$12[q_$0_$12,g_$16][perm$R] - howMuch_$15,m_$7_$12[q_$0_$12,g_$16][perm$R]) )))) && ((forall  m_$7_$13 : MaskType, o_$8_$13 : ref, f_$4_$13 : Field (HeapType) , howMuch_$16 : Integer, q_$0_$13 : ref, g_$17 : Field (ref)  :: {DecPerm(m_$7_$13,o_$8_$13,f_$4_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R]} ( DecPerm(m_$7_$13,o_$8_$13,f_$4_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R] == ite((o_$8_$13 == q_$0_$13) && false,m_$7_$13[q_$0_$13,g_$17][perm$R] - howMuch_$16,m_$7_$13[q_$0_$13,g_$17][perm$R]) )))) && ((forall  m_$7_$14 : MaskType, o_$8_$14 : ref, f_$4_$14 : Field (Mu) , howMuch_$17 : Integer, q_$0_$14 : ref, g_$18 : Field (ref)  :: {DecPerm(m_$7_$14,o_$8_$14,f_$4_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R]} ( DecPerm(m_$7_$14,o_$8_$14,f_$4_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R] == ite((o_$8_$14 == q_$0_$14) && false,m_$7_$14[q_$0_$14,g_$18][perm$R] - howMuch_$17,m_$7_$14[q_$0_$14,g_$18][perm$R]) )))) && ((forall  m_$7_$15 : MaskType, o_$8_$15 : ref, f_$4_$15 : Field (Boolean) , howMuch_$18 : Integer, q_$0_$15 : ref, g_$19 : Field (HeapType)  :: {DecPerm(m_$7_$15,o_$8_$15,f_$4_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R]} ( DecPerm(m_$7_$15,o_$8_$15,f_$4_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R] == ite((o_$8_$15 == q_$0_$15) && false,m_$7_$15[q_$0_$15,g_$19][perm$R] - howMuch_$18,m_$7_$15[q_$0_$15,g_$19][perm$R]) )))) && ((forall  m_$7_$16 : MaskType, o_$8_$16 : ref, f_$4_$16 : Field (Integer) , howMuch_$19 : Integer, q_$0_$16 : ref, g_$20 : Field (HeapType)  :: {DecPerm(m_$7_$16,o_$8_$16,f_$4_$16,howMuch_$19)[q_$0_$16,g_$20][perm$R]} ( DecPerm(m_$7_$16,o_$8_$16,f_$4_$16,howMuch_$19)[q_$0_$16,g_$20][perm$R] == ite((o_$8_$16 == q_$0_$16) && false,m_$7_$16[q_$0_$16,g_$20][perm$R] - howMuch_$19,m_$7_$16[q_$0_$16,g_$20][perm$R]) )))) && ((forall  m_$7_$17 : MaskType, o_$8_$17 : ref, f_$4_$17 : Field (ref) , howMuch_$20 : Integer, q_$0_$17 : ref, g_$21 : Field (HeapType)  :: {DecPerm(m_$7_$17,o_$8_$17,f_$4_$17,howMuch_$20)[q_$0_$17,g_$21][perm$R]} ( DecPerm(m_$7_$17,o_$8_$17,f_$4_$17,howMuch_$20)[q_$0_$17,g_$21][perm$R] == ite((o_$8_$17 == q_$0_$17) && false,m_$7_$17[q_$0_$17,g_$21][perm$R] - howMuch_$20,m_$7_$17[q_$0_$17,g_$21][perm$R]) )))) && ((forall  m_$7_$18 : MaskType, o_$8_$18 : ref, f_$4_$18 : Field (HeapType) , howMuch_$21 : Integer, q_$0_$18 : ref, g_$22 : Field (HeapType)  :: {DecPerm(m_$7_$18,o_$8_$18,f_$4_$18,howMuch_$21)[q_$0_$18,g_$22][perm$R]} ( DecPerm(m_$7_$18,o_$8_$18,f_$4_$18,howMuch_$21)[q_$0_$18,g_$22][perm$R] == ite((o_$8_$18 == q_$0_$18) && (f_$4_$18 == g_$22),m_$7_$18[q_$0_$18,g_$22][perm$R] - howMuch_$21,m_$7_$18[q_$0_$18,g_$22][perm$R]) )))) && ((forall  m_$7_$19 : MaskType, o_$8_$19 : ref, f_$4_$19 : Field (Mu) , howMuch_$22 : Integer, q_$0_$19 : ref, g_$23 : Field (HeapType)  :: {DecPerm(m_$7_$19,o_$8_$19,f_$4_$19,howMuch_$22)[q_$0_$19,g_$23][perm$R]} ( DecPerm(m_$7_$19,o_$8_$19,f_$4_$19,howMuch_$22)[q_$0_$19,g_$23][perm$R] == ite((o_$8_$19 == q_$0_$19) && false,m_$7_$19[q_$0_$19,g_$23][perm$R] - howMuch_$22,m_$7_$19[q_$0_$19,g_$23][perm$R]) )))) && ((forall  m_$7_$20 : MaskType, o_$8_$20 : ref, f_$4_$20 : Field (Boolean) , howMuch_$23 : Integer, q_$0_$20 : ref, g_$24 : Field (Mu)  :: {DecPerm(m_$7_$20,o_$8_$20,f_$4_$20,howMuch_$23)[q_$0_$20,g_$24][perm$R]} ( DecPerm(m_$7_$20,o_$8_$20,f_$4_$20,howMuch_$23)[q_$0_$20,g_$24][perm$R] == ite((o_$8_$20 == q_$0_$20) && false,m_$7_$20[q_$0_$20,g_$24][perm$R] - howMuch_$23,m_$7_$20[q_$0_$20,g_$24][perm$R]) )))) && ((forall  m_$7_$21 : MaskType, o_$8_$21 : ref, f_$4_$21 : Field (Integer) , howMuch_$24 : Integer, q_$0_$21 : ref, g_$25 : Field (Mu)  :: {DecPerm(m_$7_$21,o_$8_$21,f_$4_$21,howMuch_$24)[q_$0_$21,g_$25][perm$R]} ( DecPerm(m_$7_$21,o_$8_$21,f_$4_$21,howMuch_$24)[q_$0_$21,g_$25][perm$R] == ite((o_$8_$21 == q_$0_$21) && false,m_$7_$21[q_$0_$21,g_$25][perm$R] - howMuch_$24,m_$7_$21[q_$0_$21,g_$25][perm$R]) )))) && ((forall  m_$7_$22 : MaskType, o_$8_$22 : ref, f_$4_$22 : Field (ref) , howMuch_$25 : Integer, q_$0_$22 : ref, g_$26 : Field (Mu)  :: {DecPerm(m_$7_$22,o_$8_$22,f_$4_$22,howMuch_$25)[q_$0_$22,g_$26][perm$R]} ( DecPerm(m_$7_$22,o_$8_$22,f_$4_$22,howMuch_$25)[q_$0_$22,g_$26][perm$R] == ite((o_$8_$22 == q_$0_$22) && false,m_$7_$22[q_$0_$22,g_$26][perm$R] - howMuch_$25,m_$7_$22[q_$0_$22,g_$26][perm$R]) )))) && ((forall  m_$7_$23 : MaskType, o_$8_$23 : ref, f_$4_$23 : Field (HeapType) , howMuch_$26 : Integer, q_$0_$23 : ref, g_$27 : Field (Mu)  :: {DecPerm(m_$7_$23,o_$8_$23,f_$4_$23,howMuch_$26)[q_$0_$23,g_$27][perm$R]} ( DecPerm(m_$7_$23,o_$8_$23,f_$4_$23,howMuch_$26)[q_$0_$23,g_$27][perm$R] == ite((o_$8_$23 == q_$0_$23) && false,m_$7_$23[q_$0_$23,g_$27][perm$R] - howMuch_$26,m_$7_$23[q_$0_$23,g_$27][perm$R]) )))) && ((forall  m_$7_$24 : MaskType, o_$8_$24 : ref, f_$4_$24 : Field (Mu) , howMuch_$27 : Integer, q_$0_$24 : ref, g_$28 : Field (Mu)  :: {DecPerm(m_$7_$24,o_$8_$24,f_$4_$24,howMuch_$27)[q_$0_$24,g_$28][perm$R]} ( DecPerm(m_$7_$24,o_$8_$24,f_$4_$24,howMuch_$27)[q_$0_$24,g_$28][perm$R] == ite((o_$8_$24 == q_$0_$24) && (f_$4_$24 == g_$28),m_$7_$24[q_$0_$24,g_$28][perm$R] - howMuch_$27,m_$7_$24[q_$0_$24,g_$28][perm$R]) )));
	assume (((((((((((((((((((((((((forall  m_$9_$0 : MaskType, o_$10_$0 : ref, f_$6_$0 : Field (Boolean) , howMuch_$1_$0 : Integer, q_$2_$0 : ref, g_$1_$0 : Field (Boolean)  :: {IncPerm(m_$9_$0,o_$10_$0,f_$6_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R]} ( IncPerm(m_$9_$0,o_$10_$0,f_$6_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R] == ite((o_$10_$0 == q_$2_$0) && (f_$6_$0 == g_$1_$0),m_$9_$0[q_$2_$0,g_$1_$0][perm$R] + howMuch_$1_$0,m_$9_$0[q_$2_$0,g_$1_$0][perm$R]) ))) && ((forall  m_$9_$1 : MaskType, o_$10_$1 : ref, f_$6_$1 : Field (Integer) , howMuch_$1_$1 : Integer, q_$2_$1 : ref, g_$1_$1 : Field (Boolean)  :: {IncPerm(m_$9_$1,o_$10_$1,f_$6_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R]} ( IncPerm(m_$9_$1,o_$10_$1,f_$6_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R] == ite((o_$10_$1 == q_$2_$1) && false,m_$9_$1[q_$2_$1,g_$1_$1][perm$R] + howMuch_$1_$1,m_$9_$1[q_$2_$1,g_$1_$1][perm$R]) )))) && ((forall  m_$9_$2 : MaskType, o_$10_$2 : ref, f_$6_$2 : Field (ref) , howMuch_$1_$2 : Integer, q_$2_$2 : ref, g_$1_$2 : Field (Boolean)  :: {IncPerm(m_$9_$2,o_$10_$2,f_$6_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R]} ( IncPerm(m_$9_$2,o_$10_$2,f_$6_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R] == ite((o_$10_$2 == q_$2_$2) && false,m_$9_$2[q_$2_$2,g_$1_$2][perm$R] + howMuch_$1_$2,m_$9_$2[q_$2_$2,g_$1_$2][perm$R]) )))) && ((forall  m_$9_$3 : MaskType, o_$10_$3 : ref, f_$6_$3 : Field (HeapType) , howMuch_$1_$3 : Integer, q_$2_$3 : ref, g_$1_$3 : Field (Boolean)  :: {IncPerm(m_$9_$3,o_$10_$3,f_$6_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R]} ( IncPerm(m_$9_$3,o_$10_$3,f_$6_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R] == ite((o_$10_$3 == q_$2_$3) && false,m_$9_$3[q_$2_$3,g_$1_$3][perm$R] + howMuch_$1_$3,m_$9_$3[q_$2_$3,g_$1_$3][perm$R]) )))) && ((forall  m_$9_$4 : MaskType, o_$10_$4 : ref, f_$6_$4 : Field (Mu) , howMuch_$1_$4 : Integer, q_$2_$4 : ref, g_$1_$4 : Field (Boolean)  :: {IncPerm(m_$9_$4,o_$10_$4,f_$6_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R]} ( IncPerm(m_$9_$4,o_$10_$4,f_$6_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R] == ite((o_$10_$4 == q_$2_$4) && false,m_$9_$4[q_$2_$4,g_$1_$4][perm$R] + howMuch_$1_$4,m_$9_$4[q_$2_$4,g_$1_$4][perm$R]) )))) && ((forall  m_$9_$5 : MaskType, o_$10_$5 : ref, f_$6_$5 : Field (Boolean) , howMuch_$1_$5 : Integer, q_$2_$5 : ref, g_$1_$5 : Field (Integer)  :: {IncPerm(m_$9_$5,o_$10_$5,f_$6_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R]} ( IncPerm(m_$9_$5,o_$10_$5,f_$6_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R] == ite((o_$10_$5 == q_$2_$5) && false,m_$9_$5[q_$2_$5,g_$1_$5][perm$R] + howMuch_$1_$5,m_$9_$5[q_$2_$5,g_$1_$5][perm$R]) )))) && ((forall  m_$9_$6 : MaskType, o_$10_$6 : ref, f_$6_$6 : Field (Integer) , howMuch_$1_$6 : Integer, q_$2_$6 : ref, g_$1_$6 : Field (Integer)  :: {IncPerm(m_$9_$6,o_$10_$6,f_$6_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R]} ( IncPerm(m_$9_$6,o_$10_$6,f_$6_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R] == ite((o_$10_$6 == q_$2_$6) && (f_$6_$6 == g_$1_$6),m_$9_$6[q_$2_$6,g_$1_$6][perm$R] + howMuch_$1_$6,m_$9_$6[q_$2_$6,g_$1_$6][perm$R]) )))) && ((forall  m_$9_$7 : MaskType, o_$10_$7 : ref, f_$6_$7 : Field (ref) , howMuch_$1_$7 : Integer, q_$2_$7 : ref, g_$1_$7 : Field (Integer)  :: {IncPerm(m_$9_$7,o_$10_$7,f_$6_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R]} ( IncPerm(m_$9_$7,o_$10_$7,f_$6_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R] == ite((o_$10_$7 == q_$2_$7) && false,m_$9_$7[q_$2_$7,g_$1_$7][perm$R] + howMuch_$1_$7,m_$9_$7[q_$2_$7,g_$1_$7][perm$R]) )))) && ((forall  m_$9_$8 : MaskType, o_$10_$8 : ref, f_$6_$8 : Field (HeapType) , howMuch_$1_$8 : Integer, q_$2_$8 : ref, g_$1_$8 : Field (Integer)  :: {IncPerm(m_$9_$8,o_$10_$8,f_$6_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R]} ( IncPerm(m_$9_$8,o_$10_$8,f_$6_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R] == ite((o_$10_$8 == q_$2_$8) && false,m_$9_$8[q_$2_$8,g_$1_$8][perm$R] + howMuch_$1_$8,m_$9_$8[q_$2_$8,g_$1_$8][perm$R]) )))) && ((forall  m_$9_$9 : MaskType, o_$10_$9 : ref, f_$6_$9 : Field (Mu) , howMuch_$1_$9 : Integer, q_$2_$9 : ref, g_$1_$9 : Field (Integer)  :: {IncPerm(m_$9_$9,o_$10_$9,f_$6_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R]} ( IncPerm(m_$9_$9,o_$10_$9,f_$6_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R] == ite((o_$10_$9 == q_$2_$9) && false,m_$9_$9[q_$2_$9,g_$1_$9][perm$R] + howMuch_$1_$9,m_$9_$9[q_$2_$9,g_$1_$9][perm$R]) )))) && ((forall  m_$9_$10 : MaskType, o_$10_$10 : ref, f_$6_$10 : Field (Boolean) , howMuch_$1_$10 : Integer, q_$2_$10 : ref, g_$1_$10 : Field (ref)  :: {IncPerm(m_$9_$10,o_$10_$10,f_$6_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R]} ( IncPerm(m_$9_$10,o_$10_$10,f_$6_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R] == ite((o_$10_$10 == q_$2_$10) && false,m_$9_$10[q_$2_$10,g_$1_$10][perm$R] + howMuch_$1_$10,m_$9_$10[q_$2_$10,g_$1_$10][perm$R]) )))) && ((forall  m_$9_$11 : MaskType, o_$10_$11 : ref, f_$6_$11 : Field (Integer) , howMuch_$1_$11 : Integer, q_$2_$11 : ref, g_$1_$11 : Field (ref)  :: {IncPerm(m_$9_$11,o_$10_$11,f_$6_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R]} ( IncPerm(m_$9_$11,o_$10_$11,f_$6_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R] == ite((o_$10_$11 == q_$2_$11) && false,m_$9_$11[q_$2_$11,g_$1_$11][perm$R] + howMuch_$1_$11,m_$9_$11[q_$2_$11,g_$1_$11][perm$R]) )))) && ((forall  m_$9_$12 : MaskType, o_$10_$12 : ref, f_$6_$12 : Field (ref) , howMuch_$1_$12 : Integer, q_$2_$12 : ref, g_$1_$12 : Field (ref)  :: {IncPerm(m_$9_$12,o_$10_$12,f_$6_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R]} ( IncPerm(m_$9_$12,o_$10_$12,f_$6_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R] == ite((o_$10_$12 == q_$2_$12) && (f_$6_$12 == g_$1_$12),m_$9_$12[q_$2_$12,g_$1_$12][perm$R] + howMuch_$1_$12,m_$9_$12[q_$2_$12,g_$1_$12][perm$R]) )))) && ((forall  m_$9_$13 : MaskType, o_$10_$13 : ref, f_$6_$13 : Field (HeapType) , howMuch_$1_$13 : Integer, q_$2_$13 : ref, g_$1_$13 : Field (ref)  :: {IncPerm(m_$9_$13,o_$10_$13,f_$6_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R]} ( IncPerm(m_$9_$13,o_$10_$13,f_$6_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R] == ite((o_$10_$13 == q_$2_$13) && false,m_$9_$13[q_$2_$13,g_$1_$13][perm$R] + howMuch_$1_$13,m_$9_$13[q_$2_$13,g_$1_$13][perm$R]) )))) && ((forall  m_$9_$14 : MaskType, o_$10_$14 : ref, f_$6_$14 : Field (Mu) , howMuch_$1_$14 : Integer, q_$2_$14 : ref, g_$1_$14 : Field (ref)  :: {IncPerm(m_$9_$14,o_$10_$14,f_$6_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R]} ( IncPerm(m_$9_$14,o_$10_$14,f_$6_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R] == ite((o_$10_$14 == q_$2_$14) && false,m_$9_$14[q_$2_$14,g_$1_$14][perm$R] + howMuch_$1_$14,m_$9_$14[q_$2_$14,g_$1_$14][perm$R]) )))) && ((forall  m_$9_$15 : MaskType, o_$10_$15 : ref, f_$6_$15 : Field (Boolean) , howMuch_$1_$15 : Integer, q_$2_$15 : ref, g_$1_$15 : Field (HeapType)  :: {IncPerm(m_$9_$15,o_$10_$15,f_$6_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R]} ( IncPerm(m_$9_$15,o_$10_$15,f_$6_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R] == ite((o_$10_$15 == q_$2_$15) && false,m_$9_$15[q_$2_$15,g_$1_$15][perm$R] + howMuch_$1_$15,m_$9_$15[q_$2_$15,g_$1_$15][perm$R]) )))) && ((forall  m_$9_$16 : MaskType, o_$10_$16 : ref, f_$6_$16 : Field (Integer) , howMuch_$1_$16 : Integer, q_$2_$16 : ref, g_$1_$16 : Field (HeapType)  :: {IncPerm(m_$9_$16,o_$10_$16,f_$6_$16,howMuch_$1_$16)[q_$2_$16,g_$1_$16][perm$R]} ( IncPerm(m_$9_$16,o_$10_$16,f_$6_$16,howMuch_$1_$16)[q_$2_$16,g_$1_$16][perm$R] == ite((o_$10_$16 == q_$2_$16) && false,m_$9_$16[q_$2_$16,g_$1_$16][perm$R] + howMuch_$1_$16,m_$9_$16[q_$2_$16,g_$1_$16][perm$R]) )))) && ((forall  m_$9_$17 : MaskType, o_$10_$17 : ref, f_$6_$17 : Field (ref) , howMuch_$1_$17 : Integer, q_$2_$17 : ref, g_$1_$17 : Field (HeapType)  :: {IncPerm(m_$9_$17,o_$10_$17,f_$6_$17,howMuch_$1_$17)[q_$2_$17,g_$1_$17][perm$R]} ( IncPerm(m_$9_$17,o_$10_$17,f_$6_$17,howMuch_$1_$17)[q_$2_$17,g_$1_$17][perm$R] == ite((o_$10_$17 == q_$2_$17) && false,m_$9_$17[q_$2_$17,g_$1_$17][perm$R] + howMuch_$1_$17,m_$9_$17[q_$2_$17,g_$1_$17][perm$R]) )))) && ((forall  m_$9_$18 : MaskType, o_$10_$18 : ref, f_$6_$18 : Field (HeapType) , howMuch_$1_$18 : Integer, q_$2_$18 : ref, g_$1_$18 : Field (HeapType)  :: {IncPerm(m_$9_$18,o_$10_$18,f_$6_$18,howMuch_$1_$18)[q_$2_$18,g_$1_$18][perm$R]} ( IncPerm(m_$9_$18,o_$10_$18,f_$6_$18,howMuch_$1_$18)[q_$2_$18,g_$1_$18][perm$R] == ite((o_$10_$18 == q_$2_$18) && (f_$6_$18 == g_$1_$18),m_$9_$18[q_$2_$18,g_$1_$18][perm$R] + howMuch_$1_$18,m_$9_$18[q_$2_$18,g_$1_$18][perm$R]) )))) && ((forall  m_$9_$19 : MaskType, o_$10_$19 : ref, f_$6_$19 : Field (Mu) , howMuch_$1_$19 : Integer, q_$2_$19 : ref, g_$1_$19 : Field (HeapType)  :: {IncPerm(m_$9_$19,o_$10_$19,f_$6_$19,howMuch_$1_$19)[q_$2_$19,g_$1_$19][perm$R]} ( IncPerm(m_$9_$19,o_$10_$19,f_$6_$19,howMuch_$1_$19)[q_$2_$19,g_$1_$19][perm$R] == ite((o_$10_$19 == q_$2_$19) && false,m_$9_$19[q_$2_$19,g_$1_$19][perm$R] + howMuch_$1_$19,m_$9_$19[q_$2_$19,g_$1_$19][perm$R]) )))) && ((forall  m_$9_$20 : MaskType, o_$10_$20 : ref, f_$6_$20 : Field (Boolean) , howMuch_$1_$20 : Integer, q_$2_$20 : ref, g_$1_$20 : Field (Mu)  :: {IncPerm(m_$9_$20,o_$10_$20,f_$6_$20,howMuch_$1_$20)[q_$2_$20,g_$1_$20][perm$R]} ( IncPerm(m_$9_$20,o_$10_$20,f_$6_$20,howMuch_$1_$20)[q_$2_$20,g_$1_$20][perm$R] == ite((o_$10_$20 == q_$2_$20) && false,m_$9_$20[q_$2_$20,g_$1_$20][perm$R] + howMuch_$1_$20,m_$9_$20[q_$2_$20,g_$1_$20][perm$R]) )))) && ((forall  m_$9_$21 : MaskType, o_$10_$21 : ref, f_$6_$21 : Field (Integer) , howMuch_$1_$21 : Integer, q_$2_$21 : ref, g_$1_$21 : Field (Mu)  :: {IncPerm(m_$9_$21,o_$10_$21,f_$6_$21,howMuch_$1_$21)[q_$2_$21,g_$1_$21][perm$R]} ( IncPerm(m_$9_$21,o_$10_$21,f_$6_$21,howMuch_$1_$21)[q_$2_$21,g_$1_$21][perm$R] == ite((o_$10_$21 == q_$2_$21) && false,m_$9_$21[q_$2_$21,g_$1_$21][perm$R] + howMuch_$1_$21,m_$9_$21[q_$2_$21,g_$1_$21][perm$R]) )))) && ((forall  m_$9_$22 : MaskType, o_$10_$22 : ref, f_$6_$22 : Field (ref) , howMuch_$1_$22 : Integer, q_$2_$22 : ref, g_$1_$22 : Field (Mu)  :: {IncPerm(m_$9_$22,o_$10_$22,f_$6_$22,howMuch_$1_$22)[q_$2_$22,g_$1_$22][perm$R]} ( IncPerm(m_$9_$22,o_$10_$22,f_$6_$22,howMuch_$1_$22)[q_$2_$22,g_$1_$22][perm$R] == ite((o_$10_$22 == q_$2_$22) && false,m_$9_$22[q_$2_$22,g_$1_$22][perm$R] + howMuch_$1_$22,m_$9_$22[q_$2_$22,g_$1_$22][perm$R]) )))) && ((forall  m_$9_$23 : MaskType, o_$10_$23 : ref, f_$6_$23 : Field (HeapType) , howMuch_$1_$23 : Integer, q_$2_$23 : ref, g_$1_$23 : Field (Mu)  :: {IncPerm(m_$9_$23,o_$10_$23,f_$6_$23,howMuch_$1_$23)[q_$2_$23,g_$1_$23][perm$R]} ( IncPerm(m_$9_$23,o_$10_$23,f_$6_$23,howMuch_$1_$23)[q_$2_$23,g_$1_$23][perm$R] == ite((o_$10_$23 == q_$2_$23) && false,m_$9_$23[q_$2_$23,g_$1_$23][perm$R] + howMuch_$1_$23,m_$9_$23[q_$2_$23,g_$1_$23][perm$R]) )))) && ((forall  m_$9_$24 : MaskType, o_$10_$24 : ref, f_$6_$24 : Field (Mu) , howMuch_$1_$24 : Integer, q_$2_$24 : ref, g_$1_$24 : Field (Mu)  :: {IncPerm(m_$9_$24,o_$10_$24,f_$6_$24,howMuch_$1_$24)[q_$2_$24,g_$1_$24][perm$R]} ( IncPerm(m_$9_$24,o_$10_$24,f_$6_$24,howMuch_$1_$24)[q_$2_$24,g_$1_$24][perm$R] == ite((o_$10_$24 == q_$2_$24) && (f_$6_$24 == g_$1_$24),m_$9_$24[q_$2_$24,g_$1_$24][perm$R] + howMuch_$1_$24,m_$9_$24[q_$2_$24,g_$1_$24][perm$R]) )));
	assume (forall  o_$14 : ref :: ( ZeroCredits[o_$14] == 0 ));
	assume (((((forall  f_$10_$0 : Field (Boolean)  :: ( NonPredicateField(f_$10_$0) ==> (!PredicateField(f_$10_$0)) ))) && ((forall  f_$10_$1 : Field (Integer)  :: ( NonPredicateField(f_$10_$1) ==> (!PredicateField(f_$10_$1)) )))) && ((forall  f_$10_$2 : Field (ref)  :: ( NonPredicateField(f_$10_$2) ==> (!PredicateField(f_$10_$2)) )))) && ((forall  f_$10_$3 : Field (HeapType)  :: ( NonPredicateField(f_$10_$3) ==> (!PredicateField(f_$10_$3)) )))) && ((forall  f_$10_$4 : Field (Mu)  :: ( NonPredicateField(f_$10_$4) ==> (!PredicateField(f_$10_$4)) )));
	assume (((((forall  f_$11_$0 : Field (Boolean)  :: ( PredicateField(f_$11_$0) ==> (!NonPredicateField(f_$11_$0)) ))) && ((forall  f_$11_$1 : Field (Integer)  :: ( PredicateField(f_$11_$1) ==> (!NonPredicateField(f_$11_$1)) )))) && ((forall  f_$11_$2 : Field (ref)  :: ( PredicateField(f_$11_$2) ==> (!NonPredicateField(f_$11_$2)) )))) && ((forall  f_$11_$3 : Field (HeapType)  :: ( PredicateField(f_$11_$3) ==> (!NonPredicateField(f_$11_$3)) )))) && ((forall  f_$11_$4 : Field (Mu)  :: ( PredicateField(f_$11_$4) ==> (!NonPredicateField(f_$11_$4)) )));
	assume ((((((((((((((((forall  con_$1 : Boolean, a_$0_$0 : Boolean, b_$0_$0 : Boolean :: {ite(con_$1,a_$0_$0,b_$0_$0)} ( con_$1 ==> (ite(con_$1,a_$0_$0,b_$0_$0) == a_$0_$0) ))) && ((forall  con_$2 : Boolean, a_$0_$1 : Integer, b_$0_$1 : Integer :: {ite(con_$2,a_$0_$1,b_$0_$1)} ( con_$2 ==> (ite(con_$2,a_$0_$1,b_$0_$1) == a_$0_$1) )))) && ((forall  con_$3 : Boolean, a_$0_$2 : [PermissionComponent]Integer, b_$0_$2 : [PermissionComponent]Integer :: {ite(con_$3,a_$0_$2,b_$0_$2)} ( con_$3 ==> (ite(con_$3,a_$0_$2,b_$0_$2) == a_$0_$2) )))) && ((forall  con_$4 : Boolean, a_$0_$3 : PermissionComponent, b_$0_$3 : PermissionComponent :: {ite(con_$4,a_$0_$3,b_$0_$3)} ( con_$4 ==> (ite(con_$4,a_$0_$3,b_$0_$3) == a_$0_$3) )))) && ((forall  con_$5 : Boolean, a_$0_$4 : MaskType, b_$0_$4 : MaskType :: {ite(con_$5,a_$0_$4,b_$0_$4)} ( con_$5 ==> (ite(con_$5,a_$0_$4,b_$0_$4) == a_$0_$4) )))) && ((forall  con_$6 : Boolean, a_$0_$5 : ref, b_$0_$5 : ref :: {ite(con_$6,a_$0_$5,b_$0_$5)} ( con_$6 ==> (ite(con_$6,a_$0_$5,b_$0_$5) == a_$0_$5) )))) && ((forall  con_$7 : Boolean, a_$0_$6 : Field (Integer) , b_$0_$6 : Field (Integer)  :: {ite(con_$7,a_$0_$6,b_$0_$6)} ( con_$7 ==> (ite(con_$7,a_$0_$6,b_$0_$6) == a_$0_$6) )))) && ((forall  con_$8 : Boolean, a_$0_$7 : HeapType, b_$0_$7 : HeapType :: {ite(con_$8,a_$0_$7,b_$0_$7)} ( con_$8 ==> (ite(con_$8,a_$0_$7,b_$0_$7) == a_$0_$7) )))) && ((forall  con_$9 : Boolean, a_$0_$8 : Field (Mu) , b_$0_$8 : Field (Mu)  :: {ite(con_$9,a_$0_$8,b_$0_$8)} ( con_$9 ==> (ite(con_$9,a_$0_$8,b_$0_$8) == a_$0_$8) )))) && ((forall  con_$10 : Boolean, a_$0_$9 : Mu, b_$0_$9 : Mu :: {ite(con_$10,a_$0_$9,b_$0_$9)} ( con_$10 ==> (ite(con_$10,a_$0_$9,b_$0_$9) == a_$0_$9) )))) && ((forall  con_$11 : Boolean, a_$0_$10 : Field (Boolean) , b_$0_$10 : Field (Boolean)  :: {ite(con_$11,a_$0_$10,b_$0_$10)} ( con_$11 ==> (ite(con_$11,a_$0_$10,b_$0_$10) == a_$0_$10) )))) && ((forall  con_$12 : Boolean, a_$0_$11 : CreditsType, b_$0_$11 : CreditsType :: {ite(con_$12,a_$0_$11,b_$0_$11)} ( con_$12 ==> (ite(con_$12,a_$0_$11,b_$0_$11) == a_$0_$11) )))) && ((forall  con_$13 : Boolean, a_$0_$12 : Field (ref) , b_$0_$12 : Field (ref)  :: {ite(con_$13,a_$0_$12,b_$0_$12)} ( con_$13 ==> (ite(con_$13,a_$0_$12,b_$0_$12) == a_$0_$12) )))) && ((forall  con_$14 : Boolean, a_$0_$13 : Field (HeapType) , b_$0_$13 : Field (HeapType)  :: {ite(con_$14,a_$0_$13,b_$0_$13)} ( con_$14 ==> (ite(con_$14,a_$0_$13,b_$0_$13) == a_$0_$13) )))) && ((forall  con_$15 : Boolean, a_$0_$14 : ModuleName, b_$0_$14 : ModuleName :: {ite(con_$15,a_$0_$14,b_$0_$14)} ( con_$15 ==> (ite(con_$15,a_$0_$14,b_$0_$14) == a_$0_$14) )))) && ((forall  con_$16 : Boolean, a_$0_$15 : TypeName, b_$0_$15 : TypeName :: {ite(con_$16,a_$0_$15,b_$0_$15)} ( con_$16 ==> (ite(con_$16,a_$0_$15,b_$0_$15) == a_$0_$15) )));
	assume ((((((((((((((((forall  con_$0_$0 : Boolean, a_$1_$0 : Boolean, b_$1_$0 : Boolean :: {ite(con_$0_$0,a_$1_$0,b_$1_$0)} ( (!con_$0_$0) ==> (ite(con_$0_$0,a_$1_$0,b_$1_$0) == b_$1_$0) ))) && ((forall  con_$0_$1 : Boolean, a_$1_$1 : Integer, b_$1_$1 : Integer :: {ite(con_$0_$1,a_$1_$1,b_$1_$1)} ( (!con_$0_$1) ==> (ite(con_$0_$1,a_$1_$1,b_$1_$1) == b_$1_$1) )))) && ((forall  con_$0_$2 : Boolean, a_$1_$2 : [PermissionComponent]Integer, b_$1_$2 : [PermissionComponent]Integer :: {ite(con_$0_$2,a_$1_$2,b_$1_$2)} ( (!con_$0_$2) ==> (ite(con_$0_$2,a_$1_$2,b_$1_$2) == b_$1_$2) )))) && ((forall  con_$0_$3 : Boolean, a_$1_$3 : PermissionComponent, b_$1_$3 : PermissionComponent :: {ite(con_$0_$3,a_$1_$3,b_$1_$3)} ( (!con_$0_$3) ==> (ite(con_$0_$3,a_$1_$3,b_$1_$3) == b_$1_$3) )))) && ((forall  con_$0_$4 : Boolean, a_$1_$4 : MaskType, b_$1_$4 : MaskType :: {ite(con_$0_$4,a_$1_$4,b_$1_$4)} ( (!con_$0_$4) ==> (ite(con_$0_$4,a_$1_$4,b_$1_$4) == b_$1_$4) )))) && ((forall  con_$0_$5 : Boolean, a_$1_$5 : ref, b_$1_$5 : ref :: {ite(con_$0_$5,a_$1_$5,b_$1_$5)} ( (!con_$0_$5) ==> (ite(con_$0_$5,a_$1_$5,b_$1_$5) == b_$1_$5) )))) && ((forall  con_$0_$6 : Boolean, a_$1_$6 : Field (Integer) , b_$1_$6 : Field (Integer)  :: {ite(con_$0_$6,a_$1_$6,b_$1_$6)} ( (!con_$0_$6) ==> (ite(con_$0_$6,a_$1_$6,b_$1_$6) == b_$1_$6) )))) && ((forall  con_$0_$7 : Boolean, a_$1_$7 : HeapType, b_$1_$7 : HeapType :: {ite(con_$0_$7,a_$1_$7,b_$1_$7)} ( (!con_$0_$7) ==> (ite(con_$0_$7,a_$1_$7,b_$1_$7) == b_$1_$7) )))) && ((forall  con_$0_$8 : Boolean, a_$1_$8 : Field (Mu) , b_$1_$8 : Field (Mu)  :: {ite(con_$0_$8,a_$1_$8,b_$1_$8)} ( (!con_$0_$8) ==> (ite(con_$0_$8,a_$1_$8,b_$1_$8) == b_$1_$8) )))) && ((forall  con_$0_$9 : Boolean, a_$1_$9 : Mu, b_$1_$9 : Mu :: {ite(con_$0_$9,a_$1_$9,b_$1_$9)} ( (!con_$0_$9) ==> (ite(con_$0_$9,a_$1_$9,b_$1_$9) == b_$1_$9) )))) && ((forall  con_$0_$10 : Boolean, a_$1_$10 : Field (Boolean) , b_$1_$10 : Field (Boolean)  :: {ite(con_$0_$10,a_$1_$10,b_$1_$10)} ( (!con_$0_$10) ==> (ite(con_$0_$10,a_$1_$10,b_$1_$10) == b_$1_$10) )))) && ((forall  con_$0_$11 : Boolean, a_$1_$11 : CreditsType, b_$1_$11 : CreditsType :: {ite(con_$0_$11,a_$1_$11,b_$1_$11)} ( (!con_$0_$11) ==> (ite(con_$0_$11,a_$1_$11,b_$1_$11) == b_$1_$11) )))) && ((forall  con_$0_$12 : Boolean, a_$1_$12 : Field (ref) , b_$1_$12 : Field (ref)  :: {ite(con_$0_$12,a_$1_$12,b_$1_$12)} ( (!con_$0_$12) ==> (ite(con_$0_$12,a_$1_$12,b_$1_$12) == b_$1_$12) )))) && ((forall  con_$0_$13 : Boolean, a_$1_$13 : Field (HeapType) , b_$1_$13 : Field (HeapType)  :: {ite(con_$0_$13,a_$1_$13,b_$1_$13)} ( (!con_$0_$13) ==> (ite(con_$0_$13,a_$1_$13,b_$1_$13) == b_$1_$13) )))) && ((forall  con_$0_$14 : Boolean, a_$1_$14 : ModuleName, b_$1_$14 : ModuleName :: {ite(con_$0_$14,a_$1_$14,b_$1_$14)} ( (!con_$0_$14) ==> (ite(con_$0_$14,a_$1_$14,b_$1_$14) == b_$1_$14) )))) && ((forall  con_$0_$15 : Boolean, a_$1_$15 : TypeName, b_$1_$15 : TypeName :: {ite(con_$0_$15,a_$1_$15,b_$1_$15)} ( (!con_$0_$15) ==> (ite(con_$0_$15,a_$1_$15,b_$1_$15) == b_$1_$15) )));
	assume NonPredicateField(FactorialActorChannelExpEP.state);
	assume NonPredicateField(FactorialActorChannelExpEP.ch);
	assume NonPredicateField(FactorialActorChannelExpEP.expch);
	assume PredicateField(FactorialActorChannelExpEP.valid);
	assume NonPredicateField(FactorialActorChannelImpEP.state);
	assume NonPredicateField(FactorialActorChannelImpEP.ch);
	assume NonPredicateField(FactorialActorChannelImpEP.impch);
	assume PredicateField(FactorialActorChannelImpEP.valid);
	assume NonPredicateField(FactorialActorChannel.imp);
	assume NonPredicateField(FactorialActorChannel.exp);
	assume PredicateField(FactorialActorChannel.valid);
	assume PredicateField(FactorialActorChannel.initImpState);
	assume PredicateField(FactorialActorChannel.initExpState);
	assume NonPredicateField(FactorialContChannelExpEP.state);
	assume NonPredicateField(FactorialContChannelExpEP.ch);
	assume NonPredicateField(FactorialContChannelExpEP.expch);
	assume PredicateField(FactorialContChannelExpEP.valid);
	assume NonPredicateField(FactorialContChannelImpEP.state);
	assume NonPredicateField(FactorialContChannelImpEP.ch);
	assume NonPredicateField(FactorialContChannelImpEP.impch);
	assume PredicateField(FactorialContChannelImpEP.valid);
	assume NonPredicateField(FactorialContChannel.imp);
	assume NonPredicateField(FactorialContChannel.exp);
	assume PredicateField(FactorialContChannel.valid);
	assume PredicateField(FactorialContChannel.initImpState);
	assume PredicateField(FactorialContChannel.initExpState);
	assume NonPredicateField(FutureChannelExpEP.state);
	assume NonPredicateField(FutureChannelExpEP.ch);
	assume NonPredicateField(FutureChannelExpEP.expch);
	assume PredicateField(FutureChannelExpEP.valid);
	assume NonPredicateField(FutureChannelImpEP.state);
	assume NonPredicateField(FutureChannelImpEP.ch);
	assume NonPredicateField(FutureChannelImpEP.impch);
	assume PredicateField(FutureChannelImpEP.valid);
	assume NonPredicateField(FutureChannel.imp);
	assume NonPredicateField(FutureChannel.exp);
	assume PredicateField(FutureChannel.valid);
	assume PredicateField(FutureChannel.initImpState);
	assume PredicateField(FutureChannel.initExpState);
	assume NonPredicateField(Future.sent);
	assume NonPredicateField(Future.value);
	assume NonPredicateField(Future.q);
	assume (forall  Heap_$0 : HeapType, Mask_$0 : MaskType, this_$0 : ref :: {#Future.getQ(Heap_$0,Mask_$0,this_$0)} ( (wf(Heap_$0,Mask_$0) && (CurrentModule == module#default)) ==> (#Future.getQ(Heap_$0,Mask_$0,this_$0) == Heap_$0[this_$0,Future.q]) ));
	assume (forall  Heap_$1 : HeapType, Mask_$1 : MaskType, this_$1 : ref :: {#Future.getQ(Heap_$1,Mask_$1,this_$1)} ( ((wf(Heap_$1,Mask_$1) && IsGoodState(combine(nostate,combine(Heap_$1[this_$1,Future.q],Heap_$1[Heap_$1[this_$1,Future.q],FutureChannel.valid])))) && CanAssumeFunctionDefs) ==> (#Future.getQ(Heap_$1,Mask_$1,this_$1) == ##Future.getQ(combine(nostate,combine(Heap_$1[this_$1,Future.q],Heap_$1[Heap_$1[this_$1,Future.q],FutureChannel.valid])),this_$1)) ));
	assume NonPredicateField(Message.type);
	assume NonPredicateField(Message.sender1);
	assume NonPredicateField(Message.sender3);
	assume NonPredicateField(Message.sender2);
	assume NonPredicateField(Message.sender4);
	assume NonPredicateField(Message.receiver1);
	assume NonPredicateField(Message.receiver2);
	assume NonPredicateField(Message.receiver3);
	assume NonPredicateField(Message.receiver4);
	assume NonPredicateField(Message.v1);
	assume NonPredicateField(Message.vo1);
	assume NonPredicateField(Message.cust1);
	assume NonPredicateField(Message.vr1);
	assume NonPredicateField(Message.old1);
	assume NonPredicateField(Message.vr2);
	assume NonPredicateField(Message.old2);
	assume NonPredicateField(Message.vr3);
	assume (forall  Heap_$2 : HeapType, Mask_$2 : MaskType, this_$2 : ref, v#49 : Integer :: {#Message.factorial(Heap_$2,Mask_$2,this_$2,v#49)} ( (wf(Heap_$2,Mask_$2) && (CurrentModule == module#default)) ==> (#Message.factorial(Heap_$2,Mask_$2,this_$2,v#49) == ite(v#49 == 0,1,v#49 * #Message.factorial(Heap_$2,Mask_$2,this_$2,v#49 - 1))) ));
	assume (forall  Heap_$3 : HeapType, Mask_$3 : MaskType, this_$3 : ref, v#49_$0 : Integer :: {#Message.factorial(Heap_$3,Mask_$3,this_$3,v#49_$0)} ( #Message.factorial(Heap_$3,Mask_$3,this_$3,v#49_$0) == #Message.factorial#limited(Heap_$3,Mask_$3,this_$3,v#49_$0) ));
	assume (forall  Heap_$4 : HeapType, Mask_$4 : MaskType, this_$4 : ref, v#49_$1 : Integer :: {#Message.factorial#limited(Heap_$4,Mask_$4,this_$4,v#49_$1)} ( ((wf(Heap_$4,Mask_$4) && IsGoodState(combine(nostate,nostate))) && CanAssumeFunctionDefs) ==> (#Message.factorial#limited(Heap_$4,Mask_$4,this_$4,v#49_$1) == ##Message.factorial(combine(nostate,nostate),this_$4,v#49_$1)) ));
	assume (forall  Heap_$5 : HeapType, Mask_$5 : MaskType, this_$5 : ref, v#49_$2 : Integer :: {#Message.factorial(Heap_$5,Mask_$5,this_$5,v#49_$2)} ( (wf(Heap_$5,Mask_$5) && CanAssumeFunctionDefs) ==> ((v#49_$2 == 0) ==> (#Message.factorial(Heap_$5,Mask_$5,this_$5,v#49_$2) == 1)) ));
	assume (forall  Heap_$6 : HeapType, Mask_$6 : MaskType, this_$6 : ref, v#49_$3 : Integer :: {#Message.factorial(Heap_$6,Mask_$6,this_$6,v#49_$3)} ( (wf(Heap_$6,Mask_$6) && CanAssumeFunctionDefs) ==> ((v#49_$3 > 0) ==> (#Message.factorial(Heap_$6,Mask_$6,this_$6,v#49_$3) == (v#49_$3 * #Message.factorial(Heap_$6,Mask_$6,this_$6,v#49_$3 - 1)))) ));
	assume PredicateField(Message.invValue);
	assume PredicateField(Message.invResult1);
	assume PredicateField(Message.invResult2);
	assume PredicateField(Message.invFinalResult);
	assume PredicateField(Message.inv);
	assume NonPredicateField(FactorialActor.q);
	assume (forall  Heap_$7 : HeapType, Mask_$7 : MaskType, this_$7 : ref :: {#FactorialActor.getQ(Heap_$7,Mask_$7,this_$7)} ( (wf(Heap_$7,Mask_$7) && (CurrentModule == module#default)) ==> (#FactorialActor.getQ(Heap_$7,Mask_$7,this_$7) == Heap_$7[this_$7,FactorialActor.q]) ));
	assume (forall  Heap_$8 : HeapType, Mask_$8 : MaskType, this_$8 : ref :: {#FactorialActor.getQ(Heap_$8,Mask_$8,this_$8)} ( ((wf(Heap_$8,Mask_$8) && IsGoodState(combine(nostate,combine(Heap_$8[this_$8,FactorialActor.q],Heap_$8[Heap_$8[this_$8,FactorialActor.q],FactorialActorChannel.valid])))) && CanAssumeFunctionDefs) ==> (#FactorialActor.getQ(Heap_$8,Mask_$8,this_$8) == ##FactorialActor.getQ(combine(nostate,combine(Heap_$8[this_$8,FactorialActor.q],Heap_$8[Heap_$8[this_$8,FactorialActor.q],FactorialActorChannel.valid])),this_$8)) ));
	assume NonPredicateField(FactorialCont.q);
	assume NonPredicateField(FactorialCont.v);
	assume NonPredicateField(FactorialCont.vo);
	assume NonPredicateField(FactorialCont.cust);
	assume (forall  Heap_$9 : HeapType, Mask_$9 : MaskType, this_$9 : ref :: {#FactorialCont.getQ(Heap_$9,Mask_$9,this_$9)} ( (wf(Heap_$9,Mask_$9) && (CurrentModule == module#default)) ==> (#FactorialCont.getQ(Heap_$9,Mask_$9,this_$9) == Heap_$9[this_$9,FactorialCont.q]) ));
	assume (forall  Heap_$10 : HeapType, Mask_$10 : MaskType, this_$10 : ref :: {#FactorialCont.getQ(Heap_$10,Mask_$10,this_$10)} ( ((wf(Heap_$10,Mask_$10) && IsGoodState(combine(nostate,combine(Heap_$10[this_$10,FactorialCont.q],Heap_$10[Heap_$10[this_$10,FactorialCont.q],FactorialContChannel.valid])))) && CanAssumeFunctionDefs) ==> (#FactorialCont.getQ(Heap_$10,Mask_$10,this_$10) == ##FactorialCont.getQ(combine(nostate,combine(Heap_$10[this_$10,FactorialCont.q],Heap_$10[Heap_$10[this_$10,FactorialCont.q],FactorialContChannel.valid])),this_$10)) ));
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume IsGoodMask(Mask);
	assume (this == null) || (dtype(this) == Channel#t);
	assume !(this == null);
	assume wf(Heap,Mask);
	goto anon0;
anon0:
	assume (0 < methodK#_7) && ((1000 * methodK#_7) < Fractions(1));
	assume wf(h0#_0,m0#_1);
	assume wf(h1#_3,m1#_4);
	assert { :msg "  <undefined position>: Monitor invariant is not allowed to contain debt." } (forall  ch : ref :: ( (ch == null) || (0 <= ZeroCredits[ch]) ));
	goto $exit;
}
