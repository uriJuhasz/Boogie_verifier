
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class AVLTree{
	//////////////////////////////////////////////////////////
	var root : AVLTreeNode;
	ghost var keys : seq<int>;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(root,100)
		&& acc(keys,50)
		&& (root!=null ==> root.valid)
		&& (root!=null ==> acc(root.keys         ,50))
		&& (root!=null ==> keys == root.keys)
		&& (root==null ==> keys == nil<int>)
	}

	//////////////////////////////////////////////////////////
	method init()
		requires acc(root,100);
		requires acc(keys,100);

		ensures valid;
		ensures acc(keys,50);
		ensures keys == nil<int>;
	{
		root := null;
		keys := nil<int>;
		fold valid;
	}
	

	//////////////////////////////////////////////////////////
	method insert(k : int)
		requires valid;
		requires acc(keys,50);

		ensures valid;
		ensures acc(keys,50);

		ensures k in keys;
		ensures forall j in old(keys) :: j in keys;
		ensures forall j in keys :: ( j in old(keys) || j==k);
	{
		unfold valid;
		if (root==null){
			var n : AVLTreeNode := new AVLTreeNode;
			call n.init(k);
			root := n;
		}else{
			call r := root.insert(k);
			root := r;
		}
		keys := root.keys;
		fold valid;
	}
/*
	//////////////////////////////////////////////////////////
	method remove(k : int)
		requires valid;
		requires acc(keys,50);

		ensures valid;
		ensures acc(keys,50);

		ensures !(k in keys);
		ensures forall j in old(keys) :: j in keys || j==k;
		ensures forall j in keys :: ( j in old(keys) && j!=k);
	{
		unfold valid;
		if (root==null){
		}else{
			call r := root.remove(k);
			root := r;
			keys := (root==null?nil<int>:root.keys);
		}
		fold valid;
	}
	*/
/*
	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);

		ensures valid;
		ensures rd(keys);
		ensures b == (k in keys);
	{
		unfold valid;
		if (root==null){
			b := false;
		}else{
			var bb : bool;
			call bb:= root.has(k);
			b := bb;
		}
		fold valid;
	}*/
}


////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class AVLTreeNode{
	//////////////////////////////////////////////////////////
	var key    : int;
	var left  : AVLTreeNode;
	var right : AVLTreeNode;

	//////////////////////////////////////////////////////////
	ghost var keys : seq<int>;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(key   ,100)
		&& acc(left  ,100)
		&& acc(right ,100)

		&& acc(keys         ,50)

		&& (left!=null ==> left.valid)
		&& (left!=null ==> acc(left.keys         ,50))
		&& (left!=null ==> forall lk in left.keys :: lk < key)

		&& (right!=null ==> right.valid)
		&& (right!=null ==> acc(right.keys         ,50))
		&& (right!=null ==> (forall rk in right.keys :: key < rk ))

		&& keys          == ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys )
		&& key in keys
		&& (forall kk : int :: 
				((kk in keys )
					<==> 
				 (( left !=null && kk in left .keys ) || ( right!=null && kk in right.keys ) || kk == key ))
			)
	}

	//////////////////////////////////////////////////////////
	method init(k : int)
		requires acc(key   ,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);

		ensures valid;
		ensures acc(keys,  50);

		ensures keys == [k];

		ensures k in keys;
	{
		left   := null;
		right  := null;
		key    := k;

		assert [k][0] == k;
		call close();
	}

	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method insert(k : int) returns ( r : AVLTreeNode )
		requires valid;
		requires acc(keys,  50);

		ensures r != null;
		ensures r.valid;
		ensures acc(r.keys,  50);

		ensures k in r.keys;
		ensures forall i in old(keys) :: i in r.keys;
		ensures forall i in r.keys :: ( i in old(keys) || i==k);
		ensures k in old(keys) ==> r.keys==old(keys);
		ensures !(k in old(keys)) ==> |r.keys| == |old(keys)|+1;
		
	{
		unfold valid;
		if (key==k){
			r := this;
			assert k==[key][0];
			call r.close();
		}else{ //key!=k
			if (k<key){ //insert left
				var nl : AVLTreeNode;
				if (left==null){
					nl := new AVLTreeNode;
					call nl.init(k);
				}else{
					call nl := left.insert(k);
				}
				left := nl;
//				var bf : int;
//				call bf := getBalanceFactorI();

/*				if (bf==2){ //rebalance
					call r:= rebalanceLeft();
				}else{ //no rebalance*/
					r := this;
					call r.close();
//				}
			}else{ // k>key -- insert right
				var nr : AVLTreeNode;
				if (right==null){
					nr := new AVLTreeNode;
					call nr.init(k);
				}else{
					call nr := right.insert(k);
				}
				right := nr;
				
/*				var bf : int;
				call bf := getBalanceFactorI();
				if (bf==-2){ //rebalance
					call r := rebalanceRight();
				}else{//no rebalance*/
					r := this;
					call r.close();
//				}
			}
		}
	}
/*
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method remove(k : int) returns ( r : AVLTreeNode )
		requires valid;
		requires acc(keys,  50);

		ensures old(keys)==[k] ==> r == null;
		ensures old(keys)!=[k] ==> r != null;

		ensures r != null ==> r.valid;
		ensures r != null ==> acc(r.keys,  50);

		ensures r != null ==> !(k in r.keys);
		ensures r != null ==> forall i in old(keys) :: ( i in   r.keys  || i==k);
		ensures r != null ==> forall i in   r.keys  :: ( i in old(keys) && i!=k);
		ensures !(k in old(keys)) ==>  r.keys  ==  old(keys);
		ensures r != null ==> k in old(keys)  ==> |r.keys| == |old(keys)|-1;
		
	{
		unfold valid;
		if (key==k){
			if (left==null || right==null){
				assert right!=null ==> unfolding right.valid in right.keys != nil<int>;
				assert left !=null ==> unfolding left .valid in left .keys != nil<int>;
				if (left==null){ //replace with right
					r := right;
				}else{ //right==null
					r := left;
				}
			}else{ //prune max/min of left/right
				var bf : int;
				var nl : AVLTreeNode := left;
				var nr : AVLTreeNode := right;
				
				call bf := getBalanceFactorI();
				if (bf > 0 ){ //left larger - prune leftmax
					call nl,r := left.pruneMax();
				}else{ //right larger equal - prune rightmin
					call nr,r := right.pruneMin();
				}
				unfold r.valid;
				r.left  := nl;
				r.right := nr;
				call r.close();
			}
		}else{ //key!=k
			if (k<key){ //remove left
				if (left!=null){
					var nl : AVLTreeNode;
					call nl := left.remove(k);
					left := nl;

					var bf : int;
					call bf := getBalanceFactorI();

					if (bf==-2){ //rebalance
						call r:=rebalanceRight();
					}else{ //no rebalance
						call close();
						r := this;
					}
				}else{
					r := this;
					call r.close();
				}
			}else{ // k>key -- remove right
				if (right != null){
					var nr : AVLTreeNode;
					call nr := right.remove(k);
					right := nr;
					
					var bf : int;
					call bf := getBalanceFactorI();
					if (bf==2){ //rebalance
						call r := rebalanceLeft();
					}else{//no rebalance
						r := this;
						call r.close();
					}
				}else{
					r := this;
					call r.close();
				}
			}
		}
	}
	*/
	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);

		ensures valid;
		ensures rd(keys);
		ensures b == (k in keys);
	{
		unfold valid;
		if (k==key){
			b := true;
			assert [key][0]==k;
		}else{ //k!=key
			if (k < key){
				if (left!=null){
					call b := left.has(k);
				}else{
					b := false;
				}
			}else{ //k > key;
				if (right!=null){
					call b := right.has(k);
				}else{
					b := false;
				}
			}
		}
		fold valid;
	}

	//////////////////////////////////////////////////////////
	method close()
		requires acc(key   ,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);

		requires left!=null ==> left.valid;
		requires left!=null ==> acc(left.keys         ,50);
		requires left!=null ==> forall k in left.keys :: k < key;

		requires right!=null ==> right.valid;
		requires right!=null ==> acc(right.keys         ,50);
		requires right!=null ==> forall k in right.keys :: key < k;

		ensures valid;
		ensures acc(keys         ,50);

		ensures keys == 
			( old(left)==null ? nil<int> : old(left.keys) ) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );

	{
		keys          := ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys );
		assert [key][0] == key;
		fold valid;
	}
	
}
