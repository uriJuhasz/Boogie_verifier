type Integer = int;
type Boolean = bool;
type HeapType = <a>[ref,Field (a)]a;
type MaskType = <a>[ref,Field (a)][PermissionComponent]int;
type CreditsType = [ref]int;
type ArgSeq = <T>[int]T;
type Field m0;
type ref;
type PermissionComponent;
type ModuleName;
type TypeName;
type Mu;
type Seq m0;
const null : ref;
const unique perm$R : PermissionComponent;
const unique perm$N : PermissionComponent;
const Permission$denominator : int;
const Permission$FullFraction : int;
const Permission$Zero : [PermissionComponent]int;
const Permission$Full : [PermissionComponent]int;
const ZeroMask : MaskType;
const unique joinable : Field (int);
const unique forkK : Field (int);
const channelK : int;
const monitorK : int;
const predicateK : int;
const nostate : HeapType;
const unique mu : Field (Mu);
const $LockBottom : Mu;
const unique held : Field (int);
const unique rdheld : Field (bool);
const ZeroCredits : CreditsType;
const unique SortedTree#t : TypeName;
const unique SortedTree.root : Field (ref);
const unique SortedTree.keys : Field (Seq (int));
const unique SortedTree.numClones : Field (int);
const unique SortedTree.valid : Field (HeapType);
const unique SortedTreeSnapshot.root : Field (ref);
const unique SortedTreeSnapshot.keys : Field (Seq (int));
const unique SortedTreeSnapshot.valid : Field (HeapType);
const unique SortedTreeNode.key : Field (int);
const unique SortedTreeNode.left : Field (ref);
const unique SortedTreeNode.right : Field (ref);
const unique SortedTreeNode.keys : Field (Seq (int));
const unique SortedTreeNode.shared : Field (bool);
const unique SortedTreeNode.valid : Field (HeapType);
function Fractions(int) : int;
function IsGoodState <T> (T) : bool;
function dtype(ref) : TypeName;
function MuBelow(Mu,Mu) : bool;
function wf(HeapType,MaskType) : bool;
function {:expand  false} CanRead <T> (MaskType,ref,Field (T)) : bool;
function {:expand  true} IsGoodMask(MaskType) : bool;
function DecPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function IncPerm <T> (MaskType,ref,Field (T),int) : MaskType;
function NonPredicateField <T> (Field (T)) : bool;
function PredicateField <T> (Field (T)) : bool;
function ite <T> (bool,T,T) : T;
function Seq#Length <T> (Seq (T)) : int;
function Seq#Empty <T> () : Seq (T);
function Seq#Singleton <T> (T) : Seq (T);
function Seq#Build <T> (Seq (T),int,T,int) : Seq (T);
function Seq#Append <T> (Seq (T),Seq (T)) : Seq (T);
function Seq#Index <T> (Seq (T),int) : T;
function Seq#Contains <T> (Seq (T),T) : bool;
function Seq#Equal <T> (Seq (T),Seq (T)) : bool;
function Seq#Take <T> (Seq (T),int) : Seq (T);
function Seq#Drop <T> (Seq (T),int) : Seq (T);
function Seq#Range(int,int) : Seq (int);
var Heap : HeapType;
var Mask : MaskType;
var methodK#_7 : int;
var h0#_0 : HeapType;
var m0#_1 : MaskType;
var h1#_3 : HeapType;
var m1#_4 : MaskType;
var c1#_5 : CreditsType;
var Heap_$_0 : HeapType;
procedure SortedTree$monitorinvariant$checkDefinedness (this : ref)
{
	var methodK#_7 : int;
	var h0#_0 : HeapType;
	var m0#_1 : MaskType;
	var h1#_3 : HeapType;
	var m1#_4 : MaskType;
$start:
	assume Permission$denominator > 0;
	assume (Permission$Zero[perm$R] == 0) && (Permission$Zero[perm$N] == 0);
	assume (Permission$Full[perm$R] == Permission$FullFraction) && (Permission$Full[perm$N] == 0);
	assume ((((((forall  o_$17 : ref, f_$13 : Field (Boolean) , pc_$0 : PermissionComponent :: ( ZeroMask[o_$17,f_$13][pc_$0] == 0 ))) && ((forall  o_$18 : ref, f_$14 : Field (Integer) , pc_$1 : PermissionComponent :: ( ZeroMask[o_$18,f_$14][pc_$1] == 0 )))) && ((forall  o_$19 : ref, f_$15 : Field (ref) , pc_$2 : PermissionComponent :: ( ZeroMask[o_$19,f_$15][pc_$2] == 0 )))) && ((forall  o_$20 : ref, f_$16 : Field (HeapType) , pc_$3 : PermissionComponent :: ( ZeroMask[o_$20,f_$16][pc_$3] == 0 )))) && ((forall  o_$21 : ref, f_$17 : Field (Mu) , pc_$4 : PermissionComponent :: ( ZeroMask[o_$21,f_$17][pc_$4] == 0 )))) && ((forall  o_$22 : ref, f_$18 : Field (Seq (Integer) ) , pc_$5 : PermissionComponent :: ( ZeroMask[o_$22,f_$18][pc_$5] == 0 )));
	assume IsGoodMask(ZeroMask);
	assume NonPredicateField(joinable);
	assume NonPredicateField(forkK);
	assume (forall  n : Integer :: {Fractions(n)} ( Fractions(n) == (n * Permission$denominator) ));
	assume (forall  x : Integer, y : Integer :: ( ((0 <= x) && (x <= y)) ==> (Fractions(x) <= Fractions(y)) ));
	assume Permission$FullFraction == Fractions(100);
	assume (0 < channelK) && ((1000 * channelK) < Fractions(1));
	assume (0 < monitorK) && ((1000 * monitorK) < Fractions(1));
	assume (0 < predicateK) && ((1000 * predicateK) < Fractions(1));
	assume (predicateK == channelK) && (channelK == monitorK);
	assume IsGoodState(nostate);
	assume NonPredicateField(mu);
	assume (forall  m : Mu, n_$0 : Mu :: {MuBelow(m,n_$0),MuBelow(n_$0,m)} ( !(MuBelow(m,n_$0) && MuBelow(n_$0,m)) ));
	assume (forall  m_$0 : Mu, n_$1 : Mu, o_$0 : Mu :: {MuBelow(m_$0,n_$1),MuBelow(n_$1,o_$0)} ( (MuBelow(m_$0,n_$1) && MuBelow(n_$1,o_$0)) ==> MuBelow(m_$0,o_$0) ));
	assume (forall  m_$1 : Mu, n_$2 : Mu :: ( MuBelow(m_$1,n_$2) ==> (!(n_$2 == $LockBottom)) ));
	assume NonPredicateField(held);
	assume NonPredicateField(rdheld);
	assume ((((((forall  m_$3_$0 : MaskType, obj_$1 : ref, f_$1_$0 : Field (Boolean)  :: {CanRead(m_$3_$0,obj_$1,f_$1_$0)} {:expand  false}( CanRead(m_$3_$0,obj_$1,f_$1_$0) <==> ((0 < m_$3_$0[obj_$1,f_$1_$0][perm$R]) || (0 < m_$3_$0[obj_$1,f_$1_$0][perm$N])) ))) && ((forall  m_$3_$1 : MaskType, obj_$2 : ref, f_$1_$1 : Field (Integer)  :: {CanRead(m_$3_$1,obj_$2,f_$1_$1)} {:expand  false}( CanRead(m_$3_$1,obj_$2,f_$1_$1) <==> ((0 < m_$3_$1[obj_$2,f_$1_$1][perm$R]) || (0 < m_$3_$1[obj_$2,f_$1_$1][perm$N])) )))) && ((forall  m_$3_$2 : MaskType, obj_$3 : ref, f_$1_$2 : Field (ref)  :: {CanRead(m_$3_$2,obj_$3,f_$1_$2)} {:expand  false}( CanRead(m_$3_$2,obj_$3,f_$1_$2) <==> ((0 < m_$3_$2[obj_$3,f_$1_$2][perm$R]) || (0 < m_$3_$2[obj_$3,f_$1_$2][perm$N])) )))) && ((forall  m_$3_$3 : MaskType, obj_$4 : ref, f_$1_$3 : Field (HeapType)  :: {CanRead(m_$3_$3,obj_$4,f_$1_$3)} {:expand  false}( CanRead(m_$3_$3,obj_$4,f_$1_$3) <==> ((0 < m_$3_$3[obj_$4,f_$1_$3][perm$R]) || (0 < m_$3_$3[obj_$4,f_$1_$3][perm$N])) )))) && ((forall  m_$3_$4 : MaskType, obj_$5 : ref, f_$1_$4 : Field (Mu)  :: {CanRead(m_$3_$4,obj_$5,f_$1_$4)} {:expand  false}( CanRead(m_$3_$4,obj_$5,f_$1_$4) <==> ((0 < m_$3_$4[obj_$5,f_$1_$4][perm$R]) || (0 < m_$3_$4[obj_$5,f_$1_$4][perm$N])) )))) && ((forall  m_$3_$5 : MaskType, obj_$6 : ref, f_$1_$5 : Field (Seq (Integer) )  :: {CanRead(m_$3_$5,obj_$6,f_$1_$5)} {:expand  false}( CanRead(m_$3_$5,obj_$6,f_$1_$5) <==> ((0 < m_$3_$5[obj_$6,f_$1_$5][perm$R]) || (0 < m_$3_$5[obj_$6,f_$1_$5][perm$N])) )));
	assume (forall  m_$5 : MaskType :: {IsGoodMask(m_$5)} {:expand  true}( IsGoodMask(m_$5) <==> (((((((forall  o_$6_$0 : ref, f_$3_$0 : Field (Boolean)  :: ( ((0 <= m_$5[o_$6_$0,f_$3_$0][perm$R]) && (NonPredicateField(f_$3_$0) ==> ((m_$5[o_$6_$0,f_$3_$0][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$0,f_$3_$0][perm$N]) ==> (m_$5[o_$6_$0,f_$3_$0][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$0,f_$3_$0][perm$N] < 0) ==> (0 < m_$5[o_$6_$0,f_$3_$0][perm$R])) ))) && ((forall  o_$6_$1 : ref, f_$3_$1 : Field (Integer)  :: ( ((0 <= m_$5[o_$6_$1,f_$3_$1][perm$R]) && (NonPredicateField(f_$3_$1) ==> ((m_$5[o_$6_$1,f_$3_$1][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$1,f_$3_$1][perm$N]) ==> (m_$5[o_$6_$1,f_$3_$1][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$1,f_$3_$1][perm$N] < 0) ==> (0 < m_$5[o_$6_$1,f_$3_$1][perm$R])) )))) && ((forall  o_$6_$2 : ref, f_$3_$2 : Field (ref)  :: ( ((0 <= m_$5[o_$6_$2,f_$3_$2][perm$R]) && (NonPredicateField(f_$3_$2) ==> ((m_$5[o_$6_$2,f_$3_$2][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$2,f_$3_$2][perm$N]) ==> (m_$5[o_$6_$2,f_$3_$2][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$2,f_$3_$2][perm$N] < 0) ==> (0 < m_$5[o_$6_$2,f_$3_$2][perm$R])) )))) && ((forall  o_$6_$3 : ref, f_$3_$3 : Field (HeapType)  :: ( ((0 <= m_$5[o_$6_$3,f_$3_$3][perm$R]) && (NonPredicateField(f_$3_$3) ==> ((m_$5[o_$6_$3,f_$3_$3][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$3,f_$3_$3][perm$N]) ==> (m_$5[o_$6_$3,f_$3_$3][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$3,f_$3_$3][perm$N] < 0) ==> (0 < m_$5[o_$6_$3,f_$3_$3][perm$R])) )))) && ((forall  o_$6_$4 : ref, f_$3_$4 : Field (Mu)  :: ( ((0 <= m_$5[o_$6_$4,f_$3_$4][perm$R]) && (NonPredicateField(f_$3_$4) ==> ((m_$5[o_$6_$4,f_$3_$4][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$4,f_$3_$4][perm$N]) ==> (m_$5[o_$6_$4,f_$3_$4][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$4,f_$3_$4][perm$N] < 0) ==> (0 < m_$5[o_$6_$4,f_$3_$4][perm$R])) )))) && ((forall  o_$6_$5 : ref, f_$3_$5 : Field (Seq (Integer) )  :: ( ((0 <= m_$5[o_$6_$5,f_$3_$5][perm$R]) && (NonPredicateField(f_$3_$5) ==> ((m_$5[o_$6_$5,f_$3_$5][perm$R] <= Permission$FullFraction) && ((0 < m_$5[o_$6_$5,f_$3_$5][perm$N]) ==> (m_$5[o_$6_$5,f_$3_$5][perm$R] < Permission$FullFraction))))) && ((m_$5[o_$6_$5,f_$3_$5][perm$N] < 0) ==> (0 < m_$5[o_$6_$5,f_$3_$5][perm$R])) )))) ));
	assume (forall  h_$0 : HeapType, m_$6 : MaskType, o_$7 : ref, q : ref :: {wf(h_$0,m_$6),h_$0[o_$7,mu],h_$0[q,mu]} ( (((wf(h_$0,m_$6) && (!(o_$7 == q))) && ((0 < h_$0[o_$7,held]) || h_$0[o_$7,rdheld])) && ((0 < h_$0[q,held]) || h_$0[q,rdheld])) ==> (!(h_$0[o_$7,mu] == h_$0[q,mu])) ));
	assume ((((((((((((((((((((((((((((((((((((forall  m_$7_$0 : MaskType, o_$8_$0 : ref, f_$4_$0 : Field (Boolean) , howMuch_$3 : Integer, q_$0_$0 : ref, g_$4 : Field (Boolean)  :: {DecPerm(m_$7_$0,o_$8_$0,f_$4_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R]} ( DecPerm(m_$7_$0,o_$8_$0,f_$4_$0,howMuch_$3)[q_$0_$0,g_$4][perm$R] == ite((o_$8_$0 == q_$0_$0) && (f_$4_$0 == g_$4),m_$7_$0[q_$0_$0,g_$4][perm$R] - howMuch_$3,m_$7_$0[q_$0_$0,g_$4][perm$R]) ))) && ((forall  m_$7_$1 : MaskType, o_$8_$1 : ref, f_$4_$1 : Field (Integer) , howMuch_$4 : Integer, q_$0_$1 : ref, g_$5 : Field (Boolean)  :: {DecPerm(m_$7_$1,o_$8_$1,f_$4_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R]} ( DecPerm(m_$7_$1,o_$8_$1,f_$4_$1,howMuch_$4)[q_$0_$1,g_$5][perm$R] == ite((o_$8_$1 == q_$0_$1) && false,m_$7_$1[q_$0_$1,g_$5][perm$R] - howMuch_$4,m_$7_$1[q_$0_$1,g_$5][perm$R]) )))) && ((forall  m_$7_$2 : MaskType, o_$8_$2 : ref, f_$4_$2 : Field (ref) , howMuch_$5 : Integer, q_$0_$2 : ref, g_$6 : Field (Boolean)  :: {DecPerm(m_$7_$2,o_$8_$2,f_$4_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R]} ( DecPerm(m_$7_$2,o_$8_$2,f_$4_$2,howMuch_$5)[q_$0_$2,g_$6][perm$R] == ite((o_$8_$2 == q_$0_$2) && false,m_$7_$2[q_$0_$2,g_$6][perm$R] - howMuch_$5,m_$7_$2[q_$0_$2,g_$6][perm$R]) )))) && ((forall  m_$7_$3 : MaskType, o_$8_$3 : ref, f_$4_$3 : Field (HeapType) , howMuch_$6 : Integer, q_$0_$3 : ref, g_$7 : Field (Boolean)  :: {DecPerm(m_$7_$3,o_$8_$3,f_$4_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R]} ( DecPerm(m_$7_$3,o_$8_$3,f_$4_$3,howMuch_$6)[q_$0_$3,g_$7][perm$R] == ite((o_$8_$3 == q_$0_$3) && false,m_$7_$3[q_$0_$3,g_$7][perm$R] - howMuch_$6,m_$7_$3[q_$0_$3,g_$7][perm$R]) )))) && ((forall  m_$7_$4 : MaskType, o_$8_$4 : ref, f_$4_$4 : Field (Mu) , howMuch_$7 : Integer, q_$0_$4 : ref, g_$8 : Field (Boolean)  :: {DecPerm(m_$7_$4,o_$8_$4,f_$4_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R]} ( DecPerm(m_$7_$4,o_$8_$4,f_$4_$4,howMuch_$7)[q_$0_$4,g_$8][perm$R] == ite((o_$8_$4 == q_$0_$4) && false,m_$7_$4[q_$0_$4,g_$8][perm$R] - howMuch_$7,m_$7_$4[q_$0_$4,g_$8][perm$R]) )))) && ((forall  m_$7_$5 : MaskType, o_$8_$5 : ref, f_$4_$5 : Field (Seq (Integer) ) , howMuch_$8 : Integer, q_$0_$5 : ref, g_$9 : Field (Boolean)  :: {DecPerm(m_$7_$5,o_$8_$5,f_$4_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R]} ( DecPerm(m_$7_$5,o_$8_$5,f_$4_$5,howMuch_$8)[q_$0_$5,g_$9][perm$R] == ite((o_$8_$5 == q_$0_$5) && false,m_$7_$5[q_$0_$5,g_$9][perm$R] - howMuch_$8,m_$7_$5[q_$0_$5,g_$9][perm$R]) )))) && ((forall  m_$7_$6 : MaskType, o_$8_$6 : ref, f_$4_$6 : Field (Boolean) , howMuch_$9 : Integer, q_$0_$6 : ref, g_$10 : Field (Integer)  :: {DecPerm(m_$7_$6,o_$8_$6,f_$4_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R]} ( DecPerm(m_$7_$6,o_$8_$6,f_$4_$6,howMuch_$9)[q_$0_$6,g_$10][perm$R] == ite((o_$8_$6 == q_$0_$6) && false,m_$7_$6[q_$0_$6,g_$10][perm$R] - howMuch_$9,m_$7_$6[q_$0_$6,g_$10][perm$R]) )))) && ((forall  m_$7_$7 : MaskType, o_$8_$7 : ref, f_$4_$7 : Field (Integer) , howMuch_$10 : Integer, q_$0_$7 : ref, g_$11 : Field (Integer)  :: {DecPerm(m_$7_$7,o_$8_$7,f_$4_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R]} ( DecPerm(m_$7_$7,o_$8_$7,f_$4_$7,howMuch_$10)[q_$0_$7,g_$11][perm$R] == ite((o_$8_$7 == q_$0_$7) && (f_$4_$7 == g_$11),m_$7_$7[q_$0_$7,g_$11][perm$R] - howMuch_$10,m_$7_$7[q_$0_$7,g_$11][perm$R]) )))) && ((forall  m_$7_$8 : MaskType, o_$8_$8 : ref, f_$4_$8 : Field (ref) , howMuch_$11 : Integer, q_$0_$8 : ref, g_$12 : Field (Integer)  :: {DecPerm(m_$7_$8,o_$8_$8,f_$4_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R]} ( DecPerm(m_$7_$8,o_$8_$8,f_$4_$8,howMuch_$11)[q_$0_$8,g_$12][perm$R] == ite((o_$8_$8 == q_$0_$8) && false,m_$7_$8[q_$0_$8,g_$12][perm$R] - howMuch_$11,m_$7_$8[q_$0_$8,g_$12][perm$R]) )))) && ((forall  m_$7_$9 : MaskType, o_$8_$9 : ref, f_$4_$9 : Field (HeapType) , howMuch_$12 : Integer, q_$0_$9 : ref, g_$13 : Field (Integer)  :: {DecPerm(m_$7_$9,o_$8_$9,f_$4_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R]} ( DecPerm(m_$7_$9,o_$8_$9,f_$4_$9,howMuch_$12)[q_$0_$9,g_$13][perm$R] == ite((o_$8_$9 == q_$0_$9) && false,m_$7_$9[q_$0_$9,g_$13][perm$R] - howMuch_$12,m_$7_$9[q_$0_$9,g_$13][perm$R]) )))) && ((forall  m_$7_$10 : MaskType, o_$8_$10 : ref, f_$4_$10 : Field (Mu) , howMuch_$13 : Integer, q_$0_$10 : ref, g_$14 : Field (Integer)  :: {DecPerm(m_$7_$10,o_$8_$10,f_$4_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R]} ( DecPerm(m_$7_$10,o_$8_$10,f_$4_$10,howMuch_$13)[q_$0_$10,g_$14][perm$R] == ite((o_$8_$10 == q_$0_$10) && false,m_$7_$10[q_$0_$10,g_$14][perm$R] - howMuch_$13,m_$7_$10[q_$0_$10,g_$14][perm$R]) )))) && ((forall  m_$7_$11 : MaskType, o_$8_$11 : ref, f_$4_$11 : Field (Seq (Integer) ) , howMuch_$14 : Integer, q_$0_$11 : ref, g_$15 : Field (Integer)  :: {DecPerm(m_$7_$11,o_$8_$11,f_$4_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R]} ( DecPerm(m_$7_$11,o_$8_$11,f_$4_$11,howMuch_$14)[q_$0_$11,g_$15][perm$R] == ite((o_$8_$11 == q_$0_$11) && false,m_$7_$11[q_$0_$11,g_$15][perm$R] - howMuch_$14,m_$7_$11[q_$0_$11,g_$15][perm$R]) )))) && ((forall  m_$7_$12 : MaskType, o_$8_$12 : ref, f_$4_$12 : Field (Boolean) , howMuch_$15 : Integer, q_$0_$12 : ref, g_$16 : Field (ref)  :: {DecPerm(m_$7_$12,o_$8_$12,f_$4_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R]} ( DecPerm(m_$7_$12,o_$8_$12,f_$4_$12,howMuch_$15)[q_$0_$12,g_$16][perm$R] == ite((o_$8_$12 == q_$0_$12) && false,m_$7_$12[q_$0_$12,g_$16][perm$R] - howMuch_$15,m_$7_$12[q_$0_$12,g_$16][perm$R]) )))) && ((forall  m_$7_$13 : MaskType, o_$8_$13 : ref, f_$4_$13 : Field (Integer) , howMuch_$16 : Integer, q_$0_$13 : ref, g_$17 : Field (ref)  :: {DecPerm(m_$7_$13,o_$8_$13,f_$4_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R]} ( DecPerm(m_$7_$13,o_$8_$13,f_$4_$13,howMuch_$16)[q_$0_$13,g_$17][perm$R] == ite((o_$8_$13 == q_$0_$13) && false,m_$7_$13[q_$0_$13,g_$17][perm$R] - howMuch_$16,m_$7_$13[q_$0_$13,g_$17][perm$R]) )))) && ((forall  m_$7_$14 : MaskType, o_$8_$14 : ref, f_$4_$14 : Field (ref) , howMuch_$17 : Integer, q_$0_$14 : ref, g_$18 : Field (ref)  :: {DecPerm(m_$7_$14,o_$8_$14,f_$4_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R]} ( DecPerm(m_$7_$14,o_$8_$14,f_$4_$14,howMuch_$17)[q_$0_$14,g_$18][perm$R] == ite((o_$8_$14 == q_$0_$14) && (f_$4_$14 == g_$18),m_$7_$14[q_$0_$14,g_$18][perm$R] - howMuch_$17,m_$7_$14[q_$0_$14,g_$18][perm$R]) )))) && ((forall  m_$7_$15 : MaskType, o_$8_$15 : ref, f_$4_$15 : Field (HeapType) , howMuch_$18 : Integer, q_$0_$15 : ref, g_$19 : Field (ref)  :: {DecPerm(m_$7_$15,o_$8_$15,f_$4_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R]} ( DecPerm(m_$7_$15,o_$8_$15,f_$4_$15,howMuch_$18)[q_$0_$15,g_$19][perm$R] == ite((o_$8_$15 == q_$0_$15) && false,m_$7_$15[q_$0_$15,g_$19][perm$R] - howMuch_$18,m_$7_$15[q_$0_$15,g_$19][perm$R]) )))) && ((forall  m_$7_$16 : MaskType, o_$8_$16 : ref, f_$4_$16 : Field (Mu) , howMuch_$19 : Integer, q_$0_$16 : ref, g_$20 : Field (ref)  :: {DecPerm(m_$7_$16,o_$8_$16,f_$4_$16,howMuch_$19)[q_$0_$16,g_$20][perm$R]} ( DecPerm(m_$7_$16,o_$8_$16,f_$4_$16,howMuch_$19)[q_$0_$16,g_$20][perm$R] == ite((o_$8_$16 == q_$0_$16) && false,m_$7_$16[q_$0_$16,g_$20][perm$R] - howMuch_$19,m_$7_$16[q_$0_$16,g_$20][perm$R]) )))) && ((forall  m_$7_$17 : MaskType, o_$8_$17 : ref, f_$4_$17 : Field (Seq (Integer) ) , howMuch_$20 : Integer, q_$0_$17 : ref, g_$21 : Field (ref)  :: {DecPerm(m_$7_$17,o_$8_$17,f_$4_$17,howMuch_$20)[q_$0_$17,g_$21][perm$R]} ( DecPerm(m_$7_$17,o_$8_$17,f_$4_$17,howMuch_$20)[q_$0_$17,g_$21][perm$R] == ite((o_$8_$17 == q_$0_$17) && false,m_$7_$17[q_$0_$17,g_$21][perm$R] - howMuch_$20,m_$7_$17[q_$0_$17,g_$21][perm$R]) )))) && ((forall  m_$7_$18 : MaskType, o_$8_$18 : ref, f_$4_$18 : Field (Boolean) , howMuch_$21 : Integer, q_$0_$18 : ref, g_$22 : Field (HeapType)  :: {DecPerm(m_$7_$18,o_$8_$18,f_$4_$18,howMuch_$21)[q_$0_$18,g_$22][perm$R]} ( DecPerm(m_$7_$18,o_$8_$18,f_$4_$18,howMuch_$21)[q_$0_$18,g_$22][perm$R] == ite((o_$8_$18 == q_$0_$18) && false,m_$7_$18[q_$0_$18,g_$22][perm$R] - howMuch_$21,m_$7_$18[q_$0_$18,g_$22][perm$R]) )))) && ((forall  m_$7_$19 : MaskType, o_$8_$19 : ref, f_$4_$19 : Field (Integer) , howMuch_$22 : Integer, q_$0_$19 : ref, g_$23 : Field (HeapType)  :: {DecPerm(m_$7_$19,o_$8_$19,f_$4_$19,howMuch_$22)[q_$0_$19,g_$23][perm$R]} ( DecPerm(m_$7_$19,o_$8_$19,f_$4_$19,howMuch_$22)[q_$0_$19,g_$23][perm$R] == ite((o_$8_$19 == q_$0_$19) && false,m_$7_$19[q_$0_$19,g_$23][perm$R] - howMuch_$22,m_$7_$19[q_$0_$19,g_$23][perm$R]) )))) && ((forall  m_$7_$20 : MaskType, o_$8_$20 : ref, f_$4_$20 : Field (ref) , howMuch_$23 : Integer, q_$0_$20 : ref, g_$24 : Field (HeapType)  :: {DecPerm(m_$7_$20,o_$8_$20,f_$4_$20,howMuch_$23)[q_$0_$20,g_$24][perm$R]} ( DecPerm(m_$7_$20,o_$8_$20,f_$4_$20,howMuch_$23)[q_$0_$20,g_$24][perm$R] == ite((o_$8_$20 == q_$0_$20) && false,m_$7_$20[q_$0_$20,g_$24][perm$R] - howMuch_$23,m_$7_$20[q_$0_$20,g_$24][perm$R]) )))) && ((forall  m_$7_$21 : MaskType, o_$8_$21 : ref, f_$4_$21 : Field (HeapType) , howMuch_$24 : Integer, q_$0_$21 : ref, g_$25 : Field (HeapType)  :: {DecPerm(m_$7_$21,o_$8_$21,f_$4_$21,howMuch_$24)[q_$0_$21,g_$25][perm$R]} ( DecPerm(m_$7_$21,o_$8_$21,f_$4_$21,howMuch_$24)[q_$0_$21,g_$25][perm$R] == ite((o_$8_$21 == q_$0_$21) && (f_$4_$21 == g_$25),m_$7_$21[q_$0_$21,g_$25][perm$R] - howMuch_$24,m_$7_$21[q_$0_$21,g_$25][perm$R]) )))) && ((forall  m_$7_$22 : MaskType, o_$8_$22 : ref, f_$4_$22 : Field (Mu) , howMuch_$25 : Integer, q_$0_$22 : ref, g_$26 : Field (HeapType)  :: {DecPerm(m_$7_$22,o_$8_$22,f_$4_$22,howMuch_$25)[q_$0_$22,g_$26][perm$R]} ( DecPerm(m_$7_$22,o_$8_$22,f_$4_$22,howMuch_$25)[q_$0_$22,g_$26][perm$R] == ite((o_$8_$22 == q_$0_$22) && false,m_$7_$22[q_$0_$22,g_$26][perm$R] - howMuch_$25,m_$7_$22[q_$0_$22,g_$26][perm$R]) )))) && ((forall  m_$7_$23 : MaskType, o_$8_$23 : ref, f_$4_$23 : Field (Seq (Integer) ) , howMuch_$26 : Integer, q_$0_$23 : ref, g_$27 : Field (HeapType)  :: {DecPerm(m_$7_$23,o_$8_$23,f_$4_$23,howMuch_$26)[q_$0_$23,g_$27][perm$R]} ( DecPerm(m_$7_$23,o_$8_$23,f_$4_$23,howMuch_$26)[q_$0_$23,g_$27][perm$R] == ite((o_$8_$23 == q_$0_$23) && false,m_$7_$23[q_$0_$23,g_$27][perm$R] - howMuch_$26,m_$7_$23[q_$0_$23,g_$27][perm$R]) )))) && ((forall  m_$7_$24 : MaskType, o_$8_$24 : ref, f_$4_$24 : Field (Boolean) , howMuch_$27 : Integer, q_$0_$24 : ref, g_$28 : Field (Mu)  :: {DecPerm(m_$7_$24,o_$8_$24,f_$4_$24,howMuch_$27)[q_$0_$24,g_$28][perm$R]} ( DecPerm(m_$7_$24,o_$8_$24,f_$4_$24,howMuch_$27)[q_$0_$24,g_$28][perm$R] == ite((o_$8_$24 == q_$0_$24) && false,m_$7_$24[q_$0_$24,g_$28][perm$R] - howMuch_$27,m_$7_$24[q_$0_$24,g_$28][perm$R]) )))) && ((forall  m_$7_$25 : MaskType, o_$8_$25 : ref, f_$4_$25 : Field (Integer) , howMuch_$28 : Integer, q_$0_$25 : ref, g_$29 : Field (Mu)  :: {DecPerm(m_$7_$25,o_$8_$25,f_$4_$25,howMuch_$28)[q_$0_$25,g_$29][perm$R]} ( DecPerm(m_$7_$25,o_$8_$25,f_$4_$25,howMuch_$28)[q_$0_$25,g_$29][perm$R] == ite((o_$8_$25 == q_$0_$25) && false,m_$7_$25[q_$0_$25,g_$29][perm$R] - howMuch_$28,m_$7_$25[q_$0_$25,g_$29][perm$R]) )))) && ((forall  m_$7_$26 : MaskType, o_$8_$26 : ref, f_$4_$26 : Field (ref) , howMuch_$29 : Integer, q_$0_$26 : ref, g_$30 : Field (Mu)  :: {DecPerm(m_$7_$26,o_$8_$26,f_$4_$26,howMuch_$29)[q_$0_$26,g_$30][perm$R]} ( DecPerm(m_$7_$26,o_$8_$26,f_$4_$26,howMuch_$29)[q_$0_$26,g_$30][perm$R] == ite((o_$8_$26 == q_$0_$26) && false,m_$7_$26[q_$0_$26,g_$30][perm$R] - howMuch_$29,m_$7_$26[q_$0_$26,g_$30][perm$R]) )))) && ((forall  m_$7_$27 : MaskType, o_$8_$27 : ref, f_$4_$27 : Field (HeapType) , howMuch_$30 : Integer, q_$0_$27 : ref, g_$31 : Field (Mu)  :: {DecPerm(m_$7_$27,o_$8_$27,f_$4_$27,howMuch_$30)[q_$0_$27,g_$31][perm$R]} ( DecPerm(m_$7_$27,o_$8_$27,f_$4_$27,howMuch_$30)[q_$0_$27,g_$31][perm$R] == ite((o_$8_$27 == q_$0_$27) && false,m_$7_$27[q_$0_$27,g_$31][perm$R] - howMuch_$30,m_$7_$27[q_$0_$27,g_$31][perm$R]) )))) && ((forall  m_$7_$28 : MaskType, o_$8_$28 : ref, f_$4_$28 : Field (Mu) , howMuch_$31 : Integer, q_$0_$28 : ref, g_$32 : Field (Mu)  :: {DecPerm(m_$7_$28,o_$8_$28,f_$4_$28,howMuch_$31)[q_$0_$28,g_$32][perm$R]} ( DecPerm(m_$7_$28,o_$8_$28,f_$4_$28,howMuch_$31)[q_$0_$28,g_$32][perm$R] == ite((o_$8_$28 == q_$0_$28) && (f_$4_$28 == g_$32),m_$7_$28[q_$0_$28,g_$32][perm$R] - howMuch_$31,m_$7_$28[q_$0_$28,g_$32][perm$R]) )))) && ((forall  m_$7_$29 : MaskType, o_$8_$29 : ref, f_$4_$29 : Field (Seq (Integer) ) , howMuch_$32 : Integer, q_$0_$29 : ref, g_$33 : Field (Mu)  :: {DecPerm(m_$7_$29,o_$8_$29,f_$4_$29,howMuch_$32)[q_$0_$29,g_$33][perm$R]} ( DecPerm(m_$7_$29,o_$8_$29,f_$4_$29,howMuch_$32)[q_$0_$29,g_$33][perm$R] == ite((o_$8_$29 == q_$0_$29) && false,m_$7_$29[q_$0_$29,g_$33][perm$R] - howMuch_$32,m_$7_$29[q_$0_$29,g_$33][perm$R]) )))) && ((forall  m_$7_$30 : MaskType, o_$8_$30 : ref, f_$4_$30 : Field (Boolean) , howMuch_$33 : Integer, q_$0_$30 : ref, g_$34 : Field (Seq (Integer) )  :: {DecPerm(m_$7_$30,o_$8_$30,f_$4_$30,howMuch_$33)[q_$0_$30,g_$34][perm$R]} ( DecPerm(m_$7_$30,o_$8_$30,f_$4_$30,howMuch_$33)[q_$0_$30,g_$34][perm$R] == ite((o_$8_$30 == q_$0_$30) && false,m_$7_$30[q_$0_$30,g_$34][perm$R] - howMuch_$33,m_$7_$30[q_$0_$30,g_$34][perm$R]) )))) && ((forall  m_$7_$31 : MaskType, o_$8_$31 : ref, f_$4_$31 : Field (Integer) , howMuch_$34 : Integer, q_$0_$31 : ref, g_$35 : Field (Seq (Integer) )  :: {DecPerm(m_$7_$31,o_$8_$31,f_$4_$31,howMuch_$34)[q_$0_$31,g_$35][perm$R]} ( DecPerm(m_$7_$31,o_$8_$31,f_$4_$31,howMuch_$34)[q_$0_$31,g_$35][perm$R] == ite((o_$8_$31 == q_$0_$31) && false,m_$7_$31[q_$0_$31,g_$35][perm$R] - howMuch_$34,m_$7_$31[q_$0_$31,g_$35][perm$R]) )))) && ((forall  m_$7_$32 : MaskType, o_$8_$32 : ref, f_$4_$32 : Field (ref) , howMuch_$35 : Integer, q_$0_$32 : ref, g_$36 : Field (Seq (Integer) )  :: {DecPerm(m_$7_$32,o_$8_$32,f_$4_$32,howMuch_$35)[q_$0_$32,g_$36][perm$R]} ( DecPerm(m_$7_$32,o_$8_$32,f_$4_$32,howMuch_$35)[q_$0_$32,g_$36][perm$R] == ite((o_$8_$32 == q_$0_$32) && false,m_$7_$32[q_$0_$32,g_$36][perm$R] - howMuch_$35,m_$7_$32[q_$0_$32,g_$36][perm$R]) )))) && ((forall  m_$7_$33 : MaskType, o_$8_$33 : ref, f_$4_$33 : Field (HeapType) , howMuch_$36 : Integer, q_$0_$33 : ref, g_$37 : Field (Seq (Integer) )  :: {DecPerm(m_$7_$33,o_$8_$33,f_$4_$33,howMuch_$36)[q_$0_$33,g_$37][perm$R]} ( DecPerm(m_$7_$33,o_$8_$33,f_$4_$33,howMuch_$36)[q_$0_$33,g_$37][perm$R] == ite((o_$8_$33 == q_$0_$33) && false,m_$7_$33[q_$0_$33,g_$37][perm$R] - howMuch_$36,m_$7_$33[q_$0_$33,g_$37][perm$R]) )))) && ((forall  m_$7_$34 : MaskType, o_$8_$34 : ref, f_$4_$34 : Field (Mu) , howMuch_$37 : Integer, q_$0_$34 : ref, g_$38 : Field (Seq (Integer) )  :: {DecPerm(m_$7_$34,o_$8_$34,f_$4_$34,howMuch_$37)[q_$0_$34,g_$38][perm$R]} ( DecPerm(m_$7_$34,o_$8_$34,f_$4_$34,howMuch_$37)[q_$0_$34,g_$38][perm$R] == ite((o_$8_$34 == q_$0_$34) && false,m_$7_$34[q_$0_$34,g_$38][perm$R] - howMuch_$37,m_$7_$34[q_$0_$34,g_$38][perm$R]) )))) && ((forall  m_$7_$35 : MaskType, o_$8_$35 : ref, f_$4_$35 : Field (Seq (Integer) ) , howMuch_$38 : Integer, q_$0_$35 : ref, g_$39 : Field (Seq (Integer) )  :: {DecPerm(m_$7_$35,o_$8_$35,f_$4_$35,howMuch_$38)[q_$0_$35,g_$39][perm$R]} ( DecPerm(m_$7_$35,o_$8_$35,f_$4_$35,howMuch_$38)[q_$0_$35,g_$39][perm$R] == ite((o_$8_$35 == q_$0_$35) && (f_$4_$35 == g_$39),m_$7_$35[q_$0_$35,g_$39][perm$R] - howMuch_$38,m_$7_$35[q_$0_$35,g_$39][perm$R]) )));
	assume ((((((((((((((((((((((((((((((((((((forall  m_$9_$0 : MaskType, o_$10_$0 : ref, f_$6_$0 : Field (Boolean) , howMuch_$1_$0 : Integer, q_$2_$0 : ref, g_$1_$0 : Field (Boolean)  :: {IncPerm(m_$9_$0,o_$10_$0,f_$6_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R]} ( IncPerm(m_$9_$0,o_$10_$0,f_$6_$0,howMuch_$1_$0)[q_$2_$0,g_$1_$0][perm$R] == ite((o_$10_$0 == q_$2_$0) && (f_$6_$0 == g_$1_$0),m_$9_$0[q_$2_$0,g_$1_$0][perm$R] + howMuch_$1_$0,m_$9_$0[q_$2_$0,g_$1_$0][perm$R]) ))) && ((forall  m_$9_$1 : MaskType, o_$10_$1 : ref, f_$6_$1 : Field (Integer) , howMuch_$1_$1 : Integer, q_$2_$1 : ref, g_$1_$1 : Field (Boolean)  :: {IncPerm(m_$9_$1,o_$10_$1,f_$6_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R]} ( IncPerm(m_$9_$1,o_$10_$1,f_$6_$1,howMuch_$1_$1)[q_$2_$1,g_$1_$1][perm$R] == ite((o_$10_$1 == q_$2_$1) && false,m_$9_$1[q_$2_$1,g_$1_$1][perm$R] + howMuch_$1_$1,m_$9_$1[q_$2_$1,g_$1_$1][perm$R]) )))) && ((forall  m_$9_$2 : MaskType, o_$10_$2 : ref, f_$6_$2 : Field (ref) , howMuch_$1_$2 : Integer, q_$2_$2 : ref, g_$1_$2 : Field (Boolean)  :: {IncPerm(m_$9_$2,o_$10_$2,f_$6_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R]} ( IncPerm(m_$9_$2,o_$10_$2,f_$6_$2,howMuch_$1_$2)[q_$2_$2,g_$1_$2][perm$R] == ite((o_$10_$2 == q_$2_$2) && false,m_$9_$2[q_$2_$2,g_$1_$2][perm$R] + howMuch_$1_$2,m_$9_$2[q_$2_$2,g_$1_$2][perm$R]) )))) && ((forall  m_$9_$3 : MaskType, o_$10_$3 : ref, f_$6_$3 : Field (HeapType) , howMuch_$1_$3 : Integer, q_$2_$3 : ref, g_$1_$3 : Field (Boolean)  :: {IncPerm(m_$9_$3,o_$10_$3,f_$6_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R]} ( IncPerm(m_$9_$3,o_$10_$3,f_$6_$3,howMuch_$1_$3)[q_$2_$3,g_$1_$3][perm$R] == ite((o_$10_$3 == q_$2_$3) && false,m_$9_$3[q_$2_$3,g_$1_$3][perm$R] + howMuch_$1_$3,m_$9_$3[q_$2_$3,g_$1_$3][perm$R]) )))) && ((forall  m_$9_$4 : MaskType, o_$10_$4 : ref, f_$6_$4 : Field (Mu) , howMuch_$1_$4 : Integer, q_$2_$4 : ref, g_$1_$4 : Field (Boolean)  :: {IncPerm(m_$9_$4,o_$10_$4,f_$6_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R]} ( IncPerm(m_$9_$4,o_$10_$4,f_$6_$4,howMuch_$1_$4)[q_$2_$4,g_$1_$4][perm$R] == ite((o_$10_$4 == q_$2_$4) && false,m_$9_$4[q_$2_$4,g_$1_$4][perm$R] + howMuch_$1_$4,m_$9_$4[q_$2_$4,g_$1_$4][perm$R]) )))) && ((forall  m_$9_$5 : MaskType, o_$10_$5 : ref, f_$6_$5 : Field (Seq (Integer) ) , howMuch_$1_$5 : Integer, q_$2_$5 : ref, g_$1_$5 : Field (Boolean)  :: {IncPerm(m_$9_$5,o_$10_$5,f_$6_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R]} ( IncPerm(m_$9_$5,o_$10_$5,f_$6_$5,howMuch_$1_$5)[q_$2_$5,g_$1_$5][perm$R] == ite((o_$10_$5 == q_$2_$5) && false,m_$9_$5[q_$2_$5,g_$1_$5][perm$R] + howMuch_$1_$5,m_$9_$5[q_$2_$5,g_$1_$5][perm$R]) )))) && ((forall  m_$9_$6 : MaskType, o_$10_$6 : ref, f_$6_$6 : Field (Boolean) , howMuch_$1_$6 : Integer, q_$2_$6 : ref, g_$1_$6 : Field (Integer)  :: {IncPerm(m_$9_$6,o_$10_$6,f_$6_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R]} ( IncPerm(m_$9_$6,o_$10_$6,f_$6_$6,howMuch_$1_$6)[q_$2_$6,g_$1_$6][perm$R] == ite((o_$10_$6 == q_$2_$6) && false,m_$9_$6[q_$2_$6,g_$1_$6][perm$R] + howMuch_$1_$6,m_$9_$6[q_$2_$6,g_$1_$6][perm$R]) )))) && ((forall  m_$9_$7 : MaskType, o_$10_$7 : ref, f_$6_$7 : Field (Integer) , howMuch_$1_$7 : Integer, q_$2_$7 : ref, g_$1_$7 : Field (Integer)  :: {IncPerm(m_$9_$7,o_$10_$7,f_$6_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R]} ( IncPerm(m_$9_$7,o_$10_$7,f_$6_$7,howMuch_$1_$7)[q_$2_$7,g_$1_$7][perm$R] == ite((o_$10_$7 == q_$2_$7) && (f_$6_$7 == g_$1_$7),m_$9_$7[q_$2_$7,g_$1_$7][perm$R] + howMuch_$1_$7,m_$9_$7[q_$2_$7,g_$1_$7][perm$R]) )))) && ((forall  m_$9_$8 : MaskType, o_$10_$8 : ref, f_$6_$8 : Field (ref) , howMuch_$1_$8 : Integer, q_$2_$8 : ref, g_$1_$8 : Field (Integer)  :: {IncPerm(m_$9_$8,o_$10_$8,f_$6_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R]} ( IncPerm(m_$9_$8,o_$10_$8,f_$6_$8,howMuch_$1_$8)[q_$2_$8,g_$1_$8][perm$R] == ite((o_$10_$8 == q_$2_$8) && false,m_$9_$8[q_$2_$8,g_$1_$8][perm$R] + howMuch_$1_$8,m_$9_$8[q_$2_$8,g_$1_$8][perm$R]) )))) && ((forall  m_$9_$9 : MaskType, o_$10_$9 : ref, f_$6_$9 : Field (HeapType) , howMuch_$1_$9 : Integer, q_$2_$9 : ref, g_$1_$9 : Field (Integer)  :: {IncPerm(m_$9_$9,o_$10_$9,f_$6_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R]} ( IncPerm(m_$9_$9,o_$10_$9,f_$6_$9,howMuch_$1_$9)[q_$2_$9,g_$1_$9][perm$R] == ite((o_$10_$9 == q_$2_$9) && false,m_$9_$9[q_$2_$9,g_$1_$9][perm$R] + howMuch_$1_$9,m_$9_$9[q_$2_$9,g_$1_$9][perm$R]) )))) && ((forall  m_$9_$10 : MaskType, o_$10_$10 : ref, f_$6_$10 : Field (Mu) , howMuch_$1_$10 : Integer, q_$2_$10 : ref, g_$1_$10 : Field (Integer)  :: {IncPerm(m_$9_$10,o_$10_$10,f_$6_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R]} ( IncPerm(m_$9_$10,o_$10_$10,f_$6_$10,howMuch_$1_$10)[q_$2_$10,g_$1_$10][perm$R] == ite((o_$10_$10 == q_$2_$10) && false,m_$9_$10[q_$2_$10,g_$1_$10][perm$R] + howMuch_$1_$10,m_$9_$10[q_$2_$10,g_$1_$10][perm$R]) )))) && ((forall  m_$9_$11 : MaskType, o_$10_$11 : ref, f_$6_$11 : Field (Seq (Integer) ) , howMuch_$1_$11 : Integer, q_$2_$11 : ref, g_$1_$11 : Field (Integer)  :: {IncPerm(m_$9_$11,o_$10_$11,f_$6_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R]} ( IncPerm(m_$9_$11,o_$10_$11,f_$6_$11,howMuch_$1_$11)[q_$2_$11,g_$1_$11][perm$R] == ite((o_$10_$11 == q_$2_$11) && false,m_$9_$11[q_$2_$11,g_$1_$11][perm$R] + howMuch_$1_$11,m_$9_$11[q_$2_$11,g_$1_$11][perm$R]) )))) && ((forall  m_$9_$12 : MaskType, o_$10_$12 : ref, f_$6_$12 : Field (Boolean) , howMuch_$1_$12 : Integer, q_$2_$12 : ref, g_$1_$12 : Field (ref)  :: {IncPerm(m_$9_$12,o_$10_$12,f_$6_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R]} ( IncPerm(m_$9_$12,o_$10_$12,f_$6_$12,howMuch_$1_$12)[q_$2_$12,g_$1_$12][perm$R] == ite((o_$10_$12 == q_$2_$12) && false,m_$9_$12[q_$2_$12,g_$1_$12][perm$R] + howMuch_$1_$12,m_$9_$12[q_$2_$12,g_$1_$12][perm$R]) )))) && ((forall  m_$9_$13 : MaskType, o_$10_$13 : ref, f_$6_$13 : Field (Integer) , howMuch_$1_$13 : Integer, q_$2_$13 : ref, g_$1_$13 : Field (ref)  :: {IncPerm(m_$9_$13,o_$10_$13,f_$6_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R]} ( IncPerm(m_$9_$13,o_$10_$13,f_$6_$13,howMuch_$1_$13)[q_$2_$13,g_$1_$13][perm$R] == ite((o_$10_$13 == q_$2_$13) && false,m_$9_$13[q_$2_$13,g_$1_$13][perm$R] + howMuch_$1_$13,m_$9_$13[q_$2_$13,g_$1_$13][perm$R]) )))) && ((forall  m_$9_$14 : MaskType, o_$10_$14 : ref, f_$6_$14 : Field (ref) , howMuch_$1_$14 : Integer, q_$2_$14 : ref, g_$1_$14 : Field (ref)  :: {IncPerm(m_$9_$14,o_$10_$14,f_$6_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R]} ( IncPerm(m_$9_$14,o_$10_$14,f_$6_$14,howMuch_$1_$14)[q_$2_$14,g_$1_$14][perm$R] == ite((o_$10_$14 == q_$2_$14) && (f_$6_$14 == g_$1_$14),m_$9_$14[q_$2_$14,g_$1_$14][perm$R] + howMuch_$1_$14,m_$9_$14[q_$2_$14,g_$1_$14][perm$R]) )))) && ((forall  m_$9_$15 : MaskType, o_$10_$15 : ref, f_$6_$15 : Field (HeapType) , howMuch_$1_$15 : Integer, q_$2_$15 : ref, g_$1_$15 : Field (ref)  :: {IncPerm(m_$9_$15,o_$10_$15,f_$6_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R]} ( IncPerm(m_$9_$15,o_$10_$15,f_$6_$15,howMuch_$1_$15)[q_$2_$15,g_$1_$15][perm$R] == ite((o_$10_$15 == q_$2_$15) && false,m_$9_$15[q_$2_$15,g_$1_$15][perm$R] + howMuch_$1_$15,m_$9_$15[q_$2_$15,g_$1_$15][perm$R]) )))) && ((forall  m_$9_$16 : MaskType, o_$10_$16 : ref, f_$6_$16 : Field (Mu) , howMuch_$1_$16 : Integer, q_$2_$16 : ref, g_$1_$16 : Field (ref)  :: {IncPerm(m_$9_$16,o_$10_$16,f_$6_$16,howMuch_$1_$16)[q_$2_$16,g_$1_$16][perm$R]} ( IncPerm(m_$9_$16,o_$10_$16,f_$6_$16,howMuch_$1_$16)[q_$2_$16,g_$1_$16][perm$R] == ite((o_$10_$16 == q_$2_$16) && false,m_$9_$16[q_$2_$16,g_$1_$16][perm$R] + howMuch_$1_$16,m_$9_$16[q_$2_$16,g_$1_$16][perm$R]) )))) && ((forall  m_$9_$17 : MaskType, o_$10_$17 : ref, f_$6_$17 : Field (Seq (Integer) ) , howMuch_$1_$17 : Integer, q_$2_$17 : ref, g_$1_$17 : Field (ref)  :: {IncPerm(m_$9_$17,o_$10_$17,f_$6_$17,howMuch_$1_$17)[q_$2_$17,g_$1_$17][perm$R]} ( IncPerm(m_$9_$17,o_$10_$17,f_$6_$17,howMuch_$1_$17)[q_$2_$17,g_$1_$17][perm$R] == ite((o_$10_$17 == q_$2_$17) && false,m_$9_$17[q_$2_$17,g_$1_$17][perm$R] + howMuch_$1_$17,m_$9_$17[q_$2_$17,g_$1_$17][perm$R]) )))) && ((forall  m_$9_$18 : MaskType, o_$10_$18 : ref, f_$6_$18 : Field (Boolean) , howMuch_$1_$18 : Integer, q_$2_$18 : ref, g_$1_$18 : Field (HeapType)  :: {IncPerm(m_$9_$18,o_$10_$18,f_$6_$18,howMuch_$1_$18)[q_$2_$18,g_$1_$18][perm$R]} ( IncPerm(m_$9_$18,o_$10_$18,f_$6_$18,howMuch_$1_$18)[q_$2_$18,g_$1_$18][perm$R] == ite((o_$10_$18 == q_$2_$18) && false,m_$9_$18[q_$2_$18,g_$1_$18][perm$R] + howMuch_$1_$18,m_$9_$18[q_$2_$18,g_$1_$18][perm$R]) )))) && ((forall  m_$9_$19 : MaskType, o_$10_$19 : ref, f_$6_$19 : Field (Integer) , howMuch_$1_$19 : Integer, q_$2_$19 : ref, g_$1_$19 : Field (HeapType)  :: {IncPerm(m_$9_$19,o_$10_$19,f_$6_$19,howMuch_$1_$19)[q_$2_$19,g_$1_$19][perm$R]} ( IncPerm(m_$9_$19,o_$10_$19,f_$6_$19,howMuch_$1_$19)[q_$2_$19,g_$1_$19][perm$R] == ite((o_$10_$19 == q_$2_$19) && false,m_$9_$19[q_$2_$19,g_$1_$19][perm$R] + howMuch_$1_$19,m_$9_$19[q_$2_$19,g_$1_$19][perm$R]) )))) && ((forall  m_$9_$20 : MaskType, o_$10_$20 : ref, f_$6_$20 : Field (ref) , howMuch_$1_$20 : Integer, q_$2_$20 : ref, g_$1_$20 : Field (HeapType)  :: {IncPerm(m_$9_$20,o_$10_$20,f_$6_$20,howMuch_$1_$20)[q_$2_$20,g_$1_$20][perm$R]} ( IncPerm(m_$9_$20,o_$10_$20,f_$6_$20,howMuch_$1_$20)[q_$2_$20,g_$1_$20][perm$R] == ite((o_$10_$20 == q_$2_$20) && false,m_$9_$20[q_$2_$20,g_$1_$20][perm$R] + howMuch_$1_$20,m_$9_$20[q_$2_$20,g_$1_$20][perm$R]) )))) && ((forall  m_$9_$21 : MaskType, o_$10_$21 : ref, f_$6_$21 : Field (HeapType) , howMuch_$1_$21 : Integer, q_$2_$21 : ref, g_$1_$21 : Field (HeapType)  :: {IncPerm(m_$9_$21,o_$10_$21,f_$6_$21,howMuch_$1_$21)[q_$2_$21,g_$1_$21][perm$R]} ( IncPerm(m_$9_$21,o_$10_$21,f_$6_$21,howMuch_$1_$21)[q_$2_$21,g_$1_$21][perm$R] == ite((o_$10_$21 == q_$2_$21) && (f_$6_$21 == g_$1_$21),m_$9_$21[q_$2_$21,g_$1_$21][perm$R] + howMuch_$1_$21,m_$9_$21[q_$2_$21,g_$1_$21][perm$R]) )))) && ((forall  m_$9_$22 : MaskType, o_$10_$22 : ref, f_$6_$22 : Field (Mu) , howMuch_$1_$22 : Integer, q_$2_$22 : ref, g_$1_$22 : Field (HeapType)  :: {IncPerm(m_$9_$22,o_$10_$22,f_$6_$22,howMuch_$1_$22)[q_$2_$22,g_$1_$22][perm$R]} ( IncPerm(m_$9_$22,o_$10_$22,f_$6_$22,howMuch_$1_$22)[q_$2_$22,g_$1_$22][perm$R] == ite((o_$10_$22 == q_$2_$22) && false,m_$9_$22[q_$2_$22,g_$1_$22][perm$R] + howMuch_$1_$22,m_$9_$22[q_$2_$22,g_$1_$22][perm$R]) )))) && ((forall  m_$9_$23 : MaskType, o_$10_$23 : ref, f_$6_$23 : Field (Seq (Integer) ) , howMuch_$1_$23 : Integer, q_$2_$23 : ref, g_$1_$23 : Field (HeapType)  :: {IncPerm(m_$9_$23,o_$10_$23,f_$6_$23,howMuch_$1_$23)[q_$2_$23,g_$1_$23][perm$R]} ( IncPerm(m_$9_$23,o_$10_$23,f_$6_$23,howMuch_$1_$23)[q_$2_$23,g_$1_$23][perm$R] == ite((o_$10_$23 == q_$2_$23) && false,m_$9_$23[q_$2_$23,g_$1_$23][perm$R] + howMuch_$1_$23,m_$9_$23[q_$2_$23,g_$1_$23][perm$R]) )))) && ((forall  m_$9_$24 : MaskType, o_$10_$24 : ref, f_$6_$24 : Field (Boolean) , howMuch_$1_$24 : Integer, q_$2_$24 : ref, g_$1_$24 : Field (Mu)  :: {IncPerm(m_$9_$24,o_$10_$24,f_$6_$24,howMuch_$1_$24)[q_$2_$24,g_$1_$24][perm$R]} ( IncPerm(m_$9_$24,o_$10_$24,f_$6_$24,howMuch_$1_$24)[q_$2_$24,g_$1_$24][perm$R] == ite((o_$10_$24 == q_$2_$24) && false,m_$9_$24[q_$2_$24,g_$1_$24][perm$R] + howMuch_$1_$24,m_$9_$24[q_$2_$24,g_$1_$24][perm$R]) )))) && ((forall  m_$9_$25 : MaskType, o_$10_$25 : ref, f_$6_$25 : Field (Integer) , howMuch_$1_$25 : Integer, q_$2_$25 : ref, g_$1_$25 : Field (Mu)  :: {IncPerm(m_$9_$25,o_$10_$25,f_$6_$25,howMuch_$1_$25)[q_$2_$25,g_$1_$25][perm$R]} ( IncPerm(m_$9_$25,o_$10_$25,f_$6_$25,howMuch_$1_$25)[q_$2_$25,g_$1_$25][perm$R] == ite((o_$10_$25 == q_$2_$25) && false,m_$9_$25[q_$2_$25,g_$1_$25][perm$R] + howMuch_$1_$25,m_$9_$25[q_$2_$25,g_$1_$25][perm$R]) )))) && ((forall  m_$9_$26 : MaskType, o_$10_$26 : ref, f_$6_$26 : Field (ref) , howMuch_$1_$26 : Integer, q_$2_$26 : ref, g_$1_$26 : Field (Mu)  :: {IncPerm(m_$9_$26,o_$10_$26,f_$6_$26,howMuch_$1_$26)[q_$2_$26,g_$1_$26][perm$R]} ( IncPerm(m_$9_$26,o_$10_$26,f_$6_$26,howMuch_$1_$26)[q_$2_$26,g_$1_$26][perm$R] == ite((o_$10_$26 == q_$2_$26) && false,m_$9_$26[q_$2_$26,g_$1_$26][perm$R] + howMuch_$1_$26,m_$9_$26[q_$2_$26,g_$1_$26][perm$R]) )))) && ((forall  m_$9_$27 : MaskType, o_$10_$27 : ref, f_$6_$27 : Field (HeapType) , howMuch_$1_$27 : Integer, q_$2_$27 : ref, g_$1_$27 : Field (Mu)  :: {IncPerm(m_$9_$27,o_$10_$27,f_$6_$27,howMuch_$1_$27)[q_$2_$27,g_$1_$27][perm$R]} ( IncPerm(m_$9_$27,o_$10_$27,f_$6_$27,howMuch_$1_$27)[q_$2_$27,g_$1_$27][perm$R] == ite((o_$10_$27 == q_$2_$27) && false,m_$9_$27[q_$2_$27,g_$1_$27][perm$R] + howMuch_$1_$27,m_$9_$27[q_$2_$27,g_$1_$27][perm$R]) )))) && ((forall  m_$9_$28 : MaskType, o_$10_$28 : ref, f_$6_$28 : Field (Mu) , howMuch_$1_$28 : Integer, q_$2_$28 : ref, g_$1_$28 : Field (Mu)  :: {IncPerm(m_$9_$28,o_$10_$28,f_$6_$28,howMuch_$1_$28)[q_$2_$28,g_$1_$28][perm$R]} ( IncPerm(m_$9_$28,o_$10_$28,f_$6_$28,howMuch_$1_$28)[q_$2_$28,g_$1_$28][perm$R] == ite((o_$10_$28 == q_$2_$28) && (f_$6_$28 == g_$1_$28),m_$9_$28[q_$2_$28,g_$1_$28][perm$R] + howMuch_$1_$28,m_$9_$28[q_$2_$28,g_$1_$28][perm$R]) )))) && ((forall  m_$9_$29 : MaskType, o_$10_$29 : ref, f_$6_$29 : Field (Seq (Integer) ) , howMuch_$1_$29 : Integer, q_$2_$29 : ref, g_$1_$29 : Field (Mu)  :: {IncPerm(m_$9_$29,o_$10_$29,f_$6_$29,howMuch_$1_$29)[q_$2_$29,g_$1_$29][perm$R]} ( IncPerm(m_$9_$29,o_$10_$29,f_$6_$29,howMuch_$1_$29)[q_$2_$29,g_$1_$29][perm$R] == ite((o_$10_$29 == q_$2_$29) && false,m_$9_$29[q_$2_$29,g_$1_$29][perm$R] + howMuch_$1_$29,m_$9_$29[q_$2_$29,g_$1_$29][perm$R]) )))) && ((forall  m_$9_$30 : MaskType, o_$10_$30 : ref, f_$6_$30 : Field (Boolean) , howMuch_$1_$30 : Integer, q_$2_$30 : ref, g_$1_$30 : Field (Seq (Integer) )  :: {IncPerm(m_$9_$30,o_$10_$30,f_$6_$30,howMuch_$1_$30)[q_$2_$30,g_$1_$30][perm$R]} ( IncPerm(m_$9_$30,o_$10_$30,f_$6_$30,howMuch_$1_$30)[q_$2_$30,g_$1_$30][perm$R] == ite((o_$10_$30 == q_$2_$30) && false,m_$9_$30[q_$2_$30,g_$1_$30][perm$R] + howMuch_$1_$30,m_$9_$30[q_$2_$30,g_$1_$30][perm$R]) )))) && ((forall  m_$9_$31 : MaskType, o_$10_$31 : ref, f_$6_$31 : Field (Integer) , howMuch_$1_$31 : Integer, q_$2_$31 : ref, g_$1_$31 : Field (Seq (Integer) )  :: {IncPerm(m_$9_$31,o_$10_$31,f_$6_$31,howMuch_$1_$31)[q_$2_$31,g_$1_$31][perm$R]} ( IncPerm(m_$9_$31,o_$10_$31,f_$6_$31,howMuch_$1_$31)[q_$2_$31,g_$1_$31][perm$R] == ite((o_$10_$31 == q_$2_$31) && false,m_$9_$31[q_$2_$31,g_$1_$31][perm$R] + howMuch_$1_$31,m_$9_$31[q_$2_$31,g_$1_$31][perm$R]) )))) && ((forall  m_$9_$32 : MaskType, o_$10_$32 : ref, f_$6_$32 : Field (ref) , howMuch_$1_$32 : Integer, q_$2_$32 : ref, g_$1_$32 : Field (Seq (Integer) )  :: {IncPerm(m_$9_$32,o_$10_$32,f_$6_$32,howMuch_$1_$32)[q_$2_$32,g_$1_$32][perm$R]} ( IncPerm(m_$9_$32,o_$10_$32,f_$6_$32,howMuch_$1_$32)[q_$2_$32,g_$1_$32][perm$R] == ite((o_$10_$32 == q_$2_$32) && false,m_$9_$32[q_$2_$32,g_$1_$32][perm$R] + howMuch_$1_$32,m_$9_$32[q_$2_$32,g_$1_$32][perm$R]) )))) && ((forall  m_$9_$33 : MaskType, o_$10_$33 : ref, f_$6_$33 : Field (HeapType) , howMuch_$1_$33 : Integer, q_$2_$33 : ref, g_$1_$33 : Field (Seq (Integer) )  :: {IncPerm(m_$9_$33,o_$10_$33,f_$6_$33,howMuch_$1_$33)[q_$2_$33,g_$1_$33][perm$R]} ( IncPerm(m_$9_$33,o_$10_$33,f_$6_$33,howMuch_$1_$33)[q_$2_$33,g_$1_$33][perm$R] == ite((o_$10_$33 == q_$2_$33) && false,m_$9_$33[q_$2_$33,g_$1_$33][perm$R] + howMuch_$1_$33,m_$9_$33[q_$2_$33,g_$1_$33][perm$R]) )))) && ((forall  m_$9_$34 : MaskType, o_$10_$34 : ref, f_$6_$34 : Field (Mu) , howMuch_$1_$34 : Integer, q_$2_$34 : ref, g_$1_$34 : Field (Seq (Integer) )  :: {IncPerm(m_$9_$34,o_$10_$34,f_$6_$34,howMuch_$1_$34)[q_$2_$34,g_$1_$34][perm$R]} ( IncPerm(m_$9_$34,o_$10_$34,f_$6_$34,howMuch_$1_$34)[q_$2_$34,g_$1_$34][perm$R] == ite((o_$10_$34 == q_$2_$34) && false,m_$9_$34[q_$2_$34,g_$1_$34][perm$R] + howMuch_$1_$34,m_$9_$34[q_$2_$34,g_$1_$34][perm$R]) )))) && ((forall  m_$9_$35 : MaskType, o_$10_$35 : ref, f_$6_$35 : Field (Seq (Integer) ) , howMuch_$1_$35 : Integer, q_$2_$35 : ref, g_$1_$35 : Field (Seq (Integer) )  :: {IncPerm(m_$9_$35,o_$10_$35,f_$6_$35,howMuch_$1_$35)[q_$2_$35,g_$1_$35][perm$R]} ( IncPerm(m_$9_$35,o_$10_$35,f_$6_$35,howMuch_$1_$35)[q_$2_$35,g_$1_$35][perm$R] == ite((o_$10_$35 == q_$2_$35) && (f_$6_$35 == g_$1_$35),m_$9_$35[q_$2_$35,g_$1_$35][perm$R] + howMuch_$1_$35,m_$9_$35[q_$2_$35,g_$1_$35][perm$R]) )));
	assume (forall  o_$14 : ref :: ( ZeroCredits[o_$14] == 0 ));
	assume ((((((forall  f_$10_$0 : Field (Boolean)  :: ( NonPredicateField(f_$10_$0) ==> (!PredicateField(f_$10_$0)) ))) && ((forall  f_$10_$1 : Field (Integer)  :: ( NonPredicateField(f_$10_$1) ==> (!PredicateField(f_$10_$1)) )))) && ((forall  f_$10_$2 : Field (ref)  :: ( NonPredicateField(f_$10_$2) ==> (!PredicateField(f_$10_$2)) )))) && ((forall  f_$10_$3 : Field (HeapType)  :: ( NonPredicateField(f_$10_$3) ==> (!PredicateField(f_$10_$3)) )))) && ((forall  f_$10_$4 : Field (Mu)  :: ( NonPredicateField(f_$10_$4) ==> (!PredicateField(f_$10_$4)) )))) && ((forall  f_$10_$5 : Field (Seq (Integer) )  :: ( NonPredicateField(f_$10_$5) ==> (!PredicateField(f_$10_$5)) )));
	assume ((((((forall  f_$11_$0 : Field (Boolean)  :: ( PredicateField(f_$11_$0) ==> (!NonPredicateField(f_$11_$0)) ))) && ((forall  f_$11_$1 : Field (Integer)  :: ( PredicateField(f_$11_$1) ==> (!NonPredicateField(f_$11_$1)) )))) && ((forall  f_$11_$2 : Field (ref)  :: ( PredicateField(f_$11_$2) ==> (!NonPredicateField(f_$11_$2)) )))) && ((forall  f_$11_$3 : Field (HeapType)  :: ( PredicateField(f_$11_$3) ==> (!NonPredicateField(f_$11_$3)) )))) && ((forall  f_$11_$4 : Field (Mu)  :: ( PredicateField(f_$11_$4) ==> (!NonPredicateField(f_$11_$4)) )))) && ((forall  f_$11_$5 : Field (Seq (Integer) )  :: ( PredicateField(f_$11_$5) ==> (!NonPredicateField(f_$11_$5)) )));
	assume ((((((((((((((((((forall  con_$1 : Boolean, a_$0_$0 : Boolean, b_$0_$0 : Boolean :: {ite(con_$1,a_$0_$0,b_$0_$0)} ( con_$1 ==> (ite(con_$1,a_$0_$0,b_$0_$0) == a_$0_$0) ))) && ((forall  con_$2 : Boolean, a_$0_$1 : Integer, b_$0_$1 : Integer :: {ite(con_$2,a_$0_$1,b_$0_$1)} ( con_$2 ==> (ite(con_$2,a_$0_$1,b_$0_$1) == a_$0_$1) )))) && ((forall  con_$3 : Boolean, a_$0_$2 : [PermissionComponent]Integer, b_$0_$2 : [PermissionComponent]Integer :: {ite(con_$3,a_$0_$2,b_$0_$2)} ( con_$3 ==> (ite(con_$3,a_$0_$2,b_$0_$2) == a_$0_$2) )))) && ((forall  con_$4 : Boolean, a_$0_$3 : PermissionComponent, b_$0_$3 : PermissionComponent :: {ite(con_$4,a_$0_$3,b_$0_$3)} ( con_$4 ==> (ite(con_$4,a_$0_$3,b_$0_$3) == a_$0_$3) )))) && ((forall  con_$5 : Boolean, a_$0_$4 : MaskType, b_$0_$4 : MaskType :: {ite(con_$5,a_$0_$4,b_$0_$4)} ( con_$5 ==> (ite(con_$5,a_$0_$4,b_$0_$4) == a_$0_$4) )))) && ((forall  con_$6 : Boolean, a_$0_$5 : ref, b_$0_$5 : ref :: {ite(con_$6,a_$0_$5,b_$0_$5)} ( con_$6 ==> (ite(con_$6,a_$0_$5,b_$0_$5) == a_$0_$5) )))) && ((forall  con_$7 : Boolean, a_$0_$6 : Field (Integer) , b_$0_$6 : Field (Integer)  :: {ite(con_$7,a_$0_$6,b_$0_$6)} ( con_$7 ==> (ite(con_$7,a_$0_$6,b_$0_$6) == a_$0_$6) )))) && ((forall  con_$8 : Boolean, a_$0_$7 : HeapType, b_$0_$7 : HeapType :: {ite(con_$8,a_$0_$7,b_$0_$7)} ( con_$8 ==> (ite(con_$8,a_$0_$7,b_$0_$7) == a_$0_$7) )))) && ((forall  con_$9 : Boolean, a_$0_$8 : Field (Mu) , b_$0_$8 : Field (Mu)  :: {ite(con_$9,a_$0_$8,b_$0_$8)} ( con_$9 ==> (ite(con_$9,a_$0_$8,b_$0_$8) == a_$0_$8) )))) && ((forall  con_$10 : Boolean, a_$0_$9 : Mu, b_$0_$9 : Mu :: {ite(con_$10,a_$0_$9,b_$0_$9)} ( con_$10 ==> (ite(con_$10,a_$0_$9,b_$0_$9) == a_$0_$9) )))) && ((forall  con_$11 : Boolean, a_$0_$10 : Field (Boolean) , b_$0_$10 : Field (Boolean)  :: {ite(con_$11,a_$0_$10,b_$0_$10)} ( con_$11 ==> (ite(con_$11,a_$0_$10,b_$0_$10) == a_$0_$10) )))) && ((forall  con_$12 : Boolean, a_$0_$11 : CreditsType, b_$0_$11 : CreditsType :: {ite(con_$12,a_$0_$11,b_$0_$11)} ( con_$12 ==> (ite(con_$12,a_$0_$11,b_$0_$11) == a_$0_$11) )))) && ((forall  con_$13 : Boolean, a_$0_$12 : Seq (ref) , b_$0_$12 : Seq (ref)  :: {ite(con_$13,a_$0_$12,b_$0_$12)} ( con_$13 ==> (ite(con_$13,a_$0_$12,b_$0_$12) == a_$0_$12) )))) && ((forall  con_$14 : Boolean, a_$0_$13 : Seq (Integer) , b_$0_$13 : Seq (Integer)  :: {ite(con_$14,a_$0_$13,b_$0_$13)} ( con_$14 ==> (ite(con_$14,a_$0_$13,b_$0_$13) == a_$0_$13) )))) && ((forall  con_$15 : Boolean, a_$0_$14 : Field (ref) , b_$0_$14 : Field (ref)  :: {ite(con_$15,a_$0_$14,b_$0_$14)} ( con_$15 ==> (ite(con_$15,a_$0_$14,b_$0_$14) == a_$0_$14) )))) && ((forall  con_$16 : Boolean, a_$0_$15 : Field (Seq (Integer) ) , b_$0_$15 : Field (Seq (Integer) )  :: {ite(con_$16,a_$0_$15,b_$0_$15)} ( con_$16 ==> (ite(con_$16,a_$0_$15,b_$0_$15) == a_$0_$15) )))) && ((forall  con_$17 : Boolean, a_$0_$16 : Field (HeapType) , b_$0_$16 : Field (HeapType)  :: {ite(con_$17,a_$0_$16,b_$0_$16)} ( con_$17 ==> (ite(con_$17,a_$0_$16,b_$0_$16) == a_$0_$16) )))) && ((forall  con_$18 : Boolean, a_$0_$17 : TypeName, b_$0_$17 : TypeName :: {ite(con_$18,a_$0_$17,b_$0_$17)} ( con_$18 ==> (ite(con_$18,a_$0_$17,b_$0_$17) == a_$0_$17) )));
	assume ((((((((((((((((((forall  con_$0_$0 : Boolean, a_$1_$0 : Boolean, b_$1_$0 : Boolean :: {ite(con_$0_$0,a_$1_$0,b_$1_$0)} ( (!con_$0_$0) ==> (ite(con_$0_$0,a_$1_$0,b_$1_$0) == b_$1_$0) ))) && ((forall  con_$0_$1 : Boolean, a_$1_$1 : Integer, b_$1_$1 : Integer :: {ite(con_$0_$1,a_$1_$1,b_$1_$1)} ( (!con_$0_$1) ==> (ite(con_$0_$1,a_$1_$1,b_$1_$1) == b_$1_$1) )))) && ((forall  con_$0_$2 : Boolean, a_$1_$2 : [PermissionComponent]Integer, b_$1_$2 : [PermissionComponent]Integer :: {ite(con_$0_$2,a_$1_$2,b_$1_$2)} ( (!con_$0_$2) ==> (ite(con_$0_$2,a_$1_$2,b_$1_$2) == b_$1_$2) )))) && ((forall  con_$0_$3 : Boolean, a_$1_$3 : PermissionComponent, b_$1_$3 : PermissionComponent :: {ite(con_$0_$3,a_$1_$3,b_$1_$3)} ( (!con_$0_$3) ==> (ite(con_$0_$3,a_$1_$3,b_$1_$3) == b_$1_$3) )))) && ((forall  con_$0_$4 : Boolean, a_$1_$4 : MaskType, b_$1_$4 : MaskType :: {ite(con_$0_$4,a_$1_$4,b_$1_$4)} ( (!con_$0_$4) ==> (ite(con_$0_$4,a_$1_$4,b_$1_$4) == b_$1_$4) )))) && ((forall  con_$0_$5 : Boolean, a_$1_$5 : ref, b_$1_$5 : ref :: {ite(con_$0_$5,a_$1_$5,b_$1_$5)} ( (!con_$0_$5) ==> (ite(con_$0_$5,a_$1_$5,b_$1_$5) == b_$1_$5) )))) && ((forall  con_$0_$6 : Boolean, a_$1_$6 : Field (Integer) , b_$1_$6 : Field (Integer)  :: {ite(con_$0_$6,a_$1_$6,b_$1_$6)} ( (!con_$0_$6) ==> (ite(con_$0_$6,a_$1_$6,b_$1_$6) == b_$1_$6) )))) && ((forall  con_$0_$7 : Boolean, a_$1_$7 : HeapType, b_$1_$7 : HeapType :: {ite(con_$0_$7,a_$1_$7,b_$1_$7)} ( (!con_$0_$7) ==> (ite(con_$0_$7,a_$1_$7,b_$1_$7) == b_$1_$7) )))) && ((forall  con_$0_$8 : Boolean, a_$1_$8 : Field (Mu) , b_$1_$8 : Field (Mu)  :: {ite(con_$0_$8,a_$1_$8,b_$1_$8)} ( (!con_$0_$8) ==> (ite(con_$0_$8,a_$1_$8,b_$1_$8) == b_$1_$8) )))) && ((forall  con_$0_$9 : Boolean, a_$1_$9 : Mu, b_$1_$9 : Mu :: {ite(con_$0_$9,a_$1_$9,b_$1_$9)} ( (!con_$0_$9) ==> (ite(con_$0_$9,a_$1_$9,b_$1_$9) == b_$1_$9) )))) && ((forall  con_$0_$10 : Boolean, a_$1_$10 : Field (Boolean) , b_$1_$10 : Field (Boolean)  :: {ite(con_$0_$10,a_$1_$10,b_$1_$10)} ( (!con_$0_$10) ==> (ite(con_$0_$10,a_$1_$10,b_$1_$10) == b_$1_$10) )))) && ((forall  con_$0_$11 : Boolean, a_$1_$11 : CreditsType, b_$1_$11 : CreditsType :: {ite(con_$0_$11,a_$1_$11,b_$1_$11)} ( (!con_$0_$11) ==> (ite(con_$0_$11,a_$1_$11,b_$1_$11) == b_$1_$11) )))) && ((forall  con_$0_$12 : Boolean, a_$1_$12 : Seq (ref) , b_$1_$12 : Seq (ref)  :: {ite(con_$0_$12,a_$1_$12,b_$1_$12)} ( (!con_$0_$12) ==> (ite(con_$0_$12,a_$1_$12,b_$1_$12) == b_$1_$12) )))) && ((forall  con_$0_$13 : Boolean, a_$1_$13 : Seq (Integer) , b_$1_$13 : Seq (Integer)  :: {ite(con_$0_$13,a_$1_$13,b_$1_$13)} ( (!con_$0_$13) ==> (ite(con_$0_$13,a_$1_$13,b_$1_$13) == b_$1_$13) )))) && ((forall  con_$0_$14 : Boolean, a_$1_$14 : Field (ref) , b_$1_$14 : Field (ref)  :: {ite(con_$0_$14,a_$1_$14,b_$1_$14)} ( (!con_$0_$14) ==> (ite(con_$0_$14,a_$1_$14,b_$1_$14) == b_$1_$14) )))) && ((forall  con_$0_$15 : Boolean, a_$1_$15 : Field (Seq (Integer) ) , b_$1_$15 : Field (Seq (Integer) )  :: {ite(con_$0_$15,a_$1_$15,b_$1_$15)} ( (!con_$0_$15) ==> (ite(con_$0_$15,a_$1_$15,b_$1_$15) == b_$1_$15) )))) && ((forall  con_$0_$16 : Boolean, a_$1_$16 : Field (HeapType) , b_$1_$16 : Field (HeapType)  :: {ite(con_$0_$16,a_$1_$16,b_$1_$16)} ( (!con_$0_$16) ==> (ite(con_$0_$16,a_$1_$16,b_$1_$16) == b_$1_$16) )))) && ((forall  con_$0_$17 : Boolean, a_$1_$17 : TypeName, b_$1_$17 : TypeName :: {ite(con_$0_$17,a_$1_$17,b_$1_$17)} ( (!con_$0_$17) ==> (ite(con_$0_$17,a_$1_$17,b_$1_$17) == b_$1_$17) )));
	assume (forall  x_$0 : Integer, y_$0 : Integer :: {x_$0 mod y_$0} {x_$0 div y_$0} ( (x_$0 mod y_$0) == (x_$0 - ((x_$0 div y_$0) * y_$0)) ));
	assume (forall  x_$1 : Integer, y_$1 : Integer :: {x_$1 mod y_$1} ( (0 < y_$1) ==> ((0 <= (x_$1 mod y_$1)) && ((x_$1 mod y_$1) < y_$1)) ));
	assume (forall  x_$2 : Integer, y_$2 : Integer :: {x_$2 mod y_$2} ( (y_$2 < 0) ==> ((y_$2 < (x_$2 mod y_$2)) && ((x_$2 mod y_$2) <= 0)) ));
	assume (forall  a_$2 : Integer, b_$2 : Integer, d : Integer :: {a_$2 mod d,b_$2 mod d} ( (((2 <= d) && ((a_$2 mod d) == (b_$2 mod d))) && (a_$2 < b_$2)) ==> ((a_$2 + d) <= b_$2) ));
	assume ((forall  s_$12 : Seq (Integer)  :: {Seq#Length(s_$12)} ( 0 <= Seq#Length(s_$12) ))) && ((forall  s_$13 : Seq (ref)  :: {Seq#Length(s_$13)} ( 0 <= Seq#Length(s_$13) )));
	assume (Seq#Length((Seq#Empty() : Seq (Integer) )) == 0) && (Seq#Length((Seq#Empty() : Seq (ref) )) == 0);
	assume ((forall  s_$0_$0 : Seq (Integer)  :: {Seq#Length(s_$0_$0)} ( (Seq#Length(s_$0_$0) == 0) ==> (s_$0_$0 == (Seq#Empty() : Seq (Integer) )) ))) && ((forall  s_$0_$1 : Seq (ref)  :: {Seq#Length(s_$0_$1)} ( (Seq#Length(s_$0_$1) == 0) ==> (s_$0_$1 == (Seq#Empty() : Seq (ref) )) )));
	assume ((forall  t_$2 : Integer :: {Seq#Length(Seq#Singleton(t_$2))} ( Seq#Length(Seq#Singleton(t_$2)) == 1 ))) && ((forall  t_$3 : ref :: {Seq#Length(Seq#Singleton(t_$3))} ( Seq#Length(Seq#Singleton(t_$3)) == 1 )));
	assume ((forall  s_$1_$0 : Seq (Integer) , i_$5 : Integer, v_$2 : Integer, len_$2 : Integer :: {Seq#Length(Seq#Build(s_$1_$0,i_$5,v_$2,len_$2))} ( (0 <= len_$2) ==> (Seq#Length(Seq#Build(s_$1_$0,i_$5,v_$2,len_$2)) == len_$2) ))) && ((forall  s_$1_$1 : Seq (ref) , i_$6 : Integer, v_$3 : ref, len_$3 : Integer :: {Seq#Length(Seq#Build(s_$1_$1,i_$6,v_$3,len_$3))} ( (0 <= len_$3) ==> (Seq#Length(Seq#Build(s_$1_$1,i_$6,v_$3,len_$3)) == len_$3) )));
	assume ((forall  s0_$4 : Seq (Integer) , s1_$4 : Seq (Integer)  :: {Seq#Length(Seq#Append(s0_$4,s1_$4))} ( Seq#Length(Seq#Append(s0_$4,s1_$4)) == (Seq#Length(s0_$4) + Seq#Length(s1_$4)) ))) && ((forall  s0_$5 : Seq (ref) , s1_$5 : Seq (ref)  :: {Seq#Length(Seq#Append(s0_$5,s1_$5))} ( Seq#Length(Seq#Append(s0_$5,s1_$5)) == (Seq#Length(s0_$5) + Seq#Length(s1_$5)) )));
	assume ((forall  t_$0_$0 : Integer :: {Seq#Index(Seq#Singleton(t_$0_$0),0)} ( Seq#Index(Seq#Singleton(t_$0_$0),0) == t_$0_$0 ))) && ((forall  t_$0_$1 : ref :: {Seq#Index(Seq#Singleton(t_$0_$1),0)} ( Seq#Index(Seq#Singleton(t_$0_$1),0) == t_$0_$1 )));
	assume ((forall  s0_$0_$0 : Seq (Integer) , s1_$0_$0 : Seq (Integer) , n_$3_$0 : Integer :: {Seq#Index(Seq#Append(s0_$0_$0,s1_$0_$0),n_$3_$0)} ( ((n_$3_$0 < Seq#Length(s0_$0_$0)) ==> (Seq#Index(Seq#Append(s0_$0_$0,s1_$0_$0),n_$3_$0) == Seq#Index(s0_$0_$0,n_$3_$0))) && ((Seq#Length(s0_$0_$0) <= n_$3_$0) ==> (Seq#Index(Seq#Append(s0_$0_$0,s1_$0_$0),n_$3_$0) == Seq#Index(s1_$0_$0,n_$3_$0 - Seq#Length(s0_$0_$0)))) ))) && ((forall  s0_$0_$1 : Seq (ref) , s1_$0_$1 : Seq (ref) , n_$3_$1 : Integer :: {Seq#Index(Seq#Append(s0_$0_$1,s1_$0_$1),n_$3_$1)} ( ((n_$3_$1 < Seq#Length(s0_$0_$1)) ==> (Seq#Index(Seq#Append(s0_$0_$1,s1_$0_$1),n_$3_$1) == Seq#Index(s0_$0_$1,n_$3_$1))) && ((Seq#Length(s0_$0_$1) <= n_$3_$1) ==> (Seq#Index(Seq#Append(s0_$0_$1,s1_$0_$1),n_$3_$1) == Seq#Index(s1_$0_$1,n_$3_$1 - Seq#Length(s0_$0_$1)))) )));
	assume ((forall  s_$2_$0 : Seq (Integer) , i_$0_$0 : Integer, v_$0_$0 : Integer, len_$0_$0 : Integer, n_$4_$0 : Integer :: {Seq#Index(Seq#Build(s_$2_$0,i_$0_$0,v_$0_$0,len_$0_$0),n_$4_$0)} ( ((0 <= n_$4_$0) && (n_$4_$0 < len_$0_$0)) ==> (((i_$0_$0 == n_$4_$0) ==> (Seq#Index(Seq#Build(s_$2_$0,i_$0_$0,v_$0_$0,len_$0_$0),n_$4_$0) == v_$0_$0)) && ((!(i_$0_$0 == n_$4_$0)) ==> (Seq#Index(Seq#Build(s_$2_$0,i_$0_$0,v_$0_$0,len_$0_$0),n_$4_$0) == Seq#Index(s_$2_$0,n_$4_$0)))) ))) && ((forall  s_$2_$1 : Seq (ref) , i_$0_$1 : Integer, v_$0_$1 : ref, len_$0_$1 : Integer, n_$4_$1 : Integer :: {Seq#Index(Seq#Build(s_$2_$1,i_$0_$1,v_$0_$1,len_$0_$1),n_$4_$1)} ( ((0 <= n_$4_$1) && (n_$4_$1 < len_$0_$1)) ==> (((i_$0_$1 == n_$4_$1) ==> (Seq#Index(Seq#Build(s_$2_$1,i_$0_$1,v_$0_$1,len_$0_$1),n_$4_$1) == v_$0_$1)) && ((!(i_$0_$1 == n_$4_$1)) ==> (Seq#Index(Seq#Build(s_$2_$1,i_$0_$1,v_$0_$1,len_$0_$1),n_$4_$1) == Seq#Index(s_$2_$1,n_$4_$1)))) )));
	assume ((forall  s_$3_$0 : Seq (Integer) , x_$3_$0 : Integer :: {Seq#Contains(s_$3_$0,x_$3_$0)} ( Seq#Contains(s_$3_$0,x_$3_$0) <==> ((exists  i_$1_$1 : Integer :: {Seq#Index(s_$3_$0,i_$1_$1)} ( ((0 <= i_$1_$1) && (i_$1_$1 < Seq#Length(s_$3_$0))) && (Seq#Index(s_$3_$0,i_$1_$1) == x_$3_$0) ))) ))) && ((forall  s_$3_$1 : Seq (ref) , x_$3_$1 : ref :: {Seq#Contains(s_$3_$1,x_$3_$1)} ( Seq#Contains(s_$3_$1,x_$3_$1) <==> ((exists  i_$1_$3 : Integer :: {Seq#Index(s_$3_$1,i_$1_$3)} ( ((0 <= i_$1_$3) && (i_$1_$3 < Seq#Length(s_$3_$1))) && (Seq#Index(s_$3_$1,i_$1_$3) == x_$3_$1) ))) )));
	assume (forall  x_$4 : ref :: {Seq#Contains((Seq#Empty() : Seq (ref) ),x_$4)} ( !Seq#Contains((Seq#Empty() : Seq (ref) ),x_$4) ));
	assume ((forall  s0_$1_$0 : Seq (Integer) , s1_$1_$0 : Seq (Integer) , x_$5_$0 : Integer :: {Seq#Contains(Seq#Append(s0_$1_$0,s1_$1_$0),x_$5_$0)} ( Seq#Contains(Seq#Append(s0_$1_$0,s1_$1_$0),x_$5_$0) <==> (Seq#Contains(s0_$1_$0,x_$5_$0) || Seq#Contains(s1_$1_$0,x_$5_$0)) ))) && ((forall  s0_$1_$1 : Seq (ref) , s1_$1_$1 : Seq (ref) , x_$5_$1 : ref :: {Seq#Contains(Seq#Append(s0_$1_$1,s1_$1_$1),x_$5_$1)} ( Seq#Contains(Seq#Append(s0_$1_$1,s1_$1_$1),x_$5_$1) <==> (Seq#Contains(s0_$1_$1,x_$5_$1) || Seq#Contains(s1_$1_$1,x_$5_$1)) )));
	assume ((forall  s_$4_$0 : Seq (Integer) , i_$2_$0 : Integer, v_$1_$0 : Integer, len_$1_$0 : Integer, x_$6_$0 : Integer :: {Seq#Contains(Seq#Build(s_$4_$0,i_$2_$0,v_$1_$0,len_$1_$0),x_$6_$0)} ( Seq#Contains(Seq#Build(s_$4_$0,i_$2_$0,v_$1_$0,len_$1_$0),x_$6_$0) <==> ((((0 <= i_$2_$0) && (i_$2_$0 < len_$1_$0)) && (x_$6_$0 == v_$1_$0)) || ((exists  j_$6 : Integer :: {Seq#Index(s_$4_$0,j_$6)} ( ((((0 <= j_$6) && (j_$6 < Seq#Length(s_$4_$0))) && (j_$6 < len_$1_$0)) && (!(j_$6 == i_$2_$0))) && (Seq#Index(s_$4_$0,j_$6) == x_$6_$0) )))) ))) && ((forall  s_$4_$1 : Seq (ref) , i_$2_$1 : Integer, v_$1_$1 : ref, len_$1_$1 : Integer, x_$6_$1 : ref :: {Seq#Contains(Seq#Build(s_$4_$1,i_$2_$1,v_$1_$1,len_$1_$1),x_$6_$1)} ( Seq#Contains(Seq#Build(s_$4_$1,i_$2_$1,v_$1_$1,len_$1_$1),x_$6_$1) <==> ((((0 <= i_$2_$1) && (i_$2_$1 < len_$1_$1)) && (x_$6_$1 == v_$1_$1)) || ((exists  j_$8 : Integer :: {Seq#Index(s_$4_$1,j_$8)} ( ((((0 <= j_$8) && (j_$8 < Seq#Length(s_$4_$1))) && (j_$8 < len_$1_$1)) && (!(j_$8 == i_$2_$1))) && (Seq#Index(s_$4_$1,j_$8) == x_$6_$1) )))) )));
	assume ((forall  s_$5_$0 : Seq (Integer) , n_$5_$0 : Integer, x_$7_$0 : Integer :: {Seq#Contains(Seq#Take(s_$5_$0,n_$5_$0),x_$7_$0)} ( Seq#Contains(Seq#Take(s_$5_$0,n_$5_$0),x_$7_$0) <==> ((exists  i_$3_$1 : Integer :: {Seq#Index(s_$5_$0,i_$3_$1)} ( (((0 <= i_$3_$1) && (i_$3_$1 < n_$5_$0)) && (i_$3_$1 < Seq#Length(s_$5_$0))) && (Seq#Index(s_$5_$0,i_$3_$1) == x_$7_$0) ))) ))) && ((forall  s_$5_$1 : Seq (ref) , n_$5_$1 : Integer, x_$7_$1 : ref :: {Seq#Contains(Seq#Take(s_$5_$1,n_$5_$1),x_$7_$1)} ( Seq#Contains(Seq#Take(s_$5_$1,n_$5_$1),x_$7_$1) <==> ((exists  i_$3_$3 : Integer :: {Seq#Index(s_$5_$1,i_$3_$3)} ( (((0 <= i_$3_$3) && (i_$3_$3 < n_$5_$1)) && (i_$3_$3 < Seq#Length(s_$5_$1))) && (Seq#Index(s_$5_$1,i_$3_$3) == x_$7_$1) ))) )));
	assume ((forall  s_$6_$0 : Seq (Integer) , n_$6_$0 : Integer, x_$8_$0 : Integer :: {Seq#Contains(Seq#Drop(s_$6_$0,n_$6_$0),x_$8_$0)} ( Seq#Contains(Seq#Drop(s_$6_$0,n_$6_$0),x_$8_$0) <==> ((exists  i_$4_$1 : Integer :: {Seq#Index(s_$6_$0,i_$4_$1)} ( (((0 <= n_$6_$0) && (n_$6_$0 <= i_$4_$1)) && (i_$4_$1 < Seq#Length(s_$6_$0))) && (Seq#Index(s_$6_$0,i_$4_$1) == x_$8_$0) ))) ))) && ((forall  s_$6_$1 : Seq (ref) , n_$6_$1 : Integer, x_$8_$1 : ref :: {Seq#Contains(Seq#Drop(s_$6_$1,n_$6_$1),x_$8_$1)} ( Seq#Contains(Seq#Drop(s_$6_$1,n_$6_$1),x_$8_$1) <==> ((exists  i_$4_$3 : Integer :: {Seq#Index(s_$6_$1,i_$4_$3)} ( (((0 <= n_$6_$1) && (n_$6_$1 <= i_$4_$3)) && (i_$4_$3 < Seq#Length(s_$6_$1))) && (Seq#Index(s_$6_$1,i_$4_$3) == x_$8_$1) ))) )));
	assume ((forall  s0_$2_$0 : Seq (Integer) , s1_$2_$0 : Seq (Integer)  :: {Seq#Equal(s0_$2_$0,s1_$2_$0)} ( Seq#Equal(s0_$2_$0,s1_$2_$0) <==> ((Seq#Length(s0_$2_$0) == Seq#Length(s1_$2_$0)) && ((forall  j_$0_$1 : Integer :: {Seq#Index(s0_$2_$0,j_$0_$1)} {Seq#Index(s1_$2_$0,j_$0_$1)} ( ((0 <= j_$0_$1) && (j_$0_$1 < Seq#Length(s0_$2_$0))) ==> (Seq#Index(s0_$2_$0,j_$0_$1) == Seq#Index(s1_$2_$0,j_$0_$1)) )))) ))) && ((forall  s0_$2_$1 : Seq (ref) , s1_$2_$1 : Seq (ref)  :: {Seq#Equal(s0_$2_$1,s1_$2_$1)} ( Seq#Equal(s0_$2_$1,s1_$2_$1) <==> ((Seq#Length(s0_$2_$1) == Seq#Length(s1_$2_$1)) && ((forall  j_$0_$3 : Integer :: {Seq#Index(s0_$2_$1,j_$0_$3)} {Seq#Index(s1_$2_$1,j_$0_$3)} ( ((0 <= j_$0_$3) && (j_$0_$3 < Seq#Length(s0_$2_$1))) ==> (Seq#Index(s0_$2_$1,j_$0_$3) == Seq#Index(s1_$2_$1,j_$0_$3)) )))) )));
	assume ((forall  a_$3_$0 : Seq (Integer) , b_$3_$0 : Seq (Integer)  :: {Seq#Equal(a_$3_$0,b_$3_$0)} ( Seq#Equal(a_$3_$0,b_$3_$0) ==> (a_$3_$0 == b_$3_$0) ))) && ((forall  a_$3_$1 : Seq (ref) , b_$3_$1 : Seq (ref)  :: {Seq#Equal(a_$3_$1,b_$3_$1)} ( Seq#Equal(a_$3_$1,b_$3_$1) ==> (a_$3_$1 == b_$3_$1) )));
	assume ((forall  s_$7_$0 : Seq (Integer) , n_$8_$0 : Integer :: {Seq#Length(Seq#Take(s_$7_$0,n_$8_$0))} ( (0 <= n_$8_$0) ==> (((n_$8_$0 <= Seq#Length(s_$7_$0)) ==> (Seq#Length(Seq#Take(s_$7_$0,n_$8_$0)) == n_$8_$0)) && ((Seq#Length(s_$7_$0) < n_$8_$0) ==> (Seq#Length(Seq#Take(s_$7_$0,n_$8_$0)) == Seq#Length(s_$7_$0)))) ))) && ((forall  s_$7_$1 : Seq (ref) , n_$8_$1 : Integer :: {Seq#Length(Seq#Take(s_$7_$1,n_$8_$1))} ( (0 <= n_$8_$1) ==> (((n_$8_$1 <= Seq#Length(s_$7_$1)) ==> (Seq#Length(Seq#Take(s_$7_$1,n_$8_$1)) == n_$8_$1)) && ((Seq#Length(s_$7_$1) < n_$8_$1) ==> (Seq#Length(Seq#Take(s_$7_$1,n_$8_$1)) == Seq#Length(s_$7_$1)))) )));
	assume ((forall  s_$8_$0 : Seq (Integer) , n_$9_$0 : Integer, j_$2_$0 : Integer :: {Seq#Index(Seq#Take(s_$8_$0,n_$9_$0),j_$2_$0)} {:weight  25}( (((0 <= j_$2_$0) && (j_$2_$0 < n_$9_$0)) && (j_$2_$0 < Seq#Length(s_$8_$0))) ==> (Seq#Index(Seq#Take(s_$8_$0,n_$9_$0),j_$2_$0) == Seq#Index(s_$8_$0,j_$2_$0)) ))) && ((forall  s_$8_$1 : Seq (ref) , n_$9_$1 : Integer, j_$2_$1 : Integer :: {Seq#Index(Seq#Take(s_$8_$1,n_$9_$1),j_$2_$1)} {:weight  25}( (((0 <= j_$2_$1) && (j_$2_$1 < n_$9_$1)) && (j_$2_$1 < Seq#Length(s_$8_$1))) ==> (Seq#Index(Seq#Take(s_$8_$1,n_$9_$1),j_$2_$1) == Seq#Index(s_$8_$1,j_$2_$1)) )));
	assume ((forall  s_$9_$0 : Seq (Integer) , n_$10_$0 : Integer :: {Seq#Length(Seq#Drop(s_$9_$0,n_$10_$0))} ( (0 <= n_$10_$0) ==> (((n_$10_$0 <= Seq#Length(s_$9_$0)) ==> (Seq#Length(Seq#Drop(s_$9_$0,n_$10_$0)) == (Seq#Length(s_$9_$0) - n_$10_$0))) && ((Seq#Length(s_$9_$0) < n_$10_$0) ==> (Seq#Length(Seq#Drop(s_$9_$0,n_$10_$0)) == 0))) ))) && ((forall  s_$9_$1 : Seq (ref) , n_$10_$1 : Integer :: {Seq#Length(Seq#Drop(s_$9_$1,n_$10_$1))} ( (0 <= n_$10_$1) ==> (((n_$10_$1 <= Seq#Length(s_$9_$1)) ==> (Seq#Length(Seq#Drop(s_$9_$1,n_$10_$1)) == (Seq#Length(s_$9_$1) - n_$10_$1))) && ((Seq#Length(s_$9_$1) < n_$10_$1) ==> (Seq#Length(Seq#Drop(s_$9_$1,n_$10_$1)) == 0))) )));
	assume ((forall  s_$10_$0 : Seq (Integer) , n_$11_$0 : Integer, j_$3_$0 : Integer :: {Seq#Index(Seq#Drop(s_$10_$0,n_$11_$0),j_$3_$0)} {:weight  25}( (((0 <= n_$11_$0) && (0 <= j_$3_$0)) && (j_$3_$0 < (Seq#Length(s_$10_$0) - n_$11_$0))) ==> (Seq#Index(Seq#Drop(s_$10_$0,n_$11_$0),j_$3_$0) == Seq#Index(s_$10_$0,j_$3_$0 + n_$11_$0)) ))) && ((forall  s_$10_$1 : Seq (ref) , n_$11_$1 : Integer, j_$3_$1 : Integer :: {Seq#Index(Seq#Drop(s_$10_$1,n_$11_$1),j_$3_$1)} {:weight  25}( (((0 <= n_$11_$1) && (0 <= j_$3_$1)) && (j_$3_$1 < (Seq#Length(s_$10_$1) - n_$11_$1))) ==> (Seq#Index(Seq#Drop(s_$10_$1,n_$11_$1),j_$3_$1) == Seq#Index(s_$10_$1,j_$3_$1 + n_$11_$1)) )));
	assume ((forall  s_$11_$0 : Seq (Integer) , t_$1_$0 : Seq (Integer)  :: {Seq#Append(s_$11_$0,t_$1_$0)} ( (Seq#Take(Seq#Append(s_$11_$0,t_$1_$0),Seq#Length(s_$11_$0)) == s_$11_$0) && (Seq#Drop(Seq#Append(s_$11_$0,t_$1_$0),Seq#Length(s_$11_$0)) == t_$1_$0) ))) && ((forall  s_$11_$1 : Seq (ref) , t_$1_$1 : Seq (ref)  :: {Seq#Append(s_$11_$1,t_$1_$1)} ( (Seq#Take(Seq#Append(s_$11_$1,t_$1_$1),Seq#Length(s_$11_$1)) == s_$11_$1) && (Seq#Drop(Seq#Append(s_$11_$1,t_$1_$1),Seq#Length(s_$11_$1)) == t_$1_$1) )));
	assume (forall  min : Integer, max : Integer :: {Seq#Length(Seq#Range(min,max))} ( ((min < max) ==> (Seq#Length(Seq#Range(min,max)) == (max - min))) && ((max <= min) ==> (Seq#Length(Seq#Range(min,max)) == 0)) ));
	assume (forall  min_$0 : Integer, max_$0 : Integer, j_$4 : Integer :: {Seq#Index(Seq#Range(min_$0,max_$0),j_$4)} ( ((0 <= j_$4) && (j_$4 < (max_$0 - min_$0))) ==> (Seq#Index(Seq#Range(min_$0,max_$0),j_$4) == (min_$0 + j_$4)) ));
	assume ((forall  x_$9_$0 : Integer, y_$3_$0 : Integer :: {Seq#Contains(Seq#Singleton(x_$9_$0),y_$3_$0)} ( Seq#Contains(Seq#Singleton(x_$9_$0),y_$3_$0) <==> (x_$9_$0 == y_$3_$0) ))) && ((forall  x_$9_$1 : ref, y_$3_$1 : ref :: {Seq#Contains(Seq#Singleton(x_$9_$1),y_$3_$1)} ( Seq#Contains(Seq#Singleton(x_$9_$1),y_$3_$1) <==> (x_$9_$1 == y_$3_$1) )));
	assume NonPredicateField(SortedTree.root);
	assume NonPredicateField(SortedTree.keys);
	assume NonPredicateField(SortedTree.numClones);
	assume PredicateField(SortedTree.valid);
	assume NonPredicateField(SortedTreeSnapshot.root);
	assume NonPredicateField(SortedTreeSnapshot.keys);
	assume PredicateField(SortedTreeSnapshot.valid);
	assume NonPredicateField(SortedTreeNode.key);
	assume NonPredicateField(SortedTreeNode.left);
	assume NonPredicateField(SortedTreeNode.right);
	assume NonPredicateField(SortedTreeNode.keys);
	assume NonPredicateField(SortedTreeNode.shared);
	assume PredicateField(SortedTreeNode.valid);
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume IsGoodMask(Mask);
	assume (this == null) || (dtype(this) == SortedTree#t);
	assume !(this == null);
	assume wf(Heap,Mask);
	goto anon0;
anon0:
	assume (0 < methodK#_7) && ((1000 * methodK#_7) < Fractions(1));
	assume wf(h0#_0,m0#_1);
	assume wf(h1#_3,m1#_4);
	assert { :msg "  3.1: Monitor invariant is not allowed to contain debt." } (forall  ch : ref :: ( (ch == null) || (0 <= ZeroCredits[ch]) ));
	goto $exit;
}
