
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class SortedTree{
	//////////////////////////////////////////////////////////
	var root : SortedTreeNode;
	ghost var keys : seq<int>;
	var hasClones : bool;
	
	ghost var numClones : int;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(root,100)
		&& acc(keys,50)
		&& acc(hasClones,100)
		&& (
			( root!=null && hasClones)
				==> 
			(
				   rd(root.valid)
				&& rd(root.keys  )
				&& rd(root.shared)
				&& keys == root.keys
				&& hasClones == root.shared
			)
		)
		
		&& (
			( root!=null && !hasClones)
				==> 
			(
				   acc(root.valid,100 )
				&& acc(root.keys,50  )
				&& acc(root.shared,50)
				&& keys == root.keys
				&& hasClones == root.shared
			)
		)

		&& (
			root==null 
				==> 
			(
				   keys == nil<int>
				&& !hasClones
			)
		)
	}

	//////////////////////////////////////////////////////////
	method init()
		requires acc(root,100);
		requires acc(keys,100);
		requires acc(hasClones,100);

		ensures valid;
		ensures acc(keys,50);
		ensures keys == nil<int>;
	{
		root := null;
		keys := nil<int>;
		hasClones := false;
		fold valid;
	}
	
	//////////////////////////////////////////////////////////
	method getSnapshot() returns (r : SortedTreeSnapshot)
		requires valid;
		requires rd(keys);

		ensures valid;
		ensures r!=null;
		ensures r.valid;
		ensures rd(keys);
		ensures acc(r.keys,50);
		ensures r.keys == keys;
	{
		unfold valid;
		if (!hasClones && root!=null){
			call root.makeShared();
		}
		r := new SortedTreeSnapshot;
		call r.init(root);
		if (root!=null){
			if (!hasClones){
				hasClones := true;
				fold valid;
			}else{
				fold valid;
			}
		}else{
			fold valid;
		}
	}

	
	//////////////////////////////////////////////////////////
	method insert(k : int)
		requires valid;
		requires acc(keys,50);

		ensures valid;
		ensures acc(keys,50);

		ensures k in keys;
		ensures forall j in old(keys) :: j in keys;
		ensures forall j in keys :: ( j in old(keys) || j==k);
	{
		unfold valid;
		if (root==null){
			var n : SortedTreeNode := new SortedTreeNode;
			call n.init(k);
			root := n;
			keys := root.keys;
			fold valid;
		}else{
			var r : SortedTreeNode;
			call r := root.insert(k,hasClones);
			root := r;
			keys := root.keys;
			fold valid;
		}
	}
	
	
	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires acc(keys,1);

		ensures valid;
		ensures acc(keys,1);
		ensures b == (k in keys);
	{
		unfold valid;
		if (root==null){
			b := false;
		}else{
			var bb : bool;
			call bb:= root.has(k);
			b := bb;
		}
		fold valid;
	}
}


////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class SortedTreeSnapshot{
	//////////////////////////////////////////////////////////
	var root : SortedTreeNode;
	ghost var keys : seq<int>;
	ghost var hasClones : int;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(root,100)
		&& acc(keys,50)
		&& (root!=null ==> rd(root.valid))
		&& (root!=null ==> rd(root.keys))
		&& (root!=null ==> keys == root.keys)
		&& (root==null ==> keys == nil<int>)
	}

	//////////////////////////////////////////////////////////
	method init(treeRoot : SortedTreeNode)
		requires acc(root,100);
		requires acc(keys,100);
		requires treeRoot!=null ==> rd(treeRoot.valid);
		requires treeRoot!=null ==> rd(treeRoot.keys);

		ensures valid;
		ensures acc(keys,50);
		ensures treeRoot!=null ==> keys == old(treeRoot.keys);
		ensures treeRoot==null ==> keys == nil<int>;
	{
		root := treeRoot;
		if (root!=null){
			keys := root.keys;
			fold valid;
		}else{
			keys := nil<int>;
			fold valid;
		}
	}
	

	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires acc(keys,1);

		ensures valid;
		ensures acc(keys,1);
		ensures b == (k in keys);
	{
		unfold valid;
		if (root==null){
			b := false;
		}else{
			var bb : bool;
			call bb:= root.has(k);
			b := bb;
		}
		fold valid;
	}
}



////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class SortedTreeNode{
	//////////////////////////////////////////////////////////
	var key    : int;
	var left  : SortedTreeNode;
	var right : SortedTreeNode;

	//////////////////////////////////////////////////////////
	ghost var keys : seq<int>;
	ghost var shared : bool;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(keys         ,50)
		&& acc(key   ,100)
		&& acc(left  ,100)
		&& acc(right ,100)

		&& acc(shared  ,50)
		
		&& (
			(left!=null && shared) 
				==>
			(
				   rd(left.valid)
				&& rd(left.shared)
				&& rd(left.keys)
				&& left.shared
			)
		)

		&& (
			(left!=null && !shared) 
				==>
			(
				   acc(left.valid, 100)
				&& acc(left.shared,50)
				&& acc(left.keys,  50)
				&& !left.shared
			)
		)
		&& (
			left!=null
				==>
			( forall lk in left.keys :: lk < key)
		)

		&& (
			(right!=null && shared) 
				==>
			(
				   rd(right.valid)
				&& rd(right.shared)
				&& rd(right.keys)
				&& right.shared
			)
		)

		&& (
			(right!=null && !shared) 
				==>
			(
				   acc(right.valid, 100)
				&& acc(right.shared,50)
				&& acc(right.keys,  50)
				&& !right.shared
			)
		)
		&& (
			right!=null
				==>
			( forall rk in right.keys :: key < rk)
		)
		
		&& keys          == ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys )
		&& key in keys
/*		&& (forall kk : int :: 
				((kk in keys )
					<==> 
				 (( left !=null && kk in left .keys ) || ( right!=null && kk in right.keys ) || kk == key ))
			)*/
	}

	//////////////////////////////////////////////////////////
	method init(k : int)
		requires acc(key   ,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys   ,100);
		requires acc(shared ,100);

		ensures valid;
		ensures acc(keys,   50);
		ensures acc(shared, 50);
		ensures !shared;

		ensures keys == [k];

		ensures k in keys;
	{
		left   := null;
		right  := null;
		key    := k;
		shared := false;

		assert [k][0] == k;
		keys          := [k];
		fold valid;
	}
	
	//////////////////////////////////////////////////////////
	method makeShared()
		requires valid;
		requires acc(shared,50);
		requires !shared;

		ensures valid;
		ensures acc(shared,50);
		ensures shared;
	{
		unfold valid;
		if (left!=null){
			call left.makeShared();
		}
		if (right !=null){
			call right.makeShared();
		}
		shared := true;
		fold valid;
	}

	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires rd(valid);
		requires rd(keys);

		ensures rd(valid);
		ensures rd(keys);
		ensures b == (k in keys);
		ensures keys == old(keys);
	{
		unfold rd(valid);
		if (k==key){
			b := true;
			assert [k][0] == k;
			assert k in [k];
			assert k in keys;
		}else{ //k!=key
			if (k < key){
				if (left!=null){
					call b := left.has(k);
				}else{
					b := false;
				}
				assert b == (k in keys);
			}else{ //k > key;
				if (right!=null){
					call b := right.has(k);
				}else{
					b := false;
				}
				assert b == (k in keys);
			}
		}
		fold rd(valid);
	}
	

	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method insert(k : int,hasClones : bool) returns ( r : SortedTreeNode )
		requires !hasClones ==> acc(valid,100);
		requires !hasClones ==> acc(keys,  50);
		requires !hasClones ==> acc(shared,50);
		requires hasClones ==> rd(valid);
		requires hasClones ==> rd(keys);
		requires hasClones ==> rd(shared);
		requires hasClones == shared;

		
		ensures r != null;
		ensures !hasClones ==> acc(r.valid,100);
		ensures !hasClones ==> acc(r.keys,  50);
		ensures !hasClones ==> acc(r.shared,50);
		ensures hasClones ==> rd(r.valid );
		ensures hasClones ==> rd(r.keys  );
		ensures hasClones ==> rd(r.shared);
		ensures hasClones <==> r.shared;
		
		ensures hasClones ==> ( (r==this) <==> (r.keys == old(keys)) );
		
		ensures k in r.keys;
		ensures forall i in old(keys) :: i in r.keys;
		ensures forall i in r.keys :: ( i in old(keys) || i==k);
		ensures k in old(keys) ==> r.keys==old(keys);
		ensures !(k in old(keys)) ==> |r.keys| == |old(keys)|+1;
	
	{
		if (hasClones){
			unfold rd(valid);
		}else{
			unfold acc(valid,100);
		}
		
		
		if (key==k){
			r := this;
			assert k==[key][0];
			if (hasClones){
				fold rd(r.valid);
			}else{
				fold acc(r.valid,100);
			}
		}else{ //key!=k
			if (k<key){ //insert left
				var nl : SortedTreeNode;
				if (left==null){
					nl := new SortedTreeNode;
					call nl.init(k);
					if (hasClones){
						call nl.makeShared();
					}
				}else{
					call nl := left.insert(k,hasClones);
				}
				if (nl!=left){
					if (hasClones){
						r := new SortedTreeNode;
						call r.init(key);
						unfold r.valid;
						r.left := nl;
						r.right := right;
						r.shared := hasClones;
						r.keys := ((r.left==null)?nil<int>:r.left.keys) ++ [r.key] ++ ((r.right==null)?nil<int>:r.right.keys);
						fold rd(r.valid);
					}else{
						left := nl;
						r := this;
						r.keys := ( r.left==null ? nil<int> : r.left.keys ) ++ [key] ++ ( r.right==null ? nil<int> : r.right.keys )
						fold acc(r.valid,100);
					}
				}else{
					r := this;
					if (hasClones){
						fold rd(r.valid);
					}else{
						r.keys := ( r.left==null ? nil<int> : r.left.keys ) ++ [key] ++ ( r.right==null ? nil<int> : r.right.keys )
						fold acc(r.valid,100);
					}
				}
			}else{ // k>key -- insert right
				var nr : SortedTreeNode;
				if (right==null){
					nr := new SortedTreeNode;
					call nr.init(k);
					if (hasClones){
						call nr.makeShared();
					}
				}else{
					call nr := right.insert(k,hasClones);
				}
				if (nr!=right){
					if (hasClones){
						r := new SortedTreeNode;
						call r.init(key);
						unfold r.valid;
						r.left := left;
						r.right := nr;
						r.shared := hasClones;
						r.keys := ((r.left==null)?nil<int>:r.left.keys) ++ [r.key] ++ ((r.right==null)?nil<int>:r.right.keys);
						fold rd(r.valid);
					}else{
						right := nr;
						r := this;
						r.keys := ( r.left==null ? nil<int> : r.left.keys ) ++ [key] ++ ( r.right==null ? nil<int> : r.right.keys )
						fold acc(r.valid,100);
					}
				}else{
					r := this;
					if (hasClones){
						fold rd(r.valid);
					}else{
						r.keys := ( r.left==null ? nil<int> : r.left.keys ) ++ [key] ++ ( r.right==null ? nil<int> : r.right.keys )
						fold acc(r.valid,100);
					}
				}
			}
		}
	}
	
	
/*
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method remove(k : int) returns ( r : SortedTreeNode )
		requires valid;
		requires acc(keys,  50);

		ensures old(keys)==[k] ==> r == null;
		ensures old(keys)!=[k] ==> r != null;

		ensures r != null ==> r.valid;
		ensures r != null ==> acc(r.keys,  50);

		ensures r != null ==> !(k in r.keys);
		ensures r != null ==> forall i in old(keys) :: ( i in   r.keys  || i==k);
		ensures r != null ==> forall i in   r.keys  :: ( i in old(keys) && i!=k);
		ensures !(k in old(keys)) ==>  r.keys  ==  old(keys);
		ensures r != null ==> k in old(keys)  ==> |r.keys| == |old(keys)|-1;
		
	{
		unfold valid;
		if (key==k){
			if (left==null || right==null){
				assert right!=null ==> unfolding right.valid in right.keys != nil<int>;
				assert left !=null ==> unfolding left .valid in left .keys != nil<int>;
				if (left==null){ //replace with right
					r := right;
				}else{ //right==null
					r := left;
				}
			}else{ //prune max/min of left/right
				var bf : int;
				var nl : SortedTreeNode := left;
				var nr : SortedTreeNode := right;
				
				call bf := getBalanceFactorI();
				if (bf > 0 ){ //left larger - prune leftmax
					call nl,r := left.pruneMax();
				}else{ //right larger equal - prune rightmin
					call nr,r := right.pruneMin();
				}
				unfold r.valid;
				r.left  := nl;
				r.right := nr;
				call r.close();
			}
		}else{ //key!=k
			if (k<key){ //remove left
				if (left!=null){
					var nl : SortedTreeNode;
					call nl := left.remove(k);
					left := nl;

					var bf : int;
					call bf := getBalanceFactorI();

					if (bf==-2){ //rebalance
						call r:=rebalanceRight();
					}else{ //no rebalance
						call close();
						r := this;
					}
				}else{
					r := this;
					call r.close();
				}
			}else{ // k>key -- remove right
				if (right != null){
					var nr : SortedTreeNode;
					call nr := right.remove(k);
					right := nr;
					
					var bf : int;
					call bf := getBalanceFactorI();
					if (bf==2){ //rebalance
						call r := rebalanceLeft();
					}else{//no rebalance
						r := this;
						call r.close();
					}
				}else{
					r := this;
					call r.close();
				}
			}
		}
	}
	*/


	/*
	//////////////////////////////////////////////////////////
	method close()
		requires
			   acc(key   ,100)
			&& acc(left  ,100)
			&& acc(right ,100)

			&& acc(keys         ,100)
			&& acc(shared       ,50)

			&& (
				(left!=null && shared) 
					==>
				(
						rd(left.valid)
					&& rd(left.shared)
					&& rd(left.keys)
					&& left.shared
				)
			)

			&& (
				(left!=null && !shared) 
					==>
				(
						acc(left.valid, 50)
					&& acc(left.shared,50)
					&& acc(left.keys,  50)
					&& !left.shared
				)
			)
			&& (
				left!=null
					==>
				( forall lk in left.keys :: lk < key)
			)

			&& (
				(right!=null && shared) 
					==>
				(
					   rd(right.valid)
					&& rd(right.shared)
					&& rd(right.keys)
					&& right.shared
				)
			)

			&& (
				(right!=null && !shared) 
					==>
				(
					   acc(right.valid, 50)
					&& acc(right.shared,50)
					&& acc(right.keys,  50)
					&& !right.shared
				)
			)
			&& (
				right!=null
					==>
				( forall rk in right.keys :: key < rk)
			)
			;

		ensures valid;
		ensures acc(keys         ,50);
		ensures keys == 
			( old(left)==null ? nil<int> : old(left.keys) ) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );
	{
		keys          := ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys );
		assert [key][0] == key;

		if (left!=null){
			assert !shared ==> acc(left.valid,50);
			assert  shared ==> rd(left.valid);
			if (right !=null){
				assert !shared ==> acc(right.valid,50);
				assert  shared ==> rd(right.valid);
				fold valid;
			}else{
				fold valid;
			}
		}else{
			if (right !=null){
				assert !shared ==> acc(right.valid,50);
				assert  shared ==> rd(right.valid);
				fold valid;
			}else{
				fold valid;
			}
		}

	}
*/	
}
