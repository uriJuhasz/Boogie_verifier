////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class SortedTree{
	//////////////////////////////////////////////////////////
	var root : SortedTreeNode;
	ghost var keys : seq<int>;
	var numClones : int;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(root,100)
		&& acc(keys,50)
		&& acc(numClones,100)
		&& acc(mu,1)

		&& numClones >= 0
		&& numClones < 50
//		&& (root!=null ==> acc(root.valid, 100-numClones))
		&& (root!=null ==> acc(root.keys,50-numClones))
		&& (root!=null ==> acc(root.mu,100-numClones))
		&& (root!=null ==> keys == root.keys)
		&& (root==null ==> keys == nil<int>)
		&& ( root!=null ==>  this << root )
	}

	//////////////////////////////////////////////////////////
	method init()
		requires acc(root,100);
		requires acc(keys,100);
		requires acc(numClones,100);
		requires acc(mu,1);

		ensures valid;
		ensures acc(keys,50);
		ensures keys == nil<int>;
	{
		root := null;
		keys := nil<int>;
		numClones := 0;
		fold valid;
	}
	
	//////////////////////////////////////////////////////////
	method getSnapshot() returns (r : SortedTreeSnapshot)
		requires valid;
		requires acc(mu,1);
		requires waitlevel << this;
		ensures valid;
		ensures acc(mu,1);
	{
		unfold valid;
		if (numClones < 49){
			r := new SortedTreeSnapshot;
			if (root!=null){
				acquire root;
			}
			call r.init(root);
			if (root!=null){
				release root;
			}
			numClones := numClones+1;
			fold valid;
		}else{
			assume false;
		}
	}

	
	//////////////////////////////////////////////////////////
	method insert(k : int)
		requires valid;
		requires acc(keys,50);
		requires rd(mu) && waitlevel << this;

		ensures valid;
		ensures acc(keys,50);

		ensures k in keys;
		ensures forall j in old(keys) :: j in keys;
		ensures forall j in keys :: ( j in old(keys) || j==k);
	{
		unfold valid;
		if (root==null){
			var n : SortedTreeNode := new SortedTreeNode;
			call n.init(k);
			root := n;
		}else{
			acquire root;
			call r := root.insert(k,numClones>0);
//			release r;
			root := r;
		}
		keys := root.keys;
		fold valid;
	}
	

/*
	//////////////////////////////////////////////////////////
	method remove(k : int)
		requires valid;
		requires acc(keys,50);

		ensures valid;
		ensures acc(keys,50);

		ensures !(k in keys);
		ensures forall j in old(keys) :: j in keys || j==k;
		ensures forall j in keys :: ( j in old(keys) && j!=k);
	{
		unfold valid;
		if (root==null){
		}else{
			call r := root.remove(k);
			root := r;
			keys := (root==null?nil<int>:root.keys);
		}
		fold valid;
	}
	*/

	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);
		requires rd(mu);
		requires waitlevel << this;

		ensures valid;
		ensures rd(keys);
		ensures rd(mu);
		ensures b == (k in keys);
	{
		unfold valid;
		if (root==null){
			b := false;
		}else{
			var bb : bool;
			acquire root;
			call bb:= root.has(k);
			release root;
			b := bb;
		}
		fold valid;
	}
}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class SortedTreeSnapshot{
	//////////////////////////////////////////////////////////
	var root : SortedTreeNode;
	ghost var keys : seq<int>;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(root,100)
		&& acc(keys,50)
//		&& (root!=null ==> acc(root.valid,1))
		&& (root!=null ==> acc(root.mu,1))
		&& (root!=null ==> acc(root.keys,1))
		&& (root!=null ==> keys == root.keys)
		&& (root==null ==> keys == nil<int>)
	}

	//////////////////////////////////////////////////////////
	method init(treeRoot : SortedTreeNode)
		requires acc(root,100);
		requires acc(keys,100);
//		requires acc(treeRoot,1);
		requires treeRoot!=null ==> treeRoot.valid;
		requires treeRoot!=null ==> acc(treeRoot.keys,2);
		requires treeRoot!=null ==> acc(treeRoot.mu,1);

		ensures valid;
		ensures acc(keys,50);
		ensures treeRoot!=null ==> treeRoot.valid;
		ensures treeRoot!=null ==> acc(treeRoot.keys,1);
		ensures treeRoot!=null ==> keys == treeRoot.keys;
		ensures treeRoot==null ==> keys == nil<int>;
		ensures treeRoot!=null ==> treeRoot.keys == old(treeRoot.keys);
	{
		root := treeRoot;
		if (root!=null){
			keys := root.keys;
		}else{
			keys := nil<int>;
		}
		fold valid;
	}
	

	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);
		requires unfolding valid in root!=null ==> waitlevel << root.mu;

		ensures valid;
		ensures rd(keys);
		ensures b == (k in keys);
	{
		unfold valid;
		if (root==null){
			b := false;
		}else{
			var bb : bool;
			acquire root;
			call bb:= root.has(k);
			release root;
			b := bb;
		}
		fold valid;
	}
}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class SortedTreeNode{
	//////////////////////////////////////////////////////////
	var key    : int;
	var left  : SortedTreeNode;
	var right : SortedTreeNode;

	//////////////////////////////////////////////////////////
	ghost var keys : seq<int>;

	invariant valid;

	//////////////////////////////////////////////////////////
	predicate valid{
		   acc(key   ,100)
		&& acc(left  ,100)
		&& acc(right ,100)
		&& acc(mu,1)

		&& acc(keys         ,50)

//		&& (left!=null ==> left.valid)
		&& (left!=null ==> acc(left.keys         ,50))
		&& (left!=null ==> acc(left.mu           ,1))
		&& (left!=null ==> this << left )
		&& (left!=null ==> forall lk in left.keys :: key > lk)

//		&& (right!=null ==> right.valid)
		&& (right!=null ==> acc(right.keys         ,50))
		&& (right!=null ==> acc(right.mu           ,1))
		&& (right!=null ==> this << right )
		&& (right!=null ==> (forall rk in right.keys :: key < rk ))

		&& keys          == ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys )
		&& key in keys
		&& (forall kk : int :: 
				((kk in keys )
					<==> 
				 (( left !=null && kk in left .keys ) || ( right!=null && kk in right.keys ) || kk == key ))
			)
	}

	//////////////////////////////////////////////////////////
	method init(k : int)
		requires acc(key   ,100);
		requires acc(left  ,100);
		requires acc(right ,100);

		requires acc(keys         ,100);
		requires acc(mu,           1);

		ensures valid;
		ensures acc(keys,  50);

		ensures keys == [k];

		ensures k in keys;
	{
		left   := null;
		right  := null;
		key    := k;

		assert [k][0] == k;
		call close();
	}

	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method insert(k : int,hasClones : bool) returns ( r : SortedTreeNode )
		requires valid;
		requires acc(keys,  50-((hasClones)?49:0));
		requires rd(mu) && waitlevel == this.mu;

		ensures rd(mu);
		ensures r != null;
		ensures r.valid;
		ensures acc(r.keys,  50-((hasClones)?49:0));

		ensures k in r.keys;
		ensures forall i in old(keys) :: i in r.keys;
		ensures forall i in r.keys :: ( i in old(keys) || i==k);
		ensures k in old(keys) ==> r.keys==old(keys);
		ensures !(k in old(keys)) ==> |r.keys| == |old(keys)|+1;
		
	{
		unfold valid;
		if (key==k){
			r := this;
			assert k==[key][0];
			call r.close();
		}else{ //key!=k
			if (k<key){ //insert left
				var nl : SortedTreeNode;
				if (left==null){
					nl := new SortedTreeNode;
					call nl.init(k);
				}else{
					acquire left;
					call nl := left.insert(k,hasClones);
					release left;
				}
				if (nl!=left && hasClones){
					r := new SortedTreeNode;
					call r.init(key);
					unfold r.valid;
					r.left := nl;
					r.right := right;
					call r.close();
					release this;
				}else{
					left := nl;
					r := this;
					call close();
				}
//				var bf : int;
//				call bf := getBalanceFactorI();

//					r := this;
//					call r.close();
//				}
			}else{ // k>key -- insert right
				assume false;
				var nr : SortedTreeNode;
				if (right==null){
					nr := new SortedTreeNode;
					call nr.init(k);
				}else{
					acquire right;
					call nr := right.insert(k,hasClones);
					release right;
				}
				if (right!=nr && hasClones){
					r := new SortedTreeNode;
					call r.init(key);
					
					unfold r.valid;
					r.right := nr;
					r.left  := left;
				}else{
					r := this;
					right := nr;
				}

				call r.close();
				
			}
		}
	}
	

/*
	//////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////
	method remove(k : int) returns ( r : SortedTreeNode )
		requires valid;
		requires acc(keys,  50);

		ensures old(keys)==[k] ==> r == null;
		ensures old(keys)!=[k] ==> r != null;

		ensures r != null ==> r.valid;
		ensures r != null ==> acc(r.keys,  50);

		ensures r != null ==> !(k in r.keys);
		ensures r != null ==> forall i in old(keys) :: ( i in   r.keys  || i==k);
		ensures r != null ==> forall i in   r.keys  :: ( i in old(keys) && i!=k);
		ensures !(k in old(keys)) ==>  r.keys  ==  old(keys);
		ensures r != null ==> k in old(keys)  ==> |r.keys| == |old(keys)|-1;
		
	{
		unfold valid;
		if (key==k){
			if (left==null || right==null){
				assert right!=null ==> unfolding right.valid in right.keys != nil<int>;
				assert left !=null ==> unfolding left .valid in left .keys != nil<int>;
				if (left==null){ //replace with right
					r := right;
				}else{ //right==null
					r := left;
				}
			}else{ //prune max/min of left/right
				var bf : int;
				var nl : SortedTreeNode := left;
				var nr : SortedTreeNode := right;
				
				call bf := getBalanceFactorI();
				if (bf > 0 ){ //left larger - prune leftmax
					call nl,r := left.pruneMax();
				}else{ //right larger equal - prune rightmin
					call nr,r := right.pruneMin();
				}
				unfold r.valid;
				r.left  := nl;
				r.right := nr;
				call r.close();
			}
		}else{ //key!=k
			if (k<key){ //remove left
				if (left!=null){
					var nl : SortedTreeNode;
					call nl := left.remove(k);
					left := nl;

					var bf : int;
					call bf := getBalanceFactorI();

					if (bf==-2){ //rebalance
						call r:=rebalanceRight();
					}else{ //no rebalance
						call close();
						r := this;
					}
				}else{
					r := this;
					call r.close();
				}
			}else{ // k>key -- remove right
				if (right != null){
					var nr : SortedTreeNode;
					call nr := right.remove(k);
					right := nr;
					
					var bf : int;
					call bf := getBalanceFactorI();
					if (bf==2){ //rebalance
						call r := rebalanceLeft();
					}else{//no rebalance
						r := this;
						call r.close();
					}
				}else{
					r := this;
					call r.close();
				}
			}
		}
	}
	*/

	//////////////////////////////////////////////////////////
	method has(k : int) returns (b : bool)
		requires valid;
		requires rd(keys);
		requires rd(mu);
		requires waitlevel == this.mu;

		ensures valid;
		ensures rd(keys);
		ensures rd(mu);
		ensures b == (k in keys);
	{
		assume unfolding valid in (left!=null ==> forall lk in left.keys :: lk < key);
		unfold valid;
		assert (left!=null ==> forall lk in left.keys :: lk < key);
		if (k==key){
			b := true;
			assert (left!=null ==> forall lk in left.keys :: lk < key);
			assert [key][0]==k;
		}else{ //k!=key
			if (k < key){
				if (left!=null){
					acquire left;
					call b := left.has(k);
					release left;
				}else{
					b := false;
				}
				assert (left!=null ==> forall lk in left.keys :: lk < key);
			}else{ //k > key;
				if (right!=null){
					acquire right;
					call b := right.has(k);
					release right;
				}else{
					b := false;
				}
				assert (left!=null ==> forall lk in left.keys :: lk < key);
			}
		}
		assert (left!=null ==> forall lk in left.keys :: lk < key);
		fold valid;
	}
	
	//////////////////////////////////////////////////////////
	method close()
		requires acc(key   ,100);
		requires acc(left  ,100);
		requires acc(right ,100);
		requires acc(mu,1);

		requires acc(keys         ,100);

//		requires left!=null ==> left.valid;
		requires left!=null ==> acc(left.keys         ,50);
		requires left!=null ==> acc(left.mu           ,1);
		requires left!=null ==> this << left;
		requires left!=null ==> forall lk in left.keys :: key > lk;

//		requires right!=null ==> right.valid;
		requires right!=null ==> acc(right.keys         ,50);
		requires right!=null ==> acc(right.mu           ,1);
		requires right!=null ==> this << right;
		requires right!=null ==> forall rk in right.keys :: key < rk;

		ensures valid;
		ensures acc(keys         ,50);

		ensures keys == 
			( old(left)==null ? nil<int> : old(left.keys) ) ++ [old(key)] ++ ( old(right)==null ? nil<int> : old(right.keys) );

	{
		keys          := ( left==null ? nil<int> : left.keys ) ++ [key] ++ ( right==null ? nil<int> : right.keys );
		assert [key][0] == key;
		fold valid;
	}
	
}
