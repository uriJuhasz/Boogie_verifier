;Analysis time until now:     7s
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-logic  UFNIA)
;(set-option :produce-unsat-cores true)
; done setting options
;Sorts
(declare-sort $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ 0)
(declare-sort $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ 0)
(declare-sort $@Map@@PermissionComponent@To@Int@@ 0)
(declare-sort $@Map@@ref@To@Int@@ 0)
(declare-sort Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ 0)
(declare-sort Field$Bool$ 0)
(declare-sort Field$Int$ 0)
(declare-sort Field$Mu$ 0)
(declare-sort Field$ref$ 0)
(declare-sort ModuleName 0)
(declare-sort Mu 0)
(declare-sort PermissionComponent 0)
(declare-sort ref 0)
(declare-sort TypeName 0)

;Functions
(declare-fun $@@FactorialActor.getQ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref ) ref)
(declare-fun $@@FactorialCont.getQ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref ) ref)
(declare-fun $@@Future.getQ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref ) ref)
(declare-fun $@@Message.factorial ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Int ) Int)
(declare-fun $@bf ( ) Bool)
(declare-fun $@bf_1 ( ) Bool)
(declare-fun $@bf_2 ( ) Bool)
(declare-fun $@bf_3 ( ) Bool)
(declare-fun $@bf_306 ( ) Bool)
(declare-fun $@bf_307 ( ) Bool)
(declare-fun $@bf_308 ( ) Bool)
(declare-fun $@bf_309 ( ) Bool)
(declare-fun $@bf_310 ( ) Bool)
(declare-fun $@bf_311 ( ) Bool)
(declare-fun $@bf_312 ( ) Bool)
(declare-fun $@bf_313 ( ) Bool)
(declare-fun $@FactorialActor.getQ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref ) ref)
(declare-fun $@FactorialCont.getQ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref ) ref)
(declare-fun $@Future.getQ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref ) ref)
(declare-fun $@Message.factorial ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Int ) Int)
(declare-fun $@Message.factorial@limited ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Int ) Int)
(declare-fun $LockBottom ( ) Mu)
(declare-fun Channel@t ( ) TypeName)
(declare-fun channelK ( ) Int)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@ref@To@Int@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@ref@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Bool ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Bool$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Field$Bool$ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Field$Int$ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Mu$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Field$Mu$ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$ref$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Field$ref$ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ModuleName$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ModuleName ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ Mu ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$PermissionComponent$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ PermissionComponent ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$TypeName$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ TypeName ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@ref@To@Int@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@ref@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Bool ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Bool$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Field$Bool$ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Int$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Field$Int$ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Mu$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Field$Mu$ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$ref$$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Field$ref$ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ModuleName$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ModuleName ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ Mu ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$PermissionComponent$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ PermissionComponent ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$TypeName$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ TypeName ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( $@Map@@PermissionComponent@To@Int@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@PermissionComponent@To@Int@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@PermissionComponent@To@Int@@ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@ref@To@Int@@$ ( $@Map@@PermissionComponent@To@Int@@ $@Map@@ref@To@Int@@ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Bool$ ( $@Map@@PermissionComponent@To@Int@@ Bool ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( $@Map@@PermissionComponent@To@Int@@ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Field$Bool$$ ( $@Map@@PermissionComponent@To@Int@@ Field$Bool$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Field$Int$$ ( $@Map@@PermissionComponent@To@Int@@ Field$Int$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Field$Mu$$ ( $@Map@@PermissionComponent@To@Int@@ Field$Mu$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Field$ref$$ ( $@Map@@PermissionComponent@To@Int@@ Field$ref$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Int$ ( $@Map@@PermissionComponent@To@Int@@ Int ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$ModuleName$ ( $@Map@@PermissionComponent@To@Int@@ ModuleName ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$Mu$ ( $@Map@@PermissionComponent@To@Int@@ Mu ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$PermissionComponent$ ( $@Map@@PermissionComponent@To@Int@@ PermissionComponent ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$ref$ ( $@Map@@PermissionComponent@To@Int@@ ref ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@PermissionComponent@To@Int@@$TypeName$ ( $@Map@@PermissionComponent@To@Int@@ TypeName ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( $@Map@@ref@To@Int@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@ref@To@Int@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@ref@To@Int@@ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$$@Map@@ref@To@Int@@$ ( $@Map@@ref@To@Int@@ $@Map@@ref@To@Int@@ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Bool$ ( $@Map@@ref@To@Int@@ Bool ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( $@Map@@ref@To@Int@@ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Field$Bool$$ ( $@Map@@ref@To@Int@@ Field$Bool$ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Field$Int$$ ( $@Map@@ref@To@Int@@ Field$Int$ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Field$Mu$$ ( $@Map@@ref@To@Int@@ Field$Mu$ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Field$ref$$ ( $@Map@@ref@To@Int@@ Field$ref$ ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Int$ ( $@Map@@ref@To@Int@@ Int ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$ModuleName$ ( $@Map@@ref@To@Int@@ ModuleName ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$Mu$ ( $@Map@@ref@To@Int@@ Mu ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$PermissionComponent$ ( $@Map@@ref@To@Int@@ PermissionComponent ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$ref$ ( $@Map@@ref@To@Int@@ ref ) $@Map@@ref@To@Int@@)
(declare-fun combine$$@Map@@ref@To@Int@@$TypeName$ ( $@Map@@ref@To@Int@@ TypeName ) $@Map@@ref@To@Int@@)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@PermissionComponent@To@Int@@$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ $@Map@@PermissionComponent@To@Int@@ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@ref@To@Int@@$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ $@Map@@ref@To@Int@@ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Bool$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Bool ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Bool$$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Field$Bool$ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Int$$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Field$Int$ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Mu$$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Field$Mu$ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$ref$$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Field$ref$ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Int$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Int ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ModuleName$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ModuleName ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Mu$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Mu ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$PermissionComponent$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ PermissionComponent ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ref$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ref ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$TypeName$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ TypeName ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun combine$Field$Bool$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Field$Bool$ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Field$Bool$)
(declare-fun combine$Field$Bool$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Field$Bool$ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Field$Bool$)
(declare-fun combine$Field$Bool$$$@Map@@PermissionComponent@To@Int@@$ ( Field$Bool$ $@Map@@PermissionComponent@To@Int@@ ) Field$Bool$)
(declare-fun combine$Field$Bool$$$@Map@@ref@To@Int@@$ ( Field$Bool$ $@Map@@ref@To@Int@@ ) Field$Bool$)
(declare-fun combine$Field$Bool$$Bool$ ( Field$Bool$ Bool ) Field$Bool$)
(declare-fun combine$Field$Bool$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Field$Bool$ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Field$Bool$)
(declare-fun combine$Field$Bool$$Field$Bool$$ ( Field$Bool$ Field$Bool$ ) Field$Bool$)
(declare-fun combine$Field$Bool$$Field$Int$$ ( Field$Bool$ Field$Int$ ) Field$Bool$)
(declare-fun combine$Field$Bool$$Field$Mu$$ ( Field$Bool$ Field$Mu$ ) Field$Bool$)
(declare-fun combine$Field$Bool$$Field$ref$$ ( Field$Bool$ Field$ref$ ) Field$Bool$)
(declare-fun combine$Field$Bool$$Int$ ( Field$Bool$ Int ) Field$Bool$)
(declare-fun combine$Field$Bool$$ModuleName$ ( Field$Bool$ ModuleName ) Field$Bool$)
(declare-fun combine$Field$Bool$$Mu$ ( Field$Bool$ Mu ) Field$Bool$)
(declare-fun combine$Field$Bool$$PermissionComponent$ ( Field$Bool$ PermissionComponent ) Field$Bool$)
(declare-fun combine$Field$Bool$$ref$ ( Field$Bool$ ref ) Field$Bool$)
(declare-fun combine$Field$Bool$$TypeName$ ( Field$Bool$ TypeName ) Field$Bool$)
(declare-fun combine$Field$Int$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Field$Int$ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Field$Int$)
(declare-fun combine$Field$Int$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Field$Int$ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Field$Int$)
(declare-fun combine$Field$Int$$$@Map@@PermissionComponent@To@Int@@$ ( Field$Int$ $@Map@@PermissionComponent@To@Int@@ ) Field$Int$)
(declare-fun combine$Field$Int$$$@Map@@ref@To@Int@@$ ( Field$Int$ $@Map@@ref@To@Int@@ ) Field$Int$)
(declare-fun combine$Field$Int$$Bool$ ( Field$Int$ Bool ) Field$Int$)
(declare-fun combine$Field$Int$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Field$Int$ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Field$Int$)
(declare-fun combine$Field$Int$$Field$Bool$$ ( Field$Int$ Field$Bool$ ) Field$Int$)
(declare-fun combine$Field$Int$$Field$Int$$ ( Field$Int$ Field$Int$ ) Field$Int$)
(declare-fun combine$Field$Int$$Field$Mu$$ ( Field$Int$ Field$Mu$ ) Field$Int$)
(declare-fun combine$Field$Int$$Field$ref$$ ( Field$Int$ Field$ref$ ) Field$Int$)
(declare-fun combine$Field$Int$$Int$ ( Field$Int$ Int ) Field$Int$)
(declare-fun combine$Field$Int$$ModuleName$ ( Field$Int$ ModuleName ) Field$Int$)
(declare-fun combine$Field$Int$$Mu$ ( Field$Int$ Mu ) Field$Int$)
(declare-fun combine$Field$Int$$PermissionComponent$ ( Field$Int$ PermissionComponent ) Field$Int$)
(declare-fun combine$Field$Int$$ref$ ( Field$Int$ ref ) Field$Int$)
(declare-fun combine$Field$Int$$TypeName$ ( Field$Int$ TypeName ) Field$Int$)
(declare-fun combine$Field$Mu$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Field$Mu$ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Field$Mu$)
(declare-fun combine$Field$Mu$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Field$Mu$ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Field$Mu$)
(declare-fun combine$Field$Mu$$$@Map@@PermissionComponent@To@Int@@$ ( Field$Mu$ $@Map@@PermissionComponent@To@Int@@ ) Field$Mu$)
(declare-fun combine$Field$Mu$$$@Map@@ref@To@Int@@$ ( Field$Mu$ $@Map@@ref@To@Int@@ ) Field$Mu$)
(declare-fun combine$Field$Mu$$Bool$ ( Field$Mu$ Bool ) Field$Mu$)
(declare-fun combine$Field$Mu$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Field$Mu$ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Field$Mu$)
(declare-fun combine$Field$Mu$$Field$Bool$$ ( Field$Mu$ Field$Bool$ ) Field$Mu$)
(declare-fun combine$Field$Mu$$Field$Int$$ ( Field$Mu$ Field$Int$ ) Field$Mu$)
(declare-fun combine$Field$Mu$$Field$Mu$$ ( Field$Mu$ Field$Mu$ ) Field$Mu$)
(declare-fun combine$Field$Mu$$Field$ref$$ ( Field$Mu$ Field$ref$ ) Field$Mu$)
(declare-fun combine$Field$Mu$$Int$ ( Field$Mu$ Int ) Field$Mu$)
(declare-fun combine$Field$Mu$$ModuleName$ ( Field$Mu$ ModuleName ) Field$Mu$)
(declare-fun combine$Field$Mu$$Mu$ ( Field$Mu$ Mu ) Field$Mu$)
(declare-fun combine$Field$Mu$$PermissionComponent$ ( Field$Mu$ PermissionComponent ) Field$Mu$)
(declare-fun combine$Field$Mu$$ref$ ( Field$Mu$ ref ) Field$Mu$)
(declare-fun combine$Field$Mu$$TypeName$ ( Field$Mu$ TypeName ) Field$Mu$)
(declare-fun combine$Field$ref$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Field$ref$ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Field$ref$)
(declare-fun combine$Field$ref$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Field$ref$ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Field$ref$)
(declare-fun combine$Field$ref$$$@Map@@PermissionComponent@To@Int@@$ ( Field$ref$ $@Map@@PermissionComponent@To@Int@@ ) Field$ref$)
(declare-fun combine$Field$ref$$$@Map@@ref@To@Int@@$ ( Field$ref$ $@Map@@ref@To@Int@@ ) Field$ref$)
(declare-fun combine$Field$ref$$Bool$ ( Field$ref$ Bool ) Field$ref$)
(declare-fun combine$Field$ref$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Field$ref$ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Field$ref$)
(declare-fun combine$Field$ref$$Field$Bool$$ ( Field$ref$ Field$Bool$ ) Field$ref$)
(declare-fun combine$Field$ref$$Field$Int$$ ( Field$ref$ Field$Int$ ) Field$ref$)
(declare-fun combine$Field$ref$$Field$Mu$$ ( Field$ref$ Field$Mu$ ) Field$ref$)
(declare-fun combine$Field$ref$$Field$ref$$ ( Field$ref$ Field$ref$ ) Field$ref$)
(declare-fun combine$Field$ref$$Int$ ( Field$ref$ Int ) Field$ref$)
(declare-fun combine$Field$ref$$ModuleName$ ( Field$ref$ ModuleName ) Field$ref$)
(declare-fun combine$Field$ref$$Mu$ ( Field$ref$ Mu ) Field$ref$)
(declare-fun combine$Field$ref$$PermissionComponent$ ( Field$ref$ PermissionComponent ) Field$ref$)
(declare-fun combine$Field$ref$$ref$ ( Field$ref$ ref ) Field$ref$)
(declare-fun combine$Field$ref$$TypeName$ ( Field$ref$ TypeName ) Field$ref$)
(declare-fun combine$Int$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Int $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Int)
(declare-fun combine$Int$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Int $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Int)
(declare-fun combine$Int$$@Map@@PermissionComponent@To@Int@@$ ( Int $@Map@@PermissionComponent@To@Int@@ ) Int)
(declare-fun combine$Int$$@Map@@ref@To@Int@@$ ( Int $@Map@@ref@To@Int@@ ) Int)
(declare-fun combine$Int$Bool$ ( Int Bool ) Int)
(declare-fun combine$Int$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Int Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Int)
(declare-fun combine$Int$Field$Bool$$ ( Int Field$Bool$ ) Int)
(declare-fun combine$Int$Field$Int$$ ( Int Field$Int$ ) Int)
(declare-fun combine$Int$Field$Mu$$ ( Int Field$Mu$ ) Int)
(declare-fun combine$Int$Field$ref$$ ( Int Field$ref$ ) Int)
(declare-fun combine$Int$Int$ ( Int Int ) Int)
(declare-fun combine$Int$ModuleName$ ( Int ModuleName ) Int)
(declare-fun combine$Int$Mu$ ( Int Mu ) Int)
(declare-fun combine$Int$PermissionComponent$ ( Int PermissionComponent ) Int)
(declare-fun combine$Int$ref$ ( Int ref ) Int)
(declare-fun combine$Int$TypeName$ ( Int TypeName ) Int)
(declare-fun combine$ModuleName$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( ModuleName $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) ModuleName)
(declare-fun combine$ModuleName$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( ModuleName $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) ModuleName)
(declare-fun combine$ModuleName$$@Map@@PermissionComponent@To@Int@@$ ( ModuleName $@Map@@PermissionComponent@To@Int@@ ) ModuleName)
(declare-fun combine$ModuleName$$@Map@@ref@To@Int@@$ ( ModuleName $@Map@@ref@To@Int@@ ) ModuleName)
(declare-fun combine$ModuleName$Bool$ ( ModuleName Bool ) ModuleName)
(declare-fun combine$ModuleName$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( ModuleName Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) ModuleName)
(declare-fun combine$ModuleName$Field$Bool$$ ( ModuleName Field$Bool$ ) ModuleName)
(declare-fun combine$ModuleName$Field$Int$$ ( ModuleName Field$Int$ ) ModuleName)
(declare-fun combine$ModuleName$Field$Mu$$ ( ModuleName Field$Mu$ ) ModuleName)
(declare-fun combine$ModuleName$Field$ref$$ ( ModuleName Field$ref$ ) ModuleName)
(declare-fun combine$ModuleName$Int$ ( ModuleName Int ) ModuleName)
(declare-fun combine$ModuleName$ModuleName$ ( ModuleName ModuleName ) ModuleName)
(declare-fun combine$ModuleName$Mu$ ( ModuleName Mu ) ModuleName)
(declare-fun combine$ModuleName$PermissionComponent$ ( ModuleName PermissionComponent ) ModuleName)
(declare-fun combine$ModuleName$ref$ ( ModuleName ref ) ModuleName)
(declare-fun combine$ModuleName$TypeName$ ( ModuleName TypeName ) ModuleName)
(declare-fun combine$Mu$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Mu $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Mu)
(declare-fun combine$Mu$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Mu $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Mu)
(declare-fun combine$Mu$$@Map@@PermissionComponent@To@Int@@$ ( Mu $@Map@@PermissionComponent@To@Int@@ ) Mu)
(declare-fun combine$Mu$$@Map@@ref@To@Int@@$ ( Mu $@Map@@ref@To@Int@@ ) Mu)
(declare-fun combine$Mu$Bool$ ( Mu Bool ) Mu)
(declare-fun combine$Mu$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Mu Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Mu)
(declare-fun combine$Mu$Field$Bool$$ ( Mu Field$Bool$ ) Mu)
(declare-fun combine$Mu$Field$Int$$ ( Mu Field$Int$ ) Mu)
(declare-fun combine$Mu$Field$Mu$$ ( Mu Field$Mu$ ) Mu)
(declare-fun combine$Mu$Field$ref$$ ( Mu Field$ref$ ) Mu)
(declare-fun combine$Mu$Int$ ( Mu Int ) Mu)
(declare-fun combine$Mu$ModuleName$ ( Mu ModuleName ) Mu)
(declare-fun combine$Mu$Mu$ ( Mu Mu ) Mu)
(declare-fun combine$Mu$PermissionComponent$ ( Mu PermissionComponent ) Mu)
(declare-fun combine$Mu$ref$ ( Mu ref ) Mu)
(declare-fun combine$Mu$TypeName$ ( Mu TypeName ) Mu)
(declare-fun combine$PermissionComponent$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( PermissionComponent $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) PermissionComponent)
(declare-fun combine$PermissionComponent$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( PermissionComponent $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) PermissionComponent)
(declare-fun combine$PermissionComponent$$@Map@@PermissionComponent@To@Int@@$ ( PermissionComponent $@Map@@PermissionComponent@To@Int@@ ) PermissionComponent)
(declare-fun combine$PermissionComponent$$@Map@@ref@To@Int@@$ ( PermissionComponent $@Map@@ref@To@Int@@ ) PermissionComponent)
(declare-fun combine$PermissionComponent$Bool$ ( PermissionComponent Bool ) PermissionComponent)
(declare-fun combine$PermissionComponent$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( PermissionComponent Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) PermissionComponent)
(declare-fun combine$PermissionComponent$Field$Bool$$ ( PermissionComponent Field$Bool$ ) PermissionComponent)
(declare-fun combine$PermissionComponent$Field$Int$$ ( PermissionComponent Field$Int$ ) PermissionComponent)
(declare-fun combine$PermissionComponent$Field$Mu$$ ( PermissionComponent Field$Mu$ ) PermissionComponent)
(declare-fun combine$PermissionComponent$Field$ref$$ ( PermissionComponent Field$ref$ ) PermissionComponent)
(declare-fun combine$PermissionComponent$Int$ ( PermissionComponent Int ) PermissionComponent)
(declare-fun combine$PermissionComponent$ModuleName$ ( PermissionComponent ModuleName ) PermissionComponent)
(declare-fun combine$PermissionComponent$Mu$ ( PermissionComponent Mu ) PermissionComponent)
(declare-fun combine$PermissionComponent$PermissionComponent$ ( PermissionComponent PermissionComponent ) PermissionComponent)
(declare-fun combine$PermissionComponent$ref$ ( PermissionComponent ref ) PermissionComponent)
(declare-fun combine$PermissionComponent$TypeName$ ( PermissionComponent TypeName ) PermissionComponent)
(declare-fun combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( ref $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) ref)
(declare-fun combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( ref $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) ref)
(declare-fun combine$ref$$@Map@@PermissionComponent@To@Int@@$ ( ref $@Map@@PermissionComponent@To@Int@@ ) ref)
(declare-fun combine$ref$$@Map@@ref@To@Int@@$ ( ref $@Map@@ref@To@Int@@ ) ref)
(declare-fun combine$ref$Bool$ ( ref Bool ) ref)
(declare-fun combine$ref$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) ref)
(declare-fun combine$ref$Field$Bool$$ ( ref Field$Bool$ ) ref)
(declare-fun combine$ref$Field$Int$$ ( ref Field$Int$ ) ref)
(declare-fun combine$ref$Field$Mu$$ ( ref Field$Mu$ ) ref)
(declare-fun combine$ref$Field$ref$$ ( ref Field$ref$ ) ref)
(declare-fun combine$ref$Int$ ( ref Int ) ref)
(declare-fun combine$ref$ModuleName$ ( ref ModuleName ) ref)
(declare-fun combine$ref$Mu$ ( ref Mu ) ref)
(declare-fun combine$ref$PermissionComponent$ ( ref PermissionComponent ) ref)
(declare-fun combine$ref$ref$ ( ref ref ) ref)
(declare-fun combine$ref$TypeName$ ( ref TypeName ) ref)
(declare-fun combine$TypeName$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( TypeName $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) TypeName)
(declare-fun combine$TypeName$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( TypeName $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) TypeName)
(declare-fun combine$TypeName$$@Map@@PermissionComponent@To@Int@@$ ( TypeName $@Map@@PermissionComponent@To@Int@@ ) TypeName)
(declare-fun combine$TypeName$$@Map@@ref@To@Int@@$ ( TypeName $@Map@@ref@To@Int@@ ) TypeName)
(declare-fun combine$TypeName$Bool$ ( TypeName Bool ) TypeName)
(declare-fun combine$TypeName$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( TypeName Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) TypeName)
(declare-fun combine$TypeName$Field$Bool$$ ( TypeName Field$Bool$ ) TypeName)
(declare-fun combine$TypeName$Field$Int$$ ( TypeName Field$Int$ ) TypeName)
(declare-fun combine$TypeName$Field$Mu$$ ( TypeName Field$Mu$ ) TypeName)
(declare-fun combine$TypeName$Field$ref$$ ( TypeName Field$ref$ ) TypeName)
(declare-fun combine$TypeName$Int$ ( TypeName Int ) TypeName)
(declare-fun combine$TypeName$ModuleName$ ( TypeName ModuleName ) TypeName)
(declare-fun combine$TypeName$Mu$ ( TypeName Mu ) TypeName)
(declare-fun combine$TypeName$PermissionComponent$ ( TypeName PermissionComponent ) TypeName)
(declare-fun combine$TypeName$ref$ ( TypeName ref ) TypeName)
(declare-fun combine$TypeName$TypeName$ ( TypeName TypeName ) TypeName)
(declare-fun CurrentModule ( ) ModuleName)
(declare-fun DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun DecPerm$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun dtype ( ref ) TypeName)
(declare-fun FactorialActor.q ( ) Field$ref$)
(declare-fun FactorialActorChannel.exp ( ) Field$ref$)
(declare-fun FactorialActorChannel.imp ( ) Field$ref$)
(declare-fun FactorialActorChannel.initExpState ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialActorChannel.initImpState ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialActorChannel.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialActorChannelExpEP.ch ( ) Field$ref$)
(declare-fun FactorialActorChannelExpEP.expch ( ) Field$ref$)
(declare-fun FactorialActorChannelExpEP.state ( ) Field$Int$)
(declare-fun FactorialActorChannelExpEP.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialActorChannelImpEP.ch ( ) Field$ref$)
(declare-fun FactorialActorChannelImpEP.impch ( ) Field$ref$)
(declare-fun FactorialActorChannelImpEP.state ( ) Field$Int$)
(declare-fun FactorialActorChannelImpEP.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialCont.cust ( ) Field$ref$)
(declare-fun FactorialCont.q ( ) Field$ref$)
(declare-fun FactorialCont.v ( ) Field$Int$)
(declare-fun FactorialCont.vo ( ) Field$Int$)
(declare-fun FactorialContChannel.exp ( ) Field$ref$)
(declare-fun FactorialContChannel.imp ( ) Field$ref$)
(declare-fun FactorialContChannel.initExpState ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialContChannel.initImpState ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialContChannel.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialContChannelExpEP.ch ( ) Field$ref$)
(declare-fun FactorialContChannelExpEP.expch ( ) Field$ref$)
(declare-fun FactorialContChannelExpEP.state ( ) Field$Int$)
(declare-fun FactorialContChannelExpEP.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FactorialContChannelImpEP.ch ( ) Field$ref$)
(declare-fun FactorialContChannelImpEP.impch ( ) Field$ref$)
(declare-fun FactorialContChannelImpEP.state ( ) Field$Int$)
(declare-fun FactorialContChannelImpEP.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun forkK ( ) Field$Int$)
(declare-fun Fractions ( Int ) Int)
(declare-fun Future.q ( ) Field$ref$)
(declare-fun Future.sent ( ) Field$ref$)
(declare-fun Future.value ( ) Field$ref$)
(declare-fun FutureChannel.exp ( ) Field$ref$)
(declare-fun FutureChannel.imp ( ) Field$ref$)
(declare-fun FutureChannel.initExpState ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FutureChannel.initImpState ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FutureChannel.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FutureChannelExpEP.ch ( ) Field$ref$)
(declare-fun FutureChannelExpEP.expch ( ) Field$ref$)
(declare-fun FutureChannelExpEP.state ( ) Field$Int$)
(declare-fun FutureChannelExpEP.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun FutureChannelImpEP.ch ( ) Field$ref$)
(declare-fun FutureChannelImpEP.impch ( ) Field$ref$)
(declare-fun FutureChannelImpEP.state ( ) Field$Int$)
(declare-fun FutureChannelImpEP.valid ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun Heap ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun Heap@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun held ( ) Field$Int$)
(declare-fun IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun IncPerm$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun inhaleHeap@_9@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Bool $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Bool $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun ite$$@Map@@PermissionComponent@To@Int@@$ ( Bool $@Map@@PermissionComponent@To@Int@@ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun ite$$@Map@@ref@To@Int@@$ ( Bool $@Map@@ref@To@Int@@ $@Map@@ref@To@Int@@ ) $@Map@@ref@To@Int@@)
(declare-fun ite$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Bool Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun ite$Field$Bool$$ ( Bool Field$Bool$ Field$Bool$ ) Field$Bool$)
(declare-fun ite$Field$Int$$ ( Bool Field$Int$ Field$Int$ ) Field$Int$)
(declare-fun ite$Field$Mu$$ ( Bool Field$Mu$ Field$Mu$ ) Field$Mu$)
(declare-fun ite$Field$ref$$ ( Bool Field$ref$ Field$ref$ ) Field$ref$)
(declare-fun ite$Int$ ( Bool Int Int ) Int)
(declare-fun ite$ModuleName$ ( Bool ModuleName ModuleName ) ModuleName)
(declare-fun ite$Mu$ ( Bool Mu Mu ) Mu)
(declare-fun ite$PermissionComponent$ ( Bool PermissionComponent PermissionComponent ) PermissionComponent)
(declare-fun ite$ref$ ( Bool ref ref ) ref)
(declare-fun ite$TypeName$ ( Bool TypeName TypeName ) TypeName)
(declare-fun joinable ( ) Field$Int$)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Bool$ ) Bool)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Int$ ) Int)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Mu$ ) Mu)
(declare-fun MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$ref$ ) ref)
(declare-fun MapRead$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@PermissionComponent@To@Int@@ PermissionComponent ) Int)
(declare-fun MapRead$$@Map@@ref@To@Int@@$ ( $@Map@@ref@To@Int@@ ref ) Int)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ $@Map@@PermissionComponent@To@Int@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ref Field$Int$ Int ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun MapWrite$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@PermissionComponent@To@Int@@ PermissionComponent Int ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun Mask ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Mask@0 ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)
(declare-fun Message.cust1 ( ) Field$ref$)
(declare-fun Message.inv ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun Message.invFinalResult ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun Message.invResult1 ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun Message.invResult2 ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun Message.invValue ( ) Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)
(declare-fun Message.old1 ( ) Field$ref$)
(declare-fun Message.old2 ( ) Field$ref$)
(declare-fun Message.receiver1 ( ) Field$ref$)
(declare-fun Message.receiver2 ( ) Field$ref$)
(declare-fun Message.receiver3 ( ) Field$ref$)
(declare-fun Message.receiver4 ( ) Field$ref$)
(declare-fun Message.sender1 ( ) Field$ref$)
(declare-fun Message.sender2 ( ) Field$ref$)
(declare-fun Message.sender3 ( ) Field$ref$)
(declare-fun Message.sender4 ( ) Field$ref$)
(declare-fun Message.type ( ) Field$Int$)
(declare-fun Message.v1 ( ) Field$Int$)
(declare-fun Message.vo1 ( ) Field$Int$)
(declare-fun Message.vr1 ( ) Field$Int$)
(declare-fun Message.vr2 ( ) Field$Int$)
(declare-fun Message.vr3 ( ) Field$Int$)
(declare-fun Message@t ( ) TypeName)
(declare-fun module@default ( ) ModuleName)
(declare-fun monitorK ( ) Int)
(declare-fun msg@0 ( ) ref)
(declare-fun mu ( ) Field$Mu$)
(declare-fun nostate ( ) $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)
(declare-fun null ( ) ref)
(declare-fun perm$N ( ) PermissionComponent)
(declare-fun perm$R ( ) PermissionComponent)
(declare-fun Permission$denominator ( ) Int)
(declare-fun Permission$Full ( ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun Permission$FullFraction ( ) Int)
(declare-fun Permission$Zero ( ) $@Map@@PermissionComponent@To@Int@@)
(declare-fun predicateK ( ) Int)
(declare-fun rdheld ( ) Field$Bool$)
(declare-fun this ( ) ref)
(declare-fun whereK@_8 ( ) Int)
(declare-fun ZeroCredits ( ) $@Map@@ref@To@Int@@)
(declare-fun ZeroMask ( ) $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)

;Predicates
(declare-fun $start ( ) Bool)
(declare-fun anon0 ( ) Bool)
(declare-fun anon0_assertion ( ) Bool)
(declare-fun CanAssumeFunctionDefs ( ) Bool)
(declare-fun CanRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Bool)
(declare-fun CanRead$Bool$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Bool$ ) Bool)
(declare-fun CanRead$Int$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Int$ ) Bool)
(declare-fun CanRead$Mu$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$Mu$ ) Bool)
(declare-fun CanRead$ref$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ref Field$ref$ ) Bool)
(declare-fun combine$Bool$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( Bool $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)
(declare-fun combine$Bool$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Bool $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Bool)
(declare-fun combine$Bool$$@Map@@PermissionComponent@To@Int@@$ ( Bool $@Map@@PermissionComponent@To@Int@@ ) Bool)
(declare-fun combine$Bool$$@Map@@ref@To@Int@@$ ( Bool $@Map@@ref@To@Int@@ ) Bool)
(declare-fun combine$Bool$Bool$ ( Bool Bool ) Bool)
(declare-fun combine$Bool$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Bool Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Bool)
(declare-fun combine$Bool$Field$Bool$$ ( Bool Field$Bool$ ) Bool)
(declare-fun combine$Bool$Field$Int$$ ( Bool Field$Int$ ) Bool)
(declare-fun combine$Bool$Field$Mu$$ ( Bool Field$Mu$ ) Bool)
(declare-fun combine$Bool$Field$ref$$ ( Bool Field$ref$ ) Bool)
(declare-fun combine$Bool$Int$ ( Bool Int ) Bool)
(declare-fun combine$Bool$ModuleName$ ( Bool ModuleName ) Bool)
(declare-fun combine$Bool$Mu$ ( Bool Mu ) Bool)
(declare-fun combine$Bool$PermissionComponent$ ( Bool PermissionComponent ) Bool)
(declare-fun combine$Bool$ref$ ( Bool ref ) Bool)
(declare-fun combine$Bool$TypeName$ ( Bool TypeName ) Bool)
(declare-fun IsGoodInhaleState ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)
(declare-fun IsGoodMask ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)
(declare-fun IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)
(declare-fun IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ ) Bool)
(declare-fun IsGoodState$$@Map@@PermissionComponent@To@Int@@$ ( $@Map@@PermissionComponent@To@Int@@ ) Bool)
(declare-fun IsGoodState$$@Map@@ref@To@Int@@$ ( $@Map@@ref@To@Int@@ ) Bool)
(declare-fun IsGoodState$Bool$ ( Bool ) Bool)
(declare-fun IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Bool)
(declare-fun IsGoodState$Field$Bool$$ ( Field$Bool$ ) Bool)
(declare-fun IsGoodState$Field$Int$$ ( Field$Int$ ) Bool)
(declare-fun IsGoodState$Field$Mu$$ ( Field$Mu$ ) Bool)
(declare-fun IsGoodState$Field$ref$$ ( Field$ref$ ) Bool)
(declare-fun IsGoodState$Int$ ( Int ) Bool)
(declare-fun IsGoodState$ModuleName$ ( ModuleName ) Bool)
(declare-fun IsGoodState$Mu$ ( Mu ) Bool)
(declare-fun IsGoodState$PermissionComponent$ ( PermissionComponent ) Bool)
(declare-fun IsGoodState$ref$ ( ref ) Bool)
(declare-fun IsGoodState$TypeName$ ( TypeName ) Bool)
(declare-fun ite$Bool$ ( Bool Bool Bool ) Bool)
(declare-fun MuBelow ( Mu Mu ) Bool)
(declare-fun NonPredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Bool)
(declare-fun NonPredicateField$Bool$ ( Field$Bool$ ) Bool)
(declare-fun NonPredicateField$Int$ ( Field$Int$ ) Bool)
(declare-fun NonPredicateField$Mu$ ( Field$Mu$ ) Bool)
(declare-fun NonPredicateField$ref$ ( Field$ref$ ) Bool)
(declare-fun PreconditionGeneratedEntry ( ) Bool)
(declare-fun PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ( Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ) Bool)
(declare-fun PredicateField$Bool$ ( Field$Bool$ ) Bool)
(declare-fun PredicateField$Int$ ( Field$Int$ ) Bool)
(declare-fun PredicateField$Mu$ ( Field$Mu$ ) Bool)
(declare-fun PredicateField$ref$ ( Field$ref$ ) Bool)
(declare-fun wf ( $@Map@@$T0@@ref@Field$$T0$@To@$T0@@ $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ ) Bool)

;Axioms
   (assert (! (forall ((|i_1| Field$Int$)(|i| ref)(|m_1| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|v_1| Int))(!(= v_1 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_1 i i_1 v_1) i i_1)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_1 i i_1 v_1) i i_1)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_0))
   (assert (! (forall ((|i_13| Field$Int$)(|i_12| ref)(|m_7| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|v_7| $@Map@@PermissionComponent@To@Int@@))(!(= v_7 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_7 i_12 i_13 v_7) i_12 i_13)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_7 i_12 i_13 v_7) i_12 i_13)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_1))
   (assert (! (forall ((|i_24| PermissionComponent)(|m_13| $@Map@@PermissionComponent@To@Int@@)(|v_13| Int))(!(= v_13 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_13 i_24 v_13) i_24)):pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_13 i_24 v_13) i_24)) :qid map_1_$@Map@@PermissionComponent@To@Int@@ :weight 0 )) :named ax_2))
   (assert (! (forall ((|i_27| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_26| ref)(|m_15| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|v_15| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= v_15 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_15 i_26 i_27 v_15) i_26 i_27)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_15 i_26 i_27 v_15) i_26 i_27)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_3))
   (assert (! (forall ((|i_39| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_38| ref)(|m_21| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|v_21| $@Map@@PermissionComponent@To@Int@@))(!(= v_21 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_21 i_38 i_39 v_21) i_38 i_39)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_21 i_38 i_39 v_21) i_38 i_39)) :qid map_1_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_4))
   (assert (! (forall ((|v_10| $@Map@@PermissionComponent@To@Int@@)(|i_19| Field$Int$)(|i_18| ref)(|j_15| Field$ref$)(|j_14| ref)(|m_10| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_10 j_14 j_15) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_10 i_18 i_19 v_10) j_14 j_15)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_10 i_18 i_19 v_10) j_14 j_15)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__ref__Int :weight 0 )) :named ax_5))
   (assert (! (forall ((|v_11| $@Map@@PermissionComponent@To@Int@@)(|i_21| Field$Int$)(|i_20| ref)(|j_17| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|j_16| ref)(|m_11| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_11 j_16 j_17) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_11 i_20 i_21 v_11) j_16 j_17)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_11 i_20 i_21 v_11) j_16 j_17)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Int :weight 0 )) :named ax_6))
   (assert (! (forall ((|v_12| $@Map@@PermissionComponent@To@Int@@)(|i_23| Field$Int$)(|i_22| ref)(|j_19| Field$Mu$)(|j_18| ref)(|m_12| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ m_12 j_18 j_19) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_12 i_22 i_23 v_12) j_18 j_19)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_12 i_22 i_23 v_12) j_18 j_19)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Mu__Int :weight 0 )) :named ax_7))
   (assert (! (forall ((|v_14| Int)(|m_14| $@Map@@PermissionComponent@To@Int@@)(|i_25| PermissionComponent)(|j_20| PermissionComponent))(!(=> (not (= j_20 i_25)) (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ m_14 j_20) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_14 i_25 v_14) j_20))):pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapWrite$$@Map@@PermissionComponent@To@Int@@$ m_14 i_25 v_14) j_20)) :qid map_2_$@Map@@PermissionComponent@To@Int@@ :weight 0 )) :named ax_8))
   (assert (! (forall ((|v_16| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|m_16| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_29| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|j_22| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_28| ref)(|j_21| ref))(!(=> (or (not (= j_22 i_29)) (not (= j_21 i_28))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_16 j_21 j_22) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_16 i_28 i_29 v_16) j_21 j_22))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_16 i_28 i_29 v_16) j_21 j_22)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_9))
   (assert (! (forall ((|v_17| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_31| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_30| ref)(|j_24| Field$Bool$)(|j_23| ref)(|m_17| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ m_17 j_23 j_24) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_17 i_30 i_31 v_17) j_23 j_24)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_17 i_30 i_31 v_17) j_23 j_24)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Bool__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_10))
   (assert (! (forall ((|v_18| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_33| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_32| ref)(|j_26| Field$Int$)(|j_25| ref)(|m_18| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_18 j_25 j_26) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_18 i_32 i_33 v_18) j_25 j_26)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_18 i_32 i_33 v_18) j_25 j_26)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Int__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_11))
   (assert (! (forall ((|v_19| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_35| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_34| ref)(|j_28| Field$ref$)(|j_27| ref)(|m_19| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_19 j_27 j_28) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_19 i_34 i_35 v_19) j_27 j_28)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_19 i_34 i_35 v_19) j_27 j_28)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__ref__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_12))
   (assert (! (forall ((|v_2| Int)(|m_2| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_3| Field$Int$)(|j_1| Field$Int$)(|i_2| ref)(|j| ref))(!(=> (or (not (= j_1 i_3)) (not (= j i_2))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_2 j j_1) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_2 i_2 i_3 v_2) j j_1))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_2 i_2 i_3 v_2) j j_1)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_13))
   (assert (! (forall ((|v_20| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@)(|i_37| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_36| ref)(|j_30| Field$Mu$)(|j_29| ref)(|m_20| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ m_20 j_29 j_30) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_20 i_36 i_37 v_20) j_29 j_30)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_20 i_36 i_37 v_20) j_29 j_30)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Mu__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_14))
   (assert (! (forall ((|v_22| $@Map@@PermissionComponent@To@Int@@)(|m_22| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|i_41| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|j_32| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_40| ref)(|j_31| ref))(!(=> (or (not (= j_32 i_41)) (not (= j_31 i_40))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_22 j_31 j_32) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_22 i_40 i_41 v_22) j_31 j_32))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_22 i_40 i_41 v_22) j_31 j_32)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_15))
   (assert (! (forall ((|v_23| $@Map@@PermissionComponent@To@Int@@)(|i_43| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_42| ref)(|j_34| Field$Bool$)(|j_33| ref)(|m_23| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ m_23 j_33 j_34) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_23 i_42 i_43 v_23) j_33 j_34)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_23 i_42 i_43 v_23) j_33 j_34)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Bool__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_16))
   (assert (! (forall ((|v_24| $@Map@@PermissionComponent@To@Int@@)(|i_45| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_44| ref)(|j_36| Field$Int$)(|j_35| ref)(|m_24| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_24 j_35 j_36) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_24 i_44 i_45 v_24) j_35 j_36)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_24 i_44 i_45 v_24) j_35 j_36)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Int__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_17))
   (assert (! (forall ((|v_25| $@Map@@PermissionComponent@To@Int@@)(|i_47| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_46| ref)(|j_38| Field$ref$)(|j_37| ref)(|m_25| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ m_25 j_37 j_38) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_25 i_46 i_47 v_25) j_37 j_38)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_25 i_46 i_47 v_25) j_37 j_38)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__ref__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_18))
   (assert (! (forall ((|v_26| $@Map@@PermissionComponent@To@Int@@)(|i_49| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|i_48| ref)(|j_40| Field$Mu$)(|j_39| ref)(|m_26| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ m_26 j_39 j_40) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_26 i_48 i_49 v_26) j_39 j_40)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_26 i_48 i_49 v_26) j_39 j_40)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Mu__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@ :weight 0 )) :named ax_19))
   (assert (! (forall ((|v_3| Int)(|i_5| Field$Int$)(|i_4| ref)(|j_3| Field$Bool$)(|j_2| ref)(|m_3| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ m_3 j_2 j_3) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_3 i_4 i_5 v_3) j_2 j_3)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_3 i_4 i_5 v_3) j_2 j_3)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Bool__Int :weight 0 )) :named ax_20))
   (assert (! (forall ((|v_4| Int)(|i_7| Field$Int$)(|i_6| ref)(|j_5| Field$ref$)(|j_4| ref)(|m_4| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ m_4 j_4 j_5) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_4 i_6 i_7 v_4) j_4 j_5)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_4 i_6 i_7 v_4) j_4 j_5)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__ref__Int :weight 0 )) :named ax_21))
   (assert (! (forall ((|v_5| Int)(|i_9| Field$Int$)(|i_8| ref)(|j_7| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$)(|j_6| ref)(|m_5| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ m_5 j_6 j_7) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_5 i_8 i_9 v_5) j_6 j_7)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_5 i_8 i_9 v_5) j_6 j_7)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Int :weight 0 )) :named ax_22))
   (assert (! (forall ((|v_6| Int)(|i_11| Field$Int$)(|i_10| ref)(|j_9| Field$Mu$)(|j_8| ref)(|m_6| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ m_6 j_8 j_9) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_6 i_10 i_11 v_6) j_8 j_9)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ m_6 i_10 i_11 v_6) j_8 j_9)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$T0@@__Mu__Int :weight 0 )) :named ax_23))
   (assert (! (forall ((|v_8| $@Map@@PermissionComponent@To@Int@@)(|m_8| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@)(|i_15| Field$Int$)(|j_11| Field$Int$)(|i_14| ref)(|j_10| ref))(!(=> (or (not (= j_11 i_15)) (not (= j_10 i_14))) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_8 j_10 j_11) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_8 i_14 i_15 v_8) j_10 j_11))):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_8 i_14 i_15 v_8) j_10 j_11)) :qid map_2_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@ :weight 0 )) :named ax_24))
   (assert (! (forall ((|v_9| $@Map@@PermissionComponent@To@Int@@)(|i_17| Field$Int$)(|i_16| ref)(|j_13| Field$Bool$)(|j_12| ref)(|m_9| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ m_9 j_12 j_13) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_9 i_16 i_17 v_9) j_12 j_13)):pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ m_9 i_16 i_17 v_9) j_12 j_13)) :qid map_3_$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@__Bool__Int :weight 0 )) :named ax_25))
   (assert (! (not (= FactorialActorChannel.exp FactorialActor.q)) :named ax_26))
   (assert (! (not (= FactorialActorChannel.exp FactorialActor.q)) :named ax_27))
   (assert (! (not (= FactorialActorChannel.imp FactorialActor.q)) :named ax_28))
   (assert (! (not (= FactorialActorChannel.imp FactorialActor.q)) :named ax_29))
   (assert (! (not (= FactorialActorChannel.imp FactorialActorChannel.exp)) :named ax_30))
   (assert (! (not (= FactorialActorChannel.imp FactorialActorChannel.exp)) :named ax_31))
   (assert (! (not (= FactorialActorChannel.initImpState FactorialActorChannel.initExpState)) :named ax_32))
   (assert (! (not (= FactorialActorChannel.initImpState FactorialActorChannel.initExpState)) :named ax_33))
   (assert (! (not (= FactorialActorChannel.valid FactorialActorChannel.initExpState)) :named ax_34))
   (assert (! (not (= FactorialActorChannel.valid FactorialActorChannel.initExpState)) :named ax_35))
   (assert (! (not (= FactorialActorChannel.valid FactorialActorChannel.initImpState)) :named ax_36))
   (assert (! (not (= FactorialActorChannel.valid FactorialActorChannel.initImpState)) :named ax_37))
   (assert (! (not (= FactorialActorChannelExpEP.ch FactorialActor.q)) :named ax_38))
   (assert (! (not (= FactorialActorChannelExpEP.ch FactorialActor.q)) :named ax_39))
   (assert (! (not (= FactorialActorChannelExpEP.ch FactorialActorChannel.exp)) :named ax_40))
   (assert (! (not (= FactorialActorChannelExpEP.ch FactorialActorChannel.exp)) :named ax_41))
   (assert (! (not (= FactorialActorChannelExpEP.ch FactorialActorChannel.imp)) :named ax_42))
   (assert (! (not (= FactorialActorChannelExpEP.ch FactorialActorChannel.imp)) :named ax_43))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActor.q)) :named ax_44))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActor.q)) :named ax_45))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActorChannel.exp)) :named ax_46))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActorChannel.exp)) :named ax_47))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActorChannel.imp)) :named ax_48))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActorChannel.imp)) :named ax_49))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActorChannelExpEP.ch)) :named ax_50))
   (assert (! (not (= FactorialActorChannelExpEP.expch FactorialActorChannelExpEP.ch)) :named ax_51))
   (assert (! (not (= FactorialActorChannelExpEP.valid FactorialActorChannel.initExpState)) :named ax_52))
   (assert (! (not (= FactorialActorChannelExpEP.valid FactorialActorChannel.initExpState)) :named ax_53))
   (assert (! (not (= FactorialActorChannelExpEP.valid FactorialActorChannel.initImpState)) :named ax_54))
   (assert (! (not (= FactorialActorChannelExpEP.valid FactorialActorChannel.initImpState)) :named ax_55))
   (assert (! (not (= FactorialActorChannelExpEP.valid FactorialActorChannel.valid)) :named ax_56))
   (assert (! (not (= FactorialActorChannelExpEP.valid FactorialActorChannel.valid)) :named ax_57))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActor.q)) :named ax_58))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActor.q)) :named ax_59))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannel.exp)) :named ax_60))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannel.exp)) :named ax_61))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannel.imp)) :named ax_62))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannel.imp)) :named ax_63))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannelExpEP.ch)) :named ax_64))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannelExpEP.ch)) :named ax_65))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannelExpEP.expch)) :named ax_66))
   (assert (! (not (= FactorialActorChannelImpEP.ch FactorialActorChannelExpEP.expch)) :named ax_67))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActor.q)) :named ax_68))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActor.q)) :named ax_69))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannel.exp)) :named ax_70))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannel.exp)) :named ax_71))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannel.imp)) :named ax_72))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannel.imp)) :named ax_73))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannelExpEP.ch)) :named ax_74))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannelExpEP.ch)) :named ax_75))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannelExpEP.expch)) :named ax_76))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannelExpEP.expch)) :named ax_77))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannelImpEP.ch)) :named ax_78))
   (assert (! (not (= FactorialActorChannelImpEP.impch FactorialActorChannelImpEP.ch)) :named ax_79))
   (assert (! (not (= FactorialActorChannelImpEP.state FactorialActorChannelExpEP.state)) :named ax_80))
   (assert (! (not (= FactorialActorChannelImpEP.state FactorialActorChannelExpEP.state)) :named ax_81))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannel.initExpState)) :named ax_82))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannel.initExpState)) :named ax_83))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannel.initImpState)) :named ax_84))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannel.initImpState)) :named ax_85))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannel.valid)) :named ax_86))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannel.valid)) :named ax_87))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannelExpEP.valid)) :named ax_88))
   (assert (! (not (= FactorialActorChannelImpEP.valid FactorialActorChannelExpEP.valid)) :named ax_89))
   (assert (! (not (= FactorialCont.cust FactorialActor.q)) :named ax_90))
   (assert (! (not (= FactorialCont.cust FactorialActor.q)) :named ax_91))
   (assert (! (not (= FactorialCont.cust FactorialActorChannel.exp)) :named ax_92))
   (assert (! (not (= FactorialCont.cust FactorialActorChannel.exp)) :named ax_93))
   (assert (! (not (= FactorialCont.cust FactorialActorChannel.imp)) :named ax_94))
   (assert (! (not (= FactorialCont.cust FactorialActorChannel.imp)) :named ax_95))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelExpEP.ch)) :named ax_96))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelExpEP.ch)) :named ax_97))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelExpEP.expch)) :named ax_98))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelExpEP.expch)) :named ax_99))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelImpEP.ch)) :named ax_100))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelImpEP.ch)) :named ax_101))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelImpEP.impch)) :named ax_102))
   (assert (! (not (= FactorialCont.cust FactorialActorChannelImpEP.impch)) :named ax_103))
   (assert (! (not (= FactorialCont.q FactorialActor.q)) :named ax_104))
   (assert (! (not (= FactorialCont.q FactorialActor.q)) :named ax_105))
   (assert (! (not (= FactorialCont.q FactorialActorChannel.exp)) :named ax_106))
   (assert (! (not (= FactorialCont.q FactorialActorChannel.exp)) :named ax_107))
   (assert (! (not (= FactorialCont.q FactorialActorChannel.imp)) :named ax_108))
   (assert (! (not (= FactorialCont.q FactorialActorChannel.imp)) :named ax_109))
   (assert (! (not (= FactorialCont.q FactorialActorChannelExpEP.ch)) :named ax_110))
   (assert (! (not (= FactorialCont.q FactorialActorChannelExpEP.ch)) :named ax_111))
   (assert (! (not (= FactorialCont.q FactorialActorChannelExpEP.expch)) :named ax_112))
   (assert (! (not (= FactorialCont.q FactorialActorChannelExpEP.expch)) :named ax_113))
   (assert (! (not (= FactorialCont.q FactorialActorChannelImpEP.ch)) :named ax_114))
   (assert (! (not (= FactorialCont.q FactorialActorChannelImpEP.ch)) :named ax_115))
   (assert (! (not (= FactorialCont.q FactorialActorChannelImpEP.impch)) :named ax_116))
   (assert (! (not (= FactorialCont.q FactorialActorChannelImpEP.impch)) :named ax_117))
   (assert (! (not (= FactorialCont.q FactorialCont.cust)) :named ax_118))
   (assert (! (not (= FactorialCont.q FactorialCont.cust)) :named ax_119))
   (assert (! (not (= FactorialCont.v FactorialActorChannelExpEP.state)) :named ax_120))
   (assert (! (not (= FactorialCont.v FactorialActorChannelExpEP.state)) :named ax_121))
   (assert (! (not (= FactorialCont.v FactorialActorChannelImpEP.state)) :named ax_122))
   (assert (! (not (= FactorialCont.v FactorialActorChannelImpEP.state)) :named ax_123))
   (assert (! (not (= FactorialCont.vo FactorialActorChannelExpEP.state)) :named ax_124))
   (assert (! (not (= FactorialCont.vo FactorialActorChannelExpEP.state)) :named ax_125))
   (assert (! (not (= FactorialCont.vo FactorialActorChannelImpEP.state)) :named ax_126))
   (assert (! (not (= FactorialCont.vo FactorialActorChannelImpEP.state)) :named ax_127))
   (assert (! (not (= FactorialCont.vo FactorialCont.v)) :named ax_128))
   (assert (! (not (= FactorialCont.vo FactorialCont.v)) :named ax_129))
   (assert (! (not (= FactorialContChannel.exp FactorialActor.q)) :named ax_130))
   (assert (! (not (= FactorialContChannel.exp FactorialActor.q)) :named ax_131))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannel.exp)) :named ax_132))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannel.exp)) :named ax_133))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannel.imp)) :named ax_134))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannel.imp)) :named ax_135))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelExpEP.ch)) :named ax_136))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelExpEP.ch)) :named ax_137))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelExpEP.expch)) :named ax_138))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelExpEP.expch)) :named ax_139))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelImpEP.ch)) :named ax_140))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelImpEP.ch)) :named ax_141))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelImpEP.impch)) :named ax_142))
   (assert (! (not (= FactorialContChannel.exp FactorialActorChannelImpEP.impch)) :named ax_143))
   (assert (! (not (= FactorialContChannel.exp FactorialCont.cust)) :named ax_144))
   (assert (! (not (= FactorialContChannel.exp FactorialCont.cust)) :named ax_145))
   (assert (! (not (= FactorialContChannel.exp FactorialCont.q)) :named ax_146))
   (assert (! (not (= FactorialContChannel.exp FactorialCont.q)) :named ax_147))
   (assert (! (not (= FactorialContChannel.imp FactorialActor.q)) :named ax_148))
   (assert (! (not (= FactorialContChannel.imp FactorialActor.q)) :named ax_149))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannel.exp)) :named ax_150))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannel.exp)) :named ax_151))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannel.imp)) :named ax_152))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannel.imp)) :named ax_153))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelExpEP.ch)) :named ax_154))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelExpEP.ch)) :named ax_155))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelExpEP.expch)) :named ax_156))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelExpEP.expch)) :named ax_157))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelImpEP.ch)) :named ax_158))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelImpEP.ch)) :named ax_159))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelImpEP.impch)) :named ax_160))
   (assert (! (not (= FactorialContChannel.imp FactorialActorChannelImpEP.impch)) :named ax_161))
   (assert (! (not (= FactorialContChannel.imp FactorialCont.cust)) :named ax_162))
   (assert (! (not (= FactorialContChannel.imp FactorialCont.cust)) :named ax_163))
   (assert (! (not (= FactorialContChannel.imp FactorialCont.q)) :named ax_164))
   (assert (! (not (= FactorialContChannel.imp FactorialCont.q)) :named ax_165))
   (assert (! (not (= FactorialContChannel.imp FactorialContChannel.exp)) :named ax_166))
   (assert (! (not (= FactorialContChannel.imp FactorialContChannel.exp)) :named ax_167))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannel.initExpState)) :named ax_168))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannel.initExpState)) :named ax_169))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannel.initImpState)) :named ax_170))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannel.initImpState)) :named ax_171))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannel.valid)) :named ax_172))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannel.valid)) :named ax_173))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannelExpEP.valid)) :named ax_174))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannelExpEP.valid)) :named ax_175))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannelImpEP.valid)) :named ax_176))
   (assert (! (not (= FactorialContChannel.initExpState FactorialActorChannelImpEP.valid)) :named ax_177))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannel.initExpState)) :named ax_178))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannel.initExpState)) :named ax_179))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannel.initImpState)) :named ax_180))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannel.initImpState)) :named ax_181))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannel.valid)) :named ax_182))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannel.valid)) :named ax_183))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannelExpEP.valid)) :named ax_184))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannelExpEP.valid)) :named ax_185))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannelImpEP.valid)) :named ax_186))
   (assert (! (not (= FactorialContChannel.initImpState FactorialActorChannelImpEP.valid)) :named ax_187))
   (assert (! (not (= FactorialContChannel.initImpState FactorialContChannel.initExpState)) :named ax_188))
   (assert (! (not (= FactorialContChannel.initImpState FactorialContChannel.initExpState)) :named ax_189))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannel.initExpState)) :named ax_190))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannel.initExpState)) :named ax_191))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannel.initImpState)) :named ax_192))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannel.initImpState)) :named ax_193))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannel.valid)) :named ax_194))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannel.valid)) :named ax_195))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannelExpEP.valid)) :named ax_196))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannelExpEP.valid)) :named ax_197))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannelImpEP.valid)) :named ax_198))
   (assert (! (not (= FactorialContChannel.valid FactorialActorChannelImpEP.valid)) :named ax_199))
   (assert (! (not (= FactorialContChannel.valid FactorialContChannel.initExpState)) :named ax_200))
   (assert (! (not (= FactorialContChannel.valid FactorialContChannel.initExpState)) :named ax_201))
   (assert (! (not (= FactorialContChannel.valid FactorialContChannel.initImpState)) :named ax_202))
   (assert (! (not (= FactorialContChannel.valid FactorialContChannel.initImpState)) :named ax_203))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActor.q)) :named ax_204))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActor.q)) :named ax_205))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannel.exp)) :named ax_206))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannel.exp)) :named ax_207))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannel.imp)) :named ax_208))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannel.imp)) :named ax_209))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelExpEP.ch)) :named ax_210))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelExpEP.ch)) :named ax_211))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelExpEP.expch)) :named ax_212))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelExpEP.expch)) :named ax_213))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelImpEP.ch)) :named ax_214))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelImpEP.ch)) :named ax_215))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelImpEP.impch)) :named ax_216))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialActorChannelImpEP.impch)) :named ax_217))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialCont.cust)) :named ax_218))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialCont.cust)) :named ax_219))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialCont.q)) :named ax_220))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialCont.q)) :named ax_221))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialContChannel.exp)) :named ax_222))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialContChannel.exp)) :named ax_223))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialContChannel.imp)) :named ax_224))
   (assert (! (not (= FactorialContChannelExpEP.ch FactorialContChannel.imp)) :named ax_225))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActor.q)) :named ax_226))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActor.q)) :named ax_227))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannel.exp)) :named ax_228))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannel.exp)) :named ax_229))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannel.imp)) :named ax_230))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannel.imp)) :named ax_231))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelExpEP.ch)) :named ax_232))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelExpEP.ch)) :named ax_233))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelExpEP.expch)) :named ax_234))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelExpEP.expch)) :named ax_235))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelImpEP.ch)) :named ax_236))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelImpEP.ch)) :named ax_237))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelImpEP.impch)) :named ax_238))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialActorChannelImpEP.impch)) :named ax_239))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialCont.cust)) :named ax_240))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialCont.cust)) :named ax_241))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialCont.q)) :named ax_242))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialCont.q)) :named ax_243))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialContChannel.exp)) :named ax_244))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialContChannel.exp)) :named ax_245))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialContChannel.imp)) :named ax_246))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialContChannel.imp)) :named ax_247))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialContChannelExpEP.ch)) :named ax_248))
   (assert (! (not (= FactorialContChannelExpEP.expch FactorialContChannelExpEP.ch)) :named ax_249))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialActorChannelExpEP.state)) :named ax_250))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialActorChannelExpEP.state)) :named ax_251))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialActorChannelImpEP.state)) :named ax_252))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialActorChannelImpEP.state)) :named ax_253))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialCont.v)) :named ax_254))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialCont.v)) :named ax_255))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialCont.vo)) :named ax_256))
   (assert (! (not (= FactorialContChannelExpEP.state FactorialCont.vo)) :named ax_257))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannel.initExpState)) :named ax_258))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannel.initExpState)) :named ax_259))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannel.initImpState)) :named ax_260))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannel.initImpState)) :named ax_261))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannel.valid)) :named ax_262))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannel.valid)) :named ax_263))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannelExpEP.valid)) :named ax_264))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannelExpEP.valid)) :named ax_265))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannelImpEP.valid)) :named ax_266))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialActorChannelImpEP.valid)) :named ax_267))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialContChannel.initExpState)) :named ax_268))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialContChannel.initExpState)) :named ax_269))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialContChannel.initImpState)) :named ax_270))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialContChannel.initImpState)) :named ax_271))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialContChannel.valid)) :named ax_272))
   (assert (! (not (= FactorialContChannelExpEP.valid FactorialContChannel.valid)) :named ax_273))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActor.q)) :named ax_274))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActor.q)) :named ax_275))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannel.exp)) :named ax_276))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannel.exp)) :named ax_277))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannel.imp)) :named ax_278))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannel.imp)) :named ax_279))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelExpEP.ch)) :named ax_280))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelExpEP.ch)) :named ax_281))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelExpEP.expch)) :named ax_282))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelExpEP.expch)) :named ax_283))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelImpEP.ch)) :named ax_284))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelImpEP.ch)) :named ax_285))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelImpEP.impch)) :named ax_286))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialActorChannelImpEP.impch)) :named ax_287))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialCont.cust)) :named ax_288))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialCont.cust)) :named ax_289))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialCont.q)) :named ax_290))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialCont.q)) :named ax_291))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannel.exp)) :named ax_292))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannel.exp)) :named ax_293))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannel.imp)) :named ax_294))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannel.imp)) :named ax_295))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannelExpEP.ch)) :named ax_296))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannelExpEP.ch)) :named ax_297))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannelExpEP.expch)) :named ax_298))
   (assert (! (not (= FactorialContChannelImpEP.ch FactorialContChannelExpEP.expch)) :named ax_299))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActor.q)) :named ax_300))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActor.q)) :named ax_301))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannel.exp)) :named ax_302))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannel.exp)) :named ax_303))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannel.imp)) :named ax_304))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannel.imp)) :named ax_305))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelExpEP.ch)) :named ax_306))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelExpEP.ch)) :named ax_307))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelExpEP.expch)) :named ax_308))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelExpEP.expch)) :named ax_309))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelImpEP.ch)) :named ax_310))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelImpEP.ch)) :named ax_311))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelImpEP.impch)) :named ax_312))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialActorChannelImpEP.impch)) :named ax_313))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialCont.cust)) :named ax_314))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialCont.cust)) :named ax_315))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialCont.q)) :named ax_316))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialCont.q)) :named ax_317))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannel.exp)) :named ax_318))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannel.exp)) :named ax_319))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannel.imp)) :named ax_320))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannel.imp)) :named ax_321))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannelExpEP.ch)) :named ax_322))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannelExpEP.ch)) :named ax_323))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannelExpEP.expch)) :named ax_324))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannelExpEP.expch)) :named ax_325))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannelImpEP.ch)) :named ax_326))
   (assert (! (not (= FactorialContChannelImpEP.impch FactorialContChannelImpEP.ch)) :named ax_327))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialActorChannelExpEP.state)) :named ax_328))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialActorChannelExpEP.state)) :named ax_329))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialActorChannelImpEP.state)) :named ax_330))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialActorChannelImpEP.state)) :named ax_331))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialCont.v)) :named ax_332))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialCont.v)) :named ax_333))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialCont.vo)) :named ax_334))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialCont.vo)) :named ax_335))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialContChannelExpEP.state)) :named ax_336))
   (assert (! (not (= FactorialContChannelImpEP.state FactorialContChannelExpEP.state)) :named ax_337))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannel.initExpState)) :named ax_338))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannel.initExpState)) :named ax_339))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannel.initImpState)) :named ax_340))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannel.initImpState)) :named ax_341))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannel.valid)) :named ax_342))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannel.valid)) :named ax_343))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannelExpEP.valid)) :named ax_344))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannelExpEP.valid)) :named ax_345))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannelImpEP.valid)) :named ax_346))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialActorChannelImpEP.valid)) :named ax_347))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannel.initExpState)) :named ax_348))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannel.initExpState)) :named ax_349))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannel.initImpState)) :named ax_350))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannel.initImpState)) :named ax_351))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannel.valid)) :named ax_352))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannel.valid)) :named ax_353))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannelExpEP.valid)) :named ax_354))
   (assert (! (not (= FactorialContChannelImpEP.valid FactorialContChannelExpEP.valid)) :named ax_355))
   (assert (! (not (= forkK FactorialActorChannelExpEP.state)) :named ax_356))
   (assert (! (not (= forkK FactorialActorChannelExpEP.state)) :named ax_357))
   (assert (! (not (= forkK FactorialActorChannelImpEP.state)) :named ax_358))
   (assert (! (not (= forkK FactorialActorChannelImpEP.state)) :named ax_359))
   (assert (! (not (= forkK FactorialCont.v)) :named ax_360))
   (assert (! (not (= forkK FactorialCont.v)) :named ax_361))
   (assert (! (not (= forkK FactorialCont.vo)) :named ax_362))
   (assert (! (not (= forkK FactorialCont.vo)) :named ax_363))
   (assert (! (not (= forkK FactorialContChannelExpEP.state)) :named ax_364))
   (assert (! (not (= forkK FactorialContChannelExpEP.state)) :named ax_365))
   (assert (! (not (= forkK FactorialContChannelImpEP.state)) :named ax_366))
   (assert (! (not (= forkK FactorialContChannelImpEP.state)) :named ax_367))
   (assert (! (not (= Future.q FactorialActor.q)) :named ax_368))
   (assert (! (not (= Future.q FactorialActor.q)) :named ax_369))
   (assert (! (not (= Future.q FactorialActorChannel.exp)) :named ax_370))
   (assert (! (not (= Future.q FactorialActorChannel.exp)) :named ax_371))
   (assert (! (not (= Future.q FactorialActorChannel.imp)) :named ax_372))
   (assert (! (not (= Future.q FactorialActorChannel.imp)) :named ax_373))
   (assert (! (not (= Future.q FactorialActorChannelExpEP.ch)) :named ax_374))
   (assert (! (not (= Future.q FactorialActorChannelExpEP.ch)) :named ax_375))
   (assert (! (not (= Future.q FactorialActorChannelExpEP.expch)) :named ax_376))
   (assert (! (not (= Future.q FactorialActorChannelExpEP.expch)) :named ax_377))
   (assert (! (not (= Future.q FactorialActorChannelImpEP.ch)) :named ax_378))
   (assert (! (not (= Future.q FactorialActorChannelImpEP.ch)) :named ax_379))
   (assert (! (not (= Future.q FactorialActorChannelImpEP.impch)) :named ax_380))
   (assert (! (not (= Future.q FactorialActorChannelImpEP.impch)) :named ax_381))
   (assert (! (not (= Future.q FactorialCont.cust)) :named ax_382))
   (assert (! (not (= Future.q FactorialCont.cust)) :named ax_383))
   (assert (! (not (= Future.q FactorialCont.q)) :named ax_384))
   (assert (! (not (= Future.q FactorialCont.q)) :named ax_385))
   (assert (! (not (= Future.q FactorialContChannel.exp)) :named ax_386))
   (assert (! (not (= Future.q FactorialContChannel.exp)) :named ax_387))
   (assert (! (not (= Future.q FactorialContChannel.imp)) :named ax_388))
   (assert (! (not (= Future.q FactorialContChannel.imp)) :named ax_389))
   (assert (! (not (= Future.q FactorialContChannelExpEP.ch)) :named ax_390))
   (assert (! (not (= Future.q FactorialContChannelExpEP.ch)) :named ax_391))
   (assert (! (not (= Future.q FactorialContChannelExpEP.expch)) :named ax_392))
   (assert (! (not (= Future.q FactorialContChannelExpEP.expch)) :named ax_393))
   (assert (! (not (= Future.q FactorialContChannelImpEP.ch)) :named ax_394))
   (assert (! (not (= Future.q FactorialContChannelImpEP.ch)) :named ax_395))
   (assert (! (not (= Future.q FactorialContChannelImpEP.impch)) :named ax_396))
   (assert (! (not (= Future.q FactorialContChannelImpEP.impch)) :named ax_397))
   (assert (! (not (= Future.sent FactorialActor.q)) :named ax_398))
   (assert (! (not (= Future.sent FactorialActor.q)) :named ax_399))
   (assert (! (not (= Future.sent FactorialActorChannel.exp)) :named ax_400))
   (assert (! (not (= Future.sent FactorialActorChannel.exp)) :named ax_401))
   (assert (! (not (= Future.sent FactorialActorChannel.imp)) :named ax_402))
   (assert (! (not (= Future.sent FactorialActorChannel.imp)) :named ax_403))
   (assert (! (not (= Future.sent FactorialActorChannelExpEP.ch)) :named ax_404))
   (assert (! (not (= Future.sent FactorialActorChannelExpEP.ch)) :named ax_405))
   (assert (! (not (= Future.sent FactorialActorChannelExpEP.expch)) :named ax_406))
   (assert (! (not (= Future.sent FactorialActorChannelExpEP.expch)) :named ax_407))
   (assert (! (not (= Future.sent FactorialActorChannelImpEP.ch)) :named ax_408))
   (assert (! (not (= Future.sent FactorialActorChannelImpEP.ch)) :named ax_409))
   (assert (! (not (= Future.sent FactorialActorChannelImpEP.impch)) :named ax_410))
   (assert (! (not (= Future.sent FactorialActorChannelImpEP.impch)) :named ax_411))
   (assert (! (not (= Future.sent FactorialCont.cust)) :named ax_412))
   (assert (! (not (= Future.sent FactorialCont.cust)) :named ax_413))
   (assert (! (not (= Future.sent FactorialCont.q)) :named ax_414))
   (assert (! (not (= Future.sent FactorialCont.q)) :named ax_415))
   (assert (! (not (= Future.sent FactorialContChannel.exp)) :named ax_416))
   (assert (! (not (= Future.sent FactorialContChannel.exp)) :named ax_417))
   (assert (! (not (= Future.sent FactorialContChannel.imp)) :named ax_418))
   (assert (! (not (= Future.sent FactorialContChannel.imp)) :named ax_419))
   (assert (! (not (= Future.sent FactorialContChannelExpEP.ch)) :named ax_420))
   (assert (! (not (= Future.sent FactorialContChannelExpEP.ch)) :named ax_421))
   (assert (! (not (= Future.sent FactorialContChannelExpEP.expch)) :named ax_422))
   (assert (! (not (= Future.sent FactorialContChannelExpEP.expch)) :named ax_423))
   (assert (! (not (= Future.sent FactorialContChannelImpEP.ch)) :named ax_424))
   (assert (! (not (= Future.sent FactorialContChannelImpEP.ch)) :named ax_425))
   (assert (! (not (= Future.sent FactorialContChannelImpEP.impch)) :named ax_426))
   (assert (! (not (= Future.sent FactorialContChannelImpEP.impch)) :named ax_427))
   (assert (! (not (= Future.sent Future.q)) :named ax_428))
   (assert (! (not (= Future.sent Future.q)) :named ax_429))
   (assert (! (not (= Future.value FactorialActor.q)) :named ax_430))
   (assert (! (not (= Future.value FactorialActor.q)) :named ax_431))
   (assert (! (not (= Future.value FactorialActorChannel.exp)) :named ax_432))
   (assert (! (not (= Future.value FactorialActorChannel.exp)) :named ax_433))
   (assert (! (not (= Future.value FactorialActorChannel.imp)) :named ax_434))
   (assert (! (not (= Future.value FactorialActorChannel.imp)) :named ax_435))
   (assert (! (not (= Future.value FactorialActorChannelExpEP.ch)) :named ax_436))
   (assert (! (not (= Future.value FactorialActorChannelExpEP.ch)) :named ax_437))
   (assert (! (not (= Future.value FactorialActorChannelExpEP.expch)) :named ax_438))
   (assert (! (not (= Future.value FactorialActorChannelExpEP.expch)) :named ax_439))
   (assert (! (not (= Future.value FactorialActorChannelImpEP.ch)) :named ax_440))
   (assert (! (not (= Future.value FactorialActorChannelImpEP.ch)) :named ax_441))
   (assert (! (not (= Future.value FactorialActorChannelImpEP.impch)) :named ax_442))
   (assert (! (not (= Future.value FactorialActorChannelImpEP.impch)) :named ax_443))
   (assert (! (not (= Future.value FactorialCont.cust)) :named ax_444))
   (assert (! (not (= Future.value FactorialCont.cust)) :named ax_445))
   (assert (! (not (= Future.value FactorialCont.q)) :named ax_446))
   (assert (! (not (= Future.value FactorialCont.q)) :named ax_447))
   (assert (! (not (= Future.value FactorialContChannel.exp)) :named ax_448))
   (assert (! (not (= Future.value FactorialContChannel.exp)) :named ax_449))
   (assert (! (not (= Future.value FactorialContChannel.imp)) :named ax_450))
   (assert (! (not (= Future.value FactorialContChannel.imp)) :named ax_451))
   (assert (! (not (= Future.value FactorialContChannelExpEP.ch)) :named ax_452))
   (assert (! (not (= Future.value FactorialContChannelExpEP.ch)) :named ax_453))
   (assert (! (not (= Future.value FactorialContChannelExpEP.expch)) :named ax_454))
   (assert (! (not (= Future.value FactorialContChannelExpEP.expch)) :named ax_455))
   (assert (! (not (= Future.value FactorialContChannelImpEP.ch)) :named ax_456))
   (assert (! (not (= Future.value FactorialContChannelImpEP.ch)) :named ax_457))
   (assert (! (not (= Future.value FactorialContChannelImpEP.impch)) :named ax_458))
   (assert (! (not (= Future.value FactorialContChannelImpEP.impch)) :named ax_459))
   (assert (! (not (= Future.value Future.q)) :named ax_460))
   (assert (! (not (= Future.value Future.q)) :named ax_461))
   (assert (! (not (= Future.value Future.sent)) :named ax_462))
   (assert (! (not (= Future.value Future.sent)) :named ax_463))
   (assert (! (not (= FutureChannel.exp FactorialActor.q)) :named ax_464))
   (assert (! (not (= FutureChannel.exp FactorialActor.q)) :named ax_465))
   (assert (! (not (= FutureChannel.exp FactorialActorChannel.exp)) :named ax_466))
   (assert (! (not (= FutureChannel.exp FactorialActorChannel.exp)) :named ax_467))
   (assert (! (not (= FutureChannel.exp FactorialActorChannel.imp)) :named ax_468))
   (assert (! (not (= FutureChannel.exp FactorialActorChannel.imp)) :named ax_469))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelExpEP.ch)) :named ax_470))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelExpEP.ch)) :named ax_471))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelExpEP.expch)) :named ax_472))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelExpEP.expch)) :named ax_473))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelImpEP.ch)) :named ax_474))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelImpEP.ch)) :named ax_475))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelImpEP.impch)) :named ax_476))
   (assert (! (not (= FutureChannel.exp FactorialActorChannelImpEP.impch)) :named ax_477))
   (assert (! (not (= FutureChannel.exp FactorialCont.cust)) :named ax_478))
   (assert (! (not (= FutureChannel.exp FactorialCont.cust)) :named ax_479))
   (assert (! (not (= FutureChannel.exp FactorialCont.q)) :named ax_480))
   (assert (! (not (= FutureChannel.exp FactorialCont.q)) :named ax_481))
   (assert (! (not (= FutureChannel.exp FactorialContChannel.exp)) :named ax_482))
   (assert (! (not (= FutureChannel.exp FactorialContChannel.exp)) :named ax_483))
   (assert (! (not (= FutureChannel.exp FactorialContChannel.imp)) :named ax_484))
   (assert (! (not (= FutureChannel.exp FactorialContChannel.imp)) :named ax_485))
   (assert (! (not (= FutureChannel.exp FactorialContChannelExpEP.ch)) :named ax_486))
   (assert (! (not (= FutureChannel.exp FactorialContChannelExpEP.ch)) :named ax_487))
   (assert (! (not (= FutureChannel.exp FactorialContChannelExpEP.expch)) :named ax_488))
   (assert (! (not (= FutureChannel.exp FactorialContChannelExpEP.expch)) :named ax_489))
   (assert (! (not (= FutureChannel.exp FactorialContChannelImpEP.ch)) :named ax_490))
   (assert (! (not (= FutureChannel.exp FactorialContChannelImpEP.ch)) :named ax_491))
   (assert (! (not (= FutureChannel.exp FactorialContChannelImpEP.impch)) :named ax_492))
   (assert (! (not (= FutureChannel.exp FactorialContChannelImpEP.impch)) :named ax_493))
   (assert (! (not (= FutureChannel.exp Future.q)) :named ax_494))
   (assert (! (not (= FutureChannel.exp Future.q)) :named ax_495))
   (assert (! (not (= FutureChannel.exp Future.sent)) :named ax_496))
   (assert (! (not (= FutureChannel.exp Future.sent)) :named ax_497))
   (assert (! (not (= FutureChannel.exp Future.value)) :named ax_498))
   (assert (! (not (= FutureChannel.exp Future.value)) :named ax_499))
   (assert (! (not (= FutureChannel.imp FactorialActor.q)) :named ax_500))
   (assert (! (not (= FutureChannel.imp FactorialActor.q)) :named ax_501))
   (assert (! (not (= FutureChannel.imp FactorialActorChannel.exp)) :named ax_502))
   (assert (! (not (= FutureChannel.imp FactorialActorChannel.exp)) :named ax_503))
   (assert (! (not (= FutureChannel.imp FactorialActorChannel.imp)) :named ax_504))
   (assert (! (not (= FutureChannel.imp FactorialActorChannel.imp)) :named ax_505))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelExpEP.ch)) :named ax_506))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelExpEP.ch)) :named ax_507))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelExpEP.expch)) :named ax_508))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelExpEP.expch)) :named ax_509))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelImpEP.ch)) :named ax_510))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelImpEP.ch)) :named ax_511))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelImpEP.impch)) :named ax_512))
   (assert (! (not (= FutureChannel.imp FactorialActorChannelImpEP.impch)) :named ax_513))
   (assert (! (not (= FutureChannel.imp FactorialCont.cust)) :named ax_514))
   (assert (! (not (= FutureChannel.imp FactorialCont.cust)) :named ax_515))
   (assert (! (not (= FutureChannel.imp FactorialCont.q)) :named ax_516))
   (assert (! (not (= FutureChannel.imp FactorialCont.q)) :named ax_517))
   (assert (! (not (= FutureChannel.imp FactorialContChannel.exp)) :named ax_518))
   (assert (! (not (= FutureChannel.imp FactorialContChannel.exp)) :named ax_519))
   (assert (! (not (= FutureChannel.imp FactorialContChannel.imp)) :named ax_520))
   (assert (! (not (= FutureChannel.imp FactorialContChannel.imp)) :named ax_521))
   (assert (! (not (= FutureChannel.imp FactorialContChannelExpEP.ch)) :named ax_522))
   (assert (! (not (= FutureChannel.imp FactorialContChannelExpEP.ch)) :named ax_523))
   (assert (! (not (= FutureChannel.imp FactorialContChannelExpEP.expch)) :named ax_524))
   (assert (! (not (= FutureChannel.imp FactorialContChannelExpEP.expch)) :named ax_525))
   (assert (! (not (= FutureChannel.imp FactorialContChannelImpEP.ch)) :named ax_526))
   (assert (! (not (= FutureChannel.imp FactorialContChannelImpEP.ch)) :named ax_527))
   (assert (! (not (= FutureChannel.imp FactorialContChannelImpEP.impch)) :named ax_528))
   (assert (! (not (= FutureChannel.imp FactorialContChannelImpEP.impch)) :named ax_529))
   (assert (! (not (= FutureChannel.imp Future.q)) :named ax_530))
   (assert (! (not (= FutureChannel.imp Future.q)) :named ax_531))
   (assert (! (not (= FutureChannel.imp Future.sent)) :named ax_532))
   (assert (! (not (= FutureChannel.imp Future.sent)) :named ax_533))
   (assert (! (not (= FutureChannel.imp Future.value)) :named ax_534))
   (assert (! (not (= FutureChannel.imp Future.value)) :named ax_535))
   (assert (! (not (= FutureChannel.imp FutureChannel.exp)) :named ax_536))
   (assert (! (not (= FutureChannel.imp FutureChannel.exp)) :named ax_537))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannel.initExpState)) :named ax_538))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannel.initExpState)) :named ax_539))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannel.initImpState)) :named ax_540))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannel.initImpState)) :named ax_541))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannel.valid)) :named ax_542))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannel.valid)) :named ax_543))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannelExpEP.valid)) :named ax_544))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannelExpEP.valid)) :named ax_545))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannelImpEP.valid)) :named ax_546))
   (assert (! (not (= FutureChannel.initExpState FactorialActorChannelImpEP.valid)) :named ax_547))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannel.initExpState)) :named ax_548))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannel.initExpState)) :named ax_549))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannel.initImpState)) :named ax_550))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannel.initImpState)) :named ax_551))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannel.valid)) :named ax_552))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannel.valid)) :named ax_553))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannelExpEP.valid)) :named ax_554))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannelExpEP.valid)) :named ax_555))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannelImpEP.valid)) :named ax_556))
   (assert (! (not (= FutureChannel.initExpState FactorialContChannelImpEP.valid)) :named ax_557))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannel.initExpState)) :named ax_558))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannel.initExpState)) :named ax_559))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannel.initImpState)) :named ax_560))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannel.initImpState)) :named ax_561))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannel.valid)) :named ax_562))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannel.valid)) :named ax_563))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannelExpEP.valid)) :named ax_564))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannelExpEP.valid)) :named ax_565))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannelImpEP.valid)) :named ax_566))
   (assert (! (not (= FutureChannel.initImpState FactorialActorChannelImpEP.valid)) :named ax_567))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannel.initExpState)) :named ax_568))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannel.initExpState)) :named ax_569))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannel.initImpState)) :named ax_570))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannel.initImpState)) :named ax_571))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannel.valid)) :named ax_572))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannel.valid)) :named ax_573))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannelExpEP.valid)) :named ax_574))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannelExpEP.valid)) :named ax_575))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannelImpEP.valid)) :named ax_576))
   (assert (! (not (= FutureChannel.initImpState FactorialContChannelImpEP.valid)) :named ax_577))
   (assert (! (not (= FutureChannel.initImpState FutureChannel.initExpState)) :named ax_578))
   (assert (! (not (= FutureChannel.initImpState FutureChannel.initExpState)) :named ax_579))
   (assert (! (not (= FutureChannel.valid FactorialActorChannel.initExpState)) :named ax_580))
   (assert (! (not (= FutureChannel.valid FactorialActorChannel.initExpState)) :named ax_581))
   (assert (! (not (= FutureChannel.valid FactorialActorChannel.initImpState)) :named ax_582))
   (assert (! (not (= FutureChannel.valid FactorialActorChannel.initImpState)) :named ax_583))
   (assert (! (not (= FutureChannel.valid FactorialActorChannel.valid)) :named ax_584))
   (assert (! (not (= FutureChannel.valid FactorialActorChannel.valid)) :named ax_585))
   (assert (! (not (= FutureChannel.valid FactorialActorChannelExpEP.valid)) :named ax_586))
   (assert (! (not (= FutureChannel.valid FactorialActorChannelExpEP.valid)) :named ax_587))
   (assert (! (not (= FutureChannel.valid FactorialActorChannelImpEP.valid)) :named ax_588))
   (assert (! (not (= FutureChannel.valid FactorialActorChannelImpEP.valid)) :named ax_589))
   (assert (! (not (= FutureChannel.valid FactorialContChannel.initExpState)) :named ax_590))
   (assert (! (not (= FutureChannel.valid FactorialContChannel.initExpState)) :named ax_591))
   (assert (! (not (= FutureChannel.valid FactorialContChannel.initImpState)) :named ax_592))
   (assert (! (not (= FutureChannel.valid FactorialContChannel.initImpState)) :named ax_593))
   (assert (! (not (= FutureChannel.valid FactorialContChannel.valid)) :named ax_594))
   (assert (! (not (= FutureChannel.valid FactorialContChannel.valid)) :named ax_595))
   (assert (! (not (= FutureChannel.valid FactorialContChannelExpEP.valid)) :named ax_596))
   (assert (! (not (= FutureChannel.valid FactorialContChannelExpEP.valid)) :named ax_597))
   (assert (! (not (= FutureChannel.valid FactorialContChannelImpEP.valid)) :named ax_598))
   (assert (! (not (= FutureChannel.valid FactorialContChannelImpEP.valid)) :named ax_599))
   (assert (! (not (= FutureChannel.valid FutureChannel.initExpState)) :named ax_600))
   (assert (! (not (= FutureChannel.valid FutureChannel.initExpState)) :named ax_601))
   (assert (! (not (= FutureChannel.valid FutureChannel.initImpState)) :named ax_602))
   (assert (! (not (= FutureChannel.valid FutureChannel.initImpState)) :named ax_603))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActor.q)) :named ax_604))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActor.q)) :named ax_605))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannel.exp)) :named ax_606))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannel.exp)) :named ax_607))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannel.imp)) :named ax_608))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannel.imp)) :named ax_609))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelExpEP.ch)) :named ax_610))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelExpEP.ch)) :named ax_611))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelExpEP.expch)) :named ax_612))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelExpEP.expch)) :named ax_613))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelImpEP.ch)) :named ax_614))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelImpEP.ch)) :named ax_615))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelImpEP.impch)) :named ax_616))
   (assert (! (not (= FutureChannelExpEP.ch FactorialActorChannelImpEP.impch)) :named ax_617))
   (assert (! (not (= FutureChannelExpEP.ch FactorialCont.cust)) :named ax_618))
   (assert (! (not (= FutureChannelExpEP.ch FactorialCont.cust)) :named ax_619))
   (assert (! (not (= FutureChannelExpEP.ch FactorialCont.q)) :named ax_620))
   (assert (! (not (= FutureChannelExpEP.ch FactorialCont.q)) :named ax_621))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannel.exp)) :named ax_622))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannel.exp)) :named ax_623))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannel.imp)) :named ax_624))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannel.imp)) :named ax_625))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelExpEP.ch)) :named ax_626))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelExpEP.ch)) :named ax_627))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelExpEP.expch)) :named ax_628))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelExpEP.expch)) :named ax_629))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelImpEP.ch)) :named ax_630))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelImpEP.ch)) :named ax_631))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelImpEP.impch)) :named ax_632))
   (assert (! (not (= FutureChannelExpEP.ch FactorialContChannelImpEP.impch)) :named ax_633))
   (assert (! (not (= FutureChannelExpEP.ch Future.q)) :named ax_634))
   (assert (! (not (= FutureChannelExpEP.ch Future.q)) :named ax_635))
   (assert (! (not (= FutureChannelExpEP.ch Future.sent)) :named ax_636))
   (assert (! (not (= FutureChannelExpEP.ch Future.sent)) :named ax_637))
   (assert (! (not (= FutureChannelExpEP.ch Future.value)) :named ax_638))
   (assert (! (not (= FutureChannelExpEP.ch Future.value)) :named ax_639))
   (assert (! (not (= FutureChannelExpEP.ch FutureChannel.exp)) :named ax_640))
   (assert (! (not (= FutureChannelExpEP.ch FutureChannel.exp)) :named ax_641))
   (assert (! (not (= FutureChannelExpEP.ch FutureChannel.imp)) :named ax_642))
   (assert (! (not (= FutureChannelExpEP.ch FutureChannel.imp)) :named ax_643))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActor.q)) :named ax_644))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActor.q)) :named ax_645))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannel.exp)) :named ax_646))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannel.exp)) :named ax_647))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannel.imp)) :named ax_648))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannel.imp)) :named ax_649))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelExpEP.ch)) :named ax_650))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelExpEP.ch)) :named ax_651))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelExpEP.expch)) :named ax_652))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelExpEP.expch)) :named ax_653))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelImpEP.ch)) :named ax_654))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelImpEP.ch)) :named ax_655))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelImpEP.impch)) :named ax_656))
   (assert (! (not (= FutureChannelExpEP.expch FactorialActorChannelImpEP.impch)) :named ax_657))
   (assert (! (not (= FutureChannelExpEP.expch FactorialCont.cust)) :named ax_658))
   (assert (! (not (= FutureChannelExpEP.expch FactorialCont.cust)) :named ax_659))
   (assert (! (not (= FutureChannelExpEP.expch FactorialCont.q)) :named ax_660))
   (assert (! (not (= FutureChannelExpEP.expch FactorialCont.q)) :named ax_661))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannel.exp)) :named ax_662))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannel.exp)) :named ax_663))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannel.imp)) :named ax_664))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannel.imp)) :named ax_665))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelExpEP.ch)) :named ax_666))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelExpEP.ch)) :named ax_667))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelExpEP.expch)) :named ax_668))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelExpEP.expch)) :named ax_669))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelImpEP.ch)) :named ax_670))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelImpEP.ch)) :named ax_671))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelImpEP.impch)) :named ax_672))
   (assert (! (not (= FutureChannelExpEP.expch FactorialContChannelImpEP.impch)) :named ax_673))
   (assert (! (not (= FutureChannelExpEP.expch Future.q)) :named ax_674))
   (assert (! (not (= FutureChannelExpEP.expch Future.q)) :named ax_675))
   (assert (! (not (= FutureChannelExpEP.expch Future.sent)) :named ax_676))
   (assert (! (not (= FutureChannelExpEP.expch Future.sent)) :named ax_677))
   (assert (! (not (= FutureChannelExpEP.expch Future.value)) :named ax_678))
   (assert (! (not (= FutureChannelExpEP.expch Future.value)) :named ax_679))
   (assert (! (not (= FutureChannelExpEP.expch FutureChannel.exp)) :named ax_680))
   (assert (! (not (= FutureChannelExpEP.expch FutureChannel.exp)) :named ax_681))
   (assert (! (not (= FutureChannelExpEP.expch FutureChannel.imp)) :named ax_682))
   (assert (! (not (= FutureChannelExpEP.expch FutureChannel.imp)) :named ax_683))
   (assert (! (not (= FutureChannelExpEP.expch FutureChannelExpEP.ch)) :named ax_684))
   (assert (! (not (= FutureChannelExpEP.expch FutureChannelExpEP.ch)) :named ax_685))
   (assert (! (not (= FutureChannelExpEP.state FactorialActorChannelExpEP.state)) :named ax_686))
   (assert (! (not (= FutureChannelExpEP.state FactorialActorChannelExpEP.state)) :named ax_687))
   (assert (! (not (= FutureChannelExpEP.state FactorialActorChannelImpEP.state)) :named ax_688))
   (assert (! (not (= FutureChannelExpEP.state FactorialActorChannelImpEP.state)) :named ax_689))
   (assert (! (not (= FutureChannelExpEP.state FactorialCont.v)) :named ax_690))
   (assert (! (not (= FutureChannelExpEP.state FactorialCont.v)) :named ax_691))
   (assert (! (not (= FutureChannelExpEP.state FactorialCont.vo)) :named ax_692))
   (assert (! (not (= FutureChannelExpEP.state FactorialCont.vo)) :named ax_693))
   (assert (! (not (= FutureChannelExpEP.state FactorialContChannelExpEP.state)) :named ax_694))
   (assert (! (not (= FutureChannelExpEP.state FactorialContChannelExpEP.state)) :named ax_695))
   (assert (! (not (= FutureChannelExpEP.state FactorialContChannelImpEP.state)) :named ax_696))
   (assert (! (not (= FutureChannelExpEP.state FactorialContChannelImpEP.state)) :named ax_697))
   (assert (! (not (= FutureChannelExpEP.state forkK)) :named ax_698))
   (assert (! (not (= FutureChannelExpEP.state forkK)) :named ax_699))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannel.initExpState)) :named ax_700))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannel.initExpState)) :named ax_701))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannel.initImpState)) :named ax_702))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannel.initImpState)) :named ax_703))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannel.valid)) :named ax_704))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannel.valid)) :named ax_705))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannelExpEP.valid)) :named ax_706))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannelExpEP.valid)) :named ax_707))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannelImpEP.valid)) :named ax_708))
   (assert (! (not (= FutureChannelExpEP.valid FactorialActorChannelImpEP.valid)) :named ax_709))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannel.initExpState)) :named ax_710))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannel.initExpState)) :named ax_711))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannel.initImpState)) :named ax_712))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannel.initImpState)) :named ax_713))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannel.valid)) :named ax_714))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannel.valid)) :named ax_715))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannelExpEP.valid)) :named ax_716))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannelExpEP.valid)) :named ax_717))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannelImpEP.valid)) :named ax_718))
   (assert (! (not (= FutureChannelExpEP.valid FactorialContChannelImpEP.valid)) :named ax_719))
   (assert (! (not (= FutureChannelExpEP.valid FutureChannel.initExpState)) :named ax_720))
   (assert (! (not (= FutureChannelExpEP.valid FutureChannel.initExpState)) :named ax_721))
   (assert (! (not (= FutureChannelExpEP.valid FutureChannel.initImpState)) :named ax_722))
   (assert (! (not (= FutureChannelExpEP.valid FutureChannel.initImpState)) :named ax_723))
   (assert (! (not (= FutureChannelExpEP.valid FutureChannel.valid)) :named ax_724))
   (assert (! (not (= FutureChannelExpEP.valid FutureChannel.valid)) :named ax_725))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActor.q)) :named ax_726))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActor.q)) :named ax_727))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannel.exp)) :named ax_728))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannel.exp)) :named ax_729))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannel.imp)) :named ax_730))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannel.imp)) :named ax_731))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelExpEP.ch)) :named ax_732))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelExpEP.ch)) :named ax_733))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelExpEP.expch)) :named ax_734))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelExpEP.expch)) :named ax_735))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelImpEP.ch)) :named ax_736))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelImpEP.ch)) :named ax_737))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelImpEP.impch)) :named ax_738))
   (assert (! (not (= FutureChannelImpEP.ch FactorialActorChannelImpEP.impch)) :named ax_739))
   (assert (! (not (= FutureChannelImpEP.ch FactorialCont.cust)) :named ax_740))
   (assert (! (not (= FutureChannelImpEP.ch FactorialCont.cust)) :named ax_741))
   (assert (! (not (= FutureChannelImpEP.ch FactorialCont.q)) :named ax_742))
   (assert (! (not (= FutureChannelImpEP.ch FactorialCont.q)) :named ax_743))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannel.exp)) :named ax_744))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannel.exp)) :named ax_745))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannel.imp)) :named ax_746))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannel.imp)) :named ax_747))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelExpEP.ch)) :named ax_748))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelExpEP.ch)) :named ax_749))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelExpEP.expch)) :named ax_750))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelExpEP.expch)) :named ax_751))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelImpEP.ch)) :named ax_752))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelImpEP.ch)) :named ax_753))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelImpEP.impch)) :named ax_754))
   (assert (! (not (= FutureChannelImpEP.ch FactorialContChannelImpEP.impch)) :named ax_755))
   (assert (! (not (= FutureChannelImpEP.ch Future.q)) :named ax_756))
   (assert (! (not (= FutureChannelImpEP.ch Future.q)) :named ax_757))
   (assert (! (not (= FutureChannelImpEP.ch Future.sent)) :named ax_758))
   (assert (! (not (= FutureChannelImpEP.ch Future.sent)) :named ax_759))
   (assert (! (not (= FutureChannelImpEP.ch Future.value)) :named ax_760))
   (assert (! (not (= FutureChannelImpEP.ch Future.value)) :named ax_761))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannel.exp)) :named ax_762))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannel.exp)) :named ax_763))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannel.imp)) :named ax_764))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannel.imp)) :named ax_765))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannelExpEP.ch)) :named ax_766))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannelExpEP.ch)) :named ax_767))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannelExpEP.expch)) :named ax_768))
   (assert (! (not (= FutureChannelImpEP.ch FutureChannelExpEP.expch)) :named ax_769))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActor.q)) :named ax_770))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActor.q)) :named ax_771))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannel.exp)) :named ax_772))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannel.exp)) :named ax_773))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannel.imp)) :named ax_774))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannel.imp)) :named ax_775))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelExpEP.ch)) :named ax_776))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelExpEP.ch)) :named ax_777))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelExpEP.expch)) :named ax_778))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelExpEP.expch)) :named ax_779))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelImpEP.ch)) :named ax_780))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelImpEP.ch)) :named ax_781))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelImpEP.impch)) :named ax_782))
   (assert (! (not (= FutureChannelImpEP.impch FactorialActorChannelImpEP.impch)) :named ax_783))
   (assert (! (not (= FutureChannelImpEP.impch FactorialCont.cust)) :named ax_784))
   (assert (! (not (= FutureChannelImpEP.impch FactorialCont.cust)) :named ax_785))
   (assert (! (not (= FutureChannelImpEP.impch FactorialCont.q)) :named ax_786))
   (assert (! (not (= FutureChannelImpEP.impch FactorialCont.q)) :named ax_787))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannel.exp)) :named ax_788))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannel.exp)) :named ax_789))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannel.imp)) :named ax_790))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannel.imp)) :named ax_791))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelExpEP.ch)) :named ax_792))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelExpEP.ch)) :named ax_793))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelExpEP.expch)) :named ax_794))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelExpEP.expch)) :named ax_795))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelImpEP.ch)) :named ax_796))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelImpEP.ch)) :named ax_797))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelImpEP.impch)) :named ax_798))
   (assert (! (not (= FutureChannelImpEP.impch FactorialContChannelImpEP.impch)) :named ax_799))
   (assert (! (not (= FutureChannelImpEP.impch Future.q)) :named ax_800))
   (assert (! (not (= FutureChannelImpEP.impch Future.q)) :named ax_801))
   (assert (! (not (= FutureChannelImpEP.impch Future.sent)) :named ax_802))
   (assert (! (not (= FutureChannelImpEP.impch Future.sent)) :named ax_803))
   (assert (! (not (= FutureChannelImpEP.impch Future.value)) :named ax_804))
   (assert (! (not (= FutureChannelImpEP.impch Future.value)) :named ax_805))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannel.exp)) :named ax_806))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannel.exp)) :named ax_807))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannel.imp)) :named ax_808))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannel.imp)) :named ax_809))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannelExpEP.ch)) :named ax_810))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannelExpEP.ch)) :named ax_811))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannelExpEP.expch)) :named ax_812))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannelExpEP.expch)) :named ax_813))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannelImpEP.ch)) :named ax_814))
   (assert (! (not (= FutureChannelImpEP.impch FutureChannelImpEP.ch)) :named ax_815))
   (assert (! (not (= FutureChannelImpEP.state FactorialActorChannelExpEP.state)) :named ax_816))
   (assert (! (not (= FutureChannelImpEP.state FactorialActorChannelExpEP.state)) :named ax_817))
   (assert (! (not (= FutureChannelImpEP.state FactorialActorChannelImpEP.state)) :named ax_818))
   (assert (! (not (= FutureChannelImpEP.state FactorialActorChannelImpEP.state)) :named ax_819))
   (assert (! (not (= FutureChannelImpEP.state FactorialCont.v)) :named ax_820))
   (assert (! (not (= FutureChannelImpEP.state FactorialCont.v)) :named ax_821))
   (assert (! (not (= FutureChannelImpEP.state FactorialCont.vo)) :named ax_822))
   (assert (! (not (= FutureChannelImpEP.state FactorialCont.vo)) :named ax_823))
   (assert (! (not (= FutureChannelImpEP.state FactorialContChannelExpEP.state)) :named ax_824))
   (assert (! (not (= FutureChannelImpEP.state FactorialContChannelExpEP.state)) :named ax_825))
   (assert (! (not (= FutureChannelImpEP.state FactorialContChannelImpEP.state)) :named ax_826))
   (assert (! (not (= FutureChannelImpEP.state FactorialContChannelImpEP.state)) :named ax_827))
   (assert (! (not (= FutureChannelImpEP.state forkK)) :named ax_828))
   (assert (! (not (= FutureChannelImpEP.state forkK)) :named ax_829))
   (assert (! (not (= FutureChannelImpEP.state FutureChannelExpEP.state)) :named ax_830))
   (assert (! (not (= FutureChannelImpEP.state FutureChannelExpEP.state)) :named ax_831))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannel.initExpState)) :named ax_832))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannel.initExpState)) :named ax_833))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannel.initImpState)) :named ax_834))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannel.initImpState)) :named ax_835))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannel.valid)) :named ax_836))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannel.valid)) :named ax_837))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannelExpEP.valid)) :named ax_838))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannelExpEP.valid)) :named ax_839))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannelImpEP.valid)) :named ax_840))
   (assert (! (not (= FutureChannelImpEP.valid FactorialActorChannelImpEP.valid)) :named ax_841))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannel.initExpState)) :named ax_842))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannel.initExpState)) :named ax_843))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannel.initImpState)) :named ax_844))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannel.initImpState)) :named ax_845))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannel.valid)) :named ax_846))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannel.valid)) :named ax_847))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannelExpEP.valid)) :named ax_848))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannelExpEP.valid)) :named ax_849))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannelImpEP.valid)) :named ax_850))
   (assert (! (not (= FutureChannelImpEP.valid FactorialContChannelImpEP.valid)) :named ax_851))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannel.initExpState)) :named ax_852))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannel.initExpState)) :named ax_853))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannel.initImpState)) :named ax_854))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannel.initImpState)) :named ax_855))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannel.valid)) :named ax_856))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannel.valid)) :named ax_857))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannelExpEP.valid)) :named ax_858))
   (assert (! (not (= FutureChannelImpEP.valid FutureChannelExpEP.valid)) :named ax_859))
   (assert (! (not (= held FactorialActorChannelExpEP.state)) :named ax_860))
   (assert (! (not (= held FactorialActorChannelExpEP.state)) :named ax_861))
   (assert (! (not (= held FactorialActorChannelImpEP.state)) :named ax_862))
   (assert (! (not (= held FactorialActorChannelImpEP.state)) :named ax_863))
   (assert (! (not (= held FactorialCont.v)) :named ax_864))
   (assert (! (not (= held FactorialCont.v)) :named ax_865))
   (assert (! (not (= held FactorialCont.vo)) :named ax_866))
   (assert (! (not (= held FactorialCont.vo)) :named ax_867))
   (assert (! (not (= held FactorialContChannelExpEP.state)) :named ax_868))
   (assert (! (not (= held FactorialContChannelExpEP.state)) :named ax_869))
   (assert (! (not (= held FactorialContChannelImpEP.state)) :named ax_870))
   (assert (! (not (= held FactorialContChannelImpEP.state)) :named ax_871))
   (assert (! (not (= held forkK)) :named ax_872))
   (assert (! (not (= held forkK)) :named ax_873))
   (assert (! (not (= held FutureChannelExpEP.state)) :named ax_874))
   (assert (! (not (= held FutureChannelExpEP.state)) :named ax_875))
   (assert (! (not (= held FutureChannelImpEP.state)) :named ax_876))
   (assert (! (not (= held FutureChannelImpEP.state)) :named ax_877))
   (assert (! (not (= joinable FactorialActorChannelExpEP.state)) :named ax_878))
   (assert (! (not (= joinable FactorialActorChannelExpEP.state)) :named ax_879))
   (assert (! (not (= joinable FactorialActorChannelImpEP.state)) :named ax_880))
   (assert (! (not (= joinable FactorialActorChannelImpEP.state)) :named ax_881))
   (assert (! (not (= joinable FactorialCont.v)) :named ax_882))
   (assert (! (not (= joinable FactorialCont.v)) :named ax_883))
   (assert (! (not (= joinable FactorialCont.vo)) :named ax_884))
   (assert (! (not (= joinable FactorialCont.vo)) :named ax_885))
   (assert (! (not (= joinable FactorialContChannelExpEP.state)) :named ax_886))
   (assert (! (not (= joinable FactorialContChannelExpEP.state)) :named ax_887))
   (assert (! (not (= joinable FactorialContChannelImpEP.state)) :named ax_888))
   (assert (! (not (= joinable FactorialContChannelImpEP.state)) :named ax_889))
   (assert (! (not (= joinable forkK)) :named ax_890))
   (assert (! (not (= joinable forkK)) :named ax_891))
   (assert (! (not (= joinable FutureChannelExpEP.state)) :named ax_892))
   (assert (! (not (= joinable FutureChannelExpEP.state)) :named ax_893))
   (assert (! (not (= joinable FutureChannelImpEP.state)) :named ax_894))
   (assert (! (not (= joinable FutureChannelImpEP.state)) :named ax_895))
   (assert (! (not (= joinable held)) :named ax_896))
   (assert (! (not (= joinable held)) :named ax_897))
   (assert (! (not (= Message.cust1 FactorialActor.q)) :named ax_898))
   (assert (! (not (= Message.cust1 FactorialActor.q)) :named ax_899))
   (assert (! (not (= Message.cust1 FactorialActorChannel.exp)) :named ax_900))
   (assert (! (not (= Message.cust1 FactorialActorChannel.exp)) :named ax_901))
   (assert (! (not (= Message.cust1 FactorialActorChannel.imp)) :named ax_902))
   (assert (! (not (= Message.cust1 FactorialActorChannel.imp)) :named ax_903))
   (assert (! (not (= Message.cust1 FactorialActorChannelExpEP.ch)) :named ax_904))
   (assert (! (not (= Message.cust1 FactorialActorChannelExpEP.ch)) :named ax_905))
   (assert (! (not (= Message.cust1 FactorialActorChannelExpEP.expch)) :named ax_906))
   (assert (! (not (= Message.cust1 FactorialActorChannelExpEP.expch)) :named ax_907))
   (assert (! (not (= Message.cust1 FactorialActorChannelImpEP.ch)) :named ax_908))
   (assert (! (not (= Message.cust1 FactorialActorChannelImpEP.ch)) :named ax_909))
   (assert (! (not (= Message.cust1 FactorialActorChannelImpEP.impch)) :named ax_910))
   (assert (! (not (= Message.cust1 FactorialActorChannelImpEP.impch)) :named ax_911))
   (assert (! (not (= Message.cust1 FactorialCont.cust)) :named ax_912))
   (assert (! (not (= Message.cust1 FactorialCont.cust)) :named ax_913))
   (assert (! (not (= Message.cust1 FactorialCont.q)) :named ax_914))
   (assert (! (not (= Message.cust1 FactorialCont.q)) :named ax_915))
   (assert (! (not (= Message.cust1 FactorialContChannel.exp)) :named ax_916))
   (assert (! (not (= Message.cust1 FactorialContChannel.exp)) :named ax_917))
   (assert (! (not (= Message.cust1 FactorialContChannel.imp)) :named ax_918))
   (assert (! (not (= Message.cust1 FactorialContChannel.imp)) :named ax_919))
   (assert (! (not (= Message.cust1 FactorialContChannelExpEP.ch)) :named ax_920))
   (assert (! (not (= Message.cust1 FactorialContChannelExpEP.ch)) :named ax_921))
   (assert (! (not (= Message.cust1 FactorialContChannelExpEP.expch)) :named ax_922))
   (assert (! (not (= Message.cust1 FactorialContChannelExpEP.expch)) :named ax_923))
   (assert (! (not (= Message.cust1 FactorialContChannelImpEP.ch)) :named ax_924))
   (assert (! (not (= Message.cust1 FactorialContChannelImpEP.ch)) :named ax_925))
   (assert (! (not (= Message.cust1 FactorialContChannelImpEP.impch)) :named ax_926))
   (assert (! (not (= Message.cust1 FactorialContChannelImpEP.impch)) :named ax_927))
   (assert (! (not (= Message.cust1 Future.q)) :named ax_928))
   (assert (! (not (= Message.cust1 Future.q)) :named ax_929))
   (assert (! (not (= Message.cust1 Future.sent)) :named ax_930))
   (assert (! (not (= Message.cust1 Future.sent)) :named ax_931))
   (assert (! (not (= Message.cust1 Future.value)) :named ax_932))
   (assert (! (not (= Message.cust1 Future.value)) :named ax_933))
   (assert (! (not (= Message.cust1 FutureChannel.exp)) :named ax_934))
   (assert (! (not (= Message.cust1 FutureChannel.exp)) :named ax_935))
   (assert (! (not (= Message.cust1 FutureChannel.imp)) :named ax_936))
   (assert (! (not (= Message.cust1 FutureChannel.imp)) :named ax_937))
   (assert (! (not (= Message.cust1 FutureChannelExpEP.ch)) :named ax_938))
   (assert (! (not (= Message.cust1 FutureChannelExpEP.ch)) :named ax_939))
   (assert (! (not (= Message.cust1 FutureChannelExpEP.expch)) :named ax_940))
   (assert (! (not (= Message.cust1 FutureChannelExpEP.expch)) :named ax_941))
   (assert (! (not (= Message.cust1 FutureChannelImpEP.ch)) :named ax_942))
   (assert (! (not (= Message.cust1 FutureChannelImpEP.ch)) :named ax_943))
   (assert (! (not (= Message.cust1 FutureChannelImpEP.impch)) :named ax_944))
   (assert (! (not (= Message.cust1 FutureChannelImpEP.impch)) :named ax_945))
   (assert (! (not (= Message.inv FactorialActorChannel.initExpState)) :named ax_946))
   (assert (! (not (= Message.inv FactorialActorChannel.initExpState)) :named ax_947))
   (assert (! (not (= Message.inv FactorialActorChannel.initImpState)) :named ax_948))
   (assert (! (not (= Message.inv FactorialActorChannel.initImpState)) :named ax_949))
   (assert (! (not (= Message.inv FactorialActorChannel.valid)) :named ax_950))
   (assert (! (not (= Message.inv FactorialActorChannel.valid)) :named ax_951))
   (assert (! (not (= Message.inv FactorialActorChannelExpEP.valid)) :named ax_952))
   (assert (! (not (= Message.inv FactorialActorChannelExpEP.valid)) :named ax_953))
   (assert (! (not (= Message.inv FactorialActorChannelImpEP.valid)) :named ax_954))
   (assert (! (not (= Message.inv FactorialActorChannelImpEP.valid)) :named ax_955))
   (assert (! (not (= Message.inv FactorialContChannel.initExpState)) :named ax_956))
   (assert (! (not (= Message.inv FactorialContChannel.initExpState)) :named ax_957))
   (assert (! (not (= Message.inv FactorialContChannel.initImpState)) :named ax_958))
   (assert (! (not (= Message.inv FactorialContChannel.initImpState)) :named ax_959))
   (assert (! (not (= Message.inv FactorialContChannel.valid)) :named ax_960))
   (assert (! (not (= Message.inv FactorialContChannel.valid)) :named ax_961))
   (assert (! (not (= Message.inv FactorialContChannelExpEP.valid)) :named ax_962))
   (assert (! (not (= Message.inv FactorialContChannelExpEP.valid)) :named ax_963))
   (assert (! (not (= Message.inv FactorialContChannelImpEP.valid)) :named ax_964))
   (assert (! (not (= Message.inv FactorialContChannelImpEP.valid)) :named ax_965))
   (assert (! (not (= Message.inv FutureChannel.initExpState)) :named ax_966))
   (assert (! (not (= Message.inv FutureChannel.initExpState)) :named ax_967))
   (assert (! (not (= Message.inv FutureChannel.initImpState)) :named ax_968))
   (assert (! (not (= Message.inv FutureChannel.initImpState)) :named ax_969))
   (assert (! (not (= Message.inv FutureChannel.valid)) :named ax_970))
   (assert (! (not (= Message.inv FutureChannel.valid)) :named ax_971))
   (assert (! (not (= Message.inv FutureChannelExpEP.valid)) :named ax_972))
   (assert (! (not (= Message.inv FutureChannelExpEP.valid)) :named ax_973))
   (assert (! (not (= Message.inv FutureChannelImpEP.valid)) :named ax_974))
   (assert (! (not (= Message.inv FutureChannelImpEP.valid)) :named ax_975))
   (assert (! (not (= Message.invFinalResult FactorialActorChannel.initExpState)) :named ax_976))
   (assert (! (not (= Message.invFinalResult FactorialActorChannel.initExpState)) :named ax_977))
   (assert (! (not (= Message.invFinalResult FactorialActorChannel.initImpState)) :named ax_978))
   (assert (! (not (= Message.invFinalResult FactorialActorChannel.initImpState)) :named ax_979))
   (assert (! (not (= Message.invFinalResult FactorialActorChannel.valid)) :named ax_980))
   (assert (! (not (= Message.invFinalResult FactorialActorChannel.valid)) :named ax_981))
   (assert (! (not (= Message.invFinalResult FactorialActorChannelExpEP.valid)) :named ax_982))
   (assert (! (not (= Message.invFinalResult FactorialActorChannelExpEP.valid)) :named ax_983))
   (assert (! (not (= Message.invFinalResult FactorialActorChannelImpEP.valid)) :named ax_984))
   (assert (! (not (= Message.invFinalResult FactorialActorChannelImpEP.valid)) :named ax_985))
   (assert (! (not (= Message.invFinalResult FactorialContChannel.initExpState)) :named ax_986))
   (assert (! (not (= Message.invFinalResult FactorialContChannel.initExpState)) :named ax_987))
   (assert (! (not (= Message.invFinalResult FactorialContChannel.initImpState)) :named ax_988))
   (assert (! (not (= Message.invFinalResult FactorialContChannel.initImpState)) :named ax_989))
   (assert (! (not (= Message.invFinalResult FactorialContChannel.valid)) :named ax_990))
   (assert (! (not (= Message.invFinalResult FactorialContChannel.valid)) :named ax_991))
   (assert (! (not (= Message.invFinalResult FactorialContChannelExpEP.valid)) :named ax_992))
   (assert (! (not (= Message.invFinalResult FactorialContChannelExpEP.valid)) :named ax_993))
   (assert (! (not (= Message.invFinalResult FactorialContChannelImpEP.valid)) :named ax_994))
   (assert (! (not (= Message.invFinalResult FactorialContChannelImpEP.valid)) :named ax_995))
   (assert (! (not (= Message.invFinalResult FutureChannel.initExpState)) :named ax_996))
   (assert (! (not (= Message.invFinalResult FutureChannel.initExpState)) :named ax_997))
   (assert (! (not (= Message.invFinalResult FutureChannel.initImpState)) :named ax_998))
   (assert (! (not (= Message.invFinalResult FutureChannel.initImpState)) :named ax_999))
   (assert (! (not (= Message.invFinalResult FutureChannel.valid)) :named ax_1000))
   (assert (! (not (= Message.invFinalResult FutureChannel.valid)) :named ax_1001))
   (assert (! (not (= Message.invFinalResult FutureChannelExpEP.valid)) :named ax_1002))
   (assert (! (not (= Message.invFinalResult FutureChannelExpEP.valid)) :named ax_1003))
   (assert (! (not (= Message.invFinalResult FutureChannelImpEP.valid)) :named ax_1004))
   (assert (! (not (= Message.invFinalResult FutureChannelImpEP.valid)) :named ax_1005))
   (assert (! (not (= Message.invFinalResult Message.inv)) :named ax_1006))
   (assert (! (not (= Message.invFinalResult Message.inv)) :named ax_1007))
   (assert (! (not (= Message.invResult1 FactorialActorChannel.initExpState)) :named ax_1008))
   (assert (! (not (= Message.invResult1 FactorialActorChannel.initExpState)) :named ax_1009))
   (assert (! (not (= Message.invResult1 FactorialActorChannel.initImpState)) :named ax_1010))
   (assert (! (not (= Message.invResult1 FactorialActorChannel.initImpState)) :named ax_1011))
   (assert (! (not (= Message.invResult1 FactorialActorChannel.valid)) :named ax_1012))
   (assert (! (not (= Message.invResult1 FactorialActorChannel.valid)) :named ax_1013))
   (assert (! (not (= Message.invResult1 FactorialActorChannelExpEP.valid)) :named ax_1014))
   (assert (! (not (= Message.invResult1 FactorialActorChannelExpEP.valid)) :named ax_1015))
   (assert (! (not (= Message.invResult1 FactorialActorChannelImpEP.valid)) :named ax_1016))
   (assert (! (not (= Message.invResult1 FactorialActorChannelImpEP.valid)) :named ax_1017))
   (assert (! (not (= Message.invResult1 FactorialContChannel.initExpState)) :named ax_1018))
   (assert (! (not (= Message.invResult1 FactorialContChannel.initExpState)) :named ax_1019))
   (assert (! (not (= Message.invResult1 FactorialContChannel.initImpState)) :named ax_1020))
   (assert (! (not (= Message.invResult1 FactorialContChannel.initImpState)) :named ax_1021))
   (assert (! (not (= Message.invResult1 FactorialContChannel.valid)) :named ax_1022))
   (assert (! (not (= Message.invResult1 FactorialContChannel.valid)) :named ax_1023))
   (assert (! (not (= Message.invResult1 FactorialContChannelExpEP.valid)) :named ax_1024))
   (assert (! (not (= Message.invResult1 FactorialContChannelExpEP.valid)) :named ax_1025))
   (assert (! (not (= Message.invResult1 FactorialContChannelImpEP.valid)) :named ax_1026))
   (assert (! (not (= Message.invResult1 FactorialContChannelImpEP.valid)) :named ax_1027))
   (assert (! (not (= Message.invResult1 FutureChannel.initExpState)) :named ax_1028))
   (assert (! (not (= Message.invResult1 FutureChannel.initExpState)) :named ax_1029))
   (assert (! (not (= Message.invResult1 FutureChannel.initImpState)) :named ax_1030))
   (assert (! (not (= Message.invResult1 FutureChannel.initImpState)) :named ax_1031))
   (assert (! (not (= Message.invResult1 FutureChannel.valid)) :named ax_1032))
   (assert (! (not (= Message.invResult1 FutureChannel.valid)) :named ax_1033))
   (assert (! (not (= Message.invResult1 FutureChannelExpEP.valid)) :named ax_1034))
   (assert (! (not (= Message.invResult1 FutureChannelExpEP.valid)) :named ax_1035))
   (assert (! (not (= Message.invResult1 FutureChannelImpEP.valid)) :named ax_1036))
   (assert (! (not (= Message.invResult1 FutureChannelImpEP.valid)) :named ax_1037))
   (assert (! (not (= Message.invResult1 Message.inv)) :named ax_1038))
   (assert (! (not (= Message.invResult1 Message.inv)) :named ax_1039))
   (assert (! (not (= Message.invResult1 Message.invFinalResult)) :named ax_1040))
   (assert (! (not (= Message.invResult1 Message.invFinalResult)) :named ax_1041))
   (assert (! (not (= Message.invResult2 FactorialActorChannel.initExpState)) :named ax_1042))
   (assert (! (not (= Message.invResult2 FactorialActorChannel.initExpState)) :named ax_1043))
   (assert (! (not (= Message.invResult2 FactorialActorChannel.initImpState)) :named ax_1044))
   (assert (! (not (= Message.invResult2 FactorialActorChannel.initImpState)) :named ax_1045))
   (assert (! (not (= Message.invResult2 FactorialActorChannel.valid)) :named ax_1046))
   (assert (! (not (= Message.invResult2 FactorialActorChannel.valid)) :named ax_1047))
   (assert (! (not (= Message.invResult2 FactorialActorChannelExpEP.valid)) :named ax_1048))
   (assert (! (not (= Message.invResult2 FactorialActorChannelExpEP.valid)) :named ax_1049))
   (assert (! (not (= Message.invResult2 FactorialActorChannelImpEP.valid)) :named ax_1050))
   (assert (! (not (= Message.invResult2 FactorialActorChannelImpEP.valid)) :named ax_1051))
   (assert (! (not (= Message.invResult2 FactorialContChannel.initExpState)) :named ax_1052))
   (assert (! (not (= Message.invResult2 FactorialContChannel.initExpState)) :named ax_1053))
   (assert (! (not (= Message.invResult2 FactorialContChannel.initImpState)) :named ax_1054))
   (assert (! (not (= Message.invResult2 FactorialContChannel.initImpState)) :named ax_1055))
   (assert (! (not (= Message.invResult2 FactorialContChannel.valid)) :named ax_1056))
   (assert (! (not (= Message.invResult2 FactorialContChannel.valid)) :named ax_1057))
   (assert (! (not (= Message.invResult2 FactorialContChannelExpEP.valid)) :named ax_1058))
   (assert (! (not (= Message.invResult2 FactorialContChannelExpEP.valid)) :named ax_1059))
   (assert (! (not (= Message.invResult2 FactorialContChannelImpEP.valid)) :named ax_1060))
   (assert (! (not (= Message.invResult2 FactorialContChannelImpEP.valid)) :named ax_1061))
   (assert (! (not (= Message.invResult2 FutureChannel.initExpState)) :named ax_1062))
   (assert (! (not (= Message.invResult2 FutureChannel.initExpState)) :named ax_1063))
   (assert (! (not (= Message.invResult2 FutureChannel.initImpState)) :named ax_1064))
   (assert (! (not (= Message.invResult2 FutureChannel.initImpState)) :named ax_1065))
   (assert (! (not (= Message.invResult2 FutureChannel.valid)) :named ax_1066))
   (assert (! (not (= Message.invResult2 FutureChannel.valid)) :named ax_1067))
   (assert (! (not (= Message.invResult2 FutureChannelExpEP.valid)) :named ax_1068))
   (assert (! (not (= Message.invResult2 FutureChannelExpEP.valid)) :named ax_1069))
   (assert (! (not (= Message.invResult2 FutureChannelImpEP.valid)) :named ax_1070))
   (assert (! (not (= Message.invResult2 FutureChannelImpEP.valid)) :named ax_1071))
   (assert (! (not (= Message.invResult2 Message.inv)) :named ax_1072))
   (assert (! (not (= Message.invResult2 Message.inv)) :named ax_1073))
   (assert (! (not (= Message.invResult2 Message.invFinalResult)) :named ax_1074))
   (assert (! (not (= Message.invResult2 Message.invFinalResult)) :named ax_1075))
   (assert (! (not (= Message.invResult2 Message.invResult1)) :named ax_1076))
   (assert (! (not (= Message.invResult2 Message.invResult1)) :named ax_1077))
   (assert (! (not (= Message.invValue FactorialActorChannel.initExpState)) :named ax_1078))
   (assert (! (not (= Message.invValue FactorialActorChannel.initExpState)) :named ax_1079))
   (assert (! (not (= Message.invValue FactorialActorChannel.initImpState)) :named ax_1080))
   (assert (! (not (= Message.invValue FactorialActorChannel.initImpState)) :named ax_1081))
   (assert (! (not (= Message.invValue FactorialActorChannel.valid)) :named ax_1082))
   (assert (! (not (= Message.invValue FactorialActorChannel.valid)) :named ax_1083))
   (assert (! (not (= Message.invValue FactorialActorChannelExpEP.valid)) :named ax_1084))
   (assert (! (not (= Message.invValue FactorialActorChannelExpEP.valid)) :named ax_1085))
   (assert (! (not (= Message.invValue FactorialActorChannelImpEP.valid)) :named ax_1086))
   (assert (! (not (= Message.invValue FactorialActorChannelImpEP.valid)) :named ax_1087))
   (assert (! (not (= Message.invValue FactorialContChannel.initExpState)) :named ax_1088))
   (assert (! (not (= Message.invValue FactorialContChannel.initExpState)) :named ax_1089))
   (assert (! (not (= Message.invValue FactorialContChannel.initImpState)) :named ax_1090))
   (assert (! (not (= Message.invValue FactorialContChannel.initImpState)) :named ax_1091))
   (assert (! (not (= Message.invValue FactorialContChannel.valid)) :named ax_1092))
   (assert (! (not (= Message.invValue FactorialContChannel.valid)) :named ax_1093))
   (assert (! (not (= Message.invValue FactorialContChannelExpEP.valid)) :named ax_1094))
   (assert (! (not (= Message.invValue FactorialContChannelExpEP.valid)) :named ax_1095))
   (assert (! (not (= Message.invValue FactorialContChannelImpEP.valid)) :named ax_1096))
   (assert (! (not (= Message.invValue FactorialContChannelImpEP.valid)) :named ax_1097))
   (assert (! (not (= Message.invValue FutureChannel.initExpState)) :named ax_1098))
   (assert (! (not (= Message.invValue FutureChannel.initExpState)) :named ax_1099))
   (assert (! (not (= Message.invValue FutureChannel.initImpState)) :named ax_1100))
   (assert (! (not (= Message.invValue FutureChannel.initImpState)) :named ax_1101))
   (assert (! (not (= Message.invValue FutureChannel.valid)) :named ax_1102))
   (assert (! (not (= Message.invValue FutureChannel.valid)) :named ax_1103))
   (assert (! (not (= Message.invValue FutureChannelExpEP.valid)) :named ax_1104))
   (assert (! (not (= Message.invValue FutureChannelExpEP.valid)) :named ax_1105))
   (assert (! (not (= Message.invValue FutureChannelImpEP.valid)) :named ax_1106))
   (assert (! (not (= Message.invValue FutureChannelImpEP.valid)) :named ax_1107))
   (assert (! (not (= Message.invValue Message.inv)) :named ax_1108))
   (assert (! (not (= Message.invValue Message.inv)) :named ax_1109))
   (assert (! (not (= Message.invValue Message.invFinalResult)) :named ax_1110))
   (assert (! (not (= Message.invValue Message.invFinalResult)) :named ax_1111))
   (assert (! (not (= Message.invValue Message.invResult1)) :named ax_1112))
   (assert (! (not (= Message.invValue Message.invResult1)) :named ax_1113))
   (assert (! (not (= Message.invValue Message.invResult2)) :named ax_1114))
   (assert (! (not (= Message.invValue Message.invResult2)) :named ax_1115))
   (assert (! (not (= Message.old1 FactorialActor.q)) :named ax_1116))
   (assert (! (not (= Message.old1 FactorialActor.q)) :named ax_1117))
   (assert (! (not (= Message.old1 FactorialActorChannel.exp)) :named ax_1118))
   (assert (! (not (= Message.old1 FactorialActorChannel.exp)) :named ax_1119))
   (assert (! (not (= Message.old1 FactorialActorChannel.imp)) :named ax_1120))
   (assert (! (not (= Message.old1 FactorialActorChannel.imp)) :named ax_1121))
   (assert (! (not (= Message.old1 FactorialActorChannelExpEP.ch)) :named ax_1122))
   (assert (! (not (= Message.old1 FactorialActorChannelExpEP.ch)) :named ax_1123))
   (assert (! (not (= Message.old1 FactorialActorChannelExpEP.expch)) :named ax_1124))
   (assert (! (not (= Message.old1 FactorialActorChannelExpEP.expch)) :named ax_1125))
   (assert (! (not (= Message.old1 FactorialActorChannelImpEP.ch)) :named ax_1126))
   (assert (! (not (= Message.old1 FactorialActorChannelImpEP.ch)) :named ax_1127))
   (assert (! (not (= Message.old1 FactorialActorChannelImpEP.impch)) :named ax_1128))
   (assert (! (not (= Message.old1 FactorialActorChannelImpEP.impch)) :named ax_1129))
   (assert (! (not (= Message.old1 FactorialCont.cust)) :named ax_1130))
   (assert (! (not (= Message.old1 FactorialCont.cust)) :named ax_1131))
   (assert (! (not (= Message.old1 FactorialCont.q)) :named ax_1132))
   (assert (! (not (= Message.old1 FactorialCont.q)) :named ax_1133))
   (assert (! (not (= Message.old1 FactorialContChannel.exp)) :named ax_1134))
   (assert (! (not (= Message.old1 FactorialContChannel.exp)) :named ax_1135))
   (assert (! (not (= Message.old1 FactorialContChannel.imp)) :named ax_1136))
   (assert (! (not (= Message.old1 FactorialContChannel.imp)) :named ax_1137))
   (assert (! (not (= Message.old1 FactorialContChannelExpEP.ch)) :named ax_1138))
   (assert (! (not (= Message.old1 FactorialContChannelExpEP.ch)) :named ax_1139))
   (assert (! (not (= Message.old1 FactorialContChannelExpEP.expch)) :named ax_1140))
   (assert (! (not (= Message.old1 FactorialContChannelExpEP.expch)) :named ax_1141))
   (assert (! (not (= Message.old1 FactorialContChannelImpEP.ch)) :named ax_1142))
   (assert (! (not (= Message.old1 FactorialContChannelImpEP.ch)) :named ax_1143))
   (assert (! (not (= Message.old1 FactorialContChannelImpEP.impch)) :named ax_1144))
   (assert (! (not (= Message.old1 FactorialContChannelImpEP.impch)) :named ax_1145))
   (assert (! (not (= Message.old1 Future.q)) :named ax_1146))
   (assert (! (not (= Message.old1 Future.q)) :named ax_1147))
   (assert (! (not (= Message.old1 Future.sent)) :named ax_1148))
   (assert (! (not (= Message.old1 Future.sent)) :named ax_1149))
   (assert (! (not (= Message.old1 Future.value)) :named ax_1150))
   (assert (! (not (= Message.old1 Future.value)) :named ax_1151))
   (assert (! (not (= Message.old1 FutureChannel.exp)) :named ax_1152))
   (assert (! (not (= Message.old1 FutureChannel.exp)) :named ax_1153))
   (assert (! (not (= Message.old1 FutureChannel.imp)) :named ax_1154))
   (assert (! (not (= Message.old1 FutureChannel.imp)) :named ax_1155))
   (assert (! (not (= Message.old1 FutureChannelExpEP.ch)) :named ax_1156))
   (assert (! (not (= Message.old1 FutureChannelExpEP.ch)) :named ax_1157))
   (assert (! (not (= Message.old1 FutureChannelExpEP.expch)) :named ax_1158))
   (assert (! (not (= Message.old1 FutureChannelExpEP.expch)) :named ax_1159))
   (assert (! (not (= Message.old1 FutureChannelImpEP.ch)) :named ax_1160))
   (assert (! (not (= Message.old1 FutureChannelImpEP.ch)) :named ax_1161))
   (assert (! (not (= Message.old1 FutureChannelImpEP.impch)) :named ax_1162))
   (assert (! (not (= Message.old1 FutureChannelImpEP.impch)) :named ax_1163))
   (assert (! (not (= Message.old1 Message.cust1)) :named ax_1164))
   (assert (! (not (= Message.old1 Message.cust1)) :named ax_1165))
   (assert (! (not (= Message.old2 FactorialActor.q)) :named ax_1166))
   (assert (! (not (= Message.old2 FactorialActor.q)) :named ax_1167))
   (assert (! (not (= Message.old2 FactorialActorChannel.exp)) :named ax_1168))
   (assert (! (not (= Message.old2 FactorialActorChannel.exp)) :named ax_1169))
   (assert (! (not (= Message.old2 FactorialActorChannel.imp)) :named ax_1170))
   (assert (! (not (= Message.old2 FactorialActorChannel.imp)) :named ax_1171))
   (assert (! (not (= Message.old2 FactorialActorChannelExpEP.ch)) :named ax_1172))
   (assert (! (not (= Message.old2 FactorialActorChannelExpEP.ch)) :named ax_1173))
   (assert (! (not (= Message.old2 FactorialActorChannelExpEP.expch)) :named ax_1174))
   (assert (! (not (= Message.old2 FactorialActorChannelExpEP.expch)) :named ax_1175))
   (assert (! (not (= Message.old2 FactorialActorChannelImpEP.ch)) :named ax_1176))
   (assert (! (not (= Message.old2 FactorialActorChannelImpEP.ch)) :named ax_1177))
   (assert (! (not (= Message.old2 FactorialActorChannelImpEP.impch)) :named ax_1178))
   (assert (! (not (= Message.old2 FactorialActorChannelImpEP.impch)) :named ax_1179))
   (assert (! (not (= Message.old2 FactorialCont.cust)) :named ax_1180))
   (assert (! (not (= Message.old2 FactorialCont.cust)) :named ax_1181))
   (assert (! (not (= Message.old2 FactorialCont.q)) :named ax_1182))
   (assert (! (not (= Message.old2 FactorialCont.q)) :named ax_1183))
   (assert (! (not (= Message.old2 FactorialContChannel.exp)) :named ax_1184))
   (assert (! (not (= Message.old2 FactorialContChannel.exp)) :named ax_1185))
   (assert (! (not (= Message.old2 FactorialContChannel.imp)) :named ax_1186))
   (assert (! (not (= Message.old2 FactorialContChannel.imp)) :named ax_1187))
   (assert (! (not (= Message.old2 FactorialContChannelExpEP.ch)) :named ax_1188))
   (assert (! (not (= Message.old2 FactorialContChannelExpEP.ch)) :named ax_1189))
   (assert (! (not (= Message.old2 FactorialContChannelExpEP.expch)) :named ax_1190))
   (assert (! (not (= Message.old2 FactorialContChannelExpEP.expch)) :named ax_1191))
   (assert (! (not (= Message.old2 FactorialContChannelImpEP.ch)) :named ax_1192))
   (assert (! (not (= Message.old2 FactorialContChannelImpEP.ch)) :named ax_1193))
   (assert (! (not (= Message.old2 FactorialContChannelImpEP.impch)) :named ax_1194))
   (assert (! (not (= Message.old2 FactorialContChannelImpEP.impch)) :named ax_1195))
   (assert (! (not (= Message.old2 Future.q)) :named ax_1196))
   (assert (! (not (= Message.old2 Future.q)) :named ax_1197))
   (assert (! (not (= Message.old2 Future.sent)) :named ax_1198))
   (assert (! (not (= Message.old2 Future.sent)) :named ax_1199))
   (assert (! (not (= Message.old2 Future.value)) :named ax_1200))
   (assert (! (not (= Message.old2 Future.value)) :named ax_1201))
   (assert (! (not (= Message.old2 FutureChannel.exp)) :named ax_1202))
   (assert (! (not (= Message.old2 FutureChannel.exp)) :named ax_1203))
   (assert (! (not (= Message.old2 FutureChannel.imp)) :named ax_1204))
   (assert (! (not (= Message.old2 FutureChannel.imp)) :named ax_1205))
   (assert (! (not (= Message.old2 FutureChannelExpEP.ch)) :named ax_1206))
   (assert (! (not (= Message.old2 FutureChannelExpEP.ch)) :named ax_1207))
   (assert (! (not (= Message.old2 FutureChannelExpEP.expch)) :named ax_1208))
   (assert (! (not (= Message.old2 FutureChannelExpEP.expch)) :named ax_1209))
   (assert (! (not (= Message.old2 FutureChannelImpEP.ch)) :named ax_1210))
   (assert (! (not (= Message.old2 FutureChannelImpEP.ch)) :named ax_1211))
   (assert (! (not (= Message.old2 FutureChannelImpEP.impch)) :named ax_1212))
   (assert (! (not (= Message.old2 FutureChannelImpEP.impch)) :named ax_1213))
   (assert (! (not (= Message.old2 Message.cust1)) :named ax_1214))
   (assert (! (not (= Message.old2 Message.cust1)) :named ax_1215))
   (assert (! (not (= Message.old2 Message.old1)) :named ax_1216))
   (assert (! (not (= Message.old2 Message.old1)) :named ax_1217))
   (assert (! (not (= Message.receiver1 FactorialActor.q)) :named ax_1218))
   (assert (! (not (= Message.receiver1 FactorialActor.q)) :named ax_1219))
   (assert (! (not (= Message.receiver1 FactorialActorChannel.exp)) :named ax_1220))
   (assert (! (not (= Message.receiver1 FactorialActorChannel.exp)) :named ax_1221))
   (assert (! (not (= Message.receiver1 FactorialActorChannel.imp)) :named ax_1222))
   (assert (! (not (= Message.receiver1 FactorialActorChannel.imp)) :named ax_1223))
   (assert (! (not (= Message.receiver1 FactorialActorChannelExpEP.ch)) :named ax_1224))
   (assert (! (not (= Message.receiver1 FactorialActorChannelExpEP.ch)) :named ax_1225))
   (assert (! (not (= Message.receiver1 FactorialActorChannelExpEP.expch)) :named ax_1226))
   (assert (! (not (= Message.receiver1 FactorialActorChannelExpEP.expch)) :named ax_1227))
   (assert (! (not (= Message.receiver1 FactorialActorChannelImpEP.ch)) :named ax_1228))
   (assert (! (not (= Message.receiver1 FactorialActorChannelImpEP.ch)) :named ax_1229))
   (assert (! (not (= Message.receiver1 FactorialActorChannelImpEP.impch)) :named ax_1230))
   (assert (! (not (= Message.receiver1 FactorialActorChannelImpEP.impch)) :named ax_1231))
   (assert (! (not (= Message.receiver1 FactorialCont.cust)) :named ax_1232))
   (assert (! (not (= Message.receiver1 FactorialCont.cust)) :named ax_1233))
   (assert (! (not (= Message.receiver1 FactorialCont.q)) :named ax_1234))
   (assert (! (not (= Message.receiver1 FactorialCont.q)) :named ax_1235))
   (assert (! (not (= Message.receiver1 FactorialContChannel.exp)) :named ax_1236))
   (assert (! (not (= Message.receiver1 FactorialContChannel.exp)) :named ax_1237))
   (assert (! (not (= Message.receiver1 FactorialContChannel.imp)) :named ax_1238))
   (assert (! (not (= Message.receiver1 FactorialContChannel.imp)) :named ax_1239))
   (assert (! (not (= Message.receiver1 FactorialContChannelExpEP.ch)) :named ax_1240))
   (assert (! (not (= Message.receiver1 FactorialContChannelExpEP.ch)) :named ax_1241))
   (assert (! (not (= Message.receiver1 FactorialContChannelExpEP.expch)) :named ax_1242))
   (assert (! (not (= Message.receiver1 FactorialContChannelExpEP.expch)) :named ax_1243))
   (assert (! (not (= Message.receiver1 FactorialContChannelImpEP.ch)) :named ax_1244))
   (assert (! (not (= Message.receiver1 FactorialContChannelImpEP.ch)) :named ax_1245))
   (assert (! (not (= Message.receiver1 FactorialContChannelImpEP.impch)) :named ax_1246))
   (assert (! (not (= Message.receiver1 FactorialContChannelImpEP.impch)) :named ax_1247))
   (assert (! (not (= Message.receiver1 Future.q)) :named ax_1248))
   (assert (! (not (= Message.receiver1 Future.q)) :named ax_1249))
   (assert (! (not (= Message.receiver1 Future.sent)) :named ax_1250))
   (assert (! (not (= Message.receiver1 Future.sent)) :named ax_1251))
   (assert (! (not (= Message.receiver1 Future.value)) :named ax_1252))
   (assert (! (not (= Message.receiver1 Future.value)) :named ax_1253))
   (assert (! (not (= Message.receiver1 FutureChannel.exp)) :named ax_1254))
   (assert (! (not (= Message.receiver1 FutureChannel.exp)) :named ax_1255))
   (assert (! (not (= Message.receiver1 FutureChannel.imp)) :named ax_1256))
   (assert (! (not (= Message.receiver1 FutureChannel.imp)) :named ax_1257))
   (assert (! (not (= Message.receiver1 FutureChannelExpEP.ch)) :named ax_1258))
   (assert (! (not (= Message.receiver1 FutureChannelExpEP.ch)) :named ax_1259))
   (assert (! (not (= Message.receiver1 FutureChannelExpEP.expch)) :named ax_1260))
   (assert (! (not (= Message.receiver1 FutureChannelExpEP.expch)) :named ax_1261))
   (assert (! (not (= Message.receiver1 FutureChannelImpEP.ch)) :named ax_1262))
   (assert (! (not (= Message.receiver1 FutureChannelImpEP.ch)) :named ax_1263))
   (assert (! (not (= Message.receiver1 FutureChannelImpEP.impch)) :named ax_1264))
   (assert (! (not (= Message.receiver1 FutureChannelImpEP.impch)) :named ax_1265))
   (assert (! (not (= Message.receiver1 Message.cust1)) :named ax_1266))
   (assert (! (not (= Message.receiver1 Message.cust1)) :named ax_1267))
   (assert (! (not (= Message.receiver1 Message.old1)) :named ax_1268))
   (assert (! (not (= Message.receiver1 Message.old1)) :named ax_1269))
   (assert (! (not (= Message.receiver1 Message.old2)) :named ax_1270))
   (assert (! (not (= Message.receiver1 Message.old2)) :named ax_1271))
   (assert (! (not (= Message.receiver2 FactorialActor.q)) :named ax_1272))
   (assert (! (not (= Message.receiver2 FactorialActor.q)) :named ax_1273))
   (assert (! (not (= Message.receiver2 FactorialActorChannel.exp)) :named ax_1274))
   (assert (! (not (= Message.receiver2 FactorialActorChannel.exp)) :named ax_1275))
   (assert (! (not (= Message.receiver2 FactorialActorChannel.imp)) :named ax_1276))
   (assert (! (not (= Message.receiver2 FactorialActorChannel.imp)) :named ax_1277))
   (assert (! (not (= Message.receiver2 FactorialActorChannelExpEP.ch)) :named ax_1278))
   (assert (! (not (= Message.receiver2 FactorialActorChannelExpEP.ch)) :named ax_1279))
   (assert (! (not (= Message.receiver2 FactorialActorChannelExpEP.expch)) :named ax_1280))
   (assert (! (not (= Message.receiver2 FactorialActorChannelExpEP.expch)) :named ax_1281))
   (assert (! (not (= Message.receiver2 FactorialActorChannelImpEP.ch)) :named ax_1282))
   (assert (! (not (= Message.receiver2 FactorialActorChannelImpEP.ch)) :named ax_1283))
   (assert (! (not (= Message.receiver2 FactorialActorChannelImpEP.impch)) :named ax_1284))
   (assert (! (not (= Message.receiver2 FactorialActorChannelImpEP.impch)) :named ax_1285))
   (assert (! (not (= Message.receiver2 FactorialCont.cust)) :named ax_1286))
   (assert (! (not (= Message.receiver2 FactorialCont.cust)) :named ax_1287))
   (assert (! (not (= Message.receiver2 FactorialCont.q)) :named ax_1288))
   (assert (! (not (= Message.receiver2 FactorialCont.q)) :named ax_1289))
   (assert (! (not (= Message.receiver2 FactorialContChannel.exp)) :named ax_1290))
   (assert (! (not (= Message.receiver2 FactorialContChannel.exp)) :named ax_1291))
   (assert (! (not (= Message.receiver2 FactorialContChannel.imp)) :named ax_1292))
   (assert (! (not (= Message.receiver2 FactorialContChannel.imp)) :named ax_1293))
   (assert (! (not (= Message.receiver2 FactorialContChannelExpEP.ch)) :named ax_1294))
   (assert (! (not (= Message.receiver2 FactorialContChannelExpEP.ch)) :named ax_1295))
   (assert (! (not (= Message.receiver2 FactorialContChannelExpEP.expch)) :named ax_1296))
   (assert (! (not (= Message.receiver2 FactorialContChannelExpEP.expch)) :named ax_1297))
   (assert (! (not (= Message.receiver2 FactorialContChannelImpEP.ch)) :named ax_1298))
   (assert (! (not (= Message.receiver2 FactorialContChannelImpEP.ch)) :named ax_1299))
   (assert (! (not (= Message.receiver2 FactorialContChannelImpEP.impch)) :named ax_1300))
   (assert (! (not (= Message.receiver2 FactorialContChannelImpEP.impch)) :named ax_1301))
   (assert (! (not (= Message.receiver2 Future.q)) :named ax_1302))
   (assert (! (not (= Message.receiver2 Future.q)) :named ax_1303))
   (assert (! (not (= Message.receiver2 Future.sent)) :named ax_1304))
   (assert (! (not (= Message.receiver2 Future.sent)) :named ax_1305))
   (assert (! (not (= Message.receiver2 Future.value)) :named ax_1306))
   (assert (! (not (= Message.receiver2 Future.value)) :named ax_1307))
   (assert (! (not (= Message.receiver2 FutureChannel.exp)) :named ax_1308))
   (assert (! (not (= Message.receiver2 FutureChannel.exp)) :named ax_1309))
   (assert (! (not (= Message.receiver2 FutureChannel.imp)) :named ax_1310))
   (assert (! (not (= Message.receiver2 FutureChannel.imp)) :named ax_1311))
   (assert (! (not (= Message.receiver2 FutureChannelExpEP.ch)) :named ax_1312))
   (assert (! (not (= Message.receiver2 FutureChannelExpEP.ch)) :named ax_1313))
   (assert (! (not (= Message.receiver2 FutureChannelExpEP.expch)) :named ax_1314))
   (assert (! (not (= Message.receiver2 FutureChannelExpEP.expch)) :named ax_1315))
   (assert (! (not (= Message.receiver2 FutureChannelImpEP.ch)) :named ax_1316))
   (assert (! (not (= Message.receiver2 FutureChannelImpEP.ch)) :named ax_1317))
   (assert (! (not (= Message.receiver2 FutureChannelImpEP.impch)) :named ax_1318))
   (assert (! (not (= Message.receiver2 FutureChannelImpEP.impch)) :named ax_1319))
   (assert (! (not (= Message.receiver2 Message.cust1)) :named ax_1320))
   (assert (! (not (= Message.receiver2 Message.cust1)) :named ax_1321))
   (assert (! (not (= Message.receiver2 Message.old1)) :named ax_1322))
   (assert (! (not (= Message.receiver2 Message.old1)) :named ax_1323))
   (assert (! (not (= Message.receiver2 Message.old2)) :named ax_1324))
   (assert (! (not (= Message.receiver2 Message.old2)) :named ax_1325))
   (assert (! (not (= Message.receiver2 Message.receiver1)) :named ax_1326))
   (assert (! (not (= Message.receiver2 Message.receiver1)) :named ax_1327))
   (assert (! (not (= Message.receiver3 FactorialActor.q)) :named ax_1328))
   (assert (! (not (= Message.receiver3 FactorialActor.q)) :named ax_1329))
   (assert (! (not (= Message.receiver3 FactorialActorChannel.exp)) :named ax_1330))
   (assert (! (not (= Message.receiver3 FactorialActorChannel.exp)) :named ax_1331))
   (assert (! (not (= Message.receiver3 FactorialActorChannel.imp)) :named ax_1332))
   (assert (! (not (= Message.receiver3 FactorialActorChannel.imp)) :named ax_1333))
   (assert (! (not (= Message.receiver3 FactorialActorChannelExpEP.ch)) :named ax_1334))
   (assert (! (not (= Message.receiver3 FactorialActorChannelExpEP.ch)) :named ax_1335))
   (assert (! (not (= Message.receiver3 FactorialActorChannelExpEP.expch)) :named ax_1336))
   (assert (! (not (= Message.receiver3 FactorialActorChannelExpEP.expch)) :named ax_1337))
   (assert (! (not (= Message.receiver3 FactorialActorChannelImpEP.ch)) :named ax_1338))
   (assert (! (not (= Message.receiver3 FactorialActorChannelImpEP.ch)) :named ax_1339))
   (assert (! (not (= Message.receiver3 FactorialActorChannelImpEP.impch)) :named ax_1340))
   (assert (! (not (= Message.receiver3 FactorialActorChannelImpEP.impch)) :named ax_1341))
   (assert (! (not (= Message.receiver3 FactorialCont.cust)) :named ax_1342))
   (assert (! (not (= Message.receiver3 FactorialCont.cust)) :named ax_1343))
   (assert (! (not (= Message.receiver3 FactorialCont.q)) :named ax_1344))
   (assert (! (not (= Message.receiver3 FactorialCont.q)) :named ax_1345))
   (assert (! (not (= Message.receiver3 FactorialContChannel.exp)) :named ax_1346))
   (assert (! (not (= Message.receiver3 FactorialContChannel.exp)) :named ax_1347))
   (assert (! (not (= Message.receiver3 FactorialContChannel.imp)) :named ax_1348))
   (assert (! (not (= Message.receiver3 FactorialContChannel.imp)) :named ax_1349))
   (assert (! (not (= Message.receiver3 FactorialContChannelExpEP.ch)) :named ax_1350))
   (assert (! (not (= Message.receiver3 FactorialContChannelExpEP.ch)) :named ax_1351))
   (assert (! (not (= Message.receiver3 FactorialContChannelExpEP.expch)) :named ax_1352))
   (assert (! (not (= Message.receiver3 FactorialContChannelExpEP.expch)) :named ax_1353))
   (assert (! (not (= Message.receiver3 FactorialContChannelImpEP.ch)) :named ax_1354))
   (assert (! (not (= Message.receiver3 FactorialContChannelImpEP.ch)) :named ax_1355))
   (assert (! (not (= Message.receiver3 FactorialContChannelImpEP.impch)) :named ax_1356))
   (assert (! (not (= Message.receiver3 FactorialContChannelImpEP.impch)) :named ax_1357))
   (assert (! (not (= Message.receiver3 Future.q)) :named ax_1358))
   (assert (! (not (= Message.receiver3 Future.q)) :named ax_1359))
   (assert (! (not (= Message.receiver3 Future.sent)) :named ax_1360))
   (assert (! (not (= Message.receiver3 Future.sent)) :named ax_1361))
   (assert (! (not (= Message.receiver3 Future.value)) :named ax_1362))
   (assert (! (not (= Message.receiver3 Future.value)) :named ax_1363))
   (assert (! (not (= Message.receiver3 FutureChannel.exp)) :named ax_1364))
   (assert (! (not (= Message.receiver3 FutureChannel.exp)) :named ax_1365))
   (assert (! (not (= Message.receiver3 FutureChannel.imp)) :named ax_1366))
   (assert (! (not (= Message.receiver3 FutureChannel.imp)) :named ax_1367))
   (assert (! (not (= Message.receiver3 FutureChannelExpEP.ch)) :named ax_1368))
   (assert (! (not (= Message.receiver3 FutureChannelExpEP.ch)) :named ax_1369))
   (assert (! (not (= Message.receiver3 FutureChannelExpEP.expch)) :named ax_1370))
   (assert (! (not (= Message.receiver3 FutureChannelExpEP.expch)) :named ax_1371))
   (assert (! (not (= Message.receiver3 FutureChannelImpEP.ch)) :named ax_1372))
   (assert (! (not (= Message.receiver3 FutureChannelImpEP.ch)) :named ax_1373))
   (assert (! (not (= Message.receiver3 FutureChannelImpEP.impch)) :named ax_1374))
   (assert (! (not (= Message.receiver3 FutureChannelImpEP.impch)) :named ax_1375))
   (assert (! (not (= Message.receiver3 Message.cust1)) :named ax_1376))
   (assert (! (not (= Message.receiver3 Message.cust1)) :named ax_1377))
   (assert (! (not (= Message.receiver3 Message.old1)) :named ax_1378))
   (assert (! (not (= Message.receiver3 Message.old1)) :named ax_1379))
   (assert (! (not (= Message.receiver3 Message.old2)) :named ax_1380))
   (assert (! (not (= Message.receiver3 Message.old2)) :named ax_1381))
   (assert (! (not (= Message.receiver3 Message.receiver1)) :named ax_1382))
   (assert (! (not (= Message.receiver3 Message.receiver1)) :named ax_1383))
   (assert (! (not (= Message.receiver3 Message.receiver2)) :named ax_1384))
   (assert (! (not (= Message.receiver3 Message.receiver2)) :named ax_1385))
   (assert (! (not (= Message.receiver4 FactorialActor.q)) :named ax_1386))
   (assert (! (not (= Message.receiver4 FactorialActor.q)) :named ax_1387))
   (assert (! (not (= Message.receiver4 FactorialActorChannel.exp)) :named ax_1388))
   (assert (! (not (= Message.receiver4 FactorialActorChannel.exp)) :named ax_1389))
   (assert (! (not (= Message.receiver4 FactorialActorChannel.imp)) :named ax_1390))
   (assert (! (not (= Message.receiver4 FactorialActorChannel.imp)) :named ax_1391))
   (assert (! (not (= Message.receiver4 FactorialActorChannelExpEP.ch)) :named ax_1392))
   (assert (! (not (= Message.receiver4 FactorialActorChannelExpEP.ch)) :named ax_1393))
   (assert (! (not (= Message.receiver4 FactorialActorChannelExpEP.expch)) :named ax_1394))
   (assert (! (not (= Message.receiver4 FactorialActorChannelExpEP.expch)) :named ax_1395))
   (assert (! (not (= Message.receiver4 FactorialActorChannelImpEP.ch)) :named ax_1396))
   (assert (! (not (= Message.receiver4 FactorialActorChannelImpEP.ch)) :named ax_1397))
   (assert (! (not (= Message.receiver4 FactorialActorChannelImpEP.impch)) :named ax_1398))
   (assert (! (not (= Message.receiver4 FactorialActorChannelImpEP.impch)) :named ax_1399))
   (assert (! (not (= Message.receiver4 FactorialCont.cust)) :named ax_1400))
   (assert (! (not (= Message.receiver4 FactorialCont.cust)) :named ax_1401))
   (assert (! (not (= Message.receiver4 FactorialCont.q)) :named ax_1402))
   (assert (! (not (= Message.receiver4 FactorialCont.q)) :named ax_1403))
   (assert (! (not (= Message.receiver4 FactorialContChannel.exp)) :named ax_1404))
   (assert (! (not (= Message.receiver4 FactorialContChannel.exp)) :named ax_1405))
   (assert (! (not (= Message.receiver4 FactorialContChannel.imp)) :named ax_1406))
   (assert (! (not (= Message.receiver4 FactorialContChannel.imp)) :named ax_1407))
   (assert (! (not (= Message.receiver4 FactorialContChannelExpEP.ch)) :named ax_1408))
   (assert (! (not (= Message.receiver4 FactorialContChannelExpEP.ch)) :named ax_1409))
   (assert (! (not (= Message.receiver4 FactorialContChannelExpEP.expch)) :named ax_1410))
   (assert (! (not (= Message.receiver4 FactorialContChannelExpEP.expch)) :named ax_1411))
   (assert (! (not (= Message.receiver4 FactorialContChannelImpEP.ch)) :named ax_1412))
   (assert (! (not (= Message.receiver4 FactorialContChannelImpEP.ch)) :named ax_1413))
   (assert (! (not (= Message.receiver4 FactorialContChannelImpEP.impch)) :named ax_1414))
   (assert (! (not (= Message.receiver4 FactorialContChannelImpEP.impch)) :named ax_1415))
   (assert (! (not (= Message.receiver4 Future.q)) :named ax_1416))
   (assert (! (not (= Message.receiver4 Future.q)) :named ax_1417))
   (assert (! (not (= Message.receiver4 Future.sent)) :named ax_1418))
   (assert (! (not (= Message.receiver4 Future.sent)) :named ax_1419))
   (assert (! (not (= Message.receiver4 Future.value)) :named ax_1420))
   (assert (! (not (= Message.receiver4 Future.value)) :named ax_1421))
   (assert (! (not (= Message.receiver4 FutureChannel.exp)) :named ax_1422))
   (assert (! (not (= Message.receiver4 FutureChannel.exp)) :named ax_1423))
   (assert (! (not (= Message.receiver4 FutureChannel.imp)) :named ax_1424))
   (assert (! (not (= Message.receiver4 FutureChannel.imp)) :named ax_1425))
   (assert (! (not (= Message.receiver4 FutureChannelExpEP.ch)) :named ax_1426))
   (assert (! (not (= Message.receiver4 FutureChannelExpEP.ch)) :named ax_1427))
   (assert (! (not (= Message.receiver4 FutureChannelExpEP.expch)) :named ax_1428))
   (assert (! (not (= Message.receiver4 FutureChannelExpEP.expch)) :named ax_1429))
   (assert (! (not (= Message.receiver4 FutureChannelImpEP.ch)) :named ax_1430))
   (assert (! (not (= Message.receiver4 FutureChannelImpEP.ch)) :named ax_1431))
   (assert (! (not (= Message.receiver4 FutureChannelImpEP.impch)) :named ax_1432))
   (assert (! (not (= Message.receiver4 FutureChannelImpEP.impch)) :named ax_1433))
   (assert (! (not (= Message.receiver4 Message.cust1)) :named ax_1434))
   (assert (! (not (= Message.receiver4 Message.cust1)) :named ax_1435))
   (assert (! (not (= Message.receiver4 Message.old1)) :named ax_1436))
   (assert (! (not (= Message.receiver4 Message.old1)) :named ax_1437))
   (assert (! (not (= Message.receiver4 Message.old2)) :named ax_1438))
   (assert (! (not (= Message.receiver4 Message.old2)) :named ax_1439))
   (assert (! (not (= Message.receiver4 Message.receiver1)) :named ax_1440))
   (assert (! (not (= Message.receiver4 Message.receiver1)) :named ax_1441))
   (assert (! (not (= Message.receiver4 Message.receiver2)) :named ax_1442))
   (assert (! (not (= Message.receiver4 Message.receiver2)) :named ax_1443))
   (assert (! (not (= Message.receiver4 Message.receiver3)) :named ax_1444))
   (assert (! (not (= Message.receiver4 Message.receiver3)) :named ax_1445))
   (assert (! (not (= Message.sender1 FactorialActor.q)) :named ax_1446))
   (assert (! (not (= Message.sender1 FactorialActor.q)) :named ax_1447))
   (assert (! (not (= Message.sender1 FactorialActorChannel.exp)) :named ax_1448))
   (assert (! (not (= Message.sender1 FactorialActorChannel.exp)) :named ax_1449))
   (assert (! (not (= Message.sender1 FactorialActorChannel.imp)) :named ax_1450))
   (assert (! (not (= Message.sender1 FactorialActorChannel.imp)) :named ax_1451))
   (assert (! (not (= Message.sender1 FactorialActorChannelExpEP.ch)) :named ax_1452))
   (assert (! (not (= Message.sender1 FactorialActorChannelExpEP.ch)) :named ax_1453))
   (assert (! (not (= Message.sender1 FactorialActorChannelExpEP.expch)) :named ax_1454))
   (assert (! (not (= Message.sender1 FactorialActorChannelExpEP.expch)) :named ax_1455))
   (assert (! (not (= Message.sender1 FactorialActorChannelImpEP.ch)) :named ax_1456))
   (assert (! (not (= Message.sender1 FactorialActorChannelImpEP.ch)) :named ax_1457))
   (assert (! (not (= Message.sender1 FactorialActorChannelImpEP.impch)) :named ax_1458))
   (assert (! (not (= Message.sender1 FactorialActorChannelImpEP.impch)) :named ax_1459))
   (assert (! (not (= Message.sender1 FactorialCont.cust)) :named ax_1460))
   (assert (! (not (= Message.sender1 FactorialCont.cust)) :named ax_1461))
   (assert (! (not (= Message.sender1 FactorialCont.q)) :named ax_1462))
   (assert (! (not (= Message.sender1 FactorialCont.q)) :named ax_1463))
   (assert (! (not (= Message.sender1 FactorialContChannel.exp)) :named ax_1464))
   (assert (! (not (= Message.sender1 FactorialContChannel.exp)) :named ax_1465))
   (assert (! (not (= Message.sender1 FactorialContChannel.imp)) :named ax_1466))
   (assert (! (not (= Message.sender1 FactorialContChannel.imp)) :named ax_1467))
   (assert (! (not (= Message.sender1 FactorialContChannelExpEP.ch)) :named ax_1468))
   (assert (! (not (= Message.sender1 FactorialContChannelExpEP.ch)) :named ax_1469))
   (assert (! (not (= Message.sender1 FactorialContChannelExpEP.expch)) :named ax_1470))
   (assert (! (not (= Message.sender1 FactorialContChannelExpEP.expch)) :named ax_1471))
   (assert (! (not (= Message.sender1 FactorialContChannelImpEP.ch)) :named ax_1472))
   (assert (! (not (= Message.sender1 FactorialContChannelImpEP.ch)) :named ax_1473))
   (assert (! (not (= Message.sender1 FactorialContChannelImpEP.impch)) :named ax_1474))
   (assert (! (not (= Message.sender1 FactorialContChannelImpEP.impch)) :named ax_1475))
   (assert (! (not (= Message.sender1 Future.q)) :named ax_1476))
   (assert (! (not (= Message.sender1 Future.q)) :named ax_1477))
   (assert (! (not (= Message.sender1 Future.sent)) :named ax_1478))
   (assert (! (not (= Message.sender1 Future.sent)) :named ax_1479))
   (assert (! (not (= Message.sender1 Future.value)) :named ax_1480))
   (assert (! (not (= Message.sender1 Future.value)) :named ax_1481))
   (assert (! (not (= Message.sender1 FutureChannel.exp)) :named ax_1482))
   (assert (! (not (= Message.sender1 FutureChannel.exp)) :named ax_1483))
   (assert (! (not (= Message.sender1 FutureChannel.imp)) :named ax_1484))
   (assert (! (not (= Message.sender1 FutureChannel.imp)) :named ax_1485))
   (assert (! (not (= Message.sender1 FutureChannelExpEP.ch)) :named ax_1486))
   (assert (! (not (= Message.sender1 FutureChannelExpEP.ch)) :named ax_1487))
   (assert (! (not (= Message.sender1 FutureChannelExpEP.expch)) :named ax_1488))
   (assert (! (not (= Message.sender1 FutureChannelExpEP.expch)) :named ax_1489))
   (assert (! (not (= Message.sender1 FutureChannelImpEP.ch)) :named ax_1490))
   (assert (! (not (= Message.sender1 FutureChannelImpEP.ch)) :named ax_1491))
   (assert (! (not (= Message.sender1 FutureChannelImpEP.impch)) :named ax_1492))
   (assert (! (not (= Message.sender1 FutureChannelImpEP.impch)) :named ax_1493))
   (assert (! (not (= Message.sender1 Message.cust1)) :named ax_1494))
   (assert (! (not (= Message.sender1 Message.cust1)) :named ax_1495))
   (assert (! (not (= Message.sender1 Message.old1)) :named ax_1496))
   (assert (! (not (= Message.sender1 Message.old1)) :named ax_1497))
   (assert (! (not (= Message.sender1 Message.old2)) :named ax_1498))
   (assert (! (not (= Message.sender1 Message.old2)) :named ax_1499))
   (assert (! (not (= Message.sender1 Message.receiver1)) :named ax_1500))
   (assert (! (not (= Message.sender1 Message.receiver1)) :named ax_1501))
   (assert (! (not (= Message.sender1 Message.receiver2)) :named ax_1502))
   (assert (! (not (= Message.sender1 Message.receiver2)) :named ax_1503))
   (assert (! (not (= Message.sender1 Message.receiver3)) :named ax_1504))
   (assert (! (not (= Message.sender1 Message.receiver3)) :named ax_1505))
   (assert (! (not (= Message.sender1 Message.receiver4)) :named ax_1506))
   (assert (! (not (= Message.sender1 Message.receiver4)) :named ax_1507))
   (assert (! (not (= Message.sender2 FactorialActor.q)) :named ax_1508))
   (assert (! (not (= Message.sender2 FactorialActor.q)) :named ax_1509))
   (assert (! (not (= Message.sender2 FactorialActorChannel.exp)) :named ax_1510))
   (assert (! (not (= Message.sender2 FactorialActorChannel.exp)) :named ax_1511))
   (assert (! (not (= Message.sender2 FactorialActorChannel.imp)) :named ax_1512))
   (assert (! (not (= Message.sender2 FactorialActorChannel.imp)) :named ax_1513))
   (assert (! (not (= Message.sender2 FactorialActorChannelExpEP.ch)) :named ax_1514))
   (assert (! (not (= Message.sender2 FactorialActorChannelExpEP.ch)) :named ax_1515))
   (assert (! (not (= Message.sender2 FactorialActorChannelExpEP.expch)) :named ax_1516))
   (assert (! (not (= Message.sender2 FactorialActorChannelExpEP.expch)) :named ax_1517))
   (assert (! (not (= Message.sender2 FactorialActorChannelImpEP.ch)) :named ax_1518))
   (assert (! (not (= Message.sender2 FactorialActorChannelImpEP.ch)) :named ax_1519))
   (assert (! (not (= Message.sender2 FactorialActorChannelImpEP.impch)) :named ax_1520))
   (assert (! (not (= Message.sender2 FactorialActorChannelImpEP.impch)) :named ax_1521))
   (assert (! (not (= Message.sender2 FactorialCont.cust)) :named ax_1522))
   (assert (! (not (= Message.sender2 FactorialCont.cust)) :named ax_1523))
   (assert (! (not (= Message.sender2 FactorialCont.q)) :named ax_1524))
   (assert (! (not (= Message.sender2 FactorialCont.q)) :named ax_1525))
   (assert (! (not (= Message.sender2 FactorialContChannel.exp)) :named ax_1526))
   (assert (! (not (= Message.sender2 FactorialContChannel.exp)) :named ax_1527))
   (assert (! (not (= Message.sender2 FactorialContChannel.imp)) :named ax_1528))
   (assert (! (not (= Message.sender2 FactorialContChannel.imp)) :named ax_1529))
   (assert (! (not (= Message.sender2 FactorialContChannelExpEP.ch)) :named ax_1530))
   (assert (! (not (= Message.sender2 FactorialContChannelExpEP.ch)) :named ax_1531))
   (assert (! (not (= Message.sender2 FactorialContChannelExpEP.expch)) :named ax_1532))
   (assert (! (not (= Message.sender2 FactorialContChannelExpEP.expch)) :named ax_1533))
   (assert (! (not (= Message.sender2 FactorialContChannelImpEP.ch)) :named ax_1534))
   (assert (! (not (= Message.sender2 FactorialContChannelImpEP.ch)) :named ax_1535))
   (assert (! (not (= Message.sender2 FactorialContChannelImpEP.impch)) :named ax_1536))
   (assert (! (not (= Message.sender2 FactorialContChannelImpEP.impch)) :named ax_1537))
   (assert (! (not (= Message.sender2 Future.q)) :named ax_1538))
   (assert (! (not (= Message.sender2 Future.q)) :named ax_1539))
   (assert (! (not (= Message.sender2 Future.sent)) :named ax_1540))
   (assert (! (not (= Message.sender2 Future.sent)) :named ax_1541))
   (assert (! (not (= Message.sender2 Future.value)) :named ax_1542))
   (assert (! (not (= Message.sender2 Future.value)) :named ax_1543))
   (assert (! (not (= Message.sender2 FutureChannel.exp)) :named ax_1544))
   (assert (! (not (= Message.sender2 FutureChannel.exp)) :named ax_1545))
   (assert (! (not (= Message.sender2 FutureChannel.imp)) :named ax_1546))
   (assert (! (not (= Message.sender2 FutureChannel.imp)) :named ax_1547))
   (assert (! (not (= Message.sender2 FutureChannelExpEP.ch)) :named ax_1548))
   (assert (! (not (= Message.sender2 FutureChannelExpEP.ch)) :named ax_1549))
   (assert (! (not (= Message.sender2 FutureChannelExpEP.expch)) :named ax_1550))
   (assert (! (not (= Message.sender2 FutureChannelExpEP.expch)) :named ax_1551))
   (assert (! (not (= Message.sender2 FutureChannelImpEP.ch)) :named ax_1552))
   (assert (! (not (= Message.sender2 FutureChannelImpEP.ch)) :named ax_1553))
   (assert (! (not (= Message.sender2 FutureChannelImpEP.impch)) :named ax_1554))
   (assert (! (not (= Message.sender2 FutureChannelImpEP.impch)) :named ax_1555))
   (assert (! (not (= Message.sender2 Message.cust1)) :named ax_1556))
   (assert (! (not (= Message.sender2 Message.cust1)) :named ax_1557))
   (assert (! (not (= Message.sender2 Message.old1)) :named ax_1558))
   (assert (! (not (= Message.sender2 Message.old1)) :named ax_1559))
   (assert (! (not (= Message.sender2 Message.old2)) :named ax_1560))
   (assert (! (not (= Message.sender2 Message.old2)) :named ax_1561))
   (assert (! (not (= Message.sender2 Message.receiver1)) :named ax_1562))
   (assert (! (not (= Message.sender2 Message.receiver1)) :named ax_1563))
   (assert (! (not (= Message.sender2 Message.receiver2)) :named ax_1564))
   (assert (! (not (= Message.sender2 Message.receiver2)) :named ax_1565))
   (assert (! (not (= Message.sender2 Message.receiver3)) :named ax_1566))
   (assert (! (not (= Message.sender2 Message.receiver3)) :named ax_1567))
   (assert (! (not (= Message.sender2 Message.receiver4)) :named ax_1568))
   (assert (! (not (= Message.sender2 Message.receiver4)) :named ax_1569))
   (assert (! (not (= Message.sender2 Message.sender1)) :named ax_1570))
   (assert (! (not (= Message.sender2 Message.sender1)) :named ax_1571))
   (assert (! (not (= Message.sender3 FactorialActor.q)) :named ax_1572))
   (assert (! (not (= Message.sender3 FactorialActor.q)) :named ax_1573))
   (assert (! (not (= Message.sender3 FactorialActorChannel.exp)) :named ax_1574))
   (assert (! (not (= Message.sender3 FactorialActorChannel.exp)) :named ax_1575))
   (assert (! (not (= Message.sender3 FactorialActorChannel.imp)) :named ax_1576))
   (assert (! (not (= Message.sender3 FactorialActorChannel.imp)) :named ax_1577))
   (assert (! (not (= Message.sender3 FactorialActorChannelExpEP.ch)) :named ax_1578))
   (assert (! (not (= Message.sender3 FactorialActorChannelExpEP.ch)) :named ax_1579))
   (assert (! (not (= Message.sender3 FactorialActorChannelExpEP.expch)) :named ax_1580))
   (assert (! (not (= Message.sender3 FactorialActorChannelExpEP.expch)) :named ax_1581))
   (assert (! (not (= Message.sender3 FactorialActorChannelImpEP.ch)) :named ax_1582))
   (assert (! (not (= Message.sender3 FactorialActorChannelImpEP.ch)) :named ax_1583))
   (assert (! (not (= Message.sender3 FactorialActorChannelImpEP.impch)) :named ax_1584))
   (assert (! (not (= Message.sender3 FactorialActorChannelImpEP.impch)) :named ax_1585))
   (assert (! (not (= Message.sender3 FactorialCont.cust)) :named ax_1586))
   (assert (! (not (= Message.sender3 FactorialCont.cust)) :named ax_1587))
   (assert (! (not (= Message.sender3 FactorialCont.q)) :named ax_1588))
   (assert (! (not (= Message.sender3 FactorialCont.q)) :named ax_1589))
   (assert (! (not (= Message.sender3 FactorialContChannel.exp)) :named ax_1590))
   (assert (! (not (= Message.sender3 FactorialContChannel.exp)) :named ax_1591))
   (assert (! (not (= Message.sender3 FactorialContChannel.imp)) :named ax_1592))
   (assert (! (not (= Message.sender3 FactorialContChannel.imp)) :named ax_1593))
   (assert (! (not (= Message.sender3 FactorialContChannelExpEP.ch)) :named ax_1594))
   (assert (! (not (= Message.sender3 FactorialContChannelExpEP.ch)) :named ax_1595))
   (assert (! (not (= Message.sender3 FactorialContChannelExpEP.expch)) :named ax_1596))
   (assert (! (not (= Message.sender3 FactorialContChannelExpEP.expch)) :named ax_1597))
   (assert (! (not (= Message.sender3 FactorialContChannelImpEP.ch)) :named ax_1598))
   (assert (! (not (= Message.sender3 FactorialContChannelImpEP.ch)) :named ax_1599))
   (assert (! (not (= Message.sender3 FactorialContChannelImpEP.impch)) :named ax_1600))
   (assert (! (not (= Message.sender3 FactorialContChannelImpEP.impch)) :named ax_1601))
   (assert (! (not (= Message.sender3 Future.q)) :named ax_1602))
   (assert (! (not (= Message.sender3 Future.q)) :named ax_1603))
   (assert (! (not (= Message.sender3 Future.sent)) :named ax_1604))
   (assert (! (not (= Message.sender3 Future.sent)) :named ax_1605))
   (assert (! (not (= Message.sender3 Future.value)) :named ax_1606))
   (assert (! (not (= Message.sender3 Future.value)) :named ax_1607))
   (assert (! (not (= Message.sender3 FutureChannel.exp)) :named ax_1608))
   (assert (! (not (= Message.sender3 FutureChannel.exp)) :named ax_1609))
   (assert (! (not (= Message.sender3 FutureChannel.imp)) :named ax_1610))
   (assert (! (not (= Message.sender3 FutureChannel.imp)) :named ax_1611))
   (assert (! (not (= Message.sender3 FutureChannelExpEP.ch)) :named ax_1612))
   (assert (! (not (= Message.sender3 FutureChannelExpEP.ch)) :named ax_1613))
   (assert (! (not (= Message.sender3 FutureChannelExpEP.expch)) :named ax_1614))
   (assert (! (not (= Message.sender3 FutureChannelExpEP.expch)) :named ax_1615))
   (assert (! (not (= Message.sender3 FutureChannelImpEP.ch)) :named ax_1616))
   (assert (! (not (= Message.sender3 FutureChannelImpEP.ch)) :named ax_1617))
   (assert (! (not (= Message.sender3 FutureChannelImpEP.impch)) :named ax_1618))
   (assert (! (not (= Message.sender3 FutureChannelImpEP.impch)) :named ax_1619))
   (assert (! (not (= Message.sender3 Message.cust1)) :named ax_1620))
   (assert (! (not (= Message.sender3 Message.cust1)) :named ax_1621))
   (assert (! (not (= Message.sender3 Message.old1)) :named ax_1622))
   (assert (! (not (= Message.sender3 Message.old1)) :named ax_1623))
   (assert (! (not (= Message.sender3 Message.old2)) :named ax_1624))
   (assert (! (not (= Message.sender3 Message.old2)) :named ax_1625))
   (assert (! (not (= Message.sender3 Message.receiver1)) :named ax_1626))
   (assert (! (not (= Message.sender3 Message.receiver1)) :named ax_1627))
   (assert (! (not (= Message.sender3 Message.receiver2)) :named ax_1628))
   (assert (! (not (= Message.sender3 Message.receiver2)) :named ax_1629))
   (assert (! (not (= Message.sender3 Message.receiver3)) :named ax_1630))
   (assert (! (not (= Message.sender3 Message.receiver3)) :named ax_1631))
   (assert (! (not (= Message.sender3 Message.receiver4)) :named ax_1632))
   (assert (! (not (= Message.sender3 Message.receiver4)) :named ax_1633))
   (assert (! (not (= Message.sender3 Message.sender1)) :named ax_1634))
   (assert (! (not (= Message.sender3 Message.sender1)) :named ax_1635))
   (assert (! (not (= Message.sender3 Message.sender2)) :named ax_1636))
   (assert (! (not (= Message.sender3 Message.sender2)) :named ax_1637))
   (assert (! (not (= Message.sender4 FactorialActor.q)) :named ax_1638))
   (assert (! (not (= Message.sender4 FactorialActor.q)) :named ax_1639))
   (assert (! (not (= Message.sender4 FactorialActorChannel.exp)) :named ax_1640))
   (assert (! (not (= Message.sender4 FactorialActorChannel.exp)) :named ax_1641))
   (assert (! (not (= Message.sender4 FactorialActorChannel.imp)) :named ax_1642))
   (assert (! (not (= Message.sender4 FactorialActorChannel.imp)) :named ax_1643))
   (assert (! (not (= Message.sender4 FactorialActorChannelExpEP.ch)) :named ax_1644))
   (assert (! (not (= Message.sender4 FactorialActorChannelExpEP.ch)) :named ax_1645))
   (assert (! (not (= Message.sender4 FactorialActorChannelExpEP.expch)) :named ax_1646))
   (assert (! (not (= Message.sender4 FactorialActorChannelExpEP.expch)) :named ax_1647))
   (assert (! (not (= Message.sender4 FactorialActorChannelImpEP.ch)) :named ax_1648))
   (assert (! (not (= Message.sender4 FactorialActorChannelImpEP.ch)) :named ax_1649))
   (assert (! (not (= Message.sender4 FactorialActorChannelImpEP.impch)) :named ax_1650))
   (assert (! (not (= Message.sender4 FactorialActorChannelImpEP.impch)) :named ax_1651))
   (assert (! (not (= Message.sender4 FactorialCont.cust)) :named ax_1652))
   (assert (! (not (= Message.sender4 FactorialCont.cust)) :named ax_1653))
   (assert (! (not (= Message.sender4 FactorialCont.q)) :named ax_1654))
   (assert (! (not (= Message.sender4 FactorialCont.q)) :named ax_1655))
   (assert (! (not (= Message.sender4 FactorialContChannel.exp)) :named ax_1656))
   (assert (! (not (= Message.sender4 FactorialContChannel.exp)) :named ax_1657))
   (assert (! (not (= Message.sender4 FactorialContChannel.imp)) :named ax_1658))
   (assert (! (not (= Message.sender4 FactorialContChannel.imp)) :named ax_1659))
   (assert (! (not (= Message.sender4 FactorialContChannelExpEP.ch)) :named ax_1660))
   (assert (! (not (= Message.sender4 FactorialContChannelExpEP.ch)) :named ax_1661))
   (assert (! (not (= Message.sender4 FactorialContChannelExpEP.expch)) :named ax_1662))
   (assert (! (not (= Message.sender4 FactorialContChannelExpEP.expch)) :named ax_1663))
   (assert (! (not (= Message.sender4 FactorialContChannelImpEP.ch)) :named ax_1664))
   (assert (! (not (= Message.sender4 FactorialContChannelImpEP.ch)) :named ax_1665))
   (assert (! (not (= Message.sender4 FactorialContChannelImpEP.impch)) :named ax_1666))
   (assert (! (not (= Message.sender4 FactorialContChannelImpEP.impch)) :named ax_1667))
   (assert (! (not (= Message.sender4 Future.q)) :named ax_1668))
   (assert (! (not (= Message.sender4 Future.q)) :named ax_1669))
   (assert (! (not (= Message.sender4 Future.sent)) :named ax_1670))
   (assert (! (not (= Message.sender4 Future.sent)) :named ax_1671))
   (assert (! (not (= Message.sender4 Future.value)) :named ax_1672))
   (assert (! (not (= Message.sender4 Future.value)) :named ax_1673))
   (assert (! (not (= Message.sender4 FutureChannel.exp)) :named ax_1674))
   (assert (! (not (= Message.sender4 FutureChannel.exp)) :named ax_1675))
   (assert (! (not (= Message.sender4 FutureChannel.imp)) :named ax_1676))
   (assert (! (not (= Message.sender4 FutureChannel.imp)) :named ax_1677))
   (assert (! (not (= Message.sender4 FutureChannelExpEP.ch)) :named ax_1678))
   (assert (! (not (= Message.sender4 FutureChannelExpEP.ch)) :named ax_1679))
   (assert (! (not (= Message.sender4 FutureChannelExpEP.expch)) :named ax_1680))
   (assert (! (not (= Message.sender4 FutureChannelExpEP.expch)) :named ax_1681))
   (assert (! (not (= Message.sender4 FutureChannelImpEP.ch)) :named ax_1682))
   (assert (! (not (= Message.sender4 FutureChannelImpEP.ch)) :named ax_1683))
   (assert (! (not (= Message.sender4 FutureChannelImpEP.impch)) :named ax_1684))
   (assert (! (not (= Message.sender4 FutureChannelImpEP.impch)) :named ax_1685))
   (assert (! (not (= Message.sender4 Message.cust1)) :named ax_1686))
   (assert (! (not (= Message.sender4 Message.cust1)) :named ax_1687))
   (assert (! (not (= Message.sender4 Message.old1)) :named ax_1688))
   (assert (! (not (= Message.sender4 Message.old1)) :named ax_1689))
   (assert (! (not (= Message.sender4 Message.old2)) :named ax_1690))
   (assert (! (not (= Message.sender4 Message.old2)) :named ax_1691))
   (assert (! (not (= Message.sender4 Message.receiver1)) :named ax_1692))
   (assert (! (not (= Message.sender4 Message.receiver1)) :named ax_1693))
   (assert (! (not (= Message.sender4 Message.receiver2)) :named ax_1694))
   (assert (! (not (= Message.sender4 Message.receiver2)) :named ax_1695))
   (assert (! (not (= Message.sender4 Message.receiver3)) :named ax_1696))
   (assert (! (not (= Message.sender4 Message.receiver3)) :named ax_1697))
   (assert (! (not (= Message.sender4 Message.receiver4)) :named ax_1698))
   (assert (! (not (= Message.sender4 Message.receiver4)) :named ax_1699))
   (assert (! (not (= Message.sender4 Message.sender1)) :named ax_1700))
   (assert (! (not (= Message.sender4 Message.sender1)) :named ax_1701))
   (assert (! (not (= Message.sender4 Message.sender2)) :named ax_1702))
   (assert (! (not (= Message.sender4 Message.sender2)) :named ax_1703))
   (assert (! (not (= Message.sender4 Message.sender3)) :named ax_1704))
   (assert (! (not (= Message.sender4 Message.sender3)) :named ax_1705))
   (assert (! (not (= Message.type FactorialActorChannelExpEP.state)) :named ax_1706))
   (assert (! (not (= Message.type FactorialActorChannelExpEP.state)) :named ax_1707))
   (assert (! (not (= Message.type FactorialActorChannelImpEP.state)) :named ax_1708))
   (assert (! (not (= Message.type FactorialActorChannelImpEP.state)) :named ax_1709))
   (assert (! (not (= Message.type FactorialCont.v)) :named ax_1710))
   (assert (! (not (= Message.type FactorialCont.v)) :named ax_1711))
   (assert (! (not (= Message.type FactorialCont.vo)) :named ax_1712))
   (assert (! (not (= Message.type FactorialCont.vo)) :named ax_1713))
   (assert (! (not (= Message.type FactorialContChannelExpEP.state)) :named ax_1714))
   (assert (! (not (= Message.type FactorialContChannelExpEP.state)) :named ax_1715))
   (assert (! (not (= Message.type FactorialContChannelImpEP.state)) :named ax_1716))
   (assert (! (not (= Message.type FactorialContChannelImpEP.state)) :named ax_1717))
   (assert (! (not (= Message.type forkK)) :named ax_1718))
   (assert (! (not (= Message.type forkK)) :named ax_1719))
   (assert (! (not (= Message.type FutureChannelExpEP.state)) :named ax_1720))
   (assert (! (not (= Message.type FutureChannelExpEP.state)) :named ax_1721))
   (assert (! (not (= Message.type FutureChannelImpEP.state)) :named ax_1722))
   (assert (! (not (= Message.type FutureChannelImpEP.state)) :named ax_1723))
   (assert (! (not (= Message.type held)) :named ax_1724))
   (assert (! (not (= Message.type held)) :named ax_1725))
   (assert (! (not (= Message.type joinable)) :named ax_1726))
   (assert (! (not (= Message.type joinable)) :named ax_1727))
   (assert (! (not (= Message.v1 FactorialActorChannelExpEP.state)) :named ax_1728))
   (assert (! (not (= Message.v1 FactorialActorChannelExpEP.state)) :named ax_1729))
   (assert (! (not (= Message.v1 FactorialActorChannelImpEP.state)) :named ax_1730))
   (assert (! (not (= Message.v1 FactorialActorChannelImpEP.state)) :named ax_1731))
   (assert (! (not (= Message.v1 FactorialCont.v)) :named ax_1732))
   (assert (! (not (= Message.v1 FactorialCont.v)) :named ax_1733))
   (assert (! (not (= Message.v1 FactorialCont.vo)) :named ax_1734))
   (assert (! (not (= Message.v1 FactorialCont.vo)) :named ax_1735))
   (assert (! (not (= Message.v1 FactorialContChannelExpEP.state)) :named ax_1736))
   (assert (! (not (= Message.v1 FactorialContChannelExpEP.state)) :named ax_1737))
   (assert (! (not (= Message.v1 FactorialContChannelImpEP.state)) :named ax_1738))
   (assert (! (not (= Message.v1 FactorialContChannelImpEP.state)) :named ax_1739))
   (assert (! (not (= Message.v1 forkK)) :named ax_1740))
   (assert (! (not (= Message.v1 forkK)) :named ax_1741))
   (assert (! (not (= Message.v1 FutureChannelExpEP.state)) :named ax_1742))
   (assert (! (not (= Message.v1 FutureChannelExpEP.state)) :named ax_1743))
   (assert (! (not (= Message.v1 FutureChannelImpEP.state)) :named ax_1744))
   (assert (! (not (= Message.v1 FutureChannelImpEP.state)) :named ax_1745))
   (assert (! (not (= Message.v1 held)) :named ax_1746))
   (assert (! (not (= Message.v1 held)) :named ax_1747))
   (assert (! (not (= Message.v1 joinable)) :named ax_1748))
   (assert (! (not (= Message.v1 joinable)) :named ax_1749))
   (assert (! (not (= Message.v1 Message.type)) :named ax_1750))
   (assert (! (not (= Message.v1 Message.type)) :named ax_1751))
   (assert (! (not (= Message.vo1 FactorialActorChannelExpEP.state)) :named ax_1752))
   (assert (! (not (= Message.vo1 FactorialActorChannelExpEP.state)) :named ax_1753))
   (assert (! (not (= Message.vo1 FactorialActorChannelImpEP.state)) :named ax_1754))
   (assert (! (not (= Message.vo1 FactorialActorChannelImpEP.state)) :named ax_1755))
   (assert (! (not (= Message.vo1 FactorialCont.v)) :named ax_1756))
   (assert (! (not (= Message.vo1 FactorialCont.v)) :named ax_1757))
   (assert (! (not (= Message.vo1 FactorialCont.vo)) :named ax_1758))
   (assert (! (not (= Message.vo1 FactorialCont.vo)) :named ax_1759))
   (assert (! (not (= Message.vo1 FactorialContChannelExpEP.state)) :named ax_1760))
   (assert (! (not (= Message.vo1 FactorialContChannelExpEP.state)) :named ax_1761))
   (assert (! (not (= Message.vo1 FactorialContChannelImpEP.state)) :named ax_1762))
   (assert (! (not (= Message.vo1 FactorialContChannelImpEP.state)) :named ax_1763))
   (assert (! (not (= Message.vo1 forkK)) :named ax_1764))
   (assert (! (not (= Message.vo1 forkK)) :named ax_1765))
   (assert (! (not (= Message.vo1 FutureChannelExpEP.state)) :named ax_1766))
   (assert (! (not (= Message.vo1 FutureChannelExpEP.state)) :named ax_1767))
   (assert (! (not (= Message.vo1 FutureChannelImpEP.state)) :named ax_1768))
   (assert (! (not (= Message.vo1 FutureChannelImpEP.state)) :named ax_1769))
   (assert (! (not (= Message.vo1 held)) :named ax_1770))
   (assert (! (not (= Message.vo1 held)) :named ax_1771))
   (assert (! (not (= Message.vo1 joinable)) :named ax_1772))
   (assert (! (not (= Message.vo1 joinable)) :named ax_1773))
   (assert (! (not (= Message.vo1 Message.type)) :named ax_1774))
   (assert (! (not (= Message.vo1 Message.type)) :named ax_1775))
   (assert (! (not (= Message.vo1 Message.v1)) :named ax_1776))
   (assert (! (not (= Message.vo1 Message.v1)) :named ax_1777))
   (assert (! (not (= Message.vr1 FactorialActorChannelExpEP.state)) :named ax_1778))
   (assert (! (not (= Message.vr1 FactorialActorChannelExpEP.state)) :named ax_1779))
   (assert (! (not (= Message.vr1 FactorialActorChannelImpEP.state)) :named ax_1780))
   (assert (! (not (= Message.vr1 FactorialActorChannelImpEP.state)) :named ax_1781))
   (assert (! (not (= Message.vr1 FactorialCont.v)) :named ax_1782))
   (assert (! (not (= Message.vr1 FactorialCont.v)) :named ax_1783))
   (assert (! (not (= Message.vr1 FactorialCont.vo)) :named ax_1784))
   (assert (! (not (= Message.vr1 FactorialCont.vo)) :named ax_1785))
   (assert (! (not (= Message.vr1 FactorialContChannelExpEP.state)) :named ax_1786))
   (assert (! (not (= Message.vr1 FactorialContChannelExpEP.state)) :named ax_1787))
   (assert (! (not (= Message.vr1 FactorialContChannelImpEP.state)) :named ax_1788))
   (assert (! (not (= Message.vr1 FactorialContChannelImpEP.state)) :named ax_1789))
   (assert (! (not (= Message.vr1 forkK)) :named ax_1790))
   (assert (! (not (= Message.vr1 forkK)) :named ax_1791))
   (assert (! (not (= Message.vr1 FutureChannelExpEP.state)) :named ax_1792))
   (assert (! (not (= Message.vr1 FutureChannelExpEP.state)) :named ax_1793))
   (assert (! (not (= Message.vr1 FutureChannelImpEP.state)) :named ax_1794))
   (assert (! (not (= Message.vr1 FutureChannelImpEP.state)) :named ax_1795))
   (assert (! (not (= Message.vr1 held)) :named ax_1796))
   (assert (! (not (= Message.vr1 held)) :named ax_1797))
   (assert (! (not (= Message.vr1 joinable)) :named ax_1798))
   (assert (! (not (= Message.vr1 joinable)) :named ax_1799))
   (assert (! (not (= Message.vr1 Message.type)) :named ax_1800))
   (assert (! (not (= Message.vr1 Message.type)) :named ax_1801))
   (assert (! (not (= Message.vr1 Message.v1)) :named ax_1802))
   (assert (! (not (= Message.vr1 Message.v1)) :named ax_1803))
   (assert (! (not (= Message.vr1 Message.vo1)) :named ax_1804))
   (assert (! (not (= Message.vr1 Message.vo1)) :named ax_1805))
   (assert (! (not (= Message.vr2 FactorialActorChannelExpEP.state)) :named ax_1806))
   (assert (! (not (= Message.vr2 FactorialActorChannelExpEP.state)) :named ax_1807))
   (assert (! (not (= Message.vr2 FactorialActorChannelImpEP.state)) :named ax_1808))
   (assert (! (not (= Message.vr2 FactorialActorChannelImpEP.state)) :named ax_1809))
   (assert (! (not (= Message.vr2 FactorialCont.v)) :named ax_1810))
   (assert (! (not (= Message.vr2 FactorialCont.v)) :named ax_1811))
   (assert (! (not (= Message.vr2 FactorialCont.vo)) :named ax_1812))
   (assert (! (not (= Message.vr2 FactorialCont.vo)) :named ax_1813))
   (assert (! (not (= Message.vr2 FactorialContChannelExpEP.state)) :named ax_1814))
   (assert (! (not (= Message.vr2 FactorialContChannelExpEP.state)) :named ax_1815))
   (assert (! (not (= Message.vr2 FactorialContChannelImpEP.state)) :named ax_1816))
   (assert (! (not (= Message.vr2 FactorialContChannelImpEP.state)) :named ax_1817))
   (assert (! (not (= Message.vr2 forkK)) :named ax_1818))
   (assert (! (not (= Message.vr2 forkK)) :named ax_1819))
   (assert (! (not (= Message.vr2 FutureChannelExpEP.state)) :named ax_1820))
   (assert (! (not (= Message.vr2 FutureChannelExpEP.state)) :named ax_1821))
   (assert (! (not (= Message.vr2 FutureChannelImpEP.state)) :named ax_1822))
   (assert (! (not (= Message.vr2 FutureChannelImpEP.state)) :named ax_1823))
   (assert (! (not (= Message.vr2 held)) :named ax_1824))
   (assert (! (not (= Message.vr2 held)) :named ax_1825))
   (assert (! (not (= Message.vr2 joinable)) :named ax_1826))
   (assert (! (not (= Message.vr2 joinable)) :named ax_1827))
   (assert (! (not (= Message.vr2 Message.type)) :named ax_1828))
   (assert (! (not (= Message.vr2 Message.type)) :named ax_1829))
   (assert (! (not (= Message.vr2 Message.v1)) :named ax_1830))
   (assert (! (not (= Message.vr2 Message.v1)) :named ax_1831))
   (assert (! (not (= Message.vr2 Message.vo1)) :named ax_1832))
   (assert (! (not (= Message.vr2 Message.vo1)) :named ax_1833))
   (assert (! (not (= Message.vr2 Message.vr1)) :named ax_1834))
   (assert (! (not (= Message.vr2 Message.vr1)) :named ax_1835))
   (assert (! (not (= Message.vr3 FactorialActorChannelExpEP.state)) :named ax_1836))
   (assert (! (not (= Message.vr3 FactorialActorChannelExpEP.state)) :named ax_1837))
   (assert (! (not (= Message.vr3 FactorialActorChannelImpEP.state)) :named ax_1838))
   (assert (! (not (= Message.vr3 FactorialActorChannelImpEP.state)) :named ax_1839))
   (assert (! (not (= Message.vr3 FactorialCont.v)) :named ax_1840))
   (assert (! (not (= Message.vr3 FactorialCont.v)) :named ax_1841))
   (assert (! (not (= Message.vr3 FactorialCont.vo)) :named ax_1842))
   (assert (! (not (= Message.vr3 FactorialCont.vo)) :named ax_1843))
   (assert (! (not (= Message.vr3 FactorialContChannelExpEP.state)) :named ax_1844))
   (assert (! (not (= Message.vr3 FactorialContChannelExpEP.state)) :named ax_1845))
   (assert (! (not (= Message.vr3 FactorialContChannelImpEP.state)) :named ax_1846))
   (assert (! (not (= Message.vr3 FactorialContChannelImpEP.state)) :named ax_1847))
   (assert (! (not (= Message.vr3 forkK)) :named ax_1848))
   (assert (! (not (= Message.vr3 forkK)) :named ax_1849))
   (assert (! (not (= Message.vr3 FutureChannelExpEP.state)) :named ax_1850))
   (assert (! (not (= Message.vr3 FutureChannelExpEP.state)) :named ax_1851))
   (assert (! (not (= Message.vr3 FutureChannelImpEP.state)) :named ax_1852))
   (assert (! (not (= Message.vr3 FutureChannelImpEP.state)) :named ax_1853))
   (assert (! (not (= Message.vr3 held)) :named ax_1854))
   (assert (! (not (= Message.vr3 held)) :named ax_1855))
   (assert (! (not (= Message.vr3 joinable)) :named ax_1856))
   (assert (! (not (= Message.vr3 joinable)) :named ax_1857))
   (assert (! (not (= Message.vr3 Message.type)) :named ax_1858))
   (assert (! (not (= Message.vr3 Message.type)) :named ax_1859))
   (assert (! (not (= Message.vr3 Message.v1)) :named ax_1860))
   (assert (! (not (= Message.vr3 Message.v1)) :named ax_1861))
   (assert (! (not (= Message.vr3 Message.vo1)) :named ax_1862))
   (assert (! (not (= Message.vr3 Message.vo1)) :named ax_1863))
   (assert (! (not (= Message.vr3 Message.vr1)) :named ax_1864))
   (assert (! (not (= Message.vr3 Message.vr1)) :named ax_1865))
   (assert (! (not (= Message.vr3 Message.vr2)) :named ax_1866))
   (assert (! (not (= Message.vr3 Message.vr2)) :named ax_1867))
   (assert (! (not (= Message@t Channel@t)) :named ax_1868))
   (assert (! (not (= Message@t Channel@t)) :named ax_1869))
   (assert (! (not (= perm$R perm$N)) :named ax_1870))
   (assert (! (not (= perm$R perm$N)) :named ax_1871))

;Program
(assert (! (and true
$start
) :named ax_true))
(assert (! (=> $start (and true 
   (and true
      (< (* 1000 channelK) (Fractions 1))
      (< (* 1000 monitorK) (Fractions 1))
      (< (* 1000 predicateK) (Fractions 1))
      (< 0 channelK)
      (< 0 monitorK)
      (< 0 predicateK)
      (= (= true $@bf) (combine$Bool$Bool$ true true))
      (= (= true $@bf_1) (combine$Bool$Bool$ true false))
      (= (= true $@bf_2) (combine$Bool$Bool$ false true))
      (= (= true $@bf_3) (combine$Bool$Bool$ false false))
      (= (= true $@bf_306) (ite$Bool$ true true true))
      (= (= true $@bf_307) (ite$Bool$ true true false))
      (= (= true $@bf_308) (ite$Bool$ true false true))
      (= (= true $@bf_309) (ite$Bool$ true false false))
      (= (= true $@bf_310) (ite$Bool$ false true true))
      (= (= true $@bf_311) (ite$Bool$ false true false))
      (= (= true $@bf_312) (ite$Bool$ false false true))
      (= (= true $@bf_313) (ite$Bool$ false false false))
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Full perm$N) 0)
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Full perm$R) Permission$FullFraction)
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Zero perm$N) 0)
      (= (MapRead$$@Map@@PermissionComponent@To@Int@@$ Permission$Zero perm$R) 0)
      (= channelK monitorK)
      (= Permission$FullFraction (Fractions 100))
      (= predicateK channelK)
      (> Permission$denominator 0)
      (forall( (|a_$10| Bool) (|b_$10| Field$Mu$))(!(= (IsGoodState$Bool$ (combine$Bool$Field$Mu$$ |a_$10| |b_$10|)) (and (IsGoodState$Bool$ |a_$10|) (IsGoodState$Field$Mu$$ |b_$10|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Field$Mu$$ |a_$10| |b_$10|)))))
      (forall( (|a_$100| Field$Int$) (|b_$100| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@PermissionComponent@To@Int@@$ |a_$100| |b_$100|)) (and (IsGoodState$Field$Int$$ |a_$100|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$100|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@PermissionComponent@To@Int@@$ |a_$100| |b_$100|)))))
      (forall( (|a_$101| Field$Int$) (|b_$101| PermissionComponent))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$PermissionComponent$ |a_$101| |b_$101|)) (and (IsGoodState$Field$Int$$ |a_$101|) (IsGoodState$PermissionComponent$ |b_$101|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$PermissionComponent$ |a_$101| |b_$101|)))))
      (forall( (|a_$102| Field$Int$) (|b_$102| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$102| |b_$102|)) (and (IsGoodState$Field$Int$$ |a_$102|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$102|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$102| |b_$102|)))))
      (forall( (|a_$103| Field$Int$) (|b_$103| ref))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$ref$ |a_$103| |b_$103|)) (and (IsGoodState$Field$Int$$ |a_$103|) (IsGoodState$ref$ |b_$103|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$ref$ |a_$103| |b_$103|)))))
      (forall( (|a_$104| Field$Int$) (|b_$104| Field$Int$))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$Int$$ |a_$104| |b_$104|)) (and (IsGoodState$Field$Int$$ |a_$104|) (IsGoodState$Field$Int$$ |b_$104|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$Int$$ |a_$104| |b_$104|)))))
      (forall( (|a_$105| Field$Int$) (|b_$105| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$105| |b_$105|)) (and (IsGoodState$Field$Int$$ |a_$105|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$105|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$105| |b_$105|)))))
      (forall( (|a_$106| Field$Int$) (|b_$106| Field$Mu$))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$Mu$$ |a_$106| |b_$106|)) (and (IsGoodState$Field$Int$$ |a_$106|) (IsGoodState$Field$Mu$$ |b_$106|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$Mu$$ |a_$106| |b_$106|)))))
      (forall( (|a_$107| Field$Int$) (|b_$107| Mu))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Mu$ |a_$107| |b_$107|)) (and (IsGoodState$Field$Int$$ |a_$107|) (IsGoodState$Mu$ |b_$107|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Mu$ |a_$107| |b_$107|)))))
      (forall( (|a_$108| Field$Int$) (|b_$108| Field$Bool$))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$Bool$$ |a_$108| |b_$108|)) (and (IsGoodState$Field$Int$$ |a_$108|) (IsGoodState$Field$Bool$$ |b_$108|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$Bool$$ |a_$108| |b_$108|)))))
      (forall( (|a_$109| Field$Int$) (|b_$109| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@ref@To@Int@@$ |a_$109| |b_$109|)) (and (IsGoodState$Field$Int$$ |a_$109|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$109|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$$@Map@@ref@To@Int@@$ |a_$109| |b_$109|)))))
      (forall( (|a_$11| Bool) (|b_$11| Mu))(!(= (IsGoodState$Bool$ (combine$Bool$Mu$ |a_$11| |b_$11|)) (and (IsGoodState$Bool$ |a_$11|) (IsGoodState$Mu$ |b_$11|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Mu$ |a_$11| |b_$11|)))))
      (forall( (|a_$110| Field$Int$) (|b_$110| Field$ref$))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$ref$$ |a_$110| |b_$110|)) (and (IsGoodState$Field$Int$$ |a_$110|) (IsGoodState$Field$ref$$ |b_$110|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$ref$$ |a_$110| |b_$110|)))))
      (forall( (|a_$111| Field$Int$) (|b_$111| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$111| |b_$111|)) (and (IsGoodState$Field$Int$$ |a_$111|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$111|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$111| |b_$111|)))))
      (forall( (|a_$112| Field$Int$) (|b_$112| ModuleName))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$ModuleName$ |a_$112| |b_$112|)) (and (IsGoodState$Field$Int$$ |a_$112|) (IsGoodState$ModuleName$ |b_$112|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$ModuleName$ |a_$112| |b_$112|)))))
      (forall( (|a_$113| Field$Int$) (|b_$113| TypeName))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$TypeName$ |a_$113| |b_$113|)) (and (IsGoodState$Field$Int$$ |a_$113|) (IsGoodState$TypeName$ |b_$113|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$TypeName$ |a_$113| |b_$113|)))))
      (forall( (|a_$114| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$114| Bool))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |a_$114| |b_$114|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$114|) (IsGoodState$Bool$ |b_$114|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |a_$114| |b_$114|)))))
      (forall( (|a_$115| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$115| Int))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |a_$115| |b_$115|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$115|) (IsGoodState$Int$ |b_$115|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |a_$115| |b_$115|)))))
      (forall( (|a_$116| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$116| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@PermissionComponent@To@Int@@$ |a_$116| |b_$116|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$116|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$116|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@PermissionComponent@To@Int@@$ |a_$116| |b_$116|)))))
      (forall( (|a_$117| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$117| PermissionComponent))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$PermissionComponent$ |a_$117| |b_$117|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$117|) (IsGoodState$PermissionComponent$ |b_$117|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$PermissionComponent$ |a_$117| |b_$117|)))))
      (forall( (|a_$118| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$118| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$118| |b_$118|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$118|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$118|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$118| |b_$118|)))))
      (forall( (|a_$119| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$119| ref))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |a_$119| |b_$119|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$119|) (IsGoodState$ref$ |b_$119|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |a_$119| |b_$119|)))))
      (forall( (|a_$12| Bool) (|b_$12| Field$Bool$))(!(= (IsGoodState$Bool$ (combine$Bool$Field$Bool$$ |a_$12| |b_$12|)) (and (IsGoodState$Bool$ |a_$12|) (IsGoodState$Field$Bool$$ |b_$12|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Field$Bool$$ |a_$12| |b_$12|)))))
      (forall( (|a_$120| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$120| Field$Int$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Int$$ |a_$120| |b_$120|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$120|) (IsGoodState$Field$Int$$ |b_$120|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Int$$ |a_$120| |b_$120|)))))
      (forall( (|a_$121| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$121| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$121| |b_$121|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$121|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$121|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$121| |b_$121|)))))
      (forall( (|a_$122| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$122| Field$Mu$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Mu$$ |a_$122| |b_$122|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$122|) (IsGoodState$Field$Mu$$ |b_$122|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Mu$$ |a_$122| |b_$122|)))))
      (forall( (|a_$123| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$123| Mu))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |a_$123| |b_$123|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$123|) (IsGoodState$Mu$ |b_$123|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |a_$123| |b_$123|)))))
      (forall( (|a_$124| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$124| Field$Bool$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Bool$$ |a_$124| |b_$124|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$124|) (IsGoodState$Field$Bool$$ |b_$124|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$Bool$$ |a_$124| |b_$124|)))))
      (forall( (|a_$125| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$125| $@Map@@ref@To@Int@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@ref@To@Int@@$ |a_$125| |b_$125|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$125|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$125|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@ref@To@Int@@$ |a_$125| |b_$125|)))))
      (forall( (|a_$126| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$126| Field$ref$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$ref$$ |a_$126| |b_$126|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$126|) (IsGoodState$Field$ref$$ |b_$126|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$ref$$ |a_$126| |b_$126|)))))
      (forall( (|a_$127| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$127| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$127| |b_$127|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$127|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$127|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$127| |b_$127|)))))
      (forall( (|a_$128| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$128| ModuleName))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ModuleName$ |a_$128| |b_$128|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$128|) (IsGoodState$ModuleName$ |b_$128|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ModuleName$ |a_$128| |b_$128|)))))
      (forall( (|a_$129| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$129| TypeName))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$TypeName$ |a_$129| |b_$129|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$129|) (IsGoodState$TypeName$ |b_$129|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$TypeName$ |a_$129| |b_$129|)))))
      (forall( (|a_$13| Bool) (|b_$13| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Bool$ (combine$Bool$$@Map@@ref@To@Int@@$ |a_$13| |b_$13|)) (and (IsGoodState$Bool$ |a_$13|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$13|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$$@Map@@ref@To@Int@@$ |a_$13| |b_$13|)))))
      (forall( (|a_$130| Field$Mu$) (|b_$130| Bool))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Bool$ |a_$130| |b_$130|)) (and (IsGoodState$Field$Mu$$ |a_$130|) (IsGoodState$Bool$ |b_$130|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Bool$ |a_$130| |b_$130|)))))
      (forall( (|a_$131| Field$Mu$) (|b_$131| Int))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Int$ |a_$131| |b_$131|)) (and (IsGoodState$Field$Mu$$ |a_$131|) (IsGoodState$Int$ |b_$131|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Int$ |a_$131| |b_$131|)))))
      (forall( (|a_$132| Field$Mu$) (|b_$132| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@PermissionComponent@To@Int@@$ |a_$132| |b_$132|)) (and (IsGoodState$Field$Mu$$ |a_$132|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$132|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@PermissionComponent@To@Int@@$ |a_$132| |b_$132|)))))
      (forall( (|a_$133| Field$Mu$) (|b_$133| PermissionComponent))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$PermissionComponent$ |a_$133| |b_$133|)) (and (IsGoodState$Field$Mu$$ |a_$133|) (IsGoodState$PermissionComponent$ |b_$133|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$PermissionComponent$ |a_$133| |b_$133|)))))
      (forall( (|a_$134| Field$Mu$) (|b_$134| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$134| |b_$134|)) (and (IsGoodState$Field$Mu$$ |a_$134|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$134|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$134| |b_$134|)))))
      (forall( (|a_$135| Field$Mu$) (|b_$135| ref))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$ref$ |a_$135| |b_$135|)) (and (IsGoodState$Field$Mu$$ |a_$135|) (IsGoodState$ref$ |b_$135|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$ref$ |a_$135| |b_$135|)))))
      (forall( (|a_$136| Field$Mu$) (|b_$136| Field$Int$))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$Int$$ |a_$136| |b_$136|)) (and (IsGoodState$Field$Mu$$ |a_$136|) (IsGoodState$Field$Int$$ |b_$136|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$Int$$ |a_$136| |b_$136|)))))
      (forall( (|a_$137| Field$Mu$) (|b_$137| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$137| |b_$137|)) (and (IsGoodState$Field$Mu$$ |a_$137|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$137|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$137| |b_$137|)))))
      (forall( (|a_$138| Field$Mu$) (|b_$138| Field$Mu$))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$Mu$$ |a_$138| |b_$138|)) (and (IsGoodState$Field$Mu$$ |a_$138|) (IsGoodState$Field$Mu$$ |b_$138|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$Mu$$ |a_$138| |b_$138|)))))
      (forall( (|a_$139| Field$Mu$) (|b_$139| Mu))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Mu$ |a_$139| |b_$139|)) (and (IsGoodState$Field$Mu$$ |a_$139|) (IsGoodState$Mu$ |b_$139|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Mu$ |a_$139| |b_$139|)))))
      (forall( (|a_$14| Bool) (|b_$14| Field$ref$))(!(= (IsGoodState$Bool$ (combine$Bool$Field$ref$$ |a_$14| |b_$14|)) (and (IsGoodState$Bool$ |a_$14|) (IsGoodState$Field$ref$$ |b_$14|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Field$ref$$ |a_$14| |b_$14|)))))
      (forall( (|a_$140| Field$Mu$) (|b_$140| Field$Bool$))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$Bool$$ |a_$140| |b_$140|)) (and (IsGoodState$Field$Mu$$ |a_$140|) (IsGoodState$Field$Bool$$ |b_$140|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$Bool$$ |a_$140| |b_$140|)))))
      (forall( (|a_$141| Field$Mu$) (|b_$141| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@ref@To@Int@@$ |a_$141| |b_$141|)) (and (IsGoodState$Field$Mu$$ |a_$141|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$141|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$$@Map@@ref@To@Int@@$ |a_$141| |b_$141|)))))
      (forall( (|a_$142| Field$Mu$) (|b_$142| Field$ref$))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$ref$$ |a_$142| |b_$142|)) (and (IsGoodState$Field$Mu$$ |a_$142|) (IsGoodState$Field$ref$$ |b_$142|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$ref$$ |a_$142| |b_$142|)))))
      (forall( (|a_$143| Field$Mu$) (|b_$143| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$143| |b_$143|)) (and (IsGoodState$Field$Mu$$ |a_$143|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$143|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$143| |b_$143|)))))
      (forall( (|a_$144| Field$Mu$) (|b_$144| ModuleName))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$ModuleName$ |a_$144| |b_$144|)) (and (IsGoodState$Field$Mu$$ |a_$144|) (IsGoodState$ModuleName$ |b_$144|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$ModuleName$ |a_$144| |b_$144|)))))
      (forall( (|a_$145| Field$Mu$) (|b_$145| TypeName))(!(= (IsGoodState$Field$Mu$$ (combine$Field$Mu$$TypeName$ |a_$145| |b_$145|)) (and (IsGoodState$Field$Mu$$ |a_$145|) (IsGoodState$TypeName$ |b_$145|)))  :pattern ( (IsGoodState$Field$Mu$$ (combine$Field$Mu$$TypeName$ |a_$145| |b_$145|)))))
      (forall( (|a_$146| Mu) (|b_$146| Bool))(!(= (IsGoodState$Mu$ (combine$Mu$Bool$ |a_$146| |b_$146|)) (and (IsGoodState$Mu$ |a_$146|) (IsGoodState$Bool$ |b_$146|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Bool$ |a_$146| |b_$146|)))))
      (forall( (|a_$147| Mu) (|b_$147| Int))(!(= (IsGoodState$Mu$ (combine$Mu$Int$ |a_$147| |b_$147|)) (and (IsGoodState$Mu$ |a_$147|) (IsGoodState$Int$ |b_$147|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Int$ |a_$147| |b_$147|)))))
      (forall( (|a_$148| Mu) (|b_$148| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Mu$ (combine$Mu$$@Map@@PermissionComponent@To@Int@@$ |a_$148| |b_$148|)) (and (IsGoodState$Mu$ |a_$148|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$148|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$$@Map@@PermissionComponent@To@Int@@$ |a_$148| |b_$148|)))))
      (forall( (|a_$149| Mu) (|b_$149| PermissionComponent))(!(= (IsGoodState$Mu$ (combine$Mu$PermissionComponent$ |a_$149| |b_$149|)) (and (IsGoodState$Mu$ |a_$149|) (IsGoodState$PermissionComponent$ |b_$149|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$PermissionComponent$ |a_$149| |b_$149|)))))
      (forall( (|a_$15| Bool) (|b_$15| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Bool$ (combine$Bool$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$15| |b_$15|)) (and (IsGoodState$Bool$ |a_$15|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$15|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$15| |b_$15|)))))
      (forall( (|a_$150| Mu) (|b_$150| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Mu$ (combine$Mu$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$150| |b_$150|)) (and (IsGoodState$Mu$ |a_$150|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$150|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$150| |b_$150|)))))
      (forall( (|a_$151| Mu) (|b_$151| ref))(!(= (IsGoodState$Mu$ (combine$Mu$ref$ |a_$151| |b_$151|)) (and (IsGoodState$Mu$ |a_$151|) (IsGoodState$ref$ |b_$151|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$ref$ |a_$151| |b_$151|)))))
      (forall( (|a_$152| Mu) (|b_$152| Field$Int$))(!(= (IsGoodState$Mu$ (combine$Mu$Field$Int$$ |a_$152| |b_$152|)) (and (IsGoodState$Mu$ |a_$152|) (IsGoodState$Field$Int$$ |b_$152|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Field$Int$$ |a_$152| |b_$152|)))))
      (forall( (|a_$153| Mu) (|b_$153| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Mu$ (combine$Mu$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$153| |b_$153|)) (and (IsGoodState$Mu$ |a_$153|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$153|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$153| |b_$153|)))))
      (forall( (|a_$154| Mu) (|b_$154| Field$Mu$))(!(= (IsGoodState$Mu$ (combine$Mu$Field$Mu$$ |a_$154| |b_$154|)) (and (IsGoodState$Mu$ |a_$154|) (IsGoodState$Field$Mu$$ |b_$154|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Field$Mu$$ |a_$154| |b_$154|)))))
      (forall( (|a_$155| Mu) (|b_$155| Mu))(!(= (IsGoodState$Mu$ (combine$Mu$Mu$ |a_$155| |b_$155|)) (and (IsGoodState$Mu$ |a_$155|) (IsGoodState$Mu$ |b_$155|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Mu$ |a_$155| |b_$155|)))))
      (forall( (|a_$156| Mu) (|b_$156| Field$Bool$))(!(= (IsGoodState$Mu$ (combine$Mu$Field$Bool$$ |a_$156| |b_$156|)) (and (IsGoodState$Mu$ |a_$156|) (IsGoodState$Field$Bool$$ |b_$156|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Field$Bool$$ |a_$156| |b_$156|)))))
      (forall( (|a_$157| Mu) (|b_$157| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Mu$ (combine$Mu$$@Map@@ref@To@Int@@$ |a_$157| |b_$157|)) (and (IsGoodState$Mu$ |a_$157|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$157|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$$@Map@@ref@To@Int@@$ |a_$157| |b_$157|)))))
      (forall( (|a_$158| Mu) (|b_$158| Field$ref$))(!(= (IsGoodState$Mu$ (combine$Mu$Field$ref$$ |a_$158| |b_$158|)) (and (IsGoodState$Mu$ |a_$158|) (IsGoodState$Field$ref$$ |b_$158|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Field$ref$$ |a_$158| |b_$158|)))))
      (forall( (|a_$159| Mu) (|b_$159| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Mu$ (combine$Mu$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$159| |b_$159|)) (and (IsGoodState$Mu$ |a_$159|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$159|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$159| |b_$159|)))))
      (forall( (|a_$16| Bool) (|b_$16| ModuleName))(!(= (IsGoodState$Bool$ (combine$Bool$ModuleName$ |a_$16| |b_$16|)) (and (IsGoodState$Bool$ |a_$16|) (IsGoodState$ModuleName$ |b_$16|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$ModuleName$ |a_$16| |b_$16|)))))
      (forall( (|a_$160| Mu) (|b_$160| ModuleName))(!(= (IsGoodState$Mu$ (combine$Mu$ModuleName$ |a_$160| |b_$160|)) (and (IsGoodState$Mu$ |a_$160|) (IsGoodState$ModuleName$ |b_$160|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$ModuleName$ |a_$160| |b_$160|)))))
      (forall( (|a_$161| Mu) (|b_$161| TypeName))(!(= (IsGoodState$Mu$ (combine$Mu$TypeName$ |a_$161| |b_$161|)) (and (IsGoodState$Mu$ |a_$161|) (IsGoodState$TypeName$ |b_$161|)))  :pattern ( (IsGoodState$Mu$ (combine$Mu$TypeName$ |a_$161| |b_$161|)))))
      (forall( (|a_$162| Field$Bool$) (|b_$162| Bool))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Bool$ |a_$162| |b_$162|)) (and (IsGoodState$Field$Bool$$ |a_$162|) (IsGoodState$Bool$ |b_$162|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Bool$ |a_$162| |b_$162|)))))
      (forall( (|a_$163| Field$Bool$) (|b_$163| Int))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Int$ |a_$163| |b_$163|)) (and (IsGoodState$Field$Bool$$ |a_$163|) (IsGoodState$Int$ |b_$163|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Int$ |a_$163| |b_$163|)))))
      (forall( (|a_$164| Field$Bool$) (|b_$164| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@PermissionComponent@To@Int@@$ |a_$164| |b_$164|)) (and (IsGoodState$Field$Bool$$ |a_$164|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$164|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@PermissionComponent@To@Int@@$ |a_$164| |b_$164|)))))
      (forall( (|a_$165| Field$Bool$) (|b_$165| PermissionComponent))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$PermissionComponent$ |a_$165| |b_$165|)) (and (IsGoodState$Field$Bool$$ |a_$165|) (IsGoodState$PermissionComponent$ |b_$165|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$PermissionComponent$ |a_$165| |b_$165|)))))
      (forall( (|a_$166| Field$Bool$) (|b_$166| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$166| |b_$166|)) (and (IsGoodState$Field$Bool$$ |a_$166|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$166|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$166| |b_$166|)))))
      (forall( (|a_$167| Field$Bool$) (|b_$167| ref))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$ref$ |a_$167| |b_$167|)) (and (IsGoodState$Field$Bool$$ |a_$167|) (IsGoodState$ref$ |b_$167|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$ref$ |a_$167| |b_$167|)))))
      (forall( (|a_$168| Field$Bool$) (|b_$168| Field$Int$))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$Int$$ |a_$168| |b_$168|)) (and (IsGoodState$Field$Bool$$ |a_$168|) (IsGoodState$Field$Int$$ |b_$168|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$Int$$ |a_$168| |b_$168|)))))
      (forall( (|a_$169| Field$Bool$) (|b_$169| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$169| |b_$169|)) (and (IsGoodState$Field$Bool$$ |a_$169|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$169|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$169| |b_$169|)))))
      (forall( (|a_$17| Bool) (|b_$17| TypeName))(!(= (IsGoodState$Bool$ (combine$Bool$TypeName$ |a_$17| |b_$17|)) (and (IsGoodState$Bool$ |a_$17|) (IsGoodState$TypeName$ |b_$17|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$TypeName$ |a_$17| |b_$17|)))))
      (forall( (|a_$170| Field$Bool$) (|b_$170| Field$Mu$))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$Mu$$ |a_$170| |b_$170|)) (and (IsGoodState$Field$Bool$$ |a_$170|) (IsGoodState$Field$Mu$$ |b_$170|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$Mu$$ |a_$170| |b_$170|)))))
      (forall( (|a_$171| Field$Bool$) (|b_$171| Mu))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Mu$ |a_$171| |b_$171|)) (and (IsGoodState$Field$Bool$$ |a_$171|) (IsGoodState$Mu$ |b_$171|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Mu$ |a_$171| |b_$171|)))))
      (forall( (|a_$172| Field$Bool$) (|b_$172| Field$Bool$))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$Bool$$ |a_$172| |b_$172|)) (and (IsGoodState$Field$Bool$$ |a_$172|) (IsGoodState$Field$Bool$$ |b_$172|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$Bool$$ |a_$172| |b_$172|)))))
      (forall( (|a_$173| Field$Bool$) (|b_$173| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@ref@To@Int@@$ |a_$173| |b_$173|)) (and (IsGoodState$Field$Bool$$ |a_$173|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$173|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$$@Map@@ref@To@Int@@$ |a_$173| |b_$173|)))))
      (forall( (|a_$174| Field$Bool$) (|b_$174| Field$ref$))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$ref$$ |a_$174| |b_$174|)) (and (IsGoodState$Field$Bool$$ |a_$174|) (IsGoodState$Field$ref$$ |b_$174|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$ref$$ |a_$174| |b_$174|)))))
      (forall( (|a_$175| Field$Bool$) (|b_$175| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$175| |b_$175|)) (and (IsGoodState$Field$Bool$$ |a_$175|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$175|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$175| |b_$175|)))))
      (forall( (|a_$176| Field$Bool$) (|b_$176| ModuleName))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$ModuleName$ |a_$176| |b_$176|)) (and (IsGoodState$Field$Bool$$ |a_$176|) (IsGoodState$ModuleName$ |b_$176|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$ModuleName$ |a_$176| |b_$176|)))))
      (forall( (|a_$177| Field$Bool$) (|b_$177| TypeName))(!(= (IsGoodState$Field$Bool$$ (combine$Field$Bool$$TypeName$ |a_$177| |b_$177|)) (and (IsGoodState$Field$Bool$$ |a_$177|) (IsGoodState$TypeName$ |b_$177|)))  :pattern ( (IsGoodState$Field$Bool$$ (combine$Field$Bool$$TypeName$ |a_$177| |b_$177|)))))
      (forall( (|a_$178| $@Map@@ref@To@Int@@) (|b_$178| Bool))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Bool$ |a_$178| |b_$178|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$178|) (IsGoodState$Bool$ |b_$178|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Bool$ |a_$178| |b_$178|)))))
      (forall( (|a_$179| $@Map@@ref@To@Int@@) (|b_$179| Int))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Int$ |a_$179| |b_$179|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$179|) (IsGoodState$Int$ |b_$179|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Int$ |a_$179| |b_$179|)))))
      (forall( (|a_$18| Int) (|b_$18| Bool))(!(= (IsGoodState$Int$ (combine$Int$Bool$ |a_$18| |b_$18|)) (and (IsGoodState$Int$ |a_$18|) (IsGoodState$Bool$ |b_$18|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Bool$ |a_$18| |b_$18|)))))
      (forall( (|a_$180| $@Map@@ref@To@Int@@) (|b_$180| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@PermissionComponent@To@Int@@$ |a_$180| |b_$180|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$180|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$180|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@PermissionComponent@To@Int@@$ |a_$180| |b_$180|)))))
      (forall( (|a_$181| $@Map@@ref@To@Int@@) (|b_$181| PermissionComponent))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$PermissionComponent$ |a_$181| |b_$181|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$181|) (IsGoodState$PermissionComponent$ |b_$181|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$PermissionComponent$ |a_$181| |b_$181|)))))
      (forall( (|a_$182| $@Map@@ref@To@Int@@) (|b_$182| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$182| |b_$182|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$182|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$182|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$182| |b_$182|)))))
      (forall( (|a_$183| $@Map@@ref@To@Int@@) (|b_$183| ref))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$ref$ |a_$183| |b_$183|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$183|) (IsGoodState$ref$ |b_$183|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$ref$ |a_$183| |b_$183|)))))
      (forall( (|a_$184| $@Map@@ref@To@Int@@) (|b_$184| Field$Int$))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$Int$$ |a_$184| |b_$184|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$184|) (IsGoodState$Field$Int$$ |b_$184|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$Int$$ |a_$184| |b_$184|)))))
      (forall( (|a_$185| $@Map@@ref@To@Int@@) (|b_$185| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$185| |b_$185|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$185|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$185|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$185| |b_$185|)))))
      (forall( (|a_$186| $@Map@@ref@To@Int@@) (|b_$186| Field$Mu$))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$Mu$$ |a_$186| |b_$186|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$186|) (IsGoodState$Field$Mu$$ |b_$186|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$Mu$$ |a_$186| |b_$186|)))))
      (forall( (|a_$187| $@Map@@ref@To@Int@@) (|b_$187| Mu))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Mu$ |a_$187| |b_$187|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$187|) (IsGoodState$Mu$ |b_$187|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Mu$ |a_$187| |b_$187|)))))
      (forall( (|a_$188| $@Map@@ref@To@Int@@) (|b_$188| Field$Bool$))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$Bool$$ |a_$188| |b_$188|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$188|) (IsGoodState$Field$Bool$$ |b_$188|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$Bool$$ |a_$188| |b_$188|)))))
      (forall( (|a_$189| $@Map@@ref@To@Int@@) (|b_$189| $@Map@@ref@To@Int@@))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@ref@To@Int@@$ |a_$189| |b_$189|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$189|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$189|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$$@Map@@ref@To@Int@@$ |a_$189| |b_$189|)))))
      (forall( (|a_$19| Int) (|b_$19| Int))(!(= (IsGoodState$Int$ (combine$Int$Int$ |a_$19| |b_$19|)) (and (IsGoodState$Int$ |a_$19|) (IsGoodState$Int$ |b_$19|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Int$ |a_$19| |b_$19|)))))
      (forall( (|a_$190| $@Map@@ref@To@Int@@) (|b_$190| Field$ref$))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$ref$$ |a_$190| |b_$190|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$190|) (IsGoodState$Field$ref$$ |b_$190|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$ref$$ |a_$190| |b_$190|)))))
      (forall( (|a_$191| $@Map@@ref@To@Int@@) (|b_$191| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$191| |b_$191|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$191|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$191|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$191| |b_$191|)))))
      (forall( (|a_$192| $@Map@@ref@To@Int@@) (|b_$192| ModuleName))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$ModuleName$ |a_$192| |b_$192|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$192|) (IsGoodState$ModuleName$ |b_$192|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$ModuleName$ |a_$192| |b_$192|)))))
      (forall( (|a_$193| $@Map@@ref@To@Int@@) (|b_$193| TypeName))(!(= (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$TypeName$ |a_$193| |b_$193|)) (and (IsGoodState$$@Map@@ref@To@Int@@$ |a_$193|) (IsGoodState$TypeName$ |b_$193|)))  :pattern ( (IsGoodState$$@Map@@ref@To@Int@@$ (combine$$@Map@@ref@To@Int@@$TypeName$ |a_$193| |b_$193|)))))
      (forall( (|a_$194| Field$ref$) (|b_$194| Bool))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Bool$ |a_$194| |b_$194|)) (and (IsGoodState$Field$ref$$ |a_$194|) (IsGoodState$Bool$ |b_$194|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Bool$ |a_$194| |b_$194|)))))
      (forall( (|a_$195| Field$ref$) (|b_$195| Int))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Int$ |a_$195| |b_$195|)) (and (IsGoodState$Field$ref$$ |a_$195|) (IsGoodState$Int$ |b_$195|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Int$ |a_$195| |b_$195|)))))
      (forall( (|a_$196| Field$ref$) (|b_$196| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@PermissionComponent@To@Int@@$ |a_$196| |b_$196|)) (and (IsGoodState$Field$ref$$ |a_$196|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$196|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@PermissionComponent@To@Int@@$ |a_$196| |b_$196|)))))
      (forall( (|a_$197| Field$ref$) (|b_$197| PermissionComponent))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$PermissionComponent$ |a_$197| |b_$197|)) (and (IsGoodState$Field$ref$$ |a_$197|) (IsGoodState$PermissionComponent$ |b_$197|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$PermissionComponent$ |a_$197| |b_$197|)))))
      (forall( (|a_$198| Field$ref$) (|b_$198| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$198| |b_$198|)) (and (IsGoodState$Field$ref$$ |a_$198|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$198|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$198| |b_$198|)))))
      (forall( (|a_$199| Field$ref$) (|b_$199| ref))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$ref$ |a_$199| |b_$199|)) (and (IsGoodState$Field$ref$$ |a_$199|) (IsGoodState$ref$ |b_$199|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$ref$ |a_$199| |b_$199|)))))
      (forall( (|a_$2| Bool) (|b_$2| Bool))(!(= (IsGoodState$Bool$ (combine$Bool$Bool$ |a_$2| |b_$2|)) (and (IsGoodState$Bool$ |a_$2|) (IsGoodState$Bool$ |b_$2|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Bool$ |a_$2| |b_$2|)))))
      (forall( (|a_$20| Int) (|b_$20| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Int$ (combine$Int$$@Map@@PermissionComponent@To@Int@@$ |a_$20| |b_$20|)) (and (IsGoodState$Int$ |a_$20|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$20|)))  :pattern ( (IsGoodState$Int$ (combine$Int$$@Map@@PermissionComponent@To@Int@@$ |a_$20| |b_$20|)))))
      (forall( (|a_$200| Field$ref$) (|b_$200| Field$Int$))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$Int$$ |a_$200| |b_$200|)) (and (IsGoodState$Field$ref$$ |a_$200|) (IsGoodState$Field$Int$$ |b_$200|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$Int$$ |a_$200| |b_$200|)))))
      (forall( (|a_$201| Field$ref$) (|b_$201| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$201| |b_$201|)) (and (IsGoodState$Field$ref$$ |a_$201|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$201|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$201| |b_$201|)))))
      (forall( (|a_$202| Field$ref$) (|b_$202| Field$Mu$))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$Mu$$ |a_$202| |b_$202|)) (and (IsGoodState$Field$ref$$ |a_$202|) (IsGoodState$Field$Mu$$ |b_$202|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$Mu$$ |a_$202| |b_$202|)))))
      (forall( (|a_$203| Field$ref$) (|b_$203| Mu))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Mu$ |a_$203| |b_$203|)) (and (IsGoodState$Field$ref$$ |a_$203|) (IsGoodState$Mu$ |b_$203|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Mu$ |a_$203| |b_$203|)))))
      (forall( (|a_$204| Field$ref$) (|b_$204| Field$Bool$))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$Bool$$ |a_$204| |b_$204|)) (and (IsGoodState$Field$ref$$ |a_$204|) (IsGoodState$Field$Bool$$ |b_$204|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$Bool$$ |a_$204| |b_$204|)))))
      (forall( (|a_$205| Field$ref$) (|b_$205| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@ref@To@Int@@$ |a_$205| |b_$205|)) (and (IsGoodState$Field$ref$$ |a_$205|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$205|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$$@Map@@ref@To@Int@@$ |a_$205| |b_$205|)))))
      (forall( (|a_$206| Field$ref$) (|b_$206| Field$ref$))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$ref$$ |a_$206| |b_$206|)) (and (IsGoodState$Field$ref$$ |a_$206|) (IsGoodState$Field$ref$$ |b_$206|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$ref$$ |a_$206| |b_$206|)))))
      (forall( (|a_$207| Field$ref$) (|b_$207| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$207| |b_$207|)) (and (IsGoodState$Field$ref$$ |a_$207|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$207|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$207| |b_$207|)))))
      (forall( (|a_$208| Field$ref$) (|b_$208| ModuleName))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$ModuleName$ |a_$208| |b_$208|)) (and (IsGoodState$Field$ref$$ |a_$208|) (IsGoodState$ModuleName$ |b_$208|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$ModuleName$ |a_$208| |b_$208|)))))
      (forall( (|a_$209| Field$ref$) (|b_$209| TypeName))(!(= (IsGoodState$Field$ref$$ (combine$Field$ref$$TypeName$ |a_$209| |b_$209|)) (and (IsGoodState$Field$ref$$ |a_$209|) (IsGoodState$TypeName$ |b_$209|)))  :pattern ( (IsGoodState$Field$ref$$ (combine$Field$ref$$TypeName$ |a_$209| |b_$209|)))))
      (forall( (|a_$21| Int) (|b_$21| PermissionComponent))(!(= (IsGoodState$Int$ (combine$Int$PermissionComponent$ |a_$21| |b_$21|)) (and (IsGoodState$Int$ |a_$21|) (IsGoodState$PermissionComponent$ |b_$21|)))  :pattern ( (IsGoodState$Int$ (combine$Int$PermissionComponent$ |a_$21| |b_$21|)))))
      (forall( (|a_$210| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$210| Bool))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Bool$ |a_$210| |b_$210|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$210|) (IsGoodState$Bool$ |b_$210|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Bool$ |a_$210| |b_$210|)))))
      (forall( (|a_$211| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$211| Int))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Int$ |a_$211| |b_$211|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$211|) (IsGoodState$Int$ |b_$211|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Int$ |a_$211| |b_$211|)))))
      (forall( (|a_$212| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$212| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@PermissionComponent@To@Int@@$ |a_$212| |b_$212|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$212|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$212|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@PermissionComponent@To@Int@@$ |a_$212| |b_$212|)))))
      (forall( (|a_$213| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$213| PermissionComponent))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$PermissionComponent$ |a_$213| |b_$213|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$213|) (IsGoodState$PermissionComponent$ |b_$213|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$PermissionComponent$ |a_$213| |b_$213|)))))
      (forall( (|a_$214| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$214| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$214| |b_$214|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$214|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$214|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$214| |b_$214|)))))
      (forall( (|a_$215| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$215| ref))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ref$ |a_$215| |b_$215|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$215|) (IsGoodState$ref$ |b_$215|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ref$ |a_$215| |b_$215|)))))
      (forall( (|a_$216| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$216| Field$Int$))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Int$$ |a_$216| |b_$216|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$216|) (IsGoodState$Field$Int$$ |b_$216|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Int$$ |a_$216| |b_$216|)))))
      (forall( (|a_$217| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$217| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$217| |b_$217|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$217|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$217|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$217| |b_$217|)))))
      (forall( (|a_$218| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$218| Field$Mu$))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Mu$$ |a_$218| |b_$218|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$218|) (IsGoodState$Field$Mu$$ |b_$218|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Mu$$ |a_$218| |b_$218|)))))
      (forall( (|a_$219| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$219| Mu))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Mu$ |a_$219| |b_$219|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$219|) (IsGoodState$Mu$ |b_$219|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Mu$ |a_$219| |b_$219|)))))
      (forall( (|a_$22| Int) (|b_$22| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Int$ (combine$Int$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$22| |b_$22|)) (and (IsGoodState$Int$ |a_$22|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$22|)))  :pattern ( (IsGoodState$Int$ (combine$Int$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$22| |b_$22|)))))
      (forall( (|a_$220| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$220| Field$Bool$))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Bool$$ |a_$220| |b_$220|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$220|) (IsGoodState$Field$Bool$$ |b_$220|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$Bool$$ |a_$220| |b_$220|)))))
      (forall( (|a_$221| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$221| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@ref@To@Int@@$ |a_$221| |b_$221|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$221|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$221|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$$@Map@@ref@To@Int@@$ |a_$221| |b_$221|)))))
      (forall( (|a_$222| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$222| Field$ref$))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$ref$$ |a_$222| |b_$222|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$222|) (IsGoodState$Field$ref$$ |b_$222|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$ref$$ |a_$222| |b_$222|)))))
      (forall( (|a_$223| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$223| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$223| |b_$223|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$223|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$223|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$223| |b_$223|)))))
      (forall( (|a_$224| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$224| ModuleName))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ModuleName$ |a_$224| |b_$224|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$224|) (IsGoodState$ModuleName$ |b_$224|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ModuleName$ |a_$224| |b_$224|)))))
      (forall( (|a_$225| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$225| TypeName))(!(= (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$TypeName$ |a_$225| |b_$225|)) (and (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$225|) (IsGoodState$TypeName$ |b_$225|)))  :pattern ( (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ (combine$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$TypeName$ |a_$225| |b_$225|)))))
      (forall( (|a_$226| ModuleName) (|b_$226| Bool))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Bool$ |a_$226| |b_$226|)) (and (IsGoodState$ModuleName$ |a_$226|) (IsGoodState$Bool$ |b_$226|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Bool$ |a_$226| |b_$226|)))))
      (forall( (|a_$227| ModuleName) (|b_$227| Int))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Int$ |a_$227| |b_$227|)) (and (IsGoodState$ModuleName$ |a_$227|) (IsGoodState$Int$ |b_$227|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Int$ |a_$227| |b_$227|)))))
      (forall( (|a_$228| ModuleName) (|b_$228| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@PermissionComponent@To@Int@@$ |a_$228| |b_$228|)) (and (IsGoodState$ModuleName$ |a_$228|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$228|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@PermissionComponent@To@Int@@$ |a_$228| |b_$228|)))))
      (forall( (|a_$229| ModuleName) (|b_$229| PermissionComponent))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$PermissionComponent$ |a_$229| |b_$229|)) (and (IsGoodState$ModuleName$ |a_$229|) (IsGoodState$PermissionComponent$ |b_$229|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$PermissionComponent$ |a_$229| |b_$229|)))))
      (forall( (|a_$23| Int) (|b_$23| ref))(!(= (IsGoodState$Int$ (combine$Int$ref$ |a_$23| |b_$23|)) (and (IsGoodState$Int$ |a_$23|) (IsGoodState$ref$ |b_$23|)))  :pattern ( (IsGoodState$Int$ (combine$Int$ref$ |a_$23| |b_$23|)))))
      (forall( (|a_$230| ModuleName) (|b_$230| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$230| |b_$230|)) (and (IsGoodState$ModuleName$ |a_$230|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$230|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$230| |b_$230|)))))
      (forall( (|a_$231| ModuleName) (|b_$231| ref))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$ref$ |a_$231| |b_$231|)) (and (IsGoodState$ModuleName$ |a_$231|) (IsGoodState$ref$ |b_$231|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$ref$ |a_$231| |b_$231|)))))
      (forall( (|a_$232| ModuleName) (|b_$232| Field$Int$))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Field$Int$$ |a_$232| |b_$232|)) (and (IsGoodState$ModuleName$ |a_$232|) (IsGoodState$Field$Int$$ |b_$232|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Field$Int$$ |a_$232| |b_$232|)))))
      (forall( (|a_$233| ModuleName) (|b_$233| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$233| |b_$233|)) (and (IsGoodState$ModuleName$ |a_$233|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$233|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$233| |b_$233|)))))
      (forall( (|a_$234| ModuleName) (|b_$234| Field$Mu$))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Field$Mu$$ |a_$234| |b_$234|)) (and (IsGoodState$ModuleName$ |a_$234|) (IsGoodState$Field$Mu$$ |b_$234|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Field$Mu$$ |a_$234| |b_$234|)))))
      (forall( (|a_$235| ModuleName) (|b_$235| Mu))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Mu$ |a_$235| |b_$235|)) (and (IsGoodState$ModuleName$ |a_$235|) (IsGoodState$Mu$ |b_$235|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Mu$ |a_$235| |b_$235|)))))
      (forall( (|a_$236| ModuleName) (|b_$236| Field$Bool$))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Field$Bool$$ |a_$236| |b_$236|)) (and (IsGoodState$ModuleName$ |a_$236|) (IsGoodState$Field$Bool$$ |b_$236|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Field$Bool$$ |a_$236| |b_$236|)))))
      (forall( (|a_$237| ModuleName) (|b_$237| $@Map@@ref@To@Int@@))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@ref@To@Int@@$ |a_$237| |b_$237|)) (and (IsGoodState$ModuleName$ |a_$237|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$237|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$$@Map@@ref@To@Int@@$ |a_$237| |b_$237|)))))
      (forall( (|a_$238| ModuleName) (|b_$238| Field$ref$))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Field$ref$$ |a_$238| |b_$238|)) (and (IsGoodState$ModuleName$ |a_$238|) (IsGoodState$Field$ref$$ |b_$238|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Field$ref$$ |a_$238| |b_$238|)))))
      (forall( (|a_$239| ModuleName) (|b_$239| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$239| |b_$239|)) (and (IsGoodState$ModuleName$ |a_$239|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$239|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$239| |b_$239|)))))
      (forall( (|a_$24| Int) (|b_$24| Field$Int$))(!(= (IsGoodState$Int$ (combine$Int$Field$Int$$ |a_$24| |b_$24|)) (and (IsGoodState$Int$ |a_$24|) (IsGoodState$Field$Int$$ |b_$24|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Field$Int$$ |a_$24| |b_$24|)))))
      (forall( (|a_$240| ModuleName) (|b_$240| ModuleName))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$ModuleName$ |a_$240| |b_$240|)) (and (IsGoodState$ModuleName$ |a_$240|) (IsGoodState$ModuleName$ |b_$240|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$ModuleName$ |a_$240| |b_$240|)))))
      (forall( (|a_$241| ModuleName) (|b_$241| TypeName))(!(= (IsGoodState$ModuleName$ (combine$ModuleName$TypeName$ |a_$241| |b_$241|)) (and (IsGoodState$ModuleName$ |a_$241|) (IsGoodState$TypeName$ |b_$241|)))  :pattern ( (IsGoodState$ModuleName$ (combine$ModuleName$TypeName$ |a_$241| |b_$241|)))))
      (forall( (|a_$242| TypeName) (|b_$242| Bool))(!(= (IsGoodState$TypeName$ (combine$TypeName$Bool$ |a_$242| |b_$242|)) (and (IsGoodState$TypeName$ |a_$242|) (IsGoodState$Bool$ |b_$242|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Bool$ |a_$242| |b_$242|)))))
      (forall( (|a_$243| TypeName) (|b_$243| Int))(!(= (IsGoodState$TypeName$ (combine$TypeName$Int$ |a_$243| |b_$243|)) (and (IsGoodState$TypeName$ |a_$243|) (IsGoodState$Int$ |b_$243|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Int$ |a_$243| |b_$243|)))))
      (forall( (|a_$244| TypeName) (|b_$244| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$TypeName$ (combine$TypeName$$@Map@@PermissionComponent@To@Int@@$ |a_$244| |b_$244|)) (and (IsGoodState$TypeName$ |a_$244|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$244|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$$@Map@@PermissionComponent@To@Int@@$ |a_$244| |b_$244|)))))
      (forall( (|a_$245| TypeName) (|b_$245| PermissionComponent))(!(= (IsGoodState$TypeName$ (combine$TypeName$PermissionComponent$ |a_$245| |b_$245|)) (and (IsGoodState$TypeName$ |a_$245|) (IsGoodState$PermissionComponent$ |b_$245|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$PermissionComponent$ |a_$245| |b_$245|)))))
      (forall( (|a_$246| TypeName) (|b_$246| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$TypeName$ (combine$TypeName$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$246| |b_$246|)) (and (IsGoodState$TypeName$ |a_$246|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$246|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$246| |b_$246|)))))
      (forall( (|a_$247| TypeName) (|b_$247| ref))(!(= (IsGoodState$TypeName$ (combine$TypeName$ref$ |a_$247| |b_$247|)) (and (IsGoodState$TypeName$ |a_$247|) (IsGoodState$ref$ |b_$247|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$ref$ |a_$247| |b_$247|)))))
      (forall( (|a_$248| TypeName) (|b_$248| Field$Int$))(!(= (IsGoodState$TypeName$ (combine$TypeName$Field$Int$$ |a_$248| |b_$248|)) (and (IsGoodState$TypeName$ |a_$248|) (IsGoodState$Field$Int$$ |b_$248|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Field$Int$$ |a_$248| |b_$248|)))))
      (forall( (|a_$249| TypeName) (|b_$249| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$TypeName$ (combine$TypeName$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$249| |b_$249|)) (and (IsGoodState$TypeName$ |a_$249|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$249|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$249| |b_$249|)))))
      (forall( (|a_$25| Int) (|b_$25| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Int$ (combine$Int$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$25| |b_$25|)) (and (IsGoodState$Int$ |a_$25|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$25|)))  :pattern ( (IsGoodState$Int$ (combine$Int$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$25| |b_$25|)))))
      (forall( (|a_$250| TypeName) (|b_$250| Field$Mu$))(!(= (IsGoodState$TypeName$ (combine$TypeName$Field$Mu$$ |a_$250| |b_$250|)) (and (IsGoodState$TypeName$ |a_$250|) (IsGoodState$Field$Mu$$ |b_$250|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Field$Mu$$ |a_$250| |b_$250|)))))
      (forall( (|a_$251| TypeName) (|b_$251| Mu))(!(= (IsGoodState$TypeName$ (combine$TypeName$Mu$ |a_$251| |b_$251|)) (and (IsGoodState$TypeName$ |a_$251|) (IsGoodState$Mu$ |b_$251|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Mu$ |a_$251| |b_$251|)))))
      (forall( (|a_$252| TypeName) (|b_$252| Field$Bool$))(!(= (IsGoodState$TypeName$ (combine$TypeName$Field$Bool$$ |a_$252| |b_$252|)) (and (IsGoodState$TypeName$ |a_$252|) (IsGoodState$Field$Bool$$ |b_$252|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Field$Bool$$ |a_$252| |b_$252|)))))
      (forall( (|a_$253| TypeName) (|b_$253| $@Map@@ref@To@Int@@))(!(= (IsGoodState$TypeName$ (combine$TypeName$$@Map@@ref@To@Int@@$ |a_$253| |b_$253|)) (and (IsGoodState$TypeName$ |a_$253|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$253|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$$@Map@@ref@To@Int@@$ |a_$253| |b_$253|)))))
      (forall( (|a_$254| TypeName) (|b_$254| Field$ref$))(!(= (IsGoodState$TypeName$ (combine$TypeName$Field$ref$$ |a_$254| |b_$254|)) (and (IsGoodState$TypeName$ |a_$254|) (IsGoodState$Field$ref$$ |b_$254|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Field$ref$$ |a_$254| |b_$254|)))))
      (forall( (|a_$255| TypeName) (|b_$255| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$TypeName$ (combine$TypeName$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$255| |b_$255|)) (and (IsGoodState$TypeName$ |a_$255|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$255|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$255| |b_$255|)))))
      (forall( (|a_$256| TypeName) (|b_$256| ModuleName))(!(= (IsGoodState$TypeName$ (combine$TypeName$ModuleName$ |a_$256| |b_$256|)) (and (IsGoodState$TypeName$ |a_$256|) (IsGoodState$ModuleName$ |b_$256|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$ModuleName$ |a_$256| |b_$256|)))))
      (forall( (|a_$257| TypeName) (|b_$257| TypeName))(!(= (IsGoodState$TypeName$ (combine$TypeName$TypeName$ |a_$257| |b_$257|)) (and (IsGoodState$TypeName$ |a_$257|) (IsGoodState$TypeName$ |b_$257|)))  :pattern ( (IsGoodState$TypeName$ (combine$TypeName$TypeName$ |a_$257| |b_$257|)))))
      (forall( (|a_$26| Int) (|b_$26| Field$Mu$))(!(= (IsGoodState$Int$ (combine$Int$Field$Mu$$ |a_$26| |b_$26|)) (and (IsGoodState$Int$ |a_$26|) (IsGoodState$Field$Mu$$ |b_$26|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Field$Mu$$ |a_$26| |b_$26|)))))
      (forall( (|a_$27| Int) (|b_$27| Mu))(!(= (IsGoodState$Int$ (combine$Int$Mu$ |a_$27| |b_$27|)) (and (IsGoodState$Int$ |a_$27|) (IsGoodState$Mu$ |b_$27|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Mu$ |a_$27| |b_$27|)))))
      (forall( (|a_$28| Int) (|b_$28| Field$Bool$))(!(= (IsGoodState$Int$ (combine$Int$Field$Bool$$ |a_$28| |b_$28|)) (and (IsGoodState$Int$ |a_$28|) (IsGoodState$Field$Bool$$ |b_$28|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Field$Bool$$ |a_$28| |b_$28|)))))
      (forall( (|a_$29| Int) (|b_$29| $@Map@@ref@To@Int@@))(!(= (IsGoodState$Int$ (combine$Int$$@Map@@ref@To@Int@@$ |a_$29| |b_$29|)) (and (IsGoodState$Int$ |a_$29|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$29|)))  :pattern ( (IsGoodState$Int$ (combine$Int$$@Map@@ref@To@Int@@$ |a_$29| |b_$29|)))))
      (forall( (|a_$3| Bool) (|b_$3| Int))(!(= (IsGoodState$Bool$ (combine$Bool$Int$ |a_$3| |b_$3|)) (and (IsGoodState$Bool$ |a_$3|) (IsGoodState$Int$ |b_$3|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Int$ |a_$3| |b_$3|)))))
      (forall( (|a_$30| Int) (|b_$30| Field$ref$))(!(= (IsGoodState$Int$ (combine$Int$Field$ref$$ |a_$30| |b_$30|)) (and (IsGoodState$Int$ |a_$30|) (IsGoodState$Field$ref$$ |b_$30|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Field$ref$$ |a_$30| |b_$30|)))))
      (forall( (|a_$31| Int) (|b_$31| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$Int$ (combine$Int$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$31| |b_$31|)) (and (IsGoodState$Int$ |a_$31|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$31|)))  :pattern ( (IsGoodState$Int$ (combine$Int$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$31| |b_$31|)))))
      (forall( (|a_$32| Int) (|b_$32| ModuleName))(!(= (IsGoodState$Int$ (combine$Int$ModuleName$ |a_$32| |b_$32|)) (and (IsGoodState$Int$ |a_$32|) (IsGoodState$ModuleName$ |b_$32|)))  :pattern ( (IsGoodState$Int$ (combine$Int$ModuleName$ |a_$32| |b_$32|)))))
      (forall( (|a_$33| Int) (|b_$33| TypeName))(!(= (IsGoodState$Int$ (combine$Int$TypeName$ |a_$33| |b_$33|)) (and (IsGoodState$Int$ |a_$33|) (IsGoodState$TypeName$ |b_$33|)))  :pattern ( (IsGoodState$Int$ (combine$Int$TypeName$ |a_$33| |b_$33|)))))
      (forall( (|a_$34| $@Map@@PermissionComponent@To@Int@@) (|b_$34| Bool))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Bool$ |a_$34| |b_$34|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$34|) (IsGoodState$Bool$ |b_$34|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Bool$ |a_$34| |b_$34|)))))
      (forall( (|a_$35| $@Map@@PermissionComponent@To@Int@@) (|b_$35| Int))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Int$ |a_$35| |b_$35|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$35|) (IsGoodState$Int$ |b_$35|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Int$ |a_$35| |b_$35|)))))
      (forall( (|a_$36| $@Map@@PermissionComponent@To@Int@@) (|b_$36| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@PermissionComponent@To@Int@@$ |a_$36| |b_$36|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$36|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$36|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@PermissionComponent@To@Int@@$ |a_$36| |b_$36|)))))
      (forall( (|a_$37| $@Map@@PermissionComponent@To@Int@@) (|b_$37| PermissionComponent))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$PermissionComponent$ |a_$37| |b_$37|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$37|) (IsGoodState$PermissionComponent$ |b_$37|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$PermissionComponent$ |a_$37| |b_$37|)))))
      (forall( (|a_$38| $@Map@@PermissionComponent@To@Int@@) (|b_$38| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$38| |b_$38|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$38|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$38|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$38| |b_$38|)))))
      (forall( (|a_$39| $@Map@@PermissionComponent@To@Int@@) (|b_$39| ref))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$ref$ |a_$39| |b_$39|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$39|) (IsGoodState$ref$ |b_$39|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$ref$ |a_$39| |b_$39|)))))
      (forall( (|a_$4| Bool) (|b_$4| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$Bool$ (combine$Bool$$@Map@@PermissionComponent@To@Int@@$ |a_$4| |b_$4|)) (and (IsGoodState$Bool$ |a_$4|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$4|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$$@Map@@PermissionComponent@To@Int@@$ |a_$4| |b_$4|)))))
      (forall( (|a_$40| $@Map@@PermissionComponent@To@Int@@) (|b_$40| Field$Int$))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$Int$$ |a_$40| |b_$40|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$40|) (IsGoodState$Field$Int$$ |b_$40|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$Int$$ |a_$40| |b_$40|)))))
      (forall( (|a_$41| $@Map@@PermissionComponent@To@Int@@) (|b_$41| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$41| |b_$41|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$41|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$41|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$41| |b_$41|)))))
      (forall( (|a_$42| $@Map@@PermissionComponent@To@Int@@) (|b_$42| Field$Mu$))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$Mu$$ |a_$42| |b_$42|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$42|) (IsGoodState$Field$Mu$$ |b_$42|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$Mu$$ |a_$42| |b_$42|)))))
      (forall( (|a_$43| $@Map@@PermissionComponent@To@Int@@) (|b_$43| Mu))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Mu$ |a_$43| |b_$43|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$43|) (IsGoodState$Mu$ |b_$43|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Mu$ |a_$43| |b_$43|)))))
      (forall( (|a_$44| $@Map@@PermissionComponent@To@Int@@) (|b_$44| Field$Bool$))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$Bool$$ |a_$44| |b_$44|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$44|) (IsGoodState$Field$Bool$$ |b_$44|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$Bool$$ |a_$44| |b_$44|)))))
      (forall( (|a_$45| $@Map@@PermissionComponent@To@Int@@) (|b_$45| $@Map@@ref@To@Int@@))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@ref@To@Int@@$ |a_$45| |b_$45|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$45|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$45|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$$@Map@@ref@To@Int@@$ |a_$45| |b_$45|)))))
      (forall( (|a_$46| $@Map@@PermissionComponent@To@Int@@) (|b_$46| Field$ref$))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$ref$$ |a_$46| |b_$46|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$46|) (IsGoodState$Field$ref$$ |b_$46|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$ref$$ |a_$46| |b_$46|)))))
      (forall( (|a_$47| $@Map@@PermissionComponent@To@Int@@) (|b_$47| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$47| |b_$47|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$47|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$47|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$47| |b_$47|)))))
      (forall( (|a_$48| $@Map@@PermissionComponent@To@Int@@) (|b_$48| ModuleName))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$ModuleName$ |a_$48| |b_$48|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$48|) (IsGoodState$ModuleName$ |b_$48|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$ModuleName$ |a_$48| |b_$48|)))))
      (forall( (|a_$49| $@Map@@PermissionComponent@To@Int@@) (|b_$49| TypeName))(!(= (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$TypeName$ |a_$49| |b_$49|)) (and (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |a_$49|) (IsGoodState$TypeName$ |b_$49|)))  :pattern ( (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ (combine$$@Map@@PermissionComponent@To@Int@@$TypeName$ |a_$49| |b_$49|)))))
      (forall( (|a_$5| Bool) (|b_$5| PermissionComponent))(!(= (IsGoodState$Bool$ (combine$Bool$PermissionComponent$ |a_$5| |b_$5|)) (and (IsGoodState$Bool$ |a_$5|) (IsGoodState$PermissionComponent$ |b_$5|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$PermissionComponent$ |a_$5| |b_$5|)))))
      (forall( (|a_$50| PermissionComponent) (|b_$50| Bool))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Bool$ |a_$50| |b_$50|)) (and (IsGoodState$PermissionComponent$ |a_$50|) (IsGoodState$Bool$ |b_$50|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Bool$ |a_$50| |b_$50|)))))
      (forall( (|a_$51| PermissionComponent) (|b_$51| Int))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Int$ |a_$51| |b_$51|)) (and (IsGoodState$PermissionComponent$ |a_$51|) (IsGoodState$Int$ |b_$51|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Int$ |a_$51| |b_$51|)))))
      (forall( (|a_$52| PermissionComponent) (|b_$52| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@PermissionComponent@To@Int@@$ |a_$52| |b_$52|)) (and (IsGoodState$PermissionComponent$ |a_$52|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$52|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@PermissionComponent@To@Int@@$ |a_$52| |b_$52|)))))
      (forall( (|a_$53| PermissionComponent) (|b_$53| PermissionComponent))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$PermissionComponent$ |a_$53| |b_$53|)) (and (IsGoodState$PermissionComponent$ |a_$53|) (IsGoodState$PermissionComponent$ |b_$53|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$PermissionComponent$ |a_$53| |b_$53|)))))
      (forall( (|a_$54| PermissionComponent) (|b_$54| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$54| |b_$54|)) (and (IsGoodState$PermissionComponent$ |a_$54|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$54|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$54| |b_$54|)))))
      (forall( (|a_$55| PermissionComponent) (|b_$55| ref))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$ref$ |a_$55| |b_$55|)) (and (IsGoodState$PermissionComponent$ |a_$55|) (IsGoodState$ref$ |b_$55|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$ref$ |a_$55| |b_$55|)))))
      (forall( (|a_$56| PermissionComponent) (|b_$56| Field$Int$))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$Int$$ |a_$56| |b_$56|)) (and (IsGoodState$PermissionComponent$ |a_$56|) (IsGoodState$Field$Int$$ |b_$56|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$Int$$ |a_$56| |b_$56|)))))
      (forall( (|a_$57| PermissionComponent) (|b_$57| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$57| |b_$57|)) (and (IsGoodState$PermissionComponent$ |a_$57|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$57|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$57| |b_$57|)))))
      (forall( (|a_$58| PermissionComponent) (|b_$58| Field$Mu$))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$Mu$$ |a_$58| |b_$58|)) (and (IsGoodState$PermissionComponent$ |a_$58|) (IsGoodState$Field$Mu$$ |b_$58|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$Mu$$ |a_$58| |b_$58|)))))
      (forall( (|a_$59| PermissionComponent) (|b_$59| Mu))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Mu$ |a_$59| |b_$59|)) (and (IsGoodState$PermissionComponent$ |a_$59|) (IsGoodState$Mu$ |b_$59|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Mu$ |a_$59| |b_$59|)))))
      (forall( (|a_$6| Bool) (|b_$6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$Bool$ (combine$Bool$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$6| |b_$6|)) (and (IsGoodState$Bool$ |a_$6|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$6|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$6| |b_$6|)))))
      (forall( (|a_$60| PermissionComponent) (|b_$60| Field$Bool$))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$Bool$$ |a_$60| |b_$60|)) (and (IsGoodState$PermissionComponent$ |a_$60|) (IsGoodState$Field$Bool$$ |b_$60|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$Bool$$ |a_$60| |b_$60|)))))
      (forall( (|a_$61| PermissionComponent) (|b_$61| $@Map@@ref@To@Int@@))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@ref@To@Int@@$ |a_$61| |b_$61|)) (and (IsGoodState$PermissionComponent$ |a_$61|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$61|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$$@Map@@ref@To@Int@@$ |a_$61| |b_$61|)))))
      (forall( (|a_$62| PermissionComponent) (|b_$62| Field$ref$))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$ref$$ |a_$62| |b_$62|)) (and (IsGoodState$PermissionComponent$ |a_$62|) (IsGoodState$Field$ref$$ |b_$62|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$ref$$ |a_$62| |b_$62|)))))
      (forall( (|a_$63| PermissionComponent) (|b_$63| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$63| |b_$63|)) (and (IsGoodState$PermissionComponent$ |a_$63|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$63|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$63| |b_$63|)))))
      (forall( (|a_$64| PermissionComponent) (|b_$64| ModuleName))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$ModuleName$ |a_$64| |b_$64|)) (and (IsGoodState$PermissionComponent$ |a_$64|) (IsGoodState$ModuleName$ |b_$64|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$ModuleName$ |a_$64| |b_$64|)))))
      (forall( (|a_$65| PermissionComponent) (|b_$65| TypeName))(!(= (IsGoodState$PermissionComponent$ (combine$PermissionComponent$TypeName$ |a_$65| |b_$65|)) (and (IsGoodState$PermissionComponent$ |a_$65|) (IsGoodState$TypeName$ |b_$65|)))  :pattern ( (IsGoodState$PermissionComponent$ (combine$PermissionComponent$TypeName$ |a_$65| |b_$65|)))))
      (forall( (|a_$66| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$66| Bool))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |a_$66| |b_$66|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$66|) (IsGoodState$Bool$ |b_$66|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |a_$66| |b_$66|)))))
      (forall( (|a_$67| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$67| Int))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |a_$67| |b_$67|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$67|) (IsGoodState$Int$ |b_$67|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |a_$67| |b_$67|)))))
      (forall( (|a_$68| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$68| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@PermissionComponent@To@Int@@$ |a_$68| |b_$68|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$68|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$68|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@PermissionComponent@To@Int@@$ |a_$68| |b_$68|)))))
      (forall( (|a_$69| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$69| PermissionComponent))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$PermissionComponent$ |a_$69| |b_$69|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$69|) (IsGoodState$PermissionComponent$ |b_$69|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$PermissionComponent$ |a_$69| |b_$69|)))))
      (forall( (|a_$7| Bool) (|b_$7| ref))(!(= (IsGoodState$Bool$ (combine$Bool$ref$ |a_$7| |b_$7|)) (and (IsGoodState$Bool$ |a_$7|) (IsGoodState$ref$ |b_$7|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$ref$ |a_$7| |b_$7|)))))
      (forall( (|a_$70| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$70| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$70| |b_$70|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$70|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$70|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$70| |b_$70|)))))
      (forall( (|a_$71| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$71| ref))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |a_$71| |b_$71|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$71|) (IsGoodState$ref$ |b_$71|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |a_$71| |b_$71|)))))
      (forall( (|a_$72| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$72| Field$Int$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Int$$ |a_$72| |b_$72|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$72|) (IsGoodState$Field$Int$$ |b_$72|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Int$$ |a_$72| |b_$72|)))))
      (forall( (|a_$73| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$73| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$73| |b_$73|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$73|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$73|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$73| |b_$73|)))))
      (forall( (|a_$74| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$74| Field$Mu$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Mu$$ |a_$74| |b_$74|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$74|) (IsGoodState$Field$Mu$$ |b_$74|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Mu$$ |a_$74| |b_$74|)))))
      (forall( (|a_$75| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$75| Mu))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |a_$75| |b_$75|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$75|) (IsGoodState$Mu$ |b_$75|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |a_$75| |b_$75|)))))
      (forall( (|a_$76| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$76| Field$Bool$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Bool$$ |a_$76| |b_$76|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$76|) (IsGoodState$Field$Bool$$ |b_$76|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$Bool$$ |a_$76| |b_$76|)))))
      (forall( (|a_$77| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$77| $@Map@@ref@To@Int@@))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@ref@To@Int@@$ |a_$77| |b_$77|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$77|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$77|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@ref@To@Int@@$ |a_$77| |b_$77|)))))
      (forall( (|a_$78| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$78| Field$ref$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$ref$$ |a_$78| |b_$78|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$78|) (IsGoodState$Field$ref$$ |b_$78|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$ref$$ |a_$78| |b_$78|)))))
      (forall( (|a_$79| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$79| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$79| |b_$79|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$79|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$79|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$79| |b_$79|)))))
      (forall( (|a_$8| Bool) (|b_$8| Field$Int$))(!(= (IsGoodState$Bool$ (combine$Bool$Field$Int$$ |a_$8| |b_$8|)) (and (IsGoodState$Bool$ |a_$8|) (IsGoodState$Field$Int$$ |b_$8|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$Field$Int$$ |a_$8| |b_$8|)))))
      (forall( (|a_$80| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$80| ModuleName))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ModuleName$ |a_$80| |b_$80|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$80|) (IsGoodState$ModuleName$ |b_$80|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ModuleName$ |a_$80| |b_$80|)))))
      (forall( (|a_$81| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$81| TypeName))(!(= (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$TypeName$ |a_$81| |b_$81|)) (and (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$81|) (IsGoodState$TypeName$ |b_$81|)))  :pattern ( (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$TypeName$ |a_$81| |b_$81|)))))
      (forall( (|a_$82| ref) (|b_$82| Bool))(!(= (IsGoodState$ref$ (combine$ref$Bool$ |a_$82| |b_$82|)) (and (IsGoodState$ref$ |a_$82|) (IsGoodState$Bool$ |b_$82|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Bool$ |a_$82| |b_$82|)))))
      (forall( (|a_$83| ref) (|b_$83| Int))(!(= (IsGoodState$ref$ (combine$ref$Int$ |a_$83| |b_$83|)) (and (IsGoodState$ref$ |a_$83|) (IsGoodState$Int$ |b_$83|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Int$ |a_$83| |b_$83|)))))
      (forall( (|a_$84| ref) (|b_$84| $@Map@@PermissionComponent@To@Int@@))(!(= (IsGoodState$ref$ (combine$ref$$@Map@@PermissionComponent@To@Int@@$ |a_$84| |b_$84|)) (and (IsGoodState$ref$ |a_$84|) (IsGoodState$$@Map@@PermissionComponent@To@Int@@$ |b_$84|)))  :pattern ( (IsGoodState$ref$ (combine$ref$$@Map@@PermissionComponent@To@Int@@$ |a_$84| |b_$84|)))))
      (forall( (|a_$85| ref) (|b_$85| PermissionComponent))(!(= (IsGoodState$ref$ (combine$ref$PermissionComponent$ |a_$85| |b_$85|)) (and (IsGoodState$ref$ |a_$85|) (IsGoodState$PermissionComponent$ |b_$85|)))  :pattern ( (IsGoodState$ref$ (combine$ref$PermissionComponent$ |a_$85| |b_$85|)))))
      (forall( (|a_$86| ref) (|b_$86| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodState$ref$ (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$86| |b_$86|)) (and (IsGoodState$ref$ |a_$86|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |b_$86|)))  :pattern ( (IsGoodState$ref$ (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |a_$86| |b_$86|)))))
      (forall( (|a_$87| ref) (|b_$87| ref))(!(= (IsGoodState$ref$ (combine$ref$ref$ |a_$87| |b_$87|)) (and (IsGoodState$ref$ |a_$87|) (IsGoodState$ref$ |b_$87|)))  :pattern ( (IsGoodState$ref$ (combine$ref$ref$ |a_$87| |b_$87|)))))
      (forall( (|a_$88| ref) (|b_$88| Field$Int$))(!(= (IsGoodState$ref$ (combine$ref$Field$Int$$ |a_$88| |b_$88|)) (and (IsGoodState$ref$ |a_$88|) (IsGoodState$Field$Int$$ |b_$88|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Field$Int$$ |a_$88| |b_$88|)))))
      (forall( (|a_$89| ref) (|b_$89| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$ref$ (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$89| |b_$89|)) (and (IsGoodState$ref$ |a_$89|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$89|)))  :pattern ( (IsGoodState$ref$ (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$89| |b_$89|)))))
      (forall( (|a_$9| Bool) (|b_$9| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(= (IsGoodState$Bool$ (combine$Bool$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$9| |b_$9|)) (and (IsGoodState$Bool$ |a_$9|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |b_$9|)))  :pattern ( (IsGoodState$Bool$ (combine$Bool$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |a_$9| |b_$9|)))))
      (forall( (|a_$90| ref) (|b_$90| Field$Mu$))(!(= (IsGoodState$ref$ (combine$ref$Field$Mu$$ |a_$90| |b_$90|)) (and (IsGoodState$ref$ |a_$90|) (IsGoodState$Field$Mu$$ |b_$90|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Field$Mu$$ |a_$90| |b_$90|)))))
      (forall( (|a_$91| ref) (|b_$91| Mu))(!(= (IsGoodState$ref$ (combine$ref$Mu$ |a_$91| |b_$91|)) (and (IsGoodState$ref$ |a_$91|) (IsGoodState$Mu$ |b_$91|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Mu$ |a_$91| |b_$91|)))))
      (forall( (|a_$92| ref) (|b_$92| Field$Bool$))(!(= (IsGoodState$ref$ (combine$ref$Field$Bool$$ |a_$92| |b_$92|)) (and (IsGoodState$ref$ |a_$92|) (IsGoodState$Field$Bool$$ |b_$92|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Field$Bool$$ |a_$92| |b_$92|)))))
      (forall( (|a_$93| ref) (|b_$93| $@Map@@ref@To@Int@@))(!(= (IsGoodState$ref$ (combine$ref$$@Map@@ref@To@Int@@$ |a_$93| |b_$93|)) (and (IsGoodState$ref$ |a_$93|) (IsGoodState$$@Map@@ref@To@Int@@$ |b_$93|)))  :pattern ( (IsGoodState$ref$ (combine$ref$$@Map@@ref@To@Int@@$ |a_$93| |b_$93|)))))
      (forall( (|a_$94| ref) (|b_$94| Field$ref$))(!(= (IsGoodState$ref$ (combine$ref$Field$ref$$ |a_$94| |b_$94|)) (and (IsGoodState$ref$ |a_$94|) (IsGoodState$Field$ref$$ |b_$94|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Field$ref$$ |a_$94| |b_$94|)))))
      (forall( (|a_$95| ref) (|b_$95| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (IsGoodState$ref$ (combine$ref$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$95| |b_$95|)) (and (IsGoodState$ref$ |a_$95|) (IsGoodState$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |b_$95|)))  :pattern ( (IsGoodState$ref$ (combine$ref$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |a_$95| |b_$95|)))))
      (forall( (|a_$96| ref) (|b_$96| ModuleName))(!(= (IsGoodState$ref$ (combine$ref$ModuleName$ |a_$96| |b_$96|)) (and (IsGoodState$ref$ |a_$96|) (IsGoodState$ModuleName$ |b_$96|)))  :pattern ( (IsGoodState$ref$ (combine$ref$ModuleName$ |a_$96| |b_$96|)))))
      (forall( (|a_$97| ref) (|b_$97| TypeName))(!(= (IsGoodState$ref$ (combine$ref$TypeName$ |a_$97| |b_$97|)) (and (IsGoodState$ref$ |a_$97|) (IsGoodState$TypeName$ |b_$97|)))  :pattern ( (IsGoodState$ref$ (combine$ref$TypeName$ |a_$97| |b_$97|)))))
      (forall( (|a_$98| Field$Int$) (|b_$98| Bool))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Bool$ |a_$98| |b_$98|)) (and (IsGoodState$Field$Int$$ |a_$98|) (IsGoodState$Bool$ |b_$98|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Bool$ |a_$98| |b_$98|)))))
      (forall( (|a_$99| Field$Int$) (|b_$99| Int))(!(= (IsGoodState$Field$Int$$ (combine$Field$Int$$Int$ |a_$99| |b_$99|)) (and (IsGoodState$Field$Int$$ |a_$99|) (IsGoodState$Int$ |b_$99|)))  :pattern ( (IsGoodState$Field$Int$$ (combine$Field$Int$$Int$ |a_$99| |b_$99|)))))
      (forall( (|con_$0_$0| Bool) (|a_$1_$0| Bool) (|b_$1_$0| Bool))(!(=> (not |con_$0_$0|) (= (ite$Bool$ |con_$0_$0| |a_$1_$0| |b_$1_$0|) |b_$1_$0|))  :pattern ( (ite$Bool$ |con_$0_$0| |a_$1_$0| |b_$1_$0|))))
      (forall( (|con_$0_$1| Bool) (|a_$1_$1| Int) (|b_$1_$1| Int))(!(=> (not |con_$0_$1|) (= (ite$Int$ |con_$0_$1| |a_$1_$1| |b_$1_$1|) |b_$1_$1|))  :pattern ( (ite$Int$ |con_$0_$1| |a_$1_$1| |b_$1_$1|))))
      (forall( (|con_$0_$10| Bool) (|a_$1_$10| Field$Bool$) (|b_$1_$10| Field$Bool$))(!(=> (not |con_$0_$10|) (= (ite$Field$Bool$$ |con_$0_$10| |a_$1_$10| |b_$1_$10|) |b_$1_$10|))  :pattern ( (ite$Field$Bool$$ |con_$0_$10| |a_$1_$10| |b_$1_$10|))))
      (forall( (|con_$0_$11| Bool) (|a_$1_$11| $@Map@@ref@To@Int@@) (|b_$1_$11| $@Map@@ref@To@Int@@))(!(=> (not |con_$0_$11|) (= (ite$$@Map@@ref@To@Int@@$ |con_$0_$11| |a_$1_$11| |b_$1_$11|) |b_$1_$11|))  :pattern ( (ite$$@Map@@ref@To@Int@@$ |con_$0_$11| |a_$1_$11| |b_$1_$11|))))
      (forall( (|con_$0_$12| Bool) (|a_$1_$12| Field$ref$) (|b_$1_$12| Field$ref$))(!(=> (not |con_$0_$12|) (= (ite$Field$ref$$ |con_$0_$12| |a_$1_$12| |b_$1_$12|) |b_$1_$12|))  :pattern ( (ite$Field$ref$$ |con_$0_$12| |a_$1_$12| |b_$1_$12|))))
      (forall( (|con_$0_$13| Bool) (|a_$1_$13| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$1_$13| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(=> (not |con_$0_$13|) (= (ite$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |con_$0_$13| |a_$1_$13| |b_$1_$13|) |b_$1_$13|))  :pattern ( (ite$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |con_$0_$13| |a_$1_$13| |b_$1_$13|))))
      (forall( (|con_$0_$14| Bool) (|a_$1_$14| ModuleName) (|b_$1_$14| ModuleName))(!(=> (not |con_$0_$14|) (= (ite$ModuleName$ |con_$0_$14| |a_$1_$14| |b_$1_$14|) |b_$1_$14|))  :pattern ( (ite$ModuleName$ |con_$0_$14| |a_$1_$14| |b_$1_$14|))))
      (forall( (|con_$0_$15| Bool) (|a_$1_$15| TypeName) (|b_$1_$15| TypeName))(!(=> (not |con_$0_$15|) (= (ite$TypeName$ |con_$0_$15| |a_$1_$15| |b_$1_$15|) |b_$1_$15|))  :pattern ( (ite$TypeName$ |con_$0_$15| |a_$1_$15| |b_$1_$15|))))
      (forall( (|con_$0_$2| Bool) (|a_$1_$2| $@Map@@PermissionComponent@To@Int@@) (|b_$1_$2| $@Map@@PermissionComponent@To@Int@@))(!(=> (not |con_$0_$2|) (= (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$0_$2| |a_$1_$2| |b_$1_$2|) |b_$1_$2|))  :pattern ( (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$0_$2| |a_$1_$2| |b_$1_$2|))))
      (forall( (|con_$0_$3| Bool) (|a_$1_$3| PermissionComponent) (|b_$1_$3| PermissionComponent))(!(=> (not |con_$0_$3|) (= (ite$PermissionComponent$ |con_$0_$3| |a_$1_$3| |b_$1_$3|) |b_$1_$3|))  :pattern ( (ite$PermissionComponent$ |con_$0_$3| |a_$1_$3| |b_$1_$3|))))
      (forall( (|con_$0_$4| Bool) (|a_$1_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$1_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(=> (not |con_$0_$4|) (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$0_$4| |a_$1_$4| |b_$1_$4|) |b_$1_$4|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$0_$4| |a_$1_$4| |b_$1_$4|))))
      (forall( (|con_$0_$5| Bool) (|a_$1_$5| ref) (|b_$1_$5| ref))(!(=> (not |con_$0_$5|) (= (ite$ref$ |con_$0_$5| |a_$1_$5| |b_$1_$5|) |b_$1_$5|))  :pattern ( (ite$ref$ |con_$0_$5| |a_$1_$5| |b_$1_$5|))))
      (forall( (|con_$0_$6| Bool) (|a_$1_$6| Field$Int$) (|b_$1_$6| Field$Int$))(!(=> (not |con_$0_$6|) (= (ite$Field$Int$$ |con_$0_$6| |a_$1_$6| |b_$1_$6|) |b_$1_$6|))  :pattern ( (ite$Field$Int$$ |con_$0_$6| |a_$1_$6| |b_$1_$6|))))
      (forall( (|con_$0_$7| Bool) (|a_$1_$7| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$1_$7| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(=> (not |con_$0_$7|) (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$0_$7| |a_$1_$7| |b_$1_$7|) |b_$1_$7|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$0_$7| |a_$1_$7| |b_$1_$7|))))
      (forall( (|con_$0_$8| Bool) (|a_$1_$8| Field$Mu$) (|b_$1_$8| Field$Mu$))(!(=> (not |con_$0_$8|) (= (ite$Field$Mu$$ |con_$0_$8| |a_$1_$8| |b_$1_$8|) |b_$1_$8|))  :pattern ( (ite$Field$Mu$$ |con_$0_$8| |a_$1_$8| |b_$1_$8|))))
      (forall( (|con_$0_$9| Bool) (|a_$1_$9| Mu) (|b_$1_$9| Mu))(!(=> (not |con_$0_$9|) (= (ite$Mu$ |con_$0_$9| |a_$1_$9| |b_$1_$9|) |b_$1_$9|))  :pattern ( (ite$Mu$ |con_$0_$9| |a_$1_$9| |b_$1_$9|))))
      (forall( (|con_$1| Bool) (|a_$0_$0| Bool) (|b_$0_$0| Bool))(!(=> |con_$1| (= (ite$Bool$ |con_$1| |a_$0_$0| |b_$0_$0|) |a_$0_$0|))  :pattern ( (ite$Bool$ |con_$1| |a_$0_$0| |b_$0_$0|))))
      (forall( (|con_$10| Bool) (|a_$0_$9| Mu) (|b_$0_$9| Mu))(!(=> |con_$10| (= (ite$Mu$ |con_$10| |a_$0_$9| |b_$0_$9|) |a_$0_$9|))  :pattern ( (ite$Mu$ |con_$10| |a_$0_$9| |b_$0_$9|))))
      (forall( (|con_$11| Bool) (|a_$0_$10| Field$Bool$) (|b_$0_$10| Field$Bool$))(!(=> |con_$11| (= (ite$Field$Bool$$ |con_$11| |a_$0_$10| |b_$0_$10|) |a_$0_$10|))  :pattern ( (ite$Field$Bool$$ |con_$11| |a_$0_$10| |b_$0_$10|))))
      (forall( (|con_$12| Bool) (|a_$0_$11| $@Map@@ref@To@Int@@) (|b_$0_$11| $@Map@@ref@To@Int@@))(!(=> |con_$12| (= (ite$$@Map@@ref@To@Int@@$ |con_$12| |a_$0_$11| |b_$0_$11|) |a_$0_$11|))  :pattern ( (ite$$@Map@@ref@To@Int@@$ |con_$12| |a_$0_$11| |b_$0_$11|))))
      (forall( (|con_$13| Bool) (|a_$0_$12| Field$ref$) (|b_$0_$12| Field$ref$))(!(=> |con_$13| (= (ite$Field$ref$$ |con_$13| |a_$0_$12| |b_$0_$12|) |a_$0_$12|))  :pattern ( (ite$Field$ref$$ |con_$13| |a_$0_$12| |b_$0_$12|))))
      (forall( (|con_$14| Bool) (|a_$0_$13| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|b_$0_$13| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(=> |con_$14| (= (ite$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |con_$14| |a_$0_$13| |b_$0_$13|) |a_$0_$13|))  :pattern ( (ite$Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$ |con_$14| |a_$0_$13| |b_$0_$13|))))
      (forall( (|con_$15| Bool) (|a_$0_$14| ModuleName) (|b_$0_$14| ModuleName))(!(=> |con_$15| (= (ite$ModuleName$ |con_$15| |a_$0_$14| |b_$0_$14|) |a_$0_$14|))  :pattern ( (ite$ModuleName$ |con_$15| |a_$0_$14| |b_$0_$14|))))
      (forall( (|con_$16| Bool) (|a_$0_$15| TypeName) (|b_$0_$15| TypeName))(!(=> |con_$16| (= (ite$TypeName$ |con_$16| |a_$0_$15| |b_$0_$15|) |a_$0_$15|))  :pattern ( (ite$TypeName$ |con_$16| |a_$0_$15| |b_$0_$15|))))
      (forall( (|con_$2| Bool) (|a_$0_$1| Int) (|b_$0_$1| Int))(!(=> |con_$2| (= (ite$Int$ |con_$2| |a_$0_$1| |b_$0_$1|) |a_$0_$1|))  :pattern ( (ite$Int$ |con_$2| |a_$0_$1| |b_$0_$1|))))
      (forall( (|con_$3| Bool) (|a_$0_$2| $@Map@@PermissionComponent@To@Int@@) (|b_$0_$2| $@Map@@PermissionComponent@To@Int@@))(!(=> |con_$3| (= (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$3| |a_$0_$2| |b_$0_$2|) |a_$0_$2|))  :pattern ( (ite$$@Map@@PermissionComponent@To@Int@@$ |con_$3| |a_$0_$2| |b_$0_$2|))))
      (forall( (|con_$4| Bool) (|a_$0_$3| PermissionComponent) (|b_$0_$3| PermissionComponent))(!(=> |con_$4| (= (ite$PermissionComponent$ |con_$4| |a_$0_$3| |b_$0_$3|) |a_$0_$3|))  :pattern ( (ite$PermissionComponent$ |con_$4| |a_$0_$3| |b_$0_$3|))))
      (forall( (|con_$5| Bool) (|a_$0_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|b_$0_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(=> |con_$5| (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$5| |a_$0_$4| |b_$0_$4|) |a_$0_$4|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ |con_$5| |a_$0_$4| |b_$0_$4|))))
      (forall( (|con_$6| Bool) (|a_$0_$5| ref) (|b_$0_$5| ref))(!(=> |con_$6| (= (ite$ref$ |con_$6| |a_$0_$5| |b_$0_$5|) |a_$0_$5|))  :pattern ( (ite$ref$ |con_$6| |a_$0_$5| |b_$0_$5|))))
      (forall( (|con_$7| Bool) (|a_$0_$6| Field$Int$) (|b_$0_$6| Field$Int$))(!(=> |con_$7| (= (ite$Field$Int$$ |con_$7| |a_$0_$6| |b_$0_$6|) |a_$0_$6|))  :pattern ( (ite$Field$Int$$ |con_$7| |a_$0_$6| |b_$0_$6|))))
      (forall( (|con_$8| Bool) (|a_$0_$7| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|b_$0_$7| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@))(!(=> |con_$8| (= (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$8| |a_$0_$7| |b_$0_$7|) |a_$0_$7|))  :pattern ( (ite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |con_$8| |a_$0_$7| |b_$0_$7|))))
      (forall( (|con_$9| Bool) (|a_$0_$8| Field$Mu$) (|b_$0_$8| Field$Mu$))(!(=> |con_$9| (= (ite$Field$Mu$$ |con_$9| |a_$0_$8| |b_$0_$8|) |a_$0_$8|))  :pattern ( (ite$Field$Mu$$ |con_$9| |a_$0_$8| |b_$0_$8|))))
      (forall( (|f_$10_$0| Field$Bool$))(=> (NonPredicateField$Bool$ |f_$10_$0|) (not (PredicateField$Bool$ |f_$10_$0|))))
      (forall( (|f_$10_$1| Field$Int$))(=> (NonPredicateField$Int$ |f_$10_$1|) (not (PredicateField$Int$ |f_$10_$1|))))
      (forall( (|f_$10_$2| Field$ref$))(=> (NonPredicateField$ref$ |f_$10_$2|) (not (PredicateField$ref$ |f_$10_$2|))))
      (forall( (|f_$10_$3| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(=> (NonPredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |f_$10_$3|) (not (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |f_$10_$3|))))
      (forall( (|f_$10_$4| Field$Mu$))(=> (NonPredicateField$Mu$ |f_$10_$4|) (not (PredicateField$Mu$ |f_$10_$4|))))
      (forall( (|f_$11_$0| Field$Bool$))(=> (PredicateField$Bool$ |f_$11_$0|) (not (NonPredicateField$Bool$ |f_$11_$0|))))
      (forall( (|f_$11_$1| Field$Int$))(=> (PredicateField$Int$ |f_$11_$1|) (not (NonPredicateField$Int$ |f_$11_$1|))))
      (forall( (|f_$11_$2| Field$ref$))(=> (PredicateField$ref$ |f_$11_$2|) (not (NonPredicateField$ref$ |f_$11_$2|))))
      (forall( (|f_$11_$3| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(=> (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |f_$11_$3|) (not (NonPredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |f_$11_$3|))))
      (forall( (|f_$11_$4| Field$Mu$))(=> (PredicateField$Mu$ |f_$11_$4|) (not (NonPredicateField$Mu$ |f_$11_$4|))))
      (forall( (|h_$0| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|m_$6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$7| ref) (|q| ref))(!(=> (and (and (and (wf |h_$0| |m_$6|) (not (= |o_$7| |q|))) (or (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |o_$7| held)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$0| |o_$7| rdheld))) (or (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h_$0| |q| held)) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h_$0| |q| rdheld))) (not (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$0| |o_$7| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$0| |q| mu))))  :pattern ( (wf |h_$0| |m_$6|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$0| |o_$7| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h_$0| |q| mu))))
      (forall( (|Heap_$0| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$0| ref))(!(=> (and (wf |Heap_$0| |Mask_$0|) (= CurrentModule module@default)) (= ($@Future.getQ |Heap_$0| |Mask_$0| |this_$0|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$0| |this_$0| Future.q)))  :pattern ( ($@Future.getQ |Heap_$0| |Mask_$0| |this_$0|))))
      (forall( (|Heap_$1| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$1| ref))(!(=> (and (and (wf |Heap_$1| |Mask_$1|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ nostate (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$1| |this_$1| Future.q) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |Heap_$1| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$1| |this_$1| Future.q) FutureChannel.valid))))) CanAssumeFunctionDefs) (= ($@Future.getQ |Heap_$1| |Mask_$1| |this_$1|) ($@@Future.getQ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ nostate (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$1| |this_$1| Future.q) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |Heap_$1| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$1| |this_$1| Future.q) FutureChannel.valid))) |this_$1|)))  :pattern ( ($@Future.getQ |Heap_$1| |Mask_$1| |this_$1|))))
      (forall( (|Heap_$10| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$10| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$10| ref))(!(=> (and (and (wf |Heap_$10| |Mask_$10|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ nostate (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$10| |this_$10| FactorialCont.q) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |Heap_$10| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$10| |this_$10| FactorialCont.q) FactorialContChannel.valid))))) CanAssumeFunctionDefs) (= ($@FactorialCont.getQ |Heap_$10| |Mask_$10| |this_$10|) ($@@FactorialCont.getQ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ nostate (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$10| |this_$10| FactorialCont.q) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |Heap_$10| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$10| |this_$10| FactorialCont.q) FactorialContChannel.valid))) |this_$10|)))  :pattern ( ($@FactorialCont.getQ |Heap_$10| |Mask_$10| |this_$10|))))
      (forall( (|Heap_$2| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$2| ref) (|v#49| Int))(!(=> (and (wf |Heap_$2| |Mask_$2|) (= CurrentModule module@default)) (= ($@Message.factorial |Heap_$2| |Mask_$2| |this_$2| |v#49|) (ite$Int$ (= |v#49| 0) 1 (* |v#49| ($@Message.factorial |Heap_$2| |Mask_$2| |this_$2| (- |v#49| 1))))))  :pattern ( ($@Message.factorial |Heap_$2| |Mask_$2| |this_$2| |v#49|))))
      (forall( (|Heap_$3| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$3| ref) (|v#49_$0| Int))(!(= ($@Message.factorial |Heap_$3| |Mask_$3| |this_$3| |v#49_$0|) ($@Message.factorial@limited |Heap_$3| |Mask_$3| |this_$3| |v#49_$0|))  :pattern ( ($@Message.factorial |Heap_$3| |Mask_$3| |this_$3| |v#49_$0|))))
      (forall( (|Heap_$4| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$4| ref) (|v#49_$1| Int))(!(=> (and (and (wf |Heap_$4| |Mask_$4|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ nostate nostate))) CanAssumeFunctionDefs) (= ($@Message.factorial@limited |Heap_$4| |Mask_$4| |this_$4| |v#49_$1|) ($@@Message.factorial (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ nostate nostate) |this_$4| |v#49_$1|)))  :pattern ( ($@Message.factorial@limited |Heap_$4| |Mask_$4| |this_$4| |v#49_$1|))))
      (forall( (|Heap_$5| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$5| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$5| ref) (|v#49_$2| Int))(!(=> (and (wf |Heap_$5| |Mask_$5|) CanAssumeFunctionDefs) (=> (= |v#49_$2| 0) (= ($@Message.factorial |Heap_$5| |Mask_$5| |this_$5| |v#49_$2|) 1)))  :pattern ( ($@Message.factorial |Heap_$5| |Mask_$5| |this_$5| |v#49_$2|))))
      (forall( (|Heap_$6| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$6| ref) (|v#49_$3| Int))(!(=> (and (wf |Heap_$6| |Mask_$6|) CanAssumeFunctionDefs) (=> (> |v#49_$3| 0) (= ($@Message.factorial |Heap_$6| |Mask_$6| |this_$6| |v#49_$3|) (* |v#49_$3| ($@Message.factorial |Heap_$6| |Mask_$6| |this_$6| (- |v#49_$3| 1))))))  :pattern ( ($@Message.factorial |Heap_$6| |Mask_$6| |this_$6| |v#49_$3|))))
      (forall( (|Heap_$7| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$7| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$7| ref))(!(=> (and (wf |Heap_$7| |Mask_$7|) (= CurrentModule module@default)) (= ($@FactorialActor.getQ |Heap_$7| |Mask_$7| |this_$7|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$7| |this_$7| FactorialActor.q)))  :pattern ( ($@FactorialActor.getQ |Heap_$7| |Mask_$7| |this_$7|))))
      (forall( (|Heap_$8| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$8| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$8| ref))(!(=> (and (and (wf |Heap_$8| |Mask_$8|) (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ nostate (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$8| |this_$8| FactorialActor.q) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |Heap_$8| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$8| |this_$8| FactorialActor.q) FactorialActorChannel.valid))))) CanAssumeFunctionDefs) (= ($@FactorialActor.getQ |Heap_$8| |Mask_$8| |this_$8|) ($@@FactorialActor.getQ (combine$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ nostate (combine$ref$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$8| |this_$8| FactorialActor.q) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |Heap_$8| (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$8| |this_$8| FactorialActor.q) FactorialActorChannel.valid))) |this_$8|)))  :pattern ( ($@FactorialActor.getQ |Heap_$8| |Mask_$8| |this_$8|))))
      (forall( (|Heap_$9| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|Mask_$9| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|this_$9| ref))(!(=> (and (wf |Heap_$9| |Mask_$9|) (= CurrentModule module@default)) (= ($@FactorialCont.getQ |Heap_$9| |Mask_$9| |this_$9|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |Heap_$9| |this_$9| FactorialCont.q)))  :pattern ( ($@FactorialCont.getQ |Heap_$9| |Mask_$9| |this_$9|))))
      (forall( (|ih| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|h| $@Map@@$T0@@ref@Field$$T0$@To@$T0@@) (|m_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodInhaleState |ih| |h| |m_$2|) (and (and (and (and (and (and (and (and (forall( (|o_$1_$0| ref) (|f_$0_$0| Field$Bool$))(!(=> (CanRead$Bool$ |m_$2| |o_$1_$0| |f_$0_$0|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |ih| |o_$1_$0| |f_$0_$0|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h| |o_$1_$0| |f_$0_$0|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |ih| |o_$1_$0| |f_$0_$0|)))) (forall( (|o_$1_$1| ref) (|f_$0_$1| Field$Int$))(!(=> (CanRead$Int$ |m_$2| |o_$1_$1| |f_$0_$1|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |ih| |o_$1_$1| |f_$0_$1|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h| |o_$1_$1| |f_$0_$1|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |ih| |o_$1_$1| |f_$0_$1|))))) (forall( (|o_$1_$2| ref) (|f_$0_$2| Field$ref$))(!(=> (CanRead$ref$ |m_$2| |o_$1_$2| |f_$0_$2|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |ih| |o_$1_$2| |f_$0_$2|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |h| |o_$1_$2| |f_$0_$2|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ref$ |ih| |o_$1_$2| |f_$0_$2|))))) (forall( (|o_$1_$3| ref) (|f_$0_$3| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(=> (CanRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$2| |o_$1_$3| |f_$0_$3|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |ih| |o_$1_$3| |f_$0_$3|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |h| |o_$1_$3| |f_$0_$3|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |ih| |o_$1_$3| |f_$0_$3|))))) (forall( (|o_$1_$4| ref) (|f_$0_$4| Field$Mu$))(!(=> (CanRead$Mu$ |m_$2| |o_$1_$4| |f_$0_$4|) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |ih| |o_$1_$4| |f_$0_$4|) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h| |o_$1_$4| |f_$0_$4|)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |ih| |o_$1_$4| |f_$0_$4|))))) (forall( (|o_$2| ref))(!(= (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |ih| |o_$2| held)) (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h| |o_$2| held)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |ih| |o_$2| held))))) (forall( (|o_$3| ref))(!(= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |ih| |o_$3| rdheld) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h| |o_$3| rdheld))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |ih| |o_$3| rdheld))))) (forall( (|o_$4| ref))(!(=> (< 0 (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h| |o_$4| held)) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |ih| |o_$4| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h| |o_$4| mu)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ |h| |o_$4| held))))) (forall( (|o_$5| ref))(!(=> (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h| |o_$5| rdheld) (= (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |ih| |o_$5| mu) (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Mu$ |h| |o_$5| mu)))  :pattern ( (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Bool$ |h| |o_$5| rdheld))))))  :pattern ( (IsGoodInhaleState |ih| |h| |m_$2|))))
      (forall( (|m_$0| Mu) (|n_$1| Mu) (|o_$0| Mu))(!(=> (and (MuBelow |m_$0| |n_$1|) (MuBelow |n_$1| |o_$0|)) (MuBelow |m_$0| |o_$0|))  :pattern ( (MuBelow |m_$0| |n_$1|) (MuBelow |n_$1| |o_$0|))))
      (forall( (|m_$1| Mu) (|n_$2| Mu))(=> (MuBelow |m_$1| |n_$2|) (not (= |n_$2| $LockBottom))))
      (forall( (|m_$3_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$1| ref) (|f_$1_$0| Field$Bool$))(!(= (CanRead$Bool$ |m_$3_$0| |obj_$1| |f_$1_$0|) (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$3_$0| |obj_$1| |f_$1_$0|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$3_$0| |obj_$1| |f_$1_$0|) perm$N))))  :expand  false :pattern ( (CanRead$Bool$ |m_$3_$0| |obj_$1| |f_$1_$0|))))
      (forall( (|m_$3_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$2| ref) (|f_$1_$1| Field$Int$))(!(= (CanRead$Int$ |m_$3_$1| |obj_$2| |f_$1_$1|) (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$3_$1| |obj_$2| |f_$1_$1|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$3_$1| |obj_$2| |f_$1_$1|) perm$N))))  :expand  false :pattern ( (CanRead$Int$ |m_$3_$1| |obj_$2| |f_$1_$1|))))
      (forall( (|m_$3_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$3| ref) (|f_$1_$2| Field$ref$))(!(= (CanRead$ref$ |m_$3_$2| |obj_$3| |f_$1_$2|) (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$3_$2| |obj_$3| |f_$1_$2|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$3_$2| |obj_$3| |f_$1_$2|) perm$N))))  :expand  false :pattern ( (CanRead$ref$ |m_$3_$2| |obj_$3| |f_$1_$2|))))
      (forall( (|m_$3_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$4| ref) (|f_$1_$3| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (CanRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$3_$3| |obj_$4| |f_$1_$3|) (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$3_$3| |obj_$4| |f_$1_$3|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$3_$3| |obj_$4| |f_$1_$3|) perm$N))))  :expand  false :pattern ( (CanRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$3_$3| |obj_$4| |f_$1_$3|))))
      (forall( (|m_$3_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|obj_$5| ref) (|f_$1_$4| Field$Mu$))(!(= (CanRead$Mu$ |m_$3_$4| |obj_$5| |f_$1_$4|) (or (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$3_$4| |obj_$5| |f_$1_$4|) perm$R)) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$3_$4| |obj_$5| |f_$1_$4|) perm$N))))  :expand  false :pattern ( (CanRead$Mu$ |m_$3_$4| |obj_$5| |f_$1_$4|))))
      (forall( (|m_$5| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@))(!(= (IsGoodMask |m_$5|) (and (and (and (and (forall( (|o_$6_$0| ref) (|f_$3_$0| Field$Bool$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$5| |o_$6_$0| |f_$3_$0|) perm$R)) (=> (NonPredicateField$Bool$ |f_$3_$0|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$5| |o_$6_$0| |f_$3_$0|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$5| |o_$6_$0| |f_$3_$0|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$5| |o_$6_$0| |f_$3_$0|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$5| |o_$6_$0| |f_$3_$0|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$5| |o_$6_$0| |f_$3_$0|) perm$R))))) (forall( (|o_$6_$1| ref) (|f_$3_$1| Field$Int$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$5| |o_$6_$1| |f_$3_$1|) perm$R)) (=> (NonPredicateField$Int$ |f_$3_$1|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$5| |o_$6_$1| |f_$3_$1|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$5| |o_$6_$1| |f_$3_$1|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$5| |o_$6_$1| |f_$3_$1|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$5| |o_$6_$1| |f_$3_$1|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$5| |o_$6_$1| |f_$3_$1|) perm$R)))))) (forall( (|o_$6_$2| ref) (|f_$3_$2| Field$ref$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$5| |o_$6_$2| |f_$3_$2|) perm$R)) (=> (NonPredicateField$ref$ |f_$3_$2|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$5| |o_$6_$2| |f_$3_$2|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$5| |o_$6_$2| |f_$3_$2|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$5| |o_$6_$2| |f_$3_$2|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$5| |o_$6_$2| |f_$3_$2|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$5| |o_$6_$2| |f_$3_$2|) perm$R)))))) (forall( (|o_$6_$3| ref) (|f_$3_$3| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$5| |o_$6_$3| |f_$3_$3|) perm$R)) (=> (NonPredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |f_$3_$3|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$5| |o_$6_$3| |f_$3_$3|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$5| |o_$6_$3| |f_$3_$3|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$5| |o_$6_$3| |f_$3_$3|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$5| |o_$6_$3| |f_$3_$3|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$5| |o_$6_$3| |f_$3_$3|) perm$R)))))) (forall( (|o_$6_$4| ref) (|f_$3_$4| Field$Mu$))(and (and (<= 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$5| |o_$6_$4| |f_$3_$4|) perm$R)) (=> (NonPredicateField$Mu$ |f_$3_$4|) (and (<= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$5| |o_$6_$4| |f_$3_$4|) perm$R) Permission$FullFraction) (=> (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$5| |o_$6_$4| |f_$3_$4|) perm$N)) (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$5| |o_$6_$4| |f_$3_$4|) perm$R) Permission$FullFraction))))) (=> (< (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$5| |o_$6_$4| |f_$3_$4|) perm$N) 0) (< 0 (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$5| |o_$6_$4| |f_$3_$4|) perm$R)))))))  :expand  true :pattern ( (IsGoodMask |m_$5|))))
      (forall( (|m_$7_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$0| ref) (|f_$4_$0| Field$Bool$) (|howMuch_$3| Int) (|q_$0_$0| ref) (|g_$4| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Bool$ |m_$7_$0| |o_$8_$0| |f_$4_$0| |howMuch_$3|) |q_$0_$0| |g_$4|) perm$R) (ite$Int$ (and (= |o_$8_$0| |q_$0_$0|) (= |f_$4_$0| |g_$4|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$0| |q_$0_$0| |g_$4|) perm$R) |howMuch_$3|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$0| |q_$0_$0| |g_$4|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Bool$ |m_$7_$0| |o_$8_$0| |f_$4_$0| |howMuch_$3|) |q_$0_$0| |g_$4|) perm$R))))
      (forall( (|m_$7_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$1| ref) (|f_$4_$1| Field$Int$) (|howMuch_$4| Int) (|q_$0_$1| ref) (|g_$5| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Int$ |m_$7_$1| |o_$8_$1| |f_$4_$1| |howMuch_$4|) |q_$0_$1| |g_$5|) perm$R) (ite$Int$ (and (= |o_$8_$1| |q_$0_$1|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$1| |q_$0_$1| |g_$5|) perm$R) |howMuch_$4|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$1| |q_$0_$1| |g_$5|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Int$ |m_$7_$1| |o_$8_$1| |f_$4_$1| |howMuch_$4|) |q_$0_$1| |g_$5|) perm$R))))
      (forall( (|m_$7_$10| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$10| ref) (|f_$4_$10| Field$Bool$) (|howMuch_$13| Int) (|q_$0_$10| ref) (|g_$14| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Bool$ |m_$7_$10| |o_$8_$10| |f_$4_$10| |howMuch_$13|) |q_$0_$10| |g_$14|) perm$R) (ite$Int$ (and (= |o_$8_$10| |q_$0_$10|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$10| |q_$0_$10| |g_$14|) perm$R) |howMuch_$13|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$10| |q_$0_$10| |g_$14|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Bool$ |m_$7_$10| |o_$8_$10| |f_$4_$10| |howMuch_$13|) |q_$0_$10| |g_$14|) perm$R))))
      (forall( (|m_$7_$11| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$11| ref) (|f_$4_$11| Field$Int$) (|howMuch_$14| Int) (|q_$0_$11| ref) (|g_$15| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Int$ |m_$7_$11| |o_$8_$11| |f_$4_$11| |howMuch_$14|) |q_$0_$11| |g_$15|) perm$R) (ite$Int$ (and (= |o_$8_$11| |q_$0_$11|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$11| |q_$0_$11| |g_$15|) perm$R) |howMuch_$14|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$11| |q_$0_$11| |g_$15|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Int$ |m_$7_$11| |o_$8_$11| |f_$4_$11| |howMuch_$14|) |q_$0_$11| |g_$15|) perm$R))))
      (forall( (|m_$7_$12| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$12| ref) (|f_$4_$12| Field$ref$) (|howMuch_$15| Int) (|q_$0_$12| ref) (|g_$16| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$ref$ |m_$7_$12| |o_$8_$12| |f_$4_$12| |howMuch_$15|) |q_$0_$12| |g_$16|) perm$R) (ite$Int$ (and (= |o_$8_$12| |q_$0_$12|) (= |f_$4_$12| |g_$16|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$12| |q_$0_$12| |g_$16|) perm$R) |howMuch_$15|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$12| |q_$0_$12| |g_$16|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$ref$ |m_$7_$12| |o_$8_$12| |f_$4_$12| |howMuch_$15|) |q_$0_$12| |g_$16|) perm$R))))
      (forall( (|m_$7_$13| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$13| ref) (|f_$4_$13| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$16| Int) (|q_$0_$13| ref) (|g_$17| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$13| |o_$8_$13| |f_$4_$13| |howMuch_$16|) |q_$0_$13| |g_$17|) perm$R) (ite$Int$ (and (= |o_$8_$13| |q_$0_$13|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$13| |q_$0_$13| |g_$17|) perm$R) |howMuch_$16|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$13| |q_$0_$13| |g_$17|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$13| |o_$8_$13| |f_$4_$13| |howMuch_$16|) |q_$0_$13| |g_$17|) perm$R))))
      (forall( (|m_$7_$14| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$14| ref) (|f_$4_$14| Field$Mu$) (|howMuch_$17| Int) (|q_$0_$14| ref) (|g_$18| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Mu$ |m_$7_$14| |o_$8_$14| |f_$4_$14| |howMuch_$17|) |q_$0_$14| |g_$18|) perm$R) (ite$Int$ (and (= |o_$8_$14| |q_$0_$14|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$14| |q_$0_$14| |g_$18|) perm$R) |howMuch_$17|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$7_$14| |q_$0_$14| |g_$18|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (DecPerm$Mu$ |m_$7_$14| |o_$8_$14| |f_$4_$14| |howMuch_$17|) |q_$0_$14| |g_$18|) perm$R))))
      (forall( (|m_$7_$15| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$15| ref) (|f_$4_$15| Field$Bool$) (|howMuch_$18| Int) (|q_$0_$15| ref) (|g_$19| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$Bool$ |m_$7_$15| |o_$8_$15| |f_$4_$15| |howMuch_$18|) |q_$0_$15| |g_$19|) perm$R) (ite$Int$ (and (= |o_$8_$15| |q_$0_$15|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$15| |q_$0_$15| |g_$19|) perm$R) |howMuch_$18|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$15| |q_$0_$15| |g_$19|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$Bool$ |m_$7_$15| |o_$8_$15| |f_$4_$15| |howMuch_$18|) |q_$0_$15| |g_$19|) perm$R))))
      (forall( (|m_$7_$16| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$16| ref) (|f_$4_$16| Field$Int$) (|howMuch_$19| Int) (|q_$0_$16| ref) (|g_$20| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$Int$ |m_$7_$16| |o_$8_$16| |f_$4_$16| |howMuch_$19|) |q_$0_$16| |g_$20|) perm$R) (ite$Int$ (and (= |o_$8_$16| |q_$0_$16|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$16| |q_$0_$16| |g_$20|) perm$R) |howMuch_$19|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$16| |q_$0_$16| |g_$20|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$Int$ |m_$7_$16| |o_$8_$16| |f_$4_$16| |howMuch_$19|) |q_$0_$16| |g_$20|) perm$R))))
      (forall( (|m_$7_$17| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$17| ref) (|f_$4_$17| Field$ref$) (|howMuch_$20| Int) (|q_$0_$17| ref) (|g_$21| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$ref$ |m_$7_$17| |o_$8_$17| |f_$4_$17| |howMuch_$20|) |q_$0_$17| |g_$21|) perm$R) (ite$Int$ (and (= |o_$8_$17| |q_$0_$17|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$17| |q_$0_$17| |g_$21|) perm$R) |howMuch_$20|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$17| |q_$0_$17| |g_$21|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$ref$ |m_$7_$17| |o_$8_$17| |f_$4_$17| |howMuch_$20|) |q_$0_$17| |g_$21|) perm$R))))
      (forall( (|m_$7_$18| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$18| ref) (|f_$4_$18| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$21| Int) (|q_$0_$18| ref) (|g_$22| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$18| |o_$8_$18| |f_$4_$18| |howMuch_$21|) |q_$0_$18| |g_$22|) perm$R) (ite$Int$ (and (= |o_$8_$18| |q_$0_$18|) (= |f_$4_$18| |g_$22|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$18| |q_$0_$18| |g_$22|) perm$R) |howMuch_$21|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$18| |q_$0_$18| |g_$22|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$18| |o_$8_$18| |f_$4_$18| |howMuch_$21|) |q_$0_$18| |g_$22|) perm$R))))
      (forall( (|m_$7_$19| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$19| ref) (|f_$4_$19| Field$Mu$) (|howMuch_$22| Int) (|q_$0_$19| ref) (|g_$23| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$Mu$ |m_$7_$19| |o_$8_$19| |f_$4_$19| |howMuch_$22|) |q_$0_$19| |g_$23|) perm$R) (ite$Int$ (and (= |o_$8_$19| |q_$0_$19|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$19| |q_$0_$19| |g_$23|) perm$R) |howMuch_$22|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$19| |q_$0_$19| |g_$23|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (DecPerm$Mu$ |m_$7_$19| |o_$8_$19| |f_$4_$19| |howMuch_$22|) |q_$0_$19| |g_$23|) perm$R))))
      (forall( (|m_$7_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$2| ref) (|f_$4_$2| Field$ref$) (|howMuch_$5| Int) (|q_$0_$2| ref) (|g_$6| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$ref$ |m_$7_$2| |o_$8_$2| |f_$4_$2| |howMuch_$5|) |q_$0_$2| |g_$6|) perm$R) (ite$Int$ (and (= |o_$8_$2| |q_$0_$2|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$2| |q_$0_$2| |g_$6|) perm$R) |howMuch_$5|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$2| |q_$0_$2| |g_$6|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$ref$ |m_$7_$2| |o_$8_$2| |f_$4_$2| |howMuch_$5|) |q_$0_$2| |g_$6|) perm$R))))
      (forall( (|m_$7_$20| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$20| ref) (|f_$4_$20| Field$Bool$) (|howMuch_$23| Int) (|q_$0_$20| ref) (|g_$24| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Bool$ |m_$7_$20| |o_$8_$20| |f_$4_$20| |howMuch_$23|) |q_$0_$20| |g_$24|) perm$R) (ite$Int$ (and (= |o_$8_$20| |q_$0_$20|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$20| |q_$0_$20| |g_$24|) perm$R) |howMuch_$23|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$20| |q_$0_$20| |g_$24|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Bool$ |m_$7_$20| |o_$8_$20| |f_$4_$20| |howMuch_$23|) |q_$0_$20| |g_$24|) perm$R))))
      (forall( (|m_$7_$21| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$21| ref) (|f_$4_$21| Field$Int$) (|howMuch_$24| Int) (|q_$0_$21| ref) (|g_$25| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Int$ |m_$7_$21| |o_$8_$21| |f_$4_$21| |howMuch_$24|) |q_$0_$21| |g_$25|) perm$R) (ite$Int$ (and (= |o_$8_$21| |q_$0_$21|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$21| |q_$0_$21| |g_$25|) perm$R) |howMuch_$24|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$21| |q_$0_$21| |g_$25|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Int$ |m_$7_$21| |o_$8_$21| |f_$4_$21| |howMuch_$24|) |q_$0_$21| |g_$25|) perm$R))))
      (forall( (|m_$7_$22| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$22| ref) (|f_$4_$22| Field$ref$) (|howMuch_$25| Int) (|q_$0_$22| ref) (|g_$26| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$ref$ |m_$7_$22| |o_$8_$22| |f_$4_$22| |howMuch_$25|) |q_$0_$22| |g_$26|) perm$R) (ite$Int$ (and (= |o_$8_$22| |q_$0_$22|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$22| |q_$0_$22| |g_$26|) perm$R) |howMuch_$25|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$22| |q_$0_$22| |g_$26|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$ref$ |m_$7_$22| |o_$8_$22| |f_$4_$22| |howMuch_$25|) |q_$0_$22| |g_$26|) perm$R))))
      (forall( (|m_$7_$23| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$23| ref) (|f_$4_$23| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$26| Int) (|q_$0_$23| ref) (|g_$27| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$23| |o_$8_$23| |f_$4_$23| |howMuch_$26|) |q_$0_$23| |g_$27|) perm$R) (ite$Int$ (and (= |o_$8_$23| |q_$0_$23|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$23| |q_$0_$23| |g_$27|) perm$R) |howMuch_$26|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$23| |q_$0_$23| |g_$27|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$23| |o_$8_$23| |f_$4_$23| |howMuch_$26|) |q_$0_$23| |g_$27|) perm$R))))
      (forall( (|m_$7_$24| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$24| ref) (|f_$4_$24| Field$Mu$) (|howMuch_$27| Int) (|q_$0_$24| ref) (|g_$28| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Mu$ |m_$7_$24| |o_$8_$24| |f_$4_$24| |howMuch_$27|) |q_$0_$24| |g_$28|) perm$R) (ite$Int$ (and (= |o_$8_$24| |q_$0_$24|) (= |f_$4_$24| |g_$28|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$24| |q_$0_$24| |g_$28|) perm$R) |howMuch_$27|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$7_$24| |q_$0_$24| |g_$28|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (DecPerm$Mu$ |m_$7_$24| |o_$8_$24| |f_$4_$24| |howMuch_$27|) |q_$0_$24| |g_$28|) perm$R))))
      (forall( (|m_$7_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$3| ref) (|f_$4_$3| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$6| Int) (|q_$0_$3| ref) (|g_$7| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$3| |o_$8_$3| |f_$4_$3| |howMuch_$6|) |q_$0_$3| |g_$7|) perm$R) (ite$Int$ (and (= |o_$8_$3| |q_$0_$3|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$3| |q_$0_$3| |g_$7|) perm$R) |howMuch_$6|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$3| |q_$0_$3| |g_$7|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$3| |o_$8_$3| |f_$4_$3| |howMuch_$6|) |q_$0_$3| |g_$7|) perm$R))))
      (forall( (|m_$7_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$4| ref) (|f_$4_$4| Field$Mu$) (|howMuch_$7| Int) (|q_$0_$4| ref) (|g_$8| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Mu$ |m_$7_$4| |o_$8_$4| |f_$4_$4| |howMuch_$7|) |q_$0_$4| |g_$8|) perm$R) (ite$Int$ (and (= |o_$8_$4| |q_$0_$4|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$4| |q_$0_$4| |g_$8|) perm$R) |howMuch_$7|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$7_$4| |q_$0_$4| |g_$8|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (DecPerm$Mu$ |m_$7_$4| |o_$8_$4| |f_$4_$4| |howMuch_$7|) |q_$0_$4| |g_$8|) perm$R))))
      (forall( (|m_$7_$5| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$5| ref) (|f_$4_$5| Field$Bool$) (|howMuch_$8| Int) (|q_$0_$5| ref) (|g_$9| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Bool$ |m_$7_$5| |o_$8_$5| |f_$4_$5| |howMuch_$8|) |q_$0_$5| |g_$9|) perm$R) (ite$Int$ (and (= |o_$8_$5| |q_$0_$5|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$5| |q_$0_$5| |g_$9|) perm$R) |howMuch_$8|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$5| |q_$0_$5| |g_$9|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Bool$ |m_$7_$5| |o_$8_$5| |f_$4_$5| |howMuch_$8|) |q_$0_$5| |g_$9|) perm$R))))
      (forall( (|m_$7_$6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$6| ref) (|f_$4_$6| Field$Int$) (|howMuch_$9| Int) (|q_$0_$6| ref) (|g_$10| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Int$ |m_$7_$6| |o_$8_$6| |f_$4_$6| |howMuch_$9|) |q_$0_$6| |g_$10|) perm$R) (ite$Int$ (and (= |o_$8_$6| |q_$0_$6|) (= |f_$4_$6| |g_$10|)) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$6| |q_$0_$6| |g_$10|) perm$R) |howMuch_$9|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$6| |q_$0_$6| |g_$10|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Int$ |m_$7_$6| |o_$8_$6| |f_$4_$6| |howMuch_$9|) |q_$0_$6| |g_$10|) perm$R))))
      (forall( (|m_$7_$7| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$7| ref) (|f_$4_$7| Field$ref$) (|howMuch_$10| Int) (|q_$0_$7| ref) (|g_$11| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$ref$ |m_$7_$7| |o_$8_$7| |f_$4_$7| |howMuch_$10|) |q_$0_$7| |g_$11|) perm$R) (ite$Int$ (and (= |o_$8_$7| |q_$0_$7|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$7| |q_$0_$7| |g_$11|) perm$R) |howMuch_$10|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$7| |q_$0_$7| |g_$11|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$ref$ |m_$7_$7| |o_$8_$7| |f_$4_$7| |howMuch_$10|) |q_$0_$7| |g_$11|) perm$R))))
      (forall( (|m_$7_$8| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$8| ref) (|f_$4_$8| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$11| Int) (|q_$0_$8| ref) (|g_$12| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$8| |o_$8_$8| |f_$4_$8| |howMuch_$11|) |q_$0_$8| |g_$12|) perm$R) (ite$Int$ (and (= |o_$8_$8| |q_$0_$8|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$8| |q_$0_$8| |g_$12|) perm$R) |howMuch_$11|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$8| |q_$0_$8| |g_$12|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$7_$8| |o_$8_$8| |f_$4_$8| |howMuch_$11|) |q_$0_$8| |g_$12|) perm$R))))
      (forall( (|m_$7_$9| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$8_$9| ref) (|f_$4_$9| Field$Mu$) (|howMuch_$12| Int) (|q_$0_$9| ref) (|g_$13| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Mu$ |m_$7_$9| |o_$8_$9| |f_$4_$9| |howMuch_$12|) |q_$0_$9| |g_$13|) perm$R) (ite$Int$ (and (= |o_$8_$9| |q_$0_$9|) false) (- (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$9| |q_$0_$9| |g_$13|) perm$R) |howMuch_$12|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$7_$9| |q_$0_$9| |g_$13|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (DecPerm$Mu$ |m_$7_$9| |o_$8_$9| |f_$4_$9| |howMuch_$12|) |q_$0_$9| |g_$13|) perm$R))))
      (forall( (|m_$9_$0| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$0| ref) (|f_$6_$0| Field$Bool$) (|howMuch_$1_$0| Int) (|q_$2_$0| ref) (|g_$1_$0| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Bool$ |m_$9_$0| |o_$10_$0| |f_$6_$0| |howMuch_$1_$0|) |q_$2_$0| |g_$1_$0|) perm$R) (ite$Int$ (and (= |o_$10_$0| |q_$2_$0|) (= |f_$6_$0| |g_$1_$0|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$0| |q_$2_$0| |g_$1_$0|) perm$R) |howMuch_$1_$0|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$0| |q_$2_$0| |g_$1_$0|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Bool$ |m_$9_$0| |o_$10_$0| |f_$6_$0| |howMuch_$1_$0|) |q_$2_$0| |g_$1_$0|) perm$R))))
      (forall( (|m_$9_$1| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$1| ref) (|f_$6_$1| Field$Int$) (|howMuch_$1_$1| Int) (|q_$2_$1| ref) (|g_$1_$1| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Int$ |m_$9_$1| |o_$10_$1| |f_$6_$1| |howMuch_$1_$1|) |q_$2_$1| |g_$1_$1|) perm$R) (ite$Int$ (and (= |o_$10_$1| |q_$2_$1|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$1| |q_$2_$1| |g_$1_$1|) perm$R) |howMuch_$1_$1|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$1| |q_$2_$1| |g_$1_$1|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Int$ |m_$9_$1| |o_$10_$1| |f_$6_$1| |howMuch_$1_$1|) |q_$2_$1| |g_$1_$1|) perm$R))))
      (forall( (|m_$9_$10| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$10| ref) (|f_$6_$10| Field$Bool$) (|howMuch_$1_$10| Int) (|q_$2_$10| ref) (|g_$1_$10| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Bool$ |m_$9_$10| |o_$10_$10| |f_$6_$10| |howMuch_$1_$10|) |q_$2_$10| |g_$1_$10|) perm$R) (ite$Int$ (and (= |o_$10_$10| |q_$2_$10|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$10| |q_$2_$10| |g_$1_$10|) perm$R) |howMuch_$1_$10|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$10| |q_$2_$10| |g_$1_$10|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Bool$ |m_$9_$10| |o_$10_$10| |f_$6_$10| |howMuch_$1_$10|) |q_$2_$10| |g_$1_$10|) perm$R))))
      (forall( (|m_$9_$11| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$11| ref) (|f_$6_$11| Field$Int$) (|howMuch_$1_$11| Int) (|q_$2_$11| ref) (|g_$1_$11| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Int$ |m_$9_$11| |o_$10_$11| |f_$6_$11| |howMuch_$1_$11|) |q_$2_$11| |g_$1_$11|) perm$R) (ite$Int$ (and (= |o_$10_$11| |q_$2_$11|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$11| |q_$2_$11| |g_$1_$11|) perm$R) |howMuch_$1_$11|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$11| |q_$2_$11| |g_$1_$11|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Int$ |m_$9_$11| |o_$10_$11| |f_$6_$11| |howMuch_$1_$11|) |q_$2_$11| |g_$1_$11|) perm$R))))
      (forall( (|m_$9_$12| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$12| ref) (|f_$6_$12| Field$ref$) (|howMuch_$1_$12| Int) (|q_$2_$12| ref) (|g_$1_$12| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$ref$ |m_$9_$12| |o_$10_$12| |f_$6_$12| |howMuch_$1_$12|) |q_$2_$12| |g_$1_$12|) perm$R) (ite$Int$ (and (= |o_$10_$12| |q_$2_$12|) (= |f_$6_$12| |g_$1_$12|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$12| |q_$2_$12| |g_$1_$12|) perm$R) |howMuch_$1_$12|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$12| |q_$2_$12| |g_$1_$12|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$ref$ |m_$9_$12| |o_$10_$12| |f_$6_$12| |howMuch_$1_$12|) |q_$2_$12| |g_$1_$12|) perm$R))))
      (forall( (|m_$9_$13| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$13| ref) (|f_$6_$13| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$1_$13| Int) (|q_$2_$13| ref) (|g_$1_$13| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$13| |o_$10_$13| |f_$6_$13| |howMuch_$1_$13|) |q_$2_$13| |g_$1_$13|) perm$R) (ite$Int$ (and (= |o_$10_$13| |q_$2_$13|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$13| |q_$2_$13| |g_$1_$13|) perm$R) |howMuch_$1_$13|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$13| |q_$2_$13| |g_$1_$13|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$13| |o_$10_$13| |f_$6_$13| |howMuch_$1_$13|) |q_$2_$13| |g_$1_$13|) perm$R))))
      (forall( (|m_$9_$14| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$14| ref) (|f_$6_$14| Field$Mu$) (|howMuch_$1_$14| Int) (|q_$2_$14| ref) (|g_$1_$14| Field$ref$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Mu$ |m_$9_$14| |o_$10_$14| |f_$6_$14| |howMuch_$1_$14|) |q_$2_$14| |g_$1_$14|) perm$R) (ite$Int$ (and (= |o_$10_$14| |q_$2_$14|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$14| |q_$2_$14| |g_$1_$14|) perm$R) |howMuch_$1_$14|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ |m_$9_$14| |q_$2_$14| |g_$1_$14|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ (IncPerm$Mu$ |m_$9_$14| |o_$10_$14| |f_$6_$14| |howMuch_$1_$14|) |q_$2_$14| |g_$1_$14|) perm$R))))
      (forall( (|m_$9_$15| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$15| ref) (|f_$6_$15| Field$Bool$) (|howMuch_$1_$15| Int) (|q_$2_$15| ref) (|g_$1_$15| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$Bool$ |m_$9_$15| |o_$10_$15| |f_$6_$15| |howMuch_$1_$15|) |q_$2_$15| |g_$1_$15|) perm$R) (ite$Int$ (and (= |o_$10_$15| |q_$2_$15|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$15| |q_$2_$15| |g_$1_$15|) perm$R) |howMuch_$1_$15|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$15| |q_$2_$15| |g_$1_$15|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$Bool$ |m_$9_$15| |o_$10_$15| |f_$6_$15| |howMuch_$1_$15|) |q_$2_$15| |g_$1_$15|) perm$R))))
      (forall( (|m_$9_$16| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$16| ref) (|f_$6_$16| Field$Int$) (|howMuch_$1_$16| Int) (|q_$2_$16| ref) (|g_$1_$16| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$Int$ |m_$9_$16| |o_$10_$16| |f_$6_$16| |howMuch_$1_$16|) |q_$2_$16| |g_$1_$16|) perm$R) (ite$Int$ (and (= |o_$10_$16| |q_$2_$16|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$16| |q_$2_$16| |g_$1_$16|) perm$R) |howMuch_$1_$16|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$16| |q_$2_$16| |g_$1_$16|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$Int$ |m_$9_$16| |o_$10_$16| |f_$6_$16| |howMuch_$1_$16|) |q_$2_$16| |g_$1_$16|) perm$R))))
      (forall( (|m_$9_$17| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$17| ref) (|f_$6_$17| Field$ref$) (|howMuch_$1_$17| Int) (|q_$2_$17| ref) (|g_$1_$17| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$ref$ |m_$9_$17| |o_$10_$17| |f_$6_$17| |howMuch_$1_$17|) |q_$2_$17| |g_$1_$17|) perm$R) (ite$Int$ (and (= |o_$10_$17| |q_$2_$17|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$17| |q_$2_$17| |g_$1_$17|) perm$R) |howMuch_$1_$17|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$17| |q_$2_$17| |g_$1_$17|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$ref$ |m_$9_$17| |o_$10_$17| |f_$6_$17| |howMuch_$1_$17|) |q_$2_$17| |g_$1_$17|) perm$R))))
      (forall( (|m_$9_$18| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$18| ref) (|f_$6_$18| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$1_$18| Int) (|q_$2_$18| ref) (|g_$1_$18| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$18| |o_$10_$18| |f_$6_$18| |howMuch_$1_$18|) |q_$2_$18| |g_$1_$18|) perm$R) (ite$Int$ (and (= |o_$10_$18| |q_$2_$18|) (= |f_$6_$18| |g_$1_$18|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$18| |q_$2_$18| |g_$1_$18|) perm$R) |howMuch_$1_$18|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$18| |q_$2_$18| |g_$1_$18|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$18| |o_$10_$18| |f_$6_$18| |howMuch_$1_$18|) |q_$2_$18| |g_$1_$18|) perm$R))))
      (forall( (|m_$9_$19| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$19| ref) (|f_$6_$19| Field$Mu$) (|howMuch_$1_$19| Int) (|q_$2_$19| ref) (|g_$1_$19| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$Mu$ |m_$9_$19| |o_$10_$19| |f_$6_$19| |howMuch_$1_$19|) |q_$2_$19| |g_$1_$19|) perm$R) (ite$Int$ (and (= |o_$10_$19| |q_$2_$19|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$19| |q_$2_$19| |g_$1_$19|) perm$R) |howMuch_$1_$19|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$19| |q_$2_$19| |g_$1_$19|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ (IncPerm$Mu$ |m_$9_$19| |o_$10_$19| |f_$6_$19| |howMuch_$1_$19|) |q_$2_$19| |g_$1_$19|) perm$R))))
      (forall( (|m_$9_$2| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$2| ref) (|f_$6_$2| Field$ref$) (|howMuch_$1_$2| Int) (|q_$2_$2| ref) (|g_$1_$2| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$ref$ |m_$9_$2| |o_$10_$2| |f_$6_$2| |howMuch_$1_$2|) |q_$2_$2| |g_$1_$2|) perm$R) (ite$Int$ (and (= |o_$10_$2| |q_$2_$2|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$2| |q_$2_$2| |g_$1_$2|) perm$R) |howMuch_$1_$2|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$2| |q_$2_$2| |g_$1_$2|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$ref$ |m_$9_$2| |o_$10_$2| |f_$6_$2| |howMuch_$1_$2|) |q_$2_$2| |g_$1_$2|) perm$R))))
      (forall( (|m_$9_$20| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$20| ref) (|f_$6_$20| Field$Bool$) (|howMuch_$1_$20| Int) (|q_$2_$20| ref) (|g_$1_$20| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Bool$ |m_$9_$20| |o_$10_$20| |f_$6_$20| |howMuch_$1_$20|) |q_$2_$20| |g_$1_$20|) perm$R) (ite$Int$ (and (= |o_$10_$20| |q_$2_$20|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$20| |q_$2_$20| |g_$1_$20|) perm$R) |howMuch_$1_$20|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$20| |q_$2_$20| |g_$1_$20|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Bool$ |m_$9_$20| |o_$10_$20| |f_$6_$20| |howMuch_$1_$20|) |q_$2_$20| |g_$1_$20|) perm$R))))
      (forall( (|m_$9_$21| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$21| ref) (|f_$6_$21| Field$Int$) (|howMuch_$1_$21| Int) (|q_$2_$21| ref) (|g_$1_$21| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Int$ |m_$9_$21| |o_$10_$21| |f_$6_$21| |howMuch_$1_$21|) |q_$2_$21| |g_$1_$21|) perm$R) (ite$Int$ (and (= |o_$10_$21| |q_$2_$21|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$21| |q_$2_$21| |g_$1_$21|) perm$R) |howMuch_$1_$21|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$21| |q_$2_$21| |g_$1_$21|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Int$ |m_$9_$21| |o_$10_$21| |f_$6_$21| |howMuch_$1_$21|) |q_$2_$21| |g_$1_$21|) perm$R))))
      (forall( (|m_$9_$22| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$22| ref) (|f_$6_$22| Field$ref$) (|howMuch_$1_$22| Int) (|q_$2_$22| ref) (|g_$1_$22| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$ref$ |m_$9_$22| |o_$10_$22| |f_$6_$22| |howMuch_$1_$22|) |q_$2_$22| |g_$1_$22|) perm$R) (ite$Int$ (and (= |o_$10_$22| |q_$2_$22|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$22| |q_$2_$22| |g_$1_$22|) perm$R) |howMuch_$1_$22|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$22| |q_$2_$22| |g_$1_$22|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$ref$ |m_$9_$22| |o_$10_$22| |f_$6_$22| |howMuch_$1_$22|) |q_$2_$22| |g_$1_$22|) perm$R))))
      (forall( (|m_$9_$23| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$23| ref) (|f_$6_$23| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$1_$23| Int) (|q_$2_$23| ref) (|g_$1_$23| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$23| |o_$10_$23| |f_$6_$23| |howMuch_$1_$23|) |q_$2_$23| |g_$1_$23|) perm$R) (ite$Int$ (and (= |o_$10_$23| |q_$2_$23|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$23| |q_$2_$23| |g_$1_$23|) perm$R) |howMuch_$1_$23|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$23| |q_$2_$23| |g_$1_$23|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$23| |o_$10_$23| |f_$6_$23| |howMuch_$1_$23|) |q_$2_$23| |g_$1_$23|) perm$R))))
      (forall( (|m_$9_$24| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$24| ref) (|f_$6_$24| Field$Mu$) (|howMuch_$1_$24| Int) (|q_$2_$24| ref) (|g_$1_$24| Field$Mu$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Mu$ |m_$9_$24| |o_$10_$24| |f_$6_$24| |howMuch_$1_$24|) |q_$2_$24| |g_$1_$24|) perm$R) (ite$Int$ (and (= |o_$10_$24| |q_$2_$24|) (= |f_$6_$24| |g_$1_$24|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$24| |q_$2_$24| |g_$1_$24|) perm$R) |howMuch_$1_$24|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ |m_$9_$24| |q_$2_$24| |g_$1_$24|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ (IncPerm$Mu$ |m_$9_$24| |o_$10_$24| |f_$6_$24| |howMuch_$1_$24|) |q_$2_$24| |g_$1_$24|) perm$R))))
      (forall( (|m_$9_$3| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$3| ref) (|f_$6_$3| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$1_$3| Int) (|q_$2_$3| ref) (|g_$1_$3| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$3| |o_$10_$3| |f_$6_$3| |howMuch_$1_$3|) |q_$2_$3| |g_$1_$3|) perm$R) (ite$Int$ (and (= |o_$10_$3| |q_$2_$3|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$3| |q_$2_$3| |g_$1_$3|) perm$R) |howMuch_$1_$3|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$3| |q_$2_$3| |g_$1_$3|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$3| |o_$10_$3| |f_$6_$3| |howMuch_$1_$3|) |q_$2_$3| |g_$1_$3|) perm$R))))
      (forall( (|m_$9_$4| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$4| ref) (|f_$6_$4| Field$Mu$) (|howMuch_$1_$4| Int) (|q_$2_$4| ref) (|g_$1_$4| Field$Bool$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Mu$ |m_$9_$4| |o_$10_$4| |f_$6_$4| |howMuch_$1_$4|) |q_$2_$4| |g_$1_$4|) perm$R) (ite$Int$ (and (= |o_$10_$4| |q_$2_$4|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$4| |q_$2_$4| |g_$1_$4|) perm$R) |howMuch_$1_$4|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ |m_$9_$4| |q_$2_$4| |g_$1_$4|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ (IncPerm$Mu$ |m_$9_$4| |o_$10_$4| |f_$6_$4| |howMuch_$1_$4|) |q_$2_$4| |g_$1_$4|) perm$R))))
      (forall( (|m_$9_$5| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$5| ref) (|f_$6_$5| Field$Bool$) (|howMuch_$1_$5| Int) (|q_$2_$5| ref) (|g_$1_$5| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Bool$ |m_$9_$5| |o_$10_$5| |f_$6_$5| |howMuch_$1_$5|) |q_$2_$5| |g_$1_$5|) perm$R) (ite$Int$ (and (= |o_$10_$5| |q_$2_$5|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$5| |q_$2_$5| |g_$1_$5|) perm$R) |howMuch_$1_$5|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$5| |q_$2_$5| |g_$1_$5|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Bool$ |m_$9_$5| |o_$10_$5| |f_$6_$5| |howMuch_$1_$5|) |q_$2_$5| |g_$1_$5|) perm$R))))
      (forall( (|m_$9_$6| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$6| ref) (|f_$6_$6| Field$Int$) (|howMuch_$1_$6| Int) (|q_$2_$6| ref) (|g_$1_$6| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Int$ |m_$9_$6| |o_$10_$6| |f_$6_$6| |howMuch_$1_$6|) |q_$2_$6| |g_$1_$6|) perm$R) (ite$Int$ (and (= |o_$10_$6| |q_$2_$6|) (= |f_$6_$6| |g_$1_$6|)) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$6| |q_$2_$6| |g_$1_$6|) perm$R) |howMuch_$1_$6|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$6| |q_$2_$6| |g_$1_$6|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Int$ |m_$9_$6| |o_$10_$6| |f_$6_$6| |howMuch_$1_$6|) |q_$2_$6| |g_$1_$6|) perm$R))))
      (forall( (|m_$9_$7| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$7| ref) (|f_$6_$7| Field$ref$) (|howMuch_$1_$7| Int) (|q_$2_$7| ref) (|g_$1_$7| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$ref$ |m_$9_$7| |o_$10_$7| |f_$6_$7| |howMuch_$1_$7|) |q_$2_$7| |g_$1_$7|) perm$R) (ite$Int$ (and (= |o_$10_$7| |q_$2_$7|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$7| |q_$2_$7| |g_$1_$7|) perm$R) |howMuch_$1_$7|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$7| |q_$2_$7| |g_$1_$7|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$ref$ |m_$9_$7| |o_$10_$7| |f_$6_$7| |howMuch_$1_$7|) |q_$2_$7| |g_$1_$7|) perm$R))))
      (forall( (|m_$9_$8| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$8| ref) (|f_$6_$8| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|howMuch_$1_$8| Int) (|q_$2_$8| ref) (|g_$1_$8| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$8| |o_$10_$8| |f_$6_$8| |howMuch_$1_$8|) |q_$2_$8| |g_$1_$8|) perm$R) (ite$Int$ (and (= |o_$10_$8| |q_$2_$8|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$8| |q_$2_$8| |g_$1_$8|) perm$R) |howMuch_$1_$8|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$8| |q_$2_$8| |g_$1_$8|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ |m_$9_$8| |o_$10_$8| |f_$6_$8| |howMuch_$1_$8|) |q_$2_$8| |g_$1_$8|) perm$R))))
      (forall( (|m_$9_$9| $@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@) (|o_$10_$9| ref) (|f_$6_$9| Field$Mu$) (|howMuch_$1_$9| Int) (|q_$2_$9| ref) (|g_$1_$9| Field$Int$))(!(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Mu$ |m_$9_$9| |o_$10_$9| |f_$6_$9| |howMuch_$1_$9|) |q_$2_$9| |g_$1_$9|) perm$R) (ite$Int$ (and (= |o_$10_$9| |q_$2_$9|) false) (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$9| |q_$2_$9| |g_$1_$9|) perm$R) |howMuch_$1_$9|) (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ |m_$9_$9| |q_$2_$9| |g_$1_$9|) perm$R)))  :pattern ( (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ (IncPerm$Mu$ |m_$9_$9| |o_$10_$9| |f_$6_$9| |howMuch_$1_$9|) |q_$2_$9| |g_$1_$9|) perm$R))))
      (forall( (|m| Mu) (|n_$0| Mu))(!(not (and (MuBelow |m| |n_$0|) (MuBelow |n_$0| |m|)))  :pattern ( (MuBelow |m| |n_$0|) (MuBelow |n_$0| |m|))))
      (forall( (|n| Int))(!(= (Fractions |n|) (* |n| Permission$denominator))  :pattern ( (Fractions |n|))))
      (forall( (|o_$14| ref))(= (MapRead$$@Map@@ref@To@Int@@$ ZeroCredits |o_$14|) 0))
      (forall( (|o_$17| ref) (|f_$13| Field$Bool$) (|pc_$0| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Bool$ ZeroMask |o_$17| |f_$13|) |pc_$0|) 0))
      (forall( (|o_$18| ref) (|f_$14| Field$Int$) (|pc_$1| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask |o_$18| |f_$14|) |pc_$1|) 0))
      (forall( (|o_$19| ref) (|f_$15| Field$ref$) (|pc_$2| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$ref$ ZeroMask |o_$19| |f_$15|) |pc_$2|) 0))
      (forall( (|o_$20| ref) (|f_$16| Field$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$) (|pc_$3| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ ZeroMask |o_$20| |f_$16|) |pc_$3|) 0))
      (forall( (|o_$21| ref) (|f_$17| Field$Mu$) (|pc_$4| PermissionComponent))(= (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Mu$ ZeroMask |o_$21| |f_$17|) |pc_$4|) 0))
      (forall( (|x| Int) (|y| Int))(=> (and (<= 0 |x|) (<= |x| |y|)) (<= (Fractions |x|) (Fractions |y|))))
      (IsGoodMask ZeroMask)
      (IsGoodState$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ nostate)
      (NonPredicateField$Bool$ rdheld)
      (NonPredicateField$Int$ FactorialActorChannelExpEP.state)
      (NonPredicateField$Int$ FactorialActorChannelImpEP.state)
      (NonPredicateField$Int$ FactorialCont.v)
      (NonPredicateField$Int$ FactorialCont.vo)
      (NonPredicateField$Int$ FactorialContChannelExpEP.state)
      (NonPredicateField$Int$ FactorialContChannelImpEP.state)
      (NonPredicateField$Int$ forkK)
      (NonPredicateField$Int$ FutureChannelExpEP.state)
      (NonPredicateField$Int$ FutureChannelImpEP.state)
      (NonPredicateField$Int$ held)
      (NonPredicateField$Int$ joinable)
      (NonPredicateField$Int$ Message.type)
      (NonPredicateField$Int$ Message.v1)
      (NonPredicateField$Int$ Message.vo1)
      (NonPredicateField$Int$ Message.vr1)
      (NonPredicateField$Int$ Message.vr2)
      (NonPredicateField$Int$ Message.vr3)
      (NonPredicateField$Mu$ mu)
      (NonPredicateField$ref$ FactorialActor.q)
      (NonPredicateField$ref$ FactorialActorChannel.exp)
      (NonPredicateField$ref$ FactorialActorChannel.imp)
      (NonPredicateField$ref$ FactorialActorChannelExpEP.ch)
      (NonPredicateField$ref$ FactorialActorChannelExpEP.expch)
      (NonPredicateField$ref$ FactorialActorChannelImpEP.ch)
      (NonPredicateField$ref$ FactorialActorChannelImpEP.impch)
      (NonPredicateField$ref$ FactorialCont.cust)
      (NonPredicateField$ref$ FactorialCont.q)
      (NonPredicateField$ref$ FactorialContChannel.exp)
      (NonPredicateField$ref$ FactorialContChannel.imp)
      (NonPredicateField$ref$ FactorialContChannelExpEP.ch)
      (NonPredicateField$ref$ FactorialContChannelExpEP.expch)
      (NonPredicateField$ref$ FactorialContChannelImpEP.ch)
      (NonPredicateField$ref$ FactorialContChannelImpEP.impch)
      (NonPredicateField$ref$ Future.q)
      (NonPredicateField$ref$ Future.sent)
      (NonPredicateField$ref$ Future.value)
      (NonPredicateField$ref$ FutureChannel.exp)
      (NonPredicateField$ref$ FutureChannel.imp)
      (NonPredicateField$ref$ FutureChannelExpEP.ch)
      (NonPredicateField$ref$ FutureChannelExpEP.expch)
      (NonPredicateField$ref$ FutureChannelImpEP.ch)
      (NonPredicateField$ref$ FutureChannelImpEP.impch)
      (NonPredicateField$ref$ Message.cust1)
      (NonPredicateField$ref$ Message.old1)
      (NonPredicateField$ref$ Message.old2)
      (NonPredicateField$ref$ Message.receiver1)
      (NonPredicateField$ref$ Message.receiver2)
      (NonPredicateField$ref$ Message.receiver3)
      (NonPredicateField$ref$ Message.receiver4)
      (NonPredicateField$ref$ Message.sender1)
      (NonPredicateField$ref$ Message.sender2)
      (NonPredicateField$ref$ Message.sender3)
      (NonPredicateField$ref$ Message.sender4)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialActorChannel.initExpState)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialActorChannel.initImpState)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialActorChannel.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialActorChannelExpEP.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialActorChannelImpEP.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialContChannel.initExpState)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialContChannel.initImpState)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialContChannel.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialContChannelExpEP.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FactorialContChannelImpEP.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FutureChannel.initExpState)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FutureChannel.initImpState)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FutureChannel.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FutureChannelExpEP.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ FutureChannelImpEP.valid)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Message.inv)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Message.invFinalResult)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Message.invResult1)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Message.invResult2)
      (PredicateField$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$ Message.invValue)
   )
PreconditionGeneratedEntry
)) :named ax_$start))
(assert (! (=> PreconditionGeneratedEntry (and true 
   (and true
      (IsGoodMask Mask)
      (not (= this null))
      (or (= msg@0 null) (= (dtype msg@0) Message@t))
      (or (= this null) (= (dtype this) Channel@t))
      (wf Heap Mask)
   )
anon0
)) :named ax_PreconditionGeneratedEntry))
(assert (! (=> anon0 (and true 
   (and true
      (< (* 1000 whereK@_8) (Fractions 1))
      (< 0 whereK@_8)
      (= Heap@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ Heap msg@0 Message.type (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ inhaleHeap@_9@0 msg@0 Message.type)))
      (= Mask@0 (MapWrite$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask msg@0 Message.type (MapWrite$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask msg@0 Message.type) perm$R (+ (MapRead$$@Map@@PermissionComponent@To@Int@@$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$@Map@@PermissionComponent@To@Int@@@@$Int$ ZeroMask msg@0 Message.type) perm$R) channelK))))
      (> channelK 0)
      (IsGoodInhaleState inhaleHeap@_9@0 Heap ZeroMask)
      (IsGoodMask Mask@0)
      (IsGoodState$Int$ (MapRead$$@Map@@$T0@@ref@Field$$T0$@To@$T0@@$Int$ inhaleHeap@_9@0 msg@0 Message.type))
      (not (= msg@0 null))
      (wf Heap@0 Mask@0)
      (wf Heap@0 ZeroMask)
      (wf inhaleHeap@_9@0 Mask@0)
   )
anon0_assertion
)) :named ax_anon0))
(assert (! (=> anon0_assertion (not (and true
   (and true
      (not (= msg@0 null))
   )
))) :named ax_anon0_assertion))
(assert (=> false (not (and
   anon0_assertion
))))

;Commands
   (check-sat)
   ;(get-unsat-core)
