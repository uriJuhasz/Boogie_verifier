(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-option :smt.qi.profile true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-sort T@ref 0)
(declare-fun r0 () T@ref)
(declare-fun r1 () T@ref)
(declare-fun r2 () T@ref)
(declare-fun %lbl%+54 () Bool)
(declare-sort |T@[ref]Int| 0)
(declare-fun heap@0 () |T@[ref]Int|)
(declare-fun |Store_[ref]$int| (|T@[ref]Int| T@ref Int) |T@[ref]Int|)
(declare-fun |Select_[ref]$int| (|T@[ref]Int| T@ref) Int)
(assert (forall ( ( ?x0 |T@[ref]Int|) ( ?x1 T@ref) ( ?x2 Int)) (= (|Select_[ref]$int| (|Store_[ref]$int| ?x0 ?x1 ?x2) ?x1)  ?x2)))
(assert (forall ( ( ?x0 |T@[ref]Int|) ( ?x1 T@ref) ( ?y1 T@ref) ( ?x2 Int)) (=>  (not (= ?x1 ?y1)) (= (|Select_[ref]$int| (|Store_[ref]$int| ?x0 ?x1 ?x2) ?y1) (|Select_[ref]$int| ?x0 ?y1)))))
(declare-fun heap () |T@[ref]Int|)
(declare-fun heap@1 () |T@[ref]Int|)
(declare-fun heap@2 () |T@[ref]Int|)
(declare-fun %lbl%@581 () Bool)
(declare-fun %lbl%+519 () Bool)
(assert (distinct r0 r1 r2)
)
; Valid
(declare-fun %lbl%+107 () Bool)
(declare-fun %lbl%@719 () Bool)
(declare-fun heap@6 () |T@[ref]Int|)
(declare-fun %lbl%+105 () Bool)
(declare-fun heap@5 () |T@[ref]Int|)
(declare-fun heap@3 () |T@[ref]Int|)
(declare-fun %lbl%+103 () Bool)
(declare-fun heap@4 () |T@[ref]Int|)
(declare-fun %lbl%+101 () Bool)
(declare-fun heap@0@@0 () |T@[ref]Int|)
(declare-fun heap@1@@0 () |T@[ref]Int|)
(declare-fun heap@2@@0 () |T@[ref]Int|)
(declare-fun %lbl%+606 () Bool)
; Valid
(declare-fun %lbl%+184 () Bool)
(declare-fun %lbl%@904 () Bool)
(declare-fun heap@10 () |T@[ref]Int|)
(declare-fun %lbl%+182 () Bool)
(declare-fun heap@9 () |T@[ref]Int|)
(declare-fun heap@7 () |T@[ref]Int|)
(declare-fun %lbl%+180 () Bool)
(declare-fun heap@8 () |T@[ref]Int|)
(declare-fun %lbl%+178 () Bool)
(declare-fun heap@6@@0 () |T@[ref]Int|)
(declare-fun %lbl%+176 () Bool)
(declare-fun heap@5@@0 () |T@[ref]Int|)
(declare-fun heap@3@@0 () |T@[ref]Int|)
(declare-fun %lbl%+174 () Bool)
(declare-fun heap@4@@0 () |T@[ref]Int|)
(declare-fun %lbl%+172 () Bool)
(declare-fun heap@0@@1 () |T@[ref]Int|)
(declare-fun heap@1@@1 () |T@[ref]Int|)
(declare-fun heap@2@@1 () |T@[ref]Int|)
(declare-fun %lbl%+731 () Bool)
(push 1)
(set-info :boogie-vc-id m2)
(assert (not
(let ((anon6_correct  (=> (! (and %lbl%+184 true) :lblpos +184) (! (or %lbl%@904 (= (|Select_[ref]$int| heap@10 r0) 0)) :lblneg @904))))
(let ((anon8_Else_correct  (=> (! (and %lbl%+182 true) :lblpos +182) (=> (and (= heap@9 (|Store_[ref]$int| heap@7 r2 2)) (= heap@10 heap@9)) anon6_correct))))
(let ((anon8_Then_correct  (=> (! (and %lbl%+180 true) :lblpos +180) (=> (and (= heap@8 (|Store_[ref]$int| heap@7 r1 2)) (= heap@10 heap@8)) anon6_correct))))
(let ((anon3_correct@@0  (=> (! (and %lbl%+178 true) :lblpos +178) (=> (= heap@7 (|Store_[ref]$int| heap@6@@0 r2 1)) (and anon8_Then_correct anon8_Else_correct)))))
(let ((anon7_Else_correct  (=> (! (and %lbl%+176 true) :lblpos +176) (=> (and (= heap@5@@0 (|Store_[ref]$int| heap@3@@0 r2 1)) (= heap@6@@0 heap@5@@0)) anon3_correct@@0))))
(let ((anon7_Then_correct  (=> (! (and %lbl%+174 true) :lblpos +174) (=> (and (= heap@4@@0 (|Store_[ref]$int| heap@3@@0 r1 1)) (= heap@6@@0 heap@4@@0)) anon3_correct@@0))))
(let ((anon0_correct@@1  (=> (! (and %lbl%+172 true) :lblpos +172) (=> (and (and (= heap@0@@1 (|Store_[ref]$int| heap r0 0)) (= heap@1@@1 (|Store_[ref]$int| heap@0@@1 r1 1))) (and (= heap@2@@1 (|Store_[ref]$int| heap@1@@1 r2 2)) (= heap@3@@0 (|Store_[ref]$int| heap@2@@1 r1 1)))) (and anon7_Then_correct anon7_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct@@1  (=> (! (and %lbl%+731 true) :lblpos +731) anon0_correct@@1)))
PreconditionGeneratedEntry_correct@@1))))))))
))
(check-sat)
