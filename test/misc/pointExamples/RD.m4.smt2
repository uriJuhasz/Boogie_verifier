(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
(set-option :smt.qi.profile true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-sort T@ref 0)
(declare-fun r0 () T@ref)
(declare-fun r1 () T@ref)
(declare-fun r2 () T@ref)
(declare-fun %lbl%+54 () Bool)
(declare-sort |T@[ref]Int| 0)
(declare-fun heap@0 () |T@[ref]Int|)
(declare-fun |Store_[ref]$int| (|T@[ref]Int| T@ref Int) |T@[ref]Int|)
(declare-fun |Select_[ref]$int| (|T@[ref]Int| T@ref) Int)
(assert (forall ( ( ?x0 |T@[ref]Int|) ( ?x1 T@ref) ( ?x2 Int)) (= (|Select_[ref]$int| (|Store_[ref]$int| ?x0 ?x1 ?x2) ?x1)  ?x2)))
(assert (forall ( ( ?x0 |T@[ref]Int|) ( ?x1 T@ref) ( ?y1 T@ref) ( ?x2 Int)) (=>  (not (= ?x1 ?y1)) (= (|Select_[ref]$int| (|Store_[ref]$int| ?x0 ?x1 ?x2) ?y1) (|Select_[ref]$int| ?x0 ?y1)))))
(declare-fun heap () |T@[ref]Int|)
(declare-fun heap@1 () |T@[ref]Int|)
(declare-fun heap@2 () |T@[ref]Int|)
(declare-fun %lbl%@581 () Bool)
(declare-fun %lbl%+519 () Bool)
(assert (distinct r0 r1 r2)
)
; Valid
(declare-fun %lbl%+107 () Bool)
(declare-fun %lbl%@719 () Bool)
(declare-fun heap@6 () |T@[ref]Int|)
(declare-fun %lbl%+105 () Bool)
(declare-fun heap@5 () |T@[ref]Int|)
(declare-fun heap@3 () |T@[ref]Int|)
(declare-fun %lbl%+103 () Bool)
(declare-fun heap@4 () |T@[ref]Int|)
(declare-fun %lbl%+101 () Bool)
(declare-fun heap@0@@0 () |T@[ref]Int|)
(declare-fun heap@1@@0 () |T@[ref]Int|)
(declare-fun heap@2@@0 () |T@[ref]Int|)
(declare-fun %lbl%+606 () Bool)
; Valid
(declare-fun %lbl%+184 () Bool)
(declare-fun %lbl%@904 () Bool)
(declare-fun heap@10 () |T@[ref]Int|)
(declare-fun %lbl%+182 () Bool)
(declare-fun heap@9 () |T@[ref]Int|)
(declare-fun heap@7 () |T@[ref]Int|)
(declare-fun %lbl%+180 () Bool)
(declare-fun heap@8 () |T@[ref]Int|)
(declare-fun %lbl%+178 () Bool)
(declare-fun heap@6@@0 () |T@[ref]Int|)
(declare-fun %lbl%+176 () Bool)
(declare-fun heap@5@@0 () |T@[ref]Int|)
(declare-fun heap@3@@0 () |T@[ref]Int|)
(declare-fun %lbl%+174 () Bool)
(declare-fun heap@4@@0 () |T@[ref]Int|)
(declare-fun %lbl%+172 () Bool)
(declare-fun heap@0@@1 () |T@[ref]Int|)
(declare-fun heap@1@@1 () |T@[ref]Int|)
(declare-fun heap@2@@1 () |T@[ref]Int|)
(declare-fun %lbl%+731 () Bool)
; Valid
(declare-fun %lbl%+327 () Bool)
(declare-fun %lbl%@1252 () Bool)
(declare-fun heap@21 () |T@[ref]Int|)
(declare-fun %lbl%+325 () Bool)
(declare-fun heap@20 () |T@[ref]Int|)
(declare-fun heap@18 () |T@[ref]Int|)
(declare-fun %lbl%+323 () Bool)
(declare-fun heap@19 () |T@[ref]Int|)
(declare-fun %lbl%+321 () Bool)
(declare-fun heap@17 () |T@[ref]Int|)
(declare-fun %lbl%+319 () Bool)
(declare-fun heap@16 () |T@[ref]Int|)
(declare-fun heap@14 () |T@[ref]Int|)
(declare-fun %lbl%+317 () Bool)
(declare-fun heap@15 () |T@[ref]Int|)
(declare-fun %lbl%+313 () Bool)
(declare-fun heap@13 () |T@[ref]Int|)
(declare-fun heap@11 () |T@[ref]Int|)
(declare-fun %lbl%+311 () Bool)
(declare-fun heap@12 () |T@[ref]Int|)
(declare-fun %lbl%+309 () Bool)
(declare-fun heap@10@@0 () |T@[ref]Int|)
(declare-fun %lbl%+307 () Bool)
(declare-fun heap@9@@0 () |T@[ref]Int|)
(declare-fun heap@7@@0 () |T@[ref]Int|)
(declare-fun %lbl%+305 () Bool)
(declare-fun heap@8@@0 () |T@[ref]Int|)
(declare-fun %lbl%+303 () Bool)
(declare-fun heap@6@@1 () |T@[ref]Int|)
(declare-fun %lbl%+301 () Bool)
(declare-fun heap@5@@1 () |T@[ref]Int|)
(declare-fun heap@3@@1 () |T@[ref]Int|)
(declare-fun %lbl%+299 () Bool)
(declare-fun heap@4@@1 () |T@[ref]Int|)
(declare-fun %lbl%+297 () Bool)
(declare-fun heap@0@@2 () |T@[ref]Int|)
(declare-fun heap@1@@2 () |T@[ref]Int|)
(declare-fun heap@2@@2 () |T@[ref]Int|)
(declare-fun %lbl%+916 () Bool)
(push 1)
(set-info :boogie-vc-id m4)
(assert (not
(let ((anon15_correct  (=> (! (and %lbl%+327 true) :lblpos +327) (! (or %lbl%@1252 (= (|Select_[ref]$int| heap@21 r0) 0)) :lblneg @1252))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+325 true) :lblpos +325) (=> (and (= heap@20 (|Store_[ref]$int| heap@18 r2 5)) (= heap@21 heap@20)) anon15_correct))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+323 true) :lblpos +323) (=> (and (= heap@19 (|Store_[ref]$int| heap@18 r1 5)) (= heap@21 heap@19)) anon15_correct))))
(let ((anon12_correct  (=> (! (and %lbl%+321 true) :lblpos +321) (=> (= heap@18 (|Store_[ref]$int| heap@17 r2 1)) (and anon20_Then_correct anon20_Else_correct)))))
(let ((anon19_Else_correct  (=> (! (and %lbl%+319 true) :lblpos +319) (=> (and (= heap@16 (|Store_[ref]$int| heap@14 r2 4)) (= heap@17 heap@16)) anon12_correct))))
(let ((anon19_Then_correct  (=> (! (and %lbl%+317 true) :lblpos +317) (=> (and (= heap@15 (|Store_[ref]$int| heap@14 r1 4)) (= heap@17 heap@15)) anon12_correct))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+313 true) :lblpos +313) (=> (and (= heap@13 (|Store_[ref]$int| heap@11 r2 3)) (= heap@14 heap@13)) (and anon19_Then_correct anon19_Else_correct)))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+311 true) :lblpos +311) (=> (and (= heap@12 (|Store_[ref]$int| heap@11 r1 3)) (= heap@14 heap@12)) (and anon19_Then_correct anon19_Else_correct)))))
(let ((anon6_correct@@0  (=> (! (and %lbl%+309 true) :lblpos +309) (=> (= heap@11 (|Store_[ref]$int| heap@10@@0 r2 1)) (and anon18_Then_correct anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+307 true) :lblpos +307) (=> (and (= heap@9@@0 (|Store_[ref]$int| heap@7@@0 r2 2)) (= heap@10@@0 heap@9@@0)) anon6_correct@@0))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+305 true) :lblpos +305) (=> (and (= heap@8@@0 (|Store_[ref]$int| heap@7@@0 r1 2)) (= heap@10@@0 heap@8@@0)) anon6_correct@@0))))
(let ((anon3_correct@@1  (=> (! (and %lbl%+303 true) :lblpos +303) (=> (= heap@7@@0 (|Store_[ref]$int| heap@6@@1 r2 1)) (and anon17_Then_correct anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (! (and %lbl%+301 true) :lblpos +301) (=> (and (= heap@5@@1 (|Store_[ref]$int| heap@3@@1 r2 1)) (= heap@6@@1 heap@5@@1)) anon3_correct@@1))))
(let ((anon16_Then_correct  (=> (! (and %lbl%+299 true) :lblpos +299) (=> (and (= heap@4@@1 (|Store_[ref]$int| heap@3@@1 r1 1)) (= heap@6@@1 heap@4@@1)) anon3_correct@@1))))
(let ((anon0_correct@@2  (=> (! (and %lbl%+297 true) :lblpos +297) (=> (and (and (= heap@0@@2 (|Store_[ref]$int| heap r0 0)) (= heap@1@@2 (|Store_[ref]$int| heap@0@@2 r1 1))) (and (= heap@2@@2 (|Store_[ref]$int| heap@1@@2 r2 2)) (= heap@3@@1 (|Store_[ref]$int| heap@2@@2 r1 1)))) (and anon16_Then_correct anon16_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct@@2  (=> (! (and %lbl%+916 true) :lblpos +916) anon0_correct@@2)))
PreconditionGeneratedEntry_correct@@2))))))))))))))))
))
(check-sat)
