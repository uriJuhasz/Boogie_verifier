(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :MODEL_HIDE_UNUSED_PARTITIONS false)
(set-option :ASYNC_COMMANDS false)
(set-option :MODEL_V2 true)
(set-option :PHASE_SELECTION 0)
(set-option :RESTART_STRATEGY 0)
(set-option :RESTART_FACTOR |1.5|)
(set-option :ARITH_RANDOM_INITIAL_VALUE true)
(set-option :CASE_SPLIT 3)
(set-option :DELAY_UNITS true)
(set-option :DELAY_UNITS_THRESHOLD 16)
(set-option :NNF_SK_HACK true)
(set-option :MBQI false)
(set-option :QI_EAGER_THRESHOLD 100)
(set-option :QI_COST |"(+ weight generation)"|)
(set-option :TYPE_CHECK true)
(set-option :BV_REFLECT true)
(set-option :MODEL_ON_TIMEOUT true)
(set-option :SOFT_TIMEOUT 0)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun anon3_reached () Bool)
(declare-fun %lbl%+72 () Bool)
(declare-fun z@1 () Int)
(declare-fun x@2 () Int)
(declare-fun %lbl%@178 () Bool)
(declare-fun anon4_Then_reached () Bool)
(declare-fun %lbl%+68 () Bool)
(declare-fun b () Bool)
(declare-fun x@1 () Int)
(declare-fun x@0 () Int)
(declare-fun anon4_Else_reached () Bool)
(declare-fun %lbl%+70 () Bool)
(declare-fun z@0 () Int)
(declare-fun z () Int)
(declare-fun anon0_reached () Bool)
(declare-fun %lbl%+66 () Bool)
(declare-fun y () Int)
(declare-fun PreconditionGeneratedEntry_reached () Bool)
(declare-fun %lbl%+89 () Bool)
(push 1)
(set-info :boogie-vc-id m)
(assert (not
(let ((anon3_correct (=> anon3_reached (=> (! (and %lbl%+72 true) :lblpos +72) (=> (= z@1 (+ x@2 1)) (and
(! (or %lbl%@178 (> z@1 0)) :lblneg @178)
(=> (> z@1 0) true)))))))
(let ((anon4_Then_correct (=> anon4_Then_reached (=> (! (and %lbl%+68 true) :lblpos +68) (=> b (=> (and
(= x@1 (+ x@0 1))
(= x@2 x@1)) anon3_correct))))))
(let ((anon4_Else_correct (=> anon4_Else_reached (=> (! (and %lbl%+70 true) :lblpos +70) (=> (not b) (=> (and
(= z@0 (+ z 1))
(= x@2 x@0)) anon3_correct))))))
(let ((anon0_correct (=> anon0_reached (=> (! (and %lbl%+66 true) :lblpos +66) (=> (= x@0 (+ (* y y) 5)) (and
(or
anon4_Then_correct
anon4_Else_reached)
(or
anon4_Else_correct
anon4_Then_reached)))))))
(let ((PreconditionGeneratedEntry_correct (=> PreconditionGeneratedEntry_reached (=> (! (and %lbl%+89 true) :lblpos +89) anon0_correct))))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(pop 1)
