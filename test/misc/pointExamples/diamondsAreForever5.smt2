(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 0)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun refType () T@T)
(declare-fun left () T@U)
(declare-fun right () T@U)
(declare-fun f1 () T@U)
(declare-fun f2 () T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun heap@8 () T@U)
(declare-fun this () T@U)
(declare-fun heap@6 () T@U)
(declare-fun null () T@U)
(declare-fun heap@7 () T@U)
(declare-fun heap@4 () T@U)
(declare-fun heap@5 () T@U)
(declare-fun heap@2 () T@U)
(declare-fun heap@3 () T@U)
(declare-fun r () T@U)
(declare-fun heap () T@U)
(declare-fun heap@0 () T@U)
(declare-fun heap@1 () T@U)
(declare-fun %lbl%+234 () Bool)
(declare-fun %lbl%@662 () Bool)
(declare-fun %lbl%+232 () Bool)
(declare-fun %lbl%+230 () Bool)
(declare-fun %lbl%+221 () Bool)
(declare-fun %lbl%+219 () Bool)
(declare-fun %lbl%+210 () Bool)
(declare-fun %lbl%+208 () Bool)
(declare-fun %lbl%+206 () Bool)
(declare-fun %lbl%@435 () Bool)
(declare-fun %lbl%+356 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@5 T@T) ) (! (= (Ctor (FieldType arg0@@5)) 3)
 :qid |ctor:FieldType|
)) (forall ((arg0@@6 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@6)) arg0@@6)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@6))
))) (= (Ctor refType) 4)) (= (type left) (FieldType refType))) (= (type right) (FieldType refType))) (= (type f1) (FieldType intType))) (= (type f2) (FieldType intType))))
(assert (distinct left right f1 f2)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@7 T@T) ) (! (= (Ctor (MapType0Type arg0@@7)) 5)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@8 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@8)) arg0@@8)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@8))
))) (forall ((arg0@@9 T@U) (arg1 T@U) (arg2 T@U) ) (! (let ((a (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@9 arg1 arg2)) a))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@9 arg1 arg2))
))) (forall ((arg0@@10 T@U) (arg1@@0 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@0)))
(= (type (MapType0Store arg0@@10 arg1@@0 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@10 arg1@@0 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((a@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) a@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type heap@8) (MapType0Type refType))) (= (type this) refType)) (= (type heap@6) (MapType0Type refType))) (= (type null) refType)) (= (type heap@7) (MapType0Type refType))) (= (type heap@4) (MapType0Type refType))) (= (type heap@5) (MapType0Type refType))) (= (type heap@2) (MapType0Type refType))) (= (type heap@3) (MapType0Type refType))) (= (type r) refType)) (= (type heap) (MapType0Type refType))) (= (type heap@0) (MapType0Type refType))) (= (type heap@1) (MapType0Type refType))))
(push 1)
(set-info :boogie-vc-id m)
(assert (not
(let ((anon9_correct  (=> (! (and %lbl%+234 true) :lblpos +234) (! (or %lbl%@662 (= (U_2_int (MapType0Select heap@8 this f1)) 0)) :lblneg @662))))
(let ((anon12_Else_correct  (=> (! (and %lbl%+232 true) :lblpos +232) (=> (= (MapType0Select heap@6 this right) null) (=> (and (= heap@7 (MapType0Store heap@6 (MapType0Select heap@6 this left) f2 (int_2_U 3))) (= heap@8 heap@7)) anon9_correct)))))
(let ((anon12_Then_correct  (=> (! (and %lbl%+230 true) :lblpos +230) (=> (and (not (= (MapType0Select heap@6 this right) null)) (= heap@8 heap@6)) anon9_correct))))
(let ((anon11_Else_correct  (=> (! (and %lbl%+221 true) :lblpos +221) (=> (and (= (MapType0Select heap@4 this left) null) (= heap@6 heap@4)) (and anon12_Then_correct anon12_Else_correct)))))
(let ((anon11_Then_correct  (=> (! (and %lbl%+219 true) :lblpos +219) (=> (not (= (MapType0Select heap@4 this left) null)) (=> (and (= heap@5 (MapType0Store heap@4 (MapType0Select heap@4 this left) f2 (int_2_U 2))) (= heap@6 heap@5)) (and anon12_Then_correct anon12_Else_correct))))))
(let ((anon10_Else_correct  (=> (! (and %lbl%+210 true) :lblpos +210) (=> (and (= (MapType0Select heap@2 this left) null) (= heap@4 heap@2)) (and anon11_Then_correct anon11_Else_correct)))))
(let ((anon10_Then_correct  (=> (! (and %lbl%+208 true) :lblpos +208) (=> (not (= (MapType0Select heap@2 this left) null)) (=> (and (= heap@3 (MapType0Store heap@2 (MapType0Select heap@2 this left) f1 (int_2_U 1))) (= heap@4 heap@3)) (and anon11_Then_correct anon11_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+206 true) :lblpos +206) (=> (and (and (not (= r this)) (not (= r (MapType0Select heap this left)))) (and (= heap@0 (MapType0Store heap r f1 (int_2_U 1))) (= heap@1 (MapType0Store heap@0 r f2 (int_2_U 2))))) (and (! (or %lbl%@435 (= (U_2_int (MapType0Select heap@1 r f1)) 1)) :lblneg @435) (=> (= (U_2_int (MapType0Select heap@1 r f1)) 1) (=> (not (= this null)) (=> (and (and (= heap@2 (MapType0Store heap@1 this f1 (int_2_U 0))) (not (= (MapType0Select heap@2 this left) this))) (and (not (= (MapType0Select heap@2 this right) this)) (not (= (MapType0Select heap@2 this right) (MapType0Select heap@2 this left))))) (and anon10_Then_correct anon10_Else_correct)))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+356 true) :lblpos +356) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(pop 1)
; Valid
