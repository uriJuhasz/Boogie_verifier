type Integer = int;
type Boolean = bool;
type $seclabel = bool;
type $labelset = [$ptr]bool;
type $ctype;
type $ptr;
type $field;
type $kind;
type $type_state;
type $status;
type $primitive;
type $struct;
type $token;
type $state;
type $pure_function;
type $label;
type $memory_t;
type $typemap_t;
type $statusmap_t;
type $record;
type $version;
type $vol_version;
type $ptrset;
type $flowdata;
type $map_t..$ptr_to..^^void.^^bool;
type $ptrclub;
type cf_event;
type var_locglob;
type $#thread_id;
type $map_t..$ptr_to..^Node.^^bool;
type $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
type $map_t..^^i4.^^i4;
const unique $kind_composite : $kind;
const unique $kind_primitive : $kind;
const unique $kind_array : $kind;
const unique $kind_thread : $kind;
const unique ^^i1 : $ctype;
const unique ^^i2 : $ctype;
const unique ^^i4 : $ctype;
const unique ^^i8 : $ctype;
const unique ^^u1 : $ctype;
const unique ^^u2 : $ctype;
const unique ^^u4 : $ctype;
const unique ^^u8 : $ctype;
const unique ^^void : $ctype;
const unique ^^bool : $ctype;
const unique ^^f4 : $ctype;
const unique ^^f8 : $ctype;
const unique ^^claim : $ctype;
const unique ^^root_emb : $ctype;
const unique ^^mathint : $ctype;
const unique ^$#thread_id_t : $ctype;
const unique ^$#ptrset : $ctype;
const unique ^$#state_t : $ctype;
const unique ^$#struct : $ctype;
const $arch_ptr_size : int;
const $me_ref : int;
const $null : $ptr;
const $struct_zero : $struct;
const $rec_zero : $record;
const $state_zero : $state;
const $arch_spec_ptr_start : int;
const unique $memory_allocator_type : $ctype;
const $memory_allocator_ref : int;
const $min.i1 : int;
const $max.i1 : int;
const $min.i2 : int;
const $max.i2 : int;
const $min.i4 : int;
const $max.i4 : int;
const $min.i8 : int;
const $max.i8 : int;
const $max.u1 : int;
const $max.u2 : int;
const $max.u4 : int;
const $max.u8 : int;
const unique $no_claim : $ptr;
const $current_frame_level : int;
const $current_pure_post_level : int;
const $seclbl.top : bool;
const $seclbl.bot : bool;
const $lblset.top : $labelset;
const $lblset.bot : $labelset;
const $zero.$map_t..$ptr_to..^^void.^^bool : $map_t..$ptr_to..^^void.^^bool;
const unique cf#classifier#default : $pure_function;
const $ptrclub.empty : [$ptr]bool;
const unique conditional_moment : cf_event;
const unique took_then_branch : cf_event;
const unique took_else_branch : cf_event;
const unique loop_register : cf_event;
const unique loop_entered : cf_event;
const unique loop_exited : cf_event;
const unique cev_local : var_locglob;
const unique cev_global : var_locglob;
const unique cev_parameter : var_locglob;
const unique cev_implicit : var_locglob;
const unique ^$#thread_id : $ctype;
const unique ^Node : $ctype;
const unique Node.$owns : $field;
const unique Node.red : $field;
const unique Node.key : $field;
const unique Node.value : $field;
const unique Node.left : $field;
const unique Node.right : $field;
const unique Node.parent : $field;
const unique ^Tree : $ctype;
const unique Tree.$owns : $field;
const unique Tree.root : $field;
const unique Tree.abs : $field;
const unique Tree.R : $field;
const unique cf#mark : $pure_function;
const unique cf#doMark : $pure_function;
const unique cf#mark2 : $pure_function;
const unique cf#lambda#9 : $pure_function;
const unique cf#lambda#8 : $pure_function;
const unique cf#lambda#7 : $pure_function;
const unique cf#lambda#6 : $pure_function;
const unique cf#lambda#5 : $pure_function;
const unique cf#lambda#4 : $pure_function;
const unique cf#lambda#3 : $pure_function;
const unique cf#lambda#2 : $pure_function;
const unique cf#lambda#1 : $pure_function;
const unique l#public : $label;
const $zero.$map_t..$ptr_to..^Node.^^bool : $map_t..$ptr_to..^Node.^^bool;
const $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
const $zero.$map_t..^^i4.^^i4 : $map_t..^^i4.^^i4;
const unique #loc.#l0 : $token;
const unique #loc.#l1 : $token;
const unique #loc.#l2 : $token;
const unique #tok$1^286.19 : $token;
const unique #loc.prestate#96 : $token;
const unique #tok$1^283.5 : $token;
const unique #loc.res_lambda#9#22 : $token;
const unique #tok$1^283.15 : $token;
const unique #tok$1^282.5 : $token;
const unique #tok$1^276.43 : $token;
const unique #loc.owns#94 : $token;
const unique #loc.staticWrapState#93 : $token;
const unique #loc.prestate#95 : $token;
const unique #tok$1^276.19 : $token;
const unique #loc.owns#91 : $token;
const unique #loc.staticWrapState#90 : $token;
const unique #loc.prestate#92 : $token;
const unique #tok$1^274.3 : $token;
const unique #tok$1^273.3 : $token;
const unique #loc.owns#88 : $token;
const unique #loc.staticWrapState#87 : $token;
const unique #loc.prestate#89 : $token;
const unique #tok$1^270.9 : $token;
const unique #tok$1^268.9 : $token;
const unique #tok$1^266.32 : $token;
const unique #loc.prestate#86 : $token;
const unique #loc.prestate#84 : $token;
const unique #loc.owns#85 : $token;
const unique #tok$1^263.32 : $token;
const unique #tok$1^262.3 : $token;
const unique #loc.owns#82 : $token;
const unique #loc.staticWrapState#81 : $token;
const unique #loc.prestate#83 : $token;
const unique #tok$1^261.44 : $token;
const unique #tok$1^261.34 : $token;
const unique #loc.prestate#80 : $token;
const unique #loc.prestate#78 : $token;
const unique #loc.owns#79 : $token;
const unique #tok$1^259.3 : $token;
const unique #tok$1^257.53 : $token;
const unique #loc.prestate#77 : $token;
const unique #loc.prestate#75 : $token;
const unique #loc.owns#76 : $token;
const unique #tok$1^256.3 : $token;
const unique #tok$1^255.53 : $token;
const unique #loc.prestate#74 : $token;
const unique #loc.prestate#72 : $token;
const unique #loc.owns#73 : $token;
const unique #tok$1^254.19 : $token;
const unique #loc.prestate#71 : $token;
const unique #tok$1^252.3 : $token;
const unique #tok$1^246.1 : $token;
const unique #tok$1^243.19 : $token;
const unique #loc.prestate#70 : $token;
const unique #tok$1^240.5 : $token;
const unique #loc.res_lambda#8#21 : $token;
const unique #tok$1^240.15 : $token;
const unique #tok$1^239.5 : $token;
const unique #tok$1^233.43 : $token;
const unique #loc.owns#68 : $token;
const unique #loc.staticWrapState#67 : $token;
const unique #loc.prestate#69 : $token;
const unique #tok$1^233.19 : $token;
const unique #loc.owns#65 : $token;
const unique #loc.staticWrapState#64 : $token;
const unique #loc.prestate#66 : $token;
const unique #tok$1^232.3 : $token;
const unique #tok$1^231.3 : $token;
const unique #loc.owns#62 : $token;
const unique #loc.staticWrapState#61 : $token;
const unique #loc.prestate#63 : $token;
const unique #tok$1^228.9 : $token;
const unique #tok$1^226.9 : $token;
const unique #tok$1^224.32 : $token;
const unique #loc.prestate#60 : $token;
const unique #loc.prestate#58 : $token;
const unique #loc.owns#59 : $token;
const unique #tok$1^221.5 : $token;
const unique #tok$1^219.3 : $token;
const unique #loc.owns#56 : $token;
const unique #loc.staticWrapState#55 : $token;
const unique #loc.prestate#57 : $token;
const unique #tok$1^218.43 : $token;
const unique #tok$1^218.34 : $token;
const unique #loc.prestate#54 : $token;
const unique #loc.prestate#52 : $token;
const unique #loc.owns#53 : $token;
const unique #tok$1^216.3 : $token;
const unique #tok$1^214.53 : $token;
const unique #loc.prestate#51 : $token;
const unique #loc.prestate#49 : $token;
const unique #loc.owns#50 : $token;
const unique #tok$1^213.3 : $token;
const unique #tok$1^212.53 : $token;
const unique #loc.prestate#48 : $token;
const unique #loc.prestate#46 : $token;
const unique #loc.owns#47 : $token;
const unique #tok$1^211.19 : $token;
const unique #loc.prestate#45 : $token;
const unique #loc.y : $token;
const unique #tok$1^209.3 : $token;
const unique #tok$1^203.1 : $token;
const unique #tok$1^200.19 : $token;
const unique #loc.prestate#44 : $token;
const unique #tok$1^199.19 : $token;
const unique #loc.owns#42 : $token;
const unique #loc.staticWrapState#41 : $token;
const unique #loc.prestate#43 : $token;
const unique #tok$1^198.3 : $token;
const unique #tok$1^195.5 : $token;
const unique #tok$1^194.27 : $token;
const unique #loc.res_lambda#7#20 : $token;
const unique #tok$1^194.37 : $token;
const unique #loc.owns#39 : $token;
const unique #loc.staticWrapState#38 : $token;
const unique #loc.prestate#40 : $token;
const unique #tok$1^187.41 : $token;
const unique #tok$1^187.36 : $token;
const unique #loc.prestate#37 : $token;
const unique #loc.prestate#35 : $token;
const unique #loc.owns#36 : $token;
const unique #tok$1^185.7 : $token;
const unique #loc.owns#33 : $token;
const unique #loc.staticWrapState#32 : $token;
const unique #loc.prestate#34 : $token;
const unique #tok$1^181.41 : $token;
const unique #tok$1^181.36 : $token;
const unique #loc.prestate#31 : $token;
const unique #loc.prestate#29 : $token;
const unique #loc.owns#30 : $token;
const unique #tok$1^179.7 : $token;
const unique #tok$1^167.3 : $token;
const unique #distTp6 : $ctype;
const unique #tok$1^168.28 : $token;
const unique #tok$1^163.25 : $token;
const unique #loc.res_lambda#6#19 : $token;
const unique #tok$1^163.41 : $token;
const unique #tok$1^159.21 : $token;
const unique #loc.prestate#28 : $token;
const unique #tok$1^158.21 : $token;
const unique #loc.owns#26 : $token;
const unique #loc.staticWrapState#25 : $token;
const unique #loc.prestate#27 : $token;
const unique #tok$1^157.5 : $token;
const unique #tok$1^153.5 : $token;
const unique #loc.res_lambda#5#18 : $token;
const unique #tok$1^153.15 : $token;
const unique #tok$1^152.5 : $token;
const unique #tok$1^151.5 : $token;
const unique #loc.res_lambda#4#17 : $token;
const unique #tok$1^151.14 : $token;
const unique #tok$1^148.3 : $token;
const unique #tok$1^146.3 : $token;
const unique #tok$1^146.13 : $token;
const unique #tok$1^146.24 : $token;
const unique #loc.assign#13 : $token;
const unique #loc.assign#12 : $token;
const unique #tok$1^144.19 : $token;
const unique #loc.prestate#24 : $token;
const unique #loc.n : $token;
const unique #tok$1^142.3 : $token;
const unique #loc.x : $token;
const unique #tok$1^134.1 : $token;
const unique #tok$1^126.13 : $token;
const unique #loc.r : $token;
const unique #tok$1^126.3 : $token;
const unique #tok$1^122.1 : $token;
const unique #tok$1^115.7 : $token;
const unique #tok$1^113.7 : $token;
const unique #tok$1^108.3 : $token;
const unique #tok$1^107.3 : $token;
const unique #tok$1^106.3 : $token;
const unique #loc.key : $token;
const unique #tok$1^101.1 : $token;
const unique #tok$1^97.19 : $token;
const unique #loc.prestate#23 : $token;
const unique #tok$2^0.0 : $token;
const unique #file^?3Cno?20file?3E : $token;
const unique #tok$1^95.5 : $token;
const unique #tok$1^94.5 : $token;
const unique #loc.res_lambda#3#16 : $token;
const unique #tok$1^94.14 : $token;
const unique #tok$1^93.5 : $token;
const unique #loc.res_lambda#1#15 : $token;
const unique #loc.res_lambda#2#14 : $token;
const unique #tok$1^93.12 : $token;
const unique #tok$1^91.3 : $token;
const unique #loc.t : $token;
const unique #tok$1^87.1 : $token;
const unique #tok$1^49.39 : $token;
const unique #tok$1^47.39 : $token;
const unique #loc.p : $token;
const unique #tok$1^46.39 : $token;
const unique #distTp5 : $ctype;
const unique #loc._this_ : $token;
const unique #tok$1^77.31 : $token;
const unique #distTp4 : $ctype;
const unique #file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c : $token;
const unique #distTp3 : $ctype;
const unique #distTp2 : $ctype;
const unique #distTp1 : $ctype;
const $old_$s : $state;
const $old_$cev_pc : int;
function $kind_of($ctype) : $kind;
function $sizeof($ctype) : int;
function $as_in_range_t($ctype) : $ctype;
function $ptr_to($ctype) : $ctype;
function $spec_ptr_to($ctype) : $ctype;
function $unptr_to($ctype) : $ctype;
function $ptr_level($ctype) : int;
function $map_t($ctype,$ctype) : $ctype;
function $map_domain($ctype) : $ctype;
function $map_range($ctype) : $ctype;
function {:weight  0} $is_primitive($ctype) : bool;
function {:inline  true} $is_primitive_ch(t:$ctype) : bool {$kind_of(t) == $kind_primitive}
function {:weight  0} $is_composite($ctype) : bool;
function {:inline  true} $is_composite_ch(t_$0:$ctype) : bool {$kind_of(t_$0) == $kind_composite}
function {:weight  0} $is_arraytype($ctype) : bool;
function {:inline  true} $is_arraytype_ch(t_$1:$ctype) : bool {$kind_of(t_$1) == $kind_array}
function {:weight  0} $is_threadtype($ctype) : bool;
function {:inline  true} $is_thread(p:$ptr) : bool {$is_threadtype($typ(p))}
function {:inline  true} $is_ptr_to_composite(p_$0:$ptr) : bool {$kind_of($typ(p_$0)) == $kind_composite}
function $field_offset($field) : int;
function $field_parent_type($field) : $ctype;
function $is_non_primitive($ctype) : bool;
function {:inline  true} $is_non_primitive_ch(t_$2:$ctype) : bool {!($kind_of(t_$2) == $kind_primitive)}
function {:inline  true} $is_non_primitive_ptr(p_$1:$ptr) : bool {$is_non_primitive($typ(p_$1))}
function $me() : $ptr;
function {:inline  true} $current_state(s:$state) : $state {s}
function $select.mem($memory_t,$ptr) : int;
function $store.mem($memory_t,$ptr,int) : $memory_t;
function $select_range.mem($memory_t,$ptr,int) : int;
function $select.tm($typemap_t,$ptr) : $type_state;
function $store.tm($typemap_t,$ptr,$type_state) : $typemap_t;
function $select.sm($statusmap_t,$ptr) : $status;
function $store.sm($statusmap_t,$ptr,$status) : $statusmap_t;
function $memory($state) : $memory_t;
function $typemap($state) : $typemap_t;
function $statusmap($state) : $statusmap_t;
function {:inline  true} $mem(s_$0:$state,p_$2:$ptr) : int {$select.mem($memory(s_$0),p_$2)}
function {:inline  true} $mem_range(s_$1:$state,p_$3:$ptr,sz:int) : int {$select_range.mem($memory(s_$1),p_$3,sz)}
function {:inline  true} $mem_eq(s1:$state,s2:$state,p_$4:$ptr) : bool {$mem(s1,p_$4) == $mem(s2,p_$4)}
function {:inline  true} $st_eq(s1_$0:$state,s2_$0:$state,p_$5:$ptr) : bool {$st(s1_$0,p_$5) == $st(s2_$0,p_$5)}
function {:inline  true} $ts_eq(s1_$1:$state,s2_$1:$state,p_$6:$ptr) : bool {$ts(s1_$1,p_$6) == $ts(s2_$1,p_$6)}
function $extent_hint($ptr,$ptr) : bool;
function $nesting_level($ctype) : int;
function $is_nested($ctype,$ctype) : bool;
function $nesting_min($ctype,$ctype) : int;
function $nesting_max($ctype,$ctype) : int;
function $is_nested_range($ctype,$ctype,int,int) : bool;
function $typ($ptr) : $ctype;
function $ref($ptr) : int;
function $ptr($ctype,int) : $ptr;
function $ghost_ref($ptr,$field) : int;
function $ghost_emb(int) : $ptr;
function $ghost_path(int) : $field;
function $physical_ref($ptr,$field) : int;
function $array_path($field,int) : $field;
function $is_base_field($field) : bool;
function $array_path_1($field) : $field;
function $array_path_2($field) : int;
function $is($ptr,$ctype) : bool;
function {:inline  true} $ptr_cast(#p:$ptr,#t:$ctype) : $ptr {$ptr(#t,$ref(#p))}
function {:inline  true} $read_ptr(S:$state,p_$7:$ptr,t_$3:$ctype) : $ptr {$ptr(t_$3,$mem(S,p_$7))}
function $dot($ptr,$field) : $ptr;
function {:inline  true} $emb(S_$0:$state,#p_$0:$ptr) : $ptr {$ts_emb($ts(S_$0,#p_$0))}
function {:inline  true} $path(S_$1:$state,#p_$1:$ptr) : $field {$ts_path($ts(S_$1,#p_$1))}
function $is_primitive_non_volatile_field($field) : bool;
function $is_primitive_volatile_field($field) : bool;
function $is_primitive_embedded_array($field,int) : bool;
function $is_primitive_embedded_volatile_array($field,int,$ctype) : bool;
function $embedded_array_size($field,$ctype) : int;
function {:inline  true} $static_field_properties(f:$field,t_$4:$ctype) : bool {$is_base_field(f) && ($field_parent_type(f) == t_$4)}
function {:inline  true} $field_properties(S_$2:$state,p_$8:$ptr,f_$0:$field,tp:$ctype,isvolatile:bool) : bool {(($typed2(S_$2,$dot(p_$8,f_$0),tp) && ($emb(S_$2,$dot(p_$8,f_$0)) == p_$8)) && ($path(S_$2,$dot(p_$8,f_$0)) == f_$0)) && ($is_volatile(S_$2,$dot(p_$8,f_$0)) <==> isvolatile)}
function $ts_typed($type_state) : bool;
function $ts_emb($type_state) : $ptr;
function $ts_path($type_state) : $field;
function $ts_is_volatile($type_state) : bool;
function $simple_emb($ptr) : $ptr;
function {:inline  true} $is_object_root(S_$3:$state,p_$9:$ptr) : bool {$emb(S_$3,p_$9) == $ptr(^^root_emb,$ref(p_$9))}
function {:inline  true} $is_volatile(S_$4:$state,p_$10:$ptr) : bool {$ts_is_volatile($ts(S_$4,p_$10))}
function {:inline  true} $is_malloc_root(S_$5:$state,p_$11:$ptr) : bool {$is_object_root(S_$5,p_$11)}
function $current_timestamp($state) : int;
function {:inline  true} $is_fresh(M1:$state,M2:$state,p_$12:$ptr) : bool {($current_timestamp(M1) < $timestamp(M2,p_$12)) && ($timestamp(M2,p_$12) <= $current_timestamp(M2))}
function $in_writes_at(int,$ptr) : bool;
function {:inline  true} $writable(S_$6:$state,begin_time:int,p_$13:$ptr) : bool {($in_writes_at(begin_time,p_$13) || ($timestamp(S_$6,p_$13) >= begin_time)) && $mutable(S_$6,p_$13)}
function {:inline  true} $top_writable(S_$7:$state,begin_time_$0:int,p_$14:$ptr) : bool {($in_writes_at(begin_time_$0,p_$14) || ($timestamp(S_$7,p_$14) >= begin_time_$0)) && $thread_owned_or_even_mutable(S_$7,p_$14)}
function {:inline  true} $vs_base(s_$2:$struct,t_$5:$ctype) : $ptr {$ptr(t_$5,$vs_base_ref(s_$2))}
function $vs_base_ref($struct) : int;
function $vs_state($struct) : $state;
function $vs_ctor($state,$ptr) : $struct;
function $rec_update($record,$field,int) : $record;
function $rec_fetch($record,$field) : int;
function $rec_update_bv($record,$field,int,int,int,int) : $record;
function $is_record_type($ctype) : bool;
function $is_record_field($ctype,$field,$ctype) : bool;
function $as_record_record_field($field) : $field;
function $record_field_int_kind($field) : $ctype;
function $rec_eq($record,$record) : bool;
function $rec_base_eq(int,int) : bool;
function $int_to_record(int) : $record;
function $record_to_int($record) : int;
function $good_state($state) : bool;
function $invok_state($state) : bool;
function $has_volatile_owns_set($ctype) : bool;
function $owns_set_field($ctype) : $field;
function $st_owner($status) : $ptr;
function $st_closed($status) : bool;
function $st_timestamp($status) : int;
function $st_ref_cnt($status) : int;
function $owner($state,$ptr) : $ptr;
function $closed($state,$ptr) : bool;
function $timestamp($state,$ptr) : int;
function $position_marker() : bool;
function {:inline  true} $st(S_$8:$state,p_$15:$ptr) : $status {$select.sm($statusmap(S_$8),p_$15)}
function {:inline  true} $ts(S_$9:$state,p_$16:$ptr) : $type_state {$select.tm($typemap(S_$9),p_$16)}
function {:weight  0} $owns($state,$ptr) : $ptrset;
function {:inline  true} $nested(S_$10:$state,p_$17:$ptr) : bool {!($kind_of($typ($owner(S_$10,p_$17))) == $kind_thread)}
function {:inline  true} $nested_in(S_$11:$state,p_$18:$ptr,owner:$ptr) : bool {($owner(S_$11,p_$18) == owner) && $closed(S_$11,p_$18)}
function {:inline  true} $wrapped(S_$12:$state,#p_$2:$ptr,#t_$0:$ctype) : bool {((($closed(S_$12,#p_$2) && ($owner(S_$12,#p_$2) == $me())) && $typed2(S_$12,#p_$2,#t_$0)) && (!($kind_of(#t_$0) == $kind_primitive))) && $is_non_primitive(#t_$0)}
function {:inline  true} $irrelevant(S_$13:$state,p_$19:$ptr) : bool {(!($owner(S_$13,p_$19) == $me())) || ($is_primitive_ch($typ(p_$19)) && $closed(S_$13,p_$19))}
function {:weight  0} $mutable($state,$ptr) : bool;
function {:inline  true} $thread_owned(S_$14:$state,p_$20:$ptr) : bool {$typed(S_$14,p_$20) && ($owner(S_$14,p_$20) == $me())}
function {:inline  true} $thread_owned_or_even_mutable(S_$15:$state,p_$21:$ptr) : bool {($typed(S_$15,p_$21) && ($owner(S_$15,p_$21) == $me())) && ($is_primitive_ch($typ(p_$21)) ==> (!$closed(S_$15,p_$21)))}
function $typed($state,$ptr) : bool;
function {:inline } $is_ghost_ptr(p_$22:$ptr) : bool {$in_range_spec_ptr($ref(p_$22))}
function $in_range_phys_ptr(int) : bool;
function $in_range_spec_ptr(int) : bool;
function {:inline  true} $typed2(S_$16:$state,#p_$3:$ptr,#t_$1:$ctype) : bool {$is(#p_$3,#t_$1) && $typed(S_$16,#p_$3)}
function {:inline  true} $typed2_phys(S_$17:$state,#p_$4:$ptr,#t_$2:$ctype) : bool {$typed2(S_$17,#p_$4,#t_$2) && ($typed2(S_$17,#p_$4,#t_$2) ==> $in_range_phys_ptr($ref(#p_$4)))}
function {:inline  true} $typed2_spec(S_$18:$state,#p_$5:$ptr,#t_$3:$ctype) : bool {$typed2(S_$18,#p_$5,#t_$3) && ($typed2(S_$18,#p_$5,#t_$3) ==> $in_range_spec_ptr($ref(#p_$5)))}
function {:inline  true} $ptr_eq(p1:$ptr,p2:$ptr) : bool {$ref(p1) == $ref(p2)}
function {:inline  true} $ptr_neq(p1_$0:$ptr,p2_$0:$ptr) : bool {!($ref(p1_$0) == $ref(p2_$0))}
function {:inline  true} $is_primitive_field_of(S_$19:$state,#f:$ptr,#o:$ptr) : bool {$is_primitive_ch($typ(#f)) && ($emb(S_$19,#f) == #o)}
function $instantiate_st($status) : bool;
function $is_domain_root($state,$ptr) : bool;
function $in_wrapped_domain($state,$ptr) : bool;
function {:inline  true} $thread_local_np(S_$20:$state,p_$23:$ptr) : bool {(!$is_primitive_ch($typ(p_$23))) && (($owner(S_$20,p_$23) == $me()) || $in_wrapped_domain(S_$20,p_$23))}
function $thread_local($state,$ptr) : bool;
function {:inline  true} $thread_local2(S_$21:$state,#p_$6:$ptr,#t_$4:$ctype) : bool {$is(#p_$6,#t_$4) && $thread_local(S_$21,#p_$6)}
function $dont_instantiate($ptr) : bool;
function $dont_instantiate_int(int) : bool;
function $dont_instantiate_state($state) : bool;
function $instantiate_int(int) : bool;
function $instantiate_bool(bool) : bool;
function $instantiate_ptr($ptr) : bool;
function $instantiate_ptrset($ptrset) : bool;
function {:inline  true} $inv(#s1:$state,#p_$7:$ptr,typ:$ctype) : bool {$inv2(#s1,#s1,#p_$7,typ)}
function {:inline  true} $inv2nt(S1:$state,S2:$state,p_$24:$ptr) : bool {$inv2(S1,S2,p_$24,$typ(p_$24))}
function $imply_inv($state,$ptr,$ctype) : bool;
function $inv2($state,$state,$ptr,$ctype) : bool;
function {:inline  true} $inv2_when_closed(#s1_$0:$state,#s2:$state,#p_$8:$ptr,typ_$0:$ctype) : bool {((!$closed(#s1_$0,#p_$8)) && (!$closed(#s2,#p_$8))) || ($inv2(#s1_$0,#s2,#p_$8,typ_$0) && $nonvolatile_spans_the_same(#s1_$0,#s2,#p_$8,typ_$0))}
function {:weight  0} $sequential($state,$state,$ptr,$ctype) : bool;
function {:weight  0} $depends($state,$state,$ptr,$ptr) : bool;
function {:weight  0} $spans_the_same($state,$state,$ptr,$ctype) : bool;
function $state_spans_the_same($state,$state,$ptr,$ctype) : bool;
function {:weight  0} $nonvolatile_spans_the_same($state,$state,$ptr,$ctype) : bool;
function $state_nonvolatile_spans_the_same($state,$state,$ptr,$ctype) : bool;
function {:inline  true} $in_extent_of(S_$22:$state,#p1:$ptr,#p2:$ptr) : bool {$set_in(#p1,$extent(S_$22,#p2))}
function {:inline  true} $in_full_extent_of(#p1_$0:$ptr,#p2_$0:$ptr) : bool {$set_in(#p1_$0,$full_extent(#p2_$0))}
function $extent_mutable($state,$ptr) : bool;
function $extent_is_fresh($state,$state,$ptr) : bool;
function $extent_zero($state,$ptr) : bool;
function {:inline  true} $forall_inv2_when_closed(#s1_$1:$state,#s2_$0:$state) : bool {(forall  #p_$9 : $ptr :: {$closed(#s1_$1,#p_$9)} {$closed(#s2_$0,#p_$9)} ( $inv2_when_closed(#s1_$1,#s2_$0,#p_$9,$typ(#p_$9)) ))}
function $function_entry($state) : bool;
function $full_stop($state) : bool;
function {:inline  true} $full_stop_ext(t_$6:$token,S_$23:$state) : bool {$good_state_ext(t_$6,S_$23) && $full_stop(S_$23)}
function $file_name_is(int,$token) : bool;
function {:inline  true} $closed_is_transitive(S_$24:$state) : bool {(forall  #p_$10 : $ptr, #q : $ptr :: {$set_in(#p_$10,$owns(S_$24,#q))} ( (($good_state(S_$24) && $set_in(#p_$10,$owns(S_$24,#q))) && $closed(S_$24,#q)) ==> ($closed(S_$24,#p_$10) && (!($ref(#p_$10) == 0))) ))}
function $call_transition($state,$state) : bool;
function $good_state_ext($token,$state) : bool;
function $local_value_is($state,$token,$token,int,$ctype) : bool;
function $local_value_is_ptr($state,$token,$token,$ptr,$ctype) : bool;
function $read_ptr_m($state,$ptr,$ctype) : $ptr;
function $type_code_is(int,$ctype) : bool;
function $function_arg_type($pure_function,int,$ctype) : bool;
function $ver_domain($version) : $ptrset;
function {:weight  0} $read_version($state,$ptr) : $version;
function {:weight  0} $domain($state,$ptr) : $ptrset;
function $in_domain($state,$ptr,$ptr) : bool;
function $in_vdomain($state,$ptr,$ptr) : bool;
function $in_domain_lab($state,$ptr,$ptr,$label) : bool;
function $in_vdomain_lab($state,$ptr,$ptr,$label) : bool;
function $inv_lab($state,$ptr,$label) : bool;
function {:inline  true} $dom_thread_local(S_$25:$state,#p_$11:$ptr) : bool {$typed(S_$25,#p_$11) && (!$is_volatile(S_$25,#p_$11))}
function $fetch_from_domain($version,$ptr) : int;
function $in_claim_domain($ptr,$ptr) : bool;
function {:weight  0} $by_claim($state,$ptr,$ptr,$ptr) : $ptr;
function $claim_version($ptr) : $version;
function {:weight  0} $read_vol_version($state,$ptr) : $vol_version;
function $fetch_from_vv($vol_version,$ptr) : int;
function {:inline  true} $fetch_vol_field(S_$26:$state,p_$25:$ptr,f_$1:$field) : int {$fetch_from_vv($read_vol_version(S_$26,p_$25),$dot(p_$25,f_$1))}
function $is_approved_by($ctype,$field,$field) : bool;
function {:inline  true} $inv_is_approved_by_ptr(S1_$0:$state,S2_$0:$state,this:$ptr,approver:$ptr,subject:$field) : bool {(($mem_eq(S1_$0,S2_$0,$dot(this,subject)) || ($ref(approver) == 0)) || ((!$is_threadtype($typ(approver))) && $inv2nt(S1_$0,S2_$0,approver))) || ($is_threadtype($typ(approver)) && (!($read_vol_version(S1_$0,this) == $read_vol_version(S2_$0,this))))}
function {:inline  true} $inv_is_approved_by(S1_$1:$state,S2_$1:$state,this_$0:$ptr,approver_$0:$field,subject_$0:$field) : bool {$inv_is_approved_by_ptr(S1_$1,S2_$1,this_$0,$int_to_ptr($mem(S1_$1,$dot(this_$0,approver_$0))),subject_$0)}
function $is_owner_approved($ctype,$field) : bool;
function {:inline  true} $inv_is_owner_approved(S1_$2:$state,S2_$2:$state,this_$1:$ptr,subject_$1:$field) : bool {$inv_is_approved_by_ptr(S1_$2,S2_$2,this_$1,$owner(S1_$2,this_$1),subject_$1)}
function $good_for_admissibility($state) : bool;
function $good_for_post_admissibility($state) : bool;
function {:inline  true} $stuttering_pre(S_$27:$state,p_$26:$ptr) : bool {((forall  #q_$0 : $ptr :: {$st(S_$27,#q_$0)} ( $closed(S_$27,#q_$0) ==> $inv(S_$27,#q_$0,$typ(#q_$0)) ))) && $good_for_admissibility(S_$27)}
function {:inline  true} $admissibility_pre(S_$28:$state,p_$27:$ptr) : bool {($closed(S_$28,p_$27) && $inv(S_$28,p_$27,$typ(p_$27))) && $stuttering_pre(S_$28,p_$27)}
function {:inline  true} $mutable_increases(s1_$2:$state,s2_$2:$state) : bool {(forall  p_$28 : $ptr :: {$st(s2_$2,p_$28)} {$ts(s2_$2,p_$28)} ( $mutable(s1_$2,p_$28) ==> $mutable(s2_$2,p_$28) ))}
function {:inline  true} $meta_eq(s1_$3:$state,s2_$3:$state) : bool {($typemap(s1_$3) == $typemap(s2_$3)) && ($statusmap(s1_$3) == $statusmap(s2_$3))}
function $is_stuttering_check() : bool;
function $is_unwrap_check() : bool;
function {:inline  true} $is_admissibility_check() : bool {(!$is_stuttering_check()) && (!$is_unwrap_check())}
function $good_for_pre_can_unwrap($state) : bool;
function $good_for_post_can_unwrap($state) : bool;
function {:inline  true} $unwrap_check_pre(S_$29:$state,p_$29:$ptr) : bool {((($wrapped(S_$29,p_$29,$typ(p_$29)) && ((!$is_claimable($typ(p_$29))) || ($ref_cnt(S_$29,p_$29) == 0))) && $inv(S_$29,p_$29,$typ(p_$29))) && ((forall  #q_$1 : $ptr :: {$st(S_$29,#q_$1)} ( $closed(S_$29,#q_$1) ==> $inv(S_$29,#q_$1,$typ(#q_$1)) )))) && $good_for_pre_can_unwrap(S_$29)}
function $update_int($state,$ptr,int) : $state;
function {:inline  true} $timestamp_is_now(S_$30:$state,p_$30:$ptr) : bool {$timestamp(S_$30,p_$30) == $current_timestamp(S_$30)}
function {:inline  true} $now_writable(S_$31:$state,p_$31:$ptr) : bool {$timestamp_is_now(S_$31,p_$31) && $mutable(S_$31,p_$31)}
function {:inline  true} $timestamp_post(M1_$0:$state,M2_$0:$state) : bool {(($current_timestamp(M1_$0) <= $current_timestamp(M2_$0)) && ((forall  p_$32 : $ptr :: {$timestamp(M2_$0,p_$32)} {:weight  0}( $timestamp(M1_$0,p_$32) <= $timestamp(M2_$0,p_$32) )))) && $call_transition(M1_$0,M2_$0)}
function {:inline  true} $timestamp_post_strict(M1_$1:$state,M2_$1:$state) : bool {(($current_timestamp(M1_$1) < $current_timestamp(M2_$1)) && ((forall  p_$33 : $ptr :: {$timestamp(M2_$1,p_$33)} {:weight  0}( $timestamp(M1_$1,p_$33) <= $timestamp(M2_$1,p_$33) )))) && $call_transition(M1_$1,M2_$1)}
function $pre_wrap($state) : bool;
function $pre_unwrap($state) : bool;
function $pre_static_wrap($state) : bool;
function $pre_static_unwrap($state) : bool;
function {:inline  true} $unwrap_post(S0:$state,S_$32:$state,#l:$ptr,#p_$12:$ptr) : bool {(((($typed(S0,#p_$12) && $wrapped(S_$32,#p_$12,$typ(#p_$12))) && $timestamp_is_now(S_$32,#p_$12)) && $is_non_primitive($typ(#p_$12))) && $set_in(#p_$12,$owns(S0,#l))) && $nested_in(S0,#p_$12,#l)}
function {:inline  true} $unwrap_post_claimable(S0_$0:$state,S_$33:$state,#l_$0:$ptr,#p_$13:$ptr) : bool {$unwrap_post(S0_$0,S_$33,#l_$0,#p_$13) && ($is_claimable($typ(#p_$13)) ==> ($ref_cnt(S0_$0,#p_$13) == $ref_cnt(S_$33,#p_$13)))}
function {:inline  true} $keeps(S_$34:$state,#l_$1:$ptr,#p_$14:$ptr) : bool {$set_in(#p_$14,$owns(S_$34,#l_$1))}
function $expect_unreachable() : bool;
function $expect_unreachable_master(int) : bool;
function $expect_unreachable_child(int) : bool;
function $taken_over($state,$ptr,$ptr) : $status;
function $take_over($state,$ptr,$ptr) : $state;
function $released($state,$ptr,$ptr) : $status;
function $release($state,$state,$ptr,$ptr) : $state;
function $post_unwrap($state,$state) : bool;
function {:inline  true} $new_ownees(S_$35:$state,o:$ptr,owns:$ptrset) : $ptrset {$set_difference(owns,$owns(S_$35,o))}
function $get_memory_allocator() : $ptr;
function $is_in_stackframe(int,$ptr) : bool;
function $program_entry_point($state) : bool;
function $program_entry_point_ch($state) : bool;
function {:inline  true} $is_global(p_$34:$ptr,t_$7:$ctype) : bool {((((forall  S_$36 : $state :: {$ts(S_$36,p_$34)} ( $good_state(S_$36) ==> ($typed(S_$36,p_$34) && $is_object_root(S_$36,p_$34)) ))) && ((forall  S_$37 : $state, f_$2 : $field :: {$ts(S_$37,$dot(p_$34,f_$2))} ( $good_state(S_$37) ==> ($typed(S_$37,p_$34) && $is_object_root(S_$37,p_$34)) )))) && ((forall  S_$38 : $state, f_$3 : $field, i : Integer, tt : $ctype :: {$ts(S_$38,$idx($dot(p_$34,f_$3),i,tt))} ( $good_state(S_$38) ==> ($typed(S_$38,p_$34) && $is_object_root(S_$38,p_$34)) )))) && ((forall  S_$39 : $state :: {$program_entry_point(S_$39)} ( $program_entry_point(S_$39) ==> ($extent_mutable(S_$39,p_$34) && ($owns(S_$39,p_$34) == $set_empty())) )))}
function {:inline  true} $is_global_array(p_$35:$ptr,T:$ctype,sz_$0:int) : bool {$is(p_$35,T) && ((forall  S_$40 : $state, i_$0 : Integer :: {$st(S_$40,$idx(p_$35,i_$0,T))} {$ts(S_$40,$idx(p_$35,i_$0,T))} ( $good_state(S_$40) ==> (((0 <= i_$0) && (i_$0 < sz_$0)) ==> (((!$is_volatile(S_$40,$idx(p_$35,i_$0,T))) && $typed(S_$40,$idx(p_$35,i_$0,T))) && ($program_entry_point_ch(S_$40) ==> $mutable(S_$40,$idx(p_$35,i_$0,T))))) )))}
function {:inline  true} $active_option(S_$41:$state,u:$ptr) : $field {$ts_active_option($ts(S_$41,u))}
function $ts_active_option($type_state) : $field;
function {:inline  true} $union_active(S_$42:$state,u_$0:$ptr,f_$4:$field) : bool {$active_option(S_$42,u_$0) == f_$4}
function $is_union_field($ctype,$field) : bool;
function {:inline  true} $union_havoced(#s1_$2:$state,#s2_$1:$state,#x:$ptr) : bool {(forall  #p_$15 : $ptr :: {$mem(#s2_$1,#p_$15)} ( ((#p_$15 == #x) || ($in_full_extent_of(#p_$15,#x) && ((!$typed(#s1_$2,#p_$15)) || (!$typed(#s2_$1,#p_$15))))) || $mem_eq(#s1_$2,#s2_$1,#p_$15) ))}
function $full_extent($ptr) : $ptrset;
function $extent($state,$ptr) : $ptrset;
function $span($ptr) : $ptrset;
function {:inline  true} $in_span_of(#p_$16:$ptr,#l_$2:$ptr) : bool {$set_in(#p_$16,$span(#l_$2))}
function $first_option_typed($state,$ptr) : bool;
function {:inline  true} $struct_extent(#p_$17:$ptr) : $ptrset {$full_extent(#p_$17)}
function {:inline  true} $in_struct_extent_of(#p_$18:$ptr,#l_$3:$ptr) : bool {$set_in(#p_$18,$struct_extent(#l_$3))}
function $volatile_span($state,$ptr) : $ptrset;
function $left_split($ptr,int) : $ptr;
function $right_split($ptr,int) : $ptr;
function $joined_array($ptr,$ptr) : $ptr;
function {:inline  true} $mutable_root(S_$43:$state,p_$36:$ptr) : bool {($extent_mutable(S_$43,p_$36) && $is_object_root(S_$43,p_$36)) && $timestamp_is_now(S_$43,p_$36)}
function $set_in($ptr,$ptrset) : bool;
function $set_empty() : $ptrset;
function $set_singleton($ptr) : $ptrset;
function $non_null_set_singleton($ptr) : $ptrset;
function $set_union($ptrset,$ptrset) : $ptrset;
function $set_difference($ptrset,$ptrset) : $ptrset;
function $set_intersection($ptrset,$ptrset) : $ptrset;
function $set_subset($ptrset,$ptrset) : bool;
function {:inline  true} $set_add_element(S_$44:$ptrset,e:$ptr) : $ptrset {$set_union(S_$44,$set_singleton(e))}
function {:inline  true} $set_remove_element(S_$45:$ptrset,e_$0:$ptr) : $ptrset {$set_difference(S_$45,$set_singleton(e_$0))}
function $set_eq($ptrset,$ptrset) : bool;
function $set_cardinality($ptrset) : int;
function $set_universe() : $ptrset;
function $set_disjoint($ptrset,$ptrset) : bool;
function $id_set_disjoint($ptr,$ptrset,$ptrset) : int;
function $set_in3($ptr,$ptrset) : bool;
function $set_in2($ptr,$ptrset) : bool;
function $in_some_owns($ptr) : bool;
function $set_in0($ptr,$ptrset) : bool;
function sk_hack(bool) : bool;
function {:inline  true} $writes_nothing(S1_$3:$state,S2_$3:$state) : bool {(((((forall  p_$37 : $ptr :: {$st(S2_$3,p_$37)} ( $nested(S2_$3,p_$37) ==> $nested(S1_$3,p_$37) ))) && ((forall  p_$38 : $ptr :: {$mem(S2_$3,p_$38)} ( $thread_local(S1_$3,p_$38) ==> ($mem_eq(S1_$3,S2_$3,p_$38) && $thread_local(S2_$3,p_$38)) )))) && ((forall  p_$39 : $ptr :: {$st(S2_$3,p_$39)} ( $thread_local(S1_$3,p_$39) ==> ($st_eq(S1_$3,S2_$3,p_$39) && $thread_local(S2_$3,p_$39)) )))) && ((forall  p_$40 : $ptr :: {$ts(S2_$3,p_$40)} ( $thread_local(S1_$3,p_$40) ==> ($ts_eq(S1_$3,S2_$3,p_$40) && $thread_local(S2_$3,p_$40)) )))) && $timestamp_post(S1_$3,S2_$3)}
function $array($ctype,int) : $ctype;
function $element_type($ctype) : $ctype;
function $array_length($ctype) : int;
function {:weight  0} $inlined_array($ptr,$ctype) : $ptr;
function $idx($ptr,int,$ctype) : $ptr;
function {:inline  true} $add.mul(x:int,y:int,z:int) : int {x + (y * z)}
function {:inline  true} $add(x_$0:int,y_$0:int) : int {x_$0 + y_$0}
function {:weight  0} $is_array_vol_or_nonvol($state,$ptr,$ctype,int,bool) : bool;
function {:weight  0} $is_array($state,$ptr,$ctype,int) : bool;
function {:inline  true} $is_thread_local_array(S_$46:$state,p_$41:$ptr,T_$0:$ctype,sz_$1:int) : bool {(forall  i_$1 : Integer :: {$st(S_$46,$idx(p_$41,i_$1,T_$0))} {$ts(S_$46,$idx(p_$41,i_$1,T_$0))} ( ((0 <= i_$1) && (i_$1 < sz_$1)) ==> $thread_local2(S_$46,$idx(p_$41,i_$1,T_$0),T_$0) ))}
function {:inline  true} $is_mutable_array(S_$47:$state,p_$42:$ptr,T_$1:$ctype,sz_$2:int) : bool {$is_array(S_$47,p_$42,T_$1,sz_$2) && ((forall  i_$2 : Integer :: {$st(S_$47,$idx(p_$42,i_$2,T_$1))} {$ts(S_$47,$idx(p_$42,i_$2,T_$1))} ( ((0 <= i_$2) && (i_$2 < sz_$2)) ==> $mutable(S_$47,$idx(p_$42,i_$2,T_$1)) )))}
function {:inline  true} $is_array_emb(S_$48:$state,p_$43:$ptr,T_$2:$ctype,sz_$3:int,emb:$ptr) : bool {$is_array_vol_or_nonvol(S_$48,p_$43,T_$2,sz_$3,false) && ((forall  i_$3 : Integer :: {$ts(S_$48,$idx(p_$43,i_$3,T_$2))} ( ((0 <= i_$3) && (i_$3 < sz_$3)) ==> ($emb(S_$48,$idx(p_$43,i_$3,T_$2)) == emb) )))}
function {:inline  true} $is_array_emb_path(S_$49:$state,p_$44:$ptr,T_$3:$ctype,sz_$4:int,emb_$0:$ptr,f_$5:$field,isvol:bool) : bool {$is_array_vol_or_nonvol(S_$49,p_$44,T_$3,sz_$4,isvol) && ((forall  i_$4 : Integer :: {$ts(S_$49,$idx(p_$44,i_$4,T_$3))} {$mem(S_$49,$idx(p_$44,i_$4,T_$3))} ( ((0 <= i_$4) && (i_$4 < sz_$4)) ==> (($emb(S_$49,$idx(p_$44,i_$4,T_$3)) == emb_$0) && ($path(S_$49,$idx(p_$44,i_$4,T_$3)) == $array_path(f_$5,i_$4))) )))}
function {:inline  true} $array_field_properties(f_$6:$field,T_$4:$ctype,sz_$5:int,union:bool,vol:bool) : bool {(forall  S_$50 : $state, p_$45 : $ptr, i_$5 : Integer :: {$ts(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))} {$st(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))} {$mem(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))} ( ((((0 <= i_$5) && (i_$5 < sz_$5)) && ((!union) || ($active_option(S_$50,p_$45) == f_$6))) && $typed2(S_$50,p_$45,$field_parent_type(f_$6))) ==> (((($is_volatile(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4)) <==> vol) && $typed(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))) && ($emb(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4)) == p_$45)) && ($path(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4)) == $array_path(f_$6,i_$5))) ))}
function {:inline  true} $no_inline_array_field_properties(f_$7:$field,T_$5:$ctype,sz_$6:int,union_$0:bool,vol_$0:bool) : bool {((forall  S_$51 : $state, p_$46 : $ptr :: {$ts(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))} {$st(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))} {$mem(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))} ( (((!union_$0) || ($active_option(S_$51,p_$46) == f_$7)) && $typed2(S_$51,p_$46,$field_parent_type(f_$7))) ==> ((($extent_hint($as_array($dot(p_$46,f_$7),T_$5,sz_$6),p_$46) && $typed(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))) && ($emb(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6)) == p_$46)) && ($path(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6)) == f_$7)) ))) && ((forall  p_$47 : $ptr, i_$6 : Integer :: {$idx($dot(p_$47,f_$7),i_$6,T_$5)} ( $instantiate_ptr($as_array($dot(p_$47,f_$7),T_$5,sz_$6)) )))}
function {:inline  true} $array_elt_emb(S_$52:$state,p_$48:$ptr,emb_$1:$ptr) : bool {(($emb(S_$52,p_$48) == emb_$1) && (!$is_volatile(S_$52,p_$48))) && $typed(S_$52,p_$48)}
function $array_members($ptr,$ctype,int) : $ptrset;
function $array_range_no_state($ptr,$ctype,int) : $ptrset;
function $array_range($state,$ptr,$ctype,int) : $ptrset;
function $non_null_array_range($ptr,$ctype,int) : $ptrset;
function $non_null_extent($state,$ptr) : $ptrset;
function {:inline  true} $as_array(p_$49:$ptr,T_$6:$ctype,sz_$7:int) : $ptr {$ptr($array(T_$6,sz_$7),$ref(p_$49))}
function {:inline  true} $array_eq(s1_$4:$state,s2_$4:$state,arr:$ptr,T_$7:$ctype,sz_$8:int) : bool {(forall  #i : Integer :: {$idx(arr,#i,T_$7)} ( ((0 <= #i) && (#i < sz_$8)) ==> $mem_eq(s1_$4,s2_$4,$idx(arr,#i,T_$7)) ))}
function $index_within($ptr,$ptr) : int;
function $simple_index($ptr,$ptr) : bool;
function {:inline  true} $in_array(q:$ptr,arr_$0:$ptr,T_$8:$ctype,sz_$9:int) : bool {$in_range(0,$index_within(q,arr_$0),sz_$9 - 1) && (q == $idx(arr_$0,$index_within(q,arr_$0),T_$8))}
function {:inline  true} $in_array_full_extent_of(q_$0:$ptr,arr_$1:$ptr,T_$9:$ctype,sz_$10:int) : bool {$in_range(0,$index_within(q_$0,arr_$1),sz_$10 - 1) && $in_full_extent_of(q_$0,$idx(arr_$1,$index_within(q_$0,arr_$1),T_$9))}
function {:inline  true} $in_array_extent_of(S_$53:$state,q_$1:$ptr,arr_$2:$ptr,T_$10:$ctype,sz_$11:int) : bool {$in_range(0,$index_within(q_$1,arr_$2),sz_$11 - 1) && $in_extent_of(S_$53,q_$1,$idx(arr_$2,$index_within(q_$1,arr_$2),T_$10))}
function {:inline  true} $in_range(min:int,val:int,max:int) : bool {(min <= val) && (val <= max)}
function {:inline  true} $bool_to_int(v:bool) : int {if v then 1 else 0}
function {:inline  true} $int_to_bool(x_$1:int) : bool {!(x_$1 == 0)}
function {:inline  true} $read_bool(S_$54:$state,p_$50:$ptr) : bool {$int_to_bool($mem(S_$54,p_$50))}
function {:weight  0} $bool_id(bool) : bool;
function {:inline  true} $in_range_i1(x_$2:int) : bool {$in_range($min.i1,x_$2,$max.i1)}
function {:inline  true} $in_range_i2(x_$3:int) : bool {$in_range($min.i2,x_$3,$max.i2)}
function {:inline  true} $in_range_i4(x_$4:int) : bool {$in_range($min.i4,x_$4,$max.i4)}
function {:inline  true} $in_range_i8(x_$5:int) : bool {$in_range($min.i8,x_$5,$max.i8)}
function {:inline  true} $in_range_u1(x_$6:int) : bool {$in_range(0,x_$6,$max.u1)}
function {:inline  true} $in_range_u2(x_$7:int) : bool {$in_range(0,x_$7,$max.u2)}
function {:inline  true} $in_range_u4(x_$8:int) : bool {$in_range(0,x_$8,$max.u4)}
function {:inline  true} $in_range_u8(x_$9:int) : bool {$in_range(0,x_$9,$max.u8)}
function {:inline  true} $in_range_ptr(p_$51:$ptr) : bool {$in_range_u8($ref(p_$51))}
function {:inline  true} $in_range_div_i1(x_$10:int,y_$1:int) : bool {(!(y_$1 == (0 - 1))) || (!(x_$10 == $min.i1))}
function {:inline  true} $in_range_div_i2(x_$11:int,y_$2:int) : bool {(!(y_$2 == (0 - 1))) || (!(x_$11 == $min.i2))}
function {:inline  true} $in_range_div_i4(x_$12:int,y_$3:int) : bool {(!(y_$3 == (0 - 1))) || (!(x_$12 == $min.i4))}
function {:inline  true} $in_range_div_i8(x_$13:int,y_$4:int) : bool {(!(y_$4 == (0 - 1))) || (!(x_$13 == $min.i8))}
function $ptr_to_u8($ptr) : int;
function $ptr_to_i8($ptr) : int;
function $ptr_to_u4($ptr) : int;
function $ptr_to_i4($ptr) : int;
function $ptr_to_u2($ptr) : int;
function $ptr_to_i2($ptr) : int;
function $ptr_to_u1($ptr) : int;
function $ptr_to_i1($ptr) : int;
function {:inline  true} $u8_to_ptr(x_$14:int) : $ptr {$ptr(^^void,x_$14)}
function {:inline  true} $i8_to_ptr(x_$15:int) : $ptr {$ptr(^^void,x_$15)}
function {:inline  true} $u4_to_ptr(x_$16:int) : $ptr {$ptr(^^void,x_$16)}
function {:inline  true} $i4_to_ptr(x_$17:int) : $ptr {$ptr(^^void,x_$17)}
function {:inline  true} $u2_to_ptr(x_$18:int) : $ptr {$ptr(^^void,x_$18)}
function {:inline  true} $i2_to_ptr(x_$19:int) : $ptr {$ptr(^^void,x_$19)}
function {:inline  true} $u1_to_ptr(x_$20:int) : $ptr {$ptr(^^void,x_$20)}
function {:inline  true} $i1_to_ptr(x_$21:int) : $ptr {$ptr(^^void,x_$21)}
function {:weight  0} $byte_ptr_subtraction($ptr,$ptr) : int;
function $_pow2(int) : int;
function $in_range_ubits(int,int) : bool;
function $unchecked_sbits(int,int) : int;
function $in_range_sbits(int,int) : bool;
function $unchecked_ubits(int,int) : int;
function $_or($ctype,int,int) : int;
function $_xor($ctype,int,int) : int;
function $_and($ctype,int,int) : int;
function $_not($ctype,int) : int;
function {:weight  0} $unchk_add($ctype,int,int) : int;
function {:weight  0} $unchk_sub($ctype,int,int) : int;
function {:weight  0} $unchk_mul($ctype,int,int) : int;
function {:inline  true} $unchk_div(t_$8:$ctype,x_$22:int,y_$5:int) : int {$unchecked(t_$8,x_$22 div y_$5)}
function {:inline  true} $unchk_mod(t_$9:$ctype,x_$23:int,y_$6:int) : int {$unchecked(t_$9,x_$23 mod y_$6)}
function {:weight  0} $_shl($ctype,int,int) : int;
function {:weight  0} $_shr(int,int) : int;
function $bv_extract_signed(int,int,int,int) : int;
function $bv_extract_unsigned(int,int,int,int) : int;
function $bv_update(int,int,int,int,int) : int;
function $unchecked($ctype,int) : int;
function $in_range_t($ctype,int) : bool;
function {:weight  0} $op_mul(int,int) : int;
function {:weight  0} $op_add($ctype,int,int) : int;
function {:weight  0} $op_sub($ctype,int,int) : int;
function {:weight  0} $op_div($ctype,int,int) : int;
function {:weight  0} $op_lt($ctype,int,int) : bool;
function {:weight  0} $op_le($ctype,int,int) : bool;
function {:weight  0} $op_gt($ctype,int,int) : bool;
function {:weight  0} $op_ge($ctype,int,int) : bool;
function $get_string_literal(int,int) : $ptr;
function $get_fnptr(int,$ctype) : $ptr;
function $get_fnptr_ref(int) : int;
function $get_fnptr_inv(int) : int;
function $is_fnptr_type($ctype) : bool;
function $is_math_type($ctype) : bool;
function $claims_obj($ptr,$ptr) : bool;
function $valid_claim($state,$ptr) : bool;
function {:inline  true} $claim_initial_assumptions(#s1_$3:$state,c:$ptr,tok:$token) : bool {($good_state_ext(tok,#s1_$3) && $closed_is_transitive(#s1_$3)) && true}
function {:inline  true} $claim_transitivity_assumptions(#s1_$4:$state,#s2_$2:$state,c_$0:$ptr,tok_$0:$token) : bool {(((((($full_stop_ext(tok_$0,#s1_$4) && $good_state_ext(tok_$0,#s2_$2)) && $closed_is_transitive(#s1_$4)) && $closed_is_transitive(#s2_$2)) && $forall_inv2_when_closed(#s1_$4,#s2_$2)) && $valid_claim(#s1_$4,c_$0)) && $closed(#s2_$2,c_$0)) && true}
function {:inline  true} $valid_claim_impl(S0_$1:$state,S1_$4:$state) : bool {(forall  r : Integer :: {$closed(S1_$4,$ptr(^^claim,r))} ( ($closed(S0_$1,$ptr(^^claim,r)) && $closed(S1_$4,$ptr(^^claim,r))) ==> $valid_claim(S1_$4,$ptr(^^claim,r)) ))}
function $claims_claim($ptr,$ptr) : bool;
function {:weight  0} $not_shared($state,$ptr) : bool;
function {:weight  0} $claimed_closed($state,$ptr) : bool;
function $claims_upgrade($ptr,$ptr) : bool;
function {:weight  0} $ref_cnt($state,$ptr) : int;
function $is_claimable($ctype) : bool;
function $account_claim($state,$ptr,$ptr) : bool;
function $claim_no($state,$ptr,int) : $ptr;
function $claim_idx($ptr,$ptr) : int;
function $frame_level($pure_function) : int;
function {:inline  true} $can_use_all_frame_axioms(s_$3:$state) : bool {(forall  f_$8 : $pure_function :: {$frame_level(f_$8)} ( $frame_level(f_$8) < $current_frame_level ))}
function {:inline  true} $can_use_frame_axiom_of(f_$9:$pure_function) : bool {$frame_level(f_$9) < $current_frame_level}
function $pure_post_level($pure_function) : int;
function {:inline  true} $can_use_all_pure_post_axioms(s_$4:$state) : bool {(forall  f_$10 : $pure_function :: {$frame_level(f_$10)} ( $pure_post_level(f_$10) < $current_frame_level ))}
function {:inline  true} $can_use_pure_post_axiom_of(f_$11:$pure_function) : bool {$pure_post_level(f_$11) < $current_pure_post_level}
function $reads_check_pre($state) : bool;
function $reads_check_post($state) : bool;
function $start_here() : bool;
function $ptrset_to_int($ptrset) : int;
function $int_to_ptrset(int) : $ptrset;
function $version_to_int($version) : int;
function $int_to_version(int) : $version;
function $vol_version_to_int($vol_version) : int;
function $int_to_vol_version(int) : $vol_version;
function $ptr_to_int($ptr) : int;
function $int_to_ptr(int) : $ptr;
function $precise_test($ptr) : bool;
function $updated_only_values($state,$state,$ptrset) : bool;
function $updated_only_domains($state,$state,$ptrset) : bool;
function $domain_updated_at($state,$state,$ptr,$ptrset) : bool;
function $add_f4($primitive,$primitive) : $primitive;
function $sub_f4($primitive,$primitive) : $primitive;
function $mul_f4($primitive,$primitive) : $primitive;
function $div_f4($primitive,$primitive) : $primitive;
function $neg_f4($primitive) : $primitive;
function $lt_f4($primitive,$primitive) : bool;
function $leq_f4($primitive,$primitive) : bool;
function $gt_f4($primitive,$primitive) : bool;
function $geq_f4($primitive,$primitive) : bool;
function $add_f8($primitive,$primitive) : $primitive;
function $sub_f8($primitive,$primitive) : $primitive;
function $mul_f8($primitive,$primitive) : $primitive;
function $div_f8($primitive,$primitive) : $primitive;
function $neg_f8($primitive) : $primitive;
function $lt_f8($primitive,$primitive) : bool;
function $leq_f8($primitive,$primitive) : bool;
function $gt_f8($primitive,$primitive) : bool;
function $geq_f8($primitive,$primitive) : bool;
function {:inline  true} $seclbl.leq(l1:bool,l2:bool) : bool {l1 ==> l2}
function {:inline  true} $seclbl.meet(l1_$0:bool,l2_$0:bool) : bool {l1_$0 && l2_$0}
function {:inline  true} $seclbl.join(l1_$1:bool,l2_$1:bool) : bool {l1_$1 || l2_$1}
function {:inline  true} $lblset.leq(l1_$2:$labelset,l2_$2:$labelset) : bool {(forall  p_$52 : $ptr :: ( $seclbl.leq(l1_$2[p_$52],l2_$2[p_$52]) ))}
function $lblset.meet($labelset,$labelset) : $labelset;
function $lblset.join($labelset,$labelset) : $labelset;
function $select.flow.label($flowdata) : $labelset;
function $store.flow.label($flowdata,$labelset) : $flowdata;
function $select.flow.meta($flowdata) : $labelset;
function $store.flow.meta($flowdata,$labelset) : $flowdata;
function $select.flow.data($memory_t,$ptr) : $flowdata;
function $store.flow.data($memory_t,$ptr,$flowdata) : $memory_t;
function $select.sec.pc($state) : $labelset;
function $select.$map_t..$ptr_to..^^void.^^bool($map_t..$ptr_to..^^void.^^bool,$ptr) : bool;
function $store.$map_t..$ptr_to..^^void.^^bool($map_t..$ptr_to..^^void.^^bool,$ptr,bool) : $map_t..$ptr_to..^^void.^^bool;
function $eq.$map_t..$ptr_to..^^void.^^bool($map_t..$ptr_to..^^void.^^bool,$map_t..$ptr_to..^^void.^^bool) : bool;
function $map_t..ptr_to..^^void.^^bool_to_int($map_t..$ptr_to..^^void.^^bool) : int;
function $int_to_map_t..ptr_to..^^void.^^bool(int) : $map_t..$ptr_to..^^void.^^bool;
function #classifier#default() : $map_t..$ptr_to..^^void.^^bool;
function is_active_ptrclub($ptrclub) : bool;
function $ptrclub.construct([$ptr]bool,$labelset) : $ptrclub;
function $ptrclub.members($ptrclub) : [$ptr]bool;
function $ptrclub.bound($ptrclub) : $labelset;
function $ptrclub.addMember($ptr,$ptrclub) : $ptrclub;
function {:inline  true} $ptrclub.isMember(p_$53:$ptr,c_$1:$ptrclub) : bool {$ptrclub.members(c_$1)[p_$53]}
function $ptrclub.compare($ptr,$ptr) : $labelset;
function #cev_init(int) : bool;
function #cev_save_position(int) : $token;
function #cev_var_intro(int,var_locglob,$token,int,$ctype) : bool;
function #cev_var_update(int,var_locglob,$token,int) : bool;
function #cev_control_flow_event(int,cf_event) : bool;
function #cev_function_call(int) : bool;
function F#mark(int) : int;
function F#doMark(int) : bool;
function F#mark2(int) : bool;
function F#lambda#9($map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.^^bool,int) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#8($map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.^^bool,int) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#7($map_t..$ptr_to..^Node.^^bool,int) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#6($map_t..$ptr_to..^Node.^^bool,int) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#5(int) : $map_t..$ptr_to..^Node.^^bool;
function F#lambda#4($map_t..^^i4.^^i4,int,int) : $map_t..^^i4.^^i4;
function F#lambda#3() : $map_t..^^i4.^^i4;
function F#lambda#2($map_t..$ptr_to..^Node.^^bool) : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
function F#lambda#1() : $map_t..$ptr_to..^Node.^^bool;
function $select.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.^^bool,int) : bool;
function $store.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.^^bool,int,bool) : $map_t..$ptr_to..^Node.^^bool;
function $eq.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.^^bool) : bool;
function $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,int) : $map_t..$ptr_to..^Node.^^bool;
function $store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,int,$map_t..$ptr_to..^Node.^^bool) : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
function $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) : bool;
function $select.$map_t..^^i4.^^i4($map_t..^^i4.^^i4,int) : int;
function $store.$map_t..^^i4.^^i4($map_t..^^i4.^^i4,int,int) : $map_t..^^i4.^^i4;
function $eq.$map_t..^^i4.^^i4($map_t..^^i4.^^i4,$map_t..^^i4.^^i4) : bool;
function $state_to_int($state) : int;
function $int_to_state(int) : $state;
function $map_t..ptr_to..^Node.^^bool_to_int($map_t..$ptr_to..^Node.^^bool) : int;
function $int_to_map_t..ptr_to..^Node.^^bool(int) : $map_t..$ptr_to..^Node.^^bool;
function $map_t..^^i4.^^i4_to_int($map_t..^^i4.^^i4) : int;
function $int_to_map_t..^^i4.^^i4(int) : $map_t..^^i4.^^i4;
function $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool) : int;
function $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool(int) : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
var $s : $state;
var $cev_pc : int;
procedure tree_insert (P#t : int,P#x : int)
{
	var prestate#44 : $state;
	var owns#42 : $ptrset;
	var staticWrapState#41 : $state;
	var prestate#43 : $state;
	var res_lambda#7#20 : $map_t..$ptr_to..^Node.^^bool;
	var owns#39 : $ptrset;
	var staticWrapState#38 : $state;
	var prestate#40 : $state;
	var prestate#37 : $state;
	var prestate#35 : $state;
	var owns#36 : $ptrset;
	var owns#33 : $ptrset;
	var staticWrapState#32 : $state;
	var prestate#34 : $state;
	var prestate#31 : $state;
	var prestate#29 : $state;
	var owns#30 : $ptrset;
	var #wrTime$1^168.28 : int;
	var loopState#1 : $state;
	var res_lambda#6#19 : $map_t..$ptr_to..^Node.^^bool;
	var prestate#28 : $state;
	var owns#26 : $ptrset;
	var staticWrapState#25 : $state;
	var prestate#27 : $state;
	var res_lambda#5#18 : $map_t..$ptr_to..^Node.^^bool;
	var res_lambda#4#17 : $map_t..^^i4.^^i4;
	var assign#13 : int;
	var assign#12 : int;
	var prestate#24 : $state;
	var L#p : int;
	var L#n : int;
	var #wrTime$1^134.1 : int;
	var prestate#24_$_0 : $state;
	var call0formal_$_#l_$_0 : $ptr;
	var $s_$_0 : $state;
	var assign#13_$_0 : int;
	var call0formal_$_p_$_0 : $ptr;
	var call1formal_$_v_$_0 : int;
	var $s_$_1 : $state;
	var assign#12_$_0 : int;
	var call0formal_$_p_$_0_$1 : $ptr;
	var call1formal_$_v_$_0_$1 : int;
	var $s_$_2 : $state;
	var call0formal_$_p_$_0_$2 : $ptr;
	var call1formal_$_v_$_0_$2 : int;
	var $s_$_3 : $state;
	var L#p_$_0 : int;
	var call0formal_$_#l2_$_0 : $map_t..^^i4.^^i4;
	var call1formal_$_#l1_$_0 : int;
	var call2formal_$_#l0_$_0 : int;
	var call3formal_$_$result_$_0 : $map_t..^^i4.^^i4;
	var call0formal_$_p_$_0_$3 : $ptr;
	var call1formal_$_v_$_0_$3 : int;
	var $s_$_4 : $state;
	var call0formal_$_#p_$_0 : $ptr;
	var call1formal_$_owns_$_0 : $ptrset;
	var $s_$_5 : $state;
	var call0formal_$_#l0_$_0 : int;
	var call1formal_$_$result_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var call0formal_$_p_$_0_$4 : $ptr;
	var call1formal_$_v_$_0_$4 : int;
	var $s_$_6 : $state;
	var call0formal_$_p_$_0_$10 : $ptr;
	var call1formal_$_v_$_0_$10 : int;
	var $s_$_7 : $state;
	var prestate#27_$_0 : $state;
	var staticWrapState#25_$_0 : $state;
	var owns#26_$_0 : $ptrset;
	var call0formal_$_#l_$_0_$7 : $ptr;
	var $s_$_8 : $state;
	var prestate#28_$_0 : $state;
	var call0formal_$_#l_$_0_$8 : $ptr;
	var $s_$_9 : $state;
	var call0formal_$_#l1_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var call1formal_$_#l0_$_0 : int;
	var call2formal_$_$result_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var call0formal_$_p_$_0_$5 : $ptr;
	var call1formal_$_v_$_0_$5 : int;
	var $s_$_10 : $state;
	var $s_$_11 : $state;
	var res_lambda#7#20_$_0 : $map_t..$ptr_to..^Node.^^bool;
	var $s_$_12 : $state;
	var L#p_$_1 : int;
	var L#n_$_0 : int;
	var L#n_$_1 : int;
	var L#n_$_2 : int;
	var owns#36_$_0 : $ptrset;
	var prestate#35_$_0 : $state;
	var prestate#37_$_0 : $state;
	var call0formal_$_#l_$_0_$3 : $ptr;
	var $s_$_13 : $state;
	var call0formal_$_p_$_0_$8 : $ptr;
	var call1formal_$_v_$_0_$8 : int;
	var $s_$_14 : $state;
	var prestate#40_$_0 : $state;
	var staticWrapState#38_$_0 : $state;
	var owns#39_$_0 : $ptrset;
	var call0formal_$_#l_$_0_$4 : $ptr;
	var $s_$_15 : $state;
	var owns#30_$_0 : $ptrset;
	var prestate#29_$_0 : $state;
	var prestate#31_$_0 : $state;
	var call0formal_$_#l_$_0_$5 : $ptr;
	var $s_$_16 : $state;
	var call0formal_$_p_$_0_$9 : $ptr;
	var call1formal_$_v_$_0_$9 : int;
	var $s_$_17 : $state;
	var prestate#34_$_0 : $state;
	var staticWrapState#32_$_0 : $state;
	var owns#33_$_0 : $ptrset;
	var call0formal_$_#l_$_0_$6 : $ptr;
	var $s_$_18 : $state;
	var $s_$_19 : $state;
	var call0formal_$_p_$_0_$6 : $ptr;
	var call1formal_$_v_$_0_$6 : int;
	var $s_$_20 : $state;
	var prestate#43_$_0 : $state;
	var staticWrapState#41_$_0 : $state;
	var owns#42_$_0 : $ptrset;
	var call0formal_$_#l_$_0_$1 : $ptr;
	var $s_$_21 : $state;
	var prestate#44_$_0 : $state;
	var call0formal_$_#l_$_0_$2 : $ptr;
	var $s_$_22 : $state;
	var $s_$_23 : $state;
	var L#n_$_3 : int;
	var call0formal_$_#l1_$_0_$1 : $map_t..$ptr_to..^Node.^^bool;
	var call1formal_$_#l0_$_0_$1 : int;
	var call2formal_$_$result_$_0_$1 : $map_t..$ptr_to..^Node.^^bool;
	var call0formal_$_p_$_0_$7 : $ptr;
	var call1formal_$_v_$_0_$7 : int;
	var $s_$_24 : $state;
	var L#p_$_2 : int;
	var $s_$_25 : $state;
	var $_$_condition : bool;
	var $_$_condition_$0 : bool;
	var $_$_condition_$1 : bool;
	var $_$_condition_$2 : bool;
	var $_$_condition_$3 : bool;
	var $_$_condition_$4 : bool;
	var $_$_condition_$5 : bool;
$start:
	assume $sizeof(^^i1) == 1;
	assume $sizeof(^^i2) == 2;
	assume $sizeof(^^i4) == 4;
	assume $sizeof(^^i8) == 8;
	assume $sizeof(^^u1) == 1;
	assume $sizeof(^^u2) == 2;
	assume $sizeof(^^u4) == 4;
	assume $sizeof(^^u8) == 8;
	assume $sizeof(^^f4) == 4;
	assume $sizeof(^^f8) == 8;
	assume $as_in_range_t(^^i1) == ^^i1;
	assume $as_in_range_t(^^i2) == ^^i2;
	assume $as_in_range_t(^^i4) == ^^i4;
	assume $as_in_range_t(^^i8) == ^^i8;
	assume $as_in_range_t(^^u1) == ^^u1;
	assume $as_in_range_t(^^u2) == ^^u2;
	assume $as_in_range_t(^^u4) == ^^u4;
	assume $as_in_range_t(^^u8) == ^^u8;
	assume $as_in_range_t(^^f4) == ^^f4;
	assume $as_in_range_t(^^f8) == ^^f8;
	assume $sizeof(^$#thread_id_t) == 1;
	assume $sizeof(^$#ptrset) == 1;
	assume $ptr_level(^^i1) == 0;
	assume $ptr_level(^^i2) == 0;
	assume $ptr_level(^^i4) == 0;
	assume $ptr_level(^^i8) == 0;
	assume $ptr_level(^^u1) == 0;
	assume $ptr_level(^^u2) == 0;
	assume $ptr_level(^^u4) == 0;
	assume $ptr_level(^^u8) == 0;
	assume $ptr_level(^^f4) == 0;
	assume $ptr_level(^^f8) == 0;
	assume $ptr_level(^^mathint) == 0;
	assume $ptr_level(^^bool) == 0;
	assume $ptr_level(^^void) == 0;
	assume $ptr_level(^^claim) == 0;
	assume $ptr_level(^^root_emb) == 0;
	assume $ptr_level(^$#ptrset) == 0;
	assume $ptr_level(^$#thread_id_t) == 0;
	assume $ptr_level(^$#state_t) == 0;
	assume $ptr_level(^$#struct) == 0;
	assume $is_composite(^^claim);
	assume $is_composite(^^root_emb);
	assume (forall  #n : $ctype :: {$ptr_to(#n)} ( $unptr_to($ptr_to(#n)) == #n ));
	assume (forall  #n_$0 : $ctype :: {$spec_ptr_to(#n_$0)} ( $unptr_to($spec_ptr_to(#n_$0)) == #n_$0 ));
	assume (forall  #n_$1 : $ctype :: {$ptr_to(#n_$1)} ( $sizeof($ptr_to(#n_$1)) == $arch_ptr_size ));
	assume (forall  #n_$2 : $ctype :: {$spec_ptr_to(#n_$2)} ( $sizeof($ptr_to(#n_$2)) == $arch_ptr_size ));
	assume (forall  #r : $ctype, #d : $ctype :: {$map_t(#r,#d)} ( $map_domain($map_t(#r,#d)) == #d ));
	assume (forall  #r_$0 : $ctype, #d_$0 : $ctype :: {$map_t(#r_$0,#d_$0)} ( $map_range($map_t(#r_$0,#d_$0)) == #r_$0 ));
	assume (forall  #n_$3 : $ctype :: {$ptr_to(#n_$3)} ( $ptr_level($ptr_to(#n_$3)) == ($ptr_level(#n_$3) + 17) ));
	assume (forall  #n_$4 : $ctype :: {$spec_ptr_to(#n_$4)} ( $ptr_level($spec_ptr_to(#n_$4)) == ($ptr_level(#n_$4) + 31) ));
	assume (forall  #r_$1 : $ctype, #d_$1 : $ctype :: {$map_t(#r_$1,#d_$1)} ( $ptr_level($map_t(#r_$1,#d_$1)) == ($ptr_level(#r_$1) + 23) ));
	assume (forall  t_$10 : $ctype :: {$is_primitive(t_$10)} {:weight  0}( $is_primitive(t_$10) <==> ($kind_of(t_$10) == $kind_primitive) ));
	assume (forall  t : $ctype :: ( $is_primitive_ch(t) == ($kind_of(t) == $kind_primitive) ));
	assume (forall  t_$11 : $ctype :: {$is_composite(t_$11)} {:weight  0}( $is_composite(t_$11) <==> ($kind_of(t_$11) == $kind_composite) ));
	assume (forall  t_$0 : $ctype :: ( $is_composite_ch(t_$0) == ($kind_of(t_$0) == $kind_composite) ));
	assume (forall  t_$12 : $ctype :: {$is_arraytype(t_$12)} {:weight  0}( $is_arraytype(t_$12) <==> ($kind_of(t_$12) == $kind_array) ));
	assume (forall  t_$1 : $ctype :: ( $is_arraytype_ch(t_$1) == ($kind_of(t_$1) == $kind_array) ));
	assume (forall  t_$13 : $ctype :: {$is_threadtype(t_$13)} {:weight  0}( $is_threadtype(t_$13) <==> ($kind_of(t_$13) == $kind_thread) ));
	assume (forall  p : $ptr :: ( $is_thread(p) == $is_threadtype($typ(p)) ));
	assume (forall  p_$0 : $ptr :: ( $is_ptr_to_composite(p_$0) == ($kind_of($typ(p_$0)) == $kind_composite) ));
	assume (forall  t_$14 : $ctype :: {$is_composite(t_$14)} {:weight  0}( $is_composite(t_$14) ==> $is_non_primitive(t_$14) ));
	assume (forall  t_$15 : $ctype :: {$is_arraytype(t_$15)} {:weight  0}( $is_arraytype(t_$15) ==> $is_non_primitive(t_$15) ));
	assume (forall  t_$16 : $ctype :: {$is_threadtype(t_$16)} {:weight  0}( $is_threadtype(t_$16) ==> $is_non_primitive(t_$16) ));
	assume (forall  t_$2 : $ctype :: ( $is_non_primitive_ch(t_$2) == (!($kind_of(t_$2) == $kind_primitive)) ));
	assume (forall  p_$1 : $ptr :: ( $is_non_primitive_ptr(p_$1) == $is_non_primitive($typ(p_$1)) ));
	assume (forall  #r_$2 : $ctype, #d_$2 : $ctype :: {$map_t(#r_$2,#d_$2)} ( $is_primitive($map_t(#r_$2,#d_$2)) ));
	assume (forall  #n_$5 : $ctype :: {$ptr_to(#n_$5)} ( $is_primitive($ptr_to(#n_$5)) ));
	assume (forall  #n_$6 : $ctype :: {$spec_ptr_to(#n_$6)} ( $is_primitive($spec_ptr_to(#n_$6)) ));
	assume (forall  #n_$7 : $ctype :: {$is_primitive(#n_$7)} ( $is_primitive(#n_$7) ==> (!$is_claimable(#n_$7)) ));
	assume (forall  #n_$8 : $ctype :: {$is_claimable(#n_$8)} ( $is_claimable(#n_$8) ==> $is_composite(#n_$8) ));
	assume $is_primitive(^^void);
	assume $is_primitive(^^bool);
	assume $is_primitive(^^mathint);
	assume $is_primitive(^$#ptrset);
	assume $is_primitive(^$#state_t);
	assume $is_threadtype(^$#thread_id_t);
	assume $is_primitive(^^i1);
	assume $is_primitive(^^i2);
	assume $is_primitive(^^i4);
	assume $is_primitive(^^i8);
	assume $is_primitive(^^u1);
	assume $is_primitive(^^u2);
	assume $is_primitive(^^u4);
	assume $is_primitive(^^u8);
	assume $is_primitive(^^f4);
	assume $is_primitive(^^f8);
	assume $in_range_spec_ptr($me_ref) && (!($me_ref == 0));
	assume $me() == $ptr(^$#thread_id_t,$me_ref);
	assume (forall  s : $state :: ( $current_state(s) == s ));
	assume (forall  M : $memory_t, p_$54 : $ptr, v_$0 : Integer :: {:weight  0}( $select.mem($store.mem(M,p_$54,v_$0),p_$54) == v_$0 ));
	assume (forall  M_$0 : $memory_t, p_$55 : $ptr, q_$2 : $ptr, v_$1 : Integer :: {:weight  0}( (p_$55 == q_$2) || ($select.mem($store.mem(M_$0,p_$55,v_$1),q_$2) == $select.mem(M_$0,q_$2)) ));
	assume (forall  M_$1 : $memory_t, p_$56 : $ptr, q_$3 : $ptr, sz_$12 : Integer, v_$2 : Integer :: {:weight  0}( ((($typ(p_$56) == $typ(q_$3)) && ($ref(q_$3) <= $ref(p_$56))) && ($ref(p_$56) < $ref($idx(q_$3,sz_$12,$typ(q_$3))))) || ($select_range.mem($store.mem(M_$1,p_$56,v_$2),q_$3,sz_$12) == $select_range.mem(M_$1,q_$3,sz_$12)) ));
	assume (forall  M_$2 : $typemap_t, p_$57 : $ptr, v_$3 : $type_state :: {:weight  0}( $select.tm($store.tm(M_$2,p_$57,v_$3),p_$57) == v_$3 ));
	assume (forall  M_$3 : $typemap_t, p_$58 : $ptr, q_$4 : $ptr, v_$4 : $type_state :: {:weight  0}( (p_$58 == q_$4) || ($select.tm($store.tm(M_$3,p_$58,v_$4),q_$4) == $select.tm(M_$3,q_$4)) ));
	assume (forall  M_$4 : $statusmap_t, p_$59 : $ptr, v_$5 : $status :: {:weight  0}( $select.sm($store.sm(M_$4,p_$59,v_$5),p_$59) == v_$5 ));
	assume (forall  M_$5 : $statusmap_t, p_$60 : $ptr, q_$5 : $ptr, v_$6 : $status :: {:weight  0}( (p_$60 == q_$5) || ($select.sm($store.sm(M_$5,p_$60,v_$6),q_$5) == $select.sm(M_$5,q_$5)) ));
	assume (forall  p_$2 : $ptr, s_$0 : $state :: ( $mem(s_$0,p_$2) == $select.mem($memory(s_$0),p_$2) ));
	assume (forall  sz : Integer, p_$3 : $ptr, s_$1 : $state :: ( $mem_range(s_$1,p_$3,sz) == $select_range.mem($memory(s_$1),p_$3,sz) ));
	assume (forall  p_$4 : $ptr, s2 : $state, s1 : $state :: ( $mem_eq(s1,s2,p_$4) == ($mem(s1,p_$4) == $mem(s2,p_$4)) ));
	assume (forall  p_$5 : $ptr, s2_$0 : $state, s1_$0 : $state :: ( $st_eq(s1_$0,s2_$0,p_$5) == ($st(s1_$0,p_$5) == $st(s2_$0,p_$5)) ));
	assume (forall  p_$6 : $ptr, s2_$1 : $state, s1_$1 : $state :: ( $ts_eq(s1_$1,s2_$1,p_$6) == ($ts(s1_$1,p_$6) == $ts(s2_$1,p_$6)) ));
	assume (forall  S1_$5 : $state, S2_$4 : $state, p_$61 : $ptr, sz_$13 : Integer :: {$call_transition(S1_$5,S2_$4),$mem_range(S2_$4,p_$61,sz_$13)} ( ((forall  i_$7 : Integer :: ( ((0 <= i_$7) && (i_$7 < sz_$13)) ==> ($mem(S1_$5,$idx(p_$61,i_$7,$typ(p_$61))) == $mem(S2_$4,$idx(p_$61,i_$7,$typ(p_$61)))) ))) ==> ($mem_range(S1_$5,p_$61,sz_$13) == $mem_range(S2_$4,p_$61,sz_$13)) ));
	assume (forall  p_$62 : $ptr, q_$6 : $ptr, r_$0 : $ptr :: {$extent_hint(p_$62,q_$6),$extent_hint(q_$6,r_$0)} ( ($extent_hint(p_$62,q_$6) && $extent_hint(q_$6,r_$0)) ==> $extent_hint(p_$62,r_$0) ));
	assume (forall  p_$63 : $ptr :: {$typ(p_$63)} ( $extent_hint(p_$63,p_$63) ));
	assume (forall  t_$17 : $ctype, s_$5 : $ctype, min_$0 : Integer, max_$0 : Integer :: {$is_nested_range(t_$17,s_$5,min_$0,max_$0)} ( $is_nested_range(t_$17,s_$5,min_$0,max_$0) <==> (($is_nested(t_$17,s_$5) && ($nesting_min(t_$17,s_$5) == min_$0)) && ($nesting_max(t_$17,s_$5) == max_$0)) ));
	assume (forall  #t_$5 : $ctype, #b : Integer :: {:weight  0}( $typ($ptr(#t_$5,#b)) == #t_$5 ));
	assume (forall  #t_$6 : $ctype, #b_$0 : Integer :: {:weight  0}( $ref($ptr(#t_$6,#b_$0)) == #b_$0 ));
	assume (forall  p_$64 : $ptr, f_$12 : $field :: {$ghost_ref(p_$64,f_$12)} {:weight  0}( ($ghost_emb($ghost_ref(p_$64,f_$12)) == p_$64) && ($ghost_path($ghost_ref(p_$64,f_$12)) == f_$12) ));
	assume (forall  p_$65 : $ptr, f_$13 : $field :: {$ghost_ref(p_$65,f_$13)} ( $in_range_spec_ptr($ghost_ref(p_$65,f_$13)) ));
	assume (forall  fld : $field, off : Integer :: {$array_path(fld,off)} {:weight  0}( ((!$is_base_field($array_path(fld,off))) && ($array_path_1($array_path(fld,off)) == fld)) && ($array_path_2($array_path(fld,off)) == off) ));
	assume $null == $ptr(^^void,0);
	assume (forall  #p_$19 : $ptr, #t_$7 : $ctype :: {:weight  0}( $is(#p_$19,#t_$7) <==> ($typ(#p_$19) == #t_$7) ));
	assume (forall  #p_$20 : $ptr, #t_$8 : $ctype :: {$is(#p_$20,#t_$8)} ( $is(#p_$20,#t_$8) ==> (#p_$20 == $ptr(#t_$8,$ref(#p_$20))) ));
	assume (forall  #t : $ctype, #p : $ptr :: ( $ptr_cast(#p,#t) == $ptr(#t,$ref(#p)) ));
	assume (forall  t_$3 : $ctype, p_$7 : $ptr, S : $state :: ( $read_ptr(S,p_$7,t_$3) == $ptr(t_$3,$mem(S,p_$7)) ));
	assume (forall  #p_$0 : $ptr, S_$0 : $state :: ( $emb(S_$0,#p_$0) == $ts_emb($ts(S_$0,#p_$0)) ));
	assume (forall  #p_$1 : $ptr, S_$1 : $state :: ( $path(S_$1,#p_$1) == $ts_path($ts(S_$1,#p_$1)) ));
	assume (forall  t_$4 : $ctype, f : $field :: ( $static_field_properties(f,t_$4) == ($is_base_field(f) && ($field_parent_type(f) == t_$4)) ));
	assume (forall  isvolatile : Boolean, tp : $ctype, f_$0 : $field, p_$8 : $ptr, S_$2 : $state :: ( $field_properties(S_$2,p_$8,f_$0,tp,isvolatile) == ((($typed2(S_$2,$dot(p_$8,f_$0),tp) && ($emb(S_$2,$dot(p_$8,f_$0)) == p_$8)) && ($path(S_$2,$dot(p_$8,f_$0)) == f_$0)) && ($is_volatile(S_$2,$dot(p_$8,f_$0)) <==> isvolatile)) ));
	assume (forall  ts : $type_state :: {$ts_emb(ts)} ( (!($kind_of($typ($ts_emb(ts))) == $kind_primitive)) && $is_non_primitive($typ($ts_emb(ts))) ));
	assume (forall  p_$66 : $ptr, f_$14 : $field :: {$simple_emb($dot(p_$66,f_$14))} ( $simple_emb($dot(p_$66,f_$14)) == p_$66 ));
	assume (forall  S_$55 : $state, p_$67 : $ptr :: {$typed(S_$55,p_$67),$ts(S_$55,$emb(S_$55,p_$67))} ( $typed(S_$55,p_$67) ==> $typed(S_$55,$emb(S_$55,p_$67)) ));
	assume (forall  p_$9 : $ptr, S_$3 : $state :: ( $is_object_root(S_$3,p_$9) == ($emb(S_$3,p_$9) == $ptr(^^root_emb,$ref(p_$9))) ));
	assume (forall  p_$10 : $ptr, S_$4 : $state :: ( $is_volatile(S_$4,p_$10) == $ts_is_volatile($ts(S_$4,p_$10)) ));
	assume (forall  S_$56 : $state, p_$68 : $ptr :: {$is_volatile(S_$56,p_$68)} ( ($good_state(S_$56) && $is_volatile(S_$56,p_$68)) ==> $is_primitive_ch($typ(p_$68)) ));
	assume (forall  p_$11 : $ptr, S_$5 : $state :: ( $is_malloc_root(S_$5,p_$11) == $is_object_root(S_$5,p_$11) ));
	assume (forall  S_$57 : $state, p_$69 : $ptr :: {$st(S_$57,p_$69)} {:weight  0}( ($timestamp(S_$57,p_$69) <= $current_timestamp(S_$57)) || (!$ts_typed($ts(S_$57,p_$69))) ));
	assume (forall  p_$12 : $ptr, M2 : $state, M1 : $state :: ( $is_fresh(M1,M2,p_$12) == (($current_timestamp(M1) < $timestamp(M2,p_$12)) && ($timestamp(M2,p_$12) <= $current_timestamp(M2))) ));
	assume (forall  p_$13 : $ptr, begin_time : Integer, S_$6 : $state :: ( $writable(S_$6,begin_time,p_$13) == (($in_writes_at(begin_time,p_$13) || ($timestamp(S_$6,p_$13) >= begin_time)) && $mutable(S_$6,p_$13)) ));
	assume (forall  p_$14 : $ptr, begin_time_$0 : Integer, S_$7 : $state :: ( $top_writable(S_$7,begin_time_$0,p_$14) == (($in_writes_at(begin_time_$0,p_$14) || ($timestamp(S_$7,p_$14) >= begin_time_$0)) && $thread_owned_or_even_mutable(S_$7,p_$14)) ));
	assume $good_state($vs_state($struct_zero));
	assume (forall  t_$5 : $ctype, s_$2 : $struct :: ( $vs_base(s_$2,t_$5) == $ptr(t_$5,$vs_base_ref(s_$2)) ));
	assume (forall  s_$6 : $struct :: ( $good_state($vs_state(s_$6)) ));
	assume (forall  S_$58 : $state, p_$70 : $ptr :: {$vs_ctor(S_$58,p_$70)} ( $good_state(S_$58) ==> (($vs_base_ref($vs_ctor(S_$58,p_$70)) == $ref(p_$70)) && ($vs_state($vs_ctor(S_$58,p_$70)) == S_$58)) ));
	assume (forall  f_$15 : $field, t_$18 : $ctype :: {$mem($vs_state($struct_zero),$dot($vs_base($struct_zero,t_$18),f_$15))} ( $mem($vs_state($struct_zero),$dot($vs_base($struct_zero,t_$18),f_$15)) == 0 ));
	assume (forall  r_$1 : $record, f_$16 : $field, val_bitsize : Integer, from : Integer, to : Integer, repl : Integer :: {$rec_update_bv(r_$1,f_$16,val_bitsize,from,to,repl)} ( $rec_update_bv(r_$1,f_$16,val_bitsize,from,to,repl) == $rec_update(r_$1,f_$16,$bv_update($rec_fetch(r_$1,f_$16),val_bitsize,from,to,repl)) ));
	assume (forall  f_$17 : $field :: ( $rec_fetch($rec_zero,f_$17) == 0 ));
	assume (forall  r_$2 : $record, f_$18 : $field, v_$7 : Integer :: {$rec_fetch($rec_update(r_$2,f_$18,v_$7),f_$18)} ( $rec_fetch($rec_update(r_$2,f_$18,v_$7),f_$18) == $unchecked($record_field_int_kind(f_$18),v_$7) ));
	assume (forall  r_$3 : $record, f_$19 : $field :: {$rec_fetch(r_$3,f_$19)} ( $in_range_t($record_field_int_kind(f_$19),$rec_fetch(r_$3,f_$19)) ));
	assume (forall  r_$4 : $record, f1 : $field, f2 : $field, v_$8 : Integer :: {$rec_fetch($rec_update(r_$4,f1,v_$8),f2)} ( ($rec_fetch($rec_update(r_$4,f1,v_$8),f2) == $rec_fetch(r_$4,f2)) || (f1 == f2) ));
	assume (forall  t_$19 : $ctype :: {$is_record_type(t_$19)} ( $is_record_type(t_$19) ==> $is_primitive(t_$19) ));
	assume (forall  p_$71 : $ctype, f_$20 : $field, ft : $ctype :: {$is_record_field(p_$71,f_$20,ft),$is_record_type(ft)} ( ($is_record_field(p_$71,f_$20,ft) && $is_record_type(ft)) ==> ($as_record_record_field(f_$20) == f_$20) ));
	assume (forall  r1 : $record, r2 : $record :: {$rec_eq(r1,r2)} ( $rec_eq(r1,r2) <==> (r1 == r2) ));
	assume (forall  x_$24 : Integer, y_$7 : Integer :: {$rec_base_eq(x_$24,y_$7)} ( $rec_base_eq(x_$24,y_$7) <==> (x_$24 == y_$7) ));
	assume (forall  r_$5 : $record :: ( $int_to_record($record_to_int(r_$5)) == r_$5 ));
	assume (forall  r1_$0 : $record, r2_$0 : $record :: {$rec_eq(r1_$0,r2_$0)} ( ((forall  f_$21 : $field :: ( $rec_base_eq($rec_fetch(r1_$0,f_$21),$rec_fetch(r2_$0,f_$21)) ))) ==> $rec_eq(r1_$0,r2_$0) ));
	assume (forall  r1_$1 : $record, r2_$1 : $record, f_$22 : $field :: {$rec_base_eq($rec_fetch(r1_$1,f_$22),$rec_fetch(r2_$1,$as_record_record_field(f_$22)))} ( $rec_eq($int_to_record($rec_fetch(r1_$1,f_$22)),$int_to_record($rec_fetch(r2_$1,f_$22))) ==> $rec_base_eq($rec_fetch(r1_$1,f_$22),$rec_fetch(r2_$1,f_$22)) ));
	assume $has_volatile_owns_set(^^claim);
	assume (forall  #p_$21 : $ptr, t_$20 : $ctype :: {$dot(#p_$21,$owns_set_field(t_$20))} ( $dot(#p_$21,$owns_set_field(t_$20)) == $ptr(^$#ptrset,$ghost_ref(#p_$21,$owns_set_field(t_$20))) ));
	assume (forall  S_$59 : $state, p_$72 : $ptr :: {$is_primitive($typ(p_$72)),$owner(S_$59,p_$72)} {:weight  0}( $is_primitive($typ(p_$72)) ==> ($owner(S_$59,p_$72) == $owner(S_$59,$emb(S_$59,p_$72))) ));
	assume (forall  S_$60 : $state, p_$73 : $ptr :: {$is_non_primitive($typ(p_$73)),$owner(S_$60,p_$73)} {:weight  0}( $is_non_primitive($typ(p_$73)) ==> ($owner(S_$60,p_$73) == $st_owner($st(S_$60,p_$73))) ));
	assume (forall  S_$61 : $state, p_$74 : $ptr :: {$is_primitive($typ(p_$74)),$closed(S_$61,p_$74)} {:weight  0}( $is_primitive($typ(p_$74)) ==> ($closed(S_$61,p_$74) <==> $st_closed($st(S_$61,$emb(S_$61,p_$74)))) ));
	assume (forall  S_$62 : $state, p_$75 : $ptr :: {$is_non_primitive($typ(p_$75)),$closed(S_$62,p_$75)} {:weight  0}( $is_non_primitive($typ(p_$75)) ==> ($closed(S_$62,p_$75) <==> $st_closed($st(S_$62,p_$75))) ));
	assume (forall  S_$63 : $state, p_$76 : $ptr :: {$is_primitive($typ(p_$76)),$timestamp(S_$63,p_$76)} {:weight  0}( $is_primitive($typ(p_$76)) ==> ($timestamp(S_$63,p_$76) == $st_timestamp($st(S_$63,$emb(S_$63,p_$76)))) ));
	assume (forall  S_$64 : $state, p_$77 : $ptr :: {$is_non_primitive($typ(p_$77)),$timestamp(S_$64,p_$77)} {:weight  0}( $is_non_primitive($typ(p_$77)) ==> ($timestamp(S_$64,p_$77) == $st_timestamp($st(S_$64,p_$77))) ));
	assume $position_marker();
	assume (forall  s_$7 : $status :: {$st_owner(s_$7)} ( (!($kind_of($typ($st_owner(s_$7))) == $kind_primitive)) && $is_non_primitive($typ($st_owner(s_$7))) ));
	assume (forall  p_$15 : $ptr, S_$8 : $state :: ( $st(S_$8,p_$15) == $select.sm($statusmap(S_$8),p_$15) ));
	assume (forall  p_$16 : $ptr, S_$9 : $state :: ( $ts(S_$9,p_$16) == $select.tm($typemap(S_$9),p_$16) ));
	assume (forall  S_$65 : $state, #p_$22 : $ptr :: {$owns(S_$65,#p_$22)} {:weight  0}( $owns(S_$65,#p_$22) == $int_to_ptrset($mem(S_$65,$dot(#p_$22,$owns_set_field($typ(#p_$22))))) ));
	assume (forall  p_$17 : $ptr, S_$10 : $state :: ( $nested(S_$10,p_$17) == (!($kind_of($typ($owner(S_$10,p_$17))) == $kind_thread)) ));
	assume (forall  owner : $ptr, p_$18 : $ptr, S_$11 : $state :: ( $nested_in(S_$11,p_$18,owner) == (($owner(S_$11,p_$18) == owner) && $closed(S_$11,p_$18)) ));
	assume (forall  #t_$0 : $ctype, #p_$2 : $ptr, S_$12 : $state :: ( $wrapped(S_$12,#p_$2,#t_$0) == (((($closed(S_$12,#p_$2) && ($owner(S_$12,#p_$2) == $me())) && $typed2(S_$12,#p_$2,#t_$0)) && (!($kind_of(#t_$0) == $kind_primitive))) && $is_non_primitive(#t_$0)) ));
	assume (forall  p_$19 : $ptr, S_$13 : $state :: ( $irrelevant(S_$13,p_$19) == ((!($owner(S_$13,p_$19) == $me())) || ($is_primitive_ch($typ(p_$19)) && $closed(S_$13,p_$19))) ));
	assume (forall  S_$66 : $state, p_$78 : $ptr :: {$mutable(S_$66,p_$78)} {:weight  0}( $mutable(S_$66,p_$78) <==> (($typed(S_$66,p_$78) && ($owner(S_$66,p_$78) == $me())) && (!$closed(S_$66,p_$78))) ));
	assume (forall  p_$20 : $ptr, S_$14 : $state :: ( $thread_owned(S_$14,p_$20) == ($typed(S_$14,p_$20) && ($owner(S_$14,p_$20) == $me())) ));
	assume (forall  p_$21 : $ptr, S_$15 : $state :: ( $thread_owned_or_even_mutable(S_$15,p_$21) == (($typed(S_$15,p_$21) && ($owner(S_$15,p_$21) == $me())) && ($is_primitive_ch($typ(p_$21)) ==> (!$closed(S_$15,p_$21)))) ));
	assume (forall  S_$67 : $state, #p_$23 : $ptr :: {$typed(S_$67,#p_$23)} {:weight  0}( $good_state(S_$67) ==> ($typed(S_$67,#p_$23) <==> $ts_typed($ts(S_$67,#p_$23))) ));
	assume (forall  S_$68 : $state, #p_$24 : $ptr :: {$typed(S_$68,#p_$24)} ( ($good_state(S_$68) && $typed(S_$68,#p_$24)) ==> ($ref(#p_$24) > 0) ));
	assume (forall  p_$22 : $ptr :: ( $is_ghost_ptr(p_$22) == $in_range_spec_ptr($ref(p_$22)) ));
	assume (forall  #r_$3 : Integer :: {$in_range_phys_ptr(#r_$3)} ( $in_range_phys_ptr(#r_$3) <==> $in_range(0,#r_$3,$arch_spec_ptr_start) ));
	assume (forall  #r_$4 : Integer :: {$in_range_spec_ptr(#r_$4)} ( $in_range_spec_ptr(#r_$4) <==> ((0 == #r_$4) || (#r_$4 > $arch_spec_ptr_start)) ));
	assume (forall  #t_$1 : $ctype, #p_$3 : $ptr, S_$16 : $state :: ( $typed2(S_$16,#p_$3,#t_$1) == ($is(#p_$3,#t_$1) && $typed(S_$16,#p_$3)) ));
	assume (forall  S_$69 : $state, #r_$5 : Integer, #t_$9 : $ctype :: {$typed(S_$69,$ptr(#t_$9,#r_$5))} ( ($typed(S_$69,$ptr(#t_$9,#r_$5)) && $in_range_phys_ptr(#r_$5)) ==> $in_range_phys_ptr((#r_$5 + $sizeof(#t_$9)) - 1) ));
	assume (forall  #t_$2 : $ctype, #p_$4 : $ptr, S_$17 : $state :: ( $typed2_phys(S_$17,#p_$4,#t_$2) == ($typed2(S_$17,#p_$4,#t_$2) && ($typed2(S_$17,#p_$4,#t_$2) ==> $in_range_phys_ptr($ref(#p_$4)))) ));
	assume (forall  #t_$3 : $ctype, #p_$5 : $ptr, S_$18 : $state :: ( $typed2_spec(S_$18,#p_$5,#t_$3) == ($typed2(S_$18,#p_$5,#t_$3) && ($typed2(S_$18,#p_$5,#t_$3) ==> $in_range_spec_ptr($ref(#p_$5)))) ));
	assume (forall  p2 : $ptr, p1 : $ptr :: ( $ptr_eq(p1,p2) == ($ref(p1) == $ref(p2)) ));
	assume (forall  p2_$0 : $ptr, p1_$0 : $ptr :: ( $ptr_neq(p1_$0,p2_$0) == (!($ref(p1_$0) == $ref(p2_$0))) ));
	assume (forall  #o : $ptr, #f : $ptr, S_$19 : $state :: ( $is_primitive_field_of(S_$19,#f,#o) == ($is_primitive_ch($typ(#f)) && ($emb(S_$19,#f) == #o)) ));
	assume (forall  S1_$6 : $state, S2_$5 : $state, p_$79 : $ptr :: {$st(S2_$5,p_$79),$call_transition(S1_$6,S2_$5)} ( $call_transition(S1_$6,S2_$5) ==> $instantiate_st($st(S1_$6,p_$79)) ));
	assume (forall  S1_$7 : $state, S2_$6 : $state, p_$80 : $ptr :: {$mem(S2_$6,p_$80),$call_transition(S1_$7,S2_$6)} ( $call_transition(S1_$7,S2_$6) ==> $instantiate_int($mem(S1_$7,p_$80)) ));
	assume (forall  S_$70 : $state, p_$81 : $ptr :: {$is_domain_root(S_$70,p_$81)} ( $is_domain_root(S_$70,p_$81) <==> true ));
	assume (forall  S_$71 : $state, p_$82 : $ptr :: {$in_wrapped_domain(S_$71,p_$82)} ( $in_wrapped_domain(S_$71,p_$82) <==> ((exists  q_$7 : $ptr :: {$set_in2(p_$82,$ver_domain($read_version(S_$71,q_$7)))} ( ($set_in(p_$82,$ver_domain($read_version(S_$71,q_$7))) && $wrapped(S_$71,q_$7,$typ(q_$7))) && $is_domain_root(S_$71,q_$7) ))) ));
	assume (forall  p_$23 : $ptr, S_$20 : $state :: ( $thread_local_np(S_$20,p_$23) == ((!$is_primitive_ch($typ(p_$23))) && (($owner(S_$20,p_$23) == $me()) || $in_wrapped_domain(S_$20,p_$23))) ));
	assume (forall  S_$72 : $state, p_$83 : $ptr :: {$thread_local(S_$72,p_$83)} ( $thread_local(S_$72,p_$83) <==> ($typed(S_$72,p_$83) && ((($is_primitive_ch($typ(p_$83)) && ((!$is_volatile(S_$72,p_$83)) || (!$closed(S_$72,$emb(S_$72,p_$83))))) && $thread_local_np(S_$72,$emb(S_$72,p_$83))) || $thread_local_np(S_$72,p_$83))) ));
	assume (forall  #t_$4 : $ctype, #p_$6 : $ptr, S_$21 : $state :: ( $thread_local2(S_$21,#p_$6,#t_$4) == ($is(#p_$6,#t_$4) && $thread_local(S_$21,#p_$6)) ));
	assume (forall  typ : $ctype, #p_$7 : $ptr, #s1 : $state :: ( $inv(#s1,#p_$7,typ) == $inv2(#s1,#s1,#p_$7,typ) ));
	assume (forall  p_$24 : $ptr, S2 : $state, S1 : $state :: ( $inv2nt(S1,S2,p_$24) == $inv2(S1,S2,p_$24,$typ(p_$24)) ));
	assume (forall  #s1_$5 : $state, #p_$25 : $ptr, typ_$1 : $ctype :: {$inv(#s1_$5,#p_$25,typ_$1)} ( $imply_inv(#s1_$5,#p_$25,typ_$1) ==> $inv(#s1_$5,#p_$25,typ_$1) ));
	assume (forall  typ_$0 : $ctype, #p_$8 : $ptr, #s2 : $state, #s1_$0 : $state :: ( $inv2_when_closed(#s1_$0,#s2,#p_$8,typ_$0) == (((!$closed(#s1_$0,#p_$8)) && (!$closed(#s2,#p_$8))) || ($inv2(#s1_$0,#s2,#p_$8,typ_$0) && $nonvolatile_spans_the_same(#s1_$0,#s2,#p_$8,typ_$0))) ));
	assume (forall  #s1_$6 : $state, #s2_$3 : $state, #p_$26 : $ptr, #t_$10 : $ctype :: {$sequential(#s1_$6,#s2_$3,#p_$26,#t_$10)} {:weight  0}( $sequential(#s1_$6,#s2_$3,#p_$26,#t_$10) <==> (($closed(#s1_$6,#p_$26) && $closed(#s2_$3,#p_$26)) ==> $spans_the_same(#s1_$6,#s2_$3,#p_$26,#t_$10)) ));
	assume (forall  #s1_$7 : $state, #s2_$4 : $state, #dependant : $ptr, #this : $ptr :: {$depends(#s1_$7,#s2_$4,#dependant,#this)} {:weight  0}( $depends(#s1_$7,#s2_$4,#dependant,#this) <==> (($spans_the_same(#s1_$7,#s2_$4,#this,$typ(#this)) || $inv2_when_closed(#s1_$7,#s2_$4,#dependant,$typ(#dependant))) || $is_threadtype($typ(#dependant))) ));
	assume (forall  #s1_$8 : $state, #s2_$5 : $state, #p_$27 : $ptr, #t_$11 : $ctype :: {$spans_the_same(#s1_$8,#s2_$5,#p_$27,#t_$11)} {:weight  0}( $spans_the_same(#s1_$8,#s2_$5,#p_$27,#t_$11) <==> (((($read_version(#s1_$8,#p_$27) == $read_version(#s2_$5,#p_$27)) && ($owns(#s1_$8,#p_$27) == $owns(#s2_$5,#p_$27))) && ($ts(#s1_$8,#p_$27) == $ts(#s2_$5,#p_$27))) && $state_spans_the_same(#s1_$8,#s2_$5,#p_$27,#t_$11)) ));
	assume (forall  #s1_$9 : $state, #s2_$6 : $state, #p_$28 : $ptr, #t_$12 : $ctype :: {$nonvolatile_spans_the_same(#s1_$9,#s2_$6,#p_$28,#t_$12)} {:weight  0}( $nonvolatile_spans_the_same(#s1_$9,#s2_$6,#p_$28,#t_$12) <==> ((($read_version(#s1_$9,#p_$28) == $read_version(#s2_$6,#p_$28)) && ($ts(#s1_$9,#p_$28) == $ts(#s2_$6,#p_$28))) && $state_nonvolatile_spans_the_same(#s1_$9,#s2_$6,#p_$28,#t_$12)) ));
	assume (forall  #p2 : $ptr, #p1 : $ptr, S_$22 : $state :: ( $in_extent_of(S_$22,#p1,#p2) == $set_in(#p1,$extent(S_$22,#p2)) ));
	assume (forall  #p2_$0 : $ptr, #p1_$0 : $ptr :: ( $in_full_extent_of(#p1_$0,#p2_$0) == $set_in(#p1_$0,$full_extent(#p2_$0)) ));
	assume (forall  T_$11 : $ctype :: {$is_primitive(T_$11)} ( $is_primitive(T_$11) ==> (((forall  r_$6 : Integer, p_$84 : $ptr :: {$in_full_extent_of(p_$84,$ptr(T_$11,r_$6))} ( $in_full_extent_of(p_$84,$ptr(T_$11,r_$6)) <==> (p_$84 == $ptr(T_$11,r_$6)) ))) && ((forall  r_$7 : Integer, S_$73 : $state :: {$extent_mutable(S_$73,$ptr(T_$11,r_$7))} ( $extent_mutable(S_$73,$ptr(T_$11,r_$7)) <==> $mutable(S_$73,$ptr(T_$11,r_$7)) )))) ));
	assume (forall  T_$12 : $ctype :: {$is_primitive(T_$12)} ( $is_primitive(T_$12) ==> ((forall  S_$74 : $state, r_$8 : Integer, p_$85 : $ptr :: {$in_extent_of(S_$74,p_$85,$ptr(T_$12,r_$8))} ( $in_extent_of(S_$74,p_$85,$ptr(T_$12,r_$8)) <==> (p_$85 == $ptr(T_$12,r_$8)) ))) ));
	assume (forall  S_$75 : $state, T_$13 : $ctype, sz_$14 : Integer, r_$9 : Integer :: {$extent_mutable(S_$75,$ptr($array(T_$13,sz_$14),r_$9))} ( $extent_mutable(S_$75,$ptr($array(T_$13,sz_$14),r_$9)) <==> ($mutable(S_$75,$ptr($array(T_$13,sz_$14),r_$9)) && ((forall  i_$8 : Integer :: {$extent_mutable(S_$75,$idx($ptr(T_$13,r_$9),i_$8,T_$13))} ( ((0 <= i_$8) && (i_$8 < sz_$14)) ==> $extent_mutable(S_$75,$idx($ptr(T_$13,r_$9),i_$8,T_$13)) )))) ));
	assume (forall  T_$14 : $ctype :: {$is_primitive(T_$14)} ( $is_primitive(T_$14) ==> ((forall  S_$76 : $state, r_$10 : Integer :: {$extent_zero(S_$76,$ptr(T_$14,r_$10))} ( $extent_zero(S_$76,$ptr(T_$14,r_$10)) <==> ($mem(S_$76,$ptr(T_$14,r_$10)) == 0) ))) ));
	assume (forall  S_$77 : $state, T_$15 : $ctype, sz_$15 : Integer, r_$11 : Integer :: {$extent_zero(S_$77,$ptr($array(T_$15,sz_$15),r_$11))} ( $extent_zero(S_$77,$ptr($array(T_$15,sz_$15),r_$11)) <==> ((forall  i_$9 : Integer :: {$idx($ptr(T_$15,r_$11),i_$9,T_$15)} ( ((0 <= i_$9) && (i_$9 < sz_$15)) ==> $extent_zero(S_$77,$idx($ptr(T_$15,r_$11),i_$9,T_$15)) ))) ));
	assume (forall  #s2_$0 : $state, #s1_$1 : $state :: ( $forall_inv2_when_closed(#s1_$1,#s2_$0) == ((forall  #p_$9 : $ptr :: {$closed(#s1_$1,#p_$9)} {$closed(#s2_$0,#p_$9)} ( $inv2_when_closed(#s1_$1,#s2_$0,#p_$9,$typ(#p_$9)) ))) ));
	assume (forall  S_$23 : $state, t_$6 : $token :: ( $full_stop_ext(t_$6,S_$23) == ($good_state_ext(t_$6,S_$23) && $full_stop(S_$23)) ));
	assume (forall  S_$78 : $state :: {$function_entry(S_$78)} ( $function_entry(S_$78) ==> ($full_stop(S_$78) && ($current_timestamp(S_$78) >= 0)) ));
	assume (forall  S_$79 : $state :: {$full_stop(S_$79)} ( $full_stop(S_$79) ==> ($good_state(S_$79) && $invok_state(S_$79)) ));
	assume (forall  S_$80 : $state :: {$invok_state(S_$80)} ( $invok_state(S_$80) ==> $good_state(S_$80) ));
	assume (forall  S_$24 : $state :: ( $closed_is_transitive(S_$24) == ((forall  #p_$10 : $ptr, #q : $ptr :: {$set_in(#p_$10,$owns(S_$24,#q))} ( (($good_state(S_$24) && $set_in(#p_$10,$owns(S_$24,#q))) && $closed(S_$24,#q)) ==> ($closed(S_$24,#p_$10) && (!($ref(#p_$10) == 0))) ))) ));
	assume (forall  id : $token, S_$81 : $state :: {$good_state_ext(id,S_$81)} ( $good_state_ext(id,S_$81) ==> $good_state(S_$81) ));
	assume (forall  S_$82 : $state, r_$12 : Integer, t_$21 : $ctype :: {$ptr(t_$21,$mem(S_$82,$ptr($ptr_to(t_$21),r_$12)))} ( $ptr(t_$21,$mem(S_$82,$ptr($ptr_to(t_$21),r_$12))) == $read_ptr_m(S_$82,$ptr($ptr_to(t_$21),r_$12),t_$21) ));
	assume (forall  S_$83 : $state, r_$13 : Integer, t_$22 : $ctype :: {$ptr(t_$22,$mem(S_$83,$ptr($spec_ptr_to(t_$22),r_$13)))} ( $ptr(t_$22,$mem(S_$83,$ptr($spec_ptr_to(t_$22),r_$13))) == $read_ptr_m(S_$83,$ptr($spec_ptr_to(t_$22),r_$13),t_$22) ));
	assume (forall  S_$84 : $state, p_$86 : $ptr :: {$read_version(S_$84,p_$86)} {:weight  0}( $read_version(S_$84,p_$86) == $int_to_version($mem(S_$84,p_$86)) ));
	assume (forall  S_$85 : $state, p_$87 : $ptr :: {$domain(S_$85,p_$87)} {:weight  0}( $domain(S_$85,p_$87) == $ver_domain($read_version(S_$85,p_$87)) ));
	assume (forall  S_$86 : $state, p_$88 : $ptr, q_$8 : $ptr, l : $label :: {$in_domain_lab(S_$86,p_$88,q_$8,l)} {:weight  0}( $in_domain_lab(S_$86,p_$88,q_$8,l) ==> $inv_lab(S_$86,p_$88,l) ));
	assume (forall  S_$87 : $state, p_$89 : $ptr, q_$9 : $ptr, l_$0 : $label :: {$in_domain_lab(S_$87,p_$89,q_$9,l_$0)} {:weight  0}( $in_domain_lab(S_$87,p_$89,q_$9,l_$0) <==> $in_domain(S_$87,p_$89,q_$9) ));
	assume (forall  S_$88 : $state, p_$90 : $ptr, q_$10 : $ptr, l_$1 : $label :: {$in_vdomain_lab(S_$88,p_$90,q_$10,l_$1)} {:weight  0}( $in_vdomain_lab(S_$88,p_$90,q_$10,l_$1) ==> $inv_lab(S_$88,p_$90,l_$1) ));
	assume (forall  S_$89 : $state, p_$91 : $ptr, q_$11 : $ptr, l_$2 : $label :: {$in_vdomain_lab(S_$89,p_$91,q_$11,l_$2)} {:weight  0}( $in_vdomain_lab(S_$89,p_$91,q_$11,l_$2) <==> $in_vdomain(S_$89,p_$91,q_$11) ));
	assume (forall  #p_$11 : $ptr, S_$25 : $state :: ( $dom_thread_local(S_$25,#p_$11) == ($typed(S_$25,#p_$11) && (!$is_volatile(S_$25,#p_$11))) ));
	assume (forall  S_$90 : $state, p_$92 : $ptr, q_$12 : $ptr :: {$in_domain(S_$90,p_$92,q_$12)} {:weight  0}( $in_domain(S_$90,p_$92,q_$12) ==> (($set_in(p_$92,$domain(S_$90,q_$12)) && $closed(S_$90,p_$92)) && ((forall  r_$14 : $ptr :: {$set_in(r_$14,$owns(S_$90,p_$92))} ( ((!$has_volatile_owns_set($typ(p_$92))) && $set_in(r_$14,$owns(S_$90,p_$92))) ==> $set_in2(r_$14,$ver_domain($read_version(S_$90,q_$12))) )))) ));
	assume (forall  S_$91 : $state, p_$93 : $ptr :: {$in_domain(S_$91,p_$93,p_$93)} ( ($full_stop(S_$91) && $wrapped(S_$91,p_$93,$typ(p_$93))) ==> $in_domain(S_$91,p_$93,p_$93) ));
	assume (forall  S_$92 : $state, p_$94 : $ptr, q_$13 : $ptr :: {$in_domain(S_$92,q_$13,p_$94)} {:weight  0}( ($full_stop(S_$92) && $set_in(q_$13,$domain(S_$92,p_$94))) ==> $in_domain(S_$92,q_$13,p_$94) ));
	assume (forall  S_$93 : $state, p_$95 : $ptr, q_$14 : $ptr, r_$15 : $ptr :: {$set_in(q_$14,$domain(S_$93,p_$95)),$in_domain(S_$93,r_$15,p_$95)} {:weight  0}( (((!$has_volatile_owns_set($typ(q_$14))) && $set_in(q_$14,$domain(S_$93,p_$95))) && $set_in0(r_$15,$owns(S_$93,q_$14))) ==> ($in_domain(S_$93,r_$15,p_$95) && $set_in0(r_$15,$owns(S_$93,q_$14))) ));
	assume (forall  S_$94 : $state, p_$96 : $ptr, q_$15 : $ptr, r_$16 : $ptr :: {$set_in(q_$15,$domain(S_$94,p_$96)),$in_vdomain(S_$94,r_$16,p_$96)} {:weight  0}( (($has_volatile_owns_set($typ(q_$15)) && $set_in(q_$15,$domain(S_$94,p_$96))) && ((forall  S1_$8 : $state :: ( (($inv(S1_$8,q_$15,$typ(q_$15)) && ($read_version(S1_$8,p_$96) == $read_version(S_$94,p_$96))) && ($domain(S1_$8,p_$96) == $domain(S_$94,p_$96))) ==> $set_in0(r_$16,$owns(S1_$8,q_$15)) )))) ==> ($in_vdomain(S_$94,r_$16,p_$96) && $set_in0(r_$16,$owns(S_$94,q_$15))) ));
	assume (forall  S_$95 : $state, p_$97 : $ptr, q_$16 : $ptr :: {$in_vdomain(S_$95,p_$97,q_$16)} {:weight  0}( $in_vdomain(S_$95,p_$97,q_$16) ==> $in_domain(S_$95,p_$97,q_$16) ));
	assume (forall  S_$96 : $state, p_$98 : $ptr, d : $ptr, f_$23 : $field :: {$set_in(p_$98,$domain(S_$96,d)),$is_primitive_non_volatile_field(f_$23),$mem(S_$96,$dot(p_$98,f_$23))} ( ($set_in(p_$98,$domain(S_$96,d)) && $is_primitive_non_volatile_field(f_$23)) ==> ($mem(S_$96,$dot(p_$98,f_$23)) == $fetch_from_domain($read_version(S_$96,d),$dot(p_$98,f_$23))) ));
	assume (forall  S_$97 : $state, p_$99 : $ptr, d_$0 : $ptr :: {$full_stop(S_$97),$set_in(p_$99,$domain(S_$97,d_$0)),$st(S_$97,p_$99)} {$full_stop(S_$97),$set_in(p_$99,$domain(S_$97,d_$0)),$ts(S_$97,p_$99)} ( ($full_stop(S_$97) && $set_in(p_$99,$domain(S_$97,d_$0))) ==> $dom_thread_local(S_$97,p_$99) ));
	assume (forall  S_$98 : $state, p_$100 : $ptr, d_$1 : $ptr, f_$24 : $field :: {$set_in(p_$100,$domain(S_$98,d_$1)),$is_primitive_non_volatile_field(f_$24),$owner(S_$98,$dot(p_$100,f_$24))} {$set_in(p_$100,$domain(S_$98,d_$1)),$is_primitive_non_volatile_field(f_$24),$ts(S_$98,$dot(p_$100,f_$24))} ( (($full_stop(S_$98) && $set_in(p_$100,$domain(S_$98,d_$1))) && $is_primitive_non_volatile_field(f_$24)) ==> $dom_thread_local(S_$98,$dot(p_$100,f_$24)) ));
	assume (forall  S_$99 : $state, p_$101 : $ptr, d_$2 : $ptr, f_$25 : $field, sz_$16 : Integer, i_$10 : Integer, t_$23 : $ctype :: {$set_in(p_$101,$domain(S_$99,d_$2)),$is_primitive_embedded_array(f_$25,sz_$16),$mem(S_$99,$idx($dot(p_$101,f_$25),i_$10,t_$23))} ( (((($full_stop(S_$99) && $set_in(p_$101,$domain(S_$99,d_$2))) && $is_primitive_embedded_array(f_$25,sz_$16)) && (0 <= i_$10)) && (i_$10 < sz_$16)) ==> ($mem(S_$99,$idx($dot(p_$101,f_$25),i_$10,t_$23)) == $fetch_from_domain($read_version(S_$99,d_$2),$idx($dot(p_$101,f_$25),i_$10,t_$23))) ));
	assume (forall  S_$100 : $state, p_$102 : $ptr, d_$3 : $ptr, f_$26 : $field, sz_$17 : Integer, i_$11 : Integer, t_$24 : $ctype :: {$set_in(p_$102,$domain(S_$100,d_$3)),$is_primitive_embedded_array(f_$26,sz_$17),$ts(S_$100,$idx($dot(p_$102,f_$26),i_$11,t_$24))} {$set_in(p_$102,$domain(S_$100,d_$3)),$is_primitive_embedded_array(f_$26,sz_$17),$owner(S_$100,$idx($dot(p_$102,f_$26),i_$11,t_$24))} ( (((($full_stop(S_$100) && $set_in(p_$102,$domain(S_$100,d_$3))) && $is_primitive_embedded_array(f_$26,sz_$17)) && (0 <= i_$11)) && (i_$11 < sz_$17)) ==> $dom_thread_local(S_$100,$idx($dot(p_$102,f_$26),i_$11,t_$24)) ));
	assume (forall  S_$101 : $state, r_$17 : Integer, d_$4 : $ptr, sz_$18 : Integer, i_$12 : Integer, t_$25 : $ctype :: {$set_in($ptr($array(t_$25,sz_$18),r_$17),$domain(S_$101,d_$4)),$ts(S_$101,$idx($ptr(t_$25,r_$17),i_$12,t_$25)),$is_primitive(t_$25)} {$set_in($ptr($array(t_$25,sz_$18),r_$17),$domain(S_$101,d_$4)),$owner(S_$101,$idx($ptr(t_$25,r_$17),i_$12,t_$25)),$is_primitive(t_$25)} ( (((($full_stop(S_$101) && $is_primitive(t_$25)) && $set_in($ptr($array(t_$25,sz_$18),r_$17),$domain(S_$101,d_$4))) && (0 <= i_$12)) && (i_$12 < sz_$18)) ==> $dom_thread_local(S_$101,$idx($ptr(t_$25,r_$17),i_$12,t_$25)) ));
	assume (forall  S_$102 : $state, r_$18 : Integer, d_$5 : $ptr, sz_$19 : Integer, i_$13 : Integer, t_$26 : $ctype :: {$set_in($ptr($array(t_$26,sz_$19),r_$18),$domain(S_$102,d_$5)),$mem(S_$102,$idx($ptr(t_$26,r_$18),i_$13,t_$26)),$is_primitive(t_$26)} ( (((($full_stop(S_$102) && $is_primitive(t_$26)) && $set_in($ptr($array(t_$26,sz_$19),r_$18),$domain(S_$102,d_$5))) && (0 <= i_$13)) && (i_$13 < sz_$19)) ==> ($mem(S_$102,$idx($ptr(t_$26,r_$18),i_$13,t_$26)) == $fetch_from_domain($read_version(S_$102,d_$5),$idx($ptr(t_$26,r_$18),i_$13,t_$26))) ));
	assume (forall  S_$103 : $state, p_$103 : $ptr, f_$27 : $field, sz_$20 : Integer, i_$14 : Integer, t_$27 : $ctype :: {$is_primitive_embedded_volatile_array(f_$27,sz_$20,t_$27),$is_volatile(S_$103,$idx($dot(p_$103,f_$27),i_$14,t_$27))} ( ((($good_state(S_$103) && $is_primitive_embedded_volatile_array(f_$27,sz_$20,t_$27)) && (0 <= i_$14)) && (i_$14 < sz_$20)) ==> $is_volatile(S_$103,$idx($dot(p_$103,f_$27),i_$14,t_$27)) ));
	assume (forall  p_$104 : $ptr, S1_$9 : $state, S2_$7 : $state, q_$17 : $ptr :: {$set_in(q_$17,$domain(S1_$9,p_$104)),$call_transition(S1_$9,S2_$7)} {:weight  0}( $instantiate_bool($set_in(q_$17,$domain(S2_$7,p_$104))) ));
	assume (forall  p_$105 : $ptr, S1_$10 : $state, S2_$8 : $state, q_$18 : $ptr :: {$set_in(q_$18,$ver_domain($read_version(S1_$10,p_$105))),$call_transition(S1_$10,S2_$8)} {:weight  0}( $instantiate_bool($set_in(q_$18,$ver_domain($read_version(S2_$8,p_$105)))) ));
	assume (forall  p_$106 : $ptr, c_$2 : $ptr :: {$in_claim_domain(p_$106,c_$2)} ( ((forall  s_$8 : $state :: {$dont_instantiate_state(s_$8)} ( $valid_claim(s_$8,c_$2) ==> $closed(s_$8,p_$106) ))) ==> $in_claim_domain(p_$106,c_$2) ));
	assume (forall  S_$104 : $state, c_$3 : $ptr, obj : $ptr, ptr : $ptr :: {$by_claim(S_$104,c_$3,obj,ptr)} {:weight  0}( $by_claim(S_$104,c_$3,obj,ptr) == ptr ));
	assume (forall  S_$105 : $state, p_$107 : $ptr, c_$4 : $ptr, f_$28 : $field :: {$in_claim_domain(p_$107,c_$4),$mem(S_$105,$dot(p_$107,f_$28))} {$by_claim(S_$105,c_$4,p_$107,$dot(p_$107,f_$28))} ( ((($good_state(S_$105) && $closed(S_$105,c_$4)) && $in_claim_domain(p_$107,c_$4)) && $is_primitive_non_volatile_field(f_$28)) ==> ($in_claim_domain(p_$107,c_$4) && ($mem(S_$105,$dot(p_$107,f_$28)) == $fetch_from_domain($claim_version(c_$4),$dot(p_$107,f_$28)))) ));
	assume (forall  S_$106 : $state, p_$108 : $ptr, c_$5 : $ptr, f_$29 : $field, i_$15 : Integer, sz_$21 : Integer, t_$28 : $ctype :: {$valid_claim(S_$106,c_$5),$in_claim_domain(p_$108,c_$5),$mem(S_$106,$idx($dot(p_$108,f_$29),i_$15,t_$28)),$is_primitive_embedded_array(f_$29,sz_$21)} {$by_claim(S_$106,c_$5,p_$108,$idx($dot(p_$108,f_$29),i_$15,t_$28)),$is_primitive_embedded_array(f_$29,sz_$21)} ( ((((($good_state(S_$106) && $closed(S_$106,c_$5)) && $in_claim_domain(p_$108,c_$5)) && $is_primitive_embedded_array(f_$29,sz_$21)) && (0 <= i_$15)) && (i_$15 < sz_$21)) ==> ($mem(S_$106,$idx($dot(p_$108,f_$29),i_$15,t_$28)) == $fetch_from_domain($claim_version(c_$5),$idx($dot(p_$108,f_$29),i_$15,t_$28))) ));
	assume (forall  S_$107 : $state, p_$109 : $ptr, c_$6 : $ptr, i_$16 : Integer, sz_$22 : Integer, t_$29 : $ctype :: {$valid_claim(S_$107,c_$6),$in_claim_domain($as_array(p_$109,t_$29,sz_$22),c_$6),$mem(S_$107,$idx(p_$109,i_$16,t_$29)),$is_primitive(t_$29)} {$by_claim(S_$107,c_$6,p_$109,$idx(p_$109,i_$16,t_$29)),$is_primitive(t_$29),$is_array(S_$107,p_$109,t_$29,sz_$22)} ( ((((($good_state(S_$107) && $closed(S_$107,c_$6)) && $in_claim_domain($as_array(p_$109,t_$29,sz_$22),c_$6)) && $is_primitive(t_$29)) && (0 <= i_$16)) && (i_$16 < sz_$22)) ==> ($mem(S_$107,$idx(p_$109,i_$16,t_$29)) == $fetch_from_domain($claim_version(c_$6),$idx(p_$109,i_$16,t_$29))) ));
	assume (forall  S_$108 : $state, p_$110 : $ptr :: {$read_vol_version(S_$108,p_$110)} {:weight  0}( $read_vol_version(S_$108,p_$110) == $int_to_vol_version($mem(S_$108,p_$110)) ));
	assume (forall  f_$1 : $field, p_$25 : $ptr, S_$26 : $state :: ( $fetch_vol_field(S_$26,p_$25,f_$1) == $fetch_from_vv($read_vol_version(S_$26,p_$25),$dot(p_$25,f_$1)) ));
	assume (forall  S_$109 : $state, r_$19 : Integer, t_$30 : $ctype, approver_$1 : $field, subject_$2 : $field :: {$is_approved_by(t_$30,approver_$1,subject_$2),$mem(S_$109,$dot($ptr(t_$30,r_$19),subject_$2))} ( ((($full_stop(S_$109) && $is_approved_by(t_$30,approver_$1,subject_$2)) && $closed(S_$109,$ptr(t_$30,r_$19))) && (($int_to_ptr($mem(S_$109,$dot($ptr(t_$30,r_$19),approver_$1))) == $me()) || ($int_to_ptr($fetch_vol_field(S_$109,$ptr(t_$30,r_$19),approver_$1)) == $me()))) ==> ($mem(S_$109,$dot($ptr(t_$30,r_$19),subject_$2)) == $fetch_vol_field(S_$109,$ptr(t_$30,r_$19),subject_$2)) ));
	assume (forall  subject : $field, approver : $ptr, this : $ptr, S2_$0 : $state, S1_$0 : $state :: ( $inv_is_approved_by_ptr(S1_$0,S2_$0,this,approver,subject) == ((($mem_eq(S1_$0,S2_$0,$dot(this,subject)) || ($ref(approver) == 0)) || ((!$is_threadtype($typ(approver))) && $inv2nt(S1_$0,S2_$0,approver))) || ($is_threadtype($typ(approver)) && (!($read_vol_version(S1_$0,this) == $read_vol_version(S2_$0,this))))) ));
	assume (forall  subject_$0 : $field, approver_$0 : $field, this_$0 : $ptr, S2_$1 : $state, S1_$1 : $state :: ( $inv_is_approved_by(S1_$1,S2_$1,this_$0,approver_$0,subject_$0) == $inv_is_approved_by_ptr(S1_$1,S2_$1,this_$0,$int_to_ptr($mem(S1_$1,$dot(this_$0,approver_$0))),subject_$0) ));
	assume (forall  S_$110 : $state, r_$20 : Integer, t_$31 : $ctype, subject_$3 : $field :: {$is_owner_approved(t_$31,subject_$3),$mem(S_$110,$dot($ptr(t_$31,r_$20),subject_$3))} ( ((($full_stop(S_$110) && $closed(S_$110,$ptr(t_$31,r_$20))) && $is_owner_approved(t_$31,subject_$3)) && ($owner(S_$110,$ptr(t_$31,r_$20)) == $me())) ==> ($mem(S_$110,$dot($ptr(t_$31,r_$20),subject_$3)) == $fetch_vol_field(S_$110,$ptr(t_$31,r_$20),subject_$3)) ));
	assume (forall  S1_$11 : $state, S2_$9 : $state, r_$21 : Integer, t_$32 : $ctype, subject_$4 : $field :: {$is_owner_approved(t_$32,subject_$4),$post_unwrap(S1_$11,S2_$9),$mem(S1_$11,$dot($ptr(t_$32,r_$21),subject_$4))} ( $instantiate_int($mem(S2_$9,$dot($ptr(t_$32,r_$21),subject_$4))) ));
	assume (forall  subject_$1 : $field, this_$1 : $ptr, S2_$2 : $state, S1_$2 : $state :: ( $inv_is_owner_approved(S1_$2,S2_$2,this_$1,subject_$1) == $inv_is_approved_by_ptr(S1_$2,S2_$2,this_$1,$owner(S1_$2,this_$1),subject_$1) ));
	assume (forall  S_$111 : $state, p_$111 : $ptr, q_$19 : $ptr :: {$set_in(p_$111,$owns(S_$111,q_$19)),$is_non_primitive($typ(p_$111))} ( (($good_state(S_$111) && $closed(S_$111,q_$19)) && $is_non_primitive($typ(p_$111))) ==> ($set_in(p_$111,$owns(S_$111,q_$19)) <==> ($owner(S_$111,p_$111) == q_$19)) ));
	assume (forall  #s1_$10 : $state, #s2_$7 : $state, #p_$29 : $ptr, #t_$13 : $ctype :: {$is_arraytype(#t_$13),$inv2(#s1_$10,#s2_$7,#p_$29,#t_$13)} ( ($is_arraytype(#t_$13) && ($typ(#p_$29) == #t_$13)) ==> (($inv2(#s1_$10,#s2_$7,#p_$29,#t_$13) <==> $typed(#s2_$7,#p_$29)) && $sequential(#s1_$10,#s2_$7,#p_$29,#t_$13)) ));
	assume (forall  S_$112 : $state, #r_$6 : Integer, #t_$14 : $ctype :: {$owns(S_$112,$ptr(#t_$14,#r_$6)),$is_arraytype(#t_$14)} ( $good_state(S_$112) ==> ($is_arraytype(#t_$14) ==> ($owns(S_$112,$ptr(#t_$14,#r_$6)) == $set_empty())) ));
	assume (forall  S_$113 : $state, #p_$30 : $ptr, #t_$15 : $ctype :: {$inv(S_$113,#p_$30,#t_$15)} ( ($invok_state(S_$113) && $closed(S_$113,#p_$30)) ==> $inv(S_$113,#p_$30,#t_$15) ));
	assume (forall  S_$114 : $state :: {$good_state(S_$114)} ( $good_state(S_$114) ==> $closed_is_transitive(S_$114) ));
	assume (forall  S_$115 : $state, #p_$31 : $ptr :: {$closed(S_$115,#p_$31)} ( $closed(S_$115,#p_$31) ==> $typed(S_$115,#p_$31) ));
	assume (forall  p_$26 : $ptr, S_$27 : $state :: ( $stuttering_pre(S_$27,p_$26) == (((forall  #q_$0 : $ptr :: {$st(S_$27,#q_$0)} ( $closed(S_$27,#q_$0) ==> $inv(S_$27,#q_$0,$typ(#q_$0)) ))) && $good_for_admissibility(S_$27)) ));
	assume (forall  p_$27 : $ptr, S_$28 : $state :: ( $admissibility_pre(S_$28,p_$27) == (($closed(S_$28,p_$27) && $inv(S_$28,p_$27,$typ(p_$27))) && $stuttering_pre(S_$28,p_$27)) ));
	assume (forall  s2_$2 : $state, s1_$2 : $state :: ( $mutable_increases(s1_$2,s2_$2) == ((forall  p_$28 : $ptr :: {$st(s2_$2,p_$28)} {$ts(s2_$2,p_$28)} ( $mutable(s1_$2,p_$28) ==> $mutable(s2_$2,p_$28) ))) ));
	assume (forall  s2_$3 : $state, s1_$3 : $state :: ( $meta_eq(s1_$3,s2_$3) == (($typemap(s1_$3) == $typemap(s2_$3)) && ($statusmap(s1_$3) == $statusmap(s2_$3))) ));
	assume $is_admissibility_check() == ((!$is_stuttering_check()) && (!$is_unwrap_check()));
	assume (forall  p_$29 : $ptr, S_$29 : $state :: ( $unwrap_check_pre(S_$29,p_$29) == (((($wrapped(S_$29,p_$29,$typ(p_$29)) && ((!$is_claimable($typ(p_$29))) || ($ref_cnt(S_$29,p_$29) == 0))) && $inv(S_$29,p_$29,$typ(p_$29))) && ((forall  #q_$1 : $ptr :: {$st(S_$29,#q_$1)} ( $closed(S_$29,#q_$1) ==> $inv(S_$29,#q_$1,$typ(#q_$1)) )))) && $good_for_pre_can_unwrap(S_$29)) ));
	assume (forall  S_$116 : $state, p_$112 : $ptr, v_$9 : Integer :: {$update_int(S_$116,p_$112,v_$9)} ( ((($typemap($update_int(S_$116,p_$112,v_$9)) == $typemap(S_$116)) && ($statusmap($update_int(S_$116,p_$112,v_$9)) == $statusmap(S_$116))) && ($memory($update_int(S_$116,p_$112,v_$9)) == $store.mem($memory(S_$116),p_$112,v_$9))) && $timestamp_post_strict(S_$116,$update_int(S_$116,p_$112,v_$9)) ));
	assume (forall  p_$30 : $ptr, S_$30 : $state :: ( $timestamp_is_now(S_$30,p_$30) == ($timestamp(S_$30,p_$30) == $current_timestamp(S_$30)) ));
	assume (forall  p_$31 : $ptr, S_$31 : $state :: ( $now_writable(S_$31,p_$31) == ($timestamp_is_now(S_$31,p_$31) && $mutable(S_$31,p_$31)) ));
	assume (forall  M2_$0 : $state, M1_$0 : $state :: ( $timestamp_post(M1_$0,M2_$0) == ((($current_timestamp(M1_$0) <= $current_timestamp(M2_$0)) && ((forall  p_$32 : $ptr :: {$timestamp(M2_$0,p_$32)} {:weight  0}( $timestamp(M1_$0,p_$32) <= $timestamp(M2_$0,p_$32) )))) && $call_transition(M1_$0,M2_$0)) ));
	assume (forall  M2_$1 : $state, M1_$1 : $state :: ( $timestamp_post_strict(M1_$1,M2_$1) == ((($current_timestamp(M1_$1) < $current_timestamp(M2_$1)) && ((forall  p_$33 : $ptr :: {$timestamp(M2_$1,p_$33)} {:weight  0}( $timestamp(M1_$1,p_$33) <= $timestamp(M2_$1,p_$33) )))) && $call_transition(M1_$1,M2_$1)) ));
	assume (forall  #p_$12 : $ptr, #l : $ptr, S_$32 : $state, S0 : $state :: ( $unwrap_post(S0,S_$32,#l,#p_$12) == ((((($typed(S0,#p_$12) && $wrapped(S_$32,#p_$12,$typ(#p_$12))) && $timestamp_is_now(S_$32,#p_$12)) && $is_non_primitive($typ(#p_$12))) && $set_in(#p_$12,$owns(S0,#l))) && $nested_in(S0,#p_$12,#l)) ));
	assume (forall  #p_$13 : $ptr, #l_$0 : $ptr, S_$33 : $state, S0_$0 : $state :: ( $unwrap_post_claimable(S0_$0,S_$33,#l_$0,#p_$13) == ($unwrap_post(S0_$0,S_$33,#l_$0,#p_$13) && ($is_claimable($typ(#p_$13)) ==> ($ref_cnt(S0_$0,#p_$13) == $ref_cnt(S_$33,#p_$13)))) ));
	assume (forall  #p_$14 : $ptr, #l_$1 : $ptr, S_$34 : $state :: ( $keeps(S_$34,#l_$1,#p_$14) == $set_in(#p_$14,$owns(S_$34,#l_$1)) ));
	assume (forall  S_$117 : $state, l_$3 : $ptr, p_$113 : $ptr :: {$take_over(S_$117,l_$3,p_$113)} ( $is_non_primitive_ch($typ(l_$3)) ==> ((((($statusmap($take_over(S_$117,l_$3,p_$113)) == $store.sm($statusmap(S_$117),p_$113,$taken_over(S_$117,l_$3,p_$113))) && $closed($take_over(S_$117,l_$3,p_$113),p_$113)) && ($owner($take_over(S_$117,l_$3,p_$113),p_$113) == l_$3)) && ($ref_cnt($take_over(S_$117,l_$3,p_$113),p_$113) == $ref_cnt(S_$117,p_$113))) && true) ));
	assume (forall  S0_$2 : $state, S_$118 : $state, l_$4 : $ptr, p_$114 : $ptr :: {$release(S0_$2,S_$118,l_$4,p_$114)} ( ((((($statusmap($release(S0_$2,S_$118,l_$4,p_$114)) == $store.sm($statusmap(S_$118),p_$114,$released(S_$118,l_$4,p_$114))) && $closed($release(S0_$2,S_$118,l_$4,p_$114),p_$114)) && ($owner($release(S0_$2,S_$118,l_$4,p_$114),p_$114) == $me())) && ($ref_cnt($release(S0_$2,S_$118,l_$4,p_$114),p_$114) == $ref_cnt(S_$118,p_$114))) && ($timestamp($release(S0_$2,S_$118,l_$4,p_$114),p_$114) == $current_timestamp(S0_$2))) && true ));
	assume (forall  owns : $ptrset, o : $ptr, S_$35 : $state :: ( $new_ownees(S_$35,o,owns) == $set_difference(owns,$owns(S_$35,o)) ));
	assume $get_memory_allocator() == $ptr($memory_allocator_type,$memory_allocator_ref);
	assume $ptr_level($memory_allocator_type) == 0;
	assume (forall  S_$119 : $state :: {$program_entry_point(S_$119)} ( $program_entry_point(S_$119) ==> $program_entry_point_ch(S_$119) ));
	assume (forall  t_$7 : $ctype, p_$34 : $ptr :: ( $is_global(p_$34,t_$7) == (((((forall  S_$36 : $state :: {$ts(S_$36,p_$34)} ( $good_state(S_$36) ==> ($typed(S_$36,p_$34) && $is_object_root(S_$36,p_$34)) ))) && ((forall  S_$37 : $state, f_$2 : $field :: {$ts(S_$37,$dot(p_$34,f_$2))} ( $good_state(S_$37) ==> ($typed(S_$37,p_$34) && $is_object_root(S_$37,p_$34)) )))) && ((forall  S_$38 : $state, f_$3 : $field, i : Integer, tt : $ctype :: {$ts(S_$38,$idx($dot(p_$34,f_$3),i,tt))} ( $good_state(S_$38) ==> ($typed(S_$38,p_$34) && $is_object_root(S_$38,p_$34)) )))) && ((forall  S_$39 : $state :: {$program_entry_point(S_$39)} ( $program_entry_point(S_$39) ==> ($extent_mutable(S_$39,p_$34) && ($owns(S_$39,p_$34) == $set_empty())) )))) ));
	assume (forall  sz_$0 : Integer, T : $ctype, p_$35 : $ptr :: ( $is_global_array(p_$35,T,sz_$0) == ($is(p_$35,T) && ((forall  S_$40 : $state, i_$0 : Integer :: {$st(S_$40,$idx(p_$35,i_$0,T))} {$ts(S_$40,$idx(p_$35,i_$0,T))} ( $good_state(S_$40) ==> (((0 <= i_$0) && (i_$0 < sz_$0)) ==> (((!$is_volatile(S_$40,$idx(p_$35,i_$0,T))) && $typed(S_$40,$idx(p_$35,i_$0,T))) && ($program_entry_point_ch(S_$40) ==> $mutable(S_$40,$idx(p_$35,i_$0,T))))) )))) ));
	assume (forall  u : $ptr, S_$41 : $state :: ( $active_option(S_$41,u) == $ts_active_option($ts(S_$41,u)) ));
	assume (forall  f_$4 : $field, u_$0 : $ptr, S_$42 : $state :: ( $union_active(S_$42,u_$0,f_$4) == ($active_option(S_$42,u_$0) == f_$4) ));
	assume (forall  #x : $ptr, #s2_$1 : $state, #s1_$2 : $state :: ( $union_havoced(#s1_$2,#s2_$1,#x) == ((forall  #p_$15 : $ptr :: {$mem(#s2_$1,#p_$15)} ( ((#p_$15 == #x) || ($in_full_extent_of(#p_$15,#x) && ((!$typed(#s1_$2,#p_$15)) || (!$typed(#s2_$1,#p_$15))))) || $mem_eq(#s1_$2,#s2_$1,#p_$15) ))) ));
	assume (forall  #l_$2 : $ptr, #p_$16 : $ptr :: ( $in_span_of(#p_$16,#l_$2) == $set_in(#p_$16,$span(#l_$2)) ));
	assume (forall  #p_$17 : $ptr :: ( $struct_extent(#p_$17) == $full_extent(#p_$17) ));
	assume (forall  #l_$3 : $ptr, #p_$18 : $ptr :: ( $in_struct_extent_of(#p_$18,#l_$3) == $set_in(#p_$18,$struct_extent(#l_$3)) ));
	assume (forall  S_$120 : $state, p_$115 : $ptr, q_$20 : $ptr :: {$set_in(p_$115,$volatile_span(S_$120,q_$20))} ( $set_in(p_$115,$volatile_span(S_$120,q_$20)) <==> ((p_$115 == q_$20) || ($is_volatile(S_$120,p_$115) && $set_in(p_$115,$span(q_$20)))) ));
	assume (forall  a : $ptr, i_$17 : Integer :: {$left_split(a,i_$17)} ( $left_split(a,i_$17) == $as_array(a,$element_type($typ(a)),i_$17) ));
	assume (forall  a_$0 : $ptr, i_$18 : Integer :: {$right_split(a_$0,i_$18)} ( $right_split(a_$0,i_$18) == $as_array($idx($ptr($element_type($typ(a_$0)),$ref(a_$0)),i_$18,$element_type($typ(a_$0))),$element_type($typ(a_$0)),$array_length($typ(a_$0)) - i_$18) ));
	assume (forall  a1 : $ptr, a2 : $ptr :: {$joined_array(a1,a2)} ( $joined_array(a1,a2) == $ptr($array($element_type($typ(a1)),$array_length($typ(a1)) + $array_length($typ(a2))),$ref(a1)) ));
	assume (forall  p_$36 : $ptr, S_$43 : $state :: ( $mutable_root(S_$43,p_$36) == (($extent_mutable(S_$43,p_$36) && $is_object_root(S_$43,p_$36)) && $timestamp_is_now(S_$43,p_$36)) ));
	assume (forall  #o_$0 : $ptr :: {$set_in(#o_$0,$set_empty())} {:weight  0}( !$set_in(#o_$0,$set_empty()) ));
	assume (forall  #r_$7 : $ptr, #o_$1 : $ptr :: {$set_in(#o_$1,$set_singleton(#r_$7))} {:weight  0}( $set_in(#o_$1,$set_singleton(#r_$7)) <==> (#r_$7 == #o_$1) ));
	assume (forall  #r_$8 : $ptr, #o_$2 : $ptr :: {$set_in(#o_$2,$non_null_set_singleton(#r_$8))} {:weight  0}( $set_in(#o_$2,$non_null_set_singleton(#r_$8)) <==> ((#r_$8 == #o_$2) && $ptr_neq(#r_$8,$null)) ));
	assume (forall  #a : $ptrset, #b_$1 : $ptrset, #o_$3 : $ptr :: {$set_in(#o_$3,$set_union(#a,#b_$1))} {:weight  0}( $set_in(#o_$3,$set_union(#a,#b_$1)) <==> ($set_in(#o_$3,#a) || $set_in(#o_$3,#b_$1)) ));
	assume (forall  #a_$0 : $ptrset, #b_$2 : $ptrset, #o_$4 : $ptr :: {$set_in(#o_$4,$set_difference(#a_$0,#b_$2))} {:weight  0}( $set_in(#o_$4,$set_difference(#a_$0,#b_$2)) <==> ($set_in(#o_$4,#a_$0) && (!$set_in(#o_$4,#b_$2))) ));
	assume (forall  #a_$1 : $ptrset, #b_$3 : $ptrset, #o_$5 : $ptr :: {$set_in(#o_$5,$set_intersection(#a_$1,#b_$3))} {:weight  0}( $set_in(#o_$5,$set_intersection(#a_$1,#b_$3)) <==> ($set_in(#o_$5,#a_$1) && $set_in(#o_$5,#b_$3)) ));
	assume (forall  #a_$2 : $ptrset, #b_$4 : $ptrset :: {$set_subset(#a_$2,#b_$4)} {:weight  0}( $set_subset(#a_$2,#b_$4) <==> ((forall  #o_$6 : $ptr :: {$set_in(#o_$6,#a_$2)} {$set_in(#o_$6,#b_$4)} {:weight  0}( $set_in(#o_$6,#a_$2) ==> $set_in(#o_$6,#b_$4) ))) ));
	assume (forall  e : $ptr, S_$44 : $ptrset :: ( $set_add_element(S_$44,e) == $set_union(S_$44,$set_singleton(e)) ));
	assume (forall  e_$0 : $ptr, S_$45 : $ptrset :: ( $set_remove_element(S_$45,e_$0) == $set_difference(S_$45,$set_singleton(e_$0)) ));
	assume (forall  #a_$3 : $ptrset, #b_$5 : $ptrset :: {$set_eq(#a_$3,#b_$5)} {:weight  0}( ((forall  #o_$7 : $ptr :: {$dont_instantiate(#o_$7)} {:weight  0}( $set_in(#o_$7,#a_$3) <==> $set_in(#o_$7,#b_$5) ))) ==> $set_eq(#a_$3,#b_$5) ));
	assume (forall  #a_$4 : $ptrset, #b_$6 : $ptrset :: {$set_eq(#a_$4,#b_$6)} {:weight  0}( $set_eq(#a_$4,#b_$6) ==> (#a_$4 == #b_$6) ));
	assume $set_cardinality($set_empty()) == 0;
	assume (forall  p_$116 : $ptr :: {:weight  0}( $set_cardinality($set_singleton(p_$116)) == 1 ));
	assume (forall  #o_$8 : $ptr :: {$set_in(#o_$8,$set_universe())} {:weight  0}( $set_in(#o_$8,$set_universe()) ));
	assume (forall  p_$117 : $ptr, s1_$5 : $ptrset, s2_$5 : $ptrset :: {$set_disjoint(s1_$5,s2_$5),$set_in(p_$117,s1_$5)} {:weight  0}( ($set_disjoint(s1_$5,s2_$5) && $set_in(p_$117,s1_$5)) ==> ($id_set_disjoint(p_$117,s1_$5,s2_$5) == 1) ));
	assume (forall  p_$118 : $ptr, s1_$6 : $ptrset, s2_$6 : $ptrset :: {$set_disjoint(s1_$6,s2_$6),$set_in(p_$118,s2_$6)} {:weight  0}( ($set_disjoint(s1_$6,s2_$6) && $set_in(p_$118,s2_$6)) ==> ($id_set_disjoint(p_$118,s1_$6,s2_$6) == 2) ));
	assume (forall  s1_$7 : $ptrset, s2_$7 : $ptrset :: {$set_disjoint(s1_$7,s2_$7)} {:weight  0}( ((forall  p_$119 : $ptr :: {$dont_instantiate(p_$119)} ( ($set_in(p_$119,s1_$7) ==> (!$set_in(p_$119,s2_$7))) && ($set_in(p_$119,s2_$7) ==> (!$set_in(p_$119,s1_$7))) ))) ==> $set_disjoint(s1_$7,s2_$7) ));
	assume (forall  p_$120 : $ptr, S1_$12 : $state, p1_$1 : $ptr :: {$set_in(p_$120,$owns(S1_$12,p1_$1))} {:weight  0}( $set_in(p_$120,$owns(S1_$12,p1_$1)) ==> $in_some_owns(p_$120) ));
	assume (forall  p_$121 : $ptr, S1_$13 : $state, p1_$2 : $ptr :: {$set_in2(p_$121,$owns(S1_$13,p1_$2)),$in_some_owns(p_$121)} {:weight  0}( $set_in(p_$121,$owns(S1_$13,p1_$2)) <==> $set_in2(p_$121,$owns(S1_$13,p1_$2)) ));
	assume (forall  p_$122 : $ptr, s_$9 : $ptrset :: {$set_in(p_$122,s_$9)} {:weight  0}( $set_in(p_$122,s_$9) <==> $set_in2(p_$122,s_$9) ));
	assume (forall  p_$123 : $ptr, s_$10 : $ptrset :: {$set_in(p_$123,s_$10)} {:weight  0}( $set_in(p_$123,s_$10) <==> $set_in3(p_$123,s_$10) ));
	assume (forall  p_$124 : $ptr, s_$11 : $ptrset :: {$set_in0(p_$124,s_$11)} {:weight  0}( $set_in(p_$124,s_$11) <==> $set_in0(p_$124,s_$11) ));
	assume (forall  S2_$3 : $state, S1_$3 : $state :: ( $writes_nothing(S1_$3,S2_$3) == ((((((forall  p_$37 : $ptr :: {$st(S2_$3,p_$37)} ( $nested(S2_$3,p_$37) ==> $nested(S1_$3,p_$37) ))) && ((forall  p_$38 : $ptr :: {$mem(S2_$3,p_$38)} ( $thread_local(S1_$3,p_$38) ==> ($mem_eq(S1_$3,S2_$3,p_$38) && $thread_local(S2_$3,p_$38)) )))) && ((forall  p_$39 : $ptr :: {$st(S2_$3,p_$39)} ( $thread_local(S1_$3,p_$39) ==> ($st_eq(S1_$3,S2_$3,p_$39) && $thread_local(S2_$3,p_$39)) )))) && ((forall  p_$40 : $ptr :: {$ts(S2_$3,p_$40)} ( $thread_local(S1_$3,p_$40) ==> ($ts_eq(S1_$3,S2_$3,p_$40) && $thread_local(S2_$3,p_$40)) )))) && $timestamp_post(S1_$3,S2_$3)) ));
	assume (forall  T_$16 : $ctype, s_$12 : Integer :: {$array(T_$16,s_$12)} ( $element_type($array(T_$16,s_$12)) == T_$16 ));
	assume (forall  T_$17 : $ctype, s_$13 : Integer :: {$array(T_$17,s_$13)} ( $array_length($array(T_$17,s_$13)) == s_$13 ));
	assume (forall  T_$18 : $ctype, s_$14 : Integer :: {$array(T_$18,s_$14)} ( $ptr_level($array(T_$18,s_$14)) == 0 ));
	assume (forall  T_$19 : $ctype, s_$15 : Integer :: {$array(T_$19,s_$15)} ( $is_arraytype($array(T_$19,s_$15)) ));
	assume (forall  T_$20 : $ctype, s_$16 : Integer :: {$array(T_$20,s_$16)} ( !$is_claimable($array(T_$20,s_$16)) ));
	assume (forall  T_$21 : $ctype, s_$17 : Integer :: {$sizeof($array(T_$21,s_$17))} ( $sizeof($array(T_$21,s_$17)) == ($sizeof(T_$21) * s_$17) ));
	assume (forall  p_$125 : $ptr, T_$22 : $ctype :: {$inlined_array(p_$125,T_$22)} {:weight  0}( $inlined_array(p_$125,T_$22) == p_$125 ));
	assume (forall  #p_$32 : $ptr, #i_$0 : Integer, #t_$16 : $ctype :: {$idx(#p_$32,#i_$0,#t_$16)} ( $extent_hint($idx(#p_$32,#i_$0,#t_$16),#p_$32) && ($idx(#p_$32,#i_$0,#t_$16) == $ptr(#t_$16,$add.mul($ref(#p_$32),#i_$0,$sizeof(#t_$16)))) ));
	assume (forall  z : Integer, y : Integer, x : Integer :: ( $add.mul(x,y,z) == (x + (y * z)) ));
	assume (forall  y_$0 : Integer, x_$0 : Integer :: ( $add(x_$0,y_$0) == (x_$0 + y_$0) ));
	assume (forall  p_$126 : $ptr, i_$19 : Integer, j : Integer, T_$23 : $ctype :: {$idx($idx(p_$126,i_$19,T_$23),j,T_$23)} ( ((!(i_$19 == 0)) && (!(j == 0))) ==> ($idx($idx(p_$126,i_$19,T_$23),j,T_$23) == $idx(p_$126,$add(i_$19,j),T_$23)) ));
	assume (forall  S_$121 : $state, p_$127 : $ptr, T_$24 : $ctype, sz_$23 : Integer, vol_$1 : Boolean :: {$is_array_vol_or_nonvol(S_$121,p_$127,T_$24,sz_$23,vol_$1)} {:weight  0}( $is_array_vol_or_nonvol(S_$121,p_$127,T_$24,sz_$23,vol_$1) <==> ($is(p_$127,T_$24) && ((forall  i_$20 : Integer :: {$st(S_$121,$idx(p_$127,i_$20,T_$24))} {$ts(S_$121,$idx(p_$127,i_$20,T_$24))} {$mem(S_$121,$idx(p_$127,i_$20,T_$24))} ( ((0 <= i_$20) && (i_$20 < sz_$23)) ==> (($is_volatile(S_$121,$idx(p_$127,i_$20,T_$24)) <==> vol_$1) && $typed(S_$121,$idx(p_$127,i_$20,T_$24))) )))) ));
	assume (forall  S_$122 : $state, p_$128 : $ptr, T_$25 : $ctype, sz_$24 : Integer :: {$is_array(S_$122,p_$128,T_$25,sz_$24)} {:weight  0}( $is_array(S_$122,p_$128,T_$25,sz_$24) <==> ($is(p_$128,T_$25) && ((forall  i_$21 : Integer :: {$st(S_$122,$idx(p_$128,i_$21,T_$25))} {$ts(S_$122,$idx(p_$128,i_$21,T_$25))} {$mem(S_$122,$idx(p_$128,i_$21,T_$25))} ( ((0 <= i_$21) && (i_$21 < sz_$24)) ==> $typed(S_$122,$idx(p_$128,i_$21,T_$25)) )))) ));
	assume (forall  sz_$1 : Integer, T_$0 : $ctype, p_$41 : $ptr, S_$46 : $state :: ( $is_thread_local_array(S_$46,p_$41,T_$0,sz_$1) == ((forall  i_$1 : Integer :: {$st(S_$46,$idx(p_$41,i_$1,T_$0))} {$ts(S_$46,$idx(p_$41,i_$1,T_$0))} ( ((0 <= i_$1) && (i_$1 < sz_$1)) ==> $thread_local2(S_$46,$idx(p_$41,i_$1,T_$0),T_$0) ))) ));
	assume (forall  sz_$2 : Integer, T_$1 : $ctype, p_$42 : $ptr, S_$47 : $state :: ( $is_mutable_array(S_$47,p_$42,T_$1,sz_$2) == ($is_array(S_$47,p_$42,T_$1,sz_$2) && ((forall  i_$2 : Integer :: {$st(S_$47,$idx(p_$42,i_$2,T_$1))} {$ts(S_$47,$idx(p_$42,i_$2,T_$1))} ( ((0 <= i_$2) && (i_$2 < sz_$2)) ==> $mutable(S_$47,$idx(p_$42,i_$2,T_$1)) )))) ));
	assume (forall  emb : $ptr, sz_$3 : Integer, T_$2 : $ctype, p_$43 : $ptr, S_$48 : $state :: ( $is_array_emb(S_$48,p_$43,T_$2,sz_$3,emb) == ($is_array_vol_or_nonvol(S_$48,p_$43,T_$2,sz_$3,false) && ((forall  i_$3 : Integer :: {$ts(S_$48,$idx(p_$43,i_$3,T_$2))} ( ((0 <= i_$3) && (i_$3 < sz_$3)) ==> ($emb(S_$48,$idx(p_$43,i_$3,T_$2)) == emb) )))) ));
	assume (forall  isvol : Boolean, f_$5 : $field, emb_$0 : $ptr, sz_$4 : Integer, T_$3 : $ctype, p_$44 : $ptr, S_$49 : $state :: ( $is_array_emb_path(S_$49,p_$44,T_$3,sz_$4,emb_$0,f_$5,isvol) == ($is_array_vol_or_nonvol(S_$49,p_$44,T_$3,sz_$4,isvol) && ((forall  i_$4 : Integer :: {$ts(S_$49,$idx(p_$44,i_$4,T_$3))} {$mem(S_$49,$idx(p_$44,i_$4,T_$3))} ( ((0 <= i_$4) && (i_$4 < sz_$4)) ==> (($emb(S_$49,$idx(p_$44,i_$4,T_$3)) == emb_$0) && ($path(S_$49,$idx(p_$44,i_$4,T_$3)) == $array_path(f_$5,i_$4))) )))) ));
	assume (forall  vol : Boolean, union : Boolean, sz_$5 : Integer, T_$4 : $ctype, f_$6 : $field :: ( $array_field_properties(f_$6,T_$4,sz_$5,union,vol) == ((forall  S_$50 : $state, p_$45 : $ptr, i_$5 : Integer :: {$ts(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))} {$st(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))} {$mem(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))} ( ((((0 <= i_$5) && (i_$5 < sz_$5)) && ((!union) || ($active_option(S_$50,p_$45) == f_$6))) && $typed2(S_$50,p_$45,$field_parent_type(f_$6))) ==> (((($is_volatile(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4)) <==> vol) && $typed(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4))) && ($emb(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4)) == p_$45)) && ($path(S_$50,$idx($dot(p_$45,f_$6),i_$5,T_$4)) == $array_path(f_$6,i_$5))) ))) ));
	assume (forall  vol_$0 : Boolean, union_$0 : Boolean, sz_$6 : Integer, T_$5 : $ctype, f_$7 : $field :: ( $no_inline_array_field_properties(f_$7,T_$5,sz_$6,union_$0,vol_$0) == (((forall  S_$51 : $state, p_$46 : $ptr :: {$ts(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))} {$st(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))} {$mem(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))} ( (((!union_$0) || ($active_option(S_$51,p_$46) == f_$7)) && $typed2(S_$51,p_$46,$field_parent_type(f_$7))) ==> ((($extent_hint($as_array($dot(p_$46,f_$7),T_$5,sz_$6),p_$46) && $typed(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6))) && ($emb(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6)) == p_$46)) && ($path(S_$51,$as_array($dot(p_$46,f_$7),T_$5,sz_$6)) == f_$7)) ))) && ((forall  p_$47 : $ptr, i_$6 : Integer :: {$idx($dot(p_$47,f_$7),i_$6,T_$5)} ( $instantiate_ptr($as_array($dot(p_$47,f_$7),T_$5,sz_$6)) )))) ));
	assume (forall  p_$129 : $ptr, #r_$9 : Integer, T_$26 : $ctype, sz_$25 : Integer :: {$in_full_extent_of(p_$129,$ptr($array(T_$26,sz_$25),#r_$9))} ( $in_full_extent_of(p_$129,$ptr($array(T_$26,sz_$25),#r_$9)) <==> ((p_$129 == $ptr($array(T_$26,sz_$25),#r_$9)) || $in_array_full_extent_of(p_$129,$ptr(T_$26,#r_$9),T_$26,sz_$25)) ));
	assume (forall  S_$123 : $state, p_$130 : $ptr, #r_$10 : Integer, T_$27 : $ctype, sz_$26 : Integer :: {$in_extent_of(S_$123,p_$130,$ptr($array(T_$27,sz_$26),#r_$10))} ( $in_extent_of(S_$123,p_$130,$ptr($array(T_$27,sz_$26),#r_$10)) <==> ((p_$130 == $ptr($array(T_$27,sz_$26),#r_$10)) || $in_array_extent_of(S_$123,p_$130,$ptr(T_$27,#r_$10),T_$27,sz_$26)) ));
	assume (forall  p_$131 : $ptr, #r_$11 : Integer, T_$28 : $ctype, sz_$27 : Integer :: {$in_span_of(p_$131,$ptr($array(T_$28,sz_$27),#r_$11)),$is_primitive(T_$28)} ( $is_primitive(T_$28) ==> ($in_span_of(p_$131,$ptr($array(T_$28,sz_$27),#r_$11)) <==> $in_array(p_$131,$ptr(T_$28,#r_$11),T_$28,sz_$27)) ));
	assume (forall  emb_$1 : $ptr, p_$48 : $ptr, S_$52 : $state :: ( $array_elt_emb(S_$52,p_$48,emb_$1) == ((($emb(S_$52,p_$48) == emb_$1) && (!$is_volatile(S_$52,p_$48))) && $typed(S_$52,p_$48)) ));
	assume (forall  S_$124 : $state, #r_$12 : Integer, T_$29 : $ctype, sz_$28 : Integer, i_$22 : Integer :: {$st(S_$124,$idx($ptr(T_$29,#r_$12),i_$22,T_$29)),$ptr($array(T_$29,sz_$28),#r_$12)} {$ts(S_$124,$idx($ptr(T_$29,#r_$12),i_$22,T_$29)),$ptr($array(T_$29,sz_$28),#r_$12)} ( $typed(S_$124,$ptr($array(T_$29,sz_$28),#r_$12)) ==> (((0 <= i_$22) && (i_$22 < sz_$28)) ==> $array_elt_emb(S_$124,$idx($ptr($array(T_$29,sz_$28),#r_$12),i_$22,T_$29),$ptr($array(T_$29,sz_$28),#r_$12))) ));
	assume (forall  p_$132 : $ptr, T_$30 : $ctype, sz_$29 : Integer, elem : $ptr :: {$set_in(elem,$array_members(p_$132,T_$30,sz_$29))} ( $set_in(elem,$array_members(p_$132,T_$30,sz_$29)) <==> $in_array(elem,p_$132,T_$30,sz_$29) ));
	assume (forall  S_$125 : $state, p_$133 : $ptr, T_$31 : $ctype, sz_$30 : Integer :: {$array_range(S_$125,p_$133,T_$31,sz_$30)} ( $array_range(S_$125,p_$133,T_$31,sz_$30) == $array_range_no_state(p_$133,T_$31,sz_$30) ));
	assume (forall  S_$126 : $state, p_$134 : $ptr, #r_$13 : Integer, T_$32 : $ctype, sz_$31 : Integer :: {$set_in(p_$134,$array_range(S_$126,$ptr(T_$32,#r_$13),T_$32,sz_$31))} ( $instantiate_bool($typed(S_$126,p_$134)) && ($set_in(p_$134,$array_range(S_$126,$ptr(T_$32,#r_$13),T_$32,sz_$31)) <==> $in_array_full_extent_of(p_$134,$ptr(T_$32,#r_$13),T_$32,sz_$31)) ));
	assume (forall  p_$135 : $ptr, T_$33 : $ctype, sz_$32 : Integer, idx : Integer, S_$127 : $ptrset :: {$idx(p_$135,idx,T_$33),$set_disjoint($array_range_no_state(p_$135,T_$33,sz_$32),S_$127)} ( $set_disjoint($array_range_no_state(p_$135,T_$33,sz_$32),S_$127) ==> (((0 <= idx) && (idx < sz_$32)) ==> ($id_set_disjoint($idx(p_$135,idx,T_$33),$array_range_no_state(p_$135,T_$33,sz_$32),S_$127) == 1)) ));
	assume (forall  p_$136 : $ptr, T_$34 : $ctype, sz_$33 : Integer, idx_$0 : Integer, S_$128 : $ptrset :: {$idx(p_$136,idx_$0,T_$34),$set_disjoint(S_$128,$array_range_no_state(p_$136,T_$34,sz_$33))} ( $set_disjoint(S_$128,$array_range_no_state(p_$136,T_$34,sz_$33)) ==> (((0 <= idx_$0) && (idx_$0 < sz_$33)) ==> ($id_set_disjoint($idx(p_$136,idx_$0,T_$34),S_$128,$array_range_no_state(p_$136,T_$34,sz_$33)) == 2)) ));
	assume (forall  p_$137 : $ptr, #r_$14 : Integer, T_$35 : $ctype, sz_$34 : Integer :: {$set_in(p_$137,$non_null_array_range($ptr(T_$35,#r_$14),T_$35,sz_$34))} ( $set_in(p_$137,$non_null_array_range($ptr(T_$35,#r_$14),T_$35,sz_$34)) <==> ((!(#r_$14 == 0)) && $in_array_full_extent_of(p_$137,$ptr(T_$35,#r_$14),T_$35,sz_$34)) ));
	assume (forall  q_$21 : $ptr, S_$129 : $state, p_$138 : $ptr :: {$set_in(q_$21,$non_null_extent(S_$129,p_$138))} ( $set_in(q_$21,$non_null_extent(S_$129,p_$138)) <==> ($ptr_neq(p_$138,$null) && $set_in(q_$21,$extent(S_$129,p_$138))) ));
	assume (forall  sz_$7 : Integer, T_$6 : $ctype, p_$49 : $ptr :: ( $as_array(p_$49,T_$6,sz_$7) == $ptr($array(T_$6,sz_$7),$ref(p_$49)) ));
	assume (forall  sz_$8 : Integer, T_$7 : $ctype, arr : $ptr, s2_$4 : $state, s1_$4 : $state :: ( $array_eq(s1_$4,s2_$4,arr,T_$7,sz_$8) == ((forall  #i : Integer :: {$idx(arr,#i,T_$7)} ( ((0 <= #i) && (#i < sz_$8)) ==> $mem_eq(s1_$4,s2_$4,$idx(arr,#i,T_$7)) ))) ));
	assume (forall  p_$139 : $ptr, k : Integer :: {$idx(p_$139,k,$typ(p_$139))} ( ($index_within($idx(p_$139,k,$typ(p_$139)),p_$139) == k) && $simple_index($idx(p_$139,k,$typ(p_$139)),p_$139) ));
	assume (forall  p_$140 : $ptr, q_$22 : $ptr, f_$30 : $field :: {$simple_index($dot(p_$140,f_$30),q_$22)} {$index_within($dot(p_$140,f_$30),q_$22)} ( $simple_index(p_$140,q_$22) ==> ($simple_index($dot(p_$140,f_$30),q_$22) && ($index_within($dot(p_$140,f_$30),q_$22) == $index_within(p_$140,q_$22))) ));
	assume (forall  p_$141 : $ptr, q_$23 : $ptr, f_$31 : $field, i_$23 : Integer, t_$33 : $ctype :: {$simple_index($idx($dot(p_$141,f_$31),i_$23,t_$33),q_$23)} {$index_within($idx($dot(p_$141,f_$31),i_$23,t_$33),q_$23)} ( (((0 <= i_$23) && (i_$23 < $embedded_array_size(f_$31,t_$33))) && $simple_index(p_$141,q_$23)) ==> ($simple_index($idx($dot(p_$141,f_$31),i_$23,t_$33),q_$23) && ($index_within($idx($dot(p_$141,f_$31),i_$23,t_$33),q_$23) == $index_within(p_$141,q_$23))) ));
	assume (forall  sz_$9 : Integer, T_$8 : $ctype, arr_$0 : $ptr, q : $ptr :: ( $in_array(q,arr_$0,T_$8,sz_$9) == ($in_range(0,$index_within(q,arr_$0),sz_$9 - 1) && (q == $idx(arr_$0,$index_within(q,arr_$0),T_$8))) ));
	assume (forall  sz_$10 : Integer, T_$9 : $ctype, arr_$1 : $ptr, q_$0 : $ptr :: ( $in_array_full_extent_of(q_$0,arr_$1,T_$9,sz_$10) == ($in_range(0,$index_within(q_$0,arr_$1),sz_$10 - 1) && $in_full_extent_of(q_$0,$idx(arr_$1,$index_within(q_$0,arr_$1),T_$9))) ));
	assume (forall  sz_$11 : Integer, T_$10 : $ctype, arr_$2 : $ptr, q_$1 : $ptr, S_$53 : $state :: ( $in_array_extent_of(S_$53,q_$1,arr_$2,T_$10,sz_$11) == ($in_range(0,$index_within(q_$1,arr_$2),sz_$11 - 1) && $in_extent_of(S_$53,q_$1,$idx(arr_$2,$index_within(q_$1,arr_$2),T_$10))) ));
	assume (forall  s1_$8 : $state, s2_$8 : $state, p_$142 : $ptr, t_$34 : $ctype, sz_$35 : Integer :: {$state_spans_the_same(s1_$8,s2_$8,p_$142,$array(t_$34,sz_$35)),$is_primitive(t_$34)} ( $is_primitive(t_$34) ==> ($state_spans_the_same(s1_$8,s2_$8,p_$142,$array(t_$34,sz_$35)) ==> ((forall  i_$24 : Integer :: {$mem(s2_$8,$idx($ptr_cast(p_$142,t_$34),i_$24,t_$34))} ( ((0 <= i_$24) && (i_$24 < sz_$35)) ==> $mem_eq(s1_$8,s2_$8,$idx($ptr_cast(p_$142,t_$34),i_$24,t_$34)) )))) ));
	assume (forall  max : Integer, val : Integer, min : Integer :: ( $in_range(min,val,max) == ((min <= val) && (val <= max)) ));
	assume (forall  v : Boolean :: ( $bool_to_int(v) == (if v then 1 else 0) ));
	assume (forall  x_$1 : Integer :: ( $int_to_bool(x_$1) == (!(x_$1 == 0)) ));
	assume (forall  p_$50 : $ptr, S_$54 : $state :: ( $read_bool(S_$54,p_$50) == $int_to_bool($mem(S_$54,p_$50)) ));
	assume (forall  x_$25 : Boolean :: {$bool_id(x_$25)} {:weight  0}( $bool_id(x_$25) <==> x_$25 ));
	assume $min.i1 == (0 - 128);
	assume $max.i1 == 127;
	assume $min.i2 == (0 - 32768);
	assume $max.i2 == 32767;
	assume $min.i4 == (0 - (65536 * 32768));
	assume $max.i4 == ((65536 * 32768) - 1);
	assume $min.i8 == (0 - (((65536 * 65536) * 65536) * 32768));
	assume $max.i8 == ((((65536 * 65536) * 65536) * 32768) - 1);
	assume $max.u1 == 255;
	assume $max.u2 == 65535;
	assume $max.u4 == ((65536 * 65536) - 1);
	assume $max.u8 == ((((65536 * 65536) * 65536) * 65536) - 1);
	assume (forall  x_$2 : Integer :: ( $in_range_i1(x_$2) == $in_range($min.i1,x_$2,$max.i1) ));
	assume (forall  x_$3 : Integer :: ( $in_range_i2(x_$3) == $in_range($min.i2,x_$3,$max.i2) ));
	assume (forall  x_$4 : Integer :: ( $in_range_i4(x_$4) == $in_range($min.i4,x_$4,$max.i4) ));
	assume (forall  x_$5 : Integer :: ( $in_range_i8(x_$5) == $in_range($min.i8,x_$5,$max.i8) ));
	assume (forall  x_$6 : Integer :: ( $in_range_u1(x_$6) == $in_range(0,x_$6,$max.u1) ));
	assume (forall  x_$7 : Integer :: ( $in_range_u2(x_$7) == $in_range(0,x_$7,$max.u2) ));
	assume (forall  x_$8 : Integer :: ( $in_range_u4(x_$8) == $in_range(0,x_$8,$max.u4) ));
	assume (forall  x_$9 : Integer :: ( $in_range_u8(x_$9) == $in_range(0,x_$9,$max.u8) ));
	assume (forall  p_$51 : $ptr :: ( $in_range_ptr(p_$51) == $in_range_u8($ref(p_$51)) ));
	assume (forall  y_$1 : Integer, x_$10 : Integer :: ( $in_range_div_i1(x_$10,y_$1) == ((!(y_$1 == (0 - 1))) || (!(x_$10 == $min.i1))) ));
	assume (forall  y_$2 : Integer, x_$11 : Integer :: ( $in_range_div_i2(x_$11,y_$2) == ((!(y_$2 == (0 - 1))) || (!(x_$11 == $min.i2))) ));
	assume (forall  y_$3 : Integer, x_$12 : Integer :: ( $in_range_div_i4(x_$12,y_$3) == ((!(y_$3 == (0 - 1))) || (!(x_$12 == $min.i4))) ));
	assume (forall  y_$4 : Integer, x_$13 : Integer :: ( $in_range_div_i8(x_$13,y_$4) == ((!(y_$4 == (0 - 1))) || (!(x_$13 == $min.i8))) ));
	assume $ptr_to_u8($null) == 0;
	assume $ptr_to_i8($null) == 0;
	assume $ptr_to_u4($null) == 0;
	assume $ptr_to_i4($null) == 0;
	assume $ptr_to_u2($null) == 0;
	assume $ptr_to_i2($null) == 0;
	assume $ptr_to_u1($null) == 0;
	assume $ptr_to_i1($null) == 0;
	assume (forall  x_$14 : Integer :: ( $u8_to_ptr(x_$14) == $ptr(^^void,x_$14) ));
	assume (forall  x_$15 : Integer :: ( $i8_to_ptr(x_$15) == $ptr(^^void,x_$15) ));
	assume (forall  x_$16 : Integer :: ( $u4_to_ptr(x_$16) == $ptr(^^void,x_$16) ));
	assume (forall  x_$17 : Integer :: ( $i4_to_ptr(x_$17) == $ptr(^^void,x_$17) ));
	assume (forall  x_$18 : Integer :: ( $u2_to_ptr(x_$18) == $ptr(^^void,x_$18) ));
	assume (forall  x_$19 : Integer :: ( $i2_to_ptr(x_$19) == $ptr(^^void,x_$19) ));
	assume (forall  x_$20 : Integer :: ( $u1_to_ptr(x_$20) == $ptr(^^void,x_$20) ));
	assume (forall  x_$21 : Integer :: ( $i1_to_ptr(x_$21) == $ptr(^^void,x_$21) ));
	assume (forall  p_$143 : $ptr :: {$ptr_to_u8(p_$143)} ( $in_range_u8($ref(p_$143)) ==> ($ptr_to_u8(p_$143) == $ref(p_$143)) ));
	assume (forall  p_$144 : $ptr :: {$ptr_to_i8(p_$144)} ( $in_range_i8($ref(p_$144)) ==> ($ptr_to_i8(p_$144) == $ref(p_$144)) ));
	assume (forall  p_$145 : $ptr :: {$ptr_to_u4(p_$145)} ( $in_range_u4($ref(p_$145)) ==> ($ptr_to_u4(p_$145) == $ref(p_$145)) ));
	assume (forall  p_$146 : $ptr :: {$ptr_to_i4(p_$146)} ( $in_range_i4($ref(p_$146)) ==> ($ptr_to_i4(p_$146) == $ref(p_$146)) ));
	assume (forall  p_$147 : $ptr :: {$ptr_to_u2(p_$147)} ( $in_range_u2($ref(p_$147)) ==> ($ptr_to_u2(p_$147) == $ref(p_$147)) ));
	assume (forall  p_$148 : $ptr :: {$ptr_to_i2(p_$148)} ( $in_range_i2($ref(p_$148)) ==> ($ptr_to_i2(p_$148) == $ref(p_$148)) ));
	assume (forall  p_$149 : $ptr :: {$ptr_to_u1(p_$149)} ( $in_range_u1($ref(p_$149)) ==> ($ptr_to_u1(p_$149) == $ref(p_$149)) ));
	assume (forall  p_$150 : $ptr :: {$ptr_to_i1(p_$150)} ( $in_range_i1($ref(p_$150)) ==> ($ptr_to_i1(p_$150) == $ref(p_$150)) ));
	assume (forall  p1_$3 : $ptr, p2_$1 : $ptr :: {$byte_ptr_subtraction(p1_$3,p2_$1)} {:weight  0}( $byte_ptr_subtraction(p1_$3,p2_$1) == ($ref(p1_$3) - $ref(p2_$1)) ));
	assume (forall  S_$130 : $state, r_$22 : Integer, t_$35 : $ctype :: {$mem(S_$130,$ptr($as_in_range_t(t_$35),r_$22))} ( $good_state(S_$130) ==> $in_range_t(t_$35,$mem(S_$130,$ptr($as_in_range_t(t_$35),r_$22))) ));
	assume (forall  S_$131 : $state, r_$23 : Integer, t_$36 : $ctype :: {$mem(S_$131,$ptr($ptr_to(t_$36),r_$23))} ( $good_state(S_$131) ==> $in_range_phys_ptr($mem(S_$131,$ptr($ptr_to(t_$36),r_$23))) ));
	assume (forall  S_$132 : $state, r_$24 : Integer, t_$37 : $ctype :: {$mem(S_$132,$ptr($spec_ptr_to(t_$37),r_$24))} ( $good_state(S_$132) ==> $in_range_spec_ptr($mem(S_$132,$ptr($spec_ptr_to(t_$37),r_$24))) ));
	assume ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((($_pow2(0) == 1) && ($_pow2(1) == 2)) && ($_pow2(2) == 4)) && ($_pow2(3) == 8)) && ($_pow2(4) == 16)) && ($_pow2(5) == 32)) && ($_pow2(6) == 64)) && ($_pow2(7) == 128)) && ($_pow2(8) == 256)) && ($_pow2(9) == 512)) && ($_pow2(10) == 1024)) && ($_pow2(11) == 2048)) && ($_pow2(12) == 4096)) && ($_pow2(13) == 8192)) && ($_pow2(14) == 16384)) && ($_pow2(15) == 32768)) && ($_pow2(16) == 65536)) && ($_pow2(17) == 131072)) && ($_pow2(18) == 262144)) && ($_pow2(19) == 524288)) && ($_pow2(20) == 1048576)) && ($_pow2(21) == 2097152)) && ($_pow2(22) == 4194304)) && ($_pow2(23) == 8388608)) && ($_pow2(24) == 16777216)) && ($_pow2(25) == 33554432)) && ($_pow2(26) == 67108864)) && ($_pow2(27) == 134217728)) && ($_pow2(28) == 268435456)) && ($_pow2(29) == 536870912)) && ($_pow2(30) == 1073741824)) && ($_pow2(31) == 2147483648)) && ($_pow2(32) == 4294967296)) && ($_pow2(33) == 8589934592)) && ($_pow2(34) == 17179869184)) && ($_pow2(35) == 34359738368)) && ($_pow2(36) == 68719476736)) && ($_pow2(37) == 137438953472)) && ($_pow2(38) == 274877906944)) && ($_pow2(39) == 549755813888)) && ($_pow2(40) == 1099511627776)) && ($_pow2(41) == 2199023255552)) && ($_pow2(42) == 4398046511104)) && ($_pow2(43) == 8796093022208)) && ($_pow2(44) == 17592186044416)) && ($_pow2(45) == 35184372088832)) && ($_pow2(46) == 70368744177664)) && ($_pow2(47) == 140737488355328)) && ($_pow2(48) == 281474976710656)) && ($_pow2(49) == 562949953421312)) && ($_pow2(50) == 1125899906842624)) && ($_pow2(51) == 2251799813685248)) && ($_pow2(52) == 4503599627370496)) && ($_pow2(53) == 9007199254740992)) && ($_pow2(54) == 18014398509481984)) && ($_pow2(55) == 36028797018963968)) && ($_pow2(56) == 72057594037927936)) && ($_pow2(57) == 144115188075855872)) && ($_pow2(58) == 288230376151711744)) && ($_pow2(59) == 576460752303423488)) && ($_pow2(60) == 1152921504606846976)) && ($_pow2(61) == 2305843009213693952)) && ($_pow2(62) == 4611686018427387904)) && ($_pow2(63) == 9223372036854775808);
	assume (forall  bits : Integer, v_$10 : Integer :: {$in_range_ubits(bits,v_$10)} ( $in_range_ubits(bits,v_$10) <==> $in_range(0,v_$10,$_pow2(bits) - 1) ));
	assume (forall  bits_$0 : Integer, v_$11 : Integer :: {$unchecked_sbits(bits_$0,v_$11)} ( $in_range_sbits(bits_$0,$unchecked_sbits(bits_$0,v_$11)) && ($in_range_sbits(bits_$0,v_$11) ==> ($unchecked_sbits(bits_$0,v_$11) == v_$11)) ));
	assume (forall  bits_$1 : Integer, v_$12 : Integer :: {$in_range_sbits(bits_$1,v_$12)} ( $in_range_sbits(bits_$1,v_$12) <==> $in_range(0 - $_pow2(bits_$1 - 1),v_$12,$_pow2(bits_$1 - 1) - 1) ));
	assume (forall  bits_$2 : Integer, v_$13 : Integer :: {$unchecked_ubits(bits_$2,v_$13)} ( $in_range_ubits(bits_$2,$unchecked_ubits(bits_$2,v_$13)) && ($in_range_ubits(bits_$2,v_$13) ==> ($unchecked_ubits(bits_$2,v_$13) == v_$13)) ));
	assume (forall  t_$38 : $ctype, x_$26 : Integer, y_$8 : Integer :: {$unchk_add(t_$38,x_$26,y_$8)} {:weight  0}( $unchk_add(t_$38,x_$26,y_$8) == $unchecked(t_$38,x_$26 + y_$8) ));
	assume (forall  t_$39 : $ctype, x_$27 : Integer, y_$9 : Integer :: {$unchk_sub(t_$39,x_$27,y_$9)} {:weight  0}( $unchk_sub(t_$39,x_$27,y_$9) == $unchecked(t_$39,x_$27 - y_$9) ));
	assume (forall  t_$40 : $ctype, x_$28 : Integer, y_$10 : Integer :: {$unchk_mul(t_$40,x_$28,y_$10)} {:weight  0}( $unchk_mul(t_$40,x_$28,y_$10) == $unchecked(t_$40,x_$28 * y_$10) ));
	assume (forall  y_$5 : Integer, x_$22 : Integer, t_$8 : $ctype :: ( $unchk_div(t_$8,x_$22,y_$5) == $unchecked(t_$8,x_$22 div y_$5) ));
	assume (forall  y_$6 : Integer, x_$23 : Integer, t_$9 : $ctype :: ( $unchk_mod(t_$9,x_$23,y_$6) == $unchecked(t_$9,x_$23 mod y_$6) ));
	assume (forall  x_$29 : Integer, y_$11 : Integer :: {$unchk_add(^^u8,x_$29,y_$11)} ( (($in_range_u8(x_$29) && $in_range_u8(y_$11)) && ((x_$29 + y_$11) > $max.u8)) ==> ($unchk_add(^^u8,x_$29,y_$11) == (((x_$29 + y_$11) - $max.u8) - 1)) ));
	assume (forall  x_$30 : Integer, y_$12 : Integer :: {$unchk_add(^^u4,x_$30,y_$12)} ( (($in_range_u4(x_$30) && $in_range_u4(y_$12)) && ((x_$30 + y_$12) > $max.u8)) ==> ($unchk_add(^^u4,x_$30,y_$12) == (((x_$30 + y_$12) - $max.u4) - 1)) ));
	assume (forall  t_$41 : $ctype, x_$31 : Integer, y_$13 : Integer :: {$_shl(t_$41,x_$31,y_$13)} {:weight  0}( $_shl(t_$41,x_$31,y_$13) == $unchecked(t_$41,x_$31 * $_pow2(y_$13)) ));
	assume (forall  x_$32 : Integer, y_$14 : Integer :: {$_shr(x_$32,y_$14)} {:weight  0}( $_shr(x_$32,y_$14) == (x_$32 div $_pow2(y_$14)) ));
	assume (forall  x_$33 : Integer, from_$0 : Integer, to_$0 : Integer, xs : Integer, val_$0 : Integer :: {$bv_update(x_$33,xs,from_$0,to_$0,val_$0)} ( (((0 <= from_$0) && (from_$0 < to_$0)) && (to_$0 <= xs)) ==> (((0 <= val_$0) && (val_$0 < $_pow2(to_$0 - from_$0))) ==> ((0 <= $bv_update(x_$33,xs,from_$0,to_$0,val_$0)) && ($bv_update(x_$33,xs,from_$0,to_$0,val_$0) < $_pow2(xs)))) ));
	assume (forall  from_$1 : Integer, to_$1 : Integer, xs_$0 : Integer :: {$bv_update(0,xs_$0,from_$1,to_$1,0)} ( (((0 <= from_$1) && (from_$1 < to_$1)) && (to_$1 <= xs_$0)) ==> ($bv_update(0,xs_$0,from_$1,to_$1,0) == 0) ));
	assume (forall  from_$2 : Integer, to_$2 : Integer, val_$1 : Integer, x_$34 : Integer, xs_$1 : Integer :: {$bv_extract_signed($bv_update(x_$34,xs_$1,from_$2,to_$2,val_$1),xs_$1,from_$2,to_$2)} ( (((0 <= from_$2) && (from_$2 < to_$2)) && (to_$2 <= xs_$1)) ==> ((((0 - $_pow2((to_$2 - from_$2) - 1)) <= val_$1) && (val_$1 < $_pow2((to_$2 - from_$2) - 1))) ==> ($bv_extract_signed($bv_update(x_$34,xs_$1,from_$2,to_$2,val_$1),xs_$1,from_$2,to_$2) == val_$1)) ));
	assume (forall  from_$3 : Integer, to_$3 : Integer, val_$2 : Integer, x_$35 : Integer, xs_$2 : Integer :: {$bv_extract_unsigned($bv_update(x_$35,xs_$2,from_$3,to_$3,val_$2),xs_$2,from_$3,to_$3)} ( (((0 <= from_$3) && (from_$3 < to_$3)) && (to_$3 <= xs_$2)) ==> (((0 <= val_$2) && (val_$2 < $_pow2(to_$3 - from_$3))) ==> ($bv_extract_unsigned($bv_update(x_$35,xs_$2,from_$3,to_$3,val_$2),xs_$2,from_$3,to_$3) == val_$2)) ));
	assume (forall  from_$4 : Integer, to_$4 : Integer, x_$36 : Integer, xs_$3 : Integer :: {$bv_extract_signed(x_$36,xs_$3,from_$4,to_$4)} ( (((0 <= from_$4) && (from_$4 < to_$4)) && (to_$4 <= xs_$3)) ==> $in_range(0 - $_pow2((to_$4 - from_$4) - 1),$bv_extract_signed(x_$36,xs_$3,from_$4,to_$4),$_pow2((to_$4 - from_$4) - 1) - 1) ));
	assume (forall  from_$5 : Integer, to_$5 : Integer, x_$37 : Integer, xs_$4 : Integer :: {$bv_extract_unsigned(x_$37,xs_$4,from_$5,to_$5)} ( (((0 <= from_$5) && (from_$5 < to_$5)) && (to_$5 <= xs_$4)) ==> $in_range(0,$bv_extract_unsigned(x_$37,xs_$4,from_$5,to_$5),$_pow2(to_$5 - from_$5) - 1) ));
	assume (forall  from_$6 : Integer, to_$6 : Integer, val_$3 : Integer, x_$38 : Integer, xs_$5 : Integer, from2 : Integer, to2 : Integer :: {$bv_extract_signed($bv_update(x_$38,xs_$5,from_$6,to_$6,val_$3),xs_$5,from2,to2)} ( (((0 <= from_$6) && (from_$6 < to_$6)) && (to_$6 <= xs_$5)) ==> ((((0 <= from2) && (from2 < to2)) && (to2 <= xs_$5)) ==> (((to2 <= from_$6) || (to_$6 <= from2)) ==> ($bv_extract_signed($bv_update(x_$38,xs_$5,from_$6,to_$6,val_$3),xs_$5,from2,to2) == $bv_extract_signed(x_$38,xs_$5,from2,to2)))) ));
	assume (forall  from_$7 : Integer, to_$7 : Integer, val_$4 : Integer, x_$39 : Integer, xs_$6 : Integer, from2_$0 : Integer, to2_$0 : Integer :: {$bv_extract_unsigned($bv_update(x_$39,xs_$6,from_$7,to_$7,val_$4),xs_$6,from2_$0,to2_$0)} ( (((0 <= from_$7) && (from_$7 < to_$7)) && (to_$7 <= xs_$6)) ==> ((((0 <= from2_$0) && (from2_$0 < to2_$0)) && (to2_$0 <= xs_$6)) ==> (((to2_$0 <= from_$7) || (to_$7 <= from2_$0)) ==> ($bv_extract_unsigned($bv_update(x_$39,xs_$6,from_$7,to_$7,val_$4),xs_$6,from2_$0,to2_$0) == $bv_extract_unsigned(x_$39,xs_$6,from2_$0,to2_$0)))) ));
	assume (forall  from_$8 : Integer, to_$8 : Integer, xs_$7 : Integer :: {$bv_extract_signed(0,xs_$7,from_$8,to_$8)} ( (((0 <= from_$8) && (from_$8 < to_$8)) && (to_$8 <= xs_$7)) ==> ($bv_extract_signed(0,xs_$7,from_$8,to_$8) == 0) ));
	assume (forall  from_$9 : Integer, to_$9 : Integer, xs_$8 : Integer :: {$bv_extract_unsigned(0,xs_$8,from_$9,to_$9)} ( (((0 <= from_$9) && (from_$9 < to_$9)) && (to_$9 <= xs_$8)) ==> ($bv_extract_unsigned(0,xs_$8,from_$9,to_$9) == 0) ));
	assume (forall  from_$10 : Integer, to_$10 : Integer, val_$5 : Integer, xs_$9 : Integer :: {$bv_extract_unsigned(val_$5,xs_$9,from_$10,to_$10)} ( ((((0 <= from_$10) && (from_$10 < to_$10)) && (to_$10 <= xs_$9)) && (0 <= val_$5)) ==> ($bv_extract_unsigned(val_$5,xs_$9,from_$10,to_$10) == ((val_$5 div $_pow2(from_$10)) mod $_pow2(to_$10 - from_$10))) ));
	assume (forall  from_$11 : Integer, to_$11 : Integer, val_$6 : Integer, xs_$10 : Integer :: {$bv_extract_signed(val_$6,xs_$10,from_$11,to_$11)} ( (((((0 <= from_$11) && (from_$11 < to_$11)) && (to_$11 <= xs_$10)) && (0 <= val_$6)) && (((val_$6 div $_pow2(from_$11)) mod $_pow2(to_$11 - from_$11)) < $_pow2((to_$11 - from_$11) - 1))) ==> ($bv_extract_signed(val_$6,xs_$10,from_$11,to_$11) == ((val_$6 div $_pow2(from_$11)) mod $_pow2(to_$11 - from_$11))) ));
	assume (forall  from_$12 : Integer, to_$12 : Integer, val_$7 : Integer, xs_$11 : Integer :: {$bv_extract_signed(val_$7,xs_$11,from_$12,to_$12)} ( (((((0 <= from_$12) && (from_$12 < to_$12)) && (to_$12 <= xs_$11)) && (0 <= val_$7)) && (((val_$7 div $_pow2(from_$12)) mod $_pow2(to_$12 - from_$12)) >= $_pow2((to_$12 - from_$12) - 1))) ==> ($bv_extract_signed(val_$7,xs_$11,from_$12,to_$12) == ($_pow2((to_$12 - from_$12) - 1) - ((val_$7 div $_pow2(from_$12)) mod $_pow2(to_$12 - from_$12)))) ));
	assume (forall  val_$8 : Integer :: {$in_range_t(^^i1,val_$8)} ( $in_range_t(^^i1,val_$8) <==> $in_range_i1(val_$8) ));
	assume (forall  val_$9 : Integer :: {$in_range_t(^^i2,val_$9)} ( $in_range_t(^^i2,val_$9) <==> $in_range_i2(val_$9) ));
	assume (forall  val_$10 : Integer :: {$in_range_t(^^i4,val_$10)} ( $in_range_t(^^i4,val_$10) <==> $in_range_i4(val_$10) ));
	assume (forall  val_$11 : Integer :: {$in_range_t(^^i8,val_$11)} ( $in_range_t(^^i8,val_$11) <==> $in_range_i8(val_$11) ));
	assume (forall  val_$12 : Integer :: {$in_range_t(^^u1,val_$12)} ( $in_range_t(^^u1,val_$12) <==> $in_range_u1(val_$12) ));
	assume (forall  val_$13 : Integer :: {$in_range_t(^^u2,val_$13)} ( $in_range_t(^^u2,val_$13) <==> $in_range_u2(val_$13) ));
	assume (forall  val_$14 : Integer :: {$in_range_t(^^u4,val_$14)} ( $in_range_t(^^u4,val_$14) <==> $in_range_u4(val_$14) ));
	assume (forall  val_$15 : Integer :: {$in_range_t(^^u8,val_$15)} ( $in_range_t(^^u8,val_$15) <==> $in_range_u8(val_$15) ));
	assume (forall  val_$16 : Integer :: {$in_range_t(^^mathint,val_$16)} ( $in_range_t(^^mathint,val_$16) ));
	assume (forall  t_$42 : $ctype, val_$17 : Integer :: {$unchecked(t_$42,val_$17)} ( $in_range_t(t_$42,val_$17) ==> ($unchecked(t_$42,val_$17) == val_$17) ));
	assume (forall  t_$43 : $ctype, val_$18 : Integer :: {$unchecked(t_$43,val_$18)} ( $in_range_t(t_$43,$unchecked(t_$43,val_$18)) ));
	assume (forall  val_$19 : Integer :: {$unchecked(^^u1,$unchecked(^^i1,val_$19))} ( $in_range_u1(val_$19) ==> ($unchecked(^^u1,$unchecked(^^i1,val_$19)) == val_$19) ));
	assume (forall  val_$20 : Integer :: {$unchecked(^^u2,$unchecked(^^i2,val_$20))} ( $in_range_u2(val_$20) ==> ($unchecked(^^u2,$unchecked(^^i2,val_$20)) == val_$20) ));
	assume (forall  val_$21 : Integer :: {$unchecked(^^u4,$unchecked(^^i4,val_$21))} ( $in_range_u4(val_$21) ==> ($unchecked(^^u4,$unchecked(^^i4,val_$21)) == val_$21) ));
	assume (forall  val_$22 : Integer :: {$unchecked(^^u8,$unchecked(^^i8,val_$22))} ( $in_range_u8(val_$22) ==> ($unchecked(^^u8,$unchecked(^^i8,val_$22)) == val_$22) ));
	assume (forall  val_$23 : Integer :: {$unchecked(^^i1,$unchecked(^^u1,val_$23))} ( $in_range_i1(val_$23) ==> ($unchecked(^^i1,$unchecked(^^u1,val_$23)) == val_$23) ));
	assume (forall  val_$24 : Integer :: {$unchecked(^^i2,$unchecked(^^u2,val_$24))} ( $in_range_i2(val_$24) ==> ($unchecked(^^i2,$unchecked(^^u2,val_$24)) == val_$24) ));
	assume (forall  val_$25 : Integer :: {$unchecked(^^i4,$unchecked(^^u4,val_$25))} ( $in_range_i4(val_$25) ==> ($unchecked(^^i4,$unchecked(^^u4,val_$25)) == val_$25) ));
	assume (forall  val_$26 : Integer :: {$unchecked(^^i8,$unchecked(^^u8,val_$26))} ( $in_range_i8(val_$26) ==> ($unchecked(^^i8,$unchecked(^^u8,val_$26)) == val_$26) ));
	assume $unchecked(^^u4,0 - 1) == $max.u4;
	assume $unchecked(^^u4,$max.u4 + 1) == 0;
	assume $unchecked(^^u8,0 - 1) == $max.u8;
	assume $unchecked(^^u8,$max.u8 + 1) == 0;
	assume (forall  t_$44 : $ctype, x_$40 : Integer, y_$15 : Integer, z_$0 : Integer :: {x_$40 mod $_pow2(y_$15),$_and(t_$44,x_$40,z_$0)} ( (($in_range_t(t_$44,x_$40) && $in_range_t(t_$44,$_pow2(y_$15) - 1)) && (x_$40 >= 0)) ==> ((x_$40 mod $_pow2(y_$15)) == $_and(t_$44,x_$40,$_pow2(y_$15) - 1)) ));
	assume (forall  i_$25 : Integer, j_$0 : Integer :: {i_$25 div j_$0} ( ((0 <= i_$25) && (0 < j_$0)) ==> ((i_$25 div j_$0) <= i_$25) ));
	assume (forall  i_$26 : Integer, j_$1 : Integer :: {i_$26 div j_$1} ( ((i_$26 > 0) && (j_$1 > 0)) ==> (((i_$26 - j_$1) < ((i_$26 div j_$1) * j_$1)) && (((i_$26 div j_$1) * j_$1) <= i_$26)) ));
	assume (forall  i_$27 : Integer :: {i_$27 div i_$27} ( (!(i_$27 == 0)) ==> ((i_$27 div i_$27) == 1) ));
	assume (forall  i_$28 : Integer :: {0 div i_$28} ( (!(i_$28 == 0)) ==> ((0 div i_$28) == 0) ));
	assume (forall  x_$41 : Integer, y_$16 : Integer :: {x_$41 mod y_$16} {x_$41 div y_$16} ( (x_$41 mod y_$16) == (x_$41 - ((x_$41 div y_$16) * y_$16)) ));
	assume (forall  x_$42 : Integer, y_$17 : Integer :: {x_$42 mod y_$17} ( ((0 <= x_$42) && (0 < y_$17)) ==> ((0 <= (x_$42 mod y_$17)) && ((x_$42 mod y_$17) < y_$17)) ));
	assume (forall  x_$43 : Integer, y_$18 : Integer :: {x_$43 mod y_$18} ( ((0 <= x_$43) && (y_$18 < 0)) ==> ((0 <= (x_$43 mod y_$18)) && ((x_$43 mod y_$18) < (0 - y_$18))) ));
	assume (forall  x_$44 : Integer, y_$19 : Integer :: {x_$44 mod y_$19} ( ((x_$44 <= 0) && (0 < y_$19)) ==> (((0 - y_$19) < (x_$44 mod y_$19)) && ((x_$44 mod y_$19) <= 0)) ));
	assume (forall  x_$45 : Integer, y_$20 : Integer :: {x_$45 mod y_$20} ( ((x_$45 <= 0) && (y_$20 < 0)) ==> ((y_$20 < (x_$45 mod y_$20)) && ((x_$45 mod y_$20) <= 0)) ));
	assume (forall  t_$45 : $ctype, x_$46 : Integer, y_$21 : Integer :: {$_and(t_$45,x_$46,y_$21)} ( ((0 <= x_$46) && $in_range_t(t_$45,x_$46)) ==> ((0 <= $_and(t_$45,x_$46,y_$21)) && ($_and(t_$45,x_$46,y_$21) <= x_$46)) ));
	assume (forall  t_$46 : $ctype, x_$47 : Integer, y_$22 : Integer :: {$_and(t_$46,x_$47,y_$22)} ( ((((0 <= x_$47) && (0 <= y_$22)) && $in_range_t(t_$46,x_$47)) && $in_range_t(t_$46,y_$22)) ==> (($_and(t_$46,x_$47,y_$22) <= x_$47) && ($_and(t_$46,x_$47,y_$22) <= y_$22)) ));
	assume (forall  t_$47 : $ctype, x_$48 : Integer, y_$23 : Integer :: {$_or(t_$47,x_$48,y_$23)} ( ((((0 <= x_$48) && (0 <= y_$23)) && $in_range_t(t_$47,x_$48)) && $in_range_t(t_$47,y_$23)) ==> ((0 <= $_or(t_$47,x_$48,y_$23)) && ($_or(t_$47,x_$48,y_$23) <= (x_$48 + y_$23))) ));
	assume (forall  t_$48 : $ctype, x_$49 : Integer, y_$24 : Integer :: {$_or(t_$48,x_$49,y_$24)} ( ((((0 <= x_$49) && (0 <= y_$24)) && $in_range_t(t_$48,x_$49)) && $in_range_t(t_$48,y_$24)) ==> ((x_$49 <= $_or(t_$48,x_$49,y_$24)) && (y_$24 <= $_or(t_$48,x_$49,y_$24))) ));
	assume (forall  t_$49 : $ctype, x_$50 : Integer, y_$25 : Integer, z_$1 : Integer :: {$_or(t_$49,x_$50,y_$25),$_pow2(z_$1)} ( ((((((((0 <= x_$50) && (0 <= y_$25)) && (0 <= z_$1)) && (z_$1 < 64)) && (x_$50 < $_pow2(z_$1))) && (y_$25 < $_pow2(z_$1))) && $in_range_t(t_$49,x_$50)) && $in_range_t(t_$49,y_$25)) ==> ($_or(t_$49,x_$50,y_$25) < $_pow2(z_$1)) ));
	assume (forall  t_$50 : $ctype, x_$51 : Integer, y_$26 : Integer :: {$_or(t_$50,x_$51,y_$26)} ( ($in_range_u1(x_$51) && $in_range_u1(y_$26)) ==> $in_range_u1($_or(t_$50,x_$51,y_$26)) ));
	assume (forall  t_$51 : $ctype, x_$52 : Integer, y_$27 : Integer :: {$_or(t_$51,x_$52,y_$27)} ( ($in_range_u2(x_$52) && $in_range_u2(y_$27)) ==> $in_range_u2($_or(t_$51,x_$52,y_$27)) ));
	assume (forall  t_$52 : $ctype, x_$53 : Integer, y_$28 : Integer :: {$_or(t_$52,x_$53,y_$28)} ( ($in_range_u4(x_$53) && $in_range_u4(y_$28)) ==> $in_range_u4($_or(t_$52,x_$53,y_$28)) ));
	assume (forall  t_$53 : $ctype, x_$54 : Integer, y_$29 : Integer :: {$_or(t_$53,x_$54,y_$29)} ( ($in_range_u8(x_$54) && $in_range_u8(y_$29)) ==> $in_range_u8($_or(t_$53,x_$54,y_$29)) ));
	assume (forall  t_$54 : $ctype, x_$55 : Integer, y_$30 : Integer :: {$_and(t_$54,x_$55,y_$30)} ( ($in_range_u1(x_$55) && $in_range_u1(y_$30)) ==> $in_range_u1($_and(t_$54,x_$55,y_$30)) ));
	assume (forall  t_$55 : $ctype, x_$56 : Integer, y_$31 : Integer :: {$_and(t_$55,x_$56,y_$31)} ( ($in_range_u2(x_$56) && $in_range_u2(y_$31)) ==> $in_range_u2($_and(t_$55,x_$56,y_$31)) ));
	assume (forall  t_$56 : $ctype, x_$57 : Integer, y_$32 : Integer :: {$_and(t_$56,x_$57,y_$32)} ( ($in_range_u4(x_$57) && $in_range_u4(y_$32)) ==> $in_range_u4($_and(t_$56,x_$57,y_$32)) ));
	assume (forall  t_$57 : $ctype, x_$58 : Integer, y_$33 : Integer :: {$_and(t_$57,x_$58,y_$33)} ( ($in_range_u8(x_$58) && $in_range_u8(y_$33)) ==> $in_range_u8($_and(t_$57,x_$58,y_$33)) ));
	assume (forall  t_$58 : $ctype, x_$59 : Integer, y_$34 : Integer :: {$_xor(t_$58,x_$59,y_$34)} ( ($in_range_u1(x_$59) && $in_range_u1(y_$34)) ==> $in_range_u1($_xor(t_$58,x_$59,y_$34)) ));
	assume (forall  t_$59 : $ctype, x_$60 : Integer, y_$35 : Integer :: {$_xor(t_$59,x_$60,y_$35)} ( ($in_range_u2(x_$60) && $in_range_u2(y_$35)) ==> $in_range_u2($_xor(t_$59,x_$60,y_$35)) ));
	assume (forall  t_$60 : $ctype, x_$61 : Integer, y_$36 : Integer :: {$_xor(t_$60,x_$61,y_$36)} ( ($in_range_u4(x_$61) && $in_range_u4(y_$36)) ==> $in_range_u4($_xor(t_$60,x_$61,y_$36)) ));
	assume (forall  t_$61 : $ctype, x_$62 : Integer, y_$37 : Integer :: {$_xor(t_$61,x_$62,y_$37)} ( ($in_range_u8(x_$62) && $in_range_u8(y_$37)) ==> $in_range_u8($_xor(t_$61,x_$62,y_$37)) ));
	assume (forall  t_$62 : $ctype, x_$63 : Integer :: {$_not(t_$62,x_$63)} ( $in_range_t(t_$62,$_not(t_$62,x_$63)) ));
	assume (forall  t_$63 : $ctype, x_$64 : Integer :: {$_or(t_$63,x_$64,$_not(t_$63,x_$64))} ( $_or(t_$63,x_$64,$_not(t_$63,x_$64)) == $_not(t_$63,0) ));
	assume (forall  t_$64 : $ctype, x_$65 : Integer :: {$_and(t_$64,x_$65,$_not(t_$64,x_$65))} ( $_and(t_$64,x_$65,$_not(t_$64,x_$65)) == 0 ));
	assume (forall  t_$65 : $ctype, x_$66 : Integer :: {$_or(t_$65,x_$66,0)} ( $in_range_t(t_$65,x_$66) ==> ($_or(t_$65,x_$66,0) == x_$66) ));
	assume (forall  t_$66 : $ctype, x_$67 : Integer :: {$_or(t_$66,x_$67,$_not(t_$66,0))} ( $_or(t_$66,x_$67,$_not(t_$66,0)) == $_not(t_$66,0) ));
	assume (forall  t_$67 : $ctype, x_$68 : Integer :: {$_or(t_$67,x_$68,x_$68)} ( $in_range_t(t_$67,x_$68) ==> ($_or(t_$67,x_$68,x_$68) == x_$68) ));
	assume (forall  t_$68 : $ctype, x_$69 : Integer :: {$_and(t_$68,x_$69,0)} ( $_and(t_$68,x_$69,0) == 0 ));
	assume (forall  t_$69 : $ctype, x_$70 : Integer :: {$_and(t_$69,x_$70,$_not(t_$69,0))} ( $in_range_t(t_$69,x_$70) ==> ($_and(t_$69,x_$70,$_not(t_$69,0)) == x_$70) ));
	assume (forall  t_$70 : $ctype, x_$71 : Integer :: {$_and(t_$70,x_$71,x_$71)} ( $in_range_t(t_$70,x_$71) ==> ($_and(t_$70,x_$71,x_$71) == x_$71) ));
	assume (forall  t_$71 : $ctype, x_$72 : Integer, y_$38 : Integer :: {$_and(t_$71,$_or(t_$71,x_$72,y_$38),y_$38)} ( $_and(t_$71,$_or(t_$71,x_$72,y_$38),y_$38) == y_$38 ));
	assume (forall  t_$72 : $ctype, x_$73 : Integer, y_$39 : Integer :: {$_and(t_$72,$_or(t_$72,x_$73,y_$39),x_$73)} ( $_and(t_$72,$_or(t_$72,x_$73,y_$39),x_$73) == x_$73 ));
	assume (forall  t_$73 : $ctype, x_$74 : Integer :: {$_xor(t_$73,x_$74,0)} ( $in_range_t(t_$73,x_$74) ==> ($_xor(t_$73,x_$74,0) == x_$74) ));
	assume (forall  t_$74 : $ctype, x_$75 : Integer :: {$_xor(t_$74,x_$75,x_$75)} ( $_xor(t_$74,x_$75,x_$75) == 0 ));
	assume (forall  t_$75 : $ctype, x_$76 : Integer :: {$_xor(t_$75,x_$76,$_not(t_$75,0))} ( $_xor(t_$75,x_$76,$_not(t_$75,0)) == $_not(t_$75,x_$76) ));
	assume (forall  t_$76 : $ctype, x_$77 : Integer :: {$_not(t_$76,$_not(t_$76,x_$77))} ( $in_range_t(t_$76,x_$77) ==> ($_not(t_$76,$_not(t_$76,x_$77)) == x_$77) ));
	assume (forall  t_$77 : $ctype, x_$78 : Integer, y_$40 : Integer :: {$_or(t_$77,x_$78,y_$40)} ( $_or(t_$77,x_$78,y_$40) == $_or(t_$77,y_$40,x_$78) ));
	assume (forall  t_$78 : $ctype, x_$79 : Integer, y_$41 : Integer :: {$_xor(t_$78,x_$79,y_$41)} ( $_xor(t_$78,x_$79,y_$41) == $_xor(t_$78,y_$41,x_$79) ));
	assume (forall  t_$79 : $ctype, x_$80 : Integer, y_$42 : Integer :: {$_and(t_$79,x_$80,y_$42)} ( $_and(t_$79,x_$80,y_$42) == $_and(t_$79,y_$42,x_$80) ));
	assume (forall  x_$81 : Integer, y_$43 : Integer :: {$op_mul(x_$81,y_$43)} {:weight  0}( $op_mul(x_$81,y_$43) == (x_$81 * y_$43) ));
	assume (forall  t_$80 : $ctype, x_$82 : Integer, y_$44 : Integer :: {$op_add(t_$80,x_$82,y_$44)} {:weight  0}( $op_add(t_$80,x_$82,y_$44) == (x_$82 + y_$44) ));
	assume (forall  t_$81 : $ctype, x_$83 : Integer, y_$45 : Integer :: {$op_sub(t_$81,x_$83,y_$45)} {:weight  0}( $op_sub(t_$81,x_$83,y_$45) == (x_$83 - y_$45) ));
	assume (forall  t_$82 : $ctype, x_$84 : Integer, y_$46 : Integer :: {$op_div(t_$82,x_$84,y_$46)} {:weight  0}( $op_div(t_$82,x_$84,y_$46) == (x_$84 div y_$46) ));
	assume (forall  t_$83 : $ctype, x_$85 : Integer, y_$47 : Integer :: {$op_lt(t_$83,x_$85,y_$47)} {:weight  0}( $op_lt(t_$83,x_$85,y_$47) <==> (x_$85 < y_$47) ));
	assume (forall  t_$84 : $ctype, x_$86 : Integer, y_$48 : Integer :: {$op_le(t_$84,x_$86,y_$48)} {:weight  0}( $op_le(t_$84,x_$86,y_$48) <==> (x_$86 <= y_$48) ));
	assume (forall  t_$85 : $ctype, x_$87 : Integer, y_$49 : Integer :: {$op_gt(t_$85,x_$87,y_$49)} {:weight  0}( $op_gt(t_$85,x_$87,y_$49) <==> (x_$87 > y_$49) ));
	assume (forall  t_$86 : $ctype, x_$88 : Integer, y_$50 : Integer :: {$op_ge(t_$86,x_$88,y_$50)} {:weight  0}( $op_ge(t_$86,x_$88,y_$50) <==> (x_$88 >= y_$50) ));
	assume (forall  id_$0 : Integer, length : Integer :: {$get_string_literal(id_$0,length)} ( $is($get_string_literal(id_$0,length),^^u1) ));
	assume (forall  id_$1 : Integer, length_$0 : Integer, S_$133 : $state :: {$typed(S_$133,$get_string_literal(id_$1,length_$0))} {$is_array(S_$133,$get_string_literal(id_$1,length_$0),^^u1,length_$0)} ( $good_state(S_$133) ==> ($typed(S_$133,$get_string_literal(id_$1,length_$0)) && $is_thread_local_array(S_$133,$get_string_literal(id_$1,length_$0),^^u1,length_$0)) ));
	assume (forall  no : Integer, t_$87 : $ctype :: {$get_fnptr(no,t_$87)} ( $get_fnptr(no,t_$87) == $ptr(t_$87,$get_fnptr_ref(no)) ));
	assume (forall  no_$0 : Integer :: ( $get_fnptr_inv($get_fnptr_ref(no_$0)) == no_$0 ));
	assume (forall  S_$134 : $state, no_$1 : Integer, t_$88 : $ctype :: {$ts(S_$134,$get_fnptr(no_$1,t_$88))} {$st(S_$134,$get_fnptr(no_$1,t_$88))} ( ($is_fnptr_type(t_$88) && $good_state(S_$134)) ==> $mutable(S_$134,$get_fnptr(no_$1,t_$88)) ));
	assume (forall  t_$89 : $ctype :: {$is_math_type(t_$89)} ( $is_math_type(t_$89) ==> $is_primitive(t_$89) ));
	assume (forall  t_$90 : $ctype :: {$is_fnptr_type(t_$90)} ( $is_fnptr_type(t_$90) ==> $is_primitive(t_$90) ));
	assume (forall  S_$135 : $state, c_$7 : $ptr :: {$full_stop(S_$135),$valid_claim(S_$135,c_$7)} ( ($full_stop(S_$135) && $closed(S_$135,c_$7)) ==> $valid_claim(S_$135,c_$7) ));
	assume (forall  S_$136 : $state, c_$8 : $ptr :: {$valid_claim(S_$136,c_$8)} ( $valid_claim(S_$136,c_$8) ==> ($closed(S_$136,c_$8) && $invok_state(S_$136)) ));
	assume (forall  tok : $token, c : $ptr, #s1_$3 : $state :: ( $claim_initial_assumptions(#s1_$3,c,tok) == (($good_state_ext(tok,#s1_$3) && $closed_is_transitive(#s1_$3)) && true) ));
	assume (forall  tok_$0 : $token, c_$0 : $ptr, #s2_$2 : $state, #s1_$4 : $state :: ( $claim_transitivity_assumptions(#s1_$4,#s2_$2,c_$0,tok_$0) == ((((((($full_stop_ext(tok_$0,#s1_$4) && $good_state_ext(tok_$0,#s2_$2)) && $closed_is_transitive(#s1_$4)) && $closed_is_transitive(#s2_$2)) && $forall_inv2_when_closed(#s1_$4,#s2_$2)) && $valid_claim(#s1_$4,c_$0)) && $closed(#s2_$2,c_$0)) && true) ));
	assume (forall  S1_$4 : $state, S0_$1 : $state :: ( $valid_claim_impl(S0_$1,S1_$4) == ((forall  r : Integer :: {$closed(S1_$4,$ptr(^^claim,r))} ( ($closed(S0_$1,$ptr(^^claim,r)) && $closed(S1_$4,$ptr(^^claim,r))) ==> $valid_claim(S1_$4,$ptr(^^claim,r)) ))) ));
	assume (forall  c1 : $ptr, c2 : $ptr :: {$claims_claim(c1,c2)} ( (($is(c1,^^claim) && $is(c2,^^claim)) && ((forall  S_$137 : $state :: ( $valid_claim(S_$137,c1) ==> $closed(S_$137,c2) )))) ==> $claims_claim(c1,c2) ));
	assume (forall  S_$138 : $state, c1_$0 : $ptr, c2_$0 : $ptr :: {$valid_claim(S_$138,c1_$0),$claims_claim(c1_$0,c2_$0)} ( ($valid_claim(S_$138,c1_$0) && $claims_claim(c1_$0,c2_$0)) ==> $valid_claim(S_$138,c2_$0) ));
	assume (forall  S_$139 : $state, c_$9 : $ptr, o_$0 : $ptr :: {$closed(S_$139,c_$9),$claims_obj(c_$9,o_$0)} ( $good_state(S_$139) ==> (($claims_obj(c_$9,o_$0) && $closed(S_$139,c_$9)) ==> (($instantiate_ptrset($owns(S_$139,o_$0)) && $closed(S_$139,o_$0)) && ($ref_cnt(S_$139,o_$0) > 0))) ));
	assume (forall  S_$140 : $state, c_$10 : $ptr, o_$1 : $ptr :: {$valid_claim(S_$140,c_$10),$claims_obj(c_$10,o_$1)} ( ($valid_claim(S_$140,c_$10) && $claims_obj(c_$10,o_$1)) ==> $inv(S_$140,o_$1,$typ(o_$1)) ));
	assume (forall  S_$141 : $state, c_$11 : $ptr, r_$25 : Integer :: {$valid_claim(S_$141,c_$11),$claims_obj(c_$11,$ptr(^^claim,r_$25))} ( ($valid_claim(S_$141,c_$11) && $claims_obj(c_$11,$ptr(^^claim,r_$25))) ==> $valid_claim(S_$141,$ptr(^^claim,r_$25)) ));
	assume (forall  S_$142 : $state, p_$151 : $ptr :: {$not_shared(S_$142,p_$151)} {:weight  0}( $not_shared(S_$142,p_$151) <==> ($wrapped(S_$142,p_$151,$typ(p_$151)) && ((!$is_claimable($typ(p_$151))) || ($ref_cnt(S_$142,p_$151) == 0))) ));
	assume (forall  s_$18 : $state, p_$152 : $ptr :: {$claimed_closed(s_$18,p_$152)} {:weight  0}( $claimed_closed(s_$18,p_$152) <==> $closed(s_$18,p_$152) ));
	assume (forall  S_$143 : $state, p_$153 : $ptr :: {$invok_state(S_$143),$claimed_closed(S_$143,p_$153)} ( ($invok_state(S_$143) && $claimed_closed(S_$143,p_$153)) ==> $inv(S_$143,p_$153,$typ(p_$153)) ));
	assume $no_claim == $ptr(^^claim,0);
	assume (forall  the_new : $ptr, the_old : $ptr :: {$claims_upgrade(the_new,the_old)} ( $claims_upgrade(the_new,the_old) <==> ((forall  o_$2 : $ptr :: ( $claims_obj(the_old,o_$2) ==> $claims_obj(the_new,o_$2) ))) ));
	assume (forall  S_$144 : $state, p_$154 : $ptr :: {$ref_cnt(S_$144,p_$154)} {:weight  0}( $ref_cnt(S_$144,p_$154) == $st_ref_cnt($st(S_$144,p_$154)) ));
	assume $is_claimable(^^claim);
	assume (forall  S_$145 : $state, c_$12 : $ptr, o_$3 : $ptr :: {$account_claim(S_$145,c_$12,o_$3)} ( $account_claim(S_$145,c_$12,o_$3) <==> (($good_state(S_$145) && $closed(S_$145,c_$12)) && $claims_obj(c_$12,o_$3)) ));
	assume (forall  S_$146 : $state, c_$13 : $ptr, o_$4 : $ptr :: {$account_claim(S_$146,c_$13,o_$4)} ( $account_claim(S_$146,c_$13,o_$4) ==> ((($claim_no(S_$146,o_$4,$claim_idx(o_$4,c_$13)) == c_$13) && (0 <= $claim_idx(o_$4,c_$13))) && ($claim_idx(o_$4,c_$13) < $ref_cnt(S_$146,o_$4))) ));
	assume (forall  s_$3 : $state :: ( $can_use_all_frame_axioms(s_$3) == ((forall  f_$8 : $pure_function :: {$frame_level(f_$8)} ( $frame_level(f_$8) < $current_frame_level ))) ));
	assume (forall  f_$9 : $pure_function :: ( $can_use_frame_axiom_of(f_$9) == ($frame_level(f_$9) < $current_frame_level) ));
	assume (forall  s_$4 : $state :: ( $can_use_all_pure_post_axioms(s_$4) == ((forall  f_$10 : $pure_function :: {$frame_level(f_$10)} ( $pure_post_level(f_$10) < $current_frame_level ))) ));
	assume (forall  f_$11 : $pure_function :: ( $can_use_pure_post_axiom_of(f_$11) == ($pure_post_level(f_$11) < $current_pure_post_level) ));
	assume (forall  p_$155 : $ptrset :: ( $int_to_ptrset($ptrset_to_int(p_$155)) == p_$155 ));
	assume (forall  p_$156 : $version :: ( $int_to_version($version_to_int(p_$156)) == p_$156 ));
	assume (forall  p_$157 : $vol_version :: ( $int_to_vol_version($vol_version_to_int(p_$157)) == p_$157 ));
	assume (forall  p_$158 : $ptr :: ( $int_to_ptr($ptr_to_int(p_$158)) == p_$158 ));
	assume (forall  S1_$14 : $state, S2_$10 : $state, W : $ptrset :: {$updated_only_values(S1_$14,S2_$10,W)} ( ((forall  p_$159 : $ptr :: {$dont_instantiate(p_$159)} ( ($is_primitive($typ(p_$159)) || $is_non_primitive($typ(p_$159))) ==> (($typed(S1_$14,p_$159) && (!$irrelevant(S1_$14,p_$159))) ==> ($mem_eq(S1_$14,S2_$10,p_$159) || $set_in(p_$159,W))) ))) ==> $updated_only_values(S1_$14,S2_$10,W) ));
	assume (forall  S1_$15 : $state, S2_$11 : $state, W_$0 : $ptrset :: {$updated_only_domains(S1_$15,S2_$11,W_$0)} ( ((forall  p_$160 : $ptr :: {$dont_instantiate(p_$160)} ( ($set_in(p_$160,W_$0) && (!$is_primitive_ch($typ(p_$160)))) ==> ($mem_eq(S1_$15,S2_$11,p_$160) || $domain_updated_at(S1_$15,S2_$11,p_$160,W_$0)) ))) ==> $updated_only_domains(S1_$15,S2_$11,W_$0) ));
	assume (forall  S1_$16 : $state, S2_$12 : $state, p_$161 : $ptr, W_$1 : $ptrset :: {$domain_updated_at(S1_$16,S2_$12,p_$161,W_$1)} ( $domain_updated_at(S1_$16,S2_$12,p_$161,W_$1) <==> (((forall  q_$24 : $ptr :: {$fetch_from_domain($read_version(S2_$12,p_$161),q_$24)} ( ($is_primitive_ch($typ(q_$24)) && (!$set_in(q_$24,W_$1))) ==> ($fetch_from_domain($read_version(S1_$16,p_$161),q_$24) == $fetch_from_domain($read_version(S2_$12,p_$161),q_$24)) ))) && ($domain(S1_$16,p_$161) == $domain(S2_$12,p_$161))) ));
	assume $seclbl.top <==> true;
	assume $seclbl.bot <==> false;
	assume (forall  l2 : Boolean, l1 : Boolean :: ( $seclbl.leq(l1,l2) == (l1 ==> l2) ));
	assume (forall  l2_$0 : Boolean, l1_$0 : Boolean :: ( $seclbl.meet(l1_$0,l2_$0) == (l1_$0 && l2_$0) ));
	assume (forall  l2_$1 : Boolean, l1_$1 : Boolean :: ( $seclbl.join(l1_$1,l2_$1) == (l1_$1 || l2_$1) ));
	assume (forall  p_$162 : $ptr :: ( $lblset.top[p_$162] <==> $seclbl.top ));
	assume (forall  p_$163 : $ptr :: ( $lblset.bot[p_$163] <==> $seclbl.bot ));
	assume (forall  l2_$2 : $labelset, l1_$2 : $labelset :: ( $lblset.leq(l1_$2,l2_$2) == ((forall  p_$52 : $ptr :: ( $seclbl.leq(l1_$2[p_$52],l2_$2[p_$52]) ))) ));
	assume (forall  l1_$3 : $labelset, l2_$3 : $labelset, p_$164 : $ptr :: ( $lblset.meet(l1_$3,l2_$3)[p_$164] <==> $seclbl.meet(l1_$3[p_$164],l2_$3[p_$164]) ));
	assume (forall  l1_$4 : $labelset, l2_$4 : $labelset, p_$165 : $ptr :: ( $lblset.join(l1_$4,l2_$4)[p_$165] <==> $seclbl.join(l1_$4[p_$165],l2_$4[p_$165]) ));
	assume (forall  fd : $flowdata, l_$5 : $labelset :: {:weight  0}( $select.flow.label($store.flow.label(fd,l_$5)) == l_$5 ));
	assume (forall  fd_$0 : $flowdata, l_$6 : $labelset :: {:weight  0}( $select.flow.meta($store.flow.meta(fd_$0,l_$6)) == l_$6 ));
	assume (forall  fd_$1 : $flowdata, l_$7 : $labelset :: {:weight  0}( $select.flow.label($store.flow.meta(fd_$1,l_$7)) == $select.flow.label(fd_$1) ));
	assume (forall  fd_$2 : $flowdata, l_$8 : $labelset :: {:weight  0}( $select.flow.meta($store.flow.label(fd_$2,l_$8)) == $select.flow.meta(fd_$2) ));
	assume (forall  M_$6 : $memory_t, p_$166 : $ptr, q_$25 : $ptr, fd_$3 : $flowdata :: {:weight  0}( $in_full_extent_of(q_$25,p_$166) ==> ($select.flow.data($store.flow.data(M_$6,p_$166,fd_$3),q_$25) == fd_$3) ));
	assume (forall  M_$7 : $memory_t, p_$167 : $ptr, q_$26 : $ptr, fd_$4 : $flowdata :: {:weight  0}( $in_full_extent_of(q_$26,p_$167) || ($select.flow.data($store.flow.data(M_$7,p_$167,fd_$4),q_$26) == $select.flow.data(M_$7,q_$26)) ));
	assume (forall  M_$8 : $map_t..$ptr_to..^^void.^^bool, p_$168 : $ptr, v_$14 : Boolean :: {:weight  0}( $select.$map_t..$ptr_to..^^void.^^bool($store.$map_t..$ptr_to..^^void.^^bool(M_$8,p_$168,v_$14),p_$168) <==> v_$14 ));
	assume (forall  M_$9 : $map_t..$ptr_to..^^void.^^bool, p_$169 : $ptr, v_$15 : Boolean, q_$27 : $ptr :: {:weight  0}( (!(p_$169 == q_$27)) ==> ($select.$map_t..$ptr_to..^^void.^^bool($store.$map_t..$ptr_to..^^void.^^bool(M_$9,q_$27,v_$15),p_$169) <==> $select.$map_t..$ptr_to..^^void.^^bool(M_$9,p_$169)) ));
	assume (forall  M1_$2 : $map_t..$ptr_to..^^void.^^bool, M2_$2 : $map_t..$ptr_to..^^void.^^bool :: {$eq.$map_t..$ptr_to..^^void.^^bool(M1_$2,M2_$2)} {:weight  0}( ((forall  p_$170 : $ptr :: {:weight  0}( $select.$map_t..$ptr_to..^^void.^^bool(M1_$2,p_$170) <==> $select.$map_t..$ptr_to..^^void.^^bool(M2_$2,p_$170) ))) ==> $eq.$map_t..$ptr_to..^^void.^^bool(M1_$2,M2_$2) ));
	assume (forall  M1_$3 : $map_t..$ptr_to..^^void.^^bool, M2_$3 : $map_t..$ptr_to..^^void.^^bool :: {$eq.$map_t..$ptr_to..^^void.^^bool(M1_$3,M2_$3)} {:weight  0}( $eq.$map_t..$ptr_to..^^void.^^bool(M1_$3,M2_$3) ==> (M1_$3 == M2_$3) ));
	assume $int_to_map_t..ptr_to..^^void.^^bool(0) == $zero.$map_t..$ptr_to..^^void.^^bool;
	assume (forall  p_$171 : $ptr :: {:weight  0}( $select.$map_t..$ptr_to..^^void.^^bool($zero.$map_t..$ptr_to..^^void.^^bool,p_$171) <==> false ));
	assume (forall  r1_$2 : $record, r2_$2 : $record, f_$32 : $field, R : $ctype :: {$rec_base_eq($rec_fetch(r1_$2,f_$32),$rec_fetch(r2_$2,f_$32)),$is_record_field(R,f_$32,$map_t($ptr_to(^^void),^^bool))} {:weight  0}( $eq.$map_t..$ptr_to..^^void.^^bool($int_to_map_t..ptr_to..^^void.^^bool($rec_fetch(r1_$2,f_$32)),$int_to_map_t..ptr_to..^^void.^^bool($rec_fetch(r2_$2,f_$32))) ==> $rec_base_eq($rec_fetch(r1_$2,f_$32),$rec_fetch(r2_$2,f_$32)) ));
	assume (forall  #x_$0 : $map_t..$ptr_to..^^void.^^bool :: ( #x_$0 == $int_to_map_t..ptr_to..^^void.^^bool($map_t..ptr_to..^^void.^^bool_to_int(#x_$0)) ));
	assume $function_arg_type(cf#classifier#default,0,$map_t($ptr_to(^^void),^^bool));
	assume (forall  p_$172 : $ptr :: {$select.$map_t..$ptr_to..^^void.^^bool(#classifier#default(),p_$172)} ( $select.$map_t..$ptr_to..^^void.^^bool(#classifier#default(),p_$172) <==> false ));
	assume (forall  p_$173 : $ptr :: ( $ptrclub.empty[p_$173] <==> false ));
	assume (forall  c_$1 : $ptrclub, p_$53 : $ptr :: ( $ptrclub.isMember(p_$53,c_$1) == $ptrclub.members(c_$1)[p_$53] ));
	assume (forall  c_$14 : [$ptr]Boolean, l_$9 : $labelset :: {:weight  0}( $ptrclub.members($ptrclub.construct(c_$14,l_$9)) == c_$14 ));
	assume (forall  c_$15 : [$ptr]Boolean, l_$10 : $labelset :: {:weight  0}( $ptrclub.bound($ptrclub.construct(c_$15,l_$10)) == l_$10 ));
	assume (forall  c_$16 : $ptrclub, p_$174 : $ptr :: {:weight  0}( $ptrclub.members($ptrclub.addMember(p_$174,c_$16)) == $ptrclub.members(c_$16)[p_$174 := true] ));
	assume (forall  c_$17 : $ptrclub, p_$175 : $ptr :: {:weight  0}( $ptrclub.bound($ptrclub.addMember(p_$175,c_$17)) == $ptrclub.bound(c_$17) ));
	assume (forall  p1_$4 : $ptr, p2_$2 : $ptr :: ( $ptr_eq(p1_$4,p2_$2) ==> $lblset.leq($ptrclub.compare(p1_$4,p2_$2),$lblset.bot) ));
	assume (forall  p1_$5 : $ptr, p2_$3 : $ptr, c_$18 : $ptrclub :: ( (($ptrclub.isMember(p1_$5,c_$18) && $ptrclub.isMember(p2_$3,c_$18)) && is_active_ptrclub(c_$18)) ==> $lblset.leq($ptrclub.compare(p1_$5,p2_$3),$ptrclub.bound(c_$18)) ));
	assume (forall  M_$10 : $memory_t, p_$176 : $ptr, q_$28 : $ptr, v_$16 : Integer :: {:weight  0}( $select.flow.data($store.mem(M_$10,q_$28,v_$16),p_$176) == $select.flow.data(M_$10,p_$176) ));
	assume (forall  M_$11 : $memory_t, p_$177 : $ptr, q_$29 : $ptr, fd_$5 : $flowdata :: {:weight  0}( $select.mem($store.flow.data(M_$11,q_$29,fd_$5),p_$177) == $select.mem(M_$11,p_$177) ));
	assume $arch_ptr_size == 8;
	assume $arch_spec_ptr_start == $max.u8;
	assume $is_math_type(^$#thread_id);
	assume $is_composite(^Node);
	assume $ptr_level(^Node) == 0;
	assume $sizeof(^Node) == 40;
	assume (forall  #s1_$11 : $state, #s2_$8 : $state, #p_$33 : $ptr :: {$inv2(#s1_$11,#s2_$8,#p_$33,^Node)} ( $inv2(#s1_$11,#s2_$8,#p_$33,^Node) <==> ($typed(#s2_$8,#p_$33) && $set_eq($owns(#s2_$8,#p_$33),$set_empty())) ));
	assume (forall  #s2_$9 : $state, #r_$15 : Integer :: {$inv_lab(#s2_$9,$ptr(^Node,#r_$15),l#public)} ( $inv_lab(#s2_$9,$ptr(^Node,#r_$15),l#public) <==> ($typed(#s2_$9,$ptr(^Node,#r_$15)) && $set_eq($owns(#s2_$9,$ptr(^Node,#r_$15)),$set_empty())) ));
	assume (forall  #q_$2 : $ptr, #r_$16 : Integer :: {$in_full_extent_of(#q_$2,$ptr(^Node,#r_$16))} ( $in_full_extent_of(#q_$2,$ptr(^Node,#r_$16)) <==> ((((((((#q_$2 == $ptr(^Node,#r_$16)) || (#q_$2 == $dot($ptr(^Node,#r_$16),Node.$owns))) || (#q_$2 == $dot($ptr(^Node,#r_$16),Node.red))) || (#q_$2 == $dot($ptr(^Node,#r_$16),Node.key))) || (#q_$2 == $dot($ptr(^Node,#r_$16),Node.value))) || (#q_$2 == $dot($ptr(^Node,#r_$16),Node.left))) || (#q_$2 == $dot($ptr(^Node,#r_$16),Node.right))) || (#q_$2 == $dot($ptr(^Node,#r_$16),Node.parent))) ));
	assume ((forall  #s : $state, #q_$3 : $ptr, #r_$17 : Integer :: {$in_extent_of(#s,#q_$3,$ptr(^Node,#r_$17))} ( $in_extent_of(#s,#q_$3,$ptr(^Node,#r_$17)) <==> $in_struct_extent_of(#q_$3,$ptr(^Node,#r_$17)) ))) && ((forall  #s_$0 : $state, #q_$4 : $ptr, #r_$18 : Integer :: {$in_extent_of(#s_$0,#q_$4,$ptr(^Node,#r_$18))} ( $typed(#s_$0,$ptr(^Node,#r_$18)) ==> ($in_extent_of(#s_$0,#q_$4,$ptr(^Node,#r_$18)) <==> ((#q_$4 == $ptr(^Node,#r_$18)) || ($emb(#s_$0,#q_$4) == $ptr(^Node,#r_$18)))) )));
	assume (forall  #q_$5 : $ptr, #r_$19 : Integer :: {$in_span_of(#q_$5,$ptr(^Node,#r_$19))} ( $in_span_of(#q_$5,$ptr(^Node,#r_$19)) <==> ((((((((#q_$5 == $ptr(^Node,#r_$19)) || (#q_$5 == $dot($ptr(^Node,#r_$19),Node.$owns))) || (#q_$5 == $dot($ptr(^Node,#r_$19),Node.red))) || (#q_$5 == $dot($ptr(^Node,#r_$19),Node.key))) || (#q_$5 == $dot($ptr(^Node,#r_$19),Node.value))) || (#q_$5 == $dot($ptr(^Node,#r_$19),Node.left))) || (#q_$5 == $dot($ptr(^Node,#r_$19),Node.right))) || (#q_$5 == $dot($ptr(^Node,#r_$19),Node.parent))) ));
	assume (forall  #p_$34 : $ptr, #s1_$12 : $state, #s2_$10 : $state :: {$state_spans_the_same(#s1_$12,#s2_$10,#p_$34,^Node)} ( $state_spans_the_same(#s1_$12,#s2_$10,#p_$34,^Node) <==> (((((($mem_eq(#s1_$12,#s2_$10,$dot(#p_$34,Node.$owns)) && $mem_eq(#s1_$12,#s2_$10,$dot(#p_$34,Node.red))) && $mem_eq(#s1_$12,#s2_$10,$dot(#p_$34,Node.key))) && $mem_eq(#s1_$12,#s2_$10,$dot(#p_$34,Node.value))) && $mem_eq(#s1_$12,#s2_$10,$dot(#p_$34,Node.left))) && $mem_eq(#s1_$12,#s2_$10,$dot(#p_$34,Node.right))) && $mem_eq(#s1_$12,#s2_$10,$dot(#p_$34,Node.parent))) ));
	assume (forall  #p_$35 : $ptr, #s1_$13 : $state, #s2_$11 : $state :: {$state_nonvolatile_spans_the_same(#s1_$13,#s2_$11,#p_$35,^Node)} ( $state_nonvolatile_spans_the_same(#s1_$13,#s2_$11,#p_$35,^Node) <==> (((((($mem_eq(#s1_$13,#s2_$11,$dot(#p_$35,Node.$owns)) && $mem_eq(#s1_$13,#s2_$11,$dot(#p_$35,Node.red))) && $mem_eq(#s1_$13,#s2_$11,$dot(#p_$35,Node.key))) && $mem_eq(#s1_$13,#s2_$11,$dot(#p_$35,Node.value))) && $mem_eq(#s1_$13,#s2_$11,$dot(#p_$35,Node.left))) && $mem_eq(#s1_$13,#s2_$11,$dot(#p_$35,Node.right))) && $mem_eq(#s1_$13,#s2_$11,$dot(#p_$35,Node.parent))) ));
	assume $is_claimable(^Node) <==> false;
	assume $has_volatile_owns_set(^Node) <==> false;
	assume (forall  #s1_$14 : $state, #r_$20 : Integer :: {$extent_mutable(#s1_$14,$ptr(^Node,#r_$20))} ( $extent_mutable(#s1_$14,$ptr(^Node,#r_$20)) <==> $mutable(#s1_$14,$ptr(^Node,#r_$20)) ));
	assume (forall  #s1_$15 : $state, #s2_$12 : $state, #r_$21 : Integer :: {$extent_is_fresh(#s1_$15,#s2_$12,$ptr(^Node,#r_$21))} ( $extent_is_fresh(#s1_$15,#s2_$12,$ptr(^Node,#r_$21)) <==> $is_fresh(#s1_$15,#s2_$12,$ptr(^Node,#r_$21)) ));
	assume (forall  #s1_$16 : $state, #r_$22 : Integer :: {$extent_zero(#s1_$16,$ptr(^Node,#r_$22))} ( $extent_zero(#s1_$16,$ptr(^Node,#r_$22)) <==> (((((($mem(#s1_$16,$dot($ptr(^Node,#r_$22),Node.red)) == 0) && ($mem(#s1_$16,$dot($ptr(^Node,#r_$22),Node.key)) == 0)) && ($mem(#s1_$16,$dot($ptr(^Node,#r_$22),Node.value)) == 0)) && ($mem(#s1_$16,$dot($ptr(^Node,#r_$22),Node.left)) == 0)) && ($mem(#s1_$16,$dot($ptr(^Node,#r_$22),Node.right)) == 0)) && ($mem(#s1_$16,$dot($ptr(^Node,#r_$22),Node.parent)) == 0)) ));
	assume $static_field_properties(Node.$owns,^Node);
	assume $is_primitive_non_volatile_field(Node.$owns);
	assume (forall  #p_$36 : $ptr :: {$dot(#p_$36,Node.$owns)} ( $is(#p_$36,^Node) ==> (($dot(#p_$36,Node.$owns) == $ptr(^$#ptrset,$ghost_ref(#p_$36,Node.$owns))) && $extent_hint($dot(#p_$36,Node.$owns),#p_$36)) ));
	assume (forall  #p_$37 : $ptr, #s_$1 : $state :: {$ts(#s_$1,$dot(#p_$37,Node.$owns))} {$st(#s_$1,$dot(#p_$37,Node.$owns))} ( $typed2(#s_$1,#p_$37,^Node) ==> $field_properties(#s_$1,#p_$37,Node.$owns,^$#ptrset,false) ));
	assume $owns_set_field(^Node) == Node.$owns;
	assume $static_field_properties(Node.red,^Node);
	assume $is_primitive_non_volatile_field(Node.red);
	assume $field_offset(Node.red) == 0;
	assume (forall  #p_$38 : $ptr :: {$dot(#p_$38,Node.red)} ( $is(#p_$38,^Node) ==> (($dot(#p_$38,Node.red) == $ptr(^^bool,$ref(#p_$38) + 0)) && $extent_hint($dot(#p_$38,Node.red),#p_$38)) ));
	assume (forall  #p_$39 : $ptr, #s_$2 : $state :: {$ts(#s_$2,$dot(#p_$39,Node.red))} {$st(#s_$2,$dot(#p_$39,Node.red))} ( $typed2(#s_$2,#p_$39,^Node) ==> $field_properties(#s_$2,#p_$39,Node.red,^^bool,false) ));
	assume $static_field_properties(Node.key,^Node);
	assume $is_primitive_non_volatile_field(Node.key);
	assume $field_offset(Node.key) == 4;
	assume (forall  #p_$40 : $ptr :: {$dot(#p_$40,Node.key)} ( $is(#p_$40,^Node) ==> (($dot(#p_$40,Node.key) == $ptr(^^i4,$ref(#p_$40) + 4)) && $extent_hint($dot(#p_$40,Node.key),#p_$40)) ));
	assume (forall  #p_$41 : $ptr, #s_$3 : $state :: {$ts(#s_$3,$dot(#p_$41,Node.key))} {$st(#s_$3,$dot(#p_$41,Node.key))} ( $typed2(#s_$3,#p_$41,^Node) ==> $field_properties(#s_$3,#p_$41,Node.key,^^i4,false) ));
	assume $static_field_properties(Node.value,^Node);
	assume $is_primitive_non_volatile_field(Node.value);
	assume $field_offset(Node.value) == 8;
	assume (forall  #p_$42 : $ptr :: {$dot(#p_$42,Node.value)} ( $is(#p_$42,^Node) ==> (($dot(#p_$42,Node.value) == $ptr(^^i4,$ref(#p_$42) + 8)) && $extent_hint($dot(#p_$42,Node.value),#p_$42)) ));
	assume (forall  #p_$43 : $ptr, #s_$4 : $state :: {$ts(#s_$4,$dot(#p_$43,Node.value))} {$st(#s_$4,$dot(#p_$43,Node.value))} ( $typed2(#s_$4,#p_$43,^Node) ==> $field_properties(#s_$4,#p_$43,Node.value,^^i4,false) ));
	assume $static_field_properties(Node.left,^Node);
	assume $is_primitive_non_volatile_field(Node.left);
	assume $field_offset(Node.left) == 16;
	assume (forall  #p_$44 : $ptr :: {$dot(#p_$44,Node.left)} ( $is(#p_$44,^Node) ==> (($dot(#p_$44,Node.left) == $ptr($ptr_to(^Node),$ref(#p_$44) + 16)) && $extent_hint($dot(#p_$44,Node.left),#p_$44)) ));
	assume (forall  #p_$45 : $ptr, #s_$5 : $state :: {$ts(#s_$5,$dot(#p_$45,Node.left))} {$st(#s_$5,$dot(#p_$45,Node.left))} ( $typed2(#s_$5,#p_$45,^Node) ==> $field_properties(#s_$5,#p_$45,Node.left,$ptr_to(^Node),false) ));
	assume $static_field_properties(Node.right,^Node);
	assume $is_primitive_non_volatile_field(Node.right);
	assume $field_offset(Node.right) == 24;
	assume (forall  #p_$46 : $ptr :: {$dot(#p_$46,Node.right)} ( $is(#p_$46,^Node) ==> (($dot(#p_$46,Node.right) == $ptr($ptr_to(^Node),$ref(#p_$46) + 24)) && $extent_hint($dot(#p_$46,Node.right),#p_$46)) ));
	assume (forall  #p_$47 : $ptr, #s_$6 : $state :: {$ts(#s_$6,$dot(#p_$47,Node.right))} {$st(#s_$6,$dot(#p_$47,Node.right))} ( $typed2(#s_$6,#p_$47,^Node) ==> $field_properties(#s_$6,#p_$47,Node.right,$ptr_to(^Node),false) ));
	assume $static_field_properties(Node.parent,^Node);
	assume $is_primitive_non_volatile_field(Node.parent);
	assume $field_offset(Node.parent) == 32;
	assume (forall  #p_$48 : $ptr :: {$dot(#p_$48,Node.parent)} ( $is(#p_$48,^Node) ==> (($dot(#p_$48,Node.parent) == $ptr($ptr_to(^Node),$ref(#p_$48) + 32)) && $extent_hint($dot(#p_$48,Node.parent),#p_$48)) ));
	assume (forall  #p_$49 : $ptr, #s_$7 : $state :: {$ts(#s_$7,$dot(#p_$49,Node.parent))} {$st(#s_$7,$dot(#p_$49,Node.parent))} ( $typed2(#s_$7,#p_$49,^Node) ==> $field_properties(#s_$7,#p_$49,Node.parent,$ptr_to(^Node),false) ));
	assume $is_composite(^Tree);
	assume $ptr_level(^Tree) == 0;
	assume $sizeof(^Tree) == 8;
	assume (forall  #s1_$17 : $state, #s2_$13 : $state, #p_$50 : $ptr :: {$inv2(#s1_$17,#s2_$13,#p_$50,^Tree)} ( $inv2(#s1_$17,#s2_$13,#p_$50,^Tree) <==> (((((((((((((((((((($typed(#s2_$13,#p_$50) && (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr_cast($null,^Node))))) && ($ptr_neq($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node),$null) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))))) && ($ptr_neq($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node),$null) ==> $ptr_eq($read_ptr(#s2_$13,$dot($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node),Node.parent),^Node),$null))) && ((forall  Q#m$1^82.29#dt1 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1))) ==> (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr_cast($null,^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1)))) )))) && ((forall  Q#n$1^82.29#dt1 : Integer, Q#m$1^82.29#dt1_$0 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$0)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$0)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$0))) ==> ($mem(#s2_$13,$dot($ptr(^Node,Q#m$1^82.29#dt1_$0),Node.key)) < $mem(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1),Node.key))))) )))) && ((forall  Q#n$1^82.29#dt1_$0 : Integer, Q#m$1^82.29#dt1_$1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$0)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$0))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$1)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$0))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$0)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$1))) ==> ($mem(#s2_$13,$dot($ptr(^Node,Q#m$1^82.29#dt1_$1),Node.key)) > $mem(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$0),Node.key))))) )))) && ((forall  Q#m$1^82.29#dt1_$2 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$2)))} {F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$2)))} {sk_hack(F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$2))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$2))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$2))) <==> $set_in($ptr(^Node,Q#m$1^82.29#dt1_$2),$owns(#s2_$13,#p_$50))) )))) && ((forall  Q#n$1^82.29#dt1_$1 : Integer, Q#m$1^82.29#dt1_$3 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$1))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$3)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$1))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$3)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$1))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$3))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$3)))) )))) && ((forall  Q#n$1^82.29#dt1_$2 : Integer, Q#m$1^82.29#dt1_$4 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$2))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$4)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$2))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$4)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$2))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$4))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$2)))) )))) && ((forall  Q#n$1^82.29#dt1_$3 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$3))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$3))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$3))) && $ptr_neq($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$3)))),Node.left),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$3))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$3),Node.left),^Node)))) )))) && ((forall  Q#n$1^82.29#dt1_$4 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$4))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$4))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$4))) && $ptr_neq($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$4)))),Node.left),^Node),$null)) ==> $ptr_eq($read_ptr(#s2_$13,$dot($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$4),Node.left),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$4))) )))) && ((forall  Q#n$1^82.29#dt1_$5 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$5))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$5))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$5))) && $ptr_neq($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$5)))),Node.right),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$5))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$5),Node.right),^Node)))) )))) && ((forall  Q#n$1^82.29#dt1_$6 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$6))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$6))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$6))) && $ptr_neq($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$6)))),Node.right),^Node),$null)) ==> $ptr_eq($read_ptr(#s2_$13,$dot($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$6),Node.right),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$6))) )))) && ((forall  Q#n$1^82.29#dt1_$7 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$7))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$7))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$7))) && $ptr_neq($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$7)))),Node.parent),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$7),Node.parent),^Node)))) )))) && ((forall  Q#n$1^82.29#dt1_$8 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$8))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$8))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$8))) && $ptr_neq($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$8)))),Node.parent),^Node),$null)) ==> ($ptr_eq($read_ptr(#s2_$13,$dot($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$8),Node.parent),^Node),Node.left),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$8)) || $ptr_eq($read_ptr(#s2_$13,$dot($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^82.29#dt1_$8),Node.parent),^Node),Node.right),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$8)))) )))) && ((forall  Q#n$1^82.29#dt1_$9 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$9)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$9))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$9))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$9))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$9)))) )))) && ((forall  Q#m$1^83.29#dt1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$13,$dot(#p_$50,Tree.abs))),$mem(#s2_$13,$dot($ptr(^Node,Q#m$1^83.29#dt1),Node.key)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$13,$dot(#p_$50,Tree.abs))),$mem(#s2_$13,$dot($ptr(^Node,Q#m$1^83.29#dt1),Node.key))) == $mem(#s2_$13,$dot($ptr(^Node,Q#m$1^83.29#dt1),Node.value)))) )))) && ((forall  Q#k$1^83.29#tc2 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$13,$dot(#p_$50,Tree.abs))),Q#k$1^83.29#tc2)} ( $in_range_i4(Q#k$1^83.29#tc2) ==> (((forall  Q#m$1^83.29#dt1_$0 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1_$0))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1_$0))) ==> (!($mem(#s2_$13,$dot($ptr(^Node,Q#m$1^83.29#dt1_$0),Node.key)) == Q#k$1^83.29#tc2))) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$13,$dot(#p_$50,Tree.abs))),Q#k$1^83.29#tc2) == 0)) )))) && ((forall  Q#n$1^84.29#dt1 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1))) && $ptr_eq($read_ptr(#s2_$13,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1)))),Node.parent),^Node),$null)) ==> ($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1),$ptr_cast($null,^Node)) || $ptr_eq($ptr(^Node,Q#n$1^84.29#dt1),$read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node)))) )))) && ((forall  Q#n$1^84.29#dt1_$0 : Integer, Q#m$1^84.29#dt1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$0)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1_$0))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^84.29#dt1)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$0)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1))) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot(#p_$50,Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1_$0))) && (((($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$0),$ptr_cast($null,^Node)) && $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1),$ptr_cast($null,^Node))) || $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1),$ptr(^Node,Q#n$1^84.29#dt1_$0))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^84.29#dt1_$0),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1)))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$13,$dot(#p_$50,Tree.R))),$ref($read_ptr(#s2_$13,$dot($ptr(^Node,Q#n$1^84.29#dt1_$0),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1)))))) )))) ));
	assume (forall  #s2_$14 : $state, #r_$23 : Integer :: {$inv_lab(#s2_$14,$ptr(^Tree,#r_$23),l#public)} ( $inv_lab(#s2_$14,$ptr(^Tree,#r_$23),l#public) <==> (((((((((((((((((((($typed(#s2_$14,$ptr(^Tree,#r_$23)) && (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr_cast($null,^Node))))) && ($ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node),$null) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))))) && ($ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node),$null) ==> $ptr_eq($read_ptr(#s2_$14,$dot($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node),Node.parent),^Node),$null))) && ((forall  Q#m$1^82.29#dt1_$5 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$5))) ==> (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr_cast($null,^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$5)))) )))) && ((forall  Q#n$1^82.29#dt1_$10 : Integer, Q#m$1^82.29#dt1_$6 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$10)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$6)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$10))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$6)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$10))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$10)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$6))) ==> ($mem(#s2_$14,$dot($ptr(^Node,Q#m$1^82.29#dt1_$6),Node.key)) < $mem(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$10),Node.key))))) )))) && ((forall  Q#n$1^82.29#dt1_$11 : Integer, Q#m$1^82.29#dt1_$7 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$11)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$7)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$11))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$7)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$11))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$11)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$7))) ==> ($mem(#s2_$14,$dot($ptr(^Node,Q#m$1^82.29#dt1_$7),Node.key)) > $mem(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$11),Node.key))))) )))) && ((forall  Q#m$1^82.29#dt1_$8 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$8)))} {F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$8)))} {sk_hack(F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$8))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$8))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$8))) <==> $set_in($ptr(^Node,Q#m$1^82.29#dt1_$8),$owns(#s2_$14,$ptr(^Tree,#r_$23)))) )))) && ((forall  Q#n$1^82.29#dt1_$12 : Integer, Q#m$1^82.29#dt1_$9 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$12))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$9)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$12))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$9)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$12))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$9))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$9)))) )))) && ((forall  Q#n$1^82.29#dt1_$13 : Integer, Q#m$1^82.29#dt1_$10 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$13))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$10)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$13))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$10)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$13))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$10))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$13)))) )))) && ((forall  Q#n$1^82.29#dt1_$14 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$14))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$14))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$14))) && $ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$14)))),Node.left),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$14))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$14),Node.left),^Node)))) )))) && ((forall  Q#n$1^82.29#dt1_$15 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$15))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$15))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$15))) && $ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$15)))),Node.left),^Node),$null)) ==> $ptr_eq($read_ptr(#s2_$14,$dot($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$15),Node.left),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$15))) )))) && ((forall  Q#n$1^82.29#dt1_$16 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$16))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$16))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$16))) && $ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$16)))),Node.right),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$16))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$16),Node.right),^Node)))) )))) && ((forall  Q#n$1^82.29#dt1_$17 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$17))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$17))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$17))) && $ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$17)))),Node.right),^Node),$null)) ==> $ptr_eq($read_ptr(#s2_$14,$dot($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$17),Node.right),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$17))) )))) && ((forall  Q#n$1^82.29#dt1_$18 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$18))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$18))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$18))) && $ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$18)))),Node.parent),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$18),Node.parent),^Node)))) )))) && ((forall  Q#n$1^82.29#dt1_$19 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$19))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$19))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$19))) && $ptr_neq($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$19)))),Node.parent),^Node),$null)) ==> ($ptr_eq($read_ptr(#s2_$14,$dot($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$19),Node.parent),^Node),Node.left),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$19)) || $ptr_eq($read_ptr(#s2_$14,$dot($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^82.29#dt1_$19),Node.parent),^Node),Node.right),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$19)))) )))) && ((forall  Q#n$1^82.29#dt1_$20 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$20)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$20))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$20))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$20))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$20)))) )))) && ((forall  Q#m$1^83.29#dt1_$1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.abs))),$mem(#s2_$14,$dot($ptr(^Node,Q#m$1^83.29#dt1_$1),Node.key)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1_$1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1_$1))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.abs))),$mem(#s2_$14,$dot($ptr(^Node,Q#m$1^83.29#dt1_$1),Node.key))) == $mem(#s2_$14,$dot($ptr(^Node,Q#m$1^83.29#dt1_$1),Node.value)))) )))) && ((forall  Q#k$1^83.29#tc2_$0 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.abs))),Q#k$1^83.29#tc2_$0)} ( $in_range_i4(Q#k$1^83.29#tc2_$0) ==> (((forall  Q#m$1^83.29#dt1_$2 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1_$2))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1_$2))) ==> (!($mem(#s2_$14,$dot($ptr(^Node,Q#m$1^83.29#dt1_$2),Node.key)) == Q#k$1^83.29#tc2_$0))) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.abs))),Q#k$1^83.29#tc2_$0) == 0)) )))) && ((forall  Q#n$1^84.29#dt1_$1 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$1))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1_$1))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1_$1))) && $ptr_eq($read_ptr(#s2_$14,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$1)))),Node.parent),^Node),$null)) ==> ($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$1),$ptr_cast($null,^Node)) || $ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$1),$read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node)))) )))) && ((forall  Q#n$1^84.29#dt1_$2 : Integer, Q#m$1^84.29#dt1_$0 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$2)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$0)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1_$2))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^84.29#dt1_$0)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$2)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$0))) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1_$2))) && (((($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$2),$ptr_cast($null,^Node)) && $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1_$0),$ptr_cast($null,^Node))) || $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1_$0),$ptr(^Node,Q#n$1^84.29#dt1_$2))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^84.29#dt1_$2),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$0)))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem(#s2_$14,$dot($ptr(^Tree,#r_$23),Tree.R))),$ref($read_ptr(#s2_$14,$dot($ptr(^Node,Q#n$1^84.29#dt1_$2),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$0)))))) )))) ));
	assume (forall  #q_$6 : $ptr, #r_$24 : Integer :: {$in_full_extent_of(#q_$6,$ptr(^Tree,#r_$24))} ( $in_full_extent_of(#q_$6,$ptr(^Tree,#r_$24)) <==> (((((#q_$6 == $ptr(^Tree,#r_$24)) || (#q_$6 == $dot($ptr(^Tree,#r_$24),Tree.$owns))) || (#q_$6 == $dot($ptr(^Tree,#r_$24),Tree.root))) || (#q_$6 == $dot($ptr(^Tree,#r_$24),Tree.abs))) || (#q_$6 == $dot($ptr(^Tree,#r_$24),Tree.R))) ));
	assume ((forall  #s_$8 : $state, #q_$7 : $ptr, #r_$25 : Integer :: {$in_extent_of(#s_$8,#q_$7,$ptr(^Tree,#r_$25))} ( $in_extent_of(#s_$8,#q_$7,$ptr(^Tree,#r_$25)) <==> $in_struct_extent_of(#q_$7,$ptr(^Tree,#r_$25)) ))) && ((forall  #s_$9 : $state, #q_$8 : $ptr, #r_$26 : Integer :: {$in_extent_of(#s_$9,#q_$8,$ptr(^Tree,#r_$26))} ( $typed(#s_$9,$ptr(^Tree,#r_$26)) ==> ($in_extent_of(#s_$9,#q_$8,$ptr(^Tree,#r_$26)) <==> ((#q_$8 == $ptr(^Tree,#r_$26)) || ($emb(#s_$9,#q_$8) == $ptr(^Tree,#r_$26)))) )));
	assume (forall  #q_$9 : $ptr, #r_$27 : Integer :: {$in_span_of(#q_$9,$ptr(^Tree,#r_$27))} ( $in_span_of(#q_$9,$ptr(^Tree,#r_$27)) <==> (((((#q_$9 == $ptr(^Tree,#r_$27)) || (#q_$9 == $dot($ptr(^Tree,#r_$27),Tree.$owns))) || (#q_$9 == $dot($ptr(^Tree,#r_$27),Tree.root))) || (#q_$9 == $dot($ptr(^Tree,#r_$27),Tree.abs))) || (#q_$9 == $dot($ptr(^Tree,#r_$27),Tree.R))) ));
	assume (forall  #p_$51 : $ptr, #s1_$18 : $state, #s2_$15 : $state :: {$state_spans_the_same(#s1_$18,#s2_$15,#p_$51,^Tree)} ( $state_spans_the_same(#s1_$18,#s2_$15,#p_$51,^Tree) <==> ((($mem_eq(#s1_$18,#s2_$15,$dot(#p_$51,Tree.$owns)) && $mem_eq(#s1_$18,#s2_$15,$dot(#p_$51,Tree.root))) && $mem_eq(#s1_$18,#s2_$15,$dot(#p_$51,Tree.abs))) && $mem_eq(#s1_$18,#s2_$15,$dot(#p_$51,Tree.R))) ));
	assume (forall  #p_$52 : $ptr, #s1_$19 : $state, #s2_$16 : $state :: {$state_nonvolatile_spans_the_same(#s1_$19,#s2_$16,#p_$52,^Tree)} ( $state_nonvolatile_spans_the_same(#s1_$19,#s2_$16,#p_$52,^Tree) <==> ((($mem_eq(#s1_$19,#s2_$16,$dot(#p_$52,Tree.$owns)) && $mem_eq(#s1_$19,#s2_$16,$dot(#p_$52,Tree.root))) && $mem_eq(#s1_$19,#s2_$16,$dot(#p_$52,Tree.abs))) && $mem_eq(#s1_$19,#s2_$16,$dot(#p_$52,Tree.R))) ));
	assume $is_claimable(^Tree) <==> false;
	assume $has_volatile_owns_set(^Tree) <==> false;
	assume (forall  #s1_$20 : $state, #r_$28 : Integer :: {$extent_mutable(#s1_$20,$ptr(^Tree,#r_$28))} ( $extent_mutable(#s1_$20,$ptr(^Tree,#r_$28)) <==> $mutable(#s1_$20,$ptr(^Tree,#r_$28)) ));
	assume (forall  #s1_$21 : $state, #s2_$17 : $state, #r_$29 : Integer :: {$extent_is_fresh(#s1_$21,#s2_$17,$ptr(^Tree,#r_$29))} ( $extent_is_fresh(#s1_$21,#s2_$17,$ptr(^Tree,#r_$29)) <==> $is_fresh(#s1_$21,#s2_$17,$ptr(^Tree,#r_$29)) ));
	assume (forall  #s1_$22 : $state, #r_$30 : Integer :: {$extent_zero(#s1_$22,$ptr(^Tree,#r_$30))} ( $extent_zero(#s1_$22,$ptr(^Tree,#r_$30)) <==> ((($mem(#s1_$22,$dot($ptr(^Tree,#r_$30),Tree.root)) == 0) && ($mem(#s1_$22,$dot($ptr(^Tree,#r_$30),Tree.abs)) == 0)) && ($mem(#s1_$22,$dot($ptr(^Tree,#r_$30),Tree.R)) == 0)) ));
	assume $static_field_properties(Tree.$owns,^Tree);
	assume $is_primitive_non_volatile_field(Tree.$owns);
	assume (forall  #p_$53 : $ptr :: {$dot(#p_$53,Tree.$owns)} ( $is(#p_$53,^Tree) ==> (($dot(#p_$53,Tree.$owns) == $ptr(^$#ptrset,$ghost_ref(#p_$53,Tree.$owns))) && $extent_hint($dot(#p_$53,Tree.$owns),#p_$53)) ));
	assume (forall  #p_$54 : $ptr, #s_$10 : $state :: {$ts(#s_$10,$dot(#p_$54,Tree.$owns))} {$st(#s_$10,$dot(#p_$54,Tree.$owns))} ( $typed2(#s_$10,#p_$54,^Tree) ==> $field_properties(#s_$10,#p_$54,Tree.$owns,^$#ptrset,false) ));
	assume $owns_set_field(^Tree) == Tree.$owns;
	assume $static_field_properties(Tree.root,^Tree);
	assume $is_primitive_non_volatile_field(Tree.root);
	assume $field_offset(Tree.root) == 0;
	assume (forall  #p_$55 : $ptr :: {$dot(#p_$55,Tree.root)} ( $is(#p_$55,^Tree) ==> (($dot(#p_$55,Tree.root) == $ptr($ptr_to(^Node),$ref(#p_$55) + 0)) && $extent_hint($dot(#p_$55,Tree.root),#p_$55)) ));
	assume (forall  #p_$56 : $ptr, #s_$11 : $state :: {$ts(#s_$11,$dot(#p_$56,Tree.root))} {$st(#s_$11,$dot(#p_$56,Tree.root))} ( $typed2(#s_$11,#p_$56,^Tree) ==> $field_properties(#s_$11,#p_$56,Tree.root,$ptr_to(^Node),false) ));
	assume $static_field_properties(Tree.abs,^Tree);
	assume $is_primitive_non_volatile_field(Tree.abs);
	assume (forall  #p_$57 : $ptr :: {$dot(#p_$57,Tree.abs)} ( $is(#p_$57,^Tree) ==> (($dot(#p_$57,Tree.abs) == $ptr($map_t(^^i4,^^i4),$ghost_ref(#p_$57,Tree.abs))) && $extent_hint($dot(#p_$57,Tree.abs),#p_$57)) ));
	assume (forall  #p_$58 : $ptr, #s_$12 : $state :: {$ts(#s_$12,$dot(#p_$58,Tree.abs))} {$st(#s_$12,$dot(#p_$58,Tree.abs))} ( $typed2(#s_$12,#p_$58,^Tree) ==> $field_properties(#s_$12,#p_$58,Tree.abs,$map_t(^^i4,^^i4),false) ));
	assume $static_field_properties(Tree.R,^Tree);
	assume $is_primitive_non_volatile_field(Tree.R);
	assume (forall  #p_$59 : $ptr :: {$dot(#p_$59,Tree.R)} ( $is(#p_$59,^Tree) ==> (($dot(#p_$59,Tree.R) == $ptr($map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)),$ghost_ref(#p_$59,Tree.R))) && $extent_hint($dot(#p_$59,Tree.R),#p_$59)) ));
	assume (forall  #p_$60 : $ptr, #s_$13 : $state :: {$ts(#s_$13,$dot(#p_$60,Tree.R))} {$st(#s_$13,$dot(#p_$60,Tree.R))} ( $typed2(#s_$13,#p_$60,^Tree) ==> $field_properties(#s_$13,#p_$60,Tree.R,$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)),false) ));
	assume (forall  SP#p : Integer :: {F#mark(SP#p)} ( $ptr_eq($ptr(^Node,F#mark(SP#p)),$ptr(^Node,SP#p)) ));
	assume $function_arg_type(cf#mark,0,$ptr_to(^Node));
	assume $function_arg_type(cf#mark,1,$ptr_to(^Node));
	assume (forall  SP#p_$0 : Integer :: {F#doMark(SP#p_$0)} ( F#doMark(SP#p_$0) <==> $ptr_eq($ptr(^Node,F#mark($ref($ptr(^Node,SP#p_$0)))),$ptr(^Node,SP#p_$0)) ));
	assume $function_arg_type(cf#doMark,0,^^bool);
	assume $function_arg_type(cf#doMark,1,$ptr_to(^Node));
	assume $function_arg_type(cf#mark2,0,^^bool);
	assume $function_arg_type(cf#mark2,1,$ptr_to(^Node));
	assume $function_arg_type(cf#lambda#9,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#9,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#9,2,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#9,3,$ptr_to(^Node));
	assume (forall  Q#m$1^283.15#dt1 : Integer, #l2 : $map_t..$ptr_to..^Node.^^bool, #l1 : $map_t..$ptr_to..^Node.^^bool, #l0 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#9(#l2,#l1,$ref($ptr(^Node,#l0))),$ref($ptr(^Node,Q#m$1^283.15#dt1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#m$1^283.15#dt1))) && $in_range_phys_ptr($ref($ptr(^Node,#l0)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool(F#lambda#9(#l2,#l1,$ref($ptr(^Node,#l0))),$ref($ptr(^Node,Q#m$1^283.15#dt1))) <==> (($ptr_eq($ptr(^Node,Q#m$1^283.15#dt1),$ptr(^Node,#l0)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1,$ref($ptr(^Node,Q#m$1^283.15#dt1)))) || $select.$map_t..$ptr_to..^Node.^^bool(#l2,$ref($ptr(^Node,Q#m$1^283.15#dt1))))) ));
	assume $function_arg_type(cf#lambda#8,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#8,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#8,2,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#8,3,$ptr_to(^Node));
	assume (forall  Q#m$1^240.15#dt1 : Integer, #l2_$0 : $map_t..$ptr_to..^Node.^^bool, #l1_$0 : $map_t..$ptr_to..^Node.^^bool, #l0_$0 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#8(#l2_$0,#l1_$0,$ref($ptr(^Node,#l0_$0))),$ref($ptr(^Node,Q#m$1^240.15#dt1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#m$1^240.15#dt1))) && $in_range_phys_ptr($ref($ptr(^Node,#l0_$0)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool(F#lambda#8(#l2_$0,#l1_$0,$ref($ptr(^Node,#l0_$0))),$ref($ptr(^Node,Q#m$1^240.15#dt1))) <==> (($ptr_eq($ptr(^Node,Q#m$1^240.15#dt1),$ptr(^Node,#l0_$0)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1_$0,$ref($ptr(^Node,Q#m$1^240.15#dt1)))) || $select.$map_t..$ptr_to..^Node.^^bool(#l2_$0,$ref($ptr(^Node,Q#m$1^240.15#dt1))))) ));
	assume $function_arg_type(cf#lambda#7,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#7,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#7,2,$ptr_to(^Node));
	assume (forall  Q#k$1^194.37#dt1 : Integer, #l1_$1 : $map_t..$ptr_to..^Node.^^bool, #l0_$1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#7(#l1_$1,$ref($ptr(^Node,#l0_$1))),$ref($ptr(^Node,Q#k$1^194.37#dt1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#k$1^194.37#dt1))) && $in_range_phys_ptr($ref($ptr(^Node,#l0_$1)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool(F#lambda#7(#l1_$1,$ref($ptr(^Node,#l0_$1))),$ref($ptr(^Node,Q#k$1^194.37#dt1))) <==> ($ptr_eq($ptr(^Node,Q#k$1^194.37#dt1),$ptr(^Node,#l0_$1)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1_$1,$ref($ptr(^Node,Q#k$1^194.37#dt1))))) ));
	assume $function_arg_type(cf#lambda#6,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#6,1,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#6,2,$ptr_to(^Node));
	assume (forall  Q#n$1^163.41#dt1 : Integer, #l1_$2 : $map_t..$ptr_to..^Node.^^bool, #l0_$2 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#6(#l1_$2,$ref($ptr(^Node,#l0_$2))),$ref($ptr(^Node,Q#n$1^163.41#dt1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^163.41#dt1))) && $in_range_phys_ptr($ref($ptr(^Node,#l0_$2)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool(F#lambda#6(#l1_$2,$ref($ptr(^Node,#l0_$2))),$ref($ptr(^Node,Q#n$1^163.41#dt1))) <==> ($ptr_eq($ptr(^Node,Q#n$1^163.41#dt1),$ptr(^Node,#l0_$2)) || $select.$map_t..$ptr_to..^Node.^^bool(#l1_$2,$ref($ptr(^Node,Q#n$1^163.41#dt1))))) ));
	assume $function_arg_type(cf#lambda#5,0,$map_t($ptr_to(^Node),^^bool));
	assume $function_arg_type(cf#lambda#5,1,$ptr_to(^Node));
	assume (forall  Q#n$1^153.15#dt1 : Integer, #l0_$3 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#5($ref($ptr(^Node,#l0_$3))),$ref($ptr(^Node,Q#n$1^153.15#dt1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^153.15#dt1))) && $in_range_phys_ptr($ref($ptr(^Node,#l0_$3)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool(F#lambda#5($ref($ptr(^Node,#l0_$3))),$ref($ptr(^Node,Q#n$1^153.15#dt1))) <==> $ptr_eq($ptr(^Node,Q#n$1^153.15#dt1),$ptr(^Node,#l0_$3))) ));
	assume $function_arg_type(cf#lambda#4,0,$map_t(^^i4,^^i4));
	assume $function_arg_type(cf#lambda#4,1,$map_t(^^i4,^^i4));
	assume $function_arg_type(cf#lambda#4,2,^^i4);
	assume $function_arg_type(cf#lambda#4,3,^^i4);
	assume (forall  Q#k$1^151.14#tc2 : Integer, #l2_$1 : $map_t..^^i4.^^i4, #l1_$3 : Integer, #l0_$4 : Integer :: {$select.$map_t..^^i4.^^i4(F#lambda#4(#l2_$1,#l1_$3,#l0_$4),Q#k$1^151.14#tc2)} ( (($in_range_i4(Q#k$1^151.14#tc2) && $in_range_i4(#l1_$3)) && $in_range_i4(#l0_$4)) ==> ($select.$map_t..^^i4.^^i4(F#lambda#4(#l2_$1,#l1_$3,#l0_$4),Q#k$1^151.14#tc2) == (if (Q#k$1^151.14#tc2 == #l0_$4) then #l1_$3 else $select.$map_t..^^i4.^^i4(#l2_$1,Q#k$1^151.14#tc2))) ));
	assume $function_arg_type(cf#lambda#3,0,$map_t(^^i4,^^i4));
	assume (forall  Q#k$1^94.14#tc2 : Integer :: {$select.$map_t..^^i4.^^i4(F#lambda#3(),Q#k$1^94.14#tc2)} ( $in_range_i4(Q#k$1^94.14#tc2) ==> ($select.$map_t..^^i4.^^i4(F#lambda#3(),Q#k$1^94.14#tc2) == 0) ));
	assume $function_arg_type(cf#lambda#2,0,$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assume $function_arg_type(cf#lambda#2,1,$map_t($ptr_to(^Node),^^bool));
	assume (forall  Q#m$1^93.12#dt1 : Integer, #l0_$5 : $map_t..$ptr_to..^Node.^^bool :: {$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(F#lambda#2(#l0_$5),$ref($ptr(^Node,Q#m$1^93.12#dt1)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^93.12#dt1))) ==> $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(F#lambda#2(#l0_$5),$ref($ptr(^Node,Q#m$1^93.12#dt1))),#l0_$5) ));
	assume $function_arg_type(cf#lambda#1,0,$map_t($ptr_to(^Node),^^bool));
	assume (forall  Q#n$1^93.12#dt1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool(F#lambda#1(),$ref($ptr(^Node,Q#n$1^93.12#dt1)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^93.12#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool(F#lambda#1(),$ref($ptr(^Node,Q#n$1^93.12#dt1))) <==> false) ));
	assume (forall  M_$12 : $map_t..$ptr_to..^Node.^^bool, p_$178 : Integer, v_$17 : Boolean :: ( $select.$map_t..$ptr_to..^Node.^^bool($store.$map_t..$ptr_to..^Node.^^bool(M_$12,p_$178,v_$17),p_$178) <==> v_$17 ));
	assume (forall  M_$13 : $map_t..$ptr_to..^Node.^^bool, p_$179 : Integer, v_$18 : Boolean, q_$30 : Integer :: ( (!(p_$179 == q_$30)) ==> ($select.$map_t..$ptr_to..^Node.^^bool($store.$map_t..$ptr_to..^Node.^^bool(M_$13,q_$30,v_$18),p_$179) <==> $select.$map_t..$ptr_to..^Node.^^bool(M_$13,p_$179)) ));
	assume (forall  M1_$4 : $map_t..$ptr_to..^Node.^^bool, M2_$4 : $map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.^^bool(M1_$4,M2_$4)} ( ((forall  p_$180 : Integer :: ( $select.$map_t..$ptr_to..^Node.^^bool(M1_$4,p_$180) <==> $select.$map_t..$ptr_to..^Node.^^bool(M2_$4,p_$180) ))) ==> $eq.$map_t..$ptr_to..^Node.^^bool(M1_$4,M2_$4) ));
	assume (forall  M1_$5 : $map_t..$ptr_to..^Node.^^bool, M2_$5 : $map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.^^bool(M1_$5,M2_$5)} ( $eq.$map_t..$ptr_to..^Node.^^bool(M1_$5,M2_$5) ==> (M1_$5 == M2_$5) ));
	assume $int_to_map_t..ptr_to..^Node.^^bool(0) == $zero.$map_t..$ptr_to..^Node.^^bool;
	assume (forall  p_$181 : Integer :: ( $select.$map_t..$ptr_to..^Node.^^bool($zero.$map_t..$ptr_to..^Node.^^bool,p_$181) <==> false ));
	assume (forall  r1_$3 : $record, r2_$3 : $record, f_$33 : $field, R_$0 : $ctype :: {$rec_base_eq($rec_fetch(r1_$3,f_$33),$rec_fetch(r2_$3,f_$33)),$is_record_field(R_$0,f_$33,$map_t($ptr_to(^Node),^^bool))} ( $eq.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.^^bool($rec_fetch(r1_$3,f_$33)),$int_to_map_t..ptr_to..^Node.^^bool($rec_fetch(r2_$3,f_$33))) ==> $rec_base_eq($rec_fetch(r1_$3,f_$33),$rec_fetch(r2_$3,f_$33)) ));
	assume (forall  M_$14 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, p_$182 : Integer, v_$19 : $map_t..$ptr_to..^Node.^^bool :: ( $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M_$14,p_$182,v_$19),p_$182) == v_$19 ));
	assume (forall  M_$15 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, p_$183 : Integer, v_$20 : $map_t..$ptr_to..^Node.^^bool, q_$31 : Integer :: ( (!(p_$183 == q_$31)) ==> ($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M_$15,q_$31,v_$20),p_$183) == $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M_$15,p_$183)) ));
	assume (forall  M1_$6 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, M2_$6 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$6,M2_$6)} ( ((forall  p_$184 : Integer :: ( $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$6,p_$184),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M2_$6,p_$184)) ))) ==> $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$6,M2_$6) ));
	assume (forall  M1_$7 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool, M2_$7 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool :: {$eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$7,M2_$7)} ( $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool(M1_$7,M2_$7) ==> (M1_$7 == M2_$7) ));
	assume $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool(0) == $zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool;
	assume (forall  p_$185 : Integer :: ( $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($zero.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool,p_$185) == $zero.$map_t..$ptr_to..^Node.^^bool ));
	assume (forall  r1_$4 : $record, r2_$4 : $record, f_$34 : $field, R_$1 : $ctype :: {$rec_base_eq($rec_fetch(r1_$4,f_$34),$rec_fetch(r2_$4,f_$34)),$is_record_field(R_$1,f_$34,$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)))} ( $eq.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($rec_fetch(r1_$4,f_$34)),$int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($rec_fetch(r2_$4,f_$34))) ==> $rec_base_eq($rec_fetch(r1_$4,f_$34),$rec_fetch(r2_$4,f_$34)) ));
	assume (forall  M_$16 : $map_t..^^i4.^^i4, p_$186 : Integer, v_$21 : Integer :: ( $in_range_t(^^i4,p_$186) ==> ($select.$map_t..^^i4.^^i4($store.$map_t..^^i4.^^i4(M_$16,p_$186,v_$21),p_$186) == $unchecked(^^i4,v_$21)) ));
	assume (forall  M_$17 : $map_t..^^i4.^^i4, p_$187 : Integer, v_$22 : Integer, q_$32 : Integer :: ( (!(p_$187 == q_$32)) ==> ($select.$map_t..^^i4.^^i4($store.$map_t..^^i4.^^i4(M_$17,q_$32,v_$22),p_$187) == $select.$map_t..^^i4.^^i4(M_$17,p_$187)) ));
	assume (forall  M1_$8 : $map_t..^^i4.^^i4, M2_$8 : $map_t..^^i4.^^i4 :: {$eq.$map_t..^^i4.^^i4(M1_$8,M2_$8)} ( ((forall  p_$188 : Integer :: ( $in_range_t(^^i4,p_$188) ==> ($unchecked(^^i4,$select.$map_t..^^i4.^^i4(M1_$8,p_$188)) == $unchecked(^^i4,$select.$map_t..^^i4.^^i4(M2_$8,p_$188))) ))) ==> $eq.$map_t..^^i4.^^i4(M1_$8,M2_$8) ));
	assume (forall  M1_$9 : $map_t..^^i4.^^i4, M2_$9 : $map_t..^^i4.^^i4 :: {$eq.$map_t..^^i4.^^i4(M1_$9,M2_$9)} ( $eq.$map_t..^^i4.^^i4(M1_$9,M2_$9) ==> (M1_$9 == M2_$9) ));
	assume $int_to_map_t..^^i4.^^i4(0) == $zero.$map_t..^^i4.^^i4;
	assume (forall  p_$189 : Integer :: ( $select.$map_t..^^i4.^^i4($zero.$map_t..^^i4.^^i4,p_$189) == 0 ));
	assume (forall  r1_$5 : $record, r2_$5 : $record, f_$35 : $field, R_$2 : $ctype :: {$rec_base_eq($rec_fetch(r1_$5,f_$35),$rec_fetch(r2_$5,f_$35)),$is_record_field(R_$2,f_$35,$map_t(^^i4,^^i4))} ( $eq.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($rec_fetch(r1_$5,f_$35)),$int_to_map_t..^^i4.^^i4($rec_fetch(r2_$5,f_$35))) ==> $rec_base_eq($rec_fetch(r1_$5,f_$35),$rec_fetch(r2_$5,f_$35)) ));
	assume (forall  M_$18 : $map_t..^^i4.^^i4, p_$190 : Integer :: ( $in_range_t(^^i4,$select.$map_t..^^i4.^^i4(M_$18,p_$190)) ));
	assume $type_code_is(3,$ptr_to(^^void));
	assume #distTp6 == $ptr_to(^^void);
	assume (forall  #x_$1 : $state :: ( #x_$1 == $int_to_state($state_to_int(#x_$1)) ));
	assume $file_name_is(2,#file^?3Cno?20file?3E);
	assume (forall  #x_$2 : $map_t..$ptr_to..^Node.^^bool :: ( #x_$2 == $int_to_map_t..ptr_to..^Node.^^bool($map_t..ptr_to..^Node.^^bool_to_int(#x_$2)) ));
	assume #distTp5 == $ptr_to(^Tree);
	assume $type_code_is(2,^^i4);
	assume (forall  #x_$3 : $map_t..^^i4.^^i4 :: ( #x_$3 == $int_to_map_t..^^i4.^^i4($map_t..^^i4.^^i4_to_int(#x_$3)) ));
	assume #distTp4 == $map_t(^^i4,^^i4);
	assume $file_name_is(1,#file^C?3A?5Cdev?5Cfelt?5Cvcc?5CTest?5Ctestsuite?5Cvacid?2D0?5CRedBlackTrees.c);
	assume (forall  #x_$4 : $map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool :: ( #x_$4 == $int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int(#x_$4)) ));
	assume #distTp3 == $map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool));
	assume #distTp2 == $map_t($ptr_to(^Node),^^bool);
	assume #distTp1 == $ptr_to(^Node);
	goto PreconditionGeneratedEntry;
$exit:
	assume false;
PreconditionGeneratedEntry:
	assume $in_range_phys_ptr(assign#13);
	assume $in_range_phys_ptr(assign#12);
	assume $in_range_phys_ptr(L#p);
	assume $in_range_phys_ptr(L#n);
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,P#x)));
	assume (forall  Q#n$1^138.28#dt1 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^138.28#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^138.28#dt1))) ==> (!($mem($s,$dot($ptr(^Node,Q#n$1^138.28#dt1),Node.key)) == $mem($s,$dot($ptr(^Node,P#x),Node.key))))) ));
	assume $wrapped($s,$ptr(^Tree,P#t),^Tree);
	goto anon36;
anon36:
	assume $function_entry($s);
	assume $full_stop_ext(#tok$1^134.1,$s);
	assume $can_use_all_frame_axioms($s);
	assume $local_value_is($s,#tok$1^134.1,#loc.t,$ptr_to_int($ptr(^Tree,P#t)),$ptr_to(^Tree)) && $local_value_is_ptr($s,#tok$1^134.1,#loc.t,$ptr(^Tree,P#t),$ptr_to(^Tree));
	assume $local_value_is($s,#tok$1^134.1,#loc.x,$ptr_to_int($ptr(^Node,P#x)),$ptr_to(^Node)) && $local_value_is_ptr($s,#tok$1^134.1,#loc.x,$ptr(^Node,P#x),$ptr_to(^Node));
	assume #wrTime$1^134.1 == $current_timestamp($s);
	assume (forall  #p_$61 : $ptr :: {$in_writes_at(#wrTime$1^134.1,#p_$61)} ( $in_writes_at(#wrTime$1^134.1,#p_$61) <==> ((#p_$61 == $ptr(^Tree,P#t)) || $set_in(#p_$61,$span($ptr(^Node,P#x)))) ));
	assume $thread_owned($s,$ptr(^Tree,P#t));
	assume (forall  #p_$62 : $ptr :: {$extent_hint(#p_$62,$ptr(^Node,P#x))} ( $set_in(#p_$62,$span($ptr(^Node,P#x))) ==> $mutable($s,#p_$62) ));
	assume $in_range_phys_ptr($ref($ptr(^Tree,P#t)));
	assume $in_range_phys_ptr($ref($ptr(^Node,P#x)));
	assert  $in_domain_lab($s,$ptr(^Tree,P#t),$ptr(^Tree,P#t),l#public);
	assume $local_value_is($s,#tok$1^142.3,#loc.n,$ptr_to_int($ptr(^Node,L#n)),$ptr_to(^Node)) && $local_value_is_ptr($s,#tok$1^142.3,#loc.n,$ptr(^Node,L#n),$ptr_to(^Node));
	assume $local_value_is($s,#tok$1^142.3,#loc.p,$ptr_to_int($ptr(^Node,L#p)),$ptr_to(^Node)) && $local_value_is_ptr($s,#tok$1^142.3,#loc.p,$ptr(^Node,L#p),$ptr_to(^Node));
	assume $local_value_is($s,#tok$2^0.0,#loc.prestate#24,$state_to_int(prestate#24),^$#state_t);
	assume prestate#24_$_0 == $current_state($s);
	assume $local_value_is($s,#tok$2^0.0,#loc.prestate#24,$state_to_int(prestate#24_$_0),^$#state_t);
	assert  $wrapped($s,$ptr(^Tree,P#t),^Tree);
	assume $inv($s,$ptr(^Tree,P#t),^Tree);
	assume $pre_unwrap($s);
	assert  $top_writable($s,#wrTime$1^134.1,$ptr(^Tree,P#t));
	assume call0formal_$_#l_$_0 == $ptr(^Tree,P#t);
	assert  (!$is_claimable(^Tree)) || ($ref_cnt($s,call0formal_$_#l_$_0) == 0);
	assert  $pre_unwrap($s);
	assume $select.sec.pc($s_$_0) == $select.sec.pc($s);
	assume $mutable($s_$_0,call0formal_$_#l_$_0);
	assume $owns($s,call0formal_$_#l_$_0) == $owns($s_$_0,call0formal_$_#l_$_0);
	assume (forall  #p_$63 : $ptr :: {$st($s_$_0,#p_$63)} {$ts($s_$_0,#p_$63)} {$set_in(#p_$63,$owns($s,call0formal_$_#l_$_0))} ( $set_in(#p_$63,$owns($s,call0formal_$_#l_$_0)) ==> ((($typed($s,#p_$63) && $wrapped($s_$_0,#p_$63,$typ(#p_$63))) && $timestamp_is_now($s_$_0,#p_$63)) && $is_non_primitive($typ(#p_$63))) ));
	assume (forall  #p_$64 : $ptr :: {$set_in(#p_$64,$owns($s,call0formal_$_#l_$_0)),$is_claimable($typ(#p_$64))} ( $set_in(#p_$64,$owns($s,call0formal_$_#l_$_0)) ==> ($is_claimable($typ(#p_$64)) ==> ($ref_cnt($s,#p_$64) == $ref_cnt($s_$_0,#p_$64))) ));
	assume (forall  #p_$65 : $ptr :: {$thread_local($s_$_0,#p_$65)} ( $thread_local($s,#p_$65) ==> $thread_local($s_$_0,#p_$65) ));
	assume $timestamp_is_now($s_$_0,call0formal_$_#l_$_0);
	assume $typemap($s) == $typemap($s_$_0);
	assume (forall  #p_$66 : $ptr :: {$st($s_$_0,#p_$66)} {:weight  0}( (($st($s_$_0,#p_$66) == $st($s,#p_$66)) || ($nested($s,#p_$66) && $set_in(#p_$66,$owns($s,call0formal_$_#l_$_0)))) || (#p_$66 == call0formal_$_#l_$_0) ));
	assume (exists  #x_$5 : Integer :: ( $memory($s_$_0) == $store.mem($memory($s),call0formal_$_#l_$_0,#x_$5) ));
	assume $timestamp_post_strict($s,$s_$_0);
	assume $post_unwrap($s,$s_$_0);
	assume $good_state_ext(#tok$1^144.19,$s_$_0);
	assume $full_stop($s_$_0);
	assume $local_value_is($s_$_0,#tok$2^0.0,#loc.assign#12,$ptr_to_int($ptr(^Node,assign#12)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_0,#tok$2^0.0,#loc.assign#12,$ptr(^Node,assign#12),$ptr_to(^Node));
	assume $local_value_is($s_$_0,#tok$2^0.0,#loc.assign#13,$ptr_to_int($ptr(^Node,assign#13)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_0,#tok$2^0.0,#loc.assign#13,$ptr(^Node,assign#13),$ptr_to(^Node));
	assume assign#13_$_0 == $ref($ptr_cast($null,^Node));
	assume $local_value_is($s_$_0,#tok$2^0.0,#loc.assign#13,$ptr_to_int($ptr(^Node,assign#13_$_0)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_0,#tok$2^0.0,#loc.assign#13,$ptr(^Node,assign#13_$_0),$ptr_to(^Node));
	assert  $typed2($s_$_0,$dot($ptr(^Node,P#x),Node.parent),$ptr_to(^Node));
	assert  $writable($s_$_0,#wrTime$1^134.1,$dot($ptr(^Node,P#x),Node.parent));
	assume call0formal_$_p_$_0 == $dot($ptr(^Node,P#x),Node.parent);
	assume call1formal_$_v_$_0 == $ref($ptr(^Node,assign#13_$_0));
	assume $select.sec.pc($s_$_1) == $select.sec.pc($s_$_0);
	assume $typemap($s_$_1) == $typemap($s_$_0);
	assume $statusmap($s_$_1) == $statusmap($s_$_0);
	assume $memory($s_$_1) == $store.mem($memory($s_$_0),call0formal_$_p_$_0,call1formal_$_v_$_0);
	assume $timestamp_post_strict($s_$_0,$s_$_1);
	assume $full_stop_ext(#tok$1^146.24,$s_$_1);
	assume assign#12_$_0 == $ref($ptr(^Node,assign#13_$_0));
	assume $local_value_is($s_$_1,#tok$2^0.0,#loc.assign#12,$ptr_to_int($ptr(^Node,assign#12_$_0)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_1,#tok$2^0.0,#loc.assign#12,$ptr(^Node,assign#12_$_0),$ptr_to(^Node));
	assert  $typed2($s_$_1,$dot($ptr(^Node,P#x),Node.right),$ptr_to(^Node));
	assert  $writable($s_$_1,#wrTime$1^134.1,$dot($ptr(^Node,P#x),Node.right));
	assume call0formal_$_p_$_0_$1 == $dot($ptr(^Node,P#x),Node.right);
	assume call1formal_$_v_$_0_$1 == $ref($ptr(^Node,assign#12_$_0));
	assume $select.sec.pc($s_$_2) == $select.sec.pc($s_$_1);
	assume $typemap($s_$_2) == $typemap($s_$_1);
	assume $statusmap($s_$_2) == $statusmap($s_$_1);
	assume $memory($s_$_2) == $store.mem($memory($s_$_1),call0formal_$_p_$_0_$1,call1formal_$_v_$_0_$1);
	assume $timestamp_post_strict($s_$_1,$s_$_2);
	assume $full_stop_ext(#tok$1^146.13,$s_$_2);
	assert  $typed2($s_$_2,$dot($ptr(^Node,P#x),Node.left),$ptr_to(^Node));
	assert  $writable($s_$_2,#wrTime$1^134.1,$dot($ptr(^Node,P#x),Node.left));
	assume call0formal_$_p_$_0_$2 == $dot($ptr(^Node,P#x),Node.left);
	assume call1formal_$_v_$_0_$2 == $ref($ptr(^Node,assign#12_$_0));
	assume $select.sec.pc($s_$_3) == $select.sec.pc($s_$_2);
	assume $typemap($s_$_3) == $typemap($s_$_2);
	assume $statusmap($s_$_3) == $statusmap($s_$_2);
	assume $memory($s_$_3) == $store.mem($memory($s_$_2),call0formal_$_p_$_0_$2,call1formal_$_v_$_0_$2);
	assume $timestamp_post_strict($s_$_2,$s_$_3);
	assume $full_stop_ext(#tok$1^146.3,$s_$_3);
	assert  $typed2($s_$_3,$dot($ptr(^Tree,P#t),Tree.root),$ptr_to(^Node));
	assert  $thread_local2($s_$_3,$dot($ptr(^Tree,P#t),Tree.root),$ptr_to(^Node));
	assume L#p_$_0 == $ref($read_ptr($s_$_3,$dot($ptr(^Tree,P#t),Tree.root),^Node));
	assume $local_value_is($s_$_3,#tok$1^148.3,#loc.p,$ptr_to_int($ptr(^Node,L#p_$_0)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_3,#tok$1^148.3,#loc.p,$ptr(^Node,L#p_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_3,#tok$1^151.14,#loc.res_lambda#4#17,$map_t..^^i4.^^i4_to_int(res_lambda#4#17),$map_t(^^i4,^^i4));
	assert  $typed2($s_$_3,$dot($ptr(^Tree,P#t),Tree.abs),$map_t(^^i4,^^i4));
	assert  $thread_local2($s_$_3,$dot($ptr(^Tree,P#t),Tree.abs),$map_t(^^i4,^^i4));
	assert  $typed2($s_$_3,$dot($ptr(^Node,P#x),Node.value),^^i4);
	assert  $thread_local2($s_$_3,$dot($ptr(^Node,P#x),Node.value),^^i4);
	assert  $typed2($s_$_3,$dot($ptr(^Node,P#x),Node.key),^^i4);
	assert  $thread_local2($s_$_3,$dot($ptr(^Node,P#x),Node.key),^^i4);
	assume call0formal_$_#l2_$_0 == $int_to_map_t..^^i4.^^i4($mem($s_$_3,$dot($ptr(^Tree,P#t),Tree.abs)));
	assume call1formal_$_#l1_$_0 == $mem($s_$_3,$dot($ptr(^Node,P#x),Node.value));
	assume call2formal_$_#l0_$_0 == $mem($s_$_3,$dot($ptr(^Node,P#x),Node.key));
	assume call3formal_$_$result_$_0 == F#lambda#4(call0formal_$_#l2_$_0,call1formal_$_#l1_$_0,call2formal_$_#l0_$_0);
	assume $call_transition($s_$_3,$s_$_3);
	assume $full_stop_ext(#tok$1^151.14,$s_$_3);
	assume $local_value_is($s_$_3,#tok$1^151.14,#loc.res_lambda#4#17,$map_t..^^i4.^^i4_to_int(call3formal_$_$result_$_0),$map_t(^^i4,^^i4));
	assert  $typed2($s_$_3,$dot($ptr(^Tree,P#t),Tree.abs),$map_t(^^i4,^^i4));
	assert  $writable($s_$_3,#wrTime$1^134.1,$dot($ptr(^Tree,P#t),Tree.abs));
	assume call0formal_$_p_$_0_$3 == $dot($ptr(^Tree,P#t),Tree.abs);
	assume call1formal_$_v_$_0_$3 == $map_t..^^i4.^^i4_to_int(call3formal_$_$result_$_0);
	assume $select.sec.pc($s_$_4) == $select.sec.pc($s_$_3);
	assume $typemap($s_$_4) == $typemap($s_$_3);
	assume $statusmap($s_$_4) == $statusmap($s_$_3);
	assume $memory($s_$_4) == $store.mem($memory($s_$_3),call0formal_$_p_$_0_$3,call1formal_$_v_$_0_$3);
	assume $timestamp_post_strict($s_$_3,$s_$_4);
	assume $full_stop_ext(#tok$1^151.5,$s_$_4);
	assert  (forall  #writes$1^152.5 : $ptr :: {$dont_instantiate(#writes$1^152.5)} ( $set_in(#writes$1^152.5,$span($ptr(^Tree,P#t))) ==> $top_writable($s_$_4,#wrTime$1^134.1,#writes$1^152.5) ));
	assume call0formal_$_#p_$_0 == $ptr(^Tree,P#t);
	assume call1formal_$_owns_$_0 == $set_union($owns($s_$_4,$ptr(^Tree,P#t)),$set_singleton($ptr(^Node,P#x)));
	assert  $is_composite_ch($typ(call0formal_$_#p_$_0));
	assert  $mutable($s_$_4,call0formal_$_#p_$_0);
	assume $select.sec.pc($s_$_5) == $select.sec.pc($s_$_4);
	assume $statusmap($s_$_4) == $statusmap($s_$_5);
	assume $typemap($s_$_4) == $typemap($s_$_5);
	assume $memory($s_$_5) == $store.mem($memory($s_$_4),$dot(call0formal_$_#p_$_0,$owns_set_field($typ(call0formal_$_#p_$_0))),$ptrset_to_int(call1formal_$_owns_$_0));
	assume $timestamp_post_strict($s_$_4,$s_$_5);
	assume $full_stop_ext(#tok$1^152.5,$s_$_5);
	assume $local_value_is($s_$_5,#tok$1^153.15,#loc.res_lambda#5#18,$map_t..ptr_to..^Node.^^bool_to_int(res_lambda#5#18),$map_t($ptr_to(^Node),^^bool));
	assume call0formal_$_#l0_$_0 == $ref($ptr(^Node,P#x));
	assume call1formal_$_$result_$_0 == F#lambda#5(call0formal_$_#l0_$_0);
	assume $call_transition($s_$_5,$s_$_5);
	assume $full_stop_ext(#tok$1^153.15,$s_$_5);
	assume $local_value_is($s_$_5,#tok$1^153.15,#loc.res_lambda#5#18,$map_t..ptr_to..^Node.^^bool_to_int(call1formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assert  $typed2($s_$_5,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $writable($s_$_5,#wrTime$1^134.1,$dot($ptr(^Tree,P#t),Tree.R));
	assert  $typed2($s_$_5,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $thread_local2($s_$_5,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assume call0formal_$_p_$_0_$4 == $dot($ptr(^Tree,P#t),Tree.R);
	assume call1formal_$_v_$_0_$4 == $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_5,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,P#x)),call1formal_$_$result_$_0));
	assume $select.sec.pc($s_$_6) == $select.sec.pc($s_$_5);
	assume $typemap($s_$_6) == $typemap($s_$_5);
	assume $statusmap($s_$_6) == $statusmap($s_$_5);
	assume $memory($s_$_6) == $store.mem($memory($s_$_5),call0formal_$_p_$_0_$4,call1formal_$_v_$_0_$4);
	assume $timestamp_post_strict($s_$_5,$s_$_6);
	assume $full_stop_ext(#tok$1^153.5,$s_$_6);
	assume true;
	if ($_$_condition) { goto anon00_Then; } else { goto anon00_Else; }
anon00_Then:
	assume $_$_condition;
	assume $_$_condition <==> $ptr_eq($ptr(^Node,L#p_$_0),$null);
	assume $ptr_eq($ptr(^Node,L#p_$_0),$null);
	assert  $typed2($s_$_6,$dot($ptr(^Tree,P#t),Tree.root),$ptr_to(^Node));
	assert  $writable($s_$_6,#wrTime$1^134.1,$dot($ptr(^Tree,P#t),Tree.root));
	assume call0formal_$_p_$_0_$10 == $dot($ptr(^Tree,P#t),Tree.root);
	assume call1formal_$_v_$_0_$10 == $ref($ptr(^Node,P#x));
	assume $select.sec.pc($s_$_7) == $select.sec.pc($s_$_6);
	assume $typemap($s_$_7) == $typemap($s_$_6);
	assume $statusmap($s_$_7) == $statusmap($s_$_6);
	assume $memory($s_$_7) == $store.mem($memory($s_$_6),call0formal_$_p_$_0_$10,call1formal_$_v_$_0_$10);
	assume $timestamp_post_strict($s_$_6,$s_$_7);
	assume $full_stop_ext(#tok$1^157.5,$s_$_7);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.prestate#27,$state_to_int(prestate#27),^$#state_t);
	assume prestate#27_$_0 == $current_state($s_$_7);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.prestate#27,$state_to_int(prestate#27_$_0),^$#state_t);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.staticWrapState#25,$state_to_int(staticWrapState#25),^$#state_t);
	assume staticWrapState#25_$_0 == $current_state($s_$_7);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.staticWrapState#25,$state_to_int(staticWrapState#25_$_0),^$#state_t);
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.owns#26,$ptrset_to_int(owns#26),^$#ptrset);
	assume owns#26_$_0 == $set_empty();
	assume $local_value_is($s_$_7,#tok$2^0.0,#loc.owns#26,$ptrset_to_int(owns#26_$_0),^$#ptrset);
	assert  $top_writable($s_$_7,#wrTime$1^134.1,$ptr(^Node,P#x));
	assume $pre_static_wrap($s_$_7);
	assume call0formal_$_#l_$_0_$7 == $ptr(^Node,P#x);
	assert  $pre_static_wrap($s_$_7);
	assert  !($kind_of($typ(call0formal_$_#l_$_0_$7)) == $kind_primitive);
	assert  $typed($s_$_7,call0formal_$_#l_$_0_$7);
	assert  !$closed($s_$_7,call0formal_$_#l_$_0_$7);
	assert  $owner($s_$_7,call0formal_$_#l_$_0_$7) == $me();
	assume $select.sec.pc($s_$_8) == $select.sec.pc($s_$_7);
	assume $wrapped($s_$_8,call0formal_$_#l_$_0_$7,$typ(call0formal_$_#l_$_0_$7));
	assume $is_claimable($typ(call0formal_$_#l_$_0_$7)) ==> (($ref_cnt($s_$_7,call0formal_$_#l_$_0_$7) == 0) && ($ref_cnt($s_$_8,call0formal_$_#l_$_0_$7) == 0));
	assume $typemap($s_$_7) == $typemap($s_$_8);
	assume (exists  #st : $status :: ( $statusmap($s_$_8) == $store.sm($statusmap(staticWrapState#25_$_0),call0formal_$_#l_$_0_$7,#st) ));
	assume (exists  #x_$6 : Integer :: ( $memory($s_$_8) == $store.mem($store.mem($memory($s_$_7),call0formal_$_#l_$_0_$7,#x_$6),$dot(call0formal_$_#l_$_0_$7,$owns_set_field($typ(call0formal_$_#l_$_0_$7))),$ptrset_to_int(owns#26_$_0)) ));
	assume $timestamp_post_strict($s_$_7,$s_$_8);
	assume $good_state_ext(#tok$1^158.21,$s_$_8);
	assert  $set_eq($owns($s_$_8,$ptr(^Node,P#x)),$set_empty());
	assume $full_stop($s_$_8);
	assume $local_value_is($s_$_8,#tok$2^0.0,#loc.prestate#28,$state_to_int(prestate#28),^$#state_t);
	assume prestate#28_$_0 == $current_state($s_$_8);
	assume $local_value_is($s_$_8,#tok$2^0.0,#loc.prestate#28,$state_to_int(prestate#28_$_0),^$#state_t);
	assume $pre_wrap($s_$_8);
	assert  $top_writable($s_$_8,#wrTime$1^134.1,$ptr(^Tree,P#t));
	assert  (forall  #writes$1^159.21 : $ptr :: {$dont_instantiate(#writes$1^159.21)} ( $set_in(#writes$1^159.21,$owns($s_$_8,$ptr(^Tree,P#t))) ==> $top_writable($s_$_8,#wrTime$1^134.1,#writes$1^159.21) ));
	assume call0formal_$_#l_$_0_$8 == $ptr(^Tree,P#t);
	assert  $pre_wrap($s_$_8);
	assert  !($kind_of($typ(call0formal_$_#l_$_0_$8)) == $kind_primitive);
	assert  $typed2($s_$_8,call0formal_$_#l_$_0_$8,^Tree);
	assert  !$closed($s_$_8,call0formal_$_#l_$_0_$8);
	assert  $owner($s_$_8,call0formal_$_#l_$_0_$8) == $me();
	assert  (forall  #p_$67 : $ptr :: {$dont_instantiate(#p_$67)} ( $set_in0(#p_$67,$owns($s_$_8,call0formal_$_#l_$_0_$8)) ==> $wrapped($s_$_8,#p_$67,$typ(#p_$67)) ));
	assume $select.sec.pc($s_$_9) == $select.sec.pc($s_$_8);
	assume $owns($s_$_8,call0formal_$_#l_$_0_$8) == $owns($s_$_9,call0formal_$_#l_$_0_$8);
	assume (forall  #p_$68 : $ptr :: {$set_in(#p_$68,$owns($s_$_9,call0formal_$_#l_$_0_$8))} ( $set_in(#p_$68,$owns($s_$_9,call0formal_$_#l_$_0_$8)) ==> ($is_non_primitive($typ(#p_$68)) && $nested_in($s_$_9,#p_$68,call0formal_$_#l_$_0_$8)) ));
	assume $wrapped($s_$_9,call0formal_$_#l_$_0_$8,$typ(call0formal_$_#l_$_0_$8));
	assume $is_claimable(^Tree) ==> (($ref_cnt($s_$_8,call0formal_$_#l_$_0_$8) == 0) && ($ref_cnt($s_$_9,call0formal_$_#l_$_0_$8) == 0));
	assume (forall  #p_$69 : $ptr :: {$set_in(#p_$69,$owns($s_$_8,call0formal_$_#l_$_0_$8)),$is_claimable($typ(#p_$69))} ( $set_in(#p_$69,$owns($s_$_8,call0formal_$_#l_$_0_$8)) ==> ($is_claimable($typ(#p_$69)) ==> ($ref_cnt($s_$_8,#p_$69) == $ref_cnt($s_$_9,#p_$69))) ));
	assume $typemap($s_$_8) == $typemap($s_$_9);
	assume (forall  #p_$70 : $ptr :: {$st($s_$_9,#p_$70)} {:weight  0}( (($st($s_$_9,#p_$70) == $st($s_$_8,#p_$70)) || ($wrapped($s_$_8,#p_$70,$typ(#p_$70)) && $set_in(#p_$70,$owns($s_$_8,call0formal_$_#l_$_0_$8)))) || (#p_$70 == call0formal_$_#l_$_0_$8) ));
	assume (exists  #x_$7 : Integer :: ( $memory($s_$_9) == $store.mem($memory($s_$_8),call0formal_$_#l_$_0_$8,#x_$7) ));
	assume $timestamp_post_strict($s_$_8,$s_$_9);
	assume $good_state_ext(#tok$1^159.21,$s_$_9);
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr_cast($null,^Node)));
	assert  $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assert  $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $ptr_eq($read_ptr($s_$_9,$dot($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node),Node.parent),^Node),$null);
	assert  (forall  Q#m$1^82.29#dt1_$11 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$11))) ==> (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$11)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$21 : Integer, Q#m$1^82.29#dt1_$12 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$21)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$12)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$21))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$12)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$21))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$21)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$12))) ==> ($mem($s_$_9,$dot($ptr(^Node,Q#m$1^82.29#dt1_$12),Node.key)) < $mem($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$21),Node.key))))) ));
	assert  (forall  Q#n$1^82.29#dt1_$22 : Integer, Q#m$1^82.29#dt1_$13 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$22)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$13)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$22))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$13)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$22))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$22)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$13))) ==> ($mem($s_$_9,$dot($ptr(^Node,Q#m$1^82.29#dt1_$13),Node.key)) > $mem($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$22),Node.key))))) ));
	assert  (forall  Q#m$1^82.29#dt1_$14 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$14)))} {F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$14)))} {sk_hack(F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$14))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$14))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$14))) <==> $set_in($ptr(^Node,Q#m$1^82.29#dt1_$14),$owns($s_$_9,$ptr(^Tree,P#t)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$23 : Integer, Q#m$1^82.29#dt1_$15 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$23))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$15)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$23))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$15)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$23))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$15))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$15)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$24 : Integer, Q#m$1^82.29#dt1_$16 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$24))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$16)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$24))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$16)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$24))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$16))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$24)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$25 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$25))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$25))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$25))) && $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$25)))),Node.left),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$25))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$25),Node.left),^Node)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$26 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$26))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$26))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$26))) && $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$26)))),Node.left),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_9,$dot($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$26),Node.left),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$26))) ));
	assert  (forall  Q#n$1^82.29#dt1_$27 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$27))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$27))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$27))) && $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$27)))),Node.right),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$27))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$27),Node.right),^Node)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$28 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$28))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$28))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$28))) && $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$28)))),Node.right),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_9,$dot($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$28),Node.right),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$28))) ));
	assert  (forall  Q#n$1^82.29#dt1_$29 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$29))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$29))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$29))) && $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$29)))),Node.parent),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$29),Node.parent),^Node)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$30 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$30))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$30))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$30))) && $ptr_neq($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$30)))),Node.parent),^Node),$null)) ==> ($ptr_eq($read_ptr($s_$_9,$dot($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$30),Node.parent),^Node),Node.left),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$30)) || $ptr_eq($read_ptr($s_$_9,$dot($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^82.29#dt1_$30),Node.parent),^Node),Node.right),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$30)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$31 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$31)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$31))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$31))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$31))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$31)))) ));
	assert  true;
	assert  (forall  Q#m$1^83.29#dt1_$3 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_9,$dot($ptr(^Node,Q#m$1^83.29#dt1_$3),Node.key)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1_$3))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1_$3))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_9,$dot($ptr(^Node,Q#m$1^83.29#dt1_$3),Node.key))) == $mem($s_$_9,$dot($ptr(^Node,Q#m$1^83.29#dt1_$3),Node.value)))) ));
	assert  (forall  Q#k$1^83.29#tc2_$1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^83.29#tc2_$1)} ( $in_range_i4(Q#k$1^83.29#tc2_$1) ==> (((forall  Q#m$1^83.29#dt1_$4 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1_$4))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1_$4))) ==> (!($mem($s_$_9,$dot($ptr(^Node,Q#m$1^83.29#dt1_$4),Node.key)) == Q#k$1^83.29#tc2_$1))) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^83.29#tc2_$1) == 0)) ));
	assert  (forall  Q#n$1^84.29#dt1_$3 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$3))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1_$3))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1_$3))) && $ptr_eq($read_ptr($s_$_9,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$3)))),Node.parent),^Node),$null)) ==> ($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$3),$ptr_cast($null,^Node)) || $ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$3),$read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node)))) ));
	assert  (forall  Q#n$1^84.29#dt1_$4 : Integer, Q#m$1^84.29#dt1_$1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$4)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1_$4))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^84.29#dt1_$1)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$4)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$1))) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1_$4))) && (((($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$4),$ptr_cast($null,^Node)) && $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1_$1),$ptr_cast($null,^Node))) || $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1_$1),$ptr(^Node,Q#n$1^84.29#dt1_$4))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^84.29#dt1_$4),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$1)))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_9,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_9,$dot($ptr(^Node,Q#n$1^84.29#dt1_$4),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$1)))))) ));
	assume $full_stop($s_$_9);
	assert  $position_marker();
	assume $s_$_23 == $s_$_9;
	goto $#exit;
anon00_Else:
	assume !$_$_condition;
	assume $_$_condition <==> $ptr_eq($ptr(^Node,L#p_$_0),$null);
	assume !$ptr_eq($ptr(^Node,L#p_$_0),$null);
	assume $local_value_is($s_$_6,#tok$1^163.41,#loc.res_lambda#6#19,$map_t..ptr_to..^Node.^^bool_to_int(res_lambda#6#19),$map_t($ptr_to(^Node),^^bool));
	assert  $typed2($s_$_6,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $thread_local2($s_$_6,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $typed2($s_$_6,$dot($ptr(^Tree,P#t),Tree.root),$ptr_to(^Node));
	assert  $thread_local2($s_$_6,$dot($ptr(^Tree,P#t),Tree.root),$ptr_to(^Node));
	assume call0formal_$_#l1_$_0 == $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assume call1formal_$_#l0_$_0 == $ref($ptr(^Node,P#x));
	assume call2formal_$_$result_$_0 == F#lambda#6(call0formal_$_#l1_$_0,call1formal_$_#l0_$_0);
	assume $call_transition($s_$_6,$s_$_6);
	assume $full_stop_ext(#tok$1^163.41,$s_$_6);
	assume $local_value_is($s_$_6,#tok$1^163.41,#loc.res_lambda#6#19,$map_t..ptr_to..^Node.^^bool_to_int(call2formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assert  $typed2($s_$_6,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $writable($s_$_6,#wrTime$1^134.1,$dot($ptr(^Tree,P#t),Tree.R));
	assert  $typed2($s_$_6,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $thread_local2($s_$_6,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $typed2($s_$_6,$dot($ptr(^Tree,P#t),Tree.root),$ptr_to(^Node));
	assert  $thread_local2($s_$_6,$dot($ptr(^Tree,P#t),Tree.root),$ptr_to(^Node));
	assume call0formal_$_p_$_0_$5 == $dot($ptr(^Tree,P#t),Tree.R);
	assume call1formal_$_v_$_0_$5 == $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_6,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_6,$dot($ptr(^Tree,P#t),Tree.root),^Node)),call2formal_$_$result_$_0));
	assume $select.sec.pc($s_$_10) == $select.sec.pc($s_$_6);
	assume $typemap($s_$_10) == $typemap($s_$_6);
	assume $statusmap($s_$_10) == $statusmap($s_$_6);
	assume $memory($s_$_10) == $store.mem($memory($s_$_6),call0formal_$_p_$_0_$5,call1formal_$_v_$_0_$5);
	assume $timestamp_post_strict($s_$_6,$s_$_10);
	assume $full_stop_ext(#tok$1^163.25,$s_$_10);
	assert  F#doMark($ref($read_ptr($s_$_10,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assume F#doMark($ref($read_ptr($s_$_10,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assert  $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_10,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_10,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,P#x)));
	assume $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_10,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_10,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,P#x)));
	assume $select.sec.pc($s_$_11) == $select.sec.pc($s_$_10);
	assume $memory($s_$_11) == $memory($s_$_10);
	assume $typemap($s_$_11) == $typemap($s_$_10);
	assume (exists  x_$89 : $status :: ( $statusmap($s_$_11) == $store.sm($statusmap($s_$_10),$null,x_$89) ));
	assume $current_timestamp($s_$_10) < $current_timestamp($s_$_11);
	assume $full_stop_ext(#tok$1^168.28,$s_$_11);
	assume #wrTime$1^168.28 == $current_timestamp($s_$_11);
	assume (forall  #p_$71 : $ptr :: {$in_writes_at(#wrTime$1^168.28,#p_$71)} ( $in_writes_at(#wrTime$1^168.28,#p_$71) <==> ($set_in(#p_$71,$set_difference($owns($s_$_11,$ptr(^Tree,P#t)),$set_singleton($ptr(^Node,P#x)))) || (#p_$71 == $dot($ptr(^Tree,P#t),Tree.R))) ));
	assert  (forall  #loopWrites^$1^168.28 : $ptr :: {$dont_instantiate(#loopWrites^$1^168.28)} ( $top_writable($s_$_11,#wrTime$1^168.28,#loopWrites^$1^168.28) ==> $top_writable($s_$_11,#wrTime$1^134.1,#loopWrites^$1^168.28) ));
	assert  (forall  Q#p$1^169.32#tc3 : $ptr :: ( $set_in(Q#p$1^169.32#tc3,$owns($s_$_11,$ptr(^Tree,P#t))) ==> ((Q#p$1^169.32#tc3 == $ptr(^Node,P#x)) || $wrapped($s_$_11,Q#p$1^169.32#tc3,$typ(Q#p$1^169.32#tc3))) ));
	assert  $mutable($s_$_11,$ptr(^Node,P#x));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,P#x))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,P#x))));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr_cast($null,^Node)));
	assert  $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assert  $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $ptr_eq($read_ptr($s_$_11,$dot($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node),Node.parent),^Node),$null);
	assert  (forall  Q#m$1^171.31#dt1 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1))) ==> (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1)))) ));
	assert  (forall  Q#n$1^171.31#dt1 : Integer, Q#m$1^171.31#dt1_$0 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$0)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$0)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$0))) ==> ($mem($s_$_11,$dot($ptr(^Node,Q#m$1^171.31#dt1_$0),Node.key)) < $mem($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1),Node.key))))) ));
	assert  (forall  Q#n$1^171.31#dt1_$0 : Integer, Q#m$1^171.31#dt1_$1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$0)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$0))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$1)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$0))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$0)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$1))) ==> ($mem($s_$_11,$dot($ptr(^Node,Q#m$1^171.31#dt1_$1),Node.key)) > $mem($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$0),Node.key))))) ));
	assert  (forall  Q#m$1^171.31#dt1_$2 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$2)))} {F#mark2($ref($ptr(^Node,Q#m$1^171.31#dt1_$2)))} {sk_hack(F#mark2($ref($ptr(^Node,Q#m$1^171.31#dt1_$2))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$2))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$2))) <==> $set_in($ptr(^Node,Q#m$1^171.31#dt1_$2),$owns($s_$_11,$ptr(^Tree,P#t)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$1 : Integer, Q#m$1^171.31#dt1_$3 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$1))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$3)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$1))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$3)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$1))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$3))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$3)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$2 : Integer, Q#m$1^171.31#dt1_$4 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$2))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$4)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$2))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$4)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$2))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$4))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$2)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$3 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$3))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$3))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$3))) && $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$3)))),Node.left),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$3))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$3),Node.left),^Node)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$4 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$4))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$4))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$4))) && $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$4)))),Node.left),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_11,$dot($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$4),Node.left),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$4))) ));
	assert  (forall  Q#n$1^171.31#dt1_$5 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$5))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$5))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$5))) && $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$5)))),Node.right),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$5))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$5),Node.right),^Node)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$6 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$6))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$6))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$6))) && $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$6)))),Node.right),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_11,$dot($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$6),Node.right),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$6))) ));
	assert  (forall  Q#n$1^171.31#dt1_$7 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$7))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$7))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$7))) && $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$7)))),Node.parent),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$7),Node.parent),^Node)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$8 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$8))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$8))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$8))) && $ptr_neq($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$8)))),Node.parent),^Node),$null)) ==> ($ptr_eq($read_ptr($s_$_11,$dot($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$8),Node.parent),^Node),Node.left),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$8)) || $ptr_eq($read_ptr($s_$_11,$dot($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^171.31#dt1_$8),Node.parent),^Node),Node.right),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$8)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$9 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$9)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$9))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$9))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$9))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$9)))) ));
	assert  true;
	assert  (forall  Q#m$1^172.31#dt1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_11,$dot($ptr(^Node,Q#m$1^172.31#dt1),Node.key)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^172.31#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^172.31#dt1))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_11,$dot($ptr(^Node,Q#m$1^172.31#dt1),Node.key))) == $mem($s_$_11,$dot($ptr(^Node,Q#m$1^172.31#dt1),Node.value)))) ));
	assert  (forall  Q#k$1^172.31#tc2 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^172.31#tc2)} ( $in_range_i4(Q#k$1^172.31#tc2) ==> (((forall  Q#m$1^172.31#dt1_$0 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^172.31#dt1_$0))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^172.31#dt1_$0))) ==> (!($mem($s_$_11,$dot($ptr(^Node,Q#m$1^172.31#dt1_$0),Node.key)) == Q#k$1^172.31#tc2))) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^172.31#tc2) == 0)) ));
	assert  (forall  Q#n$1^173.31#dt1 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^173.31#dt1))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^173.31#dt1))) && $ptr_eq($read_ptr($s_$_11,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1)))),Node.parent),^Node),$null)) ==> ($ptr_eq($ptr(^Node,Q#n$1^173.31#dt1),$ptr(^Node,P#x)) || $ptr_eq($ptr(^Node,Q#n$1^173.31#dt1),$read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node)))) ));
	assert  (forall  Q#n$1^173.31#dt1_$0 : Integer, Q#m$1^173.31#dt1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$0)))))),$ref($ptr(^Node,Q#m$1^173.31#dt1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^173.31#dt1_$0))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^173.31#dt1)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$0)))))),$ref($ptr(^Node,Q#m$1^173.31#dt1))) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^173.31#dt1_$0))) && (((($ptr_eq($ptr(^Node,Q#n$1^173.31#dt1_$0),$ptr(^Node,L#p_$_0)) && $ptr_eq($ptr(^Node,Q#m$1^173.31#dt1),$ptr(^Node,P#x))) || $ptr_eq($ptr(^Node,Q#m$1^173.31#dt1),$ptr(^Node,Q#n$1^173.31#dt1_$0))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^173.31#dt1_$0),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^173.31#dt1)))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,Q#n$1^173.31#dt1_$0),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^173.31#dt1)))))) ));
	assert  $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,L#p_$_0)));
	assert  $ptr_neq($ptr(^Node,L#p_$_0),$ptr(^Node,P#x));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,L#p_$_0),Node.left),^Node))),$ref($ptr(^Node,P#x)));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Node,L#p_$_0),Node.right),^Node))),$ref($ptr(^Node,P#x)));
	assert  (forall  Q#n$1^176.31#dt1 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^176.31#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^176.31#dt1))) ==> ($ptr_eq($ptr(^Node,Q#n$1^176.31#dt1),$ptr(^Node,P#x)) || (!($mem($s_$_11,$dot($ptr(^Node,Q#n$1^176.31#dt1),Node.key)) == $mem($s_$_11,$dot($ptr(^Node,P#x),Node.key)))))) ));
	goto anon01_LoopHead;
$#exit:
	assume $s_$_25 == $s_$_23;
	goto GeneratedUnifiedExit;
anon01_LoopHead:
	assume $in_range_phys_ptr(L#p_$_1);
	assume $in_range_phys_ptr(L#n_$_0);
	assume true;
	assume (forall  Q#p$1^169.32#tc3_$0 : $ptr :: ( $set_in(Q#p$1^169.32#tc3_$0,$owns($s_$_12,$ptr(^Tree,P#t))) ==> ((Q#p$1^169.32#tc3_$0 == $ptr(^Node,P#x)) || $wrapped($s_$_12,Q#p$1^169.32#tc3_$0,$typ(Q#p$1^169.32#tc3_$0))) ));
	assume $mutable($s_$_12,$ptr(^Node,P#x));
	assume $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))));
	assume $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))));
	assume $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,P#x))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,P#x))));
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr_cast($null,^Node)));
	assume $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assume $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $ptr_eq($read_ptr($s_$_12,$dot($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node),Node.parent),^Node),$null);
	assume (forall  Q#m$1^171.31#dt1_$5 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$5))) ==> (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$5)))) ));
	assume (forall  Q#n$1^171.31#dt1_$10 : Integer, Q#m$1^171.31#dt1_$6 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$10)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$6)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$10))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$6)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$10))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$10)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$6))) ==> ($mem($s_$_12,$dot($ptr(^Node,Q#m$1^171.31#dt1_$6),Node.key)) < $mem($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$10),Node.key))))) ));
	assume (forall  Q#n$1^171.31#dt1_$11 : Integer, Q#m$1^171.31#dt1_$7 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$11)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$7)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$11))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$7)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$11))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$11)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$7))) ==> ($mem($s_$_12,$dot($ptr(^Node,Q#m$1^171.31#dt1_$7),Node.key)) > $mem($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$11),Node.key))))) ));
	assume (forall  Q#m$1^171.31#dt1_$8 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$8)))} {F#mark2($ref($ptr(^Node,Q#m$1^171.31#dt1_$8)))} {sk_hack(F#mark2($ref($ptr(^Node,Q#m$1^171.31#dt1_$8))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$8))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$8))) <==> $set_in($ptr(^Node,Q#m$1^171.31#dt1_$8),$owns($s_$_12,$ptr(^Tree,P#t)))) ));
	assume (forall  Q#n$1^171.31#dt1_$12 : Integer, Q#m$1^171.31#dt1_$9 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$12))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$9)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$12))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$9)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$12))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$9))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$9)))) ));
	assume (forall  Q#n$1^171.31#dt1_$13 : Integer, Q#m$1^171.31#dt1_$10 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$13))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$10)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$13))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$10)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$13))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$10))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$13)))) ));
	assume (forall  Q#n$1^171.31#dt1_$14 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$14))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$14))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$14))) && $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$14)))),Node.left),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$14))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$14),Node.left),^Node)))) ));
	assume (forall  Q#n$1^171.31#dt1_$15 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$15))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$15))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$15))) && $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$15)))),Node.left),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_12,$dot($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$15),Node.left),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$15))) ));
	assume (forall  Q#n$1^171.31#dt1_$16 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$16))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$16))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$16))) && $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$16)))),Node.right),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$16))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$16),Node.right),^Node)))) ));
	assume (forall  Q#n$1^171.31#dt1_$17 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$17))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$17))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$17))) && $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$17)))),Node.right),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_12,$dot($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$17),Node.right),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$17))) ));
	assume (forall  Q#n$1^171.31#dt1_$18 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$18))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$18))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$18))) && $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$18)))),Node.parent),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$18),Node.parent),^Node)))) ));
	assume (forall  Q#n$1^171.31#dt1_$19 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$19))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$19))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$19))) && $ptr_neq($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$19)))),Node.parent),^Node),$null)) ==> ($ptr_eq($read_ptr($s_$_12,$dot($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$19),Node.parent),^Node),Node.left),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$19)) || $ptr_eq($read_ptr($s_$_12,$dot($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^171.31#dt1_$19),Node.parent),^Node),Node.right),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$19)))) ));
	assume (forall  Q#n$1^171.31#dt1_$20 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$20)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$20))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$20))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$20))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$20)))) ));
	assume true;
	assume (forall  Q#m$1^172.31#dt1_$1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_12,$dot($ptr(^Node,Q#m$1^172.31#dt1_$1),Node.key)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^172.31#dt1_$1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^172.31#dt1_$1))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_12,$dot($ptr(^Node,Q#m$1^172.31#dt1_$1),Node.key))) == $mem($s_$_12,$dot($ptr(^Node,Q#m$1^172.31#dt1_$1),Node.value)))) ));
	assume (forall  Q#k$1^172.31#tc2_$0 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^172.31#tc2_$0)} ( $in_range_i4(Q#k$1^172.31#tc2_$0) ==> (((forall  Q#m$1^172.31#dt1_$2 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^172.31#dt1_$2))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^172.31#dt1_$2))) ==> (!($mem($s_$_12,$dot($ptr(^Node,Q#m$1^172.31#dt1_$2),Node.key)) == Q#k$1^172.31#tc2_$0))) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^172.31#tc2_$0) == 0)) ));
	assume (forall  Q#n$1^173.31#dt1_$1 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$1))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^173.31#dt1_$1))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^173.31#dt1_$1))) && $ptr_eq($read_ptr($s_$_12,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$1)))),Node.parent),^Node),$null)) ==> ($ptr_eq($ptr(^Node,Q#n$1^173.31#dt1_$1),$ptr(^Node,P#x)) || $ptr_eq($ptr(^Node,Q#n$1^173.31#dt1_$1),$read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node)))) ));
	assume (forall  Q#n$1^173.31#dt1_$2 : Integer, Q#m$1^173.31#dt1_$0 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$2)))))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$0)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^173.31#dt1_$2))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^173.31#dt1_$0)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$2)))))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$0))) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^173.31#dt1_$2))) && (((($ptr_eq($ptr(^Node,Q#n$1^173.31#dt1_$2),$ptr(^Node,L#p_$_1)) && $ptr_eq($ptr(^Node,Q#m$1^173.31#dt1_$0),$ptr(^Node,P#x))) || $ptr_eq($ptr(^Node,Q#m$1^173.31#dt1_$0),$ptr(^Node,Q#n$1^173.31#dt1_$2))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^173.31#dt1_$2),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$0)))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,Q#n$1^173.31#dt1_$2),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$0)))))) ));
	assume $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,L#p_$_1)));
	assume $ptr_neq($ptr(^Node,L#p_$_1),$ptr(^Node,P#x));
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.left),^Node))),$ref($ptr(^Node,P#x)));
	assume !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.right),^Node))),$ref($ptr(^Node,P#x)));
	assume (forall  Q#n$1^176.31#dt1_$0 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^176.31#dt1_$0))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_12,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^176.31#dt1_$0))) ==> ($ptr_eq($ptr(^Node,Q#n$1^176.31#dt1_$0),$ptr(^Node,P#x)) || (!($mem($s_$_12,$dot($ptr(^Node,Q#n$1^176.31#dt1_$0),Node.key)) == $mem($s_$_12,$dot($ptr(^Node,P#x),Node.key)))))) ));
	if ($_$_condition_$0) { goto anon01_LoopDone; } else { goto anon01_LoopBody; }
anon01_LoopDone:
	assume $_$_condition_$0;
	assume $_$_condition_$0 <==> (!true);
	assume !true;
	assume $full_stop_ext(#tok$1^167.3,$s_$_12);
	assume $s_$_19 == $s_$_12;
	goto $#break_11;
anon01_LoopBody:
	assume !$_$_condition_$0;
	assume $_$_condition_$0 <==> (!true);
	assume true;
	assume ((((forall  #p_$72 : $ptr :: {$mem($s_$_12,#p_$72)} ( (($irrelevant($s_$_11,#p_$72) || $set_in(#p_$72,$set_difference($owns($s_$_11,$ptr(^Tree,P#t)),$set_singleton($ptr(^Node,P#x))))) || (#p_$72 == $dot($ptr(^Tree,P#t),Tree.R))) || $mem_eq($s_$_11,$s_$_12,#p_$72) ))) && ((forall  #p_$73 : $ptr :: {$st($s_$_12,#p_$73)} ( (($irrelevant($s_$_11,#p_$73) || $set_in(#p_$73,$set_difference($owns($s_$_11,$ptr(^Tree,P#t)),$set_singleton($ptr(^Node,P#x))))) || (#p_$73 == $dot($ptr(^Tree,P#t),Tree.R))) || $st_eq($s_$_11,$s_$_12,#p_$73) )))) && ((forall  #p_$74 : $ptr :: {$ts($s_$_12,#p_$74)} ( (($irrelevant($s_$_11,#p_$74) || $set_in(#p_$74,$set_difference($owns($s_$_11,$ptr(^Tree,P#t)),$set_singleton($ptr(^Node,P#x))))) || (#p_$74 == $dot($ptr(^Tree,P#t),Tree.R))) || $ts_eq($s_$_11,$s_$_12,#p_$74) )))) && $timestamp_post($s_$_11,$s_$_12);
	assume $timestamp_post($s_$_11,$s_$_12);
	assume $full_stop_ext(#tok$1^167.3,$s_$_12);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.res_lambda#6#19,$map_t..ptr_to..^Node.^^bool_to_int(call2formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.prestate#28,$state_to_int(prestate#28),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.owns#26,$ptrset_to_int(owns#26),^$#ptrset);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.staticWrapState#25,$state_to_int(staticWrapState#25),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.prestate#27,$state_to_int(prestate#27),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.res_lambda#5#18,$map_t..ptr_to..^Node.^^bool_to_int(call1formal_$_$result_$_0),$map_t($ptr_to(^Node),^^bool));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.res_lambda#4#17,$map_t..^^i4.^^i4_to_int(call3formal_$_$result_$_0),$map_t(^^i4,^^i4));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.assign#13,$ptr_to_int($ptr(^Node,assign#13_$_0)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_12,#tok$1^167.3,#loc.assign#13,$ptr(^Node,assign#13_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.assign#12,$ptr_to_int($ptr(^Node,assign#12_$_0)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_12,#tok$1^167.3,#loc.assign#12,$ptr(^Node,assign#12_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.prestate#24,$state_to_int(prestate#24_$_0),^$#state_t);
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.n,$ptr_to_int($ptr(^Node,L#n_$_0)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_12,#tok$1^167.3,#loc.n,$ptr(^Node,L#n_$_0),$ptr_to(^Node));
	assume $local_value_is($s_$_12,#tok$1^167.3,#loc.x,$ptr_to_int($ptr(^Node,P#x)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_12,#tok$1^167.3,#loc.x,$ptr(^Node,P#x),$ptr_to(^Node));
	assume true;
	if ($_$_condition_$1) { goto anon02_Then; } else { goto anon02_Else; }
$#break_11:
	assert  $typed2($s_$_19,$dot($ptr(^Node,P#x),Node.parent),$ptr_to(^Node));
	assert  $writable($s_$_19,#wrTime$1^134.1,$dot($ptr(^Node,P#x),Node.parent));
	assume call0formal_$_p_$_0_$6 == $dot($ptr(^Node,P#x),Node.parent);
	assume call1formal_$_v_$_0_$6 == $ref($ptr(^Node,L#p_$_1));
	assume $select.sec.pc($s_$_20) == $select.sec.pc($s_$_19);
	assume $typemap($s_$_20) == $typemap($s_$_19);
	assume $statusmap($s_$_20) == $statusmap($s_$_19);
	assume $memory($s_$_20) == $store.mem($memory($s_$_19),call0formal_$_p_$_0_$6,call1formal_$_v_$_0_$6);
	assume $timestamp_post_strict($s_$_19,$s_$_20);
	assume $full_stop_ext(#tok$1^198.3,$s_$_20);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.prestate#43,$state_to_int(prestate#43),^$#state_t);
	assume prestate#43_$_0 == $current_state($s_$_20);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.prestate#43,$state_to_int(prestate#43_$_0),^$#state_t);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.staticWrapState#41,$state_to_int(staticWrapState#41),^$#state_t);
	assume staticWrapState#41_$_0 == $current_state($s_$_20);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.staticWrapState#41,$state_to_int(staticWrapState#41_$_0),^$#state_t);
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.owns#42,$ptrset_to_int(owns#42),^$#ptrset);
	assume owns#42_$_0 == $set_empty();
	assume $local_value_is($s_$_20,#tok$2^0.0,#loc.owns#42,$ptrset_to_int(owns#42_$_0),^$#ptrset);
	assert  $top_writable($s_$_20,#wrTime$1^134.1,$ptr(^Node,P#x));
	assume $pre_static_wrap($s_$_20);
	assume call0formal_$_#l_$_0_$1 == $ptr(^Node,P#x);
	assert  $pre_static_wrap($s_$_20);
	assert  !($kind_of($typ(call0formal_$_#l_$_0_$1)) == $kind_primitive);
	assert  $typed($s_$_20,call0formal_$_#l_$_0_$1);
	assert  !$closed($s_$_20,call0formal_$_#l_$_0_$1);
	assert  $owner($s_$_20,call0formal_$_#l_$_0_$1) == $me();
	assume $select.sec.pc($s_$_21) == $select.sec.pc($s_$_20);
	assume $wrapped($s_$_21,call0formal_$_#l_$_0_$1,$typ(call0formal_$_#l_$_0_$1));
	assume $is_claimable($typ(call0formal_$_#l_$_0_$1)) ==> (($ref_cnt($s_$_20,call0formal_$_#l_$_0_$1) == 0) && ($ref_cnt($s_$_21,call0formal_$_#l_$_0_$1) == 0));
	assume $typemap($s_$_20) == $typemap($s_$_21);
	assume (exists  #st_$2 : $status :: ( $statusmap($s_$_21) == $store.sm($statusmap(staticWrapState#41_$_0),call0formal_$_#l_$_0_$1,#st_$2) ));
	assume (exists  #x_$12 : Integer :: ( $memory($s_$_21) == $store.mem($store.mem($memory($s_$_20),call0formal_$_#l_$_0_$1,#x_$12),$dot(call0formal_$_#l_$_0_$1,$owns_set_field($typ(call0formal_$_#l_$_0_$1))),$ptrset_to_int(owns#42_$_0)) ));
	assume $timestamp_post_strict($s_$_20,$s_$_21);
	assume $good_state_ext(#tok$1^199.19,$s_$_21);
	assert  $set_eq($owns($s_$_21,$ptr(^Node,P#x)),$set_empty());
	assume $full_stop($s_$_21);
	assume $local_value_is($s_$_21,#tok$2^0.0,#loc.prestate#44,$state_to_int(prestate#44),^$#state_t);
	assume prestate#44_$_0 == $current_state($s_$_21);
	assume $local_value_is($s_$_21,#tok$2^0.0,#loc.prestate#44,$state_to_int(prestate#44_$_0),^$#state_t);
	assume $pre_wrap($s_$_21);
	assert  $top_writable($s_$_21,#wrTime$1^134.1,$ptr(^Tree,P#t));
	assert  (forall  #writes$1^200.19 : $ptr :: {$dont_instantiate(#writes$1^200.19)} ( $set_in(#writes$1^200.19,$owns($s_$_21,$ptr(^Tree,P#t))) ==> $top_writable($s_$_21,#wrTime$1^134.1,#writes$1^200.19) ));
	assume call0formal_$_#l_$_0_$2 == $ptr(^Tree,P#t);
	assert  $pre_wrap($s_$_21);
	assert  !($kind_of($typ(call0formal_$_#l_$_0_$2)) == $kind_primitive);
	assert  $typed2($s_$_21,call0formal_$_#l_$_0_$2,^Tree);
	assert  !$closed($s_$_21,call0formal_$_#l_$_0_$2);
	assert  $owner($s_$_21,call0formal_$_#l_$_0_$2) == $me();
	assert  (forall  #p_$83 : $ptr :: {$dont_instantiate(#p_$83)} ( $set_in0(#p_$83,$owns($s_$_21,call0formal_$_#l_$_0_$2)) ==> $wrapped($s_$_21,#p_$83,$typ(#p_$83)) ));
	assume $select.sec.pc($s_$_22) == $select.sec.pc($s_$_21);
	assume $owns($s_$_21,call0formal_$_#l_$_0_$2) == $owns($s_$_22,call0formal_$_#l_$_0_$2);
	assume (forall  #p_$84 : $ptr :: {$set_in(#p_$84,$owns($s_$_22,call0formal_$_#l_$_0_$2))} ( $set_in(#p_$84,$owns($s_$_22,call0formal_$_#l_$_0_$2)) ==> ($is_non_primitive($typ(#p_$84)) && $nested_in($s_$_22,#p_$84,call0formal_$_#l_$_0_$2)) ));
	assume $wrapped($s_$_22,call0formal_$_#l_$_0_$2,$typ(call0formal_$_#l_$_0_$2));
	assume $is_claimable(^Tree) ==> (($ref_cnt($s_$_21,call0formal_$_#l_$_0_$2) == 0) && ($ref_cnt($s_$_22,call0formal_$_#l_$_0_$2) == 0));
	assume (forall  #p_$85 : $ptr :: {$set_in(#p_$85,$owns($s_$_21,call0formal_$_#l_$_0_$2)),$is_claimable($typ(#p_$85))} ( $set_in(#p_$85,$owns($s_$_21,call0formal_$_#l_$_0_$2)) ==> ($is_claimable($typ(#p_$85)) ==> ($ref_cnt($s_$_21,#p_$85) == $ref_cnt($s_$_22,#p_$85))) ));
	assume $typemap($s_$_21) == $typemap($s_$_22);
	assume (forall  #p_$86 : $ptr :: {$st($s_$_22,#p_$86)} {:weight  0}( (($st($s_$_22,#p_$86) == $st($s_$_21,#p_$86)) || ($wrapped($s_$_21,#p_$86,$typ(#p_$86)) && $set_in(#p_$86,$owns($s_$_21,call0formal_$_#l_$_0_$2)))) || (#p_$86 == call0formal_$_#l_$_0_$2) ));
	assume (exists  #x_$13 : Integer :: ( $memory($s_$_22) == $store.mem($memory($s_$_21),call0formal_$_#l_$_0_$2,#x_$13) ));
	assume $timestamp_post_strict($s_$_21,$s_$_22);
	assume $good_state_ext(#tok$1^200.19,$s_$_22);
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr_cast($null,^Node)));
	assert  $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assert  $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $ptr_eq($read_ptr($s_$_22,$dot($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node),Node.parent),^Node),$null);
	assert  (forall  Q#m$1^82.29#dt1_$17 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$17))) ==> (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$17)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$32 : Integer, Q#m$1^82.29#dt1_$18 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$32)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$18)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$32))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$18)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$32))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$32)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$18))) ==> ($mem($s_$_22,$dot($ptr(^Node,Q#m$1^82.29#dt1_$18),Node.key)) < $mem($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$32),Node.key))))) ));
	assert  (forall  Q#n$1^82.29#dt1_$33 : Integer, Q#m$1^82.29#dt1_$19 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$33)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$19)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$33))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$19)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$33))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$33)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$19))) ==> ($mem($s_$_22,$dot($ptr(^Node,Q#m$1^82.29#dt1_$19),Node.key)) > $mem($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$33),Node.key))))) ));
	assert  (forall  Q#m$1^82.29#dt1_$20 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$20)))} {F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$20)))} {sk_hack(F#mark2($ref($ptr(^Node,Q#m$1^82.29#dt1_$20))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$20))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$20))) <==> $set_in($ptr(^Node,Q#m$1^82.29#dt1_$20),$owns($s_$_22,$ptr(^Tree,P#t)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$34 : Integer, Q#m$1^82.29#dt1_$21 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$34))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$21)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$34))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$21)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$34))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$21))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$21)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$35 : Integer, Q#m$1^82.29#dt1_$22 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$35))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$22)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$35))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^82.29#dt1_$22)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$35))),$ref($ptr(^Node,Q#m$1^82.29#dt1_$22))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$35)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$36 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$36))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$36))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$36))) && $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$36)))),Node.left),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$36))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$36),Node.left),^Node)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$37 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$37))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$37))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$37))) && $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$37)))),Node.left),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_22,$dot($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$37),Node.left),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$37))) ));
	assert  (forall  Q#n$1^82.29#dt1_$38 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$38))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$38))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$38))) && $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$38)))),Node.right),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$38))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$38),Node.right),^Node)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$39 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$39))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$39))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$39))) && $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$39)))),Node.right),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_22,$dot($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$39),Node.right),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$39))) ));
	assert  (forall  Q#n$1^82.29#dt1_$40 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$40))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$40))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$40))) && $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$40)))),Node.parent),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$40),Node.parent),^Node)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$41 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$41))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$41))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$41))) && $ptr_neq($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^82.29#dt1_$41)))),Node.parent),^Node),$null)) ==> ($ptr_eq($read_ptr($s_$_22,$dot($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$41),Node.parent),^Node),Node.left),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$41)) || $ptr_eq($read_ptr($s_$_22,$dot($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^82.29#dt1_$41),Node.parent),^Node),Node.right),^Node),$ptr(^Node,Q#n$1^82.29#dt1_$41)))) ));
	assert  (forall  Q#n$1^82.29#dt1_$42 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$42)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^82.29#dt1_$42))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$42))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$42))),$ref($ptr(^Node,Q#n$1^82.29#dt1_$42)))) ));
	assert  true;
	assert  (forall  Q#m$1^83.29#dt1_$5 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_22,$dot($ptr(^Node,Q#m$1^83.29#dt1_$5),Node.key)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1_$5))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1_$5))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_22,$dot($ptr(^Node,Q#m$1^83.29#dt1_$5),Node.key))) == $mem($s_$_22,$dot($ptr(^Node,Q#m$1^83.29#dt1_$5),Node.value)))) ));
	assert  (forall  Q#k$1^83.29#tc2_$2 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^83.29#tc2_$2)} ( $in_range_i4(Q#k$1^83.29#tc2_$2) ==> (((forall  Q#m$1^83.29#dt1_$6 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^83.29#dt1_$6))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^83.29#dt1_$6))) ==> (!($mem($s_$_22,$dot($ptr(^Node,Q#m$1^83.29#dt1_$6),Node.key)) == Q#k$1^83.29#tc2_$2))) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^83.29#tc2_$2) == 0)) ));
	assert  (forall  Q#n$1^84.29#dt1_$5 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$5))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1_$5))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1_$5))) && $ptr_eq($read_ptr($s_$_22,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$5)))),Node.parent),^Node),$null)) ==> ($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$5),$ptr_cast($null,^Node)) || $ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$5),$read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node)))) ));
	assert  (forall  Q#n$1^84.29#dt1_$6 : Integer, Q#m$1^84.29#dt1_$2 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$6)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$2)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^84.29#dt1_$6))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^84.29#dt1_$2)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^84.29#dt1_$6)))))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$2))) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^84.29#dt1_$6))) && (((($ptr_eq($ptr(^Node,Q#n$1^84.29#dt1_$6),$ptr_cast($null,^Node)) && $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1_$2),$ptr_cast($null,^Node))) || $ptr_eq($ptr(^Node,Q#m$1^84.29#dt1_$2),$ptr(^Node,Q#n$1^84.29#dt1_$6))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^84.29#dt1_$6),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$2)))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_22,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_22,$dot($ptr(^Node,Q#n$1^84.29#dt1_$6),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^84.29#dt1_$2)))))) ));
	assume $full_stop($s_$_22);
	assert  $position_marker();
	assume $s_$_23 == $s_$_22;
	goto $#exit;
anon02_Then:
	assume $_$_condition_$1;
	assume $_$_condition_$1 <==> true;
	assume true;
	assert  $typed2($s_$_12,$dot($ptr(^Node,P#x),Node.key),^^i4);
	assert  $thread_local2($s_$_12,$dot($ptr(^Node,P#x),Node.key),^^i4);
	assert  $typed2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key),^^i4);
	assert  $thread_local2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key),^^i4);
	assume true;
	if ($_$_condition_$2) { goto anon03_Then; } else { goto anon03_Else; }
anon02_Else:
	assume !$_$_condition_$1;
	assume $_$_condition_$1 <==> true;
	assume !true;
	assume $s_$_19 == $s_$_12;
	goto $#break_11;
anon03_Then:
	assume $_$_condition_$2;
	assume $mem($s_$_12,$dot($ptr(^Node,P#x),Node.key)) < $mem($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key));
	assert  $typed2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.left),$ptr_to(^Node));
	assert  $thread_local2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.left),$ptr_to(^Node));
	assume L#n_$_1 == $ref($read_ptr($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.left),^Node));
	assume $local_value_is($s_$_12,#tok$1^179.7,#loc.n,$ptr_to_int($ptr(^Node,L#n_$_1)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_12,#tok$1^179.7,#loc.n,$ptr(^Node,L#n_$_1),$ptr_to(^Node));
	assume true;
	if ($_$_condition_$3) { goto anon04_Then; } else { goto anon04_Else; }
anon03_Else:
	assume !$_$_condition_$2;
	assume $mem($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key)) <= $mem($s_$_12,$dot($ptr(^Node,P#x),Node.key));
	assert  $typed2($s_$_12,$dot($ptr(^Node,P#x),Node.key),^^i4);
	assert  $thread_local2($s_$_12,$dot($ptr(^Node,P#x),Node.key),^^i4);
	assert  $typed2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key),^^i4);
	assert  $thread_local2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key),^^i4);
	assume true;
	if ($_$_condition_$4) { goto anon05_Then; } else { goto anon05_Else; }
anon04_Then:
	assume $_$_condition_$3;
	assume $_$_condition_$3 <==> $ptr_eq($ptr(^Node,L#n_$_1),$null);
	assume $ptr_eq($ptr(^Node,L#n_$_1),$null);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#30,$ptrset_to_int(owns#30),^$#ptrset);
	assume owns#30_$_0 == $set_empty();
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#30,$ptrset_to_int(owns#30_$_0),^$#ptrset);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#29,$state_to_int(prestate#29),^$#state_t);
	assume prestate#29_$_0 == $current_state($s_$_12);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#29,$state_to_int(prestate#29_$_0),^$#state_t);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#31,$state_to_int(prestate#31),^$#state_t);
	assume prestate#31_$_0 == $current_state($s_$_12);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#31,$state_to_int(prestate#31_$_0),^$#state_t);
	assert  $wrapped($s_$_12,$ptr(^Node,L#p_$_1),^Node);
	assert  $top_writable($s_$_12,#wrTime$1^168.28,$ptr(^Node,L#p_$_1));
	assume $inv($s_$_12,$ptr(^Node,L#p_$_1),^Node);
	assume owns#30_$_0 == $owns($s_$_12,$ptr(^Node,L#p_$_1));
	assume $pre_static_unwrap($s_$_12);
	assume call0formal_$_#l_$_0_$5 == $ptr(^Node,L#p_$_1);
	assert  (!$is_claimable($typ(call0formal_$_#l_$_0_$5))) || ($ref_cnt($s_$_12,call0formal_$_#l_$_0_$5) == 0);
	assert  $pre_static_unwrap($s_$_12);
	assume $select.sec.pc($s_$_16) == $select.sec.pc($s_$_12);
	assume $mutable($s_$_16,call0formal_$_#l_$_0_$5);
	assume $owns($s_$_12,call0formal_$_#l_$_0_$5) == $owns($s_$_16,call0formal_$_#l_$_0_$5);
	assume (forall  #p_$75 : $ptr :: {$st($s_$_16,#p_$75)} {$ts($s_$_16,#p_$75)} {$set_in(#p_$75,$owns($s_$_12,call0formal_$_#l_$_0_$5))} ( $set_in(#p_$75,$owns($s_$_12,call0formal_$_#l_$_0_$5)) ==> ((($typed($s_$_12,#p_$75) && $wrapped($s_$_16,#p_$75,$typ(#p_$75))) && $timestamp_is_now($s_$_16,#p_$75)) && $is_non_primitive($typ(#p_$75))) ));
	assume (forall  #p_$76 : $ptr :: {$set_in(#p_$76,$owns($s_$_12,call0formal_$_#l_$_0_$5)),$is_claimable($typ(#p_$76))} ( $set_in(#p_$76,$owns($s_$_12,call0formal_$_#l_$_0_$5)) ==> ($is_claimable($typ(#p_$76)) ==> ($ref_cnt($s_$_12,#p_$76) == $ref_cnt($s_$_16,#p_$76))) ));
	assume (forall  #p_$77 : $ptr :: {$thread_local($s_$_16,#p_$77)} ( $thread_local($s_$_12,#p_$77) ==> $thread_local($s_$_16,#p_$77) ));
	assume $timestamp_is_now($s_$_16,call0formal_$_#l_$_0_$5);
	assume $typemap($s_$_12) == $typemap($s_$_16);
	assume (forall  #p_$78 : $ptr :: {$st($s_$_16,#p_$78)} {:weight  0}( (($st($s_$_16,#p_$78) == $st($s_$_12,#p_$78)) || ($nested($s_$_12,#p_$78) && $set_in(#p_$78,$owns($s_$_12,call0formal_$_#l_$_0_$5)))) || (#p_$78 == call0formal_$_#l_$_0_$5) ));
	assume (exists  #x_$8 : Integer :: ( $memory($s_$_16) == $store.mem($memory($s_$_12),call0formal_$_#l_$_0_$5,#x_$8) ));
	assume $timestamp_post_strict($s_$_12,$s_$_16);
	assume $post_unwrap($s_$_12,$s_$_16);
	assume $good_state_ext(#tok$1^181.36,$s_$_16);
	assume $full_stop($s_$_16);
	assert  $typed2($s_$_16,$dot($ptr(^Node,L#p_$_1),Node.left),$ptr_to(^Node));
	assert  $writable($s_$_16,#wrTime$1^168.28,$dot($ptr(^Node,L#p_$_1),Node.left));
	assume call0formal_$_p_$_0_$9 == $dot($ptr(^Node,L#p_$_1),Node.left);
	assume call1formal_$_v_$_0_$9 == $ref($ptr(^Node,P#x));
	assume $select.sec.pc($s_$_17) == $select.sec.pc($s_$_16);
	assume $typemap($s_$_17) == $typemap($s_$_16);
	assume $statusmap($s_$_17) == $statusmap($s_$_16);
	assume $memory($s_$_17) == $store.mem($memory($s_$_16),call0formal_$_p_$_0_$9,call1formal_$_v_$_0_$9);
	assume $timestamp_post_strict($s_$_16,$s_$_17);
	assume $full_stop_ext(#tok$1^181.41,$s_$_17);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.prestate#34,$state_to_int(prestate#34),^$#state_t);
	assume prestate#34_$_0 == $current_state($s_$_17);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.prestate#34,$state_to_int(prestate#34_$_0),^$#state_t);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.staticWrapState#32,$state_to_int(staticWrapState#32),^$#state_t);
	assume staticWrapState#32_$_0 == $current_state($s_$_17);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.staticWrapState#32,$state_to_int(staticWrapState#32_$_0),^$#state_t);
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.owns#33,$ptrset_to_int(owns#33),^$#ptrset);
	assume owns#33_$_0 == $set_empty();
	assume $local_value_is($s_$_17,#tok$2^0.0,#loc.owns#33,$ptrset_to_int(owns#33_$_0),^$#ptrset);
	assert  $top_writable($s_$_17,#wrTime$1^168.28,$ptr(^Node,L#p_$_1));
	assume $pre_static_wrap($s_$_17);
	assume call0formal_$_#l_$_0_$6 == $ptr(^Node,L#p_$_1);
	assert  $pre_static_wrap($s_$_17);
	assert  !($kind_of($typ(call0formal_$_#l_$_0_$6)) == $kind_primitive);
	assert  $typed($s_$_17,call0formal_$_#l_$_0_$6);
	assert  !$closed($s_$_17,call0formal_$_#l_$_0_$6);
	assert  $owner($s_$_17,call0formal_$_#l_$_0_$6) == $me();
	assume $select.sec.pc($s_$_18) == $select.sec.pc($s_$_17);
	assume $wrapped($s_$_18,call0formal_$_#l_$_0_$6,$typ(call0formal_$_#l_$_0_$6));
	assume $is_claimable($typ(call0formal_$_#l_$_0_$6)) ==> (($ref_cnt($s_$_17,call0formal_$_#l_$_0_$6) == 0) && ($ref_cnt($s_$_18,call0formal_$_#l_$_0_$6) == 0));
	assume $typemap($s_$_17) == $typemap($s_$_18);
	assume (exists  #st_$0 : $status :: ( $statusmap($s_$_18) == $store.sm($statusmap(staticWrapState#32_$_0),call0formal_$_#l_$_0_$6,#st_$0) ));
	assume (exists  #x_$9 : Integer :: ( $memory($s_$_18) == $store.mem($store.mem($memory($s_$_17),call0formal_$_#l_$_0_$6,#x_$9),$dot(call0formal_$_#l_$_0_$6,$owns_set_field($typ(call0formal_$_#l_$_0_$6))),$ptrset_to_int(owns#33_$_0)) ));
	assume $timestamp_post_strict($s_$_17,$s_$_18);
	assume $good_state_ext(#tok$1^181.36,$s_$_18);
	assert  $set_eq($owns($s_$_18,$ptr(^Node,L#p_$_1)),$set_empty());
	assume $full_stop($s_$_18);
	assume $s_$_19 == $s_$_18;
	goto $#break_11;
anon04_Else:
	assume !$_$_condition_$3;
	assume $_$_condition_$3 <==> $ptr_eq($ptr(^Node,L#n_$_1),$null);
	assume !$ptr_eq($ptr(^Node,L#n_$_1),$null);
	assume L#n_$_3 == L#n_$_1;
	goto anon33;
anon05_Then:
	assume $_$_condition_$4;
	assume $mem($s_$_12,$dot($ptr(^Node,P#x),Node.key)) > $mem($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key));
	assert  $typed2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.right),$ptr_to(^Node));
	assert  $thread_local2($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.right),$ptr_to(^Node));
	assume L#n_$_2 == $ref($read_ptr($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.right),^Node));
	assume $local_value_is($s_$_12,#tok$1^185.7,#loc.n,$ptr_to_int($ptr(^Node,L#n_$_2)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_12,#tok$1^185.7,#loc.n,$ptr(^Node,L#n_$_2),$ptr_to(^Node));
	assume true;
	if ($_$_condition_$5) { goto anon06_Then; } else { goto anon06_Else; }
anon05_Else:
	assume !$_$_condition_$4;
	assume $mem($s_$_12,$dot($ptr(^Node,L#p_$_1),Node.key)) >= $mem($s_$_12,$dot($ptr(^Node,P#x),Node.key));
	assert  false;
	assume false;
	assume $s_$_25 == $s_$_12;
	goto $exit;
anon33:
	assert  F#doMark($ref($ptr(^Node,L#p_$_1)));
	assert  F#doMark($ref($ptr(^Node,L#n_$_3)));
	assume F#doMark($ref($ptr(^Node,L#p_$_1))) && F#doMark($ref($ptr(^Node,L#n_$_3)));
	assume $local_value_is($s_$_12,#tok$1^194.37,#loc.res_lambda#7#20,$map_t..ptr_to..^Node.^^bool_to_int(res_lambda#7#20_$_0),$map_t($ptr_to(^Node),^^bool));
	assert  $typed2($s_$_12,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $thread_local2($s_$_12,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assume call0formal_$_#l1_$_0_$1 == $select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,L#n_$_3)));
	assume call1formal_$_#l0_$_0_$1 == $ref($ptr(^Node,P#x));
	assume call2formal_$_$result_$_0_$1 == F#lambda#7(call0formal_$_#l1_$_0_$1,call1formal_$_#l0_$_0_$1);
	assume $call_transition($s_$_12,$s_$_12);
	assume $full_stop_ext(#tok$1^194.37,$s_$_12);
	assume $local_value_is($s_$_12,#tok$1^194.37,#loc.res_lambda#7#20,$map_t..ptr_to..^Node.^^bool_to_int(call2formal_$_$result_$_0_$1),$map_t($ptr_to(^Node),^^bool));
	assert  $typed2($s_$_12,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $writable($s_$_12,#wrTime$1^168.28,$dot($ptr(^Tree,P#t),Tree.R));
	assert  $typed2($s_$_12,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assert  $thread_local2($s_$_12,$dot($ptr(^Tree,P#t),Tree.R),$map_t($ptr_to(^Node),$map_t($ptr_to(^Node),^^bool)));
	assume call0formal_$_p_$_0_$7 == $dot($ptr(^Tree,P#t),Tree.R);
	assume call1formal_$_v_$_0_$7 == $map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool_to_int($store.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_12,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,L#n_$_3)),call2formal_$_$result_$_0_$1));
	assume $select.sec.pc($s_$_24) == $select.sec.pc($s_$_12);
	assume $typemap($s_$_24) == $typemap($s_$_12);
	assume $statusmap($s_$_24) == $statusmap($s_$_12);
	assume $memory($s_$_24) == $store.mem($memory($s_$_12),call0formal_$_p_$_0_$7,call1formal_$_v_$_0_$7);
	assume $timestamp_post_strict($s_$_12,$s_$_24);
	assume $full_stop_ext(#tok$1^194.27,$s_$_24);
	assume L#p_$_2 == $ref($ptr(^Node,L#n_$_3));
	assume $local_value_is($s_$_24,#tok$1^195.5,#loc.p,$ptr_to_int($ptr(^Node,L#p_$_2)),$ptr_to(^Node)) && $local_value_is_ptr($s_$_24,#tok$1^195.5,#loc.p,$ptr(^Node,L#p_$_2),$ptr_to(^Node));
	assume true;
	assert  (forall  Q#p$1^169.32#tc3_$1 : $ptr :: ( $set_in(Q#p$1^169.32#tc3_$1,$owns($s_$_24,$ptr(^Tree,P#t))) ==> ((Q#p$1^169.32#tc3_$1 == $ptr(^Node,P#x)) || $wrapped($s_$_24,Q#p$1^169.32#tc3_$1,$typ(Q#p$1^169.32#tc3_$1))) ));
	assert  $mutable($s_$_24,$ptr(^Node,P#x));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_11,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))));
	assert  $eq.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_11,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,P#x))),$select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,P#x))));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr_cast($null,^Node)));
	assert  $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node)));
	assert  $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node),$null) ==> $ptr_eq($read_ptr($s_$_24,$dot($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node),Node.parent),^Node),$null);
	assert  (forall  Q#m$1^171.31#dt1_$11 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$11))) ==> (!$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr_cast($null,^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$11)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$21 : Integer, Q#m$1^171.31#dt1_$12 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$21)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$12)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$21))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$12)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$21))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$21)))),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$12))) ==> ($mem($s_$_24,$dot($ptr(^Node,Q#m$1^171.31#dt1_$12),Node.key)) < $mem($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$21),Node.key))))) ));
	assert  (forall  Q#n$1^171.31#dt1_$22 : Integer, Q#m$1^171.31#dt1_$13 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$22)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$13)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$22))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$13)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$22))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$22)))),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$13))) ==> ($mem($s_$_24,$dot($ptr(^Node,Q#m$1^171.31#dt1_$13),Node.key)) > $mem($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$22),Node.key))))) ));
	assert  (forall  Q#m$1^171.31#dt1_$14 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$14)))} {F#mark2($ref($ptr(^Node,Q#m$1^171.31#dt1_$14)))} {sk_hack(F#mark2($ref($ptr(^Node,Q#m$1^171.31#dt1_$14))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$14))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$14))) <==> $set_in($ptr(^Node,Q#m$1^171.31#dt1_$14),$owns($s_$_24,$ptr(^Tree,P#t)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$23 : Integer, Q#m$1^171.31#dt1_$15 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$23))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$15)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$23))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$15)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$23))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$15))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$15)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$24 : Integer, Q#m$1^171.31#dt1_$16 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$24))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$16)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$24))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^171.31#dt1_$16)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$24))),$ref($ptr(^Node,Q#m$1^171.31#dt1_$16))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$24)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$25 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$25))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$25))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$25))) && $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$25)))),Node.left),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$25))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$25),Node.left),^Node)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$26 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$26))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$26))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$26))) && $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$26)))),Node.left),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_24,$dot($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$26),Node.left),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$26))) ));
	assert  (forall  Q#n$1^171.31#dt1_$27 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$27))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$27))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$27))) && $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$27)))),Node.right),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$27))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$27),Node.right),^Node)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$28 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$28))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$28))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$28))) && $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$28)))),Node.right),^Node),$null)) ==> $ptr_eq($read_ptr($s_$_24,$dot($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$28),Node.right),^Node),Node.parent),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$28))) ));
	assert  (forall  Q#n$1^171.31#dt1_$29 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$29))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$29))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$29))) && $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$29)))),Node.parent),^Node),$null)) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$29),Node.parent),^Node)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$30 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$30))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$30))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$30))) && $ptr_neq($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^171.31#dt1_$30)))),Node.parent),^Node),$null)) ==> ($ptr_eq($read_ptr($s_$_24,$dot($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$30),Node.parent),^Node),Node.left),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$30)) || $ptr_eq($read_ptr($s_$_24,$dot($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^171.31#dt1_$30),Node.parent),^Node),Node.right),^Node),$ptr(^Node,Q#n$1^171.31#dt1_$30)))) ));
	assert  (forall  Q#n$1^171.31#dt1_$31 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$31)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^171.31#dt1_$31))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$31))) ==> $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$31))),$ref($ptr(^Node,Q#n$1^171.31#dt1_$31)))) ));
	assert  true;
	assert  (forall  Q#m$1^172.31#dt1_$3 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_24,$dot($ptr(^Node,Q#m$1^172.31#dt1_$3),Node.key)))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^172.31#dt1_$3))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^172.31#dt1_$3))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.abs))),$mem($s_$_24,$dot($ptr(^Node,Q#m$1^172.31#dt1_$3),Node.key))) == $mem($s_$_24,$dot($ptr(^Node,Q#m$1^172.31#dt1_$3),Node.value)))) ));
	assert  (forall  Q#k$1^172.31#tc2_$1 : Integer :: {$select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^172.31#tc2_$1)} ( $in_range_i4(Q#k$1^172.31#tc2_$1) ==> (((forall  Q#m$1^172.31#dt1_$4 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^172.31#dt1_$4))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#m$1^172.31#dt1_$4))) ==> (!($mem($s_$_24,$dot($ptr(^Node,Q#m$1^172.31#dt1_$4),Node.key)) == Q#k$1^172.31#tc2_$1))) ))) ==> ($select.$map_t..^^i4.^^i4($int_to_map_t..^^i4.^^i4($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.abs))),Q#k$1^172.31#tc2_$1) == 0)) ));
	assert  (forall  Q#n$1^173.31#dt1_$3 : Integer :: {$ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$3))))} ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^173.31#dt1_$3))) ==> (($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^173.31#dt1_$3))) && $ptr_eq($read_ptr($s_$_24,$dot($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$3)))),Node.parent),^Node),$null)) ==> ($ptr_eq($ptr(^Node,Q#n$1^173.31#dt1_$3),$ptr(^Node,P#x)) || $ptr_eq($ptr(^Node,Q#n$1^173.31#dt1_$3),$read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node)))) ));
	assert  (forall  Q#n$1^173.31#dt1_$4 : Integer, Q#m$1^173.31#dt1_$1 : Integer :: {$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$4)))))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$1)))} ( ($in_range_phys_ptr($ref($ptr(^Node,Q#n$1^173.31#dt1_$4))) && $in_range_phys_ptr($ref($ptr(^Node,Q#m$1^173.31#dt1_$1)))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($ptr(^Node,F#mark($ref($ptr(^Node,Q#n$1^173.31#dt1_$4)))))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$1))) <==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^173.31#dt1_$4))) && (((($ptr_eq($ptr(^Node,Q#n$1^173.31#dt1_$4),$ptr(^Node,L#p_$_2)) && $ptr_eq($ptr(^Node,Q#m$1^173.31#dt1_$1),$ptr(^Node,P#x))) || $ptr_eq($ptr(^Node,Q#m$1^173.31#dt1_$1),$ptr(^Node,Q#n$1^173.31#dt1_$4))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^173.31#dt1_$4),Node.left),^Node))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$1)))) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,Q#n$1^173.31#dt1_$4),Node.right),^Node))),$ref($ptr(^Node,Q#m$1^173.31#dt1_$1)))))) ));
	assert  $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,L#p_$_2)));
	assert  $ptr_neq($ptr(^Node,L#p_$_2),$ptr(^Node,P#x));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,L#p_$_2),Node.left),^Node))),$ref($ptr(^Node,P#x)));
	assert  !$select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Node,L#p_$_2),Node.right),^Node))),$ref($ptr(^Node,P#x)));
	assert  (forall  Q#n$1^176.31#dt1_$1 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^176.31#dt1_$1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_24,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_24,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^176.31#dt1_$1))) ==> ($ptr_eq($ptr(^Node,Q#n$1^176.31#dt1_$1),$ptr(^Node,P#x)) || (!($mem($s_$_24,$dot($ptr(^Node,Q#n$1^176.31#dt1_$1),Node.key)) == $mem($s_$_24,$dot($ptr(^Node,P#x),Node.key)))))) ));
	assume false;
	assume $s_$_25 == $s_$_24;
	goto $exit;
anon06_Then:
	assume $_$_condition_$5;
	assume $_$_condition_$5 <==> $ptr_eq($ptr(^Node,L#n_$_2),$null);
	assume $ptr_eq($ptr(^Node,L#n_$_2),$null);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#36,$ptrset_to_int(owns#36),^$#ptrset);
	assume owns#36_$_0 == $set_empty();
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.owns#36,$ptrset_to_int(owns#36_$_0),^$#ptrset);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#35,$state_to_int(prestate#35),^$#state_t);
	assume prestate#35_$_0 == $current_state($s_$_12);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#35,$state_to_int(prestate#35_$_0),^$#state_t);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#37,$state_to_int(prestate#37),^$#state_t);
	assume prestate#37_$_0 == $current_state($s_$_12);
	assume $local_value_is($s_$_12,#tok$2^0.0,#loc.prestate#37,$state_to_int(prestate#37_$_0),^$#state_t);
	assert  $wrapped($s_$_12,$ptr(^Node,L#p_$_1),^Node);
	assert  $top_writable($s_$_12,#wrTime$1^168.28,$ptr(^Node,L#p_$_1));
	assume $inv($s_$_12,$ptr(^Node,L#p_$_1),^Node);
	assume owns#36_$_0 == $owns($s_$_12,$ptr(^Node,L#p_$_1));
	assume $pre_static_unwrap($s_$_12);
	assume call0formal_$_#l_$_0_$3 == $ptr(^Node,L#p_$_1);
	assert  (!$is_claimable($typ(call0formal_$_#l_$_0_$3))) || ($ref_cnt($s_$_12,call0formal_$_#l_$_0_$3) == 0);
	assert  $pre_static_unwrap($s_$_12);
	assume $select.sec.pc($s_$_13) == $select.sec.pc($s_$_12);
	assume $mutable($s_$_13,call0formal_$_#l_$_0_$3);
	assume $owns($s_$_12,call0formal_$_#l_$_0_$3) == $owns($s_$_13,call0formal_$_#l_$_0_$3);
	assume (forall  #p_$79 : $ptr :: {$st($s_$_13,#p_$79)} {$ts($s_$_13,#p_$79)} {$set_in(#p_$79,$owns($s_$_12,call0formal_$_#l_$_0_$3))} ( $set_in(#p_$79,$owns($s_$_12,call0formal_$_#l_$_0_$3)) ==> ((($typed($s_$_12,#p_$79) && $wrapped($s_$_13,#p_$79,$typ(#p_$79))) && $timestamp_is_now($s_$_13,#p_$79)) && $is_non_primitive($typ(#p_$79))) ));
	assume (forall  #p_$80 : $ptr :: {$set_in(#p_$80,$owns($s_$_12,call0formal_$_#l_$_0_$3)),$is_claimable($typ(#p_$80))} ( $set_in(#p_$80,$owns($s_$_12,call0formal_$_#l_$_0_$3)) ==> ($is_claimable($typ(#p_$80)) ==> ($ref_cnt($s_$_12,#p_$80) == $ref_cnt($s_$_13,#p_$80))) ));
	assume (forall  #p_$81 : $ptr :: {$thread_local($s_$_13,#p_$81)} ( $thread_local($s_$_12,#p_$81) ==> $thread_local($s_$_13,#p_$81) ));
	assume $timestamp_is_now($s_$_13,call0formal_$_#l_$_0_$3);
	assume $typemap($s_$_12) == $typemap($s_$_13);
	assume (forall  #p_$82 : $ptr :: {$st($s_$_13,#p_$82)} {:weight  0}( (($st($s_$_13,#p_$82) == $st($s_$_12,#p_$82)) || ($nested($s_$_12,#p_$82) && $set_in(#p_$82,$owns($s_$_12,call0formal_$_#l_$_0_$3)))) || (#p_$82 == call0formal_$_#l_$_0_$3) ));
	assume (exists  #x_$10 : Integer :: ( $memory($s_$_13) == $store.mem($memory($s_$_12),call0formal_$_#l_$_0_$3,#x_$10) ));
	assume $timestamp_post_strict($s_$_12,$s_$_13);
	assume $post_unwrap($s_$_12,$s_$_13);
	assume $good_state_ext(#tok$1^187.36,$s_$_13);
	assume $full_stop($s_$_13);
	assert  $typed2($s_$_13,$dot($ptr(^Node,L#p_$_1),Node.right),$ptr_to(^Node));
	assert  $writable($s_$_13,#wrTime$1^168.28,$dot($ptr(^Node,L#p_$_1),Node.right));
	assume call0formal_$_p_$_0_$8 == $dot($ptr(^Node,L#p_$_1),Node.right);
	assume call1formal_$_v_$_0_$8 == $ref($ptr(^Node,P#x));
	assume $select.sec.pc($s_$_14) == $select.sec.pc($s_$_13);
	assume $typemap($s_$_14) == $typemap($s_$_13);
	assume $statusmap($s_$_14) == $statusmap($s_$_13);
	assume $memory($s_$_14) == $store.mem($memory($s_$_13),call0formal_$_p_$_0_$8,call1formal_$_v_$_0_$8);
	assume $timestamp_post_strict($s_$_13,$s_$_14);
	assume $full_stop_ext(#tok$1^187.41,$s_$_14);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.prestate#40,$state_to_int(prestate#40),^$#state_t);
	assume prestate#40_$_0 == $current_state($s_$_14);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.prestate#40,$state_to_int(prestate#40_$_0),^$#state_t);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.staticWrapState#38,$state_to_int(staticWrapState#38),^$#state_t);
	assume staticWrapState#38_$_0 == $current_state($s_$_14);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.staticWrapState#38,$state_to_int(staticWrapState#38_$_0),^$#state_t);
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.owns#39,$ptrset_to_int(owns#39),^$#ptrset);
	assume owns#39_$_0 == $set_empty();
	assume $local_value_is($s_$_14,#tok$2^0.0,#loc.owns#39,$ptrset_to_int(owns#39_$_0),^$#ptrset);
	assert  $top_writable($s_$_14,#wrTime$1^168.28,$ptr(^Node,L#p_$_1));
	assume $pre_static_wrap($s_$_14);
	assume call0formal_$_#l_$_0_$4 == $ptr(^Node,L#p_$_1);
	assert  $pre_static_wrap($s_$_14);
	assert  !($kind_of($typ(call0formal_$_#l_$_0_$4)) == $kind_primitive);
	assert  $typed($s_$_14,call0formal_$_#l_$_0_$4);
	assert  !$closed($s_$_14,call0formal_$_#l_$_0_$4);
	assert  $owner($s_$_14,call0formal_$_#l_$_0_$4) == $me();
	assume $select.sec.pc($s_$_15) == $select.sec.pc($s_$_14);
	assume $wrapped($s_$_15,call0formal_$_#l_$_0_$4,$typ(call0formal_$_#l_$_0_$4));
	assume $is_claimable($typ(call0formal_$_#l_$_0_$4)) ==> (($ref_cnt($s_$_14,call0formal_$_#l_$_0_$4) == 0) && ($ref_cnt($s_$_15,call0formal_$_#l_$_0_$4) == 0));
	assume $typemap($s_$_14) == $typemap($s_$_15);
	assume (exists  #st_$1 : $status :: ( $statusmap($s_$_15) == $store.sm($statusmap(staticWrapState#38_$_0),call0formal_$_#l_$_0_$4,#st_$1) ));
	assume (exists  #x_$11 : Integer :: ( $memory($s_$_15) == $store.mem($store.mem($memory($s_$_14),call0formal_$_#l_$_0_$4,#x_$11),$dot(call0formal_$_#l_$_0_$4,$owns_set_field($typ(call0formal_$_#l_$_0_$4))),$ptrset_to_int(owns#39_$_0)) ));
	assume $timestamp_post_strict($s_$_14,$s_$_15);
	assume $good_state_ext(#tok$1^187.36,$s_$_15);
	assert  $set_eq($owns($s_$_15,$ptr(^Node,L#p_$_1)),$set_empty());
	assume $full_stop($s_$_15);
	assume $s_$_19 == $s_$_15;
	goto $#break_11;
anon06_Else:
	assume !$_$_condition_$5;
	assume $_$_condition_$5 <==> $ptr_eq($ptr(^Node,L#n_$_2),$null);
	assume !$ptr_eq($ptr(^Node,L#n_$_2),$null);
	assume L#n_$_3 == L#n_$_2;
	goto anon33;
GeneratedUnifiedExit:
	assert  (forall  Q#n$1^139.27#dt1 : Integer :: ( $in_range_phys_ptr($ref($ptr(^Node,Q#n$1^139.27#dt1))) ==> ($select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s_$_25,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s_$_25,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^139.27#dt1))) <==> ($ptr_eq($ptr(^Node,Q#n$1^139.27#dt1),$ptr(^Node,P#x)) || $select.$map_t..$ptr_to..^Node.^^bool($select.$map_t..$ptr_to..^Node.$map_t..$ptr_to..^Node.^^bool($int_to_map_t..ptr_to..^Node.map_t..ptr_to..^Node.^^bool($mem($s,$dot($ptr(^Tree,P#t),Tree.R))),$ref($read_ptr($s,$dot($ptr(^Tree,P#t),Tree.root),^Node))),$ref($ptr(^Node,Q#n$1^139.27#dt1))))) ));
	assert  ($mem($s,$dot($ptr(^Node,P#x),Node.key)) == $mem($s_$_25,$dot($ptr(^Node,P#x),Node.key))) && ($mem($s,$dot($ptr(^Node,P#x),Node.value)) == $mem($s_$_25,$dot($ptr(^Node,P#x),Node.value)));
	assert  $wrapped($s_$_25,$ptr(^Tree,P#t),^Tree);
	goto $exit;
}
