digraph CFG {
	graph [center=true  ];
	node [ shape = box, style=rounded, fontsize=5 ];
	edge [ tailport=s, headport=n, fontsize=5 ];

	"$start" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">$start</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $$Language$Dafny <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; o : T &bull; {Set#Empty : Set (T) [o]} ( &#172;Set#Empty : Set (T) [o] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; r_$1 : T &bull; {Set#Singleton(r_$1)} ( Set#Singleton(r_$1)[r_$1] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; r_$2 : T, o_$0 : T &bull; {Set#Singleton(r_$2)[o_$0]} ( Set#Singleton(r_$2)[o_$0] &hArr; (r_$2 = o_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a : Set (T) , x : T, o_$1 : T &bull; {Set#UnionOne(a,x)[o_$1]} ( Set#UnionOne(a,x)[o_$1] &hArr; ((o_$1 = x) &or; a[o_$1]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$0 : Set (T) , x_$0 : T &bull; {Set#UnionOne(a_$0,x_$0)} ( Set#UnionOne(a_$0,x_$0)[x_$0] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$1 : Set (T) , x_$1 : T, y : T &bull; {Set#UnionOne(a_$1,x_$1),a_$1[y]} ( a_$1[y] &rArr; Set#UnionOne(a_$1,x_$1)[y] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$2 : Set (T) , b : Set (T) , o_$2 : T &bull; {Set#Union(a_$2,b)[o_$2]} ( Set#Union(a_$2,b)[o_$2] &hArr; (a_$2[o_$2] &or; b[o_$2]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$3 : Set (T) , b_$0 : Set (T) , y_$0 : T &bull; {Set#Union(a_$3,b_$0),a_$3[y_$0]} ( a_$3[y_$0] &rArr; Set#Union(a_$3,b_$0)[y_$0] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$4 : Set (T) , b_$1 : Set (T) , y_$1 : T &bull; {Set#Union(a_$4,b_$1),b_$1[y_$1]} ( b_$1[y_$1] &rArr; Set#Union(a_$4,b_$1)[y_$1] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$5 : Set (T) , b_$2 : Set (T)  &bull; {Set#Union(a_$5,b_$2)} ( Set#Disjoint(a_$5,b_$2) &rArr; ((Set#Difference(Set#Union(a_$5,b_$2),a_$5) = b_$2) &and; (Set#Difference(Set#Union(a_$5,b_$2),b_$2) = a_$5)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$6 : Set (T) , b_$3 : Set (T) , o_$3 : T &bull; {Set#Intersection(a_$6,b_$3)[o_$3]} ( Set#Intersection(a_$6,b_$3)[o_$3] &hArr; (a_$6[o_$3] &and; b_$3[o_$3]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$7 : Set (T) , b_$4 : Set (T)  &bull; {Set#Union(Set#Union(a_$7,b_$4),b_$4)} ( Set#Union(Set#Union(a_$7,b_$4),b_$4) = Set#Union(a_$7,b_$4) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$8 : Set (T) , b_$5 : Set (T)  &bull; {Set#Union(a_$8,Set#Union(a_$8,b_$5))} ( Set#Union(a_$8,Set#Union(a_$8,b_$5)) = Set#Union(a_$8,b_$5) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$9 : Set (T) , b_$6 : Set (T)  &bull; {Set#Intersection(Set#Intersection(a_$9,b_$6),b_$6)} ( Set#Intersection(Set#Intersection(a_$9,b_$6),b_$6) = Set#Intersection(a_$9,b_$6) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$10 : Set (T) , b_$7 : Set (T)  &bull; {Set#Intersection(a_$10,Set#Intersection(a_$10,b_$7))} ( Set#Intersection(a_$10,Set#Intersection(a_$10,b_$7)) = Set#Intersection(a_$10,b_$7) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$11 : Set (T) , b_$8 : Set (T) , o_$4 : T &bull; {Set#Difference(a_$11,b_$8)[o_$4]} ( Set#Difference(a_$11,b_$8)[o_$4] &hArr; (a_$11[o_$4] &and; (&#172;b_$8[o_$4])) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$12 : Set (T) , b_$9 : Set (T) , y_$2 : T &bull; {Set#Difference(a_$12,b_$9),b_$9[y_$2]} ( b_$9[y_$2] &rArr; (&#172;Set#Difference(a_$12,b_$9)[y_$2]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$13 : Set (T) , b_$10 : Set (T)  &bull; {Set#Subset(a_$13,b_$10)} ( Set#Subset(a_$13,b_$10) &hArr; ((&forall;  o_$5 : T &bull; {a_$13[o_$5]} ( a_$13[o_$5] &rArr; b_$10[o_$5] ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$14 : Set (T) , b_$11 : Set (T)  &bull; {Set#Equal(a_$14,b_$11)} ( Set#Equal(a_$14,b_$11) &hArr; ((&forall;  o_$6 : T &bull; {a_$14[o_$6]} ( a_$14[o_$6] &hArr; b_$11[o_$6] ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$15 : Set (T) , b_$12 : Set (T)  &bull; {Set#Equal(a_$15,b_$12)} ( Set#Equal(a_$15,b_$12) &rArr; (a_$15 = b_$12) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$16 : Set (T) , b_$13 : Set (T)  &bull; {Set#Disjoint(a_$16,b_$13)} ( Set#Disjoint(a_$16,b_$13) &hArr; ((&forall;  o_$7 : T &bull; {a_$16[o_$7]} ( (&#172;a_$16[o_$7]) &or; (&#172;b_$13[o_$7]) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$17 : Set (T) , tick : TickType &bull; {Set#Choose(a_$17,tick)} ( (&#172;(a_$17 = Set#Empty : Set (T) )) &rArr; a_$17[Set#Choose(a_$17,tick)] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$18 : Integer, b_$14 : Integer &bull; {Math#min(a_$18,b_$14)} ( (a_$18 &le; b_$14) &hArr; (Math#min(a_$18,b_$14) = a_$18) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$19 : Integer, b_$15 : Integer &bull; {Math#min(a_$19,b_$15)} ( (b_$15 &le; a_$19) &hArr; (Math#min(a_$19,b_$15) = b_$15) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$20 : Integer, b_$16 : Integer &bull; {Math#min(a_$20,b_$16)} ( (Math#min(a_$20,b_$16) = a_$20) &or; (Math#min(a_$20,b_$16) = b_$16) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$21 : Integer &bull; {Math#clip(a_$21)} ( (0 &le; a_$21) &rArr; (Math#clip(a_$21) = a_$21) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$22 : Integer &bull; {Math#clip(a_$22)} ( (a_$22 &le; 0) &rArr; (Math#clip(a_$22) = 0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; ms : MultiSet (T)  &bull; {$IsGoodMultiSet(ms)} ( $IsGoodMultiSet(ms) &hArr; ((&forall;  o_$8 : T &bull; {ms[o_$8]} ( 0 &le; ms[o_$8] ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; o_$9 : T &bull; {MultiSet#Empty : MultiSet (T) [o_$9]} ( MultiSet#Empty : MultiSet (T) [o_$9] = 0 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; r_$3 : T, o_$10 : T &bull; {MultiSet#Singleton(r_$3)[o_$10]} ( ((MultiSet#Singleton(r_$3)[o_$10] = 1) &hArr; (r_$3 = o_$10)) &and; ((MultiSet#Singleton(r_$3)[o_$10] = 0) &hArr; (&#172;(r_$3 = o_$10))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; r_$4 : T &bull; {MultiSet#Singleton(r_$4)} ( MultiSet#Singleton(r_$4) = MultiSet#UnionOne(MultiSet#Empty : MultiSet (T) ,r_$4) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$23 : MultiSet (T) , x_$2 : T, o_$11 : T &bull; {MultiSet#UnionOne(a_$23,x_$2)[o_$11]} ( (0 &le; MultiSet#UnionOne(a_$23,x_$2)[o_$11]) &hArr; ((o_$11 = x_$2) &or; (0 &le; a_$23[o_$11])) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$24 : MultiSet (T) , x_$3 : T &bull; {MultiSet#UnionOne(a_$24,x_$3)} ( MultiSet#UnionOne(a_$24,x_$3)[x_$3] = (a_$24[x_$3] + 1) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$25 : MultiSet (T) , x_$4 : T, y_$3 : T &bull; {MultiSet#UnionOne(a_$25,x_$4),a_$25[y_$3]} ( (0 &le; a_$25[y_$3]) &rArr; (0 &le; MultiSet#UnionOne(a_$25,x_$4)[y_$3]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$26 : MultiSet (T) , x_$5 : T, y_$4 : T &bull; {MultiSet#UnionOne(a_$26,x_$5),a_$26[y_$4]} ( (&#172;(x_$5 = y_$4)) &rArr; (a_$26[y_$4] = MultiSet#UnionOne(a_$26,x_$5)[y_$4]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$27 : MultiSet (T) , b_$17 : MultiSet (T) , o_$12 : T &bull; {MultiSet#Union(a_$27,b_$17)[o_$12]} ( MultiSet#Union(a_$27,b_$17)[o_$12] = (a_$27[o_$12] + b_$17[o_$12]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$28 : MultiSet (T) , b_$18 : MultiSet (T) , y_$5 : T &bull; {MultiSet#Union(a_$28,b_$18),a_$28[y_$5]} ( (0 &le; a_$28[y_$5]) &rArr; (0 &le; MultiSet#Union(a_$28,b_$18)[y_$5]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$29 : MultiSet (T) , b_$19 : MultiSet (T) , y_$6 : T &bull; {MultiSet#Union(a_$29,b_$19),b_$19[y_$6]} ( (0 &le; b_$19[y_$6]) &rArr; (0 &le; MultiSet#Union(a_$29,b_$19)[y_$6]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$30 : MultiSet (T) , b_$20 : MultiSet (T)  &bull; {MultiSet#Union(a_$30,b_$20)} ( (MultiSet#Difference(MultiSet#Union(a_$30,b_$20),a_$30) = b_$20) &and; (MultiSet#Difference(MultiSet#Union(a_$30,b_$20),b_$20) = a_$30) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$31 : MultiSet (T) , b_$21 : MultiSet (T) , o_$13 : T &bull; {MultiSet#Intersection(a_$31,b_$21)[o_$13]} ( MultiSet#Intersection(a_$31,b_$21)[o_$13] = Math#min(a_$31[o_$13],b_$21[o_$13]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$32 : MultiSet (T) , b_$22 : MultiSet (T)  &bull; {MultiSet#Intersection(MultiSet#Intersection(a_$32,b_$22),b_$22)} ( MultiSet#Intersection(MultiSet#Intersection(a_$32,b_$22),b_$22) = MultiSet#Intersection(a_$32,b_$22) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$33 : MultiSet (T) , b_$23 : MultiSet (T)  &bull; {MultiSet#Intersection(a_$33,MultiSet#Intersection(a_$33,b_$23))} ( MultiSet#Intersection(a_$33,MultiSet#Intersection(a_$33,b_$23)) = MultiSet#Intersection(a_$33,b_$23) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$34 : MultiSet (T) , b_$24 : MultiSet (T) , o_$14 : T &bull; {MultiSet#Difference(a_$34,b_$24)[o_$14]} ( MultiSet#Difference(a_$34,b_$24)[o_$14] = Math#clip(a_$34[o_$14] - b_$24[o_$14]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$35 : MultiSet (T) , b_$25 : MultiSet (T) , y_$7 : T &bull; {MultiSet#Difference(a_$35,b_$25),b_$25[y_$7],a_$35[y_$7]} ( (a_$35[y_$7] &le; b_$25[y_$7]) &rArr; (MultiSet#Difference(a_$35,b_$25)[y_$7] = 0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$36 : MultiSet (T) , b_$26 : MultiSet (T)  &bull; {MultiSet#Subset(a_$36,b_$26)} ( MultiSet#Subset(a_$36,b_$26) &hArr; ((&forall;  o_$15 : T &bull; {a_$36[o_$15]} ( a_$36[o_$15] &le; b_$26[o_$15] ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$37 : MultiSet (T) , b_$27 : MultiSet (T)  &bull; {MultiSet#Equal(a_$37,b_$27)} ( MultiSet#Equal(a_$37,b_$27) &hArr; ((&forall;  o_$16 : T &bull; {a_$37[o_$16]} ( a_$37[o_$16] = b_$27[o_$16] ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$38 : MultiSet (T) , b_$28 : MultiSet (T)  &bull; {MultiSet#Equal(a_$38,b_$28)} ( MultiSet#Equal(a_$38,b_$28) &rArr; (a_$38 = b_$28) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$39 : MultiSet (T) , b_$29 : MultiSet (T)  &bull; {MultiSet#Disjoint(a_$39,b_$29)} ( MultiSet#Disjoint(a_$39,b_$29) &hArr; ((&forall;  o_$17 : T &bull; {a_$39[o_$17]} ( (a_$39[o_$17] = 0) &or; (b_$29[o_$17] = 0) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s : Set (T) , a_$40 : T &bull; {MultiSet#FromSet(s)[a_$40]} ( ((MultiSet#FromSet(s)[a_$40] = 0) &hArr; (&#172;s[a_$40])) &and; ((MultiSet#FromSet(s)[a_$40] = 1) &hArr; s[a_$40]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$0 : Seq (T)  &bull; {MultiSet#FromSeq(s_$0)} ( $IsGoodMultiSet(MultiSet#FromSeq(s_$0)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$1 : Seq (T) , v_$0 : T &bull; {MultiSet#FromSeq(Seq#Build(s_$1,v_$0))} ( MultiSet#FromSeq(Seq#Build(s_$1,v_$0)) = MultiSet#UnionOne(MultiSet#FromSeq(s_$1),v_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; &bull; MultiSet#FromSeq(Seq#Empty : Seq (T) ) = MultiSet#Empty : MultiSet (T) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$41 : Seq (T) , b_$30 : Seq (T)  &bull; {MultiSet#FromSeq(Seq#Append(a_$41,b_$30))} ( MultiSet#FromSeq(Seq#Append(a_$41,b_$30)) = MultiSet#Union(MultiSet#FromSeq(a_$41),MultiSet#FromSeq(b_$30)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$2 : Seq (T) , i : Integer, v_$1 : T, x_$6 : T &bull; {MultiSet#FromSeq(Seq#Update(s_$2,i,v_$1))[x_$6]} ( ((0 &le; i) &and; (i &le; Seq#Length(s_$2))) &rArr; (MultiSet#FromSeq(Seq#Update(s_$2,i,v_$1))[x_$6] = MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s_$2),MultiSet#Singleton(Seq#Index(s_$2,i))),MultiSet#Singleton(v_$1))[x_$6]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$3 : Seq (T) , x_$7 : T &bull; {MultiSet#FromSeq(s_$3)[x_$7]} ( ((&exist;  i_$0 : Integer &bull; {Seq#Index(s_$3,i_$0)} ( ((0 &le; i_$0) &and; (i_$0 &le; Seq#Length(s_$3))) &and; (x_$7 = Seq#Index(s_$3,i_$0)) ))) &hArr; (0 &le; MultiSet#FromSeq(s_$3)[x_$7]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$4 : Seq (T)  &bull; {Seq#Length(s_$4)} ( 0 &le; Seq#Length(s_$4) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; &bull; Seq#Length(Seq#Empty : Seq (T) ) = 0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$5 : Seq (T)  &bull; {Seq#Length(s_$5)} ( (Seq#Length(s_$5) = 0) &rArr; (s_$5 = Seq#Empty : Seq (T) ) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; t : T &bull; {Seq#Length(Seq#Singleton(t))} ( Seq#Length(Seq#Singleton(t)) = 1 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$6 : Seq (T) , v_$2 : T &bull; {Seq#Length(Seq#Build(s_$6,v_$2))} ( Seq#Length(Seq#Build(s_$6,v_$2)) = (1 + Seq#Length(s_$6)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$7 : Seq (T) , i_$1 : Integer, v_$3 : T &bull; {Seq#Index(Seq#Build(s_$7,v_$3),i_$1)} ( ((i_$1 = Seq#Length(s_$7)) &rArr; (Seq#Index(Seq#Build(s_$7,v_$3),i_$1) = v_$3)) &and; ((&#172;(i_$1 = Seq#Length(s_$7))) &rArr; (Seq#Index(Seq#Build(s_$7,v_$3),i_$1) = Seq#Index(s_$7,i_$1))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s0 : Seq (T) , s1 : Seq (T)  &bull; {Seq#Length(Seq#Append(s0,s1))} ( Seq#Length(Seq#Append(s0,s1)) = (Seq#Length(s0) + Seq#Length(s1)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; t_$0 : T &bull; {Seq#Index(Seq#Singleton(t_$0),0)} ( Seq#Index(Seq#Singleton(t_$0),0) = t_$0 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s0_$0 : Seq (T) , s1_$0 : Seq (T) , n : Integer &bull; {Seq#Index(Seq#Append(s0_$0,s1_$0),n)} ( ((n &le; Seq#Length(s0_$0)) &rArr; (Seq#Index(Seq#Append(s0_$0,s1_$0),n) = Seq#Index(s0_$0,n))) &and; ((Seq#Length(s0_$0) &le; n) &rArr; (Seq#Index(Seq#Append(s0_$0,s1_$0),n) = Seq#Index(s1_$0,n - Seq#Length(s0_$0)))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$8 : Seq (T) , i_$2 : Integer, v_$4 : T &bull; {Seq#Length(Seq#Update(s_$8,i_$2,v_$4))} ( ((0 &le; i_$2) &and; (i_$2 &le; Seq#Length(s_$8))) &rArr; (Seq#Length(Seq#Update(s_$8,i_$2,v_$4)) = Seq#Length(s_$8)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$9 : Seq (T) , i_$3 : Integer, v_$5 : T, n_$0 : Integer &bull; {Seq#Index(Seq#Update(s_$9,i_$3,v_$5),n_$0)} ( ((0 &le; n_$0) &and; (n_$0 &le; Seq#Length(s_$9))) &rArr; (((i_$3 = n_$0) &rArr; (Seq#Index(Seq#Update(s_$9,i_$3,v_$5),n_$0) = v_$5)) &and; ((&#172;(i_$3 = n_$0)) &rArr; (Seq#Index(Seq#Update(s_$9,i_$3,v_$5),n_$0) = Seq#Index(s_$9,n_$0)))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$10 : Seq (T) , x_$8 : T &bull; {Seq#Contains(s_$10,x_$8)} ( Seq#Contains(s_$10,x_$8) &hArr; ((&exist;  i_$4 : Integer &bull; {Seq#Index(s_$10,i_$4)} ( ((0 &le; i_$4) &and; (i_$4 &le; Seq#Length(s_$10))) &and; (Seq#Index(s_$10,i_$4) = x_$8) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x_$9 : ref &bull; {Seq#Contains(Seq#Empty : Seq (ref) ,x_$9)} ( &#172;Seq#Contains(Seq#Empty : Seq (ref) ,x_$9) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s0_$1 : Seq (T) , s1_$1 : Seq (T) , x_$10 : T &bull; {Seq#Contains(Seq#Append(s0_$1,s1_$1),x_$10)} ( Seq#Contains(Seq#Append(s0_$1,s1_$1),x_$10) &hArr; (Seq#Contains(s0_$1,x_$10) &or; Seq#Contains(s1_$1,x_$10)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$11 : Seq (T) , v_$6 : T, x_$11 : T &bull; {Seq#Contains(Seq#Build(s_$11,v_$6),x_$11)} ( Seq#Contains(Seq#Build(s_$11,v_$6),x_$11) &hArr; ((v_$6 = x_$11) &or; Seq#Contains(s_$11,x_$11)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$12 : Seq (T) , n_$1 : Integer, x_$12 : T &bull; {Seq#Contains(Seq#Take(s_$12,n_$1),x_$12)} ( Seq#Contains(Seq#Take(s_$12,n_$1),x_$12) &hArr; ((&exist;  i_$5 : Integer &bull; {Seq#Index(s_$12,i_$5)} ( (((0 &le; i_$5) &and; (i_$5 &le; n_$1)) &and; (i_$5 &le; Seq#Length(s_$12))) &and; (Seq#Index(s_$12,i_$5) = x_$12) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$13 : Seq (T) , n_$2 : Integer, x_$13 : T &bull; {Seq#Contains(Seq#Drop(s_$13,n_$2),x_$13)} ( Seq#Contains(Seq#Drop(s_$13,n_$2),x_$13) &hArr; ((&exist;  i_$6 : Integer &bull; {Seq#Index(s_$13,i_$6)} ( (((0 &le; n_$2) &and; (n_$2 &le; i_$6)) &and; (i_$6 &le; Seq#Length(s_$13))) &and; (Seq#Index(s_$13,i_$6) = x_$13) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s0_$2 : Seq (T) , s1_$2 : Seq (T)  &bull; {Seq#Equal(s0_$2,s1_$2)} ( Seq#Equal(s0_$2,s1_$2) &hArr; ((Seq#Length(s0_$2) = Seq#Length(s1_$2)) &and; ((&forall;  j : Integer &bull; {Seq#Index(s0_$2,j)} ( ((0 &le; j) &and; (j &le; Seq#Length(s0_$2))) &rArr; (Seq#Index(s0_$2,j) = Seq#Index(s1_$2,j)) )))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; a_$42 : Seq (T) , b_$31 : Seq (T)  &bull; {Seq#Equal(a_$42,b_$31)} ( Seq#Equal(a_$42,b_$31) &rArr; (a_$42 = b_$31) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s0_$3 : Seq (T) , s1_$3 : Seq (T) , n_$3 : Integer &bull; {Seq#SameUntil(s0_$3,s1_$3,n_$3)} ( Seq#SameUntil(s0_$3,s1_$3,n_$3) &hArr; ((&forall;  j_$0 : Integer &bull; {Seq#Index(s0_$3,j_$0)} ( ((0 &le; j_$0) &and; (j_$0 &le; n_$3)) &rArr; (Seq#Index(s0_$3,j_$0) = Seq#Index(s1_$3,j_$0)) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$14 : Seq (T) , n_$4 : Integer &bull; {Seq#Length(Seq#Take(s_$14,n_$4))} ( (0 &le; n_$4) &rArr; (((n_$4 &le; Seq#Length(s_$14)) &rArr; (Seq#Length(Seq#Take(s_$14,n_$4)) = n_$4)) &and; ((Seq#Length(s_$14) &le; n_$4) &rArr; (Seq#Length(Seq#Take(s_$14,n_$4)) = Seq#Length(s_$14)))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$15 : Seq (T) , n_$5 : Integer, j_$1 : Integer &bull; {Seq#Index(Seq#Take(s_$15,n_$5),j_$1)} {:weight  25}( (((0 &le; j_$1) &and; (j_$1 &le; n_$5)) &and; (j_$1 &le; Seq#Length(s_$15))) &rArr; (Seq#Index(Seq#Take(s_$15,n_$5),j_$1) = Seq#Index(s_$15,j_$1)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$16 : Seq (T) , n_$6 : Integer &bull; {Seq#Length(Seq#Drop(s_$16,n_$6))} ( (0 &le; n_$6) &rArr; (((n_$6 &le; Seq#Length(s_$16)) &rArr; (Seq#Length(Seq#Drop(s_$16,n_$6)) = (Seq#Length(s_$16) - n_$6))) &and; ((Seq#Length(s_$16) &le; n_$6) &rArr; (Seq#Length(Seq#Drop(s_$16,n_$6)) = 0))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$17 : Seq (T) , n_$7 : Integer, j_$2 : Integer &bull; {Seq#Index(Seq#Drop(s_$17,n_$7),j_$2)} {:weight  25}( (((0 &le; n_$7) &and; (0 &le; j_$2)) &and; (j_$2 &le; (Seq#Length(s_$17) - n_$7))) &rArr; (Seq#Index(Seq#Drop(s_$17,n_$7),j_$2) = Seq#Index(s_$17,j_$2 + n_$7)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$18 : Seq (T) , t_$1 : Seq (T)  &bull; {Seq#Append(s_$18,t_$1)} ( (Seq#Take(Seq#Append(s_$18,t_$1),Seq#Length(s_$18)) = s_$18) &and; (Seq#Drop(Seq#Append(s_$18,t_$1),Seq#Length(s_$18)) = t_$1) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  h : HeapType, a_$43 : ref &bull; {Seq#Length(Seq#FromArray(h,a_$43))} ( Seq#Length(Seq#FromArray(h,a_$43)) = array.Length(a_$43) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  h_$0 : HeapType, a_$44 : ref, i_$7 : Integer &bull; ( ((0 &le; i_$7) &and; (i_$7 &le; Seq#Length(Seq#FromArray(h_$0,a_$44)))) &rArr; (Seq#Index(Seq#FromArray(h_$0,a_$44),i_$7) = h_$0[a_$44,IndexField(i_$7)]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; h_$1 : HeapType, o_$18 : ref, f_$1 : Field (alpha) , v_$7 : alpha, a_$45 : ref &bull; {Seq#FromArray(h_$1[o_$18,f_$1 := v_$7],a_$45)} ( (&#172;(o_$18 = a_$45)) &rArr; (Seq#FromArray(h_$1[o_$18,f_$1 := v_$7],a_$45) = Seq#FromArray(h_$1,a_$45)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  h_$2 : HeapType, i_$8 : Integer, v_$8 : BoxType, a_$46 : ref &bull; {Seq#FromArray(h_$2[a_$46,IndexField(i_$8) := v_$8],a_$46)} ( ((0 &le; i_$8) &and; (i_$8 &le; array.Length(a_$46))) &rArr; (Seq#FromArray(h_$2[a_$46,IndexField(i_$8) := v_$8],a_$46) = Seq#Update(Seq#FromArray(h_$2,a_$46),i_$8,v_$8)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$19 : Seq (T) , i_$9 : Integer, v_$9 : T, n_$8 : Integer &bull; {Seq#Take(Seq#Update(s_$19,i_$9,v_$9),n_$8)} ( (((0 &le; i_$9) &and; (i_$9 &le; n_$8)) &and; (n_$8 &le; Seq#Length(s_$19))) &rArr; (Seq#Take(Seq#Update(s_$19,i_$9,v_$9),n_$8) = Seq#Update(Seq#Take(s_$19,n_$8),i_$9,v_$9)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$20 : Seq (T) , i_$10 : Integer, v_$10 : T, n_$9 : Integer &bull; {Seq#Take(Seq#Update(s_$20,i_$10,v_$10),n_$9)} ( ((n_$9 &le; i_$10) &and; (i_$10 &le; Seq#Length(s_$20))) &rArr; (Seq#Take(Seq#Update(s_$20,i_$10,v_$10),n_$9) = Seq#Take(s_$20,n_$9)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$21 : Seq (T) , i_$11 : Integer, v_$11 : T, n_$10 : Integer &bull; {Seq#Drop(Seq#Update(s_$21,i_$11,v_$11),n_$10)} ( (((0 &le; n_$10) &and; (n_$10 &le; i_$11)) &and; (i_$11 &le; Seq#Length(s_$21))) &rArr; (Seq#Drop(Seq#Update(s_$21,i_$11,v_$11),n_$10) = Seq#Update(Seq#Drop(s_$21,n_$10),i_$11 - n_$10,v_$11)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$22 : Seq (T) , i_$12 : Integer, v_$12 : T, n_$11 : Integer &bull; {Seq#Drop(Seq#Update(s_$22,i_$12,v_$12),n_$11)} ( (((0 &le; i_$12) &and; (i_$12 &le; n_$11)) &and; (n_$11 &le; Seq#Length(s_$22))) &rArr; (Seq#Drop(Seq#Update(s_$22,i_$12,v_$12),n_$11) = Seq#Drop(s_$22,n_$11)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  h_$3 : HeapType, a_$47 : ref, n0 : Integer, n1 : Integer &bull; {Seq#Take(Seq#FromArray(h_$3,a_$47),n0),Seq#Take(Seq#FromArray(h_$3,a_$47),n1)} ( ((((n0 + 1) = n1) &and; (0 &le; n0)) &and; (n1 &le; array.Length(a_$47))) &rArr; (Seq#Take(Seq#FromArray(h_$3,a_$47),n1) = Seq#Build(Seq#Take(Seq#FromArray(h_$3,a_$47),n0),h_$3[a_$47,IndexField(n0)])) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; s_$23 : Seq (T) , v_$13 : T, n_$12 : Integer &bull; {Seq#Drop(Seq#Build(s_$23,v_$13),n_$12)} ( ((0 &le; n_$12) &and; (n_$12 &le; Seq#Length(s_$23))) &rArr; (Seq#Drop(Seq#Build(s_$23,v_$13),n_$12) = Seq#Build(Seq#Drop(s_$23,n_$12),v_$13)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;T&ge; x_$14 : T &bull; {$Box(x_$14)} ( $Unbox($Box(x_$14)) : T = x_$14 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$32 : BoxType &bull; {$Unbox(b_$32) : Integer} ( $Box($Unbox(b_$32) : Integer) = b_$32 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$33 : BoxType &bull; {$Unbox(b_$33) : ref} ( $Box($Unbox(b_$33) : ref) = b_$33 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$34 : BoxType &bull; {$Unbox(b_$34) : [BoxType]Boolean} ( $Box($Unbox(b_$34) : [BoxType]Boolean) = b_$34 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$35 : BoxType &bull; {$Unbox(b_$35) : Seq (BoxType) } ( $Box($Unbox(b_$35) : Seq (BoxType) ) = b_$35 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$36 : BoxType &bull; {$Unbox(b_$36) : DatatypeType} ( $Box($Unbox(b_$36) : DatatypeType) = b_$36 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsCanonicalBoolBox($Box(<FONT face="Arial Bold">false</FONT>)) &and; $IsCanonicalBoolBox($Box(<FONT face="Arial Bold">true</FONT>)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$37 : BoxType &bull; {$Unbox(b_$37) : Boolean} ( $IsCanonicalBoolBox(b_$37) &rArr; ($Box($Unbox(b_$37) : Boolean) = b_$37) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$48 : ClassName, b_$38 : ClassName &bull; {TypeTuple(a_$48,b_$38)} ( (TypeTupleCar(TypeTuple(a_$48,b_$38)) = a_$48) &and; (TypeTupleCdr(TypeTuple(a_$48,b_$38)) = b_$38) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  i_$13 : Integer &bull; {IndexField(i_$13)} ( FDim(IndexField(i_$13)) = 1 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  i_$14 : Integer &bull; {IndexField(i_$14)} ( IndexField_Inverse(IndexField(i_$14)) = i_$14 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  f_$2 : Field (BoxType) , i_$15 : Integer &bull; {MultiIndexField(f_$2,i_$15)} ( FDim(MultiIndexField(f_$2,i_$15)) = (FDim(f_$2) + 1) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  f_$3 : Field (BoxType) , i_$16 : Integer &bull; {MultiIndexField(f_$3,i_$16)} ( (MultiIndexField_Inverse0(MultiIndexField(f_$3,i_$16)) = f_$3) &and; (MultiIndexField_Inverse1(MultiIndexField(f_$3,i_$16)) = i_$16) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> FDim(alloc) = 0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  h_$4 : HeapType, k : HeapType, d : DatatypeType &bull; {$HeapSucc(h_$4,k),DtAlloc(d,h_$4)} ( $HeapSucc(h_$4,k) &rArr; (DtAlloc(d,h_$4) &rArr; DtAlloc(d,k)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  h_$5 : HeapType, k_$0 : HeapType, d_$0 : BoxType &bull; {$HeapSucc(h_$5,k_$0),GenericAlloc(d_$0,h_$5)} ( $HeapSucc(h_$5,k_$0) &rArr; (GenericAlloc(d_$0,h_$5) &rArr; GenericAlloc(d_$0,k_$0)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$39 : BoxType, h_$6 : HeapType &bull; {GenericAlloc(b_$39,h_$6),h_$6[$Unbox(b_$39) : ref,alloc]} ( GenericAlloc(b_$39,h_$6) &rArr; (($Unbox(b_$39) : ref = null) &or; h_$6[$Unbox(b_$39) : ref,alloc]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$40 : BoxType, h_$7 : HeapType, i_$17 : Integer &bull; {GenericAlloc(b_$40,h_$7),Seq#Index($Unbox(b_$40) : Seq (BoxType) ,i_$17)} ( ((GenericAlloc(b_$40,h_$7) &and; (0 &le; i_$17)) &and; (i_$17 &le; Seq#Length($Unbox(b_$40) : Seq (BoxType) ))) &rArr; GenericAlloc(Seq#Index($Unbox(b_$40) : Seq (BoxType) ,i_$17),h_$7) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$41 : BoxType, h_$8 : HeapType, t_$2 : BoxType &bull; {GenericAlloc(b_$41,h_$8),$Unbox(b_$41) : [BoxType]Boolean[t_$2]} ( (GenericAlloc(b_$41,h_$8) &and; $Unbox(b_$41) : [BoxType]Boolean[t_$2]) &rArr; GenericAlloc(t_$2,h_$8) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$42 : BoxType, h_$9 : HeapType &bull; {GenericAlloc(b_$42,h_$9),DtType($Unbox(b_$42) : DatatypeType)} ( GenericAlloc(b_$42,h_$9) &rArr; DtAlloc($Unbox(b_$42) : DatatypeType,h_$9) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  b_$43 : Boolean, h_$10 : HeapType &bull; ( $IsGoodHeap(h_$10) &rArr; GenericAlloc($Box(b_$43),h_$10) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x_$15 : Integer, h_$11 : HeapType &bull; ( $IsGoodHeap(h_$11) &rArr; GenericAlloc($Box(x_$15),h_$11) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  r_$5 : ref, h_$12 : HeapType &bull; {GenericAlloc($Box(r_$5),h_$12)} ( ($IsGoodHeap(h_$12) &and; ((r_$5 = null) &or; h_$12[r_$5,alloc])) &rArr; GenericAlloc($Box(r_$5),h_$12) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  o_$19 : ref &bull; ( 0 &le; array.Length(o_$19) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; h_$13 : HeapType, r_$6 : ref, f_$4 : Field (alpha) , x_$16 : alpha &bull; {h_$13[r_$6,f_$4 := x_$16]} ( $IsGoodHeap(h_$13[r_$6,f_$4 := x_$16]) &rArr; $HeapSucc(h_$13,h_$13[r_$6,f_$4 := x_$16]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$49 : HeapType, b_$44 : HeapType, c : HeapType &bull; {$HeapSucc(a_$49,b_$44),$HeapSucc(b_$44,c)} ( ($HeapSucc(a_$49,b_$44) &and; $HeapSucc(b_$44,c)) &rArr; $HeapSucc(a_$49,c) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  h_$14 : HeapType, k_$1 : HeapType &bull; {$HeapSucc(h_$14,k_$1)} ( $HeapSucc(h_$14,k_$1) &rArr; ((&forall;  o_$20 : ref &bull; {k_$1[o_$20,alloc]} ( h_$14[o_$20,alloc] &rArr; k_$1[o_$20,alloc] ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x_$17 : Integer, y_$8 : Integer &bull; {mod(x_$17,y_$8)} ( mod(x_$17,y_$8) = (x_$17 - (div(x_$17,y_$8) * y_$8)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x_$18 : Integer, y_$9 : Integer &bull; {mod(x_$18,y_$9)} ( (0 &le; y_$9) &rArr; ((0 &le; mod(x_$18,y_$9)) &and; (mod(x_$18,y_$9) &le; y_$9)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x_$19 : Integer, y_$10 : Integer &bull; {mod(x_$19,y_$10)} ( (y_$10 &le; 0) &rArr; ((0 &le; mod(x_$19,y_$10)) &and; (mod(x_$19,y_$10) &le; (0 - y_$10))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a_$50 : Integer, b_$45 : Integer, d_$1 : Integer &bull; {mod(a_$50,d_$1),mod(b_$45,d_$1)} ( (((2 &le; d_$1) &and; (mod(a_$50,d_$1) = mod(b_$45,d_$1))) &and; (a_$50 &le; b_$45)) &rArr; ((a_$50 + d_$1) &le; b_$45) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((0 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$0 : HeapType, this_$0 : ref, x#0 : BoxType &bull; {BreadthFirstSearch.Succ($Heap_$0,this_$0,x#0)} ( (BreadthFirstSearch.Succ#canCall($Heap_$0,this_$0,x#0) &or; ((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(0 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$0)) &and; (&#172;(this_$0 = null))) &and; $Heap_$0[this_$0,alloc]) &and; (dtype(this_$0) = class.BreadthFirstSearch)) &and; GenericAlloc(x#0,$Heap_$0))) &rArr; ((&forall;  $t#0 : BoxType &bull; {BreadthFirstSearch.Succ($Heap_$0,this_$0,x#0)[$t#0]} ( BreadthFirstSearch.Succ($Heap_$0,this_$0,x#0)[$t#0] &rArr; GenericAlloc($t#0,$Heap_$0) ))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0 : HeapType, $h1 : HeapType, this_$1 : ref, x#0_$0 : BoxType &bull; {$HeapSucc($h0,$h1),BreadthFirstSearch.Succ($h1,this_$1,x#0_$0)} ( ((((((((($IsGoodHeap($h0) &and; $IsGoodHeap($h1)) &and; (&#172;(this_$1 = null))) &and; $h0[this_$1,alloc]) &and; (dtype(this_$1) = class.BreadthFirstSearch)) &and; $h1[this_$1,alloc]) &and; (dtype(this_$1) = class.BreadthFirstSearch)) &and; GenericAlloc(x#0_$0,$h0)) &and; GenericAlloc(x#0_$0,$h1)) &and; $HeapSucc($h0,$h1)) &rArr; (((&forall;&le;alpha&ge; $o : ref, $f : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0[$o,$f] = $h1[$o,$f]) ))) &rArr; (BreadthFirstSearch.Succ($h0,this_$1,x#0_$0) = BreadthFirstSearch.Succ($h1,this_$1,x#0_$0))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$1 : HeapType, this_$2 : ref, source#1 : BoxType, dest#2 : BoxType, p#3 : Seq (BoxType)  &bull; {BreadthFirstSearch.IsPath#2($Heap_$1,this_$2,source#1,dest#2,p#3)} ( BreadthFirstSearch.IsPath#2($Heap_$1,this_$2,source#1,dest#2,p#3) &hArr; BreadthFirstSearch.IsPath($Heap_$1,this_$2,source#1,dest#2,p#3) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$2 : HeapType, this_$3 : ref, source#1_$0 : BoxType, dest#2_$0 : BoxType, p#3_$0 : Seq (BoxType)  &bull; {BreadthFirstSearch.IsPath($Heap_$2,this_$3,source#1_$0,dest#2_$0,p#3_$0)} ( BreadthFirstSearch.IsPath($Heap_$2,this_$3,source#1_$0,dest#2_$0,p#3_$0) &hArr; BreadthFirstSearch.IsPath#limited($Heap_$2,this_$3,source#1_$0,dest#2_$0,p#3_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((1 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$3 : HeapType, this_$4 : ref, source#1_$1 : BoxType, dest#2_$1 : BoxType, p#3_$1 : Seq (BoxType)  &bull; {BreadthFirstSearch.IsPath($Heap_$3,this_$4,source#1_$1,dest#2_$1,p#3_$1)} ( (BreadthFirstSearch.IsPath#canCall($Heap_$3,this_$4,source#1_$1,dest#2_$1,p#3_$1) &or; ((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(1 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$3)) &and; (&#172;(this_$4 = null))) &and; $Heap_$3[this_$4,alloc]) &and; (dtype(this_$4) = class.BreadthFirstSearch)) &and; GenericAlloc(source#1_$1,$Heap_$3)) &and; GenericAlloc(dest#2_$1,$Heap_$3)) &and; ((&forall;  $i#1 : Integer &bull; {Seq#Index(p#3_$1,$i#1)} ( ((0 &le; $i#1) &and; ($i#1 &le; Seq#Length(p#3_$1))) &rArr; GenericAlloc(Seq#Index(p#3_$1,$i#1),$Heap_$3) ))))) &rArr; ((((source#1_$1 = dest#2_$1) &rArr; <FONT face="Arial Bold">true</FONT>) &and; ((&#172;(source#1_$1 = dest#2_$1)) &rArr; (((&#172;Seq#Equal(p#3_$1,Seq#Empty : Seq (BoxType) )) &rArr; BreadthFirstSearch.Succ#canCall($Heap_$3,this_$4,Seq#Index(p#3_$1,Seq#Length(p#3_$1) - 1))) &and; (((&#172;Seq#Equal(p#3_$1,Seq#Empty : Seq (BoxType) )) &and; BreadthFirstSearch.Succ($Heap_$3,this_$4,Seq#Index(p#3_$1,Seq#Length(p#3_$1) - 1))[dest#2_$1]) &rArr; BreadthFirstSearch.IsPath#canCall($Heap_$3,this_$4,source#1_$1,Seq#Index(p#3_$1,Seq#Length(p#3_$1) - 1),Seq#Take(p#3_$1,Seq#Length(p#3_$1) - 1)))))) &and; (BreadthFirstSearch.IsPath($Heap_$3,this_$4,source#1_$1,dest#2_$1,p#3_$1) &hArr; (if (source#1_$1 = dest#2_$1) then Seq#Equal(p#3_$1,Seq#Empty : Seq (BoxType) ) else (((&#172;Seq#Equal(p#3_$1,Seq#Empty : Seq (BoxType) )) &and; BreadthFirstSearch.Succ($Heap_$3,this_$4,Seq#Index(p#3_$1,Seq#Length(p#3_$1) - 1))[dest#2_$1]) &and; BreadthFirstSearch.IsPath#limited($Heap_$3,this_$4,source#1_$1,Seq#Index(p#3_$1,Seq#Length(p#3_$1) - 1),Seq#Take(p#3_$1,Seq#Length(p#3_$1) - 1)))))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((1 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$4 : HeapType, this_$5 : ref, source#1_$2 : BoxType, dest#2_$2 : BoxType, p#3_$2 : Seq (BoxType)  &bull; {BreadthFirstSearch.IsPath#2($Heap_$4,this_$5,source#1_$2,dest#2_$2,p#3_$2)} ( (BreadthFirstSearch.IsPath#canCall($Heap_$4,this_$5,source#1_$2,dest#2_$2,p#3_$2) &or; ((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(1 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$4)) &and; (&#172;(this_$5 = null))) &and; $Heap_$4[this_$5,alloc]) &and; (dtype(this_$5) = class.BreadthFirstSearch)) &and; GenericAlloc(source#1_$2,$Heap_$4)) &and; GenericAlloc(dest#2_$2,$Heap_$4)) &and; ((&forall;  $i#2 : Integer &bull; {Seq#Index(p#3_$2,$i#2)} ( ((0 &le; $i#2) &and; ($i#2 &le; Seq#Length(p#3_$2))) &rArr; GenericAlloc(Seq#Index(p#3_$2,$i#2),$Heap_$4) ))))) &rArr; (BreadthFirstSearch.IsPath#2($Heap_$4,this_$5,source#1_$2,dest#2_$2,p#3_$2) &hArr; (if (source#1_$2 = dest#2_$2) then Seq#Equal(p#3_$2,Seq#Empty : Seq (BoxType) ) else (((&#172;Seq#Equal(p#3_$2,Seq#Empty : Seq (BoxType) )) &and; BreadthFirstSearch.Succ($Heap_$4,this_$5,Seq#Index(p#3_$2,Seq#Length(p#3_$2) - 1))[dest#2_$2]) &and; BreadthFirstSearch.IsPath($Heap_$4,this_$5,source#1_$2,Seq#Index(p#3_$2,Seq#Length(p#3_$2) - 1),Seq#Take(p#3_$2,Seq#Length(p#3_$2) - 1))))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$0 : HeapType, $h1_$0 : HeapType, this_$6 : ref, source#1_$3 : BoxType, dest#2_$3 : BoxType, p#3_$3 : Seq (BoxType)  &bull; {$HeapSucc($h0_$0,$h1_$0),BreadthFirstSearch.IsPath($h1_$0,this_$6,source#1_$3,dest#2_$3,p#3_$3)} ( ((((((((((((($IsGoodHeap($h0_$0) &and; $IsGoodHeap($h1_$0)) &and; (&#172;(this_$6 = null))) &and; $h0_$0[this_$6,alloc]) &and; (dtype(this_$6) = class.BreadthFirstSearch)) &and; $h1_$0[this_$6,alloc]) &and; (dtype(this_$6) = class.BreadthFirstSearch)) &and; GenericAlloc(source#1_$3,$h0_$0)) &and; GenericAlloc(source#1_$3,$h1_$0)) &and; GenericAlloc(dest#2_$3,$h0_$0)) &and; GenericAlloc(dest#2_$3,$h1_$0)) &and; ((&forall;  $i#3 : Integer &bull; {Seq#Index(p#3_$3,$i#3)} ( ((0 &le; $i#3) &and; ($i#3 &le; Seq#Length(p#3_$3))) &rArr; GenericAlloc(Seq#Index(p#3_$3,$i#3),$h0_$0) )))) &and; ((&forall;  $i#4 : Integer &bull; {Seq#Index(p#3_$3,$i#4)} ( ((0 &le; $i#4) &and; ($i#4 &le; Seq#Length(p#3_$3))) &rArr; GenericAlloc(Seq#Index(p#3_$3,$i#4),$h1_$0) )))) &and; $HeapSucc($h0_$0,$h1_$0)) &rArr; (((&forall;&le;alpha&ge; $o_$0 : ref, $f_$0 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$0[$o_$0,$f_$0] = $h1_$0[$o_$0,$f_$0]) ))) &rArr; (BreadthFirstSearch.IsPath($h0_$0,this_$6,source#1_$3,dest#2_$3,p#3_$3) &hArr; BreadthFirstSearch.IsPath($h1_$0,this_$6,source#1_$3,dest#2_$3,p#3_$3))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$1 : HeapType, $h1_$1 : HeapType, this_$7 : ref, source#1_$4 : BoxType, dest#2_$4 : BoxType, p#3_$4 : Seq (BoxType)  &bull; {$HeapSucc($h0_$1,$h1_$1),BreadthFirstSearch.IsPath#limited($h1_$1,this_$7,source#1_$4,dest#2_$4,p#3_$4)} ( ((((((((((((($IsGoodHeap($h0_$1) &and; $IsGoodHeap($h1_$1)) &and; (&#172;(this_$7 = null))) &and; $h0_$1[this_$7,alloc]) &and; (dtype(this_$7) = class.BreadthFirstSearch)) &and; $h1_$1[this_$7,alloc]) &and; (dtype(this_$7) = class.BreadthFirstSearch)) &and; GenericAlloc(source#1_$4,$h0_$1)) &and; GenericAlloc(source#1_$4,$h1_$1)) &and; GenericAlloc(dest#2_$4,$h0_$1)) &and; GenericAlloc(dest#2_$4,$h1_$1)) &and; ((&forall;  $i#3_$0 : Integer &bull; {Seq#Index(p#3_$4,$i#3_$0)} ( ((0 &le; $i#3_$0) &and; ($i#3_$0 &le; Seq#Length(p#3_$4))) &rArr; GenericAlloc(Seq#Index(p#3_$4,$i#3_$0),$h0_$1) )))) &and; ((&forall;  $i#4_$0 : Integer &bull; {Seq#Index(p#3_$4,$i#4_$0)} ( ((0 &le; $i#4_$0) &and; ($i#4_$0 &le; Seq#Length(p#3_$4))) &rArr; GenericAlloc(Seq#Index(p#3_$4,$i#4_$0),$h1_$1) )))) &and; $HeapSucc($h0_$1,$h1_$1)) &rArr; (((&forall;&le;alpha&ge; $o_$1 : ref, $f_$1 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$1[$o_$1,$f_$1] = $h1_$1[$o_$1,$f_$1]) ))) &rArr; (BreadthFirstSearch.IsPath#limited($h0_$1,this_$7,source#1_$4,dest#2_$4,p#3_$4) &hArr; BreadthFirstSearch.IsPath#limited($h1_$1,this_$7,source#1_$4,dest#2_$4,p#3_$4))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((2 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$5 : HeapType, this_$8 : ref, S#4 : Set (BoxType)  &bull; {BreadthFirstSearch.IsClosed($Heap_$5,this_$8,S#4)} ( (BreadthFirstSearch.IsClosed#canCall($Heap_$5,this_$8,S#4) &or; ((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(2 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$5)) &and; (&#172;(this_$8 = null))) &and; $Heap_$5[this_$8,alloc]) &and; (dtype(this_$8) = class.BreadthFirstSearch)) &and; ((&forall;  $t#6 : BoxType &bull; {S#4[$t#6]} ( S#4[$t#6] &rArr; GenericAlloc($t#6,$Heap_$5) ))))) &rArr; (((&forall;  v#5 : BoxType &bull; ( GenericAlloc(v#5,$Heap_$5) &rArr; (S#4[v#5] &rArr; BreadthFirstSearch.Succ#canCall($Heap_$5,this_$8,v#5)) ))) &and; (BreadthFirstSearch.IsClosed($Heap_$5,this_$8,S#4) &hArr; ((&forall;  v#5_$0 : BoxType &bull; ( GenericAlloc(v#5_$0,$Heap_$5) &rArr; (S#4[v#5_$0] &rArr; Set#Subset(BreadthFirstSearch.Succ($Heap_$5,this_$8,v#5_$0),S#4)) ))))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$2 : HeapType, $h1_$2 : HeapType, this_$9 : ref, S#4_$0 : Set (BoxType)  &bull; {$HeapSucc($h0_$2,$h1_$2),BreadthFirstSearch.IsClosed($h1_$2,this_$9,S#4_$0)} ( ((((((((($IsGoodHeap($h0_$2) &and; $IsGoodHeap($h1_$2)) &and; (&#172;(this_$9 = null))) &and; $h0_$2[this_$9,alloc]) &and; (dtype(this_$9) = class.BreadthFirstSearch)) &and; $h1_$2[this_$9,alloc]) &and; (dtype(this_$9) = class.BreadthFirstSearch)) &and; ((&forall;  $t#7 : BoxType &bull; {S#4_$0[$t#7]} ( S#4_$0[$t#7] &rArr; GenericAlloc($t#7,$h0_$2) )))) &and; ((&forall;  $t#8 : BoxType &bull; {S#4_$0[$t#8]} ( S#4_$0[$t#8] &rArr; GenericAlloc($t#8,$h1_$2) )))) &and; $HeapSucc($h0_$2,$h1_$2)) &rArr; (((&forall;&le;alpha&ge; $o_$2 : ref, $f_$2 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$2[$o_$2,$f_$2] = $h1_$2[$o_$2,$f_$2]) ))) &rArr; (BreadthFirstSearch.IsClosed($h0_$2,this_$9,S#4_$0) &hArr; BreadthFirstSearch.IsClosed($h1_$2,this_$9,S#4_$0))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$6 : HeapType, this_$10 : ref, nn#34 : DatatypeType &bull; {BreadthFirstSearch.Value#2($Heap_$6,this_$10,nn#34)} ( BreadthFirstSearch.Value#2($Heap_$6,this_$10,nn#34) = BreadthFirstSearch.Value($Heap_$6,this_$10,nn#34) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$7 : HeapType, this_$11 : ref, nn#34_$0 : DatatypeType &bull; {BreadthFirstSearch.Value($Heap_$7,this_$11,nn#34_$0)} ( BreadthFirstSearch.Value($Heap_$7,this_$11,nn#34_$0) = BreadthFirstSearch.Value#limited($Heap_$7,this_$11,nn#34_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((11 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$8 : HeapType, this_$12 : ref &bull; {BreadthFirstSearch.Value($Heap_$8,this_$12,#Nat.Zero)} ( (BreadthFirstSearch.Value#canCall($Heap_$8,this_$12,#Nat.Zero) &or; (((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(11 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$8)) &and; (&#172;(this_$12 = null))) &and; $Heap_$8[this_$12,alloc]) &and; (dtype(this_$12) = class.BreadthFirstSearch))) &rArr; ((BreadthFirstSearch.Value($Heap_$8,this_$12,#Nat.Zero) = 0) &and; (0 &le; BreadthFirstSearch.Value($Heap_$8,this_$12,#Nat.Zero))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((11 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$9 : HeapType, this_$13 : ref, mm#35 : DatatypeType &bull; {BreadthFirstSearch.Value($Heap_$9,this_$13,#Nat.Suc(mm#35))} ( (BreadthFirstSearch.Value#canCall($Heap_$9,this_$13,#Nat.Suc(mm#35)) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(11 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$9)) &and; (&#172;(this_$13 = null))) &and; $Heap_$9[this_$13,alloc]) &and; (dtype(this_$13) = class.BreadthFirstSearch)) &and; DtAlloc(mm#35,$Heap_$9)) &and; (DtType(mm#35) = class.Nat))) &rArr; ((BreadthFirstSearch.Value#canCall($Heap_$9,this_$13,mm#35) &and; (BreadthFirstSearch.Value($Heap_$9,this_$13,#Nat.Suc(mm#35)) = (BreadthFirstSearch.Value#limited($Heap_$9,this_$13,mm#35) + 1))) &and; (0 &le; BreadthFirstSearch.Value($Heap_$9,this_$13,#Nat.Suc(mm#35)))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((11 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$10 : HeapType, this_$14 : ref, nn#34_$1 : DatatypeType &bull; {BreadthFirstSearch.Value($Heap_$10,this_$14,nn#34_$1)} ( (BreadthFirstSearch.Value#canCall($Heap_$10,this_$14,nn#34_$1) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(11 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$10)) &and; (&#172;(this_$14 = null))) &and; $Heap_$10[this_$14,alloc]) &and; (dtype(this_$14) = class.BreadthFirstSearch)) &and; DtAlloc(nn#34_$1,$Heap_$10)) &and; (DtType(nn#34_$1) = class.Nat))) &rArr; ((BreadthFirstSearch.ToNat($Heap_$10,this_$14,BreadthFirstSearch.Value#limited($Heap_$10,this_$14,nn#34_$1)) = nn#34_$1) &and; (0 &le; BreadthFirstSearch.Value($Heap_$10,this_$14,nn#34_$1))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((11 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$11 : HeapType, this_$15 : ref &bull; {BreadthFirstSearch.Value#2($Heap_$11,this_$15,#Nat.Zero)} ( (BreadthFirstSearch.Value#canCall($Heap_$11,this_$15,#Nat.Zero) &or; (((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(11 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$11)) &and; (&#172;(this_$15 = null))) &and; $Heap_$11[this_$15,alloc]) &and; (dtype(this_$15) = class.BreadthFirstSearch))) &rArr; (BreadthFirstSearch.Value#2($Heap_$11,this_$15,#Nat.Zero) = 0) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((11 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$12 : HeapType, this_$16 : ref, mm#35_$0 : DatatypeType &bull; {BreadthFirstSearch.Value#2($Heap_$12,this_$16,#Nat.Suc(mm#35_$0))} ( (BreadthFirstSearch.Value#canCall($Heap_$12,this_$16,#Nat.Suc(mm#35_$0)) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(11 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$12)) &and; (&#172;(this_$16 = null))) &and; $Heap_$12[this_$16,alloc]) &and; (dtype(this_$16) = class.BreadthFirstSearch)) &and; DtAlloc(mm#35_$0,$Heap_$12)) &and; (DtType(mm#35_$0) = class.Nat))) &rArr; (BreadthFirstSearch.Value#2($Heap_$12,this_$16,#Nat.Suc(mm#35_$0)) = (BreadthFirstSearch.Value($Heap_$12,this_$16,mm#35_$0) + 1)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((11 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$13 : HeapType, this_$17 : ref, nn#34_$2 : DatatypeType &bull; {BreadthFirstSearch.Value#2($Heap_$13,this_$17,nn#34_$2)} ( (BreadthFirstSearch.Value#canCall($Heap_$13,this_$17,nn#34_$2) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(11 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$13)) &and; (&#172;(this_$17 = null))) &and; $Heap_$13[this_$17,alloc]) &and; (dtype(this_$17) = class.BreadthFirstSearch)) &and; DtAlloc(nn#34_$2,$Heap_$13)) &and; (DtType(nn#34_$2) = class.Nat))) &rArr; <FONT face="Arial Bold">true</FONT> ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$3 : HeapType, $h1_$3 : HeapType, this_$18 : ref, nn#34_$3 : DatatypeType &bull; {$HeapSucc($h0_$3,$h1_$3),BreadthFirstSearch.Value($h1_$3,this_$18,nn#34_$3)} ( ((((((((((($IsGoodHeap($h0_$3) &and; $IsGoodHeap($h1_$3)) &and; (&#172;(this_$18 = null))) &and; $h0_$3[this_$18,alloc]) &and; (dtype(this_$18) = class.BreadthFirstSearch)) &and; $h1_$3[this_$18,alloc]) &and; (dtype(this_$18) = class.BreadthFirstSearch)) &and; DtAlloc(nn#34_$3,$h0_$3)) &and; (DtType(nn#34_$3) = class.Nat)) &and; DtAlloc(nn#34_$3,$h1_$3)) &and; (DtType(nn#34_$3) = class.Nat)) &and; $HeapSucc($h0_$3,$h1_$3)) &rArr; (((&forall;&le;alpha&ge; $o_$3 : ref, $f_$3 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$3[$o_$3,$f_$3] = $h1_$3[$o_$3,$f_$3]) ))) &rArr; (BreadthFirstSearch.Value($h0_$3,this_$18,nn#34_$3) = BreadthFirstSearch.Value($h1_$3,this_$18,nn#34_$3))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$4 : HeapType, $h1_$4 : HeapType, this_$19 : ref, nn#34_$4 : DatatypeType &bull; {$HeapSucc($h0_$4,$h1_$4),BreadthFirstSearch.Value#limited($h1_$4,this_$19,nn#34_$4)} ( ((((((((((($IsGoodHeap($h0_$4) &and; $IsGoodHeap($h1_$4)) &and; (&#172;(this_$19 = null))) &and; $h0_$4[this_$19,alloc]) &and; (dtype(this_$19) = class.BreadthFirstSearch)) &and; $h1_$4[this_$19,alloc]) &and; (dtype(this_$19) = class.BreadthFirstSearch)) &and; DtAlloc(nn#34_$4,$h0_$4)) &and; (DtType(nn#34_$4) = class.Nat)) &and; DtAlloc(nn#34_$4,$h1_$4)) &and; (DtType(nn#34_$4) = class.Nat)) &and; $HeapSucc($h0_$4,$h1_$4)) &rArr; (((&forall;&le;alpha&ge; $o_$4 : ref, $f_$4 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$4[$o_$4,$f_$4] = $h1_$4[$o_$4,$f_$4]) ))) &rArr; (BreadthFirstSearch.Value#limited($h0_$4,this_$19,nn#34_$4) = BreadthFirstSearch.Value#limited($h1_$4,this_$19,nn#34_$4))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$14 : HeapType, this_$20 : ref, n#36 : Integer &bull; {BreadthFirstSearch.ToNat#2($Heap_$14,this_$20,n#36)} ( BreadthFirstSearch.ToNat#2($Heap_$14,this_$20,n#36) = BreadthFirstSearch.ToNat($Heap_$14,this_$20,n#36) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$15 : HeapType, this_$21 : ref, n#36_$0 : Integer &bull; {BreadthFirstSearch.ToNat($Heap_$15,this_$21,n#36_$0)} ( BreadthFirstSearch.ToNat($Heap_$15,this_$21,n#36_$0) = BreadthFirstSearch.ToNat#limited($Heap_$15,this_$21,n#36_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((10 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$16 : HeapType, this_$22 : ref, n#36_$1 : Integer &bull; {BreadthFirstSearch.ToNat($Heap_$16,this_$22,n#36_$1)} ( (BreadthFirstSearch.ToNat#canCall($Heap_$16,this_$22,n#36_$1) &or; ((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(10 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$16)) &and; (&#172;(this_$22 = null))) &and; $Heap_$16[this_$22,alloc]) &and; (dtype(this_$22) = class.BreadthFirstSearch)) &and; (0 &le; n#36_$1))) &rArr; ((((((n#36_$1 = 0) &rArr; <FONT face="Arial Bold">true</FONT>) &and; ((&#172;(n#36_$1 = 0)) &rArr; BreadthFirstSearch.ToNat#canCall($Heap_$16,this_$22,n#36_$1 - 1))) &and; (BreadthFirstSearch.ToNat($Heap_$16,this_$22,n#36_$1) = (if (n#36_$1 = 0) then #Nat.Zero else #Nat.Suc(BreadthFirstSearch.ToNat#limited($Heap_$16,this_$22,n#36_$1 - 1))))) &and; DtAlloc(BreadthFirstSearch.ToNat($Heap_$16,this_$22,n#36_$1),$Heap_$16)) &and; (DtType(BreadthFirstSearch.ToNat($Heap_$16,this_$22,n#36_$1)) = class.Nat)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((10 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$17 : HeapType, this_$23 : ref, n#36_$2 : Integer &bull; {BreadthFirstSearch.ToNat#2($Heap_$17,this_$23,n#36_$2)} ( (BreadthFirstSearch.ToNat#canCall($Heap_$17,this_$23,n#36_$2) &or; ((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(10 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$17)) &and; (&#172;(this_$23 = null))) &and; $Heap_$17[this_$23,alloc]) &and; (dtype(this_$23) = class.BreadthFirstSearch)) &and; (0 &le; n#36_$2))) &rArr; (BreadthFirstSearch.ToNat#2($Heap_$17,this_$23,n#36_$2) = (if (n#36_$2 = 0) then #Nat.Zero else #Nat.Suc(BreadthFirstSearch.ToNat($Heap_$17,this_$23,n#36_$2 - 1)))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$5 : HeapType, $h1_$5 : HeapType, this_$24 : ref, n#36_$3 : Integer &bull; {$HeapSucc($h0_$5,$h1_$5),BreadthFirstSearch.ToNat($h1_$5,this_$24,n#36_$3)} ( ((((((((($IsGoodHeap($h0_$5) &and; $IsGoodHeap($h1_$5)) &and; (&#172;(this_$24 = null))) &and; $h0_$5[this_$24,alloc]) &and; (dtype(this_$24) = class.BreadthFirstSearch)) &and; $h1_$5[this_$24,alloc]) &and; (dtype(this_$24) = class.BreadthFirstSearch)) &and; (0 &le; n#36_$3)) &and; (0 &le; n#36_$3)) &and; $HeapSucc($h0_$5,$h1_$5)) &rArr; (((&forall;&le;alpha&ge; $o_$5 : ref, $f_$5 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$5[$o_$5,$f_$5] = $h1_$5[$o_$5,$f_$5]) ))) &rArr; (BreadthFirstSearch.ToNat($h0_$5,this_$24,n#36_$3) = BreadthFirstSearch.ToNat($h1_$5,this_$24,n#36_$3))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$6 : HeapType, $h1_$6 : HeapType, this_$25 : ref, n#36_$4 : Integer &bull; {$HeapSucc($h0_$6,$h1_$6),BreadthFirstSearch.ToNat#limited($h1_$6,this_$25,n#36_$4)} ( ((((((((($IsGoodHeap($h0_$6) &and; $IsGoodHeap($h1_$6)) &and; (&#172;(this_$25 = null))) &and; $h0_$6[this_$25,alloc]) &and; (dtype(this_$25) = class.BreadthFirstSearch)) &and; $h1_$6[this_$25,alloc]) &and; (dtype(this_$25) = class.BreadthFirstSearch)) &and; (0 &le; n#36_$4)) &and; (0 &le; n#36_$4)) &and; $HeapSucc($h0_$6,$h1_$6)) &rArr; (((&forall;&le;alpha&ge; $o_$6 : ref, $f_$6 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$6[$o_$6,$f_$6] = $h1_$6[$o_$6,$f_$6]) ))) &rArr; (BreadthFirstSearch.ToNat#limited($h0_$6,this_$25,n#36_$4) = BreadthFirstSearch.ToNat#limited($h1_$6,this_$25,n#36_$4))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$18 : HeapType, this_$26 : ref, source#38 : BoxType, nn#39 : DatatypeType, AllVertices#40 : Set (BoxType)  &bull; {BreadthFirstSearch.R#2($Heap_$18,this_$26,source#38,nn#39,AllVertices#40)} ( BreadthFirstSearch.R#2($Heap_$18,this_$26,source#38,nn#39,AllVertices#40) = BreadthFirstSearch.R($Heap_$18,this_$26,source#38,nn#39,AllVertices#40) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$19 : HeapType, this_$27 : ref, source#38_$0 : BoxType, nn#39_$0 : DatatypeType, AllVertices#40_$0 : Set (BoxType)  &bull; {BreadthFirstSearch.R($Heap_$19,this_$27,source#38_$0,nn#39_$0,AllVertices#40_$0)} ( BreadthFirstSearch.R($Heap_$19,this_$27,source#38_$0,nn#39_$0,AllVertices#40_$0) = BreadthFirstSearch.R#limited($Heap_$19,this_$27,source#38_$0,nn#39_$0,AllVertices#40_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((13 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$20 : HeapType, this_$28 : ref, source#38_$1 : BoxType, AllVertices#40_$1 : Set (BoxType)  &bull; {BreadthFirstSearch.R($Heap_$20,this_$28,source#38_$1,#Nat.Zero,AllVertices#40_$1)} ( (BreadthFirstSearch.R#canCall($Heap_$20,this_$28,source#38_$1,#Nat.Zero,AllVertices#40_$1) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(13 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$20)) &and; (&#172;(this_$28 = null))) &and; $Heap_$20[this_$28,alloc]) &and; (dtype(this_$28) = class.BreadthFirstSearch)) &and; GenericAlloc(source#38_$1,$Heap_$20)) &and; ((&forall;  $t#0_$0 : BoxType &bull; {AllVertices#40_$1[$t#0_$0]} ( AllVertices#40_$1[$t#0_$0] &rArr; GenericAlloc($t#0_$0,$Heap_$20) ))))) &rArr; ((BreadthFirstSearch.R($Heap_$20,this_$28,source#38_$1,#Nat.Zero,AllVertices#40_$1) = Set#UnionOne(Set#Empty : Set (BoxType) ,source#38_$1)) &and; ((&forall;  $t#1 : BoxType &bull; {BreadthFirstSearch.R($Heap_$20,this_$28,source#38_$1,#Nat.Zero,AllVertices#40_$1)[$t#1]} ( BreadthFirstSearch.R($Heap_$20,this_$28,source#38_$1,#Nat.Zero,AllVertices#40_$1)[$t#1] &rArr; GenericAlloc($t#1,$Heap_$20) )))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((13 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$21 : HeapType, this_$29 : ref, mm#41 : DatatypeType, source#38_$2 : BoxType, AllVertices#40_$2 : Set (BoxType)  &bull; {BreadthFirstSearch.R($Heap_$21,this_$29,source#38_$2,#Nat.Suc(mm#41),AllVertices#40_$2)} ( (BreadthFirstSearch.R#canCall($Heap_$21,this_$29,source#38_$2,#Nat.Suc(mm#41),AllVertices#40_$2) &or; (((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(13 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$21)) &and; (&#172;(this_$29 = null))) &and; $Heap_$21[this_$29,alloc]) &and; (dtype(this_$29) = class.BreadthFirstSearch)) &and; DtAlloc(mm#41,$Heap_$21)) &and; (DtType(mm#41) = class.Nat)) &and; GenericAlloc(source#38_$2,$Heap_$21)) &and; ((&forall;  $t#2 : BoxType &bull; {AllVertices#40_$2[$t#2]} ( AllVertices#40_$2[$t#2] &rArr; GenericAlloc($t#2,$Heap_$21) ))))) &rArr; ((((BreadthFirstSearch.R#canCall($Heap_$21,this_$29,source#38_$2,mm#41,AllVertices#40_$2) &and; BreadthFirstSearch.R#canCall($Heap_$21,this_$29,source#38_$2,mm#41,AllVertices#40_$2)) &and; BreadthFirstSearch.Successors#canCall($Heap_$21,this_$29,BreadthFirstSearch.R($Heap_$21,this_$29,source#38_$2,mm#41,AllVertices#40_$2),AllVertices#40_$2)) &and; (BreadthFirstSearch.R($Heap_$21,this_$29,source#38_$2,#Nat.Suc(mm#41),AllVertices#40_$2) = Set#Union(BreadthFirstSearch.R#limited($Heap_$21,this_$29,source#38_$2,mm#41,AllVertices#40_$2),BreadthFirstSearch.Successors($Heap_$21,this_$29,BreadthFirstSearch.R#limited($Heap_$21,this_$29,source#38_$2,mm#41,AllVertices#40_$2),AllVertices#40_$2)))) &and; ((&forall;  $t#3 : BoxType &bull; {BreadthFirstSearch.R($Heap_$21,this_$29,source#38_$2,#Nat.Suc(mm#41),AllVertices#40_$2)[$t#3]} ( BreadthFirstSearch.R($Heap_$21,this_$29,source#38_$2,#Nat.Suc(mm#41),AllVertices#40_$2)[$t#3] &rArr; GenericAlloc($t#3,$Heap_$21) )))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((13 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$22 : HeapType, this_$30 : ref, source#38_$3 : BoxType, nn#39_$1 : DatatypeType, AllVertices#40_$3 : Set (BoxType)  &bull; {BreadthFirstSearch.R($Heap_$22,this_$30,source#38_$3,nn#39_$1,AllVertices#40_$3)} ( (BreadthFirstSearch.R#canCall($Heap_$22,this_$30,source#38_$3,nn#39_$1,AllVertices#40_$3) &or; (((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(13 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$22)) &and; (&#172;(this_$30 = null))) &and; $Heap_$22[this_$30,alloc]) &and; (dtype(this_$30) = class.BreadthFirstSearch)) &and; GenericAlloc(source#38_$3,$Heap_$22)) &and; DtAlloc(nn#39_$1,$Heap_$22)) &and; (DtType(nn#39_$1) = class.Nat)) &and; ((&forall;  $t#4 : BoxType &bull; {AllVertices#40_$3[$t#4]} ( AllVertices#40_$3[$t#4] &rArr; GenericAlloc($t#4,$Heap_$22) ))))) &rArr; ((&forall;  $t#5 : BoxType &bull; {BreadthFirstSearch.R($Heap_$22,this_$30,source#38_$3,nn#39_$1,AllVertices#40_$3)[$t#5]} ( BreadthFirstSearch.R($Heap_$22,this_$30,source#38_$3,nn#39_$1,AllVertices#40_$3)[$t#5] &rArr; GenericAlloc($t#5,$Heap_$22) ))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((13 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$23 : HeapType, this_$31 : ref, source#38_$4 : BoxType, AllVertices#40_$4 : Set (BoxType)  &bull; {BreadthFirstSearch.R#2($Heap_$23,this_$31,source#38_$4,#Nat.Zero,AllVertices#40_$4)} ( (BreadthFirstSearch.R#canCall($Heap_$23,this_$31,source#38_$4,#Nat.Zero,AllVertices#40_$4) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(13 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$23)) &and; (&#172;(this_$31 = null))) &and; $Heap_$23[this_$31,alloc]) &and; (dtype(this_$31) = class.BreadthFirstSearch)) &and; GenericAlloc(source#38_$4,$Heap_$23)) &and; ((&forall;  $t#6_$0 : BoxType &bull; {AllVertices#40_$4[$t#6_$0]} ( AllVertices#40_$4[$t#6_$0] &rArr; GenericAlloc($t#6_$0,$Heap_$23) ))))) &rArr; (BreadthFirstSearch.R#2($Heap_$23,this_$31,source#38_$4,#Nat.Zero,AllVertices#40_$4) = Set#UnionOne(Set#Empty : Set (BoxType) ,source#38_$4)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((13 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$24 : HeapType, this_$32 : ref, mm#41_$0 : DatatypeType, source#38_$5 : BoxType, AllVertices#40_$5 : Set (BoxType)  &bull; {BreadthFirstSearch.R#2($Heap_$24,this_$32,source#38_$5,#Nat.Suc(mm#41_$0),AllVertices#40_$5)} ( (BreadthFirstSearch.R#canCall($Heap_$24,this_$32,source#38_$5,#Nat.Suc(mm#41_$0),AllVertices#40_$5) &or; (((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(13 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$24)) &and; (&#172;(this_$32 = null))) &and; $Heap_$24[this_$32,alloc]) &and; (dtype(this_$32) = class.BreadthFirstSearch)) &and; DtAlloc(mm#41_$0,$Heap_$24)) &and; (DtType(mm#41_$0) = class.Nat)) &and; GenericAlloc(source#38_$5,$Heap_$24)) &and; ((&forall;  $t#7_$0 : BoxType &bull; {AllVertices#40_$5[$t#7_$0]} ( AllVertices#40_$5[$t#7_$0] &rArr; GenericAlloc($t#7_$0,$Heap_$24) ))))) &rArr; (BreadthFirstSearch.R#2($Heap_$24,this_$32,source#38_$5,#Nat.Suc(mm#41_$0),AllVertices#40_$5) = Set#Union(BreadthFirstSearch.R($Heap_$24,this_$32,source#38_$5,mm#41_$0,AllVertices#40_$5),BreadthFirstSearch.Successors($Heap_$24,this_$32,BreadthFirstSearch.R($Heap_$24,this_$32,source#38_$5,mm#41_$0,AllVertices#40_$5),AllVertices#40_$5))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((13 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$25 : HeapType, this_$33 : ref, source#38_$6 : BoxType, nn#39_$2 : DatatypeType, AllVertices#40_$6 : Set (BoxType)  &bull; {BreadthFirstSearch.R#2($Heap_$25,this_$33,source#38_$6,nn#39_$2,AllVertices#40_$6)} ( (BreadthFirstSearch.R#canCall($Heap_$25,this_$33,source#38_$6,nn#39_$2,AllVertices#40_$6) &or; (((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(13 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$25)) &and; (&#172;(this_$33 = null))) &and; $Heap_$25[this_$33,alloc]) &and; (dtype(this_$33) = class.BreadthFirstSearch)) &and; GenericAlloc(source#38_$6,$Heap_$25)) &and; DtAlloc(nn#39_$2,$Heap_$25)) &and; (DtType(nn#39_$2) = class.Nat)) &and; ((&forall;  $t#8_$0 : BoxType &bull; {AllVertices#40_$6[$t#8_$0]} ( AllVertices#40_$6[$t#8_$0] &rArr; GenericAlloc($t#8_$0,$Heap_$25) ))))) &rArr; <FONT face="Arial Bold">true</FONT> ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$7 : HeapType, $h1_$7 : HeapType, this_$34 : ref, source#38_$7 : BoxType, nn#39_$3 : DatatypeType, AllVertices#40_$7 : Set (BoxType)  &bull; {$HeapSucc($h0_$7,$h1_$7),BreadthFirstSearch.R($h1_$7,this_$34,source#38_$7,nn#39_$3,AllVertices#40_$7)} ( ((((((((((((((($IsGoodHeap($h0_$7) &and; $IsGoodHeap($h1_$7)) &and; (&#172;(this_$34 = null))) &and; $h0_$7[this_$34,alloc]) &and; (dtype(this_$34) = class.BreadthFirstSearch)) &and; $h1_$7[this_$34,alloc]) &and; (dtype(this_$34) = class.BreadthFirstSearch)) &and; GenericAlloc(source#38_$7,$h0_$7)) &and; GenericAlloc(source#38_$7,$h1_$7)) &and; DtAlloc(nn#39_$3,$h0_$7)) &and; (DtType(nn#39_$3) = class.Nat)) &and; DtAlloc(nn#39_$3,$h1_$7)) &and; (DtType(nn#39_$3) = class.Nat)) &and; ((&forall;  $t#9 : BoxType &bull; {AllVertices#40_$7[$t#9]} ( AllVertices#40_$7[$t#9] &rArr; GenericAlloc($t#9,$h0_$7) )))) &and; ((&forall;  $t#10 : BoxType &bull; {AllVertices#40_$7[$t#10]} ( AllVertices#40_$7[$t#10] &rArr; GenericAlloc($t#10,$h1_$7) )))) &and; $HeapSucc($h0_$7,$h1_$7)) &rArr; (((&forall;&le;alpha&ge; $o_$7 : ref, $f_$7 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$7[$o_$7,$f_$7] = $h1_$7[$o_$7,$f_$7]) ))) &rArr; (BreadthFirstSearch.R($h0_$7,this_$34,source#38_$7,nn#39_$3,AllVertices#40_$7) = BreadthFirstSearch.R($h1_$7,this_$34,source#38_$7,nn#39_$3,AllVertices#40_$7))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$8 : HeapType, $h1_$8 : HeapType, this_$35 : ref, source#38_$8 : BoxType, nn#39_$4 : DatatypeType, AllVertices#40_$8 : Set (BoxType)  &bull; {$HeapSucc($h0_$8,$h1_$8),BreadthFirstSearch.R#limited($h1_$8,this_$35,source#38_$8,nn#39_$4,AllVertices#40_$8)} ( ((((((((((((((($IsGoodHeap($h0_$8) &and; $IsGoodHeap($h1_$8)) &and; (&#172;(this_$35 = null))) &and; $h0_$8[this_$35,alloc]) &and; (dtype(this_$35) = class.BreadthFirstSearch)) &and; $h1_$8[this_$35,alloc]) &and; (dtype(this_$35) = class.BreadthFirstSearch)) &and; GenericAlloc(source#38_$8,$h0_$8)) &and; GenericAlloc(source#38_$8,$h1_$8)) &and; DtAlloc(nn#39_$4,$h0_$8)) &and; (DtType(nn#39_$4) = class.Nat)) &and; DtAlloc(nn#39_$4,$h1_$8)) &and; (DtType(nn#39_$4) = class.Nat)) &and; ((&forall;  $t#9_$0 : BoxType &bull; {AllVertices#40_$8[$t#9_$0]} ( AllVertices#40_$8[$t#9_$0] &rArr; GenericAlloc($t#9_$0,$h0_$8) )))) &and; ((&forall;  $t#10_$0 : BoxType &bull; {AllVertices#40_$8[$t#10_$0]} ( AllVertices#40_$8[$t#10_$0] &rArr; GenericAlloc($t#10_$0,$h1_$8) )))) &and; $HeapSucc($h0_$8,$h1_$8)) &rArr; (((&forall;&le;alpha&ge; $o_$8 : ref, $f_$8 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$8[$o_$8,$f_$8] = $h1_$8[$o_$8,$f_$8]) ))) &rArr; (BreadthFirstSearch.R#limited($h0_$8,this_$35,source#38_$8,nn#39_$4,AllVertices#40_$8) = BreadthFirstSearch.R#limited($h1_$8,this_$35,source#38_$8,nn#39_$4,AllVertices#40_$8))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((12 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$26 : HeapType, this_$36 : ref, S#42 : Set (BoxType) , AllVertices#43 : Set (BoxType)  &bull; {BreadthFirstSearch.Successors($Heap_$26,this_$36,S#42,AllVertices#43)} ( (BreadthFirstSearch.Successors#canCall($Heap_$26,this_$36,S#42,AllVertices#43) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(12 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$26)) &and; (&#172;(this_$36 = null))) &and; $Heap_$26[this_$36,alloc]) &and; (dtype(this_$36) = class.BreadthFirstSearch)) &and; ((&forall;  $t#12 : BoxType &bull; {S#42[$t#12]} ( S#42[$t#12] &rArr; GenericAlloc($t#12,$Heap_$26) )))) &and; ((&forall;  $t#13 : BoxType &bull; {AllVertices#43[$t#13]} ( AllVertices#43[$t#13] &rArr; GenericAlloc($t#13,$Heap_$26) ))))) &rArr; ((((&forall;  w#44 : BoxType &bull; ( GenericAlloc(w#44,$Heap_$26) &rArr; (AllVertices#43[w#44] &rArr; ((&forall;  x#45 : BoxType &bull; ( GenericAlloc(x#45,$Heap_$26) &rArr; (S#42[x#45] &rArr; BreadthFirstSearch.Succ#canCall($Heap_$26,this_$36,x#45)) )))) ))) &and; (BreadthFirstSearch.Successors($Heap_$26,this_$36,S#42,AllVertices#43) = lambda#12(S#42,$Heap_$26,AllVertices#43,this_$36))) &and; ((&forall;  $t#15 : BoxType &bull; {BreadthFirstSearch.Successors($Heap_$26,this_$36,S#42,AllVertices#43)[$t#15]} ( BreadthFirstSearch.Successors($Heap_$26,this_$36,S#42,AllVertices#43)[$t#15] &rArr; GenericAlloc($t#15,$Heap_$26) )))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$9 : HeapType, $h1_$9 : HeapType, this_$37 : ref, S#42_$0 : Set (BoxType) , AllVertices#43_$0 : Set (BoxType)  &bull; {$HeapSucc($h0_$9,$h1_$9),BreadthFirstSearch.Successors($h1_$9,this_$37,S#42_$0,AllVertices#43_$0)} ( ((((((((((($IsGoodHeap($h0_$9) &and; $IsGoodHeap($h1_$9)) &and; (&#172;(this_$37 = null))) &and; $h0_$9[this_$37,alloc]) &and; (dtype(this_$37) = class.BreadthFirstSearch)) &and; $h1_$9[this_$37,alloc]) &and; (dtype(this_$37) = class.BreadthFirstSearch)) &and; ((&forall;  $t#16 : BoxType &bull; {S#42_$0[$t#16]} ( S#42_$0[$t#16] &rArr; GenericAlloc($t#16,$h0_$9) )))) &and; ((&forall;  $t#17 : BoxType &bull; {S#42_$0[$t#17]} ( S#42_$0[$t#17] &rArr; GenericAlloc($t#17,$h1_$9) )))) &and; ((&forall;  $t#18 : BoxType &bull; {AllVertices#43_$0[$t#18]} ( AllVertices#43_$0[$t#18] &rArr; GenericAlloc($t#18,$h0_$9) )))) &and; ((&forall;  $t#19 : BoxType &bull; {AllVertices#43_$0[$t#19]} ( AllVertices#43_$0[$t#19] &rArr; GenericAlloc($t#19,$h1_$9) )))) &and; $HeapSucc($h0_$9,$h1_$9)) &rArr; (((&forall;&le;alpha&ge; $o_$9 : ref, $f_$9 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$9[$o_$9,$f_$9] = $h1_$9[$o_$9,$f_$9]) ))) &rArr; (BreadthFirstSearch.Successors($h0_$9,this_$37,S#42_$0,AllVertices#43_$0) = BreadthFirstSearch.Successors($h1_$9,this_$37,S#42_$0,AllVertices#43_$0))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((14 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$27 : HeapType, this_$38 : ref, m#59 : DatatypeType &bull; {BreadthFirstSearch.Domain($Heap_$27,this_$38,m#59)} ( (BreadthFirstSearch.Domain#canCall($Heap_$27,this_$38,m#59) &or; (((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(14 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$27)) &and; (&#172;(this_$38 = null))) &and; $Heap_$27[this_$38,alloc]) &and; (dtype(this_$38) = class.BreadthFirstSearch)) &and; DtAlloc(m#59,$Heap_$27)) &and; (DtType(m#59) = class.Map))) &rArr; (((((m#59 = #Map.Empty) &rArr; <FONT face="Arial Bold">true</FONT>) &and; ((&#172;(m#59 = #Map.Empty)) &rArr; <FONT face="Arial Bold">true</FONT>)) &and; (BreadthFirstSearch.Domain($Heap_$27,this_$38,m#59) = (if (m#59 = #Map.Empty) then Set#Empty : Set (BoxType)  else Map.dom(m#59)))) &and; ((&forall;  $t#0_$1 : BoxType &bull; {BreadthFirstSearch.Domain($Heap_$27,this_$38,m#59)[$t#0_$1]} ( BreadthFirstSearch.Domain($Heap_$27,this_$38,m#59)[$t#0_$1] &rArr; GenericAlloc($t#0_$1,$Heap_$27) )))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$10 : HeapType, $h1_$10 : HeapType, this_$39 : ref, m#59_$0 : DatatypeType &bull; {$HeapSucc($h0_$10,$h1_$10),BreadthFirstSearch.Domain($h1_$10,this_$39,m#59_$0)} ( ((((((((((($IsGoodHeap($h0_$10) &and; $IsGoodHeap($h1_$10)) &and; (&#172;(this_$39 = null))) &and; $h0_$10[this_$39,alloc]) &and; (dtype(this_$39) = class.BreadthFirstSearch)) &and; $h1_$10[this_$39,alloc]) &and; (dtype(this_$39) = class.BreadthFirstSearch)) &and; DtAlloc(m#59_$0,$h0_$10)) &and; (DtType(m#59_$0) = class.Map)) &and; DtAlloc(m#59_$0,$h1_$10)) &and; (DtType(m#59_$0) = class.Map)) &and; $HeapSucc($h0_$10,$h1_$10)) &rArr; (((&forall;&le;alpha&ge; $o_$10 : ref, $f_$10 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$10[$o_$10,$f_$10] = $h1_$10[$o_$10,$f_$10]) ))) &rArr; (BreadthFirstSearch.Domain($h0_$10,this_$39,m#59_$0) = BreadthFirstSearch.Domain($h1_$10,this_$39,m#59_$0))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$28 : HeapType, this_$40 : ref, source#60 : BoxType, m#61 : DatatypeType &bull; {BreadthFirstSearch.ValidMap#2($Heap_$28,this_$40,source#60,m#61)} ( BreadthFirstSearch.ValidMap#2($Heap_$28,this_$40,source#60,m#61) &hArr; BreadthFirstSearch.ValidMap($Heap_$28,this_$40,source#60,m#61) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$29 : HeapType, this_$41 : ref, source#60_$0 : BoxType, m#61_$0 : DatatypeType &bull; {BreadthFirstSearch.ValidMap($Heap_$29,this_$41,source#60_$0,m#61_$0)} ( BreadthFirstSearch.ValidMap($Heap_$29,this_$41,source#60_$0,m#61_$0) &hArr; BreadthFirstSearch.ValidMap#limited($Heap_$29,this_$41,source#60_$0,m#61_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((15 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$30 : HeapType, this_$42 : ref, source#60_$1 : BoxType &bull; {BreadthFirstSearch.ValidMap($Heap_$30,this_$42,source#60_$1,#Map.Empty)} ( (BreadthFirstSearch.ValidMap#canCall($Heap_$30,this_$42,source#60_$1,#Map.Empty) &or; ((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(15 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$30)) &and; (&#172;(this_$42 = null))) &and; $Heap_$30[this_$42,alloc]) &and; (dtype(this_$42) = class.BreadthFirstSearch)) &and; GenericAlloc(source#60_$1,$Heap_$30))) &rArr; (BreadthFirstSearch.ValidMap($Heap_$30,this_$42,source#60_$1,#Map.Empty) &hArr; <FONT face="Arial Bold">true</FONT>) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((15 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$31 : HeapType, this_$43 : ref, dom#62 : Set (BoxType) , v#63 : BoxType, path#64 : Seq (BoxType) , next#65 : DatatypeType, source#60_$2 : BoxType &bull; {BreadthFirstSearch.ValidMap($Heap_$31,this_$43,source#60_$2,#Map.Maplet(dom#62,v#63,path#64,next#65))} ( (BreadthFirstSearch.ValidMap#canCall($Heap_$31,this_$43,source#60_$2,#Map.Maplet(dom#62,v#63,path#64,next#65)) &or; (((((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(15 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$31)) &and; (&#172;(this_$43 = null))) &and; $Heap_$31[this_$43,alloc]) &and; (dtype(this_$43) = class.BreadthFirstSearch)) &and; ((&forall;  $t#1_$0 : BoxType &bull; {dom#62[$t#1_$0]} ( dom#62[$t#1_$0] &rArr; GenericAlloc($t#1_$0,$Heap_$31) )))) &and; GenericAlloc(v#63,$Heap_$31)) &and; ((&forall;  $i#2_$0 : Integer &bull; {Seq#Index(path#64,$i#2_$0)} ( ((0 &le; $i#2_$0) &and; ($i#2_$0 &le; Seq#Length(path#64))) &rArr; GenericAlloc(Seq#Index(path#64,$i#2_$0),$Heap_$31) )))) &and; DtAlloc(next#65,$Heap_$31)) &and; (DtType(next#65) = class.Map)) &and; GenericAlloc(source#60_$2,$Heap_$31))) &rArr; ((((dom#62[v#63] &rArr; BreadthFirstSearch.Domain#canCall($Heap_$31,this_$43,next#65)) &and; ((dom#62[v#63] &and; Set#Equal(dom#62,Set#Union(BreadthFirstSearch.Domain($Heap_$31,this_$43,next#65),Set#UnionOne(Set#Empty : Set (BoxType) ,v#63)))) &rArr; BreadthFirstSearch.IsPath#canCall($Heap_$31,this_$43,source#60_$2,v#63,path#64))) &and; (((dom#62[v#63] &and; Set#Equal(dom#62,Set#Union(BreadthFirstSearch.Domain($Heap_$31,this_$43,next#65),Set#UnionOne(Set#Empty : Set (BoxType) ,v#63)))) &and; BreadthFirstSearch.IsPath($Heap_$31,this_$43,source#60_$2,v#63,path#64)) &rArr; BreadthFirstSearch.ValidMap#canCall($Heap_$31,this_$43,source#60_$2,next#65))) &and; (BreadthFirstSearch.ValidMap($Heap_$31,this_$43,source#60_$2,#Map.Maplet(dom#62,v#63,path#64,next#65)) &hArr; (((dom#62[v#63] &and; Set#Equal(dom#62,Set#Union(BreadthFirstSearch.Domain($Heap_$31,this_$43,next#65),Set#UnionOne(Set#Empty : Set (BoxType) ,v#63)))) &and; BreadthFirstSearch.IsPath($Heap_$31,this_$43,source#60_$2,v#63,path#64)) &and; BreadthFirstSearch.ValidMap#limited($Heap_$31,this_$43,source#60_$2,next#65)))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((15 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$32 : HeapType, this_$44 : ref, source#60_$3 : BoxType, m#61_$1 : DatatypeType &bull; {BreadthFirstSearch.ValidMap($Heap_$32,this_$44,source#60_$3,m#61_$1)} ( (BreadthFirstSearch.ValidMap#canCall($Heap_$32,this_$44,source#60_$3,m#61_$1) &or; ((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(15 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$32)) &and; (&#172;(this_$44 = null))) &and; $Heap_$32[this_$44,alloc]) &and; (dtype(this_$44) = class.BreadthFirstSearch)) &and; GenericAlloc(source#60_$3,$Heap_$32)) &and; DtAlloc(m#61_$1,$Heap_$32)) &and; (DtType(m#61_$1) = class.Map))) &rArr; <FONT face="Arial Bold">true</FONT> ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((15 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$33 : HeapType, this_$45 : ref, source#60_$4 : BoxType &bull; {BreadthFirstSearch.ValidMap#2($Heap_$33,this_$45,source#60_$4,#Map.Empty)} ( (BreadthFirstSearch.ValidMap#canCall($Heap_$33,this_$45,source#60_$4,#Map.Empty) &or; ((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(15 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$33)) &and; (&#172;(this_$45 = null))) &and; $Heap_$33[this_$45,alloc]) &and; (dtype(this_$45) = class.BreadthFirstSearch)) &and; GenericAlloc(source#60_$4,$Heap_$33))) &rArr; (BreadthFirstSearch.ValidMap#2($Heap_$33,this_$45,source#60_$4,#Map.Empty) &hArr; <FONT face="Arial Bold">true</FONT>) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((15 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$34 : HeapType, this_$46 : ref, dom#62_$0 : Set (BoxType) , v#63_$0 : BoxType, path#64_$0 : Seq (BoxType) , next#65_$0 : DatatypeType, source#60_$5 : BoxType &bull; {BreadthFirstSearch.ValidMap#2($Heap_$34,this_$46,source#60_$5,#Map.Maplet(dom#62_$0,v#63_$0,path#64_$0,next#65_$0))} ( (BreadthFirstSearch.ValidMap#canCall($Heap_$34,this_$46,source#60_$5,#Map.Maplet(dom#62_$0,v#63_$0,path#64_$0,next#65_$0)) &or; (((((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(15 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$34)) &and; (&#172;(this_$46 = null))) &and; $Heap_$34[this_$46,alloc]) &and; (dtype(this_$46) = class.BreadthFirstSearch)) &and; ((&forall;  $t#3_$0 : BoxType &bull; {dom#62_$0[$t#3_$0]} ( dom#62_$0[$t#3_$0] &rArr; GenericAlloc($t#3_$0,$Heap_$34) )))) &and; GenericAlloc(v#63_$0,$Heap_$34)) &and; ((&forall;  $i#4_$1 : Integer &bull; {Seq#Index(path#64_$0,$i#4_$1)} ( ((0 &le; $i#4_$1) &and; ($i#4_$1 &le; Seq#Length(path#64_$0))) &rArr; GenericAlloc(Seq#Index(path#64_$0,$i#4_$1),$Heap_$34) )))) &and; DtAlloc(next#65_$0,$Heap_$34)) &and; (DtType(next#65_$0) = class.Map)) &and; GenericAlloc(source#60_$5,$Heap_$34))) &rArr; (BreadthFirstSearch.ValidMap#2($Heap_$34,this_$46,source#60_$5,#Map.Maplet(dom#62_$0,v#63_$0,path#64_$0,next#65_$0)) &hArr; (((dom#62_$0[v#63_$0] &and; Set#Equal(dom#62_$0,Set#Union(BreadthFirstSearch.Domain($Heap_$34,this_$46,next#65_$0),Set#UnionOne(Set#Empty : Set (BoxType) ,v#63_$0)))) &and; BreadthFirstSearch.IsPath($Heap_$34,this_$46,source#60_$5,v#63_$0,path#64_$0)) &and; BreadthFirstSearch.ValidMap($Heap_$34,this_$46,source#60_$5,next#65_$0))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((15 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$35 : HeapType, this_$47 : ref, source#60_$6 : BoxType, m#61_$2 : DatatypeType &bull; {BreadthFirstSearch.ValidMap#2($Heap_$35,this_$47,source#60_$6,m#61_$2)} ( (BreadthFirstSearch.ValidMap#canCall($Heap_$35,this_$47,source#60_$6,m#61_$2) &or; ((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(15 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$35)) &and; (&#172;(this_$47 = null))) &and; $Heap_$35[this_$47,alloc]) &and; (dtype(this_$47) = class.BreadthFirstSearch)) &and; GenericAlloc(source#60_$6,$Heap_$35)) &and; DtAlloc(m#61_$2,$Heap_$35)) &and; (DtType(m#61_$2) = class.Map))) &rArr; <FONT face="Arial Bold">true</FONT> ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$11 : HeapType, $h1_$11 : HeapType, this_$48 : ref, source#60_$7 : BoxType, m#61_$3 : DatatypeType &bull; {$HeapSucc($h0_$11,$h1_$11),BreadthFirstSearch.ValidMap($h1_$11,this_$48,source#60_$7,m#61_$3)} ( ((((((((((((($IsGoodHeap($h0_$11) &and; $IsGoodHeap($h1_$11)) &and; (&#172;(this_$48 = null))) &and; $h0_$11[this_$48,alloc]) &and; (dtype(this_$48) = class.BreadthFirstSearch)) &and; $h1_$11[this_$48,alloc]) &and; (dtype(this_$48) = class.BreadthFirstSearch)) &and; GenericAlloc(source#60_$7,$h0_$11)) &and; GenericAlloc(source#60_$7,$h1_$11)) &and; DtAlloc(m#61_$3,$h0_$11)) &and; (DtType(m#61_$3) = class.Map)) &and; DtAlloc(m#61_$3,$h1_$11)) &and; (DtType(m#61_$3) = class.Map)) &and; $HeapSucc($h0_$11,$h1_$11)) &rArr; (((&forall;&le;alpha&ge; $o_$11 : ref, $f_$11 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$11[$o_$11,$f_$11] = $h1_$11[$o_$11,$f_$11]) ))) &rArr; (BreadthFirstSearch.ValidMap($h0_$11,this_$48,source#60_$7,m#61_$3) &hArr; BreadthFirstSearch.ValidMap($h1_$11,this_$48,source#60_$7,m#61_$3))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$12 : HeapType, $h1_$12 : HeapType, this_$49 : ref, source#60_$8 : BoxType, m#61_$4 : DatatypeType &bull; {$HeapSucc($h0_$12,$h1_$12),BreadthFirstSearch.ValidMap#limited($h1_$12,this_$49,source#60_$8,m#61_$4)} ( ((((((((((((($IsGoodHeap($h0_$12) &and; $IsGoodHeap($h1_$12)) &and; (&#172;(this_$49 = null))) &and; $h0_$12[this_$49,alloc]) &and; (dtype(this_$49) = class.BreadthFirstSearch)) &and; $h1_$12[this_$49,alloc]) &and; (dtype(this_$49) = class.BreadthFirstSearch)) &and; GenericAlloc(source#60_$8,$h0_$12)) &and; GenericAlloc(source#60_$8,$h1_$12)) &and; DtAlloc(m#61_$4,$h0_$12)) &and; (DtType(m#61_$4) = class.Map)) &and; DtAlloc(m#61_$4,$h1_$12)) &and; (DtType(m#61_$4) = class.Map)) &and; $HeapSucc($h0_$12,$h1_$12)) &rArr; (((&forall;&le;alpha&ge; $o_$12 : ref, $f_$12 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$12[$o_$12,$f_$12] = $h1_$12[$o_$12,$f_$12]) ))) &rArr; (BreadthFirstSearch.ValidMap#limited($h0_$12,this_$49,source#60_$8,m#61_$4) &hArr; BreadthFirstSearch.ValidMap#limited($h1_$12,this_$49,source#60_$8,m#61_$4))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$36 : HeapType, this_$50 : ref, source#66 : BoxType, x#67 : BoxType, m#68 : DatatypeType &bull; {BreadthFirstSearch.Find#2($Heap_$36,this_$50,source#66,x#67,m#68)} ( BreadthFirstSearch.Find#2($Heap_$36,this_$50,source#66,x#67,m#68) = BreadthFirstSearch.Find($Heap_$36,this_$50,source#66,x#67,m#68) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $Heap_$37 : HeapType, this_$51 : ref, source#66_$0 : BoxType, x#67_$0 : BoxType, m#68_$0 : DatatypeType &bull; {BreadthFirstSearch.Find($Heap_$37,this_$51,source#66_$0,x#67_$0,m#68_$0)} ( BreadthFirstSearch.Find($Heap_$37,this_$51,source#66_$0,x#67_$0,m#68_$0) = BreadthFirstSearch.Find#limited($Heap_$37,this_$51,source#66_$0,x#67_$0,m#68_$0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((16 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$38 : HeapType, this_$52 : ref, dom#69 : Set (BoxType) , v#70 : BoxType, path#71 : Seq (BoxType) , next#72 : DatatypeType, source#66_$1 : BoxType, x#67_$1 : BoxType &bull; {BreadthFirstSearch.Find($Heap_$38,this_$52,source#66_$1,x#67_$1,#Map.Maplet(dom#69,v#70,path#71,next#72))} ( (BreadthFirstSearch.Find#canCall($Heap_$38,this_$52,source#66_$1,x#67_$1,#Map.Maplet(dom#69,v#70,path#71,next#72)) &or; ((((((((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(16 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$38)) &and; (&#172;(this_$52 = null))) &and; $Heap_$38[this_$52,alloc]) &and; (dtype(this_$52) = class.BreadthFirstSearch)) &and; ((&forall;  $t#7_$1 : BoxType &bull; {dom#69[$t#7_$1]} ( dom#69[$t#7_$1] &rArr; GenericAlloc($t#7_$1,$Heap_$38) )))) &and; GenericAlloc(v#70,$Heap_$38)) &and; ((&forall;  $i#8 : Integer &bull; {Seq#Index(path#71,$i#8)} ( ((0 &le; $i#8) &and; ($i#8 &le; Seq#Length(path#71))) &rArr; GenericAlloc(Seq#Index(path#71,$i#8),$Heap_$38) )))) &and; DtAlloc(next#72,$Heap_$38)) &and; (DtType(next#72) = class.Map)) &and; GenericAlloc(source#66_$1,$Heap_$38)) &and; GenericAlloc(x#67_$1,$Heap_$38)) &and; BreadthFirstSearch.ValidMap($Heap_$38,this_$52,source#66_$1,#Map.Maplet(dom#69,v#70,path#71,next#72))) &and; BreadthFirstSearch.Domain($Heap_$38,this_$52,#Map.Maplet(dom#69,v#70,path#71,next#72))[x#67_$1])) &rArr; (((((x#67_$1 = v#70) &rArr; <FONT face="Arial Bold">true</FONT>) &and; ((&#172;(x#67_$1 = v#70)) &rArr; BreadthFirstSearch.Find#canCall($Heap_$38,this_$52,source#66_$1,x#67_$1,next#72))) &and; (BreadthFirstSearch.Find($Heap_$38,this_$52,source#66_$1,x#67_$1,#Map.Maplet(dom#69,v#70,path#71,next#72)) = (if (x#67_$1 = v#70) then path#71 else BreadthFirstSearch.Find#limited($Heap_$38,this_$52,source#66_$1,x#67_$1,next#72)))) &and; ((&forall;  $i#9 : Integer &bull; {Seq#Index(BreadthFirstSearch.Find($Heap_$38,this_$52,source#66_$1,x#67_$1,#Map.Maplet(dom#69,v#70,path#71,next#72)),$i#9)} ( ((0 &le; $i#9) &and; ($i#9 &le; Seq#Length(BreadthFirstSearch.Find($Heap_$38,this_$52,source#66_$1,x#67_$1,#Map.Maplet(dom#69,v#70,path#71,next#72))))) &rArr; GenericAlloc(Seq#Index(BreadthFirstSearch.Find($Heap_$38,this_$52,source#66_$1,x#67_$1,#Map.Maplet(dom#69,v#70,path#71,next#72)),$i#9),$Heap_$38) )))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((16 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$39 : HeapType, this_$53 : ref, source#66_$2 : BoxType, x#67_$2 : BoxType, m#68_$1 : DatatypeType &bull; {BreadthFirstSearch.Find($Heap_$39,this_$53,source#66_$2,x#67_$2,m#68_$1)} ( (BreadthFirstSearch.Find#canCall($Heap_$39,this_$53,source#66_$2,x#67_$2,m#68_$1) &or; (((((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(16 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$39)) &and; (&#172;(this_$53 = null))) &and; $Heap_$39[this_$53,alloc]) &and; (dtype(this_$53) = class.BreadthFirstSearch)) &and; GenericAlloc(source#66_$2,$Heap_$39)) &and; GenericAlloc(x#67_$2,$Heap_$39)) &and; DtAlloc(m#68_$1,$Heap_$39)) &and; (DtType(m#68_$1) = class.Map)) &and; BreadthFirstSearch.ValidMap($Heap_$39,this_$53,source#66_$2,m#68_$1)) &and; BreadthFirstSearch.Domain($Heap_$39,this_$53,m#68_$1)[x#67_$2])) &rArr; (BreadthFirstSearch.IsPath($Heap_$39,this_$53,source#66_$2,x#67_$2,BreadthFirstSearch.Find#limited($Heap_$39,this_$53,source#66_$2,x#67_$2,m#68_$1)) &and; ((&forall;  $i#10 : Integer &bull; {Seq#Index(BreadthFirstSearch.Find($Heap_$39,this_$53,source#66_$2,x#67_$2,m#68_$1),$i#10)} ( ((0 &le; $i#10) &and; ($i#10 &le; Seq#Length(BreadthFirstSearch.Find($Heap_$39,this_$53,source#66_$2,x#67_$2,m#68_$1)))) &rArr; GenericAlloc(Seq#Index(BreadthFirstSearch.Find($Heap_$39,this_$53,source#66_$2,x#67_$2,m#68_$1),$i#10),$Heap_$39) )))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((16 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$40 : HeapType, this_$54 : ref, dom#69_$0 : Set (BoxType) , v#70_$0 : BoxType, path#71_$0 : Seq (BoxType) , next#72_$0 : DatatypeType, source#66_$3 : BoxType, x#67_$3 : BoxType &bull; {BreadthFirstSearch.Find#2($Heap_$40,this_$54,source#66_$3,x#67_$3,#Map.Maplet(dom#69_$0,v#70_$0,path#71_$0,next#72_$0))} ( (BreadthFirstSearch.Find#canCall($Heap_$40,this_$54,source#66_$3,x#67_$3,#Map.Maplet(dom#69_$0,v#70_$0,path#71_$0,next#72_$0)) &or; ((((((((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(16 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$40)) &and; (&#172;(this_$54 = null))) &and; $Heap_$40[this_$54,alloc]) &and; (dtype(this_$54) = class.BreadthFirstSearch)) &and; ((&forall;  $t#11 : BoxType &bull; {dom#69_$0[$t#11]} ( dom#69_$0[$t#11] &rArr; GenericAlloc($t#11,$Heap_$40) )))) &and; GenericAlloc(v#70_$0,$Heap_$40)) &and; ((&forall;  $i#12 : Integer &bull; {Seq#Index(path#71_$0,$i#12)} ( ((0 &le; $i#12) &and; ($i#12 &le; Seq#Length(path#71_$0))) &rArr; GenericAlloc(Seq#Index(path#71_$0,$i#12),$Heap_$40) )))) &and; DtAlloc(next#72_$0,$Heap_$40)) &and; (DtType(next#72_$0) = class.Map)) &and; GenericAlloc(source#66_$3,$Heap_$40)) &and; GenericAlloc(x#67_$3,$Heap_$40)) &and; BreadthFirstSearch.ValidMap($Heap_$40,this_$54,source#66_$3,#Map.Maplet(dom#69_$0,v#70_$0,path#71_$0,next#72_$0))) &and; BreadthFirstSearch.Domain($Heap_$40,this_$54,#Map.Maplet(dom#69_$0,v#70_$0,path#71_$0,next#72_$0))[x#67_$3])) &rArr; (BreadthFirstSearch.Find#2($Heap_$40,this_$54,source#66_$3,x#67_$3,#Map.Maplet(dom#69_$0,v#70_$0,path#71_$0,next#72_$0)) = (if (x#67_$3 = v#70_$0) then path#71_$0 else BreadthFirstSearch.Find($Heap_$40,this_$54,source#66_$3,x#67_$3,next#72_$0))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((0 &le; $ModuleContextHeight) &or; ((0 = $ModuleContextHeight) &and; ((16 &le; $FunctionContextHeight) &or; $InMethodContext))) &rArr; ((&forall;  $Heap_$41 : HeapType, this_$55 : ref, source#66_$4 : BoxType, x#67_$4 : BoxType, m#68_$2 : DatatypeType &bull; {BreadthFirstSearch.Find#2($Heap_$41,this_$55,source#66_$4,x#67_$4,m#68_$2)} ( (BreadthFirstSearch.Find#canCall($Heap_$41,this_$55,source#66_$4,x#67_$4,m#68_$2) &or; (((((((((((((&#172;(0 = $ModuleContextHeight)) &or; (&#172;(16 = $FunctionContextHeight))) &or; $InMethodContext) &and; $IsGoodHeap($Heap_$41)) &and; (&#172;(this_$55 = null))) &and; $Heap_$41[this_$55,alloc]) &and; (dtype(this_$55) = class.BreadthFirstSearch)) &and; GenericAlloc(source#66_$4,$Heap_$41)) &and; GenericAlloc(x#67_$4,$Heap_$41)) &and; DtAlloc(m#68_$2,$Heap_$41)) &and; (DtType(m#68_$2) = class.Map)) &and; BreadthFirstSearch.ValidMap($Heap_$41,this_$55,source#66_$4,m#68_$2)) &and; BreadthFirstSearch.Domain($Heap_$41,this_$55,m#68_$2)[x#67_$4])) &rArr; <FONT face="Arial Bold">true</FONT> ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$13 : HeapType, $h1_$13 : HeapType, this_$56 : ref, source#66_$5 : BoxType, x#67_$5 : BoxType, m#68_$3 : DatatypeType &bull; {$HeapSucc($h0_$13,$h1_$13),BreadthFirstSearch.Find($h1_$13,this_$56,source#66_$5,x#67_$5,m#68_$3)} ( ((((((((((((((($IsGoodHeap($h0_$13) &and; $IsGoodHeap($h1_$13)) &and; (&#172;(this_$56 = null))) &and; $h0_$13[this_$56,alloc]) &and; (dtype(this_$56) = class.BreadthFirstSearch)) &and; $h1_$13[this_$56,alloc]) &and; (dtype(this_$56) = class.BreadthFirstSearch)) &and; GenericAlloc(source#66_$5,$h0_$13)) &and; GenericAlloc(source#66_$5,$h1_$13)) &and; GenericAlloc(x#67_$5,$h0_$13)) &and; GenericAlloc(x#67_$5,$h1_$13)) &and; DtAlloc(m#68_$3,$h0_$13)) &and; (DtType(m#68_$3) = class.Map)) &and; DtAlloc(m#68_$3,$h1_$13)) &and; (DtType(m#68_$3) = class.Map)) &and; $HeapSucc($h0_$13,$h1_$13)) &rArr; (((&forall;&le;alpha&ge; $o_$13 : ref, $f_$13 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$13[$o_$13,$f_$13] = $h1_$13[$o_$13,$f_$13]) ))) &rArr; (BreadthFirstSearch.Find($h0_$13,this_$56,source#66_$5,x#67_$5,m#68_$3) = BreadthFirstSearch.Find($h1_$13,this_$56,source#66_$5,x#67_$5,m#68_$3))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h0_$14 : HeapType, $h1_$14 : HeapType, this_$57 : ref, source#66_$6 : BoxType, x#67_$6 : BoxType, m#68_$4 : DatatypeType &bull; {$HeapSucc($h0_$14,$h1_$14),BreadthFirstSearch.Find#limited($h1_$14,this_$57,source#66_$6,x#67_$6,m#68_$4)} ( ((((((((((((((($IsGoodHeap($h0_$14) &and; $IsGoodHeap($h1_$14)) &and; (&#172;(this_$57 = null))) &and; $h0_$14[this_$57,alloc]) &and; (dtype(this_$57) = class.BreadthFirstSearch)) &and; $h1_$14[this_$57,alloc]) &and; (dtype(this_$57) = class.BreadthFirstSearch)) &and; GenericAlloc(source#66_$6,$h0_$14)) &and; GenericAlloc(source#66_$6,$h1_$14)) &and; GenericAlloc(x#67_$6,$h0_$14)) &and; GenericAlloc(x#67_$6,$h1_$14)) &and; DtAlloc(m#68_$4,$h0_$14)) &and; (DtType(m#68_$4) = class.Map)) &and; DtAlloc(m#68_$4,$h1_$14)) &and; (DtType(m#68_$4) = class.Map)) &and; $HeapSucc($h0_$14,$h1_$14)) &rArr; (((&forall;&le;alpha&ge; $o_$14 : ref, $f_$14 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; ($h0_$14[$o_$14,$f_$14] = $h1_$14[$o_$14,$f_$14]) ))) &rArr; (BreadthFirstSearch.Find#limited($h0_$14,this_$57,source#66_$6,x#67_$6,m#68_$4) = BreadthFirstSearch.Find#limited($h1_$14,this_$57,source#66_$6,x#67_$6,m#68_$4))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtType(#Map.Empty) = class.Map <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DatatypeCtorId(#Map.Empty) = ##Map.Empty <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  d_$2 : DatatypeType &bull; ( Map.Empty?(d_$2) &rArr; (d_$2 = #Map.Empty) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  this_$58 : DatatypeType &bull; {Map.Empty?(this_$58)} ( Map.Empty?(this_$58) &hArr; (DatatypeCtorId(this_$58) = ##Map.Empty) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h : HeapType &bull; {DtAlloc(#Map.Empty,$h)} ( $IsGoodHeap($h) &rArr; (DtAlloc(#Map.Empty,$h) &hArr; <FONT face="Arial Bold">true</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#0 : Set (BoxType) , a1#1 : BoxType, a2#2 : Seq (BoxType) , a3#3 : DatatypeType &bull; ( DtType(#Map.Maplet(a0#0,a1#1,a2#2,a3#3)) = class.Map )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#4 : Set (BoxType) , a1#5 : BoxType, a2#6 : Seq (BoxType) , a3#7 : DatatypeType &bull; ( DatatypeCtorId(#Map.Maplet(a0#4,a1#5,a2#6,a3#7)) = ##Map.Maplet )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  d_$3 : DatatypeType &bull; ( Map.Maplet?(d_$3) &rArr; ((&exist;  a0#8 : Set (BoxType) , a1#9 : BoxType, a2#10 : Seq (BoxType) , a3#11 : DatatypeType &bull; ( d_$3 = #Map.Maplet(a0#8,a1#9,a2#10,a3#11) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  this_$59 : DatatypeType &bull; {Map.Maplet?(this_$59)} ( Map.Maplet?(this_$59) &hArr; (DatatypeCtorId(this_$59) = ##Map.Maplet) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#12 : Set (BoxType) , a1#13 : BoxType, a2#14 : Seq (BoxType) , a3#15 : DatatypeType, $h_$0 : HeapType &bull; {DtAlloc(#Map.Maplet(a0#12,a1#13,a2#14,a3#15),$h_$0)} ( $IsGoodHeap($h_$0) &rArr; (DtAlloc(#Map.Maplet(a0#12,a1#13,a2#14,a3#15),$h_$0) &hArr; ((((((&forall;  $t#16_$0 : BoxType &bull; {a0#12[$t#16_$0]} ( a0#12[$t#16_$0] &rArr; GenericAlloc($t#16_$0,$h_$0) ))) &and; GenericAlloc(a1#13,$h_$0)) &and; ((&forall;  $i#17 : Integer &bull; {Seq#Index(a2#14,$i#17)} ( ((0 &le; $i#17) &and; ($i#17 &le; Seq#Length(a2#14))) &rArr; GenericAlloc(Seq#Index(a2#14,$i#17),$h_$0) )))) &and; DtAlloc(a3#15,$h_$0)) &and; (DtType(a3#15) = class.Map))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#18 : Set (BoxType) , a1#19 : BoxType, a2#20 : Seq (BoxType) , a3#21 : DatatypeType &bull; ( Map.dom(#Map.Maplet(a0#18,a1#19,a2#20,a3#21)) = a0#18 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#22 : Set (BoxType) , a1#23 : BoxType, a2#24 : Seq (BoxType) , a3#25 : DatatypeType, d_$4 : DatatypeType &bull; ( a0#22[$Box(d_$4)] &rArr; (DtRank(d_$4) &le; DtRank(#Map.Maplet(a0#22,a1#23,a2#24,a3#25))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#26 : Set (BoxType) , a1#27 : BoxType, a2#28 : Seq (BoxType) , a3#29 : DatatypeType &bull; ( ##Map.Maplet#1(#Map.Maplet(a0#26,a1#27,a2#28,a3#29)) = a1#27 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#30 : Set (BoxType) , a1#31 : BoxType, a2#32 : Seq (BoxType) , a3#33 : DatatypeType &bull; ( DtRank($Unbox(a1#31) : DatatypeType) &le; DtRank(#Map.Maplet(a0#30,a1#31,a2#32,a3#33)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#34 : Set (BoxType) , a1#35 : BoxType, a2#36 : Seq (BoxType) , a3#37 : DatatypeType &bull; ( ##Map.Maplet#2(#Map.Maplet(a0#34,a1#35,a2#36,a3#37)) = a2#36 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#38 : Set (BoxType) , a1#39 : BoxType, a2#40 : Seq (BoxType) , a3#41 : DatatypeType, i_$18 : Integer &bull; ( ((0 &le; i_$18) &and; (i_$18 &le; Seq#Length(a2#40))) &rArr; (DtRank($Unbox(Seq#Index(a2#40,i_$18)) : DatatypeType) &le; DtRank(#Map.Maplet(a0#38,a1#39,a2#40,a3#41))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#42 : Set (BoxType) , a1#43 : BoxType, a2#44 : Seq (BoxType) , a3#45 : DatatypeType &bull; ( Map.next(#Map.Maplet(a0#42,a1#43,a2#44,a3#45)) = a3#45 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#46 : Set (BoxType) , a1#47 : BoxType, a2#48 : Seq (BoxType) , a3#49 : DatatypeType &bull; ( DtRank(a3#49) &le; DtRank(#Map.Maplet(a0#46,a1#47,a2#48,a3#49)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtType(#List.Nil) = class.List <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DatatypeCtorId(#List.Nil) = ##List.Nil <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  d_$5 : DatatypeType &bull; ( List.Nil?(d_$5) &rArr; (d_$5 = #List.Nil) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  this_$60 : DatatypeType &bull; {List.Nil?(this_$60)} ( List.Nil?(this_$60) &hArr; (DatatypeCtorId(this_$60) = ##List.Nil) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h_$1 : HeapType &bull; {DtAlloc(#List.Nil,$h_$1)} ( $IsGoodHeap($h_$1) &rArr; (DtAlloc(#List.Nil,$h_$1) &hArr; <FONT face="Arial Bold">true</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#50 : BoxType, a1#51 : DatatypeType &bull; ( DtType(#List.Cons(a0#50,a1#51)) = class.List )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#52 : BoxType, a1#53 : DatatypeType &bull; ( DatatypeCtorId(#List.Cons(a0#52,a1#53)) = ##List.Cons )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  d_$6 : DatatypeType &bull; ( List.Cons?(d_$6) &rArr; ((&exist;  a0#54 : BoxType, a1#55 : DatatypeType &bull; ( d_$6 = #List.Cons(a0#54,a1#55) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  this_$61 : DatatypeType &bull; {List.Cons?(this_$61)} ( List.Cons?(this_$61) &hArr; (DatatypeCtorId(this_$61) = ##List.Cons) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#56 : BoxType, a1#57 : DatatypeType, $h_$2 : HeapType &bull; {DtAlloc(#List.Cons(a0#56,a1#57),$h_$2)} ( $IsGoodHeap($h_$2) &rArr; (DtAlloc(#List.Cons(a0#56,a1#57),$h_$2) &hArr; ((GenericAlloc(a0#56,$h_$2) &and; DtAlloc(a1#57,$h_$2)) &and; (DtType(a1#57) = class.List))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#58 : BoxType, a1#59 : DatatypeType &bull; ( ##List.Cons#0(#List.Cons(a0#58,a1#59)) = a0#58 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#60 : BoxType, a1#61 : DatatypeType &bull; ( DtRank($Unbox(a0#60) : DatatypeType) &le; DtRank(#List.Cons(a0#60,a1#61)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#62 : BoxType, a1#63 : DatatypeType &bull; ( ##List.Cons#1(#List.Cons(a0#62,a1#63)) = a1#63 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#64 : BoxType, a1#65 : DatatypeType &bull; ( DtRank(a1#65) &le; DtRank(#List.Cons(a0#64,a1#65)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtType(#Nat.Zero) = class.Nat <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DatatypeCtorId(#Nat.Zero) = ##Nat.Zero <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  d_$7 : DatatypeType &bull; ( Nat.Zero?(d_$7) &rArr; (d_$7 = #Nat.Zero) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  this_$62 : DatatypeType &bull; {Nat.Zero?(this_$62)} ( Nat.Zero?(this_$62) &hArr; (DatatypeCtorId(this_$62) = ##Nat.Zero) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $h_$3 : HeapType &bull; {DtAlloc(#Nat.Zero,$h_$3)} ( $IsGoodHeap($h_$3) &rArr; (DtAlloc(#Nat.Zero,$h_$3) &hArr; <FONT face="Arial Bold">true</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#66 : DatatypeType &bull; ( DtType(#Nat.Suc(a0#66)) = class.Nat )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#67 : DatatypeType &bull; ( DatatypeCtorId(#Nat.Suc(a0#67)) = ##Nat.Suc )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  d_$8 : DatatypeType &bull; ( Nat.Suc?(d_$8) &rArr; ((&exist;  a0#68 : DatatypeType &bull; ( d_$8 = #Nat.Suc(a0#68) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  this_$63 : DatatypeType &bull; {Nat.Suc?(this_$63)} ( Nat.Suc?(this_$63) &hArr; (DatatypeCtorId(this_$63) = ##Nat.Suc) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#69 : DatatypeType, $h_$4 : HeapType &bull; {DtAlloc(#Nat.Suc(a0#69),$h_$4)} ( $IsGoodHeap($h_$4) &rArr; (DtAlloc(#Nat.Suc(a0#69),$h_$4) &hArr; (DtAlloc(a0#69,$h_$4) &and; (DtType(a0#69) = class.Nat))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#70 : DatatypeType &bull; ( Nat.predecessor(#Nat.Suc(a0#70)) = a0#70 )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  a0#71 : DatatypeType &bull; ( DtRank(a0#71) &le; DtRank(#Nat.Suc(a0#71)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$15 : ref, $f_$15 : Field (alpha) , alloc_$0 : Field (Boolean) , null_$0 : ref, $Heap_$42 : HeapType &bull; {lambda#0(alloc_$0,null_$0,$Heap_$42)[$o_$15,$f_$15]} ( lambda#0(alloc_$0,null_$0,$Heap_$42)[$o_$15,$f_$15] &hArr; (((&#172;($o_$15 = null_$0)) &and; $Heap_$42[$o_$15,alloc_$0]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$16 : ref, $f_$16 : Field (alpha) , alloc_$1 : Field (Boolean) , null_$1 : ref, $Heap_$43 : HeapType &bull; {lambda#1(alloc_$1,null_$1,$Heap_$43)[$o_$16,$f_$16]} ( lambda#1(alloc_$1,null_$1,$Heap_$43)[$o_$16,$f_$16] &hArr; (((&#172;($o_$16 = null_$1)) &and; $Heap_$43[$o_$16,alloc_$1]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$17 : ref, $f_$17 : Field (alpha) , alloc_$2 : Field (Boolean) , null_$2 : ref, $Heap_$44 : HeapType &bull; {lambda#2(alloc_$2,null_$2,$Heap_$44)[$o_$17,$f_$17]} ( lambda#2(alloc_$2,null_$2,$Heap_$44)[$o_$17,$f_$17] &hArr; (((&#172;($o_$17 = null_$2)) &and; $Heap_$44[$o_$17,alloc_$2]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$18 : ref, $f_$18 : Field (alpha) , alloc_$3 : Field (Boolean) , null_$3 : ref, $Heap_$45 : HeapType &bull; {lambda#3(alloc_$3,null_$3,$Heap_$45)[$o_$18,$f_$18]} ( lambda#3(alloc_$3,null_$3,$Heap_$45)[$o_$18,$f_$18] &hArr; (((&#172;($o_$18 = null_$3)) &and; $Heap_$45[$o_$18,alloc_$3]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $y#27 : BoxType, V#13_$0 : Set (BoxType) , $Heap_$46 : HeapType, this_$64 : ref, v#21_$0 : BoxType &bull; {lambda#4(V#13_$0,$Heap_$46,this_$64,v#21_$0)[$y#27]} ( lambda#4(V#13_$0,$Heap_$46,this_$64,v#21_$0)[$y#27] &hArr; ((&exist;  w#25 : BoxType &bull; ( ((GenericAlloc(w#25,$Heap_$46) &and; BreadthFirstSearch.Succ($Heap_$46,this_$64,v#21_$0)[w#25]) &and; (&#172;V#13_$0[w#25])) &and; ($y#27 = w#25) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$19 : ref, $f_$19 : Field (alpha) , alloc_$4 : Field (Boolean) , null_$4 : ref, $Heap_$47 : HeapType &bull; {lambda#5(alloc_$4,null_$4,$Heap_$47)[$o_$19,$f_$19]} ( lambda#5(alloc_$4,null_$4,$Heap_$47)[$o_$19,$f_$19] &hArr; (((&#172;($o_$19 = null_$4)) &and; $Heap_$47[$o_$19,alloc_$4]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$20 : ref, $f_$20 : Field (alpha) , alloc_$5 : Field (Boolean) , null_$5 : ref, $Heap_$48 : HeapType &bull; {lambda#6(alloc_$5,null_$5,$Heap_$48)[$o_$20,$f_$20]} ( lambda#6(alloc_$5,null_$5,$Heap_$48)[$o_$20,$f_$20] &hArr; (((&#172;($o_$20 = null_$5)) &and; $Heap_$48[$o_$20,alloc_$5]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$21 : ref, $f_$21 : Field (alpha) , alloc_$6 : Field (Boolean) , null_$6 : ref, $Heap_$49 : HeapType &bull; {lambda#7(alloc_$6,null_$6,$Heap_$49)[$o_$21,$f_$21]} ( lambda#7(alloc_$6,null_$6,$Heap_$49)[$o_$21,$f_$21] &hArr; (((&#172;($o_$21 = null_$6)) &and; $Heap_$49[$o_$21,alloc_$6]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$22 : ref, $f_$22 : Field (alpha) , alloc_$7 : Field (Boolean) , null_$7 : ref, $Heap_$50 : HeapType &bull; {lambda#8(alloc_$7,null_$7,$Heap_$50)[$o_$22,$f_$22]} ( lambda#8(alloc_$7,null_$7,$Heap_$50)[$o_$22,$f_$22] &hArr; (((&#172;($o_$22 = null_$7)) &and; $Heap_$50[$o_$22,alloc_$7]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$23 : ref, $f_$23 : Field (alpha) , alloc_$8 : Field (Boolean) , null_$8 : ref, $Heap_$51 : HeapType &bull; {lambda#9(alloc_$8,null_$8,$Heap_$51)[$o_$23,$f_$23]} ( lambda#9(alloc_$8,null_$8,$Heap_$51)[$o_$23,$f_$23] &hArr; (((&#172;($o_$23 = null_$8)) &and; $Heap_$51[$o_$23,alloc_$8]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$24 : ref, $f_$24 : Field (alpha) , alloc_$9 : Field (Boolean) , null_$9 : ref, $Heap_$52 : HeapType &bull; {lambda#10(alloc_$9,null_$9,$Heap_$52)[$o_$24,$f_$24]} ( lambda#10(alloc_$9,null_$9,$Heap_$52)[$o_$24,$f_$24] &hArr; (((&#172;($o_$24 = null_$9)) &and; $Heap_$52[$o_$24,alloc_$9]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$25 : ref, $f_$25 : Field (alpha) , alloc_$10 : Field (Boolean) , null_$10 : ref, $Heap_$53 : HeapType &bull; {lambda#11(alloc_$10,null_$10,$Heap_$53)[$o_$25,$f_$25]} ( lambda#11(alloc_$10,null_$10,$Heap_$53)[$o_$25,$f_$25] &hArr; (((&#172;($o_$25 = null_$10)) &and; $Heap_$53[$o_$25,alloc_$10]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $y#14 : BoxType, S#42_$1 : Set (BoxType) , $Heap_$54 : HeapType, AllVertices#43_$1 : Set (BoxType) , this_$65 : ref &bull; {lambda#12(S#42_$1,$Heap_$54,AllVertices#43_$1,this_$65)[$y#14]} ( lambda#12(S#42_$1,$Heap_$54,AllVertices#43_$1,this_$65)[$y#14] &hArr; ((&exist;  w#44_$0 : BoxType &bull; ( ((GenericAlloc(w#44_$0,$Heap_$54) &and; AllVertices#43_$1[w#44_$0]) &and; ((&exist;  x#45_$0 : BoxType &bull; ( (GenericAlloc(x#45_$0,$Heap_$54) &and; S#42_$1[x#45_$0]) &and; BreadthFirstSearch.Succ($Heap_$54,this_$65,x#45_$0)[w#44_$0] )))) &and; ($y#14 = w#44_$0) ))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$26 : ref, $f_$26 : Field (alpha) , alloc_$11 : Field (Boolean) , null_$11 : ref, $Heap_$55 : HeapType &bull; {lambda#13(alloc_$11,null_$11,$Heap_$55)[$o_$26,$f_$26]} ( lambda#13(alloc_$11,null_$11,$Heap_$55)[$o_$26,$f_$26] &hArr; (((&#172;($o_$26 = null_$11)) &and; $Heap_$55[$o_$26,alloc_$11]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$27 : ref, $f_$27 : Field (alpha) , alloc_$12 : Field (Boolean) , null_$12 : ref, $Heap_$56 : HeapType &bull; {lambda#14(alloc_$12,null_$12,$Heap_$56)[$o_$27,$f_$27]} ( lambda#14(alloc_$12,null_$12,$Heap_$56)[$o_$27,$f_$27] &hArr; (((&#172;($o_$27 = null_$12)) &and; $Heap_$56[$o_$27,alloc_$12]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$28 : ref, $f_$28 : Field (alpha) , alloc_$13 : Field (Boolean) , null_$13 : ref, $Heap_$57 : HeapType &bull; {lambda#15(alloc_$13,null_$13,$Heap_$57)[$o_$28,$f_$28]} ( lambda#15(alloc_$13,null_$13,$Heap_$57)[$o_$28,$f_$28] &hArr; (((&#172;($o_$28 = null_$13)) &and; $Heap_$57[$o_$28,alloc_$13]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$29 : ref, $f_$29 : Field (alpha) , alloc_$14 : Field (Boolean) , null_$14 : ref, $Heap_$58 : HeapType &bull; {lambda#16(alloc_$14,null_$14,$Heap_$58)[$o_$29,$f_$29]} ( lambda#16(alloc_$14,null_$14,$Heap_$58)[$o_$29,$f_$29] &hArr; (((&#172;($o_$29 = null_$14)) &and; $Heap_$58[$o_$29,alloc_$14]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$30 : ref, $f_$30 : Field (alpha) , alloc_$15 : Field (Boolean) , null_$15 : ref, $Heap_$59 : HeapType &bull; {lambda#17(alloc_$15,null_$15,$Heap_$59)[$o_$30,$f_$30]} ( lambda#17(alloc_$15,null_$15,$Heap_$59)[$o_$30,$f_$30] &hArr; (((&#172;($o_$30 = null_$15)) &and; $Heap_$59[$o_$30,alloc_$15]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$31 : ref, $f_$31 : Field (alpha) , alloc_$16 : Field (Boolean) , null_$16 : ref, $Heap_$60 : HeapType &bull; {lambda#18(alloc_$16,null_$16,$Heap_$60)[$o_$31,$f_$31]} ( lambda#18(alloc_$16,null_$16,$Heap_$60)[$o_$31,$f_$31] &hArr; (((&#172;($o_$31 = null_$16)) &and; $Heap_$60[$o_$31,alloc_$16]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$32 : ref, $f_$32 : Field (alpha) , alloc_$17 : Field (Boolean) , null_$17 : ref, $Heap_$61 : HeapType &bull; {lambda#19(alloc_$17,null_$17,$Heap_$61)[$o_$32,$f_$32]} ( lambda#19(alloc_$17,null_$17,$Heap_$61)[$o_$32,$f_$32] &hArr; (((&#172;($o_$32 = null_$17)) &and; $Heap_$61[$o_$32,alloc_$17]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$33 : ref, $f_$33 : Field (alpha) , alloc_$18 : Field (Boolean) , null_$18 : ref, $Heap_$62 : HeapType &bull; {lambda#20(alloc_$18,null_$18,$Heap_$62)[$o_$33,$f_$33]} ( lambda#20(alloc_$18,null_$18,$Heap_$62)[$o_$33,$f_$33] &hArr; (((&#172;($o_$33 = null_$18)) &and; $Heap_$62[$o_$33,alloc_$18]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$34 : ref, $f_$34 : Field (alpha) , alloc_$19 : Field (Boolean) , null_$19 : ref, $Heap_$63 : HeapType &bull; {lambda#21(alloc_$19,null_$19,$Heap_$63)[$o_$34,$f_$34]} ( lambda#21(alloc_$19,null_$19,$Heap_$63)[$o_$34,$f_$34] &hArr; (((&#172;($o_$34 = null_$19)) &and; $Heap_$63[$o_$34,alloc_$19]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$35 : ref, $f_$35 : Field (alpha) , alloc_$20 : Field (Boolean) , null_$20 : ref, $Heap_$64 : HeapType &bull; {lambda#22(alloc_$20,null_$20,$Heap_$64)[$o_$35,$f_$35]} ( lambda#22(alloc_$20,null_$20,$Heap_$64)[$o_$35,$f_$35] &hArr; (((&#172;($o_$35 = null_$20)) &and; $Heap_$64[$o_$35,alloc_$20]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$36 : ref, $f_$36 : Field (alpha) , alloc_$21 : Field (Boolean) , null_$21 : ref, $Heap_$65 : HeapType &bull; {lambda#23(alloc_$21,null_$21,$Heap_$65)[$o_$36,$f_$36]} ( lambda#23(alloc_$21,null_$21,$Heap_$65)[$o_$36,$f_$36] &hArr; (((&#172;($o_$36 = null_$21)) &and; $Heap_$65[$o_$36,alloc_$21]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$37 : ref, $f_$37 : Field (alpha) , alloc_$22 : Field (Boolean) , null_$22 : ref, $Heap_$66 : HeapType &bull; {lambda#24(alloc_$22,null_$22,$Heap_$66)[$o_$37,$f_$37]} ( lambda#24(alloc_$22,null_$22,$Heap_$66)[$o_$37,$f_$37] &hArr; (((&#172;($o_$37 = null_$22)) &and; $Heap_$66[$o_$37,alloc_$22]) &rArr; <FONT face="Arial Bold">false</FONT>) )) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"$exit" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">$exit</FONT>  <BR ALIGN="CENTER"/>
		</FONT>
	>];
	"PreconditionGeneratedEntry" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">PreconditionGeneratedEntry</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((&#172;(this = null)) &and; $Heap[this,alloc]) &and; (dtype(this) = class.BreadthFirstSearch) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> GenericAlloc(source#6,$Heap) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> GenericAlloc(dest#7,$Heap) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#0_$2 : BoxType &bull; {AllVertices#8[$t#0_$2]} ( AllVertices#8[$t#0_$2] &rArr; GenericAlloc($t#0_$2,$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $i#1_$0 : Integer &bull; {Seq#Index(path#10,$i#1_$0)} ( ((0 &le; $i#1_$0) &and; ($i#1_$0 &le; Seq#Length(path#10))) &rArr; GenericAlloc(Seq#Index(path#10,$i#1_$0),$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#10_$1 : BoxType &bull; {V#13[$t#10_$1]} ( V#13[$t#10_$1] &rArr; GenericAlloc($t#10_$1,$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#11_$0 : BoxType &bull; {C#14[$t#11_$0]} ( C#14[$t#11_$0] &rArr; GenericAlloc($t#11_$0,$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#12_$0 : BoxType &bull; {N#15[$t#12_$0]} ( N#15[$t#12_$0] &rArr; GenericAlloc($t#12_$0,$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#16_$1 : BoxType &bull; {Processed#16[$t#16_$1]} ( Processed#16[$t#16_$1] &rArr; GenericAlloc($t#16_$1,$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc(paths#17,$Heap) &and; (DtType(paths#17) = class.Map) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc(dd#18,$Heap) &and; (DtType(dd#18) = class.Nat) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> GenericAlloc(v#21,$Heap) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $i#21 : Integer &bull; {Seq#Index(pathToV#22,$i#21)} ( ((0 &le; $i#21) &and; ($i#21 &le; Seq#Length(pathToV#22))) &rArr; GenericAlloc(Seq#Index(pathToV#22,$i#21),$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#26 : BoxType &bull; {newlyEncountered#24[$t#26]} ( newlyEncountered#24[$t#26] &rArr; GenericAlloc($t#26,$Heap) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc($rhs#30,$Heap) &and; (DtType($rhs#30) = class.Map) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (0 = $ModuleContextHeight) &and; $InMethodContext <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> AllVertices#8[source#6] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> AllVertices#8[dest#7] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (BreadthFirstSearch.IsClosed#canCall($Heap,this,AllVertices#8) &and; BreadthFirstSearch.IsClosed($Heap,this,AllVertices#8)) &and; ((&forall;  v#5_$1 : BoxType &bull; ( GenericAlloc(v#5_$1,$Heap) &rArr; (AllVertices#8[v#5_$1] &rArr; Set#Subset(BreadthFirstSearch.Succ($Heap,this,v#5_$1),AllVertices#8)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsClosed#canCall($Heap,this,AllVertices#8) &rArr; (BreadthFirstSearch.IsClosed($Heap,this,AllVertices#8) &or; ((&forall;  v#5_$2 : BoxType &bull; ( GenericAlloc(v#5_$2,$Heap) &rArr; (AllVertices#8[v#5_$2] &rArr; Set#Subset(BreadthFirstSearch.Succ($Heap,this,v#5_$2),AllVertices#8)) )))) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon0" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon0</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $_Frame@0 = lambda#3(alloc,null,$Heap) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#13@0 = Set#UnionOne(Set#Empty : Set (BoxType) ,source#6) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#14@0 = Set#UnionOne(Set#Empty : Set (BoxType) ,source#6) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#15@0 = Set#Empty : Set (BoxType)  <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#17@0 = Set#Empty : Set (BoxType)  <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#18@0 = #Map.Maplet(Set#UnionOne(Set#Empty : Set (BoxType) ,source#6),source#6,Seq#Empty : Seq (BoxType) ,#Map.Empty) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> dd#18@0 = #Nat.Zero <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $decr0$init$0@0 = Set#Difference(AllVertices#8,$rhs#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset($rhs#13@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset($rhs#17@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset($rhs#14@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset($rhs#15@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; $rhs#13@0[source#6] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal($rhs#13@0,Set#Union(Set#Union($rhs#17@0,$rhs#14@0),$rhs#15@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Disjoint($rhs#17@0,$rhs#14@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Disjoint(Set#Union($rhs#17@0,$rhs#14@0),$rhs#15@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; BreadthFirstSearch.ValidMap#2($Heap,this,source#6,$rhs#18@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal($rhs#13@0,BreadthFirstSearch.Domain($Heap,this,$rhs#18@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; ((&forall;  x#19 : BoxType &bull; ( GenericAlloc(x#19,$Heap) &rArr; ($rhs#14@0[x#19] &rArr; (Seq#Length(BreadthFirstSearch.Find#2($Heap,this,source#6,x#19,$rhs#18@0)) = 0)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; ((&forall;  x#20 : BoxType &bull; ( GenericAlloc(x#20,$Heap) &rArr; ($rhs#15@0[x#20] &rArr; (Seq#Length(BreadthFirstSearch.Find#2($Heap,this,source#6,x#20,$rhs#18@0)) = (0 + 1))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; (BreadthFirstSearch.R($Heap,this,source#6,dd#18@0,AllVertices#8)[dest#7] &rArr; $rhs#14@0[dest#7]) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; ((&#172;(0 = 0)) &rArr; (&#172;BreadthFirstSearch.R#2($Heap,this,source#6,Nat.predecessor(dd#18@0),AllVertices#8)[dest#7])) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal(Set#Union($rhs#17@0,$rhs#14@0),BreadthFirstSearch.R#2($Heap,this,source#6,dd#18@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal($rhs#15@0,Set#Difference(BreadthFirstSearch.Successors($Heap,this,$rhs#17@0,AllVertices#8),BreadthFirstSearch.R#2($Heap,this,source#6,dd#18@0,AllVertices#8))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; (Set#Equal($rhs#14@0,Set#Empty : Set (BoxType) ) &rArr; Set#Equal($rhs#15@0,Set#Empty : Set (BoxType) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; (BreadthFirstSearch.Value#2($Heap,this,dd#18@0) = 0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon50_LoopHead" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon50_LoopHead</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#11_$1 : BoxType &bull; {C#14@0[$t#11_$1]} ( C#14@0[$t#11_$1] &rArr; GenericAlloc($t#11_$1,$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#12_$1 : BoxType &bull; {N#15@0[$t#12_$1]} ( N#15@0[$t#12_$1] &rArr; GenericAlloc($t#12_$1,$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc(dd#18@1,$Heap@0) &and; (DtType(dd#18@1) = class.Nat) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#26_$0 : BoxType &bull; {newlyEncountered#24@0[$t#26_$0]} ( newlyEncountered#24@0[$t#26_$0] &rArr; GenericAlloc($t#26_$0,$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#10_$2 : BoxType &bull; {V#13@0[$t#10_$2]} ( V#13@0[$t#10_$2] &rArr; GenericAlloc($t#10_$2,$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc($rhs#30@0,$Heap@0) &and; (DtType($rhs#30@0) = class.Map) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc(paths#17@0,$Heap@0) &and; (DtType(paths#17@0) = class.Map) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> GenericAlloc(v#21@0,$Heap@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $t#16_$2 : BoxType &bull; {Processed#16@0[$t#16_$2]} ( Processed#16@0[$t#16_$2] &rArr; GenericAlloc($t#16_$2,$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $i#21_$0 : Integer &bull; {Seq#Index(pathToV#22@0,$i#21_$0)} ( ((0 &le; $i#21_$0) &and; ($i#21_$0 &le; Seq#Length(pathToV#22@0))) &rArr; GenericAlloc(Seq#Index(pathToV#22@0,$i#21_$0),$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> 0 &le; d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (((Set#Subset(V#13@0,AllVertices#8) &rArr; <FONT face="Arial Bold">true</FONT>) &and; ((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &rArr; <FONT face="Arial Bold">true</FONT>)) &and; (((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &and; Set#Subset(C#14@0,AllVertices#8)) &rArr; <FONT face="Arial Bold">true</FONT>)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Subset(V#13@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Subset(Processed#16@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Subset(C#14@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Subset(N#15@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; V#13@0[source#6] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Equal(V#13@0,Set#Union(Set#Union(Processed#16@0,C#14@0),N#15@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (Set#Disjoint(Processed#16@0,C#14@0) &rArr; <FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Disjoint(Processed#16@0,C#14@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Disjoint(Set#Union(Processed#16@0,C#14@0),N#15@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; BreadthFirstSearch.ValidMap#canCall($Heap@0,this,source#6,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; BreadthFirstSearch.ValidMap#2($Heap@0,this,source#6,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; BreadthFirstSearch.Domain#canCall($Heap@0,this,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Equal(V#13@0,BreadthFirstSearch.Domain($Heap@0,this,paths#17@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; ((&forall;  x#19_$0 : BoxType &bull; ( GenericAlloc(x#19_$0,$Heap@0) &rArr; (C#14@0[x#19_$0] &rArr; BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,x#19_$0,paths#17@0)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; ((&forall;  x#19_$1 : BoxType &bull; ( GenericAlloc(x#19_$1,$Heap@0) &rArr; (C#14@0[x#19_$1] &rArr; (Seq#Length(BreadthFirstSearch.Find#2($Heap@0,this,source#6,x#19_$1,paths#17@0)) = d#9@0)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; ((&forall;  x#20_$0 : BoxType &bull; ( GenericAlloc(x#20_$0,$Heap@0) &rArr; (N#15@0[x#20_$0] &rArr; BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,x#20_$0,paths#17@0)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; ((&forall;  x#20_$1 : BoxType &bull; ( GenericAlloc(x#20_$1,$Heap@0) &rArr; (N#15@0[x#20_$1] &rArr; (Seq#Length(BreadthFirstSearch.Find#2($Heap@0,this,source#6,x#20_$1,paths#17@0)) = (d#9@0 + 1))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) &and; (BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] &rArr; <FONT face="Arial Bold">true</FONT>)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] &rArr; C#14@0[dest#7]) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; ((&#172;(d#9@0 = 0)) &rArr; BreadthFirstSearch.R#canCall($Heap@0,this,source#6,Nat.predecessor(dd#18@1),AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; ((&#172;(d#9@0 = 0)) &rArr; (&#172;BreadthFirstSearch.R#2($Heap@0,this,source#6,Nat.predecessor(dd#18@1),AllVertices#8)[dest#7])) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Equal(Set#Union(Processed#16@0,C#14@0),BreadthFirstSearch.R#2($Heap@0,this,source#6,dd#18@1,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (BreadthFirstSearch.Successors#canCall($Heap@0,this,Processed#16@0,AllVertices#8) &and; BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; Set#Equal(N#15@0,Set#Difference(BreadthFirstSearch.Successors($Heap@0,this,Processed#16@0,AllVertices#8),BreadthFirstSearch.R#2($Heap@0,this,source#6,dd#18@1,AllVertices#8))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) &rArr; <FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) &rArr; Set#Equal(N#15@0,Set#Empty : Set (BoxType) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; BreadthFirstSearch.Value#canCall($Heap@0,this,dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 &rArr; (BreadthFirstSearch.Value#2($Heap@0,this,dd#18@1) = d#9@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$38 : ref, $f_$38 : Field (alpha)  &bull; {$Heap@0[$o_$38,$f_$38]} ( ((&#172;($o_$38 = null)) &and; $Heap[$o_$38,alloc]) &rArr; ($Heap@0[$o_$38,$f_$38] = $Heap[$o_$38,$f_$38]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap,$Heap@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$39 : ref, $f_$39 : Field (alpha)  &bull; {$Heap@0[$o_$39,$f_$39]} ( ((&#172;($o_$39 = null)) &and; $Heap[$o_$39,alloc]) &rArr; (($Heap@0[$o_$39,$f_$39] = $Heap[$o_$39,$f_$39]) &or; $_Frame@0[$o_$39,$f_$39]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Subset(Set#Difference(AllVertices#8,Processed#16@0),$decr0$init$0@0) &and; (Set#Equal(Set#Difference(AllVertices#8,Processed#16@0),$decr0$init$0@0) &rArr; <FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon50_LoopDone" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon50_LoopDone</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition &hArr; (&#172;<FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;<FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon50_LoopBody" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon50_LoopBody</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition &hArr; (&#172;<FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon40" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon40</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon51_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon51_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$0 &hArr; (&#172;$w0@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$w0@0 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon51_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon51_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$0 &hArr; (&#172;$w0@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $w0@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon52_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon52_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$1 &hArr; Set#Subset(V#13@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Subset(V#13@0,AllVertices#8) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon52_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon52_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$1 &hArr; Set#Subset(V#13@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;Set#Subset(V#13@0,AllVertices#8) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon61_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon61_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$2 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$2 &hArr; Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon61_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon61_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$2 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$2 &hArr; Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $decr0$0@1 = Set#Difference(AllVertices#8,Processed#16@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> &#172;(C#14@0 = Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> v#21@1 = Set#Choose(C#14@0,$Tick@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#19@1 = Set#Difference(C#14@0,Set#UnionOne(Set#Empty : Set (BoxType) ,v#21@1)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#20@1 = Set#Union(Processed#16@0,Set#UnionOne(Set#Empty : Set (BoxType) ,v#21@1)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.ValidMap($Heap@0,this,source#6,paths#17@0) &and; BreadthFirstSearch.Domain($Heap@0,this,paths#17@0)[v#21@1] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,v#21@1,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,v#21@1,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> pathToV#22@1 = BreadthFirstSearch.Find($Heap@0,this,source#6,v#21@1,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon53_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon53_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$3 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$3 &hArr; (Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon53_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon53_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$3 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$3 &hArr; (Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;(Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon62_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon62_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$5 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$5 &hArr; (v#21@1 = dest#7) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> v#21@1 = dest#7 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon62_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon62_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$5 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$5 &hArr; (v#21@1 = dest#7) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;(v#21@1 = dest#7) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> GenericAlloc(w#156@1,$Heap@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Succ#canCall($Heap@0,this,v#21@1) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon54_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon54_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$6 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$6 &hArr; ((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &and; Set#Subset(C#14@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &and; Set#Subset(C#14@0,AllVertices#8) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon54_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon54_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$6 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$6 &hArr; ((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &and; Set#Subset(C#14@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &and; Set#Subset(C#14@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon68_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon68_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$8 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc(nn#26@0,$Heap@0) &and; (DtType(nn#26@0) = class.Nat) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value#canCall($Heap@0,this,nn#26@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value#canCall($Heap@0,this,dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value#canCall($Heap@0,this,nn#26@0) &and; BreadthFirstSearch.Value#canCall($Heap@0,this,dd#18@1) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon68_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon68_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$8 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  nn#176 : DatatypeType &bull; ( ((DtAlloc(nn#176,$Heap@0) &and; (DtType(nn#176) = class.Nat)) &and; <FONT face="Arial Bold">true</FONT>) &rArr; (&#172;BreadthFirstSearch.R($Heap@0,this,source#6,nn#176,AllVertices#8)[dest#7]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon63_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon63_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$9 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $i#22 : Integer &bull; {Seq#Index(p#23@0,$i#22)} ( ((0 &le; $i#22) &and; ($i#22 &le; Seq#Length(p#23@0))) &rArr; GenericAlloc(Seq#Index(p#23@0,$i#22),$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap@0,this,source#6,dest#7,p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap@0,this,source#6,dest#7,p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath($Heap@0,this,source#6,dest#7,p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;&le;alpha&ge; $o_$40 : ref, $f_$40 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; $_Frame@0[$o_$40,$f_$40] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.IsPath#canCall($Heap@0,this,source#6,dest#7,p#23@0) &rArr; (BreadthFirstSearch.IsPath($Heap@0,this,source#6,dest#7,p#23@0) &or; (if (source#6 = dest#7) then Seq#Equal(p#23@0,Seq#Empty : Seq (BoxType) ) else (((&#172;Seq#Equal(p#23@0,Seq#Empty : Seq (BoxType) )) &and; BreadthFirstSearch.Succ($Heap@0,this,Seq#Index(p#23@0,Seq#Length(p#23@0) - 1))[dest#7]) &and; BreadthFirstSearch.IsPath($Heap@0,this,source#6,Seq#Index(p#23@0,Seq#Length(p#23@0) - 1),Seq#Take(p#23@0,Seq#Length(p#23@0) - 1))))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> AllVertices#8[source#6] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.IsClosed#canCall($Heap@0,this,AllVertices#8) &rArr; (BreadthFirstSearch.IsClosed($Heap@0,this,AllVertices#8) &or; ((&forall;  v#5_$3 : BoxType &bull; ( GenericAlloc(v#5_$3,$Heap@0) &rArr; (AllVertices#8[v#5_$3] &rArr; Set#Subset(BreadthFirstSearch.Succ($Heap@0,this,v#5_$3),AllVertices#8)) )))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@2) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#2($Heap@2,this,source#6,BreadthFirstSearch.ToNat#2($Heap@2,this,Seq#Length(p#23@0)),AllVertices#8)[dest#7] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$41 : ref, $f_$41 : Field (alpha)  &bull; {$Heap@2[$o_$41,$f_$41]} ( ((&#172;($o_$41 = null)) &and; $Heap@0[$o_$41,alloc]) &rArr; ($Heap@2[$o_$41,$f_$41] = $Heap@0[$o_$41,$f_$41]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap@0,$Heap@2) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon63_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon63_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$9 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  p#152 : Seq (BoxType)  &bull; ( (((&forall;  $i#23 : Integer &bull; {Seq#Index(p#152,$i#23)} ( ((0 &le; $i#23) &and; ($i#23 &le; Seq#Length(p#152))) &rArr; GenericAlloc(Seq#Index(p#152,$i#23),$Heap@0) ))) &and; BreadthFirstSearch.IsPath($Heap@0,this,source#6,dest#7,p#152)) &rArr; (Seq#Length(pathToV#22@1) &le; Seq#Length(p#152)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@3 = d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@9 = $Heap@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> path#10@0 = pathToV#22@1 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon65_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon65_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$10 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$10 &hArr; BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon65_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon65_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$10 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$10 &hArr; BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon8" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon8</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> ((Set#Subset(V#13@0,AllVertices#8) &rArr; <FONT face="Arial Bold">true</FONT>) &and; ((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &rArr; <FONT face="Arial Bold">true</FONT>)) &and; (((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &and; Set#Subset(C#14@0,AllVertices#8)) &rArr; <FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((Set#Subset(V#13@0,AllVertices#8) &and; Set#Subset(Processed#16@0,AllVertices#8)) &and; Set#Subset(C#14@0,AllVertices#8)) &and; Set#Subset(N#15@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> V#13@0[source#6] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(V#13@0,Set#Union(Set#Union(Processed#16@0,C#14@0),N#15@0)) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon69_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon69_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$11 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value($Heap@0,this,nn#26@0) &le; BreadthFirstSearch.Value($Heap@0,this,dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;&le;alpha&ge; $o_$42 : ref, $f_$42 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; $_Frame@0[$o_$42,$f_$42] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.Value#2($Heap@0,this,nn#26@0) &le; BreadthFirstSearch.Value#2($Heap@0,this,dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@6) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Subset(BreadthFirstSearch.R#2($Heap@6,this,source#6,nn#26@0,AllVertices#8),BreadthFirstSearch.R#2($Heap@6,this,source#6,dd#18@1,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$43 : ref, $f_$43 : Field (alpha)  &bull; {$Heap@6[$o_$43,$f_$43]} ( ((&#172;($o_$43 = null)) &and; $Heap@0[$o_$43,alloc]) &rArr; ($Heap@6[$o_$43,$f_$43] = $Heap@0[$o_$43,$f_$43]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap@0,$Heap@6) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@8 = $Heap@6 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon69_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon69_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$11 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value($Heap@0,this,dd#18@1) &le; BreadthFirstSearch.Value($Heap@0,this,nn#26@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;&le;alpha&ge; $o_$44 : ref, $f_$44 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; $_Frame@0[$o_$44,$f_$44] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> Set#Equal(BreadthFirstSearch.R#2($Heap@0,this,source#6,dd#18@1,AllVertices#8),BreadthFirstSearch.R#2($Heap@0,this,source#6,#Nat.Suc(dd#18@1),AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.Value#2($Heap@0,this,dd#18@1) &le; BreadthFirstSearch.Value#2($Heap@0,this,nn#26@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@7) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(BreadthFirstSearch.R#2($Heap@7,this,source#6,dd#18@1,AllVertices#8),BreadthFirstSearch.R#2($Heap@7,this,source#6,nn#26@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$45 : ref, $f_$45 : Field (alpha)  &bull; {$Heap@7[$o_$45,$f_$45]} ( ((&#172;($o_$45 = null)) &and; $Heap@0[$o_$45,alloc]) &rArr; ($Heap@7[$o_$45,$f_$45] = $Heap@0[$o_$45,$f_$45]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap@0,$Heap@7) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@8 = $Heap@7 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon70_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon70_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$12 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  $i#35 : Integer &bull; {Seq#Index(p#27@0,$i#35)} ( ((0 &le; $i#35) &and; ($i#35 &le; Seq#Length(p#27@0))) &rArr; GenericAlloc(Seq#Index(p#27@0,$i#35),$Heap@0) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap@0,this,source#6,dest#7,p#27@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap@0,this,source#6,dest#7,p#27@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath($Heap@0,this,source#6,dest#7,p#27@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;&le;alpha&ge; $o_$46 : ref, $f_$46 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; $_Frame@0[$o_$46,$f_$46] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.IsPath#canCall($Heap@0,this,source#6,dest#7,p#27@0) &rArr; (BreadthFirstSearch.IsPath($Heap@0,this,source#6,dest#7,p#27@0) &or; (if (source#6 = dest#7) then Seq#Equal(p#27@0,Seq#Empty : Seq (BoxType) ) else (((&#172;Seq#Equal(p#27@0,Seq#Empty : Seq (BoxType) )) &and; BreadthFirstSearch.Succ($Heap@0,this,Seq#Index(p#27@0,Seq#Length(p#27@0) - 1))[dest#7]) &and; BreadthFirstSearch.IsPath($Heap@0,this,source#6,Seq#Index(p#27@0,Seq#Length(p#27@0) - 1),Seq#Take(p#27@0,Seq#Length(p#27@0) - 1))))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> AllVertices#8[source#6] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.IsClosed#canCall($Heap@0,this,AllVertices#8) &rArr; (BreadthFirstSearch.IsClosed($Heap@0,this,AllVertices#8) &or; ((&forall;  v#5_$4 : BoxType &bull; ( GenericAlloc(v#5_$4,$Heap@0) &rArr; (AllVertices#8[v#5_$4] &rArr; Set#Subset(BreadthFirstSearch.Succ($Heap@0,this,v#5_$4),AllVertices#8)) )))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@5) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#2($Heap@5,this,source#6,BreadthFirstSearch.ToNat#2($Heap@5,this,Seq#Length(p#27@0)),AllVertices#8)[dest#7] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$47 : ref, $f_$47 : Field (alpha)  &bull; {$Heap@5[$o_$47,$f_$47]} ( ((&#172;($o_$47 = null)) &and; $Heap@0[$o_$47,alloc]) &rArr; ($Heap@5[$o_$47,$f_$47] = $Heap@0[$o_$47,$f_$47]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap@0,$Heap@5) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> <FONT face="Arial Bold">false</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">false</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap@5,this,source#6,dest#7,p#184a) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap@5,this,source#6,dest#7,p#184a) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@3 = d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@9 = $Heap@5 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> path#10@0 = path#10 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon70_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon70_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$12 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  p#184 : Seq (BoxType)  &bull; ( (((&forall;  $i#36 : Integer &bull; {Seq#Index(p#184,$i#36)} ( ((0 &le; $i#36) &and; ($i#36 &le; Seq#Length(p#184))) &rArr; GenericAlloc(Seq#Index(p#184,$i#36),$Heap@0) ))) &and; BreadthFirstSearch.IsPath($Heap@0,this,source#6,dest#7,p#184)) &rArr; <FONT face="Arial Bold">false</FONT> )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@2 = (0 - 1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@3 = d#9@2 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@9 = $Heap@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> path#10@0 = path#10 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon64_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon64_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$13 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Seq#Length(p#23@0) &le; Seq#Length(pathToV#22@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> 0 &le; Seq#Length(p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> n#146@0 = Seq#Length(p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;&le;alpha&ge; $o_$48 : ref, $f_$48 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; $_Frame@0[$o_$48,$f_$48] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@3) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value#2($Heap@3,this,BreadthFirstSearch.ToNat#2($Heap@3,this,n#146@0)) = n#146@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$49 : ref, $f_$49 : Field (alpha)  &bull; {$Heap@3[$o_$49,$f_$49]} ( ((&#172;($o_$49 = null)) &and; $Heap@2[$o_$49,alloc]) &rArr; ($Heap@3[$o_$49,$f_$49] = $Heap@2[$o_$49,$f_$49]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap@2,$Heap@3) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> 0 &le; Seq#Length(p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> n#149@0 = Seq#Length(p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.ToNat#canCall($Heap@3,this,Seq#Length(p#23@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.ToNat#canCall($Heap@3,this,Seq#Length(p#23@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> mm#148@0 = BreadthFirstSearch.ToNat($Heap@3,this,Seq#Length(p#23@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> nn#150@0 = Nat.predecessor(dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;&le;alpha&ge; $o_$50 : ref, $f_$50 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; $_Frame@0[$o_$50,$f_$50] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.Value#2($Heap@3,this,mm#148@0) &le; BreadthFirstSearch.Value#2($Heap@3,this,nn#150@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@4) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Subset(BreadthFirstSearch.R#2($Heap@4,this,source#6,mm#148@0,AllVertices#8),BreadthFirstSearch.R#2($Heap@4,this,source#6,nn#150@0,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$51 : ref, $f_$51 : Field (alpha)  &bull; {$Heap@4[$o_$51,$f_$51]} ( ((&#172;($o_$51 = null)) &and; $Heap@3[$o_$51,alloc]) &rArr; ($Heap@4[$o_$51,$f_$51] = $Heap@3[$o_$51,$f_$51]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap@3,$Heap@4) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon64_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon64_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$13 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Seq#Length(pathToV#22@1) &le; Seq#Length(p#23@0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"GeneratedUnifiedExit" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">GeneratedUnifiedExit</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assert</FONT> (0 &le; d#9@3) &rArr; (BreadthFirstSearch.IsPath#canCall($Heap@9,this,source#6,dest#7,path#10@0) &rArr; (BreadthFirstSearch.IsPath($Heap@9,this,source#6,dest#7,path#10@0) &or; (if (source#6 = dest#7) then Seq#Equal(path#10@0,Seq#Empty : Seq (BoxType) ) else (((&#172;Seq#Equal(path#10@0,Seq#Empty : Seq (BoxType) )) &and; BreadthFirstSearch.Succ($Heap@9,this,Seq#Index(path#10@0,Seq#Length(path#10@0) - 1))[dest#7]) &and; BreadthFirstSearch.IsPath($Heap@9,this,source#6,Seq#Index(path#10@0,Seq#Length(path#10@0) - 1),Seq#Take(path#10@0,Seq#Length(path#10@0) - 1)))))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (0 &le; d#9@3) &rArr; (Seq#Length(path#10@0) = d#9@3) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (0 &le; d#9@3) &rArr; ((&forall;  p#11 : Seq (BoxType)  &bull; ( ((((&forall;  $i#4_$2 : Integer &bull; {Seq#Index(p#11,$i#4_$2)} ( ((0 &le; $i#4_$2) &and; ($i#4_$2 &le; Seq#Length(p#11))) &rArr; GenericAlloc(Seq#Index(p#11,$i#4_$2),$Heap@9) ))) &and; ((&forall;  p$ih#2#108 : Seq (BoxType)  &bull; ( ((&forall;  $i#3_$1 : Integer &bull; {Seq#Index(p$ih#2#108,$i#3_$1)} ( ((0 &le; $i#3_$1) &and; ($i#3_$1 &le; Seq#Length(p$ih#2#108))) &rArr; GenericAlloc(Seq#Index(p$ih#2#108,$i#3_$1),$Heap@9) ))) &rArr; ((Seq#Length(p$ih#2#108) &le; Seq#Length(p#11)) &rArr; (BreadthFirstSearch.IsPath($Heap@9,this,source#6,dest#7,p$ih#2#108) &rArr; (Seq#Length(path#10@0) &le; Seq#Length(p$ih#2#108)))) )))) &and; <FONT face="Arial Bold">true</FONT>) &rArr; (BreadthFirstSearch.IsPath#2($Heap@9,this,source#6,dest#7,p#11) &rArr; (Seq#Length(path#10@0) &le; Seq#Length(p#11))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (d#9@3 &le; 0) &rArr; (&#172;((&exist;  p#12 : Seq (BoxType)  &bull; ( ((((&forall;  $i#8_$0 : Integer &bull; {Seq#Index(p#12,$i#8_$0)} ( ((0 &le; $i#8_$0) &and; ($i#8_$0 &le; Seq#Length(p#12))) &rArr; GenericAlloc(Seq#Index(p#12,$i#8_$0),$Heap@9) ))) &and; ((&forall;  p$ih#6#109 : Seq (BoxType)  &bull; ( ((&forall;  $i#7 : Integer &bull; {Seq#Index(p$ih#6#109,$i#7)} ( ((0 &le; $i#7) &and; ($i#7 &le; Seq#Length(p$ih#6#109))) &rArr; GenericAlloc(Seq#Index(p$ih#6#109,$i#7),$Heap@9) ))) &rArr; ((Seq#Length(p$ih#6#109) &le; Seq#Length(p#12)) &rArr; (&#172;BreadthFirstSearch.IsPath($Heap@9,this,source#6,dest#7,p$ih#6#109))) )))) &and; <FONT face="Arial Bold">true</FONT>) &and; BreadthFirstSearch.IsPath#2($Heap@9,this,source#6,dest#7,p#12) )))) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon66_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon66_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$14 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$14 &hArr; (BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] &and; (&#172;V#13@0[w#156@1])) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] &and; (&#172;V#13@0[w#156@1]) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon66_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon66_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$14 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$14 &hArr; (BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] &and; (&#172;V#13@0[w#156@1])) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;(BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#156@1] &and; (&#172;V#13@0[w#156@1])) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon55_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon55_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$16 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$16 &hArr; Set#Disjoint(Processed#16@0,C#14@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Disjoint(Processed#16@0,C#14@0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon55_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon55_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$16 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$16 &hArr; Set#Disjoint(Processed#16@0,C#14@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;Set#Disjoint(Processed#16@0,C#14@0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon44" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon44</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@8,this,source#6,nn#26@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@8,this,source#6,nn#26@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> &#172;BreadthFirstSearch.R#2($Heap@8,this,source#6,nn#26@0,AllVertices#8)[dest#7] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">false</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@3 = d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@9 = $Heap@8 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> path#10@0 = path#10 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon28" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon28</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> Seq#Length(pathToV#22@1) &le; Seq#Length(p#23@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">false</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap,this,source#6,dest#7,p#152a) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.IsPath#canCall($Heap,this,source#6,dest#7,p#152a) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@3 = d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@9 = $Heap <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> path#10@0 = path#10 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon36" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon36</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  w#25_$0 : BoxType &bull; ( GenericAlloc(w#25_$0,$Heap@0) &rArr; (BreadthFirstSearch.Succ#canCall($Heap@0,this,v#21@1) &and; (BreadthFirstSearch.Succ($Heap@0,this,v#21@1)[w#25_$0] &rArr; <FONT face="Arial Bold">true</FONT>)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> newlyEncountered#24@1 = lambda#4(V#13@0,$Heap@0,this,v#21@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#28@1 = Set#Union(V#13@0,newlyEncountered#24@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#29@1 = Set#Union(N#15@0,newlyEncountered#24@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;&le;alpha&ge; $o_$52 : ref, $f_$52 : Field (alpha)  &bull; ( <FONT face="Arial Bold">false</FONT> &rArr; $_Frame@0[$o_$52,$f_$52] )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc(call8formal@newPaths#78@0,$Heap) &and; (DtType(call8formal@newPaths#78@0) = class.Map) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.ValidMap#2($Heap@0,this,source#6,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> Set#Disjoint(newlyEncountered#24@1,BreadthFirstSearch.Domain($Heap@0,this,paths#17@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> (&forall;  succ#79 : BoxType &bull; ( GenericAlloc(succ#79,$Heap@0) &rArr; (newlyEncountered#24@1[succ#79] &rArr; BreadthFirstSearch.IsPath#2($Heap@0,this,source#6,succ#79,Seq#Append(pathToV#22@1,Seq#Build(Seq#Empty : Seq (BoxType) ,v#21@1)))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $IsGoodHeap($Heap@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> DtAlloc(call8formal@newPaths#78@0,$Heap@1) &and; (DtType(call8formal@newPaths#78@0) = class.Map) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.ValidMap#2($Heap@1,this,source#6,call8formal@newPaths#78@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(BreadthFirstSearch.Domain($Heap@1,this,call8formal@newPaths#78@0),Set#Union(BreadthFirstSearch.Domain($Heap@1,this,paths#17@0),newlyEncountered#24@1)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#80 : BoxType &bull; ( GenericAlloc(x#80,$Heap@1) &rArr; (BreadthFirstSearch.Domain($Heap@1,this,paths#17@0)[x#80] &rArr; Seq#Equal(BreadthFirstSearch.Find#2($Heap@1,this,source#6,x#80,paths#17@0),BreadthFirstSearch.Find#2($Heap@1,this,source#6,x#80,call8formal@newPaths#78@0))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#81 : BoxType &bull; ( GenericAlloc(x#81,$Heap@1) &rArr; (newlyEncountered#24@1[x#81] &rArr; Seq#Equal(BreadthFirstSearch.Find#2($Heap@1,this,source#6,x#81,call8formal@newPaths#78@0),Seq#Append(pathToV#22@1,Seq#Build(Seq#Empty : Seq (BoxType) ,v#21@1)))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;&le;alpha&ge; $o_$53 : ref, $f_$53 : Field (alpha)  &bull; {$Heap@1[$o_$53,$f_$53]} ( ((&#172;($o_$53 = null)) &and; $Heap@0[$o_$53,alloc]) &rArr; ($Heap@1[$o_$53,$f_$53] = $Heap@0[$o_$53,$f_$53]) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $HeapSucc($Heap@0,$Heap@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon10" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon10</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> Set#Disjoint(Processed#16@0,C#14@0) &rArr; <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Disjoint(Processed#16@0,C#14@0) &and; Set#Disjoint(Set#Union(Processed#16@0,C#14@0),N#15@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.ValidMap#canCall($Heap@0,this,source#6,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.ValidMap#canCall($Heap@0,this,source#6,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.ValidMap($Heap@0,this,source#6,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Domain#canCall($Heap@0,this,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Domain#canCall($Heap@0,this,paths#17@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(V#13@0,BreadthFirstSearch.Domain($Heap@0,this,paths#17@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> GenericAlloc(x#113@0,$Heap@0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon67_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon67_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$17 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$17 &hArr; Set#Equal($rhs#19@1,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal($rhs#19@1,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#32@1 = Set#Empty : Set (BoxType)  <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#33@1 = (d#9@0 + 1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $rhs#34@1 = #Nat.Suc(dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> C#14@1 = $rhs#29@1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> N#15@1 = $rhs#32@1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@1 = $rhs#33@1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> dd#18@2 = $rhs#34@1 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon67_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon67_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$17 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$17 &hArr; Set#Equal($rhs#19@1,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;Set#Equal($rhs#19@1,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> C#14@1 = $rhs#19@1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> N#15@1 = $rhs#29@1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@1 = d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> dd#18@2 = dd#18@1 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon56_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon56_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$18 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$18 &hArr; C#14@0[x#113@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> C#14@0[x#113@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.ValidMap($Heap@0,this,source#6,paths#17@0) &and; BreadthFirstSearch.Domain($Heap@0,this,paths#17@0)[x#113@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,x#113@0,paths#17@0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon56_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon56_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$18 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$18 &hArr; C#14@0[x#113@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;C#14@0[x#113@0] <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon39" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon39</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assert</FONT> Set#Subset(Set#Difference(AllVertices#8,$rhs#20@1),$decr0$0@1) &and; (&#172;Set#Subset($decr0$0@1,Set#Difference(AllVertices#8,$rhs#20@1))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> ((Set#Subset($rhs#28@1,AllVertices#8) &rArr; <FONT face="Arial Bold">true</FONT>) &and; ((Set#Subset($rhs#28@1,AllVertices#8) &and; Set#Subset($rhs#20@1,AllVertices#8)) &rArr; <FONT face="Arial Bold">true</FONT>)) &and; (((Set#Subset($rhs#28@1,AllVertices#8) &and; Set#Subset($rhs#20@1,AllVertices#8)) &and; Set#Subset(C#14@1,AllVertices#8)) &rArr; <FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Disjoint($rhs#20@1,C#14@1) &rArr; <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.ValidMap#canCall($Heap@1,this,source#6,call8formal@newPaths#78@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Domain#canCall($Heap@1,this,call8formal@newPaths#78@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#19_$2 : BoxType &bull; ( GenericAlloc(x#19_$2,$Heap@1) &rArr; (C#14@1[x#19_$2] &rArr; BreadthFirstSearch.Find#canCall($Heap@1,this,source#6,x#19_$2,call8formal@newPaths#78@0)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#20_$2 : BoxType &bull; ( GenericAlloc(x#20_$2,$Heap@1) &rArr; (N#15@1[x#20_$2] &rArr; BreadthFirstSearch.Find#canCall($Heap@1,this,source#6,x#20_$2,call8formal@newPaths#78@0)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@1,this,source#6,dd#18@2,AllVertices#8) &and; (BreadthFirstSearch.R($Heap@1,this,source#6,dd#18@2,AllVertices#8)[dest#7] &rArr; <FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&#172;(d#9@1 = 0)) &rArr; BreadthFirstSearch.R#canCall($Heap@1,this,source#6,Nat.predecessor(dd#18@2),AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@1,this,source#6,dd#18@2,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Successors#canCall($Heap@1,this,$rhs#20@1,AllVertices#8) &and; BreadthFirstSearch.R#canCall($Heap@1,this,source#6,dd#18@2,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(C#14@1,Set#Empty : Set (BoxType) ) &rArr; <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value#canCall($Heap@1,this,dd#18@2) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset($rhs#28@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset($rhs#20@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset(C#14@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Subset(N#15@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; $rhs#28@1[source#6] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal($rhs#28@1,Set#Union(Set#Union($rhs#20@1,C#14@1),N#15@1)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Disjoint($rhs#20@1,C#14@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Disjoint(Set#Union($rhs#20@1,C#14@1),N#15@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; BreadthFirstSearch.ValidMap#2($Heap@1,this,source#6,call8formal@newPaths#78@0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal($rhs#28@1,BreadthFirstSearch.Domain($Heap@1,this,call8formal@newPaths#78@0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; ((&forall;  x#19_$3 : BoxType &bull; ( GenericAlloc(x#19_$3,$Heap@1) &rArr; (C#14@1[x#19_$3] &rArr; (Seq#Length(BreadthFirstSearch.Find#2($Heap@1,this,source#6,x#19_$3,call8formal@newPaths#78@0)) = d#9@1)) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; ((&forall;  x#20_$3 : BoxType &bull; ( GenericAlloc(x#20_$3,$Heap@1) &rArr; (N#15@1[x#20_$3] &rArr; (Seq#Length(BreadthFirstSearch.Find#2($Heap@1,this,source#6,x#20_$3,call8formal@newPaths#78@0)) = (d#9@1 + 1))) ))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; (BreadthFirstSearch.R($Heap@1,this,source#6,dd#18@2,AllVertices#8)[dest#7] &rArr; C#14@1[dest#7]) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; ((&#172;(d#9@1 = 0)) &rArr; (&#172;BreadthFirstSearch.R#2($Heap@1,this,source#6,Nat.predecessor(dd#18@2),AllVertices#8)[dest#7])) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal(Set#Union($rhs#20@1,C#14@1),BreadthFirstSearch.R#2($Heap@1,this,source#6,dd#18@2,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; Set#Equal(N#15@1,Set#Difference(BreadthFirstSearch.Successors($Heap@1,this,$rhs#20@1,AllVertices#8),BreadthFirstSearch.R#2($Heap@1,this,source#6,dd#18@2,AllVertices#8))) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; (Set#Equal(C#14@1,Set#Empty : Set (BoxType) ) &rArr; Set#Equal(N#15@1,Set#Empty : Set (BoxType) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> $w0@0 &rArr; (BreadthFirstSearch.Value#2($Heap@1,this,dd#18@2) = d#9@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">false</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@3 = d#9@1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@9 = $Heap@1 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> path#10@0 = path#10 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon12" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon12</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#19_$4 : BoxType &bull; ( GenericAlloc(x#19_$4,$Heap@0) &rArr; (C#14@0[x#19_$4] &rArr; BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,x#19_$4,paths#17@0)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#19_$5 : BoxType &bull; ( GenericAlloc(x#19_$5,$Heap@0) &rArr; (C#14@0[x#19_$5] &rArr; (Seq#Length(BreadthFirstSearch.Find($Heap@0,this,source#6,x#19_$5,paths#17@0)) = d#9@0)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> GenericAlloc(x#117@0,$Heap@0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon57_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon57_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$19 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$19 &hArr; N#15@0[x#117@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> N#15@0[x#117@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assert</FONT> BreadthFirstSearch.ValidMap($Heap@0,this,source#6,paths#17@0) &and; BreadthFirstSearch.Domain($Heap@0,this,paths#17@0)[x#117@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,x#117@0,paths#17@0) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon57_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon57_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$19 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$19 &hArr; N#15@0[x#117@0] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;N#15@0[x#117@0] <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon14" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon14</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#20_$4 : BoxType &bull; ( GenericAlloc(x#20_$4,$Heap@0) &rArr; (N#15@0[x#20_$4] &rArr; BreadthFirstSearch.Find#canCall($Heap@0,this,source#6,x#20_$4,paths#17@0)) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&forall;  x#20_$5 : BoxType &bull; ( GenericAlloc(x#20_$5,$Heap@0) &rArr; (N#15@0[x#20_$5] &rArr; (Seq#Length(BreadthFirstSearch.Find($Heap@0,this,source#6,x#20_$5,paths#17@0)) = (d#9@0 + 1))) )) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon58_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon58_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$20 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$20 &hArr; BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon58_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon58_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$20 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$20 &hArr; BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon16" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon16</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) &and; (BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] &rArr; <FONT face="Arial Bold">true</FONT>) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)[dest#7] &rArr; C#14@0[dest#7] <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon59_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon59_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$21 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$21 &hArr; (&#172;(d#9@0 = 0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;(d#9@0 = 0) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> nn#125@0 = Nat.predecessor(dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@0,this,source#6,Nat.predecessor(dd#18@1),AllVertices#8) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon59_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon59_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$21 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$21 &hArr; (&#172;(d#9@0 = 0)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@0 = 0 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon18" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon18</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> (&#172;(d#9@0 = 0)) &rArr; BreadthFirstSearch.R#canCall($Heap@0,this,source#6,Nat.predecessor(dd#18@1),AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> (&#172;(d#9@0 = 0)) &rArr; (&#172;BreadthFirstSearch.R($Heap@0,this,source#6,Nat.predecessor(dd#18@1),AllVertices#8)[dest#7]) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(Set#Union(Processed#16@0,C#14@0),BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8)) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Successors#canCall($Heap@0,this,Processed#16@0,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Successors#canCall($Heap@0,this,Processed#16@0,AllVertices#8) &and; BreadthFirstSearch.R#canCall($Heap@0,this,source#6,dd#18@1,AllVertices#8) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(N#15@0,Set#Difference(BreadthFirstSearch.Successors($Heap@0,this,Processed#16@0,AllVertices#8),BreadthFirstSearch.R($Heap@0,this,source#6,dd#18@1,AllVertices#8))) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon60_Then" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon60_Then</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$22 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$22 &hArr; Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon60_Else" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon60_Else</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> &#172;$@condition_$22 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $@condition_$22 &hArr; Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> &#172;Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"anon20" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">anon20</FONT>  <BR ALIGN="CENTER"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) &rArr; <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> Set#Equal(C#14@0,Set#Empty : Set (BoxType) ) &rArr; Set#Equal(N#15@0,Set#Empty : Set (BoxType) ) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value#canCall($Heap@0,this,dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value#canCall($Heap@0,this,dd#18@1) <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> BreadthFirstSearch.Value($Heap@0,this,dd#18@1) = d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">true</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> <FONT face="Arial Bold">false</FONT> <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> d#9@3 = d#9@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> $Heap@9 = $Heap@0 <BR ALIGN="LEFT"/>
		<FONT face="Arial Bold">assume</FONT> path#10@0 = path#10 <BR ALIGN="LEFT"/>
		</FONT>
	>];
	"$branchMerge_0" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">$branchMerge_0</FONT>  <BR ALIGN="CENTER"/>
		</FONT>
	>];
	"$branchMerge_1" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">$branchMerge_1</FONT>  <BR ALIGN="CENTER"/>
		</FONT>
	>];
	"$branchMerge_2" [ label=< 
		<FONT face="Arial Unicode MS">
		<FONT face="Arial Bold">$branchMerge_2</FONT>  <BR ALIGN="CENTER"/>
		</FONT>
	>];


"$start" -> "PreconditionGeneratedEntry" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"PreconditionGeneratedEntry" -> "anon0" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon0" -> "anon50_LoopHead" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon50_LoopHead" -> "anon50_LoopDone" [ label=<<FONT face="Arial Unicode MS">$@condition</FONT>>]; 
"anon50_LoopHead" -> "anon50_LoopBody" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition</FONT>>]; 
"anon50_LoopDone" -> "anon40" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon50_LoopBody" -> "anon51_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$0</FONT>>]; 
"anon50_LoopBody" -> "anon51_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$0</FONT>>]; 
"anon40" -> "anon68_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$8</FONT>>]; 
"anon40" -> "anon68_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$8</FONT>>]; 
"anon51_Then" -> "anon52_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$1</FONT>>]; 
"anon51_Then" -> "anon52_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$1</FONT>>]; 
"anon51_Else" -> "anon61_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$2</FONT>>]; 
"anon51_Else" -> "anon61_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$2</FONT>>]; 
"anon52_Then" -> "$branchMerge_0" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon52_Else" -> "$branchMerge_0" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon61_Then" -> "anon40" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon61_Else" -> "anon62_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$5</FONT>>]; 
"anon61_Else" -> "anon62_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$5</FONT>>]; 
"anon53_Then" -> "$branchMerge_1" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon53_Else" -> "$branchMerge_1" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon62_Then" -> "anon63_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$9</FONT>>]; 
"anon62_Then" -> "anon63_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$9</FONT>>]; 
"anon62_Else" -> "anon65_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$10</FONT>>]; 
"anon62_Else" -> "anon65_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$10</FONT>>]; 
"anon54_Then" -> "anon8" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon54_Else" -> "anon8" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon68_Then" -> "anon69_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$11</FONT>>]; 
"anon68_Then" -> "anon69_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$11</FONT>>]; 
"anon68_Else" -> "anon70_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$12</FONT>>]; 
"anon68_Else" -> "anon70_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$12</FONT>>]; 
"anon63_Then" -> "anon64_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$13</FONT>>]; 
"anon63_Then" -> "anon64_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$13</FONT>>]; 
"anon63_Else" -> "GeneratedUnifiedExit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon65_Then" -> "$branchMerge_2" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon65_Else" -> "$branchMerge_2" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon8" -> "anon55_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$16</FONT>>]; 
"anon8" -> "anon55_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$16</FONT>>]; 
"anon69_Then" -> "anon44" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon69_Else" -> "anon44" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon70_Then" -> "$exit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon70_Else" -> "GeneratedUnifiedExit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon64_Then" -> "anon28" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon64_Else" -> "anon28" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"GeneratedUnifiedExit" -> "$exit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon66_Then" -> "anon36" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon66_Else" -> "anon36" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon55_Then" -> "anon10" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon55_Else" -> "anon10" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon44" -> "$exit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon28" -> "$exit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon36" -> "anon67_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$17</FONT>>]; 
"anon36" -> "anon67_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$17</FONT>>]; 
"anon10" -> "anon56_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$18</FONT>>]; 
"anon10" -> "anon56_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$18</FONT>>]; 
"anon67_Then" -> "anon39" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon67_Else" -> "anon39" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon56_Then" -> "anon12" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon56_Else" -> "anon12" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon39" -> "$exit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon12" -> "anon57_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$19</FONT>>]; 
"anon12" -> "anon57_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$19</FONT>>]; 
"anon57_Then" -> "anon14" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon57_Else" -> "anon14" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon14" -> "anon58_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$20</FONT>>]; 
"anon14" -> "anon58_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$20</FONT>>]; 
"anon58_Then" -> "anon16" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon58_Else" -> "anon16" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon16" -> "anon59_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$21</FONT>>]; 
"anon16" -> "anon59_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$21</FONT>>]; 
"anon59_Then" -> "anon18" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon59_Else" -> "anon18" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon18" -> "anon60_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$22</FONT>>]; 
"anon18" -> "anon60_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$22</FONT>>]; 
"anon60_Then" -> "anon20" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon60_Else" -> "anon20" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"anon20" -> "$exit" [ label=<<FONT face="Arial Unicode MS"><FONT face="Arial Bold">true</FONT></FONT>>]; 
"$branchMerge_0" -> "anon53_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$3</FONT>>]; 
"$branchMerge_0" -> "anon53_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$3</FONT>>]; 
"$branchMerge_1" -> "anon54_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$6</FONT>>]; 
"$branchMerge_1" -> "anon54_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$6</FONT>>]; 
"$branchMerge_2" -> "anon66_Then" [ label=<<FONT face="Arial Unicode MS">$@condition_$14</FONT>>]; 
"$branchMerge_2" -> "anon66_Else" [ label=<<FONT face="Arial Unicode MS">&#172;$@condition_$14</FONT>>]; 

}
