// Dafny program verifier version 1.9.7.30401, Copyright (c) 2003-2016, Microsoft.
// Command Line Options: /trace /traceTimes /print:AVLTree.1.bpl /proverLog:@PROC@.boogie.smt2 AVLTree.dfy

const $$Language$Dafny: bool;

axiom $$Language$Dafny;

type Ty;

const unique TBool: Ty;

const unique TChar: Ty;

const unique TInt: Ty;

const unique TNat: Ty;

const unique TReal: Ty;

function TSet(Ty) : Ty;

function TISet(Ty) : Ty;

function TMultiSet(Ty) : Ty;

function TSeq(Ty) : Ty;

function TMap(Ty, Ty) : Ty;

function TIMap(Ty, Ty) : Ty;

function Inv0_TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

function Inv0_TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

function Inv0_TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

function Inv0_TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

function Inv0_TMap(Ty) : Ty;

function Inv1_TMap(Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

function Inv0_TIMap(Ty) : Ty;

function Inv1_TIMap(Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

type TyTag;

function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagNat: TyTag;

const unique TagReal: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

axiom Tag(TBool) == TagBool;

axiom Tag(TChar) == TagChar;

axiom Tag(TInt) == TagInt;

axiom Tag(TNat) == TagNat;

axiom Tag(TReal) == TagReal;

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

function {:identity} LitInt(x: int) : int;

axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

function {:identity} LitReal(x: real) : real;

axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

function {:identity} Lit<T>(x: T) : T;

axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

type char;

function char#FromInt(int) : char;

function char#ToInt(char) : int;

axiom (forall ch: char :: { char#ToInt(ch) } char#FromInt(char#ToInt(ch)) == ch);

axiom (forall n: int :: 
  { char#FromInt(n) } 
  0 <= n && n < 65536 ==> char#ToInt(char#FromInt(n)) == n);

type ref;

const null: ref;

const unique NoTraitAtAll: ClassName;

function TraitParent(ClassName) : ClassName;

type Box;

const $ArbitraryBoxValue: Box;

function $Box<T>(T) : Box;

function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TNat) } 
  $IsBox(bx, TNat) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TNat));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set Box) == bx && $Is($Unbox(bx): Set Box, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet Box) == bx && $Is($Unbox(bx): ISet Box, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet Box) == bx
       && $Is($Unbox(bx): MultiSet Box, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq Box) == bx && $Is($Unbox(bx): Seq Box, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map Box Box) == bx && $Is($Unbox(bx): Map Box Box, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap Box Box) == bx
       && $Is($Unbox(bx): IMap Box Box, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

function $Is<T>(T, Ty) : bool;

function $IsAlloc<T>(T, Ty, Heap) : bool;

function $IsBox<T>(T, Ty) : bool;

function $IsAllocBox<T>(T, Ty, Heap) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: int :: { $Is(v, TNat) } $Is(v, TNat) <==> v >= 0);

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TNat, h) } $IsAlloc(v, TNat, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall v: Set Box, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: ISet Box, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq Box, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Set Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx] ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx]
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

function Tclass._System.object() : Ty;

function dtype(ref) : Ty;

function TypeTuple(a: ClassName, b: ClassName) : ClassName;

function TypeTupleCar(ClassName) : ClassName;

function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

function SetRef_to_SetBox(s: [ref]bool) : Set Box;

axiom (forall s: [ref]bool, bx: Box :: 
  { SetRef_to_SetBox(s)[bx] } 
  SetRef_to_SetBox(s)[bx] == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object())));

type DatatypeType;

type DtCtorId;

function DatatypeCtorId(DatatypeType) : DtCtorId;

function DtRank(DatatypeType) : int;

function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

function $LS(LayerType) : LayerType;

function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field _;

function FDim<T>(Field T) : int;

function IndexField(int) : Field Box;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

function IndexField_Inverse<T>(Field T) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

function MultiIndexField(Field Box, int) : Field Box;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

function MultiIndexField_Inverse0<T>(Field T) : Field T;

function MultiIndexField_Inverse1<T>(Field T) : int;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

function DeclType<T>(Field T) : ClassName;

type NameFamily;

function DeclName<T>(Field T) : NameFamily;

function FieldOfDecl<alpha>(ClassName, NameFamily) : Field alpha;

axiom (forall<T> cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field T } 
  DeclType(FieldOfDecl(cl, nm): Field T) == cl
     && DeclName(FieldOfDecl(cl, nm): Field T) == nm);

function $IsGhostField<T>(Field T) : bool;

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field bool;

axiom FDim(alloc) == 0 && !$IsGhostField(alloc);

function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: 0 <= _System.array.Length(o));

function Int(x: real) : int;

axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));

function Real(x: int) : real;

axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

function {:inline true} _System.real.Trunc(x: real) : int
{
  Int(x)
}

type Heap = <alpha>[ref,Field alpha]alpha;

function {:inline true} read<alpha>(H: Heap, r: ref, f: Field alpha) : alpha
{
  H[r, f]
}

function {:inline true} update<alpha>(H: Heap, r: ref, f: Field alpha, v: alpha) : Heap
{
  H[r, f := v]
}

function $IsGoodHeap(Heap) : bool;

function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

function $HeapSucc(Heap, Heap) : bool;

axiom (forall<alpha> h: Heap, r: ref, f: Field alpha, x: alpha :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: { read(k, o, alloc) } read(h, o, alloc) ==> read(k, o, alloc)));

function $HeapSuccGhost(Heap, Heap) : bool;

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall<alpha> o: ref, f: Field alpha :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

type TickType;

var $Tick: TickType;

procedure $YieldHavoc(this: ref, rds: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> 
    $o == this || rds[$Box($o)] || nw[$Box($o)]
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set Box, modi: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> 
    rds[$Box($o)] && !modi[$Box($o)] && $o != this
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || $o == this
       || modi[$Box($o)]
       || nw[$Box($o)]);
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field (Set Box))
   returns (s: Set Box);
  ensures (forall bx: Box :: 
  { s[bx] } 
  s[bx]
     <==> read(newHeap, this, NW)[bx]
       || (
        $Unbox(bx) != null
         && !read(prevHeap, $Unbox(bx): ref, alloc)
         && read(newHeap, $Unbox(bx): ref, alloc)));



type Set T = [T]bool;

function Set#Card<T>(Set T) : int;

axiom (forall<T> s: Set T :: { Set#Card(s) } 0 <= Set#Card(s));

function Set#Empty<T>() : Set T;

axiom (forall<T> o: T :: { Set#Empty()[o] } !Set#Empty()[o]);

axiom (forall<T> s: Set T :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0 ==> (exists x: T :: s[x])));

function Set#Singleton<T>(T) : Set T;

axiom (forall<T> r: T :: { Set#Singleton(r) } Set#Singleton(r)[r]);

axiom (forall<T> r: T, o: T :: 
  { Set#Singleton(r)[o] } 
  Set#Singleton(r)[o] <==> r == o);

axiom (forall<T> r: T :: 
  { Set#Card(Set#Singleton(r)) } 
  Set#Card(Set#Singleton(r)) == 1);

function Set#UnionOne<T>(Set T, T) : Set T;

axiom (forall<T> a: Set T, x: T, o: T :: 
  { Set#UnionOne(a, x)[o] } 
  Set#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: Set T, x: T :: { Set#UnionOne(a, x) } Set#UnionOne(a, x)[x]);

axiom (forall<T> a: Set T, x: T, y: T :: 
  { Set#UnionOne(a, x), a[y] } 
  a[y] ==> Set#UnionOne(a, x)[y]);

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

function Set#Union<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Union(a, b)[o] } 
  Set#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), a[y] } 
  a[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), b[y] } 
  b[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

function Set#Intersection<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Intersection(a, b)[o] } 
  Set#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

function Set#Difference<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Difference(a, b)[o] } 
  Set#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Difference(a, b), b[y] } 
  b[y] ==> !Set#Difference(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

function Set#Subset<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function Set#Equal<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: Set T, b: Set T :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

function Set#Disjoint<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

type ISet T = [T]bool;

function ISet#Empty<T>() : Set T;

axiom (forall<T> o: T :: { ISet#Empty()[o] } !ISet#Empty()[o]);

function ISet#UnionOne<T>(ISet T, T) : ISet T;

axiom (forall<T> a: ISet T, x: T, o: T :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: ISet T, x: T :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall<T> a: ISet T, x: T, y: T :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

function ISet#Union<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

function ISet#Intersection<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

function ISet#Difference<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

function ISet#Subset<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function ISet#Equal<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) ==> a == b);

function ISet#Disjoint<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet T = [T]int;

function $IsGoodMultiSet<T>(ms: MultiSet T) : bool;

axiom (forall<T> ms: MultiSet T :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: T :: { ms[bx] } 0 <= ms[bx] && ms[bx] <= MultiSet#Card(ms)));

function MultiSet#Card<T>(MultiSet T) : int;

axiom (forall<T> s: MultiSet T :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall<T> s: MultiSet T, x: T, n: int :: 
  { MultiSet#Card(s[x := n]) } 
  0 <= n ==> MultiSet#Card(s[x := n]) == MultiSet#Card(s) - s[x] + n);

function MultiSet#Empty<T>() : MultiSet T;

axiom (forall<T> o: T :: { MultiSet#Empty()[o] } MultiSet#Empty()[o] == 0);

axiom (forall<T> s: MultiSet T :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0 ==> (exists x: T :: 0 < s[x])));

function MultiSet#Singleton<T>(T) : MultiSet T;

axiom (forall<T> r: T, o: T :: 
  { MultiSet#Singleton(r)[o] } 
  (MultiSet#Singleton(r)[o] == 1 <==> r == o)
     && (MultiSet#Singleton(r)[o] == 0 <==> r != o));

axiom (forall<T> r: T :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

function MultiSet#UnionOne<T>(MultiSet T, T) : MultiSet T;

axiom (forall<T> a: MultiSet T, x: T, o: T :: 
  { MultiSet#UnionOne(a, x)[o] } 
  0 < MultiSet#UnionOne(a, x)[o] <==> o == x || 0 < a[o]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#UnionOne(a, x)[x] == a[x] + 1);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  0 < a[y] ==> 0 < MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  x != y ==> a[y] == MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

function MultiSet#Union<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Union(a, b)[o] } 
  MultiSet#Union(a, b)[o] == a[o] + b[o]);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

function MultiSet#Intersection<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Intersection(a, b)[o] } 
  MultiSet#Intersection(a, b)[o] == Math#min(a[o], b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

function MultiSet#Difference<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Difference(a, b)[o] } 
  MultiSet#Difference(a, b)[o] == Math#clip(a[o] - b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T, y: T :: 
  { MultiSet#Difference(a, b), b[y], a[y] } 
  a[y] <= b[y] ==> MultiSet#Difference(a, b)[y] == 0);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

function MultiSet#Subset<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <= b[o]));

function MultiSet#Equal<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] == b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

function MultiSet#Disjoint<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: T :: { a[o] } { b[o] } a[o] == 0 || b[o] == 0));

function MultiSet#FromSet<T>(Set T) : MultiSet T;

axiom (forall<T> s: Set T, a: T :: 
  { MultiSet#FromSet(s)[a] } 
  (MultiSet#FromSet(s)[a] == 0 <==> !s[a])
     && (MultiSet#FromSet(s)[a] == 1 <==> s[a]));

axiom (forall<T> s: Set T :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

function MultiSet#FromSeq<T>(Seq T) : MultiSet T;

axiom (forall<T> s: Seq T :: 
  { MultiSet#FromSeq(s) } 
  $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall<T> s: Seq T :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall<T> s: Seq T, v: T :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall<T>  :: 
  MultiSet#FromSeq(Seq#Empty(): Seq T) == MultiSet#Empty(): MultiSet T);

axiom (forall<T> a: Seq T, b: Seq T :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall<T> s: Seq T, i: int, v: T, x: T :: 
  { MultiSet#FromSeq(Seq#Update(s, i, v))[x] } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#FromSeq(Seq#Update(s, i, v))[x]
       == MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
        MultiSet#Singleton(v))[x]);

axiom (forall<T> s: Seq T, x: T :: 
  { MultiSet#FromSeq(s)[x] } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#FromSeq(s)[x]);

type Seq _;

function Seq#Length<T>(Seq T) : int;

axiom (forall<T> s: Seq T :: { Seq#Length(s) } 0 <= Seq#Length(s));

function Seq#Empty<T>() : Seq T;

axiom (forall<T>  :: Seq#Length(Seq#Empty(): Seq T) == 0);

axiom (forall<T> s: Seq T :: 
  { Seq#Length(s) } 
  Seq#Length(s) == 0 ==> s == Seq#Empty());

axiom (forall<T> t: Ty :: { $Is(Seq#Empty(): Seq T, t) } $Is(Seq#Empty(): Seq T, t));

function Seq#Singleton<T>(T) : Seq T;

axiom (forall<T> t: T :: 
  { Seq#Length(Seq#Singleton(t)) } 
  Seq#Length(Seq#Singleton(t)) == 1);

function Seq#Build<T>(s: Seq T, val: T) : Seq T;

axiom (forall<T> s: Seq T, v: T :: 
  { Seq#Length(Seq#Build(s, v)) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s: Seq Box, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

function Seq#Append<T>(Seq T, Seq T) : Seq T;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

axiom (forall s0: Seq Box, s1: Seq Box, t: Ty :: 
  { $Is(Seq#Append(s0, s1), t) } 
  $Is(s0, t) && $Is(s1, t) ==> $Is(Seq#Append(s0, s1), t));

function Seq#Index<T>(Seq T, int) : T;

axiom (forall<T> t: T :: 
  { Seq#Index(Seq#Singleton(t), 0) } 
  Seq#Index(Seq#Singleton(t), 0) == t);

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

function Seq#Update<T>(Seq T, int, T) : Seq T;

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

function Seq#Contains<T>(Seq T, T) : bool;

axiom (forall<T> s: Seq T, x: T :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> x: T :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall<T> s0: Seq T, s1: Seq T, x: T :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall<T> s: Seq T, v: T, x: T :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

function Seq#Equal<T>(Seq T, Seq T) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall<T> a: Seq T, b: Seq T :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

function Seq#SameUntil<T>(Seq T, Seq T, int) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

function Seq#Take<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

function Seq#Drop<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall<T> s: Seq T, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall<T> s: Seq T, t: Seq T :: 
  { Seq#Append(s, t) } 
  Seq#Take(Seq#Append(s, t), Seq#Length(s)) == s
     && Seq#Drop(Seq#Append(s, t), Seq#Length(s)) == t);

function Seq#FromArray(h: Heap, a: ref) : Seq Box;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq Box, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $HeapSucc(h0, h1)
       && (forall i: int :: 
        0 <= i && i < _System.array.Length(a)
           ==> read(h0, a, IndexField(i)) == read(h1, a, IndexField(i)))
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field Box)));

axiom (forall<T> s: Seq T, v: T, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

function Seq#Rank<T>(Seq T) : int;

axiom (forall s: Seq Box, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Drop(s, n) } 
  n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall<T> s: Seq T, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

type Map _ _;

function Map#Domain<U,V>(Map U V) : [U]bool;

function Map#Elements<U,V>(Map U V) : [U]V;

function Map#Card<U,V>(Map U V) : int;

axiom (forall<U,V> m: Map U V :: { Map#Card(m) } 0 <= Map#Card(m));

function Map#Empty<U,V>() : Map U V;

axiom (forall<U,V> u: U :: 
  { Map#Domain(Map#Empty(): Map U V)[u] } 
  !Map#Domain(Map#Empty(): Map U V)[u]);

axiom (forall<U,V> m: Map U V :: 
  { Map#Card(m) } 
  (Map#Card(m) == 0 <==> m == Map#Empty())
     && (Map#Card(m) != 0 ==> (exists x: U :: Map#Domain(m)[x])));

function Map#Glue<U,V>([U]bool, [U]V, Ty) : Map U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { $Is(Map#Glue(a, b, t), t) } 
  $Is(Map#Glue(a, b, t), t));

function Map#Build<U,V>(Map U V, U, V) : Map U V;

axiom (forall<U,V> m: Map U V, u: U, u': U, v: V :: 
  { Map#Domain(Map#Build(m, u, v))[u'] } { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Map#Domain(Map#Build(m, u, v))[u'] && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Map#Domain(Map#Build(m, u, v))[u'] == Map#Domain(m)[u']
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

function Map#Equal<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: U :: Map#Domain(m)[u] == Map#Domain(m')[u])
       && (forall u: U :: Map#Domain(m)[u] ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m') ==> m == m');

function Map#Disjoint<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: U :: 
      { Map#Domain(m)[o] } { Map#Domain(m')[o] } 
      !Map#Domain(m)[o] || !Map#Domain(m')[o]));

type IMap _ _;

function IMap#Domain<U,V>(IMap U V) : [U]bool;

function IMap#Elements<U,V>(IMap U V) : [U]V;

function IMap#Empty<U,V>() : IMap U V;

axiom (forall<U,V> u: U :: 
  { IMap#Domain(IMap#Empty(): IMap U V)[u] } 
  !IMap#Domain(IMap#Empty(): IMap U V)[u]);

function IMap#Glue<U,V>([U]bool, [U]V, Ty) : IMap U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { $Is(IMap#Glue(a, b, t), t) } 
  $Is(IMap#Glue(a, b, t), t));

function IMap#Build<U,V>(IMap U V, U, V) : IMap U V;

axiom (forall<U,V> m: IMap U V, u: U, u': U, v: V :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

function IMap#Equal<U,V>(IMap U V, IMap U V) : bool;

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: U :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: U :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

function INTERNAL_add_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);

function INTERNAL_sub_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);

function INTERNAL_mul_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);

function INTERNAL_div_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);

function INTERNAL_mod_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);

function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));

function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));

function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));

function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));

const unique class._System.object: ClassName;

// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object;

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// object: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object()) } 
  $Is($o, Tclass._System.object()));

// object: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object(), $h) } 
  $IsAlloc($o, Tclass._System.object(), $h) <==> $o == null || read($h, $o, alloc));

const unique class._System.array: ClassName;

function Tclass._System.array(Ty) : Ty;

// Tclass._System.array Tag
axiom (forall #$arg: Ty :: 
  { Tclass._System.array(#$arg) } 
  Tag(Tclass._System.array(#$arg)) == Tagclass._System.array);

const unique Tagclass._System.array: TyTag;

// Tclass._System.array injectivity 0
axiom (forall #$arg: Ty :: 
  { Tclass._System.array(#$arg) } 
  Tclass._System.array_0(Tclass._System.array(#$arg)) == #$arg);

function Tclass._System.array_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.array
axiom (forall #$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(#$arg)) } 
  $IsBox(bx, Tclass._System.array(#$arg))
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.array(#$arg)));

// array.: Allocation axiom
axiom (forall #$arg: Ty, $i0: int, $h: Heap, $o: ref :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array(#$arg) } 
  $IsGoodHeap($h)
       && $o != null
       && dtype($o) == Tclass._System.array(#$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), #$arg)
       && (read($h, $o, alloc) ==> $IsAllocBox(read($h, $o, IndexField($i0)), #$arg, $h)));

// array: Class $Is
axiom (forall #$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array(#$arg)) } 
  $Is($o, Tclass._System.array(#$arg))
     <==> $o == null || dtype($o) == Tclass._System.array(#$arg));

// array: Class $IsAlloc
axiom (forall #$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array(#$arg), $h) } 
  $IsAlloc($o, Tclass._System.array(#$arg), $h)
     <==> $o == null || read($h, $o, alloc));

// array.Length: Allocation axiom
axiom (forall #$arg: Ty, $h: Heap, $o: ref :: 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._System.array(#$arg)
     ==> $Is(_System.array.Length($o), TInt)
       && (read($h, $o, alloc) ==> $IsAlloc(_System.array.Length($o), TInt, $h)));

function Tclass._System.___hFunc0(Ty) : Ty;

// Tclass._System.___hFunc0 Tag
axiom (forall #$T0: Ty :: 
  { Tclass._System.___hFunc0(#$T0) } 
  Tag(Tclass._System.___hFunc0(#$T0)) == Tagclass._System.___hFunc0);

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$T0: Ty :: 
  { Tclass._System.___hFunc0(#$T0) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$T0)) == #$T0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$T0: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$T0)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$T0))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$T0)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set Box) : HandleType;

function Apply0(Ty, HandleType, Heap) : Box;

function Requires0(Ty, HandleType, Heap) : bool;

function Reads0(Ty, HandleType, Heap) : Set Box;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Apply0(t0, Handle0(h, r, rd), heap) } 
  Apply0(t0, Handle0(h, r, rd), heap) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Requires0(t0, Handle0(h, r, rd), heap) } 
  r[heap] ==> Requires0(t0, Handle0(h, r, rd), heap));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box, bx: Box :: 
  { Reads0(t0, Handle0(h, r, rd), heap)[bx] } 
  Reads0(t0, Handle0(h, r, rd), heap)[bx] == rd[heap][bx]);

function {:inline true} _System.___hFunc0.requires(t0: Ty, heap: Heap, f: HandleType) : bool
{
  Requires0(t0, f, heap)
}

function {:inline true} _System.___hFunc0.requires#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline true} _System.___hFunc0.reads(t0: Ty, heap: Heap, f: HandleType) : Set Box
{
  Reads0(t0, f, heap)
}

function {:inline true} _System.___hFunc0.reads#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, f, h0)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, f, h0) == Reads0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, f, h1)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, f, h0) == Reads0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, f, h0)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, f, h0) == Requires0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, f, h1)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, f, h0) == Requires0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, f, h0)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, f, h0) == Apply0(t0, f, h1));

axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, f, h1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $Is(f, Tclass._System.___hFunc0(t0))
       && $IsAlloc(f, Tclass._System.___hFunc0(t0), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, f, h1)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, f, h0) == Apply0(t0, f, h1));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, f, h) } 
      $IsGoodHeap(h) && Requires0(t0, f, h) ==> $IsBox(Apply0(t0, f, h), t0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, f, h)
         ==> (forall r: ref :: 
            { Reads0(t0, f, h)[$Box(r)] } 
            r != null && Reads0(t0, f, h)[$Box(r)] ==> read(h, r, alloc))
           && $IsAllocBox(Apply0(t0, f, h), t0, h)));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$T1) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$T1)) == Tagclass._System.___hFunc1);

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$T1) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$T1)) == #$T0);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$T1) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$T1)) == #$T1);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$T1)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$T1))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$T1)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set Box) : HandleType;

function Apply1(Ty, Ty, HandleType, Heap, Box) : Box;

function Requires1(Ty, Ty, HandleType, Heap, Box) : bool;

function Reads1(Ty, Ty, HandleType, Heap, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Apply1(t0, t1, Handle1(h, r, rd), heap, bx0) } 
  Apply1(t0, t1, Handle1(h, r, rd), heap, bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Requires1(t0, t1, Handle1(h, r, rd), heap, bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, Handle1(h, r, rd), heap, bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box, 
    bx: Box :: 
  { Reads1(t0, t1, Handle1(h, r, rd), heap, bx0)[bx] } 
  Reads1(t0, t1, Handle1(h, r, rd), heap, bx0)[bx] == rd[heap, bx0][bx]);

function {:inline true} _System.___hFunc1.requires(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  Requires1(t0, t1, f, heap, bx0)
}

function {:inline true} _System.___hFunc1.requires#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline true} _System.___hFunc1.reads(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : Set Box
{
  Reads1(t0, t1, f, heap, bx0)
}

function {:inline true} _System.___hFunc1.reads#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, f, h0, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, f, h0, bx0) == Reads1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, f, h1, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, f, h0, bx0) == Reads1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, f, h0, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, f, h0, bx0) == Requires1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, f, h1, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, f, h0, bx0) == Requires1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, f, h0, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, f, h0, bx0) == Apply1(t0, t1, f, h1, bx0));

axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, f, h1, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $Is(f, Tclass._System.___hFunc1(t0, t1))
       && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, f, h1, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, f, h0, bx0) == Apply1(t0, t1, f, h1, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, f, h, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, f, h, bx0)
         ==> $IsBox(Apply1(t0, t1, f, h, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, f, h, bx0) } { Reads1(t0, t1, f, h, bx0) } 
        $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, f, h, bx0)
           ==> (forall r: ref :: 
              { Reads1(t0, t1, f, h, bx0)[$Box(r)] } 
              r != null && Reads1(t0, t1, f, h, bx0)[$Box(r)] ==> read(h, r, alloc))
             && $IsAllocBox(Apply1(t0, t1, f, h, bx0), t1, h))));

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$T2) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$T2)) == Tagclass._System.___hFunc2);

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$T2) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$T2)) == #$T0);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$T2) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$T2)) == #$T1);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$T2) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$T2)) == #$T2);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$T2)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$T2))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$T2)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set Box) : HandleType;

function Apply2(Ty, Ty, Ty, HandleType, Heap, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, HandleType, Heap, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, HandleType, Heap, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, Handle2(h, r, rd), heap, bx0, bx1) } 
  Apply2(t0, t1, t2, Handle2(h, r, rd), heap, bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, Handle2(h, r, rd), heap, bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, Handle2(h, r, rd), heap, bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Reads2(t0, t1, t2, Handle2(h, r, rd), heap, bx0, bx1)[bx] } 
  Reads2(t0, t1, t2, Handle2(h, r, rd), heap, bx0, bx1)[bx]
     == rd[heap, bx0, bx1][bx]);

function {:inline true} _System.___hFunc2.requires(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  Requires2(t0, t1, t2, f, heap, bx0, bx1)
}

function {:inline true} _System.___hFunc2.requires#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline true} _System.___hFunc2.reads(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : Set Box
{
  Reads2(t0, t1, t2, f, heap, bx0, bx1)
}

function {:inline true} _System.___hFunc2.reads#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, f, h1, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, f, h0, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, f, h0, bx0, bx1) == Reads2(t0, t1, t2, f, h1, bx0, bx1));

axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, f, h1, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, f, h1, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, f, h0, bx0, bx1) == Reads2(t0, t1, t2, f, h1, bx0, bx1));

axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, f, h1, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, f, h0, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, f, h0, bx0, bx1) == Requires2(t0, t1, t2, f, h1, bx0, bx1));

axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, f, h1, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, f, h1, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, f, h0, bx0, bx1) == Requires2(t0, t1, t2, f, h1, bx0, bx1));

axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, f, h1, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, f, h0, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, f, h0, bx0, bx1) == Apply2(t0, t1, t2, f, h1, bx0, bx1));

axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, f, h1, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsAllocBox(bx0, t0, h0)
       && 
      $IsBox(bx1, t1)
       && $IsAllocBox(bx1, t1, h0)
       && 
      $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h0)
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, f, h1, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, f, h0, bx0, bx1) == Apply2(t0, t1, t2, f, h1, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, f, h, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, f, h, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, f, h, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, f, h, bx0, bx1) } { Reads2(t0, t1, t2, f, h, bx0, bx1) } 
        $IsAllocBox(bx0, t0, h)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, f, h, bx0, bx1)
           ==> (forall r: ref :: 
              { Reads2(t0, t1, t2, f, h, bx0, bx1)[$Box(r)] } 
              r != null && Reads2(t0, t1, t2, f, h, bx0, bx1)[$Box(r)] ==> read(h, r, alloc))
             && $IsAllocBox(Apply2(t0, t1, t2, f, h, bx0, bx1), t2, h))));

const unique class._module.AVLTree: ClassName;

function Tclass._module.AVLTree() : Ty;

// Tclass._module.AVLTree Tag
axiom Tag(Tclass._module.AVLTree()) == Tagclass._module.AVLTree;

const unique Tagclass._module.AVLTree: TyTag;

// Box/unbox axiom for Tclass._module.AVLTree
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.AVLTree()) } 
  $IsBox(bx, Tclass._module.AVLTree())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.AVLTree()));

// AVLTree: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.AVLTree()) } 
  $Is($o, Tclass._module.AVLTree())
     <==> $o == null || dtype($o) == Tclass._module.AVLTree());

// AVLTree: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.AVLTree(), $h) } 
  $IsAlloc($o, Tclass._module.AVLTree(), $h)
     <==> $o == null || read($h, $o, alloc));

axiom FDim(_module.AVLTree.root) == 0
   && FieldOfDecl(class._module.AVLTree, field$root) == _module.AVLTree.root
   && !$IsGhostField(_module.AVLTree.root);

const _module.AVLTree.root: Field ref;

function Tclass._module.Node() : Ty;

// Tclass._module.Node Tag
axiom Tag(Tclass._module.Node()) == Tagclass._module.Node;

const unique Tagclass._module.Node: TyTag;

// Box/unbox axiom for Tclass._module.Node
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Node()) } 
  $IsBox(bx, Tclass._module.Node())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Node()));

// AVLTree.root: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.AVLTree.root) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.AVLTree()
     ==> $Is(read($h, $o, _module.AVLTree.root), Tclass._module.Node())
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.AVLTree.root), Tclass._module.Node(), $h)));

axiom FDim(_module.AVLTree.Contents) == 0
   && FieldOfDecl(class._module.AVLTree, field$Contents) == _module.AVLTree.Contents
   && $IsGhostField(_module.AVLTree.Contents);

const _module.AVLTree.Contents: Field (Set Box);

// AVLTree.Contents: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.AVLTree.Contents) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.AVLTree()
     ==> $Is(read($h, $o, _module.AVLTree.Contents), TSet(TInt))
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.AVLTree.Contents), TSet(TInt), $h)));

axiom FDim(_module.AVLTree.Repr) == 0
   && FieldOfDecl(class._module.AVLTree, field$Repr) == _module.AVLTree.Repr
   && $IsGhostField(_module.AVLTree.Repr);

const _module.AVLTree.Repr: Field (Set Box);

// AVLTree.Repr: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.AVLTree.Repr) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.AVLTree()
     ==> $Is(read($h, $o, _module.AVLTree.Repr), TSet(Tclass._module.Node()))
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.AVLTree.Repr), TSet(Tclass._module.Node()), $h)));

procedure CheckWellformed$$_module.AVLTree.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    v#0: int);
  free requires 0 == $ModuleContextHeight && 7 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.AVLTree.Init(this: ref, v#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: Init, CheckWellformed$$_module.AVLTree.Init
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume {:captureState "AVLTree.dfy(7,10): initial state"} true;
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    assume {:captureState "AVLTree.dfy(9,19): post-state"} true;
    assume _module.AVLTree.Valid#canCall($Heap, this);
    assume _module.AVLTree.Valid($Heap, this);
}



axiom FDim(_module.Node.Repr) == 0
   && FieldOfDecl(class._module.Node, field$Repr) == _module.Node.Repr
   && $IsGhostField(_module.Node.Repr);

axiom FDim(_module.Node.Contents) == 0
   && FieldOfDecl(class._module.Node, field$Contents) == _module.Node.Contents
   && $IsGhostField(_module.Node.Contents);

axiom FDim(_module.Node.left) == 0
   && FieldOfDecl(class._module.Node, field$left) == _module.Node.left
   && !$IsGhostField(_module.Node.left);

axiom FDim(_module.Node.right) == 0
   && FieldOfDecl(class._module.Node, field$right) == _module.Node.right
   && !$IsGhostField(_module.Node.right);

axiom FDim(_module.Node.value) == 0
   && FieldOfDecl(class._module.Node, field$value) == _module.Node.value
   && !$IsGhostField(_module.Node.value);

axiom FDim(_module.Node.balance) == 0
   && FieldOfDecl(class._module.Node, field$balance) == _module.Node.balance
   && !$IsGhostField(_module.Node.balance);

procedure InterModuleCall$$_module.AVLTree.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    v#0: int);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.AVLTree.Valid#canCall($Heap, this);
  free ensures _module.AVLTree.Valid#canCall($Heap, this)
   && 
  _module.AVLTree.Valid($Heap, this)
   && 
  read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.AVLTree.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    v#0: int);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.AVLTree.Valid#canCall($Heap, this);
  free ensures _module.AVLTree.Valid#canCall($Heap, this)
   && 
  _module.AVLTree.Valid($Heap, this)
   && 
  read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.AVLTree.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    v#0: int)
   returns ($_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 7 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.AVLTree.Valid#canCall($Heap, this);
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.root) != null;
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))];
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> !read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(null)]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
             && read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.AVLTree.root))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Repr)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Repr)
                 else Set#Empty(): Set Box)))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Contents)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Contents)
                 else Set#Empty(): Set Box)))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> (forall i#4: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#4)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#4)]
               ==> i#4 < read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> (forall i#5: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#5)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#5)]
               ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value) < i#5)));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
             == _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))
               - _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0 - 1)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(1)));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.AVLTree.Init(this: ref, v#0: int) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs#0: ref
   where $Is($rhs#0, Tclass._module.Node())
     && $IsAlloc($rhs#0, Tclass._module.Node(), $Heap);
  var $nw: ref;
  var v##0: int;
  var $rhs#1: Set Box
   where $Is($rhs#1, TSet(TInt)) && $IsAlloc($rhs#1, TSet(TInt), $Heap);
  var $rhs#2: Set Box
   where $Is($rhs#2, TSet(Tclass._module.Node()))
     && $IsAlloc($rhs#2, TSet(Tclass._module.Node()), $Heap);

    // AddMethodImpl: Init, Impl$$_module.AVLTree.Init
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume {:captureState "AVLTree.dfy(10,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(11,12)
    assume true;
    assert $_Frame[this, _module.AVLTree.root];
    havoc $nw;
    assume $nw != null && !read($Heap, $nw, alloc) && dtype($nw) == Tclass._module.Node();
    $Heap := update($Heap, $nw, alloc, true);
    assume $IsGoodHeap($Heap);
    $rhs#0 := $nw;
    $Heap := update($Heap, this, _module.AVLTree.root, $rhs#0);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(11,23)"} true;
    // ----- call statement ----- AVLTree.dfy(12,16)
    // TrCallStmt: Before ProcessCallStmt
    assert read($Heap, this, _module.AVLTree.root) != null;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    v##0 := v#0;
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && $o == read($Heap, this, _module.AVLTree.root)
     ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.Init(read($Heap, this, _module.AVLTree.root), v##0);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(12,19)"} true;
    // ----- assignment statement ----- AVLTree.dfy(13,21)
    assume true;
    assert $_Frame[this, _module.AVLTree.Contents];
    assert read($Heap, this, _module.AVLTree.root) != null;
    assume true;
    assert true;
    $rhs#1 := read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents);
    $Heap := update($Heap, this, _module.AVLTree.Contents, $rhs#1);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(13,37)"} true;
    // ----- assignment statement ----- AVLTree.dfy(14,17)
    assume true;
    assert $_Frame[this, _module.AVLTree.Repr];
    assert read($Heap, this, _module.AVLTree.root) != null;
    assume true;
    assert true;
    $rhs#2 := read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr);
    $Heap := update($Heap, this, _module.AVLTree.Repr, $rhs#2);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(14,29)"} true;
}



// function declaration for _module.AVLTree.Valid
function _module.AVLTree.Valid($heap: Heap, this: ref) : bool;

function _module.AVLTree.Valid#canCall($heap: Heap, this: ref) : bool;

// frame axiom for _module.AVLTree.Valid
axiom (forall $h0: Heap, $h1: Heap, this: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.AVLTree.Valid($h1, this) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AVLTree())
       && $IsAlloc(this, Tclass._module.AVLTree(), $h0)
       && 
      $Is(this, Tclass._module.AVLTree())
       && $IsAlloc(this, Tclass._module.AVLTree(), $h1)
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == this || read($h0, this, _module.AVLTree.Repr)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.AVLTree.Valid($h0, this) == _module.AVLTree.Valid($h1, this));

// consequence axiom for _module.AVLTree.Valid
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 5 <= $FunctionContextHeight)
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.AVLTree.Valid($Heap, this) } 
    _module.AVLTree.Valid#canCall($Heap, this)
         || ((0 != $ModuleContextHeight || 5 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AVLTree())
           && $IsAlloc(this, Tclass._module.AVLTree(), $Heap))
       ==> true);

function _module.AVLTree.Valid#requires(Heap, ref) : bool;

axiom (forall $Heap: Heap, this: ref :: 
  { _module.AVLTree.Valid#requires($Heap, this) } 
  $IsGoodHeap($Heap)
       && 
      this != null
       && 
      $Is(this, Tclass._module.AVLTree())
       && $IsAlloc(this, Tclass._module.AVLTree(), $Heap)
     ==> _module.AVLTree.Valid#requires($Heap, this) == true);

// definition axiom for _module.AVLTree.Valid (intra-module)
axiom 0 == $ModuleContextHeight && 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.AVLTree.Valid($Heap, this) } 
    _module.AVLTree.Valid#canCall($Heap, this)
         || (5 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AVLTree())
           && $IsAlloc(this, Tclass._module.AVLTree(), $Heap))
       ==> (read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
           ==> _module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
         && (read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
             && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
           ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
         && (read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
             && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
             && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
           ==> _module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
         && _module.AVLTree.Valid($Heap, this)
           == (
            read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
             && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
             && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
             && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))));

// definition axiom for _module.AVLTree.Valid (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $Heap: Heap, this: ref :: 
    { _module.AVLTree.Valid($Heap, this) } 
    _module.AVLTree.Valid#canCall($Heap, this)
         || ($IsGoodHeap($Heap)
           && 
          this != null
           && 
          $Is(this, Tclass._module.AVLTree())
           && $IsAlloc(this, Tclass._module.AVLTree(), $Heap))
       ==> (read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
           ==> _module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
         && (read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
             && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
           ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
         && (read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
             && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
             && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
           ==> _module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
         && _module.AVLTree.Valid($Heap, this)
           == (
            read($Heap, this, _module.AVLTree.root) != null
             && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
             && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
             && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
             && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
             && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
             && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))));

procedure CheckWellformed$$_module.AVLTree.Valid(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap));
  free requires 0 == $ModuleContextHeight && 5 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.AVLTree.Valid(this: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;

    // AddWellformednessCheck for function Valid
    assume {:captureState "AVLTree.dfy(16,12): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.AVLTree.Repr)[$Box($o)]);
    b$reqreads#0 := $_Frame[this, _module.AVLTree.Repr];
    assert b$reqreads#0;
    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.AVLTree.Repr)[$Box($o)]);
        b$reqreads#1 := $_Frame[this, _module.AVLTree.root];
        if (read($Heap, this, _module.AVLTree.root) != null)
        {
            b$reqreads#2 := $_Frame[this, _module.AVLTree.root];
            b$reqreads#3 := $_Frame[this, _module.AVLTree.Repr];
        }

        if (read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))])
        {
            b$reqreads#4 := $_Frame[this, _module.AVLTree.Repr];
            b$reqreads#5 := $_Frame[this, _module.AVLTree.root];
            assert read($Heap, this, _module.AVLTree.root) != null;
            b$reqreads#6 := $_Frame[read($Heap, this, _module.AVLTree.root), _module.Node.Repr];
        }

        if (read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)))
        {
            b$reqreads#7 := $_Frame[this, _module.AVLTree.Contents];
            b$reqreads#8 := $_Frame[this, _module.AVLTree.root];
            assert read($Heap, this, _module.AVLTree.root) != null;
            b$reqreads#9 := $_Frame[read($Heap, this, _module.AVLTree.root), _module.Node.Contents];
        }

        if (read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents)))
        {
            b$reqreads#10 := $_Frame[this, _module.AVLTree.root];
            assert true;
            ##n#0 := read($Heap, this, _module.AVLTree.root);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
            b$reqreads#11 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#0 || read($Heap, ##n#0, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
            assume _module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root));
        }

        if (read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root)))
        {
            b$reqreads#12 := $_Frame[this, _module.AVLTree.root];
            assert true;
            ##n#1 := read($Heap, this, _module.AVLTree.root);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
            assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
            b$reqreads#13 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#1 || read($Heap, ##n#1, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
            assume _module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root));
        }

        if (read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root)))
        {
            b$reqreads#14 := $_Frame[this, _module.AVLTree.root];
            assert true;
            ##n#2 := read($Heap, this, _module.AVLTree.root);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
            assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> read($Heap, ##n#2, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
            assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
            assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
            assume _module.Node.Valid($LS($LZ), $Heap, ##n#2)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2);
            b$reqreads#15 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#2 || read($Heap, ##n#2, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
            assume _module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root));
        }

        assert true;
        assume _module.AVLTree.Valid($Heap, this)
   == (
    read($Heap, this, _module.AVLTree.root) != null
     && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
     && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
     && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
     && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
     && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
     && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root)));
        assume (read($Heap, this, _module.AVLTree.root) != null
       && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
       && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
        read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
       && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
        read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
     ==> _module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
   && (read($Heap, this, _module.AVLTree.root) != null
       && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
       && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
        read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
       && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
        read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
     ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root)))
   && (read($Heap, this, _module.AVLTree.root) != null
       && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
       && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
        read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
       && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
        read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
       && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
     ==> _module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root)));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.AVLTree.Valid($Heap, this), TBool, $Heap);
        assume $Is(_module.AVLTree.Valid($Heap, this), TBool);
        assert b$reqreads#1;
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
        assert b$reqreads#10;
        assert b$reqreads#11;
        assert b$reqreads#12;
        assert b$reqreads#13;
        assert b$reqreads#14;
        assert b$reqreads#15;
    }
}



procedure CheckWellformed$$_module.AVLTree.Find(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int)
   returns (b#0: bool);
  free requires 0 == $ModuleContextHeight && 8 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.AVLTree.Find(this: ref, key#0: int) returns (b#0: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: Find, CheckWellformed$$_module.AVLTree.Find
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "AVLTree.dfy(25,10): initial state"} true;
    assume _module.AVLTree.Valid#canCall($Heap, this);
    assume _module.AVLTree.Valid($Heap, this);
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
    assume $HeapSucc(old($Heap), $Heap);
    havoc b#0;
    assume {:captureState "AVLTree.dfy(27,30): post-state"} true;
    assume read($Heap, this, _module.AVLTree.Contents)[$Box(key#0)] <==> b#0;
}



procedure InterModuleCall$$_module.AVLTree.Find(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int)
   returns (b#0: bool);
  // user-defined preconditions
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.root) != null;
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))];
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> !read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(null)]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
             && read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.AVLTree.root))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Repr)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Repr)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Contents)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Contents)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> (forall i#0: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#0)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#0)]
               ==> i#0 < read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> (forall i#1: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#1)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#1)]
               ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value) < i#1)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
             == _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))
               - _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0 - 1)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(1)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.AVLTree.Contents)[$Box(key#0)] <==> b#0;
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.AVLTree.Find(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int)
   returns (b#0: bool);
  // user-defined preconditions
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.root) != null;
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))];
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> !read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(null)]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
             && read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.AVLTree.root))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Repr)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Repr)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Contents)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Contents)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> (forall i#2: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#2)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#2)]
               ==> i#2 < read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> (forall i#3: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#3)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#3)]
               ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value) < i#3)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
             == _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))
               - _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0 - 1)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(1)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.AVLTree.Contents)[$Box(key#0)] <==> b#0;
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.AVLTree.Find(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int)
   returns (b#0: bool, $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _module.AVLTree.Valid#canCall($Heap, this)
   && 
  _module.AVLTree.Valid($Heap, this)
   && 
  read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures read($Heap, this, _module.AVLTree.Contents)[$Box(key#0)] <==> b#0;
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.AVLTree.Find(this: ref, key#0: int) returns (b#0: bool, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var t#0: ref
   where $Is(t#0, Tclass._module.Node()) && $IsAlloc(t#0, Tclass._module.Node(), $Heap);
  var $PreLoopHeap$loop#0: Heap;
  var $decr_init$loop#00: Set Box;
  var $w$loop#0: bool;
  var ##n#0: ref;
  var $decr$loop#00: Set Box;

    // AddMethodImpl: Find, Impl$$_module.AVLTree.Find
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "AVLTree.dfy(28,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(29,13)
    assume true;
    assume true;
    assert true;
    t#0 := read($Heap, this, _module.AVLTree.root);
    assume {:captureState "AVLTree.dfy(29,20)"} true;
    // ----- while statement ----- AVLTree.dfy(30,7)
    // Assume Fuel Constant
    $PreLoopHeap$loop#0 := $Heap;
    $decr_init$loop#00 := read($Heap, t#0, _module.Node.Repr);
    havoc $w$loop#0;
    while (true)
      free invariant $w$loop#0 ==> t#0 != null ==> _module.Node.Valid#canCall($Heap, t#0);
      invariant $w$loop#0 ==> t#0 != null;
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> read($Heap, t#0, _module.Node.Repr)[$Box(t#0)]);
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> !read($Heap, t#0, _module.Node.Repr)[$Box(null)]);
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(t#0)]);
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(t#0)]);
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
         && read($Heap, t#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.value))), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, t#0, _module.Node.value)));
      invariant $w$loop#0
   ==> 
  _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, t#0, _module.Node.value) < i#7));
      free invariant $w$loop#0
   ==> _module.Node.Valid#canCall($Heap, t#0)
     && 
    _module.Node.Valid($LS($LZ), $Heap, t#0)
     && (t#0 != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(t#0)]
         && !read($Heap, t#0, _module.Node.Repr)[$Box(null)]
         && (read($Heap, t#0, _module.Node.left) != null
           ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]
             && !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(t#0)]
             && Set#Subset(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
              read($Heap, t#0, _module.Node.Repr)))
         && (read($Heap, t#0, _module.Node.right) != null
           ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]
             && !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(t#0)]
             && Set#Subset(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
              read($Heap, t#0, _module.Node.Repr)))
         && 
        _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
         && _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
         && (read($Heap, t#0, _module.Node.right) != null
             && read($Heap, t#0, _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)))
         && Set#Equal(read($Heap, t#0, _module.Node.Repr), 
          Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
              (if read($Heap, t#0, _module.Node.left) != null
                 then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
                 else Set#Empty(): Set Box)), 
            (if read($Heap, t#0, _module.Node.right) != null
               then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
               else Set#Empty(): Set Box)))
         && Set#Equal(read($Heap, t#0, _module.Node.Contents), 
          Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.value))), 
              (if read($Heap, t#0, _module.Node.left) != null
                 then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)
                 else Set#Empty(): Set Box)), 
            (if read($Heap, t#0, _module.Node.right) != null
               then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)
               else Set#Empty(): Set Box)))
         && (read($Heap, t#0, _module.Node.left) != null
           ==> (forall i#6: int :: 
            { read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
            true
               ==> 
              read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
               ==> i#6 < read($Heap, t#0, _module.Node.value)))
         && (read($Heap, t#0, _module.Node.right) != null
           ==> (forall i#7: int :: 
            { read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
            true
               ==> 
              read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
               ==> read($Heap, t#0, _module.Node.value) < i#7)));
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
   ==> !(read($Heap, this, _module.AVLTree.Contents)[$Box(key#0)]
     && !read($Heap, t#0, _module.Node.Contents)[$Box(key#0)]);
      free invariant $w$loop#0 ==> true;
      invariant $w$loop#0
   ==> Set#Subset(read($Heap, t#0, _module.Node.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f));
      free invariant $HeapSucc($PreLoopHeap$loop#0, $Heap);
      free invariant (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read($PreLoopHeap$loop#0, $o, alloc)
     ==> read($Heap, $o, $f) == read($PreLoopHeap$loop#0, $o, $f) || $_Frame[$o, $f]);
      free invariant Set#Subset(read($Heap, t#0, _module.Node.Repr), $decr_init$loop#00)
   && (Set#Equal(read($Heap, t#0, _module.Node.Repr), $decr_init$loop#00) ==> true);
    {
        assume {:captureState "AVLTree.dfy(30,11): after some loop iterations"} true;
        if (!$w$loop#0)
        {
            if (t#0 != null)
            {
                assert true;
                ##n#0 := t#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
                assume _module.Node.Valid#canCall($Heap, t#0);
            }

            assume t#0 != null ==> _module.Node.Valid#canCall($Heap, t#0);
            assume t#0 != null && _module.Node.Valid($LS($LZ), $Heap, t#0);
            assert {:subsumption 0} t#0 != null;
            assume true;
            assume !(read($Heap, this, _module.AVLTree.Contents)[$Box(key#0)]
   && !read($Heap, t#0, _module.Node.Contents)[$Box(key#0)]);
            assert {:subsumption 0} t#0 != null;
            assert {:subsumption 0} read($Heap, this, _module.AVLTree.root) != null;
            assume true;
            assume Set#Subset(read($Heap, t#0, _module.Node.Contents), 
  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
            assert t#0 != null;
            assume true;
            assume false;
        }

        assume true;
        if (!Lit(true))
        {
            break;
        }

        $decr$loop#00 := read($Heap, t#0, _module.Node.Repr);
        // ----- if statement ----- AVLTree.dfy(36,10)
        assert t#0 != null;
        assume true;
        if (read($Heap, t#0, _module.Node.value) == key#0)
        {
            // ----- assert statement ----- AVLTree.dfy(38,13)
            assert {:subsumption 0} t#0 != null;
            assert {:subsumption 0} t#0 != null;
            assume true;
            assert read($Heap, t#0, _module.Node.Contents)[$Box(read($Heap, t#0, _module.Node.value))];
            // ----- assignment statement ----- AVLTree.dfy(39,15)
            assume true;
            assume true;
            assert true;
            b#0 := Lit(true);
            assume {:captureState "AVLTree.dfy(39,22)"} true;
            // ----- return statement ----- AVLTree.dfy(40,13)
            return;
        }
        else
        {
            // ----- if statement ----- AVLTree.dfy(42,15)
            assert t#0 != null;
            assume true;
            if (read($Heap, t#0, _module.Node.value) < key#0)
            {
                // ----- assignment statement ----- AVLTree.dfy(44,15)
                assume true;
                assert t#0 != null;
                assume true;
                assert true;
                t#0 := read($Heap, t#0, _module.Node.right);
                assume {:captureState "AVLTree.dfy(44,25)"} true;
            }
            else
            {
                // ----- assignment statement ----- AVLTree.dfy(48,15)
                assume true;
                assert t#0 != null;
                assume true;
                assert true;
                t#0 := read($Heap, t#0, _module.Node.left);
                assume {:captureState "AVLTree.dfy(48,24)"} true;
            }
        }

        // ----- if statement ----- AVLTree.dfy(50,10)
        assume true;
        if (t#0 == null)
        {
            // ----- assignment statement ----- AVLTree.dfy(52,15)
            assume true;
            assume true;
            assert true;
            b#0 := Lit(false);
            assume {:captureState "AVLTree.dfy(52,23)"} true;
            // ----- return statement ----- AVLTree.dfy(53,13)
            return;
        }
        else
        {
        }

        // ----- loop termination check ----- AVLTree.dfy(30,7)
        assert Set#Subset(read($Heap, t#0, _module.Node.Repr), $decr$loop#00)
   && !Set#Subset($decr$loop#00, read($Heap, t#0, _module.Node.Repr));
        assume t#0 != null ==> _module.Node.Valid#canCall($Heap, t#0);
        assume true;
        assume true;
    }
}



procedure CheckWellformed$$_module.AVLTree.Insert(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int);
  free requires 0 == $ModuleContextHeight && 15 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.AVLTree.Insert(this: ref, key#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: Insert, CheckWellformed$$_module.AVLTree.Insert
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.AVLTree.Repr)[$Box($o)]);
    assume {:captureState "AVLTree.dfy(57,10): initial state"} true;
    assume _module.AVLTree.Valid#canCall($Heap, this);
    assume _module.AVLTree.Valid($Heap, this);
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == this
       || read(old($Heap), this, _module.AVLTree.Repr)[$Box($o)]);
    assume $HeapSucc(old($Heap), $Heap);
    assume {:captureState "AVLTree.dfy(60,23): post-state"} true;
    assume Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
  Set#Union(read(old($Heap), this, _module.AVLTree.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
    assume _module.AVLTree.Valid#canCall($Heap, this);
    assume _module.AVLTree.Valid($Heap, this);
}



procedure InterModuleCall$$_module.AVLTree.Insert(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int);
  // user-defined preconditions
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.root) != null;
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))];
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> !read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(null)]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
             && read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.AVLTree.root))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Repr)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Repr)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Contents)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Contents)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> (forall i#0: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#0)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#0)]
               ==> i#0 < read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> (forall i#1: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#1)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#1)]
               ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value) < i#1)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
             == _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))
               - _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0 - 1)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(1)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
  Set#Union(read(old($Heap), this, _module.AVLTree.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
  free ensures _module.AVLTree.Valid#canCall($Heap, this);
  free ensures _module.AVLTree.Valid#canCall($Heap, this)
   && 
  _module.AVLTree.Valid($Heap, this)
   && 
  read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == this
       || read(old($Heap), this, _module.AVLTree.Repr)[$Box($o)]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.AVLTree.Insert(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int);
  // user-defined preconditions
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.root) != null;
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))];
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> !read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(null)]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
             && read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.AVLTree.root))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Repr)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Repr)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Contents)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Contents)
                 else Set#Empty(): Set Box)))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> (forall i#4: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#4)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#4)]
               ==> i#4 < read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> (forall i#5: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#5)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#5)]
               ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value) < i#5)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
             == _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))
               - _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0 - 1)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(1)));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  requires _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
  Set#Union(read(old($Heap), this, _module.AVLTree.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
  free ensures _module.AVLTree.Valid#canCall($Heap, this);
  free ensures _module.AVLTree.Valid#canCall($Heap, this)
   && 
  _module.AVLTree.Valid($Heap, this)
   && 
  read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == this
       || read(old($Heap), this, _module.AVLTree.Repr)[$Box($o)]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.AVLTree.Insert(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    key#0: int)
   returns ($_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _module.AVLTree.Valid#canCall($Heap, this)
   && 
  _module.AVLTree.Valid($Heap, this)
   && 
  read($Heap, this, _module.AVLTree.root) != null
   && read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]
   && Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))
   && Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
   && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
  Set#Union(read(old($Heap), this, _module.AVLTree.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
  free ensures _module.AVLTree.Valid#canCall($Heap, this);
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.root) != null;
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || read($Heap, this, _module.AVLTree.Repr)[$Box(read($Heap, this, _module.AVLTree.root))];
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Repr), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || Set#Equal(read($Heap, this, _module.AVLTree.Contents), 
      read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> !read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(null)]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr)[$Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> !read($Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
            _module.Node.Repr)[$Box(read($Heap, this, _module.AVLTree.root))]));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> Set#Subset(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr), 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Valid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
             && read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
              _module.Node.Repr), 
            read($Heap, 
              read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
              _module.Node.Repr))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.AVLTree.root))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Repr)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Repr)
                 else Set#Empty(): Set Box)))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> Set#Equal(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents), 
            Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))), 
                (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
                   then read($Heap, 
                    read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                    _module.Node.Contents)
                   else Set#Empty(): Set Box)), 
              (if read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
                 then read($Heap, 
                  read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                  _module.Node.Contents)
                 else Set#Empty(): Set Box)))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> (forall i#10: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#10)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left), 
                _module.Node.Contents)[$Box(i#10)]
               ==> i#10 < read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Valid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> (forall i#11: int :: 
            { read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#11)] } 
            true
               ==> 
              read($Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right), 
                _module.Node.Contents)[$Box(i#11)]
               ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.value) < i#11)));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
             == _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))
               - _module.Node.Height($LS($LS($LZ)), 
                $Heap, 
                read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.BalanceValid#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> 
          read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right) != null
           ==> _module.Node.BalanceValid($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0 - 1)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(0)
             || read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.balance)
               == LitInt(1)));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.right))));
  ensures _module.AVLTree.Valid#canCall($Heap, this)
   ==> _module.AVLTree.Valid($Heap, this)
     || (_module.Node.Balanced#canCall($Heap, read($Heap, this, _module.AVLTree.root))
       ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.AVLTree.root))
         || (read($Heap, this, _module.AVLTree.root) != null
           ==> _module.Node.Balanced($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.left))));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == this
       || read(old($Heap), this, _module.AVLTree.Repr)[$Box($o)]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.AVLTree.Insert(this: ref, key#0: int) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var dummy#0: int;
  var $obj0: ref;
  var $rhs##0: ref
   where $Is($rhs##0, Tclass._module.Node())
     && $IsAlloc($rhs##0, Tclass._module.Node(), $Heap);
  var $rhs##1: int;
  var t##0: ref;
  var key##0: int;
  var $rhs#0: Set Box
   where $Is($rhs#0, TSet(TInt)) && $IsAlloc($rhs#0, TSet(TInt), $Heap);
  var $rhs#1: Set Box
   where $Is($rhs#1, TSet(Tclass._module.Node()))
     && $IsAlloc($rhs#1, TSet(Tclass._module.Node()), $Heap);

    // AddMethodImpl: Insert, Impl$$_module.AVLTree.Insert
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == this || read($Heap, this, _module.AVLTree.Repr)[$Box($o)]);
    assume {:captureState "AVLTree.dfy(62,4): initial state"} true;
    $_reverifyPost := false;
    // ----- call statement ----- AVLTree.dfy(64,37)
    assume true;
    $obj0 := this;
    assert $_Frame[$obj0, _module.AVLTree.root];
    assume true;
    // TrCallStmt: Adding lhs Microsoft.Dafny.MemberSelectExpr with type Node
    // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type int
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    t##0 := read($Heap, this, _module.AVLTree.root);
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    key##0 := key#0;
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && read($Heap, t##0, _module.Node.Repr)[$Box($o)]
     ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call $rhs##0, $rhs##1 := IntraModuleCall$$_module.AVLTree.InsertRecursion(this, t##0, key##0);
    // TrCallStmt: After ProcessCallStmt
    // TrCallStmt: Checking bRhs $rhs##0 to have type Node
    assert true;
    $Heap := update($Heap, $obj0, _module.AVLTree.root, $rhs##0);
    assume $IsGoodHeap($Heap);
    // TrCallStmt: Checking bRhs $rhs##1 to have type int
    assert true;
    dummy#0 := $rhs##1;
    assume {:captureState "AVLTree.dfy(64,48)"} true;
    // ----- assignment statement ----- AVLTree.dfy(65,16)
    assume true;
    assert $_Frame[this, _module.AVLTree.Contents];
    assert read($Heap, this, _module.AVLTree.root) != null;
    assume true;
    assert true;
    $rhs#0 := read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Contents);
    $Heap := update($Heap, this, _module.AVLTree.Contents, $rhs#0);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(65,32)"} true;
    // ----- assignment statement ----- AVLTree.dfy(66,12)
    assume true;
    assert $_Frame[this, _module.AVLTree.Repr];
    assert read($Heap, this, _module.AVLTree.root) != null;
    assume true;
    assert true;
    $rhs#1 := read($Heap, read($Heap, this, _module.AVLTree.root), _module.Node.Repr);
    $Heap := update($Heap, this, _module.AVLTree.Repr, $rhs#1);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(66,24)"} true;
}



procedure CheckWellformed$$_module.AVLTree.InsertRecursion(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    t#0: ref
       where $Is(t#0, Tclass._module.Node()) && $IsAlloc(t#0, Tclass._module.Node(), $Heap), 
    key#0: int)
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    deltaH#0: int);
  free requires 0 == $ModuleContextHeight && 14 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.AVLTree.InsertRecursion(this: ref, t#0: ref, key#0: int) returns (r#0: ref, deltaH#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##n#3: ref;
  var ##n#4: ref;
  var ##n#5: ref;
  var ##n#6: ref;
  var ##n#7: ref;

    // AddMethodImpl: InsertRecursion, CheckWellformed$$_module.AVLTree.InsertRecursion
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> read($Heap, t#0, _module.Node.Repr)[$Box($o)]);
    assume {:captureState "AVLTree.dfy(68,10): initial state"} true;
    assert true;
    ##n#0 := t#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, t#0);
    assume _module.Node.Valid($LS($LZ), $Heap, t#0);
    assert true;
    ##n#1 := t#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
    assume _module.Node.BalanceValid#canCall($Heap, t#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, t#0);
    assert true;
    ##n#2 := t#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> read($Heap, ##n#2, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#2)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2);
    assume _module.Node.Balanced#canCall($Heap, t#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, t#0);
    assert t#0 != null;
    if (t#0 != null)
    {
        assert t#0 != null;
    }
    else
    {
    }

    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]);
    assume $HeapSucc(old($Heap), $Heap);
    havoc r#0, deltaH#0;
    assume {:captureState "AVLTree.dfy(74,24): post-state"} true;
    assume r#0 != null;
    if (t#0 != null)
    {
        assert t#0 != null;
    }

    if (!(t#0 != null && read(old($Heap), t#0, _module.Node.Repr)[$Box(r#0)]))
    {
    }

    assume (t#0 != null && read(old($Heap), t#0, _module.Node.Repr)[$Box(r#0)])
   || (r#0 != null && !read(old($Heap), r#0, alloc));
    if (*)
    {
        assume t#0 != null;
        assert r#0 != null;
        assert t#0 != null;
        assume (forall $o: ref :: 
  { read(old($Heap), $o, alloc) } 
  $o != null
       && 
      read($Heap, r#0, _module.Node.Repr)[$Box($o)]
       && !read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]
     ==> !read(old($Heap), $o, alloc));
        assert r#0 != null;
        assert t#0 != null;
        assume Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  Set#Union(read(old($Heap), t#0, _module.Node.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
    }
    else
    {
        assume t#0 != null
   ==> (forall $o: ref :: 
      { read(old($Heap), $o, alloc) } 
      $o != null
           && 
          read($Heap, r#0, _module.Node.Repr)[$Box($o)]
           && !read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]
         ==> !read(old($Heap), $o, alloc))
     && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
      Set#Union(read(old($Heap), t#0, _module.Node.Contents), 
        Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
    }

    if (*)
    {
        assume t#0 == null;
        assert r#0 != null;
        assume (forall $o: ref :: 
  { read(old($Heap), $o, alloc) } 
  $o != null && read($Heap, r#0, _module.Node.Repr)[$Box($o)]
     ==> !read(old($Heap), $o, alloc));
        assert r#0 != null;
        assume Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(key#0)));
    }
    else
    {
        assume t#0 == null
   ==> (forall $o: ref :: 
      { read(old($Heap), $o, alloc) } 
      $o != null && read($Heap, r#0, _module.Node.Repr)[$Box($o)]
         ==> !read(old($Heap), $o, alloc))
     && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(key#0)));
    }

    assert true;
    ##n#3 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, r#0);
    assume _module.Node.Valid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#4 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#4, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> !read($Heap, ##n#4, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
         && read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#4)), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#4, _module.Node.value))), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#4, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#4, _module.Node.value) < i#5));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#4);
    assume _module.Node.BalanceValid#canCall($Heap, r#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#5 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#5, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> !read($Heap, ##n#5, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
         && read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#5)), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#5, _module.Node.value))), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, ##n#5, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, ##n#5, _module.Node.value) < i#7));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> read($Heap, ##n#5, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#5)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5);
    assume _module.Node.Balanced#canCall($Heap, r#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, r#0);
    assert true;
    ##n#6 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#6, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> !read($Heap, ##n#6, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
         && read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#6)), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#6, _module.Node.value))), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> (forall i#8: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#8)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#8)]
           ==> i#8 < read($Heap, ##n#6, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> (forall i#9: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#9)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#9)]
           ==> read($Heap, ##n#6, _module.Node.value) < i#9));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#6);
    assume _module.Node.Height#canCall($Heap, r#0);
    assert true;
    ##n#7 := t#0;
    assert $Is(t#0, Tclass._module.Node())
   && $IsAlloc(t#0, Tclass._module.Node(), old($Heap));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null ==> read(old($Heap), ##n#7, _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null ==> !read(old($Heap), ##n#7, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.left) != null
       ==> read(old($Heap), ##n#7, _module.Node.Repr)[$Box(read(old($Heap), ##n#7, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.left) != null
       ==> !read(old($Heap), read(old($Heap), ##n#7, _module.Node.left), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.left) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#7, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.right) != null
       ==> read(old($Heap), ##n#7, _module.Node.Repr)[$Box(read(old($Heap), ##n#7, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.right) != null
       ==> !read(old($Heap), read(old($Heap), ##n#7, _module.Node.right), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.right) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#7, _module.Node.right), _module.Node.Repr), 
        read(old($Heap), ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#7, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#7, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.right) != null
         && read(old($Heap), ##n#7, _module.Node.left) != null
       ==> Set#Disjoint(read(old($Heap), read(old($Heap), ##n#7, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), read(old($Heap), ##n#7, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read(old($Heap), ##n#7, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#7)), 
            (if read(old($Heap), ##n#7, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#7, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#7, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#7, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read(old($Heap), ##n#7, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read(old($Heap), ##n#7, _module.Node.value))), 
            (if read(old($Heap), ##n#7, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#7, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#7, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#7, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.left) != null
       ==> (forall i#10: int :: 
        { read(old($Heap), read(old($Heap), ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)]
           ==> i#10 < read(old($Heap), ##n#7, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#7)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#7)
     || (##n#7 != null
       ==> 
      read(old($Heap), ##n#7, _module.Node.right) != null
       ==> (forall i#11: int :: 
        { read(old($Heap), read(old($Heap), ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)]
           ==> read(old($Heap), ##n#7, _module.Node.value) < i#11));
    assume _module.Node.Valid($LS($LZ), old($Heap), ##n#7);
    assume _module.Node.Height#canCall(old($Heap), t#0);
    assume _module.Node.Height($LS($LZ), $Heap, r#0)
     - _module.Node.Height($LS($LZ), old($Heap), t#0)
   == deltaH#0;
    if (deltaH#0 != LitInt(0))
    {
    }

    assume deltaH#0 == LitInt(0) || deltaH#0 == LitInt(1);
    if (*)
    {
        assume t#0 != null;
        assume deltaH#0 == LitInt(1);
        assert r#0 != null;
        assume read($Heap, r#0, _module.Node.balance) != 0;
    }
    else
    {
        assume t#0 != null && deltaH#0 == LitInt(1)
   ==> read($Heap, r#0, _module.Node.balance) != 0;
    }
}



procedure InterModuleCall$$_module.AVLTree.InsertRecursion(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    t#0: ref
       where $Is(t#0, Tclass._module.Node()) && $IsAlloc(t#0, Tclass._module.Node(), $Heap), 
    key#0: int)
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    deltaH#0: int);
  // user-defined preconditions
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> read($Heap, t#0, _module.Node.Repr)[$Box(t#0)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> !read($Heap, t#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(t#0)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(t#0)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
         && read($Heap, t#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.value))), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> (forall i#12: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#12)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#12)]
           ==> i#12 < read($Heap, t#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> (forall i#13: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#13)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#13)]
           ==> read($Heap, t#0, _module.Node.value) < i#13));
  requires _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, t#0, _module.Node.balance) == LitInt(0)
         || read($Heap, t#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 != null;
  ensures (t#0 != null && read(old($Heap), t#0, _module.Node.Repr)[$Box(r#0)])
   || (r#0 != null && !read(old($Heap), r#0, alloc));
  free ensures true;
  ensures t#0 != null
   ==> (forall $o: ref :: 
    { read(old($Heap), $o, alloc) } 
    $o != null
         && 
        read($Heap, r#0, _module.Node.Repr)[$Box($o)]
         && !read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]
       ==> !read(old($Heap), $o, alloc));
  ensures t#0 != null
   ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
    Set#Union(read(old($Heap), t#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
  free ensures true;
  ensures t#0 == null
   ==> (forall $o: ref :: 
    { read(old($Heap), $o, alloc) } 
    $o != null && read($Heap, r#0, _module.Node.Repr)[$Box($o)]
       ==> !read(old($Heap), $o, alloc));
  ensures t#0 == null
   ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0)));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#14: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#14)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#14)]
             ==> i#14 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#15: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#15)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#15)]
             ==> read($Heap, r#0, _module.Node.value) < i#15)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, r#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> (
        read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), t#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
     - _module.Node.Height($LS($LS($LZ)), old($Heap), t#0)
   == deltaH#0;
  ensures deltaH#0 == LitInt(0) || deltaH#0 == LitInt(1);
  free ensures true;
  ensures t#0 != null && deltaH#0 == LitInt(1)
   ==> read($Heap, r#0, _module.Node.balance) != 0;
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.AVLTree.InsertRecursion(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    t#0: ref
       where $Is(t#0, Tclass._module.Node()) && $IsAlloc(t#0, Tclass._module.Node(), $Heap), 
    key#0: int)
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    deltaH#0: int);
  // user-defined preconditions
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> read($Heap, t#0, _module.Node.Repr)[$Box(t#0)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> !read($Heap, t#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(t#0)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(t#0)]);
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
         && read($Heap, t#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.value))), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> (forall i#16: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#16)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#16)]
           ==> i#16 < read($Heap, t#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> (forall i#17: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#17)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#17)]
           ==> read($Heap, t#0, _module.Node.value) < i#17));
  requires _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, t#0, _module.Node.balance) == LitInt(0)
         || read($Heap, t#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 != null;
  ensures (t#0 != null && read(old($Heap), t#0, _module.Node.Repr)[$Box(r#0)])
   || (r#0 != null && !read(old($Heap), r#0, alloc));
  free ensures true;
  ensures t#0 != null
   ==> (forall $o: ref :: 
    { read(old($Heap), $o, alloc) } 
    $o != null
         && 
        read($Heap, r#0, _module.Node.Repr)[$Box($o)]
         && !read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]
       ==> !read(old($Heap), $o, alloc));
  ensures t#0 != null
   ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
    Set#Union(read(old($Heap), t#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
  free ensures true;
  ensures t#0 == null
   ==> (forall $o: ref :: 
    { read(old($Heap), $o, alloc) } 
    $o != null && read($Heap, r#0, _module.Node.Repr)[$Box($o)]
       ==> !read(old($Heap), $o, alloc));
  ensures t#0 == null
   ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0)));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#18: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)]
             ==> i#18 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#19: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)]
             ==> read($Heap, r#0, _module.Node.value) < i#19)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, r#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> (
        read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), t#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
     - _module.Node.Height($LS($LS($LZ)), old($Heap), t#0)
   == deltaH#0;
  ensures deltaH#0 == LitInt(0) || deltaH#0 == LitInt(1);
  free ensures true;
  ensures t#0 != null && deltaH#0 == LitInt(1)
   ==> read($Heap, r#0, _module.Node.balance) != 0;
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.AVLTree.InsertRecursion(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.AVLTree())
         && $IsAlloc(this, Tclass._module.AVLTree(), $Heap), 
    t#0: ref
       where $Is(t#0, Tclass._module.Node()) && $IsAlloc(t#0, Tclass._module.Node(), $Heap), 
    key#0: int)
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    deltaH#0: int, 
    $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 14 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _module.Node.Valid#canCall($Heap, t#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, t#0)
   && (t#0 != null
     ==> read($Heap, t#0, _module.Node.Repr)[$Box(t#0)]
       && !read($Heap, t#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, t#0, _module.Node.left) != null
         ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]
           && !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(t#0)]
           && Set#Subset(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, t#0, _module.Node.Repr)))
       && (read($Heap, t#0, _module.Node.right) != null
         ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]
           && !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(t#0)]
           && Set#Subset(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, t#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
       && (read($Heap, t#0, _module.Node.right) != null
           && read($Heap, t#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, t#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, t#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.value))), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, t#0, _module.Node.left) != null
         ==> (forall i#20: int :: 
          { read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)] } 
          true
             ==> 
            read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)]
             ==> i#20 < read($Heap, t#0, _module.Node.value)))
       && (read($Heap, t#0, _module.Node.right) != null
         ==> (forall i#21: int :: 
          { read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)] } 
          true
             ==> 
            read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)]
             ==> read($Heap, t#0, _module.Node.value) < i#21)));
  free requires _module.Node.BalanceValid#canCall($Heap, t#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
   && (t#0 != null
     ==> read($Heap, t#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
       && (read($Heap, t#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left)))
       && (read($Heap, t#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))));
  free requires _module.Node.Balanced#canCall($Heap, t#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, t#0)
   && (t#0 != null
     ==> (
        read($Heap, t#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, t#0, _module.Node.balance) == LitInt(0)
         || read($Heap, t#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 != null;
  ensures (t#0 != null && read(old($Heap), t#0, _module.Node.Repr)[$Box(r#0)])
   || (r#0 != null && !read(old($Heap), r#0, alloc));
  free ensures true;
  ensures t#0 != null
   ==> (forall $o: ref :: 
    { read(old($Heap), $o, alloc) } 
    $o != null
         && 
        read($Heap, r#0, _module.Node.Repr)[$Box($o)]
         && !read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]
       ==> !read(old($Heap), $o, alloc));
  ensures t#0 != null
   ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
    Set#Union(read(old($Heap), t#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(key#0))));
  free ensures true;
  ensures t#0 == null
   ==> (forall $o: ref :: 
    { read(old($Heap), $o, alloc) } 
    $o != null && read($Heap, r#0, _module.Node.Repr)[$Box($o)]
       ==> !read(old($Heap), $o, alloc));
  ensures t#0 == null
   ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
    Set#UnionOne(Set#Empty(): Set Box, $Box(key#0)));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> !read($Heap, r#0, _module.Node.Repr)[$Box(null)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
         && read($Heap, r#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> (forall i#22: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)]
           ==> i#22 < read($Heap, r#0, _module.Node.value)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> (forall i#23: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)]
           ==> read($Heap, r#0, _module.Node.value) < i#23));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), t#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
     - _module.Node.Height($LS($LS($LZ)), old($Heap), t#0)
   == deltaH#0;
  ensures deltaH#0 == LitInt(0) || deltaH#0 == LitInt(1);
  free ensures true;
  ensures t#0 != null && deltaH#0 == LitInt(1)
   ==> read($Heap, r#0, _module.Node.balance) != 0;
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || read(old($Heap), t#0, _module.Node.Repr)[$Box($o)]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.AVLTree.InsertRecursion(this: ref, t#0: ref, key#0: int)
   returns (r#0: ref, deltaH#0: int, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $nw: ref;
  var v##0_0: int;
  var d#0: int;
  var ##n#1_0: ref;
  var $obj0: ref;
  var $rhs##1_0: ref
   where $Is($rhs##1_0, Tclass._module.Node())
     && $IsAlloc($rhs##1_0, Tclass._module.Node(), $Heap);
  var $rhs##1_1: int;
  var t##1_0: ref;
  var key##1_0: int;
  var $rhs#1_0: Set Box
   where $Is($rhs#1_0, TSet(Tclass._module.Node()))
     && $IsAlloc($rhs#1_0, TSet(Tclass._module.Node()), $Heap);
  var $rhs#1_1: Set Box
   where $Is($rhs#1_1, TSet(TInt)) && $IsAlloc($rhs#1_1, TSet(TInt), $Heap);
  var ##n#1_1: ref;
  var ##n#1_0_0: ref;
  var ##n#1_0_1: ref;
  var $rhs#1_0_0: ref
   where $Is($rhs#1_0_0, Tclass._module.Node())
     && $IsAlloc($rhs#1_0_0, Tclass._module.Node(), $Heap);
  var $rhs#1_0_1: int;
  var $rhs#1_2: int;
  var ##n#1_2: ref;
  var ##n#1_1_0: ref;
  var $rhs##1_1_0_0: ref
   where $Is($rhs##1_1_0_0, Tclass._module.Node())
     && $IsAlloc($rhs##1_1_0_0, Tclass._module.Node(), $Heap);
  var n##1_1_0_0: ref;
  var $rhs##1_1_0: ref
   where $Is($rhs##1_1_0, Tclass._module.Node())
     && $IsAlloc($rhs##1_1_0, Tclass._module.Node(), $Heap);
  var n##1_1_0: ref;
  var ##n#1_3: ref;
  var ##n#2_0: ref;
  var $rhs##2_0: ref
   where $Is($rhs##2_0, Tclass._module.Node())
     && $IsAlloc($rhs##2_0, Tclass._module.Node(), $Heap);
  var $rhs##2_1: int;
  var t##2_0: ref;
  var key##2_0: int;
  var $rhs#2_0: Set Box
   where $Is($rhs#2_0, TSet(Tclass._module.Node()))
     && $IsAlloc($rhs#2_0, TSet(Tclass._module.Node()), $Heap);
  var $rhs#2_1: Set Box
   where $Is($rhs#2_1, TSet(TInt)) && $IsAlloc($rhs#2_1, TSet(TInt), $Heap);
  var ##n#2_1: ref;
  var $rhs#2_2: int;
  var ##n#2_2: ref;
  var ##n#2_1_0: ref;
  var $rhs##2_1_0_0: ref
   where $Is($rhs##2_1_0_0, Tclass._module.Node())
     && $IsAlloc($rhs##2_1_0_0, Tclass._module.Node(), $Heap);
  var n##2_1_0_0: ref;
  var $rhs##2_1_0: ref
   where $Is($rhs##2_1_0, Tclass._module.Node())
     && $IsAlloc($rhs##2_1_0, Tclass._module.Node(), $Heap);
  var n##2_1_0: ref;
  var ##n#2_3: ref;

    // AddMethodImpl: InsertRecursion, Impl$$_module.AVLTree.InsertRecursion
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> read($Heap, t#0, _module.Node.Repr)[$Box($o)]);
    assume {:captureState "AVLTree.dfy(80,4): initial state"} true;
    $_reverifyPost := false;
    // ----- if statement ----- AVLTree.dfy(81,7)
    assume true;
    if (t#0 == null)
    {
        // ----- assignment statement ----- AVLTree.dfy(83,12)
        assume true;
        havoc $nw;
        assume $nw != null && !read($Heap, $nw, alloc) && dtype($nw) == Tclass._module.Node();
        $Heap := update($Heap, $nw, alloc, true);
        assume $IsGoodHeap($Heap);
        // ----- init call statement ----- AVLTree.dfy(83,24)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        assert true;
        v##0_0 := key#0;
        assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == $nw ==> $_Frame[$o, $f]);
        // ProcessCallStmt: Make the call
        call IntraModuleCall$$_module.Node.Init($nw, v##0_0);
        // TrCallStmt: After ProcessCallStmt
        assume {:captureState "AVLTree.dfy(83,33)"} true;
        r#0 := $nw;
        assume {:captureState "AVLTree.dfy(83,33)"} true;
        // ----- assignment statement ----- AVLTree.dfy(84,17)
        assume true;
        assume true;
        assert true;
        deltaH#0 := LitInt(1);
        assume {:captureState "AVLTree.dfy(84,21)"} true;
        // ----- return statement ----- AVLTree.dfy(85,10)
        return;
    }
    else
    {
        // ----- assignment statement ----- AVLTree.dfy(89,12)
        assume true;
        assume true;
        assert true;
        r#0 := t#0;
        assume {:captureState "AVLTree.dfy(89,16)"} true;
        // ----- if statement ----- AVLTree.dfy(91,10)
        assert t#0 != null;
        assume true;
        if (key#0 < read($Heap, t#0, _module.Node.value))
        {
            // ----- assert statement ----- AVLTree.dfy(93,13)
            assert {:subsumption 0} t#0 != null;
            assert true;
            ##n#1_0 := read($Heap, t#0, _module.Node.left);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_0, Tclass._module.Node(), $Heap);
            assume _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left));
            assume _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left) != null
       ==> !read($Heap, 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left), 
        _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left) != null
       ==> Set#Subset(read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left), 
          _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right) != null
       ==> !read($Heap, 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right), 
        _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right) != null
       ==> Set#Subset(read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right), 
          _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right) != null
         && read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left), 
          _module.Node.Repr), 
        read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right), 
          _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> Set#Equal(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.left))), 
            (if read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left) != null
               then read($Heap, 
                read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left), 
                _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right) != null
             then read($Heap, 
              read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right), 
              _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> Set#Equal(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
              $Box(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.value))), 
            (if read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left) != null
               then read($Heap, 
                read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left), 
                _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right) != null
             then read($Heap, 
              read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right), 
              _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left) != null
       ==> (forall i#1_0: int :: 
        { read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left), 
            _module.Node.Contents)[$Box(i#1_0)] } 
        true
           ==> 
          read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left), 
            _module.Node.Contents)[$Box(i#1_0)]
           ==> i#1_0 < read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right) != null
       ==> (forall i#1_1: int :: 
        { read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right), 
            _module.Node.Contents)[$Box(i#1_1)] } 
        true
           ==> 
          read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right), 
            _module.Node.Contents)[$Box(i#1_1)]
           ==> read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.value) < i#1_1));
            assume _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left));
            // ----- call statement ----- AVLTree.dfy(94,41)
            assert t#0 != null;
            assume true;
            $obj0 := t#0;
            assert $_Frame[$obj0, _module.Node.left];
            assume true;
            // TrCallStmt: Adding lhs Microsoft.Dafny.MemberSelectExpr with type Node
            // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type int
            // TrCallStmt: Before ProcessCallStmt
            assert t#0 != null;
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert true;
            t##1_0 := read($Heap, t#0, _module.Node.left);
            assume true;
            // ProcessCallStmt: CheckSubrange
            assert true;
            key##1_0 := key#0;
            assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && read($Heap, t##1_0, _module.Node.Repr)[$Box($o)]
     ==> $_Frame[$o, $f]);
            assert Set#Subset((if t##1_0 != null
       then read($Heap, t##1_0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if t#0 != null
       then read(old($Heap), t#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if t#0 != null
       then read(old($Heap), t#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if t##1_0 != null
       then read($Heap, t##1_0, _module.Node.Repr)
       else Set#Empty(): Set Box));
            // ProcessCallStmt: Make the call
            call $rhs##1_0, $rhs##1_1 := IntraModuleCall$$_module.AVLTree.InsertRecursion(this, t##1_0, key##1_0);
            // TrCallStmt: After ProcessCallStmt
            // TrCallStmt: Checking bRhs $rhs##1_0 to have type Node
            assert true;
            $Heap := update($Heap, $obj0, _module.Node.left, $rhs##1_0);
            assume $IsGoodHeap($Heap);
            // TrCallStmt: Checking bRhs $rhs##1_1 to have type int
            assert true;
            d#0 := $rhs##1_1;
            assume {:captureState "AVLTree.dfy(94,54)"} true;
            // ----- assignment statement ----- AVLTree.dfy(95,20)
            assert t#0 != null;
            assume true;
            assert $_Frame[t#0, _module.Node.Repr];
            assert t#0 != null;
            assert read($Heap, t#0, _module.Node.left) != null;
            assert t#0 != null;
            if (read($Heap, t#0, _module.Node.right) != null)
            {
                assert t#0 != null;
                assert read($Heap, t#0, _module.Node.right) != null;
            }
            else
            {
            }

            assume true;
            assert true;
            $rhs#1_0 := Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
    read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)), 
  (if read($Heap, t#0, _module.Node.right) != null
     then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
     else Set#Empty(): Set Box));
            $Heap := update($Heap, t#0, _module.Node.Repr, $rhs#1_0);
            assume $IsGoodHeap($Heap);
            assume {:captureState "AVLTree.dfy(95,87)"} true;
            // ----- assignment statement ----- AVLTree.dfy(96,24)
            assert t#0 != null;
            assume true;
            assert $_Frame[t#0, _module.Node.Contents];
            assert t#0 != null;
            assume true;
            assert true;
            $rhs#1_1 := Set#Union(read($Heap, t#0, _module.Node.Contents), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(key#0)));
            $Heap := update($Heap, t#0, _module.Node.Contents, $rhs#1_1);
            assume $IsGoodHeap($Heap);
            assume {:captureState "AVLTree.dfy(96,45)"} true;
            // ----- assert statement ----- AVLTree.dfy(97,4)
            assert true;
            ##n#1_1 := t#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_1, Tclass._module.Node(), $Heap);
            assume _module.Node.Valid#canCall($Heap, t#0);
            assume _module.Node.Valid#canCall($Heap, t#0);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> read($Heap, t#0, _module.Node.Repr)[$Box(t#0)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> !read($Heap, t#0, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(t#0)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(t#0)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
         && read($Heap, t#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.value))), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> (forall i#1_2: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#1_2)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#1_2)]
           ==> i#1_2 < read($Heap, t#0, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> (forall i#1_3: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#1_3)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#1_3)]
           ==> read($Heap, t#0, _module.Node.value) < i#1_3));
            assume _module.Node.Valid($LS($LZ), $Heap, t#0);
            // ----- if statement ----- AVLTree.dfy(98,13)
            assume true;
            if (d#0 == LitInt(0))
            {
                // ----- assert statement ----- AVLTree.dfy(100,7)
                assert {:subsumption 0} t#0 != null;
                assert true;
                ##n#1_0_0 := read($Heap, t#0, _module.Node.left);
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#1_0_0, Tclass._module.Node(), $Heap);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> read($Heap, ##n#1_0_0, _module.Node.Repr)[$Box(##n#1_0_0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null ==> !read($Heap, ##n#1_0_0, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.left) != null
       ==> read($Heap, ##n#1_0_0, _module.Node.Repr)[$Box(read($Heap, ##n#1_0_0, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1_0_0, _module.Node.left), _module.Node.Repr)[$Box(##n#1_0_0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_0_0, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1_0_0, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.right) != null
       ==> read($Heap, ##n#1_0_0, _module.Node.Repr)[$Box(read($Heap, ##n#1_0_0, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1_0_0, _module.Node.right), _module.Node.Repr)[$Box(##n#1_0_0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_0_0, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1_0_0, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_0_0, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_0_0, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.right) != null
         && read($Heap, ##n#1_0_0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1_0_0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1_0_0, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> Set#Equal(read($Heap, ##n#1_0_0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1_0_0)), 
            (if read($Heap, ##n#1_0_0, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_0_0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_0_0, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_0_0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> Set#Equal(read($Heap, ##n#1_0_0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1_0_0, _module.Node.value))), 
            (if read($Heap, ##n#1_0_0, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_0_0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_0_0, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_0_0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.left) != null
       ==> (forall i#1_0_0: int :: 
        { read($Heap, read($Heap, ##n#1_0_0, _module.Node.left), _module.Node.Contents)[$Box(i#1_0_0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_0_0, _module.Node.left), _module.Node.Contents)[$Box(i#1_0_0)]
           ==> i#1_0_0 < read($Heap, ##n#1_0_0, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_0_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_0_0)
     || (##n#1_0_0 != null
       ==> 
      read($Heap, ##n#1_0_0, _module.Node.right) != null
       ==> (forall i#1_0_1: int :: 
        { read($Heap, read($Heap, ##n#1_0_0, _module.Node.right), _module.Node.Contents)[$Box(i#1_0_1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_0_0, _module.Node.right), _module.Node.Contents)[$Box(i#1_0_1)]
           ==> read($Heap, ##n#1_0_0, _module.Node.value) < i#1_0_1));
                assume _module.Node.Height#canCall($Heap, read($Heap, t#0, _module.Node.left));
                assert {:subsumption 0} t#0 != null;
                assert true;
                ##n#1_0_1 := read(old($Heap), t#0, _module.Node.left);
                assert $Is(read(old($Heap), t#0, _module.Node.left), Tclass._module.Node())
   && $IsAlloc(read(old($Heap), t#0, _module.Node.left), Tclass._module.Node(), old($Heap));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> read(old($Heap), ##n#1_0_1, _module.Node.Repr)[$Box(##n#1_0_1)]);
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> !read(old($Heap), ##n#1_0_1, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.left) != null
       ==> read(old($Heap), ##n#1_0_1, _module.Node.Repr)[$Box(read(old($Heap), ##n#1_0_1, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.left) != null
       ==> !read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.left), _module.Node.Repr)[$Box(##n#1_0_1)]);
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.left) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), ##n#1_0_1, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.right) != null
       ==> read(old($Heap), ##n#1_0_1, _module.Node.Repr)[$Box(read(old($Heap), ##n#1_0_1, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.right) != null
       ==> !read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.right), _module.Node.Repr)[$Box(##n#1_0_1)]);
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.right) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.right), _module.Node.Repr), 
        read(old($Heap), ##n#1_0_1, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.right) != null
         && read(old($Heap), ##n#1_0_1, _module.Node.left) != null
       ==> Set#Disjoint(read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> Set#Equal(read(old($Heap), ##n#1_0_1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1_0_1)), 
            (if read(old($Heap), ##n#1_0_1, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#1_0_1, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#1_0_1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> Set#Equal(read(old($Heap), ##n#1_0_1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read(old($Heap), ##n#1_0_1, _module.Node.value))), 
            (if read(old($Heap), ##n#1_0_1, _module.Node.left) != null
               then read(old($Heap), 
                read(old($Heap), ##n#1_0_1, _module.Node.left), 
                _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#1_0_1, _module.Node.right) != null
             then read(old($Heap), 
              read(old($Heap), ##n#1_0_1, _module.Node.right), 
              _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.left) != null
       ==> (forall i#1_0_2: int :: 
        { read(old($Heap), 
            read(old($Heap), ##n#1_0_1, _module.Node.left), 
            _module.Node.Contents)[$Box(i#1_0_2)] } 
        true
           ==> 
          read(old($Heap), 
            read(old($Heap), ##n#1_0_1, _module.Node.left), 
            _module.Node.Contents)[$Box(i#1_0_2)]
           ==> i#1_0_2 < read(old($Heap), ##n#1_0_1, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#1_0_1)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#1_0_1)
     || (##n#1_0_1 != null
       ==> 
      read(old($Heap), ##n#1_0_1, _module.Node.right) != null
       ==> (forall i#1_0_3: int :: 
        { read(old($Heap), 
            read(old($Heap), ##n#1_0_1, _module.Node.right), 
            _module.Node.Contents)[$Box(i#1_0_3)] } 
        true
           ==> 
          read(old($Heap), 
            read(old($Heap), ##n#1_0_1, _module.Node.right), 
            _module.Node.Contents)[$Box(i#1_0_3)]
           ==> read(old($Heap), ##n#1_0_1, _module.Node.value) < i#1_0_3));
                assume _module.Node.Height#canCall(old($Heap), read(old($Heap), t#0, _module.Node.left));
                assume _module.Node.Height#canCall($Heap, read($Heap, t#0, _module.Node.left))
   && _module.Node.Height#canCall(old($Heap), read(old($Heap), t#0, _module.Node.left));
                assert {:subsumption 0} _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left))
   == _module.Node.Height($LS($LS($LZ)), old($Heap), read(old($Heap), t#0, _module.Node.left));
                assume _module.Node.Height($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
   == _module.Node.Height($LS($LZ), old($Heap), read(old($Heap), t#0, _module.Node.left));
                // ----- return statement ----- AVLTree.dfy(101,7)
                // ----- update statement ----- AVLTree.dfy(101,7)
                assume true;
                assume true;
                assume true;
                assert true;
                $rhs#1_0_0 := r#0;
                assume true;
                assert true;
                $rhs#1_0_1 := LitInt(0);
                r#0 := $rhs#1_0_0;
                deltaH#0 := $rhs#1_0_1;
                assume {:captureState "AVLTree.dfy(101,18)"} true;
                return;
            }
            else
            {
            }

            // ----- assignment statement ----- AVLTree.dfy(104,20)
            assume true;
            assert t#0 != null;
            if (read($Heap, t#0, _module.Node.balance) == LitInt(0))
            {
            }
            else
            {
            }

            assume true;
            assert true;
            deltaH#0 := (if read($Heap, t#0, _module.Node.balance) == LitInt(0) then 1 else 0);
            assume {:captureState "AVLTree.dfy(104,54)"} true;
            // ----- assignment statement ----- AVLTree.dfy(105,23)
            assert t#0 != null;
            assume true;
            assert $_Frame[t#0, _module.Node.balance];
            assert t#0 != null;
            assume true;
            assert true;
            $rhs#1_2 := read($Heap, t#0, _module.Node.balance) - 1;
            $Heap := update($Heap, t#0, _module.Node.balance, $rhs#1_2);
            assume $IsGoodHeap($Heap);
            assume {:captureState "AVLTree.dfy(105,39)"} true;
            // ----- assert statement ----- AVLTree.dfy(106,13)
            assert true;
            ##n#1_2 := t#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1_2, Tclass._module.Node(), $Heap);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null ==> read($Heap, ##n#1_2, _module.Node.Repr)[$Box(##n#1_2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null ==> !read($Heap, ##n#1_2, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.left) != null
       ==> read($Heap, ##n#1_2, _module.Node.Repr)[$Box(read($Heap, ##n#1_2, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1_2, _module.Node.left), _module.Node.Repr)[$Box(##n#1_2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1_2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.right) != null
       ==> read($Heap, ##n#1_2, _module.Node.Repr)[$Box(read($Heap, ##n#1_2, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1_2, _module.Node.right), _module.Node.Repr)[$Box(##n#1_2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1_2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_2, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_2, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.right) != null
         && read($Heap, ##n#1_2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1_2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1_2, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> Set#Equal(read($Heap, ##n#1_2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1_2)), 
            (if read($Heap, ##n#1_2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> Set#Equal(read($Heap, ##n#1_2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1_2, _module.Node.value))), 
            (if read($Heap, ##n#1_2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.left) != null
       ==> (forall i#1_4: int :: 
        { read($Heap, read($Heap, ##n#1_2, _module.Node.left), _module.Node.Contents)[$Box(i#1_4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_2, _module.Node.left), _module.Node.Contents)[$Box(i#1_4)]
           ==> i#1_4 < read($Heap, ##n#1_2, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_2)
     || (##n#1_2 != null
       ==> 
      read($Heap, ##n#1_2, _module.Node.right) != null
       ==> (forall i#1_5: int :: 
        { read($Heap, read($Heap, ##n#1_2, _module.Node.right), _module.Node.Contents)[$Box(i#1_5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_2, _module.Node.right), _module.Node.Contents)[$Box(i#1_5)]
           ==> read($Heap, ##n#1_2, _module.Node.value) < i#1_5));
            assume _module.Node.BalanceValid#canCall($Heap, t#0);
            assume _module.Node.BalanceValid#canCall($Heap, t#0);
            assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
            assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
            assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
            assume _module.Node.BalanceValid($LS($LZ), $Heap, t#0);
            // ----- if statement ----- AVLTree.dfy(107,7)
            assert t#0 != null;
            assume true;
            if (read($Heap, t#0, _module.Node.balance) == LitInt(0 - 2))
            {
                // ----- assert statement ----- AVLTree.dfy(109,16)
                assert {:subsumption 0} t#0 != null;
                assert true;
                ##n#1_1_0 := read($Heap, t#0, _module.Node.left);
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#1_1_0, Tclass._module.Node(), $Heap);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> read($Heap, ##n#1_1_0, _module.Node.Repr)[$Box(##n#1_1_0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null ==> !read($Heap, ##n#1_1_0, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.left) != null
       ==> read($Heap, ##n#1_1_0, _module.Node.Repr)[$Box(read($Heap, ##n#1_1_0, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1_1_0, _module.Node.left), _module.Node.Repr)[$Box(##n#1_1_0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_1_0, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1_1_0, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.right) != null
       ==> read($Heap, ##n#1_1_0, _module.Node.Repr)[$Box(read($Heap, ##n#1_1_0, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1_1_0, _module.Node.right), _module.Node.Repr)[$Box(##n#1_1_0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_1_0, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1_1_0, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_1_0, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_1_0, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.right) != null
         && read($Heap, ##n#1_1_0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1_1_0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1_1_0, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> Set#Equal(read($Heap, ##n#1_1_0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1_1_0)), 
            (if read($Heap, ##n#1_1_0, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_1_0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_1_0, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_1_0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> Set#Equal(read($Heap, ##n#1_1_0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1_1_0, _module.Node.value))), 
            (if read($Heap, ##n#1_1_0, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_1_0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_1_0, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_1_0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.left) != null
       ==> (forall i#1_1_0: int :: 
        { read($Heap, read($Heap, ##n#1_1_0, _module.Node.left), _module.Node.Contents)[$Box(i#1_1_0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_1_0, _module.Node.left), _module.Node.Contents)[$Box(i#1_1_0)]
           ==> i#1_1_0 < read($Heap, ##n#1_1_0, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.right) != null
       ==> (forall i#1_1_1: int :: 
        { read($Heap, read($Heap, ##n#1_1_0, _module.Node.right), _module.Node.Contents)[$Box(i#1_1_1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_1_0, _module.Node.right), _module.Node.Contents)[$Box(i#1_1_1)]
           ==> read($Heap, ##n#1_1_0, _module.Node.value) < i#1_1_1));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> read($Heap, ##n#1_1_0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#1_1_0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#1_1_0, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_1_0, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#1_1_0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#1_1_0)
     || (##n#1_1_0 != null
       ==> 
      read($Heap, ##n#1_1_0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_1_0, _module.Node.right)));
                assume _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.left));
                assume _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.left));
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.balance)
           == LitInt(1));
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.right)));
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left))
     || (read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.left)));
                assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.left));
                // ----- if statement ----- AVLTree.dfy(110,16)
                assert t#0 != null;
                assert read($Heap, t#0, _module.Node.left) != null;
                assume true;
                if (read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.balance)
   == LitInt(1))
                {
                    // ----- call statement ----- AVLTree.dfy(112,50)
                    assert t#0 != null;
                    assume true;
                    $obj0 := t#0;
                    assert $_Frame[$obj0, _module.Node.left];
                    // TrCallStmt: Adding lhs Microsoft.Dafny.MemberSelectExpr with type Node
                    // TrCallStmt: Before ProcessCallStmt
                    assert t#0 != null;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    assert true;
                    n##1_1_0_0 := read($Heap, t#0, _module.Node.left);
                    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == n##1_1_0_0 || $o == read($Heap, n##1_1_0_0, _module.Node.right))
     ==> $_Frame[$o, $f]);
                    // ProcessCallStmt: Make the call
                    call $rhs##1_1_0_0 := IntraModuleCall$$_module.Node.WeakLeftRotation(n##1_1_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // TrCallStmt: Checking bRhs $rhs##1_1_0_0 to have type Node
                    assert true;
                    $Heap := update($Heap, $obj0, _module.Node.left, $rhs##1_1_0_0);
                    assume $IsGoodHeap($Heap);
                    assume {:captureState "AVLTree.dfy(112,58)"} true;
                }
                else
                {
                }

                // ----- call statement ----- AVLTree.dfy(114,45)
                assume true;
                // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type Node
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                assert true;
                n##1_1_0 := t#0;
                assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == n##1_1_0 || $o == read($Heap, n##1_1_0, _module.Node.left))
     ==> $_Frame[$o, $f]);
                // ProcessCallStmt: Make the call
                call $rhs##1_1_0 := IntraModuleCall$$_module.Node.StrongRightRotation(n##1_1_0);
                // TrCallStmt: After ProcessCallStmt
                // TrCallStmt: Checking bRhs $rhs##1_1_0 to have type Node
                assert true;
                r#0 := $rhs##1_1_0;
                assume {:captureState "AVLTree.dfy(114,48)"} true;
                // ----- return statement ----- AVLTree.dfy(115,16)
                return;
            }
            else
            {
                // ----- assert statement ----- AVLTree.dfy(119,16)
                assert true;
                ##n#1_3 := t#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#1_3, Tclass._module.Node(), $Heap);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null ==> read($Heap, ##n#1_3, _module.Node.Repr)[$Box(##n#1_3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null ==> !read($Heap, ##n#1_3, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.left) != null
       ==> read($Heap, ##n#1_3, _module.Node.Repr)[$Box(read($Heap, ##n#1_3, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1_3, _module.Node.left), _module.Node.Repr)[$Box(##n#1_3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_3, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1_3, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.right) != null
       ==> read($Heap, ##n#1_3, _module.Node.Repr)[$Box(read($Heap, ##n#1_3, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1_3, _module.Node.right), _module.Node.Repr)[$Box(##n#1_3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1_3, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1_3, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_3, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.right) != null
         && read($Heap, ##n#1_3, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1_3, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1_3, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> Set#Equal(read($Heap, ##n#1_3, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1_3)), 
            (if read($Heap, ##n#1_3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_3, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_3, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> Set#Equal(read($Heap, ##n#1_3, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1_3, _module.Node.value))), 
            (if read($Heap, ##n#1_3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1_3, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1_3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1_3, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.left) != null
       ==> (forall i#1_6: int :: 
        { read($Heap, read($Heap, ##n#1_3, _module.Node.left), _module.Node.Contents)[$Box(i#1_6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_3, _module.Node.left), _module.Node.Contents)[$Box(i#1_6)]
           ==> i#1_6 < read($Heap, ##n#1_3, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.right) != null
       ==> (forall i#1_7: int :: 
        { read($Heap, read($Heap, ##n#1_3, _module.Node.right), _module.Node.Contents)[$Box(i#1_7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1_3, _module.Node.right), _module.Node.Contents)[$Box(i#1_7)]
           ==> read($Heap, ##n#1_3, _module.Node.value) < i#1_7));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#1_3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> read($Heap, ##n#1_3, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#1_3, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#1_3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#1_3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#1_3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#1_3)
     || (##n#1_3 != null
       ==> 
      read($Heap, ##n#1_3, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#1_3, _module.Node.right)));
                assume _module.Node.Balanced#canCall($Heap, t#0);
                assume _module.Node.Balanced#canCall($Heap, t#0);
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, t#0, _module.Node.balance) == LitInt(0)
         || read($Heap, t#0, _module.Node.balance) == LitInt(1));
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
                assume _module.Node.Balanced($LS($LZ), $Heap, t#0);
                // ----- return statement ----- AVLTree.dfy(120,16)
                return;
            }
        }
        else
        {
            // ----- if statement ----- AVLTree.dfy(123,15)
            assert t#0 != null;
            assume true;
            if (read($Heap, t#0, _module.Node.value) < key#0)
            {
                // ----- assert statement ----- AVLTree.dfy(125,13)
                assert {:subsumption 0} t#0 != null;
                assert true;
                ##n#2_0 := read($Heap, t#0, _module.Node.right);
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#2_0, Tclass._module.Node(), $Heap);
                assume _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right));
                assume _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left) != null
       ==> !read($Heap, 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left), 
        _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left) != null
       ==> Set#Subset(read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left), 
          _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right) != null
       ==> !read($Heap, 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right), 
        _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right) != null
       ==> Set#Subset(read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right), 
          _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.Valid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right) != null
         && read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left), 
          _module.Node.Repr), 
        read($Heap, 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right), 
          _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> Set#Equal(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.right))), 
            (if read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left) != null
               then read($Heap, 
                read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left), 
                _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right) != null
             then read($Heap, 
              read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right), 
              _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> Set#Equal(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, 
              $Box(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.value))), 
            (if read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left) != null
               then read($Heap, 
                read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left), 
                _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right) != null
             then read($Heap, 
              read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right), 
              _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left) != null
       ==> (forall i#2_0: int :: 
        { read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left), 
            _module.Node.Contents)[$Box(i#2_0)] } 
        true
           ==> 
          read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left), 
            _module.Node.Contents)[$Box(i#2_0)]
           ==> i#2_0 < read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right) != null
       ==> (forall i#2_1: int :: 
        { read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right), 
            _module.Node.Contents)[$Box(i#2_1)] } 
        true
           ==> 
          read($Heap, 
            read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right), 
            _module.Node.Contents)[$Box(i#2_1)]
           ==> read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.value) < i#2_1));
                assume _module.Node.Valid($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right));
                // ----- call statement ----- AVLTree.dfy(126,42)
                assert t#0 != null;
                assume true;
                $obj0 := t#0;
                assert $_Frame[$obj0, _module.Node.right];
                assume true;
                // TrCallStmt: Adding lhs Microsoft.Dafny.MemberSelectExpr with type Node
                // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type int
                // TrCallStmt: Before ProcessCallStmt
                assert t#0 != null;
                assume true;
                // ProcessCallStmt: CheckSubrange
                assert true;
                t##2_0 := read($Heap, t#0, _module.Node.right);
                assume true;
                // ProcessCallStmt: CheckSubrange
                assert true;
                key##2_0 := key#0;
                assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && read($Heap, t##2_0, _module.Node.Repr)[$Box($o)]
     ==> $_Frame[$o, $f]);
                assert Set#Subset((if t##2_0 != null
       then read($Heap, t##2_0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if t#0 != null
       then read(old($Heap), t#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if t#0 != null
       then read(old($Heap), t#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if t##2_0 != null
       then read($Heap, t##2_0, _module.Node.Repr)
       else Set#Empty(): Set Box));
                // ProcessCallStmt: Make the call
                call $rhs##2_0, $rhs##2_1 := IntraModuleCall$$_module.AVLTree.InsertRecursion(this, t##2_0, key##2_0);
                // TrCallStmt: After ProcessCallStmt
                // TrCallStmt: Checking bRhs $rhs##2_0 to have type Node
                assert true;
                $Heap := update($Heap, $obj0, _module.Node.right, $rhs##2_0);
                assume $IsGoodHeap($Heap);
                // TrCallStmt: Checking bRhs $rhs##2_1 to have type int
                assert true;
                d#0 := $rhs##2_1;
                assume {:captureState "AVLTree.dfy(126,56)"} true;
                // ----- assignment statement ----- AVLTree.dfy(127,20)
                assert t#0 != null;
                assume true;
                assert $_Frame[t#0, _module.Node.Repr];
                assert t#0 != null;
                assert read($Heap, t#0, _module.Node.right) != null;
                assert t#0 != null;
                if (read($Heap, t#0, _module.Node.left) != null)
                {
                    assert t#0 != null;
                    assert read($Heap, t#0, _module.Node.left) != null;
                }
                else
                {
                }

                assume true;
                assert true;
                $rhs#2_0 := Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
    read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)), 
  (if read($Heap, t#0, _module.Node.left) != null
     then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
     else Set#Empty(): Set Box));
                $Heap := update($Heap, t#0, _module.Node.Repr, $rhs#2_0);
                assume $IsGoodHeap($Heap);
                assume {:captureState "AVLTree.dfy(127,86)"} true;
                // ----- assignment statement ----- AVLTree.dfy(128,24)
                assert t#0 != null;
                assume true;
                assert $_Frame[t#0, _module.Node.Contents];
                assert t#0 != null;
                assume true;
                assert true;
                $rhs#2_1 := Set#Union(read($Heap, t#0, _module.Node.Contents), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(key#0)));
                $Heap := update($Heap, t#0, _module.Node.Contents, $rhs#2_1);
                assume $IsGoodHeap($Heap);
                assume {:captureState "AVLTree.dfy(128,45)"} true;
                // ----- assert statement ----- AVLTree.dfy(129,13)
                assert true;
                ##n#2_1 := t#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#2_1, Tclass._module.Node(), $Heap);
                assume _module.Node.Valid#canCall($Heap, t#0);
                assume _module.Node.Valid#canCall($Heap, t#0);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> read($Heap, t#0, _module.Node.Repr)[$Box(t#0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null ==> !read($Heap, t#0, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)[$Box(t#0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> read($Heap, t#0, _module.Node.Repr)[$Box(read($Heap, t#0, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)[$Box(t#0)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, t#0, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
         && read($Heap, t#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(t#0)), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> Set#Equal(read($Heap, t#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, t#0, _module.Node.value))), 
            (if read($Heap, t#0, _module.Node.left) != null
               then read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, t#0, _module.Node.right) != null
             then read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> (forall i#2_2: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#2_2)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.left), _module.Node.Contents)[$Box(i#2_2)]
           ==> i#2_2 < read($Heap, t#0, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, t#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> (forall i#2_3: int :: 
        { read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#2_3)] } 
        true
           ==> 
          read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.Contents)[$Box(i#2_3)]
           ==> read($Heap, t#0, _module.Node.value) < i#2_3));
                assume _module.Node.Valid($LS($LZ), $Heap, t#0);
                // ----- if statement ----- AVLTree.dfy(130,13)
                assume true;
                if (d#0 == LitInt(0))
                {
                    // ----- assignment statement ----- AVLTree.dfy(132,23)
                    assume true;
                    assume true;
                    assert true;
                    deltaH#0 := LitInt(0);
                    assume {:captureState "AVLTree.dfy(132,27)"} true;
                    // ----- return statement ----- AVLTree.dfy(133,16)
                    return;
                }
                else
                {
                }

                // ----- assignment statement ----- AVLTree.dfy(136,20)
                assume true;
                assert t#0 != null;
                if (read($Heap, t#0, _module.Node.balance) == LitInt(0))
                {
                }
                else
                {
                }

                assume true;
                assert true;
                deltaH#0 := (if read($Heap, t#0, _module.Node.balance) == LitInt(0) then 1 else 0);
                assume {:captureState "AVLTree.dfy(136,54)"} true;
                // ----- assignment statement ----- AVLTree.dfy(137,23)
                assert t#0 != null;
                assume true;
                assert $_Frame[t#0, _module.Node.balance];
                assert t#0 != null;
                assume true;
                assert true;
                $rhs#2_2 := read($Heap, t#0, _module.Node.balance) + d#0;
                $Heap := update($Heap, t#0, _module.Node.balance, $rhs#2_2);
                assume $IsGoodHeap($Heap);
                assume {:captureState "AVLTree.dfy(137,39)"} true;
                // ----- assert statement ----- AVLTree.dfy(138,13)
                assert true;
                ##n#2_2 := t#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#2_2, Tclass._module.Node(), $Heap);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null ==> read($Heap, ##n#2_2, _module.Node.Repr)[$Box(##n#2_2)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null ==> !read($Heap, ##n#2_2, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.left) != null
       ==> read($Heap, ##n#2_2, _module.Node.Repr)[$Box(read($Heap, ##n#2_2, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2_2, _module.Node.left), _module.Node.Repr)[$Box(##n#2_2)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2_2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2_2, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.right) != null
       ==> read($Heap, ##n#2_2, _module.Node.Repr)[$Box(read($Heap, ##n#2_2, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2_2, _module.Node.right), _module.Node.Repr)[$Box(##n#2_2)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2_2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2_2, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_2, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_2, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.right) != null
         && read($Heap, ##n#2_2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2_2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2_2, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> Set#Equal(read($Heap, ##n#2_2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2_2)), 
            (if read($Heap, ##n#2_2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2_2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2_2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2_2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> Set#Equal(read($Heap, ##n#2_2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2_2, _module.Node.value))), 
            (if read($Heap, ##n#2_2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2_2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2_2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2_2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.left) != null
       ==> (forall i#2_4: int :: 
        { read($Heap, read($Heap, ##n#2_2, _module.Node.left), _module.Node.Contents)[$Box(i#2_4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2_2, _module.Node.left), _module.Node.Contents)[$Box(i#2_4)]
           ==> i#2_4 < read($Heap, ##n#2_2, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_2)
     || (##n#2_2 != null
       ==> 
      read($Heap, ##n#2_2, _module.Node.right) != null
       ==> (forall i#2_5: int :: 
        { read($Heap, read($Heap, ##n#2_2, _module.Node.right), _module.Node.Contents)[$Box(i#2_5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2_2, _module.Node.right), _module.Node.Contents)[$Box(i#2_5)]
           ==> read($Heap, ##n#2_2, _module.Node.value) < i#2_5));
                assume _module.Node.BalanceValid#canCall($Heap, t#0);
                assume _module.Node.BalanceValid#canCall($Heap, t#0);
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, t#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> 
      read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
                assume _module.Node.BalanceValid($LS($LZ), $Heap, t#0);
                // ----- if statement ----- AVLTree.dfy(140,13)
                assert t#0 != null;
                assume true;
                if (read($Heap, t#0, _module.Node.balance) == LitInt(2))
                {
                    // ----- assert statement ----- AVLTree.dfy(142,16)
                    assert {:subsumption 0} t#0 != null;
                    assert true;
                    ##n#2_1_0 := read($Heap, t#0, _module.Node.right);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#2_1_0, Tclass._module.Node(), $Heap);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> read($Heap, ##n#2_1_0, _module.Node.Repr)[$Box(##n#2_1_0)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null ==> !read($Heap, ##n#2_1_0, _module.Node.Repr)[$Box(null)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.left) != null
       ==> read($Heap, ##n#2_1_0, _module.Node.Repr)[$Box(read($Heap, ##n#2_1_0, _module.Node.left))]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2_1_0, _module.Node.left), _module.Node.Repr)[$Box(##n#2_1_0)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2_1_0, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2_1_0, _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.right) != null
       ==> read($Heap, ##n#2_1_0, _module.Node.Repr)[$Box(read($Heap, ##n#2_1_0, _module.Node.right))]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2_1_0, _module.Node.right), _module.Node.Repr)[$Box(##n#2_1_0)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2_1_0, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2_1_0, _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_1_0, _module.Node.left)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_1_0, _module.Node.right)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.right) != null
         && read($Heap, ##n#2_1_0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2_1_0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2_1_0, _module.Node.right), _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> Set#Equal(read($Heap, ##n#2_1_0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2_1_0)), 
            (if read($Heap, ##n#2_1_0, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2_1_0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2_1_0, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2_1_0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> Set#Equal(read($Heap, ##n#2_1_0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2_1_0, _module.Node.value))), 
            (if read($Heap, ##n#2_1_0, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2_1_0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2_1_0, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2_1_0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.left) != null
       ==> (forall i#2_1_0: int :: 
        { read($Heap, read($Heap, ##n#2_1_0, _module.Node.left), _module.Node.Contents)[$Box(i#2_1_0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2_1_0, _module.Node.left), _module.Node.Contents)[$Box(i#2_1_0)]
           ==> i#2_1_0 < read($Heap, ##n#2_1_0, _module.Node.value)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.right) != null
       ==> (forall i#2_1_1: int :: 
        { read($Heap, read($Heap, ##n#2_1_0, _module.Node.right), _module.Node.Contents)[$Box(i#2_1_1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2_1_0, _module.Node.right), _module.Node.Contents)[$Box(i#2_1_1)]
           ==> read($Heap, ##n#2_1_0, _module.Node.value) < i#2_1_1));
                    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> read($Heap, ##n#2_1_0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2_1_0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2_1_0, _module.Node.left)));
                    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_1_0, _module.Node.left)));
                    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2_1_0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2_1_0)
     || (##n#2_1_0 != null
       ==> 
      read($Heap, ##n#2_1_0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_1_0, _module.Node.right)));
                    assume _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.right));
                    assume _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.right));
                    assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.balance)
           == LitInt(1));
                    assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.right)));
                    assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, read($Heap, t#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right))
     || (read($Heap, t#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.left)));
                    assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, t#0, _module.Node.right));
                    // ----- if statement ----- AVLTree.dfy(143,16)
                    assert t#0 != null;
                    assert read($Heap, t#0, _module.Node.right) != null;
                    assume true;
                    if (read($Heap, read($Heap, t#0, _module.Node.right), _module.Node.balance)
   == LitInt(0 - 1))
                    {
                        // ----- call statement ----- AVLTree.dfy(145,52)
                        assert t#0 != null;
                        assume true;
                        $obj0 := t#0;
                        assert $_Frame[$obj0, _module.Node.right];
                        // TrCallStmt: Adding lhs Microsoft.Dafny.MemberSelectExpr with type Node
                        // TrCallStmt: Before ProcessCallStmt
                        assert t#0 != null;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        assert true;
                        n##2_1_0_0 := read($Heap, t#0, _module.Node.right);
                        assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == n##2_1_0_0 || $o == read($Heap, n##2_1_0_0, _module.Node.left))
     ==> $_Frame[$o, $f]);
                        // ProcessCallStmt: Make the call
                        call $rhs##2_1_0_0 := IntraModuleCall$$_module.Node.WeakRightRotation(n##2_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        // TrCallStmt: Checking bRhs $rhs##2_1_0_0 to have type Node
                        assert true;
                        $Heap := update($Heap, $obj0, _module.Node.right, $rhs##2_1_0_0);
                        assume $IsGoodHeap($Heap);
                        assume {:captureState "AVLTree.dfy(145,61)"} true;
                    }
                    else
                    {
                    }

                    // ----- call statement ----- AVLTree.dfy(147,44)
                    assume true;
                    // TrCallStmt: Adding lhs Microsoft.Dafny.IdentifierExpr with type Node
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    assert true;
                    n##2_1_0 := t#0;
                    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == n##2_1_0 || $o == read($Heap, n##2_1_0, _module.Node.right))
     ==> $_Frame[$o, $f]);
                    // ProcessCallStmt: Make the call
                    call $rhs##2_1_0 := IntraModuleCall$$_module.Node.StrongLeftRotation(n##2_1_0);
                    // TrCallStmt: After ProcessCallStmt
                    // TrCallStmt: Checking bRhs $rhs##2_1_0 to have type Node
                    assert true;
                    r#0 := $rhs##2_1_0;
                    assume {:captureState "AVLTree.dfy(147,47)"} true;
                    // ----- return statement ----- AVLTree.dfy(148,16)
                    return;
                }
                else
                {
                }

                // ----- assert statement ----- AVLTree.dfy(150,13)
                assert true;
                ##n#2_3 := t#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#2_3, Tclass._module.Node(), $Heap);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null ==> read($Heap, ##n#2_3, _module.Node.Repr)[$Box(##n#2_3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null ==> !read($Heap, ##n#2_3, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.left) != null
       ==> read($Heap, ##n#2_3, _module.Node.Repr)[$Box(read($Heap, ##n#2_3, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2_3, _module.Node.left), _module.Node.Repr)[$Box(##n#2_3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2_3, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2_3, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.right) != null
       ==> read($Heap, ##n#2_3, _module.Node.Repr)[$Box(read($Heap, ##n#2_3, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2_3, _module.Node.right), _module.Node.Repr)[$Box(##n#2_3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2_3, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2_3, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_3, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.right) != null
         && read($Heap, ##n#2_3, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2_3, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2_3, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> Set#Equal(read($Heap, ##n#2_3, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2_3)), 
            (if read($Heap, ##n#2_3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2_3, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2_3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2_3, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> Set#Equal(read($Heap, ##n#2_3, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2_3, _module.Node.value))), 
            (if read($Heap, ##n#2_3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2_3, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2_3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2_3, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.left) != null
       ==> (forall i#2_6: int :: 
        { read($Heap, read($Heap, ##n#2_3, _module.Node.left), _module.Node.Contents)[$Box(i#2_6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2_3, _module.Node.left), _module.Node.Contents)[$Box(i#2_6)]
           ==> i#2_6 < read($Heap, ##n#2_3, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2_3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.right) != null
       ==> (forall i#2_7: int :: 
        { read($Heap, read($Heap, ##n#2_3, _module.Node.right), _module.Node.Contents)[$Box(i#2_7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2_3, _module.Node.right), _module.Node.Contents)[$Box(i#2_7)]
           ==> read($Heap, ##n#2_3, _module.Node.value) < i#2_7));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2_3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> read($Heap, ##n#2_3, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2_3, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2_3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2_3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2_3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2_3)
     || (##n#2_3 != null
       ==> 
      read($Heap, ##n#2_3, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2_3, _module.Node.right)));
                assume _module.Node.Balanced#canCall($Heap, t#0);
                assume _module.Node.Balanced#canCall($Heap, t#0);
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> read($Heap, t#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, t#0, _module.Node.balance) == LitInt(0)
         || read($Heap, t#0, _module.Node.balance) == LitInt(1));
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Balanced#canCall($Heap, t#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, t#0)
     || (t#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, t#0, _module.Node.left)));
                assume _module.Node.Balanced($LS($LZ), $Heap, t#0);
                // ----- return statement ----- AVLTree.dfy(151,13)
                return;
            }
            else
            {
                // ----- assert statement ----- AVLTree.dfy(155,13)
                assert {:subsumption 0} t#0 != null;
                assume true;
                assert key#0 == read($Heap, t#0, _module.Node.value);
                // ----- assignment statement ----- AVLTree.dfy(156,20)
                assume true;
                assume true;
                assert true;
                deltaH#0 := LitInt(0);
                assume {:captureState "AVLTree.dfy(156,24)"} true;
                // ----- return statement ----- AVLTree.dfy(157,13)
                return;
            }
        }
    }
}



const unique class._module.Node: ClassName;

// Node: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Node()) } 
  $Is($o, Tclass._module.Node())
     <==> $o == null || dtype($o) == Tclass._module.Node());

// Node: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Node(), $h) } 
  $IsAlloc($o, Tclass._module.Node(), $h) <==> $o == null || read($h, $o, alloc));

const _module.Node.value: Field int;

// Node.value: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Node.value) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Node()
     ==> $Is(read($h, $o, _module.Node.value), TInt)
       && (read($h, $o, alloc) ==> $IsAlloc(read($h, $o, _module.Node.value), TInt, $h)));

const _module.Node.balance: Field int;

// Node.balance: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Node.balance) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Node()
     ==> $Is(read($h, $o, _module.Node.balance), TInt)
       && (read($h, $o, alloc) ==> $IsAlloc(read($h, $o, _module.Node.balance), TInt, $h)));

const _module.Node.left: Field ref;

// Node.left: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Node.left) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Node()
     ==> $Is(read($h, $o, _module.Node.left), Tclass._module.Node())
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.Node.left), Tclass._module.Node(), $h)));

const _module.Node.right: Field ref;

// Node.right: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Node.right) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Node()
     ==> $Is(read($h, $o, _module.Node.right), Tclass._module.Node())
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.Node.right), Tclass._module.Node(), $h)));

const _module.Node.Contents: Field (Set Box);

// Node.Contents: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Node.Contents) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Node()
     ==> $Is(read($h, $o, _module.Node.Contents), TSet(TInt))
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.Node.Contents), TSet(TInt), $h)));

const _module.Node.Repr: Field (Set Box);

// Node.Repr: Allocation axiom
axiom (forall $h: Heap, $o: ref :: 
  { read($h, $o, _module.Node.Repr) } 
  $IsGoodHeap($h) && $o != null && dtype($o) == Tclass._module.Node()
     ==> $Is(read($h, $o, _module.Node.Repr), TSet(Tclass._module.Node()))
       && (read($h, $o, alloc)
         ==> $IsAlloc(read($h, $o, _module.Node.Repr), TSet(Tclass._module.Node()), $h)));

procedure CheckWellformed$$_module.Node.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Node())
         && $IsAlloc(this, Tclass._module.Node(), $Heap), 
    v#0: int);
  free requires 0 == $ModuleContextHeight && 6 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.Init(this: ref, v#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;

    // AddMethodImpl: Init, CheckWellformed$$_module.Node.Init
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume {:captureState "AVLTree.dfy(172,10): initial state"} true;
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
    assume $HeapSucc(old($Heap), $Heap);
    assume {:captureState "AVLTree.dfy(174,48): post-state"} true;
    assert true;
    ##n#0 := this;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, this);
    assume _module.Node.Valid($LS($LZ), $Heap, this);
    assert true;
    ##n#1 := this;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
    assume _module.Node.BalanceValid#canCall($Heap, this);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, this);
    assert true;
    ##n#2 := this;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> read($Heap, ##n#2, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#2)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2);
    assume _module.Node.Balanced#canCall($Heap, this);
    assume _module.Node.Balanced($LS($LZ), $Heap, this);
    assume read($Heap, this, _module.Node.left) == null;
    assume read($Heap, this, _module.Node.right) == null;
    assume Set#Equal(read($Heap, this, _module.Node.Contents), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(v#0)));
}



procedure InterModuleCall$$_module.Node.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Node())
         && $IsAlloc(this, Tclass._module.Node(), $Heap), 
    v#0: int);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Node.Valid#canCall($Heap, this)
   && (_module.Node.Valid($LS($LZ), $Heap, this)
     ==> _module.Node.BalanceValid#canCall($Heap, this))
   && (_module.Node.Valid($LS($LZ), $Heap, this)
       && _module.Node.BalanceValid($LS($LZ), $Heap, this)
     ==> _module.Node.Balanced#canCall($Heap, this));
  free ensures _module.Node.Valid#canCall($Heap, this)
   && 
  _module.Node.Valid($LS($LZ), $Heap, this)
   && (this != null
     ==> read($Heap, this, _module.Node.Repr)[$Box(this)]
       && !read($Heap, this, _module.Node.Repr)[$Box(null)]
       && (read($Heap, this, _module.Node.left) != null
         ==> read($Heap, this, _module.Node.Repr)[$Box(read($Heap, this, _module.Node.left))]
           && !read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr)[$Box(this)]
           && Set#Subset(read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr), 
            read($Heap, this, _module.Node.Repr)))
       && (read($Heap, this, _module.Node.right) != null
         ==> read($Heap, this, _module.Node.Repr)[$Box(read($Heap, this, _module.Node.right))]
           && !read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)[$Box(this)]
           && Set#Subset(read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr), 
            read($Heap, this, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.Node.right))
       && (read($Heap, this, _module.Node.right) != null
           && read($Heap, this, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, this, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
            (if read($Heap, this, _module.Node.left) != null
               then read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, this, _module.Node.right) != null
             then read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, this, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.Node.value))), 
            (if read($Heap, this, _module.Node.left) != null
               then read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, this, _module.Node.right) != null
             then read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, this, _module.Node.left) != null
         ==> (forall i#4: int :: 
          { read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
          true
             ==> 
            read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
             ==> i#4 < read($Heap, this, _module.Node.value)))
       && (read($Heap, this, _module.Node.right) != null
         ==> (forall i#5: int :: 
          { read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
          true
             ==> 
            read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
             ==> read($Heap, this, _module.Node.value) < i#5)));
  free ensures _module.Node.BalanceValid#canCall($Heap, this)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, this)
   && (this != null
     ==> read($Heap, this, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, this, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, this, _module.Node.left))
       && (read($Heap, this, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.Node.left)))
       && (read($Heap, this, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, this)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, this)
   && (this != null
     ==> (
        read($Heap, this, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, this, _module.Node.balance) == LitInt(0)
         || read($Heap, this, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.Node.left)));
  free ensures true;
  ensures read($Heap, this, _module.Node.left) == null;
  ensures read($Heap, this, _module.Node.right) == null;
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.Node.Contents), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(v#0)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.Node.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Node())
         && $IsAlloc(this, Tclass._module.Node(), $Heap), 
    v#0: int);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Node.Valid#canCall($Heap, this)
   && (_module.Node.Valid($LS($LZ), $Heap, this)
     ==> _module.Node.BalanceValid#canCall($Heap, this))
   && (_module.Node.Valid($LS($LZ), $Heap, this)
       && _module.Node.BalanceValid($LS($LZ), $Heap, this)
     ==> _module.Node.Balanced#canCall($Heap, this));
  free ensures _module.Node.Valid#canCall($Heap, this)
   && 
  _module.Node.Valid($LS($LZ), $Heap, this)
   && (this != null
     ==> read($Heap, this, _module.Node.Repr)[$Box(this)]
       && !read($Heap, this, _module.Node.Repr)[$Box(null)]
       && (read($Heap, this, _module.Node.left) != null
         ==> read($Heap, this, _module.Node.Repr)[$Box(read($Heap, this, _module.Node.left))]
           && !read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr)[$Box(this)]
           && Set#Subset(read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr), 
            read($Heap, this, _module.Node.Repr)))
       && (read($Heap, this, _module.Node.right) != null
         ==> read($Heap, this, _module.Node.Repr)[$Box(read($Heap, this, _module.Node.right))]
           && !read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)[$Box(this)]
           && Set#Subset(read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr), 
            read($Heap, this, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, this, _module.Node.right))
       && (read($Heap, this, _module.Node.right) != null
           && read($Heap, this, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, this, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
            (if read($Heap, this, _module.Node.left) != null
               then read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, this, _module.Node.right) != null
             then read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, this, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.Node.value))), 
            (if read($Heap, this, _module.Node.left) != null
               then read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, this, _module.Node.right) != null
             then read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, this, _module.Node.left) != null
         ==> (forall i#6: int :: 
          { read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
          true
             ==> 
            read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
             ==> i#6 < read($Heap, this, _module.Node.value)))
       && (read($Heap, this, _module.Node.right) != null
         ==> (forall i#7: int :: 
          { read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
          true
             ==> 
            read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
             ==> read($Heap, this, _module.Node.value) < i#7)));
  free ensures _module.Node.BalanceValid#canCall($Heap, this)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, this)
   && (this != null
     ==> read($Heap, this, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, this, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, this, _module.Node.left))
       && (read($Heap, this, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.Node.left)))
       && (read($Heap, this, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, this, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, this)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, this)
   && (this != null
     ==> (
        read($Heap, this, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, this, _module.Node.balance) == LitInt(0)
         || read($Heap, this, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, this, _module.Node.left)));
  free ensures true;
  ensures read($Heap, this, _module.Node.left) == null;
  ensures read($Heap, this, _module.Node.right) == null;
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.Node.Contents), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(v#0)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Node.Init(this: ref
       where this != null
         && 
        $Is(this, Tclass._module.Node())
         && $IsAlloc(this, Tclass._module.Node(), $Heap), 
    v#0: int)
   returns ($_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 6 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Node.Valid#canCall($Heap, this)
   && (_module.Node.Valid($LS($LZ), $Heap, this)
     ==> _module.Node.BalanceValid#canCall($Heap, this))
   && (_module.Node.Valid($LS($LZ), $Heap, this)
       && _module.Node.BalanceValid($LS($LZ), $Heap, this)
     ==> _module.Node.Balanced#canCall($Heap, this));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null ==> read($Heap, this, _module.Node.Repr)[$Box(this)]);
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null ==> !read($Heap, this, _module.Node.Repr)[$Box(null)]);
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.left) != null
       ==> read($Heap, this, _module.Node.Repr)[$Box(read($Heap, this, _module.Node.left))]);
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.left) != null
       ==> !read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr)[$Box(this)]);
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr), 
        read($Heap, this, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.right) != null
       ==> read($Heap, this, _module.Node.Repr)[$Box(read($Heap, this, _module.Node.right))]);
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.right) != null
       ==> !read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)[$Box(this)]);
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr), 
        read($Heap, this, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.left)));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.right)));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.right) != null
         && read($Heap, this, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> Set#Equal(read($Heap, this, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(this)), 
            (if read($Heap, this, _module.Node.left) != null
               then read($Heap, read($Heap, this, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, this, _module.Node.right) != null
             then read($Heap, read($Heap, this, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> Set#Equal(read($Heap, this, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, this, _module.Node.value))), 
            (if read($Heap, this, _module.Node.left) != null
               then read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, this, _module.Node.right) != null
             then read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.left) != null
       ==> (forall i#8: int :: 
        { read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)[$Box(i#8)] } 
        true
           ==> 
          read($Heap, read($Heap, this, _module.Node.left), _module.Node.Contents)[$Box(i#8)]
           ==> i#8 < read($Heap, this, _module.Node.value)));
  ensures _module.Node.Valid#canCall($Heap, this)
   ==> _module.Node.Valid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.right) != null
       ==> (forall i#9: int :: 
        { read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)[$Box(i#9)] } 
        true
           ==> 
          read($Heap, read($Heap, this, _module.Node.right), _module.Node.Contents)[$Box(i#9)]
           ==> read($Heap, this, _module.Node.value) < i#9));
  ensures _module.Node.BalanceValid#canCall($Heap, this)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, this)
     || (this != null
       ==> read($Heap, this, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, this)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, this)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, this)
     || (this != null
       ==> 
      read($Heap, this, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, this)
   ==> _module.Node.Balanced($LS($LZ), $Heap, this)
     || (this != null
       ==> read($Heap, this, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, this, _module.Node.balance) == LitInt(0)
         || read($Heap, this, _module.Node.balance) == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, this)
   ==> _module.Node.Balanced($LS($LZ), $Heap, this)
     || (this != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, this)
   ==> _module.Node.Balanced($LS($LZ), $Heap, this)
     || (this != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, this, _module.Node.left)));
  free ensures true;
  ensures read($Heap, this, _module.Node.left) == null;
  ensures read($Heap, this, _module.Node.right) == null;
  free ensures true;
  ensures Set#Equal(read($Heap, this, _module.Node.Contents), 
  Set#UnionOne(Set#Empty(): Set Box, $Box(v#0)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == this);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Node.Init(this: ref, v#0: int) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs#0: Set Box
   where $Is($rhs#0, TSet(Tclass._module.Node()))
     && $IsAlloc($rhs#0, TSet(Tclass._module.Node()), $Heap);
  var $rhs#1: Set Box
   where $Is($rhs#1, TSet(TInt)) && $IsAlloc($rhs#1, TSet(TInt), $Heap);
  var $rhs#2: ref
   where $Is($rhs#2, Tclass._module.Node())
     && $IsAlloc($rhs#2, Tclass._module.Node(), $Heap);
  var $rhs#3: ref
   where $Is($rhs#3, Tclass._module.Node())
     && $IsAlloc($rhs#3, Tclass._module.Node(), $Heap);
  var $rhs#4: int;
  var $rhs#5: int;

    // AddMethodImpl: Init, Impl$$_module.Node.Init
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == this);
    assume {:captureState "AVLTree.dfy(177,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(178,12)
    assume true;
    assert $_Frame[this, _module.Node.Repr];
    assume true;
    assert true;
    $rhs#0 := Set#UnionOne(Set#Empty(): Set Box, $Box(this));
    $Heap := update($Heap, this, _module.Node.Repr, $rhs#0);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(178,21)"} true;
    // ----- assignment statement ----- AVLTree.dfy(179,16)
    assume true;
    assert $_Frame[this, _module.Node.Contents];
    assume true;
    assert true;
    $rhs#1 := Set#UnionOne(Set#Empty(): Set Box, $Box(v#0));
    $Heap := update($Heap, this, _module.Node.Contents, $rhs#1);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(179,22)"} true;
    // ----- assignment statement ----- AVLTree.dfy(180,12)
    assume true;
    assert $_Frame[this, _module.Node.left];
    assume true;
    assert true;
    $rhs#2 := null;
    $Heap := update($Heap, this, _module.Node.left, $rhs#2);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(180,19)"} true;
    // ----- assignment statement ----- AVLTree.dfy(181,13)
    assume true;
    assert $_Frame[this, _module.Node.right];
    assume true;
    assert true;
    $rhs#3 := null;
    $Heap := update($Heap, this, _module.Node.right, $rhs#3);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(181,20)"} true;
    // ----- assignment statement ----- AVLTree.dfy(182,13)
    assume true;
    assert $_Frame[this, _module.Node.value];
    assume true;
    assert true;
    $rhs#4 := v#0;
    $Heap := update($Heap, this, _module.Node.value, $rhs#4);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(182,17)"} true;
    // ----- assignment statement ----- AVLTree.dfy(183,15)
    assume true;
    assert $_Frame[this, _module.Node.balance];
    assume true;
    assert true;
    $rhs#5 := LitInt(0);
    $Heap := update($Heap, this, _module.Node.balance, $rhs#5);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(183,19)"} true;
}



// function declaration for _module.Node.Balanced
function _module.Node.Balanced($ly: LayerType, $heap: Heap, n#0: ref) : bool;

function _module.Node.Balanced#canCall($heap: Heap, n#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.Balanced($LS($ly), $Heap, n#0) } 
  _module.Node.Balanced($LS($ly), $Heap, n#0)
     == _module.Node.Balanced($ly, $Heap, n#0));

// frame axiom for _module.Node.Balanced
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, n#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Node.Balanced($ly, $h1, n#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      (_module.Node.Balanced#canCall($h0, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h0)))
       && (_module.Node.Balanced#canCall($h1, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == n#0 || read($h0, n#0, _module.Node.Repr)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Node.Balanced($ly, $h0, n#0) == _module.Node.Balanced($ly, $h1, n#0));

// consequence axiom for _module.Node.Balanced
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 4 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Balanced($LS($ly), $Heap, n#0) } 
    _module.Node.Balanced#canCall($Heap, n#0)
         || ((0 != $ModuleContextHeight || 4 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && 
          _module.Node.Valid($LS($LZ), $Heap, n#0)
           && _module.Node.BalanceValid($LS($LZ), $Heap, n#0))
       ==> true);

function _module.Node.Balanced#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.Balanced#requires($ly, $Heap, n#0) } 
  $IsGoodHeap($Heap)
       && 
      $Is(n#0, Tclass._module.Node())
       && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
     ==> _module.Node.Balanced#requires($ly, $Heap, n#0)
       == (_module.Node.Valid($LS($LZ), $Heap, n#0)
         && _module.Node.BalanceValid($LS($LZ), $Heap, n#0)));

// definition axiom for _module.Node.Balanced (intra-module)
axiom 0 == $ModuleContextHeight && 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Balanced($LS($ly), $Heap, n#0) } 
    _module.Node.Balanced#canCall($Heap, n#0)
         || (4 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && 
          _module.Node.Valid($LS($LZ), $Heap, n#0)
           && _module.Node.BalanceValid($LS($LZ), $Heap, n#0))
       ==> (n#0 != null
           ==> (read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(0)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(1)
               ==> _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right)))
             && ((
                  read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
                   || read($Heap, n#0, _module.Node.balance) == LitInt(0)
                   || read($Heap, n#0, _module.Node.balance) == LitInt(1))
                 && _module.Node.Balanced($ly, $Heap, read($Heap, n#0, _module.Node.right))
               ==> _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))))
         && _module.Node.Balanced($LS($ly), $Heap, n#0)
           == (n#0 != null
             ==> (
                read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(0)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(1))
               && _module.Node.Balanced($ly, $Heap, read($Heap, n#0, _module.Node.right))
               && _module.Node.Balanced($ly, $Heap, read($Heap, n#0, _module.Node.left))));

// definition axiom for _module.Node.Balanced (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Balanced($LS($ly), $Heap, n#0) } 
    _module.Node.Balanced#canCall($Heap, n#0)
         || (
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && 
          _module.Node.Valid($LS($LZ), $Heap, n#0)
           && _module.Node.BalanceValid($LS($LZ), $Heap, n#0))
       ==> (n#0 != null
           ==> (read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(0)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(1)
               ==> _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right)))
             && ((
                  read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
                   || read($Heap, n#0, _module.Node.balance) == LitInt(0)
                   || read($Heap, n#0, _module.Node.balance) == LitInt(1))
                 && _module.Node.Balanced($ly, $Heap, read($Heap, n#0, _module.Node.right))
               ==> _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))))
         && _module.Node.Balanced($LS($ly), $Heap, n#0)
           == (n#0 != null
             ==> (
                read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(0)
                 || read($Heap, n#0, _module.Node.balance) == LitInt(1))
               && _module.Node.Balanced($ly, $Heap, read($Heap, n#0, _module.Node.right))
               && _module.Node.Balanced($ly, $Heap, read($Heap, n#0, _module.Node.left))));

procedure CheckWellformed$$_module.Node.Balanced(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 4 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.Balanced(n#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var ##n#2: ref;
  var ##n#3: ref;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;

    // AddWellformednessCheck for function Balanced
    assume {:captureState "AVLTree.dfy(185,19): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
    assert true;
    ##n#0 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#0 || read($Heap, ##n#0, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.Node.Valid#canCall($Heap, n#0);
    assume _module.Node.Valid($LS($LZ), $Heap, n#0);
    assert true;
    ##n#1 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
    b$reqreads#1 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#1 || read($Heap, ##n#1, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.Node.BalanceValid#canCall($Heap, n#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, n#0);
    assert b$reqreads#0;
    assert b$reqreads#1;
    assert n#0 != null;
    b$reqreads#2 := $_Frame[n#0, _module.Node.Repr];
    assert b$reqreads#2;
    if (n#0 != null)
    {
        assert n#0 != null;
    }
    else
    {
    }

    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
        if (n#0 != null)
        {
            assert n#0 != null;
            b$reqreads#3 := $_Frame[n#0, _module.Node.balance];
            if (read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
   || read($Heap, n#0, _module.Node.balance) == LitInt(0)
   || read($Heap, n#0, _module.Node.balance) == LitInt(1))
            {
                assert n#0 != null;
                b$reqreads#4 := $_Frame[n#0, _module.Node.right];
                assert true;
                ##n#2 := read($Heap, n#0, _module.Node.right);
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> read($Heap, ##n#2, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
                assume _module.Node.Valid($LS($LZ), $Heap, ##n#2)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2);
                b$reqreads#5 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#2 || read($Heap, ##n#2, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assert Set#Subset((if ##n#2 != null
       then read($Heap, ##n#2, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#2 != null
       then read($Heap, ##n#2, _module.Node.Repr)
       else Set#Empty(): Set Box));
                assume _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right));
            }

            if ((
    read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
     || read($Heap, n#0, _module.Node.balance) == LitInt(0)
     || read($Heap, n#0, _module.Node.balance) == LitInt(1))
   && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right)))
            {
                assert n#0 != null;
                b$reqreads#6 := $_Frame[n#0, _module.Node.left];
                assert true;
                ##n#3 := read($Heap, n#0, _module.Node.left);
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(##n#3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> !read($Heap, ##n#3, _module.Node.Repr)[$Box(null)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.left))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)[$Box(##n#3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.right))]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)[$Box(##n#3)]);
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
         && read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#3)), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#3, _module.Node.value))), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#3, _module.Node.value)));
                assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#3, _module.Node.value) < i#5));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> read($Heap, ##n#3, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
                assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
                assume _module.Node.Valid($LS($LZ), $Heap, ##n#3)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3);
                b$reqreads#7 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#3 || read($Heap, ##n#3, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assert Set#Subset((if ##n#3 != null
       then read($Heap, ##n#3, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#3 != null
       then read($Heap, ##n#3, _module.Node.Repr)
       else Set#Empty(): Set Box));
                assume _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left));
            }
        }

        assert true;
        assume _module.Node.Balanced($LS($LZ), $Heap, n#0)
   == (n#0 != null
     ==> (
        read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)));
        assume n#0 != null
   ==> (read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1)
       ==> _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right)))
     && ((
          read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
           || read($Heap, n#0, _module.Node.balance) == LitInt(0)
           || read($Heap, n#0, _module.Node.balance) == LitInt(1))
         && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       ==> _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left)));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.Node.Balanced($LS($LZ), $Heap, n#0), TBool, $Heap);
        assume $Is(_module.Node.Balanced($LS($LZ), $Heap, n#0), TBool);
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
    }
}



// function declaration for _module.Node.BalanceValid
function _module.Node.BalanceValid($ly: LayerType, $heap: Heap, n#0: ref) : bool;

function _module.Node.BalanceValid#canCall($heap: Heap, n#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.BalanceValid($LS($ly), $Heap, n#0) } 
  _module.Node.BalanceValid($LS($ly), $Heap, n#0)
     == _module.Node.BalanceValid($ly, $Heap, n#0));

// frame axiom for _module.Node.BalanceValid
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, n#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Node.BalanceValid($ly, $h1, n#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      (_module.Node.BalanceValid#canCall($h0, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h0)))
       && (_module.Node.BalanceValid#canCall($h1, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == n#0 || read($h0, n#0, _module.Node.Repr)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Node.BalanceValid($ly, $h0, n#0)
       == _module.Node.BalanceValid($ly, $h1, n#0));

// consequence axiom for _module.Node.BalanceValid
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 3 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.BalanceValid($LS($ly), $Heap, n#0) } 
    _module.Node.BalanceValid#canCall($Heap, n#0)
         || ((0 != $ModuleContextHeight || 3 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && _module.Node.Valid($LS($LZ), $Heap, n#0))
       ==> true);

function _module.Node.BalanceValid#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.BalanceValid#requires($ly, $Heap, n#0) } 
  $IsGoodHeap($Heap)
       && 
      $Is(n#0, Tclass._module.Node())
       && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
     ==> _module.Node.BalanceValid#requires($ly, $Heap, n#0)
       == _module.Node.Valid($LS($LZ), $Heap, n#0));

// definition axiom for _module.Node.BalanceValid (intra-module)
axiom 0 == $ModuleContextHeight && 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.BalanceValid($LS($ly), $Heap, n#0) } 
    _module.Node.BalanceValid#canCall($Heap, n#0)
         || (3 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && _module.Node.Valid($LS($LZ), $Heap, n#0))
       ==> (n#0 != null
           ==> _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right))
             && _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left))
             && (read($Heap, n#0, _module.Node.balance)
                 == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
                   - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
               ==> 
              read($Heap, n#0, _module.Node.left) != null
               ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left)))
             && (read($Heap, n#0, _module.Node.balance)
                   == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
                     - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> _module.Node.BalanceValid($ly, $Heap, read($Heap, n#0, _module.Node.left)))
               ==> 
              read($Heap, n#0, _module.Node.right) != null
               ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))))
         && _module.Node.BalanceValid($LS($ly), $Heap, n#0)
           == (n#0 != null
             ==> read($Heap, n#0, _module.Node.balance)
                 == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
                   - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
               && (read($Heap, n#0, _module.Node.left) != null
                 ==> _module.Node.BalanceValid($ly, $Heap, read($Heap, n#0, _module.Node.left)))
               && (read($Heap, n#0, _module.Node.right) != null
                 ==> _module.Node.BalanceValid($ly, $Heap, read($Heap, n#0, _module.Node.right)))));

// definition axiom for _module.Node.BalanceValid (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.BalanceValid($LS($ly), $Heap, n#0) } 
    _module.Node.BalanceValid#canCall($Heap, n#0)
         || (
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && _module.Node.Valid($LS($LZ), $Heap, n#0))
       ==> (n#0 != null
           ==> _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right))
             && _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left))
             && (read($Heap, n#0, _module.Node.balance)
                 == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
                   - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
               ==> 
              read($Heap, n#0, _module.Node.left) != null
               ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left)))
             && (read($Heap, n#0, _module.Node.balance)
                   == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
                     - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> _module.Node.BalanceValid($ly, $Heap, read($Heap, n#0, _module.Node.left)))
               ==> 
              read($Heap, n#0, _module.Node.right) != null
               ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))))
         && _module.Node.BalanceValid($LS($ly), $Heap, n#0)
           == (n#0 != null
             ==> read($Heap, n#0, _module.Node.balance)
                 == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
                   - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
               && (read($Heap, n#0, _module.Node.left) != null
                 ==> _module.Node.BalanceValid($ly, $Heap, read($Heap, n#0, _module.Node.left)))
               && (read($Heap, n#0, _module.Node.right) != null
                 ==> _module.Node.BalanceValid($ly, $Heap, read($Heap, n#0, _module.Node.right)))));

procedure CheckWellformed$$_module.Node.BalanceValid(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 3 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.BalanceValid(n#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##n#3: ref;
  var ##n#4: ref;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;

    // AddWellformednessCheck for function BalanceValid
    assume {:captureState "AVLTree.dfy(192,19): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
    assert true;
    ##n#0 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#0 || read($Heap, ##n#0, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.Node.Valid#canCall($Heap, n#0);
    assume _module.Node.Valid($LS($LZ), $Heap, n#0);
    assert b$reqreads#0;
    assert n#0 != null;
    b$reqreads#1 := $_Frame[n#0, _module.Node.Repr];
    assert b$reqreads#1;
    if (n#0 != null)
    {
        assert n#0 != null;
    }
    else
    {
    }

    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
        if (n#0 != null)
        {
            assert n#0 != null;
            b$reqreads#2 := $_Frame[n#0, _module.Node.balance];
            assert n#0 != null;
            b$reqreads#3 := $_Frame[n#0, _module.Node.right];
            assert true;
            ##n#1 := read($Heap, n#0, _module.Node.right);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
            assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
            b$reqreads#4 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && read($Heap, ##n#1, _module.Node.Repr)[$Box($o)]
     ==> $_Frame[$o, $f]);
            assume _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right));
            assert n#0 != null;
            b$reqreads#5 := $_Frame[n#0, _module.Node.left];
            assert true;
            ##n#2 := read($Heap, n#0, _module.Node.left);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
            assume _module.Node.Valid($LS($LZ), $Heap, ##n#2);
            b$reqreads#6 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && read($Heap, ##n#2, _module.Node.Repr)[$Box($o)]
     ==> $_Frame[$o, $f]);
            assume _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left));
            if (read($Heap, n#0, _module.Node.balance)
   == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
            {
                assert n#0 != null;
                b$reqreads#7 := $_Frame[n#0, _module.Node.left];
                if (read($Heap, n#0, _module.Node.left) != null)
                {
                    assert n#0 != null;
                    b$reqreads#8 := $_Frame[n#0, _module.Node.left];
                    assert true;
                    ##n#3 := read($Heap, n#0, _module.Node.left);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(##n#3)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> !read($Heap, ##n#3, _module.Node.Repr)[$Box(null)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.left))]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)[$Box(##n#3)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.right))]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)[$Box(##n#3)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
         && read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#3)), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#3, _module.Node.value))), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#3, _module.Node.value)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#3, _module.Node.value) < i#5));
                    assume _module.Node.Valid($LS($LZ), $Heap, ##n#3);
                    b$reqreads#9 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#3 || read($Heap, ##n#3, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
                    assert Set#Subset((if ##n#3 != null
       then read($Heap, ##n#3, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#3 != null
       then read($Heap, ##n#3, _module.Node.Repr)
       else Set#Empty(): Set Box));
                    assume _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left));
                }
            }

            if (read($Heap, n#0, _module.Node.balance)
     == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && (read($Heap, n#0, _module.Node.left) != null
     ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))))
            {
                assert n#0 != null;
                b$reqreads#10 := $_Frame[n#0, _module.Node.right];
                if (read($Heap, n#0, _module.Node.right) != null)
                {
                    assert n#0 != null;
                    b$reqreads#11 := $_Frame[n#0, _module.Node.right];
                    assert true;
                    ##n#4 := read($Heap, n#0, _module.Node.right);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#4, Tclass._module.Node(), $Heap);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(##n#4)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> !read($Heap, ##n#4, _module.Node.Repr)[$Box(null)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.left))]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)[$Box(##n#4)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.right))]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)[$Box(##n#4)]);
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
         && read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#4)), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#4, _module.Node.value))), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, ##n#4, _module.Node.value)));
                    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, ##n#4, _module.Node.value) < i#7));
                    assume _module.Node.Valid($LS($LZ), $Heap, ##n#4);
                    b$reqreads#12 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#4 || read($Heap, ##n#4, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
                    assert Set#Subset((if ##n#4 != null
       then read($Heap, ##n#4, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#4 != null
       then read($Heap, ##n#4, _module.Node.Repr)
       else Set#Empty(): Set Box));
                    assume _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right));
                }
            }
        }

        assert true;
        assume _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
   == (n#0 != null
     ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))));
        assume n#0 != null
   ==> _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right))
     && _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left))
     && (read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left)))
     && (read($Heap, n#0, _module.Node.balance)
           == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
             - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
         && (read($Heap, n#0, _module.Node.left) != null
           ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right)));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.Node.BalanceValid($LS($LZ), $Heap, n#0), TBool, $Heap);
        assume $Is(_module.Node.BalanceValid($LS($LZ), $Heap, n#0), TBool);
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
        assert b$reqreads#10;
        assert b$reqreads#11;
        assert b$reqreads#12;
    }
}



// function declaration for _module.Node.Height
function _module.Node.Height($ly: LayerType, $heap: Heap, n#0: ref) : int;

function _module.Node.Height#canCall($heap: Heap, n#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.Height($LS($ly), $Heap, n#0) } 
  _module.Node.Height($LS($ly), $Heap, n#0)
     == _module.Node.Height($ly, $Heap, n#0));

// frame axiom for _module.Node.Height
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, n#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Node.Height($ly, $h1, n#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      (_module.Node.Height#canCall($h0, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h0)))
       && (_module.Node.Height#canCall($h1, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && read($h0, n#0, _module.Node.Repr)[$Box($o)]
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Node.Height($ly, $h0, n#0) == _module.Node.Height($ly, $h1, n#0));

// consequence axiom for _module.Node.Height
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 2 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Height($LS($ly), $Heap, n#0) } 
    _module.Node.Height#canCall($Heap, n#0)
         || ((0 != $ModuleContextHeight || 2 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && _module.Node.Valid($LS($LZ), $Heap, n#0))
       ==> 0 <= _module.Node.Height($LS($ly), $Heap, n#0));

function _module.Node.Height#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.Height#requires($ly, $Heap, n#0) } 
  $IsGoodHeap($Heap)
       && 
      $Is(n#0, Tclass._module.Node())
       && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
     ==> _module.Node.Height#requires($ly, $Heap, n#0)
       == _module.Node.Valid($LS($LZ), $Heap, n#0));

// definition axiom for _module.Node.Height (intra-module)
axiom 0 == $ModuleContextHeight && 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Height($LS($ly), $Heap, n#0) } 
    _module.Node.Height#canCall($Heap, n#0)
         || (2 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && _module.Node.Valid($LS($LZ), $Heap, n#0))
       ==> (n#0 != null
           ==> _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left))
             && _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right))
             && _module.Math.max#canCall($Heap, 
              _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.left)), 
              _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.right))))
         && _module.Node.Height($LS($ly), $Heap, n#0)
           == (if n#0 == null
             then 0
             else _module.Math.max($LS($LZ), 
                $Heap, 
                _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.left)), 
                _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.right)))
               + 1));

// definition axiom for _module.Node.Height (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Height($LS($ly), $Heap, n#0) } 
    _module.Node.Height#canCall($Heap, n#0)
         || (
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
           && _module.Node.Valid($LS($LZ), $Heap, n#0))
       ==> (n#0 != null
           ==> _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left))
             && _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right))
             && _module.Math.max#canCall($Heap, 
              _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.left)), 
              _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.right))))
         && _module.Node.Height($LS($ly), $Heap, n#0)
           == (if n#0 == null
             then 0
             else _module.Math.max($LS($LZ), 
                $Heap, 
                _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.left)), 
                _module.Node.Height($ly, $Heap, read($Heap, n#0, _module.Node.right)))
               + 1));

procedure CheckWellformed$$_module.Node.Height(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.Height(n#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##a#0: int;
  var ##b#0: int;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;

    // AddWellformednessCheck for function Height
    assume {:captureState "AVLTree.dfy(204,19): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
    assert true;
    ##n#0 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#0 || read($Heap, ##n#0, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
    assume _module.Node.Valid#canCall($Heap, n#0);
    assume _module.Node.Valid($LS($LZ), $Heap, n#0);
    assert b$reqreads#0;
    assert n#0 != null;
    b$reqreads#1 := $_Frame[n#0, _module.Node.Repr];
    assert b$reqreads#1;
    if (n#0 != null)
    {
        assert n#0 != null;
    }
    else
    {
    }

    if (*)
    {
        assume 0 <= _module.Node.Height($LS($LZ), $Heap, n#0);
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
        if (n#0 == null)
        {
            assert $Is(LitInt(0), TNat);
            assume _module.Node.Height($LS($LZ), $Heap, n#0) == LitInt(0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.Node.Height($LS($LZ), $Heap, n#0), TNat, $Heap);
            assume $Is(_module.Node.Height($LS($LZ), $Heap, n#0), TNat);
        }
        else
        {
            assert n#0 != null;
            b$reqreads#2 := $_Frame[n#0, _module.Node.left];
            assert true;
            ##n#1 := read($Heap, n#0, _module.Node.left);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
            assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
            b$reqreads#3 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && read($Heap, ##n#1, _module.Node.Repr)[$Box($o)]
     ==> $_Frame[$o, $f]);
            assert Set#Subset((if ##n#1 != null
       then read($Heap, ##n#1, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#1 != null
       then read($Heap, ##n#1, _module.Node.Repr)
       else Set#Empty(): Set Box));
            assume _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left));
            assert n#0 != null;
            b$reqreads#4 := $_Frame[n#0, _module.Node.right];
            assert true;
            ##n#2 := read($Heap, n#0, _module.Node.right);
            // assume allocatedness for argument to function
            assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
            assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
            assume _module.Node.Valid($LS($LZ), $Heap, ##n#2);
            b$reqreads#5 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && read($Heap, ##n#2, _module.Node.Repr)[$Box($o)]
     ==> $_Frame[$o, $f]);
            assert Set#Subset((if ##n#2 != null
       then read($Heap, ##n#2, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#2 != null
       then read($Heap, ##n#2, _module.Node.Repr)
       else Set#Empty(): Set Box));
            assume _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right));
            assert $Is(_module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)), TNat);
            ##a#0 := _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left));
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0, TNat, $Heap);
            assert $Is(_module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right)), TNat);
            ##b#0 := _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right));
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0, TNat, $Heap);
            b$reqreads#6 := (forall<alpha> $o: ref, $f: Field alpha :: false ==> $_Frame[$o, $f]);
            assume _module.Math.max#canCall($Heap, 
  _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)), 
  _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right)));
            assert $Is(_module.Math.max($LS($LZ), 
      $Heap, 
      _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)), 
      _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right)))
     + 1, 
  TNat);
            assume _module.Node.Height($LS($LZ), $Heap, n#0)
   == _module.Math.max($LS($LZ), 
      $Heap, 
      _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)), 
      _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right)))
     + 1;
            assume _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.left))
   && _module.Node.Height#canCall($Heap, read($Heap, n#0, _module.Node.right))
   && _module.Math.max#canCall($Heap, 
    _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)), 
    _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right)));
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.Node.Height($LS($LZ), $Heap, n#0), TNat, $Heap);
            assume $Is(_module.Node.Height($LS($LZ), $Heap, n#0), TNat);
        }

        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
    }
}



// function declaration for _module.Node.Valid
function _module.Node.Valid($ly: LayerType, $heap: Heap, n#0: ref) : bool;

function _module.Node.Valid#canCall($heap: Heap, n#0: ref) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.Valid($LS($ly), $Heap, n#0) } 
  _module.Node.Valid($LS($ly), $Heap, n#0) == _module.Node.Valid($ly, $Heap, n#0));

// frame axiom for _module.Node.Valid
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, n#0: ref :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Node.Valid($ly, $h1, n#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      (_module.Node.Valid#canCall($h0, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h0)))
       && (_module.Node.Valid#canCall($h1, n#0)
         || ($Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $h1)))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      $o != null
           && 
          read($h0, $o, alloc)
           && read($h1, $o, alloc)
           && ($o == n#0 || read($h0, n#0, _module.Node.Repr)[$Box($o)])
         ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Node.Valid($ly, $h0, n#0) == _module.Node.Valid($ly, $h1, n#0));

// consequence axiom for _module.Node.Valid
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 0 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Valid($LS($ly), $Heap, n#0) } 
    _module.Node.Valid#canCall($Heap, n#0)
         || ((0 != $ModuleContextHeight || 0 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
       ==> true);

function _module.Node.Valid#requires(LayerType, Heap, ref) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
  { _module.Node.Valid#requires($ly, $Heap, n#0) } 
  $IsGoodHeap($Heap)
       && 
      $Is(n#0, Tclass._module.Node())
       && $IsAlloc(n#0, Tclass._module.Node(), $Heap)
     ==> _module.Node.Valid#requires($ly, $Heap, n#0) == true);

// definition axiom for _module.Node.Valid (intra-module)
axiom 0 == $ModuleContextHeight && 0 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Valid($LS($ly), $Heap, n#0) } 
    _module.Node.Valid#canCall($Heap, n#0)
         || (0 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
       ==> (n#0 != null
           ==> (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
                 && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                     && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && (read($Heap, n#0, _module.Node.right) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                     && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
               ==> _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.left))
                 && (_module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
                   ==> _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.right))))
             && (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
                 && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                     && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && (read($Heap, n#0, _module.Node.right) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                     && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && 
                _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
                 && _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.right))
                 && (read($Heap, n#0, _module.Node.right) != null
                     && read($Heap, n#0, _module.Node.left) != null
                   ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
                       else Set#Empty(): Set Box)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
                       else Set#Empty(): Set Box)))
               ==> 
              read($Heap, n#0, _module.Node.left) != null
               ==> (forall i#0: int :: 
                { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
                true))
             && (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
                 && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                     && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && (read($Heap, n#0, _module.Node.right) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                     && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && 
                _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
                 && _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.right))
                 && (read($Heap, n#0, _module.Node.right) != null
                     && read($Heap, n#0, _module.Node.left) != null
                   ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
                       else Set#Empty(): Set Box)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
                       else Set#Empty(): Set Box)))
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> (forall i#0: int :: 
                    { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
                    true
                       ==> 
                      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
                       ==> i#0 < read($Heap, n#0, _module.Node.value)))
               ==> 
              read($Heap, n#0, _module.Node.right) != null
               ==> (forall i#1: int :: 
                { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
                true)))
         && _module.Node.Valid($LS($ly), $Heap, n#0)
           == (n#0 != null
             ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
               && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
               && (read($Heap, n#0, _module.Node.left) != null
                 ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                   && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                   && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                    read($Heap, n#0, _module.Node.Repr)))
               && (read($Heap, n#0, _module.Node.right) != null
                 ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                   && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                   && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                    read($Heap, n#0, _module.Node.Repr)))
               && 
              _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
               && _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.right))
               && (read($Heap, n#0, _module.Node.right) != null
                   && read($Heap, n#0, _module.Node.left) != null
                 ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                  read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
               && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
                Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
                    (if read($Heap, n#0, _module.Node.left) != null
                       then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                       else Set#Empty(): Set Box)), 
                  (if read($Heap, n#0, _module.Node.right) != null
                     then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
                     else Set#Empty(): Set Box)))
               && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
                Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
                    (if read($Heap, n#0, _module.Node.left) != null
                       then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                       else Set#Empty(): Set Box)), 
                  (if read($Heap, n#0, _module.Node.right) != null
                     then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
                     else Set#Empty(): Set Box)))
               && (read($Heap, n#0, _module.Node.left) != null
                 ==> (forall i#0: int :: 
                  { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
                  true
                     ==> 
                    read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
                     ==> i#0 < read($Heap, n#0, _module.Node.value)))
               && (read($Heap, n#0, _module.Node.right) != null
                 ==> (forall i#1: int :: 
                  { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
                  true
                     ==> 
                    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
                     ==> read($Heap, n#0, _module.Node.value) < i#1))));

// definition axiom for _module.Node.Valid (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, n#0: ref :: 
    { _module.Node.Valid($LS($ly), $Heap, n#0) } 
    _module.Node.Valid#canCall($Heap, n#0)
         || ($IsGoodHeap($Heap)
           && 
          $Is(n#0, Tclass._module.Node())
           && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
       ==> (n#0 != null
           ==> (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
                 && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                     && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && (read($Heap, n#0, _module.Node.right) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                     && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
               ==> _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.left))
                 && (_module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
                   ==> _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.right))))
             && (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
                 && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                     && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && (read($Heap, n#0, _module.Node.right) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                     && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && 
                _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
                 && _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.right))
                 && (read($Heap, n#0, _module.Node.right) != null
                     && read($Heap, n#0, _module.Node.left) != null
                   ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
                       else Set#Empty(): Set Box)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
                       else Set#Empty(): Set Box)))
               ==> 
              read($Heap, n#0, _module.Node.left) != null
               ==> (forall i#2: int :: 
                { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
                true))
             && (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
                 && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                     && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && (read($Heap, n#0, _module.Node.right) != null
                   ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                     && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                     && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                      read($Heap, n#0, _module.Node.Repr)))
                 && 
                _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
                 && _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.right))
                 && (read($Heap, n#0, _module.Node.right) != null
                     && read($Heap, n#0, _module.Node.left) != null
                   ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
                       else Set#Empty(): Set Box)))
                 && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
                  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
                      (if read($Heap, n#0, _module.Node.left) != null
                         then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                         else Set#Empty(): Set Box)), 
                    (if read($Heap, n#0, _module.Node.right) != null
                       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
                       else Set#Empty(): Set Box)))
                 && (read($Heap, n#0, _module.Node.left) != null
                   ==> (forall i#2: int :: 
                    { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
                    true
                       ==> 
                      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
                       ==> i#2 < read($Heap, n#0, _module.Node.value)))
               ==> 
              read($Heap, n#0, _module.Node.right) != null
               ==> (forall i#3: int :: 
                { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
                true)))
         && _module.Node.Valid($LS($ly), $Heap, n#0)
           == (n#0 != null
             ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
               && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
               && (read($Heap, n#0, _module.Node.left) != null
                 ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
                   && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
                   && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                    read($Heap, n#0, _module.Node.Repr)))
               && (read($Heap, n#0, _module.Node.right) != null
                 ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
                   && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
                   && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
                    read($Heap, n#0, _module.Node.Repr)))
               && 
              _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.left))
               && _module.Node.Valid($ly, $Heap, read($Heap, n#0, _module.Node.right))
               && (read($Heap, n#0, _module.Node.right) != null
                   && read($Heap, n#0, _module.Node.left) != null
                 ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
                  read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
               && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
                Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
                    (if read($Heap, n#0, _module.Node.left) != null
                       then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                       else Set#Empty(): Set Box)), 
                  (if read($Heap, n#0, _module.Node.right) != null
                     then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
                     else Set#Empty(): Set Box)))
               && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
                Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
                    (if read($Heap, n#0, _module.Node.left) != null
                       then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                       else Set#Empty(): Set Box)), 
                  (if read($Heap, n#0, _module.Node.right) != null
                     then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
                     else Set#Empty(): Set Box)))
               && (read($Heap, n#0, _module.Node.left) != null
                 ==> (forall i#2: int :: 
                  { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
                  true
                     ==> 
                    read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
                     ==> i#2 < read($Heap, n#0, _module.Node.value)))
               && (read($Heap, n#0, _module.Node.right) != null
                 ==> (forall i#3: int :: 
                  { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
                  true
                     ==> 
                    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
                     ==> read($Heap, n#0, _module.Node.value) < i#3))));

procedure CheckWellformed$$_module.Node.Valid(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 0 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.Valid(n#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var b$reqreads#0: bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var i#4: int;
  var i#5: int;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var b$reqreads#3: bool;
  var b$reqreads#4: bool;
  var b$reqreads#5: bool;
  var b$reqreads#6: bool;
  var b$reqreads#7: bool;
  var b$reqreads#8: bool;
  var b$reqreads#9: bool;
  var b$reqreads#10: bool;
  var b$reqreads#11: bool;
  var b$reqreads#12: bool;
  var b$reqreads#13: bool;
  var b$reqreads#14: bool;
  var b$reqreads#15: bool;
  var b$reqreads#16: bool;
  var b$reqreads#17: bool;
  var b$reqreads#18: bool;
  var b$reqreads#19: bool;
  var b$reqreads#20: bool;
  var b$reqreads#21: bool;
  var b$reqreads#22: bool;
  var b$reqreads#23: bool;
  var b$reqreads#24: bool;
  var b$reqreads#25: bool;
  var b$reqreads#26: bool;
  var b$reqreads#27: bool;
  var b$reqreads#28: bool;
  var b$reqreads#29: bool;
  var b$reqreads#30: bool;
  var b$reqreads#31: bool;
  var b$reqreads#32: bool;
  var b$reqreads#33: bool;
  var b$reqreads#34: bool;
  var b$reqreads#35: bool;
  var b$reqreads#36: bool;
  var b$reqreads#37: bool;
  var b$reqreads#38: bool;
  var b$reqreads#39: bool;
  var b$reqreads#40: bool;
  var b$reqreads#41: bool;
  var b$reqreads#42: bool;
  var b$reqreads#43: bool;
  var b$reqreads#44: bool;
  var b$reqreads#45: bool;
  var b$reqreads#46: bool;
  var b$reqreads#47: bool;
  var b$reqreads#48: bool;
  var b$reqreads#49: bool;
  var b$reqreads#50: bool;
  var b$reqreads#51: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;
    b$reqreads#4 := true;
    b$reqreads#5 := true;
    b$reqreads#6 := true;
    b$reqreads#7 := true;
    b$reqreads#8 := true;
    b$reqreads#9 := true;
    b$reqreads#10 := true;
    b$reqreads#11 := true;
    b$reqreads#12 := true;
    b$reqreads#13 := true;
    b$reqreads#14 := true;
    b$reqreads#15 := true;
    b$reqreads#16 := true;
    b$reqreads#17 := true;
    b$reqreads#18 := true;
    b$reqreads#19 := true;
    b$reqreads#20 := true;
    b$reqreads#21 := true;
    b$reqreads#22 := true;
    b$reqreads#23 := true;
    b$reqreads#24 := true;
    b$reqreads#25 := true;
    b$reqreads#26 := true;
    b$reqreads#27 := true;
    b$reqreads#28 := true;
    b$reqreads#29 := true;
    b$reqreads#30 := true;
    b$reqreads#31 := true;
    b$reqreads#32 := true;
    b$reqreads#33 := true;
    b$reqreads#34 := true;
    b$reqreads#35 := true;
    b$reqreads#36 := true;
    b$reqreads#37 := true;
    b$reqreads#38 := true;
    b$reqreads#39 := true;
    b$reqreads#40 := true;
    b$reqreads#41 := true;
    b$reqreads#42 := true;
    b$reqreads#43 := true;
    b$reqreads#44 := true;
    b$reqreads#45 := true;
    b$reqreads#46 := true;
    b$reqreads#47 := true;
    b$reqreads#48 := true;
    b$reqreads#49 := true;
    b$reqreads#50 := true;
    b$reqreads#51 := true;

    // AddWellformednessCheck for function Valid
    assume {:captureState "AVLTree.dfy(211,19): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
    assert n#0 != null;
    b$reqreads#0 := $_Frame[n#0, _module.Node.Repr];
    assert b$reqreads#0;
    if (n#0 != null)
    {
        assert n#0 != null;
    }
    else
    {
    }

    if (*)
    {
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || read($Heap, n#0, _module.Node.Repr)[$Box($o)]);
        if (n#0 != null)
        {
            assert n#0 != null;
            b$reqreads#1 := $_Frame[n#0, _module.Node.Repr];
            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)])
            {
                assert n#0 != null;
                b$reqreads#2 := $_Frame[n#0, _module.Node.Repr];
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)])
            {
                assert n#0 != null;
                b$reqreads#3 := $_Frame[n#0, _module.Node.left];
                if (read($Heap, n#0, _module.Node.left) != null)
                {
                    assert n#0 != null;
                    b$reqreads#4 := $_Frame[n#0, _module.Node.left];
                    assert n#0 != null;
                    b$reqreads#5 := $_Frame[n#0, _module.Node.Repr];
                    if (read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))])
                    {
                        assert n#0 != null;
                        b$reqreads#6 := $_Frame[n#0, _module.Node.left];
                        assert read($Heap, n#0, _module.Node.left) != null;
                        b$reqreads#7 := $_Frame[read($Heap, n#0, _module.Node.left), _module.Node.Repr];
                    }

                    if (read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
   && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)])
                    {
                        assert n#0 != null;
                        b$reqreads#8 := $_Frame[n#0, _module.Node.left];
                        assert read($Heap, n#0, _module.Node.left) != null;
                        b$reqreads#9 := $_Frame[read($Heap, n#0, _module.Node.left), _module.Node.Repr];
                        assert n#0 != null;
                        b$reqreads#10 := $_Frame[n#0, _module.Node.Repr];
                    }
                }
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
       && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr))))
            {
                assert n#0 != null;
                b$reqreads#11 := $_Frame[n#0, _module.Node.right];
                if (read($Heap, n#0, _module.Node.right) != null)
                {
                    assert n#0 != null;
                    b$reqreads#12 := $_Frame[n#0, _module.Node.right];
                    assert n#0 != null;
                    b$reqreads#13 := $_Frame[n#0, _module.Node.Repr];
                    if (read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))])
                    {
                        assert n#0 != null;
                        b$reqreads#14 := $_Frame[n#0, _module.Node.right];
                        assert read($Heap, n#0, _module.Node.right) != null;
                        b$reqreads#15 := $_Frame[read($Heap, n#0, _module.Node.right), _module.Node.Repr];
                    }

                    if (read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
   && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)])
                    {
                        assert n#0 != null;
                        b$reqreads#16 := $_Frame[n#0, _module.Node.right];
                        assert read($Heap, n#0, _module.Node.right) != null;
                        b$reqreads#17 := $_Frame[read($Heap, n#0, _module.Node.right), _module.Node.Repr];
                        assert n#0 != null;
                        b$reqreads#18 := $_Frame[n#0, _module.Node.Repr];
                    }
                }
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
       && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
       && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr))))
            {
                assert n#0 != null;
                b$reqreads#19 := $_Frame[n#0, _module.Node.left];
                assert true;
                ##n#0 := read($Heap, n#0, _module.Node.left);
                // assume allocatedness for argument to function
                assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
                b$reqreads#20 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#0 || read($Heap, ##n#0, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
                assert Set#Subset((if ##n#0 != null
       then read($Heap, ##n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#0 != null
       then read($Heap, ##n#0, _module.Node.Repr)
       else Set#Empty(): Set Box));
                assume _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.left));
                if (_module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
                {
                    assert n#0 != null;
                    b$reqreads#21 := $_Frame[n#0, _module.Node.right];
                    assert true;
                    ##n#1 := read($Heap, n#0, _module.Node.right);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
                    b$reqreads#22 := (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null
       && read($Heap, $o, alloc)
       && ($o == ##n#1 || read($Heap, ##n#1, _module.Node.Repr)[$Box($o)])
     ==> $_Frame[$o, $f]);
                    assert Set#Subset((if ##n#1 != null
       then read($Heap, ##n#1, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box))
   && !Set#Subset((if n#0 != null
       then read($Heap, n#0, _module.Node.Repr)
       else Set#Empty(): Set Box), 
    (if ##n#1 != null
       then read($Heap, ##n#1, _module.Node.Repr)
       else Set#Empty(): Set Box));
                    assume _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.right));
                }
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
       && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
       && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && 
  _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right)))
            {
                assert n#0 != null;
                b$reqreads#23 := $_Frame[n#0, _module.Node.right];
                if (read($Heap, n#0, _module.Node.right) != null)
                {
                    assert n#0 != null;
                    b$reqreads#24 := $_Frame[n#0, _module.Node.left];
                }

                if (read($Heap, n#0, _module.Node.right) != null
   && read($Heap, n#0, _module.Node.left) != null)
                {
                    assert n#0 != null;
                    b$reqreads#25 := $_Frame[n#0, _module.Node.left];
                    assert read($Heap, n#0, _module.Node.left) != null;
                    b$reqreads#26 := $_Frame[read($Heap, n#0, _module.Node.left), _module.Node.Repr];
                    assert n#0 != null;
                    b$reqreads#27 := $_Frame[n#0, _module.Node.right];
                    assert read($Heap, n#0, _module.Node.right) != null;
                    b$reqreads#28 := $_Frame[read($Heap, n#0, _module.Node.right), _module.Node.Repr];
                }
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
       && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
       && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && 
  _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
   && (read($Heap, n#0, _module.Node.right) != null
       && read($Heap, n#0, _module.Node.left) != null
     ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr))))
            {
                assert n#0 != null;
                b$reqreads#29 := $_Frame[n#0, _module.Node.Repr];
                assert n#0 != null;
                b$reqreads#30 := $_Frame[n#0, _module.Node.left];
                if (read($Heap, n#0, _module.Node.left) != null)
                {
                    assert n#0 != null;
                    b$reqreads#31 := $_Frame[n#0, _module.Node.left];
                    assert read($Heap, n#0, _module.Node.left) != null;
                    b$reqreads#32 := $_Frame[read($Heap, n#0, _module.Node.left), _module.Node.Repr];
                }
                else
                {
                }

                assert n#0 != null;
                b$reqreads#33 := $_Frame[n#0, _module.Node.right];
                if (read($Heap, n#0, _module.Node.right) != null)
                {
                    assert n#0 != null;
                    b$reqreads#34 := $_Frame[n#0, _module.Node.right];
                    assert read($Heap, n#0, _module.Node.right) != null;
                    b$reqreads#35 := $_Frame[read($Heap, n#0, _module.Node.right), _module.Node.Repr];
                }
                else
                {
                }
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
       && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
       && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && 
  _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
   && (read($Heap, n#0, _module.Node.right) != null
       && read($Heap, n#0, _module.Node.left) != null
     ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
   && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
    Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
        (if read($Heap, n#0, _module.Node.left) != null
           then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
           else Set#Empty(): Set Box)), 
      (if read($Heap, n#0, _module.Node.right) != null
         then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
         else Set#Empty(): Set Box))))
            {
                assert n#0 != null;
                b$reqreads#36 := $_Frame[n#0, _module.Node.Contents];
                assert n#0 != null;
                b$reqreads#37 := $_Frame[n#0, _module.Node.value];
                assert n#0 != null;
                b$reqreads#38 := $_Frame[n#0, _module.Node.left];
                if (read($Heap, n#0, _module.Node.left) != null)
                {
                    assert n#0 != null;
                    b$reqreads#39 := $_Frame[n#0, _module.Node.left];
                    assert read($Heap, n#0, _module.Node.left) != null;
                    b$reqreads#40 := $_Frame[read($Heap, n#0, _module.Node.left), _module.Node.Contents];
                }
                else
                {
                }

                assert n#0 != null;
                b$reqreads#41 := $_Frame[n#0, _module.Node.right];
                if (read($Heap, n#0, _module.Node.right) != null)
                {
                    assert n#0 != null;
                    b$reqreads#42 := $_Frame[n#0, _module.Node.right];
                    assert read($Heap, n#0, _module.Node.right) != null;
                    b$reqreads#43 := $_Frame[read($Heap, n#0, _module.Node.right), _module.Node.Contents];
                }
                else
                {
                }
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
       && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
       && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && 
  _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
   && (read($Heap, n#0, _module.Node.right) != null
       && read($Heap, n#0, _module.Node.left) != null
     ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
   && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
    Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
        (if read($Heap, n#0, _module.Node.left) != null
           then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
           else Set#Empty(): Set Box)), 
      (if read($Heap, n#0, _module.Node.right) != null
         then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
         else Set#Empty(): Set Box)))
   && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
    Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
        (if read($Heap, n#0, _module.Node.left) != null
           then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
           else Set#Empty(): Set Box)), 
      (if read($Heap, n#0, _module.Node.right) != null
         then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
         else Set#Empty(): Set Box))))
            {
                assert n#0 != null;
                b$reqreads#44 := $_Frame[n#0, _module.Node.left];
                if (read($Heap, n#0, _module.Node.left) != null)
                {
                    havoc i#4;
                    // Begin Comprehension WF check
                    assert n#0 != null;
                    b$reqreads#45 := $_Frame[n#0, _module.Node.left];
                    assert read($Heap, n#0, _module.Node.left) != null;
                    b$reqreads#46 := $_Frame[read($Heap, n#0, _module.Node.left), _module.Node.Contents];
                    if (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#4)])
                    {
                        assert n#0 != null;
                        b$reqreads#47 := $_Frame[n#0, _module.Node.value];
                    }

                    // End Comprehension WF check
                }
            }

            if (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
   && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
       && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
       && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
       && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)))
   && 
  _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
   && (read($Heap, n#0, _module.Node.right) != null
       && read($Heap, n#0, _module.Node.left) != null
     ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
   && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
    Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
        (if read($Heap, n#0, _module.Node.left) != null
           then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
           else Set#Empty(): Set Box)), 
      (if read($Heap, n#0, _module.Node.right) != null
         then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
         else Set#Empty(): Set Box)))
   && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
    Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
        (if read($Heap, n#0, _module.Node.left) != null
           then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
           else Set#Empty(): Set Box)), 
      (if read($Heap, n#0, _module.Node.right) != null
         then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
         else Set#Empty(): Set Box)))
   && (read($Heap, n#0, _module.Node.left) != null
     ==> (forall i#6: int :: 
      { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
      true
         ==> 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
         ==> i#6 < read($Heap, n#0, _module.Node.value))))
            {
                assert n#0 != null;
                b$reqreads#48 := $_Frame[n#0, _module.Node.right];
                if (read($Heap, n#0, _module.Node.right) != null)
                {
                    havoc i#5;
                    // Begin Comprehension WF check
                    assert n#0 != null;
                    b$reqreads#49 := $_Frame[n#0, _module.Node.right];
                    assert read($Heap, n#0, _module.Node.right) != null;
                    b$reqreads#50 := $_Frame[read($Heap, n#0, _module.Node.right), _module.Node.Contents];
                    if (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#5)])
                    {
                        assert n#0 != null;
                        b$reqreads#51 := $_Frame[n#0, _module.Node.value];
                    }

                    // End Comprehension WF check
                }
            }
        }

        assert true;
        assume _module.Node.Valid($LS($LZ), $Heap, n#0)
   == (n#0 != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
       && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, n#0, _module.Node.left) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
           && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
           && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && (read($Heap, n#0, _module.Node.right) != null
           && read($Heap, n#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> (forall i#6: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
             ==> i#6 < read($Heap, n#0, _module.Node.value)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> (forall i#7: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
             ==> read($Heap, n#0, _module.Node.value) < i#7)));
        assume n#0 != null
   ==> (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
         && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
         && (read($Heap, n#0, _module.Node.left) != null
           ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
             && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
             && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
              read($Heap, n#0, _module.Node.Repr)))
         && (read($Heap, n#0, _module.Node.right) != null
           ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
             && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
             && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
              read($Heap, n#0, _module.Node.Repr)))
       ==> _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.left))
         && (_module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
           ==> _module.Node.Valid#canCall($Heap, read($Heap, n#0, _module.Node.right))))
     && (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
         && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
         && (read($Heap, n#0, _module.Node.left) != null
           ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
             && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
             && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
              read($Heap, n#0, _module.Node.Repr)))
         && (read($Heap, n#0, _module.Node.right) != null
           ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
             && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
             && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
              read($Heap, n#0, _module.Node.Repr)))
         && 
        _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
         && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
         && (read($Heap, n#0, _module.Node.right) != null
             && read($Heap, n#0, _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
         && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
          Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
              (if read($Heap, n#0, _module.Node.left) != null
                 then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                 else Set#Empty(): Set Box)), 
            (if read($Heap, n#0, _module.Node.right) != null
               then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
               else Set#Empty(): Set Box)))
         && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
          Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
              (if read($Heap, n#0, _module.Node.left) != null
                 then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                 else Set#Empty(): Set Box)), 
            (if read($Heap, n#0, _module.Node.right) != null
               then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
               else Set#Empty(): Set Box)))
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true))
     && (read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
         && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
         && (read($Heap, n#0, _module.Node.left) != null
           ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
             && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
             && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
              read($Heap, n#0, _module.Node.Repr)))
         && (read($Heap, n#0, _module.Node.right) != null
           ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
             && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
             && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
              read($Heap, n#0, _module.Node.Repr)))
         && 
        _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
         && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
         && (read($Heap, n#0, _module.Node.right) != null
             && read($Heap, n#0, _module.Node.left) != null
           ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
         && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
          Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
              (if read($Heap, n#0, _module.Node.left) != null
                 then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
                 else Set#Empty(): Set Box)), 
            (if read($Heap, n#0, _module.Node.right) != null
               then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
               else Set#Empty(): Set Box)))
         && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
          Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
              (if read($Heap, n#0, _module.Node.left) != null
                 then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
                 else Set#Empty(): Set Box)), 
            (if read($Heap, n#0, _module.Node.right) != null
               then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
               else Set#Empty(): Set Box)))
         && (read($Heap, n#0, _module.Node.left) != null
           ==> (forall i#6: int :: 
            { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
            true
               ==> 
              read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
               ==> i#6 < read($Heap, n#0, _module.Node.value)))
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true));
        // CheckWellformedWithResult: any expression
        assume $IsAlloc(_module.Node.Valid($LS($LZ), $Heap, n#0), TBool, $Heap);
        assume $Is(_module.Node.Valid($LS($LZ), $Heap, n#0), TBool);
        assert b$reqreads#1;
        assert b$reqreads#2;
        assert b$reqreads#3;
        assert b$reqreads#4;
        assert b$reqreads#5;
        assert b$reqreads#6;
        assert b$reqreads#7;
        assert b$reqreads#8;
        assert b$reqreads#9;
        assert b$reqreads#10;
        assert b$reqreads#11;
        assert b$reqreads#12;
        assert b$reqreads#13;
        assert b$reqreads#14;
        assert b$reqreads#15;
        assert b$reqreads#16;
        assert b$reqreads#17;
        assert b$reqreads#18;
        assert b$reqreads#19;
        assert b$reqreads#20;
        assert b$reqreads#21;
        assert b$reqreads#22;
        assert b$reqreads#23;
        assert b$reqreads#24;
        assert b$reqreads#25;
        assert b$reqreads#26;
        assert b$reqreads#27;
        assert b$reqreads#28;
        assert b$reqreads#29;
        assert b$reqreads#30;
        assert b$reqreads#31;
        assert b$reqreads#32;
        assert b$reqreads#33;
        assert b$reqreads#34;
        assert b$reqreads#35;
        assert b$reqreads#36;
        assert b$reqreads#37;
        assert b$reqreads#38;
        assert b$reqreads#39;
        assert b$reqreads#40;
        assert b$reqreads#41;
        assert b$reqreads#42;
        assert b$reqreads#43;
        assert b$reqreads#44;
        assert b$reqreads#45;
        assert b$reqreads#46;
        assert b$reqreads#47;
        assert b$reqreads#48;
        assert b$reqreads#49;
        assert b$reqreads#50;
        assert b$reqreads#51;
    }
}



procedure CheckWellformed$$_module.Node.WeakRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 12 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.WeakRightRotation(n#0: ref) returns (r#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##n#3: ref;
  var ##n#4: ref;
  var ##n#5: ref;
  var ##n#6: ref;
  var ##n#7: ref;
  var ##n#8: ref;

    // AddMethodImpl: WeakRightRotation, CheckWellformed$$_module.Node.WeakRightRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.left));
    assume {:captureState "AVLTree.dfy(232,17): initial state"} true;
    assume n#0 != null;
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.left) != null;
    assert true;
    ##n#0 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, n#0);
    assume _module.Node.Valid($LS($LZ), $Heap, n#0);
    assert true;
    ##n#1 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
    assume _module.Node.BalanceValid#canCall($Heap, n#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, n#0);
    assert true;
    ##n#2 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> read($Heap, ##n#2, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#2)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2);
    assume _module.Node.Balanced#canCall($Heap, n#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, n#0);
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1);
    assert n#0 != null;
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
    assume $HeapSucc(old($Heap), $Heap);
    havoc r#0;
    assume {:captureState "AVLTree.dfy(239,64): post-state"} true;
    assert n#0 != null;
    assume r#0 == read(old($Heap), n#0, _module.Node.left);
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
    assert true;
    ##n#3 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, r#0);
    assume _module.Node.Valid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#4 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#4, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> !read($Heap, ##n#4, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
         && read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#4)), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#4, _module.Node.value))), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#4, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#4, _module.Node.value) < i#5));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#4);
    assume _module.Node.BalanceValid#canCall($Heap, r#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, r#0);
    assert r#0 != null;
    assert true;
    ##n#5 := read($Heap, r#0, _module.Node.left);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#5, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> !read($Heap, ##n#5, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
         && read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#5)), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#5, _module.Node.value))), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, ##n#5, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, ##n#5, _module.Node.value) < i#7));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> read($Heap, ##n#5, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#5)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left));
    assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left));
    assert r#0 != null;
    assert true;
    ##n#6 := read($Heap, r#0, _module.Node.right);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#6, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> !read($Heap, ##n#6, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
         && read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#6)), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#6, _module.Node.value))), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> (forall i#8: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#8)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#8)]
           ==> i#8 < read($Heap, ##n#6, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> (forall i#9: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#9)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#9)]
           ==> read($Heap, ##n#6, _module.Node.value) < i#9));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#6)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> read($Heap, ##n#6, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#6)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#6)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#6)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right));
    assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right));
    assert true;
    ##n#7 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#7, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> !read($Heap, ##n#7, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
         && read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#7)), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#7, _module.Node.value))), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> (forall i#10: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)]
           ==> i#10 < read($Heap, ##n#7, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> (forall i#11: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)]
           ==> read($Heap, ##n#7, _module.Node.value) < i#11));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#7);
    assume _module.Node.Height#canCall($Heap, r#0);
    assert true;
    ##n#8 := n#0;
    assert $Is(n#0, Tclass._module.Node())
   && $IsAlloc(n#0, Tclass._module.Node(), old($Heap));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null ==> read(old($Heap), ##n#8, _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null ==> !read(old($Heap), ##n#8, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> read(old($Heap), ##n#8, _module.Node.Repr)[$Box(read(old($Heap), ##n#8, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> !read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> read(old($Heap), ##n#8, _module.Node.Repr)[$Box(read(old($Heap), ##n#8, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> !read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr), 
        read(old($Heap), ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#8, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
         && read(old($Heap), ##n#8, _module.Node.left) != null
       ==> Set#Disjoint(read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read(old($Heap), ##n#8, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#8)), 
            (if read(old($Heap), ##n#8, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#8, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read(old($Heap), ##n#8, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read(old($Heap), ##n#8, _module.Node.value))), 
            (if read(old($Heap), ##n#8, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#8, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> (forall i#12: int :: 
        { read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)]
           ==> i#12 < read(old($Heap), ##n#8, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> (forall i#13: int :: 
        { read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)]
           ==> read(old($Heap), ##n#8, _module.Node.value) < i#13));
    assume _module.Node.Valid($LS($LZ), old($Heap), ##n#8);
    assume _module.Node.Height#canCall(old($Heap), n#0);
    assume _module.Node.Height($LS($LZ), $Heap, r#0)
   == _module.Node.Height($LS($LZ), old($Heap), n#0);
    if (*)
    {
        assert r#0 != null;
        assume read($Heap, r#0, _module.Node.balance) == LitInt(1);
    }
    else
    {
        assume read($Heap, r#0, _module.Node.balance) != LitInt(1);
        assert r#0 != null;
        assume read($Heap, r#0, _module.Node.balance) == LitInt(2);
    }
}



procedure InterModuleCall$$_module.Node.WeakRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.left) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#14: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#14)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#14)]
           ==> i#14 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#15: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#15)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#15)]
           ==> read($Heap, n#0, _module.Node.value) < i#15));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.left);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#16: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#16)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#16)]
             ==> i#16 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#17: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#17)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#17)]
             ==> read($Heap, r#0, _module.Node.value) < i#17)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && (_module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     ==> _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
   && (read($Heap, r#0, _module.Node.left) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.left)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
   && (read($Heap, r#0, _module.Node.right) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(1)
   || read($Heap, r#0, _module.Node.balance) == LitInt(2);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.Node.WeakRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.left) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#18: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)]
           ==> i#18 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#19: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)]
           ==> read($Heap, n#0, _module.Node.value) < i#19));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.left);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#20: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)]
             ==> i#20 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#21: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)]
             ==> read($Heap, r#0, _module.Node.value) < i#21)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && (_module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     ==> _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
   && (read($Heap, r#0, _module.Node.left) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.left)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
   && (read($Heap, r#0, _module.Node.right) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(1)
   || read($Heap, r#0, _module.Node.balance) == LitInt(2);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Node.WeakRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 12 == $FunctionContextHeight;
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.left) != null;
  free requires _module.Node.Valid#canCall($Heap, n#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
       && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, n#0, _module.Node.left) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
           && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
           && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && (read($Heap, n#0, _module.Node.right) != null
           && read($Heap, n#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> (forall i#22: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)]
             ==> i#22 < read($Heap, n#0, _module.Node.value)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> (forall i#23: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)]
             ==> read($Heap, n#0, _module.Node.value) < i#23)));
  free requires _module.Node.BalanceValid#canCall($Heap, n#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))));
  free requires _module.Node.Balanced#canCall($Heap, n#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> (
        read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.left);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> !read($Heap, r#0, _module.Node.Repr)[$Box(null)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
         && read($Heap, r#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> (forall i#24: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)]
           ==> i#24 < read($Heap, r#0, _module.Node.value)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> (forall i#25: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)]
           ==> read($Heap, r#0, _module.Node.value) < i#25));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && (_module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     ==> _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     || (read($Heap, r#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     || (read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     || (read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.left)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
     || (read($Heap, r#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
     || (read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
     || (read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(1)
   || read($Heap, r#0, _module.Node.balance) == LitInt(2);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Node.WeakRightRotation(n#0: ref) returns (r#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var a#0: ref
   where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap);
  var b#0: ref
   where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap);
  var c#0: ref
   where $Is(c#0, Tclass._module.Node()) && $IsAlloc(c#0, Tclass._module.Node(), $Heap);
  var $rhs#0: ref
   where $Is($rhs#0, Tclass._module.Node())
     && $IsAlloc($rhs#0, Tclass._module.Node(), $Heap);
  var $rhs#1: ref
   where $Is($rhs#1, Tclass._module.Node())
     && $IsAlloc($rhs#1, Tclass._module.Node(), $Heap);
  var $rhs#2: ref
   where $Is($rhs#2, Tclass._module.Node())
     && $IsAlloc($rhs#2, Tclass._module.Node(), $Heap);
  var a##0: ref;
  var b##0: ref;
  var x##0: ref;
  var d##0: int;
  var a##1: ref;
  var b##1: ref;
  var x##1: ref;
  var d##1: int;

    // AddMethodImpl: WeakRightRotation, Impl$$_module.Node.WeakRightRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.left));
    assume {:captureState "AVLTree.dfy(246,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(247,9)
    assume true;
    assert n#0 != null;
    assume true;
    assert true;
    r#0 := read($Heap, n#0, _module.Node.left);
    assume {:captureState "AVLTree.dfy(247,18)"} true;
    // ----- assert statement ----- AVLTree.dfy(248,7)
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} r#0 != null;
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} n#0 != null;
    if (read($Heap, n#0, _module.Node.right) != null)
    {
        assert {:subsumption 0} n#0 != null;
        assert {:subsumption 0} read($Heap, n#0, _module.Node.right) != null;
    }
    else
    {
    }

    assume true;
    assert Set#Equal(read($Heap, n#0, _module.Node.Contents), 
  Set#Union(Set#Union(read($Heap, r#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value)))), 
    (if read($Heap, n#0, _module.Node.right) != null
       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
       else Set#Empty(): Set Box)));
    // ----- update statement ----- AVLTree.dfy(249,19)
    assume true;
    assume true;
    assume true;
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#0 := read($Heap, r#0, _module.Node.left);
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#1 := read($Heap, r#0, _module.Node.right);
    assert n#0 != null;
    assume true;
    assert true;
    $rhs#2 := read($Heap, n#0, _module.Node.right);
    a#0 := $rhs#0;
    b#0 := $rhs#1;
    c#0 := $rhs#2;
    assume {:captureState "AVLTree.dfy(249,46)"} true;
    // ----- call statement ----- AVLTree.dfy(250,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##0 := b#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##0 := c#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##0 := n#0;
    assert r#0 != null;
    if (read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1))
    {
    }
    else
    {
    }

    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##0 := (if read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1) then 1 else 0);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##0 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##0, b##0, x##0, d##0);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(250,64)"} true;
    // ----- call statement ----- AVLTree.dfy(251,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##1 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##1 := n#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##1 := r#0;
    assert r#0 != null;
    if (read($Heap, r#0, _module.Node.balance) == LitInt(1))
    {
    }
    else
    {
    }

    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##1 := (if read($Heap, r#0, _module.Node.balance) == LitInt(1) then 2 else 1);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##1 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##1, b##1, x##1, d##1);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(251,63)"} true;
}



procedure CheckWellformed$$_module.Node.WeakLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 10 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.WeakLeftRotation(n#0: ref) returns (r#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##n#3: ref;
  var ##n#4: ref;
  var ##n#5: ref;
  var ##n#6: ref;
  var ##n#7: ref;
  var ##n#8: ref;

    // AddMethodImpl: WeakLeftRotation, CheckWellformed$$_module.Node.WeakLeftRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.right));
    assume {:captureState "AVLTree.dfy(254,17): initial state"} true;
    assume n#0 != null;
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.right) != null;
    assert true;
    ##n#0 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, n#0);
    assume _module.Node.Valid($LS($LZ), $Heap, n#0);
    assert true;
    ##n#1 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
    assume _module.Node.BalanceValid#canCall($Heap, n#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, n#0);
    assert true;
    ##n#2 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> read($Heap, ##n#2, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#2)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#2)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#2);
    assume _module.Node.Balanced#canCall($Heap, n#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, n#0);
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.balance) == LitInt(1);
    assert n#0 != null;
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
    assume $HeapSucc(old($Heap), $Heap);
    havoc r#0;
    assume {:captureState "AVLTree.dfy(261,65): post-state"} true;
    assert n#0 != null;
    assume r#0 == read(old($Heap), n#0, _module.Node.right);
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
    assert true;
    ##n#3 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, r#0);
    assume _module.Node.Valid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#4 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#4, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> !read($Heap, ##n#4, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
         && read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#4)), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#4, _module.Node.value))), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#4, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#4, _module.Node.value) < i#5));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#4);
    assume _module.Node.BalanceValid#canCall($Heap, r#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, r#0);
    assert r#0 != null;
    assert true;
    ##n#5 := read($Heap, r#0, _module.Node.left);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#5, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> !read($Heap, ##n#5, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
         && read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#5)), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#5, _module.Node.value))), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, ##n#5, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, ##n#5, _module.Node.value) < i#7));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> read($Heap, ##n#5, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#5)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left));
    assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left));
    assert r#0 != null;
    assert true;
    ##n#6 := read($Heap, r#0, _module.Node.right);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#6, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> !read($Heap, ##n#6, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
         && read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#6)), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#6, _module.Node.value))), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> (forall i#8: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#8)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#8)]
           ==> i#8 < read($Heap, ##n#6, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> (forall i#9: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#9)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#9)]
           ==> read($Heap, ##n#6, _module.Node.value) < i#9));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#6)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> read($Heap, ##n#6, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#6)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#6)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#6)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#6);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right));
    assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right));
    assert true;
    ##n#7 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#7, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> !read($Heap, ##n#7, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
         && read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#7)), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#7, _module.Node.value))), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> (forall i#10: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)]
           ==> i#10 < read($Heap, ##n#7, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> (forall i#11: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)]
           ==> read($Heap, ##n#7, _module.Node.value) < i#11));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#7);
    assume _module.Node.Height#canCall($Heap, r#0);
    assert true;
    ##n#8 := n#0;
    assert $Is(n#0, Tclass._module.Node())
   && $IsAlloc(n#0, Tclass._module.Node(), old($Heap));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null ==> read(old($Heap), ##n#8, _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null ==> !read(old($Heap), ##n#8, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> read(old($Heap), ##n#8, _module.Node.Repr)[$Box(read(old($Heap), ##n#8, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> !read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> read(old($Heap), ##n#8, _module.Node.Repr)[$Box(read(old($Heap), ##n#8, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> !read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr), 
        read(old($Heap), ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#8, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
         && read(old($Heap), ##n#8, _module.Node.left) != null
       ==> Set#Disjoint(read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read(old($Heap), ##n#8, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#8)), 
            (if read(old($Heap), ##n#8, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#8, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read(old($Heap), ##n#8, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read(old($Heap), ##n#8, _module.Node.value))), 
            (if read(old($Heap), ##n#8, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#8, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.left) != null
       ==> (forall i#12: int :: 
        { read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)]
           ==> i#12 < read(old($Heap), ##n#8, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#8)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#8)
     || (##n#8 != null
       ==> 
      read(old($Heap), ##n#8, _module.Node.right) != null
       ==> (forall i#13: int :: 
        { read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)]
           ==> read(old($Heap), ##n#8, _module.Node.value) < i#13));
    assume _module.Node.Valid($LS($LZ), old($Heap), ##n#8);
    assume _module.Node.Height#canCall(old($Heap), n#0);
    assume _module.Node.Height($LS($LZ), $Heap, r#0)
   == _module.Node.Height($LS($LZ), old($Heap), n#0);
    if (*)
    {
        assert r#0 != null;
        assume read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1);
    }
    else
    {
        assume read($Heap, r#0, _module.Node.balance) != LitInt(0 - 1);
        assert r#0 != null;
        assume read($Heap, r#0, _module.Node.balance) == LitInt(0 - 2);
    }
}



procedure InterModuleCall$$_module.Node.WeakLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.right) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#14: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#14)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#14)]
           ==> i#14 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#15: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#15)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#15)]
           ==> read($Heap, n#0, _module.Node.value) < i#15));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(1);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.right);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#16: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#16)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#16)]
             ==> i#16 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#17: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#17)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#17)]
             ==> read($Heap, r#0, _module.Node.value) < i#17)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && (_module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     ==> _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
   && (read($Heap, r#0, _module.Node.left) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.left)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
   && (read($Heap, r#0, _module.Node.right) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
   || read($Heap, r#0, _module.Node.balance) == LitInt(0 - 2);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.Node.WeakLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.right) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#18: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)]
           ==> i#18 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#19: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)]
           ==> read($Heap, n#0, _module.Node.value) < i#19));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, n#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(1);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.right);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#20: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)]
             ==> i#20 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#21: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)]
             ==> read($Heap, r#0, _module.Node.value) < i#21)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && (_module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     ==> _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
   && (read($Heap, r#0, _module.Node.left) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.left)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
   && (read($Heap, r#0, _module.Node.right) != null
     ==> (
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
   || read($Heap, r#0, _module.Node.balance) == LitInt(0 - 2);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Node.WeakLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 10 == $FunctionContextHeight;
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.right) != null;
  free requires _module.Node.Valid#canCall($Heap, n#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
       && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, n#0, _module.Node.left) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
           && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
           && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && (read($Heap, n#0, _module.Node.right) != null
           && read($Heap, n#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> (forall i#22: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)]
             ==> i#22 < read($Heap, n#0, _module.Node.value)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> (forall i#23: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)]
             ==> read($Heap, n#0, _module.Node.value) < i#23)));
  free requires _module.Node.BalanceValid#canCall($Heap, n#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))));
  free requires _module.Node.Balanced#canCall($Heap, n#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> (
        read($Heap, n#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, n#0, _module.Node.balance) == LitInt(0)
         || read($Heap, n#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(1);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.right);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> !read($Heap, r#0, _module.Node.Repr)[$Box(null)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
         && read($Heap, r#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> (forall i#24: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)]
           ==> i#24 < read($Heap, r#0, _module.Node.value)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> (forall i#25: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)]
           ==> read($Heap, r#0, _module.Node.value) < i#25));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  free ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   && (_module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     ==> _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     || (read($Heap, r#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.balance)
           == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     || (read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
     || (read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.left)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
     || (read($Heap, r#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.balance)
           == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
     || (read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, read($Heap, r#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
     || (read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0)
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
   || read($Heap, r#0, _module.Node.balance) == LitInt(0 - 2);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Node.WeakLeftRotation(n#0: ref) returns (r#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var a#0: ref
   where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap);
  var b#0: ref
   where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap);
  var c#0: ref
   where $Is(c#0, Tclass._module.Node()) && $IsAlloc(c#0, Tclass._module.Node(), $Heap);
  var $rhs#0: ref
   where $Is($rhs#0, Tclass._module.Node())
     && $IsAlloc($rhs#0, Tclass._module.Node(), $Heap);
  var $rhs#1: ref
   where $Is($rhs#1, Tclass._module.Node())
     && $IsAlloc($rhs#1, Tclass._module.Node(), $Heap);
  var $rhs#2: ref
   where $Is($rhs#2, Tclass._module.Node())
     && $IsAlloc($rhs#2, Tclass._module.Node(), $Heap);
  var a##0: ref;
  var b##0: ref;
  var x##0: ref;
  var d##0: int;
  var a##1: ref;
  var b##1: ref;
  var x##1: ref;
  var d##1: int;

    // AddMethodImpl: WeakLeftRotation, Impl$$_module.Node.WeakLeftRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.right));
    assume {:captureState "AVLTree.dfy(268,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(269,9)
    assume true;
    assert n#0 != null;
    assume true;
    assert true;
    r#0 := read($Heap, n#0, _module.Node.right);
    assume {:captureState "AVLTree.dfy(269,19)"} true;
    // ----- assert statement ----- AVLTree.dfy(270,7)
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} r#0 != null;
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} n#0 != null;
    if (read($Heap, n#0, _module.Node.left) != null)
    {
        assert {:subsumption 0} n#0 != null;
        assert {:subsumption 0} read($Heap, n#0, _module.Node.left) != null;
    }
    else
    {
    }

    assume true;
    assert Set#Equal(read($Heap, n#0, _module.Node.Contents), 
  Set#Union(Set#Union(read($Heap, r#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value)))), 
    (if read($Heap, n#0, _module.Node.left) != null
       then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
       else Set#Empty(): Set Box)));
    // ----- update statement ----- AVLTree.dfy(271,19)
    assume true;
    assume true;
    assume true;
    assert n#0 != null;
    assume true;
    assert true;
    $rhs#0 := read($Heap, n#0, _module.Node.left);
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#1 := read($Heap, r#0, _module.Node.left);
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#2 := read($Heap, r#0, _module.Node.right);
    a#0 := $rhs#0;
    b#0 := $rhs#1;
    c#0 := $rhs#2;
    assume {:captureState "AVLTree.dfy(271,45)"} true;
    // ----- call statement ----- AVLTree.dfy(272,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##0 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##0 := b#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##0 := n#0;
    assert r#0 != null;
    if (read($Heap, r#0, _module.Node.balance) == LitInt(1))
    {
    }
    else
    {
    }

    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##0 := (if read($Heap, r#0, _module.Node.balance) == LitInt(1) then 0 - 1 else 0);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##0 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##0, b##0, x##0, d##0);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(272,64)"} true;
    // ----- call statement ----- AVLTree.dfy(273,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##1 := n#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##1 := c#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##1 := r#0;
    assert r#0 != null;
    if (read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1))
    {
    }
    else
    {
    }

    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##1 := (if read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
   then 0 - 2
   else 0 - 1);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##1 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##1, b##1, x##1, d##1);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(273,66)"} true;
}



procedure CheckWellformed$$_module.Node.StrongRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 11 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.StrongRightRotation(n#0: ref) returns (r#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##n#3: ref;
  var ##n#4: ref;
  var ##n#5: ref;
  var ##n#6: ref;
  var ##n#7: ref;
  var ##n#8: ref;
  var ##n#9: ref;
  var ##n#10: ref;

    // AddMethodImpl: StrongRightRotation, CheckWellformed$$_module.Node.StrongRightRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.left));
    assume {:captureState "AVLTree.dfy(275,17): initial state"} true;
    assume n#0 != null;
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.left) != null;
    assert true;
    ##n#0 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, n#0);
    assume _module.Node.Valid($LS($LZ), $Heap, n#0);
    assert true;
    ##n#1 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
    assume _module.Node.BalanceValid#canCall($Heap, n#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, n#0);
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.balance) == LitInt(0 - 2);
    if (*)
    {
        assert n#0 != null;
        assert read($Heap, n#0, _module.Node.left) != null;
        assume read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
   == LitInt(0 - 1);
    }
    else
    {
        assume read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
   != LitInt(0 - 1);
        assert n#0 != null;
        assert read($Heap, n#0, _module.Node.left) != null;
        assume read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
   == LitInt(0 - 2);
    }

    assert n#0 != null;
    assert true;
    ##n#2 := read($Heap, n#0, _module.Node.left);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#2);
    assume _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left));
    assume _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left));
    assert n#0 != null;
    assert read($Heap, n#0, _module.Node.left) != null;
    assert true;
    ##n#3 := read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> !read($Heap, ##n#3, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
         && read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#3)), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#3, _module.Node.value))), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#3, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#3, _module.Node.value) < i#5));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> read($Heap, ##n#3, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#3)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right));
    assume _module.Node.Balanced($LS($LZ), 
  $Heap, 
  read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right));
    assert n#0 != null;
    assert read($Heap, n#0, _module.Node.left) != null;
    assert true;
    ##n#4 := read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#4, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> !read($Heap, ##n#4, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
         && read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#4)), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#4, _module.Node.value))), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, ##n#4, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, ##n#4, _module.Node.value) < i#7));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> read($Heap, ##n#4, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#4)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left));
    assume _module.Node.Balanced($LS($LZ), 
  $Heap, 
  read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left));
    assert n#0 != null;
    assert true;
    ##n#5 := read($Heap, n#0, _module.Node.right);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#5, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> !read($Heap, ##n#5, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
         && read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#5)), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#5, _module.Node.value))), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> (forall i#8: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#8)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#8)]
           ==> i#8 < read($Heap, ##n#5, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> (forall i#9: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#9)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#9)]
           ==> read($Heap, ##n#5, _module.Node.value) < i#9));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> read($Heap, ##n#5, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#5)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right));
    assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right));
    assert n#0 != null;
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
    assume $HeapSucc(old($Heap), $Heap);
    havoc r#0;
    assume {:captureState "AVLTree.dfy(284,64): post-state"} true;
    assert n#0 != null;
    assume r#0 == read(old($Heap), n#0, _module.Node.left);
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
    assert true;
    ##n#6 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#6, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, r#0);
    assume _module.Node.Valid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#7 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#7, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> !read($Heap, ##n#7, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
         && read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#7)), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#7, _module.Node.value))), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> (forall i#10: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)]
           ==> i#10 < read($Heap, ##n#7, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> (forall i#11: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)]
           ==> read($Heap, ##n#7, _module.Node.value) < i#11));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#7);
    assume _module.Node.BalanceValid#canCall($Heap, r#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#8 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#8, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null ==> read($Heap, ##n#8, _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null ==> !read($Heap, ##n#8, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> read($Heap, ##n#8, _module.Node.Repr)[$Box(read($Heap, ##n#8, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> read($Heap, ##n#8, _module.Node.Repr)[$Box(read($Heap, ##n#8, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
         && read($Heap, ##n#8, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read($Heap, ##n#8, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#8)), 
            (if read($Heap, ##n#8, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#8, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read($Heap, ##n#8, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#8, _module.Node.value))), 
            (if read($Heap, ##n#8, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#8, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> (forall i#12: int :: 
        { read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)]
           ==> i#12 < read($Heap, ##n#8, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> (forall i#13: int :: 
        { read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)]
           ==> read($Heap, ##n#8, _module.Node.value) < i#13));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#8)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> read($Heap, ##n#8, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#8)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#8)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#8)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8);
    assume _module.Node.Balanced#canCall($Heap, r#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, r#0);
    assert true;
    ##n#9 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#9, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null ==> !read($Heap, ##n#9, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(read($Heap, ##n#9, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#9, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(read($Heap, ##n#9, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#9, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#9, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#9, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
         && read($Heap, ##n#9, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> Set#Equal(read($Heap, ##n#9, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#9)), 
            (if read($Heap, ##n#9, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#9, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> Set#Equal(read($Heap, ##n#9, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#9, _module.Node.value))), 
            (if read($Heap, ##n#9, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#9, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> (forall i#14: int :: 
        { read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)[$Box(i#14)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)[$Box(i#14)]
           ==> i#14 < read($Heap, ##n#9, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> (forall i#15: int :: 
        { read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)[$Box(i#15)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)[$Box(i#15)]
           ==> read($Heap, ##n#9, _module.Node.value) < i#15));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#9);
    assume _module.Node.Height#canCall($Heap, r#0);
    assert true;
    ##n#10 := n#0;
    assert $Is(n#0, Tclass._module.Node())
   && $IsAlloc(n#0, Tclass._module.Node(), old($Heap));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null ==> read(old($Heap), ##n#10, _module.Node.Repr)[$Box(##n#10)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null ==> !read(old($Heap), ##n#10, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> read(old($Heap), ##n#10, _module.Node.Repr)[$Box(read(old($Heap), ##n#10, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> !read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr)[$Box(##n#10)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), ##n#10, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> read(old($Heap), ##n#10, _module.Node.Repr)[$Box(read(old($Heap), ##n#10, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> !read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr)[$Box(##n#10)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr), 
        read(old($Heap), ##n#10, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#10, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#10, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
         && read(old($Heap), ##n#10, _module.Node.left) != null
       ==> Set#Disjoint(read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> Set#Equal(read(old($Heap), ##n#10, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#10)), 
            (if read(old($Heap), ##n#10, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#10, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> Set#Equal(read(old($Heap), ##n#10, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read(old($Heap), ##n#10, _module.Node.value))), 
            (if read(old($Heap), ##n#10, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#10, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> (forall i#16: int :: 
        { read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Contents)[$Box(i#16)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Contents)[$Box(i#16)]
           ==> i#16 < read(old($Heap), ##n#10, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> (forall i#17: int :: 
        { read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Contents)[$Box(i#17)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Contents)[$Box(i#17)]
           ==> read(old($Heap), ##n#10, _module.Node.value) < i#17));
    assume _module.Node.Valid($LS($LZ), old($Heap), ##n#10);
    assume _module.Node.Height#canCall(old($Heap), n#0);
    assume _module.Node.Height($LS($LZ), $Heap, r#0) + 1
   == _module.Node.Height($LS($LZ), old($Heap), n#0);
    assert r#0 != null;
    assume read($Heap, r#0, _module.Node.balance) == LitInt(0);
}



procedure InterModuleCall$$_module.Node.StrongRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.left) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#18: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)]
           ==> i#18 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#19: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)]
           ==> read($Heap, n#0, _module.Node.value) < i#19));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(0 - 2);
  requires read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
     == LitInt(0 - 1)
   || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
     == LitInt(0 - 2);
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.left);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#20: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)]
             ==> i#20 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#21: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)]
             ==> read($Heap, r#0, _module.Node.value) < i#21)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, r#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> (
        read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0) + 1
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.Node.StrongRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.left) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#22: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)]
           ==> i#22 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#23: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)]
           ==> read($Heap, n#0, _module.Node.value) < i#23));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(0 - 2);
  requires read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
     == LitInt(0 - 1)
   || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
     == LitInt(0 - 2);
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.left);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#24: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)]
             ==> i#24 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#25: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)]
             ==> read($Heap, r#0, _module.Node.value) < i#25)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, r#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> (
        read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0) + 1
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Node.StrongRightRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 11 == $FunctionContextHeight;
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.left) != null;
  free requires _module.Node.Valid#canCall($Heap, n#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
       && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, n#0, _module.Node.left) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
           && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
           && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && (read($Heap, n#0, _module.Node.right) != null
           && read($Heap, n#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> (forall i#26: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#26)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#26)]
             ==> i#26 < read($Heap, n#0, _module.Node.value)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> (forall i#27: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#27)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#27)]
             ==> read($Heap, n#0, _module.Node.value) < i#27)));
  free requires _module.Node.BalanceValid#canCall($Heap, n#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(0 - 2);
  requires read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
     == LitInt(0 - 1)
   || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
     == LitInt(0 - 2);
  free requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.left))
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && (read($Heap, n#0, _module.Node.left) != null
     ==> read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
         == _module.Node.Height($LS($LZ), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
           - _module.Node.Height($LS($LZ), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
       && (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), 
          $Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)))
       && (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), 
          $Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))));
  free requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   && 
  _module.Node.Balanced($LS($LZ), 
    $Heap, 
    read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
   && (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right) != null
     ==> (
        read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
            _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
          _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right), 
          _module.Node.left)));
  free requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   && 
  _module.Node.Balanced($LS($LZ), 
    $Heap, 
    read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left))
   && (read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left) != null
     ==> (
        read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
            _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
          _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left), 
          _module.Node.left)));
  free requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.right))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> (
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.left);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> !read($Heap, r#0, _module.Node.Repr)[$Box(null)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
         && read($Heap, r#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> (forall i#28: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#28)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#28)]
           ==> i#28 < read($Heap, r#0, _module.Node.value)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> (forall i#29: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#29)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#29)]
           ==> read($Heap, r#0, _module.Node.value) < i#29));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0) + 1
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.left));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Node.StrongRightRotation(n#0: ref) returns (r#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var a#0: ref
   where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap);
  var b#0: ref
   where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap);
  var c#0: ref
   where $Is(c#0, Tclass._module.Node()) && $IsAlloc(c#0, Tclass._module.Node(), $Heap);
  var $rhs#0: ref
   where $Is($rhs#0, Tclass._module.Node())
     && $IsAlloc($rhs#0, Tclass._module.Node(), $Heap);
  var $rhs#1: ref
   where $Is($rhs#1, Tclass._module.Node())
     && $IsAlloc($rhs#1, Tclass._module.Node(), $Heap);
  var $rhs#2: ref
   where $Is($rhs#2, Tclass._module.Node())
     && $IsAlloc($rhs#2, Tclass._module.Node(), $Heap);
  var a##0: ref;
  var b##0: ref;
  var x##0: ref;
  var d##0: int;
  var a##1: ref;
  var b##1: ref;
  var x##1: ref;
  var d##1: int;

    // AddMethodImpl: StrongRightRotation, Impl$$_module.Node.StrongRightRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.left));
    assume {:captureState "AVLTree.dfy(289,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(290,9)
    assume true;
    assert n#0 != null;
    assume true;
    assert true;
    r#0 := read($Heap, n#0, _module.Node.left);
    assume {:captureState "AVLTree.dfy(290,18)"} true;
    // ----- assert statement ----- AVLTree.dfy(291,7)
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} r#0 != null;
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} n#0 != null;
    if (read($Heap, n#0, _module.Node.right) != null)
    {
        assert {:subsumption 0} n#0 != null;
        assert {:subsumption 0} read($Heap, n#0, _module.Node.right) != null;
    }
    else
    {
    }

    assume true;
    assert Set#Equal(read($Heap, n#0, _module.Node.Contents), 
  Set#Union(Set#Union(read($Heap, r#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value)))), 
    (if read($Heap, n#0, _module.Node.right) != null
       then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
       else Set#Empty(): Set Box)));
    // ----- update statement ----- AVLTree.dfy(292,19)
    assume true;
    assume true;
    assume true;
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#0 := read($Heap, r#0, _module.Node.left);
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#1 := read($Heap, r#0, _module.Node.right);
    assert n#0 != null;
    assume true;
    assert true;
    $rhs#2 := read($Heap, n#0, _module.Node.right);
    a#0 := $rhs#0;
    b#0 := $rhs#1;
    c#0 := $rhs#2;
    assume {:captureState "AVLTree.dfy(292,46)"} true;
    // ----- call statement ----- AVLTree.dfy(293,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##0 := b#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##0 := c#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##0 := n#0;
    assert r#0 != null;
    if (read($Heap, r#0, _module.Node.balance) == LitInt(0 - 2))
    {
    }
    else
    {
    }

    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##0 := (if read($Heap, r#0, _module.Node.balance) == LitInt(0 - 2) then 1 else 0);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##0 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##0, b##0, x##0, d##0);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(293,64)"} true;
    // ----- call statement ----- AVLTree.dfy(294,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##1 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##1 := n#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##1 := r#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##1 := LitInt(0);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##1 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##1, b##1, x##1, d##1);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(294,33)"} true;
}



procedure CheckWellformed$$_module.Node.StrongLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  free requires 0 == $ModuleContextHeight && 13 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.StrongLeftRotation(n#0: ref) returns (r#0: ref)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##n#3: ref;
  var ##n#4: ref;
  var ##n#5: ref;
  var ##n#6: ref;
  var ##n#7: ref;
  var ##n#8: ref;
  var ##n#9: ref;
  var ##n#10: ref;

    // AddMethodImpl: StrongLeftRotation, CheckWellformed$$_module.Node.StrongLeftRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.right));
    assume {:captureState "AVLTree.dfy(296,17): initial state"} true;
    assume n#0 != null;
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.right) != null;
    assert true;
    ##n#0 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, n#0);
    assume _module.Node.Valid($LS($LZ), $Heap, n#0);
    assert true;
    ##n#1 := n#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null ==> !read($Heap, ##n#1, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> read($Heap, ##n#1, _module.Node.Repr)[$Box(read($Heap, ##n#1, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)[$Box(##n#1)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#1, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#1, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
         && read($Heap, ##n#1, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#1)), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> Set#Equal(read($Heap, ##n#1, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#1, _module.Node.value))), 
            (if read($Heap, ##n#1, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#1, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#1, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#1)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#1)
     || (##n#1 != null
       ==> 
      read($Heap, ##n#1, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#1, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#1, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#1);
    assume _module.Node.BalanceValid#canCall($Heap, n#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, n#0);
    assert n#0 != null;
    assume read($Heap, n#0, _module.Node.balance) == LitInt(2);
    if (*)
    {
        assert n#0 != null;
        assert read($Heap, n#0, _module.Node.right) != null;
        assume read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
   == LitInt(1);
    }
    else
    {
        assume read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
   != LitInt(1);
        assert n#0 != null;
        assert read($Heap, n#0, _module.Node.right) != null;
        assume read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
   == LitInt(2);
    }

    assert n#0 != null;
    assert true;
    ##n#2 := read($Heap, n#0, _module.Node.right);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#2, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#3));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#2);
    assume _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right));
    assume _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right));
    assert n#0 != null;
    assert read($Heap, n#0, _module.Node.right) != null;
    assert true;
    ##n#3 := read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> !read($Heap, ##n#3, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
         && read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#3)), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#3, _module.Node.value))), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#3, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#3, _module.Node.value) < i#5));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> read($Heap, ##n#3, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#3)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#3)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#3);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right));
    assume _module.Node.Balanced($LS($LZ), 
  $Heap, 
  read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right));
    assert n#0 != null;
    assert read($Heap, n#0, _module.Node.right) != null;
    assert true;
    ##n#4 := read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#4, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> !read($Heap, ##n#4, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
         && read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#4)), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#4, _module.Node.value))), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, ##n#4, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, ##n#4, _module.Node.value) < i#7));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> read($Heap, ##n#4, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#4)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left));
    assume _module.Node.Balanced($LS($LZ), 
  $Heap, 
  read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left));
    assert n#0 != null;
    assert true;
    ##n#5 := read($Heap, n#0, _module.Node.left);
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#5, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> !read($Heap, ##n#5, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
         && read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#5)), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#5, _module.Node.value))), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> (forall i#8: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#8)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#8)]
           ==> i#8 < read($Heap, ##n#5, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> (forall i#9: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#9)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#9)]
           ==> read($Heap, ##n#5, _module.Node.value) < i#9));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> read($Heap, ##n#5, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#5)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5);
    assume _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left));
    assume _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left));
    assert n#0 != null;
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
    assume $HeapSucc(old($Heap), $Heap);
    havoc r#0;
    assume {:captureState "AVLTree.dfy(305,65): post-state"} true;
    assert n#0 != null;
    assume r#0 == read(old($Heap), n#0, _module.Node.right);
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
    assert r#0 != null;
    assert n#0 != null;
    assume Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
    assert true;
    ##n#6 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#6, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, r#0);
    assume _module.Node.Valid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#7 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#7, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> !read($Heap, ##n#7, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
         && read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#7)), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#7, _module.Node.value))), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> (forall i#10: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#10)]
           ==> i#10 < read($Heap, ##n#7, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> (forall i#11: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#11)]
           ==> read($Heap, ##n#7, _module.Node.value) < i#11));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#7);
    assume _module.Node.BalanceValid#canCall($Heap, r#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, r#0);
    assert true;
    ##n#8 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#8, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null ==> read($Heap, ##n#8, _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null ==> !read($Heap, ##n#8, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> read($Heap, ##n#8, _module.Node.Repr)[$Box(read($Heap, ##n#8, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> read($Heap, ##n#8, _module.Node.Repr)[$Box(read($Heap, ##n#8, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr)[$Box(##n#8)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#8, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
         && read($Heap, ##n#8, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read($Heap, ##n#8, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#8)), 
            (if read($Heap, ##n#8, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#8, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> Set#Equal(read($Heap, ##n#8, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#8, _module.Node.value))), 
            (if read($Heap, ##n#8, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#8, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> (forall i#12: int :: 
        { read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#8, _module.Node.left), _module.Node.Contents)[$Box(i#12)]
           ==> i#12 < read($Heap, ##n#8, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#8)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> (forall i#13: int :: 
        { read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#8, _module.Node.right), _module.Node.Contents)[$Box(i#13)]
           ==> read($Heap, ##n#8, _module.Node.value) < i#13));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#8)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> read($Heap, ##n#8, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#8)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#8)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8)
     || (##n#8 != null
       ==> 
      read($Heap, ##n#8, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#8, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#8)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#8);
    assume _module.Node.Balanced#canCall($Heap, r#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, r#0);
    assert true;
    ##n#9 := r#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#9, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null ==> !read($Heap, ##n#9, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(read($Heap, ##n#9, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#9, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(read($Heap, ##n#9, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#9, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#9, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#9, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
         && read($Heap, ##n#9, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> Set#Equal(read($Heap, ##n#9, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#9)), 
            (if read($Heap, ##n#9, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#9, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> Set#Equal(read($Heap, ##n#9, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#9, _module.Node.value))), 
            (if read($Heap, ##n#9, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#9, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> (forall i#14: int :: 
        { read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)[$Box(i#14)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)[$Box(i#14)]
           ==> i#14 < read($Heap, ##n#9, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> (forall i#15: int :: 
        { read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)[$Box(i#15)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)[$Box(i#15)]
           ==> read($Heap, ##n#9, _module.Node.value) < i#15));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#9);
    assume _module.Node.Height#canCall($Heap, r#0);
    assert true;
    ##n#10 := n#0;
    assert $Is(n#0, Tclass._module.Node())
   && $IsAlloc(n#0, Tclass._module.Node(), old($Heap));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null ==> read(old($Heap), ##n#10, _module.Node.Repr)[$Box(##n#10)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null ==> !read(old($Heap), ##n#10, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> read(old($Heap), ##n#10, _module.Node.Repr)[$Box(read(old($Heap), ##n#10, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> !read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr)[$Box(##n#10)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), ##n#10, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> read(old($Heap), ##n#10, _module.Node.Repr)[$Box(read(old($Heap), ##n#10, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> !read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr)[$Box(##n#10)]);
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> Set#Subset(read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr), 
        read(old($Heap), ##n#10, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#10, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> _module.Node.Valid($LS($LS($LZ)), old($Heap), read(old($Heap), ##n#10, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
         && read(old($Heap), ##n#10, _module.Node.left) != null
       ==> Set#Disjoint(read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr), 
        read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> Set#Equal(read(old($Heap), ##n#10, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#10)), 
            (if read(old($Heap), ##n#10, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#10, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> Set#Equal(read(old($Heap), ##n#10, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read(old($Heap), ##n#10, _module.Node.value))), 
            (if read(old($Heap), ##n#10, _module.Node.left) != null
               then read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read(old($Heap), ##n#10, _module.Node.right) != null
             then read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.left) != null
       ==> (forall i#16: int :: 
        { read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Contents)[$Box(i#16)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#10, _module.Node.left), _module.Node.Contents)[$Box(i#16)]
           ==> i#16 < read(old($Heap), ##n#10, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall(old($Heap), ##n#10)
   ==> _module.Node.Valid($LS($LZ), old($Heap), ##n#10)
     || (##n#10 != null
       ==> 
      read(old($Heap), ##n#10, _module.Node.right) != null
       ==> (forall i#17: int :: 
        { read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Contents)[$Box(i#17)] } 
        true
           ==> 
          read(old($Heap), read(old($Heap), ##n#10, _module.Node.right), _module.Node.Contents)[$Box(i#17)]
           ==> read(old($Heap), ##n#10, _module.Node.value) < i#17));
    assume _module.Node.Valid($LS($LZ), old($Heap), ##n#10);
    assume _module.Node.Height#canCall(old($Heap), n#0);
    assume _module.Node.Height($LS($LZ), $Heap, r#0) + 1
   == _module.Node.Height($LS($LZ), old($Heap), n#0);
    assert r#0 != null;
    assume read($Heap, r#0, _module.Node.balance) == LitInt(0);
}



procedure InterModuleCall$$_module.Node.StrongLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.right) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#18: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)]
           ==> i#18 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#19: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)]
           ==> read($Heap, n#0, _module.Node.value) < i#19));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(2);
  requires read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
     == LitInt(1)
   || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
     == LitInt(2);
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.right);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#20: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)]
             ==> i#20 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#21: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)]
             ==> read($Heap, r#0, _module.Node.value) < i#21)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, r#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> (
        read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0) + 1
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.Node.StrongLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap));
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.right) != null;
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null ==> !read($Heap, n#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]);
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, n#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
         && read($Heap, n#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> (forall i#22: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)]
           ==> i#22 < read($Heap, n#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, n#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> (forall i#23: int :: 
        { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)] } 
        true
           ==> 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)]
           ==> read($Heap, n#0, _module.Node.value) < i#23));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, n#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
     || (n#0 != null
       ==> 
      read($Heap, n#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, n#0, _module.Node.right)));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(2);
  requires read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
     == LitInt(1)
   || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
     == LitInt(2);
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
     || (read($Heap, n#0, _module.Node.right) != null
       ==> 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
          _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), 
      $Heap, 
      read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
     || (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
          _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))
   ==> _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
     || (read($Heap, n#0, _module.Node.left) != null
       ==> _module.Node.Balanced($LS($LS($LZ)), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.right);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]
       && !read($Heap, r#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, r#0, _module.Node.left) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]
           && !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]
           && !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]
           && Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, r#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && (read($Heap, r#0, _module.Node.right) != null
           && read($Heap, r#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> (forall i#24: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)]
             ==> i#24 < read($Heap, r#0, _module.Node.value)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> (forall i#25: int :: 
          { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)] } 
          true
             ==> 
            read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)]
             ==> read($Heap, r#0, _module.Node.value) < i#25)));
  free ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left))
       && (read($Heap, r#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)))
       && (read($Heap, r#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))));
  free ensures _module.Node.Balanced#canCall($Heap, r#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, r#0)
   && (r#0 != null
     ==> (
        read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0) + 1
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Node.StrongLeftRotation(n#0: ref
       where $Is(n#0, Tclass._module.Node()) && $IsAlloc(n#0, Tclass._module.Node(), $Heap))
   returns (r#0: ref
       where $Is(r#0, Tclass._module.Node()) && $IsAlloc(r#0, Tclass._module.Node(), $Heap), 
    $_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 13 == $FunctionContextHeight;
  // user-defined preconditions
  requires n#0 != null;
  requires read($Heap, n#0, _module.Node.right) != null;
  free requires _module.Node.Valid#canCall($Heap, n#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.Repr)[$Box(n#0)]
       && !read($Heap, n#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, n#0, _module.Node.left) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.left))]
           && !read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> read($Heap, n#0, _module.Node.Repr)[$Box(read($Heap, n#0, _module.Node.right))]
           && !read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)[$Box(n#0)]
           && Set#Subset(read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, n#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
       && (read($Heap, n#0, _module.Node.right) != null
           && read($Heap, n#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, n#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(n#0)), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, n#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value))), 
            (if read($Heap, n#0, _module.Node.left) != null
               then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, n#0, _module.Node.right) != null
             then read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> (forall i#26: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#26)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)[$Box(i#26)]
             ==> i#26 < read($Heap, n#0, _module.Node.value)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> (forall i#27: int :: 
          { read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#27)] } 
          true
             ==> 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.Contents)[$Box(i#27)]
             ==> read($Heap, n#0, _module.Node.value) < i#27)));
  free requires _module.Node.BalanceValid#canCall($Heap, n#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, n#0)
   && (n#0 != null
     ==> read($Heap, n#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
       && (read($Heap, n#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left)))
       && (read($Heap, n#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))));
  requires read($Heap, n#0, _module.Node.balance) == LitInt(2);
  requires read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
     == LitInt(1)
   || read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
     == LitInt(2);
  free requires _module.Node.BalanceValid#canCall($Heap, read($Heap, n#0, _module.Node.right))
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, n#0, _module.Node.right))
   && (read($Heap, n#0, _module.Node.right) != null
     ==> read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.balance)
         == _module.Node.Height($LS($LZ), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
           - _module.Node.Height($LS($LZ), 
            $Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
       && (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), 
          $Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left)))
       && (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), 
          $Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))));
  free requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   && 
  _module.Node.Balanced($LS($LZ), 
    $Heap, 
    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right))
   && (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right) != null
     ==> (
        read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
            _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
          _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.right), 
          _module.Node.left)));
  free requires _module.Node.Balanced#canCall($Heap, read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   && 
  _module.Node.Balanced($LS($LZ), 
    $Heap, 
    read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left))
   && (read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left) != null
     ==> (
        read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(0)
         || read($Heap, 
            read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
            _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
          _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, 
          read($Heap, read($Heap, n#0, _module.Node.right), _module.Node.left), 
          _module.Node.left)));
  free requires _module.Node.Balanced#canCall($Heap, read($Heap, n#0, _module.Node.left))
   && 
  _module.Node.Balanced($LS($LZ), $Heap, read($Heap, n#0, _module.Node.left))
   && (read($Heap, n#0, _module.Node.left) != null
     ==> (
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(0 - 1)
         || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(0)
         || read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.balance)
           == LitInt(1))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.right))
       && _module.Node.Balanced($LS($LZ), 
        $Heap, 
        read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.left)));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures true;
  ensures r#0 == read(old($Heap), n#0, _module.Node.right);
  ensures Set#Equal(read($Heap, r#0, _module.Node.Contents), 
  read(old($Heap), n#0, _module.Node.Contents));
  ensures Set#Equal(read($Heap, r#0, _module.Node.Repr), read(old($Heap), n#0, _module.Node.Repr));
  free ensures _module.Node.Valid#canCall($Heap, r#0)
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
     ==> _module.Node.BalanceValid#canCall($Heap, r#0))
   && (_module.Node.Valid($LS($LZ), $Heap, r#0)
       && _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     ==> _module.Node.Balanced#canCall($Heap, r#0));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> read($Heap, r#0, _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null ==> !read($Heap, r#0, _module.Node.Repr)[$Box(null)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.left))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> read($Heap, r#0, _module.Node.Repr)[$Box(read($Heap, r#0, _module.Node.right))]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)[$Box(r#0)]);
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, r#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
         && read($Heap, r#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(r#0)), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> Set#Equal(read($Heap, r#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, r#0, _module.Node.value))), 
            (if read($Heap, r#0, _module.Node.left) != null
               then read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, r#0, _module.Node.right) != null
             then read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> (forall i#28: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#28)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.left), _module.Node.Contents)[$Box(i#28)]
           ==> i#28 < read($Heap, r#0, _module.Node.value)));
  ensures _module.Node.Valid#canCall($Heap, r#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> (forall i#29: int :: 
        { read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#29)] } 
        true
           ==> 
          read($Heap, read($Heap, r#0, _module.Node.right), _module.Node.Contents)[$Box(i#29)]
           ==> read($Heap, r#0, _module.Node.value) < i#29));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, r#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> 
      read($Heap, r#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> read($Heap, r#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, r#0, _module.Node.balance) == LitInt(0)
         || read($Heap, r#0, _module.Node.balance) == LitInt(1));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.right)));
  ensures _module.Node.Balanced#canCall($Heap, r#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, r#0)
     || (r#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, r#0, _module.Node.left)));
  free ensures _module.Node.Height#canCall($Heap, r#0)
   && _module.Node.Height#canCall(old($Heap), n#0);
  ensures _module.Node.Height($LS($LS($LZ)), $Heap, r#0) + 1
   == _module.Node.Height($LS($LS($LZ)), old($Heap), n#0);
  free ensures true;
  ensures read($Heap, r#0, _module.Node.balance) == LitInt(0);
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
       || 
      $o == n#0
       || $o == read(old($Heap), n#0, _module.Node.right));
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Node.StrongLeftRotation(n#0: ref) returns (r#0: ref, $_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var a#0: ref
   where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap);
  var b#0: ref
   where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap);
  var c#0: ref
   where $Is(c#0, Tclass._module.Node()) && $IsAlloc(c#0, Tclass._module.Node(), $Heap);
  var $rhs#0: ref
   where $Is($rhs#0, Tclass._module.Node())
     && $IsAlloc($rhs#0, Tclass._module.Node(), $Heap);
  var $rhs#1: ref
   where $Is($rhs#1, Tclass._module.Node())
     && $IsAlloc($rhs#1, Tclass._module.Node(), $Heap);
  var $rhs#2: ref
   where $Is($rhs#2, Tclass._module.Node())
     && $IsAlloc($rhs#2, Tclass._module.Node(), $Heap);
  var a##0: ref;
  var b##0: ref;
  var x##0: ref;
  var d##0: int;
  var a##1: ref;
  var b##1: ref;
  var x##1: ref;
  var d##1: int;

    // AddMethodImpl: StrongLeftRotation, Impl$$_module.Node.StrongLeftRotation
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc)
     ==> $o == n#0 || $o == read($Heap, n#0, _module.Node.right));
    assume {:captureState "AVLTree.dfy(310,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(311,9)
    assume true;
    assert n#0 != null;
    assume true;
    assert true;
    r#0 := read($Heap, n#0, _module.Node.right);
    assume {:captureState "AVLTree.dfy(311,19)"} true;
    // ----- assert statement ----- AVLTree.dfy(312,7)
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} r#0 != null;
    assert {:subsumption 0} n#0 != null;
    assert {:subsumption 0} n#0 != null;
    if (read($Heap, n#0, _module.Node.left) != null)
    {
        assert {:subsumption 0} n#0 != null;
        assert {:subsumption 0} read($Heap, n#0, _module.Node.left) != null;
    }
    else
    {
    }

    assume true;
    assert Set#Equal(read($Heap, n#0, _module.Node.Contents), 
  Set#Union(Set#Union(read($Heap, r#0, _module.Node.Contents), 
      Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, n#0, _module.Node.value)))), 
    (if read($Heap, n#0, _module.Node.left) != null
       then read($Heap, read($Heap, n#0, _module.Node.left), _module.Node.Contents)
       else Set#Empty(): Set Box)));
    // ----- update statement ----- AVLTree.dfy(313,19)
    assume true;
    assume true;
    assume true;
    assert n#0 != null;
    assume true;
    assert true;
    $rhs#0 := read($Heap, n#0, _module.Node.left);
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#1 := read($Heap, r#0, _module.Node.left);
    assert r#0 != null;
    assume true;
    assert true;
    $rhs#2 := read($Heap, r#0, _module.Node.right);
    a#0 := $rhs#0;
    b#0 := $rhs#1;
    c#0 := $rhs#2;
    assume {:captureState "AVLTree.dfy(313,45)"} true;
    // ----- call statement ----- AVLTree.dfy(314,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##0 := a#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##0 := b#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##0 := n#0;
    assert r#0 != null;
    if (read($Heap, r#0, _module.Node.balance) == LitInt(2))
    {
    }
    else
    {
    }

    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##0 := (if read($Heap, r#0, _module.Node.balance) == LitInt(2) then 0 - 1 else 0);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##0 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##0, b##0, x##0, d##0);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(314,64)"} true;
    // ----- call statement ----- AVLTree.dfy(315,21)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    a##1 := n#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    b##1 := c#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    x##1 := r#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    assert true;
    d##1 := LitInt(0);
    assert (forall<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) && $o == x##1 ==> $_Frame[$o, $f]);
    // ProcessCallStmt: Make the call
    call IntraModuleCall$$_module.Node.AssembleSingle(a##1, b##1, x##1, d##1);
    // TrCallStmt: After ProcessCallStmt
    assume {:captureState "AVLTree.dfy(315,33)"} true;
}



procedure CheckWellformed$$_module.Node.AssembleSingle(a#0: ref
       where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap), 
    x#0: ref
       where $Is(x#0, Tclass._module.Node()) && $IsAlloc(x#0, Tclass._module.Node(), $Heap), 
    d#0: int);
  free requires 0 == $ModuleContextHeight && 9 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_module.Node.AssembleSingle(a#0: ref, b#0: ref, x#0: ref, d#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##n#0: ref;
  var ##n#1: ref;
  var ##n#2: ref;
  var ##n#3: ref;
  var ##n#4: ref;
  var ##n#5: ref;
  var i#8: int;
  var i#10: int;
  var ##n#6: ref;
  var ##n#7: ref;
  var ##n#8: ref;
  var ##n#9: ref;

    // AddMethodImpl: AssembleSingle, CheckWellformed$$_module.Node.AssembleSingle
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == x#0);
    assume {:captureState "AVLTree.dfy(317,17): initial state"} true;
    assume x#0 != null;
    assert true;
    ##n#0 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#0, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, a#0);
    assume _module.Node.Valid($LS($LZ), $Heap, a#0);
    assert true;
    ##n#1 := b#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#1, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, b#0);
    assume _module.Node.Valid($LS($LZ), $Heap, b#0);
    assert true;
    ##n#2 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#2, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null ==> !read($Heap, ##n#2, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> read($Heap, ##n#2, _module.Node.Repr)[$Box(read($Heap, ##n#2, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)[$Box(##n#2)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#2, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#2, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
         && read($Heap, ##n#2, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#2)), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> Set#Equal(read($Heap, ##n#2, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#2, _module.Node.value))), 
            (if read($Heap, ##n#2, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#2, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.left) != null
       ==> (forall i#0: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#0)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.left), _module.Node.Contents)[$Box(i#0)]
           ==> i#0 < read($Heap, ##n#2, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#2)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#2)
     || (##n#2 != null
       ==> 
      read($Heap, ##n#2, _module.Node.right) != null
       ==> (forall i#1: int :: 
        { read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#1)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#2, _module.Node.right), _module.Node.Contents)[$Box(i#1)]
           ==> read($Heap, ##n#2, _module.Node.value) < i#1));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#2);
    assume _module.Node.BalanceValid#canCall($Heap, a#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, a#0);
    assert true;
    ##n#3 := b#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#3, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null ==> !read($Heap, ##n#3, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> read($Heap, ##n#3, _module.Node.Repr)[$Box(read($Heap, ##n#3, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)[$Box(##n#3)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#3, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#3, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
         && read($Heap, ##n#3, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#3)), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> Set#Equal(read($Heap, ##n#3, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#3, _module.Node.value))), 
            (if read($Heap, ##n#3, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#3, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.left) != null
       ==> (forall i#2: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#2)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.left), _module.Node.Contents)[$Box(i#2)]
           ==> i#2 < read($Heap, ##n#3, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#3)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#3)
     || (##n#3 != null
       ==> 
      read($Heap, ##n#3, _module.Node.right) != null
       ==> (forall i#3: int :: 
        { read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#3)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#3, _module.Node.right), _module.Node.Contents)[$Box(i#3)]
           ==> read($Heap, ##n#3, _module.Node.value) < i#3));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#3);
    assume _module.Node.BalanceValid#canCall($Heap, b#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, b#0);
    assert true;
    ##n#4 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#4, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null ==> !read($Heap, ##n#4, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> read($Heap, ##n#4, _module.Node.Repr)[$Box(read($Heap, ##n#4, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)[$Box(##n#4)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#4, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
         && read($Heap, ##n#4, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#4)), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> Set#Equal(read($Heap, ##n#4, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#4, _module.Node.value))), 
            (if read($Heap, ##n#4, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#4, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> (forall i#4: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.left), _module.Node.Contents)[$Box(i#4)]
           ==> i#4 < read($Heap, ##n#4, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#4)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> (forall i#5: int :: 
        { read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#4, _module.Node.right), _module.Node.Contents)[$Box(i#5)]
           ==> read($Heap, ##n#4, _module.Node.value) < i#5));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> read($Heap, ##n#4, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#4)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4)
     || (##n#4 != null
       ==> 
      read($Heap, ##n#4, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#4, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#4)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#4);
    assume _module.Node.Balanced#canCall($Heap, a#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, a#0);
    assert true;
    ##n#5 := b#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#5, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null ==> !read($Heap, ##n#5, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> read($Heap, ##n#5, _module.Node.Repr)[$Box(read($Heap, ##n#5, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)[$Box(##n#5)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#5, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
         && read($Heap, ##n#5, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#5)), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> Set#Equal(read($Heap, ##n#5, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#5, _module.Node.value))), 
            (if read($Heap, ##n#5, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#5, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> (forall i#6: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.left), _module.Node.Contents)[$Box(i#6)]
           ==> i#6 < read($Heap, ##n#5, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#5)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> (forall i#7: int :: 
        { read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#5, _module.Node.right), _module.Node.Contents)[$Box(i#7)]
           ==> read($Heap, ##n#5, _module.Node.value) < i#7));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> read($Heap, ##n#5, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.left)));
    assert {:subsumption 0} _module.Node.BalanceValid#canCall($Heap, ##n#5)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5)
     || (##n#5 != null
       ==> 
      read($Heap, ##n#5, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, ##n#5, _module.Node.right)));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#5)
   && _module.Node.BalanceValid($LS($LZ), $Heap, ##n#5);
    assume _module.Node.Balanced#canCall($Heap, b#0);
    assume _module.Node.Balanced($LS($LZ), $Heap, b#0);
    if (*)
    {
        assume a#0 != null;
        assume b#0 != null;
        assert a#0 != null;
        assert b#0 != null;
        assume Set#Disjoint(read($Heap, a#0, _module.Node.Repr), read($Heap, b#0, _module.Node.Repr));
    }
    else
    {
        assume a#0 != null && b#0 != null
   ==> Set#Disjoint(read($Heap, a#0, _module.Node.Repr), read($Heap, b#0, _module.Node.Repr));
    }

    if (*)
    {
        assume a#0 != null;
        havoc i#8;
        if (*)
        {
            assert a#0 != null;
            assume read($Heap, a#0, _module.Node.Contents)[$Box(i#8)];
            assert x#0 != null;
            assume i#8 < read($Heap, x#0, _module.Node.value);
        }
        else
        {
            assume read($Heap, a#0, _module.Node.Contents)[$Box(i#8)]
   ==> i#8 < read($Heap, x#0, _module.Node.value);
        }

        assume (forall i#9: int :: 
  { read($Heap, a#0, _module.Node.Contents)[$Box(i#9)] } 
  true
     ==> 
    read($Heap, a#0, _module.Node.Contents)[$Box(i#9)]
     ==> i#9 < read($Heap, x#0, _module.Node.value));
    }
    else
    {
        assume a#0 != null
   ==> (forall i#9: int :: 
    { read($Heap, a#0, _module.Node.Contents)[$Box(i#9)] } 
    true
       ==> 
      read($Heap, a#0, _module.Node.Contents)[$Box(i#9)]
       ==> i#9 < read($Heap, x#0, _module.Node.value));
    }

    if (*)
    {
        assume b#0 != null;
        havoc i#10;
        if (*)
        {
            assert b#0 != null;
            assume read($Heap, b#0, _module.Node.Contents)[$Box(i#10)];
            assert x#0 != null;
            assume read($Heap, x#0, _module.Node.value) < i#10;
        }
        else
        {
            assume read($Heap, b#0, _module.Node.Contents)[$Box(i#10)]
   ==> read($Heap, x#0, _module.Node.value) < i#10;
        }

        assume (forall i#11: int :: 
  { read($Heap, b#0, _module.Node.Contents)[$Box(i#11)] } 
  true
     ==> 
    read($Heap, b#0, _module.Node.Contents)[$Box(i#11)]
     ==> read($Heap, x#0, _module.Node.value) < i#11);
    }
    else
    {
        assume b#0 != null
   ==> (forall i#11: int :: 
    { read($Heap, b#0, _module.Node.Contents)[$Box(i#11)] } 
    true
       ==> 
      read($Heap, b#0, _module.Node.Contents)[$Box(i#11)]
       ==> read($Heap, x#0, _module.Node.value) < i#11);
    }

    if (*)
    {
        assume a#0 != null;
        assert a#0 != null;
        assume !read($Heap, a#0, _module.Node.Repr)[$Box(x#0)];
    }
    else
    {
        assume a#0 != null ==> !read($Heap, a#0, _module.Node.Repr)[$Box(x#0)];
    }

    if (*)
    {
        assume b#0 != null;
        assert b#0 != null;
        assume !read($Heap, b#0, _module.Node.Repr)[$Box(x#0)];
    }
    else
    {
        assume b#0 != null ==> !read($Heap, b#0, _module.Node.Repr)[$Box(x#0)];
    }

    assert true;
    ##n#6 := b#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#6, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null ==> !read($Heap, ##n#6, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> read($Heap, ##n#6, _module.Node.Repr)[$Box(read($Heap, ##n#6, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)[$Box(##n#6)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#6, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#6, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
         && read($Heap, ##n#6, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#6)), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> Set#Equal(read($Heap, ##n#6, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#6, _module.Node.value))), 
            (if read($Heap, ##n#6, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#6, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.left) != null
       ==> (forall i#12: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#12)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.left), _module.Node.Contents)[$Box(i#12)]
           ==> i#12 < read($Heap, ##n#6, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#6)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#6)
     || (##n#6 != null
       ==> 
      read($Heap, ##n#6, _module.Node.right) != null
       ==> (forall i#13: int :: 
        { read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#13)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#6, _module.Node.right), _module.Node.Contents)[$Box(i#13)]
           ==> read($Heap, ##n#6, _module.Node.value) < i#13));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#6);
    assume _module.Node.Height#canCall($Heap, b#0);
    assert true;
    ##n#7 := a#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#7, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null ==> !read($Heap, ##n#7, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> read($Heap, ##n#7, _module.Node.Repr)[$Box(read($Heap, ##n#7, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)[$Box(##n#7)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#7, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#7, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
         && read($Heap, ##n#7, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#7)), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> Set#Equal(read($Heap, ##n#7, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#7, _module.Node.value))), 
            (if read($Heap, ##n#7, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#7, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.left) != null
       ==> (forall i#14: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#14)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.left), _module.Node.Contents)[$Box(i#14)]
           ==> i#14 < read($Heap, ##n#7, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#7)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#7)
     || (##n#7 != null
       ==> 
      read($Heap, ##n#7, _module.Node.right) != null
       ==> (forall i#15: int :: 
        { read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#15)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#7, _module.Node.right), _module.Node.Contents)[$Box(i#15)]
           ==> read($Heap, ##n#7, _module.Node.value) < i#15));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#7);
    assume _module.Node.Height#canCall($Heap, a#0);
    assume d#0
   == _module.Node.Height($LS($LZ), $Heap, b#0)
     - _module.Node.Height($LS($LZ), $Heap, a#0);
    havoc $Heap;
    assume (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == x#0);
    assume $HeapSucc(old($Heap), $Heap);
    assume {:captureState "AVLTree.dfy(335,23): post-state"} true;
    assert true;
    ##n#8 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#8, Tclass._module.Node(), $Heap);
    assume _module.Node.Valid#canCall($Heap, x#0);
    assume _module.Node.Valid($LS($LZ), $Heap, x#0);
    assert true;
    ##n#9 := x#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##n#9, Tclass._module.Node(), $Heap);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null ==> !read($Heap, ##n#9, _module.Node.Repr)[$Box(null)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(read($Heap, ##n#9, _module.Node.left))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> !read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr), 
        read($Heap, ##n#9, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> read($Heap, ##n#9, _module.Node.Repr)[$Box(read($Heap, ##n#9, _module.Node.right))]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> !read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)[$Box(##n#9)]);
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr), 
        read($Heap, ##n#9, _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#9, _module.Node.left)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, ##n#9, _module.Node.right)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
         && read($Heap, ##n#9, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> Set#Equal(read($Heap, ##n#9, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(##n#9)), 
            (if read($Heap, ##n#9, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#9, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> Set#Equal(read($Heap, ##n#9, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, ##n#9, _module.Node.value))), 
            (if read($Heap, ##n#9, _module.Node.left) != null
               then read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, ##n#9, _module.Node.right) != null
             then read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.left) != null
       ==> (forall i#16: int :: 
        { read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)[$Box(i#16)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#9, _module.Node.left), _module.Node.Contents)[$Box(i#16)]
           ==> i#16 < read($Heap, ##n#9, _module.Node.value)));
    assert {:subsumption 0} _module.Node.Valid#canCall($Heap, ##n#9)
   ==> _module.Node.Valid($LS($LZ), $Heap, ##n#9)
     || (##n#9 != null
       ==> 
      read($Heap, ##n#9, _module.Node.right) != null
       ==> (forall i#17: int :: 
        { read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)[$Box(i#17)] } 
        true
           ==> 
          read($Heap, read($Heap, ##n#9, _module.Node.right), _module.Node.Contents)[$Box(i#17)]
           ==> read($Heap, ##n#9, _module.Node.value) < i#17));
    assume _module.Node.Valid($LS($LZ), $Heap, ##n#9);
    assume _module.Node.BalanceValid#canCall($Heap, x#0);
    assume _module.Node.BalanceValid($LS($LZ), $Heap, x#0);
    assert x#0 != null;
    assume read($Heap, x#0, _module.Node.balance) == d#0;
    assert x#0 != null;
    assert x#0 != null;
    assume read($Heap, x#0, _module.Node.value)
   == read(old($Heap), x#0, _module.Node.value);
    assert x#0 != null;
    assume read($Heap, x#0, _module.Node.left) == a#0;
    assert x#0 != null;
    assume read($Heap, x#0, _module.Node.right) == b#0;
    assert x#0 != null;
    if (a#0 != null)
    {
        assert a#0 != null;
    }
    else
    {
    }

    if (b#0 != null)
    {
        assert b#0 != null;
    }
    else
    {
    }

    assume Set#Equal(read($Heap, x#0, _module.Node.Repr), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Repr)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Repr)
       else Set#Empty(): Set Box)));
    assert x#0 != null;
    assert x#0 != null;
    if (a#0 != null)
    {
        assert a#0 != null;
    }
    else
    {
    }

    if (b#0 != null)
    {
        assert b#0 != null;
    }
    else
    {
    }

    assume Set#Equal(read($Heap, x#0, _module.Node.Contents), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Contents)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Contents)
       else Set#Empty(): Set Box)));
}



procedure InterModuleCall$$_module.Node.AssembleSingle(a#0: ref
       where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap), 
    x#0: ref
       where $Is(x#0, Tclass._module.Node()) && $IsAlloc(x#0, Tclass._module.Node(), $Heap), 
    d#0: int);
  // user-defined preconditions
  requires x#0 != null;
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null ==> read($Heap, a#0, _module.Node.Repr)[$Box(a#0)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null ==> !read($Heap, a#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> read($Heap, a#0, _module.Node.Repr)[$Box(read($Heap, a#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr)[$Box(a#0)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, a#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> read($Heap, a#0, _module.Node.Repr)[$Box(read($Heap, a#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)[$Box(a#0)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, a#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
         && read($Heap, a#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> Set#Equal(read($Heap, a#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(a#0)), 
            (if read($Heap, a#0, _module.Node.left) != null
               then read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, a#0, _module.Node.right) != null
             then read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> Set#Equal(read($Heap, a#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, a#0, _module.Node.value))), 
            (if read($Heap, a#0, _module.Node.left) != null
               then read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, a#0, _module.Node.right) != null
             then read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> (forall i#18: int :: 
        { read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)] } 
        true
           ==> 
          read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)[$Box(i#18)]
           ==> i#18 < read($Heap, a#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> (forall i#19: int :: 
        { read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)] } 
        true
           ==> 
          read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)[$Box(i#19)]
           ==> read($Heap, a#0, _module.Node.value) < i#19));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null ==> read($Heap, b#0, _module.Node.Repr)[$Box(b#0)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null ==> !read($Heap, b#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> read($Heap, b#0, _module.Node.Repr)[$Box(read($Heap, b#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr)[$Box(b#0)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, b#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> read($Heap, b#0, _module.Node.Repr)[$Box(read($Heap, b#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)[$Box(b#0)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, b#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
         && read($Heap, b#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> Set#Equal(read($Heap, b#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(b#0)), 
            (if read($Heap, b#0, _module.Node.left) != null
               then read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, b#0, _module.Node.right) != null
             then read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> Set#Equal(read($Heap, b#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, b#0, _module.Node.value))), 
            (if read($Heap, b#0, _module.Node.left) != null
               then read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, b#0, _module.Node.right) != null
             then read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> (forall i#20: int :: 
        { read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)] } 
        true
           ==> 
          read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)[$Box(i#20)]
           ==> i#20 < read($Heap, b#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> (forall i#21: int :: 
        { read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)] } 
        true
           ==> 
          read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)[$Box(i#21)]
           ==> read($Heap, b#0, _module.Node.value) < i#21));
  requires _module.Node.BalanceValid#canCall($Heap, a#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> read($Heap, a#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, a#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, a#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right)));
  requires _module.Node.BalanceValid#canCall($Heap, b#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> read($Heap, b#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, b#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, b#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, a#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> read($Heap, a#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, a#0, _module.Node.balance) == LitInt(0)
         || read($Heap, a#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, a#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, a#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, b#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> read($Heap, b#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, b#0, _module.Node.balance) == LitInt(0)
         || read($Heap, b#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, b#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, b#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires a#0 != null && b#0 != null
   ==> Set#Disjoint(read($Heap, a#0, _module.Node.Repr), read($Heap, b#0, _module.Node.Repr));
  requires a#0 != null
   ==> (forall i#9: int :: 
    { read($Heap, a#0, _module.Node.Contents)[$Box(i#9)] } 
    true
       ==> 
      read($Heap, a#0, _module.Node.Contents)[$Box(i#9)]
       ==> i#9 < read($Heap, x#0, _module.Node.value));
  requires b#0 != null
   ==> (forall i#11: int :: 
    { read($Heap, b#0, _module.Node.Contents)[$Box(i#11)] } 
    true
       ==> 
      read($Heap, b#0, _module.Node.Contents)[$Box(i#11)]
       ==> read($Heap, x#0, _module.Node.value) < i#11);
  requires a#0 != null ==> !read($Heap, a#0, _module.Node.Repr)[$Box(x#0)];
  requires b#0 != null ==> !read($Heap, b#0, _module.Node.Repr)[$Box(x#0)];
  requires d#0
   == _module.Node.Height($LS($LS($LZ)), $Heap, b#0)
     - _module.Node.Height($LS($LS($LZ)), $Heap, a#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Node.Valid#canCall($Heap, x#0)
   && (_module.Node.Valid($LS($LZ), $Heap, x#0)
     ==> _module.Node.BalanceValid#canCall($Heap, x#0));
  free ensures _module.Node.Valid#canCall($Heap, x#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, x#0)
   && (x#0 != null
     ==> read($Heap, x#0, _module.Node.Repr)[$Box(x#0)]
       && !read($Heap, x#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, x#0, _module.Node.left) != null
         ==> read($Heap, x#0, _module.Node.Repr)[$Box(read($Heap, x#0, _module.Node.left))]
           && !read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr)[$Box(x#0)]
           && Set#Subset(read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, x#0, _module.Node.Repr)))
       && (read($Heap, x#0, _module.Node.right) != null
         ==> read($Heap, x#0, _module.Node.Repr)[$Box(read($Heap, x#0, _module.Node.right))]
           && !read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)[$Box(x#0)]
           && Set#Subset(read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, x#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.right))
       && (read($Heap, x#0, _module.Node.right) != null
           && read($Heap, x#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, x#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
            (if read($Heap, x#0, _module.Node.left) != null
               then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, x#0, _module.Node.right) != null
             then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, x#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
            (if read($Heap, x#0, _module.Node.left) != null
               then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, x#0, _module.Node.right) != null
             then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, x#0, _module.Node.left) != null
         ==> (forall i#22: int :: 
          { read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)] } 
          true
             ==> 
            read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)[$Box(i#22)]
             ==> i#22 < read($Heap, x#0, _module.Node.value)))
       && (read($Heap, x#0, _module.Node.right) != null
         ==> (forall i#23: int :: 
          { read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)] } 
          true
             ==> 
            read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)[$Box(i#23)]
             ==> read($Heap, x#0, _module.Node.value) < i#23)));
  free ensures _module.Node.BalanceValid#canCall($Heap, x#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, x#0)
   && (x#0 != null
     ==> read($Heap, x#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, x#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, x#0, _module.Node.left))
       && (read($Heap, x#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.left)))
       && (read($Heap, x#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.right))));
  free ensures true;
  ensures read($Heap, x#0, _module.Node.balance) == d#0;
  free ensures true;
  ensures read($Heap, x#0, _module.Node.value)
   == read(old($Heap), x#0, _module.Node.value);
  ensures read($Heap, x#0, _module.Node.left) == a#0;
  ensures read($Heap, x#0, _module.Node.right) == b#0;
  free ensures true;
  ensures Set#Equal(read($Heap, x#0, _module.Node.Repr), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Repr)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Repr)
       else Set#Empty(): Set Box)));
  free ensures true;
  ensures Set#Equal(read($Heap, x#0, _module.Node.Contents), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Contents)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Contents)
       else Set#Empty(): Set Box)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == x#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure IntraModuleCall$$_module.Node.AssembleSingle(a#0: ref
       where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap), 
    x#0: ref
       where $Is(x#0, Tclass._module.Node()) && $IsAlloc(x#0, Tclass._module.Node(), $Heap), 
    d#0: int);
  // user-defined preconditions
  requires x#0 != null;
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null ==> read($Heap, a#0, _module.Node.Repr)[$Box(a#0)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null ==> !read($Heap, a#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> read($Heap, a#0, _module.Node.Repr)[$Box(read($Heap, a#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr)[$Box(a#0)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, a#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> read($Heap, a#0, _module.Node.Repr)[$Box(read($Heap, a#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)[$Box(a#0)]);
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, a#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
         && read($Heap, a#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> Set#Equal(read($Heap, a#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(a#0)), 
            (if read($Heap, a#0, _module.Node.left) != null
               then read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, a#0, _module.Node.right) != null
             then read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> Set#Equal(read($Heap, a#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, a#0, _module.Node.value))), 
            (if read($Heap, a#0, _module.Node.left) != null
               then read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, a#0, _module.Node.right) != null
             then read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> (forall i#24: int :: 
        { read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)] } 
        true
           ==> 
          read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)[$Box(i#24)]
           ==> i#24 < read($Heap, a#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, a#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> (forall i#25: int :: 
        { read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)] } 
        true
           ==> 
          read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)[$Box(i#25)]
           ==> read($Heap, a#0, _module.Node.value) < i#25));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null ==> read($Heap, b#0, _module.Node.Repr)[$Box(b#0)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null ==> !read($Heap, b#0, _module.Node.Repr)[$Box(null)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> read($Heap, b#0, _module.Node.Repr)[$Box(read($Heap, b#0, _module.Node.left))]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr)[$Box(b#0)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, b#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> read($Heap, b#0, _module.Node.Repr)[$Box(read($Heap, b#0, _module.Node.right))]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)[$Box(b#0)]);
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, b#0, _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
         && read($Heap, b#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> Set#Equal(read($Heap, b#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(b#0)), 
            (if read($Heap, b#0, _module.Node.left) != null
               then read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, b#0, _module.Node.right) != null
             then read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> Set#Equal(read($Heap, b#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, b#0, _module.Node.value))), 
            (if read($Heap, b#0, _module.Node.left) != null
               then read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, b#0, _module.Node.right) != null
             then read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> (forall i#26: int :: 
        { read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)[$Box(i#26)] } 
        true
           ==> 
          read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)[$Box(i#26)]
           ==> i#26 < read($Heap, b#0, _module.Node.value)));
  requires _module.Node.Valid#canCall($Heap, b#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> (forall i#27: int :: 
        { read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)[$Box(i#27)] } 
        true
           ==> 
          read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)[$Box(i#27)]
           ==> read($Heap, b#0, _module.Node.value) < i#27));
  requires _module.Node.BalanceValid#canCall($Heap, a#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> read($Heap, a#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, a#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, a#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> 
      read($Heap, a#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right)));
  requires _module.Node.BalanceValid#canCall($Heap, b#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> read($Heap, b#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, b#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires _module.Node.BalanceValid#canCall($Heap, b#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> 
      read($Heap, b#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, a#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> read($Heap, a#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, a#0, _module.Node.balance) == LitInt(0)
         || read($Heap, a#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, a#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, a#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, a#0)
     || (a#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, a#0, _module.Node.left)));
  requires _module.Node.Balanced#canCall($Heap, b#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> read($Heap, b#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, b#0, _module.Node.balance) == LitInt(0)
         || read($Heap, b#0, _module.Node.balance) == LitInt(1));
  requires _module.Node.Balanced#canCall($Heap, b#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.right)));
  requires _module.Node.Balanced#canCall($Heap, b#0)
   ==> _module.Node.Balanced($LS($LZ), $Heap, b#0)
     || (b#0 != null
       ==> _module.Node.Balanced($LS($LS($LZ)), $Heap, read($Heap, b#0, _module.Node.left)));
  requires a#0 != null && b#0 != null
   ==> Set#Disjoint(read($Heap, a#0, _module.Node.Repr), read($Heap, b#0, _module.Node.Repr));
  requires a#0 != null
   ==> (forall i#9: int :: 
    { read($Heap, a#0, _module.Node.Contents)[$Box(i#9)] } 
    true
       ==> 
      read($Heap, a#0, _module.Node.Contents)[$Box(i#9)]
       ==> i#9 < read($Heap, x#0, _module.Node.value));
  requires b#0 != null
   ==> (forall i#11: int :: 
    { read($Heap, b#0, _module.Node.Contents)[$Box(i#11)] } 
    true
       ==> 
      read($Heap, b#0, _module.Node.Contents)[$Box(i#11)]
       ==> read($Heap, x#0, _module.Node.value) < i#11);
  requires a#0 != null ==> !read($Heap, a#0, _module.Node.Repr)[$Box(x#0)];
  requires b#0 != null ==> !read($Heap, b#0, _module.Node.Repr)[$Box(x#0)];
  requires d#0
   == _module.Node.Height($LS($LS($LZ)), $Heap, b#0)
     - _module.Node.Height($LS($LS($LZ)), $Heap, a#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Node.Valid#canCall($Heap, x#0)
   && (_module.Node.Valid($LS($LZ), $Heap, x#0)
     ==> _module.Node.BalanceValid#canCall($Heap, x#0));
  free ensures _module.Node.Valid#canCall($Heap, x#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, x#0)
   && (x#0 != null
     ==> read($Heap, x#0, _module.Node.Repr)[$Box(x#0)]
       && !read($Heap, x#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, x#0, _module.Node.left) != null
         ==> read($Heap, x#0, _module.Node.Repr)[$Box(read($Heap, x#0, _module.Node.left))]
           && !read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr)[$Box(x#0)]
           && Set#Subset(read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, x#0, _module.Node.Repr)))
       && (read($Heap, x#0, _module.Node.right) != null
         ==> read($Heap, x#0, _module.Node.Repr)[$Box(read($Heap, x#0, _module.Node.right))]
           && !read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)[$Box(x#0)]
           && Set#Subset(read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, x#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.right))
       && (read($Heap, x#0, _module.Node.right) != null
           && read($Heap, x#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, x#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
            (if read($Heap, x#0, _module.Node.left) != null
               then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, x#0, _module.Node.right) != null
             then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, x#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
            (if read($Heap, x#0, _module.Node.left) != null
               then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, x#0, _module.Node.right) != null
             then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, x#0, _module.Node.left) != null
         ==> (forall i#28: int :: 
          { read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)[$Box(i#28)] } 
          true
             ==> 
            read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)[$Box(i#28)]
             ==> i#28 < read($Heap, x#0, _module.Node.value)))
       && (read($Heap, x#0, _module.Node.right) != null
         ==> (forall i#29: int :: 
          { read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)[$Box(i#29)] } 
          true
             ==> 
            read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)[$Box(i#29)]
             ==> read($Heap, x#0, _module.Node.value) < i#29)));
  free ensures _module.Node.BalanceValid#canCall($Heap, x#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, x#0)
   && (x#0 != null
     ==> read($Heap, x#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, x#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, x#0, _module.Node.left))
       && (read($Heap, x#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.left)))
       && (read($Heap, x#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, x#0, _module.Node.right))));
  free ensures true;
  ensures read($Heap, x#0, _module.Node.balance) == d#0;
  free ensures true;
  ensures read($Heap, x#0, _module.Node.value)
   == read(old($Heap), x#0, _module.Node.value);
  ensures read($Heap, x#0, _module.Node.left) == a#0;
  ensures read($Heap, x#0, _module.Node.right) == b#0;
  free ensures true;
  ensures Set#Equal(read($Heap, x#0, _module.Node.Repr), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Repr)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Repr)
       else Set#Empty(): Set Box)));
  free ensures true;
  ensures Set#Equal(read($Heap, x#0, _module.Node.Contents), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Contents)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Contents)
       else Set#Empty(): Set Box)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == x#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure Impl$$_module.Node.AssembleSingle(a#0: ref
       where $Is(a#0, Tclass._module.Node()) && $IsAlloc(a#0, Tclass._module.Node(), $Heap), 
    b#0: ref
       where $Is(b#0, Tclass._module.Node()) && $IsAlloc(b#0, Tclass._module.Node(), $Heap), 
    x#0: ref
       where $Is(x#0, Tclass._module.Node()) && $IsAlloc(x#0, Tclass._module.Node(), $Heap), 
    d#0: int)
   returns ($_reverifyPost: bool);
  free requires 0 == $ModuleContextHeight && 9 == $FunctionContextHeight;
  // user-defined preconditions
  requires x#0 != null;
  free requires _module.Node.Valid#canCall($Heap, a#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, a#0)
   && (a#0 != null
     ==> read($Heap, a#0, _module.Node.Repr)[$Box(a#0)]
       && !read($Heap, a#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, a#0, _module.Node.left) != null
         ==> read($Heap, a#0, _module.Node.Repr)[$Box(read($Heap, a#0, _module.Node.left))]
           && !read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr)[$Box(a#0)]
           && Set#Subset(read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, a#0, _module.Node.Repr)))
       && (read($Heap, a#0, _module.Node.right) != null
         ==> read($Heap, a#0, _module.Node.Repr)[$Box(read($Heap, a#0, _module.Node.right))]
           && !read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)[$Box(a#0)]
           && Set#Subset(read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, a#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, a#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, a#0, _module.Node.right))
       && (read($Heap, a#0, _module.Node.right) != null
           && read($Heap, a#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, a#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(a#0)), 
            (if read($Heap, a#0, _module.Node.left) != null
               then read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, a#0, _module.Node.right) != null
             then read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, a#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, a#0, _module.Node.value))), 
            (if read($Heap, a#0, _module.Node.left) != null
               then read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, a#0, _module.Node.right) != null
             then read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, a#0, _module.Node.left) != null
         ==> (forall i#30: int :: 
          { read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)[$Box(i#30)] } 
          true
             ==> 
            read($Heap, read($Heap, a#0, _module.Node.left), _module.Node.Contents)[$Box(i#30)]
             ==> i#30 < read($Heap, a#0, _module.Node.value)))
       && (read($Heap, a#0, _module.Node.right) != null
         ==> (forall i#31: int :: 
          { read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)[$Box(i#31)] } 
          true
             ==> 
            read($Heap, read($Heap, a#0, _module.Node.right), _module.Node.Contents)[$Box(i#31)]
             ==> read($Heap, a#0, _module.Node.value) < i#31)));
  free requires _module.Node.Valid#canCall($Heap, b#0)
   && 
  _module.Node.Valid($LS($LZ), $Heap, b#0)
   && (b#0 != null
     ==> read($Heap, b#0, _module.Node.Repr)[$Box(b#0)]
       && !read($Heap, b#0, _module.Node.Repr)[$Box(null)]
       && (read($Heap, b#0, _module.Node.left) != null
         ==> read($Heap, b#0, _module.Node.Repr)[$Box(read($Heap, b#0, _module.Node.left))]
           && !read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr)[$Box(b#0)]
           && Set#Subset(read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr), 
            read($Heap, b#0, _module.Node.Repr)))
       && (read($Heap, b#0, _module.Node.right) != null
         ==> read($Heap, b#0, _module.Node.Repr)[$Box(read($Heap, b#0, _module.Node.right))]
           && !read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)[$Box(b#0)]
           && Set#Subset(read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr), 
            read($Heap, b#0, _module.Node.Repr)))
       && 
      _module.Node.Valid($LS($LZ), $Heap, read($Heap, b#0, _module.Node.left))
       && _module.Node.Valid($LS($LZ), $Heap, read($Heap, b#0, _module.Node.right))
       && (read($Heap, b#0, _module.Node.right) != null
           && read($Heap, b#0, _module.Node.left) != null
         ==> Set#Disjoint(read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr), 
          read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)))
       && Set#Equal(read($Heap, b#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(b#0)), 
            (if read($Heap, b#0, _module.Node.left) != null
               then read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, b#0, _module.Node.right) != null
             then read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box)))
       && Set#Equal(read($Heap, b#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, b#0, _module.Node.value))), 
            (if read($Heap, b#0, _module.Node.left) != null
               then read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, b#0, _module.Node.right) != null
             then read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box)))
       && (read($Heap, b#0, _module.Node.left) != null
         ==> (forall i#32: int :: 
          { read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)[$Box(i#32)] } 
          true
             ==> 
            read($Heap, read($Heap, b#0, _module.Node.left), _module.Node.Contents)[$Box(i#32)]
             ==> i#32 < read($Heap, b#0, _module.Node.value)))
       && (read($Heap, b#0, _module.Node.right) != null
         ==> (forall i#33: int :: 
          { read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)[$Box(i#33)] } 
          true
             ==> 
            read($Heap, read($Heap, b#0, _module.Node.right), _module.Node.Contents)[$Box(i#33)]
             ==> read($Heap, b#0, _module.Node.value) < i#33)));
  free requires _module.Node.BalanceValid#canCall($Heap, a#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, a#0)
   && (a#0 != null
     ==> read($Heap, a#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, a#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, a#0, _module.Node.left))
       && (read($Heap, a#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, a#0, _module.Node.left)))
       && (read($Heap, a#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, a#0, _module.Node.right))));
  free requires _module.Node.BalanceValid#canCall($Heap, b#0)
   && 
  _module.Node.BalanceValid($LS($LZ), $Heap, b#0)
   && (b#0 != null
     ==> read($Heap, b#0, _module.Node.balance)
         == _module.Node.Height($LS($LZ), $Heap, read($Heap, b#0, _module.Node.right))
           - _module.Node.Height($LS($LZ), $Heap, read($Heap, b#0, _module.Node.left))
       && (read($Heap, b#0, _module.Node.left) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, b#0, _module.Node.left)))
       && (read($Heap, b#0, _module.Node.right) != null
         ==> _module.Node.BalanceValid($LS($LZ), $Heap, read($Heap, b#0, _module.Node.right))));
  free requires _module.Node.Balanced#canCall($Heap, a#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, a#0)
   && (a#0 != null
     ==> (
        read($Heap, a#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, a#0, _module.Node.balance) == LitInt(0)
         || read($Heap, a#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, a#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, a#0, _module.Node.left)));
  free requires _module.Node.Balanced#canCall($Heap, b#0)
   && 
  _module.Node.Balanced($LS($LZ), $Heap, b#0)
   && (b#0 != null
     ==> (
        read($Heap, b#0, _module.Node.balance) == LitInt(0 - 1)
         || read($Heap, b#0, _module.Node.balance) == LitInt(0)
         || read($Heap, b#0, _module.Node.balance) == LitInt(1))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, b#0, _module.Node.right))
       && _module.Node.Balanced($LS($LZ), $Heap, read($Heap, b#0, _module.Node.left)));
  requires a#0 != null && b#0 != null
   ==> Set#Disjoint(read($Heap, a#0, _module.Node.Repr), read($Heap, b#0, _module.Node.Repr));
  requires a#0 != null
   ==> (forall i#9: int :: 
    { read($Heap, a#0, _module.Node.Contents)[$Box(i#9)] } 
    true
       ==> 
      read($Heap, a#0, _module.Node.Contents)[$Box(i#9)]
       ==> i#9 < read($Heap, x#0, _module.Node.value));
  requires b#0 != null
   ==> (forall i#11: int :: 
    { read($Heap, b#0, _module.Node.Contents)[$Box(i#11)] } 
    true
       ==> 
      read($Heap, b#0, _module.Node.Contents)[$Box(i#11)]
       ==> read($Heap, x#0, _module.Node.value) < i#11);
  requires a#0 != null ==> !read($Heap, a#0, _module.Node.Repr)[$Box(x#0)];
  requires b#0 != null ==> !read($Heap, b#0, _module.Node.Repr)[$Box(x#0)];
  requires d#0
   == _module.Node.Height($LS($LS($LZ)), $Heap, b#0)
     - _module.Node.Height($LS($LS($LZ)), $Heap, a#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _module.Node.Valid#canCall($Heap, x#0)
   && (_module.Node.Valid($LS($LZ), $Heap, x#0)
     ==> _module.Node.BalanceValid#canCall($Heap, x#0));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null ==> read($Heap, x#0, _module.Node.Repr)[$Box(x#0)]);
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null ==> !read($Heap, x#0, _module.Node.Repr)[$Box(null)]);
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.left) != null
       ==> read($Heap, x#0, _module.Node.Repr)[$Box(read($Heap, x#0, _module.Node.left))]);
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.left) != null
       ==> !read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr)[$Box(x#0)]);
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.left) != null
       ==> Set#Subset(read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, x#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.right) != null
       ==> read($Heap, x#0, _module.Node.Repr)[$Box(read($Heap, x#0, _module.Node.right))]);
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.right) != null
       ==> !read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)[$Box(x#0)]);
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.right) != null
       ==> Set#Subset(read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr), 
        read($Heap, x#0, _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, x#0, _module.Node.left)));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> _module.Node.Valid($LS($LS($LZ)), $Heap, read($Heap, x#0, _module.Node.right)));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.right) != null
         && read($Heap, x#0, _module.Node.left) != null
       ==> Set#Disjoint(read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr), 
        read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> Set#Equal(read($Heap, x#0, _module.Node.Repr), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
            (if read($Heap, x#0, _module.Node.left) != null
               then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr)
               else Set#Empty(): Set Box)), 
          (if read($Heap, x#0, _module.Node.right) != null
             then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> Set#Equal(read($Heap, x#0, _module.Node.Contents), 
        Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
            (if read($Heap, x#0, _module.Node.left) != null
               then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)
               else Set#Empty(): Set Box)), 
          (if read($Heap, x#0, _module.Node.right) != null
             then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)
             else Set#Empty(): Set Box))));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.left) != null
       ==> (forall i#34: int :: 
        { read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)[$Box(i#34)] } 
        true
           ==> 
          read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)[$Box(i#34)]
           ==> i#34 < read($Heap, x#0, _module.Node.value)));
  ensures _module.Node.Valid#canCall($Heap, x#0)
   ==> _module.Node.Valid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.right) != null
       ==> (forall i#35: int :: 
        { read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)[$Box(i#35)] } 
        true
           ==> 
          read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)[$Box(i#35)]
           ==> read($Heap, x#0, _module.Node.value) < i#35));
  ensures _module.Node.BalanceValid#canCall($Heap, x#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> read($Heap, x#0, _module.Node.balance)
         == _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, x#0, _module.Node.right))
           - _module.Node.Height($LS($LS($LZ)), $Heap, read($Heap, x#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, x#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.left) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, x#0, _module.Node.left)));
  ensures _module.Node.BalanceValid#canCall($Heap, x#0)
   ==> _module.Node.BalanceValid($LS($LZ), $Heap, x#0)
     || (x#0 != null
       ==> 
      read($Heap, x#0, _module.Node.right) != null
       ==> _module.Node.BalanceValid($LS($LS($LZ)), $Heap, read($Heap, x#0, _module.Node.right)));
  free ensures true;
  ensures read($Heap, x#0, _module.Node.balance) == d#0;
  free ensures true;
  ensures read($Heap, x#0, _module.Node.value)
   == read(old($Heap), x#0, _module.Node.value);
  ensures read($Heap, x#0, _module.Node.left) == a#0;
  ensures read($Heap, x#0, _module.Node.right) == b#0;
  free ensures true;
  ensures Set#Equal(read($Heap, x#0, _module.Node.Repr), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Repr)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Repr)
       else Set#Empty(): Set Box)));
  free ensures true;
  ensures Set#Equal(read($Heap, x#0, _module.Node.Contents), 
  Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
      (if a#0 != null
         then read($Heap, a#0, _module.Node.Contents)
         else Set#Empty(): Set Box)), 
    (if b#0 != null
       then read($Heap, b#0, _module.Node.Contents)
       else Set#Empty(): Set Box)));
  // frame condition
  free ensures (forall<alpha> $o: ref, $f: Field alpha :: 
  { read($Heap, $o, $f) } 
  $o != null && read(old($Heap), $o, alloc)
     ==> read($Heap, $o, $f) == read(old($Heap), $o, $f) || $o == x#0);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation Impl$$_module.Node.AssembleSingle(a#0: ref, b#0: ref, x#0: ref, d#0: int) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var $rhs#0: ref
   where $Is($rhs#0, Tclass._module.Node())
     && $IsAlloc($rhs#0, Tclass._module.Node(), $Heap);
  var $rhs#1: ref
   where $Is($rhs#1, Tclass._module.Node())
     && $IsAlloc($rhs#1, Tclass._module.Node(), $Heap);
  var $rhs#2: Set Box
   where $Is($rhs#2, TSet(TInt)) && $IsAlloc($rhs#2, TSet(TInt), $Heap);
  var $rhs#3: Set Box
   where $Is($rhs#3, TSet(Tclass._module.Node()))
     && $IsAlloc($rhs#3, TSet(Tclass._module.Node()), $Heap);
  var $rhs#4: int;

    // AddMethodImpl: AssembleSingle, Impl$$_module.Node.AssembleSingle
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> $o == x#0);
    assume {:captureState "AVLTree.dfy(341,4): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- AVLTree.dfy(342,14)
    assert x#0 != null;
    assume true;
    assert $_Frame[x#0, _module.Node.left];
    assume true;
    assert true;
    $rhs#0 := a#0;
    $Heap := update($Heap, x#0, _module.Node.left, $rhs#0);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(342,18)"} true;
    // ----- assignment statement ----- AVLTree.dfy(343,15)
    assert x#0 != null;
    assume true;
    assert $_Frame[x#0, _module.Node.right];
    assume true;
    assert true;
    $rhs#1 := b#0;
    $Heap := update($Heap, x#0, _module.Node.right, $rhs#1);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(343,19)"} true;
    // ----- assignment statement ----- AVLTree.dfy(344,18)
    assert x#0 != null;
    assume true;
    assert $_Frame[x#0, _module.Node.Contents];
    assert x#0 != null;
    assert x#0 != null;
    if (read($Heap, x#0, _module.Node.left) != null)
    {
        assert x#0 != null;
        assert read($Heap, x#0, _module.Node.left) != null;
    }
    else
    {
    }

    assert x#0 != null;
    if (read($Heap, x#0, _module.Node.right) != null)
    {
        assert x#0 != null;
        assert read($Heap, x#0, _module.Node.right) != null;
    }
    else
    {
    }

    assume true;
    assert true;
    $rhs#2 := Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(read($Heap, x#0, _module.Node.value))), 
    (if read($Heap, x#0, _module.Node.left) != null
       then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Contents)
       else Set#Empty(): Set Box)), 
  (if read($Heap, x#0, _module.Node.right) != null
     then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Contents)
     else Set#Empty(): Set Box));
    $Heap := update($Heap, x#0, _module.Node.Contents, $rhs#2);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(345,83)"} true;
    // ----- assignment statement ----- AVLTree.dfy(346,14)
    assert x#0 != null;
    assume true;
    assert $_Frame[x#0, _module.Node.Repr];
    assert x#0 != null;
    if (read($Heap, x#0, _module.Node.left) != null)
    {
        assert x#0 != null;
        assert read($Heap, x#0, _module.Node.left) != null;
    }
    else
    {
    }

    assert x#0 != null;
    if (read($Heap, x#0, _module.Node.right) != null)
    {
        assert x#0 != null;
        assert read($Heap, x#0, _module.Node.right) != null;
    }
    else
    {
    }

    assume true;
    assert true;
    $rhs#3 := Set#Union(Set#Union(Set#UnionOne(Set#Empty(): Set Box, $Box(x#0)), 
    (if read($Heap, x#0, _module.Node.left) != null
       then read($Heap, read($Heap, x#0, _module.Node.left), _module.Node.Repr)
       else Set#Empty(): Set Box)), 
  (if read($Heap, x#0, _module.Node.right) != null
     then read($Heap, read($Heap, x#0, _module.Node.right), _module.Node.Repr)
     else Set#Empty(): Set Box));
    $Heap := update($Heap, x#0, _module.Node.Repr, $rhs#3);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(347,69)"} true;
    // ----- assignment statement ----- AVLTree.dfy(348,17)
    assert x#0 != null;
    assume true;
    assert $_Frame[x#0, _module.Node.balance];
    assume true;
    assert true;
    $rhs#4 := d#0;
    $Heap := update($Heap, x#0, _module.Node.balance, $rhs#4);
    assume $IsGoodHeap($Heap);
    assume {:captureState "AVLTree.dfy(348,21)"} true;
}



const unique class._module.Math: ClassName;

function Tclass._module.Math() : Ty;

// Tclass._module.Math Tag
axiom Tag(Tclass._module.Math()) == Tagclass._module.Math;

const unique Tagclass._module.Math: TyTag;

// Box/unbox axiom for Tclass._module.Math
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Math()) } 
  $IsBox(bx, Tclass._module.Math())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.Math()));

// Math: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.Math()) } 
  $Is($o, Tclass._module.Math())
     <==> $o == null || dtype($o) == Tclass._module.Math());

// Math: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.Math(), $h) } 
  $IsAlloc($o, Tclass._module.Math(), $h) <==> $o == null || read($h, $o, alloc));

// function declaration for _module.Math.max
function _module.Math.max($ly: LayerType, $heap: Heap, a#0: int, b#0: int) : int;

function _module.Math.max#canCall($heap: Heap, a#0: int, b#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $Heap: Heap, a#0: int, b#0: int :: 
  { _module.Math.max($LS($ly), $Heap, a#0, b#0) } 
  _module.Math.max($LS($ly), $Heap, a#0, b#0)
     == _module.Math.max($ly, $Heap, a#0, b#0));

// frame axiom for _module.Math.max
axiom (forall $ly: LayerType, $h0: Heap, $h1: Heap, a#0: int, b#0: int :: 
  { $IsHeapAnchor($h0), $HeapSucc($h0, $h1), _module.Math.max($ly, $h1, a#0, b#0) } 
  $IsGoodHeap($h0)
       && $IsGoodHeap($h1)
       && 
      (_module.Math.max#canCall($h0, a#0, b#0) || (0 <= a#0 && 0 <= b#0))
       && (_module.Math.max#canCall($h1, a#0, b#0) || (0 <= a#0 && 0 <= b#0))
       && 
      $IsHeapAnchor($h0)
       && $HeapSucc($h0, $h1)
     ==> 
    (forall<alpha> $o: ref, $f: Field alpha :: 
      false ==> read($h0, $o, $f) == read($h1, $o, $f))
     ==> _module.Math.max($ly, $h0, a#0, b#0) == _module.Math.max($ly, $h1, a#0, b#0));

// consequence axiom for _module.Math.max
axiom 0 < $ModuleContextHeight
     || (0 == $ModuleContextHeight && 1 <= $FunctionContextHeight)
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: int, b#0: int :: 
    { _module.Math.max($LS($ly), $Heap, a#0, b#0) } 
    _module.Math.max#canCall($Heap, a#0, b#0)
         || ((0 != $ModuleContextHeight || 1 != $FunctionContextHeight)
           && 
          $IsGoodHeap($Heap)
           && 0 <= a#0
           && 0 <= b#0)
       ==> (a#0 == b#0
           ==> _module.Math.max($LS($LZ), $Heap, a#0, b#0) == a#0 && a#0 == b#0)
         && 
        a#0 <= _module.Math.max($LS($LZ), $Heap, a#0, b#0)
         && b#0 <= _module.Math.max($LS($LZ), $Heap, a#0, b#0)
         && 0 <= _module.Math.max($LS($ly), $Heap, a#0, b#0));

function _module.Math.max#requires(LayerType, Heap, int, int) : bool;

axiom (forall $ly: LayerType, $Heap: Heap, a#0: int, b#0: int :: 
  { _module.Math.max#requires($ly, $Heap, a#0, b#0) } 
  $IsGoodHeap($Heap) && 0 <= a#0 && 0 <= b#0
     ==> _module.Math.max#requires($ly, $Heap, a#0, b#0) == true);

// definition axiom for _module.Math.max (intra-module)
axiom 0 == $ModuleContextHeight && 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: int, b#0: int :: 
    { _module.Math.max($LS($ly), $Heap, a#0, b#0) } 
    _module.Math.max#canCall($Heap, a#0, b#0)
         || (1 != $FunctionContextHeight && $IsGoodHeap($Heap) && 0 <= a#0 && 0 <= b#0)
       ==> _module.Math.max($LS($ly), $Heap, a#0, b#0) == (if a#0 < b#0 then b#0 else a#0));

// definition axiom for _module.Math.max for all literals (intra-module)
axiom 0 == $ModuleContextHeight && 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: int, b#0: int :: 
    {:weight 3} { _module.Math.max($ly, $Heap, LitInt(a#0), LitInt(b#0)) } 
    _module.Math.max#canCall($Heap, LitInt(a#0), LitInt(b#0))
         || (1 != $FunctionContextHeight && $IsGoodHeap($Heap) && 0 <= a#0 && 0 <= b#0)
       ==> _module.Math.max($ly, $Heap, LitInt(a#0), LitInt(b#0))
         == (if a#0 < b#0 then b#0 else a#0));

// definition axiom for _module.Math.max (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: int, b#0: int :: 
    { _module.Math.max($LS($ly), $Heap, a#0, b#0) } 
    _module.Math.max#canCall($Heap, a#0, b#0)
         || ($IsGoodHeap($Heap) && 0 <= a#0 && 0 <= b#0)
       ==> _module.Math.max($LS($ly), $Heap, a#0, b#0) == (if a#0 < b#0 then b#0 else a#0));

// definition axiom for _module.Math.max for all literals (foreign modules)
axiom 0 < $ModuleContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, a#0: int, b#0: int :: 
    {:weight 3} { _module.Math.max($ly, $Heap, LitInt(a#0), LitInt(b#0)) } 
    _module.Math.max#canCall($Heap, LitInt(a#0), LitInt(b#0))
         || ($IsGoodHeap($Heap) && 0 <= a#0 && 0 <= b#0)
       ==> _module.Math.max($ly, $Heap, LitInt(a#0), LitInt(b#0))
         == (if a#0 < b#0 then b#0 else a#0));

procedure CheckWellformed$$_module.Math.max(a#0: int where 0 <= a#0, b#0: int where 0 <= b#0);
  free requires 0 == $ModuleContextHeight && 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  ensures a#0 == b#0 ==> _module.Math.max($LS($LS($LZ)), $Heap, a#0, b#0) == a#0;
  ensures a#0 == b#0 ==> a#0 == b#0;
  ensures a#0 <= _module.Math.max($LS($LS($LZ)), $Heap, a#0, b#0);
  ensures b#0 <= _module.Math.max($LS($LS($LZ)), $Heap, a#0, b#0);



implementation CheckWellformed$$_module.Math.max(a#0: int, b#0: int)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##a#0: int;
  var ##b#0: int;
  var ##a#1: int;
  var ##b#1: int;
  var ##a#2: int;
  var ##b#2: int;


    // AddWellformednessCheck for function max
    assume {:captureState "AVLTree.dfy(354,19): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
    if (*)
    {
        assume 0 <= _module.Math.max($LS($LZ), $Heap, a#0, b#0);
        if (*)
        {
            assume a#0 == b#0;
            assert $Is(a#0, TNat);
            ##a#0 := a#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#0, TNat, $Heap);
            assert $Is(b#0, TNat);
            ##b#0 := b#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##b#0, TNat, $Heap);
            assert 0 <= a#0 || ##a#0 == a#0;
            assert 0 <= b#0 || ##a#0 < a#0 || ##b#0 == b#0;
            assert (a#0 == a#0 && b#0 == b#0) || ##a#0 < a#0 || (##a#0 == a#0 && ##b#0 < b#0);
            assume (a#0 == a#0 && b#0 == b#0) || _module.Math.max#canCall($Heap, a#0, b#0);
            if (_module.Math.max($LS($LZ), $Heap, a#0, b#0) == a#0)
            {
            }

            assume _module.Math.max($LS($LZ), $Heap, a#0, b#0) == a#0 && a#0 == b#0;
        }
        else
        {
            assume a#0 == b#0 ==> _module.Math.max($LS($LZ), $Heap, a#0, b#0) == a#0 && a#0 == b#0;
        }

        assert $Is(a#0, TNat);
        ##a#1 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##a#1, TNat, $Heap);
        assert $Is(b#0, TNat);
        ##b#1 := b#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#1, TNat, $Heap);
        assert 0 <= a#0 || ##a#1 == a#0;
        assert 0 <= b#0 || ##a#1 < a#0 || ##b#1 == b#0;
        assert (a#0 == a#0 && b#0 == b#0) || ##a#1 < a#0 || (##a#1 == a#0 && ##b#1 < b#0);
        assume (a#0 == a#0 && b#0 == b#0) || _module.Math.max#canCall($Heap, a#0, b#0);
        assume a#0 <= _module.Math.max($LS($LZ), $Heap, a#0, b#0);
        assert $Is(a#0, TNat);
        ##a#2 := a#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##a#2, TNat, $Heap);
        assert $Is(b#0, TNat);
        ##b#2 := b#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##b#2, TNat, $Heap);
        assert 0 <= a#0 || ##a#2 == a#0;
        assert 0 <= b#0 || ##a#2 < a#0 || ##b#2 == b#0;
        assert (a#0 == a#0 && b#0 == b#0) || ##a#2 < a#0 || (##a#2 == a#0 && ##b#2 < b#0);
        assume (a#0 == a#0 && b#0 == b#0) || _module.Math.max#canCall($Heap, a#0, b#0);
        assume b#0 <= _module.Math.max($LS($LZ), $Heap, a#0, b#0);
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
  $o != null && read($Heap, $o, alloc) ==> false);
        if (a#0 < b#0)
        {
            assert $Is(b#0, TNat);
            assume _module.Math.max($LS($LZ), $Heap, a#0, b#0) == b#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.Math.max($LS($LZ), $Heap, a#0, b#0), TNat, $Heap);
            assume $Is(_module.Math.max($LS($LZ), $Heap, a#0, b#0), TNat);
        }
        else
        {
            assert $Is(a#0, TNat);
            assume _module.Math.max($LS($LZ), $Heap, a#0, b#0) == a#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsAlloc(_module.Math.max($LS($LZ), $Heap, a#0, b#0), TNat, $Heap);
            assume $Is(_module.Math.max($LS($LZ), $Heap, a#0, b#0), TNat);
        }
    }
}



const unique class._module.__default: ClassName;

function Tclass._module.__default() : Ty;

// Tclass._module.__default Tag
axiom Tag(Tclass._module.__default()) == Tagclass._module.__default;

const unique Tagclass._module.__default: TyTag;

// Box/unbox axiom for Tclass._module.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.__default()) } 
  $IsBox(bx, Tclass._module.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._module.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._module.__default()) } 
  $Is($o, Tclass._module.__default())
     <==> $o == null || dtype($o) == Tclass._module.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._module.__default(), $h) } 
  $IsAlloc($o, Tclass._module.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

const unique field$root: NameFamily;

const unique field$Contents: NameFamily;

const unique field$Repr: NameFamily;

const unique field$left: NameFamily;

const unique field$right: NameFamily;

const unique field$value: NameFamily;

const unique field$balance: NameFamily;
