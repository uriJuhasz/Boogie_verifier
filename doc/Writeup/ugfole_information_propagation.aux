\relax 
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Information Propagation}{63}}
\newlabel{section:ugfole:propagation}{{3.3}{63}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}A verification algorithm}{63}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.24}{\ignorespaces Number of read-over-write axiom instantiations with branch-join pairs.\relax }}{64}}
\newlabel{fig_diamond_ROW}{{3.24}{64}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}Clause propagation criteria}{66}}
\newlabel{section:superposition_based_propagation}{{3.3.2}{66}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.25}{\ignorespaces Verification algorithm with lazy propagation  \relax }}{67}}
\newlabel{verification_algorithm_v2}{{3.25}{67}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.26}{\ignorespaces Basic clause propagation  The implementation of \lstinline |traverseBF| is shown in figure 3.27\hbox {}.  The clause propagation algorithm first traverses the CFG in reverse topological order, starting at the current node. The traversal stops at any CFG-node that already has all relevant clauses cached.  After the reverse traversal, the algorithm traverses the CFG forward, propagating relativized clauses and updating the cache. \relax }}{67}}
\newlabel{clause_import_global}{{3.26}{67}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.27}{\ignorespaces CFG traversal back and forth  The implementation is shown only to clarify any ambiguities.  The algorithm traverses the CFG backwards from \lstinline |n|, calling \lstinline |bVisitor| on each node traversed.  \lstinline |bVisitor| returns the set of predecessors relevant for traversal - if none are returned then traversal does not continue beyond the node (in a DAG a branch node may be relevant for only one successor, in which case it is traversed.)  The algorithm then traverses forward from each node where traversal ended, calling \lstinline |fVisitor|. \relax }}{68}}
\newlabel{fig_traverseBF}{{3.27}{68}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.28}{\ignorespaces The unit ground superposition calculus \ensuremath  {\mathbf  {SP_{gu}}}  Maximal literals are underlined for clarity\relax }}{68}}
\newlabel{gusp_calculus}{{3.28}{68}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.29}{\ignorespaces Propagation condition comparison with joins\relax }}{72}}
\newlabel{snippet3.14.0}{{3.29}{72}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Ground unit equality propagation}{74}}
\newlabel{section:ugfole:sources}{{3.3.3}{75}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.30}{\ignorespaces propagation sources  The state before $\ensuremath  {\mathrm  {n_2.}}$\lstinline |makeTerm(f([b]))|  We list the sources for each EC at each CFG-node.  The source invariant holds for the above example. \relax }}{76}}
\newlabel{snippet3.16b}{{3.30}{76}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.4}Propagation using sources}{77}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.31}{\ignorespaces  Source edges  We omit tuples as we only use unary functions.  Dashed arrows represent dis-equalities.  \leavevmode {\color  {blue} Blue dashed arrows} represent source edges. \relax }}{78}}
\newlabel{snippet3.16b_graph}{{3.31}{78}}
\newlabel{snippet3.17_graph}{{3.32a}{79}}
\newlabel{sub@snippet3.17_graph}{{a}{79}}
\newlabel{snippet3.17_graph.1}{{3.32b}{79}}
\newlabel{sub@snippet3.17_graph.1}{{b}{79}}
\newlabel{snippet3.17_graph.2}{{3.32c}{79}}
\newlabel{sub@snippet3.17_graph.2}{{c}{79}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.32}{\ignorespaces Example for the propagation invariant  Missing parts of the graph are in red\relax }}{79}}
\newlabel{snippet3.18_graph.0}{{3.33a}{81}}
\newlabel{sub@snippet3.18_graph.0}{{a}{81}}
\newlabel{snippet3.18_graph.1}{{3.33b}{81}}
\newlabel{sub@snippet3.18_graph.1}{{b}{81}}
\newlabel{snippet3.18_graph.2}{{3.33c}{81}}
\newlabel{sub@snippet3.18_graph.2}{{c}{81}}
\newlabel{snippet3.18_graph.3}{{3.33d}{81}}
\newlabel{sub@snippet3.18_graph.3}{{d}{81}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.33}{\ignorespaces Example for deep propagation\relax }}{81}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.34}{\ignorespaces propagation sources  The state before $\ensuremath  {\mathrm  {n_2.}}$\lstinline |makeTerm(f([b]))|  The local source correctness invariant holds for the above example. \relax }}{82}}
\newlabel{snippet3.16c}{{3.34}{82}}
\newlabel{snippet3.16c_graph.0}{{3.35a}{83}}
\newlabel{sub@snippet3.16c_graph.0}{{a}{83}}
\newlabel{snippet3.16c_graph.1}{{3.35b}{83}}
\newlabel{sub@snippet3.16c_graph.1}{{b}{83}}
\newlabel{snippet3.16c_graph.2}{{3.35c}{83}}
\newlabel{sub@snippet3.16c_graph.2}{{c}{83}}
\newlabel{snippet3.16c_graph.3}{{3.35d}{83}}
\newlabel{sub@snippet3.16c_graph.3}{{d}{83}}
\newlabel{snippet3.16c_graph.4}{{3.35e}{83}}
\newlabel{sub@snippet3.16c_graph.4}{{e}{83}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.35}{\ignorespaces .  \leavevmode {\color  {gray}Gray dashed circles} represent RGFAs{}.  \leavevmode {\color  {gray}Gray dashed arrows} represent source edges to RGFAs{}   (only for illustration, not actually included in data structure)\relax }}{83}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.5}The equality propagation algorithm}{85}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.36}{\ignorespaces The algorithm for \lstinline |makeTerm|  The method checks if the GFA{} already exists, and otherwise creates a new singleton GT{} and invokes the main loop \relax }}{86}}
\newlabel{EC_makeTerm}{{3.36}{86}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.37}{\ignorespaces The algorithm for \lstinline |assumeEqual|  \relax }}{87}}
\newlabel{EC_assumeEqual}{{3.37}{87}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.38}{\ignorespaces The algorithm for \lstinline |update|  The inputs are the set of predecessor GTs{} updated (that is, that have been merged with another GT{} or have had a GFA{} added) and the set of new GTs{} added to \ensuremath  {\mathrm  {g_p}}. \relax }}{87}}
\newlabel{EC_update}{{3.38}{87}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.39}{\ignorespaces The algorithm for \lstinline |mainLoop|  The algorithm processes both queues until no work is left. Merging is done as shown for the monolithic EC-graph. \relax }}{88}}
\newlabel{EC_mainLoop}{{3.39}{88}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.40}{\ignorespaces The algorithm for propagating changes from a GT{}  New sources may add new GFAs{} and vice-versa.  After all GFAs{} and sources are added,   we propagate source information to super-terms.  The methods \lstinline |addSource| and \lstinline |addGFA| are detailed in figure 3.41\hbox {}. \relax }}{89}}
\newlabel{EC_propagate_GT}{{3.40}{89}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.41}{\ignorespaces Helper functions for the propagation algorithm  \relax }}{89}}
\newlabel{EC_propagate_helpers}{{3.41}{89}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.42}{\ignorespaces The algorithm for \lstinline |requestGTs|  The method \lstinline |requestGTs(f,tts)| propagates equality information for all terms in f(tt) for tt$\in $tts.  \relax }}{90}}
\newlabel{EC_propagate_request}{{3.42}{90}}
\newlabel{fig_makeTerm_up_down.0}{{3.43a}{92}}
\newlabel{sub@fig_makeTerm_up_down.0}{{a}{92}}
\newlabel{fig_makeTerm_up_down.1}{{3.43b}{92}}
\newlabel{sub@fig_makeTerm_up_down.1}{{b}{92}}
\newlabel{fig_makeTerm_up_down.2}{{3.43c}{92}}
\newlabel{sub@fig_makeTerm_up_down.2}{{c}{92}}
\newlabel{fig_makeTerm_up_down.3}{{3.43d}{92}}
\newlabel{sub@fig_makeTerm_up_down.3}{{d}{92}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.44}{\ignorespaces  The final state \relax }}{93}}
\newlabel{fig_makeTerm_up_down.4}{{3.44}{93}}
\@setckpt{ugfole_information_propagation}{
\setcounter{page}{94}
\setcounter{equation}{0}
\setcounter{enumi}{0}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{3}
\setcounter{section}{3}
\setcounter{subsection}{5}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{44}
\setcounter{table}{0}
\setcounter{parentequation}{0}
\setcounter{lstnumber}{1}
\setcounter{ContinuedFloat}{0}
\setcounter{float@type}{8}
\setcounter{subfigure}{0}
\setcounter{subtable}{0}
\setcounter{theorem}{0}
\setcounter{definition}{0}
\setcounter{lstlisting}{0}
}
